private static org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VideoRAMSettings selectVideoRAMSettings(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { org.ovirt.engine.core.compat.Version clusterVersion = org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion(vmBase); if (clusterVersion == null) { clusterVersion = org.ovirt.engine.core.compat.Version.getLast(); } if (clusterVersion.greaterOrEquals(new org.ovirt.engine.core.compat.Version(3, 6))) { return new org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VgamemVideoRAMSettings(); } else { return new org.ovirt.engine.core.bll.utils.VideoDeviceSettings.LegacyVideoRAMSettings(); } }	private static org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VideoRAMSettings selectVideoRAMSettings(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { if (org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion(vmBase).greaterOrEquals(new org.ovirt.engine.core.compat.Version(3, 6))) { return new org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VgamemVideoRAMSettings(); } else { return new org.ovirt.engine.core.bll.utils.VideoDeviceSettings.LegacyVideoRAMSettings(); } }
@org.junit.experimental.theories.Theory public void updateRepository_HA_VM_DOWN(org.ovirt.engine.core.vdsbroker.VmTestPairs data) { initMocks(data, false); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up))); assumeTrue(data.dbVm().isAutoStartup()); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); vmAnalyzer.analyze(); verify(vmsMonitoring, atLeastOnce()).addVmDynamicToList(data.dbVm().getDynamicData()); <START_MOD>assertFalse(((vmAnalyzer.getVmStatisticsToSave()) == null<END_MOD>)); assertTrue(data.dbVm().getRunOnVds().equals(VmTestPairs.SRC_HOST_ID)); assertTrue(((data.vdsmVm().getVmDynamic().getRunOnVds()) == null)); assertFalse(vmAnalyzer.isRerun()); assertTrue(vmAnalyzer.isAutoVmToRun()); assertTrue(((data.dbVm().getMigratingToVds()) == null)); }	@org.junit.experimental.theories.Theory public void updateRepository_HA_VM_DOWN(org.ovirt.engine.core.vdsbroker.VmTestPairs data) { initMocks(data, false); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up))); assumeTrue(data.dbVm().isAutoStartup()); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); vmAnalyzer.analyze(); verify(vmsMonitoring, atLeastOnce()).addVmDynamicToList(data.dbVm().getDynamicData()); assertNotNull(vmAnalyzer.getVmStatisticsToSave()); assertTrue(data.dbVm().getRunOnVds().equals(VmTestPairs.SRC_HOST_ID)); assertNull(data.vdsmVm().getVmDynamic().getRunOnVds()); assertFalse(vmAnalyzer.isRerun()); assertTrue(vmAnalyzer.isAutoVmToRun()); assertNull(data.dbVm().getMigratingToVds()); }
@org.junit.experimental.theories.Theory public void updateRepository_MIGRATION_FROM_TO_DOWN(org.ovirt.engine.core.vdsbroker.VmTestPairs data) { initMocks(data, true); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); verify(vmsMonitoring.getResourceManager(), times(1)).internalSetVmStatus(data.dbVm(), VMStatus.MigratingTo); verify(vmsMonitoring, atLeastOnce()).addVmDynamicToList(data.dbVm().getDynamicData()); <START_MOD>assertFalse(((vmAnalyzer.getVmStatisticsToSave()) == null<END_MOD>)); assertTrue(data.dbVm().getRunOnVds().equals(VmTestPairs.DST_HOST_ID)); }	@org.junit.experimental.theories.Theory public void updateRepository_MIGRATION_FROM_TO_DOWN(org.ovirt.engine.core.vdsbroker.VmTestPairs data) { initMocks(data, true); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); verify(vmsMonitoring.getResourceManager(), times(1)).internalSetVmStatus(data.dbVm(), VMStatus.MigratingTo); verify(vmsMonitoring, atLeastOnce()).addVmDynamicToList(data.dbVm().getDynamicData()); assertNotNull(vmAnalyzer.getVmStatisticsToSave()); assertTrue(data.dbVm().getRunOnVds().equals(VmTestPairs.DST_HOST_ID)); }
public java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics> getVmNetworkStatistics() { return saveVmInterfaces ? dbVm.getInterfaces().stream().map(( nic) -> nic.getStatistics()).collect(java.util.stream.Collectors.toList()) : java.util.Collections.emptyList(); }	public java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics> getVmNetworkStatistics() { return saveVmInterfaces ? dbVm.getInterfaces().stream().map(VmNetworkInterface::getStatistics).collect(java.util.stream.Collectors.toList()) : java.util.Collections.emptyList(); }
private java.lang.String clustersListIntoTokenizedString() { java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> attachedClustersList = getVdsGroupDao().getClustersByClusterPolicyId(getParameters().getClusterPolicyId()); java.util.List<java.lang.String> clusterNamesList = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup : attachedClustersList) <START_MOD>{ <END_MOD>clusterNamesList.add(vdsGroup.getName());<START_MOD> }<END_MOD> return org.apache.commons.lang.StringUtils.join(clusterNamesList, ','); }	private java.lang.String clustersListIntoTokenizedString() { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> attachedClustersList = getClusterDao().getClustersByClusterPolicyId(getParameters().getClusterPolicyId()); java.util.List<java.lang.String> clusterNamesList = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : attachedClustersList) { clusterNamesList.add(cluster.getName()); } return org.apache.commons.lang.StringUtils.join(clusterNamesList, ','); }
public static void registerRollbackHandler(final org.ovirt.engine.core.utils.transaction.RollbackHandler rollbackHandler) { try { org.ovirt.engine.core.utils.transaction.TransactionSupport.current().registerSynchronization(new javax.transaction.Synchronization() { @java.lang.Override public void beforeCompletion() { } @java.lang.Override public void afterCompletion(int status) { if (!(org.ovirt.engine.core.utils.transaction.TransactionSupport.needToRollback(status))) <START_MOD>{ <END_MOD>return;<START_MOD> }<END_MOD> rollbackHandler.rollback(); } }); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException( to register synchronization to current transaction e); } }	public static void registerRollbackHandler(final org.ovirt.engine.core.utils.transaction.TransactionCompletionListener transactionCompletionListener) { try { org.ovirt.engine.core.utils.transaction.TransactionSupport.current().registerSynchronization(new org.ovirt.engine.core.utils.transaction.TransactionSupport.RollbackHandlerSynchronization(transactionCompletionListener)); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException("Unable to register synchronization to current transaction", e); } }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { this.stopProgress(); java.util.List<java.lang.String> glusterTunedProfiles = new java.util.ArrayList<>(); if (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getSucceeded()) { glusterTunedProfiles.addAll(((java.util.List<java.lang.String>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()))); } <START_MOD>final java.lang.String oldSelectedProfile = glusterTunedProfile.getSelectedItem(); <END_MOD>glusterTunedProfile.setItems(glusterTunedProfiles<START_MOD>); glusterTunedProfile.setIsAvailable(((glusterTunedProfile.getItems().size()) > 0)); if (oldSelectedProfile != null) { java.lang.String newSelectedItem = org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(glusterTunedProfiles<END_MOD>, <START_MOD>new org.ovirt.engine.ui.uicommonweb.Linq.EqualsPredicate(oldSelectedProfile)); if (newSelectedItem != null) { glusterTunedProfile.setSelectedItem(newSelectedItem); } else if (getIsEdit()) { glusterTunedProfile.setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(glusterTunedProfiles, new org.ovirt.engine.ui.uicommonweb.Linq.EqualsPredicate(getEntity().getGlusterTunedProfile()))); } } }<END_MOD>	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { this.stopProgress(); java.util.List<java.lang.String> glusterTunedProfiles = new java.util.ArrayList<>(); if (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getSucceeded()) { glusterTunedProfiles.addAll(((java.util.List<java.lang.String>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()))); } final java.lang.String oldSelectedProfile = glusterTunedProfile.getSelectedItem(); glusterTunedProfile.setItems(glusterTunedProfiles); glusterTunedProfile.setIsAvailable(((glusterTunedProfile.getItems().size()) > 0)); if (oldSelectedProfile != null) { java.lang.String newSelectedItem = org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(glusterTunedProfiles, new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<java.lang.String>() { @java.lang.Override public boolean match(java.lang.String item) { return item.equals(oldSelectedProfile); } }); if (newSelectedItem != null) { glusterTunedProfile.setSelectedItem(newSelectedItem); } else if (getIsEdit()) { glusterTunedProfile.setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(glusterTunedProfiles, new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<java.lang.String>() { @java.lang.Override public boolean match(java.lang.String item) { return item.equals(getEntity().getGlusterTunedProfile()); } })); } } }
public org.ovirt.engine.core.common.action.VdcReturnValueBase endAction() { if ((!(hasTaskHandlers())) || ((getExecutionIndex()) == ((getTaskHandlers().size()) - 1))) { startFinalizingStep(); }<START_MOD> obtainChildCommands();<END_MOD> try { initiateLockEndAction(); setActionState(); handleTransactivity(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(endActionScope, this); } catch (javax.ejb.TransactionRolledbackLocalException e) { log.info( Transaction was aborted in {} this.getClass().getName()); } finally { freeLockEndAction(); if (getCommandShouldBeLogged()) { logCommand(); } } return getReturnValue(); }	@java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase endAction() { if ((!(hasTaskHandlers())) || ((getExecutionIndex()) == ((getTaskHandlers().size()) - 1))) { startFinalizingStep(); } obtainChildCommands(); try { initiateLockEndAction(); setActionState(); handleTransactivity(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(endActionScope, this); } catch (javax.ejb.TransactionRolledbackLocalException e) { log.info("endAction: Transaction was aborted in {}", this.getClass().getName()); } finally { freeLockEndAction(); if (getCommandShouldBeLogged()) { logCommand(); } } return getReturnValue(); }
@java.lang.Override public void doPolling(org.ovirt.engine.core.compat.Guid cmdId, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds) { org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandExecutionStatus(cmdId); if ((status != (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) && ((org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandStatus(cmdId)) == (org.ovirt.engine.core.compat.CommandStatus.ACTIVE))) { return; } boolean anyFailed = false; int completedChildren = 0; org.ovirt.engine.core.bll.CommandBase<?> command = getCommand(cmdId); for (org.ovirt.engine.core.compat.Guid childCmdId : childCmdIds) { org.ovirt.engine.core.bll.CommandBase<?> child = getCommand(childCmdId); switch (org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandStatus(childCmdId)) { case NOT_STARTED : case ACTIVE : <START_MOD>logWaitingForChildCommand(childCmdId,<END_MOD> child<START_MOD>.getActionType(),<END_MOD> command<START_MOD>.getActionType(), cmdId); return; case FAILED : case FAILED_RESTARTED : if (!(child.getParameters().getShouldBeEndedByParent())) { logWaitingForChildCommand(<END_MOD>childCmdId, child.getActionType(), command.getActionType(), cmdId); return; <START_MOD>} anyFailed = true; break; case ENDED_WITH_FAILURE<END_MOD> : case UNKNOWN : anyFailed = true; break; <START_MOD>case SUCCEEDED : if (!(child.getParameters().getShouldBeEndedByParent())) { logWaitingForChildCommand(childCmdId, child.getActionType(), command.getActionType(), cmdId); return; } <END_MOD>default : ++completedChildren; break; } <START_MOD>} childCommandsExecutionEnded(<END_MOD>command<START_MOD>, anyFailed, childCmdIds, status, completedChildren)<END_MOD>; }	@java.lang.Override public void doPolling(org.ovirt.engine.core.compat.Guid cmdId, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds) { org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandExecutionStatus(cmdId); if ((status != (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) && ((org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandStatus(cmdId)) == (org.ovirt.engine.core.compat.CommandStatus.ACTIVE))) { return; } boolean anyFailed = false; int completedChildren = 0; org.ovirt.engine.core.bll.CommandBase<?> command = getCommand(cmdId); for (org.ovirt.engine.core.compat.Guid childCmdId : childCmdIds) { org.ovirt.engine.core.bll.CommandBase<?> child = getCommand(childCmdId); switch (org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandStatus(childCmdId)) { case NOT_STARTED : case ACTIVE : logWaitingForChildCommand(child, command); return; case FAILED : case FAILED_RESTARTED : if (shouldWaitForEndMethodsCompletion(child, command)) { return; } anyFailed = true; break; case ENDED_WITH_FAILURE : case UNKNOWN : anyFailed = true; break; case SUCCEEDED : if (shouldWaitForEndMethodsCompletion(child, command)) { return; } default : ++completedChildren; } } childCommandsExecutionEnded(command, anyFailed, childCmdIds, status, completedChildren); }
private boolean evaluateHostUpgradeInternalCommandProgress(java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.bll.CommandBase<?> rootCommand) { org.ovirt.engine.core.common.businessentities.CommandEntity upgradeCommand = getHostUpgradeInternalCommand(childCmdIds); if (upgradeCommand == null) { return false; } switch (upgradeCommand.getCommandStatus()) { case ACTIVE : case NOT_STARTED : case FAILED : case FAILED_RESTARTED : case <START_MOD>ENDED_WITH_FAILURE : case <END_MOD>UNKNOWN : rootCommand.setCommandStatus(CommandStatus.FAILED); return true; case SUCCEEDED<START_MOD> : case ENDED_SUCCESSFULLY<END_MOD> : rootCommand.setCommandStatus(CommandStatus.SUCCEEDED); return true; } return true; }	private boolean evaluateHostUpgradeInternalCommandProgress(java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.bll.CommandBase<?> rootCommand) { org.ovirt.engine.core.common.businessentities.CommandEntity upgradeCommand = getHostUpgradeInternalCommand(childCmdIds); if (upgradeCommand == null) { return false; } switch (upgradeCommand.getCommandStatus()) { case ACTIVE : case NOT_STARTED : return false; case FAILED : case FAILED_RESTARTED : case ENDED_WITH_FAILURE : case UNKNOWN : rootCommand.setCommandStatus(CommandStatus.FAILED); return true; case SUCCEEDED : case ENDED_SUCCESSFULLY : rootCommand.setCommandStatus(CommandStatus.SUCCEEDED); return true; } return true; }
private boolean handleCommandExecutionEnded() { boolean shouldEndAction = (parentHasCallback()) ? !(getParameters().getShouldBeEndedByParent()) : true; org.ovirt.engine.core.compat.CommandStatus newStatus = (isEndSuccessfully()) ? org.ovirt.engine.core.compat.CommandStatus.SUCCEEDED : org.ovirt.engine.core.compat.CommandStatus.FAILED; if ((getCallback()) == null) { setCommandStatus(newStatus); } if (!shouldEndAction) { logEndWillBeExecutedByParent(newStatus); } return shouldEndAction; }	private boolean handleCommandExecutionEnded() { boolean shouldEndAction = (parentHasCallback()) ? !(getParameters().getShouldBeEndedByParent()) : true; org.ovirt.engine.core.compat.CommandStatus newStatus = (isEndSuccessfully()) ? org.ovirt.engine.core.compat.CommandStatus.SUCCEEDED : org.ovirt.engine.core.compat.CommandStatus.FAILED; if ((getCallback()) == null) { setCommandStatus(newStatus); if (!shouldEndAction) { logEndWillBeExecutedByParent(newStatus); } } return shouldEndAction; }
@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { command.getParameters().setTaskGroupSuccess(((!anyFailed) && (status == (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)))); <START_MOD>org.ovirt.engine.core.compat.CommandStatus newStatus = <END_MOD>(command.getParameters().getTaskGroupSuccess()<START_MOD>)<END_MOD> ? org.ovirt.engine.core.compat.CommandStatus.SUCCEEDED : org.ovirt.engine.core.compat.CommandStatus.FAILED; log.info( '{}' id: '{}' child commands '{}' executions were completed, status '{}' command.getActionType(), command.getCommandId(), childCmdIds, <START_MOD>newStatus); if (command.getParameters().getShouldBeEndedByParent()) { logEndWillBeExecutedByParent(command, newStatus<END_MOD>); }<START_MOD> command.setCommandStatus(newStatus); }<END_MOD>	@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { command.getParameters().setTaskGroupSuccess(((!anyFailed) && (status == (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)))); org.ovirt.engine.core.compat.CommandStatus newStatus = (command.getParameters().getTaskGroupSuccess()) ? org.ovirt.engine.core.compat.CommandStatus.SUCCEEDED : org.ovirt.engine.core.compat.CommandStatus.FAILED; log.info("Command '{}' id: '{}' child commands '{}' executions were completed, status '{}'", command.getActionType(), command.getCommandId(), childCmdIds, newStatus); if (!(shouldExecuteEndMethod(command))) { logEndWillBeExecutedByParent(command, newStatus); } command.setCommandStatus(newStatus); }
private org.ovirt.engine.core.common.action.CloneCinderDisksParameters buildCinderChildCommandParameters(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks, org.ovirt.engine.core.compat.Guid vmSnapshotId) { org.ovirt.engine.core.common.action.CloneCinderDisksParameters createParams = new org.ovirt.engine.core.common.action.CloneCinderDisksParameters(cinderDisks, vmSnapshotId, diskInfoDestinationMap); createParams.setParentHasTasks((!(org.ovirt.engine.core.bll.AddVmTemplateCommand.getReturnValue().getVdsmTaskIdList().isEmpty()))); <START_MOD>createParams.setShouldBeEndedByParent(false); <END_MOD>return withRootCommandInfo(createParams); }	private org.ovirt.engine.core.common.action.CloneCinderDisksParameters buildCinderChildCommandParameters(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks, org.ovirt.engine.core.compat.Guid vmSnapshotId) { org.ovirt.engine.core.common.action.CloneCinderDisksParameters createParams = new org.ovirt.engine.core.common.action.CloneCinderDisksParameters(cinderDisks, vmSnapshotId, diskInfoDestinationMap); createParams.setShouldBeEndedByParent(false); return withRootCommandInfo(createParams); }
private void removeCinderDisks(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks) { org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters removeParam = new org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId(), cinderDisks); removeParam.setParentHasTasks((!(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getReturnValue().getVdsmTaskIdList().isEmpty()))); <START_MOD>removeParam.setShouldBeEndedByParent(false); <END_MOD>java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> future = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveAllVmCinderDisks, withRootCommandInfo(removeParam), org.ovirt.engine.core.bll.RemoveVmTemplateCommand.cloneContextAndDetachFromParent(), org.ovirt.engine.core.bll.storage.CINDERStorageHelper.getStorageEntities(cinderDisks)); try { future.get().getActionReturnValue(); } catch (java.lang.InterruptedException | java.util.concurrent.ExecutionException e) { log.error("Exception", e); } }	private void removeCinderDisks(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks) { org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters removeParam = new org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId(), cinderDisks); removeParam.setShouldBeEndedByParent(false); java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> future = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveAllVmCinderDisks, withRootCommandInfo(removeParam), org.ovirt.engine.core.bll.RemoveVmTemplateCommand.cloneContextAndDetachFromParent(), org.ovirt.engine.core.bll.storage.connection.CINDERStorageHelper.getStorageEntities(cinderDisks)); try { future.get().getActionReturnValue(); } catch (java.lang.InterruptedException | java.util.concurrent.ExecutionException e) { log.error("Exception", e); } }
private org.ovirt.engine.core.common.action.CloneCinderDisksParameters buildCinderChildCommandParameters(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks, org.ovirt.engine.core.compat.Guid vmSnapshotId) { org.ovirt.engine.core.common.action.CloneCinderDisksParameters createParams = new org.ovirt.engine.core.common.action.CloneCinderDisksParameters(cinderDisks, vmSnapshotId, diskInfoDestinationMap); createParams.setParentHasTasks((!(org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getVdsmTaskIdList().isEmpty()))); <START_MOD>createParams.setShouldBeEndedByParent(false); <END_MOD>return withRootCommandInfo(createParams); }	private org.ovirt.engine.core.common.action.CloneCinderDisksParameters buildCinderChildCommandParameters(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks, org.ovirt.engine.core.compat.Guid vmSnapshotId) { org.ovirt.engine.core.common.action.CloneCinderDisksParameters createParams = new org.ovirt.engine.core.common.action.CloneCinderDisksParameters(cinderDisks, vmSnapshotId, diskInfoDestinationMap); createParams.setShouldBeEndedByParent(false); return withRootCommandInfo(createParams); }
private org.ovirt.engine.core.common.action.<START_MOD>ImagesContainterParametersBase<END_MOD> <START_MOD>buildRemoveCinderSnapshotDiskParameters<END_MOD>(org.ovirt.engine.core.common.businessentities.storage.CinderDisk <START_MOD>cinderDisk<END_MOD>) { org.ovirt.engine.core.common.action.<START_MOD>ImagesContainterParametersBase<END_MOD> <START_MOD>removeCinderSnapshotParams<END_MOD> = new org.ovirt.engine.core.common.action.<START_MOD>ImagesContainterParametersBase<END_MOD>(<START_MOD>cinderDisk.getImageId()<END_MOD>); <START_MOD>removeCinderSnapshotParams<END_MOD>.<START_MOD>setDestinationImageId<END_MOD>(<START_MOD>cinderDisk.getImageId()<END_MOD>); <START_MOD>removeCinderSnapshotParams.setStorageDomainId(cinderDisk.getStorageIds().get(0)); removeCinderSnapshotParams<END_MOD>.setParentCommand(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getActionType()); <START_MOD>removeCinderSnapshotParams<END_MOD>.setParentParameters(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getParameters()); <START_MOD>removeCinderSnapshotParams<END_MOD>.setShouldBeEndedByParent(false); return <START_MOD>removeCinderSnapshotParams<END_MOD>; }	private org.ovirt.engine.core.common.action.ImagesContainterParametersBase buildRemoveCinderSnapshotDiskParameters(org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk) { org.ovirt.engine.core.common.action.ImagesContainterParametersBase removeCinderSnapshotParams = new org.ovirt.engine.core.common.action.ImagesContainterParametersBase(cinderDisk.getImageId()); removeCinderSnapshotParams.setDestinationImageId(cinderDisk.getImageId()); removeCinderSnapshotParams.setStorageDomainId(cinderDisk.getStorageIds().get(0)); removeCinderSnapshotParams.setParentCommand(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getActionType()); removeCinderSnapshotParams.setParentParameters(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getParameters()); return removeCinderSnapshotParams; }
private void handleCinderSnapshotDisks(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks) { <START_MOD>for (<END_MOD>org.ovirt.engine.core.common.<START_MOD>businessentities<END_MOD>.<START_MOD>storage.CinderDisk<END_MOD> <START_MOD>cinderDisk<END_MOD> <START_MOD>:<END_MOD> cinderDisks) <START_MOD>{<END_MOD> <START_MOD>runInternalAction<END_MOD>(VdcActionType.<START_MOD>RemoveCinderSnapshotDisk<END_MOD>, <START_MOD>buildRemoveCinderSnapshotDiskParameters(cinderDisk)<END_MOD>, org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.cloneContextAndDetachFromParent()); } }	private void handleCinderSnapshotDisks(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks) { for (org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk : cinderDisks) { java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> future = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveCinderSnapshotDisk, buildRemoveCinderSnapshotDiskParameters(cinderDisk), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.cloneContextAndDetachFromParent(), new org.ovirt.engine.core.common.businessentities.SubjectEntity(org.ovirt.engine.core.common.VdcObjectType.Storage, cinderDisk.getStorageIds().get(0))); try { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValueBase = future.get(); if (!(vdcReturnValueBase.getSucceeded())) { log.error("Error removing snapshots for Cinder disk"); } } catch (java.lang.InterruptedException | java.util.concurrent.ExecutionException e) { log.error("Error removing snapshots for Cinder disk"); } } }
@java.lang.Override protected void endWithFailure() { revertCinderDisks(); org.ovirt.engine.core.bll.storage.disk.cinder.CloneCinderDisksCommand.setSucceeded(true); }	@java.lang.Override protected void endWithFailure() { endActionOnDisks(); revertCinderDisks(); org.ovirt.engine.core.bll.storage.disk.cinder.CloneCinderDisksCommand.setSucceeded(true); }
private static void popAndInsertBackupSpaceMigrations(java.util.Map<java.lang.String, org.ovirt.engine.sdk.entities.Host> hosts, java.util.Map<java.lang.Long, org.ovirt.optimizer.solver.facts.Instance> instances, java.util.Map<java.lang.Long, java.lang.Long> old2New, java.util.List<org.ovirt.optimizer.solver.problemspace.Migration> migrations, java.util.List<java.util.List<java.util.Map<java.lang.Long, java.lang.String>>> backupReorgs) { java.util.List<java.util.Map<java.lang.Long, java.lang.String>> reorgStep = backupReorgs.get(0); backupReorgs.remove(0); for (java.util.Map<java.lang.Long, java.lang.String> backupMigrations : reorgStep) { for (java.util.Map.Entry<java.lang.Long, java.lang.String> singleBackupMigration : backupMigrations.entrySet()) { if (!(hosts.containsKey(singleBackupMigration.getValue()))) { continue; } org.ovirt.optimizer.solver.problemspace.Migration migration = new org.ovirt.optimizer.solver.problemspace.Migration(); migration.setDestination(hosts.get(singleBackupMigration.getValue())); migration.setInstance(instances.get(old2New.get(singleBackupMigration.getKey()))); migrations.add(migration); } } }	private static void popAndInsertBackupSpaceMigrations(java.util.Map<java.lang.String, org.ovirt.engine.sdk.entities.Host> hosts, java.util.Map<java.lang.Long, org.ovirt.optimizer.solver.facts.Instance> instances, java.util.Map<java.lang.Long, java.lang.Long> old2New, java.util.List<org.ovirt.optimizer.solver.problemspace.Migration> migrations, java.util.List<java.util.List<java.util.Map<java.lang.Long, java.lang.String>>> backupReorgs) { if (backupReorgs.isEmpty()) { return; } java.util.List<java.util.Map<java.lang.Long, java.lang.String>> reorgStep = backupReorgs.get(0); backupReorgs.remove(0); for (java.util.Map<java.lang.Long, java.lang.String> backupMigrations : reorgStep) { for (java.util.Map.Entry<java.lang.Long, java.lang.String> singleBackupMigration : backupMigrations.entrySet()) { if (!(hosts.containsKey(singleBackupMigration.getValue()))) { continue; } org.ovirt.optimizer.solver.problemspace.Migration migration = new org.ovirt.optimizer.solver.problemspace.Migration(); migration.setDestination(hosts.get(singleBackupMigration.getValue())); java.lang.Long oldInstanceId = singleBackupMigration.getKey(); migration.setInstance(instances.get(old2New.getOrDefault(oldInstanceId, oldInstanceId))); migrations.add(migration); } } }
@org.junit.Test public void testRecomputeHostMissing() { org.ovirt.optimizer.solver.problemspace.ClusterSituation start = prepareDummyCluster(); org.ovirt.optimizer.solver.problemspace.Migration m1 = new org.ovirt.optimizer.solver.problemspace.Migration(); org.ovirt.engine.sdk.entities.Host h1 = new org.ovirt.engine.sdk.entities.Host(); h1.setId("host1"); org.ovirt.<START_MOD>optimizer.solver.facts.Instance<END_MOD> vm1 = new org.ovirt.<START_MOD>optimizer.solver.facts.Instance<END_MOD>(); vm1.setId(<START_MOD>1L); m1.setInstance(<END_MOD>vm1); m1.recomputeSituationAfter(start); assertEquals("host1", m1.getAssignment(<START_MOD>1L<END_MOD>)); assertEquals("host2", m1.getAssignment(<START_MOD>2L)); assertEquals("host1", m1.getAssignment(3L<END_MOD>)); assertEquals("host2", m1.getAssignment(<START_MOD>4L<END_MOD>)); assertEquals(false, m1.<START_MOD>getHostToInstanceAssignments<END_MOD>().containsKey(null)); assertEquals(2, m1.<START_MOD>getHostToInstanceAssignments<END_MOD>().get("host1").size()); assertEquals(2, m1.<START_MOD>getHostToInstanceAssignments<END_MOD>().get("host2").size()); }	@org.junit.Test public void testRecomputeHostMissing() { org.ovirt.optimizer.solver.problemspace.ClusterSituation start = prepareDummyCluster(); org.ovirt.optimizer.solver.problemspace.Migration m1 = new org.ovirt.optimizer.solver.problemspace.Migration(); org.ovirt.engine.sdk.entities.Host h1 = new org.ovirt.engine.sdk.entities.Host(); h1.setId("host1"); org.ovirt.optimizer.solver.facts.Instance vm1 = new org.ovirt.optimizer.solver.facts.Instance("vm-1"); vm1.setId(1L); m1.setInstance(vm1); m1.recomputeSituationAfter(start); assertEquals("host1", m1.getAssignment(1L)); assertEquals("host2", m1.getAssignment(2L)); assertEquals("host1", m1.getAssignment(3L)); assertEquals("host2", m1.getAssignment(4L)); assertEquals(false, m1.getHostToInstanceAssignments().containsKey(null)); assertEquals(2, m1.getHostToInstanceAssignments().get("host1").size()); assertEquals(2, m1.getHostToInstanceAssignments().get("host2").size()); }
@org.junit.Test public void testRecomputeChange() { org.ovirt.optimizer.solver.problemspace.ClusterSituation start = prepareDummyCluster(); org.ovirt.optimizer.solver.problemspace.Migration m1 = new org.ovirt.optimizer.solver.problemspace.Migration(); org.ovirt.engine.sdk.entities.Host h1 = new org.ovirt.engine.sdk.entities.Host(); h1.setId("host1"); org.ovirt.engine.sdk.entities.Host h2 = new org.ovirt.engine.sdk.entities.Host(); h2.setId("host2"); org.ovirt.<START_MOD>optimizer.solver.facts.Instance<END_MOD> vm1 = new org.ovirt.<START_MOD>optimizer.solver.facts.Instance<END_MOD>(); vm1.setId(<START_MOD>1L); m1.setInstance(<END_MOD>vm1); m1.setDestination(h2); m1.recomputeSituationAfter(start); assertEquals("host2", m1.getAssignment(<START_MOD>1L<END_MOD>)); assertEquals("host2", m1.getAssignment(<START_MOD>2L<END_MOD>)); assertEquals("host1", m1.getAssignment(<START_MOD>3L<END_MOD>)); assertEquals("host2", m1.getAssignment(<START_MOD>4L<END_MOD>)); assertEquals(1, m1.<START_MOD>getHostToInstanceAssignments<END_MOD>().get("host1").size()); assertEquals(3, m1.<START_MOD>getHostToInstanceAssignments<END_MOD>().get("host2").size()); }	@org.junit.Test public void testRecomputeChange() { org.ovirt.optimizer.solver.problemspace.ClusterSituation start = prepareDummyCluster(); org.ovirt.optimizer.solver.problemspace.Migration m1 = new org.ovirt.optimizer.solver.problemspace.Migration(); org.ovirt.engine.sdk.entities.Host h1 = new org.ovirt.engine.sdk.entities.Host(); h1.setId("host1"); org.ovirt.engine.sdk.entities.Host h2 = new org.ovirt.engine.sdk.entities.Host(); h2.setId("host2"); org.ovirt.optimizer.solver.facts.Instance vm1 = new org.ovirt.optimizer.solver.facts.Instance("vm-1"); vm1.setId(1L); m1.setInstance(vm1); m1.setDestination(h2); m1.recomputeSituationAfter(start); assertEquals("host2", m1.getAssignment(1L)); assertEquals("host2", m1.getAssignment(2L)); assertEquals("host1", m1.getAssignment(3L)); assertEquals("host2", m1.getAssignment(4L)); assertEquals(1, m1.getHostToInstanceAssignments().get("host1").size()); assertEquals(3, m1.getHostToInstanceAssignments().get("host2").size()); }
private void updateVmAfterMigrationToDifferentCluster() { if (org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getVdsGroupId().equals(org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().getTargetVdsGroupId())) { return; } org.ovirt.engine.core.common.action.ChangeVMClusterParameters params = new org.ovirt.engine.core.common.action.ChangeVMClusterParameters(org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().getTargetVdsGroupId(), org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()<START_MOD>, org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getCompatibilityVersion()<END_MOD>); setSucceeded(org.ovirt.engine.core.bll.MigrateVmCommand.getBackend().runInternalAction(VdcActionType.ChangeVMCluster, params).getSucceeded()); }	private void updateVmAfterMigrationToDifferentCluster() { if (org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getClusterId().equals(org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().getTargetClusterId())) { return; } org.ovirt.engine.core.common.action.ChangeVMClusterParameters params = new org.ovirt.engine.core.common.action.ChangeVMClusterParameters(org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().getTargetClusterId(), org.ovirt.engine.core.bll.MigrateVmCommand.getVmId(), org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getCustomCompatibilityVersion()); setSucceeded(org.ovirt.engine.core.bll.MigrateVmCommand.getBackend().runInternalAction(VdcActionType.ChangeVMCluster, params).getSucceeded()); }
public org.ovirt.engine.core.compat.Version getVmCompatibilityVersion() { return vmCompatibilityVersion; }	public org.ovirt.engine.core.compat.Version getVmCustomCompatibilityVersion() { return vmCustomCompatibilityVersion; }
@java.lang.Override protected boolean canDoAction() { if (!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.canRunActionOnNonManagedVm())) { return false; } if ((!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.isInternalExecution())) && (!(org.ovirt.engine.core.utils.ObjectIdentityChecker.CanUpdateField(org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm(), "vdsGroupId", org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm().getStatus())))) { addCanDoActionMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } org.ovirt.engine.core.bll.ChangeVmClusterValidator validator = new org.ovirt.engine.core.bll.ChangeVmClusterValidator(this, org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getClusterId()<START_MOD>, org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getVmCompatibilityVersion()<END_MOD>); return validator.validate(); }	@java.lang.Override protected boolean validate() { if (!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.canRunActionOnNonManagedVm())) { return false; } if ((!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.isInternalExecution())) && (!(org.ovirt.engine.core.utils.ObjectIdentityChecker.canUpdateField(org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm(), "clusterId", org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm().getStatus())))) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } org.ovirt.engine.core.bll.ChangeVmClusterValidator validator = new org.ovirt.engine.core.bll.ChangeVmClusterValidator(this, org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getClusterId(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getVmCustomCompatibilityVersion()); return validator.validate(); }
private boolean validateEntitiesFromRequest(java.util.List<? extends org.ovirt.engine.core.common.businessentities.BusinessEntity<?>> newOrUpdateBusinessEntities) { org.ovirt.engine.core.common.businessentities.SeparateNewAndModifiedInstances instances = new org.ovirt.engine.core.common.businessentities.SeparateNewAndModifiedInstances(newOrUpdateBusinessEntities); java.util.List<java.lang.String> validationMessages = new java.util.ArrayList<>(); validationMessages.addAll(callValidationOnAllItems(instances.getNewEntities(), org.ovirt.engine.core.common.validation.group.CreateEntity.class, javax.validation.groups.Default.class)); validationMessages.addAll(callValidationOnAllItems(instances.getUpdatedEntities(), org.ovirt.engine.core.common.validation.group.UpdateEntity.class, javax.validation.groups.Default.class)); return !(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getReturnValue().getValidationMessages().addAll(validationMessages)); }	private boolean validateEntitiesFromRequest(java.util.List<? extends org.ovirt.engine.core.common.businessentities.BusinessEntity<?>> newOrUpdateBusinessEntities) { org.ovirt.engine.core.common.businessentities.SeparateNewAndModifiedInstances instances = new org.ovirt.engine.core.common.businessentities.SeparateNewAndModifiedInstances(newOrUpdateBusinessEntities); java.util.List<java.lang.String> validationMessages = new java.util.ArrayList<>(); validationMessages.addAll(callValidationOnAllItems(instances.getNewEntities(), org.ovirt.engine.core.common.validation.group.CreateEntity.class, javax.validation.groups.Default.class)); validationMessages.addAll(callValidationOnAllItems(instances.getUpdatedEntities(), org.ovirt.engine.core.common.validation.group.UpdateEntity.class, javax.validation.groups.Default.class)); return !(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getReturnValue().getCanDoActionMessages().addAll(validationMessages)); }
private void processVmsWithDevicesChange() { if (!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(vdsManager.getGroupCompatibilityVersion()))) { if (!(vmsWithChangedDevices.isEmpty())) { java.util.ArrayList<java.lang.String> vmsToUpdate = new java.util.ArrayList(vmsWithChangedDevices.size()); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> pair : vmsWithChangedDevices) { org.ovirt.engine.core.compat.Guid vmId = pair.getFirst().getId(); <START_MOD>org.ovirt.engine.core.vdsbroker.VmAnalyzer vmAnalyzer = vmAnalyzers.stream().filter(( analyzer) -> vmId.equals(analyzer.getVdsmVm().getVmDynamic().getId())).collect(java.util.stream.Collectors.toList()).get(0); <END_MOD>if (<START_MOD>(vmAnalyzer.getVmDynamicToSave()) != null) { vmAnalyzer.getVmDynamicToSave(<END_MOD>).setHash(pair.getSecond().getVmDynamic().getHash()); vmsToUpdate.add(vmId.toString()); } else { org.ovirt.engine.core.vdsbroker.VmsMonitoring.log.warn( '{}' not in changed list, skipping devices update. vmId); } } updateVmDevices(vmsToUpdate); } } }	private void processVmsWithDevicesChange() { if (!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(vdsManager.getGroupCompatibilityVersion()))) { if (!(vmsWithChangedDevices.isEmpty())) { java.util.ArrayList<java.lang.String> vmsToUpdate = new java.util.ArrayList(vmsWithChangedDevices.size()); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> pair : vmsWithChangedDevices) { org.ovirt.engine.core.compat.Guid vmId = pair.getFirst().getId(); org.ovirt.engine.core.vdsbroker.VmAnalyzer vmAnalyzer = vmAnalyzers.stream().filter(( analyzer) -> vmId.equals(analyzer.getVdsmVm().getVmDynamic().getId())).findFirst().orElse(null); if ((vmAnalyzer != null) && ((vmAnalyzer.getVmDynamicToSave()) != null)) { vmAnalyzer.getVmDynamicToSave().setHash(pair.getSecond().getVmDynamic().getHash()); vmsToUpdate.add(vmId.toString()); } else { org.ovirt.engine.core.vdsbroker.VmsMonitoring.log.warn("VM '{}' not in changed list, skipping devices update.", vmId); } } updateVmDevices(vmsToUpdate); } } }
@java.lang.Override public void onDragEnter(com.google.gwt.event.dom.client.DragEnterEvent event) { doDrag(event, false); <START_MOD>eventBus.fireEvent(new org.ovirt.engine.ui.webadmin.section.main.view.popup.host.AutoScrollEnableEvent(this)); <END_MOD>}	@java.lang.Override public void onDragOver(com.google.gwt.event.dom.client.DragOverEvent event) { com.google.gwt.dom.client.NativeEvent ne = event.getNativeEvent(); eventBus.fireEvent(new org.ovirt.engine.ui.webadmin.section.main.view.popup.host.AutoScrollOverEvent(this, ne.getScreenX(), ne.getScreenY(), ne.getClientX(), ne.getClientY())); doDrag(event, false); }
private void setupNicListAutoScrolling() { if ((nicList.getParent()) instanceof com.google.gwt.user.client.ui.ScrollPanel) { class AutoScrollHandler implements org.ovirt.engine.ui.webadmin.section.main.view.popup.host.AutoScrollDisableEvent.Handler , org.ovirt.engine.ui.webadmin.section.main.view.popup.host.AutoScrollEnableEvent.Handler { protected java.util.logging.Logger log = java.util.logging.Logger.getLogger(AutoScrollHandler.class.getName()); protected com.google.gwt.user.client.ui.ScrollPanel sp; public AutoScrollHandler(com.google.gwt.user.client.ui.ScrollPanel sp) { log.info("attaching auto scroll handler to element "); this.sp = sp; } boolean enabled = false; @java.lang.Override public void enableAutoScroll(org.ovirt.engine.ui.webadmin.section.main.view.popup.host.AutoScrollEnableEvent event) { log.fine("auto-scrolling has been enabled"); enabled = true; } @java.lang.Override public void disableAutoScroll(org.ovirt.engine.ui.webadmin.section.main.view.popup.host.AutoScrollDisableEvent event) { log.fine("auto-scrolling has been disabled"); enabled = false; } } com.google.gwt.user.client.ui.ScrollPanel sp = ((com.google.gwt.user.client.ui.ScrollPanel) (nicList.getParent())); AutoScrollHandler ash = new AutoScrollHandler(sp); org.ovirt.engine.ui.webadmin.section.main.view.popup.host.AutoScrollEnableEvent.register(eventBus, ash); org.ovirt.engine.ui.webadmin.section.main.view.popup.host.AutoScrollDisableEvent.register(eventBus, ash); } }	private void setupNicListAutoScrolling() { if ((nicList.getParent()) instanceof com.google.gwt.user.client.ui.ScrollPanel) { com.google.gwt.user.client.ui.ScrollPanel sp = ((com.google.gwt.user.client.ui.ScrollPanel) (nicList.getParent())); new org.ovirt.engine.ui.webadmin.section.main.view.popup.host.AutoScrollAdapter(eventBus, sp); } }
@java.lang.Override public void onDrop(com.google.gwt.event.dom.client.DropEvent event) { event.preventDefault(); doDrag(event, true); table.getElement().removeClassName(style.networkGroupDragOver()); <START_MOD>eventBus.fireEvent(new org.ovirt.engine.ui.webadmin.section.main.view.popup.host.AutoScrollDisableEvent(this)); <END_MOD>}	@java.lang.Override public void onDrop(com.google.gwt.event.dom.client.DropEvent event) { eventBus.fireEvent(new org.ovirt.engine.ui.webadmin.section.main.view.popup.host.AutoScrollDisableEvent(this)); event.preventDefault(); doDrag(event, true); table.getElement().removeClassName(style.networkGroupDragOver()); }
@java.lang.Override public void onDragLeave(com.google.gwt.event.dom.client.DragLeaveEvent event) { table.getElement().removeClassName(style.networkGroupDragOver()); <START_MOD>eventBus.fireEvent(new org.ovirt.engine.ui.webadmin.section.main.view.popup.host.AutoScrollDisableEvent(this)); <END_MOD>}	@java.lang.Override public void onDragLeave(com.google.gwt.event.dom.client.DragLeaveEvent event) { (dragCounter)--; if ((dragCounter) == 0) { eventBus.fireEvent(new org.ovirt.engine.ui.webadmin.section.main.view.popup.host.AutoScrollDisableEvent(this)); table.getElement().removeClassName(style.networkGroupDragOver()); } }
@java.lang.Override public boolean accept(java.io.File dir, java.lang.String name) { return name.toLowerCase().endsWith("symbolmap"); }	@java.lang.Override public boolean accept(java.io.File dir, java.lang.String name) { return (name != null) && (name.toLowerCase().endsWith("symbolmap")); }
private void logOnServer(java.util.logging.LogRecord logRecord, java.lang.String strongName, com.google.gwt.core.server.StackTraceDeobfuscator deobfuscator) { if (deobfuscator != null) { logRecord = com.google.gwt.logging.server.RemoteLoggingServiceUtil.deobfuscateLogRecord(deobfuscator, logRecord, strongName); } org.ovirt.engine.ui.frontend.server.gwt.OvirtRemoteLoggingService.log.error(logRecord.getMessage(), logRecord.getThrown()); }	private void logOnServer(java.util.logging.LogRecord logRecord, java.lang.String strongName, com.google.gwt.core.server.StackTraceDeobfuscator deobfuscator) { if (deobfuscator != null) { logRecord = com.google.gwt.logging.server.RemoteLoggingServiceUtil.deobfuscateLogRecord(deobfuscator, logRecord, strongName); } org.ovirt.engine.ui.frontend.server.gwt.OvirtRemoteLoggingService.log.error(("Permutation name: " + strongName)); org.ovirt.engine.ui.frontend.server.gwt.OvirtRemoteLoggingService.log.error(logRecord.getMessage(), logRecord.getThrown()); }
@java.lang.Override public final void onBootstrap() { java.util.logging.Logger rootLogger = java.util.logging.Logger.getLogger(""); initLocalStorageLogHandler(rootLogger); initUncaughtExceptionHandler(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { performBootstrap(); } }); }	@java.lang.Override public final void onBootstrap() { java.util.logging.Logger rootLogger = java.util.logging.Logger.getLogger(""); initLocalStorageLogHandler(rootLogger); java.util.logging.Logger remoteLogger = java.util.logging.Logger.getLogger("remote"); remoteLogger.addHandler(new com.google.gwt.logging.client.SimpleRemoteLogHandler()); initUncaughtExceptionHandler(rootLogger, remoteLogger); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { performBootstrap(); } }); }
@java.lang.Override public void init(javax.servlet.ServletConfig config) throws javax.servlet.ServletException { super.init(config); final java.lang.String applicationName = config.getInitParameter(org.ovirt.engine.ui.frontend.server.gwt.OvirtRemoteLoggingService.APP_NAME); if (applicationName == null) { throw new javax.servlet.ServletException("Application name not specified"); } java.io.File symbolMapDirectory = new java.io.File(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getUsrDir(), (("/gwt-symbols/" + applicationName) + "/symbolMaps")); if (((!(symbolMapDirectory.exists())) || (!(symbolMapDirectory.isDirectory()))) || ((symbolMapDirectory.listFiles(new java.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File dir, java.lang.String name) { return name.toLowerCase().endsWith("symbolmap"); } }).length) == 0)) { org.ovirt.engine.ui.frontend.server.gwt.OvirtRemoteLoggingService.log.info(("GWT symbolmaps are not installed, " + "please install them to de-obfuscate the UI stack traces")); } else { setSymbolMapsDirectory(symbolMapDirectory.getAbsolutePath()); } }	@java.lang.Override public void init(javax.servlet.ServletConfig config) throws javax.servlet.ServletException { super.init(config); final java.lang.String applicationName = getServletContext().getInitParameter(org.ovirt.engine.ui.frontend.server.gwt.OvirtRemoteLoggingService.APP_NAME); if (applicationName == null) { throw new javax.servlet.ServletException("Application name not specified"); } java.io.File symbolMapDirectory = new java.io.File(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getUsrDir(), (("/gwt-symbols/" + applicationName) + "/symbolMaps")); boolean symbolMapsDirectoryExists = (symbolMapDirectory.exists()) && (symbolMapDirectory.isDirectory()); java.io.File[] files = symbolMapDirectory.listFiles(new java.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File dir, java.lang.String name) { return (name != null) && (name.toLowerCase().endsWith("symbolmap")); } }); if (((!symbolMapsDirectoryExists) || (files == null)) || ((files.length) == 0)) { org.ovirt.engine.ui.frontend.server.gwt.OvirtRemoteLoggingService.log.info(("GWT symbolmaps are not installed, " + "please install them to de-obfuscate the UI stack traces")); } else { setSymbolMapsDirectory(symbolMapDirectory.getAbsolutePath()); } }
@java.lang.Override public void onUncaughtException(java.lang.Throwable t) { <START_MOD>remoteLogger<END_MOD>.log(java.util.logging.Level.SEVERE,   exception:   t); alertManager.showUncaughtExceptionAlert(t); }	@java.lang.Override public void onUncaughtException(java.lang.Throwable t) { rootLogger.log(java.util.logging.Level.SEVERE, "Uncaught exception: ", t); remoteLogger.log(java.util.logging.Level.SEVERE, "Uncaught exception: ", t); alertManager.showUncaughtExceptionAlert(t); }
void initUncaughtExceptionHandler(<START_MOD>) { <END_MOD>final java.util.logging.Logger <START_MOD>remoteLogger = java.util.logging.Logger.getLogger("remote"<END_MOD>)<START_MOD>;<END_MOD> <START_MOD>remoteLogger.addHandler(new com.google.gwt.logging.client.SimpleRemoteLogHandler());<END_MOD> com.google.gwt.core.client.GWT.setUncaughtExceptionHandler(new com.google.gwt.core.client.GWT.UncaughtExceptionHandler() { @java.lang.Override public void onUncaughtException(java.lang.Throwable t) { <START_MOD>remoteLogger<END_MOD>.log(java.util.logging.Level.SEVERE,   exception:   t); alertManager.showUncaughtExceptionAlert(t); } }); }	void initUncaughtExceptionHandler(final java.util.logging.Logger rootLogger, final java.util.logging.Logger remoteLogger) { com.google.gwt.core.client.GWT.setUncaughtExceptionHandler(new com.google.gwt.core.client.GWT.UncaughtExceptionHandler() { @java.lang.Override public void onUncaughtException(java.lang.Throwable t) { rootLogger.log(java.util.logging.Level.SEVERE, "Uncaught exception: ", t); remoteLogger.log(java.util.logging.Level.SEVERE, "Uncaught exception: ", t); alertManager.showUncaughtExceptionAlert(t); } }); }
@org.junit.Test public void testQueryExecution() { org.ovirt.engine.core.common.businessentities.VmTemplate expected = new org.ovirt.engine.core.common.businessentities.VmTemplate(); org.ovirt.engine.core.dao.VmTemplateDao vmTemplateDaoMock = mock(org.ovirt.engine.core.dao.VmTemplateDao.class); when(vmTemplateDaoMock.getTemplatesWithPermittedAction(getUser().getId(), getActionGroup())).thenReturn(java.util.Collections.singletonList(expected)); when(getDbFacadeMockInstance().getVmTemplateDao()).thenReturn(vmTemplateDaoMock); getQuery().executeQueryCommand(); @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>VmTemplate<END_MOD>> actual = getQuery().getQueryReturnValue().getReturnValue(); assertEquals( number of VDS Groups 1, actual.size()); assertEquals( VDS Groups expected, actual.get(0)); }	@org.junit.Test public void testQueryExecution() { org.ovirt.engine.core.common.businessentities.VmTemplate expected = new org.ovirt.engine.core.common.businessentities.VmTemplate(); org.ovirt.engine.core.dao.VmTemplateDao vmTemplateDaoMock = mock(org.ovirt.engine.core.dao.VmTemplateDao.class); when(vmTemplateDaoMock.getTemplatesWithPermittedAction(getUser().getId(), getActionGroup())).thenReturn(java.util.Collections.singletonList(expected)); when(getDbFacadeMockInstance().getVmTemplateDao()).thenReturn(vmTemplateDaoMock); getQuery().executeQueryCommand(); @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> actual = getQuery().getQueryReturnValue().getReturnValue(); assertEquals("Wrong number of templates", 1, actual.size()); assertEquals("Wrong templates", expected, actual.get(0)); }
@org.junit.BeforeClass public static void initTestCase() throws java.lang.Exception { if ((org.ovirt.engine.core.dao.BaseDaoTestCase.dataSource) == null)<START_MOD> { try<END_MOD> { org.ovirt.engine.core.dao.BaseDaoTestCase.dataSource = org.ovirt.engine.core.dao.BaseDaoTestCase.createDataSource(); org.ovirt.engine.core.dao.BaseDaoTestCase.ejbRule.mockResource(ContainerManagedResourceType.DATA_SOURCE, org.ovirt.engine.core.dao.BaseDaoTestCase.dataSource); final org.dbunit.dataset.IDataSet dataset = org.ovirt.engine.core.dao.BaseDaoTestCase.initDataSet(); DatabaseOperation.CLEAN_INSERT.execute(org.ovirt.engine.core.dao.BaseDaoTestCase.getConnection(), dataset); org.springframework.mock.jndi.SimpleNamingContextBuilder builder = new org.springframework.mock.jndi.SimpleNamingContextBuilder(); builder.bind("java:/ENGINEDataSource", org.ovirt.engine.core.dao.BaseDaoTestCase.dataSource); builder.activate(); } <START_MOD>catch (java.lang.Exception e) { java.util.logging.Logger.getLogger(org.ovirt.engine.core.dao.BaseDaoTestCase.class.getName()).log(java.util.logging.Level.SEVERE,   to init tests e); java.lang.System.exit(1); <END_MOD>}<START_MOD> } }<END_MOD>	@org.junit.BeforeClass public static void initTestCase() throws java.lang.Exception { if ((org.ovirt.engine.core.dao.BaseDaoTestCase.dataSource) == null) { try { org.ovirt.engine.core.dao.BaseDaoTestCase.dataSource = org.ovirt.engine.core.dao.BaseDaoTestCase.createDataSource(); org.ovirt.engine.core.dao.BaseDaoTestCase.ejbRule.mockResource(ContainerManagedResourceType.DATA_SOURCE, org.ovirt.engine.core.dao.BaseDaoTestCase.dataSource); final org.dbunit.dataset.IDataSet dataset = org.ovirt.engine.core.dao.BaseDaoTestCase.initDataSet(); DatabaseOperation.CLEAN_INSERT.execute(org.ovirt.engine.core.dao.BaseDaoTestCase.getConnection(), dataset); org.springframework.mock.jndi.SimpleNamingContextBuilder builder = new org.springframework.mock.jndi.SimpleNamingContextBuilder(); builder.bind("java:/ENGINEDataSource", org.ovirt.engine.core.dao.BaseDaoTestCase.dataSource); builder.activate(); org.ovirt.engine.core.dao.BaseDaoTestCase.initialized = true; } catch (java.lang.Exception e) { org.slf4j.LoggerFactory.getLogger(org.ovirt.engine.core.dao.BaseDaoTestCase.class).error("Unable to init tests", e); throw new java.lang.AssertionError("Unable to init tests", e); } } }
public static java.util.HashMap<java.lang.String, java.lang.String> pmOptionsStringToMap(java.lang.String pmOptions) { java.util.HashMap<java.lang.String, java.lang.String> map = new java.util.HashMap<>(); if ((pmOptions == null) || (pmOptions.equals(""))) { return map; } java.lang.String[] tokens = pmOptions.split(","); for (java.lang.String token : tokens) { java.lang.String[] pair = token.split("="); if ((pair.length) == 2) { pair[1] = ((pair[1]) == null) ? "" : pair[1]; if (((pair[0].trim().length()) > 0) && ((pair[1].trim().length()) > 0)) map.put(pair[0], pair[1]); } else { map.put(pair[0], ""); } } return map; }	public static java.util.HashMap<java.lang.String, java.lang.String> pmOptionsStringToMap(java.lang.String pmOptions) { java.util.HashMap<java.lang.String, java.lang.String> map = new java.util.HashMap<>(); if ((pmOptions == null) || (pmOptions.equals(""))) { return map; } java.lang.String[] tokens = pmOptions.split(","); for (java.lang.String token : tokens) { java.lang.String[] pair = token.split("="); if ((pair.length) == 2) { pair[1] = ((pair[1]) == null) ? "" : pair[1]; if (((pair[0].trim().length()) > 0) && ((pair[1].trim().length()) > 0)) { map.put(pair[0], pair[1]); } } else { map.put(pair[0], ""); } } return map; }
private static void exportResource(java.lang.String apiVersion, java.lang.String resourceName, java.io.File outputDirectory) throws java.io.IOException { java.lang.String resourcePath = java.lang.String.format("/v%s/%s", apiVersion, resourceName); java.io.InputStream inputResource = org.ovirt.engine.api.rsdl.RsdlIOManager.class.getResourceAsStream(resourcePath); java.io.File outputFile = new java.io.File(outputDirectory, resourceName); java.lang.System.out.printf("Copying resource \"%s\" to file \"%s\"", resourcePath, outputFile.getAbsolutePath()); org.apache.commons.io.FileUtils.copyInputStreamToFile(inputResource, outputFile); }	private static void exportResource(java.lang.String apiVersion, java.lang.String resourceName, java.io.File outputDirectory) throws java.io.IOException { java.lang.String resourcePath = java.lang.String.format("/v%s/%s", apiVersion, resourceName); java.io.InputStream inputResource = org.ovirt.engine.api.rsdl.RsdlIOManager.class.getResourceAsStream(resourcePath); java.io.File outputFile = new java.io.File(outputDirectory, resourceName); java.lang.System.out.printf("Copying resource \"%s\" to file \"%s\"\n", resourcePath, outputFile.getAbsolutePath()); org.apache.commons.io.FileUtils.copyInputStreamToFile(inputResource, outputFile); }
<START_MOD>public<END_MOD> org.ovirt.engine.core.<START_MOD>utils<END_MOD>.<START_MOD>lock<END_MOD>.<START_MOD>EngineLock<END_MOD> <START_MOD>acquireMonitorLock(java.lang.String<END_MOD> <START_MOD>lockReleaseMessage)<END_MOD> <START_MOD>{ return this.vdsLocking.acquireMonitorLock(<END_MOD>org.ovirt.engine.core.bll.VdsCommand.getVds()<START_MOD>, lockReleaseMessage,<END_MOD> log); }	public org.ovirt.engine.core.utils.lock.EngineLock acquireMonitorLock(java.lang.String lockReleaseMessage) { return this.hostLocking.acquireMonitorLock(org.ovirt.engine.core.bll.VdsCommand.getVds(), lockReleaseMessage, log); }
public org.ovirt.engine.core.utils.lock.EngineLock acquireMonitorLock(org.ovirt.engine.core.common.businessentities.VDS vds, java.lang.String lockReleaseMessage, org.slf4j.Logger log) { org.ovirt.engine.core.compat.Guid vdsId = vds.getId(); org.ovirt.engine.core.utils.lock.LockManager lockManager = org.ovirt.engine.core.utils.lock.LockManagerFactory.getLockManager(); java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> exclusiveLocks = java.util.Collections.singletonMap(vdsId.toString(), new org.ovirt.engine.core.common.utils.Pair(LockingGroup.VDS_INIT.name(), "")); java.lang.String closingMessage = org.ovirt.engine.core.bll.VdsLocking.calculateClosingMessage(lockReleaseMessage, vds); org.ovirt.engine.core.utils.lock.EngineLock monitoringLock = new org.ovirt.engine.core.bll.VdsLocking.VdsEngineLock(exclusiveLocks, null, closingMessage, log); log.info("Before acquiring lock in order to prevent monitoring for host '{}' from data-center '{}'", vds.getName(), vds.getStoragePoolName()); lockManager.acquireLockWait(monitoringLock); log.info("Lock acquired, from now a monitoring of host will be skipped for host '{}' from data-center '{}'", vds.getName(), vds.getStoragePoolName()); return monitoringLock; }	public org.ovirt.engine.core.utils.lock.EngineLock acquireMonitorLock(org.ovirt.engine.core.common.businessentities.VDS host, java.lang.String lockReleaseMessage, org.slf4j.Logger log) { org.ovirt.engine.core.compat.Guid hostId = host.getId(); org.ovirt.engine.core.utils.lock.LockManager lockManager = org.ovirt.engine.core.utils.lock.LockManagerFactory.getLockManager(); java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> exclusiveLocks = java.util.Collections.singletonMap(hostId.toString(), new org.ovirt.engine.core.common.utils.Pair(LockingGroup.VDS_INIT.name(), "")); java.lang.String closingMessage = org.ovirt.engine.core.bll.HostLocking.calculateClosingMessage(lockReleaseMessage, host); org.ovirt.engine.core.utils.lock.EngineLock monitoringLock = new org.ovirt.engine.core.bll.HostLocking.HostEngineLock(exclusiveLocks, null, closingMessage, log); log.info("Before acquiring lock in order to prevent monitoring for host '{}' from data-center '{}'", host.getName(), host.getStoragePoolName()); lockManager.acquireLockWait(monitoringLock); log.info("Lock acquired, from now a monitoring of host will be skipped for host '{}' from data-center '{}'", host.getName(), host.getStoragePoolName()); return monitoringLock; }
private static java.lang.String calculateClosingMessage(java.lang.String commandName, org.ovirt.engine.core.common.businessentities.VDS vds) { return java.lang.String.format("%s finished. Lock released. Monitoring can run now for host '%s' from data-center '%s'", commandName, vds.getName(), vds.getStoragePoolName()); }	private static java.lang.String calculateClosingMessage(java.lang.String commandName, org.ovirt.engine.core.common.businessentities.VDS host) { return java.lang.String.format("%s finished. Lock released. Monitoring can run now for host '%s' from data-center '%s'", commandName, host.getName(), host.getStoragePoolName()); }
private void updateAddAndSelectHostAvailability(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> hosts, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> availableHosts) { org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("AddHost", this); tempVar.setIsExecutionAllowed(((clusters.size()) > 0)); if (hosts.isEmpty()) { <START_MOD>tempVar<END_MOD>.setTitle(DataCenterConfigureHostsAction); getCompulsoryActions().add(<START_MOD>tempVar<END_MOD>); } else { <START_MOD>tempVar<END_MOD>.setTitle(DataCenterAddAnotherHostAction); getOptionalActions().add(<START_MOD>tempVar<END_MOD>); } org.ovirt.engine.ui.uicommonweb.UICommand selectHostAction = new org.ovirt.engine.ui.uicommonweb.UICommand("SelectHost", this); selectHostAction.setIsChangeable(((availableHosts.size()) > 0)); selectHostAction.setIsExecutionAllowed(((availableHosts.size()) > 0)); if ((clusters.size()) > 0) { if (hosts.isEmpty()) { selectHostAction.setTitle(DataCenterSelectHostsAction); getCompulsoryActions().add(selectHostAction); } else { selectHostAction.setTitle(DataCenterSelectHostsAction); getOptionalActions().add(selectHostAction); } } }	private void updateAddAndSelectHostAvailability(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> hosts, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> availableHosts) { org.ovirt.engine.ui.uicommonweb.UICommand addHostAction = new org.ovirt.engine.ui.uicommonweb.UICommand("AddHost", this); addHostAction.setIsExecutionAllowed(((clusters.size()) > 0)); if (hosts.isEmpty()) { addHostAction.setTitle(DataCenterConfigureHostsAction); getCompulsoryActions().add(addHostAction); } else { addHostAction.setTitle(DataCenterAddAnotherHostAction); getOptionalActions().add(addHostAction); } org.ovirt.engine.ui.uicommonweb.UICommand selectHostAction = new org.ovirt.engine.ui.uicommonweb.UICommand("SelectHost", this); selectHostAction.setIsChangeable(((availableHosts.size()) > 0)); selectHostAction.setIsExecutionAllowed(((availableHosts.size()) > 0)); if ((clusters.size()) > 0) { if (hosts.isEmpty()) { selectHostAction.setTitle(DataCenterSelectHostsAction); getCompulsoryActions().add(selectHostAction); } else { selectHostAction.setTitle(DataCenterSelectHostsAction); getOptionalActions().add(selectHostAction); } } }
@java.lang.Override public void updateAllDiskImageDynamicWithDiskIdByVmId(java.util.Collection<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic>> diskImageDynamicForVm) { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic>> sortedDisks = new java.util.ArrayList<>(); sortedDisks.addAll(diskImageDynamicForVm); java.util.Collections.sort(sortedDisks, new <START_MOD>org.ovirt.engine.core.common.utils.PairFirstComparator(new org.ovirt.engine.core.common.utils.NaturalOrderComparator<END_MOD><org.ovirt.engine.core.compat.Guid<START_MOD>>())); getCallsHandler().executeStoredProcAsBatch("Updatedisk_image_dynamic_by_disk_id_and_vm_id", sortedDisks, getBatchImageGroupMapper<END_MOD>()); }	@java.lang.Override public void updateAllDiskImageDynamicWithDiskIdByVmId(java.util.Collection<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic>> diskImageDynamicForVm) { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic>> sortedDisks = new java.util.ArrayList<>(); sortedDisks.addAll(diskImageDynamicForVm); java.util.Collections.sort(sortedDisks, new org.ovirt.engine.core.common.utils.PairFirstComparator(new org.ovirt.engine.core.common.utils.NaturalOrderComparator())); getCallsHandler().executeStoredProcAsBatch("Updatedisk_image_dynamic_by_disk_id_and_vm_id", sortedDisks, getBatchImageGroupMapper()); }
@java.lang.Override public java.lang.String toString() { return ((<START_MOD>java.util.Objects.toString<END_MOD>(getFirst()<START_MOD>, null<END_MOD>)) + '.') + (<START_MOD>java.util.Objects.toString<END_MOD>(getSecond()<START_MOD>, null<END_MOD>)); }	@java.lang.Override public java.lang.String toString() { return ((java.util.Objects.toString(getFirst())) + '.') + (java.util.Objects.toString(getSecond())); }
@org.junit.Test public void testParameterMapDeserialization() { java.lang.StringBuilder buf = new java.lang.StringBuilder(""); buf.append("{\"@class\" : \"org.ovirt.engine.core.common.utils.ParametersMap\","); buf.append("\"version=0;uuid=8d8c3ad4-8f92-11e5-b702-54ee755c6cc7\" : "); buf.append("[ \"org.ovirt.engine.core.common.action.VdcActionType\", \"DestroyImage\" ]"); buf.append("}"); org.ovirt.engine.core.common.utils.ParametersMap data = new org.ovirt.engine.core.utils.serialization.json.JsonObjectDeserializer().deserialize(buf.toString(), org.ovirt.engine.core.common.utils.ParametersMap.class); assertNotNull(data); assertEquals(data.get(JsonOnjectTestParameters.NEXT_COMMAND), VdcActionType.DestroyImage); }	@org.junit.Test public void testParameterMapDeserialization() { java.lang.StringBuilder buf = new java.lang.StringBuilder(""); buf.append("{"); buf.append("\"NEXT_COMMAND_TYPE\" : [ \"org.ovirt.engine.core.common.action.VdcActionType\", \"DestroyImage\" ]"); buf.append("}"); java.util.Map<java.lang.String, java.io.Serializable> data = new org.ovirt.engine.core.utils.serialization.json.JsonObjectDeserializer().deserialize(buf.toString(), java.util.HashMap.class); assertNotNull(data); assertEquals(data.get("NEXT_COMMAND_TYPE"), VdcActionType.DestroyImage); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if (obj == null) return false; if ((getClass()) != (obj.getClass())) return false; org.ovirt.engine.core.common.businessentities.CommandEntity other = ((org.ovirt.engine.core.common.businessentities.CommandEntity) (obj)); return (((<START_MOD>(<END_MOD>java.util.Objects.equals(commandId, other.commandId)) && ((commandType) == (other.commandType))) && (java.util.Objects.equals(getGuid(parentCommandId), getGuid(other.parentCommandId)))) && (java.util.Objects.equals(getGuid(rootCommandId), getGuid(other.rootCommandId)))<START_MOD>) && (java.util.Objects.equals(data, other.data))<END_MOD>; }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.CommandEntity)) { return false; } org.ovirt.engine.core.common.businessentities.CommandEntity other = ((org.ovirt.engine.core.common.businessentities.CommandEntity) (obj)); return ((((java.util.Objects.equals(commandId, other.commandId)) && ((commandType) == (other.commandType))) && (java.util.Objects.equals(getGuid(parentCommandId), getGuid(other.parentCommandId)))) && (java.util.Objects.equals(getGuid(rootCommandId), getGuid(other.rootCommandId)))) && (java.util.Objects.equals(data, other.data)); }
public static org.ovirt.engine.core.common.businessentities.CommandEntity buildCommandEntity(org.ovirt.engine.core.compat.Guid userId, org.ovirt.engine.core.compat.Guid commandId, org.ovirt.engine.core.compat.Guid parentCommandId, org.ovirt.engine.core.compat.Guid rootCommandId, org.ovirt.engine.core.compat.Guid jobId, org.ovirt.engine.core.compat.Guid stepId, org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase params, org.ovirt.engine.core.compat.CommandStatus status, boolean callbackEnabled, org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue<START_MOD>, org.ovirt.engine.core.common.utils.ParametersMap data<END_MOD>) { org.ovirt.engine.core.common.businessentities.CommandEntity entity = new org.ovirt.engine.core.common.businessentities.CommandEntity(); entity.setUserId(userId); entity.setId(commandId); entity.setParentCommandId(parentCommandId); entity.setRootCommandId(rootCommandId); entity.setJobId(jobId); entity.setStepId(stepId); entity.setCommandType(actionType); entity.setCommandParameters(params); entity.setCommandStatus(status); entity.setCallbackEnabled(callbackEnabled); entity.setReturnValue(returnValue); <START_MOD>entity.setData(data); <END_MOD>return entity; }	public static org.ovirt.engine.core.common.businessentities.CommandEntity buildCommandEntity(org.ovirt.engine.core.compat.Guid userId, org.ovirt.engine.core.compat.Guid commandId, org.ovirt.engine.core.compat.Guid parentCommandId, org.ovirt.engine.core.compat.Guid rootCommandId, org.ovirt.engine.core.compat.Guid jobId, org.ovirt.engine.core.compat.Guid stepId, org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase params, org.ovirt.engine.core.compat.CommandStatus status, boolean callbackEnabled, org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue, java.util.Map<java.lang.String, java.io.Serializable> data) { org.ovirt.engine.core.common.businessentities.CommandEntity entity = new org.ovirt.engine.core.common.businessentities.CommandEntity(); entity.setUserId(userId); entity.setId(commandId); entity.setParentCommandId(parentCommandId); entity.setRootCommandId(rootCommandId); entity.setJobId(jobId); entity.setStepId(stepId); entity.setCommandType(actionType); entity.setCommandParameters(params); entity.setCommandStatus(status); entity.setCallbackEnabled(callbackEnabled); entity.setReturnValue(returnValue); entity.setData(data); return entity; }
public void setData(org.ovirt.engine.core.common.utils.ParametersMap data) { this.data = data; }	public void setData(java.util.Map<java.lang.String, java.io.Serializable> data) { this.data = data; }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(commandId) ?   : commandId.hashCode()); result = (prime * result) + ((commandType) == null ?   : commandType.hashCode()); result = (prime * result) + (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(parentCommandId) ?   : parentCommandId.hashCode()); result = (prime * result) + (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(rootCommandId) ?   : rootCommandId.hashCode()); <START_MOD>result = (prime * result) + (data.hashCode()); <END_MOD>return result; }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(commandId, commandType, parentCommandId, rootCommandId, data); }
private org.ovirt.engine.core.common.businessentities.CommandEntity buildCommandEntity(org.ovirt.engine.core.compat.Guid rootCommandId, boolean enableCallback) { return org.ovirt.engine.core.common.businessentities.CommandEntity.buildCommandEntity(org.ovirt.engine.core.bll.CommandBase.getUserId(), getCommandId(), ((getParameters().getParentParameters()) == null ? org.ovirt.engine.core.compat.Guid.Empty : getParameters().getParentParameters().getCommandId()), rootCommandId, (((getExecutionContext()) == null) || ((getExecutionContext().getJob()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getJob().getId()), (((getExecutionContext()) == null) || ((getExecutionContext().getStep()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getStep().getId()), getActionType(), getParameters(), commandStatus, enableCallback, getReturnValue()<START_MOD>, getData()<END_MOD>); }	private org.ovirt.engine.core.common.businessentities.CommandEntity buildCommandEntity(org.ovirt.engine.core.compat.Guid rootCommandId, boolean enableCallback) { return org.ovirt.engine.core.common.businessentities.CommandEntity.buildCommandEntity(org.ovirt.engine.core.bll.CommandBase.getUserId(), getCommandId(), ((getParameters().getParentParameters()) == null ? org.ovirt.engine.core.compat.Guid.Empty : getParameters().getParentParameters().getCommandId()), rootCommandId, (((getExecutionContext()) == null) || ((getExecutionContext().getJob()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getJob().getId()), (((getExecutionContext()) == null) || ((getExecutionContext().getStep()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getStep().getId()), getActionType(), getParameters(), commandStatus, enableCallback, getReturnValue(), getCommandData()); }
@org.junit.Test public void serializeParametersMap() { org.ovirt.engine.core.common.utils.ParametersMap data = new org.ovirt.engine.core.common.utils.ParametersMap(); data.put(JsonOnjectTestParameters.NEXT_COMMAND, VdcActionType.DestroyImage); org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer serializer = new org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer(); org.junit.Assert.assertTrue(((serializer.serialize(data).length()) > 0)); }	@org.junit.Test public void serializeParametersMap() { java.util.Map<java.lang.String, java.io.Serializable> data = new java.util.HashMap<>(); data.put("NEXT_COMMAND_TYPE", VdcActionType.DestroyImage); org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer serializer = new org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer(); org.junit.Assert.assertTrue(((serializer.serialize(data).length()) > 0)); }
public void updateCommandData(org.ovirt.engine.core.compat.Guid commandId, org.ovirt.engine.core.common.utils.ParametersMap data) { final org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = get(commandId); if (cmdEntity != null) { cmdEntity.setData(data); saveOrUpdateWithoutTransaction(cmdEntity); } }	public void updateCommandData(org.ovirt.engine.core.compat.Guid commandId, java.util.Map<java.lang.String, java.io.Serializable> data) { final org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = get(commandId); if (cmdEntity != null) { cmdEntity.setData(data); saveOrUpdateWithoutTransaction(cmdEntity); } }
public void updateCommandData(final org.ovirt.engine.core.compat.Guid commandId, final org.ovirt.engine.core.common.utils.ParametersMap data) { commandsCache.updateCommandData(commandId, data); }	public void updateCommandData(final org.ovirt.engine.core.compat.Guid commandId, final java.util.Map<java.lang.String, java.io.Serializable> data) { commandsCache.updateCommandData(commandId, data); }
public static void updateCommandData(org.ovirt.engine.core.compat.Guid commandId, org.ovirt.engine.core.common.utils.ParametersMap data) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.coco.updateCommandData(commandId, data); }	public static void updateCommandData(org.ovirt.engine.core.compat.Guid commandId, java.util.Map<java.lang.String, java.io.Serializable> data) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.coco.updateCommandData(commandId, data); }
public static org.ovirt.engine.core.common.utils.ParametersMap getCommandData(org.ovirt.engine.core.compat.Guid commandId) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.coco.getCommandEntity(commandId); return cmdEntity == null ? new org.ovirt.engine.core.common.utils.ParametersMap() : cmdEntity.getData(); }	public static java.util.Map<java.lang.String, java.io.Serializable> getCommandData(org.ovirt.engine.core.compat.Guid commandId) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.coco.getCommandEntity(commandId); return cmdEntity == null ? new java.util.HashMap<>() : cmdEntity.getData(); }
public void updateCommandData() { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.updateCommandData(getCommandId(), data); }	public void updateCommandData() { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.updateCommandData(getCommandId(), commandData); }
@java.lang.Override protected org.ovirt.engine.core.common.businessentities.CommandEntity generateNewEntity() { org.ovirt.engine.core.common.<START_MOD>utils.ParametersMap data = new org.ovirt.engine.core.common.utils.ParametersMap(); data.put(org.ovirt.engine.core.dao.CommandEntityDaoTest.NEXT_COMMAND, VdcActionType.DestroyImage); org.ovirt.engine.core.common.<END_MOD>businessentities.CommandEntity commandEntity = new org.ovirt.engine.core.common.businessentities.CommandEntity(); commandEntity.setCommandType(VdcActionType.AddBond); commandEntity.setCreatedAt(new java.util.Date(java.lang.System.currentTimeMillis())); commandEntity.setId(org.ovirt.engine.core.compat.Guid.newGuid()); commandEntity.setCommandStatus(CommandStatus.ACTIVE); <START_MOD>commandEntity.setData(data); <END_MOD>org.ovirt.engine.core.common.action.VdcActionParametersBase params = new org.ovirt.engine.core.common.action.VdcActionParametersBase(); commandEntity.setCommandParameters(params); return commandEntity; }	@java.lang.Override protected org.ovirt.engine.core.common.businessentities.CommandEntity generateNewEntity() { java.util.Map<java.lang.String, java.io.Serializable> data = new java.util.HashMap<>(); data.put("NEXT_COMMAND_TYPE", VdcActionType.DestroyImage); org.ovirt.engine.core.common.businessentities.CommandEntity commandEntity = new org.ovirt.engine.core.common.businessentities.CommandEntity(); commandEntity.setCommandType(VdcActionType.AddBond); commandEntity.setCreatedAt(new java.util.Date(java.lang.System.currentTimeMillis())); commandEntity.setId(org.ovirt.engine.core.compat.Guid.newGuid()); commandEntity.setCommandStatus(CommandStatus.ACTIVE); commandEntity.setData(data); org.ovirt.engine.core.common.action.VdcActionParametersBase params = new org.ovirt.engine.core.common.action.VdcActionParametersBase(); commandEntity.setCommandParameters(params); return commandEntity; }
private boolean validateName(final org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData data) { final int maxNameLength = getMaxNameLength(data.getVm()); org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> tmp = new org.ovirt.engine.ui.uicommonweb.models.EntityModel(data.getVm().getName()); tmp.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(maxNameLength), new org.ovirt.engine.ui.uicommonweb.validation.I18NNameValidation(), new org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmModel.UniqueNameValidator(data)<START_MOD> }); data.setError((tmp.getIsValid() ? null : org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().invalidName()));<END_MOD> return <START_MOD>tmp.getIsValid<END_MOD>(); }	private boolean validateName(final org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData data) { final int maxNameLength = getMaxNameLength(data.getVm()); org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> tmp = new org.ovirt.engine.ui.uicommonweb.models.EntityModel(data.getVm().getName()); tmp.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(maxNameLength), new org.ovirt.engine.ui.uicommonweb.validation.I18NNameValidation(), new org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmModel.UniqueNameValidator(data), new org.ovirt.engine.ui.uicommonweb.validation.IValidation() { @java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { return (data.isNameExistsInTheSystem()) && (data.getName().equals(data.getVm().getName())) ? org.ovirt.engine.ui.uicommonweb.validation.ValidationResult.fail(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason()) : org.ovirt.engine.ui.uicommonweb.validation.ValidationResult.ok(); } } }); data.setError((tmp.getIsValid() ? null : org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().invalidName())); return tmp.getIsValid(); }
protected T determineSelectedItems(java.util.List<T> newItems, T lastSelectedItem, java.util.List<T> lastSelectedItems) { T newSelectedItem = null; for (T newItem : newItems) { if (<START_MOD>!(newItem instanceof org.ovirt.engine.core.common.businessentities.IVdcQueryable)) { return newSelectedItem; } if (<END_MOD>((org.ovirt.engine.core.common.businessentities.IVdcQueryable) (newItem)).getQueryableId().equals(((org.ovirt.engine.core.common.businessentities.IVdcQueryable) (lastSelectedItem)).getQueryableId())) { newSelectedItem = newItem; } else { for (T item : lastSelectedItems) { if (((org.ovirt.engine.core.common.businessentities.IVdcQueryable) (newItem)).getQueryableId().equals(((org.ovirt.engine.core.common.businessentities.IVdcQueryable) (item)).getQueryableId())) { selectedItems.add(newItem); } } } } return newSelectedItem; }	protected T determineSelectedItems(java.util.List<T> newItems, T lastSelectedItem, java.util.List<T> lastSelectedItems) { T newSelectedItem = null; for (T newItem : newItems) { if (org.ovirt.engine.ui.uicommonweb.models.SearchableListModel.itemsEqual(newItem, lastSelectedItem)) { newSelectedItem = newItem; } else { for (T item : lastSelectedItems) { if (org.ovirt.engine.ui.uicommonweb.models.SearchableListModel.itemsEqual(newItem, item)) { selectedItems.add(newItem); } } } } return newSelectedItem; }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Could not detect Guest Agent on the VM. Note that without a Guest Agent the snapshot's consistency cannot be ensured.") java.lang.String liveSnapshotWithNoGuestAgentMsg();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Could not detect Guest Agent on the VM. Note that without a Guest Agent the data on the created snapshot may be inconsistent.") java.lang.String liveSnapshotWithNoGuestAgentMsg();
private static <T> boolean itemsEqual(T item1, T item2) { if ((item1 instanceof org.ovirt.engine.core.common.businessentities.IVdcQueryable) && (item2 instanceof org.ovirt.engine.core.common.businessentities.IVdcQueryable)) { return ((org.ovirt.engine.core.common.businessentities.IVdcQueryable) (item1)).getQueryableId().equals(((org.ovirt.engine.core.common.businessentities.IVdcQueryable) (item2)).getQueryableId()); } return org.ovirt.engine.ui.uicommonweb.models.Objects.equals(item1, item2); }	private static <T> boolean itemsEqual(T item1, T item2) { if ((item1 instanceof org.ovirt.engine.core.common.businessentities.IVdcQueryable) && (item2 instanceof org.ovirt.engine.core.common.businessentities.IVdcQueryable)) { return ((org.ovirt.engine.core.common.businessentities.IVdcQueryable) (item1)).getQueryableId().equals(((org.ovirt.engine.core.common.businessentities.IVdcQueryable) (item2)).getQueryableId()); } return java.util.Objects.equals(item1, item2); }
public void removeDevice(org.ovirt.engine.core.common.businessentities.VmDeviceId deviceId) { removedDeviceIds.add(deviceId); }	public void removeDevice(org.ovirt.engine.core.common.businessentities.VmDeviceId deviceId) { if (isVmDeviceChanged(deviceId, fetchTime)) { lockTouchedVm(deviceId.getVmId()); removedDeviceIds.add(deviceId); } }
@java.lang.Override public void onNext(java.util.Map<java.lang.String, java.lang.Object> map) { try { printEventInDebug(map); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData>> changedVms = new java.util.ArrayList<>(); <START_MOD>org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change deviceChange<END_MOD> = <START_MOD>org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.getInstance().createChange(vdsManager.getVdsId()<END_MOD>); convertEvent(changedVms, <START_MOD>deviceChange<END_MOD>, map); <START_MOD>deviceChange.flush(); <END_MOD>if (!(changedVms.isEmpty())) { getVmsMonitoring(changedVms).perform(); } } finally { subscription.request(1); } }	@java.lang.Override public void onNext(java.util.Map<java.lang.String, java.lang.Object> map) { try { printEventInDebug(map); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData>> changedVms = new java.util.ArrayList<>(); convertEvent(changedVms, map); if (!(changedVms.isEmpty())) { getVmsMonitoring(changedVms).perform(); processDevices(changedVms.stream().map(( pair) -> pair.getSecond().getVmDynamic()), java.lang.System.nanoTime()); } } finally { subscription.request(1); } }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.instance = this; }	@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.instance = this; long fetchTime = java.lang.System.nanoTime(); getVmDynamicDao().getAllDevicesHashes().forEach(( pair) -> vmDevicesStatuses.put(pair.getFirst(), new org.ovirt.engine.core.vdsbroker.DevicesStatus(pair.getSecond(), fetchTime))); }
public void flush() { this.flush(this); }	public void flush() { java.util.Map<java.lang.String, java.lang.Object>[] vmInfos = getVmInfo(vdsId, vmsToUpdate); if (vmInfos != null) { for (java.util.Map<java.lang.String, java.lang.Object> vmInfo : vmInfos) { processFullList(vmInfo); } } for (org.ovirt.engine.core.common.businessentities.VmDevice deviceToUpdate : devicesToUpdate) { processDeviceUpdate(this, deviceToUpdate); } saveDevicesToDb(this); unlockTouchedVms(); }
public void addDevice(org.ovirt.engine.core.common.businessentities.VmDevice device) { addedDevices.add(device); }	public void updateVmFromFullList(java.util.Map<java.lang.String, java.lang.Object> vmInfo) { if ((!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(getGroupCompatibilityVersion(vdsId)))) && (isVmDevicesChanged(org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.getVmId(vmInfo), org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.UPDATE_HASH, fetchTime))) { processFullList(vmInfo); } }
private static org.ovirt.engine.core.compat.Guid getDeviceId(java.util.Map<java.lang.String, java.lang.Object> device) { java.lang.String deviceId = ((java.lang.String) (device.get(VdsProperties.DeviceId))); return deviceId == null ? null : new org.ovirt.engine.core.compat.Guid(deviceId); }	private java.lang.String getDeviceLogicalName(org.ovirt.engine.core.compat.Guid vdsId, java.util.Map<java.lang.String, java.lang.Object> vmInfo, java.util.Map<java.lang.String, java.lang.Object> device) { org.ovirt.engine.core.compat.Guid deviceId = org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.getDeviceId(device); if (((deviceId != null) && (org.ovirt.engine.core.common.FeatureSupported.reportedDisksLogicalNames(getGroupCompatibilityVersion(vdsId)))) && (VmDeviceType.DISK.getName().equals(device.get(VdsProperties.Device)))) { try { return org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.getDeviceLogicalName(((java.util.Map<java.lang.String, java.lang.Object>) (vmInfo.get(VdsProperties.GuestDiskMapping))), deviceId); } catch (java.lang.Exception e) { org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.log.error("error while getting device name when processing, vm '{}', device info '{}' with exception, skipping '{}'", vmInfo.get(VdsProperties.vm_guid), device, e.getMessage()); org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.log.error("Exception", e); } } return null; }
public void updateDevice(org.ovirt.engine.core.common.businessentities.VmDevice device) { updatedDevices.add(device); }	public void updateDevice(org.ovirt.engine.core.common.businessentities.VmDevice device) { if (isVmDeviceChanged(device.getId(), fetchTime)) { lockTouchedVm(device.getVmId()); devicesToUpdate.add(device); } }
public org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change createChange() { return new org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change(); }	public org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change createChange(long fetchTime) { return new org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change(fetchTime); }
private boolean isVmDevicesChanged(org.ovirt.engine.core.compat.Guid vmId, java.lang.String vdsmHash) { if (vdsmHash != null) { java.lang.String dbHash = vmDevicesHash.put(vmId, vdsmHash); return !(java.util.Objects.equals(dbHash, vdsmHash)); } else { return false; } }	private boolean isVmDevicesChanged(org.ovirt.engine.core.compat.Guid vmId, java.lang.String vdsmHash, long fetchTime) { if (vdsmHash == null) { return false; } synchronized(devicesStatusesLock) { org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.DevicesStatus previousStatus = vmDevicesStatuses.get(vmId); boolean previousHashUpdate = (previousStatus != null) && (org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.UPDATE_HASH.equals(previousStatus.getHash())); if (((previousStatus == null) || previousHashUpdate) || (org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.fetchTimeBefore(previousStatus.getFetchTime(), fetchTime))) { vmDevicesStatuses.put(vmId, new org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.DevicesStatus(vdsmHash, fetchTime)); return (previousStatus == null) || ((!previousHashUpdate) && (!(java.util.Objects.equals(previousStatus.getHash(), vdsmHash)))); } else { return false; } } }
public void flush(org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change change) { java.util.Map<java.lang.String, java.lang.Object>[] vms = getVmInfo(change); if (vms != null) { for (java.util.Map<java.lang.String, java.lang.Object> vm : vms) { processVmDevices(change, vm); } } saveDevicesToDb(change); }	private boolean isVmDeviceChanged(org.ovirt.engine.core.common.businessentities.VmDeviceId deviceId, long fetchTime) { synchronized(devicesStatusesLock) { org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.DevicesStatus devicesStatus = vmDevicesStatuses.computeIfAbsent(deviceId.getVmId(), ( vmId) -> new org.ovirt.engine.core.vdsbroker.DevicesStatus()); java.lang.Long prevFetchTime = devicesStatus.getDeviceFetchTime(deviceId.getDeviceId()); if (org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.fetchTimeBefore(prevFetchTime, fetchTime)) { devicesStatus.setDeviceFetchTime(deviceId.getDeviceId(), fetchTime); return true; } else { return false; } } }
public void updateVmIfChanged(org.ovirt.engine.core.compat.Guid vmId, java.lang.String vdsmHash) { if ((!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(getGroupCompatibilityVersion(vdsId)))) && (isVmDevicesChanged(vmId, vdsmHash))) { updateVm(vmId); } }	public void updateVm(org.ovirt.engine.core.compat.Guid vmId, java.lang.String vdsmHash) { if ((!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(getGroupCompatibilityVersion(vdsId)))) && (isVmDevicesChanged(vmId, vdsmHash, fetchTime))) { lockTouchedVm(vmId); vmsToUpdate.add(vmId); } }
private void saveDevicesToDb(org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change change) { getVmDeviceDao().updateAllInBatch(change.updatedDevices); if (!(change.removedDeviceIds.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { getVmDeviceDao().removeAll(change.removedDeviceIds); return null; }); } if (!(change.addedDevices.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { getVmDeviceDao().saveAll(change.addedDevices); return null; }); } }	private void saveDevicesToDb(org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change change) { getVmDeviceDao().updateAllInBatch(change.updatedDevices); if (!(change.removedDeviceIds.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { getVmDeviceDao().removeAll(change.removedDeviceIds); return null; }); } if (!(change.addedDevices.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { getVmDeviceDao().saveAll(change.addedDevices); return null; }); } if (!(change.touchedVms.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { getVmDynamicDao().updateDevicesHashes(change.touchedVms.stream().map(( vmId) -> new org.ovirt.engine.core.vdsbroker.Pair<>(vmId, vmDevicesStatuses.get(vmId).getHash())).collect(java.util.stream.Collectors.toList())); return null; }); } }
private java.lang.String getDeviceLogicalName(java.util.Map<java.lang.String, java.lang.Object> diskMapping, org.ovirt.engine.core.compat.Guid deviceId) { if (diskMapping == null) { return null; } java.util.Map<java.lang.String, java.lang.Object> deviceMapping = null; java.lang.String modifiedDeviceId = deviceId.toString().substring(0, 20); for (java.util.Map.Entry<java.lang.String, java.lang.Object> entry : diskMapping.entrySet()) { java.lang.String serial = entry.getKey(); if ((serial != null) && (serial.contains(modifiedDeviceId))) { deviceMapping = ((java.util.Map<java.lang.String, java.lang.Object>) (entry.getValue())); break; } } return deviceMapping == null ? null : ((java.lang.String) (deviceMapping.get(VdsProperties.Name))); }	private static java.lang.String getDeviceLogicalName(java.util.Map<java.lang.String, java.lang.Object> diskMapping, org.ovirt.engine.core.compat.Guid deviceId) { if (diskMapping == null) { return null; } java.util.Map<java.lang.String, java.lang.Object> deviceMapping = null; java.lang.String modifiedDeviceId = deviceId.toString().substring(0, 20); for (java.util.Map.Entry<java.lang.String, java.lang.Object> entry : diskMapping.entrySet()) { java.lang.String serial = entry.getKey(); if ((serial != null) && (serial.contains(modifiedDeviceId))) { deviceMapping = ((java.util.Map<java.lang.String, java.lang.Object>) (entry.getValue())); break; } } return deviceMapping == null ? null : ((java.lang.String) (deviceMapping.get(VdsProperties.Name))); }
@java.lang.SuppressWarnings("unchecked") private void convertEvent(java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData>> changedVms, <START_MOD>org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change deviceChange, <END_MOD>java.util.<START_MOD>Map<java.lang.String, java.lang.Object> map) { java.lang.Double notifyTime = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.removeNotifyTimeFromVmStatusEvent(map); for (java.util.Map.Entry<java.lang.String, java.lang.Object> entry : map.entrySet()) { org.ovirt.engine.core.compat.Guid vmid = new org.ovirt.engine.core.compat.Guid(entry.getKey()); <END_MOD>org.ovirt.engine.core.common.<START_MOD>businessentities.VM dbVm = dbFacade.getVmDao().get(vmid); org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData vdsmVm; if (dbVm == null) { vdsmVm = createVmInternalData(vmid, ((java.util.Map<java.lang.String, java.lang.Object>) (map.get(vmid.toString()))), notifyTime); } else { vdsmVm = createVmInternalData(dbVm, ((java.util.Map<java.lang.String, java.lang.Object>) (map.get(vmid.toString()))), notifyTime); if (!(vdsManager.getVdsId().equals(dbVm.getRunOnVds()))) { dbVm = null; } } changedVms.add(new org.ovirt.engine.core.common.<END_MOD>utils.Pair<START_MOD>(dbVm,<END_MOD> vdsmVm<START_MOD>)); deviceChange.updateVmIfChanged(dbVm.getId(),<END_MOD> vdsmVm<START_MOD>.getVmDynamic().getHash()<END_MOD>); } }	@java.lang.SuppressWarnings("unchecked") private void convertEvent(java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData>> changedVms, java.util.Map<java.lang.String, java.lang.Object> map) { java.lang.Double notifyTime = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.removeNotifyTimeFromVmStatusEvent(map); for (java.util.Map.Entry<java.lang.String, java.lang.Object> entry : map.entrySet()) { org.ovirt.engine.core.compat.Guid vmid = new org.ovirt.engine.core.compat.Guid(entry.getKey()); org.ovirt.engine.core.common.businessentities.VM dbVm = dbFacade.getVmDao().get(vmid); org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData vdsmVm; if (dbVm == null) { vdsmVm = createVmInternalData(vmid, ((java.util.Map<java.lang.String, java.lang.Object>) (map.get(vmid.toString()))), notifyTime); } else { vdsmVm = createVmInternalData(dbVm, ((java.util.Map<java.lang.String, java.lang.Object>) (map.get(vmid.toString()))), notifyTime); if (!(vdsManager.getVdsId().equals(dbVm.getRunOnVds()))) { dbVm = null; } } changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, vdsmVm)); } }
private void handleRemovedDevices(org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change change, org.ovirt.engine.core.compat.Guid vmId, java.util.Set<org.ovirt.engine.core.compat.Guid> libvirtDevices, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> dbDevices) { for (org.ovirt.engine.core.common.businessentities.VmDevice device : dbDevices) { if (libvirtDevices.contains(device.getDeviceId())) { continue; } if (org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.deviceWithoutAddress(device)) { continue; } if (device.getIsManaged()) { if (device.getIsPlugged()) { device.setIsPlugged(java.lang.Boolean.FALSE); device.setAddress(""); change.updateDevice(device); org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.log.debug("VM '{}' managed pluggable device was unplugged : '{}'", vmId, device); } else if (!(org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.devicePluggable(device))) { org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.log.error("VM '{}' managed non pluggable device was removed unexpectedly from libvirt: '{}'", vmId, device); } } else { change.removeDevice(device.getId()); org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.log.debug("VM '{}' unmanaged device was marked for remove : {1}", vmId, device); } } }	private void handleRemovedDevices(org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change change, org.ovirt.engine.core.compat.Guid vmId, java.util.Set<org.ovirt.engine.core.compat.Guid> libvirtDevices, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> dbDevices) { for (org.ovirt.engine.core.common.businessentities.VmDevice device : dbDevices) { if (libvirtDevices.contains(device.getDeviceId())) { continue; } if (org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.deviceWithoutAddress(device)) { continue; } if (device.getIsManaged()) { if (device.getIsPlugged()) { device.setIsPlugged(java.lang.Boolean.FALSE); device.setAddress(""); change.updatedDevices.add(device); org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.log.debug("VM '{}' managed pluggable device was unplugged : '{}'", vmId, device); } else if (!(org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.devicePluggable(device))) { org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.log.error("VM '{}' managed non pluggable device was removed unexpectedly from libvirt: '{}'", vmId, device); } } else { change.removedDeviceIds.add(device.getId()); org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.log.debug("VM '{}' unmanaged device was marked for remove : {1}", vmId, device); } } }
private java.util.Map<java.lang.String, java.lang.Object>[] getVmInfo(org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change change) { if (((change.vdsId) == null) || (change.vmsToUpdate.isEmpty())) { return null; } java.util.Map<java.lang.String, java.lang.Object>[] result = new java.util.Map[0]; org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(change.vdsId); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = getResourceManager().runVdsCommand(VDSCommandType.FullList, new org.ovirt.engine.core.common.vdscommands.FullListVDSCommandParameters(vds, change.vmsToUpdate)); if (vdsReturnValue.getSucceeded()) { result = ((java.util.Map<java.lang.String, java.lang.Object>[]) (vdsReturnValue.getReturnValue())); } return result; }	private java.util.Map<java.lang.String, java.lang.Object>[] getVmInfo(org.ovirt.engine.core.compat.Guid vdsId, java.util.List<org.ovirt.engine.core.compat.Guid> vms) { if ((vdsId == null) || (vms.isEmpty())) { return null; } java.util.Map<java.lang.String, java.lang.Object>[] result = new java.util.Map[0]; org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(vdsId); java.util.List<java.lang.String> vmIds = vms.stream().map(( guid) -> guid.toString()).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = getResourceManager().runVdsCommand(VDSCommandType.FullList, new org.ovirt.engine.core.common.vdscommands.FullListVDSCommandParameters(vds, vmIds)); if (vdsReturnValue.getSucceeded()) { result = ((java.util.Map<java.lang.String, java.lang.Object>[]) (vdsReturnValue.getReturnValue())); } return result; }
private void refreshVmStats() { for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> monitoredVm : monitoredVms) { if (tryLockVmForUpdate(monitoredVm)) { org.ovirt.engine.core.vdsbroker.VmAnalyzer vmAnalyzer = getVmAnalyzer(monitoredVm); vmAnalyzers.add(vmAnalyzer); vmAnalyzer.analyze(); } } saveVmsToDb(); }	private void refreshVmStats() { for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> monitoredVm : monitoredVms) { if (tryLockVmForUpdate(monitoredVm)) { org.ovirt.engine.core.vdsbroker.VmAnalyzer vmAnalyzer = getVmAnalyzer(monitoredVm); vmAnalyzers.add(vmAnalyzer); vmAnalyzer.analyze(); } } addUnmanagedVms(); flush(); }
private void saveVmsToDb() { addUnmanagedVms(); getDbFacade().getVmDynamicDao().updateAllInBatch(vmDynamicToSave.values()); getDbFacade().getVmStatisticsDao().updateAllInBatch(vmStatisticsToSave); final java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics> allVmInterfaceStatistics = new java.util.LinkedList<>(); for (java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> list : vmInterfaceStatisticsToSave) { for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : list) { allVmInterfaceStatistics.add(iface.getStatistics()); } } getDbFacade().getVmNetworkStatisticsDao().updateAllInBatch(allVmInterfaceStatistics); getDbFacade().getDiskImageDynamicDao().updateAllDiskImageDynamicWithDiskIdByVmId(vmDiskImageDynamicToSave); getDbFacade().getLunDao().updateAllInBatch(vmLunDisksToSave); saveVmGuestAgentNetworkDevices(); saveVmJobsToDb(); }	private void flush() { saveVmDynamic(); saveVmStatistics(); saveVmInterfaceStatistics(); saveVmDiskImageStatistics(); saveVmLunDiskStatistics(); saveVmGuestAgentNetworkDevices(); saveVmJobsToDb(); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("poll") public void poll() { if (vdsManager.isMonitoringNeeded()) { org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher = getVmsFetcher(); long fetchTime = java.lang.System.nanoTime(); if (fetcher.fetch()) { <START_MOD>processDevices(fetcher); <END_MOD>getVmsMonitoring(fetcher, fetchTime).perform(); } else { org.ovirt.engine.core.vdsbroker.PollVmStatsRefresher.log.info( to fetch vms info for host '{}' - skipping VMs monitoring. vdsManager.getVdsName()); } } }	@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("poll") public void poll() { if (vdsManager.isMonitoringNeeded()) { org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher = getVmsFetcher(); long fetchTime = java.lang.System.nanoTime(); if (fetcher.fetch()) { getVmsMonitoring(fetcher, fetchTime).perform(); processDevices(fetcher.getVdsmVms().stream().map(VmInternalData::getVmDynamic), fetchTime); } else { org.ovirt.engine.core.vdsbroker.PollVmStatsRefresher.log.info("Failed to fetch vms info for host '{}' - skipping VMs monitoring.", vdsManager.getVdsName()); } } }
public org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change createChange(org.ovirt.engine.core.compat.Guid vdsId) { return new org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change(vdsId); }	public org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change createChange(org.ovirt.engine.core.compat.Guid vdsId, long fetchTime) { return new org.ovirt.engine.core.vdsbroker.VmDevicesMonitoring.Change(vdsId, fetchTime); }
public void updateVm(org.ovirt.engine.core.compat.Guid vmId) { vmsToUpdate.add(vmId.toString()); }	private void lockTouchedVm(org.ovirt.engine.core.compat.Guid vmId) { lockOnce(vmId); touchedVms.push(vmId); }
private org.ovirt.engine.core.vdsbroker.VmsMonitoring getVmsMonitoring(java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData>> devicesChangedVms) { return new org.ovirt.engine.core.vdsbroker.VmsMonitoring(vdsManager, devicesChangedVms, auditLogDirector, java.lang.System.nanoTime()); }	private org.ovirt.engine.core.vdsbroker.VmsMonitoring getVmsMonitoring() { return new org.ovirt.engine.core.vdsbroker.VmsMonitoring(vdsManager, auditLogDirector, java.lang.System.nanoTime()); }
@java.lang.Override public void onNext(java.util.Map<java.lang.String, java.lang.Object> map) { try { printEventInDebug(map); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData>> changedVms = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData>> devicesChangedVms = new java.util.ArrayList<>(); convertEvent(changedVms, devicesChangedVms, map); if ((!(changedVms.isEmpty())) || (!(devicesChangedVms.isEmpty()))) { getVmsMonitoring(devicesChangedVms).perform(<START_MOD>changedVms<END_MOD>); } } finally { subscription.request(1); } }	@java.lang.Override public void onNext(java.util.Map<java.lang.String, java.lang.Object> map) { try { printEventInDebug(map); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData>> changedVms = new java.util.ArrayList<>(); convertEvent(changedVms, map); if (!(changedVms.isEmpty())) { getVmsMonitoring().perform(changedVms); processDevices(changedVms.stream().map(( pair) -> pair.getSecond().getVmDynamic()), java.lang.System.nanoTime()); } } finally { subscription.request(1); } }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("poll") public void poll() { if (vdsManager.isMonitoringNeeded()) { org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher = getVmsFetcher(); long fetchTime = java.lang.System.nanoTime(); if (fetcher.fetch()) { getVmsMonitoring(fetcher, fetchTime).perform(<START_MOD>fetcher.getChangedVms()<END_MOD>); } else { org.ovirt.engine.core.vdsbroker.PollVmStatsRefresher.log.info( to fetch vms info for host '{}' - skipping VMs monitoring. vdsManager.getVdsName()); } } }	@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("poll") public void poll() { if (vdsManager.isMonitoringNeeded()) { org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher = getVmsFetcher(); long fetchTime = java.lang.System.nanoTime(); if (fetcher.fetch()) { getVmsMonitoring(fetchTime).perform(fetcher.getChangedVms()); processDevices(fetcher.getVdsmVms().stream().map(VmInternalData::getVmDynamic), fetchTime); } else { org.ovirt.engine.core.vdsbroker.PollVmStatsRefresher.log.info("Failed to fetch vms info for host '{}' - skipping VMs monitoring.", vdsManager.getVdsName()); } } }
private org.ovirt.engine.core.vdsbroker.VmsMonitoring getVmsMonitoring(org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher, long fetchTime) { return new org.ovirt.engine.core.vdsbroker.VmsMonitoring(vdsManager, fetcher.getVmsWithChangedDevices(), auditLogDirector, fetchTime, isTimeToRefreshStatistics()); }	private org.ovirt.engine.core.vdsbroker.VmsMonitoring getVmsMonitoring(long fetchTime) { return new org.ovirt.engine.core.vdsbroker.VmsMonitoring(vdsManager, auditLogDirector, fetchTime, isTimeToRefreshStatistics()); }
private void refreshVmStats(<START_MOD>java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData>> monitoredVms<END_MOD>) { for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> monitoredVm : monitoredVms) { if (tryLockVmForUpdate(monitoredVm)) { org.ovirt.engine.core.vdsbroker.VmAnalyzer vmAnalyzer = getVmAnalyzer(monitoredVm); vmAnalyzers.add(vmAnalyzer); vmAnalyzer.analyze(); } } processVmsWithDevicesChange(); addUnmanagedVms(); flush(); }	private void refreshVmStats(java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData>> monitoredVms) { for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> monitoredVm : monitoredVms) { if (tryLockVmForUpdate(monitoredVm)) { org.ovirt.engine.core.vdsbroker.VmAnalyzer vmAnalyzer = getVmAnalyzer(monitoredVm); vmAnalyzers.add(vmAnalyzer); vmAnalyzer.analyze(); } } addUnmanagedVms(); flush(); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.VirtualNumaNode model, org.ovirt.engine.api.model.VirtualNumaNode transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getMemory(), transform.getMemory()); java.util.List<org.ovirt.engine.api.model.Core> cpus1 = model.getCpu().getCores().getCore(); java.util.List<org.ovirt.engine.api.model.Core> cpus2 = transform.getCpu().getCores().getCore(); assertEquals(cpus1.size(), cpus2.size()); for (int i = 0; i < (cpus1.size()); i++) { assertEquals(cpus1.get(i).getIndex(), cpus2.get(i).getIndex()); } java.util.List<org.ovirt.engine.api.model.NumaNodePin> pins1 = model.getNumaNodePins().getNumaNodePin(); java.util.List<org.ovirt.engine.api.model.NumaNodePin> pins2 = transform.getNumaNodePins().getNumaNodePin(); assertEquals(pins1.size(), pins2.size()); for (int i = 0; i < (pins1.size()); i++) { assertEquals(pins1.get(i).getIndex(), pins2.get(i).getIndex()); } }	@java.lang.Override protected void verify(org.ovirt.engine.api.model.VirtualNumaNode model, org.ovirt.engine.api.model.VirtualNumaNode transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getIndex(), transform.getIndex()); assertEquals(model.getMemory(), transform.getMemory()); java.util.List<org.ovirt.engine.api.model.Core> cpus1 = model.getCpu().getCores().getCores(); java.util.List<org.ovirt.engine.api.model.Core> cpus2 = transform.getCpu().getCores().getCores(); assertEquals(cpus1.size(), cpus2.size()); for (int i = 0; i < (cpus1.size()); i++) { assertEquals(cpus1.get(i).getIndex(), cpus2.get(i).getIndex()); } java.util.List<org.ovirt.engine.api.model.NumaNodePin> pins1 = model.getNumaNodePins().getNumaNodePins(); java.util.List<org.ovirt.engine.api.model.NumaNodePin> pins2 = transform.getNumaNodePins().getNumaNodePins(); assertEquals(pins1.size(), pins2.size()); for (int i = 0; i < (pins1.size()); i++) { assertEquals(pins1.get(i).getIndex(), pins2.get(i).getIndex()); } }
@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.VdsNumaNode node1, org.ovirt.engine.core.common.businessentities.VdsNumaNode node2) { return java.lang.Integer.compare(node1.getIndex(), node2.getIndex()); }	@java.lang.Override protected void doInit() { org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getVmNumaNodesForValidation().addAll(org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getParameters().getVmNumaNodeList()); }
public void initMocks(org.ovirt.engine.core.vdsbroker.VmTestPairs vmData, boolean run) { stubDaos(); when(vdsManager.getVdsId()).thenReturn(VmTestPairs.SRC_HOST_ID); when(vdsManager.getClusterId()).thenReturn(VmTestPairs.CLUSTER_ID); when(vdsManager.getCopyVds()).thenReturn(vdsManagerVds); when(vmManager.isColdReboot()).thenReturn(false); when(vmsMonitoring.<START_MOD>getVmManager(any())).thenReturn(vmManager); when(vmsMonitoring.getResourceManager()).thenReturn(resourceManager); when(resourceManager.<END_MOD>getVdsManager(<START_MOD>any(org.ovirt.engine.core.compat.Guid.class)<END_MOD>)).thenReturn(vdsManager); <START_MOD>org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(true); when(vmsMonitoring.getResourceManager().runVdsCommand<END_MOD>(any(<START_MOD>org.ovirt.engine.core.common.vdscommands.VDSCommandType.class), any(org.ovirt.engine.core.common.vdscommands.VDSParametersBase.class))).thenReturn(vdsReturnValue); mockDstHostStatus(VDSStatus.Up); mockVmInDbForDstVms(vmData); vmAnalyzer = spy(new org.ovirt.engine.core.vdsbroker.VmAnalyzer(vmData.dbVm(), vmData.vdsmVm(), vmsMonitoring)); doReturn(auditLogDirector).when(vmAnalyzer).getAuditLogDirector(); doReturn(vmsMonitoring).when(vmAnalyzer)<END_MOD>.getVdsManager(<START_MOD>); if (run) {<END_MOD> vmAnalyzer.analyze(); } }	public void initMocks(org.ovirt.engine.core.vdsbroker.VmTestPairs vmData, boolean run) { stubDaos(); when(vdsManager.getVdsId()).thenReturn(VmTestPairs.SRC_HOST_ID); when(vdsManager.getClusterId()).thenReturn(VmTestPairs.CLUSTER_ID); when(vdsManager.getCopyVds()).thenReturn(vdsManagerVds); when(vmManager.isColdReboot()).thenReturn(false); when(vmsMonitoring.getVmManager(any())).thenReturn(vmManager); when(vmsMonitoring.getResourceManager()).thenReturn(resourceManager); when(resourceManager.getVdsManager(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vdsManager); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(true); when(vmsMonitoring.getResourceManager().runVdsCommand(any(org.ovirt.engine.core.common.vdscommands.VDSCommandType.class), any(org.ovirt.engine.core.common.vdscommands.VDSParametersBase.class))).thenReturn(vdsReturnValue); mockDstHostStatus(VDSStatus.Up); mockVmInDbForDstVms(vmData); vmAnalyzer = spy(new org.ovirt.engine.core.vdsbroker.VmAnalyzer(vmData.dbVm(), vmData.vdsmVm(), vmsMonitoring)); doReturn(auditLogDirector).when(vmAnalyzer).getAuditLogDirector(); doReturn(vdsManager).when(vmAnalyzer).getVdsManager(); if (run) { vmAnalyzer.analyze(); } }
public org.ovirt.engine.core.bll.ValidationResult isVirtIoScsiValid(org.ovirt.engine.core.common.businessentities.VM vm) { if ((org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI) != (disk.getDiskInterface())) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if ((disk.getSgio()) != null) { if ((org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE) == (disk.getDiskStorageType())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.SCSI_GENERIC_IO_IS_NOT_SUPPORTED_FOR_IMAGE_DISK); } } if (vm != null) { if (!(org.ovirt.engine.core.common.FeatureSupported.virtIoScsi(vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL); } if (!(isVirtioScsiControllerAttached(vm.getId()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.CANNOT_PERFORM_ACTION_VIRTIO_SCSI_IS_DISABLED); } return isOsSupportedForVirtIoScsi(vm); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult isVirtIoScsiValid(org.ovirt.engine.core.common.businessentities.VM vm) { if ((org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI) != (disk.getDiskInterface())) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if ((disk.getSgio()) != null) { if ((org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE) == (disk.getDiskStorageType())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.SCSI_GENERIC_IO_IS_NOT_SUPPORTED_FOR_IMAGE_DISK); } } if (vm != null) { if (!(org.ovirt.engine.core.common.FeatureSupported.virtIoScsi(vm.getCompatibilityVersion()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL); } if (!(isVirtioScsiControllerAttached(vm.getId()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.CANNOT_PERFORM_ACTION_VIRTIO_SCSI_IS_DISABLED); } return isOsSupportedForVirtIoScsi(vm); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
protected static void reportUnsupportedVnicProfileFeatures(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, java.util.List<org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilderBase.VNIC_PROFILE_PROPERTIES> unsupportedFeatures) { if (unsupportedFeatures.isEmpty()) { return; } org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); event.setVmId(vm.getId()); event.setVdsGroupId(vm.getVdsGroupId()); event.setCustomId(nic.getId().toString()); event.setCompatibilityVersion(vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>().toString()); event.addCustomValue("NicName", nic.getName()); event.addCustomValue("VnicProfile", (vnicProfile == null ? null : vnicProfile.getName())); java.lang.String[] unsupportedFeatureNames = new java.lang.String[unsupportedFeatures.size()]; for (int i = 0; i < (unsupportedFeatures.size()); i++) { unsupportedFeatureNames[i] = unsupportedFeatures.get(i).getFeatureName(); } event.addCustomValue("UnsupportedFeatures", org.apache.commons.lang.StringUtils.join(unsupportedFeatureNames,     new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(event, AuditLogType.VNIC_PROFILE_UNSUPPORTED_FEATURES); }	protected static void reportUnsupportedVnicProfileFeatures(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, java.util.List<org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilderBase.VnicProfileProperties> unsupportedFeatures) { if (unsupportedFeatures.isEmpty()) { return; } org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); event.setVmId(vm.getId()); event.setClusterId(vm.getClusterId()); event.setCustomId(nic.getId().toString()); event.setCompatibilityVersion(vm.getCompatibilityVersion().toString()); event.addCustomValue("NicName", nic.getName()); event.addCustomValue("VnicProfile", (vnicProfile == null ? null : vnicProfile.getName())); java.lang.String[] unsupportedFeatureNames = new java.lang.String[unsupportedFeatures.size()]; for (int i = 0; i < (unsupportedFeatures.size()); i++) { unsupportedFeatureNames[i] = unsupportedFeatures.get(i).getFeatureName(); } event.addCustomValue("UnsupportedFeatures", org.apache.commons.lang.StringUtils.join(unsupportedFeatureNames, ", ")); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(event, AuditLogType.VNIC_PROFILE_UNSUPPORTED_FEATURES); }
@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVm()) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if ((org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { return org.ovirt.engine.core.bll.VmSlaPolicyCommand.failVmStatusIllegal(); } if (!(org.ovirt.engine.core.common.FeatureSupported.vmSlaPolicy(org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVm().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()))) { return failCanDoAction(EngineMessage.VM_SLA_POLICY_NOT_SUPPORTED); } return true; }	@java.lang.Override protected boolean validate() { if ((org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVm()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if ((org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { return org.ovirt.engine.core.bll.VmSlaPolicyCommand.failVmStatusIllegal(); } if (!(org.ovirt.engine.core.common.FeatureSupported.vmSlaPolicy(org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVm().getCompatibilityVersion()))) { return failValidation(EngineMessage.VM_SLA_POLICY_NOT_SUPPORTED); } return true; }
private java.lang.Boolean getMigrateCompressed() { if (org.ovirt.engine.core.common.FeatureSupported.migrationCompression(MigrateVmCommand.getVm().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>())) { if ((MigrateVmCommand.getVm().getMigrateCompressed()) != null) { return MigrateVmCommand.getVm().getMigrateCompressed(); } if ((MigrateVmCommand.getVdsGroup().getMigrateCompressed()) != null) { return MigrateVmCommand.getVdsGroup().getMigrateCompressed(); } return org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DefaultMigrationCompression); } return null; }	private java.lang.Boolean getMigrateCompressed() { if (org.ovirt.engine.core.common.FeatureSupported.migrationCompression(MigrateVmCommand.getVm().getCompatibilityVersion())) { if ((MigrateVmCommand.getVm().getMigrateCompressed()) != null) { return MigrateVmCommand.getVm().getMigrateCompressed(); } if ((MigrateVmCommand.getCluster().getMigrateCompressed()) != null) { return MigrateVmCommand.getCluster().getMigrateCompressed(); } return org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DefaultMigrationCompression); } return null; }
protected void getDowntime() { if (org.ovirt.engine.core.common.FeatureSupported.migrateDowntime(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>())) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = runVdsCommand(VDSCommandType.MigrateStatus, new org.ovirt.engine.core.common.vdscommands.MigrateStatusVDSCommandParameters(getDestinationVdsId(), org.ovirt.engine.core.bll.MigrateVmCommand.getVmId())); if (retVal != null) { actualDowntime = ((java.lang.Integer) (retVal.getReturnValue())); } } catch (org.ovirt.engine.core.common.errors.EngineException e) { migrationErrorCode = e.getErrorCode(); } } }	protected void getDowntime() { if (org.ovirt.engine.core.common.FeatureSupported.migrateDowntime(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getCompatibilityVersion())) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = runVdsCommand(VDSCommandType.MigrateStatus, new org.ovirt.engine.core.common.vdscommands.MigrateStatusVDSCommandParameters(getDestinationVdsId(), org.ovirt.engine.core.bll.MigrateVmCommand.getVmId())); if (retVal != null) { actualDowntime = ((java.lang.Integer) (retVal.getReturnValue())); } } catch (org.ovirt.engine.core.common.errors.EngineException e) { migrationErrorCode = e.getErrorCode(); } } }
private java.lang.Boolean getAutoConverge() { if (org.ovirt.engine.core.common.FeatureSupported.autoConvergence(MigrateVmCommand.getVm().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>())) { if ((MigrateVmCommand.getVm().getAutoConverge()) != null) { return MigrateVmCommand.getVm().getAutoConverge(); } if ((MigrateVmCommand.getVdsGroup().getAutoConverge()) != null) { return MigrateVmCommand.getVdsGroup().getAutoConverge(); } return org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DefaultAutoConvergence); } return null; }	private java.lang.Boolean getAutoConverge() { if (org.ovirt.engine.core.common.FeatureSupported.autoConvergence(MigrateVmCommand.getVm().getCompatibilityVersion())) { if ((MigrateVmCommand.getVm().getAutoConverge()) != null) { return MigrateVmCommand.getVm().getAutoConverge(); } if ((MigrateVmCommand.getCluster().getAutoConverge()) != null) { return MigrateVmCommand.getCluster().getAutoConverge(); } return org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DefaultAutoConvergence); } return null; }
private boolean isTunnelMigrationUsed() { if (!(org.ovirt.engine.core.common.FeatureSupported.tunnelMigration(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()))) { return false; } return (org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getTunnelMigration()) != null ? org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getTunnelMigration() : org.ovirt.engine.core.bll.MigrateVmCommand.getVdsGroup().isTunnelMigration(); }	private boolean isTunnelMigrationUsed() { if (!(org.ovirt.engine.core.common.FeatureSupported.tunnelMigration(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getCompatibilityVersion()))) { return false; } return (org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getTunnelMigration()) != null ? org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getTunnelMigration() : org.ovirt.engine.core.bll.MigrateVmCommand.getCluster().isTunnelMigration(); }
private java.lang.String getMigrationNetworkIp() { if (!(org.ovirt.engine.core.common.FeatureSupported.migrationNetwork(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()))) { return null; } org.ovirt.engine.core.common.businessentities.network.Network migrationNetwork = null; java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> allNetworksInCluster = org.ovirt.engine.core.bll.MigrateVmCommand.getNetworkDao().getAllForCluster(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getVdsGroupId()); for (org.ovirt.engine.core.common.businessentities.network.Network tempNetwork : allNetworksInCluster) { if (tempNetwork.getCluster().isMigration()) { migrationNetwork = tempNetwork; break; } } if (migrationNetwork != null) { if ((getMigrationNetworkAddress(org.ovirt.engine.core.bll.MigrateVmCommand.getVds().getId(), migrationNetwork.getName())) == null) { return null; } return getMigrationNetworkAddress(getDestinationVds().getId(), migrationNetwork.getName()); } return null; }	private java.lang.String getMigrationNetworkIp() { if (!(org.ovirt.engine.core.common.FeatureSupported.migrationNetwork(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getCompatibilityVersion()))) { return null; } org.ovirt.engine.core.common.businessentities.network.Network migrationNetwork = null; java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> allNetworksInCluster = org.ovirt.engine.core.bll.MigrateVmCommand.getNetworkDao().getAllForCluster(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getClusterId()); for (org.ovirt.engine.core.common.businessentities.network.Network tempNetwork : allNetworksInCluster) { if (tempNetwork.getCluster().isMigration()) { migrationNetwork = tempNetwork; break; } } if (migrationNetwork != null) { if ((getMigrationNetworkAddress(org.ovirt.engine.core.bll.MigrateVmCommand.getVds().getId(), migrationNetwork.getName())) == null) { return null; } return getMigrationNetworkAddress(getDestinationVds().getId(), migrationNetwork.getName()); } return null; }
protected org.ovirt.engine.core.bll.ValidationResult validateDisplayType() { if (!(org.ovirt.engine.core.bll.validator.VmValidationUtils.isGraphicsAndDisplaySupported(vm.getOs(), vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(), getVmActiveGraphics(), vm.getDefaultDisplayType()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_VM_DISPLAY_TYPE_IS_NOT_SUPPORTED_BY_OS); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	protected org.ovirt.engine.core.bll.ValidationResult validateDisplayType() { if (!(org.ovirt.engine.core.bll.validator.VmValidationUtils.isGraphicsAndDisplaySupported(vm.getOs(), vm.getCompatibilityVersion(), getVmActiveGraphics(), vm.getDefaultDisplayType()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_VM_DISPLAY_TYPE_IS_NOT_SUPPORTED_BY_OS); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public org.ovirt.engine.core.bll.ValidationResult validateFloppy() { if ((org.apache.commons.lang.StringUtils.isNotEmpty(runVmParam.getFloppyPath())) && (!(org.ovirt.engine.core.bll.validator.VmValidationUtils.isFloppySupported(vm.getOs(), vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>())))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_FLOPPY_IS_NOT_SUPPORTED_BY_OS); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult validateFloppy() { if ((org.apache.commons.lang.StringUtils.isNotEmpty(runVmParam.getFloppyPath())) && (!(org.ovirt.engine.core.bll.validator.VmValidationUtils.isFloppySupported(vm.getOs(), vm.getCompatibilityVersion())))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_FLOPPY_IS_NOT_SUPPORTED_BY_OS); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
protected boolean validateVmProperties(org.ovirt.engine.core.common.businessentities.VM vm, java.lang.String runOnceCustomProperties, java.util.List<java.lang.String> messages) { java.lang.String customProperties = (runOnceCustomProperties != null) ? runOnceCustomProperties : vm.getCustomProperties(); return getVmPropertiesUtils().validateVmProperties(vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(), customProperties, messages); }	protected boolean validateVmProperties(org.ovirt.engine.core.common.businessentities.VM vm, java.lang.String runOnceCustomProperties, java.util.List<java.lang.String> messages) { java.lang.String customProperties = (runOnceCustomProperties != null) ? runOnceCustomProperties : vm.getCustomProperties(); return getVmPropertiesUtils().validateVmProperties(vm.getCompatibilityVersion(), customProperties, messages); }
protected org.ovirt.engine.core.bll.ValidationResult validateMemorySize(org.ovirt.engine.core.common.businessentities.VM vm) { int maxSize; if (getOsRepository().get64bitOss().contains(vm.getOs())) { org.ovirt.engine.core.common.config.ConfigValues config = ((vm.getClusterArch()) == (org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64)) ? org.ovirt.engine.core.common.config.ConfigValues.VMPpc64BitMaxMemorySizeInMB : org.ovirt.engine.core.common.config.ConfigValues.VM64BitMaxMemorySizeInMB; maxSize = org.ovirt.engine.core.common.config.Config.getValue(config, vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>().getValue()); } else { maxSize = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VM32BitMaxMemorySizeInMB); } if ((vm.getMemSizeMb()) > maxSize) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_MEMORY_EXCEEDS_SUPPORTED_LIMIT); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	protected org.ovirt.engine.core.bll.ValidationResult validateMemorySize(org.ovirt.engine.core.common.businessentities.VM vm) { int maxSize; if (getOsRepository().get64bitOss().contains(vm.getOs())) { org.ovirt.engine.core.common.config.ConfigValues config = ((vm.getClusterArch()) == (org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64)) ? org.ovirt.engine.core.common.config.ConfigValues.VMPpc64BitMaxMemorySizeInMB : org.ovirt.engine.core.common.config.ConfigValues.VM64BitMaxMemorySizeInMB; maxSize = org.ovirt.engine.core.common.config.Config.getValue(config, vm.getCompatibilityVersion().getValue()); } else { maxSize = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VM32BitMaxMemorySizeInMB); } if ((vm.getMemSizeMb()) > maxSize) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_MEMORY_EXCEEDS_SUPPORTED_LIMIT); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
protected boolean pciAndIdeWithinLimit(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> allInterfaces) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> allDisks = org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()); return checkPciAndIdeLimit(vm.getOs(), vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(), vm.getNumOfMonitors(), allInterfaces, allDisks, org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasVirtioScsiController(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasWatchdog(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasMemoryBalloon(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasSoundDevice(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getReturnValue().getCanDoActionMessages()); }	protected boolean pciAndIdeWithinLimit(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> allInterfaces) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> allDisks = org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()); return checkPciAndIdeLimit(vm.getOs(), vm.getCompatibilityVersion(), vm.getNumOfMonitors(), allInterfaces, allDisks, org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasVirtioScsiController(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasWatchdog(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasMemoryBalloon(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasSoundDevice(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getReturnValue().getValidationMessages()); }
public org.ovirt.engine.core.bll.ValidationResult isDiskInterfaceSupported(org.ovirt.engine.core.common.businessentities.VM vm) { if (vm != null) { if (!(org.ovirt.engine.core.bll.validator.VmValidationUtils.isDiskInterfaceSupportedByOs(vm.getOs(), vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(), disk.getDiskInterface()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED, java.lang.String.format( %s org.ovirt.engine.core.bll.validator.storage.DiskValidator.getOsRepository().getOsName(vm.getOs()))); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult isDiskInterfaceSupported(org.ovirt.engine.core.common.businessentities.VM vm) { if (vm != null) { if (!(org.ovirt.engine.core.bll.validator.VmValidationUtils.isDiskInterfaceSupportedByOs(vm.getOs(), vm.getCompatibilityVersion(), disk.getDiskInterface()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED, java.lang.String.format("$osName %s", org.ovirt.engine.core.bll.validator.storage.DiskValidator.getOsRepository().getOsName(vm.getOs()))); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
protected void synchronizeNics(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.context.CompensationContext compensationContext, org.ovirt.engine.core.common.businessentities.aaa.DbUser user) { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(getMacPool(vm.getStoragePoolId())); org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(vm.getVdsGroupId(), vm.getStoragePoolId(), vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(), org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_SNAPSHOT_VM_INVALID_INTERFACES); vmInterfaceManager.removeAll(vm.getId()); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vmInterface : vm.getInterfaces()) { vmInterface.setVmId(vm.getId()); if ((vmInterface.getId()) == null) { vmInterface.setId(org.ovirt.engine.core.compat.Guid.newGuid()); } vnicProfileHelper.updateNicWithVnicProfileForUser(vmInterface, user); vmInterfaceManager.add(vmInterface, compensationContext, true, vm.getOs(), vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()); } vnicProfileHelper.auditInvalidInterfaces(vm.getName()); }	protected void synchronizeNics(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.context.CompensationContext compensationContext, org.ovirt.engine.core.common.businessentities.aaa.DbUser user) { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(getMacPool(vm.getStoragePoolId())); org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(vm.getClusterId(), vm.getStoragePoolId(), vm.getCompatibilityVersion(), org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_SNAPSHOT_VM_INVALID_INTERFACES); vmInterfaceManager.removeAll(vm.getId()); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vmInterface : vm.getInterfaces()) { vmInterface.setVmId(vm.getId()); if ((vmInterface.getId()) == null) { vmInterface.setId(org.ovirt.engine.core.compat.Guid.newGuid()); } vnicProfileHelper.updateNicWithVnicProfileForUser(vmInterface, user); vmInterfaceManager.add(vmInterface, compensationContext, true, vm.getOs(), vm.getCompatibilityVersion()); } vnicProfileHelper.auditInvalidInterfaces(vm.getName()); }
private java.lang.Integer calcMaxVCpu() { java.lang.Integer maxSockets = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmSockets, vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>().getValue()); java.lang.Integer maxVCpus = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmCpus, vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>().getValue()); maxVCpus = (vm.getCpuPerSocket()) * (java.lang.Math.min(maxSockets, (maxVCpus / (vm.getCpuPerSocket())))); return maxVCpus; }	private java.lang.Integer calcMaxVCpu() { java.lang.Integer maxSockets = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmSockets, vm.getCompatibilityVersion().getValue()); java.lang.Integer maxVCpus = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmCpus, vm.getCompatibilityVersion().getValue()); int threadsPerCore = vm.getThreadsPerCpu(); int cpuPerSocket = vm.getCpuPerSocket(); maxVCpus = (cpuPerSocket * threadsPerCore) * (java.lang.Math.min(maxSockets, (maxVCpus / (cpuPerSocket * threadsPerCore)))); return maxVCpus; }
public boolean isRebootCommandExecutionAllowed(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { if ((vms.isEmpty()) || (!(org.ovirt.engine.core.common.VdcActionUtils.canExecutePartially(vms, org.ovirt.engine.core.common.businessentities.VM.class, VdcActionType.RebootVm)))) { return false; } for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { org.ovirt.engine.core.compat.Version version = vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(); org.ovirt.engine.core.compat.Version anyDcVersion = new org.ovirt.engine.core.compat.Version(); boolean compatibleCluster = isCommandCompatible(VdcActionType.RebootVm, version, anyDcVersion); boolean guestAgentPresent = !(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(vm.getVmIp())); boolean acpiEnabled = java.lang.Boolean.TRUE.equals(vm.getAcpiEnable()); if (!(compatibleCluster && (guestAgentPresent || acpiEnabled))) { return false; } } return true; }	public boolean isRebootCommandExecutionAllowed(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { if ((vms.isEmpty()) || (!(org.ovirt.engine.core.common.VdcActionUtils.canExecutePartially(vms, org.ovirt.engine.core.common.businessentities.VM.class, VdcActionType.RebootVm)))) { return false; } for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { org.ovirt.engine.core.compat.Version version = vm.getCompatibilityVersion(); org.ovirt.engine.core.compat.Version anyDcVersion = new org.ovirt.engine.core.compat.Version(); boolean compatibleCluster = isCommandCompatible(VdcActionType.RebootVm, version, anyDcVersion); boolean guestAgentPresent = !(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(vm.getVmIp())); boolean acpiEnabled = java.lang.Boolean.TRUE.equals(vm.getAcpiEnable()); if (!(compatibleCluster && (guestAgentPresent || acpiEnabled))) { return false; } } return true; }
public boolean isMemorySnapshotSupported(org.ovirt.engine.core.common.businessentities.VM vm) { if (vm == null) { return false; } boolean archMemorySnapshotSupported = isMemorySnapshotSupportedByArchitecture(vm.getClusterArch(), vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()); return ((java.lang.Boolean) (getConfigValuePreConverted(ConfigurationValues.MemorySnapshotSupported, vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>().toString()))) && archMemorySnapshotSupported; }	public boolean isMemorySnapshotSupported(org.ovirt.engine.core.common.businessentities.VM vm) { if (vm == null) { return false; } boolean archMemorySnapshotSupported = isMemorySnapshotSupportedByArchitecture(vm.getClusterArch(), vm.getCompatibilityVersion()); return ((java.lang.Boolean) (getConfigValuePreConverted(ConfigurationValues.MemorySnapshotSupported, vm.getCompatibilityVersion().toString()))) && archMemorySnapshotSupported; }
private java.lang.String getMemoryFromActiveSnapshot() { if (memoryFromSnapshotUsed) { return org.apache.commons.lang.StringUtils.EMPTY; } if ((getFlow()) == (org.ovirt.engine.core.bll.RunVmCommand.RunVmFlow.RESUME_HIBERNATE)) { return org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryVolume(); } if (!(org.ovirt.engine.core.common.FeatureSupported.isMemorySnapshotSupportedByArchitecture(org.ovirt.engine.core.bll.RunVmCommand.getVm().getClusterArch(), org.ovirt.engine.core.bll.RunVmCommand.getVm().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()))) { return org.apache.commons.lang.StringUtils.EMPTY; } if (!(org.ovirt.engine.core.common.FeatureSupported.memorySnapshot(org.ovirt.engine.core.bll.RunVmCommand.getVm().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()))) { return org.apache.commons.lang.StringUtils.EMPTY; } return org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryVolume(); }	private java.lang.String getMemoryFromActiveSnapshot() { if (memoryFromSnapshotUsed) { return org.apache.commons.lang.StringUtils.EMPTY; } if ((getFlow()) == (org.ovirt.engine.core.bll.RunVmCommand.RunVmFlow.RESUME_HIBERNATE)) { return org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryVolume(); } if (!(org.ovirt.engine.core.common.FeatureSupported.isMemorySnapshotSupportedByArchitecture(org.ovirt.engine.core.bll.RunVmCommand.getVm().getClusterArch(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getCompatibilityVersion()))) { return org.apache.commons.lang.StringUtils.EMPTY; } if (!(org.ovirt.engine.core.common.FeatureSupported.memorySnapshot(org.ovirt.engine.core.bll.RunVmCommand.getVm().getCompatibilityVersion()))) { return org.apache.commons.lang.StringUtils.EMPTY; } return org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryVolume(); }
private void edit() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = org.ovirt.engine.ui.uicommonweb.models.vms.EditVmInterfaceModel.createInstance(getEntity().getStaticData(), getEntity(), getEntity().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(), ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>) (getItems())), getSelectedItem(), this); setWindow(model); }	private void edit() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = org.ovirt.engine.ui.uicommonweb.models.vms.EditVmInterfaceModel.createInstance(getEntity().getStaticData(), getEntity(), getEntity().getClusterCompatibilityVersion(), ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>) (getItems())), getSelectedItem(), this); setWindow(model); }
private void newEntity() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = org.ovirt.engine.ui.uicommonweb.models.vms.NewVmInterfaceModel.createInstance(getEntity().getStaticData(), getEntity().getStatus(), getEntity().getStoragePoolId(), getEntity().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(), ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>) (getItems())), this); setWindow(model); }	private void newEntity() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = org.ovirt.engine.ui.uicommonweb.models.vms.NewVmInterfaceModel.createInstance(getEntity().getStaticData(), getEntity().getStatus(), getEntity().getStoragePoolId(), getEntity().getClusterCompatibilityVersion(), ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>) (getItems())), this); setWindow(model); }
private void updateHaMaintenanceAvailability(java.util.List items) { if ((items == null) || ((items.size()) != 1)) { setHaMaintenanceAvailability(false); return; } org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem(); if (((vm == null) || (!(vm.isHostedEngine()))) || ((vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>().compareTo(Version.v3_4)) < 0)) { setHaMaintenanceAvailability(false); } else { setHaMaintenanceAvailability(true); } }	private void updateHaMaintenanceAvailability(java.util.List items) { if ((items == null) || ((items.size()) != 1)) { setHaMaintenanceAvailability(false); return; } org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem(); if (((vm == null) || (!(vm.isHostedEngine()))) || ((vm.getCompatibilityVersion().compareTo(Version.v3_4)) < 0)) { setHaMaintenanceAvailability(false); } else { setHaMaintenanceAvailability(true); } }
protected void datacenter_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.StoragePool datacenter = getDataCenter().getSelectedItem(); boolean isInVm = (getVm()) != null; if (datacenter == null) { return; } setMessage(null); updateShareableDiskEnabled(datacenter); updateDirectLunDiskEnabled(datacenter); updateInterface((isInVm ? getVm().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>() : null)); switch (getDiskStorageType().getEntity()) { case IMAGE : case CINDER : updateStorageDomains(datacenter); break; default : updateHosts(datacenter); break; } }	protected void datacenter_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.StoragePool datacenter = getDataCenter().getSelectedItem(); boolean isInVm = (getVm()) != null; if (datacenter == null) { return; } setMessage(null); updateShareableDiskEnabled(datacenter); updateDirectLunDiskEnabled(datacenter); updateInterface((isInVm ? getVm().getCompatibilityVersion() : null)); switch (getDiskStorageType().getEntity()) { case IMAGE : case CINDER : updateStorageDomains(datacenter); break; default : updateHosts(datacenter); break; } }
protected boolean isHotPlugSupported() { if (org.ovirt.engine.core.common.FeatureSupported.hotPlug(org.ovirt.engine.core.bll.VmCommand.getVm().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>())) { return true; } return failCanDoAction(EngineMessage.HOT_PLUG_IS_NOT_SUPPORTED); }	protected boolean isHotPlugSupported() { if (org.ovirt.engine.core.common.FeatureSupported.hotPlug(org.ovirt.engine.core.bll.VmCommand.getVm().getCompatibilityVersion())) { return true; } return failValidation(EngineMessage.HOT_PLUG_IS_NOT_SUPPORTED); }
protected boolean isDiskSupportedForPlugUnPlug(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { if ((disk.getDiskInterface()) == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.IDE)) { addCanDoActionMessageVariable("diskAlias", disk.getDiskAlias()); addCanDoActionMessageVariable("vmName", org.ovirt.engine.core.bll.VmCommand.getVm().getName()); return failCanDoAction(EngineMessage.HOT_PLUG_IDE_DISK_IS_NOT_SUPPORTED); } java.util.Set<java.lang.String> diskHotpluggableInterfaces = osRepository.getDiskHotpluggableInterfaces(org.ovirt.engine.core.bll.VmCommand.getVm().getOs(), org.ovirt.engine.core.bll.VmCommand.getVm().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()); if ((org.springframework.util.CollectionUtils.isEmpty(diskHotpluggableInterfaces)) || (!(diskHotpluggableInterfaces.contains(disk.getDiskInterface().name())))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED); } return true; }	protected boolean isDiskSupportedForPlugUnPlug(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { if ((disk.getDiskInterface()) == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.IDE)) { addValidationMessageVariable("diskAlias", disk.getDiskAlias()); addValidationMessageVariable("vmName", org.ovirt.engine.core.bll.VmCommand.getVm().getName()); return failValidation(EngineMessage.HOT_PLUG_IDE_DISK_IS_NOT_SUPPORTED); } java.util.Set<java.lang.String> diskHotpluggableInterfaces = osRepository.getDiskHotpluggableInterfaces(org.ovirt.engine.core.bll.VmCommand.getVm().getOs(), org.ovirt.engine.core.bll.VmCommand.getVm().getCompatibilityVersion()); if ((org.apache.commons.collections.CollectionUtils.isEmpty(diskHotpluggableInterfaces)) || (!(diskHotpluggableInterfaces.contains(disk.getDiskInterface().name())))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED); } return true; }
protected boolean isNicSupportedForPlugUnPlug() { if (osRepository.hasNicHotplugSupport(org.ovirt.engine.core.bll.VmCommand.getVm().getOs(), org.ovirt.engine.core.bll.VmCommand.getVm().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>())) { return true; } return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED); }	protected boolean isNicSupportedForPlugUnPlug() { if (osRepository.hasNicHotplugSupport(org.ovirt.engine.core.bll.VmCommand.getVm().getOs(), org.ovirt.engine.core.bll.VmCommand.getVm().getCompatibilityVersion())) { return true; } return failValidation(EngineMessage.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED); }
public org.ovirt.engine.core.bll.ValidationResult isOsSupportedForVirtIoScsi(org.ovirt.engine.core.common.businessentities.VM vm) { if (!(org.ovirt.engine.core.bll.validator.VmValidationUtils.isDiskInterfaceSupportedByOs(vm.getOs(), vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(), DiskInterface.VirtIO_SCSI))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult isOsSupportedForVirtIoScsi(org.ovirt.engine.core.common.businessentities.VM vm) { if (!(org.ovirt.engine.core.bll.validator.VmValidationUtils.isDiskInterfaceSupportedByOs(vm.getOs(), vm.getCompatibilityVersion(), DiskInterface.VirtIO_SCSI))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public boolean isLiveMergeSupported(org.ovirt.engine.core.common.businessentities.VM vm) { return (vm != null) && ((java.lang.Boolean) (getConfigValuePreConverted(ConfigurationValues.LiveMergeSupported, vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>().toString()))); }	public boolean isLiveMergeSupported(org.ovirt.engine.core.common.businessentities.VM vm) { return (vm != null) && ((java.lang.Boolean) (getConfigValuePreConverted(ConfigurationValues.LiveMergeSupported, vm.getCompatibilityVersion().toString()))); }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (((org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getSysPrepUserName()) == null) ^ ((org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getSysPrepPassword()) == null)) { return failCanDoAction(EngineMessage.VM_CANNOT_RUN_ONCE_WITH_ILLEGAL_SYSPREP_PARAM); } if ((org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmInit()) != null) { if ((!(OsRepositoryImpl.INSTANCE.isWindows(org.ovirt.engine.core.bll.RunVmOnceCommand.getVm().getOs()))) && (!(org.ovirt.engine.core.common.FeatureSupported.cloudInit(org.ovirt.engine.core.bll.RunVmOnceCommand.getVm().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>())))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_CLOUD_INIT_IS_NOT_SUPPORTED); } if (org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmInit().isPasswordAlreadyStored()) { org.ovirt.engine.core.common.businessentities.VmBase temp = new org.ovirt.engine.core.common.businessentities.VmBase(); temp.setId(org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmId()); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(temp, false); org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmInit().setRootPassword(temp.getVmInit().getRootPassword()); } } return true; }	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (((org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getSysPrepUserName()) == null) ^ ((org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getSysPrepPassword()) == null)) { return failValidation(EngineMessage.VM_CANNOT_RUN_ONCE_WITH_ILLEGAL_SYSPREP_PARAM); } if ((org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmInit()) != null) { if ((!(osRepository.isWindows(org.ovirt.engine.core.bll.RunVmOnceCommand.getVm().getOs()))) && (!(org.ovirt.engine.core.common.FeatureSupported.cloudInit(org.ovirt.engine.core.bll.RunVmOnceCommand.getVm().getCompatibilityVersion())))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CLOUD_INIT_IS_NOT_SUPPORTED); } if (org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmInit().isPasswordAlreadyStored()) { org.ovirt.engine.core.common.businessentities.VmBase temp = new org.ovirt.engine.core.common.businessentities.VmBase(); temp.setId(org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmId()); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(temp, false); org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmInit().setRootPassword(temp.getVmInit().getRootPassword()); } } return true; }
public boolean canVmsBePaused(java.util.List<org.ovirt.engine.core.common.businessentities.VM> items) { for (org.ovirt.engine.core.common.businessentities.VM vm : items) { if (!(isSuspendSupportedByArchitecture(vm.getClusterArch(), vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()))) { return false; } } return true; }	public boolean canVmsBePaused(java.util.List<org.ovirt.engine.core.common.businessentities.VM> items) { for (org.ovirt.engine.core.common.businessentities.VM vm : items) { if (!(isSuspendSupportedByArchitecture(vm.getClusterArch(), vm.getCompatibilityVersion()))) { return false; } } return true; }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__HOT_SET_CPUS); addCanDoActionMessage(EngineMessage.VAR__TYPE__VM); addCanDoActionMessageVariable("clusterVersion", org.ovirt.engine.core.bll.HotSetNumberOfCpusCommand.getVm().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()); addCanDoActionMessageVariable("architecture", org.ovirt.engine.core.bll.HotSetNumberOfCpusCommand.getVm().getClusterArch()); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__ACTION__HOT_SET_CPUS); addValidationMessage(EngineMessage.VAR__TYPE__VM); addValidationMessageVariable("clusterVersion", org.ovirt.engine.core.bll.HotSetNumberOfCpusCommand.getVm().getCompatibilityVersion()); addValidationMessageVariable("architecture", org.ovirt.engine.core.bll.HotSetNumberOfCpusCommand.getVm().getClusterArch()); }
@java.lang.Override protected void buildSysprepVmPayload(java.lang.String sysPrepContent) { org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(); vmPayload.setDeviceType(VmDeviceType.FLOPPY); vmPayload.getFiles().put(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.getOsRepository().getSysprepFileName(vm.getOs(), vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()), new java.lang.String(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.BASE_64.encode(sysPrepContent.getBytes()), java.nio.charset.Charset.forName(CharEncoding.UTF_8))); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vm.getId()), org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null, null, null); java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<java.lang.String, java.lang.Object>(); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addFloppyDetails(vmDevice, struct); addDevice(struct, vmDevice, vm.getFloppyPath()); }	@java.lang.Override protected void buildSysprepVmPayload(java.lang.String sysPrepContent) { org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(); vmPayload.setDeviceType(VmDeviceType.FLOPPY); vmPayload.getFiles().put(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.getOsRepository().getSysprepFileName(vm.getOs(), vm.getCompatibilityVersion()), new java.lang.String(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.BASE_64.encode(sysPrepContent.getBytes()), java.nio.charset.Charset.forName(CharEncoding.UTF_8))); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vm.getId()), org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null, null, null); java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addFloppyDetails(vmDevice, struct); addDevice(struct, vmDevice, vm.getFloppyPath()); }
private static boolean supportsHostDevicePassthrough(org.ovirt.engine.core.common.businessentities.VM vm) { return org.ovirt.engine.core.common.FeatureSupported.hostDevicePassthrough(vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()); }	private static boolean supportsHostDevicePassthrough(org.ovirt.engine.core.common.businessentities.VM vm) { return org.ovirt.engine.core.common.FeatureSupported.hostDevicePassthrough(vm.getCompatibilityVersion()); }
@java.lang.Override public void init() { super.init(); getIsAutoAssign().setEntity(true); getCustomPropertySheet().setKeyValueMap(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getCustomPropertiesList().get(vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>())); getCustomPropertySheet().deserialize(vm.getCustomProperties()); loadHosts(); }	@java.lang.Override public void init() { super.init(); getIsAutoAssign().setEntity(true); getCustomPropertySheet().setKeyValueMap(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getCustomPropertiesList().get(vm.getCompatibilityVersion())); getCustomPropertySheet().deserialize(vm.getCustomProperties()); loadHosts(); }
protected org.ovirt.engine.core.bll.validator.VmWatchdogValidator getVmWatchdogValidator() { org.ovirt.engine.core.bll.validator.VmWatchdogValidator vmWatchdogValidator = null; org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog = createWatchdogFromParams(); if (org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getParameters().isVm()) { vmWatchdogValidator = new org.ovirt.engine.core.bll.validator.VmWatchdogValidator(org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getVm().getOs(), watchdog, org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getVm().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()); } else { if ((org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getVmTemplate().getVdsGroupId()) != null) { vmWatchdogValidator = new org.ovirt.engine.core.bll.validator.VmWatchdogValidator(org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getVmTemplate().getOsId(), watchdog, org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getEffectiveCompatibilityVersion()); } } return vmWatchdogValidator; }	protected org.ovirt.engine.core.bll.validator.VmWatchdogValidator getVmWatchdogValidator() { org.ovirt.engine.core.bll.validator.VmWatchdogValidator vmWatchdogValidator = null; org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog = createWatchdogFromParams(); if (org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getParameters().isVm()) { vmWatchdogValidator = new org.ovirt.engine.core.bll.validator.VmWatchdogValidator(org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getVm().getOs(), watchdog, org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getVm().getCompatibilityVersion()); } else { if ((org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getVmTemplate().getClusterId()) != null) { vmWatchdogValidator = new org.ovirt.engine.core.bll.validator.VmWatchdogValidator(org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getVmTemplate().getOsId(), watchdog, org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getVmTemplate().getCompatibilityVersion()); } } return vmWatchdogValidator; }
static void handleIoTune(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> diskProfileStorageQosMap, java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Map<java.lang.String, java.lang.Long>> storageQosIoTuneMap) { if (org.ovirt.engine.core.common.FeatureSupported.storageQoS(vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>())) { java.util.Map<java.lang.String, java.lang.Long> ioTune = org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.buildIoTune(diskImage, diskProfileStorageQosMap, storageQosIoTuneMap); if (ioTune != null) { if ((vmDevice.getSpecParams()) == null) { vmDevice.setSpecParams(new java.util.HashMap<java.lang.String, java.lang.Object>()); } vmDevice.getSpecParams().put(VdsProperties.Iotune, ioTune); } } }	static void handleIoTune(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> diskProfileStorageQosMap, java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Map<java.lang.String, java.lang.Long>> storageQosIoTuneMap) { if (org.ovirt.engine.core.common.FeatureSupported.storageQoS(vm.getCompatibilityVersion())) { java.util.Map<java.lang.String, java.lang.Long> ioTune = org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.buildIoTune(diskImage, diskProfileStorageQosMap, storageQosIoTuneMap); if (ioTune != null) { if ((vmDevice.getSpecParams()) == null) { vmDevice.setSpecParams(new java.util.HashMap()); } vmDevice.getSpecParams().put(VdsProperties.Iotune, ioTune); } } }
protected void buildVmNumaProperties() { final java.lang.String compatibilityVersion = vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>().toString(); addNumaSetting(compatibilityVersion); }	protected void buildVmNumaProperties() { final java.lang.String compatibilityVersion = vm.getCompatibilityVersion().toString(); addNumaSetting(compatibilityVersion); }
private static void addCdDetails(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.osinfo.OsRepository osRepository = org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.getOsRepository(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); java.lang.String cdInterface = osRepository.getCdInterface(vm.getOs(), vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()); if ("scsi".equals(cdInterface)) { struct.put(VdsProperties.Index, "0"); struct.put(VdsProperties.Address, org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.createAddressForScsiDisk(0, 0)); } else if ("ide".equals(cdInterface)) { struct.put(VdsProperties.Index, "2"); } struct.put(VdsProperties.INTERFACE, cdInterface); struct.put(VdsProperties.ReadOnly, java.lang.Boolean.TRUE.toString()); struct.put(VdsProperties.Shareable, java.lang.Boolean.FALSE.toString()); }	private static void addCdDetails(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.osinfo.OsRepository osRepository = org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.getOsRepository(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); java.lang.String cdInterface = osRepository.getCdInterface(vm.getOs(), vm.getCompatibilityVersion()); if ("scsi".equals(cdInterface)) { struct.put(VdsProperties.Index, "0"); struct.put(VdsProperties.Address, org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.createAddressForScsiDisk(0, 0)); } else if ("ide".equals(cdInterface)) { struct.put(VdsProperties.Index, "2"); } struct.put(VdsProperties.INTERFACE, cdInterface); struct.put(VdsProperties.ReadOnly, java.lang.Boolean.TRUE.toString()); struct.put(VdsProperties.Shareable, java.lang.Boolean.FALSE.toString()); }
@java.lang.Override protected void buildVmGraphicsDevices() { boolean graphicsOverriden = ((vm.isRunOnce()) && ((vm.getGraphicsInfos()) != null)) && (!(vm.getGraphicsInfos().isEmpty())); boolean usesGraphicsAsDevice = org.ovirt.engine.core.common.FeatureSupported.graphicsDeviceEnabled(vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()); java.util.Map<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.GraphicsInfo> infos = vm.getGraphicsInfos(); java.util.Map<java.lang.String, java.lang.Object> specParamsFromVm = buildVmGraphicsSpecParamsFromVm(infos); if (graphicsOverriden) { buildVmGraphicsDevicesOverriden(infos, usesGraphicsAsDevice, specParamsFromVm); } else { buildVmGraphicsDevicesFromDb(usesGraphicsAsDevice, specParamsFromVm); } }	@java.lang.Override protected void buildVmGraphicsDevices() { boolean graphicsOverriden = ((vm.isRunOnce()) && ((vm.getGraphicsInfos()) != null)) && (!(vm.getGraphicsInfos().isEmpty())); boolean usesGraphicsAsDevice = org.ovirt.engine.core.common.FeatureSupported.graphicsDeviceEnabled(vm.getCompatibilityVersion()); java.util.Map<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.GraphicsInfo> infos = vm.getGraphicsInfos(); java.util.Map<java.lang.String, java.lang.Object> specParamsFromVm = buildVmGraphicsSpecParamsFromVm(infos); if (graphicsOverriden) { buildVmGraphicsDevicesOverriden(infos, usesGraphicsAsDevice, specParamsFromVm); } else { buildVmGraphicsDevicesFromDb(usesGraphicsAsDevice, specParamsFromVm); } }
@java.lang.Override protected void buildVmBootSequence() { if ((managedDevices) != null) { org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.updateVmDevicesBootOrder(vm, (vm.isRunOnce() ? vm.getBootSequence() : vm.getDefaultBootSequence()), managedDevices, org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>())); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : managedDevices) { for (java.util.Map struct : devices) { java.lang.String deviceId = ((java.lang.String) (struct.get(VdsProperties.DeviceId))); if ((deviceId != null) && (deviceId.equals(vmDevice.getDeviceId().toString()))) { if ((vmDevice.getBootOrder()) > 0) { struct.put(VdsProperties.BootOrder, java.lang.String.valueOf(vmDevice.getBootOrder())); } else { struct.keySet().remove(VdsProperties.BootOrder); } break; } } } } }	@java.lang.Override protected void buildVmBootSequence() { if ((managedDevices) != null) { org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.updateVmDevicesBootOrder(vm, (vm.isRunOnce() ? vm.getBootSequence() : vm.getDefaultBootSequence()), managedDevices, org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(vm.getCompatibilityVersion())); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : managedDevices) { for (java.util.Map struct : devices) { java.lang.String deviceId = ((java.lang.String) (struct.get(VdsProperties.DeviceId))); if ((deviceId != null) && (deviceId.equals(vmDevice.getDeviceId().toString()))) { if ((vmDevice.getBootOrder()) > 0) { struct.put(VdsProperties.BootOrder, java.lang.String.valueOf(vmDevice.getBootOrder())); } else { struct.keySet().remove(VdsProperties.BootOrder); } break; } } } } }
public static void updateBootOrder(org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVmDao().get(vmId); if (vm != null) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dao.getVmDeviceByVmId(vmId); for (org.ovirt.engine.core.common.businessentities.VmDevice device : devices) { device.setBootOrder(0); } org.ovirt.engine.core.bll.VmHandler.updateDisksForVm(vm, org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getDiskDao().getAllForVm(vmId)); org.ovirt.engine.core.bll.VmHandler.updateNetworkInterfacesFromDb(vm); boolean isOldCluster = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()); org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.updateVmDevicesBootOrder(vm, devices, isOldCluster); org.ovirt.engine.core.bll.utils.VmDeviceUtils.dao.updateBootOrderInBatch(devices); } }	public static void updateBootOrder(org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVmDao().get(vmId); if (vm != null) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dao.getVmDeviceByVmId(vmId); for (org.ovirt.engine.core.common.businessentities.VmDevice device : devices) { device.setBootOrder(0); } org.ovirt.engine.core.bll.VmHandler.updateDisksForVm(vm, org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getDiskDao().getAllForVm(vmId)); org.ovirt.engine.core.bll.VmHandler.updateNetworkInterfacesFromDb(vm); boolean isOldCluster = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(vm.getCompatibilityVersion()); org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.updateVmDevicesBootOrder(vm, devices, isOldCluster); org.ovirt.engine.core.bll.utils.VmDeviceUtils.dao.updateBootOrderInBatch(devices); } }
public static void updateVmDevices(org.ovirt.engine.core.common.action.VmManagementParametersBase params, org.ovirt.engine.core.common.businessentities.VM oldVm) { org.ovirt.engine.core.common.businessentities.VmBase oldVmBase = oldVm.getStaticData(); org.ovirt.engine.core.common.businessentities.VmBase newVmBase = params.getVmStaticData(); if (newVmBase == null) { return; } org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateCdPath(oldVmBase, newVmBase); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateBootOrder(oldVmBase, newVmBase); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateVideoDevices(oldVmBase, newVmBase); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateUsbSlots(oldVmBase, newVmBase); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateMemoryBalloon(newVmBase.getId(), params.isBalloonEnabled()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateSoundDevice(oldVmBase, newVmBase, oldVm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(), params.isSoundDeviceEnabled()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateSmartcardDevice(oldVm, newVmBase); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateConsoleDevice(newVmBase.getId(), params.isConsoleEnabled()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateVirtioScsiController(newVmBase.getId(), params.isVirtioScsiEnabled()); }	public static void updateVmDevices(org.ovirt.engine.core.common.action.VmManagementParametersBase params, org.ovirt.engine.core.common.businessentities.VM oldVm) { org.ovirt.engine.core.common.businessentities.VmBase oldVmBase = oldVm.getStaticData(); org.ovirt.engine.core.common.businessentities.VmBase newVmBase = params.getVmStaticData(); if (newVmBase == null) { return; } org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateCdPath(oldVmBase, newVmBase); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateBootOrder(oldVmBase, newVmBase); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateVideoDevices(oldVmBase, newVmBase); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateUsbSlots(oldVmBase, newVmBase); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateMemoryBalloon(newVmBase.getId(), params.isBalloonEnabled()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateSoundDevice(oldVmBase, newVmBase, oldVm.getCompatibilityVersion(), params.isSoundDeviceEnabled()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateSmartcardDevice(oldVm, newVmBase); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateConsoleDevice(newVmBase.getId(), params.isConsoleEnabled()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateVirtioScsiController(newVmBase.getId(), params.isVirtioScsiEnabled()); }
private boolean isPlugAvailableByDisks(boolean plug) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems()) != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.storage.Disk>cast(getSelectedItems()) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { boolean isLocked = ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) && ((((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)).getImageStatus()) == (org.ovirt.engine.core.common.businessentities.storage.ImageStatus.LOCKED)); boolean isDiskHotpluggableInterface = false; if ((getEntity()) != null) { isDiskHotpluggableInterface = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDiskHotpluggableInterfaces(getEntity().getOs(), getEntity().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()).contains(disk.getDiskInterface()); } if ((((disk.getPlugged()) == plug) || isLocked) || ((!isDiskHotpluggableInterface) && (!(isVmDown())))) { return false; } } return true; }	private boolean isPlugAvailableByDisks(boolean plug) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems()) != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.storage.Disk>cast(getSelectedItems()) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { boolean isLocked = ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) && ((((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)).getImageStatus()) == (org.ovirt.engine.core.common.businessentities.storage.ImageStatus.LOCKED)); boolean isDiskHotpluggableInterface = false; if ((getEntity()) != null) { isDiskHotpluggableInterface = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDiskHotpluggableInterfaces(getEntity().getOs(), getEntity().getCompatibilityVersion()).contains(disk.getDiskInterface()); } if ((((disk.getPlugged()) == plug) || isLocked) || ((!isDiskHotpluggableInterface) && (!(isVmDown())))) { return false; } } return true; }
private void addDevice(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.lang.String path) { boolean isPayload = (org.ovirt.engine.core.common.businessentities.VmPayload.isPayload(vmDevice.getSpecParams())) && (vmDevice.getDevice().equals(VmDeviceType.CDROM.getName())); java.util.Map<java.lang.String, java.lang.Object> specParams = ((vmDevice.getSpecParams()) == null) ? java.util.Collections.<java.lang.String, java.lang.Object>emptyMap() : vmDevice.getSpecParams(); if (path != null) { struct.put(VdsProperties.Path, (isPayload ? "" : path)); } if (isPayload) { java.lang.String cdInterface = osRepository.getCdInterface(vm.getOs(), vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()); if ("scsi".equals(cdInterface)) { struct.put(VdsProperties.Index, "1"); struct.put(VdsProperties.Address, org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.createAddressForScsiDisk(0, 1)); } else if ("ide".equals(cdInterface)) { struct.put(VdsProperties.Index, "3"); } } struct.put(VdsProperties.SpecParams, specParams); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addBootOrder(vmDevice, struct); devices.add(struct); addToManagedDevices(vmDevice); }	private void addDevice(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.lang.String path) { boolean isPayload = (org.ovirt.engine.core.common.businessentities.VmPayload.isPayload(vmDevice.getSpecParams())) && (vmDevice.getDevice().equals(VmDeviceType.CDROM.getName())); java.util.Map<java.lang.String, java.lang.Object> specParams = ((vmDevice.getSpecParams()) == null) ? java.util.Collections.<java.lang.String, java.lang.Object>emptyMap() : vmDevice.getSpecParams(); if (path != null) { struct.put(VdsProperties.Path, (isPayload ? "" : path)); } if (isPayload) { java.lang.String cdInterface = osRepository.getCdInterface(vm.getOs(), vm.getCompatibilityVersion()); if ("scsi".equals(cdInterface)) { struct.put(VdsProperties.Index, "1"); struct.put(VdsProperties.Address, org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.createAddressForScsiDisk(0, 1)); } else if ("ide".equals(cdInterface)) { struct.put(VdsProperties.Index, "3"); } } struct.put(VdsProperties.SpecParams, specParams); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addBootOrder(vmDevice, struct); devices.add(struct); addToManagedDevices(vmDevice); }
protected void updateExtendImageSizeSupported() { org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel) (target)); model.setExtendImageSizeSupported(((java.lang.Boolean) (returnValue))); } }); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isCommandCompatible(query, VdcActionType.ExtendImageSize, vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(), dataCenterVersion); }	protected void updateExtendImageSizeSupported() { org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel) (target)); model.setExtendImageSizeSupported(((java.lang.Boolean) (returnValue))); } }); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isCommandCompatible(query, VdcActionType.ExtendImageSize, vm.getCompatibilityVersion(), dataCenterVersion); }
@java.lang.Override protected void buildVmSoundDevices() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmSoundDevices = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdAndType(vm.getId(), VmDeviceGeneralType.SOUND); if (!(vmSoundDevices.isEmpty())) { createInfo.put(VdsProperties.soundDevice, osRepository.getSoundDevice(vm.getStaticData().getOsId(), vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>())); } }	@java.lang.Override protected void buildVmSoundDevices() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmSoundDevices = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdAndType(vm.getId(), VmDeviceGeneralType.SOUND); if (!(vmSoundDevices.isEmpty())) { createInfo.put(VdsProperties.soundDevice, osRepository.getSoundDevice(vm.getStaticData().getOsId(), vm.getCompatibilityVersion())); } }
@java.lang.Override public void finished(org.ovirt.engine.core.common.businessentities.VmBase source, org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel destination) { getModel().getIsStateless().setIsAvailable(((vm.getVmPoolId()) == null)); getModel().getIsRunAndPause().setIsAvailable(((vm.getVmPoolId()) == null)); getModel().getCpuSharesAmount().setEntity(vm.getCpuShares()); updateCpuSharesSelection(); updateRngDevice(getVm().getId()); updateTimeZone(vm.getTimeZone()); updateGraphics(); getModel().getHostCpu().setEntity(vm.isUseHostCpuFlags()); getModel().getStorageDomain().setIsChangeable(false); getModel().getProvisioning().setIsAvailable(false); getModel().getProvisioning().setEntity(Guid.Empty.equals(vm.getVmtGuid())); getModel().getCpuPinning().setEntity(vm.getCpuPinning()); getModel().getCustomPropertySheet().deserialize(vm.getCustomProperties()); if (isHotSetCpuSupported()) { getModel().getTotalCPUCores().getEntityChangedEvent().removeListener(getModel()); getModel().getCoresPerSocket().getSelectedItemChangedEvent().removeListener(getModel()); getModel().getNumOfSockets().getSelectedItemChangedEvent().removeListener(getModel()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostById(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { runningOnHost = ((org.ovirt.engine.core.common.businessentities.VDS) (returnValue)); hostCpu = calculateHostCpus(); updateNumOfSockets(); } }), vm.getRunOnVds()); } updateCpuProfile(vm.getVdsGroupId(), vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(), vm.getCpuProfileId()); }	@java.lang.Override public void finished(org.ovirt.engine.core.common.businessentities.VmBase source, org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel destination) { getModel().getIsStateless().setIsAvailable(((vm.getVmPoolId()) == null)); getModel().getIsRunAndPause().setIsAvailable(((vm.getVmPoolId()) == null)); getModel().getCpuSharesAmount().setEntity(vm.getCpuShares()); updateCpuSharesSelection(); updateRngDevice(getVm().getId()); updateTimeZone(vm.getTimeZone()); updateGraphics(); getModel().getHostCpu().setEntity(vm.isUseHostCpuFlags()); getModel().getStorageDomain().setIsChangeable(false); getModel().getProvisioning().setIsAvailable(false); getModel().getProvisioning().setEntity(Guid.Empty.equals(vm.getVmtGuid())); getModel().getCpuPinning().setEntity(vm.getCpuPinning()); getModel().getCustomPropertySheet().deserialize(vm.getCustomProperties()); if (isHotSetCpuSupported()) { getModel().getTotalCPUCores().getEntityChangedEvent().removeListener(getModel()); getModel().getCoresPerSocket().getSelectedItemChangedEvent().removeListener(getModel()); getModel().getThreadsPerCore().getSelectedItemChangedEvent().removeListener(getModel()); getModel().getNumOfSockets().getSelectedItemChangedEvent().removeListener(getModel()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostById(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { runningOnHost = ((org.ovirt.engine.core.common.businessentities.VDS) (returnValue)); hostCpu = calculateHostCpus(); updateNumOfSockets(); } }), vm.getRunOnVds()); } updateCpuProfile(vm.getClusterId(), vm.getCompatibilityVersion(), vm.getCpuProfileId()); }
@java.lang.Override public boolean canBeSelected() { boolean hasVmSpiceSupport = java.lang.Boolean.TRUE.equals(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().hasSpiceSupport(getEntity().getOs(), getEntity().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>())); return (getEntity().getGraphicsInfos().containsKey(GraphicsType.SPICE)) && hasVmSpiceSupport; }	@java.lang.Override public boolean canBeSelected() { boolean hasVmSpiceSupport = java.lang.Boolean.TRUE.equals(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().hasSpiceSupport(getEntity().getOs(), getEntity().getCompatibilityVersion())); return (getEntity().getGraphicsInfos().containsKey(GraphicsType.SPICE)) && hasVmSpiceSupport; }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__HOT_SET_MEMORY); addCanDoActionMessage(EngineMessage.VAR__TYPE__VM); addCanDoActionMessageVariable("clusterVersion", org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()); addCanDoActionMessageVariable("architecture", org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getClusterArch()); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__ACTION__HOT_SET_MEMORY); addValidationMessage(EngineMessage.VAR__TYPE__VM); addValidationMessageVariable("clusterVersion", org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getCompatibilityVersion()); addValidationMessageVariable("architecture", org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getClusterArch()); }
private org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilderBase createBuilder() { if (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>())) { return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmOldInfoBuilder(vm, createInfo); } else { return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder(vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getParameters().getVdsId(), createInfo); } }	private org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilderBase createBuilder() { if (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(vm.getCompatibilityVersion())) { return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmOldInfoBuilder(vm, createInfo); } else { return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder(vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getParameters().getVdsId(), createInfo); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((disk.getVm()) == null) { return; } boolean isVirtioScsiEnabled = java.lang.Boolean.TRUE.equals(((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity()); org.ovirt.engine.core.compat.Version clusterVersion = disk.getVm().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(); interfaceInfoIcon.setVisible((((clusterVersion.compareTo(Version.v3_3)) >= 0) && (!isVirtioScsiEnabled))); }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((disk.getVm()) == null) { return; } boolean isVirtioScsiEnabled = java.lang.Boolean.TRUE.equals(((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity()); org.ovirt.engine.core.compat.Version clusterVersion = disk.getVm().getCompatibilityVersion(); interfaceInfoIcon.setVisible((((clusterVersion.compareTo(Version.v3_3)) >= 0) && (!isVirtioScsiEnabled))); }
protected void updateLiveStorageMigrationEnabled() { final org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterById(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel) (target)); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (returnValue)); org.ovirt.engine.core.compat.Version dcCompatibilityVersion = ((dataCenter.getCompatibilityVersion()) != null) ? dataCenter.getCompatibilityVersion() : new org.ovirt.engine.core.compat.Version(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isCommandCompatible(new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel) (target)); model.setIsLiveStorageMigrationEnabled(((java.lang.Boolean) (returnValue))); } }), VdcActionType.LiveMigrateVmDisks, vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(), dcCompatibilityVersion); } }), vm.getStoragePoolId()); }	protected void updateLiveStorageMigrationEnabled() { final org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterById(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel) (target)); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (returnValue)); org.ovirt.engine.core.compat.Version dcCompatibilityVersion = ((dataCenter.getCompatibilityVersion()) != null) ? dataCenter.getCompatibilityVersion() : new org.ovirt.engine.core.compat.Version(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isCommandCompatible(new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel) (target)); model.setIsLiveStorageMigrationEnabled(((java.lang.Boolean) (returnValue))); } }), VdcActionType.LiveMigrateVmDisks, vm.getCompatibilityVersion(), dcCompatibilityVersion); } }), vm.getStoragePoolId()); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel) (target)); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (returnValue)); org.ovirt.engine.core.common.businessentities.VM vm = model.getEntity(); org.ovirt.engine.core.compat.Version <START_MOD>minVmVersion<END_MOD> = vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(); org.ovirt.engine.core.compat.Version minDcVersion = dataCenter.getCompatibilityVersion(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isCommandCompatible(new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel) (target)); model.setIsCloneVmSupported(((java.lang.Boolean) (returnValue))); } }), VdcActionType.AddVmFromSnapshot, <START_MOD>minVmVersion<END_MOD>, minDcVersion); }	@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel) (target)); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (returnValue)); if (dataCenter == null) { return; } org.ovirt.engine.core.compat.Version minVmVersion = vm.getCompatibilityVersion(); org.ovirt.engine.core.compat.Version minDcVersion = dataCenter.getCompatibilityVersion(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isCommandCompatible(new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel) (target)); model.setIsCloneVmSupported(((java.lang.Boolean) (returnValue))); } }), VdcActionType.AddVmFromSnapshot, minVmVersion, minDcVersion); }
protected void updateIsCloneVmSupported() { if ((getEntity()) == null) { return; } org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterById(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel) (target)); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (returnValue)); org.ovirt.engine.core.common.businessentities.VM vm = model.getEntity(); org.ovirt.engine.core.compat.Version <START_MOD>minVmVersion<END_MOD> = vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(); org.ovirt.engine.core.compat.Version minDcVersion = dataCenter.getCompatibilityVersion(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isCommandCompatible(new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel) (target)); model.setIsCloneVmSupported(((java.lang.Boolean) (returnValue))); } }), VdcActionType.AddVmFromSnapshot, <START_MOD>minVmVersion<END_MOD>, minDcVersion); } }), vm.getStoragePoolId()); }	protected void updateIsCloneVmSupported() { if ((getEntity()) == null) { return; } final org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterById(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel) (target)); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (returnValue)); if (dataCenter == null) { return; } org.ovirt.engine.core.compat.Version minVmVersion = vm.getCompatibilityVersion(); org.ovirt.engine.core.compat.Version minDcVersion = dataCenter.getCompatibilityVersion(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isCommandCompatible(new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel) (target)); model.setIsCloneVmSupported(((java.lang.Boolean) (returnValue))); } }), VdcActionType.AddVmFromSnapshot, minVmVersion, minDcVersion); } }), vm.getStoragePoolId()); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel) (target)); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (returnValue)); org.ovirt.engine.core.compat.Version dcCompatibilityVersion = ((dataCenter.getCompatibilityVersion()) != null) ? dataCenter.getCompatibilityVersion() : new org.ovirt.engine.core.compat.Version(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isCommandCompatible(new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel) (target)); model.setIsLiveStorageMigrationEnabled(((java.lang.Boolean) (returnValue))); } }), VdcActionType.LiveMigrateVmDisks, vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(), dcCompatibilityVersion); }	@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel) (target)); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (returnValue)); org.ovirt.engine.core.compat.Version dcCompatibilityVersion = ((dataCenter.getCompatibilityVersion()) != null) ? dataCenter.getCompatibilityVersion() : new org.ovirt.engine.core.compat.Version(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isCommandCompatible(new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel) (target)); model.setIsLiveStorageMigrationEnabled(((java.lang.Boolean) (returnValue))); } }), VdcActionType.LiveMigrateVmDisks, vm.getCompatibilityVersion(), dcCompatibilityVersion); }
protected void updateIsDiskHotPlugAvailable() { org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.core.compat.Version <START_MOD>compatibilityVersion<END_MOD> = vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(); if (<START_MOD>compatibilityVersion<END_MOD> == null) { setIsDiskHotPlugSupported(false); } else { setIsDiskHotPlugSupported((!(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDiskHotpluggableInterfaces(getEntity().getOs(), <START_MOD>compatibilityVersion<END_MOD>).isEmpty()))); } }	protected void updateIsDiskHotPlugAvailable() { org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.core.compat.Version compatibilityVersion = vm.getCompatibilityVersion(); if (compatibilityVersion == null) { setIsDiskHotPlugSupported(false); } else { setIsDiskHotPlugSupported((!(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDiskHotpluggableInterfaces(getEntity().getOs(), compatibilityVersion).isEmpty()))); } }
private boolean tryLockVmForUpdate(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> pair, long fetchTime, org.ovirt.engine.core.compat.Guid vdsId) { org.ovirt.engine.core.compat.Guid vmId = getVmId(pair); if (vmId != null) { org.ovirt.engine.core.vdsbroker.VmManager vmManager = getResourceManager().getVmManager(vmId); if (vmManager.trylock()) { if (!(vmManager.isLatestData(pair.getSecond(), vdsId))) { org.ovirt.engine.core.vdsbroker.VmsMonitoring.log.warn(( VM '{}' from this monitoring cycle +   - newer VM data was already processed vmId); vmManager.unlock(); } else if (((vmManager.getVmDataChangedTime()) != null) && ((fetchTime - (vmManager.getVmDataChangedTime())) <= 0)) { org.ovirt.engine.core.vdsbroker.VmsMonitoring.log.warn(( VM '{}' from this monitoring cycle +   - the VM data has changed since fetching the data vmId); vmManager.unlock(); } else { return true; } } else { org.ovirt.engine.core.vdsbroker.VmsMonitoring.log.debug(( VM '{}' from this monitoring cycle +   - the VM is locked by its VmManager   getVmId(pair)); } } return false; }	private boolean tryLockVmForUpdate(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> pair, long fetchTime, org.ovirt.engine.core.compat.Guid vdsId) { org.ovirt.engine.core.compat.Guid vmId = org.ovirt.engine.core.vdsbroker.VmsMonitoring.getVmId(pair.getFirst(), pair.getSecond()); if (vmId != null) { org.ovirt.engine.core.vdsbroker.VmManager vmManager = getResourceManager().getVmManager(vmId); if (vmManager.trylock()) { if (!(vmManager.isLatestData(pair.getSecond(), vdsId))) { org.ovirt.engine.core.vdsbroker.VmsMonitoring.log.warn(("skipping VM '{}' from this monitoring cycle" + " - newer VM data was already processed"), vmId); vmManager.unlock(); } else if (((vmManager.getVmDataChangedTime()) != null) && ((fetchTime - (vmManager.getVmDataChangedTime())) <= 0)) { org.ovirt.engine.core.vdsbroker.VmsMonitoring.log.warn(("skipping VM '{}' from this monitoring cycle" + " - the VM data has changed since fetching the data"), vmId); vmManager.unlock(); } else { return true; } } else { org.ovirt.engine.core.vdsbroker.VmsMonitoring.log.debug(("skipping VM '{}' from this monitoring cycle" + " - the VM is locked by its VmManager "), vmId); } } return false; }
<START_MOD>private void unlockVms(java.util.List<org.ovirt.engine.core.vdsbroker.VmAnalyzer> vmAnalyzers) { vmAnalyzers.stream().map(VmAnalyzer::getVmId).forEach(( vmId) -> {<END_MOD> org.ovirt.engine.core.vdsbroker.VmManager <START_MOD>vmManager = getResourceManager().<END_MOD>getVmManager(vmId); <START_MOD>vmManager.updateVmDataChangedTime(); vmManager.unlock(); <END_MOD>}<START_MOD>); }<END_MOD>	private void unlockVms(java.util.List<org.ovirt.engine.core.vdsbroker.VmAnalyzer> vmAnalyzers) { vmAnalyzers.stream().map(org.ovirt.engine.core.vdsbroker.VmsMonitoring::getVmId).forEach(( vmId) -> { org.ovirt.engine.core.vdsbroker.VmManager vmManager = getResourceManager().getVmManager(vmId); vmManager.updateVmDataChangedTime(); vmManager.unlock(); }); }
@java.lang.Override public void updateMinAllocatedMemory() { <START_MOD>if (((getModel().getMinAllocatedMemory().getEntity()) != null) && ((getVm().getMemSizeMb()) == (getModel().getMinAllocatedMemory().getEntity()))) { getModel().getMinAllocatedMemory().setEntity(getModel().getMemSize().getEntity()); } else { <END_MOD>org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster dataCenterWithCluster = getModel().getDataCenterWithClustersList().getSelectedItem(); if (dataCenterWithCluster == null) { return; } org.ovirt.engine.core.common.businessentities.VDSGroup cluster = dataCenterWithCluster.getCluster(); if (cluster == null) { return; } if ((getModel().getMemSize().getEntity()) < (vm.getVmMemSizeMb())) { double overCommitFactor = 100.0 / (cluster.getMaxVdsMemoryOverCommit()); getModel().getMinAllocatedMemory().setEntity(((int) ((getModel().getMemSize().getEntity()) * overCommitFactor))); } else { getModel().getMinAllocatedMemory().setEntity(vm.getMinAllocatedMem()); } }<START_MOD> }<END_MOD>	@java.lang.Override public void updateMinAllocatedMemory() { if ((getModel().getMemSize().getEntity()) == null) { return; } org.ovirt.engine.core.common.businessentities.Cluster cluster = getModel().getSelectedCluster(); if (cluster == null) { return; } double overCommitFactor = 100.0 / (cluster.getMaxVdsMemoryOverCommit()); getModel().getMinAllocatedMemory().setEntity(((int) ((getModel().getMemSize().getEntity()) * overCommitFactor))); }
public <P extends org.ovirt.engine.core.common.vdscommands.VDSParametersBase> org.ovirt.engine.core.common.vdscommands.VDSReturnValue runVdsCommand(org.ovirt.engine.core.common.vdscommands.VDSCommandType commandType, P parameters) { return resourceManager.runVdsCommand(commandType, parameters); }	protected <P extends org.ovirt.engine.core.common.vdscommands.VDSParametersBase> org.ovirt.engine.core.common.vdscommands.VDSReturnValue runVdsCommand(org.ovirt.engine.core.common.vdscommands.VDSCommandType commandType, P parameters) { return getResourceManager().runVdsCommand(commandType, parameters); }
protected org.ovirt.engine.core.vdsbroker.VmAnalyzer getVmAnalyzer(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> pair, org.ovirt.engine.core.vdsbroker.VdsManager vdsManager, boolean timeToUpdateStatistics) { org.ovirt.engine.core.vdsbroker.VmAnalyzer vmAnalyzer = new org.ovirt.engine.core.vdsbroker.VmAnalyzer(pair.getFirst(), pair.getSecond(), <START_MOD>timeToUpdateStatistics);<END_MOD> <START_MOD>vmAnalyzer.setDbFacade(dbFacade); vmAnalyzer.setResourceManager(resourceManager<END_MOD>); vmAnalyzer.setAuditLogDirector(auditLogDirector); vmAnalyzer.setVdsManager(vdsManager); return vmAnalyzer; }	protected org.ovirt.engine.core.vdsbroker.VmAnalyzer getVmAnalyzer(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> pair, org.ovirt.engine.core.vdsbroker.VdsManager vdsManager, boolean timeToUpdateStatistics) { org.ovirt.engine.core.vdsbroker.VmAnalyzer vmAnalyzer = new org.ovirt.engine.core.vdsbroker.VmAnalyzer(pair.getFirst(), pair.getSecond(), timeToUpdateStatistics); vmAnalyzer.setDbFacade(getDbFacade()); vmAnalyzer.setResourceManager(getResourceManager()); vmAnalyzer.setAuditLogDirector(auditLogDirector); vmAnalyzer.setVdsManager(vdsManager); return vmAnalyzer; }
public void setResourceManager(org.ovirt.engine.core.vdsbroker.ResourceManager resourceManager) { this.resourceManager = resourceManager; }	protected void setResourceManager(org.ovirt.engine.core.vdsbroker.ResourceManager resourceManager) { this.resourceManager = resourceManager; }
public org.ovirt.engine.core.vdsbroker.ResourceManager getResourceManager() { return resourceManager; }	protected org.ovirt.engine.core.vdsbroker.ResourceManager getResourceManager() { return resourceManager; }
private void updateWindowsWarningMessage() { setMessage(""); java.lang.Integer selectedOS = vmImportGeneralModel.getOperatingSystems().getSelectedItem(); if (selectedOS == null) { return; } boolean attachDriwers = getAttachDrivers().getEntity(); boolean someDriwerSelected = (getIso().getSelectedItem()) != null; boolean isWindows = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isWindowsOsType(selectedOS); if (isWindows && ((!attachDriwers) || (!someDriwerSelected))) { setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().missingVirtioDriversForWindows()); } }	private void updateWindowsWarningMessage() { setWinWithoutVirtioMessage(""); java.lang.Integer selectedOS = vmImportGeneralModel.getOperatingSystems().getSelectedItem(); if (selectedOS == null) { return; } boolean attachDrivers = getAttachDrivers().getEntity(); boolean someDriverSelected = !(org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(getIso().getSelectedItem())); boolean isWindows = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isWindowsOsType(selectedOS); if (isWindows && ((!attachDrivers) || (!someDriverSelected))) { setWinWithoutVirtioMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().missingVirtioDriversForWindows()); } }
@org.junit.Before public void initCommandsCollection() { commandClasses = java.util.Arrays.stream(org.ovirt.engine.core.common.action.VdcActionType.values()).filter(( vdcActionType) -> vdcActionType != VdcActionType.Unknown).map(( vdcActionType) -> org.ovirt.engine.core.bll.CommandsFactory.getCommandClass(vdcActionType.toString())).collect(java.util.stream.Collectors.toList()); }	@org.junit.BeforeClass public static void initCommandsCollection() { org.ovirt.engine.core.bll.CommandCtorsTest.commandClasses = java.util.Arrays.stream(org.ovirt.engine.core.common.action.VdcActionType.values()).filter(( vdcActionType) -> vdcActionType != VdcActionType.Unknown).map(( vdcActionType) -> org.ovirt.engine.core.bll.CommandsFactory.getCommandClass(vdcActionType.toString())).collect(java.util.stream.Collectors.toList()); }
@org.junit.Before public void createMandatoryConstructorSignaturePredicate() { mandatoryConstructorSignature = createConstructorSignaturePredicate(org.ovirt.engine.core.common.action.VdcActionParametersBase.class, org.ovirt.engine.core.bll.context.CommandContext.class); }	@org.junit.BeforeClass public static void createMandatoryConstructorSignaturePredicate() { org.ovirt.engine.core.bll.CommandCtorsTest.mandatoryConstructorSignature = org.ovirt.engine.core.bll.CommandCtorsTest.createConstructorSignaturePredicate(org.ovirt.engine.core.common.action.VdcActionParametersBase.class, org.ovirt.engine.core.bll.context.CommandContext.class); }
@org.junit.Test public void testCommandMandatoryConstructorsExistence() { java.util.List<java.lang.String> commandsWithoutMandatoryConstructor = commandClasses.stream().filter(( commandClass) -> java.util.Arrays.stream(commandClass.getDeclaredConstructors()).noneMatch(mandatoryConstructorSignature)).map(( commandClass) -> commandClass.getSimpleName()).sorted().collect(java.util.stream.Collectors.toList()); assertThat(("There are commands that don't contain the mandatory constructor (constructor that gets " + "parameters and context objects):"), commandsWithoutMandatoryConstructor, empty()); }	@org.junit.Test public void testCommandMandatoryConstructorsExistence() { java.util.List<java.lang.String> commandsWithoutMandatoryConstructor = org.ovirt.engine.core.bll.CommandCtorsTest.commandClasses.stream().filter(( commandClass) -> java.util.Arrays.stream(commandClass.getDeclaredConstructors()).noneMatch(org.ovirt.engine.core.bll.CommandCtorsTest.mandatoryConstructorSignature)).map(java.lang.Class::getSimpleName).sorted().collect(java.util.stream.Collectors.toList()); assertThat(("There are commands that don't contain the mandatory constructor (constructor that receives " + "parameters and context objects):"), commandsWithoutMandatoryConstructor, empty()); }
private java.util.function.Predicate<java.lang.reflect.Constructor<?>> getConstructorRequiredByCommandsFactoryPredicate() { java.util.function.Predicate<java.lang.reflect.Constructor<?>> guidConstructorSignature = createConstructorSignaturePredicate(org.ovirt.engine.core.compat.Guid.class); return <START_MOD>mandatoryConstructorSignature<END_MOD>.or(guidConstructorSignature); }	private java.util.function.Predicate<java.lang.reflect.Constructor<?>> getConstructorRequiredByCommandsFactoryPredicate() { java.util.function.Predicate<java.lang.reflect.Constructor<?>> guidConstructorSignature = org.ovirt.engine.core.bll.CommandCtorsTest.createConstructorSignaturePredicate(org.ovirt.engine.core.compat.Guid.class); return org.ovirt.engine.core.bll.CommandCtorsTest.mandatoryConstructorSignature.or(guidConstructorSignature); }
private void populateStorageDomainOvfData() { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo> storageDomainOvfInfos = org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getDbFacade().getStorageDomainOvfInfoDao().getAllForDomain(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getStorageDomainId()); ovfDiskCount = storageDomainOvfInfos.size(); java.util.Collections.sort(storageDomainOvfInfos, <START_MOD>java.util.Comparator.comparing(StorageDomainOvfInfo::getLastUpdated, java.util.Comparator.nullsFirst(java.util.Comparator.<java.util.Date>naturalOrder())).thenComparing(StorageDomainOvfInfo::getOvfDiskId)); for (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo storageDomainOvfInfo : storageDomainOvfInfos) { if ((storageDomainOvfInfo.getStatus()) != (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfoStatus.DISABLED)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage ovfDisk = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getDbFacade().getDiskDao().get(storageDomainOvfInfo.getOvfDiskId()))); domainOvfStoresInfoForUpdate.add(<END_MOD>new <START_MOD>org.ovirt.engine.core.common.utils.Pair(<END_MOD>storageDomainOvfInfo, <START_MOD>ovfDisk))<END_MOD>; } } }	private void populateStorageDomainOvfData() { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo> storageDomainOvfInfos = org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getDbFacade().getStorageDomainOvfInfoDao().getAllForDomain(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getStorageDomainId()); ovfDiskCount = storageDomainOvfInfos.size(); java.util.Collections.sort(storageDomainOvfInfos, org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.OVF_INFO_COMPARATOR); for (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo storageDomainOvfInfo : storageDomainOvfInfos) { if ((storageDomainOvfInfo.getStatus()) != (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfoStatus.DISABLED)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage ovfDisk = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getDbFacade().getDiskDao().get(storageDomainOvfInfo.getOvfDiskId()))); domainOvfStoresInfoForUpdate.add(new org.ovirt.engine.core.common.utils.Pair(storageDomainOvfInfo, ovfDisk)); } } }
protected java.util.List<org.ovirt.engine.core.compat.Guid> getFailedVolumeIds() { return (org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getImageList()) == null ? java.util.Collections.emptyList() : org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getImageList().stream().filter(this::volumeExists).collect(java.util.stream.Collectors.toList()); }	protected java.util.List<org.ovirt.engine.core.compat.Guid> getFailedVolumeIds() { return org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getImageList().stream().filter(this::volumeExists).collect(java.util.stream.Collectors.toList()); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((((getModel().getTemplateWithVersion()) == null) || ((getModel().getTemplateWithVersion().getItems()) == null)) || ((getModel().getTemplateWithVersion().getSelectedItem()) == null)) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> baseTemplates = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.templates.TemplateWithVersion templateWithVersion : getModel().getTemplateWithVersion().getItems()) { if (templateWithVersion.isLatest()) { continue; } baseTemplates.add(templateWithVersion.getBaseTemplate()); } org.ovirt.engine.ui.uicommonweb.models.templates.TemplateWithVersion selectedItemTemplateWithVersion = getModel().getTemplateWithVersion().getSelectedItem(); org.ovirt.engine.core.common.businessentities.VmTemplate selectedTemplateWithVersion = selectedItemTemplateWithVersion.getTemplateVersion(); if (selectedTemplateWithVersion == null) { return; } org.ovirt.engine.core.compat.Guid selectedId = selectedTemplateWithVersion.getId(); updateStatelessFlag = false; initTemplateWithVersion(baseTemplates, selectedId, selectedItemTemplateWithVersion.isLatest(), getModel().getIsStateless().getEntity()); }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((((getModel().getTemplateWithVersion()) == null) || ((getModel().getTemplateWithVersion().getItems()) == null)) || ((getModel().getTemplateWithVersion().getSelectedItem()) == null)) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> baseTemplates = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.templates.TemplateWithVersion templateWithVersion : getModel().getTemplateWithVersion().getItems()) { if ((templateWithVersion.isLatest()) || ((templateWithVersion.getTemplateVersion()) == null)) { continue; } baseTemplates.add(templateWithVersion.getTemplateVersion()); } org.ovirt.engine.ui.uicommonweb.models.templates.TemplateWithVersion selectedItemTemplateWithVersion = getModel().getTemplateWithVersion().getSelectedItem(); org.ovirt.engine.core.common.businessentities.VmTemplate selectedTemplateWithVersion = selectedItemTemplateWithVersion.getTemplateVersion(); if (selectedTemplateWithVersion == null) { return; } org.ovirt.engine.core.compat.Guid selectedId = selectedTemplateWithVersion.getId(); updateStatelessFlag = false; initTemplateWithVersion(baseTemplates, selectedId, selectedItemTemplateWithVersion.isLatest(), getModel().getIsStateless().getEntity()); }
@java.lang.Override protected void commonInitialize() { super.commonInitialize(); getModel().getIsStateless().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((((getModel().getTemplateWithVersion()) == null) || ((getModel().getTemplateWithVersion().getItems()) == null)) || ((getModel().getTemplateWithVersion().getSelectedItem()) == null)) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> baseTemplates = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.templates.TemplateWithVersion templateWithVersion : getModel().getTemplateWithVersion().getItems()) { if (templateWithVersion.isLatest()) { continue; } baseTemplates.add(templateWithVersion.getBaseTemplate()); } org.ovirt.engine.ui.uicommonweb.models.templates.TemplateWithVersion selectedItemTemplateWithVersion = getModel().getTemplateWithVersion().getSelectedItem(); org.ovirt.engine.core.common.businessentities.VmTemplate selectedTemplateWithVersion = selectedItemTemplateWithVersion.getTemplateVersion(); if (selectedTemplateWithVersion == null) { return; } org.ovirt.engine.core.compat.Guid selectedId = selectedTemplateWithVersion.getId(); updateStatelessFlag = false; initTemplateWithVersion(baseTemplates, selectedId, selectedItemTemplateWithVersion.isLatest(), getModel().getIsStateless().getEntity()); } }); }	@java.lang.Override protected void commonInitialize() { super.commonInitialize(); getModel().getIsStateless().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((((getModel().getTemplateWithVersion()) == null) || ((getModel().getTemplateWithVersion().getItems()) == null)) || ((getModel().getTemplateWithVersion().getSelectedItem()) == null)) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> baseTemplates = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.templates.TemplateWithVersion templateWithVersion : getModel().getTemplateWithVersion().getItems()) { if ((templateWithVersion.isLatest()) || ((templateWithVersion.getTemplateVersion()) == null)) { continue; } baseTemplates.add(templateWithVersion.getTemplateVersion()); } org.ovirt.engine.ui.uicommonweb.models.templates.TemplateWithVersion selectedItemTemplateWithVersion = getModel().getTemplateWithVersion().getSelectedItem(); org.ovirt.engine.core.common.businessentities.VmTemplate selectedTemplateWithVersion = selectedItemTemplateWithVersion.getTemplateVersion(); if (selectedTemplateWithVersion == null) { return; } org.ovirt.engine.core.compat.Guid selectedId = selectedTemplateWithVersion.getId(); updateStatelessFlag = false; initTemplateWithVersion(baseTemplates, selectedId, selectedItemTemplateWithVersion.isLatest(), getModel().getIsStateless().getEntity()); } }); }
private java.lang.String getApplicationPath() { java.lang.String contextPath = getThreadLocalRequest().getContextPath(); java.net.URI path = java.net.URI.create(contextPath); java.lang.String[] pathFragments = path.getPath().split(org.ovirt.engine.ui.frontend.server.gwt.RpcRemoteOracleServlet.SLASH); return pathFragments[((pathFragments.length) - 1)]; }	java.lang.String getSuperDevOracleUrl(java.lang.String applicationName, java.lang.String permutationStrongName) { org.apache.http.client.utils.URIBuilder builder = new org.apache.http.client.utils.URIBuilder(); builder.setScheme("http"); builder.setHost(superDevConfig.host); builder.setPort(superDevConfig.port); builder.setPath((((((org.ovirt.engine.ui.frontend.server.gwt.RpcRemoteOracleServlet.SLASH) + applicationName) + (org.ovirt.engine.ui.frontend.server.gwt.RpcRemoteOracleServlet.SLASH)) + permutationStrongName) + (org.ovirt.engine.ui.frontend.server.gwt.RpcRemoteOracleServlet.GWT_RPC_EXT))); return builder.toString(); }
private void initializeRemoteOracleDataSource() { java.lang.String remoteSource = java.lang.System.getenv().get(org.ovirt.engine.ui.frontend.server.gwt.RpcRemoteOracleServlet.CODE_SRV); if (remoteSource != null) { remoteOracleSource = new org.ovirt.engine.ui.frontend.server.gwt.RemoteOracleDataSource(5000, 5000); java.lang.String[] parts = remoteSource.split(":"); assert (parts.length) == 2; remoteHost = parts[0]; remotePort = java.lang.Integer.parseInt(parts[1]); } }	java.io.InputStream findRemoteOracleData(java.lang.String url) { java.net.URLConnection conn; try { conn = new java.net.URL(url).openConnection(); conn.setConnectTimeout(superDevConfig.connectTimeout); conn.setReadTimeout(superDevConfig.readTimeout); if (conn instanceof java.net.HttpURLConnection) { ((java.net.HttpURLConnection) (conn)).setInstanceFollowRedirects(false); } conn.connect(); return conn.getInputStream(); } catch (java.net.MalformedURLException e) { return null; } catch (java.io.IOException e) { return null; } }
protected java.io.InputStream findClientOracleData(java.lang.String requestModuleBasePath, java.lang.String permutationStrongName) throws com.google.gwt.user.client.rpc.SerializationException { try { return super.findClientOracleData(requestModuleBasePath, permutationStrongName); } catch (com.google.gwt.user.client.rpc.SerializationException e) { if ((remoteOracleSource) != null) { org.apache.http.client.utils.URIBuilder builder = new org.apache.http.client.utils.URIBuilder(); builder.setScheme(org.ovirt.engine.ui.frontend.server.gwt.RpcRemoteOracleServlet.HTTP); builder.setHost(remoteHost); builder.setPort(remotePort); builder.setPath((((((org.ovirt.engine.ui.frontend.server.gwt.RpcRemoteOracleServlet.SLASH) + (getApplicationPath())) + (org.ovirt.engine.ui.frontend.server.gwt.RpcRemoteOracleServlet.SLASH)) + permutationStrongName) + (org.ovirt.engine.ui.frontend.server.gwt.RpcRemoteOracleServlet.GWT_RPC_EXT))); return remoteOracleSource.findOracleData(builder.toString()); } throw e; } }	@java.lang.Override protected java.io.InputStream findClientOracleData(java.lang.String requestModuleBasePath, java.lang.String permutationStrongName) throws com.google.gwt.user.client.rpc.SerializationException { java.lang.String applicationName = getServletContext().getInitParameter(org.ovirt.engine.ui.frontend.server.gwt.RpcRemoteOracleServlet.APP_NAME); try { return super.findClientOracleData(requestModuleBasePath, permutationStrongName); } catch (com.google.gwt.user.client.rpc.SerializationException e) { if (((superDevConfig) != null) && (superDevConfig.enabled)) { return findRemoteOracleData(getSuperDevOracleUrl(applicationName, permutationStrongName)); } throw e; } }
private static java.lang.String formatMissingIndices(java.util.List<java.lang.Integer> missingIndices) { java.lang.String str = org.apache.commons.lang.StringUtils.join(missingIndices.subList(0, java.lang.Integer.min(10, missingIndices.size())), ", "); if ((missingIndices.size()) > 10) { str = str + ", ..."; } return str; }	private static java.lang.String formatMissingIndices(java.util.List<java.lang.Integer> missingIndices) { java.lang.String str = org.apache.commons.lang.StringUtils.join(missingIndices.subList(0, java.lang.Math.min(10, missingIndices.size())), ", "); if ((missingIndices.size()) > 10) { str = str + ", ..."; } return str; }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.ImportExportRepoImageBaseModel model) { driver.edit(model); importAsTemplateEditor.setVisible(model.isImportModel()); clusterEditor<START_MOD>.setVisible(model.isImportModel()); templateNameEditor<END_MOD>.setVisible(model.isImportModel()); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (("ImportExportEntities".equals(args.propertyName)) && ((model.getEntities()) != null)) { imageList.setRowData(model.getEntities()); } } }); initTable(model); }	@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.ImportExportRepoImageBaseModel model) { driver.edit(model); importAsTemplateEditor.setVisible(model.isImportModel()); clusterEditor.setVisible(model.isImportModel()); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (("ImportExportEntities".equals(args.propertyName)) && ((model.getEntities()) != null)) { imageList.setRowData(model.getEntities()); } } }); initTable(model); }
private void setDefaultBootDevice() { boolean hasBootDevice = vmBase.getManagedDeviceMap().values().stream().anyMatch(( device) -> (device.getBootOrder()) > 0); if (hasBootDevice) { return; } final int[] order = new int[]{ 1 }; _images.stream().filter(DiskImage::isBoot).map(( image) -> vmBase.getManagedDeviceMap().get(image.getId())).filter(java.util.Objects::nonNull).forEachOrdered(( device) -> device.setBootOrder(((order[0])++))); }	private void setDefaultBootDevice() { boolean hasBootDevice = vmBase.getManagedDeviceMap().values().stream().anyMatch(( device) -> (device.getBootOrder()) > 0); if (hasBootDevice) { return; } java.util.concurrent.atomic.AtomicInteger order = new java.util.concurrent.atomic.AtomicInteger(1); _images.stream().filter(DiskImage::isBoot).map(( image) -> vmBase.getManagedDeviceMap().get(image.getId())).filter(java.util.Objects::nonNull).forEachOrdered(( device) -> device.setBootOrder(order.getAndIncrement())); }
private long findUnusedMac() { int index = usedMacs.nextClearBit(<START_MOD>startingLocationWhenSearchingForUnusedMac); boolean notFound = index == (numberOfMacsInRange); if (notFound) { index = usedMacs.nextClearBit(<END_MOD>0)<START_MOD>; } startingLocationWhenSearchingForUnusedMac = index + 1<END_MOD>; return (rangeStart) + index; }	private long findUnusedMac() { int index = usedMacs.nextClearBit(startingLocationWhenSearchingForUnusedMac); boolean notFound = index == (numberOfMacsInRange); if (notFound) { index = usedMacs.nextClearBit(0); } startingLocationWhenSearchingForUnusedMac = (index + 1) % (numberOfMacsInRange); return (rangeStart) + index; }
private void assertReturnedRange(java.util.List<org.ovirt.engine.core.bll.network.macpoolmanager.Range> ranges, org.ovirt.engine.core.bll.network.macpoolmanager.MacsStorage macsStorage, java.util.List<java.lang.Integer> expectedRangeIndices) { for (int expectedRangeIndex : expectedRangeIndices) { org.ovirt.engine.core.bll.network.macpoolmanager.Range actualRange = macsStorage.getRangeWithAvailableMac(); org.ovirt.engine.core.bll.network.macpoolmanager.Range expectedRange = ranges.get(expectedRangeIndex); logger.info("expecting range {}, got {}", expectedRangeIndex, ranges.stream().map(java.lang.Object::hashCode).collect(java.util.stream.Collectors.toList()).indexOf(actualRange.hashCode())); assertThat(actualRange, new org.hamcrest.core.IsSame(expectedRange)); } }	private void assertReturnedRange(java.util.List<org.ovirt.engine.core.bll.network.macpoolmanager.Range> ranges, org.ovirt.engine.core.bll.network.macpoolmanager.MacsStorage macsStorage, java.util.List<java.lang.Integer> expectedRangeIndices) { for (int expectedRangeIndex : expectedRangeIndices) { org.ovirt.engine.core.bll.network.macpoolmanager.Range actualRange = macsStorage.getRangeWithAvailableMac(); org.ovirt.engine.core.bll.network.macpoolmanager.Range expectedRange = ranges.get(expectedRangeIndex); assertThat(actualRange, new org.hamcrest.core.IsSame(expectedRange)); } }
org.ovirt.engine.core.bll.network.macpoolmanager.Range getRangeWithAvailableMac() { <START_MOD>int<END_MOD> <START_MOD>numberOfRanges = ranges.size<END_MOD>(<START_MOD>); <END_MOD>org.ovirt.engine.core.bll.network.macpoolmanager.Range range <START_MOD>=<END_MOD> <START_MOD>findRangeWithAvailableMac(startIndexForEmptyRangeSearch, numberOfRanges, numberOfRanges<END_MOD>)<START_MOD>;<END_MOD> if (range<START_MOD> != null<END_MOD>) return range; return <START_MOD>findRangeWithAvailableMac(0, startIndexForEmptyRangeSearch, numberOfRanges)<END_MOD>; }	org.ovirt.engine.core.bll.network.macpoolmanager.Range getRangeWithAvailableMac() { int numberOfRanges = ranges.size(); org.ovirt.engine.core.bll.network.macpoolmanager.Range range = findRangeWithAvailableMac(startIndexForEmptyRangeSearch, numberOfRanges, numberOfRanges); if (range != null) { return range; } return findRangeWithAvailableMac(0, startIndexForEmptyRangeSearch, numberOfRanges); }
private void allocateAndFreeMacAndExpectGivenMac(org.ovirt.engine.core.bll.network.macpoolmanager.Range range, long expectedMac) { java.lang.Long mac = range.allocateMacs(1).get(0); logger.info("expecting that MAC {} should be obtained, got {}", expectedMac, mac); assertThat(mac, is(expectedMac)); range.freeMac(mac); }	private void allocateAndFreeMacAndExpectGivenMac(org.ovirt.engine.core.bll.network.macpoolmanager.Range range, long expectedMac) { java.lang.Long mac = range.allocateMacs(1).get(0); assertThat(mac, is(expectedMac)); range.freeMac(mac); }
public static long macToLong(java.lang.String mac) { return java.lang.Long.parseLong(<START_MOD>mac<END_MOD>.<START_MOD>replaceAll<END_MOD>(<START_MOD>":"<END_MOD>, <START_MOD>""<END_MOD>), org.ovirt.engine.core.utils.MacAddressRangeUtils.HEX_RADIX); }	public static long macToLong(java.lang.String mac) { return java.lang.Long.parseLong(org.apache.commons.lang.StringUtils.remove(mac, ':'), org.ovirt.engine.core.utils.MacAddressRangeUtils.HEX_RADIX); }
@java.lang.Override public boolean isApplicable(org.ovirt.engine.core.common.businessentities.Cluster oldCluster, org.ovirt.engine.core.common.businessentities.Cluster newCluster) { return !(oldCluster.getCompatibilityVersion().equals(newCluster.getCompatibilityVersion())); }	@java.lang.Override public boolean isApplicable(org.ovirt.engine.core.common.businessentities.Cluster oldCluster, org.ovirt.engine.core.common.businessentities.Cluster newCluster) { org.ovirt.engine.core.compat.Version newClusterVersion = newCluster.getCompatibilityVersion(); org.ovirt.engine.core.compat.Version oldClusterVersion = oldCluster.getCompatibilityVersion(); return !(oldClusterVersion.equals(newClusterVersion)); }
@java.lang.Override public java.lang.String getMainMessage() { return EngineMessage.CLUSTER_WARN_VM_DUE_TO_UNSUPPORTED_RESUME.name(); }	@java.lang.Override public java.lang.String getMainMessage() { return EngineMessage.CLUSTER_WARN_VM_DUE_TO_UNSUPPORTED_MEMORY_RESTORE.name(); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("The VM is in suspended state, it might not operate normally after resume on different cluster. It's suggested to power it off before cluster change.") java.lang.String suspendedVMsWhenClusterChange();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("The VM is suspended, it might not operate normally after resume on different cluster. It's suggested to power it off before cluster change.") java.lang.String suspendedVMsWhenClusterChange();
@java.lang.Override public void dataCenterWithClusterSelectedItemChanged() { super.dataCenterWithClusterSelectedItemChanged(); if ((getModel().getSelectedCluster()) != null) { updateCpuProfile(getModel().getSelectedCluster().getId(), getCompatibilityVersion(), vm.getCpuProfileId()); } <START_MOD>if ((getVm().getStatus().isSuspended()) && (!(getModel().getSelectedCluster().getCompatibilityVersion().equals(getVm().getCompatibilityVersion())))) { getModel().getEditingEnabled().setMessage(getModel().constants.suspendedVMsWhenClusterChange()); <END_MOD>}<START_MOD> }<END_MOD>	@java.lang.Override public void dataCenterWithClusterSelectedItemChanged() { super.dataCenterWithClusterSelectedItemChanged(); if ((getModel().getSelectedCluster()) != null) { updateCpuProfile(getModel().getSelectedCluster().getId(), getCompatibilityVersion(), vm.getCpuProfileId()); if ((isInStateWithMemoryVolume(getVm())) && (!(isRestoreMemoryVolumeSupported()))) { getModel().getEditingEnabled().setMessage(getModel().constants.suspendedVMsWhenClusterChange()); } } }
<START_MOD>default <END_MOD>java.lang.String getDetailMessage(T entity)<START_MOD> { return null<END_MOD>;<START_MOD> }<END_MOD>	java.lang.String getDetailMessage(T entity);
@org.ovirt.engine.ui.frontend.DefaultStringValue("Resume is not supported between cluster version (VM's power off is suggested):") java.lang.String CLUSTER_WARN_VM_DUE_TO_UNSUPPORTED_RESUME();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Memory saved on a different compatibility version cannot be properly restored, following VMs should be off:") java.lang.String CLUSTER_WARN_VM_DUE_TO_UNSUPPORTED_MEMORY_RESTORE();
@java.lang.Override public boolean check(org.ovirt.engine.core.common.businessentities.VM vm) { return vm.getStatus().isSuspended(); }	@java.lang.Override public boolean check(org.ovirt.engine.core.common.businessentities.VM vm) { if (java.util.EnumSet.of(VMStatus.Suspended, VMStatus.SavingState, VMStatus.RestoringState).contains(vm.getStatus())) { return (vm.getCustomCompatibilityVersion()) != null; } return true; }
@java.lang.Override protected void executeVdsBrokerCommand() { <START_MOD>switch (org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getOriginType()) { case XEN : <END_MOD>status = org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getBroker().<START_MOD>convertVmFromXen(org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getUrl(), createVmProperties(), org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVmId().toString()); break; case VMWARE : default : status = org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getBroker().<END_MOD>convertVmFromExternalSystem(org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getUrl(), org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getUsername(), org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getPassword(), createVmProperties(), org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVmId().toString()); <START_MOD>break; } <END_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.proceedProxyReturnValue(); setReturnValue((org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getVDSReturnValue().getSucceeded() ? org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVmId() : null)); }	@java.lang.Override protected void executeVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getBroker().convertVmFromExternalSystem(org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getUrl(), org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getUsername(), org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getPassword(), createVmProperties(), org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVmId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.proceedProxyReturnValue(); setReturnValue((org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getVDSReturnValue().getSucceeded() ? org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVmId() : null)); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc convertVmFromXen(java.lang.String url, java.util.Map<java.lang.String, java.lang.Object> vm, java.lang.String jobUUID) { try { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = vdsServer.convertXenVm(url, vm, jobUUID); org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(xmlRpcReturnValue); return wrapper; } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VolumeInfoReturnForXmlRpc getVolumeInfo(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgUUID, java.lang.String volUUID) { try { java.util.Map<java.lang.String, java.lang.Object> xmpRpcReturnValue = vdsServer.getVolumeInfo(sdUUID, spUUID, imgUUID, volUUID); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VolumeInfoReturnForXmlRpc(xmpRpcReturnValue); } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }
private org.ovirt.engine.core.common.vdscommands.ConvertVmVDSParameters buildConvertParameters() { org.ovirt.engine.core.common.vdscommands.ConvertVmVDSParameters parameters = new org.ovirt.engine.core.common.vdscommands.ConvertVmVDSParameters(org.ovirt.engine.core.bll.ConvertVmCommand.getVdsId()); parameters.setUrl(org.ovirt.engine.core.bll.ConvertVmCommand.getParameters().getUrl()); parameters.<START_MOD>setDisks(org.ovirt.engine.core.bll.ConvertVmCommand.getParameters().getDisks()); parameters.setVmId(org.ovirt.engine.core.bll.ConvertVmCommand.getVmId()); parameters.setVmName(org.ovirt.engine.core.bll.ConvertVmCommand.getVmName()); parameters.setStoragePoolId(org.ovirt.engine.core.bll.ConvertVmCommand.getStoragePoolId()); parameters.setStorageDomainId(org.ovirt.engine.core.bll.ConvertVmCommand.getStorageDomainId()); parameters.setVirtioIsoPath(getVirtioIsoPath()); switch (org.ovirt.engine.core.bll.ConvertVmCommand.getParameters().getOriginType()) { case VMWARE : default : parameters.<END_MOD>setUsername(org.ovirt.engine.core.bll.ConvertVmCommand.getParameters().getUsername()); parameters.setPassword(org.ovirt.engine.core.bll.ConvertVmCommand.getParameters().getPassword()); <START_MOD>break; }<END_MOD> return parameters; }	private org.ovirt.engine.core.common.vdscommands.ConvertVmVDSParameters buildConvertParameters() { org.ovirt.engine.core.common.vdscommands.ConvertVmVDSParameters parameters = new org.ovirt.engine.core.common.vdscommands.ConvertVmVDSParameters(org.ovirt.engine.core.bll.ConvertVmCommand.getVdsId()); parameters.setUrl(org.ovirt.engine.core.bll.ConvertVmCommand.getParameters().getUrl()); parameters.setUsername(org.ovirt.engine.core.bll.ConvertVmCommand.getParameters().getUsername()); parameters.setPassword(org.ovirt.engine.core.bll.ConvertVmCommand.getParameters().getPassword()); parameters.setDisks(org.ovirt.engine.core.bll.ConvertVmCommand.getParameters().getDisks()); parameters.setVmId(org.ovirt.engine.core.bll.ConvertVmCommand.getVmId()); parameters.setVmName(org.ovirt.engine.core.bll.ConvertVmCommand.getVmName()); parameters.setStoragePoolId(org.ovirt.engine.core.bll.ConvertVmCommand.getStoragePoolId()); parameters.setStorageDomainId(org.ovirt.engine.core.bll.ConvertVmCommand.getStorageDomainId()); parameters.setVirtioIsoPath(getVirtioIsoPath()); return parameters; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc convertVmFromXen(java.lang.String uri, java.util.Map<java.lang.String, java.lang.Object> vm, java.lang.String jobUUID) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.convertXenVm").withParameter("uri", uri).withParameter("vminfo", vm).withParameter("jobid", jobUUID).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VolumeInfoReturnForXmlRpc getVolumeInfo(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgUUID, java.lang.String volUUID) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Volume.getInfo").withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("imageID", imgUUID).withParameter("volumeID", volUUID).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VolumeInfoReturnForXmlRpc(response); }
public java.util.Map<java.lang.String, java.lang.Object> convertXenVm(java.lang.String url, java.util.Map vm, java.lang.String jobId);	public java.util.Map<java.lang.String, java.lang.Object> getVolumeInfo(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgUUID, java.lang.String volUUID);
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc convertVmFromXen(java.lang.String url, java.util.Map<java.lang.String, java.lang.Object> vm, java.lang.String jobUUID);	org.ovirt.engine.core.vdsbroker.vdsbroker.VolumeInfoReturnForXmlRpc getVolumeInfo(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgUUID, java.lang.String volUUID);
@org.ovirt.engine.ui.frontend.DefaultStringValue( ${action} ${type}. The operation is <START_MOD>allowed<END_MOD> for <START_MOD>regular<END_MOD> <START_MOD>snapshots<END_MOD> <START_MOD>only<END_MOD>. java.lang.String <START_MOD>ACTION_TYPE_FAILED_VM_SNAPSHOT_TYPE_NOT_REGULAR<END_MOD>();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The operation is only allowed for regular snapshots.") java.lang.String ACTION_TYPE_FAILED_VM_SNAPSHOT_TYPE_NOT_REGULAR();
public org.ovirt.engine.core.bll.ValidationResult canDisableVirtioScsi(java.util.Collection<? extends org.ovirt.engine.core.common.businessentities.storage.Disk> vmDisks) { if (vmDisks == null) { vmDisks = getDiskDao().getAllForVm(vms.iterator().next().getId(), true); } <START_MOD>return<END_MOD> <START_MOD>vmDisks<END_MOD>.<START_MOD>stream<END_MOD>()<START_MOD>.filter((<END_MOD> <START_MOD>d<END_MOD>) <START_MOD>-><END_MOD> (<START_MOD>d<END_MOD>.getDiskInterface()) == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI)<START_MOD>).findFirst().map((<END_MOD> <START_MOD>x<END_MOD>) <START_MOD>-><END_MOD> new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.CANNOT_DISABLE_VIRTIO_SCSI_PLUGGED_DISKS)<START_MOD>).orElse(ValidationResult.VALID)<END_MOD>; }	public org.ovirt.engine.core.bll.ValidationResult canDisableVirtioScsi(java.util.Collection<? extends org.ovirt.engine.core.common.businessentities.storage.Disk> vmDisks) { if (vmDisks == null) { vmDisks = getDiskDao().getAllForVm(vms.iterator().next().getId(), true); } boolean isVirtioScsiDiskExist = vmDisks.stream().anyMatch(( d) -> (d.getDiskInterface()) == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI)); if (isVirtioScsiDiskExist) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.CANNOT_DISABLE_VIRTIO_SCSI_PLUGGED_DISKS); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.VDS> getXenHosts() { return hosts; }	public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.VDS> getXenProxyHosts() { return xenProxyHosts; }
public org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmModel getSpecificImportModel() { selectedImportVmModel = null; switch (importSources.getSelectedItem()) { case EXPORT_DOMAIN : importFromExportDomainModel.setEntity(null); importFromExportDomainModel.init(getVmsToImport(), exportDomain.getId()); importFromExportDomainModel.setEntity(exportDomain.getId()); selectedImportVmModel = importFromExportDomainModel; break; case VMWARE : importFromExternalSourceModel.init(getVmsToImport(), getDataCenters().getSelectedItem().getId()); importFromExternalSourceModel.setUrl(getUrl()); importFromExternalSourceModel.setUsername(getUsername().getEntity()); importFromExternalSourceModel.setPassword(getPassword().getEntity()); importFromExternalSourceModel.setProxyHostId(((getProxyHosts().getSelectedItem()) != null ? getProxyHosts().getSelectedItem().getId() : null)); selectedImportVmModel = importFromExternalSourceModel; break; case OVA : importFromOvaModel.init(getVmsToImport(), getDataCenters().getSelectedItem().getId()); importFromOvaModel.setIsoName(getOvaPath().getEntity()); importFromOvaModel.setHostId(getHosts().getSelectedItem().getId()); selectedImportVmModel = importFromOvaModel; break; <START_MOD>case XEN : importFromExternalSourceModel.init(getVmsToImport(), getDataCenters().getSelectedItem().getId()); importFromExternalSourceModel.setUrl(getXenUri().getEntity()); importFromExternalSourceModel.setUsername(""); importFromExternalSourceModel.setPassword(""); importFromExternalSourceModel.setProxyHostId(((getProxyHosts().getSelectedItem()) != null ? getProxyHosts().getSelectedItem().getId() : null)); selectedImportVmModel = importFromExternalSourceModel; break; <END_MOD>default : } return selectedImportVmModel; }	public org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmModel getSpecificImportModel() { selectedImportVmModel = null; switch (importSources.getSelectedItem()) { case EXPORT_DOMAIN : importFromExportDomainModel.setEntity(null); importFromExportDomainModel.init(getVmsToImport(), exportDomain.getId()); importFromExportDomainModel.setEntity(exportDomain.getId()); selectedImportVmModel = importFromExportDomainModel; break; case VMWARE : importFromExternalSourceModel.init(getVmsToImport(), getDataCenters().getSelectedItem().getId()); importFromExternalSourceModel.setUrl(getUrl()); importFromExternalSourceModel.setUsername(getUsername().getEntity()); importFromExternalSourceModel.setPassword(getPassword().getEntity()); importFromExternalSourceModel.setProxyHostId(((getProxyHosts().getSelectedItem()) != null ? getProxyHosts().getSelectedItem().getId() : null)); selectedImportVmModel = importFromExternalSourceModel; break; case OVA : importFromOvaModel.init(getVmsToImport(), getDataCenters().getSelectedItem().getId()); importFromOvaModel.setIsoName(getOvaPath().getEntity()); importFromOvaModel.setHostId(getHosts().getSelectedItem().getId()); selectedImportVmModel = importFromOvaModel; break; case XEN : importFromExternalSourceModel.init(getVmsToImport(), getDataCenters().getSelectedItem().getId()); importFromExternalSourceModel.setUrl(getXenUri().getEntity()); importFromExternalSourceModel.setUsername(""); importFromExternalSourceModel.setPassword(""); importFromExternalSourceModel.setProxyHostId(((getXenProxyHosts().getSelectedItem()) != null ? getXenProxyHosts().getSelectedItem().getId() : null)); selectedImportVmModel = importFromExternalSourceModel; break; default : } return selectedImportVmModel; }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Uri") java.lang.String xenUri();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("URI") java.lang.String xenUri();
public void loadVmsFromXen() { clearProblem(); if (!(validateXenConfiguration())) { return; } loadVMsFromExternalProvider(getXenUri().getEntity(), "", ""); }	public void loadVmsFromXen() { clearProblem(); if (!(validateXenConfiguration())) { return; } org.ovirt.engine.core.compat.Guid proxyId = ((getXenProxyHosts().getSelectedItem()) != null) ? getXenProxyHosts().getSelectedItem().getId() : null; loadVMsFromExternalProvider(OriginType.XEN, getXenUri().getEntity(), "", "", proxyId); }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Host") java.lang.String xenHost();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("Group Name") java.lang.String groupNameUser();
public void setXenHosts(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.VDS> hosts) { this.xenHosts = hosts; }	public void setXenProxyHosts(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.VDS> proxyHosts) { this.xenProxyHosts = proxyHosts; }
@java.lang.Override public java.util.Set<java.lang.Class<?>> getClasses() { return classes; }	@java.lang.Override public java.util.Set<java.lang.Object> getSingletons() { return singletons; }
@java.lang.Override public boolean isWriteable(java.lang.Class<?> type, java.lang.reflect.Type genericType, java.lang.annotation.Annotation[] annotations, javax.ws.rs.core.MediaType mediaType) { return <START_MOD>(type.getPackage()) == (org.ovirt.engine.api.restapi.xml.JAXBProvider.typesPackage)<END_MOD>; }	@java.lang.Override public boolean isWriteable(java.lang.Class<?> type, java.lang.reflect.Type genericType, java.lang.annotation.Annotation[] annotations, javax.ws.rs.core.MediaType mediaType) { return org.ovirt.engine.api.restapi.xml.JAXBProvider.SUPPORTED_VERSION.equals(org.ovirt.engine.api.restapi.invocation.CurrentManager.get().getVersion()); }
@java.lang.Override public boolean isReadable(java.lang.Class<?> type, java.lang.reflect.Type genericType, java.lang.annotation.Annotation[] annotations, javax.ws.rs.core.MediaType mediaType) { return (type.getPackage()) == (org.ovirt.engine.api.v3.xml.V3XmlProvider.typesPackage); }	@java.lang.Override public boolean isReadable(java.lang.Class<?> type, java.lang.reflect.Type genericType, java.lang.annotation.Annotation[] annotations, javax.ws.rs.core.MediaType mediaType) { return org.ovirt.engine.api.v3.xml.V3XmlProvider.SUPPORTED_VERSION.equals(org.ovirt.engine.api.restapi.invocation.CurrentManager.get().getVersion()); }
@java.lang.Override public boolean isReadable(java.lang.Class<?> type, java.lang.reflect.Type genericType, java.lang.annotation.Annotation[] annotations, javax.ws.rs.core.MediaType mediaType) { return <START_MOD>(type.getPackage()) == (org.ovirt.engine.api.restapi.xml.JAXBProvider.typesPackage)<END_MOD>; }	@java.lang.Override public boolean isReadable(java.lang.Class<?> type, java.lang.reflect.Type genericType, java.lang.annotation.Annotation[] annotations, javax.ws.rs.core.MediaType mediaType) { return org.ovirt.engine.api.restapi.xml.JAXBProvider.SUPPORTED_VERSION.equals(org.ovirt.engine.api.restapi.invocation.CurrentManager.get().getVersion()); }
@java.lang.Override public boolean isWriteable(java.lang.Class<?> type, java.lang.reflect.Type genericType, java.lang.annotation.Annotation[] annotations, javax.ws.rs.core.MediaType mediaType) { return (type.getPackage()) == (org.ovirt.engine.api.v3.xml.V3XmlProvider.typesPackage); }	@java.lang.Override public boolean isWriteable(java.lang.Class<?> type, java.lang.reflect.Type genericType, java.lang.annotation.Annotation[] annotations, javax.ws.rs.core.MediaType mediaType) { return org.ovirt.engine.api.v3.xml.V3XmlProvider.SUPPORTED_VERSION.equals(org.ovirt.engine.api.restapi.invocation.CurrentManager.get().getVersion()); }
protected java.lang.String generateVmConfiguration(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices) { if (((vm.getInterfaces()) == null) || (vm.getInterfaces().isEmpty())) { vm.setInterfaces(getVmNetworkInterfaceDao().getAllForVm(vm.getId())); } if (org.apache.commons.lang.StringUtils.isEmpty(vm.getVmtName())) { org.ovirt.engine.core.common.businessentities.VmTemplate t = getVmTemplateDao().get(vm.getVmtGuid()); vm.setVmtName(t.getName()); } if (vmDevices == null) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.setVmDevices(vm.getStaticData()); } else { vm.getStaticData().setManagedDeviceMap(vmDevices); } if (disks == null) { disks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(getDiskDao().getAllForVm(vm.getId()), false, true, true); disks.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getCinderLeafImages(getDiskDao().getAllForVm(vm.getId()), false)); } for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : disks) { image.setStorageIds(null); } <START_MOD>org.ovirt.engine.core.compat.Version clusterCompatibilityVersion = org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion(vm); if ((vm.getCustomCompatibilityVersion()) == null) { vm.setCustomCompatibilityVersion(clusterCompatibilityVersion); } <END_MOD>return new org.ovirt.engine.core.utils.ovf.OvfManager().exportVm(vm, new java.util.ArrayList(disks), <START_MOD>clusterCompatibilityVersion); }<END_MOD>	protected java.lang.String generateVmConfiguration(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices) { if (((vm.getInterfaces()) == null) || (vm.getInterfaces().isEmpty())) { vm.setInterfaces(getVmNetworkInterfaceDao().getAllForVm(vm.getId())); } if (org.apache.commons.lang.StringUtils.isEmpty(vm.getVmtName())) { org.ovirt.engine.core.common.businessentities.VmTemplate t = getVmTemplateDao().get(vm.getVmtGuid()); vm.setVmtName(t.getName()); } if (vmDevices == null) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.setVmDevices(vm.getStaticData()); } else { vm.getStaticData().setManagedDeviceMap(vmDevices); } if (disks == null) { disks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(getDiskDao().getAllForVm(vm.getId()), false, true, true); disks.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getCinderLeafImages(getDiskDao().getAllForVm(vm.getId()), false)); } for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : disks) { image.setStorageIds(null); } return new org.ovirt.engine.core.utils.ovf.OvfManager().exportVm(vm, new java.util.ArrayList(disks), org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion(vm)); }
@org.ovirt.engine.ui.common.DefaultStringValue("The selected snapshot's memory can't be properly restored since it was created in previous cluster version. Please confirm the memory shall be restored anyway.") java.lang.String snapshotContainsMemoryIncompatibleCluster();	@org.ovirt.engine.ui.common.DefaultStringValue("The selected snapshot's memory can't be properly restored since it was created in different " + "cluster version. Please confirm the memory shall be restored anyway.") java.lang.String snapshotContainsMemoryIncompatibleCluster();
private boolean isVMWithMemoryCompatible(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.compat.Version recentClusterVersion = vm.getClusterCompatibilityVersion(); return (((vm.getCustomCompatibilityVersion()) != null) && ((vm.getCustomCompatibilityVersion().getMajor()) == (recentClusterVersion.getMajor()))) && ((vm.getCustomCompatibilityVersion().getMinor()) == (recentClusterVersion.getMinor())); }	private boolean isVMWithMemoryCompatible(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.compat.Version recentClusterVersion = vm.getClusterCompatibilityVersion(); org.ovirt.engine.core.compat.Version originalClusterVersion = vm.getClusterCompatibilityVersionOrigin(); if ((vm.getCustomCompatibilityVersion()) != null) { return true; } return ((originalClusterVersion != null) && ((recentClusterVersion.getMajor()) == (originalClusterVersion.getMajor()))) && ((recentClusterVersion.getMinor()) == (originalClusterVersion.getMinor())); }
@org.junit.Test public void shouldNotElectUnknownHostedEngineDomainAsMaster() { final org.ovirt.engine.core.common.businessentities.StorageDomain heDomain = createDataStorageDomain(StorageDomainStatus.Unknown, org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.HE_STORAGE_DOMAIN_NAME); doReturn(storageDomainDao).when(cmd).getStorageDomainDao(); when(storageDomainDao.getAllForStoragePool(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Arrays.asList(heDomain)); cmd.setStoragePool(new org.ovirt.engine.core.common.businessentities.StoragePool()); assertEquals(null, cmd.electNewMaster()); }	@org.junit.Test public void shouldNotElectUnknownHostedEngineDomain() { prepareStorageDomainForElection(StorageDomainStatus.Unknown, org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.HE_STORAGE_DOMAIN_NAME); assertEquals(null, cmd.electNewMaster()); }
@org.junit.Test public void shouldNotElectInactiveHostedEngineDomainAsMaster() { final org.ovirt.engine.core.common.businessentities.StorageDomain heDomain = createDataStorageDomain(StorageDomainStatus.Inactive, org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.HE_STORAGE_DOMAIN_NAME); doReturn(storageDomainDao).when(cmd).getStorageDomainDao(); when(storageDomainDao.getAllForStoragePool(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Arrays.asList(heDomain)); cmd.setStoragePool(new org.ovirt.engine.core.common.businessentities.StoragePool()); assertEquals(null, cmd.electNewMaster(false, true, false)); }	@org.junit.Test public void shouldNotElectInactiveHostedEngineDomain() { prepareStorageDomainForElection(StorageDomainStatus.Inactive, org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.HE_STORAGE_DOMAIN_NAME); assertEquals(null, cmd.electNewMaster(false, true, false)); }
@org.junit.Test public void shouldElectDataDomainAsMaster() { final org.ovirt.engine.core.common.businessentities.StorageDomain dataDomain = createDataStorageDomain(StorageDomainStatus.Active, "not hosted engine domain name"); doReturn(storageDomainDao).when(cmd).getStorageDomainDao(); when(storageDomainDao.getAllForStoragePool(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Arrays.asList(dataDomain)); cmd.setStoragePool(new org.ovirt.engine.core.common.businessentities.StoragePool()); assertEquals(dataDomain, cmd.electNewMaster()); }	@org.junit.Test public void shouldElectActiveDataDomain() { final org.ovirt.engine.core.common.businessentities.StorageDomain domain = prepareStorageDomainForElection(StorageDomainStatus.Active, "not he domain name"); assertEquals(domain, cmd.electNewMaster()); }
@org.junit.Test public void shouldNotElectActiveHostedEngineDomainAsMaster() { final org.ovirt.engine.core.common.businessentities.StorageDomain heDomain = createDataStorageDomain(StorageDomainStatus.Active, org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.HE_STORAGE_DOMAIN_NAME); doReturn(storageDomainDao).when(cmd).getStorageDomainDao(); when(storageDomainDao.getAllForStoragePool(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Arrays.asList(heDomain)); cmd.setStoragePool(new org.ovirt.engine.core.common.businessentities.StoragePool()); assertEquals(null, cmd.electNewMaster()); }	@org.junit.Test public void shouldNotElectActiveHostedEngineDomain() { prepareStorageDomainForElection(StorageDomainStatus.Active, org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.HE_STORAGE_DOMAIN_NAME); assertEquals(null, cmd.electNewMaster()); }
@java.lang.Override protected boolean checkPermissions(java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permSubjects) { for (org.ovirt.engine.core.bll.utils.PermissionSubject permissionSubject : permSubjects) { if ((((((!(org.ovirt.engine.core.bll.SetVmTicketCommand.getCurrentUser().isAdmin())) && ((org.ovirt.engine.core.common.businessentities.ActionGroup.CONNECT_TO_VM) == (permissionSubject.getActionGroup()))) && ((org.ovirt.engine.core.common.VdcObjectType.VM) == (permissionSubject.getObjectType()))) && (org.ovirt.engine.core.bll.SetVmTicketCommand.getVmId().equals(permissionSubject.getObjectId()))) && ((org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getConsoleUserId()) != null)) && (org.ovirt.engine.core.bll.SetVmTicketCommand.getDbUserDao().get(org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getConsoleUserId()).isAdmin())) { org.ovirt.engine.core.bll.SetVmTicketCommand.log.info("Non-admin user (id={}) can't steal console from admin user (id={}), vm id={}", org.ovirt.engine.core.bll.SetVmTicketCommand.getUserId(), org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getConsoleUserId(), org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getId()); return failValidation(EngineMessage.ACTION_TYPE_FAILED_CONSOLE_OF_VM_CURRENTLY_USED_BY_ADMIN_USER, java.lang.String.format("$vmId %s", org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getId())); } } return super.checkPermissions(permSubjects); }	@java.lang.Override protected boolean checkPermissions(java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permSubjects) { if (!(org.ovirt.engine.core.bll.SetVmTicketCommand.getCurrentUser().isAdmin())) { for (org.ovirt.engine.core.bll.utils.PermissionSubject permissionSubject : permSubjects) { if (((((((org.ovirt.engine.core.common.businessentities.ActionGroup.RECONNECT_TO_VM) == (permissionSubject.getActionGroup())) && ((org.ovirt.engine.core.common.VdcObjectType.VM) == (permissionSubject.getObjectType()))) && (java.util.Objects.equals(org.ovirt.engine.core.bll.SetVmTicketCommand.getVmId(), permissionSubject.getObjectId()))) && ((org.ovirt.engine.core.bll.SetVmTicketCommand.getVm()) != null)) && ((org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getConsoleUserId()) != null)) && (org.ovirt.engine.core.bll.SetVmTicketCommand.getDbUserDao().get(org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getConsoleUserId()).isAdmin())) { org.ovirt.engine.core.bll.SetVmTicketCommand.log.info("Non-admin user (id={}) can't steal console from admin user (id={}), vm id={}", org.ovirt.engine.core.bll.SetVmTicketCommand.getUserId(), org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getConsoleUserId(), org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getId()); return failValidation(EngineMessage.SETTING_VM_TICKET_FAILED_CONSOLE_OF_VM_CURRENTLY_USED_BY_ADMIN_USER); } } } return super.checkPermissions(permSubjects); }
private java.lang.String generateTicket() { org.ovirt.engine.core.common.action.SetVmTicketParameters parameters = new org.ovirt.engine.core.common.action.SetVmTicketParameters(org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getParameters().getOptions().getVmId(), null, org.ovirt.engine.core.common.console.ConsoleOptions.TICKET_VALIDITY_SECONDS, org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getParameters().getOptions().getGraphicsType()); parameters.setSessionId(org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getEngineContext().getSessionId()); parameters.setParametersCurrentUser(org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getUser()); org.ovirt.engine.core.common.action.VdcReturnValueBase result = org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getBackend().<START_MOD>runAction<END_MOD>(VdcActionType.SetVmTicket, parameters); if (result.getSucceeded()) { return result.getActionReturnValue(); } <START_MOD>throw new org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.TicketGenerationException(result)<END_MOD>; }	private java.lang.String generateTicket() { org.ovirt.engine.core.common.action.SetVmTicketParameters parameters = new org.ovirt.engine.core.common.action.SetVmTicketParameters(org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getParameters().getOptions().getVmId(), null, org.ovirt.engine.core.common.console.ConsoleOptions.TICKET_VALIDITY_SECONDS, org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getParameters().getOptions().getGraphicsType()); parameters.setSessionId(org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getEngineContext().getSessionId()); parameters.setParametersCurrentUser(org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getUser()); org.ovirt.engine.core.common.action.VdcReturnValueBase result = org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getBackend().runAction(VdcActionType.SetVmTicket, parameters); if (!(result.getSucceeded())) { throw new org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.TicketGenerationException(result); } return result.getActionReturnValue(); }
private void handleTicketGenerationError(org.ovirt.engine.core.common.action.VdcReturnValueBase commandResult) { org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getQueryReturnValue().setSucceeded(false); if (commandResult.getValidationMessages().contains(EngineMessage.ACTION_TYPE_FAILED_CONSOLE_OF_VM_CURRENTLY_USED_BY_ADMIN_USER.name())) { org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getQueryReturnValue().setExceptionString(EngineMessage.ACTION_TYPE_FAILED_CONSOLE_OF_VM_CURRENTLY_USED_BY_ADMIN_USER.name()); return; } org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getQueryReturnValue().setExceptionString(EngineMessage.GENERAL_FAILURE.name()); }	private void handleTicketGenerationError(org.ovirt.engine.core.common.action.VdcReturnValueBase commandResult) { org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getQueryReturnValue().setSucceeded(false); if (commandResult.getValidationMessages().contains(EngineMessage.SETTING_VM_TICKET_FAILED_CONSOLE_OF_VM_CURRENTLY_USED_BY_ADMIN_USER.name())) { org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getQueryReturnValue().setExceptionString(EngineMessage.SETTING_VM_TICKET_FAILED_CONSOLE_OF_VM_CURRENTLY_USED_BY_ADMIN_USER.name()); return; } org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getQueryReturnValue().setExceptionString(EngineMessage.GENERAL_FAILURE.name()); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Setting VM ticket failed. Console of vm is currently being used by admin user.") java.lang.String ACTION_TYPE_FAILED_CONSOLE_OF_VM_CURRENTLY_USED_BY_ADMIN_USER();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Setting VM ticket failed. Console of VM is currently being used by admin user.") java.lang.String SETTING_VM_TICKET_FAILED_CONSOLE_OF_VM_CURRENTLY_USED_BY_ADMIN_USER();
@org.junit.Test public void shouldNotCreateInvertedRange() { java.util.List<org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.PinnedCpu> pinnedCpus = org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.parseCpuPinning("0#3-1"); assertThat(pinnedCpus.get(0).getpCpus()).isEmpty(); }	@org.junit.Test public void shouldNotCreateInvertedRange() { java.util.List<org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.PinnedCpu> pinnedCpus = org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.parseCpuPinning("0#3-1"); assertThat(pinnedCpus.get(0).getpCpus(), is(empty())); }
private void assertFailsWith(org.ovirt.engine.core.bll.ValidationResult validationResult, org.ovirt.engine.core.common.errors.EngineMessage engineMessage) { assertThat(validationResult.isValid(), is(true)); assertThat(validationResult.getMessage(), is(engineMessage)); }	private void assertFailsWith(org.ovirt.engine.core.bll.ValidationResult validationResult, org.ovirt.engine.core.common.errors.EngineMessage engineMessage) { assertThat(validationResult.isValid(), is(false)); assertThat(validationResult.getMessage(), is(engineMessage)); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(final java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, final org.ovirt.engine.core.common.businessentities.VM vm, final java.util.Map<java.lang.String, java.lang.String> parameters, final org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { final java.lang.String cpuPinning = vm.getCpuPinning(); if (org.apache.commons.lang.StringUtils.isEmpty(cpuPinning)) { return hosts; } final java.util.Set<java.lang.Integer> pinnedCpus = org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.getAllPinnedPCpus(cpuPinning); final java.util.List<org.ovirt.engine.core.common.businessentities.VDS> candidates = new java.util.ArrayList<>(); for (final org.ovirt.engine.core.common.businessentities.VDS host : hosts) { final java.util.Collection<java.lang.Integer> onlineHostCpus = org.ovirt.engine.core.bll.scheduling.SlaValidator.getOnlineCpus(host); final java.util.Collection difference = org.apache.commons.collections.CollectionUtils.subtract(pinnedCpus, onlineHostCpus); if (difference.isEmpty()) { candidates.add(host); } else { messages.addMessage(host.getId(), EngineMessage.VAR__DETAIL__VM_PINNING_PCPU_DOES_NOT_EXIST.name()); messages.addMessage(host.getId(), java.lang.String.format("$missingCores %1$s", org.apache.commons.lang.StringUtils.join(difference, ", "))); org.ovirt.engine.core.bll.scheduling.policyunits.CpuPinningPolicyUnit.log.debug("Host {} does not satisfy the cpu pinning constraints because of missing or offline cpus {}.", host.getId(), org.apache.commons.lang.StringUtils.join(difference, ", ")); } } return candidates; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(final java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, final org.ovirt.engine.core.common.businessentities.VM vm, final java.util.Map<java.lang.String, java.lang.String> parameters, final org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { final java.lang.String cpuPinning = vm.getCpuPinning(); if (org.apache.commons.lang.StringUtils.isEmpty(cpuPinning)) { return hosts; } final java.util.Set<java.lang.Integer> pinnedCpus = org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.getAllPinnedPCpus(cpuPinning); final java.util.List<org.ovirt.engine.core.common.businessentities.VDS> candidates = new java.util.ArrayList<>(); for (final org.ovirt.engine.core.common.businessentities.VDS host : hosts) { final java.util.Collection<java.lang.Integer> onlineHostCpus = org.ovirt.engine.core.bll.scheduling.SlaValidator.getOnlineCpus(host); final java.util.Collection difference = org.apache.commons.collections.CollectionUtils.subtract(pinnedCpus, onlineHostCpus); if (difference.isEmpty()) { candidates.add(host); } else { messages.addMessage(host.getId(), EngineMessage.VAR__DETAIL__VM_PINNING_PCPU_DOES_NOT_EXIST.name()); messages.addMessages(host.getId(), org.ovirt.engine.core.utils.ReplacementUtils.replaceWith("missingCores", difference, ", ", 10)); org.ovirt.engine.core.bll.scheduling.policyunits.CpuPinningPolicyUnit.log.debug("Host {} does not satisfy the cpu pinning constraints because of missing or offline cpus {}.", host.getId(), org.apache.commons.lang.StringUtils.join(difference, ", ")); } } return candidates; }
@org.junit.Test public void shouldGetAllPinnedHostCpus() { java.util.Collection<java.lang.Integer> pinnedHostCpus = org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.getAllPinnedPCpus("0#3_2#1-2,12_5#3,4,10,^10_6#6-9,^8_9#13-15"); assertThat(pinnedHostCpus).containsOnly(1, 2, 3, 4, 6, 7, 9, 12, 13, 14, 15); }	@org.junit.Test public void shouldGetAllPinnedHostCpus() { java.util.Collection<java.lang.Integer> pinnedHostCpus = org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.getAllPinnedPCpus("0#3_2#1-2,12_5#3,4,10,^10_6#6-9,^8_9#13-15"); assertThat(pinnedHostCpus, hasItems(1, 2, 3, 4, 6, 7, 9, 12, 13, 14, 15)); assertThat(pinnedHostCpus, hasSize(11)); }
@org.junit.Test public void shouldCreateMultiplePinnedCpus() { java.util.List<org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.PinnedCpu> pinnedCpus = org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.parseCpuPinning("0#2_2#1-2_5#3"); assertThat(pinnedCpus.get(0).getpCpus()).containsExactly(2); assertThat(pinnedCpus.get(0).getvCpu()).isEqualTo(0); assertThat(pinnedCpus.get(1).getpCpus()).containsExactly(1, 2); assertThat(pinnedCpus.get(1).getvCpu()).isEqualTo(2); assertThat(pinnedCpus.get(2).getpCpus()).containsExactly(3); assertThat(pinnedCpus.get(2).getvCpu()).isEqualTo(5); }	@org.junit.Test public void shouldCreateMultiplePinnedCpus() { java.util.List<org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.PinnedCpu> pinnedCpus = org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.parseCpuPinning("0#2_2#1-2_5#3"); assertThat(pinnedCpus.get(0).getpCpus(), hasItem(2)); assertThat(pinnedCpus.get(0).getpCpus(), hasSize(1)); assertThat(pinnedCpus.get(0).getvCpu(), is(0)); assertThat(pinnedCpus.get(1).getpCpus(), hasItems(1, 2)); assertThat(pinnedCpus.get(1).getpCpus(), hasSize(2)); assertThat(pinnedCpus.get(1).getvCpu(), is(2)); assertThat(pinnedCpus.get(2).getpCpus(), hasSize(1)); assertThat(pinnedCpus.get(2).getvCpu(), is(5)); }
@org.junit.Test public void shouldCreateIndividalCpus() { java.util.List<org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.PinnedCpu> pinnedCpus = org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.parseCpuPinning("0#2,4,7,^4"); assertThat(pinnedCpus.get(0).getpCpus()).containsExactly(2, 7); }	@org.junit.Test public void shouldCreateIndividalCpus() { java.util.List<org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.PinnedCpu> pinnedCpus = org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.parseCpuPinning("0#2,4,7,^4"); assertThat(pinnedCpus.get(0).getpCpus(), hasItems(2, 7)); assertThat(pinnedCpus.get(0).getpCpus(), hasSize(2)); }
@org.junit.Test public void shouldFilterExcludes() { java.util.List<org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.PinnedCpu> pinnedCpus = org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.parseCpuPinning("0#1-7,^3,^5"); assertThat(pinnedCpus.get(0).getpCpus()).containsExactly(1, 2, 4, 6, 7); }	@org.junit.Test public void shouldFilterExcludes() { java.util.List<org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.PinnedCpu> pinnedCpus = org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.parseCpuPinning("0#1-7,^3,^5"); assertThat(pinnedCpus.get(0).getpCpus(), hasItems(1, 2, 4, 6, 7)); assertThat(pinnedCpus.get(0).getpCpus(), hasSize(5)); }
@org.junit.Test public void shouldNotCreateSingleElementRange() { java.util.List<org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.PinnedCpu> pinnedCpus = org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.parseCpuPinning("0#2-2"); assertThat(pinnedCpus.get(0).getpCpus()).isEmpty(); }	@org.junit.Test public void shouldNotCreateSingleElementRange() { java.util.List<org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.PinnedCpu> pinnedCpus = org.ovirt.engine.core.bll.scheduling.utils.CpuPinningHelper.parseCpuPinning("0#2-2"); assertThat(pinnedCpus.get(0).getpCpus(), is(empty())); }
@org.ovirt.engine.ui.common.DefaultMessage( <START_MOD>that<END_MOD> <START_MOD>require<END_MOD> <START_MOD>Virtual<END_MOD> <START_MOD>Machine<END_MOD> <START_MOD>reboot:<END_MOD> java.lang.String nextRunConfigurationExists();	@org.ovirt.engine.ui.common.DefaultMessage("Changes that require Virtual Machine restart:") java.lang.String nextRunConfigurationExists();
@org.ovirt.engine.ui.common.DefaultMessage("Following changes may put VM in risk:") java.lang.String warningSectionTitle();	@org.ovirt.engine.ui.common.DefaultMessage("Following changes may put the VM in risk:") java.lang.String warningSectionTitle();
@java.lang.Override protected boolean checkPermissions(java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permSubjects) { if (!(org.ovirt.engine.core.bll.SetVmTicketCommand.getCurrentUser().isAdmin())) { for (org.ovirt.engine.core.bll.utils.PermissionSubject permissionSubject : permSubjects) { if (((((((org.ovirt.engine.core.common.businessentities.ActionGroup.RECONNECT_TO_VM) == (permissionSubject.getActionGroup())) && ((org.ovirt.engine.core.common.VdcObjectType.VM) == (permissionSubject.getObjectType()))) && (java.util.Objects.equals(org.ovirt.engine.core.bll.SetVmTicketCommand.getVmId(), permissionSubject.getObjectId()))) && ((org.ovirt.engine.core.bll.SetVmTicketCommand.getVm()) != null)) && ((org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getConsoleUserId()) != null)) && (org.ovirt.engine.core.bll.SetVmTicketCommand.getDbUserDao().get(org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getConsoleUserId()).isAdmin())) { org.ovirt.engine.core.bll.SetVmTicketCommand.log.info("Non-admin user (id={}) can't steal console from admin user (id={}), vm id={}", org.ovirt.engine.core.bll.SetVmTicketCommand.getUserId(), org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getConsoleUserId(), org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getId()); return failValidation(EngineMessage.SETTING_VM_TICKET_FAILED_CONSOLE_OF_VM_CURRENTLY_USED_BY_ADMIN_USER); } } } return super.checkPermissions(permSubjects); }	@java.lang.Override protected boolean checkPermissions(java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permSubjects) { if (!(org.ovirt.engine.core.bll.SetVmTicketCommand.getCurrentUser().isAdmin())) { for (org.ovirt.engine.core.bll.utils.PermissionSubject permissionSubject : permSubjects) { if (((((((org.ovirt.engine.core.common.businessentities.ActionGroup.RECONNECT_TO_VM) == (permissionSubject.getActionGroup())) && ((org.ovirt.engine.core.common.VdcObjectType.VM) == (permissionSubject.getObjectType()))) && (java.util.Objects.equals(org.ovirt.engine.core.bll.SetVmTicketCommand.getVmId(), permissionSubject.getObjectId()))) && ((org.ovirt.engine.core.bll.SetVmTicketCommand.getVm()) != null)) && ((org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getConsoleUserId()) != null)) && (org.ovirt.engine.core.bll.SetVmTicketCommand.getDbUserDao().get(org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getConsoleUserId()).isAdmin())) { org.ovirt.engine.core.bll.SetVmTicketCommand.log.info("Non-admin user (id={}) can't steal console from admin user (id={}), vm id={}", org.ovirt.engine.core.bll.SetVmTicketCommand.getUserId(), org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getConsoleUserId(), org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getId()); return failCanDoAction(EngineMessage.SETTING_VM_TICKET_FAILED_CONSOLE_OF_VM_CURRENTLY_USED_BY_ADMIN_USER); } } } return super.checkPermissions(permSubjects); }
private void handleTicketGenerationError(org.ovirt.engine.core.common.action.VdcReturnValueBase commandResult) { org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getQueryReturnValue().setSucceeded(false); if (commandResult.getValidationMessages().contains(EngineMessage.SETTING_VM_TICKET_FAILED_CONSOLE_OF_VM_CURRENTLY_USED_BY_ADMIN_USER.name())) { org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getQueryReturnValue().setExceptionString(EngineMessage.SETTING_VM_TICKET_FAILED_CONSOLE_OF_VM_CURRENTLY_USED_BY_ADMIN_USER.name()); return; } org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getQueryReturnValue().setExceptionString(EngineMessage.GENERAL_FAILURE.name()); }	private void handleTicketGenerationError(org.ovirt.engine.core.common.action.VdcReturnValueBase commandResult) { org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getQueryReturnValue().setSucceeded(false); if (commandResult.getCanDoActionMessages().contains(EngineMessage.SETTING_VM_TICKET_FAILED_CONSOLE_OF_VM_CURRENTLY_USED_BY_ADMIN_USER.name())) { org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getQueryReturnValue().setExceptionString(EngineMessage.SETTING_VM_TICKET_FAILED_CONSOLE_OF_VM_CURRENTLY_USED_BY_ADMIN_USER.name()); return; } org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getQueryReturnValue().setExceptionString(EngineMessage.GENERAL_FAILURE.name()); }
protected java.util.List<java.lang.String> listFiles() { org.ovirt.engine.core.common.queries.GetImagesListParameters queryParams = new org.ovirt.engine.core.common.queries.GetImagesListParameters(asGuid(storageDomainId), org.ovirt.engine.core.common.businessentities.storage.ImageFileType.All); queryParams.setForceRefresh(true); java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> files = getBackendCollection(org.ovirt.engine.core.common.businessentities.storage.RepoImage.class, VdcQueryType.GetImagesList, queryParams); <START_MOD>return files.stream().map(RepoImage::getRepoImageId).collect(<END_MOD>java.util.<START_MOD>stream<END_MOD>.<START_MOD>Collectors<END_MOD>.<START_MOD>toCollection(<END_MOD>java.util.LinkedList<START_MOD>::new<END_MOD>)); }	protected java.util.List<java.lang.String> listFiles() { org.ovirt.engine.core.common.queries.GetImagesListParameters queryParams = new org.ovirt.engine.core.common.queries.GetImagesListParameters(asGuid(storageDomainId), org.ovirt.engine.core.common.businessentities.storage.ImageFileType.All); queryParams.setForceRefresh(true); java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> files = getBackendCollection(org.ovirt.engine.core.common.businessentities.storage.RepoImage.class, VdcQueryType.GetImagesList, queryParams); return files.stream().map(RepoImage::getRepoImageId).collect(java.util.stream.Collectors.toList()); }
private boolean isUnmanagedVm() { externalVm = ((dbVm) == null) && ((<START_MOD>vmStaticDao<END_MOD>.get(vdsmVm.getVmDynamic().getId())) == null); hostedEngineUnmanaged = ((dbVm) != null) && ((dbVm.getOrigin()) == (org.ovirt.engine.core.common.businessentities.OriginType.HOSTED_ENGINE)); return (externalVm) || (hostedEngineUnmanaged); }	private boolean isExternalOrUnmanagedHostedEngineVm() { boolean externalVm = ((dbVm) == null) && ((vmStaticDao.get(vdsmVm.getVmDynamic().getId())) == null); boolean hostedEngineUnmanaged = ((dbVm) != null) && ((dbVm.getOrigin()) == (org.ovirt.engine.core.common.businessentities.OriginType.HOSTED_ENGINE)); return externalVm || hostedEngineUnmanaged; }
public static org.ovirt.engine.api.model.Statistic setDatum(org.ovirt.engine.api.model.Statistic statistic, java.lang.Double datum<START_MOD>) { if (datum != null<END_MOD>) { return org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(statistic, (datum == null ? null : new java.math.BigDecimal(datum, new java.math.MathContext(2)))); }<START_MOD> return statistic; }<END_MOD>	public static org.ovirt.engine.api.model.Statistic setDatum(org.ovirt.engine.api.model.Statistic statistic, java.lang.Double datum) { if (datum != null) { return org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(statistic, new java.math.BigDecimal(datum, new java.math.MathContext(2))); } return statistic; }
public static org.ovirt.engine.api.model.Statistic setDatum(org.ovirt.engine.api.model.Statistic statistic, java.lang.Long datum<START_MOD>) { if (datum != null<END_MOD>) { return org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(statistic, (datum == null ? null : new java.math.BigDecimal(datum))); }<START_MOD> return statistic; }<END_MOD>	public static org.ovirt.engine.api.model.Statistic setDatum(org.ovirt.engine.api.model.Statistic statistic, java.lang.Long datum) { if (datum != null) { return org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(statistic, new java.math.BigDecimal(datum)); } return statistic; }
public org.ovirt.engine.core.bll.ValidationResult interfaceExists(<START_MOD>java.lang.String nicId<END_MOD>) { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.<START_MOD>HOST_NETWORK_INTERFACE_HAVING_NAME_DOES_NOT_EXIST, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.HostInterfaceValidator.VAR_NIC_NAME, nicId)<END_MOD>).when(((iface) == null)); }	public org.ovirt.engine.core.bll.ValidationResult interfaceExists(java.lang.String nicName) { org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_HAVING_NAME_DOES_NOT_EXIST; java.lang.String nicNameReplacement = org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(engineMessage, nicName); return org.ovirt.engine.core.bll.ValidationResult.failWith(engineMessage, nicNameReplacement).when(((iface) == null)); }
public org.ovirt.engine.core.bll.ValidationResult <START_MOD>nicNameIsSet<END_MOD>() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST).when(((attachment.getNicName()) == null)); }	public org.ovirt.engine.core.bll.ValidationResult nicNameIsSet() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.HOST_NETWORK_INTERFACE_DOES_NOT_HAVE_NAME_SET).when((((attachment.getNicName()) == null) && ((attachment.getNicId()) == null))); }
private org.ovirt.engine.core.bll.ValidationResult nicActuallyExistsOrReferencesNewBond(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { <START_MOD>java.lang.String nicName = attachment.getNicName(); org.ovirt.engine.core.compat.Guid nicId = attachment.getNicId(); <END_MOD>boolean nicActuallyExistsOrReferencesNewBond = isNicActuallyExistsOrReferencesNewBond(<START_MOD>nicName<END_MOD>, <START_MOD>nicId<END_MOD>); return org.ovirt.engine.core.bll.ValidationResult.<START_MOD>failWith(EngineMessage.HOST_NETWORK_INTERFACE_HAVING_ID_AND_NAME_DOES_NOT_EXIST,<END_MOD> <START_MOD>org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(<END_MOD>org.ovirt.engine.core.bll.<START_MOD>network.host.HostSetupNetworksValidator.VAR_NIC_ID, nicId), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString<END_MOD>(org.ovirt.engine.core.<START_MOD>bll<END_MOD>.<START_MOD>network<END_MOD>.<START_MOD>host<END_MOD>.<START_MOD>HostSetupNetworksValidator.VAR_NIC_NAME, nicName)).when((!nicActuallyExistsOrReferencesNewBond)<END_MOD>); }	private org.ovirt.engine.core.bll.ValidationResult nicActuallyExistsOrReferencesNewBond(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { java.lang.String nicName = attachment.getNicName(); org.ovirt.engine.core.compat.Guid nicId = attachment.getNicId(); boolean nicActuallyExistsOrReferencesNewBond = isNicActuallyExistsOrReferencesNewBond(nicName, nicId); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.HOST_NETWORK_INTERFACE_HAVING_ID_OR_NAME_DOES_NOT_EXIST, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.VAR_NIC_ID, nicId), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.VAR_NIC_NAME, nicName)).when((!nicActuallyExistsOrReferencesNewBond)); }
@org.junit.Test public void testNicExistsWhenNicNameIsNull() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); attachment.setNicName(null); assertThat(createNetworkAttachmentValidator(attachment).<START_MOD>nicNameIsSet<END_MOD>(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST)); }	@org.junit.Test public void testNicExistsWhenNicNameIsNull() { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); attachment.setNicName(null); assertThat(createNetworkAttachmentValidator(attachment).nicNameIsSet(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.HOST_NETWORK_INTERFACE_DOES_NOT_HAVE_NAME_SET)); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The host network interface (name ${nicName}) does not exist.") java.lang.String HOST_NETWORK_INTERFACE_HAVING_NAME_DOES_NOT_EXIST();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The host network interface (name ${HOST_NETWORK_INTERFACE_HAVING_NAME_DOES_NOT_EXIST_ENTITY}) does not exist.") java.lang.String HOST_NETWORK_INTERFACE_HAVING_NAME_DOES_NOT_EXIST();
@org.junit.Test public void testNicExistsWhenNicNameIsNotNull() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); attachment.setNicId(null); attachment.setNicName("whatever"); assertThat(createNetworkAttachmentValidator(attachment).<START_MOD>nicNameIsSet<END_MOD>(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }	@org.junit.Test public void testNicExistsWhenNicNameIsNotNull() { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); attachment.setNicId(null); attachment.setNicName("whatever"); assertThat(createNetworkAttachmentValidator(attachment).nicNameIsSet(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The host network interface (id ${nicId}, name ${nicName}) does not exist.") java.lang.String HOST_NETWORK_INTERFACE_HAVING_ID_AND_NAME_DOES_NOT_EXIST();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The host network interface (id ${nicId}, name ${nicName}) does not exist.") java.lang.String HOST_NETWORK_INTERFACE_HAVING_ID_OR_NAME_DOES_NOT_EXIST();
@org.junit.Test public void testNetworkAttachedToClusterWhenNotAttached() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network(); network.setId(org.ovirt.engine.core.compat.Guid.newGuid()); <START_MOD>network.setName("networkName"); <END_MOD>org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); attachment.setNetworkId(network.getId()); <START_MOD>attachment.setNetworkName(network.getName()); <END_MOD>org.ovirt.engine.core.common.businessentities.network.NetworkClusterId networkClusterId = new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(host.getVdsGroupId(), network.getId()); when(networkClusterDaoMock.get(eq(networkClusterId))).thenReturn(null); when(networkDaoMock.get(eq(network.getId()))).thenReturn(network); <START_MOD>org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_OF_GIVEN_NAME_NOT_EXISTS_IN_CLUSTER; <END_MOD>assertThat(createNetworkAttachmentValidator(attachment).networkAttachedToCluster(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(engineMessage, network.getName())<END_MOD>)); }	@org.junit.Test public void testNetworkAttachedToClusterWhenNotAttached() { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network(); network.setId(org.ovirt.engine.core.compat.Guid.newGuid()); network.setName("networkName"); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); attachment.setNetworkId(network.getId()); attachment.setNetworkName(network.getName()); org.ovirt.engine.core.common.businessentities.network.NetworkClusterId networkClusterId = new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(host.getClusterId(), network.getId()); when(networkClusterDaoMock.get(eq(networkClusterId))).thenReturn(null); when(networkDaoMock.get(eq(network.getId()))).thenReturn(network); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_OF_GIVEN_NAME_NOT_EXISTS_IN_CLUSTER; assertThat(createNetworkAttachmentValidator(attachment).networkAttachedToCluster(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(engineMessage, network.getName()))); }
@org.junit.Test public void testInterfaceExistsWhenInterfaceIsNull() throws java.lang.Exception { <START_MOD>java.lang.String failingSlaveName = "slaveName"; <END_MOD>assertThat(new org.ovirt.engine.core.bll.validator.HostInterfaceValidator(null).interfaceExists(<START_MOD>failingSlaveName<END_MOD>), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.<START_MOD>HOST_NETWORK_INTERFACE_HAVING_NAME_DOES_NOT_EXIST, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(HostInterfaceValidator.VAR_NIC_NAME, failingSlaveName)<END_MOD>)); }	@org.junit.Test public void testInterfaceExistsWhenInterfaceIsNull() throws java.lang.Exception { java.lang.String failingSlaveName = "slaveName"; org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_HAVING_NAME_DOES_NOT_EXIST; java.lang.String nicNameReplacement = org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(engineMessage, failingSlaveName); assertThat(new org.ovirt.engine.core.bll.validator.HostInterfaceValidator(null).interfaceExists(failingSlaveName), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(engineMessage, nicNameReplacement)); }
@org.ovirt.engine.ui.frontend.DefaultStringValue( ${action} ${type}. The following VMs <START_MOD>'${NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS_LIST}' <END_MOD>are actively using the Logical Network(s) '${networkNames}'. Please stop the VMs and try again. java.lang.String NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The VM(s) '${NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS_LIST}' are actively using the Logical Network(s) '${networkNames}'. Please stop the VMs and try again.") java.lang.String NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS();
@java.lang.Override protected boolean canDoAction() { if ((getNic()) == null) { return <START_MOD>org.ovirt.engine.core.bll.network.host.UnlabelNicCommand.validate(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<END_MOD>EngineMessage.<START_MOD>HOST_NETWORK_INTERFACE_HAVING_ID_DOES_NOT_EXIST, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("interfaceId", org.ovirt.engine.core.bll.network.host.UnlabelNicCommand.getParameters().getNicId()))<END_MOD>); } if ((!(org.ovirt.engine.core.utils.NetworkUtils.isLabeled(getNic()))) || (!(getNic().getLabels().contains(getLabel())))) { return failCanDoAction(EngineMessage.INTERFACE_NOT_LABELED); } return true; }	@java.lang.Override protected boolean validate() { org.ovirt.engine.core.compat.Guid nicId = org.ovirt.engine.core.bll.network.host.UnlabelNicCommand.getParameters().getNicId(); org.ovirt.engine.core.bll.validator.HostInterfaceValidator hostInterfaceValidator = new org.ovirt.engine.core.bll.validator.HostInterfaceValidator(getNic()); return (validate(hostInterfaceValidator.interfaceExists(nicId))) && (validate(hostInterfaceValidator.nicIsNotLabeledWithSpecifiedLabel(getLabel()))); }
protected java.sql.Array createArrayOf(java.lang.String typeName, java.lang.Object[] array) { <START_MOD>java.sql.Connection connection = null; <END_MOD>try { <START_MOD>connection =<END_MOD> getJdbcTemplate().getDataSource().getConnection()<START_MOD>; return connection<END_MOD>.createArrayOf(typeName, array); } catch (java.sql.SQLException e) { throw new java.lang.RuntimeException(e); } <START_MOD>finally { if (connection != null) { try { connection.close(); <END_MOD>}<START_MOD> catch (java.sql.SQLException e) { } } } }<END_MOD>	protected java.sql.Array createArrayOf(java.lang.String typeName, java.lang.Object[] array) { try (java.sql.Connection connection = getJdbcTemplate().getDataSource().getConnection()) { return connection.createArrayOf(typeName, array); } catch (java.sql.SQLException ex) { throw new java.lang.RuntimeException(ex); } }
private void prestartVms(org.ovirt.engine.core.compat.Guid vmPoolId, int numOfVmsToPrestart) { java.util.List<org.ovirt.engine.core.common.businessentities.VmPoolMap> vmPoolMaps = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmPoolDao().getVmMapsInVmPoolByVmPoolIdAndStatus(vmPoolId, VMStatus.Down); int failedAttempts = 0; int prestartedVmsCounter = 0; final int maxFailedAttempts = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VmPoolMonitorMaxAttempts); if ((vmPoolMaps != null) && ((vmPoolMaps.size()) > 0)) { for (org.ovirt.engine.core.common.businessentities.VmPoolMap map : vmPoolMaps) { if ((failedAttempts < maxFailedAttempts) && (prestartedVmsCounter < numOfVmsToPrestart)) { <START_MOD>java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); <END_MOD>if (prestartVm(map.getVmId()<START_MOD>, messages<END_MOD>)) { prestartedVmsCounter++; failedAttempts = 0; } else { failedAttempts++; <START_MOD>logVmPrestartFailure(map.getVmId(), messages); <END_MOD>} } else { logResultOfPrestartVms(prestartedVmsCounter, numOfVmsToPrestart, vmPoolId); break; } } } else { org.ovirt.engine.core.bll.VmPoolMonitor.log.info( Vms <START_MOD>available<END_MOD> for prestarting } }	private void prestartVms(org.ovirt.engine.core.compat.Guid vmPoolId, int numOfVmsToPrestart) { java.util.List<org.ovirt.engine.core.common.businessentities.VmPoolMap> vmPoolMaps = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmPoolDao().getVmMapsInVmPoolByVmPoolIdAndStatus(vmPoolId, VMStatus.Down); int failedAttempts = 0; int prestartedVmsCounter = 0; final int maxFailedAttempts = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VmPoolMonitorMaxAttempts); java.util.Map<java.lang.String, java.lang.Integer> failureReasons = new java.util.HashMap<>(); if ((vmPoolMaps != null) && ((vmPoolMaps.size()) > 0)) { for (org.ovirt.engine.core.common.businessentities.VmPoolMap map : vmPoolMaps) { if ((failedAttempts < maxFailedAttempts) && (prestartedVmsCounter < numOfVmsToPrestart)) { java.util.List<java.lang.String> messages = new java.util.ArrayList<>(); if (prestartVm(map.getVmId(), messages)) { prestartedVmsCounter++; failedAttempts = 0; } else { failedAttempts++; collectVmPrestartFailureReasons(failureReasons, messages); } } else { logResultOfPrestartVms(prestartedVmsCounter, numOfVmsToPrestart, vmPoolId, failureReasons); break; } } } else { org.ovirt.engine.core.bll.VmPoolMonitor.log.info("No VMs available for prestarting"); } }
private void logVmPrestartFailure(org.ovirt.engine.core.compat.Guid vmId, java.util.List<java.lang.String> messages) { if (!(messages.isEmpty())) { org.ovirt.engine.core.bll.VmPoolMonitor.log.info("Failed to prestart VM {}, error={}", vmId, java.lang.String.join(", ", messages)); } }	private void collectVmPrestartFailureReasons(java.util.Map<java.lang.String, java.lang.Integer> failureReasons, java.util.List<java.lang.String> messages) { if (org.ovirt.engine.core.bll.VmPoolMonitor.log.isInfoEnabled()) { java.lang.String reason = messages.stream().filter(ErrorMessageUtils::isMessage).collect(java.util.stream.Collectors.joining(", ")); java.lang.Integer count = failureReasons.get(reason); failureReasons.put(reason, (count == null ? 1 : count + 1)); } }
@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("storagePoolId", getStoragePoolId()).append("storageDomainId", getStorageDomainId()).append("imageGroupId", getImageGroupId()).append("imageId", getImageId()); }	@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("imageId", getImageId()); }
@org.junit.Test public void shouldNotCreateArtificialCpuPinning() { for (org.ovirt.engine.core.common.businessentities.VmNumaNode numaNode : org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vmNumaNodes) { numaNode.getVdsNumaNodeList().clear(); } java.util.Map<java.lang.String, java.lang.Object> cpuPinning = org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactory.buildCpuPinningWithNumaSetting(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vmNumaNodes, org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vdsNumaNodes); org.assertj.core.api.Assertions.assertThat(cpuPinning).isEmpty(); java.util.Map<java.lang.String, java.lang.Object> mapping = org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactory.buildVmNumatuneSetting(NumaTuneMode.INTERLEAVE, org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vmNumaNodes); org.assertj.core.api.Assertions.assertThat(mapping).doesNotContainKeys(VdsProperties.NUMA_TUNE_MODE, VdsProperties.NUMA_TUNE_NODESET); }	@org.junit.Test public void shouldNotCreateCpuPinningForVirtualNumaNodes() { for (org.ovirt.engine.core.common.businessentities.VmNumaNode numaNode : org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vmNumaNodes) { numaNode.getVdsNumaNodeList().clear(); } java.util.Map<java.lang.String, java.lang.Object> cpuPinning = org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactory.buildCpuPinningWithNumaSetting(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vmNumaNodes, org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vdsNumaNodes); org.assertj.core.api.Assertions.assertThat(cpuPinning).isEmpty(); java.util.Map<java.lang.String, java.lang.Object> mapping = org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactory.buildVmNumatuneSetting(NumaTuneMode.INTERLEAVE, org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vmNumaNodes); org.assertj.core.api.Assertions.assertThat(mapping).doesNotContainKeys(VdsProperties.NUMA_TUNE_MODE, VdsProperties.NUMA_TUNE_NODESET); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot add network interface ${nic} to bond ${bond}. Network interface has an unmanaged network attached.") java.lang.String ACTION_TYPE_FAILED_HOST_NETWORK_ADD_UNMANAGED_TO_BOND();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Host ${vdsName} cannot serve as proxy. Verify its cluster architecture and compatibility version are supported.") java.lang.String ACTION_TYPE_FAILED_HOST_CANNOT_BE_PROXY_FOR_IMPORT_VM();
private org.ovirt.engine.core.common.businessentities.network.Bond createBond(java.lang.String name, java.lang.String... slaves) { org.ovirt.engine.core.common.businessentities.network.Bond bond = new org.ovirt.engine.core.common.businessentities.network.Bond(); bond.setName(name); java.util.List<java.lang.String> bondSlaves = new java.util.ArrayList<java.lang.String>(); for (java.lang.String slave : slaves) { bondSlaves.add(slave); } bond.setSlaves(bondSlaves); return bond; }	private org.ovirt.engine.core.common.businessentities.network.Nic createNicWithNetworkImplementationDetails(java.lang.String name, boolean isManaged) { org.ovirt.engine.core.common.businessentities.network.Nic nic = createNic(name); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails1 = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails(true, isManaged); nic.setNetworkImplementationDetails(networkImplementationDetails1); return nic; }
@org.junit.Test public void testFilterNicsWithUnmanagedNetworks() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingInterfaces = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>(); for (int i = 0; i < 10; i++) { org.ovirt.engine.core.common.businessentities.network.Nic nic = new org.ovirt.engine.core.common.businessentities.network.Nic(); nic.setName(("eth" + i)); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails(true, ((i % 2) == 1)); nic.setNetworkImplementationDetails(networkImplementationDetails); existingInterfaces.add(nic); } org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator validator = new org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> unmanagedNicsList = validator.filterNicsWithUnmanagedNetworks(existingInterfaces, new java.util.HashSet<java.lang.String>()); assertEquals(5, unmanagedNicsList.size()); for (int i = 0; i < 5; i++) { assertEquals(("eth" + (i * 2)), unmanagedNicsList.get(i).getName()); } }	@org.junit.Test public void testFilterNicsWithUnmanagedNetworks() { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicManaged = createNicWithNetworkImplementationDetails("eth0", true); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicUnmanaged = createNicWithNetworkImplementationDetails("eth1", false); java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingInterfaces = java.util.Arrays.asList(nicManaged, nicUnmanaged); java.util.Set<java.lang.String> unmanagedNicsSet = validator.filterNicsWithUnmanagedNetworks(existingInterfaces, java.util.Collections.emptySet()); assertEquals(1, unmanagedNicsSet.size()); assertTrue(unmanagedNicsSet.contains("eth1")); }
@org.junit.Test public void testFilterNicsWithUnmanagedNetworksNetworkImplementationDetailsIsNull() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingInterfaces = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>(); for (int i = 0; i < 10; i++) { org.ovirt.engine.core.common.businessentities.network.Nic nic = new org.ovirt.engine.core.common.businessentities.network.Nic(); nic.setName(("eth" + i)); existingInterfaces.add(nic); } org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator validator = new org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> unmanagedNicsList = validator.filterNicsWithUnmanagedNetworks(existingInterfaces, new java.util.HashSet<java.lang.String>()); assertTrue(unmanagedNicsList.isEmpty()); }	@org.junit.Test public void testFilterNicsWithUnmanagedNetworksNetworkImplementationDetailsIsNull() { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicWithNetworkImplementationsDetailsNull = createNic("eth1"); java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingInterfaces = java.util.Arrays.asList(nicWithNetworkImplementationsDetailsNull); java.util.Set<java.lang.String> unmanagedNicsSet = validator.filterNicsWithUnmanagedNetworks(existingInterfaces, java.util.Collections.emptySet()); assertTrue(unmanagedNicsSet.isEmpty()); }
@org.junit.Test public void testValidateBondsNewSlaveAddedToBond() { java.util.List<org.ovirt.engine.core.common.businessentities.network.Bond> parametersBondList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Bond>(); java.util.Set<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingNics = new java.util.HashSet<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>(); org.ovirt.engine.core.common.businessentities.network.Bond unmanagedBond = createBond("bond_unmanaged", "eth0", "eth1", "eth2"); existingNics.add(unmanagedBond); org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond("bond0", "eth0", "eth1", "eth2"); parametersBondList.add(bond); org.ovirt.engine.core.common.businessentities.network.Bond existingBond = createBond("bond0", "eth0", "eth1"); existingNics.add(existingBond); org.ovirt.engine.core.common.businessentities.BusinessEntityMap nicEntityMap = new org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>(existingNics); org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator validator = new org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator(); org.ovirt.engine.core.bll.ValidationResult result = validator.validateBonds(unmanagedBond, parametersBondList, nicEntityMap); assertEquals(ValidationResult.VALID, result); }	private org.ovirt.engine.core.common.businessentities.network.Nic createNic(java.lang.String name) { org.ovirt.engine.core.common.businessentities.network.Nic nic = new org.ovirt.engine.core.common.businessentities.network.Nic(); nic.setName(name); return nic; }
org.ovirt.engine.core.bll.ValidationResult validateAttachements(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface unmgmtNic, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> networkAttachments) { for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachement : networkAttachments) { if (unmgmtNic.getName().equals(attachement.getNicName())) return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_HOST_NETWORK_ATTACHEMENT_ON_UNMANAGED_NETWORK, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator.NETWORK, attachement.getNetworkName()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator.NIC, attachement.getNicName())); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	org.ovirt.engine.core.bll.ValidationResult validateAttachements(java.lang.String nicWithUnmanagedNetwork, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> networkAttachments) { for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachement : networkAttachments) { if (attachement.getNicName().equals(nicWithUnmanagedNetwork)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_HOST_NETWORK_ATTACHEMENT_ON_UNMANAGED_NETWORK, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator.NETWORK, attachement.getNetworkName()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator.NIC, attachement.getNicName())); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public org.ovirt.engine.core.bll.ValidationResult validate() { java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure = getAttachmentsToConfigure(); org.ovirt.engine.core.bll.ValidationResult vr = org.ovirt.engine.core.bll.ValidationResult.VALID; vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NicLabelValidator(params, existingInterfacesMap, bondsMap, hostSetupNetworksValidatorHelper).validate(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validRemovedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedBonds(); vr = (skipValidation(vr)) ? vr : validRemovedBonds(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : attachmentsDontReferenceSameNetworkDuplicately(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : networksUniquelyConfiguredOnHost(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateNetworkExclusiveOnNics(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NetworkMtuValidator(networkBusinessEntityMap).validateMtu(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateCustomProperties(); vr = (skipValidation(vr)) ? vr : validateQos(attachmentsToConfigure); <START_MOD>vr = (skipValidation(vr)) ? vr : createUnmanagedNetworkValidator().validate(params, existingInterfaces, existingInterfacesMap, networkBusinessEntityMap); <END_MOD>return vr; }	public org.ovirt.engine.core.bll.ValidationResult validate() { java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure = getAttachmentsToConfigure(); org.ovirt.engine.core.bll.ValidationResult vr = org.ovirt.engine.core.bll.ValidationResult.VALID; vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NicLabelValidator(params, existingInterfacesMap, bondsMap, hostSetupNetworksValidatorHelper).validate(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validRemovedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedBonds(); vr = (skipValidation(vr)) ? vr : validRemovedBonds(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : attachmentsDontReferenceSameNetworkDuplicately(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : networksUniquelyConfiguredOnHost(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateNetworkExclusiveOnNics(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NetworkMtuValidator(networkBusinessEntityMap).validateMtu(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateCustomProperties(); vr = (skipValidation(vr)) ? vr : validateQos(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateBondModeVsNetworksAttachedToIt(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : unmanagedNetworkValidator.validate(params, existingInterfaces, networkBusinessEntityMap); return vr; }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot add network interface ${nic} to bond ${bond}. Bond has an unmanaged network attached.") java.lang.String ACTION_TYPE_FAILED_HOST_NETWORK_ADD_TO_UNMANAGED_BOND();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. No Host in Data Center ${storagePoolName} can serve as proxy.") java.lang.String ACTION_TYPE_FAILED_NO_HOST_CAN_BE_PROXY_FOR_IMPORT_VM();
java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> filterNicsWithUnmanagedNetworks(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingInterfaces, java.util.Set<java.lang.String> removedUnmanagedNetworks) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicsWithUnmanagedNetworks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : existingInterfaces) { if (((nic.getNetworkImplementationDetails()) != null) && (!(nic.getNetworkImplementationDetails().isManaged()))) if (!(removedUnmanagedNetworks.contains(nic.getNetworkName()))) nicsWithUnmanagedNetworks.add(nic); } return nicsWithUnmanagedNetworks; }	java.util.Set<java.lang.String> filterNicsWithUnmanagedNetworks(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingInterfaces, java.util.Collection<java.lang.String> removedUnmanagedNetworks) { java.util.Set<java.lang.String> nicsWithUnmanagedNetworks = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : existingInterfaces) { if (((nic.getNetworkImplementationDetails()) != null) && (!(nic.getNetworkImplementationDetails().isManaged()))) { if (!(removedUnmanagedNetworks.contains(nic.getNetworkName()))) { nicsWithUnmanagedNetworks.add(org.ovirt.engine.core.utils.NetworkUtils.stripVlan(nic)); } } } return nicsWithUnmanagedNetworks; }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot remove network interface from bond ${bond}. Bond has an unmanaged network attached.") java.lang.String ACTION_TYPE_FAILED_HOST_NETWORK_REMOVE_FROM_UNMANAGED_BOND();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. VM has PCI host devices attached.") java.lang.String ACTION_TYPE_FAILED_VM_HAS_ATTACHED_PCI_HOST_DEVICES();
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot remove label from network interface ${nic}. Network interface has an unmanaged network attached.") java.lang.String ACTION_TYPE_FAILED_HOST_NETWORK_REMOVE_LABEL_FROM_UNMANAGED_NETWORK();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Some of the hosts still use legacy protocol which is not supported by cluster 3.6 or higher. In order to change it a host needs to be put to maintenance and edited in advanced options section") java.lang.String ACTION_TYPE_FAILED_WRONG_PROTOCOL_FOR_CLUSTER_VERSION();
private org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator createUnmanagedNetworkValidator() { return new org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator(); }	org.ovirt.engine.core.bll.ValidationResult validateQosOverriddenInterfaces() { for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment : params.getNetworkAttachments()) { if (networkAttachment.isQosOverridden()) { org.ovirt.engine.core.common.businessentities.network.Network network = getNetworkRelatedToAttachment(networkAttachment); java.lang.String networkName = network.getName(); if (!(hostNetworkQosSupported)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_NOT_SUPPORTED, org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentStringWithMultipleValues(EngineMessage.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_NOT_SUPPORTED, networkName)); } org.ovirt.engine.core.common.businessentities.network.HostNetworkQos hostNetworkQos = networkAttachment.getHostNetworkQos(); org.ovirt.engine.core.bll.validator.HostNetworkQosValidator qosValidator = createHostNetworkQosValidator(hostNetworkQos); org.ovirt.engine.core.bll.ValidationResult requiredValuesPresent = qosValidator.requiredQosValuesPresentForOverriding(networkName); if (!(requiredValuesPresent.isValid())) { return requiredValuesPresent; } org.ovirt.engine.core.bll.ValidationResult valuesConsistent = qosValidator.valuesConsistent(networkName); if (!(valuesConsistent.isValid())) { return valuesConsistent; } } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot create bond ${bond} containing network interface ${nic}. Network interface has an unmanaged network attached.") java.lang.String ACTION_TYPE_FAILED_HOST_NETWORK_CREATE_BOND_WITH_UNMANAGED_NETWORK();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot remove unmanaged network ${network} from host, as it is an existing cluster network.") java.lang.String REMOVED_UNMANAGED_NETWORK_IS_A_CLUSTER_NETWORK();
org.ovirt.engine.core.bll.ValidationResult validateLabels(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface unmgmtNic, java.util.Set<org.ovirt.engine.core.common.businessentities.network.NicLabel> labels) { for (org.ovirt.engine.core.common.businessentities.network.NicLabel label : labels) { if (unmgmtNic.getName().equals(label.getNicName())) return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_HOST_NETWORK_LABEL_ON_UNMANAGED_NETWORK, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator.LABEL, label.getName()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator.NIC, label.getNicName())); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	org.ovirt.engine.core.bll.ValidationResult validateLabels(java.lang.String nicWithUnmanagedNetwork, java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NicLabel> labels) { for (org.ovirt.engine.core.common.businessentities.network.NicLabel label : labels) { if (label.getNicName().equals(nicWithUnmanagedNetwork)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_HOST_NETWORK_LABEL_ON_UNMANAGED_NETWORK, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator.LABEL, label.getName()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator.NIC, label.getNicName())); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public org.ovirt.engine.core.bll.ValidationResult validate(org.ovirt.engine.core.common.action.HostSetupNetworksParameters params, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingInterfaces, org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingInterfacesMap, org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Network> networkBusinessEntityMap) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicWithUnmanagedNetworks = filterNicsWithUnmanagedNetworks(existingInterfaces, params.getRemovedUnmanagedNetworks()); org.ovirt.engine.core.bll.ValidationResult vr = org.ovirt.engine.core.bll.ValidationResult.VALID; for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface unmgmtNic : nicWithUnmanagedNetworks) { vr = validateAttachements(unmgmtNic, params.getNetworkAttachments()); vr = (skipValidation(vr)) ? vr : validateLabels(unmgmtNic, params.getLabels()); vr = (skipValidation(vr)) ? vr : validateBonds(unmgmtNic, params.getBonds(), existingInterfacesMap); vr = (skipValidation(vr)) ? vr : validateRemovedLabels(unmgmtNic, params.getRemovedLabels()); if (skipValidation(vr)) break; } return vr; }	public org.ovirt.engine.core.bll.ValidationResult validate(org.ovirt.engine.core.common.action.HostSetupNetworksParameters params, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingInterfaces, org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Network> networkBusinessEntityMap) { org.ovirt.engine.core.bll.ValidationResult result = validateRemovedUnmanagedNetworks(params.getRemovedUnmanagedNetworks(), existingInterfaces, networkBusinessEntityMap); if (!(result.isValid())) { return result; } java.util.Set<java.lang.String> nicsWithUnmanagedNetworks = filterNicsWithUnmanagedNetworks(existingInterfaces, params.getRemovedUnmanagedNetworks()); for (java.lang.String nicWithUnmanagedNetwork : nicsWithUnmanagedNetworks) { result = validateLabels(nicWithUnmanagedNetwork, params.getLabels()); if (!(result.isValid())) { return result; } result = validateAttachements(nicWithUnmanagedNetwork, params.getNetworkAttachments()); if (!(result.isValid())) { return result; } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public void testFilterNicsWithUnmanagedNetworksUmngmtNetRemoved() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingInterfaces = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>(); for (int i = 0; i < 10; i++) { org.ovirt.engine.core.common.businessentities.network.Nic nic = new org.ovirt.engine.core.common.businessentities.network.Nic(); nic.setName(("eth" + i)); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails(true, ((i % 2) == 1)); nic.setNetworkImplementationDetails(networkImplementationDetails); existingInterfaces.add(nic); } org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator validator = new org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator(); java.util.Set<java.lang.String> removedUnmanagedNetworks = new java.util.HashSet<java.lang.String>(); removedUnmanagedNetworks.add("eth4"); removedUnmanagedNetworks.add("eth6"); removedUnmanagedNetworks.add("eth8"); java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> unmanagedNicsList = validator.filterNicsWithUnmanagedNetworks(existingInterfaces, removedUnmanagedNetworks); assertEquals(2, unmanagedNicsList.size()); for (int i = 0; i < 2; i++) { assertEquals(("eth" + (i * 2)), unmanagedNicsList.get(i).getName()); } }	public void testFilterNicsWithUnmanagedNetworksUmngmtNetRemoved() { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicWithUnmanagedToBeRemoved = createNicWithNetworkImplementationDetails("eth_unmanaged1_toBeRemoved", false); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicWithUnmanaged = createNicWithNetworkImplementationDetails("eth_unmanaged", false); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicWithManagedToBeRemoved = createNicWithNetworkImplementationDetails("eth_managed_toBeRemoved", true); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicWithManaged = createNicWithNetworkImplementationDetails("eth_managed", true); java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingInterfaces = java.util.Arrays.asList(nicWithUnmanagedToBeRemoved, nicWithUnmanaged, nicWithManagedToBeRemoved, nicWithManaged); java.util.Collection<java.lang.String> removedUnmanagedNetworks = java.util.Arrays.asList("eth_unmanaged1_toBeRemoved", "eth_managed_toBeRemoved"); java.util.Set<java.lang.String> unmanagedNicsSet = validator.filterNicsWithUnmanagedNetworks(existingInterfaces, removedUnmanagedNetworks); assertEquals(1, unmanagedNicsSet.size()); assertTrue(unmanagedNicsSet.contains("eth_unmanaged")); }
@org.junit.Test public void testValidateBondsNewSlaveAddedToBondContainingUnmanagedNetwork() { java.util.List<org.ovirt.engine.core.common.businessentities.network.Bond> parametersBondList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Bond>(); java.util.Set<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingNics = new java.util.HashSet<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>(); org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond("bond_unmgmt", "eth0", "eth1", "eth2"); parametersBondList.add(bond); org.ovirt.engine.core.common.businessentities.network.Bond existingBond = createBond("bond_unmgmt", "eth0", "eth1"); existingNics.add(existingBond); org.ovirt.engine.core.common.businessentities.BusinessEntityMap nicEntityMap = new org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>(existingNics); org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator validator = new org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator(); org.ovirt.engine.core.bll.ValidationResult result = validator.validateBonds(bond, parametersBondList, nicEntityMap); assertEquals(EngineMessage.ACTION_TYPE_FAILED_HOST_NETWORK_ADD_TO_UNMANAGED_BOND, result.getMessage()); assertEquals((("$" + (org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator.NIC)) + " eth2"), result.getVariableReplacements().get(0)); assertEquals((("$" + (org.ovirt.engine.core.bll.network.host.UnmanagedNetworkValidator.BOND)) + " bond_unmgmt"), result.getVariableReplacements().get(1)); }	public org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createVlanNic(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface baseNic, java.lang.String nicName, java.lang.Integer vlanId, boolean isManaged) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanNic = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); vlanNic.setId(org.ovirt.engine.core.compat.Guid.newGuid()); vlanNic.setName(nicName); vlanNic.setVlanId(vlanId); vlanNic.setBaseInterface(baseNic.getName()); vlanNic.setNetworkName("unmanagedNetworkName"); vlanNic.setNetworkImplementationDetails(new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails(true, isManaged)); return vlanNic; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { org.ovirt.engine.core.compat.Version vmCompatibilityVersion = vm.getCompatibilityVersion(); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostsToRunOn = new java.util.ArrayList<>(); if (vmCompatibilityVersion == null) { return hosts; } for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.getSupportedENGINESVersionsSet().contains(vmCompatibilityVersion)) { hostsToRunOn.add(host); org.ovirt.engine.core.bll.scheduling.policyunits.CompatibilityVersionFilterPolicyUnit.log.debug("Host {} wasn't filtered out as it supports the VM required compatibility version({})", host.getName(), vmCompatibilityVersion); } else { org.ovirt.engine.core.bll.scheduling.policyunits.CompatibilityVersionFilterPolicyUnit.log.debug("Host {} was filtered out as it doesn't support the VM required compatibility-version ({}). Host supported compatibility-versions are: {}.", host.getName(), vmCompatibilityVersion, host.getSupportedEngines()); messages.addMessage(host.getId(), java.lang.String.format("$vmCompaVersions %1$s", vmCompatibilityVersion)); messages.addMessage(host.getId(), java.lang.String.format("$hostCompaVersions %1$s", host.getSupportedEngines())); messages.addMessage(host.getId(), EngineMessage.VAR__DETAIL__UNSUPPORTED_COMPATIBILITY_VERSION.toString()); } } return hostsToRunOn; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { org.ovirt.engine.core.compat.Version vmCustomCompatibilityVersion = vm.getCustomCompatibilityVersion(); if (vmCustomCompatibilityVersion == null) { return hosts; } java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostsToRunOn = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.getSupportedENGINESVersionsSet().contains(vmCustomCompatibilityVersion)) { hostsToRunOn.add(host); org.ovirt.engine.core.bll.scheduling.policyunits.CompatibilityVersionFilterPolicyUnit.log.debug("Host {} wasn't filtered out as it supports the VM required compatibility version({})", host.getName(), vmCustomCompatibilityVersion); } else { org.ovirt.engine.core.bll.scheduling.policyunits.CompatibilityVersionFilterPolicyUnit.log.debug("Host {} was filtered out as it doesn't support the VM required compatibility-version ({}). Host supported compatibility-versions are: {}.", host.getName(), vmCustomCompatibilityVersion, host.getSupportedEngines()); messages.addMessage(host.getId(), java.lang.String.format("$vmCompatibilityVersions %1$s", vmCustomCompatibilityVersion)); messages.addMessage(host.getId(), java.lang.String.format("$hostCompatibilityVersions %1$s", host.getSupportedEngines())); messages.addMessage(host.getId(), EngineMessage.VAR__DETAIL__UNSUPPORTED_COMPATIBILITY_VERSION.toString()); } } return hostsToRunOn; }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getRemoveCommand())) { remove(); } else if (<START_MOD>"Upload".equals(command.getName())) { upload(); } else if (<END_MOD>"OnRemove".equals(command.getName())) { onRemove(); } else if ("Cancel".equals(command.getName())) { cancel(); } }	@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getRemoveCommand())) { remove(); } else if ("OnRemove".equals(command.getName())) { onRemove(); } else if ("Cancel".equals(command.getName())) { cancel(); } }
void initTableActionButtons() { getTable().addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.core.common.businessentities.storage.Disk>(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageDiskView.constants.removeDisk()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getRemoveCommand(); } }); <START_MOD>getTable().addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.core.common.businessentities.storage.Disk>(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageDiskView.constants.uploadImage()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getUploadCommand(); } }); }<END_MOD>	void initTableActionButtons() { getTable().addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.core.common.businessentities.storage.Disk>(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageDiskView.constants.removeDisk()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getRemoveCommand(); } }); }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Upload") java.lang.String uploadImage();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("Storage Type") java.lang.String storagePopupStorageTypeLabel();
@java.lang.Override protected void endSuccessfully() { if (isStatelessSnapshotExistsForVm()) { org.ovirt.engine.core.bll.RunVmCommand.getBackend().endAction(VdcActionType.CreateAllSnapshotsFromVm, <START_MOD>getCreateAllSnapshotFromVmParameters<END_MOD>(), org.ovirt.engine.core.bll.RunVmCommand.getContext().clone().withoutCompensationContext().withoutExecutionContext().withoutLock()); org.ovirt.engine.core.bll.RunVmCommand.getParameters().setShouldBeLogged(false); org.ovirt.engine.core.bll.RunVmCommand.getParameters().setRunAsStateless(false); setSucceeded(org.ovirt.engine.core.bll.RunVmCommand.getBackend().runInternalAction(org.ovirt.engine.core.bll.RunVmCommand.getActionType(), org.ovirt.engine.core.bll.RunVmCommand.getParameters(), createContextForRunStatelessVm()).getSucceeded()); if (!(org.ovirt.engine.core.bll.RunVmCommand.getSucceeded())) { org.ovirt.engine.core.bll.RunVmCommand.getParameters().setShouldBeLogged(true); org.ovirt.engine.core.bll.RunVmCommand.log.error( not run VM '{}' ({}) in stateless mode org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); org.ovirt.engine.core.bll.RunVmCommand.getReturnValue().setEndActionTryAgain(false); } } else { super.endSuccessfully(); } }	@java.lang.Override protected void endSuccessfully() { if (isStatelessSnapshotExistsForVm()) { org.ovirt.engine.core.bll.RunVmCommand.getBackend().endAction(VdcActionType.CreateAllSnapshotsFromVm, buildCreateSnapshotParametersForEndAction(), org.ovirt.engine.core.bll.RunVmCommand.getContext().clone().withoutCompensationContext().withoutExecutionContext().withoutLock()); org.ovirt.engine.core.bll.RunVmCommand.getParameters().setShouldBeLogged(false); org.ovirt.engine.core.bll.RunVmCommand.getParameters().setRunAsStateless(false); setSucceeded(org.ovirt.engine.core.bll.RunVmCommand.getBackend().runInternalAction(org.ovirt.engine.core.bll.RunVmCommand.getActionType(), org.ovirt.engine.core.bll.RunVmCommand.getParameters(), createContextForRunStatelessVm()).getSucceeded()); if (!(org.ovirt.engine.core.bll.RunVmCommand.getSucceeded())) { org.ovirt.engine.core.bll.RunVmCommand.getParameters().setShouldBeLogged(true); org.ovirt.engine.core.bll.RunVmCommand.log.error("Could not run VM '{}' ({}) in stateless mode", org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); org.ovirt.engine.core.bll.RunVmCommand.getReturnValue().setEndActionTryAgain(false); } } else { super.endSuccessfully(); } }
@java.lang.Override protected void endWithFailure() { if (isStatelessSnapshotExistsForVm()) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = org.ovirt.engine.core.bll.RunVmCommand.getBackend().endAction(VdcActionType.CreateAllSnapshotsFromVm, <START_MOD>getCreateAllSnapshotFromVmParameters<END_MOD>(), org.ovirt.engine.core.bll.RunVmCommand.cloneContext().withoutExecutionContext().withoutLock()); setSucceeded(vdcReturnValue.getSucceeded()); } else { super.endWithFailure(); } }	@java.lang.Override protected void endWithFailure() { if (isStatelessSnapshotExistsForVm()) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = org.ovirt.engine.core.bll.RunVmCommand.getBackend().endAction(VdcActionType.CreateAllSnapshotsFromVm, buildCreateSnapshotParametersForEndAction(), org.ovirt.engine.core.bll.RunVmCommand.cloneContext().withoutExecutionContext().withoutLock()); setSucceeded(vdcReturnValue.getSucceeded()); } else { super.endWithFailure(); } }
@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return org.ovirt.engine.core.bll.RunVmCommand.getParameters().isUseCinderCommandCallback() ? new org.ovirt.engine.core.bll.ConcurrentChildCommandsExecutionCallback() : null; }	@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return (org.ovirt.engine.core.bll.RunVmCommand.getParameters().isUseCinderCommandCallback()) && (getFlow().isStateless()) ? new org.ovirt.engine.core.bll.ConcurrentChildCommandsExecutionCallback() : null; }
private void collectVmPrestartFailureReasons(java.util.Map<java.lang.String, java.lang.Integer> failureReasons, java.util.List<java.lang.String> messages) { if (org.ovirt.engine.core.bll.VmPoolMonitor.log.isInfoEnabled()) { java.lang.String reason = messages.stream().filter(<START_MOD>( msg) -> org.ovirt.engine.core.bll.VmPoolMonitor.ENGINE_MESSAGES.contains(msg)<END_MOD>).collect(java.util.stream.Collectors.joining(   java.lang.Integer count = failureReasons.get(reason); failureReasons.put(reason, (count == null ? 1 : count + 1)); } }	private void collectVmPrestartFailureReasons(java.util.Map<java.lang.String, java.lang.Integer> failureReasons, java.util.List<java.lang.String> messages) { if (org.ovirt.engine.core.bll.VmPoolMonitor.log.isInfoEnabled()) { java.lang.String reason = messages.stream().filter(EngineMessage::contains).collect(java.util.stream.Collectors.joining(", ")); java.lang.Integer count = failureReasons.get(reason); failureReasons.put(reason, (count == null ? 1 : count + 1)); } }
private boolean isSSHPublicKeyUpdate() { org.ovirt.engine.core.common.businessentities.UserProfile existingProfile = org.ovirt.engine.core.bll.AddUserProfileCommand.getUserProfile(); if (existingProfile != null) { if ((org.apache.commons.lang.StringUtils.isEmpty(existingProfile.getSshPublicKey())) && (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.AddUserProfileCommand.getParameters().getUserProfile().getSshPublicKey())))) { needSSHPublicKeyUpdate = true; } } return needSSHPublicKeyUpdate; }	private boolean isSSHPublicKeyUpdate(org.ovirt.engine.core.common.businessentities.UserProfile existingProfile) { if ((org.apache.commons.lang.StringUtils.isEmpty(existingProfile.getSshPublicKey())) && (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.AddUserProfileCommand.getParameters().getUserProfile().getSshPublicKey())))) { return true; } return false; }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (<START_MOD>!<END_MOD>(<START_MOD>isSSHPublicKeyUpdate<END_MOD>())) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_PROFILE_ALREADY_EXISTS); } return true; }	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } org.ovirt.engine.core.common.businessentities.UserProfile existingProfile = org.ovirt.engine.core.bll.AddUserProfileCommand.getUserProfile(); if ((existingProfile != null) && (!(isSSHPublicKeyUpdate(existingProfile)))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_PROFILE_ALREADY_EXISTS); } return true; }
@java.lang.Override protected void executeCommand() { if (<START_MOD>needSSHPublicKeyUpdate<END_MOD>) { <START_MOD>executeCommandUpdate<END_MOD>(); } <START_MOD>else { executeCommandAdd<END_MOD>(); }<START_MOD> }<END_MOD>	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.UserProfile existingProfile = org.ovirt.engine.core.bll.AddUserProfileCommand.getUserProfile(); if (existingProfile != null) { executeCommandUpdateSSHPublicKey(existingProfile); } else { org.ovirt.engine.core.common.businessentities.UserProfile profile = org.ovirt.engine.core.bll.AddUserProfileCommand.getParameters().getUserProfile(); profile.setId(org.ovirt.engine.core.compat.Guid.newGuid()); profile.setUserId(org.ovirt.engine.core.bll.AddUserProfileCommand.getUserId()); if (!(org.apache.commons.lang.StringUtils.isEmpty(profile.getSshPublicKey()))) { profile.setSshPublicKeyId(org.ovirt.engine.core.compat.Guid.newGuid()); } userProfileDao.save(profile); org.ovirt.engine.core.bll.AddUserProfileCommand.setSucceeded(true); } }
@java.lang.Override protected void executeVdsBrokerCommand() { log.info("-- executeIrsBrokerCommand: calling an image action command. parameters:"); log.info("++ spId={}", org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getStoragePoolId()); log.info("++ sdId={}", org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getStorageDomainId()); log.info("++ image group Id={}", org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getImageGroupId()); log.info("++ image Id={}", org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getImageId()); status = executeImageActionVdsBrokerCommand(org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getImageGroupId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getImageId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.proceedProxyReturnValue(); setReturnValue(status); }	@java.lang.Override protected void executeVdsBrokerCommand() { status = executeImageActionVdsBrokerCommand(org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getImageGroupId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.getParameters().getImageId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.ImageActionsVDSCommandBase.proceedProxyReturnValue(); setReturnValue(status); }
public org.ovirt.engine.core.bll.ValidationResult protocolIsNotXmlrpc(org.ovirt.engine.core.common.businessentities.VDSGroup cluster) { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.NOT_SUPPORTED_PROTOCOL_FOR_CLUSTER_VERSION).when(((<START_MOD>(org.ovirt.engine.core.common.businessentities.<END_MOD>VdsProtocol.XML<START_MOD>) == <END_MOD>(host.getProtocol())) && (Version.v3_6.<START_MOD>greaterOrEquals<END_MOD>(cluster.getCompatibilityVersion())))); }	public org.ovirt.engine.core.bll.ValidationResult protocolIsNotXmlrpc(org.ovirt.engine.core.common.businessentities.VDSGroup cluster) { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.NOT_SUPPORTED_PROTOCOL_FOR_CLUSTER_VERSION).when((((org.ovirt.engine.core.common.businessentities.VdsProtocol.XML) == (host.getProtocol())) && (cluster.getCompatibilityVersion().greaterOrEquals(Version.v3_6)))); }
private void doTestSetupNetworksSyncsNetwork(boolean overrideConfiguration, java.util.List<java.lang.String> expectedNetworksToSync) { org.ovirt.engine.api.model.HostNic hostNic = new org.ovirt.engine.api.model.HostNic(<START_MOD>); hostNic.setName("eris"<END_MOD>); org.ovirt.engine.api.model.Network network = new org.ovirt.engine.api.model.Network(); network.setName(org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.NETWORK_NAME); hostNic.setNetwork(network); hostNic.setOverrideConfiguration(overrideConfiguration); org.ovirt.engine.api.model.HostNics hostNics = control.createMock(org.ovirt.engine.api.model.HostNics.class); expect(hostNics.getHostNics()).andReturn(java.util.Collections.singletonList(hostNic)).anyTimes(); setUriInfo(setUpActionExpectations(VdcActionType.SetupNetworks, org.ovirt.engine.core.common.action.SetupNetworksParameters.class, new java.lang.String[]{ "NetworksToSync" }, new java.lang.Object[]{ expectedNetworksToSync }, true, true)); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setHostNics(hostNics); collection.setupNetworks(action); }	private void doTestSetupNetworksSyncsNetwork(boolean overrideConfiguration, java.util.List<java.lang.String> expectedNetworksToSync) { org.ovirt.engine.api.model.HostNic hostNic = new org.ovirt.engine.api.model.HostNic(); org.ovirt.engine.api.model.Network network = new org.ovirt.engine.api.model.Network(); network.setName(org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.NETWORK_NAME); hostNic.setNetwork(network); hostNic.setOverrideConfiguration(overrideConfiguration); org.ovirt.engine.api.model.HostNics hostNics = control.createMock(org.ovirt.engine.api.model.HostNics.class); expect(hostNics.getHostNics()).andReturn(java.util.Collections.singletonList(hostNic)).anyTimes(); setUriInfo(setUpActionExpectations(VdcActionType.SetupNetworks, org.ovirt.engine.core.common.action.SetupNetworksParameters.class, new java.lang.String[]{ "NetworksToSync" }, new java.lang.Object[]{ expectedNetworksToSync }, true, true)); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setHostNics(hostNics); collection.setupNetworks(action); }
@java.lang.Override public org.ovirt.engine.api.model.HostNics list() { org.ovirt.engine.api.model.HostNics ret = new org.ovirt.engine.api.model.HostNics(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ifaces = getCollection(); java.util.Map<java.lang.String, <START_MOD>org.ovirt.engine.core.compat.Guid> networkNameToNetworkIdMap = mapNetworkNamesToNetworkIds(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsByNetworkId = getAttachmentsByNetworkId(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : ifaces) { org.ovirt.engine.api.model.HostNic hostNic = populate(map(iface, ifaces), iface); setCustomProperties(attachmentsByNetworkId, networkNameToNetworkIdMap, hostNic); <END_MOD>java.lang.String<START_MOD> networkName = iface.getNetworkName(); if (networkNameToNetworkIdMap.containsKey(networkName)<END_MOD>) { <START_MOD>org.ovirt.engine.core.compat.Guid networkId = networkNameToNetworkIdMap.get(networkName); hostNic.getNetwork().setId(networkId<END_MOD>.toString()); <START_MOD>hostNic.getNetwork().setName(null); <END_MOD>} <START_MOD>ret.getHostNics().add(addLinks(hostNic)<END_MOD>); } <START_MOD>return addActions(<END_MOD>ret); }	@java.lang.Override public org.ovirt.engine.api.model.HostNics list() { org.ovirt.engine.api.model.HostNics ret = new org.ovirt.engine.api.model.HostNics(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ifaces = getCollection(); java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks = getClusterNetworks(); java.util.Map<java.lang.String, java.lang.String> networkIds = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.network.Network nwk : clusterNetworks) { networkIds.put(nwk.getName(), nwk.getId().toString()); } for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : ifaces) { org.ovirt.engine.api.model.HostNic hostNic = populate(map(iface, ifaces), iface); if (networkIds.containsKey(iface.getNetworkName())) { hostNic.getNetwork().setId(networkIds.get(iface.getNetworkName())); hostNic.getNetwork().setName(null); } ret.getHostNics().add(addLinks(hostNic)); } return addActions(ret); }
private org.ovirt.engine.core.common.action.CustomPropertiesForVdsNetworkInterface nicsToCustomProperties(java.util.List<org.ovirt.engine.api.model.HostNic> hostNics, org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingNicsMapping) { org.ovirt.engine.core.common.action.CustomPropertiesForVdsNetworkInterface result = new org.ovirt.engine.core.common.action.CustomPropertiesForVdsNetworkInterface(); for (org.ovirt.engine.api.model.HostNic hostNic : hostNics) { <START_MOD>java.lang.String hostNicName = hostNic.getName(); java.lang.String nicName = (org.apache.commons.lang.StringUtils.isEmpty(hostNicName)) ? existingNicsMapping.get(hostNic.getId()).getName() : hostNicName; org.ovirt.engine.api.model.Properties properties =<END_MOD> (hostNic.isSetProperties()) ? <START_MOD>hostNic.getProperties<END_MOD>() : <START_MOD>new org.ovirt.engine.api.model.Properties()<END_MOD>; result.add(nicName, org.ovirt.engine.api.restapi.utils.CustomPropertiesParser.toMap(<START_MOD>properties<END_MOD>)); } <START_MOD>return result; <END_MOD>}	private org.ovirt.engine.core.common.action.CustomPropertiesForVdsNetworkInterface nicsToCustomProperties(java.util.List<org.ovirt.engine.api.model.HostNic> hostNics, org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingNicsMapping) { org.ovirt.engine.core.common.action.CustomPropertiesForVdsNetworkInterface result = new org.ovirt.engine.core.common.action.CustomPropertiesForVdsNetworkInterface(); for (org.ovirt.engine.api.model.HostNic hostNic : hostNics) { if (hostNic.isSetProperties()) { java.lang.String hostNicName = hostNic.getName(); java.lang.String nicName = (org.apache.commons.lang.StringUtils.isEmpty(hostNicName)) ? existingNicsMapping.get(hostNic.getId()).getName() : hostNicName; result.add(nicName, org.ovirt.engine.api.restapi.utils.CustomPropertiesParser.toMap(hostNic.getProperties())); } } return result; }
private void persistTopology(org.ovirt.engine.core.common.businessentities.VDS host, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> dbNics, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks, org.ovirt.engine.core.common.vdscommands.UserConfiguredNetworkData userConfiguredData) { final org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersister networkInterfacesPersister = new org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersisterImpl(interfaceDao, host.getInterfaces(), dbNics, userConfiguredData); networkInterfacesPersister.persistTopology(); final org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersister networkAttachmentPersister = new org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersister(networkAttachmentDao, host.getId(), host.getInterfaces(), userConfiguredData.<START_MOD>getCustomPropertiesForVdsNetworkInterface<END_MOD>(), userConfiguredData.getNetworkAttachments(), clusterNetworks); networkAttachmentPersister.persistNetworkAttachments(); }	private void persistTopology(org.ovirt.engine.core.common.businessentities.VDS host, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> dbNics, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks, org.ovirt.engine.core.common.vdscommands.UserConfiguredNetworkData userConfiguredData) { final org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersister networkInterfacesPersister = new org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersisterImpl(interfaceDao, host.getInterfaces(), dbNics, userConfiguredData); networkInterfacesPersister.persistTopology(); createHostNetworkAttachmentsPersister(host, clusterNetworks, userConfiguredData).persistNetworkAttachments(); }
private void createNetworkAttachmentForReportedNetworksNotHavingOne(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, java.lang.String networkName) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(getBaseInterfaceNicOrThis(nic), clusterNetworks.get(networkName), org.ovirt.engine.core.utils.NetworkUtils.createIpConfigurationFromVdsNetworkInterface(nic)); networkAttachment.setId(org.ovirt.engine.core.compat.Guid.newGuid()); if ((<START_MOD>customPropertiesForVdsNetworkInterface<END_MOD>) != null) { networkAttachment.setProperties(<START_MOD>customPropertiesForVdsNetworkInterface<END_MOD>.getCustomPropertiesFor(nic)); } networkAttachmentDao.save(networkAttachment); }	private void createNetworkAttachmentForReportedNetworksNotHavingOne(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, java.lang.String networkName) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(getBaseInterfaceNicOrThis(nic), clusterNetworks.get(networkName), org.ovirt.engine.core.utils.NetworkUtils.createIpConfigurationFromVdsNetworkInterface(nic)); networkAttachment.setId(org.ovirt.engine.core.compat.Guid.newGuid()); if ((legacyMode) && ((customPropertiesForNics) != null)) { networkAttachment.setProperties(customPropertiesForNics.getCustomPropertiesFor(nic)); } networkAttachmentDao.save(networkAttachment); }
public org.ovirt.engine.core.common.action.CustomPropertiesForVdsNetworkInterface add(java.lang.String name, java.util.Map<java.lang.String, java.lang.String> customProperties) { java.util.Objects.requireNonNull(name); this.customProperties.put(name, customProperties); return this; }	public org.ovirt.engine.core.common.action.CustomPropertiesForVdsNetworkInterface add(java.lang.String name, java.util.Map<java.lang.String, java.lang.String> customProperties) { java.util.Objects.requireNonNull(name); if (customProperties == null) { customProperties = new java.util.HashMap<>(); } this.customProperties.put(name, customProperties); return this; }
public static org.ovirt.engine.core.common.businessentities.network.IpConfiguration createIpConfigurationFromVdsNetworkInterface(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { if (nic == null) { return org.ovirt.engine.core.utils.NetworkUtils.createDefaultIpConfiguration(); } org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); if ((nic.getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP)) { iPv4Address.setAddress(<START_MOD>org.ovirt.engine.core.utils.NetworkUtils.emptyStringToNull(<END_MOD>nic.getAddress())<START_MOD>)<END_MOD>; iPv4Address.setNetmask(<START_MOD>org.ovirt.engine.core.utils.NetworkUtils.emptyStringToNull(<END_MOD>nic.getSubnet())<START_MOD>)<END_MOD>; iPv4Address.setGateway(<START_MOD>org.ovirt.engine.core.utils.NetworkUtils.emptyStringToNull(<END_MOD>nic.getGateway())<START_MOD>)<END_MOD>; } iPv4Address.setBootProtocol(nic.getBootProtocol()); org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration(); ipConfiguration.setIPv4Addresses(java.util.Collections.singletonList(iPv4Address)); return ipConfiguration; }	public static org.ovirt.engine.core.common.businessentities.network.IpConfiguration createIpConfigurationFromVdsNetworkInterface(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { if (nic == null) { return org.ovirt.engine.core.utils.NetworkUtils.createDefaultIpConfiguration(); } org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); if ((nic.getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP)) { iPv4Address.setAddress(nic.getAddress()); iPv4Address.setNetmask(nic.getSubnet()); iPv4Address.setGateway(nic.getGateway()); } iPv4Address.setBootProtocol(nic.getBootProtocol()); org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration(); ipConfiguration.setIPv4Addresses(java.util.Collections.singletonList(iPv4Address)); return ipConfiguration; }
@java.lang.Override public void contextInitialized(javax.servlet.ServletContextEvent event) { org.ovirt.vdsmfake.AppLifecycleListener.log.info( initialized. final java.util.Map<java.lang.String, java.lang.String> paramMap = new java.util.HashMap<java.lang.String, java.lang.String>(); @java.lang.SuppressWarnings("unchecked") final java.util.Enumeration<java.lang.String> paramNames = event.getServletContext().getInitParameterNames(); while (paramNames.hasMoreElements()) { final java.lang.String key = paramNames.nextElement(); paramMap.put(key, <START_MOD>java.lang.System.getProperty(key, <END_MOD>event.getServletContext().getInitParameter(key))<START_MOD>)<END_MOD>; } <START_MOD>java.lang.System.setProperty("logDir", paramMap.get("logDir")); <END_MOD>org.ovirt.vdsmfake.AppConfig.getInstance().init(paramMap); final org.ovirt.vdsmfake.task.TaskProcessor taskProcessor = org.ovirt.vdsmfake.task.TaskProcessor.getInstance(); taskProcessor.init(); if (paramMap.containsKey("jsonListenPort")) { int jsonPort = java.lang.Integer.parseInt(paramMap.get("jsonListenPort")); boolean encrypted = java.lang.Boolean.parseBoolean(paramMap.get("jsonSecured")); java.lang.String hostName = paramMap.get("jsonHost"); org.ovirt.vdsmfake.rpc.json.JsonRpcServer server = new org.ovirt.vdsmfake.rpc.json.JsonRpcServer(hostName, jsonPort, encrypted); server.start(); } }	@java.lang.Override public void contextInitialized(javax.servlet.ServletContextEvent event) { java.lang.System.out.println("Application initialized."); final java.util.Map<java.lang.String, java.lang.String> paramMap = new java.util.HashMap<java.lang.String, java.lang.String>(); @java.lang.SuppressWarnings("unchecked") final java.util.Enumeration<java.lang.String> paramNames = event.getServletContext().getInitParameterNames(); while (paramNames.hasMoreElements()) { final java.lang.String key = paramNames.nextElement(); paramMap.put(key, java.lang.System.getProperty(key, event.getServletContext().getInitParameter(key))); } java.lang.System.setProperty("logDir", paramMap.get("logDir")); org.apache.log4j.PropertyConfigurator.configure(getClass().getResource("/log4j.xml")); org.ovirt.vdsmfake.AppConfig.getInstance().init(paramMap); final org.ovirt.vdsmfake.task.TaskProcessor taskProcessor = org.ovirt.vdsmfake.task.TaskProcessor.getInstance(); taskProcessor.init(); if (paramMap.containsKey("jsonListenPort")) { int jsonPort = java.lang.Integer.parseInt(paramMap.get("jsonListenPort")); boolean encrypted = java.lang.Boolean.parseBoolean(paramMap.get("jsonSecured")); java.lang.String hostName = paramMap.get("jsonHost"); org.ovirt.vdsmfake.rpc.json.JsonRpcServer server = new org.ovirt.vdsmfake.rpc.json.JsonRpcServer(hostName, jsonPort, encrypted); server.start(); } }
protected org.ovirt.engine.api.model.HostNIC addSlaveLinks(org.ovirt.engine.api.model.HostNIC nic, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ifaces) { if ((nic.getBonding()) == null) nic.setBonding(new org.ovirt.engine.api.model.Bonding()); nic.getBonding().setSlaves(new org.ovirt.engine.api.<START_MOD>restapi.resource<END_MOD>.Slaves()); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i : ifaces) { if (i.isPartOfBond(nic.getName())) { nic.getBonding().getSlaves().getSlaves().add(slave(i.getId().toString())); } } return nic; }	protected org.ovirt.engine.api.model.HostNIC addSlaveLinks(org.ovirt.engine.api.model.HostNIC nic, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ifaces) { if ((nic.getBonding()) == null) nic.setBonding(new org.ovirt.engine.api.model.Bonding()); nic.getBonding().setSlaves(new org.ovirt.engine.api.model.Slaves()); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i : ifaces) { if (i.isPartOfBond(nic.getName())) { nic.getBonding().getSlaves().getSlaves().add(slave(i.getId().toString())); } } return nic; }
private void setCustomProperties(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsByNetworkId, java.util.Map<java.lang.String, org.ovirt.engine.core.compat.Guid> networkNameToNetworkIdMap, org.ovirt.engine.api.restapi.resource.HostNic hostNic) { org.ovirt.engine.api.model.Network network = hostNic.getNetwork(); if (network == null) { return; } java.lang.String networkName = network.getName(); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = attachmentsByNetworkId.get(networkNameToNetworkIdMap.get(networkName)); if (networkAttachment == null) { return; } java.util.Map<java.lang.String, java.lang.String> properties = networkAttachment.getProperties(); if (properties != null) { hostNic.setProperties(org.ovirt.engine.api.restapi.utils.CustomPropertiesParser.fromMap(properties)); } }	private void setCustomProperties(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsByNetworkId, java.util.Map<java.lang.String, org.ovirt.engine.core.compat.Guid> networkNameToNetworkIdMap, org.ovirt.engine.api.model.HostNIC hostNic) { org.ovirt.engine.api.model.Network network = hostNic.getNetwork(); if (network == null) { return; } java.lang.String networkName = network.getName(); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = attachmentsByNetworkId.get(networkNameToNetworkIdMap.get(networkName)); if (networkAttachment == null) { return; } java.util.Map<java.lang.String, java.lang.String> properties = networkAttachment.getProperties(); if (properties != null) { hostNic.setProperties(org.ovirt.engine.api.restapi.utils.CustomPropertiesParser.fromMap(properties)); } }
private org.ovirt.engine.core.common.action.CustomPropertiesForVdsNetworkInterface nicsToCustomProperties(java.util.List<org.ovirt.engine.api.<START_MOD>restapi.resource.HostNic<END_MOD>> hostNics, org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingNicsMapping) { org.ovirt.engine.core.common.action.CustomPropertiesForVdsNetworkInterface result = new org.ovirt.engine.core.common.action.CustomPropertiesForVdsNetworkInterface(); for (org.ovirt.engine.api.model.HostNIC hostNic : hostNics) { <START_MOD>java.lang.String hostNicName = hostNic.getName(); java.lang.String nicName = (org.apache.commons.lang.StringUtils.isEmpty(hostNicName)) ? existingNicsMapping.get(hostNic.getId()).getName() : hostNicName; org.ovirt.engine.api.model.Properties properties =<END_MOD> (hostNic.isSetProperties()) ? <START_MOD>hostNic.getProperties<END_MOD>() : <START_MOD>new org.ovirt.engine.api.model.Properties()<END_MOD>; result.add(nicName, org.ovirt.engine.api.restapi.utils.CustomPropertiesParser.toMap(<START_MOD>properties<END_MOD>)); } <START_MOD>return result; <END_MOD>}	private org.ovirt.engine.core.common.action.CustomPropertiesForVdsNetworkInterface nicsToCustomProperties(java.util.List<org.ovirt.engine.api.model.HostNIC> hostNics, org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingNicsMapping) { org.ovirt.engine.core.common.action.CustomPropertiesForVdsNetworkInterface result = new org.ovirt.engine.core.common.action.CustomPropertiesForVdsNetworkInterface(); for (org.ovirt.engine.api.model.HostNIC hostNic : hostNics) { java.lang.String hostNicName = hostNic.getName(); java.lang.String nicName = (org.apache.commons.lang.StringUtils.isEmpty(hostNicName)) ? existingNicsMapping.get(hostNic.getId()).getName() : hostNicName; org.ovirt.engine.api.model.Properties properties = (hostNic.isSetProperties()) ? hostNic.getProperties() : new org.ovirt.engine.api.model.Properties(); result.add(nicName, org.ovirt.engine.api.restapi.utils.CustomPropertiesParser.toMap(properties)); } return result; }
@java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i) { return !(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(i.getBondName())); }	@java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i) { return org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(i.getBondName()); }
public static java.util.Collection<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> findAllInterfaceBondNameIsEmpty(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> items) { <START_MOD>return org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.ui.uicommonweb.Linq.where(items, new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<END_MOD><org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface><START_MOD>()<END_MOD> <START_MOD>{<END_MOD> <START_MOD>@<END_MOD>java.<START_MOD>lang<END_MOD>.<START_MOD>Override<END_MOD> <START_MOD>public<END_MOD> <START_MOD>boolean match<END_MOD>(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i) { <START_MOD>return<END_MOD> <START_MOD>!<END_MOD>(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(i.getBondName())); } }<START_MOD>)<END_MOD>; }	public static java.util.Collection<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> findAllInterfaceBondNameIsEmpty(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> items) { return org.ovirt.engine.ui.uicommonweb.Linq.where(items, new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>() { @java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i) { return org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(i.getBondName()); } }); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getVmsByOrigins(java.util.List<org.ovirt.engine.core.common.businessentities.OriginType> origins) { return getCallsHandler().executeReadList("GetVmsByOrigin", org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("origins", createArrayOf("int", origins.toArray()))); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getVmsByOrigins(java.util.List<org.ovirt.engine.core.common.businessentities.OriginType> origins) { java.lang.Object[] originValues = origins.stream().map(OriginType::getValue).toArray(); return getCallsHandler().executeReadList("GetVmsByOrigin", org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("origins", createArrayOf("int", originValues))); }
private void migrateAllVdss() { for (org.ovirt.engine.core.compat.Guid vdsId : vdssToMaintenance.keySet()) { org.ovirt.engine.core.common.action.MaintenanceVdsParameters tempVar = new org.ovirt.engine.core.common.action.MaintenanceVdsParameters(vdsId, org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getParameters().getIsInternal()<START_MOD>, org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getParameters().getIsStopGlusterProcesses()<END_MOD>); tempVar.setSessionId(org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getParameters().getSessionId()); tempVar.setCorrelationId(org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getParameters().getCorrelationId()); org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.MaintenanceVds, tempVar, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getContext())); if (!(result.isValid())) { org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getReturnValue().getValidationMessages().addAll(result.getValidationMessages()); org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getReturnValue().setValid(false); } } }	private void migrateAllVdss() { for (org.ovirt.engine.core.compat.Guid vdsId : vdssToMaintenance.keySet()) { org.ovirt.engine.core.common.action.MaintenanceVdsParameters tempVar = new org.ovirt.engine.core.common.action.MaintenanceVdsParameters(vdsId, org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getParameters().getIsInternal(), org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getParameters().isStopGlusterService()); tempVar.setSessionId(org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getParameters().getSessionId()); tempVar.setCorrelationId(org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getParameters().getCorrelationId()); org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.MaintenanceVds, tempVar, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getContext())); if (!(result.isValid())) { org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getReturnValue().getValidationMessages().addAll(result.getValidationMessages()); org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getReturnValue().setValid(false); } } }
public void maintenance() { org.ovirt.engine.core.compat.Guid clusterId = getClusterIdOfSelectedHosts(); if (clusterId == null) { maintenance(<START_MOD>false, <END_MOD>false); } else { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterById(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.Cluster cluster = ((org.ovirt.engine.core.common.businessentities.Cluster) (returnValue)); if (cluster != null) { maintenance(cluster.isMaintenanceReasonRequired()<START_MOD>, cluster.supportsGlusterService()<END_MOD>); } } }), clusterId); } }	public void maintenance() { org.ovirt.engine.core.compat.Guid clusterId = getClusterIdOfSelectedHosts(); if (clusterId == null) { maintenance(false, false); } else { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterById(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.Cluster cluster = ((org.ovirt.engine.core.common.businessentities.Cluster) (returnValue)); if (cluster != null) { maintenance(cluster.isMaintenanceReasonRequired(), ((cluster.supportsGlusterService()) && (org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterFeaturesUtil.isStopGlusterProcessesSupported(cluster.getCompatibilityVersion())))); } } }), clusterId); } }
@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.bll.MaintenanceVdsCommand.getVds(); if ((vds.getClusterSupportsGlusterService()) && (org.ovirt.engine.core.bll.MaintenanceVdsCommand.getParameters().getIsStopGlusterProcesses())) { return new org.ovirt.engine.core.bll.HostMaintenanceCallback(); } else { return super.getCallback(); } }	@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { if ((org.ovirt.engine.core.bll.MaintenanceVdsCommand.getVds().getClusterSupportsGlusterService()) && (org.ovirt.engine.core.bll.MaintenanceVdsCommand.getParameters().isStopGlusterService())) { return new org.ovirt.engine.core.bll.HostMaintenanceCallback(); } else { return super.getCallback(); } }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Stop Gluster processes") java.lang.String stopGlusterServices();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("Stop Gluster service") java.lang.String stopGlusterServices();
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.Cluster cluster = ((org.ovirt.engine.core.common.businessentities.Cluster) (returnValue)); if (cluster != null) { maintenance(cluster.isMaintenanceReasonRequired()<START_MOD>, cluster.supportsGlusterService()<END_MOD>); } }	@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.Cluster cluster = ((org.ovirt.engine.core.common.businessentities.Cluster) (returnValue)); if (cluster != null) { maintenance(cluster.isMaintenanceReasonRequired(), ((cluster.supportsGlusterService()) && (org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterFeaturesUtil.isStopGlusterProcessesSupported(cluster.getCompatibilityVersion())))); } }
private void maintenance(boolean isMaintenanceReasonVisible<START_MOD>, boolean isGlusterSupported<END_MOD>) { if ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getConfirmWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().maintenanceHostsTitle()); model.setHelpTag(HelpTag.maintenance_host); model.setHashName("maintenance_host"); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().areYouSureYouWantToPlaceFollowingHostsIntoMaintenanceModeMsg()); model.setReasonVisible(isMaintenanceReasonVisible);<START_MOD> if (isGlusterSupported) { model.getForce().setIsAvailable(true); model.setForceLabel(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().stopGlusterServices()); model.getForce().setEntity(false); }<END_MOD> java.util.ArrayList<java.lang.String> vdss = new java.util.ArrayList<>(); for (java.lang.Object item : org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getSelectedItems()) { org.ovirt.engine.core.common.businessentities.VDS vds = ((org.ovirt.engine.core.common.businessentities.VDS) (item)); vdss.add(vds.getName()); } model.setItems(vdss); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnMaintenance", this); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("CancelConfirm", this); model.getCommands().add(tempVar2); }	private void maintenance(boolean isMaintenanceReasonVisible, boolean isStopGlusterServiceRequired) { if ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getConfirmWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().maintenanceHostsTitle()); model.setHelpTag(HelpTag.maintenance_host); model.setHashName("maintenance_host"); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().areYouSureYouWantToPlaceFollowingHostsIntoMaintenanceModeMsg()); model.setReasonVisible(isMaintenanceReasonVisible); if (isStopGlusterServiceRequired) { model.getForce().setIsAvailable(true); model.setForceLabel(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().stopGlusterServices()); model.getForce().setEntity(false); } java.util.ArrayList<java.lang.String> vdss = new java.util.ArrayList<>(); for (java.lang.Object item : org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getSelectedItems()) { org.ovirt.engine.core.common.businessentities.VDS vds = ((org.ovirt.engine.core.common.businessentities.VDS) (item)); vdss.add(vds.getName()); } model.setItems(vdss); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnMaintenance", this); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("CancelConfirm", this); model.getCommands().add(tempVar2); }
private static java.util.<START_MOD>Collection<END_MOD><org.ovirt.engine.api.extensions.ExtMap> flatGroups(org.ovirt.engine.api.extensions.ExtMap entity, org.ovirt.engine.api.extensions.ExtKey key, java.util.<START_MOD>Map<java.lang.String, <END_MOD>org.ovirt.engine.api.extensions.ExtMap> accumulator) { for (org.ovirt.engine.api.extensions.ExtMap group : entity.<java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>>get(key, java.util.Collections.<org.ovirt.engine.api.extensions.ExtMap>emptyList())) { <START_MOD>if (!(accumulator.containsKey(group.<java.lang.String>get(GroupRecord.ID)))) { accumulator.put(group.<java.lang.String>get(GroupRecord.ID), <END_MOD>group); org.ovirt.engine.core.bll.aaa.DirectoryUtils.flatGroups(group, GroupRecord.GROUPS, accumulator); } <START_MOD>} <END_MOD>return accumulator<START_MOD>.values()<END_MOD>; }	private static void flatGroups(org.ovirt.engine.api.extensions.ExtMap entity, org.ovirt.engine.api.extensions.ExtKey key, java.util.Map<java.lang.String, org.ovirt.engine.api.extensions.ExtMap> accumulator) { for (org.ovirt.engine.api.extensions.ExtMap group : entity.<java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>>get(key, java.util.Collections.<org.ovirt.engine.api.extensions.ExtMap>emptyList())) { if (!(accumulator.containsKey(group.<java.lang.String>get(GroupRecord.ID)))) { accumulator.put(group.<java.lang.String>get(GroupRecord.ID), group); org.ovirt.engine.core.bll.aaa.DirectoryUtils.flatGroups(group, GroupRecord.GROUPS, accumulator); } } }
public static void flatGroups(org.ovirt.engine.api.extensions.ExtMap principal) { principal.put(PrincipalRecord.GROUPS, <START_MOD>new java.util.ArrayList(<END_MOD>org.ovirt.engine.core.bll.aaa.DirectoryUtils.flatGroups(principal, PrincipalRecord.GROUPS, new java.util.<START_MOD>HashMap<END_MOD><<START_MOD>java.lang.String, <END_MOD>org.ovirt.engine.api.extensions.ExtMap>()))<START_MOD>)<END_MOD>; }	public static void flatGroups(org.ovirt.engine.api.extensions.ExtMap principal) { java.util.Map<java.lang.String, org.ovirt.engine.api.extensions.ExtMap> accumulator = new java.util.HashMap<>(); org.ovirt.engine.core.bll.aaa.DirectoryUtils.flatGroups(principal, PrincipalRecord.GROUPS, accumulator); principal.put(PrincipalRecord.GROUPS, new java.util.ArrayList(accumulator.values())); }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { java.lang.Integer applicationMode = getApplicationMode(getEngineSessionId(request)); request.setAttribute(org.ovirt.engine.ui.frontend.server.gwt.WebAdminHostPageServlet.ATTR_APPLICATION_MODE, getApplicationModeObject(applicationMode)); java.util.List<org.ovirt.engine.ui.frontend.server.gwt.plugin.PluginData> pluginData = getPluginData(); request.setAttribute(org.ovirt.engine.ui.frontend.server.gwt.WebAdminHostPageServlet.ATTR_PLUGIN_DEFS, getPluginDefinitionsArray(pluginData)); request.setAttribute(org.ovirt.engine.ui.frontend.server.gwt.WebAdminHostPageServlet.ATTR_ENGINE_REPORTS_BASE_URL, getReportInit(reportRedirectUrl.substring(reportBaseUrl.length()), reportRightClickRedirectUrl.substring(reportBaseUrl.length()))); <START_MOD>request.setAttribute(org.ovirt.engine.ui.frontend.server.gwt.WebAdminHostPageServlet.ATTR_DISPLAY_SUPPORTED_BROWSER_WARNING, getValueObject(java.lang.String.valueOf(getDisplaySupportedBrowserWarning()))); <END_MOD>super.doGet(request, response); }	@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { java.lang.Integer applicationMode = getApplicationMode(getEngineSessionId(request)); request.setAttribute(org.ovirt.engine.ui.frontend.server.gwt.WebAdminHostPageServlet.ATTR_APPLICATION_MODE, getApplicationModeObject(applicationMode)); java.util.List<org.ovirt.engine.ui.frontend.server.gwt.plugin.PluginData> pluginData = getPluginData(); request.setAttribute(org.ovirt.engine.ui.frontend.server.gwt.WebAdminHostPageServlet.ATTR_PLUGIN_DEFS, getPluginDefinitionsArray(pluginData)); request.setAttribute(org.ovirt.engine.ui.frontend.server.gwt.WebAdminHostPageServlet.ATTR_ENGINE_REPORTS_BASE_URL, getReportInit(reportRedirectUrl.substring(reportBaseUrl.length()), reportRightClickRedirectUrl.substring(reportBaseUrl.length()))); request.setAttribute(org.ovirt.engine.ui.frontend.server.gwt.WebAdminHostPageServlet.ATTR_DISPLAY_SUPPORTED_BROWSER_WARNING, (getDisplaySupportedBrowserWarning() ? org.codehaus.jackson.node.BooleanNode.TRUE : org.codehaus.jackson.node.BooleanNode.FALSE)); super.doGet(request, response); }
private void displayBrowserCompatibilityWarning() { if ((!(internalConfiguration.isCurrentBrowserSupported())) && (org.ovirt.engine.ui.webadmin.DisplayBrowserCompatibilityWarning.getValue())) { final org.ovirt.engine.ui.common.widget.panel.AlertPanel alert = getAlertManager().showAlert(Type.WARNING, com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(constants.browserNotSupported())); final com.google.gwt.user.client.Timer timer = new com.google.gwt.user.client.Timer() { @java.lang.Override public void run() { getAlertManager().detachAlert(alert); } }; alert.getWidget().addCloseHandler(new org.gwtbootstrap3.client.shared.event.AlertCloseHandler() { @java.lang.Override public void onClose(org.gwtbootstrap3.client.shared.event.AlertCloseEvent evt) { timer.cancel(); } }); timer.schedule(5000); } }	private void displayBrowserCompatibilityWarning() { if ((!(internalConfiguration.isCurrentBrowserSupported())) && (org.ovirt.engine.ui.webadmin.DisplayBrowserCompatibilityWarning.getValue())) { getAlertManager().showAlert(Type.WARNING, com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(messages.browserNotSupported(dynamicMessages.compatibleBrowserDocsUrl())), 5000); } }
public <START_MOD>org.ovirt.engine.ui.common.widget.panel.AlertPanel<END_MOD> showAlert(final org.ovirt.engine.ui.common.widget.panel.AlertPanel.Type type, final com.google.gwt.safehtml.shared.SafeHtml message) {<START_MOD> final org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel = createAlert(type, message);<END_MOD> com.google.gwt.core.client.Scheduler.ScheduledCommand command = new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { attachAlert(<START_MOD>alertPanel<END_MOD>); } }; if (canShowAlerts) { command.execute(); } else { deferredAlertCommands.add(command); } <START_MOD>return alertPanel; <END_MOD>}	public void showAlert(final org.ovirt.engine.ui.common.widget.panel.AlertPanel.Type type, final com.google.gwt.safehtml.shared.SafeHtml message) { showAlert(type, message, 0); }
public static java.lang.Boolean getValue() { return java.lang.Boolean.valueOf(org.ovirt.engine.ui.webadmin.DisplayBrowserCompatibilityWarning.getValueString()); }	public static native boolean getValue();
public void detachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().remove(alertPanel); }	void detachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().remove(alertPanel); }
public org.ovirt.engine.core.bll.ValidationResult passthroughProfileIsSupported() { org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = dcDao.get(getNetwork().getDataCenterId()); org.ovirt.engine.core.compat.Version dcCompVer = dataCenter.getCompatibilityVersion(); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_PASSTHROUGH_PROFILE_NOT_SUPPORTED).when(((vnicProfile.isPassthrough()) && (!(org.ovirt.engine.core.common.FeatureSupported.sriov(dcCompVer))))); }	public org.ovirt.engine.core.bll.ValidationResult passthroughProfileIsSupported() { org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = dcDao.get(getNetwork().getDataCenterId()); org.ovirt.engine.core.compat.Version dcCompatibilityVersion = dataCenter.getCompatibilityVersion(); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_PASSTHROUGH_PROFILE_NOT_SUPPORTED).when(((vnicProfile.isPassthrough()) && (!(org.ovirt.engine.core.common.FeatureSupported.sriov(dcCompatibilityVersion))))); }
@java.lang.Override public javax.ws.rs.core.Response deactivate(org.ovirt.engine.api.model.Action action) {<START_MOD> boolean stopGlusterService = org.ovirt.engine.api.restapi.resource.QueryHelper.getBooleanMatrixParameter(uriInfo, org.ovirt.engine.api.restapi.resource.BackendHostResource.STOP_GLUSTER_SERVICE, true, false);<END_MOD> return doAction(VdcActionType.MaintenanceNumberOfVdss, new org.ovirt.engine.core.common.action.MaintenanceNumberOfVdssParameters(asList(guid), false, (action.isSetReason() ? action.getReason() : null)<START_MOD>, stopGlusterService<END_MOD>), action); }	@java.lang.Override public javax.ws.rs.core.Response deactivate(org.ovirt.engine.api.model.Action action) { return doAction(VdcActionType.MaintenanceNumberOfVdss, new org.ovirt.engine.core.common.action.MaintenanceNumberOfVdssParameters(asList(guid), false, (action.isSetReason() ? action.getReason() : null), getBooleanMatrixParam(org.ovirt.engine.api.restapi.resource.BackendHostResource.STOP_GLUSTER_SERVICE)), action); }
private void stopGlusterServices(org.ovirt.engine.core.compat.Guid vdsId) { org.ovirt.engine.core.vdsbroker.ResourceManager resourceManager = org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance(); org.ovirt.engine.core.dao.gluster.GlusterBrickDao glusterBrickDao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getGlusterBrickDao(); boolean succeeded = resourceManager.runVdsCommand(VDSCommandType.ManageGlusterService, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterServiceVDSParameters(vdsId, java.util.Arrays.asList("glusterd"), "stop")).getSucceeded(); if (succeeded) { succeeded = resourceManager.runVdsCommand(VDSCommandType.StopGlusterProcesses, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(vdsId)).getSucceeded(); if (succeeded) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricks = glusterBrickDao.getGlusterVolumeBricksByServerId(vdsId); bricks.stream().forEach(( brick) -> brick.setStatus(GlusterStatus.DOWN)); glusterBrickDao.updateBrickStatuses(bricks); } } if (!succeeded) { org.ovirt.engine.core.bll.HostMaintenanceCallback.log.error("Failed to stop gluster services while moving the host '{}' to maintenance", getHostName(vdsId)); } }	private void stopGlusterServices(org.ovirt.engine.core.compat.Guid vdsId) { org.ovirt.engine.core.vdsbroker.ResourceManager resourceManager = org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance(); org.ovirt.engine.core.dao.gluster.GlusterBrickDao glusterBrickDao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getGlusterBrickDao(); boolean succeeded = resourceManager.runVdsCommand(VDSCommandType.ManageGlusterService, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterServiceVDSParameters(vdsId, java.util.Arrays.asList("glusterd"), "stop")).getSucceeded(); if (succeeded) { succeeded = resourceManager.runVdsCommand(VDSCommandType.StopGlusterProcesses, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(vdsId)).getSucceeded(); if (succeeded) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricks = glusterBrickDao.getGlusterVolumeBricksByServerId(vdsId); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : bricks) { brick.setStatus(GlusterStatus.DOWN); } glusterBrickDao.updateBrickStatuses(bricks); } } if (!succeeded) { org.ovirt.engine.core.bll.HostMaintenanceCallback.log.error("Failed to stop gluster services while moving the host '{}' to maintenance", getHostName(vdsId)); } }
@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { if ((org.ovirt.engine.core.bll.MaintenanceVdsCommand.getVds().getClusterSupportsGlusterService()) && (org.ovirt.engine.core.bll.MaintenanceVdsCommand.getParameters().isStopGlusterService())) { return new org.ovirt.engine.core.bll.HostMaintenanceCallback(); } else { return super.getCallback(); } }	@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { if ((org.ovirt.engine.core.bll.MaintenanceVdsCommand.getVds().getVdsGroupSupportsGlusterService()) && (org.ovirt.engine.core.bll.MaintenanceVdsCommand.getParameters().isStopGlusterService())) { return new org.ovirt.engine.core.bll.HostMaintenanceCallback(); } else { return super.getCallback(); } }
private boolean hasDifferentTimezone(org.ovirt.engine.core.common.businessentities.VM vm) { <START_MOD>if (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isWindowsOsType(vm.getVmOsId())) { <END_MOD>java.lang.String timeZone = vm.getTimeZone(); if ((timeZone != null) && (!(timeZone.isEmpty()))) { int offset = 0; java.lang.String javaZoneId = null; if (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isWindowsOsType(vm.getVmOsId())) { javaZoneId = <START_MOD>org.ovirt.engine.core.compat.<END_MOD>WindowsJavaTimezoneMapping.get(timeZone); } else { javaZoneId = timeZone; } if (javaZoneId != null) { offset = TimeZoneType.GENERAL_TIMEZONE.getStandardOffset(javaZoneId); } if ((vm.getGuestOsTimezoneOffset()) != offset) { return true; } } <START_MOD>} <END_MOD>return false; }	private boolean hasDifferentTimezone(org.ovirt.engine.core.common.businessentities.VM vm) { if (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isWindowsOsType(vm.getVmOsId())) { java.lang.String timeZone = vm.getTimeZone(); if ((timeZone != null) && (!(timeZone.isEmpty()))) { int offset = 0; java.lang.String javaZoneId = null; if (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isWindowsOsType(vm.getVmOsId())) { javaZoneId = WindowsJavaTimezoneMapping.windowsToJava.get(timeZone); } else { javaZoneId = timeZone; } if (javaZoneId != null) { offset = TimeZoneType.GENERAL_TIMEZONE.getStandardOffset(javaZoneId); } if ((vm.getGuestOsTimezoneOffset()) != offset) { return true; } } } return false; }
private boolean checkStorageDomainsInPool() { if (!(org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getParameters().getIsInternal())) { boolean hasData = false; org.ovirt.engine.core.common.businessentities.StorageFormatType storageFormat = null; for (org.ovirt.engine.core.compat.Guid storageDomainId : org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getParameters().getStorages()) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().get(storageDomainId); org.ovirt.engine.core.bll.validator.storage.StorageDomainToPoolRelationValidator storageDomainToPoolRelationValidator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainToPoolRelationValidator(domain.getStorageStaticData(), org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getStoragePool()); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator domainValidator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(domain); if ((isStorageDomainNotNull(domain)) && (validate(storageDomainToPoolRelationValidator.validateDomainCanBeAttachedToPool()))) { if ((domain.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Data)) { hasData = true; if (storageFormat == null) { storageFormat = domain.getStorageFormat(); } else if (storageFormat != (domain.getStorageFormat())) { addValidationMessage(EngineMessage.ERROR_CANNOT_ADD_STORAGE_POOL_WITH_DIFFERENT_STORAGE_FORMAT); return false; } } } else { return false; } } if (!hasData) { addValidationMessage(EngineMessage.ERROR_CANNOT_ADD_STORAGE_POOL_WITHOUT_DATA_AND_ISO_DOMAINS); return false; } } return true; }	private boolean checkStorageDomainsInPool() { if (!(org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getParameters().getIsInternal())) { boolean hasData = false; org.ovirt.engine.core.common.businessentities.StorageFormatType storageFormat = null; for (org.ovirt.engine.core.compat.Guid storageDomainId : org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getParameters().getStorages()) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().get(storageDomainId); org.ovirt.engine.core.bll.validator.storage.StorageDomainToPoolRelationValidator storageDomainToPoolRelationValidator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainToPoolRelationValidator(domain.getStorageStaticData(), org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getStoragePool()); if ((isStorageDomainNotNull(domain)) && (validate(storageDomainToPoolRelationValidator.validateDomainCanBeAttachedToPool()))) { if ((domain.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Data)) { hasData = true; if (storageFormat == null) { storageFormat = domain.getStorageFormat(); } else if (storageFormat != (domain.getStorageFormat())) { addValidationMessage(EngineMessage.ERROR_CANNOT_ADD_STORAGE_POOL_WITH_DIFFERENT_STORAGE_FORMAT); return false; } } } else { return false; } } if (!hasData) { addValidationMessage(EngineMessage.ERROR_CANNOT_ADD_STORAGE_POOL_WITHOUT_DATA_AND_ISO_DOMAINS); return false; } } return true; }
public static boolean isUpdateValidForMigrationPolicy(org.ovirt.engine.core.common.businessentities.VM recentVm, org.ovirt.engine.core.common.businessentities.VM paramVm) { if (((recentVm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) || ((recentVm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Paused))) { if (((org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST) == (recentVm.getMigrationSupport())) && ((org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST) != (paramVm.getMigrationSupport()))) { return false; } } return true; }	public static boolean isCpuSupported(int osId, org.ovirt.engine.core.compat.Version version, java.lang.String cpuName, java.util.ArrayList<java.lang.String> validationMessages) { java.lang.String cpuId = org.ovirt.engine.core.bll.VmHandler.cpuFlagsManagerHandler.getCpuId(cpuName, version); if (cpuId == null) { validationMessages.add(EngineMessage.CPU_TYPE_UNKNOWN.name()); return false; } if (!(org.ovirt.engine.core.bll.VmHandler.osRepository.isCpuSupported(osId, version, cpuId))) { java.lang.String unsupportedCpus = org.ovirt.engine.core.bll.VmHandler.osRepository.getUnsupportedCpus(osId, version).toString(); validationMessages.add(EngineMessage.CPU_TYPE_UNSUPPORTED_FOR_THE_GUEST_OS.name()); validationMessages.add(("$unsupportedCpus " + (org.apache.commons.lang.StringUtils.strip(unsupportedCpus.toString(), "[]")))); return false; } return true; }
public static org.ovirt.engine.core.bll.ValidationResult isPinnedVmRunningOnDedicatedHost(org.ovirt.engine.core.common.businessentities.VM recentVm, org.ovirt.engine.core.common.businessentities.VmStatic paramVm) { if ((paramVm.getMigrationSupport()) != (org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if (((recentVm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) || ((recentVm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Paused))) { if (paramVm.getDedicatedVmForVdsList().contains(recentVm.getRunOnVds())) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.lang.String hostName = java.lang.String.format("$hostName %s", recentVm.getRunOnVdsName()); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PINNED_VM_NOT_RUNNING_ON_DEDICATED_HOST, hostName, hostName); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult isPinnedVmRunningOnDedicatedHost(org.ovirt.engine.core.common.businessentities.VM recentVm, org.ovirt.engine.core.common.businessentities.VmStatic paramVm) { boolean isPinned = (paramVm.getMigrationSupport()) == (org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST); org.ovirt.engine.core.compat.Guid vdsId = recentVm.getRunOnVds(); java.util.List<org.ovirt.engine.core.compat.Guid> hostList = paramVm.getDedicatedVmForVdsList(); if (((isPinned && (vdsId != null)) && (!(hostList.isEmpty()))) && (!(hostList.contains(vdsId)))) { java.lang.String hostName = java.lang.String.format("$hostName %1$s", recentVm.getRunOnVdsName()); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PINNED_VM_NOT_RUNNING_ON_DEDICATED_HOST, hostName, hostName); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Running VM is hosted on {hostName}. Include {hostName} in dedicated hosts, or migrate VM to dedicated host prior to pinning.") java.lang.String ACTION_TYPE_FAILED_PINNED_VM_NOT_RUNNING_ON_DEDICATED_HOST();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Sub Version of selected template (${subVersionId}) is being concurrently removed. Please wait and try again later.") java.lang.String ACTION_TYPE_FAILED_SUBVERSION_BEING_CONCURRENTLY_REMOVED();
private boolean isRunningConfigurationNeeded() { return ((<START_MOD>(<END_MOD>org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isNextRunConfigurationExists()) || (!(org.ovirt.engine.core.bll.VmHandler.isUpdateValid(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus(), isHotSetEnabled())))) || (!(org.ovirt.engine.core.bll.VmHandler.isUpdateValidForVmDevices(getVmId(), org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus(), org.ovirt.engine.core.bll.UpdateVmCommand.getParameters())))<START_MOD>) || (!(org.ovirt.engine.core.bll.VmHandler.isUpdateValidForMigrationPolicy(org.ovirt.engine.core.bll.UpdateVmCommand.getVm(), org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVm())))<END_MOD>; }	private boolean isRunningConfigurationNeeded() { return ((org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isNextRunConfigurationExists()) || (!(org.ovirt.engine.core.bll.VmHandler.isUpdateValid(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus(), isHotSetEnabled())))) || (!(org.ovirt.engine.core.bll.VmHandler.isUpdateValidForVmDevices(getVmId(), org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus(), org.ovirt.engine.core.bll.UpdateVmCommand.getParameters()))); }
public static org.ovirt.engine.core.bll.ValidationResult checkVmNumaNodesIntegrity(org.ovirt.engine.core.common.businessentities.VM paramsVm, org.ovirt.engine.core.common.businessentities.VM actualVm, boolean isNumaChanged) { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> paramVmNumaNodes = paramsVm.getvNumaNodeList(); boolean emptyParamVmNumaNodes = (paramVmNumaNodes == null) || (paramVmNumaNodes.isEmpty()); java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> origVmNumaNodes = org.ovirt.engine.core.<START_MOD>di.Injector.get(org.ovirt.engine.core.<END_MOD>dal.dbbroker.DbFacade.<START_MOD>class<END_MOD>).getVmNumaNodeDao().getAllVmNumaNodeByVmId(actualVm.getId()); boolean emptyOrigVmNumaNodes = (origVmNumaNodes == null) || (origVmNumaNodes.isEmpty()); int NUMAnodesCount = 0; if (emptyParamVmNumaNodes && emptyOrigVmNumaNodes) { return ValidationResult.VALID; } if (emptyParamVmNumaNodes && (!emptyOrigVmNumaNodes)) { NUMAnodesCount = origVmNumaNodes.size(); if (isNumaChanged == true) return ValidationResult.VALID; } if (!emptyParamVmNumaNodes) { NUMAnodesCount = paramVmNumaNodes.size(); } int cpuCount = paramsVm.getNumOfCpus(); if (cpuCount < NUMAnodesCount) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_MORE_NODES_THAN_CPUS, java.lang.String.format( %d NUMAnodesCount), java.lang.String.format( %d cpuCount)); } return ValidationResult.VALID; }	public static void autoSelectUsbPolicy(org.ovirt.engine.core.common.businessentities.VmBase fromParams, org.ovirt.engine.core.common.businessentities.Cluster cluster) { if ((fromParams.getUsbPolicy()) == null) { org.ovirt.engine.core.compat.Version compatibilityVersion = org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(fromParams, cluster); org.ovirt.engine.core.common.businessentities.UsbPolicy usbPolicy = ((compatibilityVersion.compareTo(Version.v3_1)) >= 0) ? org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE : org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_LEGACY; fromParams.setUsbPolicy(usbPolicy); } }
@java.lang.Override public void postDataCenterWithClusterSelectedItemChanged() { updateQuotaByCluster(<START_MOD>vm.getQuotaId()<END_MOD>, <START_MOD>vm.getQuotaName()<END_MOD>); updateMemoryBalloon(); updateCpuSharesAvailability(); updateVirtioScsiAvailability(); updateOSValues(); updateTemplate(); updateNumOfSockets(); if ((getModel().getSelectedCluster()) != null) { updateCpuProfile(getModel().getSelectedCluster().getId(), getModel().getSelectedCluster().getCompatibilityVersion(), vm.getCpuProfileId()); } updateCustomPropertySheet(); getModel().getCustomPropertySheet().deserialize(vm.getCustomProperties()); }	@java.lang.Override public void postDataCenterWithClusterSelectedItemChanged() { updateQuotaByCluster(vm.getQuotaId(), vm.getQuotaName()); updateMemoryBalloon(); updateCpuSharesAvailability(); updateVirtioScsiAvailability(); updateOSValues(); updateTemplate(); updateNumOfSockets(); if ((getModel().getSelectedCluster()) != null) { updateCpuProfile(getModel().getSelectedCluster().getId(), getCompatibilityVersion(), vm.getCpuProfileId()); } updateCustomPropertySheet(); getModel().getCustomPropertySheet().deserialize(vm.getCustomProperties()); }
@java.lang.Override public void onSuccess(java.lang.Object innerModel, java.lang.Object innerReturnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Quota> quotaList = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (innerReturnValue)).getReturnValue(); if ((quotaList != null) && (!(quotaList.isEmpty()))) { getQuota().setItems(quotaList); } org.ovirt.engine.core.compat.Guid <START_MOD>diskQuota = ((getDisk()) != null) ? ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDisk())).getQuotaId() : null; org.ovirt.engine.core.compat.Guid vmQuota = ((getVm()) != null) ? getVm().getQuotaId() : null; org.ovirt.engine.core.compat.Guid <END_MOD>defaultQuota = (<START_MOD>diskQuota<END_MOD> != null) ? <START_MOD>diskQuota : vmQuota; if (defaultQuota == null) { return; } for <END_MOD>(org.ovirt.engine.core.common.businessentities.<START_MOD>Quota quota<END_MOD> : <START_MOD>quotaList) {<END_MOD> if (<START_MOD>quota.getId().equals(<END_MOD>defaultQuota<START_MOD>)) { getQuota().setSelectedItem(quota); return; } } if (diskQuota<END_MOD> != null) { org.ovirt.engine.core.common.businessentities.Quota quota <START_MOD>= new org.ovirt.engine.core.common.businessentities.Quota(); quota.setId(diskQuota); quota.setQuotaName(getDiskImage().getQuotaName()); quotaList.add(quota);<END_MOD> getQuota().<START_MOD>setItems(quotaList); getQuota().<END_MOD>setSelectedItem(quota); <START_MOD>} }<END_MOD>	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.Quota> quotaList = ((java.util.List<org.ovirt.engine.core.common.businessentities.Quota>) (returnValue)); if ((quotaList != null) && (!(quotaList.isEmpty()))) { getQuota().setItems(quotaList); if (quotaList.get(0).getId().equals(defaultQuota)) { return; } } if (diskQuota != null) { org.ovirt.engine.core.common.businessentities.Quota quota = new org.ovirt.engine.core.common.businessentities.Quota(); quota.setId(diskQuota); quota.setQuotaName(getDiskImage().getQuotaName()); if (quotaList == null) { quotaList = new java.util.ArrayList(); } quotaList.add(quota); getQuota().setItems(quotaList); getQuota().setSelectedItem(quota); } }
protected org.ovirt.engine.core.common.businessentities.storage.DiskImage <START_MOD>getImageInfo(final org.ovirt.engine.core.compat.Guid storagePoolId, final org.ovirt.engine.core.compat.Guid storageId, final org.ovirt.engine.core.compat.Guid diskId, final org.ovirt.engine.core.compat.Guid imageId<END_MOD>) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue ret = runVdsCommand(VDSCommandType.GetImageInfo, new org.ovirt.engine.core.common.vdscommands.GetImageInfoVDSCommandParameters(<START_MOD>storagePoolId<END_MOD>, <START_MOD>storageId<END_MOD>, <START_MOD>diskId<END_MOD>, <START_MOD>imageId<END_MOD>)); <START_MOD>return<END_MOD> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (ret.getReturnValue())); }	protected org.ovirt.engine.core.common.businessentities.storage.DiskImage getImageInfoFromVdsm(final org.ovirt.engine.core.common.businessentities.storage.DiskImage targetImage) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue ret = runVdsCommand(VDSCommandType.GetImageInfo, new org.ovirt.engine.core.common.vdscommands.GetImageInfoVDSCommandParameters(targetImage.getStoragePoolId(), targetImage.getStorageIds().get(0), targetImage.getId(), targetImage.getImageId())); return ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (ret.getReturnValue())); }
public void onSucceeded() { org.ovirt.engine.core.<START_MOD>common.businessentities.storage.DiskImage imageFromIRS = getImageInfo(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.getDiskImage().getStoragePoolId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.getDiskImage().getStorageIds().get(0), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.getDiskImage().getId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.getDiskImage().getImageId()); org.ovirt.engine.core.<END_MOD>utils.transaction.TransactionSupport.executeInNewTransaction(() -> { syncDbRecords(<START_MOD>imageFromIRS, <END_MOD>true); return null; }); org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.log.info( merged snapshot '{}' images '{}'..'{}' org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.getDiskImage().getImage().getSnapshotId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.getDiskImage().getImageId(), ((org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.getDestinationDiskImage()) != null ? org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.getDestinationDiskImage().getImageId() : "(n/a)")); }	public void onSucceeded() { syncDbRecords(getTargetImageInfoFromVdsm(), true); org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.log.info("Successfully merged snapshot '{}' images '{}'..'{}'", org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.getDiskImage().getImage().getSnapshotId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.getDiskImage().getImageId(), ((org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.getDestinationDiskImage()) != null ? org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.getDestinationDiskImage().getImageId() : "(n/a)")); }
protected org.ovirt.engine.core.common.businessentities.storage.DiskImage getImageInfo(final org.ovirt.engine.core.compat.Guid storagePoolId, final org.ovirt.engine.core.compat.Guid storageId, final org.ovirt.engine.core.compat.Guid diskId, final org.ovirt.engine.core.compat.Guid imageId) { <START_MOD>try { <END_MOD>org.ovirt.engine.core.common.vdscommands.VDSReturnValue ret = runVdsCommand(VDSCommandType.GetImageInfo, new org.ovirt.engine.core.common.vdscommands.GetImageInfoVDSCommandParameters(storagePoolId, storageId, diskId, imageId)); return ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (ret.getReturnValue())); }<START_MOD> catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error( to connect to vdsm to get image info e); return null; } }<END_MOD>	protected org.ovirt.engine.core.common.businessentities.storage.DiskImage getImageInfoFromVdsm(final org.ovirt.engine.core.common.businessentities.storage.DiskImage targetImage) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue ret = runVdsCommand(VDSCommandType.GetImageInfo, new org.ovirt.engine.core.common.vdscommands.GetImageInfoVDSCommandParameters(targetImage.getStoragePoolId(), targetImage.getStorageIds().get(0), targetImage.getId(), targetImage.getImageId())); return ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (ret.getReturnValue())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.warn("Failed to get info of volume '{0}' using GetImageInfo", targetImage.getImageId(), e); return null; } }
public java.util.Map createStoragePool(int poolType, java.lang.String spUUID, java.lang.String poolName, java.lang.String masterDom, java.util.List domList, int masterVersion, java.lang.String lockPolicy, int lockRenewalIntervalSec, int leaseTimeSec, int ioOpTimeoutSec, int leaseRetries) { try { final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.Host host = getActiveHost(); host.setSpUUID(spUUID); updateHost(host); dataCenter.setId(spUUID); dataCenter.setName(poolName); dataCenter.setMasterStorageDomainId(masterDom); dataCenter.setMasterVersion(masterVersion); final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.StorageDomain storageDomain = getStorageDomainById(masterDom); dataCenter.getStorageDomainMap().put(storageDomain.getId(), storageDomain); setMasterDomain(spUUID, masterDom); log.info( pool {} created, master domain: {}, total domains: {} new java.lang.Object[]{ spUUID, dataCenter.getMasterStorageDomainId(), dataCenter.getStorageDomainMap().size() }); return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }	public java.util.Map createStoragePool(int poolType, java.lang.String spUUID, java.lang.String poolName, java.lang.String masterDom, java.util.List domList, int masterVersion, java.lang.String lockPolicy, int lockRenewalIntervalSec, int leaseTimeSec, int ioOpTimeoutSec, int leaseRetries) { try { final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.domain.Host host = getActiveHost(); host.setSpUUID(spUUID); updateHost(host); dataCenter.setId(spUUID); dataCenter.setName(poolName); dataCenter.setMasterStorageDomainId(masterDom); dataCenter.setMasterVersion(masterVersion); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = getStorageDomainById(masterDom); dataCenter.getStorageDomainMap().put(storageDomain.getId(), storageDomain); setMasterDomain(spUUID, masterDom); log.info("Storage pool {} created, master domain: {}, total domains: {}", new java.lang.Object[]{ spUUID, dataCenter.getMasterStorageDomainId(), dataCenter.getStorageDomainMap().size() }); return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }
public synchronized void syncTask(org.ovirt.vdsmfake.service.Host host, org.ovirt.vdsmfake.service.Task task) { if (host == null) { host = getActiveHost(); <START_MOD>log.warn( is null, task {} will be sync by any active host {} task.getName(), host.getName()); <END_MOD>} try { host.getRunningTasks().put(task.getId(), task); log.debug( task:{} to host:{} task.getName(), host.getName()); org.ovirt.vdsmfake.task.TaskProcessor.setTasksMap(host.getName(), task.getId()); } catch (java.lang.Exception e) { log.error( went wrong durring task sync {} e); } }	public synchronized void syncTask(org.ovirt.vdsmfake.service.Host host, org.ovirt.vdsmfake.service.Task task) { if (host == null) { host = getActiveHost(); log.debug("host is null, task {} will be sync by any active host {}", task.getName(), host.getName()); } try { host.getRunningTasks().put(task.getId(), task); log.debug("sync task:{} to host:{}", task.getName(), host.getName()); org.ovirt.vdsmfake.task.TaskProcessor.setTasksMap(host.getName(), task.getId()); } catch (java.lang.Exception e) { log.error("something went wrong durring task sync {}", e); } }
public void removeSpmFromMap(java.lang.String spId) { spmMap.remove(spId); }	public void removeSpmFromMap(java.lang.String spId) { this.spmMap.remove(spId); }
public java.util.Map<java.lang.String, org.ovirt.vdsmfake.domain.Host> getSpmMap() { return this.spmMap; }	public java.util.concurrent.ConcurrentMap getSpmMap() { return this.spmMap; }
public void setSpmMap(java.lang.String spId, org.ovirt.vdsmfake.domain.Host host) { spmMap.put(spId, host); }	public void setSpmMap(java.lang.String spId, org.ovirt.vdsmfake.domain.Host host) { this.spmMap.put(spId, host); }
public java.util.Map connectStorageServer(java.lang.Integer domType, java.lang.String spUUID, java.util.List<java.util.Map> storageDomains) { try { final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.Host host = getActiveHost(); host.setSpUUID(spUUID); updateHost(host); dataCenter.setStorageType(org.ovirt.vdsmfake.domain.StorageDomain.StorageType.getByCode(domType)); updateDataCenter(dataCenter); java.util.Map resultMap = getOKStatus(); java.util.List statusList = new java.util.ArrayList(); resultMap.put("statuslist", statusList); for (int i = 0; (storageDomains != null) && (i < (storageDomains.size())); i++) { final java.util.Map storageDomainMap = storageDomains.get(i); final java.lang.String id = ((java.lang.String) (storageDomainMap.get("id"))); final java.lang.String connection = ((java.lang.String) (storageDomainMap.get("connection"))); log.info( storage domain, spUUID: {} id: {}, connection: {} new java.lang.Object[]{ spUUID, id, connection }); final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.StorageDomain storageDomain = getStorageDomainById(id); storageDomain.setConnection(connection); dataCenter.getStorageDomainMap().put(id, storageDomain); final java.util.Map storageStatusMap = map(); storageStatusMap.put("status", java.lang.Integer.valueOf(0)); storageStatusMap.put("id", id); statusList.add(storageStatusMap); } log.info( server {} connected. spUUID); return resultMap; } catch (java.lang.Exception e) { throw error(e); } }	public java.util.Map connectStorageServer(java.lang.Integer domType, java.lang.String spUUID, java.util.List<java.util.Map> storageDomains) { try { final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.domain.Host host = getActiveHost(); host.setSpUUID(spUUID); updateHost(host); dataCenter.setStorageType(org.ovirt.vdsmfake.domain.StorageDomain.StorageType.getByCode(domType)); updateDataCenter(dataCenter); java.util.Map resultMap = getOKStatus(); java.util.List statusList = new java.util.ArrayList(); resultMap.put("statuslist", statusList); for (int i = 0; (storageDomains != null) && (i < (storageDomains.size())); i++) { final java.util.Map storageDomainMap = storageDomains.get(i); final java.lang.String id = ((java.lang.String) (storageDomainMap.get("id"))); final java.lang.String connection = ((java.lang.String) (storageDomainMap.get("connection"))); log.info("Adding storage domain, spUUID: {} id: {}, connection: {}", new java.lang.Object[]{ spUUID, id, connection }); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = getStorageDomainById(id); storageDomain.setConnection(connection); dataCenter.getStorageDomainMap().put(id, storageDomain); final java.util.Map storageStatusMap = map(); storageStatusMap.put("status", java.lang.Integer.valueOf(0)); storageStatusMap.put("id", id); statusList.add(storageStatusMap); } log.info("Storage server {} connected.", spUUID); return resultMap; } catch (java.lang.Exception e) { throw error(e); } }
public java.util.Map validateStorageServerConnection(java.lang.Integer domType, java.lang.String spUUID, java.util.List<java.util.Map> storageDomains) { try { final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.DataCenter dataCenter = getDataCenterById(spUUID); final java.util.Map resultMap = getOKStatus(); final java.util.List statusList = new java.util.ArrayList(); resultMap.put("statusList", statusList); for (int i = 0; i < (storageDomains.size()); i++) { final java.util.Map storageDomainMap = storageDomains.get(i); final java.lang.String id = ((java.lang.String) (storageDomainMap.get("id"))); final java.lang.String connection = ((java.lang.String) (storageDomainMap.get("connection"))); final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.StorageDomain storageDomain = getStorageDomainById(id); storageDomain.setConnection(connection); dataCenter.getStorageDomainMap().put(id, storageDomain); final java.util.Map storageStatusMap = map(); storageStatusMap.put("status", java.lang.Integer.valueOf(0)); storageStatusMap.put("id", id); statusList.add(storageStatusMap); } log.info( server {} validated. spUUID); return resultMap; } catch (java.lang.Exception e) { throw error(e); } }	public java.util.Map validateStorageServerConnection(java.lang.Integer domType, java.lang.String spUUID, java.util.List<java.util.Map> storageDomains) { try { final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); final java.util.Map resultMap = getOKStatus(); final java.util.List statusList = new java.util.ArrayList(); resultMap.put("statusList", statusList); for (int i = 0; i < (storageDomains.size()); i++) { final java.util.Map storageDomainMap = storageDomains.get(i); final java.lang.String id = ((java.lang.String) (storageDomainMap.get("id"))); final java.lang.String connection = ((java.lang.String) (storageDomainMap.get("connection"))); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = getStorageDomainById(id); storageDomain.setConnection(connection); dataCenter.getStorageDomainMap().put(id, storageDomain); final java.util.Map storageStatusMap = map(); storageStatusMap.put("status", java.lang.Integer.valueOf(0)); storageStatusMap.put("id", id); statusList.add(storageStatusMap); } log.info("Storage server {} validated.", spUUID); return resultMap; } catch (java.lang.Exception e) { throw error(e); } }
public java.util.Map detachStorageDomain(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String msdUUID, int masterVersion) { try { log.info( storage domain, spUUID: {} sdUUID: {} new java.lang.Object[]{ spUUID, sdUUID }); final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.StorageDomain storageDomain = dataCenter.getStorageDomainMap().get(sdUUID); storageDomain.setDomainStatus(StorageDomain.DomainStatus.UNATTACHED); dataCenter.getStorageDomainMap().remove(storageDomain.getId()); storageDomain.setDataCenter(null); updateDataCenter(dataCenter); return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }	public java.util.Map detachStorageDomain(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String msdUUID, int masterVersion) { try { log.info("Detaching storage domain, spUUID: {} sdUUID: {}", new java.lang.Object[]{ spUUID, sdUUID }); final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = dataCenter.getStorageDomainMap().get(sdUUID); storageDomain.setDomainStatus(StorageDomain.DomainStatus.UNATTACHED); dataCenter.getStorageDomainMap().remove(storageDomain.getId()); storageDomain.setDataCenter(null); updateDataCenter(dataCenter); return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }
public java.util.Map getStorageDomainsList(java.lang.String spUUID, int domainType, int poolType, java.lang.String path) { try { org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.DataCenter dataCenter = getDataCenterById(spUUID); java.util.Map resultMap = getOKStatus(); java.util.List domlist = lst(); for (org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.StorageDomain storageDomain : dataCenter.getStorageDomainMap().values()) { if ((spUUID != null) && (!(storageDomain.getId().equals(spUUID)))) { continue; } if ((domainType != 0) && ((StorageDomain.DomainClass.getByCode(domainType)) != (storageDomain.getDomainClass()))) { continue; } if ((poolType != 0) && ((StorageDomain.StorageType.getByCode(poolType)) != (storageDomain.getStorageType()))) { continue; } if ((path != null) && (!(path.equals(storageDomain.getConnection())))) { continue; } domlist.add(storageDomain.getId()); } resultMap.put("domlist", domlist); return resultMap; } catch (java.lang.Exception e) { throw error(e); } }	public java.util.Map getStorageDomainsList(java.lang.String spUUID, int domainType, int poolType, java.lang.String path) { try { org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); java.util.Map resultMap = getOKStatus(); java.util.List domlist = lst(); for (org.ovirt.vdsmfake.domain.StorageDomain storageDomain : dataCenter.getStorageDomainMap().values()) { if ((spUUID != null) && (!(storageDomain.getId().equals(spUUID)))) { continue; } if ((domainType != 0) && ((StorageDomain.DomainClass.getByCode(domainType)) != (storageDomain.getDomainClass()))) { continue; } if ((poolType != 0) && ((StorageDomain.StorageType.getByCode(poolType)) != (storageDomain.getStorageType()))) { continue; } if ((path != null) && (!(path.equals(storageDomain.getConnection())))) { continue; } domlist.add(storageDomain.getId()); } resultMap.put("domlist", domlist); return resultMap; } catch (java.lang.Exception e) { throw error(e); } }
public java.util.Map activateStorageDomain(java.lang.String sdUUID, java.lang.String spUUID) { try { log.info( storage domain, spUUID: {} sdUUID: {} new java.lang.Object[]{ spUUID, sdUUID }); final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.StorageDomain storageDomain = dataCenter.getStorageDomainMap().get(sdUUID); if (storageDomain != null) { storageDomain.setDomainStatus(StorageDomain.DomainStatus.ACTIVE); updateStorageDomain(storageDomain); } return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }	public java.util.Map activateStorageDomain(java.lang.String sdUUID, java.lang.String spUUID) { try { log.info("Activating storage domain, spUUID: {} sdUUID: {}", new java.lang.Object[]{ spUUID, sdUUID }); final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = dataCenter.getStorageDomainMap().get(sdUUID); if (storageDomain != null) { storageDomain.setDomainStatus(StorageDomain.DomainStatus.ACTIVE); updateStorageDomain(storageDomain); } return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }
public java.util.Map attachStorageDomain(java.lang.String sdUUID, java.lang.String spUUID) { try { log.info( storage domain, spUUID: {} sdUUID: {} new java.lang.Object[]{ spUUID, sdUUID }); final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.StorageDomain storageDomain = getStorageDomainById(sdUUID); storageDomain.setDomainStatus(StorageDomain.DomainStatus.ATTACHED); dataCenter.getStorageDomainMap().put(sdUUID, storageDomain); storageDomain.setDataCenter(dataCenter); updateDataCenter(dataCenter); return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }	public java.util.Map attachStorageDomain(java.lang.String sdUUID, java.lang.String spUUID) { try { log.info("Attaching storage domain, spUUID: {} sdUUID: {}", new java.lang.Object[]{ spUUID, sdUUID }); final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = getStorageDomainById(sdUUID); storageDomain.setDomainStatus(StorageDomain.DomainStatus.ATTACHED); dataCenter.getStorageDomainMap().put(sdUUID, storageDomain); storageDomain.setDataCenter(dataCenter); updateDataCenter(dataCenter); return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }
public java.util.Map spmStop(java.lang.String spUUID) { final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.Host host = getActiveHost(); host.setSpmId((-1)); host.setSpmStatus(Host.SpmStatus.FREE); host.setSpmLver((-1)); updateHost(host); java.util.Map resultMap = getOKStatus(); <START_MOD>org.ovirt.vdsmfake.service.VdsmManager.getInstance().removeSpmFromMap(spUUID); <END_MOD>return resultMap; }	public java.util.Map spmStop(java.lang.String spUUID) { final org.ovirt.vdsmfake.domain.Host host = getActiveHost(); host.setSpmId((-1)); host.setSpmStatus(Host.SpmStatus.FREE); host.setSpmLver((-1)); updateHost(host); java.util.Map resultMap = getOKStatus(); org.ovirt.vdsmfake.domain.VdsmManager.getInstance().removeSpmFromMap(spUUID); return resultMap; }
public java.util.Map spmStart(java.lang.String spUUID, java.lang.String prevID, java.lang.String prevLVER, java.lang.String recoveryMode, java.lang.String scsiFencing) { final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.Host host = getActiveHost(); java.util.Map resultMap = getOKStatus(); org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.Task task = new org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.Task(getUuid()); resultMap.put("uuid", task.getId()); task.setTarget(host); getActiveHost().getRunningTasks().put(task.getId(), task); org.ovirt.vdsmfake.task.TaskProcessor.setTasksMap(host.getName(), task.getId()); org.ovirt.vdsmfake.task.TaskProcessor.getInstance().addTask(new org.ovirt.vdsmfake.task.TaskRequest(org.ovirt.vdsmfake.task.TaskType.FINISH_START_SPM, 10000L, task)); <START_MOD>org.ovirt.vdsmfake.service.VdsmManager.getInstance().setSpmMap(spUUID, host); <END_MOD>return resultMap; }	public java.util.Map spmStart(java.lang.String spUUID, java.lang.String prevID, java.lang.String prevLVER, java.lang.String recoveryMode, java.lang.String scsiFencing) { final org.ovirt.vdsmfake.domain.Host host = getActiveHost(); java.util.Map resultMap = getOKStatus(); org.ovirt.vdsmfake.domain.Task task = new org.ovirt.vdsmfake.domain.Task(getUuid()); resultMap.put("uuid", task.getId()); task.setTarget(host); getActiveHost().getRunningTasks().put(task.getId(), task); org.ovirt.vdsmfake.task.TaskProcessor.setTasksMap(host.getName(), task.getId()); org.ovirt.vdsmfake.task.TaskProcessor.getInstance().addTask(new org.ovirt.vdsmfake.task.TaskRequest(org.ovirt.vdsmfake.task.TaskType.FINISH_START_SPM, 10000L, task)); org.ovirt.vdsmfake.domain.VdsmManager.getInstance().setSpmMap(spUUID, host); return resultMap; }
public java.util.Map deactivateStorageDomain(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String msdUUID, int masterVersion) { try { log.info( storage domain, spUUID: {} sdUUID: {} new java.lang.Object[]{ spUUID, sdUUID }); final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.StorageDomain storageDomain = dataCenter.getStorageDomainMap().get(sdUUID); storageDomain.setDomainStatus(StorageDomain.DomainStatus.ATTACHED); updateStorageDomain(storageDomain); return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }	public java.util.Map deactivateStorageDomain(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String msdUUID, int masterVersion) { try { log.info("Deactivating storage domain, spUUID: {} sdUUID: {}", new java.lang.Object[]{ spUUID, sdUUID }); final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = dataCenter.getStorageDomainMap().get(sdUUID); storageDomain.setDomainStatus(StorageDomain.DomainStatus.ATTACHED); updateStorageDomain(storageDomain); return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }
public java.util.Map getStorageDomainInfo(java.lang.String sdUUID) { try { final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.Host host = getActiveHost(); org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.StorageDomain storageDomain = getStorageDomainById(sdUUID); org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.DataCenter dataCenter = storageDomain.getDataCenter(); java.util.Map resultMap = getOKStatus(); java.util.Map infoMap = map(); infoMap.put("uuid", storageDomain.getId()); infoMap.put("lver", host.getSpmLver()); infoMap.put("version", "0"); infoMap.put("role", storageDomain.getDomainRole().getName()); infoMap.put("remotePath", storageDomain.getConnection()); infoMap.put("spm_id", host.getSpmId()); infoMap.put("type", storageDomain.getStorageType().toString()); infoMap.put("class", storageDomain.getDomainClass().getName()); infoMap.put("name", storageDomain.getName()); java.util.List poolList = lst(); if (dataCenter != null) { infoMap.put("master_ver", dataCenter.getMasterVersion()); poolList.add(dataCenter.getId()); poolList.add(getUuid()); poolList.add(getUuid()); } infoMap.put("pool", poolList); resultMap.put("info", infoMap); return resultMap; } catch (java.lang.Exception e) { throw error(e); } }	public java.util.Map getStorageDomainInfo(java.lang.String sdUUID) { try { final org.ovirt.vdsmfake.domain.Host host = getActiveHost(); org.ovirt.vdsmfake.domain.StorageDomain storageDomain = getStorageDomainById(sdUUID); org.ovirt.vdsmfake.domain.DataCenter dataCenter = storageDomain.getDataCenter(); java.util.Map resultMap = getOKStatus(); java.util.Map infoMap = map(); infoMap.put("uuid", storageDomain.getId()); infoMap.put("lver", host.getSpmLver()); infoMap.put("version", "0"); infoMap.put("role", storageDomain.getDomainRole().getName()); infoMap.put("remotePath", storageDomain.getConnection()); infoMap.put("spm_id", host.getSpmId()); infoMap.put("type", storageDomain.getStorageType().toString()); infoMap.put("class", storageDomain.getDomainClass().getName()); infoMap.put("name", storageDomain.getName()); java.util.List poolList = lst(); if (dataCenter != null) { infoMap.put("master_ver", dataCenter.getMasterVersion()); poolList.add(dataCenter.getId()); poolList.add(getUuid()); poolList.add(getUuid()); } infoMap.put("pool", poolList); resultMap.put("info", infoMap); return resultMap; } catch (java.lang.Exception e) { throw error(e); } }
public java.util.Map createStorageDomain(java.lang.Integer storageType, java.lang.String sdUUID, java.lang.String domainName, java.lang.String typeSpecificArg, java.lang.Integer domClass, java.lang.String storageFormatType) { log.info( domain sdUUID: {}, name: {} created. sdUUID, domainName); org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.StorageDomain storageDomain = getStorageDomainById(sdUUID); storageDomain.setName(domainName); storageDomain.setConnection(typeSpecificArg); storageDomain.setDomainClass(StorageDomain.DomainClass.getByCode(domClass)); storageDomain.setStorageType(StorageDomain.StorageType.getByCode(storageType)); updateStorageDomain(storageDomain); return getOKStatus(); }	public java.util.Map createStorageDomain(java.lang.Integer storageType, java.lang.String sdUUID, java.lang.String domainName, java.lang.String typeSpecificArg, java.lang.Integer domClass, java.lang.String storageFormatType) { log.info("Storage domain sdUUID: {}, name: {} created.", sdUUID, domainName); org.ovirt.vdsmfake.domain.StorageDomain storageDomain = getStorageDomainById(sdUUID); storageDomain.setName(domainName); storageDomain.setConnection(typeSpecificArg); storageDomain.setDomainClass(StorageDomain.DomainClass.getByCode(domClass)); storageDomain.setStorageType(StorageDomain.StorageType.getByCode(storageType)); updateStorageDomain(storageDomain); return getOKStatus(); }
public java.util.Map refreshStoragePool(java.lang.String spUUID, java.lang.String msdUUID, java.lang.Integer masterVersion) { try { log.info( storage pool, spUUID: {} msdUUID: {} new java.lang.Object[]{ spUUID, msdUUID }); final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.DataCenter dataCenter = getDataCenterById(spUUID); dataCenter.setMasterStorageDomainId(msdUUID); dataCenter.setMasterVersion(masterVersion); final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.StorageDomain storageDomain = getStorageDomainById(msdUUID); dataCenter.getStorageDomainMap().put(storageDomain.getId(), storageDomain); setMasterDomain(spUUID, msdUUID); return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }	public java.util.Map refreshStoragePool(java.lang.String spUUID, java.lang.String msdUUID, java.lang.Integer masterVersion) { try { log.info("Refreshing storage pool, spUUID: {} msdUUID: {}", new java.lang.Object[]{ spUUID, msdUUID }); final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); dataCenter.setMasterStorageDomainId(msdUUID); dataCenter.setMasterVersion(masterVersion); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = getStorageDomainById(msdUUID); dataCenter.getStorageDomainMap().put(storageDomain.getId(), storageDomain); setMasterDomain(spUUID, msdUUID); return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }
public java.util.Map getSpmStatus(java.lang.String uuid) { final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.Host host = getActiveHost(); java.util.Map resultMap = getOKStatus(); java.util.Map infoMap = map(); infoMap.put("spmId", host.getSpmId()); infoMap.put("spmStatus", host.getSpmStatus().getName()); infoMap.put("spmLver", host.getSpmLver()); resultMap.put("spm_st", infoMap); return resultMap; }	public java.util.Map getSpmStatus(java.lang.String uuid) { final org.ovirt.vdsmfake.domain.Host host = getActiveHost(); java.util.Map resultMap = getOKStatus(); java.util.Map infoMap = map(); infoMap.put("spmId", host.getSpmId()); infoMap.put("spmStatus", host.getSpmStatus().getName()); infoMap.put("spmLver", host.getSpmLver()); resultMap.put("spm_st", infoMap); return resultMap; }
public java.util.Map connectStoragePool(java.lang.String spUUID, java.lang.Integer hostID, java.lang.String scsiKey, java.lang.String msdUUID, java.lang.Integer masterVersion) { final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.Host host = getActiveHost(); host.setSpUUID(spUUID); updateHost(host); dataCenter.setMasterStorageDomainId(msdUUID); dataCenter.setMasterVersion(masterVersion); final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.StorageDomain storageDomain = getStorageDomainById(msdUUID); dataCenter.getStorageDomainMap().put(storageDomain.getId(), storageDomain); setMasterDomain(spUUID, msdUUID); log.info( center {} connected. spUUID); return getOKStatus(); }	public java.util.Map connectStoragePool(java.lang.String spUUID, java.lang.Integer hostID, java.lang.String scsiKey, java.lang.String msdUUID, java.lang.Integer masterVersion) { final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.domain.Host host = getActiveHost(); host.setSpUUID(spUUID); updateHost(host); dataCenter.setMasterStorageDomainId(msdUUID); dataCenter.setMasterVersion(masterVersion); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = getStorageDomainById(msdUUID); dataCenter.getStorageDomainMap().put(storageDomain.getId(), storageDomain); setMasterDomain(spUUID, msdUUID); log.info("Data center {} connected.", spUUID); return getOKStatus(); }
public java.util.Map getVolumeInfo(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String volUUID) { try { org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.DataCenter dataCenter = getDataCenterById(spUUID); org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.StorageDomain storageDomain = dataCenter.getStorageDomainMap().get(sdUUID); org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.Volume volume = storageDomain.getVolumes().get(volUUID); java.util.Map resultMap = getOKStatus(); java.lang.String cTime = java.lang.Integer.valueOf(((int) ((java.lang.System.currentTimeMillis()) / 1000.0))).toString(); java.util.Map infoMap = map(); infoMap.put("status", "OK"); infoMap.put("domain", sdUUID); infoMap.put("voltype", "LEAF"); infoMap.put("description", volume.getDesc()); infoMap.put("parent", volume.getSrcVolUUID()); infoMap.put("format", "RAW"); infoMap.put("image", imgGUID); infoMap.put("ctime", cTime); infoMap.put("disktype", volume.getDiskType()); infoMap.put("legality", "LEGAL"); infoMap.put("mtime", cTime); infoMap.put("apparentsize", volume.getSize()); infoMap.put("children", lst()); infoMap.put("capacity", volume.getSize()); infoMap.put("uuid", volUUID); infoMap.put("truesize", "0"); infoMap.put("type", "SPARSE"); resultMap.put("info", infoMap); return resultMap; } catch (java.lang.Exception e) { throw error(e); } }	public java.util.Map getVolumeInfo(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String volUUID) { try { org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); org.ovirt.vdsmfake.domain.StorageDomain storageDomain = dataCenter.getStorageDomainMap().get(sdUUID); org.ovirt.vdsmfake.domain.Volume volume = storageDomain.getVolumes().get(volUUID); java.util.Map resultMap = getOKStatus(); java.lang.String cTime = java.lang.Integer.valueOf(((int) ((java.lang.System.currentTimeMillis()) / 1000.0))).toString(); java.util.Map infoMap = map(); infoMap.put("status", "OK"); infoMap.put("domain", sdUUID); infoMap.put("voltype", "LEAF"); infoMap.put("description", volume.getDesc()); infoMap.put("parent", volume.getSrcVolUUID()); infoMap.put("format", "RAW"); infoMap.put("image", imgGUID); infoMap.put("ctime", cTime); infoMap.put("disktype", volume.getDiskType()); infoMap.put("legality", "LEGAL"); infoMap.put("mtime", cTime); infoMap.put("apparentsize", volume.getSize()); infoMap.put("children", lst()); infoMap.put("capacity", volume.getSize()); infoMap.put("uuid", volUUID); infoMap.put("truesize", "0"); infoMap.put("type", "SPARSE"); resultMap.put("info", infoMap); return resultMap; } catch (java.lang.Exception e) { throw error(e); } }
public int getThreadpoolSize() { return threadpoolSize; }	public int getJsonHandlersThreadsPool() { return jsonHandlersThreadsPool; }
public void init(java.util.Map<java.lang.String, java.lang.String> paramMap) { constantDelay = getLong(paramMap.get("constantDelay")); randomDelay = getLong(paramMap.get("randomDelay")); networkBridgeName = paramMap.get("networkBridgeName"); cacheDir = paramMap.get("cacheDir"); logDir = ((paramMap.get("logDir")) + "/") + (java.lang.System.currentTimeMillis()); forwardVdsmServer = paramMap.get("forwardVdsmServer"); vdsmPort = paramMap.get("vdsmPort"); vmConfAndStatsConstants = paramMap.get("vmConfAndStatsConstants"); vmConfAndStatsUpdateIntervals = paramMap.get("vmConfAndStatsUpdateIntervals"); <START_MOD>threadpoolSize = java.lang.Integer.valueOf(paramMap.get("threadPoolSize")); <END_MOD>final java.lang.String notLoggedMethods = paramMap.get("notLoggedMethods"); if ((notLoggedMethods != null) && ((notLoggedMethods.trim().length()) > 0)) { final java.lang.String[] methodNames = notLoggedMethods.split(","); for (java.lang.String methodName : methodNames) { notLoggedMethodSet.add(methodName.trim()); } } makeDir(cacheDir); makeDir(logDir); if (isProxyActive()) { targetServerUrl = (((getForwardVdsmServer()) + ":") + (getVdsmPort())) + "/"; } }	public void init(java.util.Map<java.lang.String, java.lang.String> paramMap) { constantDelay = org.ovirt.vdsmfake.Utils.getLong(paramMap.get("constantDelay")); randomDelay = org.ovirt.vdsmfake.Utils.getLong(paramMap.get("randomDelay")); networkLoad = org.ovirt.vdsmfake.Utils.splitString(paramMap.get("networkLoad")); cpuLoadList = org.ovirt.vdsmfake.Utils.splitString(paramMap.get("cpuLoad")); memLoad = org.ovirt.vdsmfake.Utils.splitString(paramMap.get("memLoad")); storageDelay = org.ovirt.vdsmfake.Utils.splitString(paramMap.get("storageDelay")); networkBridgeName = paramMap.get("networkBridgeName"); cacheDir = paramMap.get("cacheDir"); logDir = ((paramMap.get("logDir")) + "/") + (java.lang.System.currentTimeMillis()); forwardVdsmServer = paramMap.get("forwardVdsmServer"); vdsmPort = paramMap.get("vdsmPort"); vmConfAndStatsConstants = paramMap.get("vmConfAndStatsConstants"); vmConfAndStatsUpdateIntervals = paramMap.get("vmConfAndStatsUpdateIntervals"); jsonHandlersThreadsPool = java.lang.Integer.valueOf(paramMap.get("jsonHandlersThreadsPool")); final java.lang.String notLoggedMethods = paramMap.get("notLoggedMethods"); if ((notLoggedMethods != null) && ((notLoggedMethods.trim().length()) > 0)) { final java.lang.String[] methodNames = notLoggedMethods.split(","); for (java.lang.String methodName : methodNames) { notLoggedMethodSet.add(methodName.trim()); } } makeDir(cacheDir); makeDir(logDir); if (isProxyActive()) { targetServerUrl = (((getForwardVdsmServer()) + ":") + (getVdsmPort())) + "/"; } }
public java.util.Map deleteVolume(java.lang.String imgUUID, java.lang.String spUUID, java.lang.String sdUUID, boolean postZero, boolean force) { try { org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); org.ovirt.vdsmfake.domain.StorageDomain storageDomain = dataCenter.getStorageDomainMap().get(sdUUID); log.info("Removing volume: {}", imgUUID); final java.util.Map resultMap = getOKStatus(); final org.ovirt.vdsmfake.domain.Task task = new org.ovirt.vdsmfake.domain.Task(getUuid()); resultMap.put("uuid", task.getId()); org.ovirt.vdsmfake.task.TaskProcessor.getInstance().addTask(new org.ovirt.vdsmfake.task.TaskRequest(org.ovirt.vdsmfake.task.TaskType.FINISH_REMOVE_VOLUME, 5000L, task)); return resultMap; } catch (java.lang.Exception e) { throw error(e); } }	public java.util.Map deleteImage(java.lang.String imgUUID, java.lang.String spUUID, java.lang.String sdUUID, boolean postZero, boolean force) { try { log.info("Removing volume: {}", imgUUID); final java.util.Map resultMap = getOKStatus(); final org.ovirt.vdsmfake.domain.Task task = new org.ovirt.vdsmfake.domain.Task(getUuid()); resultMap.put("uuid", task.getId()); syncTask(null, task); org.ovirt.vdsmfake.task.TaskProcessor.getInstance().addTask(new org.ovirt.vdsmfake.task.TaskRequest(org.ovirt.vdsmfake.task.TaskType.FINISH_REMOVE_VOLUME, 5000L, task)); return resultMap; } catch (java.lang.Exception e) { throw error(e); } }
public void run() { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = null; request = org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest.fromByteArray(message); org.ovirt.vdsmfake.ContextHolder.init(); org.ovirt.vdsmfake.ContextHolder.setServerName(client.getHostname()); }	public void run() { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = null; try { request = org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest.fromByteArray(message); org.ovirt.vdsmfake.ContextHolder.init(); if ((client.getRetryPolicy().getIdentifier()) != null) { org.ovirt.vdsmfake.ContextHolder.setServerName(client.getRetryPolicy().getIdentifier()); org.ovirt.vdsmfake.rpc.json.JsonRpcServer.log.debug("client policy identifier {}", client.getRetryPolicy().getIdentifier()); } else if ((client.getHostname()) != null) { org.ovirt.vdsmfake.ContextHolder.setServerName(client.getHostname()); } else { org.ovirt.vdsmfake.ContextHolder.setServerName(java.lang.Integer.toString(client.hashCode())); org.ovirt.vdsmfake.rpc.json.JsonRpcServer.log.error("client identifier were not found, using hash"); } org.ovirt.vdsm.jsonrpc.client.ResponseBuilder builder = new org.ovirt.vdsm.jsonrpc.client.ResponseBuilder(request.getId()); java.lang.String methodName = request.getMethod(); builder = org.ovirt.vdsmfake.rpc.json.CommandFactory.createCommand(methodName).run(request.getParams(), builder); send(builder.build(), request.getMethod()); } catch (java.lang.Throwable e) { org.ovirt.vdsmfake.rpc.json.JsonRpcServer.log.error("Failure in processing request", e); java.util.Map<java.lang.String, java.lang.Object> error = new java.util.HashMap<>(); error.put("code", 100); error.put("message", e.getMessage()); if (request != null) { send(new org.ovirt.vdsm.jsonrpc.client.ResponseBuilder(request.getId()).withError(error).build(), request.getMethod()); } } }
public java.util.Map deleteImage(java.lang.String <START_MOD>imgGUID<END_MOD>, java.lang.String spUUID, java.lang.String <START_MOD>sdUUID<END_MOD>, <START_MOD>boolean<END_MOD> postZero, <START_MOD>boolean<END_MOD> force) { return <START_MOD>storageService.deleteVolume<END_MOD>(<START_MOD>imgGUID, spUUID, sdUUID, postZero, force<END_MOD>); }	public java.util.Map deleteImage(java.lang.String imgGUID, java.lang.String spUUID, java.lang.String sdUUID, boolean postZero, boolean force) { return storageService.deleteImage(imgGUID, spUUID, sdUUID, postZero, force); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Host cannot be set highly available when hosted engine is used.") java.lang.String noHaWhenHostedEngineUsed();	@org.ovirt.engine.ui.uicompat.DefaultStringValue("VM cannot be set highly available when hosted engine is used.") java.lang.String noHaWhenHostedEngineUsed();
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. A VM hosted on a hosted engine host cannot be set to highly available.") java.lang.String ACTION_TYPE_FAILED_VM_CANNOT_BE_HIGHLY_AVAILABLE_AND_HOSTED_ON_A_HOSTED_ENGINE_HOST();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. A VM running the engine (\"hosted engine\") cannot be set to highly available as it has its own HA mechanism.") java.lang.String ACTION_TYPE_FAILED_VM_CANNOT_BE_HIGHLY_AVAILABLE_AND_HOSTED_ENGINE();
@org.junit.Test public void testBlockingSettingHaOnHostedEngine() { prepareVmToPassValidate(); vm.setOrigin(OriginType.MANAGED_HOSTED_ENGINE); command.getParameters().getVm().setAutoStartup(true); boolean validInput = command.validate(); assertFalse(validInput); assertTrue(command.getReturnValue().getValidationMessages().contains(org.ovirt.engine.core.bll.ACTION_TYPE_FAILED_VM_CANNOT_BE_HIGHLY_AVAILABLE_AND_HOSTED_ON_A_HOSTED_ENGINE_HOST.name())); }	@org.junit.Test public void testBlockSettingHaOnHostedEngine() { prepareVmToPassValidate(); command.initEffectiveCompatibilityVersion(); vm.setOrigin(OriginType.MANAGED_HOSTED_ENGINE); vmStatic.setOrigin(OriginType.MANAGED_HOSTED_ENGINE); command.getParameters().getVm().setAutoStartup(true); boolean validInput = command.validate(); assertFalse(validInput); assertTrue(command.getReturnValue().getValidationMessages().contains(org.ovirt.engine.core.bll.ACTION_TYPE_FAILED_VM_CANNOT_BE_HIGHLY_AVAILABLE_AND_HOSTED_ENGINE.name())); }
@org.junit.Test public void testAllowSettingHaOnNonHostedEngine() { vmStatic.setOrigin(OriginType.RHEV); command.getParameters().getVm().setAutoStartup(true); boolean validInput = command.validateInputs(); assertTrue(validInput); }	@org.junit.Test public void testAllowSettingHaOnNonHostedEngine() { prepareVmToPassValidate(); command.initEffectiveCompatibilityVersion(); vm.setOrigin(OriginType.RHEV); vmStatic.setOrigin(OriginType.RHEV); command.getParameters().getVm().setAutoStartup(true); boolean validInput = command.validate(); assertTrue(validInput); }
public java.lang.Integer <START_MOD>getMaxVmNameLength<END_MOD>() { java.lang.Integer <START_MOD>maxVmNameLengthNonWindows<END_MOD> = ((java.lang.Integer) (getConfigValuePreConverted(ConfigurationValues.<START_MOD>MaxVmNameLength<END_MOD>))); if (<START_MOD>maxVmNameLengthNonWindows<END_MOD> == null) { return <START_MOD>64<END_MOD>; } return <START_MOD>maxVmNameLengthNonWindows<END_MOD>; }	public java.lang.Integer getMaxVmNameLength() { java.lang.Integer maxVmNameLength = ((java.lang.Integer) (getConfigValuePreConverted(ConfigurationValues.MaxVmNameLength))); if (maxVmNameLength == null) { return 64; } return maxVmNameLength; }
protected int getMaxNameLength(org.ovirt.engine.core.common.businessentities.VM vm) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().<START_MOD>getMaxVmNameLength<END_MOD>(); }	protected int getMaxNameLength() { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getMaxVmNameLength(); }
@org.ovirt.engine.ui.common.DefaultStringValue("Sysprep host name must not contain more than 15 characters" + ("If you are not using this field the VM name will be used as the host name and will be cropped" + "to the first 15 characters")) java.lang.String windowsHostNameInfo();	@org.ovirt.engine.ui.common.DefaultStringValue("Sysprep host name must not contain more than 15 characters" + "If you are not using this field the first 15 characters of the VM name will be used as the host name") java.lang.String windowsHostNameInfo();
protected static boolean methodAllowsConcurrent(java.lang.Object instance, java.lang.String methodId) { org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation methodToRunAnnotation = null; java.lang.reflect.Method[] methods = instance.getClass().getMethods(); for (java.lang.reflect.Method method : methods) { org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation annotation = method.getAnnotation(org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation.class); if ((annotation != null) && (methodId.equals(annotation.value()))) { methodToRunAnnotation = annotation; break; } } return (methodToRunAnnotation == null) || (methodToRunAnnotation.allowsConcurrent()); }	protected static boolean methodAllowsConcurrent(java.lang.Object instance, java.lang.String methodId) { java.lang.reflect.Method method = org.ovirt.engine.core.utils.timer.JobWrapper.getMethodToRun(instance, methodId); org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation methodToRunAnnotation = method.getAnnotation(org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation.class); return (methodToRunAnnotation == null) || (methodToRunAnnotation.allowsConcurrent()); }
@java.lang.<START_MOD>SuppressWarnings({ "unchecked", "rawtypes" }) @java.lang.<END_MOD>Override public java.lang.String toString() {<START_MOD> java.lang.Class<java.util.Map<java.lang.String, java.lang.String>> clazz = ((java.lang.Class) (java.util.Map.class)); java.util.Map<java.lang.String, java.lang.String> params = org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest.MAPPER.convertValue(this.getParams(), clazz); if (params.containsKey("password")) { params.put("password", "XXX"); }<END_MOD> return ((((( id:   + (this.getId())) +   method:   + (this.getMethod())) +   params:   + <START_MOD>params<END_MOD>) + ">"; }	@java.lang.SuppressWarnings({ "unchecked", "rawtypes" }) @java.lang.Override public java.lang.String toString() { java.lang.Class<java.util.Map<java.lang.String, java.lang.String>> clazz = ((java.lang.Class) (java.util.Map.class)); java.util.Map<java.lang.String, java.lang.String> params = org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest.MAPPER.convertValue(this.getParams(), clazz); if (params.containsKey("password")) { params.put("password", "*****"); } return ((((("<JsonRpcRequest id: " + (this.getId())) + ", method: ") + (this.getMethod())) + ", params: ") + params) + ">"; }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append(((this.command) + "\n")); for (java.lang.String key : this.headers.keySet()) { builder.append((((key + ":") + (this.headers.get(key))) + "\n")); } builder.append("\n"); if (org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.Command.SEND.toString().equals(this.command)) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest.fromByteArray(this.content); builder.append(request.toString()); } else if (org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.Command.MESSAGE.toString().equals(this.command)) { org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse response = org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse.fromByteArray(this.content); builder.append(response.toString()); } return builder.toString(); }	@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append(this.command).append("\n"); for (java.lang.String key : this.headers.keySet()) { builder.append(key).append(":").append(this.headers.get(key)).append("\n"); } builder.append("\n"); if (org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.Command.SEND.toString().equals(this.command)) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest.fromByteArray(this.content); builder.append(request.toString()); } else if (org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.Command.MESSAGE.toString().equals(this.command)) { org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse response = org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse.fromByteArray(this.content); builder.append(response.toString()); } return builder.toString(); }
@java.lang.<START_MOD>SuppressWarnings({ "unchecked", "rawtypes" }) @java.lang.<END_MOD>Override public java.lang.String toString() { java.<START_MOD>util.Map<java.lang.String, java.lang.String> result = null; if ((this.getResult()) != null) { java.lang.Class<java.util.Map<java.lang.String, java.lang.String>> clazz = ((java.lang.Class) (java.util.Map.class)); result = org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse.MAPPER.convertValue(this.getResult(), clazz); if (result.containsKey("password")) { result.put("password", "XXX"); } } java.<END_MOD>lang.String response = ((this.getResult()) != null) ?   result:   + <START_MOD>result :   error:   + (this.getError<END_MOD>().toString()); return (( id:   + (this.getId())) + response) + ">"; }	@java.lang.SuppressWarnings({ "unchecked", "rawtypes" }) @java.lang.Override public java.lang.String toString() { java.util.Map<java.lang.String, java.lang.String> result = null; if ((this.getResult()) != null) { java.lang.Class<java.util.Map<java.lang.String, java.lang.String>> clazz = ((java.lang.Class) (java.util.Map.class)); result = org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse.MAPPER.convertValue(this.getResult(), clazz); if (result.containsKey("password")) { result.put("password", "*****"); } } java.lang.String response = ((this.getResult()) != null) ? " result: " + result : " error: " + (this.getError().toString()); return (("<JsonRpcResponse id: " + (this.getId())) + response) + ">"; }
@java.lang.Override protected void endWithFailure() { <START_MOD>removeCinderDisk(org.ovirt.engine.core.bll.storage.disk.cinder.CloneSingleCinderDiskCommand.getParameters().getDestinationImageId(), org.ovirt.engine.core.bll.storage.disk.cinder.CloneSingleCinderDiskCommand.getParameters().getStorageDomainId()); <END_MOD>org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateImageStatus(org.ovirt.engine.core.bll.storage.disk.cinder.CloneSingleCinderDiskCommand.getParameters().getDestinationImageId(), ImageStatus.ILLEGAL); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateImageStatus(org.ovirt.engine.core.bll.storage.disk.cinder.CloneSingleCinderDiskCommand.getParameters().getImageId(), ImageStatus.OK); org.ovirt.engine.core.bll.storage.disk.cinder.CloneSingleCinderDiskCommand.setSucceeded(true); }	@java.lang.Override protected void endWithFailure() { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateImageStatus(org.ovirt.engine.core.bll.storage.disk.cinder.CloneSingleCinderDiskCommand.getParameters().getDestinationImageId(), ImageStatus.ILLEGAL); removeCinderDisk(); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateImageStatus(org.ovirt.engine.core.bll.storage.disk.cinder.CloneSingleCinderDiskCommand.getParameters().getImageId(), ImageStatus.OK); org.ovirt.engine.core.bll.storage.disk.cinder.CloneSingleCinderDiskCommand.setSucceeded(true); }
private org.ovirt.engine.core.common.action.<START_MOD>ImagesContainterParametersBase buildCloneCinderDiskCommandParameters(<END_MOD>org.ovirt.engine.core.common.businessentities.storage.CinderDisk<START_MOD> cinderDisk<END_MOD>) { org.ovirt.engine.core.common.action.<START_MOD>ImagesContainterParametersBase<END_MOD> createParams = new org.ovirt.engine.core.common.action.<START_MOD>ImagesContainterParametersBase(cinderDisk.getImageId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage templateDisk =<END_MOD> diskInfoDestinationMap<START_MOD>.get(cinderDisk.getId()); createParams.setDiskAlias(templateDisk.getDiskAlias()); createParams.setStorageDomainId(templateDisk.getStorageIds().get(0)); createParams.setEntityInfo(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getEntityInfo()); createParams.setParentCommand(org.ovirt.engine.core.bll.AddVmTemplateCommand.getActionType()); createParams.setParentParameters(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters()); createParams.setVmSnapshotId(getVmSnapshotId()<END_MOD>); return withRootCommandInfo(createParams); }	private org.ovirt.engine.core.common.action.ImagesContainterParametersBase buildCloneCinderDiskCommandParameters(org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk) { org.ovirt.engine.core.common.action.ImagesContainterParametersBase createParams = new org.ovirt.engine.core.common.action.ImagesContainterParametersBase(cinderDisk.getImageId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage templateDisk = diskInfoDestinationMap.get(cinderDisk.getId()); createParams.setDiskAlias(templateDisk.getDiskAlias()); createParams.setStorageDomainId(templateDisk.getStorageIds().get(0)); createParams.setParentCommand(org.ovirt.engine.core.bll.AddVmTemplateCommand.getActionType()); createParams.setParentParameters(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters()); createParams.setVmSnapshotId(getVmSnapshotId()); return createParams; }
@org.junit.Test public void testEmptyName() { org.ovirt.engine.api.types.V4Vm object = newVm().setName("").build(); assertEquals("<vm><name></name></vm>", objectToXml(object)); }	@org.junit.Test public void testEmptyName() { org.ovirt.engine.api.types.V4Vm object = vm().name("").build(); assertEquals("<vm><name></name></vm>", objectToXml(object)); }
private void generateReaderSource(org.ovirt.api.metamodel.concepts.StructType type) { org.ovirt.api.metamodel.tool.JavaClassName baseName = javaTypes.getBaseXmlReaderName(); org.ovirt.api.metamodel.tool.JavaClassName readerName = javaTypes.getXmlReaderName(type); javaBuffer.addLine("public class %1$s extends %2$s {", readerName.getSimpleName(), baseName.getSimpleName()); javaBuffer.addLine(); generateReadOne(type); generateReadMany(type); javaBuffer.addLine("}"); javaBuffer.addLine(); }	private void generateReaderSource(org.ovirt.api.metamodel.concepts.StructType type) { org.ovirt.api.metamodel.tool.JavaClassName readerName = javaTypes.getXmlReaderName(type); javaBuffer.addLine("public class %1$s {", readerName.getSimpleName()); javaBuffer.addLine(); generateReadOne(type); generateReadMany(type); javaBuffer.addLine("}"); javaBuffer.addLine(); }
@org.junit.Test public void test0() { org.ovirt.engine.api.types.V4Vm object = newVm().setMemory(0).build(); assertEquals("{'memory':0}", objectToJson(object)); }	@org.junit.Test public void test0() { org.ovirt.engine.api.types.V4Vm object = vm().memory(0).build(); assertEquals("{'memory':0}", objectToJson(object)); }
@org.junit.Test public void testListWithMultipleObjects() { java.util.List<org.ovirt.engine.api.types.V4Vm> list = new java.util.ArrayList<>(); list.add(newVm().build()); list.add(newVm().build()); assertEquals("[{},{}]", listToJson(list.iterator())); }	@org.junit.Test public void testListWithMultipleObjects() { java.util.List<org.ovirt.engine.api.types.V4Vm> list = new java.util.ArrayList<>(); list.add(vm().build()); list.add(vm().build()); assertEquals("[{},{}]", listToJson(list.iterator())); }
@org.junit.Test public void testId() { org.ovirt.engine.api.types.V4Vm object = newVm().setId("123").build(); assertEquals("{'id':'123'}", objectToJson(object)); }	@org.junit.Test public void testId() { org.ovirt.engine.api.types.V4Vm object = vm().id("123").build(); assertEquals("{'id':'123'}", objectToJson(object)); }
@org.junit.Test public void testBooleanAttribute() { org.ovirt.engine.api.types.V4Vm object = newVm().setDeleteProtected(true).setRunOnce(false).build(); assertEquals(("{" + (("'delete_protected':true," + "'run_once':false") + "}")), objectToJson(object)); }	@org.junit.Test public void testBooleanAttribute() { org.ovirt.engine.api.types.V4Vm object = vm().deleteProtected(true).runOnce(false).build(); assertEquals(("{" + (("'delete_protected':true," + "'run_once':false") + "}")), objectToJson(object)); }
@org.junit.Test public void testEmptyName() { org.ovirt.engine.api.types.V4Vm object = newVm().setName("").build(); assertEquals("{'name':''}", objectToJson(object)); }	@org.junit.Test public void testEmptyName() { org.ovirt.engine.api.types.V4Vm object = vm().name("").build(); assertEquals("{'name':''}", objectToJson(object)); }
@org.junit.Test public void testMinus1() { org.ovirt.engine.api.types.V4Vm object = newVm().setMemory((-1)).build(); assertEquals("{'memory':-1}", objectToJson(object)); }	@org.junit.Test public void testMinus1() { org.ovirt.engine.api.types.V4Vm object = vm().memory((-1)).build(); assertEquals("{'memory':-1}", objectToJson(object)); }
@org.junit.Test public void testVeryLong() { java.math.BigInteger memory = java.math.BigInteger.TEN.multiply(java.math.BigInteger.valueOf(java.lang.Long.MAX_VALUE)); org.ovirt.engine.api.types.V4Vm object = newVm().setMemory(memory).build(); assertEquals("{'memory':92233720368547758070}", objectToJson(object)); }	@org.junit.Test public void testVeryLong() { java.math.BigInteger memory = java.math.BigInteger.TEN.multiply(java.math.BigInteger.valueOf(java.lang.Long.MAX_VALUE)); org.ovirt.engine.api.types.V4Vm object = vm().memory(memory).build(); assertEquals("{'memory':92233720368547758070}", objectToJson(object)); }
@org.junit.Test public void testEmpty() { org.ovirt.engine.api.types.V4Vm object = newVm().build(); assertEquals("{}", objectToJson(object)); }	@org.junit.Test public void testEmpty() { org.ovirt.engine.api.types.V4Vm object = vm().build(); assertEquals("{}", objectToJson(object)); }
@org.junit.Test public void testListWithOneObject() { java.util.List<org.ovirt.engine.api.types.V4Vm> list = java.util.Collections.singletonList(newVm().build()); assertEquals("[{}]", listToJson(list.iterator())); }	@org.junit.Test public void testListWithOneObject() { java.util.List<org.ovirt.engine.api.types.V4Vm> list = java.util.Collections.singletonList(vm().build()); assertEquals("[{}]", listToJson(list.iterator())); }
@org.junit.Test public void testEmptyId() { org.ovirt.engine.api.types.V4Vm object = newVm().setId("").build(); assertEquals("{'id':''}", objectToJson(object)); }	@org.junit.Test public void testEmptyId() { org.ovirt.engine.api.types.V4Vm object = vm().id("").build(); assertEquals("{'id':''}", objectToJson(object)); }
@org.junit.Test public void testNullName() { org.ovirt.engine.api.types.V4Vm object = newVm().setName(null).build(); assertEquals("{}", objectToJson(object)); }	@org.junit.Test public void testNullName() { org.ovirt.engine.api.types.V4Vm object = vm().name(null).build(); assertEquals("{}", objectToJson(object)); }
@org.junit.Test @org.junit.Ignore public void testOneMillion() throws java.io.IOException { java.util.Iterator<org.ovirt.engine.api.types.V4Vm> infinite = new java.util.Iterator<org.ovirt.engine.api.types.V4Vm>() { private int count; @java.lang.Override public boolean hasNext() { return (count) < 1000000; } @java.lang.Override public org.ovirt.engine.api.types.V4Vm next() { org.ovirt.engine.api.types.V4Vm object = newVm().setId(java.lang.String.valueOf(count)).setName(("vm" + (count))).addDisks(newDisk().setId("123").setAlias("disk1")).addDisks(newDisk().setId("456").setAlias("disk2")).build(); (count)++; return object; } }; long before = java.lang.System.currentTimeMillis(); try (org.ovirt.api.metamodel.runtime.json.JsonWriter writer = new org.ovirt.api.metamodel.runtime.json.JsonWriter(new org.apache.commons.io.output.NullOutputStream(), false)) { org.ovirt.engine.api.json.V4JsonVmWriter.writeMany(infinite, writer); } long after = java.lang.System.currentTimeMillis(); long elapsed = after - before; assertTrue((elapsed < 60000000)); }	@org.junit.Test @org.junit.Ignore public void testOneMillion() throws java.io.IOException { java.util.Iterator<org.ovirt.engine.api.types.V4Vm> infinite = new java.util.Iterator<org.ovirt.engine.api.types.V4Vm>() { private int count; @java.lang.Override public boolean hasNext() { return (count) < 1000000; } @java.lang.Override public org.ovirt.engine.api.types.V4Vm next() { org.ovirt.engine.api.types.V4Vm object = vm().id(java.lang.String.valueOf(count)).name(("vm" + (count))).disks(disk().id("123").alias("disk1")).disks(disk().id("456").alias("disk2")).build(); (count)++; return object; } }; long before = java.lang.System.currentTimeMillis(); try (org.ovirt.api.metamodel.runtime.json.JsonWriter writer = new org.ovirt.api.metamodel.runtime.json.JsonWriter(new org.apache.commons.io.output.NullOutputStream(), false)) { org.ovirt.engine.api.json.V4JsonVmWriter.writeMany(infinite, writer); } long after = java.lang.System.currentTimeMillis(); long elapsed = after - before; assertTrue((elapsed < 60000000)); }
@org.junit.Test public void testNullIdIgnored() { org.ovirt.engine.api.types.V4Vm object = newVm().setId(null).build(); assertEquals("{}", objectToJson(object)); }	@org.junit.Test public void testNullIdIgnored() { org.ovirt.engine.api.types.V4Vm object = vm().id(null).build(); assertEquals("{}", objectToJson(object)); }
@org.junit.Test public void testMultipleNested() { org.ovirt.engine.api.types.V4Vm object = newVm().addDisks(newDisk().setId("123").setAlias("disk1")).addDisks(newDisk().setId("456").setAlias("disk2")).build(); assertEquals(("{'disks':[" + (("{'alias':'disk1','id':'123'}," + "{'alias':'disk2','id':'456'}") + "]}")), objectToJson(object)); }	@org.junit.Test public void testMultipleNested() { org.ovirt.engine.api.types.V4Vm object = vm().disks(disk().id("123").alias("disk1")).disks(disk().id("456").alias("disk2")).build(); assertEquals(("{'disks':[" + (("{'alias':'disk1','id':'123'}," + "{'alias':'disk2','id':'456'}") + "]}")), objectToJson(object)); }
@org.junit.Test public void testDate() { java.util.TimeZone tz = java.util.TimeZone.getTimeZone("UTC+1"); java.util.Calendar calendar = java.util.Calendar.getInstance(tz); calendar.clear(); calendar.set(2015, 12, 17, 16, 18, 23); calendar.set(java.util.Calendar.MILLISECOND, 123); java.util.Date date = calendar.getTime(); org.ovirt.engine.api.types.V4Vm object = newVm().setCreationTime(date).build(); assertEquals("{'creation_time':'2016-01-17T16:18:23.123Z'}", objectToJson(object)); }	@org.junit.Test public void testDate() { java.util.TimeZone tz = java.util.TimeZone.getTimeZone("UTC+1"); java.util.Calendar calendar = java.util.Calendar.getInstance(tz); calendar.clear(); calendar.set(2015, 12, 17, 16, 18, 23); calendar.set(java.util.Calendar.MILLISECOND, 123); java.util.Date date = calendar.getTime(); org.ovirt.engine.api.types.V4Vm object = vm().creationTime(date).build(); assertEquals("{'creation_time':'2016-01-17T16:18:23.123Z'}", objectToJson(object)); }
@org.junit.Test public void testLong() { org.ovirt.engine.api.types.V4Vm object = newVm().setMemory((10L * (java.lang.Integer.MAX_VALUE))).build(); assertEquals("{'memory':21474836470}", objectToJson(object)); }	@org.junit.Test public void testLong() { org.ovirt.engine.api.types.V4Vm object = vm().memory((10L * (java.lang.Integer.MAX_VALUE))).build(); assertEquals("{'memory':21474836470}", objectToJson(object)); }
@org.junit.Test public void testMultipleAttributes() { org.ovirt.engine.api.types.V4Vm object = newVm().setName("myvm").setFqdn("myvm.example.com").build(); assertEquals("{'fqdn':'myvm.example.com','name':'myvm'}", objectToJson(object)); }	@org.junit.Test public void testMultipleAttributes() { org.ovirt.engine.api.types.V4Vm object = vm().name("myvm").fqdn("myvm.example.com").build(); assertEquals("{'fqdn':'myvm.example.com','name':'myvm'}", objectToJson(object)); }
@org.junit.Test public void testName() { org.ovirt.engine.api.types.V4Vm object = newVm().setName("myvm").build(); assertEquals("{'name':'myvm'}", objectToJson(object)); }	@org.junit.Test public void testName() { org.ovirt.engine.api.types.V4Vm object = vm().name("myvm").build(); assertEquals("{'name':'myvm'}", objectToJson(object)); }
private void generateWriterSource(org.ovirt.api.metamodel.concepts.StructType type) { org.ovirt.api.metamodel.tool.JavaClassName writerName = javaTypes.getXmlWriterName(type); org.ovirt.api.metamodel.tool.JavaClassName baseName = javaTypes.getBaseXmlWriterName(); javaBuffer.addLine("public class %1$s extends %2$s {", writerName.getSimpleName(), baseName.getSimpleName()); javaBuffer.addLine(); generateWriteOne(type); generateWriteMany(type); javaBuffer.addLine("}"); javaBuffer.addLine(); }	private void generateWriterSource(org.ovirt.api.metamodel.concepts.StructType type) { org.ovirt.api.metamodel.tool.JavaClassName writerName = javaTypes.getXmlWriterName(type); javaBuffer.addLine("public class %1$s {", writerName.getSimpleName()); javaBuffer.addLine(); generateWriteOne(type); generateWriteMany(type); javaBuffer.addLine("}"); javaBuffer.addLine(); }
@org.junit.Test public void testNested() { org.ovirt.engine.api.types.V4Vm object = newVm().setCpu(newCpu().setMode("mymode")).build(); assertEquals(("<vm>" + ("<cpu><mode>mymode</mode></cpu>" + "</vm>")), objectToXml(object)); }	@org.junit.Test public void testNested() { org.ovirt.engine.api.types.V4Vm object = vm().cpu(cpu().mode("mymode")).build(); assertEquals(("<vm>" + ("<cpu><mode>mymode</mode></cpu>" + "</vm>")), objectToXml(object)); }
@org.junit.Test public void testAttributeAndElement() { org.ovirt.engine.api.types.V4Vm object = newVm().setId("123").setName("myvm").build(); assertEquals("<vm id=\"123\"><name>myvm</name></vm>", objectToXml(object)); }	@org.junit.Test public void testAttributeAndElement() { org.ovirt.engine.api.types.V4Vm object = vm().id("123").name("myvm").build(); assertEquals("<vm id=\"123\"><name>myvm</name></vm>", objectToXml(object)); }
@org.junit.Test public void testNameIsElement() { org.ovirt.engine.api.types.V4Vm object = newVm().setName("myvm").build(); assertEquals("<vm><name>myvm</name></vm>", objectToXml(object)); }	@org.junit.Test public void testNameIsElement() { org.ovirt.engine.api.types.V4Vm object = vm().name("myvm").build(); assertEquals("<vm><name>myvm</name></vm>", objectToXml(object)); }
@org.junit.Test public void testIdIsAttribute() { org.ovirt.engine.api.types.V4Vm object = newVm().setId("123").build(); assertEquals("<vm id=\"123\"></vm>", objectToXml(object)); }	@org.junit.Test public void testIdIsAttribute() { org.ovirt.engine.api.types.V4Vm object = vm().id("123").build(); assertEquals("<vm id=\"123\"></vm>", objectToXml(object)); }
@org.junit.Test public void testDate() { java.util.TimeZone tz = java.util.TimeZone.getTimeZone("UTC+1"); java.util.Calendar calendar = java.util.Calendar.getInstance(tz); calendar.clear(); calendar.set(2015, 12, 17, 16, 18, 23); calendar.set(java.util.Calendar.MILLISECOND, 123); java.util.Date date = calendar.getTime(); org.ovirt.engine.api.types.V4Vm object = newVm().setCreationTime(date).build(); assertEquals("<vm><creation_time>2016-01-17T16:18:23.123Z</creation_time></vm>", objectToXml(object)); }	@org.junit.Test public void testDate() { java.util.TimeZone tz = java.util.TimeZone.getTimeZone("UTC+1"); java.util.Calendar calendar = java.util.Calendar.getInstance(tz); calendar.clear(); calendar.set(2015, 12, 17, 16, 18, 23); calendar.set(java.util.Calendar.MILLISECOND, 123); java.util.Date date = calendar.getTime(); org.ovirt.engine.api.types.V4Vm object = vm().creationTime(date).build(); assertEquals("<vm><creation_time>2016-01-17T16:18:23.123Z</creation_time></vm>", objectToXml(object)); }
@org.junit.Test public void testEmpty() { org.ovirt.engine.api.types.V4Vm object = newVm().build(); assertEquals("<vm></vm>", objectToXml(object)); }	@org.junit.Test public void testEmpty() { org.ovirt.engine.api.types.V4Vm object = vm().build(); assertEquals("<vm></vm>", objectToXml(object)); }
@org.junit.Test public void testNullIdIgnored() { org.ovirt.engine.api.types.V4Vm object = newVm().setId(null).build(); assertEquals("<vm></vm>", objectToXml(object)); }	@org.junit.Test public void testNullIdIgnored() { org.ovirt.engine.api.types.V4Vm object = vm().id(null).build(); assertEquals("<vm></vm>", objectToXml(object)); }
@org.junit.Test public void testBooleanElement() { org.ovirt.engine.api.types.V4Vm object = newVm().setDeleteProtected(true).setRunOnce(false).build(); assertEquals(("<vm>" + (("<delete_protected>true</delete_protected>" + "<run_once>false</run_once>") + "</vm>")), objectToXml(object)); }	@org.junit.Test public void testBooleanElement() { org.ovirt.engine.api.types.V4Vm object = vm().deleteProtected(true).runOnce(false).build(); assertEquals(("<vm>" + (("<delete_protected>true</delete_protected>" + "<run_once>false</run_once>") + "</vm>")), objectToXml(object)); }
@org.junit.Test public void testMultipleElements() { org.ovirt.engine.api.types.V4Vm object = newVm().setName("myvm").setFqdn("myvm.example.com").build(); assertEquals("<vm><fqdn>myvm.example.com</fqdn><name>myvm</name></vm>", objectToXml(object)); }	@org.junit.Test public void testMultipleElements() { org.ovirt.engine.api.types.V4Vm object = vm().name("myvm").fqdn("myvm.example.com").build(); assertEquals("<vm><fqdn>myvm.example.com</fqdn><name>myvm</name></vm>", objectToXml(object)); }
@org.junit.Test public void testLong() { org.ovirt.engine.api.types.V4Vm object = newVm().setMemory((10L * (java.lang.Integer.MAX_VALUE))).build(); assertEquals("<vm><memory>21474836470</memory></vm>", objectToXml(object)); }	@org.junit.Test public void testLong() { org.ovirt.engine.api.types.V4Vm object = vm().memory((10L * (java.lang.Integer.MAX_VALUE))).build(); assertEquals("<vm><memory>21474836470</memory></vm>", objectToXml(object)); }
@org.junit.Test public void testMultipleNested() { org.ovirt.engine.api.types.V4Vm object = newVm().addDisks(newDisk().setId("123").setAlias("disk1")).addDisks(newDisk().setId("456").setAlias("disk2")).build(); assertEquals(("<vm>" + (((("<disks>" + "<disk id=\"123\"><alias>disk1</alias></disk>") + "<disk id=\"456\"><alias>disk2</alias></disk>") + "</disks>") + "</vm>")), objectToXml(object)); }	@org.junit.Test public void testMultipleNested() { org.ovirt.engine.api.types.V4Vm object = vm().disks(disk().id("123").alias("disk1")).disks(disk().id("456").alias("disk2")).build(); assertEquals(("<vm>" + (((("<disks>" + "<disk id=\"123\"><alias>disk1</alias></disk>") + "<disk id=\"456\"><alias>disk2</alias></disk>") + "</disks>") + "</vm>")), objectToXml(object)); }
@org.junit.Test public void testMinus1() { org.ovirt.engine.api.types.V4Vm object = newVm().setMemory((-1)).build(); assertEquals("<vm><memory>-1</memory></vm>", objectToXml(object)); }	@org.junit.Test public void testMinus1() { org.ovirt.engine.api.types.V4Vm object = vm().memory((-1)).build(); assertEquals("<vm><memory>-1</memory></vm>", objectToXml(object)); }
@org.junit.Test @org.junit.Ignore public void testOneMillion() throws java.io.IOException { java.util.Iterator<org.ovirt.engine.api.types.V4Vm> infinite = new java.util.Iterator<org.ovirt.engine.api.types.V4Vm>() { private int count; @java.lang.Override public boolean hasNext() { return (count) < 1000000; } @java.lang.Override public org.ovirt.engine.api.types.V4Vm next() { org.ovirt.engine.api.types.V4Vm object = newVm().setId(java.lang.String.valueOf(count)).setName(("vm" + (count))).addDisks(newDisk().setId("123").setAlias("disk1")).addDisks(newDisk().setId("456").setAlias("disk2")).build(); (count)++; return object; } }; long before = java.lang.System.currentTimeMillis(); try (org.ovirt.api.metamodel.runtime.xml.XmlWriter writer = new org.ovirt.api.metamodel.runtime.xml.XmlWriter(new org.apache.commons.io.output.NullOutputStream(), false)) { org.ovirt.engine.api.xml.V4XmlVmWriter.writeMany(infinite, writer); } long after = java.lang.System.currentTimeMillis(); long elapsed = after - before; assertTrue((elapsed < 60000000)); }	@org.junit.Test @org.junit.Ignore public void testOneMillion() throws java.io.IOException { java.util.Iterator<org.ovirt.engine.api.types.V4Vm> infinite = new java.util.Iterator<org.ovirt.engine.api.types.V4Vm>() { private int count; @java.lang.Override public boolean hasNext() { return (count) < 1000000; } @java.lang.Override public org.ovirt.engine.api.types.V4Vm next() { org.ovirt.engine.api.types.V4Vm object = vm().id(java.lang.String.valueOf(count)).name(("vm" + (count))).disks(disk().id("123").alias("disk1")).disks(disk().id("456").alias("disk2")).build(); (count)++; return object; } }; long before = java.lang.System.currentTimeMillis(); try (org.ovirt.api.metamodel.runtime.xml.XmlWriter writer = new org.ovirt.api.metamodel.runtime.xml.XmlWriter(new org.apache.commons.io.output.NullOutputStream(), false)) { org.ovirt.engine.api.xml.V4XmlVmWriter.writeMany(infinite, writer); } long after = java.lang.System.currentTimeMillis(); long elapsed = after - before; assertTrue((elapsed < 60000000)); }
@org.junit.Test public void testCustomTagWithEmptyObject() { org.ovirt.engine.api.types.V4Vm object = newVm().build(); assertEquals("<mytag></mytag>", objectToXml(object, "mytag")); }	@org.junit.Test public void testCustomTagWithEmptyObject() { org.ovirt.engine.api.types.V4Vm object = vm().build(); assertEquals("<mytag></mytag>", objectToXml(object, "mytag")); }
@org.junit.Test public void test1() { org.ovirt.engine.api.types.V4Vm object = newVm().setMemory(1).build(); assertEquals("<vm><memory>1</memory></vm>", objectToXml(object)); }	@org.junit.Test public void test1() { org.ovirt.engine.api.types.V4Vm object = vm().memory(1).build(); assertEquals("<vm><memory>1</memory></vm>", objectToXml(object)); }
private void generateWriterSource(org.ovirt.api.metamodel.concepts.StructType type) { org.ovirt.api.metamodel.tool.JavaClassName writerName = javaTypes.getJsonWriterName(type); org.ovirt.api.metamodel.tool.JavaClassName baseName = javaTypes.getBaseJsonWriterName(); javaBuffer.addLine("public class %1$s extends %2$s {", writerName.getSimpleName(), baseName.getSimpleName()); javaBuffer.addLine(); generateWriteOne(type); generateWriteMany(type); javaBuffer.addLine("}"); javaBuffer.addLine(); }	private void generateWriterSource(org.ovirt.api.metamodel.concepts.StructType type) { org.ovirt.api.metamodel.tool.JavaClassName writerName = javaTypes.getJsonWriterName(type); javaBuffer.addLine("public class %1$s {", writerName.getSimpleName()); javaBuffer.addLine(); generateWriteOne(type); generateWriteMany(type); javaBuffer.addLine("}"); javaBuffer.addLine(); }
private void generateReaderSource(org.ovirt.api.metamodel.concepts.StructType type) { org.ovirt.api.metamodel.tool.JavaClassName baseName = javaTypes.getBaseJsonReaderName(); org.ovirt.api.metamodel.tool.JavaClassName readerName = javaTypes.getJsonReaderName(type); javaBuffer.addImport(baseName); javaBuffer.addLine("public class %1$s extends %2$s {", readerName.getSimpleName(), baseName.getSimpleName()); javaBuffer.addLine(); generateReadOne(type); generateReadMany(type); javaBuffer.addLine("}"); javaBuffer.addLine(); }	private void generateReaderSource(org.ovirt.api.metamodel.concepts.StructType type) { org.ovirt.api.metamodel.tool.JavaClassName readerName = javaTypes.getJsonReaderName(type); javaBuffer.addLine("public class %1$s {", readerName.getSimpleName()); javaBuffer.addLine(); generateReadOne(type); generateReadMany(type); javaBuffer.addLine("}"); javaBuffer.addLine(); }
@org.junit.Test public void testCustomTagWithNonEmpty() { org.ovirt.engine.api.types.V4Vm object = newVm().setId("123").setName("myvm").build(); assertEquals("<mytag id=\"123\"><name>myvm</name></mytag>", objectToXml(object, "mytag")); }	@org.junit.Test public void testCustomTagWithNonEmpty() { org.ovirt.engine.api.types.V4Vm object = vm().id("123").name("myvm").build(); assertEquals("<mytag id=\"123\"><name>myvm</name></mytag>", objectToXml(object, "mytag")); }
@org.junit.Test public void test0() { org.ovirt.engine.api.types.V4Vm object = newVm().setMemory(0).build(); assertEquals("<vm><memory>0</memory></vm>", objectToXml(object)); }	@org.junit.Test public void test0() { org.ovirt.engine.api.types.V4Vm object = vm().memory(0).build(); assertEquals("<vm><memory>0</memory></vm>", objectToXml(object)); }
@org.junit.Test public void testEmptyId() { org.ovirt.engine.api.types.V4Vm object = newVm().setId("").build(); assertEquals("<vm id=\"\"></vm>", objectToXml(object)); }	@org.junit.Test public void testEmptyId() { org.ovirt.engine.api.types.V4Vm object = vm().id("").build(); assertEquals("<vm id=\"\"></vm>", objectToXml(object)); }
@org.junit.Test public void testListWithOneObject() { java.util.List<org.ovirt.engine.api.types.V4Vm> list = java.util.Collections.singletonList(newVm().build()); assertEquals("<vms><vm></vm></vms>", listToXml(list.iterator())); }	@org.junit.Test public void testListWithOneObject() { java.util.List<org.ovirt.engine.api.types.V4Vm> list = java.util.Collections.singletonList(vm().build()); assertEquals("<vms><vm></vm></vms>", listToXml(list.iterator())); }
@org.junit.Test public void testListWithMultipleObjects() { java.util.List<org.ovirt.engine.api.types.V4Vm> list = new java.util.ArrayList<>(); list.add(newVm().build()); list.add(newVm().build()); assertEquals("<vms><vm></vm><vm></vm></vms>", listToXml(list.iterator())); }	@org.junit.Test public void testListWithMultipleObjects() { java.util.List<org.ovirt.engine.api.types.V4Vm> list = new java.util.ArrayList<>(); list.add(vm().build()); list.add(vm().build()); assertEquals("<vms><vm></vm><vm></vm></vms>", listToXml(list.iterator())); }
@org.junit.Test public void testNullName() { org.ovirt.engine.api.types.V4Vm object = newVm().setName(null).build(); assertEquals("<vm></vm>", objectToXml(object)); }	@org.junit.Test public void testNullName() { org.ovirt.engine.api.types.V4Vm object = vm().name(null).build(); assertEquals("<vm></vm>", objectToXml(object)); }
@org.junit.Test public void testVeryLong() { java.math.BigInteger memory = java.math.BigInteger.TEN.multiply(java.math.BigInteger.valueOf(java.lang.Long.MAX_VALUE)); org.ovirt.engine.api.types.V4Vm object = newVm().setMemory(memory).build(); assertEquals("<vm><memory>92233720368547758070</memory></vm>", objectToXml(object)); }	@org.junit.Test public void testVeryLong() { java.math.BigInteger memory = java.math.BigInteger.TEN.multiply(java.math.BigInteger.valueOf(java.lang.Long.MAX_VALUE)); org.ovirt.engine.api.types.V4Vm object = vm().memory(memory).build(); assertEquals("<vm><memory>92233720368547758070</memory></vm>", objectToXml(object)); }
@org.junit.Test public void testNested() { org.ovirt.engine.api.types.V4Vm object = newVm().setCpu(newCpu().setMode("mymode")).build(); assertEquals("{'cpu':{'mode':'mymode'}}", objectToJson(object)); }	@org.junit.Test public void testNested() { org.ovirt.engine.api.types.V4Vm object = vm().cpu(cpu().mode("mymode")).build(); assertEquals("{'cpu':{'mode':'mymode'}}", objectToJson(object)); }
@org.junit.Test public void testListWithCustomTag() { java.util.List<org.ovirt.engine.api.types.V4Vm> list = java.util.Collections.singletonList(newVm().build()); assertEquals("<mylist><myitem></myitem></mylist>", listToXml(list.iterator(), "myitem", "mylist")); }	@org.junit.Test public void testListWithCustomTag() { java.util.List<org.ovirt.engine.api.types.V4Vm> list = java.util.Collections.singletonList(vm().build()); assertEquals("<mylist><myitem></myitem></mylist>", listToXml(list.iterator(), "myitem", "mylist")); }
@org.junit.Test public void test1() { org.ovirt.engine.api.types.V4Vm object = newVm().setMemory(1).build(); assertEquals("{'memory':1}", objectToJson(object)); }	@org.junit.Test public void test1() { org.ovirt.engine.api.types.V4Vm object = vm().memory(1).build(); assertEquals("{'memory':1}", objectToJson(object)); }
@org.junit.Test public void testMigrationPolicyChangeVmUp() { prepareVmToPassCanDoAction(); doReturn(true).when(command).isDedicatedVdsExistOnSameCluster(any(org.ovirt.engine.core.common.businessentities.VmBase.class), any(java.util.ArrayList.class)); vm.setStatus(VMStatus.Up); vm.setMigrationSupport(MigrationSupport.MIGRATABLE); vm.setRunOnVds(org.ovirt.engine.core.bll.UpdateVmCommandTest.GUIDS[2]); vm.setRunOnVdsName("host_2"); vmStatic.setMigrationSupport(MigrationSupport.PINNED_TO_HOST); vmStatic.setDedicatedVmForVdsList(java.util.Arrays.asList(org.ovirt.engine.core.bll.UpdateVmCommandTest.GUIDS[2])); assertTrue("validate should allow pinning VM.", command.validate()); }	@org.junit.Test public void testMigrationPolicyChangeVmUp() { prepareVmToPassCanDoAction(); doReturn(true).when(command).isDedicatedVdsExistOnSameCluster(any(org.ovirt.engine.core.common.businessentities.VmBase.class), any(java.util.ArrayList.class)); vm.setStatus(VMStatus.Up); vm.setMigrationSupport(MigrationSupport.MIGRATABLE); vm.setRunOnVds(org.ovirt.engine.core.bll.UpdateVmCommandTest.GUIDS[2]); vm.setRunOnVdsName("host_2"); vmStatic.setMigrationSupport(MigrationSupport.PINNED_TO_HOST); vmStatic.setDedicatedVmForVdsList(java.util.Arrays.asList(org.ovirt.engine.core.bll.UpdateVmCommandTest.GUIDS[2])); assertTrue("validate should allow pinning VM.", command.canDoAction()); }
@org.junit.Test public void testMigrationPolicyChangeFail() { prepareVmToPassCanDoAction(); doReturn(true).when(command).isDedicatedVdsExistOnSameCluster(any(org.ovirt.engine.core.common.businessentities.VmBase.class), any(java.util.ArrayList.class)); vm.setStatus(VMStatus.Up); vm.setMigrationSupport(MigrationSupport.MIGRATABLE); vm.setRunOnVds(org.ovirt.engine.core.bll.UpdateVmCommandTest.GUIDS[1]); vm.setRunOnVdsName("host_1"); vmStatic.setMigrationSupport(MigrationSupport.PINNED_TO_HOST); vmStatic.setDedicatedVmForVdsList(java.util.Arrays.asList(org.ovirt.engine.core.bll.UpdateVmCommandTest.GUIDS[2])); assertFalse("validate should fail with can't pin VM.", command.validate()); assertCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_PINNED_VM_NOT_RUNNING_ON_DEDICATED_HOST); }	@org.junit.Test public void testMigrationPolicyChangeFail() { prepareVmToPassCanDoAction(); doReturn(true).when(command).isDedicatedVdsExistOnSameCluster(any(org.ovirt.engine.core.common.businessentities.VmBase.class), any(java.util.ArrayList.class)); vm.setStatus(VMStatus.Up); vm.setMigrationSupport(MigrationSupport.MIGRATABLE); vm.setRunOnVds(org.ovirt.engine.core.bll.UpdateVmCommandTest.GUIDS[1]); vm.setRunOnVdsName("host_1"); vmStatic.setMigrationSupport(MigrationSupport.PINNED_TO_HOST); vmStatic.setDedicatedVmForVdsList(java.util.Arrays.asList(org.ovirt.engine.core.bll.UpdateVmCommandTest.GUIDS[2])); assertFalse("validate should fail with can't pin VM.", command.canDoAction()); assertCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_PINNED_VM_NOT_RUNNING_ON_DEDICATED_HOST); }
protected org.ovirt.engine.core.bll.ValidationResult validateBondModeVsNetworksAttachedToIt(java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> hostInterfacesByNetworkName = org.ovirt.engine.core.common.businessentities.Entities.hostInterfacesByNetworkName(existingInterfaces); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : attachmentsToConfigure) { if (!(mustAttachementBeCheckedForBondMode(attachment, hostInterfacesByNetworkName))) { continue; } org.ovirt.engine.core.common.<START_MOD>action.CreateOrUpdateBond bondToCheck = createOrUpdateBondBusinessEntityMap.get(attachment.getNicName()); if (bondToCheck == null) { org.ovirt.engine.core.common.<END_MOD>businessentities.network.<START_MOD>VdsNetworkInterface existingNetworkInterfaceForAttachement = existingInterfacesMap.get(attachment.getNicName()); if ((existingNetworkInterfaceForAttachement == null) || (!(existingNetworkInterfaceForAttachement.isBond()))) { continue; } bondToCheck = org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(((org.ovirt.engine.core.common.businessentities.network.<END_MOD>Bond<START_MOD>) (<END_MOD>existingNetworkInterfaceForAttachement<START_MOD>)<END_MOD>)); } java.lang.String networkLabel = networkBusinessEntityMap.get(attachment.getNetworkName()).getLabel(); org.ovirt.engine.core.bll.ValidationResult validationResult = checkBondMode(bondToCheck, networkLabel, attachment.getNetworkName()); if (!(validationResult.isValid())) { return validationResult; } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	protected org.ovirt.engine.core.bll.ValidationResult validateBondModeVsNetworksAttachedToIt(java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> hostInterfacesByNetworkName = org.ovirt.engine.core.utils.NetworkUtils.hostInterfacesByNetworkName(existingInterfaces); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : attachmentsToConfigure) { if (!(mustAttachementBeCheckedForBondMode(attachment, hostInterfacesByNetworkName))) { continue; } org.ovirt.engine.core.common.action.CreateOrUpdateBond bondToCheck = createOrUpdateBondBusinessEntityMap.get(attachment.getNicName()); if (bondToCheck == null) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingNetworkInterfaceForAttachement = existingInterfacesMap.get(attachment.getNicName()); if ((existingNetworkInterfaceForAttachement == null) || (!(existingNetworkInterfaceForAttachement.isBond()))) { continue; } bondToCheck = org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(((org.ovirt.engine.core.common.businessentities.network.Bond) (existingNetworkInterfaceForAttachement))); } java.lang.String networkLabel = networkBusinessEntityMap.get(attachment.getNetworkName()).getLabel(); org.ovirt.engine.core.bll.ValidationResult validationResult = checkBondMode(bondToCheck, networkLabel, attachment.getNetworkName()); if (!(validationResult.isValid())) { return validationResult; } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private boolean bondsHasSameSlaves(org.ovirt.engine.core.common.businessentities.network.Bond existingNic) { java.util.Set<java.lang.String> slavesOfBondFromRequest = getSlaves(); java.util.List<java.lang.String> slavesOfExistingBond = existingNic.getSlaves(); if ((slavesOfBondFromRequest == null) || (slavesOfExistingBond == null)) { return slavesOfBondFromRequest == slavesOfExistingBond; } else { return ((slavesOfBondFromRequest.size()) == (slavesOfExistingBond.size())) && (slavesOfBondFromRequest.containsAll(slavesOfExistingBond)); } }	private boolean bondsHasSameSlaves(org.ovirt.engine.core.common.businessentities.network.Bond existingNic) { java.util.Collection<java.lang.String> slavesOfBondFromRequest = replaceNullWithEmptyList(getSlaves()); java.util.Collection<java.lang.String> slavesOfExistingBond = replaceNullWithEmptyList(existingNic.getSlaves()); return ((slavesOfBondFromRequest.size()) == (slavesOfExistingBond.size())) && (slavesOfBondFromRequest.containsAll(slavesOfExistingBond)); }
@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveIsNotValid() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond(); bond.setSlaves(java.util.Arrays.asList("slaveA", "slaveB")); org.ovirt.engine.core.bll.ValidationResult cannotBeSlaveValidationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_BOND_OR_VLAN_CANNOT_BE_SLAVE, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(HostInterfaceValidator.VAR_INTERFACE_NAME, bond.getName())); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(<START_MOD>org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(bond)<END_MOD>)).build(); _doTestValidateModifiedBondSlaves(spy(validator), ValidationResult.VALID, cannotBeSlaveValidationResult, failsWith(cannotBeSlaveValidationResult)); }	@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveIsNotValid() throws java.lang.Exception { org.ovirt.engine.core.common.action.CreateOrUpdateBond createOrUpdateBond = createNewCreateOrUpdateBond(org.ovirt.engine.core.compat.Guid.newGuid(), "bond1", "slaveA", "slaveB"); org.ovirt.engine.core.bll.ValidationResult cannotBeSlaveValidationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_BOND_OR_VLAN_CANNOT_BE_SLAVE, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(HostInterfaceValidator.VAR_NIC_NAME, createOrUpdateBond.getName())); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(createOrUpdateBond)).build(); doTestValidateModifiedBondSlaves(spy(validator), ValidationResult.VALID, cannotBeSlaveValidationResult, failsWith(cannotBeSlaveValidationResult)); }
private org.ovirt.engine.core.bll.ValidationResult validateCoherentNicIdentification(org.ovirt.engine.core.common.<START_MOD>action<END_MOD>.<START_MOD>CreateOrUpdateBond<END_MOD> <START_MOD>createOrUpdateBond<END_MOD>) { org.ovirt.engine.core.compat.Guid nicId = <START_MOD>createOrUpdateBond<END_MOD>.getId(); java.lang.String nicName = <START_MOD>createOrUpdateBond<END_MOD>.getName(); org.ovirt.engine.core.common.errors.EngineMessage message = org.ovirt.engine.core.common.errors.EngineMessage.BOND_REFERENCES_NICS_INCOHERENTLY; return hostSetupNetworksValidatorHelper.validateCoherentIdentification(<START_MOD>createOrUpdateBond<END_MOD>.getName(), nicId, nicName, message, existingInterfacesMap); }	private org.ovirt.engine.core.bll.ValidationResult validateCoherentNicIdentification(org.ovirt.engine.core.common.action.CreateOrUpdateBond createOrUpdateBond) { org.ovirt.engine.core.compat.Guid nicId = createOrUpdateBond.getId(); java.lang.String nicName = createOrUpdateBond.getName(); org.ovirt.engine.core.common.errors.EngineMessage message = org.ovirt.engine.core.common.errors.EngineMessage.BOND_REFERENCES_NICS_INCOHERENTLY; return hostSetupNetworksValidatorHelper.validateCoherentIdentification(nicName, nicId, nicName, message, existingInterfacesMap); }
@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveInterfaceDoesNotExist() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond(); bond.setSlaves(java.util.Arrays.asList("slaveA", "slaveB")); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(<START_MOD>org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(<END_MOD>bond))<START_MOD>)<END_MOD>.build(); _doTestValidateModifiedBondSlaves(spy(validator), new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST), ValidationResult.VALID, failsWith(EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST)); }	@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveInterfaceDoesNotExist() throws java.lang.Exception { org.ovirt.engine.core.common.action.CreateOrUpdateBond createOrUpdateBond = createNewCreateOrUpdateBond(org.ovirt.engine.core.compat.Guid.newGuid(), "bond1", "slaveA", "slaveB"); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(createOrUpdateBond)).build(); doTestValidateModifiedBondSlaves(spy(validator), new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST), ValidationResult.VALID, failsWith(EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST)); }
@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveAlreadySlavesForDifferentBondButItsDetachedFromItAsAPartOfRequest() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond("bond1"); org.ovirt.engine.core.common.businessentities.network.Bond differentBond = createBond("bond2"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveA = createBondSlave(bond, "slaveA"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveB = createBondSlave(differentBond, "slaveB"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveC = createBondSlave(differentBond, "slaveC"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveD = createBondSlave(differentBond, "slaveD"); setBondSlaves(bond, slaveA, slaveB); setBondSlaves(differentBond, slaveC, slaveD); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator build = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(<START_MOD>org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(bond), org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(differentBond)<END_MOD>)).addExistingInterfaces(bond, differentBond, slaveA, slaveB, slaveC, slaveD).build(); _doTestValidateModifiedBondSlaves(spy(build), ValidationResult.VALID, ValidationResult.VALID, isValid()); }	@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveAlreadySlavesForDifferentBondButItsDetachedFromItAsAPartOfRequest() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond("bond1"); org.ovirt.engine.core.common.businessentities.network.Bond differentBond = createBond("bond2"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveA = createBondSlave(bond, "slaveA"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveB = createBondSlave(differentBond, "slaveB"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveC = createBondSlave(differentBond, "slaveC"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveD = createBondSlave(differentBond, "slaveD"); setBondSlaves(bond, slaveA, slaveB); setBondSlaves(differentBond, slaveC, slaveD); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator build = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(bond), org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(differentBond))).addExistingInterfaces(bond, differentBond, slaveA, slaveB, slaveC, slaveD).build(); doTestValidateModifiedBondSlaves(spy(build), ValidationResult.VALID, ValidationResult.VALID, isValid()); }
private org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters createSetupNetworksParameters(int timeout) { final org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters hostCmdParams = new org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds(), getNetworksToConfigure(), getAllNetworksToRemove(), org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().<START_MOD>getCreateOrUpdateBonds<END_MOD>(), getRemovedBondNames()); hostCmdParams.setRollbackOnFailure(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().rollbackOnFailure()); hostCmdParams.setConectivityTimeout(timeout); boolean hostNetworkQosSupported = org.ovirt.engine.core.common.FeatureSupported.hostNetworkQos(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getVdsGroupCompatibilityVersion()); hostCmdParams.setHostNetworkQosSupported(hostNetworkQosSupported); return hostCmdParams; }	private org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters createSetupNetworksParameters(int timeout) { final org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters hostCmdParams = new org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds(), getNetworksToConfigure(), getAllNetworksToRemove(), org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getCreateOrUpdateBonds(), getRemovedBondNames()); hostCmdParams.setRollbackOnFailure(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().rollbackOnFailure()); hostCmdParams.setConnectivityTimeout(timeout); boolean hostNetworkQosSupported = org.ovirt.engine.core.common.FeatureSupported.hostNetworkQos(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getClusterCompatibilityVersion()); hostCmdParams.setHostNetworkQosSupported(hostNetworkQosSupported); hostCmdParams.setManagementNetworkChanged(isManagementNetworkChanged()); return hostCmdParams; }
@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveAlreadySlavesForDifferentBond() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond("bond1"); org.ovirt.engine.core.common.businessentities.network.Bond differentBond = createBond("bond2"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveA = createBondSlave(bond, "slaveA"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveB = createBondSlave(differentBond, "slaveB"); setBondSlaves(bond, slaveA, slaveB); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_ALREADY_IN_BOND; org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(<START_MOD>org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(bond)<END_MOD>)).addExistingInterfaces(bond, differentBond, slaveA, slaveB).build(); _doTestValidateModifiedBondSlaves(spy(validator), ValidationResult.VALID, ValidationResult.VALID, failsWith(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(engineMessage, slaveB.getName()))); }	@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveAlreadySlavesForDifferentBond() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond("bond1"); org.ovirt.engine.core.common.businessentities.network.Bond differentBond = createBond("bond2"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveA = createBondSlave(bond, "slaveA"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveB = createBondSlave(differentBond, "slaveB"); setBondSlaves(bond, slaveA, slaveB); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_ALREADY_IN_BOND; org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(bond))).addExistingInterfaces(bond, differentBond, slaveA, slaveB).build(); doTestValidateModifiedBondSlaves(spy(validator), ValidationResult.VALID, ValidationResult.VALID, failsWith(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(engineMessage, slaveB.getName()))); }
private void removeUnchangedBonds(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingNics) { for (java.util.Iterator<org.ovirt.engine.core.common.<START_MOD>action.CreateOrUpdateBond> iterator = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getCreateOrUpdateBonds().iterator(); iterator.hasNext();) { org.ovirt.engine.core.common.action.CreateOrUpdateBond bondFromRequest = iterator.next(); for (org.ovirt.engine.core.common.<END_MOD>businessentities.network.<START_MOD>VdsNetworkInterface existingNic : existingNics) { if ((existingNic.isBond()) && (bondFromRequest.equalToBond(((org.ovirt.engine.core.common.businessentities.network.<END_MOD>Bond<START_MOD>) (<END_MOD>existingNic<START_MOD>))<END_MOD>))) { iterator.remove(); } } } }	public boolean attachmentFromRequestIsEqualToAlreadyExistingOne(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachmentFromRequest, org.ovirt.engine.core.common.businessentities.network.NetworkAttachment existingNetworkAttachment) { return ((((((((existingNetworkAttachment != null) && (java.util.Objects.equals(networkAttachmentFromRequest.getId(), existingNetworkAttachment.getId()))) && (java.util.Objects.equals(networkAttachmentFromRequest.getNetworkId(), existingNetworkAttachment.getNetworkId()))) && (java.util.Objects.equals(networkAttachmentFromRequest.getNetworkName(), existingNetworkAttachment.getNetworkName()))) && (java.util.Objects.equals(networkAttachmentFromRequest.getNicId(), existingNetworkAttachment.getNicId()))) && (java.util.Objects.equals(networkAttachmentFromRequest.getHostNetworkQos(), existingNetworkAttachment.getHostNetworkQos()))) && (java.util.Objects.equals(networkAttachmentFromRequest.getNicName(), existingNetworkAttachment.getNicName()))) && (java.util.Objects.equals(networkAttachmentFromRequest.getIpConfiguration(), existingNetworkAttachment.getIpConfiguration()))) && (java.util.Objects.equals(networkAttachmentFromRequest.getProperties(), existingNetworkAttachment.getProperties())); }
public org.ovirt.engine.core.bll.ValidationResult validate() { java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure = getAttachmentsToConfigure(); org.ovirt.engine.core.bll.ValidationResult vr = org.ovirt.engine.core.bll.ValidationResult.VALID; vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NicLabelValidator(params, existingInterfacesMap, <START_MOD>createOrUpdateBondBusinessEntityMap<END_MOD>, hostSetupNetworksValidatorHelper).validate(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validRemovedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedBonds(); vr = (skipValidation(vr)) ? vr : validRemovedBonds(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : attachmentsDontReferenceSameNetworkDuplicately(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : networksUniquelyConfiguredOnHost(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateNetworkExclusiveOnNics(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NetworkMtuValidator(networkBusinessEntityMap).validateMtu(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateCustomProperties(); vr = (skipValidation(vr)) ? vr : validateQos(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateBondModeVsNetworksAttachedToIt(attachmentsToConfigure); return vr; }	public org.ovirt.engine.core.bll.ValidationResult validate() { java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure = getAttachmentsToConfigure(); org.ovirt.engine.core.bll.ValidationResult vr = org.ovirt.engine.core.bll.ValidationResult.VALID; vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NicLabelValidator(params, existingInterfacesMap, createOrUpdateBondBusinessEntityMap, hostSetupNetworksValidatorHelper).validate(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validRemovedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedBonds(); vr = (skipValidation(vr)) ? vr : validRemovedBonds(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : attachmentsDontReferenceSameNetworkDuplicately(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : networksUniquelyConfiguredOnHost(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateNetworkExclusiveOnNics(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NetworkMtuValidator(networkBusinessEntityMap).validateMtu(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateCustomProperties(); vr = (skipValidation(vr)) ? vr : validateQos(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateBondModeVsNetworksAttachedToIt(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : unmanagedNetworkValidator.validate(params, existingInterfaces, networkBusinessEntityMap); return vr; }
@java.lang.Override public void removeAllCommandsInHierarchy(final org.ovirt.engine.core.compat.Guid commandId) { getChildCommandIds(commandId)<START_MOD>.forEach(this::<END_MOD>removeAllCommandsInHierarchy); removeCommand(commandId); }	@java.lang.Override public void removeAllCommandsInHierarchy(final org.ovirt.engine.core.compat.Guid commandId) { for (org.ovirt.engine.core.compat.Guid childCmdId : new java.util.ArrayList(getChildCommandIds(commandId))) { removeAllCommandsInHierarchy(childCmdId); } removeCommand(commandId); }
public static java.util.List<java.lang.String> getChangedFields(java.lang.Object source, java.lang.Object destination) { final java.util.List<java.lang.String> returnValue = new java.util.ArrayList<>(); if (source.getClass().isInstance(destination)) { java.lang.Class<?> objectType = source.getClass(); java.util.List<org.ovirt.engine.core.compat.backendcompat.PropertyInfo> properties = org.ovirt.engine.core.compat.backendcompat.TypeCompat.getProperties(objectType); for (org.ovirt.engine.core.compat.backendcompat.PropertyInfo property : properties) { java.lang.Object sourceValue = property.getValue(source, null); java.lang.Object destinationValue = property.getValue(destination, null); if ((property.getCanWrite()) && (!(<START_MOD>org.ovirt.engine.core.utils.ObjectIdentityChecker.equalValues<END_MOD>(sourceValue, destinationValue)))) { returnValue.add(property.getName()); } } } return returnValue; }	public static java.util.List<java.lang.String> getChangedFields(java.lang.Object source, java.lang.Object destination) { final java.util.List<java.lang.String> returnValue = new java.util.ArrayList<>(); if (source.getClass().isInstance(destination)) { java.lang.Class<?> objectType = source.getClass(); java.util.List<org.ovirt.engine.core.compat.backendcompat.PropertyInfo> properties = org.ovirt.engine.core.compat.backendcompat.TypeCompat.getProperties(objectType); for (org.ovirt.engine.core.compat.backendcompat.PropertyInfo property : properties) { java.lang.Object sourceValue = property.getValue(source, null); java.lang.Object destinationValue = property.getValue(destination, null); if ((property.getCanWrite()) && (!(java.util.Objects.equals(sourceValue, destinationValue)))) { returnValue.add(property.getName()); } } } return returnValue; }
private static boolean equalValues(java.lang.Object sourceValue, java.lang.Object destinationValue) { if ((sourceValue instanceof java.util.Date) && (destinationValue instanceof java.util.Date)) { long sourceTime = (((java.util.Date) (sourceValue)).getTime()) / 1000L; long destinationTime = (((java.util.Date) (destinationValue)).getTime()) / 1000L; return sourceTime == destinationTime; } return java.util.Objects.equals(sourceValue, destinationValue); }	public final boolean isHostedEngineUpdateValid(java.lang.Object source, java.lang.Object destination) { if ((source.getClass()) != (destination.getClass())) { return false; } for (java.lang.String fieldName : org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(source, destination)) { if (!(isHostedEngineFieldUpdatable(fieldName))) { return false; } } return true; }
private void flush(java.util.List<org.ovirt.engine.core.vdsbroker.monitoring.VmAnalyzer> vmAnalyzers) { saveVmDynamic(vmAnalyzers); saveVmStatistics(vmAnalyzers); saveVmInterfaceStatistics(vmAnalyzers); saveVmDiskImageStatistics(vmAnalyzers); <START_MOD>saveVmLunDisks<END_MOD>(vmAnalyzers); saveVmGuestAgentNetworkDevices(vmAnalyzers); saveVmJobsToDb(vmAnalyzers); }	private void flush(java.util.List<org.ovirt.engine.core.vdsbroker.monitoring.VmAnalyzer> vmAnalyzers) { saveVmDynamic(vmAnalyzers); saveVmStatistics(vmAnalyzers); saveVmInterfaceStatistics(vmAnalyzers); saveVmDiskImageStatistics(vmAnalyzers); saveVmGuestAgentNetworkDevices(vmAnalyzers); saveVmJobsToDb(vmAnalyzers); }
@org.junit.Test public void testGetAllForVmWithBlockJob() { java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> jobs = getAllForVm(FixturesTool.VM_RHEL5_POOL_59); assertEquals(1, jobs.size()); assertEquals(FixturesTool.EXISTING_VM_BLOCK_JOB, jobs.get(0).getId()); assertTrue(((jobs.get(0)) instanceof org.ovirt.engine.core.common.businessentities.VmBlockJob)); }	@org.junit.Test public void testGetAllForVmWithBlockJob() { java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> jobs = dao.getAllForVm(FixturesTool.VM_RHEL5_POOL_59); assertEquals(1, jobs.size()); assertEquals(FixturesTool.EXISTING_VM_BLOCK_JOB, jobs.get(0).getId()); assertTrue(((jobs.get(0)) instanceof org.ovirt.engine.core.common.businessentities.VmBlockJob)); }
protected org.ovirt.engine.core.vdsbroker.monitoring.VmAnalyzer getVmAnalyzer(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> monitoredVm) { return new org.ovirt.engine.core.vdsbroker.monitoring.VmAnalyzer(monitoredVm.getFirst(), monitoredVm.getSecond(), updateStatistics, vdsManager, auditLogDirector, resourceManager, vmStaticDao, vmDynamicDao, vmDao, vmNetworkInterfaceDao, vdsDao, diskDao, vmNumaNodeDao, vdsNumaNodesSupplier<START_MOD>, vmJobsSupplier<END_MOD>); }	protected org.ovirt.engine.core.vdsbroker.monitoring.VmAnalyzer getVmAnalyzer(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> monitoredVm) { return new org.ovirt.engine.core.vdsbroker.monitoring.VmAnalyzer(monitoredVm.getFirst(), monitoredVm.getSecond(), updateStatistics, vdsManager, auditLogDirector, resourceManager, vmStaticDao, vmDynamicDao, vmDao, vmNetworkInterfaceDao, vdsDao, vdsNumaNodesProvider, vmNumaNodeDao); }
@javax.annotation.PostConstruct private void initSuppliers() { if (updateStatistics) { vdsNumaNodesSupplier = new org.ovirt.engine.core.utils.MemoizingSupplier(() -> { return vdsNumaNodeDao.getAllVdsNumaNodeByVdsId(vdsManager.getVdsId()).stream().collect(toMap(org.ovirt.engine.core.common.businessentities.VdsNumaNode::getIndex, java.util.function.Function.identity())); }); <START_MOD>vmJobsSupplier = new org.ovirt.engine.core.utils.MemoizingSupplier(() -> { return vmJobDao.getAll(); }); <END_MOD>} }	private void initProviders() { if (updateStatistics) { vdsNumaNodesProvider = new org.ovirt.engine.core.utils.MemoizingSupplier(() -> { return vdsNumaNodeDao.getAllVdsNumaNodeByVdsId(vdsManager.getVdsId()).stream().collect(toMap(org.ovirt.engine.core.common.businessentities.VdsNumaNode::getIndex, java.util.function.Function.identity())); }); } }
@org.junit.Test public void testDelete() { dao.remove(FixturesTool.EXISTING_VM_JOB); java.util.List<org.ovirt.engine.core.compat.Guid> ids = <START_MOD>getAllJobIds<END_MOD>(); assertTrue(ids.remove(FixturesTool.EXISTING_VM_BLOCK_JOB)); assertTrue(ids.isEmpty()); }	@org.junit.Test public void testDelete() { dao.remove(FixturesTool.EXISTING_VM_JOB); java.util.List<org.ovirt.engine.core.compat.Guid> ids = dao.getAllIds(); assertTrue(ids.remove(FixturesTool.EXISTING_VM_BLOCK_JOB)); assertTrue(ids.isEmpty()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> getAll() { <START_MOD>return<END_MOD> <START_MOD>getCallsHandler().executeReadList("GetAllFromVmJobs",<END_MOD> org.<START_MOD>ovirt<END_MOD>.<START_MOD>engine<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>dao.VmJobDaoImpl.VmJobRowMapper.instance, getCustomMapSqlParameterSource<END_MOD>(<START_MOD>)<END_MOD>); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> getAll() { throw new org.apache.commons.lang.NotImplementedException(); }
@org.junit.Test public void testGetAllForVmWithNonExistentVm() { java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> jobs = getAllForVm(Guid.Empty); assertTrue(jobs.isEmpty()); }	@org.junit.Test public void testGetAllForVmWithNonExistentVm() { java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> jobs = dao.getAllForVm(Guid.Empty); assertTrue(jobs.isEmpty()); }
@org.junit.Test public void testGetAllForVmWithJob() { java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> jobs = getAllForVm(FixturesTool.VM_RHEL5_POOL_57); assertEquals(1, jobs.size()); assertEquals(FixturesTool.EXISTING_VM_JOB, jobs.get(0).getId()); }	@org.junit.Test public void testGetAllForVmWithJob() { java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> jobs = dao.getAllForVm(FixturesTool.VM_RHEL5_POOL_57); assertEquals(1, jobs.size()); assertEquals(FixturesTool.EXISTING_VM_JOB, jobs.get(0).getId()); }
private void assertInsert(org.ovirt.engine.core.common.businessentities.VmJob job) { dao.save(job); java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> jobs = getAllForVm(job.getVmId()); assertThat(jobs, hasItem(job)); dao.remove(job.getId()); }	private void assertInsert(org.ovirt.engine.core.common.businessentities.VmJob job) { dao.save(job); java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> jobs = dao.getAllForVm(job.getVmId()); assertThat(jobs, hasItem(job)); dao.remove(job.getId()); }
@org.junit.Test public void testGetAllIds() { java.util.List<org.ovirt.engine.core.compat.Guid> ids = <START_MOD>getAllJobIds<END_MOD>(); assertTrue(ids.remove(FixturesTool.EXISTING_VM_JOB)); assertTrue(ids.remove(FixturesTool.EXISTING_VM_BLOCK_JOB)); assertTrue(ids.isEmpty()); }	@org.junit.Test public void testGetAllIds() { java.util.List<org.ovirt.engine.core.compat.Guid> ids = dao.getAllIds(); assertTrue(ids.remove(FixturesTool.EXISTING_VM_JOB)); assertTrue(ids.remove(FixturesTool.EXISTING_VM_BLOCK_JOB)); assertTrue(ids.isEmpty()); }
public java.lang.String getNewPassword1() { return newPassword1; }	public java.lang.String getNewCredentials() { return newCredentials; }
public void setNewPassword2(java.lang.String newPassword2) { this.newPassword2 = newPassword2; }	public void setConfirmedNewCredentials(java.lang.String credentialsNew2) { this.confirmedNewCredentials = credentialsNew2; }
public java.lang.String getNewPassword2() { return newPassword2; }	public java.lang.String getConfirmedNewCredentials() { return confirmedNewCredentials; }
public static final java.lang.String mapMessageErrorCode(org.ovirt.engine.api.extensions.ExtMap outputMap) { java.lang.String msg = org.ovirt.engine.core.sso.utils.AuthnMessageMapper.USER_FAILED_TO_AUTHENTICATE; int authResult = outputMap.<java.lang.Integer>get(Authn.InvokeKeys.RESULT); if (authResult == (Authn.AuthResult.CREDENTIALS_EXPIRED)) { msg = org.ovirt.engine.core.sso.utils.AuthnMessageMapper.<START_MOD>USER_PASSWORD_EXPIRED_CHANGE_URL_PROVIDED<END_MOD>; } return msg; }	public static final java.lang.String mapMessageErrorCode(javax.servlet.http.HttpServletRequest request, java.lang.String profile, org.ovirt.engine.api.extensions.ExtMap outputMap) { int authResult = outputMap.<java.lang.Integer>get(Authn.InvokeKeys.RESULT); java.lang.String msg = (org.ovirt.engine.core.sso.utils.AuthnMessageMapper.messagesMap.containsKey(authResult)) ? org.ovirt.engine.core.sso.utils.AuthnMessageMapper.messagesMap.get(authResult) : org.ovirt.engine.core.sso.utils.AuthnMessageMapper.USER_FAILED_TO_AUTHENTICATE; if (authResult == (Authn.AuthResult.CREDENTIALS_EXPIRED)) { if (((outputMap.<java.lang.String>get(Authn.InvokeKeys.CREDENTIALS_CHANGE_URL)) != null) || (org.ovirt.engine.core.sso.utils.SSOUtils.getSsoContext(request).getSsoProfilesSupportingPasswdChange().contains(profile))) { msg = java.lang.String.format(org.ovirt.engine.core.sso.utils.AuthnMessageMapper.USER_PASSWORD_EXPIRED_CHANGE_URL_PROVIDED, ((request.getContextPath()) + (SSOConstants.INTERACTIVE_CHANGE_PASSWD_FORM_URI))); } else { msg = org.ovirt.engine.core.sso.utils.AuthnMessageMapper.USER_PASSWORD_EXPIRED; } } return msg; }
public void setNewPassword1(java.lang.String newPassword1) { this.newPassword1 = newPassword1; }	public void setNewCredentials(java.lang.String credentialsNew1) { this.newCredentials = credentialsNew1; }
public static void changePassword(org.ovirt.engine.core.sso.utils.SSOContext context, javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.Credentials credentials) throws org.ovirt.engine.core.sso.utils.AuthenticationException { org.ovirt.engine.core.sso.utils.AuthenticationUtils.ExtensionProfile profile = org.ovirt.engine.core.sso.utils.AuthenticationUtils.getExtensionProfile(context, credentials<START_MOD>.getProfile()<END_MOD>); java.lang.String user = org.ovirt.engine.core.sso.utils.AuthenticationUtils.mapUser(profile, credentials); org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug( invoking CREDENTIALS_CHANGE on authn org.ovirt.engine.api.extensions.ExtMap outputMap = profile.authn.invoke(new org.ovirt.engine.api.extensions.ExtMap().mput(Base.InvokeKeys.COMMAND, Authn.InvokeCommands.CREDENTIALS_CHANGE).mput(Authn.InvokeKeys.USER, user).mput(Authn.InvokeKeys.CREDENTIALS, credentials.getCredentials()).mput(Authn.InvokeKeys.CREDENTIALS_NEW, credentials.getCredentialsNew())); if (((outputMap.<java.lang.Integer>get(Base.InvokeKeys.RESULT)) != (Base.InvokeResult.SUCCESS)) || ((outputMap.<java.lang.Integer>get(Authn.InvokeKeys.RESULT)) != (Authn.AuthResult.SUCCESS))) { org.ovirt.engine.core.sso.utils.SSOUtils.getSsoSession(request).setChangePasswdCredentials(credentials); org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug( CREDENTIALS_CHANGE on authn failed throw new org.ovirt.engine.core.sso.utils.AuthenticationException(org.ovirt.engine.core.sso.utils.AuthnMessageMapper.mapMessageErrorCode(request, credentials.getProfile(), outputMap)); } org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug( CREDENTIALS_CHANGE on authn succeeded }	public static void changePassword(org.ovirt.engine.core.sso.utils.SSOContext context, javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.Credentials credentials) throws org.ovirt.engine.core.sso.utils.AuthenticationException { org.ovirt.engine.core.sso.utils.AuthenticationUtils.ExtensionProfile profile = org.ovirt.engine.core.sso.utils.AuthenticationUtils.getExtensionProfile(context, credentials.getProfile()); java.lang.String user = org.ovirt.engine.core.sso.utils.AuthenticationUtils.mapUser(profile, credentials); org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug("AuthenticationUtils.changePassword invoking CREDENTIALS_CHANGE on authn"); org.ovirt.engine.api.extensions.ExtMap outputMap = profile.authn.invoke(new org.ovirt.engine.api.extensions.ExtMap().mput(Base.InvokeKeys.COMMAND, Authn.InvokeCommands.CREDENTIALS_CHANGE).mput(Authn.InvokeKeys.USER, user).mput(Authn.InvokeKeys.CREDENTIALS, credentials.getCredentials()).mput(Authn.InvokeKeys.CREDENTIALS_NEW, credentials.getNewCredentials())); if (((outputMap.<java.lang.Integer>get(Base.InvokeKeys.RESULT)) != (Base.InvokeResult.SUCCESS)) || ((outputMap.<java.lang.Integer>get(Authn.InvokeKeys.RESULT)) != (Authn.AuthResult.SUCCESS))) { org.ovirt.engine.core.sso.utils.SSOUtils.getSsoSession(request).setChangePasswdCredentials(credentials); org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug("AuthenticationUtils.changePassword CREDENTIALS_CHANGE on authn failed"); throw new org.ovirt.engine.core.sso.utils.AuthenticationException(org.ovirt.engine.core.sso.utils.AuthnMessageMapper.mapMessageErrorCode(request, credentials.getProfile(), outputMap)); } org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug("AuthenticationUtils.changePassword CREDENTIALS_CHANGE on authn succeeded"); }
private static java.util.List<org.ovirt.engine.api.extensions.ExtMap> queryDirectoryGroups(final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension, final java.lang.String namespace, final org.ovirt.engine.api.extensions.ExtMap filter, boolean groupsResolving, boolean groupsResolvingRecursive) { java.util.List<org.ovirt.engine.api.extensions.ExtMap> directoryGroups = new java.util.ArrayList<>(); for (org.ovirt.engine.api.extensions.ExtMap group : org.ovirt.engine.core.sso.search.DirectoryUtils.queryGroupRecords(extension, namespace, filter, groupsResolving, groupsResolvingRecursive)) { directoryGroups.add(group); } return directoryGroups; }	private static java.util.List<org.ovirt.engine.api.extensions.ExtMap> queryDirectoryGroups(final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension, final java.lang.String namespace, final org.ovirt.engine.api.extensions.ExtMap filter, boolean groupsResolving, boolean groupsResolvingRecursive) { return org.ovirt.engine.core.sso.search.DirectoryUtils.queryGroupRecords(extension, namespace, filter, groupsResolving, groupsResolvingRecursive).stream().collect(java.util.stream.Collectors.toList()); }
public static java.util.Map<java.lang.String, java.lang.Object> searchUsers(java.lang.String token, org.ovirt.engine.core.aaa.QueryData queryData) { return org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.searchImpl(token, queryData, "users"); }	public static java.util.Map<java.lang.String, java.lang.Object> searchUsers(java.lang.String token, java.util.Map<java.lang.String, java.lang.Object> params) { return org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.search(token, params, "users", org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.authzSearchScope); }
private java.util.List<org.ovirt.engine.core.aaa.DirectoryUser> searchDirectoryUsers() { org.ovirt.engine.core.<START_MOD>aaa.QueryData data = initQueryData(true); if (data == null) { return java.util.Collections.emptyList(); } java.util.List<org.ovirt.engine.core.aaa.DirectoryUser> results = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.lang.Object> response = org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.searchUsers(sessionDataContainer.getSsoAccessToken(org.ovirt.engine.core.<END_MOD>bll.<START_MOD>SearchQuery.getParameters().getSessionId()),<END_MOD> data); if (<START_MOD>response.containsKey("result")) { java.util.List<org.ovirt.engine.api.extensions.ExtMap> users = ((java.util.List<org.ovirt.engine.api.extensions.ExtMap>) (response.get("result"))); results = users.stream().map((org.ovirt.engine.api.extensions.ExtMap u) -> org.ovirt.engine.core.bll.aaa.DirectoryUtils.mapPrincipalRecordToDirectoryUser(<END_MOD>data<START_MOD>.getAuthz(), u)).collect(java.util.stream.Collectors.toList()); }<END_MOD> return <START_MOD>results<END_MOD>; }	private java.util.List<org.ovirt.engine.core.aaa.DirectoryUser> searchDirectoryUsers() { org.ovirt.engine.core.aaa.QueryData data = initQueryData(true); if (data == null) { return java.util.Collections.emptyList(); } java.util.List<org.ovirt.engine.core.aaa.DirectoryUser> results = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.lang.Object> response = org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.searchUsers(sessionDataContainer.getSsoAccessToken(org.ovirt.engine.core.bll.SearchQuery.getParameters().getSessionId()), org.ovirt.engine.core.bll.SearchQuery.getParamsMap(data)); if (response.containsKey("result")) { java.util.List<org.ovirt.engine.api.extensions.ExtMap> users = ((java.util.List<org.ovirt.engine.api.extensions.ExtMap>) (response.get("result"))); results = users.stream().map((org.ovirt.engine.api.extensions.ExtMap u) -> org.ovirt.engine.core.bll.aaa.DirectoryUtils.mapPrincipalRecordToDirectoryUser(data.getAuthz(), u)).collect(java.util.stream.Collectors.toList()); } return results; }
public static org.ovirt.engine.api.extensions.ExtMap generateQueryForName(java.lang.String name, org.ovirt.engine.api.extensions.ExtUUID queryEntity) { java.lang.StringBuilder query = new java.lang.StringBuilder(org.ovirt.engine.core.sso.search.SearchParsingUtils.getQueryPrefixByEntity(queryEntity)).append("|"); for (java.lang.String key : org.ovirt.engine.core.sso.search.SearchParsingUtils.attributesToKeys.keySet()) { query.append(java.lang.String.format("(%1$s=%2$s)", key, name)); } return org.ovirt.engine.core.sso.search.SearchParsingUtils.generateQueryMap(query.append(")").toString(), queryEntity); }	public static org.ovirt.engine.api.extensions.ExtMap generateQueryForName(java.lang.String name, org.ovirt.engine.api.extensions.ExtUUID queryEntity) { java.lang.StringBuilder query = new java.lang.StringBuilder(org.ovirt.engine.core.sso.search.SearchParsingUtils.getQueryPrefixByEntity(queryEntity)).append("|"); org.ovirt.engine.core.sso.search.SearchParsingUtils.attributesToKeys.keySet().forEach(( key) -> query.append(java.lang.String.format("(%1$s=%2$s)", key, name))); return org.ovirt.engine.core.sso.search.SearchParsingUtils.generateQueryMap(query.append(")").toString(), queryEntity); }
<START_MOD>public<END_MOD> static org.ovirt.engine.core.sso.utils.AuthenticationUtils.ExtensionProfile getExtensionProfile(org.ovirt.engine.core.sso.utils.SSOContext ssoContext, <START_MOD>java.lang.String profileName<END_MOD>) { org.ovirt.engine.core.sso.utils.AuthenticationUtils.ExtensionProfile profile = <START_MOD>org.ovirt.engine.core.sso.utils.AuthenticationUtils.getExtensionProfileImpl(<END_MOD>ssoContext<START_MOD>, profileName,<END_MOD> null)<START_MOD>;<END_MOD> if (((profile.authn) == null) || ((profile.authz) == null)) { org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug( authn and authz NOT found for profile {} <START_MOD>profileName<END_MOD>); throw new java.lang.RuntimeException(java.lang.String.format( in obtaining profile %s <START_MOD>profileName<END_MOD>)); } org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug( authn and authz found for profile %s <START_MOD>profileName<END_MOD>); return profile; }	public static org.ovirt.engine.core.sso.utils.AuthenticationUtils.ExtensionProfile getExtensionProfile(org.ovirt.engine.core.sso.utils.SSOContext ssoContext, java.lang.String profileName) { java.util.Optional<org.ovirt.engine.core.sso.utils.AuthenticationUtils.ExtensionProfile> profile = org.ovirt.engine.core.sso.utils.AuthenticationUtils.getExtensionProfileImpl(ssoContext, profileName, null); if (!(profile.isPresent())) { org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug("AuthenticationUtils.getExtensionProfile authn and authz NOT found for profile {}", profileName); throw new java.lang.RuntimeException(java.lang.String.format("Error in obtaining profile %s", profileName)); } org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug("AuthenticationUtils.getExtensionProfile authn and authz found for profile %s", profileName); return profile.get(); }
public static org.ovirt.engine.core.sso.utils.AuthenticationUtils.ExtensionProfile getExtensionProfileByAuthzName(org.ovirt.engine.core.sso.utils.SSOContext ssoContext, java.lang.String authzName) { org.ovirt.engine.core.sso.utils.AuthenticationUtils.ExtensionProfile profile = org.ovirt.engine.core.sso.utils.AuthenticationUtils.getExtensionProfileImpl(ssoContext, null, authzName); if (((profile.authn) == null) || ((profile.authz) == null)) { org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug("AuthenticationUtils.getExtensionProfile authn and authz NOT found for authz {}", authzName); throw new java.lang.RuntimeException(java.lang.String.format("Error in obtaining profile for authz %s", authzName)); } org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug("AuthenticationUtils.getExtensionProfile authn and authz found for authz %s", authzName); return profile; }	public static org.ovirt.engine.core.sso.utils.AuthenticationUtils.ExtensionProfile getExtensionProfileByAuthzName(org.ovirt.engine.core.sso.utils.SSOContext ssoContext, java.lang.String authzName) { java.util.Optional<org.ovirt.engine.core.sso.utils.AuthenticationUtils.ExtensionProfile> profile = org.ovirt.engine.core.sso.utils.AuthenticationUtils.getExtensionProfileImpl(ssoContext, null, authzName); if (!(profile.isPresent())) { org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug("AuthenticationUtils.getExtensionProfile authn and authz NOT found for authz {}", authzName); throw new java.lang.RuntimeException(java.lang.String.format("Error in obtaining profile for authz %s", authzName)); } org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug("AuthenticationUtils.getExtensionProfile authn and authz found for authz %s", authzName); return profile.get(); }
private java.util.List<org.ovirt.engine.core.aaa.DirectoryGroup> searchDirectoryGroups() { org.ovirt.engine.core.<START_MOD>aaa.QueryData data = initQueryData(true); if (data == null) { return java.util.Collections.emptyList(); } java.util.List<org.ovirt.engine.core.aaa.DirectoryGroup> results = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.lang.Object> response = org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.searchGroups(sessionDataContainer.getSsoAccessToken(org.ovirt.engine.core.<END_MOD>bll.<START_MOD>SearchQuery.getParameters().getSessionId()),<END_MOD> data); if (<START_MOD>response.containsKey("result")) { java.util.List<org.ovirt.engine.api.extensions.ExtMap> groups = ((java.util.List<org.ovirt.engine.api.extensions.ExtMap>) (response.get("result"))); results = groups.stream().map((org.ovirt.engine.api.extensions.ExtMap g) -> org.ovirt.engine.core.bll.aaa.DirectoryUtils.mapGroupRecordToDirectoryGroup(<END_MOD>data<START_MOD>.getAuthz(), g)).collect(java.util.stream.Collectors.toList()); }<END_MOD> return <START_MOD>results<END_MOD>; }	private java.util.List<org.ovirt.engine.core.aaa.DirectoryGroup> searchDirectoryGroups() { org.ovirt.engine.core.aaa.QueryData data = initQueryData(true); if (data == null) { return java.util.Collections.emptyList(); } java.util.List<org.ovirt.engine.core.aaa.DirectoryGroup> results = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.lang.Object> response = org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.searchGroups(sessionDataContainer.getSsoAccessToken(org.ovirt.engine.core.bll.SearchQuery.getParameters().getSessionId()), org.ovirt.engine.core.bll.SearchQuery.getParamsMap(data)); if (response.containsKey("result")) { java.util.List<org.ovirt.engine.api.extensions.ExtMap> groups = ((java.util.List<org.ovirt.engine.api.extensions.ExtMap>) (response.get("result"))); results = groups.stream().map((org.ovirt.engine.api.extensions.ExtMap g) -> org.ovirt.engine.core.bll.aaa.DirectoryUtils.mapGroupRecordToDirectoryGroup(data.getAuthz(), g)).collect(java.util.stream.Collectors.toList()); } return results; }
public static org.ovirt.engine.core.sso.utils.AuthenticationUtils.ExtensionProfile getExtensionProfileImpl(org.ovirt.engine.core.sso.utils.SSOContext ssoContext, java.lang.String searchProfileName, java.lang.String searchAuthzName) { org.ovirt.engine.core.sso.utils.AuthenticationUtils.ExtensionProfile profile = new org.ovirt.engine.core.sso.utils.AuthenticationUtils.ExtensionProfile(); for (org.ovirt.engine.core.extensions.mgr.ExtensionProxy authn : ssoContext.getSsoExtensionsManager().getExtensionsByService(org.ovirt.engine.api.extensions.aaa.Authn.class.getName())) { java.util.Properties config = authn.getContext().get(Base.ContextKeys.CONFIGURATION); java.lang.String profileName = config.getProperty(Authn.ConfigKeys.PROFILE_NAME); java.lang.String authzName = authn.getContext().<java.util.Properties>get(Base.ContextKeys.CONFIGURATION).getProperty(Authn.ConfigKeys.AUTHZ_PLUGIN); if (((org.apache.commons.lang.StringUtils.isNotEmpty(searchProfileName)) && (searchProfileName.equals(profileName))) || ((org.apache.commons.lang.StringUtils.isNotEmpty(searchAuthzName)) && (searchAuthzName.equals(authzName)))) { java.lang.String mapperName = authn.getContext().<java.util.Properties>get(Base.ContextKeys.CONFIGURATION).getProperty(Authn.ConfigKeys.MAPPING_PLUGIN); profile.mapper = (mapperName != null) ? ssoContext.getSsoExtensionsManager().getExtensionByName(mapperName) : null; profile.authn = authn; profile.authz = ssoContext.getSsoExtensionsManager().getExtensionByName(authzName); break; } } return profile; }	private static java.util.Optional<org.ovirt.engine.core.sso.utils.AuthenticationUtils.ExtensionProfile> getExtensionProfileImpl(org.ovirt.engine.core.sso.utils.SSOContext ssoContext, final java.lang.String searchProfileName, final java.lang.String searchAuthzName) { return ssoContext.getSsoExtensionsManager().getExtensionsByService(org.ovirt.engine.api.extensions.aaa.Authn.class.getName()).stream().filter(( a) -> matchesSearchName(a, searchProfileName, searchAuthzName)).map(( a) -> mapToExtensionProfile(ssoContext, a)).findFirst(); }
public static java.util.Map<java.lang.String, java.util.List<java.lang.String>> getAvailableNamesSpaces(org.ovirt.engine.core.sso.utils.SSOExtensionsManager extensionsManager) { java.util.Map<java.lang.String, java.util.List<java.lang.String>> namespacesMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.extensions.mgr.ExtensionProxy authz : extensionsManager.getExtensionsByService(org.ovirt.engine.api.extensions.aaa.Authz.class.getName())) { java.lang.String authzName = authz.getContext().<java.lang.String>get(Base.ContextKeys.INSTANCE_NAME); for (java.lang.String namespace : authz.getContext().<java.util.Collection<java.lang.String>>get(Authz.ContextKeys.AVAILABLE_NAMESPACES, java.util.Collections.<java.lang.String>emptyList())) { if (!(namespacesMap.containsKey(authzName))) { namespacesMap.put(authzName, new java.util.ArrayList<>()); } namespacesMap.get(authzName).add(namespace); } } for (java.util.List<java.lang.String> entry : namespacesMap.values()) { java.util.Collections.sort(entry); } return namespacesMap; }	public static java.util.Map<java.lang.String, java.util.List<java.lang.String>> getAvailableNamesSpaces(org.ovirt.engine.core.sso.utils.SSOExtensionsManager extensionsManager) { java.util.Map<java.lang.String, java.util.List<java.lang.String>> namespacesMap = new java.util.HashMap<>(); extensionsManager.getExtensionsByService(org.ovirt.engine.api.extensions.aaa.Authz.class.getName()).forEach(( authz) -> { java.lang.String authzName = authz.getContext().<java.lang.String>get(Base.ContextKeys.INSTANCE_NAME); authz.getContext().<Collection<java.lang.String>>get(Authz.ContextKeys.AVAILABLE_NAMESPACES, java.util.Collections.<java.lang.String>emptyList()).forEach(( namespace) -> { if (!(namespacesMap.containsKey(authzName))) { namespacesMap.put(authzName, new org.ovirt.engine.core.sso.utils.ArrayList<>()); } namespacesMap.get(authzName).add(namespace); }); }); namespacesMap.values().forEach(java.util.Collections::sort); return namespacesMap; }
public static org.ovirt.engine.api.extensions.ExtMap generateQueryMap(java.util.Collection<java.lang.String> ids, org.ovirt.engine.api.extensions.ExtUUID queryEntity) { org.ovirt.engine.api.extensions.ExtMap result = new org.ovirt.engine.api.extensions.ExtMap().mput(Authz.InvokeKeys.QUERY_ENTITY, queryEntity); org.ovirt.engine.api.extensions.ExtKey key = (queryEntity.equals(Authz.QueryEntity.GROUP)) ? Authz.GroupRecord.ID : Authz.PrincipalRecord.ID; java.util.List<org.ovirt.engine.api.extensions.ExtMap> filter = new java.util.ArrayList<>(); for (java.lang.String id : ids) { filter.add(org.ovirt.engine.core.sso.search.SearchParsingUtils.createMapForKeyAndValue(key, id)); } result.mput(QueryFilterRecord.OPERATOR, QueryFilterOperator.OR).mput(QueryFilterRecord.FILTER, filter); return result; }	public static org.ovirt.engine.api.extensions.ExtMap generateQueryMap(java.util.Collection<java.lang.String> ids, org.ovirt.engine.api.extensions.ExtUUID queryEntity) { org.ovirt.engine.api.extensions.ExtMap result = new org.ovirt.engine.api.extensions.ExtMap().mput(Authz.InvokeKeys.QUERY_ENTITY, queryEntity); org.ovirt.engine.api.extensions.ExtKey key = (queryEntity.equals(Authz.QueryEntity.GROUP)) ? Authz.GroupRecord.ID : Authz.PrincipalRecord.ID; java.util.List<org.ovirt.engine.api.extensions.ExtMap> filter = ids.stream().map(( id) -> org.ovirt.engine.core.sso.search.SearchParsingUtils.createMapForKeyAndValue(key, id)).collect(java.util.stream.Collectors.toList()); result.mput(QueryFilterRecord.OPERATOR, QueryFilterOperator.OR).mput(QueryFilterRecord.FILTER, filter); return result; }
private static java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> populateRecords(final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension, final java.lang.String namespace, final org.ovirt.engine.api.extensions.ExtMap input) { final java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> records = new java.util.ArrayList<>(); org.ovirt.engine.core.sso.search.DirectoryUtils.queryImpl(extension, namespace, input, new org.ovirt.engine.core.sso.search.DirectoryUtils.QueryResultHandler() { @java.lang.Override public boolean handle(java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> queryResults) { boolean result = true; for (org.ovirt.engine.api.extensions.ExtMap queryResult : queryResults) { if ((records.size()) < (org.ovirt.engine.core.sso.search.DirectoryUtils.QUERIES_RESULTS_LIMIT)) { records.add(queryResult); } else { result = false; break; } } return result; } }); return records; }	private static java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> populateRecords(final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension, final java.lang.String namespace, final org.ovirt.engine.api.extensions.ExtMap input) { final java.util.List<org.ovirt.engine.api.extensions.ExtMap> records = new java.util.ArrayList<>(); org.ovirt.engine.core.sso.search.DirectoryUtils.queryImpl(extension, namespace, input, ( queryResults) -> { boolean result = true; for (org.ovirt.engine.api.extensions.ExtMap queryResult : queryResults) { if ((records.size()) < (org.ovirt.engine.core.sso.search.DirectoryUtils.QUERIES_RESULTS_LIMIT)) { records.add(queryResult); } else { result = false; break; } } return result; }); return records; }
public static java.util.Map<java.lang.String, java.lang.Object> searchGroups(java.lang.String token, org.ovirt.engine.core.aaa.QueryData queryData) { return org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.searchImpl(token, queryData, "groups"); }	public static java.util.Map<java.lang.String, java.lang.Object> searchGroups(java.lang.String token, java.util.Map<java.lang.String, java.lang.Object> params) { return org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.search(token, params, "groups", org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.authzSearchScope); }
private static java.util.Map getData(java.net.HttpURLConnection connection) throws java.lang.Exception { try (java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream()) { try (java.io.InputStream input = connection.getInputStream()) { org.ovirt.engine.core.aaa.filters.FiltersHelper.copy(input, os); } java.lang.ClassLoader loader = java.lang.Thread.currentThread().getContextClassLoader(); java.lang.Thread.currentThread().setContextClassLoader(org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.class.getClassLoader()); try { <START_MOD>org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.log.info(new java.lang.String(os.toByteArray(), java.nio.charset.StandardCharsets.UTF_8.name())); <END_MOD>return new org.ovirt.engine.core.utils.serialization.json.JsonObjectDeserializer().deserialize(new java.lang.String(os.toByteArray(), java.nio.charset.StandardCharsets.UTF_8.name()), java.util.HashMap.class); } finally { java.lang.Thread.currentThread().setContextClassLoader(loader); } } }	private static java.util.Map getData(java.net.HttpURLConnection connection) throws java.lang.Exception { try (java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream()) { try (java.io.InputStream input = connection.getInputStream()) { org.ovirt.engine.core.aaa.filters.FiltersHelper.copy(input, os); } java.lang.ClassLoader loader = java.lang.Thread.currentThread().getContextClassLoader(); java.lang.Thread.currentThread().setContextClassLoader(org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.class.getClassLoader()); try { return new org.ovirt.engine.core.utils.serialization.json.JsonObjectDeserializer().deserialize(new java.lang.String(os.toByteArray(), java.nio.charset.StandardCharsets.UTF_8.name()), java.util.HashMap.class); } finally { java.lang.Thread.currentThread().setContextClassLoader(loader); } } }
private static java.util.Map<java.lang.String, java.lang.Object> searchImpl(java.lang.String token, org.ovirt.engine.core.aaa.QueryData queryData, java.lang.String queryType) { java.net.HttpURLConnection connection = null; try { connection = org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.createConnection("/search-directory"); org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.setClientIdSecretBasicAuthHeader(connection); org.ovirt.engine.core.uutils.net.URLBuilder urlBuilder = new org.ovirt.engine.core.uutils.net.URLBuilder(connection.getURL()).addParameter("token", token).addParameter("scope", "ovirt-app-admin ovirt-app-api").addParameter("query_type", queryType).addParameter("query_data", new org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer().serialize(queryData)); org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.postData(connection, urlBuilder.buildURL().getQuery()); return org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.getData(connection); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } finally { if (connection != null) { connection.disconnect(); } } }	private static java.util.Map<java.lang.String, java.lang.Object> search(java.lang.String token, java.util.Map<java.lang.String, java.lang.Object> params, java.lang.String queryType, java.lang.String scope) { java.net.HttpURLConnection connection = null; try { connection = org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.createConnection("/oauth/token-info"); org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.setClientIdSecretBasicAuthHeader(connection); org.ovirt.engine.core.uutils.net.URLBuilder urlBuilder = new org.ovirt.engine.core.uutils.net.URLBuilder(connection.getURL()).addParameter("query_type", queryType).addParameter("scope", scope); if (org.apache.commons.lang.StringUtils.isNotEmpty(token)) { urlBuilder.addParameter("token", token); } if (params != null) { urlBuilder.addParameter("params", org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.encode(new org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer().serialize(params))); } org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.postData(connection, urlBuilder.buildURL().getQuery()); return org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.getData(connection); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } finally { if (connection != null) { connection.disconnect(); } } }
private static org.ovirt.engine.api.rsdl.MetaData loadMetaData() throws java.io.IOException { java.io.InputStream stream = org.ovirt.engine.api.rsdl.RsdlManager.class.getResourceAsStream(org.ovirt.engine.api.rsdl.RsdlManager.METADATA_FILE_NAME); <START_MOD>if (stream == null) { throw new java.io.IOException((( find metadata resource   + (org.ovirt.engine.api.rsdl.RsdlManager.METADATA_FILE_NAME)) + "\"")); } org.ovirt.engine.api.rsdl.MetaData metaData; try { <END_MOD>org.yaml.snakeyaml.constructor.Constructor constructor = new org.yaml.snakeyaml.constructor.CustomClassLoaderConstructor(java.lang.Thread.currentThread().getContextClassLoader()); <START_MOD>metaData = ((<END_MOD>org.ovirt.engine.api.rsdl.MetaData) (new org.yaml.snakeyaml.Yaml(constructor).load(stream))); <START_MOD>if (metaData == null) { throw new java.io.IOException((( load metadata file   + (org.ovirt.engine.api.rsdl.RsdlManager.METADATA_FILE_NAME)) + "\"")); } } finally { <END_MOD>stream.close();<START_MOD> }<END_MOD> org.ovirt.engine.api.rsdl.RsdlManager.assignDefaults(metaData); for (org.ovirt.engine.api.rsdl.Action action : metaData.getActions()) { java.lang.String name = action.getName(); name = name.replaceAll("^/?", ""); action.setName(name); } return metaData; }	private static org.ovirt.engine.api.rsdl.MetaData loadMetaData() throws java.io.IOException { try (java.io.InputStream in = org.ovirt.engine.api.rsdl.RsdlManager.class.getResourceAsStream(org.ovirt.engine.api.rsdl.RsdlManager.METADATA_FILE_NAME)) { if (in == null) { throw new java.io.IOException((("Can\'t find metadata from resource \"" + (org.ovirt.engine.api.rsdl.RsdlManager.METADATA_FILE_NAME)) + "\"")); } return org.ovirt.engine.api.rsdl.RsdlManager.loadMetaData(in); } }
public void setCommandEndStatus(org.ovirt.engine.core.bll.CommandBase<?> command, boolean childCommandFailed, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds) { command.getParameters().setTaskGroupSuccess(((!childCommandFailed) && (status == (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)))); org.ovirt.engine.core.compat.CommandStatus newStatus = (command.getParameters().getTaskGroupSuccess()) ? org.ovirt.engine.core.compat.CommandStatus.SUCCEEDED : org.ovirt.engine.core.compat.CommandStatus.FAILED; log.info("Command '{}' id: '{}' child commands '{}' executions were completed, status '{}'", command.getActionType(), command.getCommandId(), childCmdIds, command.getCommandStatus()); if (!(shouldExecuteEndMethod(command))) { logEndWillBeExecutedByParent(command, newStatus); } command.setCommandStatus(newStatus, false); command.persistCommand(command.getParameters().getParentCommand(), ((command.getCallback()) != null)); }	protected void setCommandEndStatus(org.ovirt.engine.core.bll.CommandBase<?> command, boolean childCommandFailed, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds) { command.getParameters().setTaskGroupSuccess(((!childCommandFailed) && (status == (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)))); org.ovirt.engine.core.compat.CommandStatus newStatus = (command.getParameters().getTaskGroupSuccess()) ? org.ovirt.engine.core.compat.CommandStatus.SUCCEEDED : org.ovirt.engine.core.compat.CommandStatus.FAILED; log.info("Command '{}' id: '{}' child commands '{}' executions were completed, status '{}'", command.getActionType(), command.getCommandId(), childCmdIds, newStatus); if (!(shouldExecuteEndMethod(command))) { logEndWillBeExecutedByParent(command, newStatus); } command.setCommandStatus(newStatus, false); command.persistCommand(command.getParameters().getParentCommand(), ((command.getCallback()) != null)); }
private boolean executeWithoutTransaction() { boolean functionReturnValue = false; boolean exceptionOccurred = true; try { logRunningCommand(); if (hasTaskHandlers()) { getCurrentTaskHandler().execute(); } else { executeCommand(); } functionReturnValue = getSucceeded(); exceptionOccurred = false; } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error( '{}' failed: {} getClass().getName(), e.getMessage()); log.debug("Exception", e); processExceptionToClient(new org.ovirt.engine.core.common.errors.EngineFault(e, e.getVdsError().getCode())); } catch (com.woorea.openstack.base.client.OpenStackResponseException e) { if (_returnValue.getExecuteFailedMessages().isEmpty()) { processExceptionToClient(new org.ovirt.engine.core.common.errors.EngineFault(e, org.ovirt.engine.core.common.errors.EngineError.ENGINE)); } log.error( '{}' failed: {} getClass().getName(), e.getMessage()); log.error("Exception", e); } catch (java.lang.RuntimeException e) { processExceptionToClient(new org.ovirt.engine.core.common.errors.EngineFault(e, org.ovirt.engine.core.common.errors.EngineError.ENGINE)); log.error( '{}' failed: {} getClass().getName(), e.getMessage()); log.error("Exception", e); } finally { if (!exceptionOccurred) { setCommandExecuted(); } if (exceptionOccurred || (!(getSucceeded()))) { setCommandStatus(CommandStatus.FAILED); setSucceeded(false); compensate(); } else { if (((((<START_MOD>(<END_MOD>getTaskType()) == (org.ovirt.engine.core.common.asynctasks.AsyncTaskType.notSupported)) && (getReturnValue().getVdsmTaskIdList().isEmpty())) && (<START_MOD>getReturnValue().getInternalVdsmTaskIdList().isEmpty())) && (<END_MOD>(getCallback()) == null)) && ((commandStatus) == (org.ovirt.engine.core.compat.CommandStatus.ACTIVE))) { setCommandStatus(CommandStatus.SUCCEEDED); } cleanUpCompensationData(); } } return functionReturnValue; }	private boolean executeWithoutTransaction() { boolean functionReturnValue = false; boolean exceptionOccurred = true; try { logRunningCommand(); if (hasTaskHandlers()) { getCurrentTaskHandler().execute(); } else { executeCommand(); } functionReturnValue = getSucceeded(); exceptionOccurred = false; } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Command '{}' failed: {}", getClass().getName(), e.getMessage()); log.debug("Exception", e); processExceptionToClient(new org.ovirt.engine.core.common.errors.EngineFault(e, e.getVdsError().getCode())); } catch (com.woorea.openstack.base.client.OpenStackResponseException e) { if (_returnValue.getExecuteFailedMessages().isEmpty()) { processExceptionToClient(new org.ovirt.engine.core.common.errors.EngineFault(e, org.ovirt.engine.core.common.errors.EngineError.ENGINE)); } log.error("Command '{}' failed: {}", getClass().getName(), e.getMessage()); log.error("Exception", e); } catch (java.lang.RuntimeException e) { processExceptionToClient(new org.ovirt.engine.core.common.errors.EngineFault(e, org.ovirt.engine.core.common.errors.EngineError.ENGINE)); log.error("Command '{}' failed: {}", getClass().getName(), e.getMessage()); log.error("Exception", e); } finally { if (!exceptionOccurred) { setCommandExecuted(); } if (exceptionOccurred || (!(getSucceeded()))) { setCommandStatus(CommandStatus.FAILED); setSucceeded(false); compensate(); } else { if ((((getReturnValue().getVdsmTaskIdList().isEmpty()) && (getReturnValue().getInternalVdsmTaskIdList().isEmpty())) && ((getCallback()) == null)) && ((commandStatus) == (org.ovirt.engine.core.compat.CommandStatus.ACTIVE))) { setCommandStatus(CommandStatus.SUCCEEDED); } cleanUpCompensationData(); } } return functionReturnValue; }
protected org.ovirt.engine.core.common.queries.VdcQueryReturnValue runQueryImpl(org.ovirt.engine.core.common.queries.VdcQueryType actionType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters, boolean isPerformUserCheck, org.ovirt.engine.core.bll.context.EngineContext engineContext) { if (isPerformUserCheck) { java.lang.String sessionId = parameters.getSessionId(); if ((org.apache.commons.lang.StringUtils.isEmpty(sessionId)) || ((sessionDataContainer.getUser(sessionId, parameters.getRefresh())) == null)) { <START_MOD>org.ovirt.engine.core.bll.Backend.log.debug( to execute query {} as no user session was found actionType); <END_MOD>return getErrorQueryReturnValue(EngineMessage.USER_IS_NOT_LOGGED_IN); }<START_MOD> logExecution(sessionId, java.lang.String.format( %s actionType), parameters.toString());<END_MOD> } java.lang.Class<org.ovirt.engine.core.bll.CommandBase<? extends org.ovirt.engine.core.common.action.VdcActionParametersBase>> clazz = org.ovirt.engine.core.bll.CommandsFactory.getQueryClass(actionType.name()); if (clazz.isAnnotationPresent(org.ovirt.engine.core.bll.DisableInMaintenanceMode.class)) { java.lang.String mode = dbFacade.getVdcOptionDao().getByNameAndVersion(ConfigValues.EngineMode.name(), ConfigCommon.defaultConfigurationVersion).getOptionValue(); if (EngineWorkingMode.MAINTENANCE.name().equalsIgnoreCase(mode)) { return getErrorQueryReturnValue(EngineMessage.ENGINE_IS_RUNNING_IN_MAINTENANCE_MODE); } } org.ovirt.engine.core.bll.QueriesCommandBase<?> command = createQueryCommand(actionType, parameters, engineContext); command.setInternalExecution((!isPerformUserCheck)); command.execute(); return command.getQueryReturnValue(); }	protected org.ovirt.engine.core.common.queries.VdcQueryReturnValue runQueryImpl(org.ovirt.engine.core.common.queries.VdcQueryType actionType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters, boolean isPerformUserCheck, org.ovirt.engine.core.bll.context.EngineContext engineContext) { if (isPerformUserCheck) { java.lang.String sessionId = parameters.getSessionId(); if ((org.apache.commons.lang.StringUtils.isEmpty(sessionId)) || ((sessionDataContainer.getUser(sessionId, parameters.getRefresh())) == null)) { org.ovirt.engine.core.bll.Backend.log.debug("Unable to execute query {} as no user session was found", actionType); return getErrorQueryReturnValue(EngineMessage.USER_IS_NOT_LOGGED_IN); } logExecution(sessionId, java.lang.String.format("query %s with isFiltered : %s", actionType, parameters.isFiltered())); } java.lang.Class<org.ovirt.engine.core.bll.CommandBase<? extends org.ovirt.engine.core.common.action.VdcActionParametersBase>> clazz = org.ovirt.engine.core.bll.CommandsFactory.getQueryClass(actionType.name()); if (clazz.isAnnotationPresent(org.ovirt.engine.core.bll.DisableInMaintenanceMode.class)) { java.lang.String mode = dbFacade.getVdcOptionDao().getByNameAndVersion(ConfigValues.EngineMode.name(), ConfigCommon.defaultConfigurationVersion).getOptionValue(); if (EngineWorkingMode.MAINTENANCE.name().equalsIgnoreCase(mode)) { return getErrorQueryReturnValue(EngineMessage.ENGINE_IS_RUNNING_IN_MAINTENANCE_MODE); } } org.ovirt.engine.core.bll.QueriesCommandBase<?> command = createQueryCommand(actionType, parameters, engineContext); command.setInternalExecution((!isPerformUserCheck)); command.execute(); return command.getQueryReturnValue(); }
private void logExecution(java.lang.String sessionId, java.lang.String queryOrAction, java.lang.String parameters) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = sessionDataContainer.getUser(sessionId, false); org.ovirt.engine.core.bll.Backend.log.debug("Executing {} with parameters {}{}", queryOrAction, parameters, (user == null ? "." : java.lang.String.format(" for user %s@%s.", user.getLoginName(), user.getDomain()))); }	private void logExecution(java.lang.String sessionId, java.lang.String details) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = sessionDataContainer.getUser(sessionId, false); org.ovirt.engine.core.bll.Backend.log.debug("Executing {}{}", details, (user == null ? "." : java.lang.String.format(" for user %s@%s.", user.getLoginName(), user.getDomain()))); }
private org.ovirt.engine.core.common.action.VdcReturnValueBase runActionImpl(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, boolean runAsInternal, org.ovirt.engine.core.bll.context.CommandContext context) { org.ovirt.engine.core.common.action.VdcReturnValueBase result; if (((!(actionType.isActionMonitored())) && (!(isActionExternal(actionType)))) && (((parameters.getJobId()) != null) || ((parameters.getStepId()) != null))) { result = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); result.getValidationMessages().add(EngineMessage.ACTION_TYPE_NON_MONITORED.toString()); result.setValid(false); result.setSucceeded(false); } else {<START_MOD> if (!runAsInternal) { logExecution(parameters.getSessionId(), java.lang.String.format( %s actionType), parameters.toString()); }<END_MOD> org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.CommandsFactory.createCommand(actionType, parameters, context); result = runAction(command, runAsInternal); } return result; }	private org.ovirt.engine.core.common.action.VdcReturnValueBase runActionImpl(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, boolean runAsInternal, org.ovirt.engine.core.bll.context.CommandContext context) { org.ovirt.engine.core.common.action.VdcReturnValueBase result; if (((!(actionType.isActionMonitored())) && (!(isActionExternal(actionType)))) && (((parameters.getJobId()) != null) || ((parameters.getStepId()) != null))) { result = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); result.getValidationMessages().add(EngineMessage.ACTION_TYPE_NON_MONITORED.toString()); result.setValid(false); result.setSucceeded(false); } else { if (!runAsInternal) { logExecution(parameters.getSessionId(), java.lang.String.format("command %s", actionType)); } org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.CommandsFactory.createCommand(actionType, parameters, context); result = runAction(command, runAsInternal); } return result; }
public static java.lang.String getRedirectUriServerName(java.lang.String name) { try { if ((java.net.InetAddress.getByName(name)) instanceof java.net.Inet6Address) { name = java.lang.String.format("[%s]", name); } } catch (java.net.UnknownHostException e) { } return name; }	public static java.lang.String getRedirectUriServerName(java.lang.String name) { return org.apache.http.conn.util.InetAddressUtils.isIPv6Address(name) ? java.lang.String.format("[%s]", name) : name; }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper = createIdParameterMapper(entity.getId()); mapper.addValue("command_id", entity.getId()); mapper.addValue("command_type", entity.getCommandType()); mapper.addValue("phase", entity.getPhase()); mapper.addValue("last_updated", entity.getLastUpdated()); mapper.addValue("vds_id", ((entity.getVdsId()) == null ? null : entity.getVdsId().toString())); mapper.addValue("disk_id", ((entity.getDiskId()) == null ? null : entity.getDiskId().toString())); mapper.addValue("resource_id", ((entity.getResourceId()) == null ? null : entity.getResourceId().toString())); mapper.addValue("proxy_uri", entity.getProxyUri()); mapper.addValue("signed_ticket", entity.getSignedTicket()); mapper.addValue("bytes_sent", entity.getBytesSent()); mapper.addValue("bytes_total", entity.getBytesTotal()); return mapper; }	@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper = createIdParameterMapper(entity.getId()); mapper.addValue("command_id", entity.getId()); mapper.addValue("command_type", entity.getCommandType()); mapper.addValue("phase", entity.getPhase()); mapper.addValue("last_updated", entity.getLastUpdated()); mapper.addValue("message", entity.getMessage()); mapper.addValue("vds_id", ((entity.getVdsId()) == null ? null : entity.getVdsId().toString())); mapper.addValue("disk_id", ((entity.getDiskId()) == null ? null : entity.getDiskId().toString())); mapper.addValue("imaged_ticket_id", ((entity.getImagedTicketId()) == null ? null : entity.getImagedTicketId().toString())); mapper.addValue("proxy_uri", entity.getProxyUri()); mapper.addValue("signed_ticket", entity.getSignedTicket()); mapper.addValue("bytes_sent", entity.getBytesSent()); mapper.addValue("bytes_total", entity.getBytesTotal()); return mapper; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (obj == null) { return false; } if ((getClass()) != (obj.getClass())) { return false; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer other = ((org.ovirt.engine.core.common.businessentities.storage.ImageTransfer) (obj)); return (((((((((java.util.Objects.equals(commandId, other.commandId)) && (java.util.Objects.equals(phase, other.phase))) && (java.util.Objects.equals(lastUpdated, other.lastUpdated))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(diskId, other.diskId))) && (java.util.Objects.equals(resourceId, other.resourceId))) && (java.util.Objects.equals(proxyUri, other.proxyUri))) && (java.util.Objects.equals(signedTicket, other.signedTicket))) && (java.util.Objects.equals(bytesSent, other.bytesSent))) && (java.util.Objects.equals(bytesTotal, other.bytesTotal)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (obj == null) { return false; } if ((getClass()) != (obj.getClass())) { return false; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer other = ((org.ovirt.engine.core.common.businessentities.storage.ImageTransfer) (obj)); return ((((((((((java.util.Objects.equals(commandId, other.commandId)) && (java.util.Objects.equals(phase, other.phase))) && (java.util.Objects.equals(lastUpdated, other.lastUpdated))) && (java.util.Objects.equals(message, other.message))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(diskId, other.diskId))) && (java.util.Objects.equals(imagedTicketId, other.imagedTicketId))) && (java.util.Objects.equals(proxyUri, other.proxyUri))) && (java.util.Objects.equals(signedTicket, other.signedTicket))) && (java.util.Objects.equals(bytesSent, other.bytesSent))) && (java.util.Objects.equals(bytesTotal, other.bytesTotal)); }
public org.ovirt.engine.core.compat.Guid getResourceId() { return resourceId; }	public org.ovirt.engine.core.compat.Guid getImagedTicketId() { return imagedTicketId; }
public void setResourceId(org.ovirt.engine.core.compat.Guid resourceId) { this.resourceId = resourceId; }	public void setImagedTicketId(org.ovirt.engine.core.compat.Guid imagedTicketId) { this.imagedTicketId = imagedTicketId; }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((commandId) == null ? 0 : commandId.hashCode()); result = (prime * result) + ((phase) == null ? 0 : phase.hashCode()); result = (prime * result) + ((lastUpdated) == null ? 0 : lastUpdated.hashCode()); result = (prime * result) + ((vdsId) == null ? 0 : vdsId.hashCode()); result = (prime * result) + ((diskId) == null ? 0 : diskId.hashCode()); result = (prime * result) + ((resourceId) == null ? 0 : resourceId.hashCode()); result = (prime * result) + ((proxyUri) == null ? 0 : proxyUri.hashCode()); result = (prime * result) + ((signedTicket) == null ? 0 : signedTicket.hashCode()); result = (prime * result) + ((bytesSent) == null ? 0 : bytesSent.hashCode()); result = (prime * result) + ((bytesTotal) == null ? 0 : bytesTotal.hashCode()); return result; }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(commandId, phase, lastUpdated, message, vdsId, diskId, imagedTicketId, proxyUri, signedTicket, bytesSent, bytesTotal); }
public org.ovirt.engine.core.dao.ImageTransferDao getImageUploadDao() { return getDao(org.ovirt.engine.core.dao.ImageTransferDao.class); }	public org.ovirt.engine.core.dao.ImageTransferDao getImageTransferDao() { return getDao(org.ovirt.engine.core.dao.ImageTransferDao.class); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.ImageTransfer mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); entity.setId(getGuidDefaultEmpty(rs, "command_id")); entity.setCommandType(org.ovirt.engine.core.common.action.VdcActionType.forValue(rs.getInt("command_type"))); entity.setPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.forValue(rs.getInt("phase"))); entity.setLastUpdated(new java.util.Date(rs.getTimestamp("last_updated").getTime())); entity.setVdsId(getGuid(rs, "vds_id")); entity.setDiskId(getGuid(rs, "disk_id")); entity.setResourceId(getGuid(rs, "resource_id")); entity.setProxyUri(rs.getString("proxy_uri")); entity.setSignedTicket(rs.getString("signed_ticket")); entity.setBytesSent(rs.getLong("bytes_sent")); entity.setBytesTotal(rs.getLong("bytes_total")); return entity; }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.ImageTransfer mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); entity.setId(getGuidDefaultEmpty(rs, "command_id")); entity.setCommandType(org.ovirt.engine.core.common.action.VdcActionType.forValue(rs.getInt("command_type"))); entity.setPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.forValue(rs.getInt("phase"))); entity.setLastUpdated(new java.util.Date(rs.getTimestamp("last_updated").getTime())); entity.setMessage(rs.getString("message")); entity.setVdsId(getGuid(rs, "vds_id")); entity.setDiskId(getGuid(rs, "disk_id")); entity.setImagedTicketId(getGuid(rs, "imaged_ticket_id")); entity.setProxyUri(rs.getString("proxy_uri")); entity.setSignedTicket(rs.getString("signed_ticket")); entity.setBytesSent(rs.getLong("bytes_sent")); entity.setBytesTotal(rs.getLong("bytes_total")); return entity; }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getValue(org.ovirt.engine.core.common.businessentities.storage.Disk object) { return (object.getImageUploadPhase()) != null ? super.getValue(object) : null; }	@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getValue(org.ovirt.engine.core.common.businessentities.storage.Disk object) { return (object.getImageTransferPhase()) != null ? super.getValue(object) : null; }
@org.ovirt.engine.ui.common.DefaultStringValue("Uploading") java.lang.String imageUploadUploading();	@org.ovirt.engine.ui.common.DefaultStringValue("Resuming") java.lang.String imageUploadResuming();
public void setImageUploadBytesTotal(java.lang.Long imageUploadBytesTotal) { this.imageUploadBytesTotal = imageUploadBytesTotal; }	public void setImageTransferBytesTotal(java.lang.Long imageTransferBytesTotal) { this.imageTransferBytesTotal = imageTransferBytesTotal; }
public void setImageUploadPhase(org.ovirt.engine.core.common.businessentities.storage.ImageUploadPhase imageUploadPhase) { this.imageUploadPhase = imageUploadPhase; }	public void setImageTransferPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase imageTransferPhase) { this.imageTransferPhase = imageTransferPhase; }
@java.lang.Override protected java.lang.Integer getProgressValue(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { if (((((disk.getImageUploadPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageUploadPhase.UPLOADING)) || ((disk.getImageUploadPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageUploadPhase.PAUSED_SYSTEM))) || ((disk.getImageUploadPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageUploadPhase.PAUSED_USER))) && ((disk.getImageUploadBytesSent()) != null)) { if (((disk.getImageUploadBytesTotal()) != null) && ((disk.getImageUploadBytesTotal()) > 0)) { return ((int) (((disk.getImageUploadBytesSent()) * 100) / (disk.getImageUploadBytesTotal()))); } return java.lang.Math.max(100, ((int) (((disk.getImageUploadBytesSent()) * 100) / (disk.getSize())))); } return null; }	@java.lang.Override protected java.lang.Integer getProgressValue(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { if ((disk.getImageTransferBytesSent()) == null) { return null; } switch (disk.getImageTransferPhase()) { case TRANSFERRING : case RESUMING : case PAUSED_SYSTEM : case PAUSED_USER : case FINALIZING_SUCCESS : if (((disk.getImageTransferBytesTotal()) != null) && ((disk.getImageTransferBytesTotal()) > 0)) { return ((int) (((disk.getImageTransferBytesSent()) * 100) / (disk.getImageTransferBytesTotal()))); } return java.lang.Math.min(100, ((int) (((disk.getImageTransferBytesSent()) * 100) / (disk.getSize())))); } return null; }
public java.lang.Long getImageUploadBytesSent() { return imageUploadBytesSent; }	public java.lang.Long getImageTransferBytesSent() { return imageTransferBytesSent; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.Disk object) { if ((object.getImageUploadPhase()) != null) { return null; } return super.getValue(object); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.Disk object) { if ((object.getImageTransferPhase()) != null) { return null; } return super.getValue(object); }
public java.lang.Long getImageUploadBytesTotal() { return imageUploadBytesTotal; }	public java.lang.Long getImageTransferBytesTotal() { return imageTransferBytesTotal; }
public org.ovirt.engine.core.common.businessentities.storage.ImageUploadPhase getImageUploadPhase() { return imageUploadPhase; }	public org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase getImageTransferPhase() { return imageTransferPhase; }
public void setImageUploadBytesSent(java.lang.Long imageUploadBytesSent) { this.imageUploadBytesSent = imageUploadBytesSent; }	public void setImageTransferBytesSent(java.lang.Long imageTransferBytesSent) { this.imageTransferBytesSent = imageTransferBytesSent; }
private void pauseUpload() { if ((getWindow()) != null) { return; } java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> list = new java.util.ArrayList<>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates(); updates.setPhase(ImageTransferPhase.PAUSED_USER); org.ovirt.engine.core.common.action.UploadImageStatusParameters parameters = new org.ovirt.engine.core.common.action.UploadImageStatusParameters(); parameters.setUpdates(updates); parameters.setDiskId(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (item)).getId()); list.add(parameters); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.UploadImageStatus, list, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { } }, null); }	private void pauseUpload() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.pauseUploads(org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.storage.DiskImage>cast(getSelectedItems())); }
private void upload() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = new org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel(getEntity().getId(), null); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().uploadImageTitle()); model.setHelpTag(HelpTag.upload_disk_image); model.setEntity(this); model.setHashName("upload_disk_image"); setWindow(model); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); model.setCancelCommand(cancelCommand); model.getCommands().add(cancelCommand); model.initialize(); }	private void upload() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.showUploadDialog(this, HelpTag.upload_disk_image_to_domain, getEntity().getId(), null); }
private void updateActionAvailability() { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = ((getSelectedItems()) != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.storage.DiskImage>cast(getSelectedItems()) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage>(); getRemoveCommand().setIsExecutionAllowed((((disks.size()) > 0) && (isRemoveCommandAvailable(disks)))); <START_MOD>getCancelUploadCommand().setIsExecutionAllowed(isCancelUploadCommandAvailable(disks)); getPauseUploadCommand().setIsExecutionAllowed(isPauseUploadCommandAvailable(disks)); getResumeUploadCommand().setIsExecutionAllowed(isResumeUploadCommandAvailable(disks)); <END_MOD>}	private void updateActionAvailability() { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = ((getSelectedItems()) != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.storage.DiskImage>cast(getSelectedItems()) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage>(); getRemoveCommand().setIsExecutionAllowed((((disks.size()) > 0) && (isRemoveCommandAvailable(disks)))); getUploadCommand().setIsExecutionAllowed(isUploadCommandAvailable()); getCancelUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isCancelAllowed(disks)); getPauseUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isPauseAllowed(disks)); getResumeUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isResumeAllowed(disks)); }
private void onCancelUpload() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); if ((model.getProgress()) != null) { return; } java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> list = new java.util.ArrayList<>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates(); updates.setPhase(ImageTransferPhase.CANCELLED); org.ovirt.engine.core.common.action.UploadImageStatusParameters parameters = new org.ovirt.engine.core.common.action.UploadImageStatusParameters(); parameters.setUpdates(updates); parameters.setDiskId(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (item)).getId()); list.add(parameters); } model.startProgress(null); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.UploadImageStatus, list, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (result.getState())); localModel.stopProgress(); cancel(); } }, model); }	private void onCancelUpload() { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.onCancelUpload(((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())), org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.storage.DiskImage>cast(getSelectedItems())); }
private boolean isPauseUploadCommandAvailable(java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks) { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : disks) { if (((disk.getImageTransferPhase()) != null) && (disk.getImageTransferPhase().canBePaused())) { return true; } } return false; }	private boolean isUploadCommandAvailable() { return ((getEntity()) != null) && (org.ovirt.engine.ui.uicommonweb.Linq.isDataActiveStorageDomain(getEntity())); }
private void cancelUpload() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().uploadImageCancelTitle()); model.setHelpTag(HelpTag.cancel_upload_image); model.setHashName("cancel_upload_image"); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().uploadImageCancelConfirmationMessage()); setWindow(model); java.util.ArrayList<java.lang.String> items = new java.util.ArrayList<>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (item)); items.add(disk.getDiskAlias()); } model.setItems(items); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnCancelUpload", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); model.getCommands().add(tempVar2); }	private void cancelUpload() { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.showCancelUploadDialog(this, HelpTag.cancel_upload_image_to_domain, org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.storage.DiskImage>cast(getSelectedItems())); }
private void resumeUpload() { if ((getSelectedItem()) == null) { return; } if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = new org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel(getEntity().getId(), ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getSelectedItem()))); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().uploadImageResumeTitle()); model.setHelpTag(HelpTag.resume_upload_image); model.setEntity(this); model.setHashName("upload_disk_image"); setWindow(model); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); model.setCancelCommand(cancelCommand); model.getCommands().add(cancelCommand); model.initialize(); }	private void resumeUpload() { if (((getSelectedItem()) == null) || ((getWindow()) != null)) { return; } org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.showUploadDialog(this, HelpTag.resume_upload_image_to_domain, getEntity().getId(), ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getSelectedItem()))); }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { if (!(result.getReturnValue().getSucceeded())) { setContinuePolling(false); failImageUpload(); } }	@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { if (!(result.getReturnValue().getSucceeded())) { if ((++(failedFinalizationAttempts)) < (org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.MAX_FAILED_POLL_ATTEMPTS)) { finalizeImageUpload(); } else { setContinuePolling(false); setProgressStr("Failed to update upload status on engine"); } } }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { initiateResumeUpload3(result); }	@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { initiateResumeUploadStartTransfer(result); }
private void initiateNewUpload() { startProgress(null); final org.ovirt.engine.core.common.action.UploadDiskImageParameters parameters = createInitParams(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.UploadDiskImage, parameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel) (result.getState())); if (result.getReturnValue().getSucceeded()) { setCommandId(((org.ovirt.engine.core.compat.Guid) (result.getReturnValue().getActionReturnValue()))); setBytesSent(0); startStatusPolling(); model.stopProgress(); model.getCancelCommand().execute(); } else { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToStartMessage(result.getReturnValue().getDescription())); model.stopProgress(); } } }, this); }	private void initiateNewUpload() { startProgress(null); setProgressStr("Initiating new upload"); final org.ovirt.engine.core.common.action.UploadDiskImageParameters parameters = createInitParams(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.UploadDiskImage, parameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel) (result.getState())); if (result.getReturnValue().getSucceeded()) { setCommandId(((org.ovirt.engine.core.compat.Guid) (result.getReturnValue().getActionReturnValue()))); setBytesSent(0); startStatusPolling(); model.stopProgress(); model.getCancelCommand().execute(); } else { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToStartMessage(result.getReturnValue().getDescription())); model.stopProgress(); } } }, this); }
private void failImageUpload() { org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates(); org.ovirt.engine.core.common.action.UploadImageStatusParameters statusParameters = new org.ovirt.engine.core.common.action.UploadImageStatusParameters(getCommandId(), updates); statusParameters.getUpdates().setPhase(ImageTransferPhase.FINALIZING_FAILURE); org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.log.info("Updating status to finalizing (retry after failure)"); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.UploadImageStatus, statusParameters); setProgressStr("Failed!"); }	private void logDebug(java.lang.String txt) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.log.debug(txt); }
public int getUploadImageUiInactivityTimeoutSeconds() { return ((java.lang.Integer) (getConfigValuePreConverted(ConfigurationValues.UploadImageUiInactivityTimeoutSeconds))); }	public int getUploadImageUiInactivityTimeoutInSeconds() { return ((java.lang.Integer) (getConfigValuePreConverted(ConfigurationValues.UploadImageUiInactivityTimeoutInSeconds))); }
public java.util.ArrayList<java.lang.String> getUploadImageTypeList() { return new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(new java.lang.String[]{ "RAW", "QCOW" })); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Quota> convert(java.lang.Object returnValue, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { java.util.List<org.ovirt.engine.core.common.businessentities.Quota> quotaList = ((java.util.List<org.ovirt.engine.core.common.businessentities.Quota>) (returnValue)); if ((quotaList != null) && (!(quotaList.isEmpty()))) { java.util.Comparator<org.ovirt.engine.core.common.businessentities.Quota> comparator = ((topId) == null) ? org.ovirt.engine.ui.uicommonweb.comparators.QuotaComparator.NAME : org.ovirt.engine.ui.uicommonweb.comparators.QuotaComparator.withTopId(topId, QuotaComparator.NAME); java.util.Collections.sort(quotaList, comparator); } return quotaList; }
private void handleImageUploadBrowserSupport(final org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model) { model.setBrowserSupportsUpload(model.browserSupportsUploadAPIs()); if (!(model.getBrowserSupportsUpload())) { model.getOkCommand().setIsExecutionAllowed(false); imageFileUpload.setEnabled(false); imageTypeEditor.setEnabled(false); setPanelMessage(uploadMessagePanel, org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.UploadImagePopupView.constants.uploadImageUploadNotSupportedMessage()); model.getImageSourceLocalEnabled().setEntity(false); } }	private void handleImageUploadBrowserSupport(final org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model) { model.setBrowserSupportsUpload(model.browserSupportsUploadAPIs()); if (!(model.getBrowserSupportsUpload())) { model.getOkCommand().setIsExecutionAllowed(false); imageFileUpload.setEnabled(false); volumeFormatEditor.setEnabled(false); setPanelMessage(uploadMessagePanel, org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.UploadImagePopupView.constants.uploadImageUploadNotSupportedMessage()); model.getImageSourceLocalEnabled().setEntity(false); } }
private void initiateResumeUpload() { startProgress(null); final org.ovirt.engine.core.common.action.UploadImageStatusParameters parameters = new org.ovirt.engine.core.common.action.UploadImageStatusParameters(); parameters.setDiskId(getDiskModel().getDisk().getId()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.UploadImageStatus, parameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { initiateResumeUpload2(result); } }, this); }	private void initiateResumeUpload() { startProgress(null); setProgressStr("Resuming upload"); final org.ovirt.engine.core.common.action.UploadImageStatusParameters parameters = new org.ovirt.engine.core.common.action.UploadImageStatusParameters(); parameters.setDiskId(getDiskModel().getDisk().getId()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.UploadImageStatus, parameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { initiateResumeUploadCheckStatus(result); } }, this); }
java.lang.String imageTypeEditor();	java.lang.String volumeFormatEditor();
void addStyles() { imageUriEditor.addContentWidgetContainerStyleName(style.imageUriEditorContent()); imageUriEditor.addStyleName(style.imageUriEditor()); imageTypeEditor.addContentWidgetContainerStyleName(style.imageTypeEditorContent()); imageTypeEditor.addStyleName(style.imageTypeEditor()); }	void addStyles() { imageUriEditor.addContentWidgetContainerStyleName(style.imageUriEditorContent()); imageUriEditor.addStyleName(style.imageUriEditor()); volumeFormatEditor.addContentWidgetContainerStyleName(style.volumeFormatEditorContent()); volumeFormatEditor.addStyleName(style.volumeFormatEditor()); }
void localize() { imageSourceLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.UploadImagePopupView.constants.uploadImageSourceLabel()); imageFileUploadLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.UploadImagePopupView.constants.uploadImageFileLabel()); imageUriEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.UploadImagePopupView.constants.uploadImageUriLabel()); imageTypeEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.UploadImagePopupView.constants.uploadImageTypeLabel()); diskOptionsLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.UploadImagePopupView.constants.uploadImageDiskOptionsLabel()); }	void localize() { imageSourceLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.UploadImagePopupView.constants.uploadImageSourceLabel()); imageFileUploadLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.UploadImagePopupView.constants.uploadImageFileLabel()); imageUriEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.UploadImagePopupView.constants.uploadImageUriLabel()); volumeFormatEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.UploadImagePopupView.constants.uploadImageTypeLabel()); diskOptionsLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.UploadImagePopupView.constants.uploadImageDiskOptionsLabel()); }
public org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> getImageType() { return imageType; }	public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.storage.VolumeFormat> getVolumeFormat() { return volumeFormat; }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { initiateResumeUpload2(result); }	@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { initiateResumeUploadCheckStatus(result); }
java.lang.String imageTypeEditorContent();	java.lang.String volumeFormatEditorContent();
public void autoSelectImageType(final java.lang.String pathname) { if (pathname != null) { if (pathname.toLowerCase().endsWith(".qcow2")) { getImageType().setSelectedItem("QCOW"); } else { getImageType().setSelectedItem("RAW"); } } }	public void autoSelectImageType(final java.lang.String pathname) { if (pathname != null) { getVolumeFormat().setSelectedItem(VolumeFormat.RAW); } }
public void setImageType(org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> imageType) { this.imageType = imageType; }	public void setVolumeFormat(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.storage.VolumeFormat> volumeFormat) { this.volumeFormat = volumeFormat; }
private org.ovirt.engine.core.common.action.UploadDiskImageParameters createInitParams() { org.ovirt.engine.core.common.businessentities.storage.Disk newDisk = diskModel.getDisk(); org.ovirt.engine.core.common.action.AddDiskParameters diskParameters = new org.ovirt.engine.core.common.action.AddDiskParameters(null, newDisk); if (((diskModel.getDiskStorageType().getEntity()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) || ((diskModel.getDiskStorageType().getEntity()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.CINDER))) { diskParameters.setStorageDomainId(getStorageDomainID()); } org.ovirt.engine.core.common.action.UploadDiskImageParameters parameters = new org.ovirt.engine.core.common.action.UploadDiskImageParameters(getStorageDomainID(), org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getUploadImageUiInactivityTimeoutSeconds(), diskParameters); parameters.setUploadSize(getImageSize()); return parameters; }	private org.ovirt.engine.core.common.action.UploadDiskImageParameters createInitParams() { org.ovirt.engine.core.common.businessentities.storage.Disk newDisk = diskModel.getDisk(); org.ovirt.engine.core.common.action.AddDiskParameters diskParameters = new org.ovirt.engine.core.common.action.AddDiskParameters(null, newDisk); if (((diskModel.getDiskStorageType().getEntity()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) || ((diskModel.getDiskStorageType().getEntity()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.CINDER))) { diskParameters.setStorageDomainId(getDiskModel().getStorageDomain().getSelectedItem().getId()); } org.ovirt.engine.core.common.action.UploadDiskImageParameters parameters = new org.ovirt.engine.core.common.action.UploadDiskImageParameters(diskParameters.getStorageDomainId(), org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getUploadImageUiInactivityTimeoutInSeconds(), diskParameters); parameters.setUploadSize(getImageSize()); return parameters; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (ev.matchesDefinition(HasEntity.entityChangedEventDefinition)) { if (((sender == (getImageSourceLocalEnabled())) || (sender == (getImagePath()))) || (sender == (getImageUri()))) { recalculateImageDerivedFields(); } } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (ev.matchesDefinition(HasEntity.entityChangedEventDefinition)) { if (((sender == (getImageSourceLocalEnabled())) || (sender == (getImagePath()))) || (sender == (getImageUri()))) { recalculateImageDerivedFields(); } } }
protected void setErrorMessage(java.lang.String message) { setMessage(message); }	protected void setErrorMessage(java.lang.String message) { errorMessage = message; }
private void stopAnyActiveJsUploadExecution(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.UploadState newUploadState) { switch (uploadState) { case NEW : case INITIALIZING : case TRANSFERRING : uploadState = newUploadState; break; default : break; } }	private void stopJsUpload(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.UploadState newUploadState) { switch (getUploadState()) { case NEW : case INITIALIZING : case TRANSFERRING : setUploadState(newUploadState); break; default : break; } }
private void initiateResumeUpload3(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel) (result.getState())); if (((result.getReturnValue()) != null) && (result.getReturnValue().getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer rv = result.getReturnValue().getActionReturnValue(); setCommandId(rv.getId()); setBytesSent(rv.getBytesSent()); startStatusPolling(); model.stopProgress(); model.getCancelCommand().execute(); } else { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeMessage(result.getReturnValue().getDescription())); model.stopProgress(); } }	private void initiateResumeUploadStartTransfer(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel) (result.getState())); if (((result.getReturnValue()) != null) && (result.getReturnValue().getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer rv = result.getReturnValue().getActionReturnValue(); setCommandId(rv.getId()); setBytesSent(rv.getBytesSent()); startStatusPolling(); model.stopProgress(); model.getCancelCommand().execute(); } else { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeMessage(result.getReturnValue().getDescription())); model.stopProgress(); } }
private void startStatusPolling() { setContinuePolling(true); manageWindowClosingHandler(true); com.google.gwt.core.client.Scheduler.get().scheduleFixedDelay(new com.google.gwt.core.client.Scheduler.RepeatingCommand() { @java.lang.Override public boolean execute() { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.log.info("Polling for status"); org.ovirt.engine.core.common.action.UploadImageStatusParameters statusParameters = new org.ovirt.engine.core.common.action.UploadImageStatusParameters(getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates(); updates.setBytesSent(getBytesSent()); statusParameters.setUpdates(updates); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.UploadImageStatus, statusParameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { respondToPollStatus(result); } }); if (!(getContinuePolling())) { manageWindowClosingHandler(false); } return getContinuePolling(); } }, org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.POLLING_DELAY_MS); }	private void startStatusPolling() { setContinuePolling(true); manageWindowClosingHandler(true); com.google.gwt.core.client.Scheduler.get().scheduleFixedDelay(new com.google.gwt.core.client.Scheduler.RepeatingCommand() { @java.lang.Override public boolean execute() { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.log.info("Polling for status"); org.ovirt.engine.core.common.action.UploadImageStatusParameters statusParameters = new org.ovirt.engine.core.common.action.UploadImageStatusParameters(getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates(); updates.setBytesSent(getBytesSent()); updates.setMessage(((getMessage()) != null ? getMessage() : getProgressStr())); statusParameters.setUpdates(updates); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.UploadImageStatus, statusParameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { respondToPollStatus(result); } }); if (!(getContinuePolling())) { manageWindowClosingHandler(false); } return getContinuePolling(); } }, org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.POLLING_DELAY_MS); }
private void setSourceVisibility(final org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model) { imageFileUploadPanel.setVisible(model.getImageSourceLocalEnabled().getEntity()); imageFileDownloadPanel.setVisible((!(model.getImageSourceLocalEnabled().getEntity()))); imageTypeEditor.setEnabled(((!(model.getImageSourceLocalEnabled().getEntity())) || (model.getBrowserSupportsUpload()))); }	private void setSourceVisibility(final org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model) { imageFileUploadPanel.setVisible(model.getImageSourceLocalEnabled().getEntity()); imageFileDownloadPanel.setVisible((!(model.getImageSourceLocalEnabled().getEntity()))); volumeFormatEditor.setEnabled(((!(model.getImageSourceLocalEnabled().getEntity())) || (model.getBrowserSupportsUpload()))); }
private native void startUpload(com.google.gwt.dom.client.Element fileUploadElement, java.lang.String proxyUri, java.lang.String resourceId, double startByte, java.lang.String signedTicket);	private native void startUpload(com.google.gwt.dom.client.Element fileUploadElement, java.lang.String proxyUri, java.lang.String resourceId, double startByte, java.lang.String signedTicket, int chunkSizeKB, int xhrTimeoutSec, int xhrRetryIntervalSec, int maxRetries);
private void initiateResumeUpload2(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel) (result.getState())); if (((result.getReturnValue()) != null) && (result.getReturnValue().getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer rv = result.getReturnValue().getActionReturnValue(); if ((rv.getBytesTotal()) != (getImageSize())) { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeSizeMessage(rv.getBytesTotal(), getImageSize())); model.stopProgress(); return; } org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates(); updates.setPhase(ImageTransferPhase.RESUMING); final org.ovirt.engine.core.common.action.UploadImageStatusParameters parameters = new org.ovirt.engine.core.common.action.UploadImageStatusParameters(rv.getId()); parameters.setUpdates(updates); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.UploadImageStatus, parameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { initiateResumeUpload3(result); } }, model); } else { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeMessage(result.getReturnValue().getDescription())); model.stopProgress(); } }	private void initiateResumeUploadCheckStatus(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel) (result.getState())); if (((result.getReturnValue()) != null) && (result.getReturnValue().getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer rv = result.getReturnValue().getActionReturnValue(); if ((rv.getBytesTotal()) != (getImageSize())) { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeSizeMessage(rv.getBytesTotal(), getImageSize())); model.stopProgress(); return; } org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates(); updates.setPhase(ImageTransferPhase.RESUMING); final org.ovirt.engine.core.common.action.UploadImageStatusParameters parameters = new org.ovirt.engine.core.common.action.UploadImageStatusParameters(rv.getId()); parameters.setUpdates(updates); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.UploadImageStatus, parameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { initiateResumeUploadStartTransfer(result); } }, model); } else { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeMessage(result.getReturnValue().getDescription())); model.stopProgress(); } }
@java.lang.Override public boolean execute() { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.log.info("Polling for status"); org.ovirt.engine.core.common.action.UploadImageStatusParameters statusParameters = new org.ovirt.engine.core.common.action.UploadImageStatusParameters(getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates(); updates.setBytesSent(getBytesSent()); statusParameters.setUpdates(updates); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.UploadImageStatus, statusParameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { respondToPollStatus(result); } }); if (!(getContinuePolling())) { manageWindowClosingHandler(false); } return getContinuePolling(); }	@java.lang.Override public boolean execute() { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.log.info("Polling for status"); org.ovirt.engine.core.common.action.UploadImageStatusParameters statusParameters = new org.ovirt.engine.core.common.action.UploadImageStatusParameters(getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates(); updates.setBytesSent(getBytesSent()); updates.setMessage(((getMessage()) != null ? getMessage() : getProgressStr())); statusParameters.setUpdates(updates); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.UploadImageStatus, statusParameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { respondToPollStatus(result); } }); if (!(getContinuePolling())) { manageWindowClosingHandler(false); } return getContinuePolling(); }
public org.ovirt.engine.core.compat.Guid getStorageDomainID() { return ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDiskListModel) (getEntity())).getEntity().getId(); }	private void logInfo(java.lang.String txt) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.log.info(txt); }
public void flush() { if (validate(false)) { diskModel.flush(); } }	public void flush() { if (validate(false)) { diskModel.flush(); ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDiskModel().getDisk())).setvolumeFormat(getVolumeFormat().getSelectedItem()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (<START_MOD>(disk.isEditEnabled()) && (<END_MOD>"Message".equals(propName))<START_MOD>)<END_MOD> { if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(disk.getMessage()))) { disableWidget(getWidget()); enableWidget(diskTypePanel); enableWidget(datacenterEditor); disk.getDefaultCommand().setIsExecutionAllowed(false); disk.setIsChangeable(false); } else { enableWidget(getWidget()); disk.getDefaultCommand().setIsExecutionAllowed(true); disk.setIsChangeable(true); } } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (disk.getIsModelDisabled().getEntity()) { disableWidget(getWidget()); enableWidget(diskTypePanel); enableWidget(datacenterEditor); disk.getDefaultCommand().setIsExecutionAllowed(false); disk.setIsChangeable(false); } else { enableWidget(getWidget()); disk.getDefaultCommand().setIsExecutionAllowed(true); disk.setIsChangeable(true); } }
@java.lang.Override protected void logToAudit() {<START_MOD> super.logToAudit();<END_MOD> if (isPolicyResetMessage(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getReturnStatus().message)) { return; } org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(vds.getId()); auditLogableBase.setVds(vds); auditLogableBase.addCustomValue("message", org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getReturnStatus().message); auditLogDirector.log(auditLogableBase, AuditLogType.VDS_BROKER_COMMAND_FAILURE); }	@java.lang.Override protected void logToAudit() { if (isPolicyResetMessage(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getReturnStatus().message)) { return; } org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(vds.getId()); auditLogableBase.setVds(vds); auditLogableBase.addCustomValue("message", org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getReturnStatus().message); auditLogDirector.log(auditLogableBase, AuditLogType.VDS_BROKER_COMMAND_FAILURE); }
protected void logToAudit() { <START_MOD>if (org.ovirt.engine.core.vdsbroker.vdsbroker.BrokerCommandBase.getParameters().getExpectedEngineErrors().contains(getReturnValueFromStatus(getReturnStatus()))) { return; <END_MOD>}<START_MOD> }<END_MOD>	protected void logToAudit() { }
@java.lang.Override protected void logToAudit() {<START_MOD> super.logToAudit();<END_MOD> org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLogableBase.addCustomValue("message", org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.getReturnStatus().message); auditLogDirector.log(auditLogableBase, AuditLogType.IRS_BROKER_COMMAND_FAILURE); }	@java.lang.Override protected void logToAudit() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLogableBase.addCustomValue("message", org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.getReturnStatus().message); auditLogDirector.log(auditLogableBase, AuditLogType.IRS_BROKER_COMMAND_FAILURE); }
public java.util.Set<org.ovirt.engine.core.common.errors.EngineError> getExpectedEngineErrors() { return expectedEngineErrors.orElse(java.util.Collections.EMPTY_SET); }	public java.util.Set<org.ovirt.engine.core.common.errors.EngineError> getExpectedEngineErrors() { return expectedEngineErrors.orElse(java.util.Collections.<org.ovirt.engine.core.common.errors.EngineError>emptySet()); }
private static java.util.List<org.ovirt.engine.api.extensions.ExtMap> flatGroups(org.ovirt.engine.api.extensions.ExtMap entity, org.ovirt.engine.api.extensions.ExtKey key, java.util.List<org.ovirt.engine.api.extensions.ExtMap> accumulator) { for (org.ovirt.engine.api.extensions.ExtMap group : entity.<java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>>get(key, java.util.Collections.<org.ovirt.engine.api.extensions.ExtMap>emptyList())) { <START_MOD>if (!(accumulator.contains(group))) { <END_MOD>accumulator.add(group); org.ovirt.engine.core.bll.aaa.DirectoryUtils.flatGroups(group, GroupRecord.GROUPS, accumulator); } <START_MOD>} <END_MOD>return accumulator; }	private static void flatGroups(org.ovirt.engine.api.extensions.ExtMap entity, org.ovirt.engine.api.extensions.ExtKey key, java.util.Map<java.lang.String, org.ovirt.engine.api.extensions.ExtMap> accumulator) { for (org.ovirt.engine.api.extensions.ExtMap group : entity.<java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>>get(key, java.util.Collections.<org.ovirt.engine.api.extensions.ExtMap>emptyList())) { if (!(accumulator.containsKey(group.<java.lang.String>get(GroupRecord.ID)))) { accumulator.put(group.<java.lang.String>get(GroupRecord.ID), group); org.ovirt.engine.core.bll.aaa.DirectoryUtils.flatGroups(group, GroupRecord.GROUPS, accumulator); } } }
public static org.ovirt.engine.core.compat.Version getCompatibilityVersion(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return (vmBase.getClusterId()) != null ? ClusterUtils.getInstance().getClusterDao().get(vmBase.getClusterId()).getCompatibilityVersion() : org.ovirt.engine.core.compat.Version.<START_MOD>v3_6<END_MOD>; }	public static org.ovirt.engine.core.compat.Version getCompatibilityVersion(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return (vmBase.getClusterId()) != null ? ClusterUtils.getInstance().getClusterDao().get(vmBase.getClusterId()).getCompatibilityVersion() : org.ovirt.engine.core.compat.Version.v3_5; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((disk.getVm()) == null) { return; } boolean isVirtioScsiEnabled = java.lang.Boolean.TRUE.equals(((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity()); org.ovirt.engine.core.compat.Version clusterVersion = disk.getVm().getCompatibilityVersion(); interfaceInfoIcon.setVisible((!isVirtioScsiEnabled)); }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((disk.getVm()) == null) { return; } boolean isVirtioScsiEnabled = java.lang.Boolean.TRUE.equals(((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity()); interfaceInfoIcon.setVisible((!isVirtioScsiEnabled)); }
protected void updateCpuPinningVisibility() { if ((getModel().getSelectedCluster()) != null) { java.lang.String compatibilityVersion = getModel().getCompatibilityVersion().toString(); boolean isLocalSD = ((getModel().getSelectedDataCenter()) != null) && (getModel().getSelectedDataCenter().isLocal()); boolean hasCpuPinning = (java.lang.Boolean.FALSE.equals(getModel().getIsAutoAssign().getEntity())) || isLocalSD; if (((java.lang.Boolean.FALSE.equals(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.CpuPinMigrationEnabled, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDefaultConfigurationVersion()))) && (isVmMigratable())) && (!isLocalSD)) { hasCpuPinning = false; } if (!hasCpuPinning) { if (isLocalSD) { getModel().getCpuPinning().setChangeProhibitionReason(constants.cpuPinningUnavailableLocalStorage()); } else { getModel().getCpuPinning().setChangeProhibitionReason(constants.cpuPinningUnavailable()); } getModel().getCpuPinning().setEntity(""); } getModel().getCpuPinning().setIsChangeable(hasCpuPinning); } }	protected void updateCpuPinningVisibility() { if ((getModel().getSelectedCluster()) != null) { boolean isLocalSD = ((getModel().getSelectedDataCenter()) != null) && (getModel().getSelectedDataCenter().isLocal()); boolean hasCpuPinning = (java.lang.Boolean.FALSE.equals(getModel().getIsAutoAssign().getEntity())) || isLocalSD; if (((java.lang.Boolean.FALSE.equals(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.CpuPinMigrationEnabled, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDefaultConfigurationVersion()))) && (isVmMigratable())) && (!isLocalSD)) { hasCpuPinning = false; } if (!hasCpuPinning) { if (isLocalSD) { getModel().getCpuPinning().setChangeProhibitionReason(constants.cpuPinningUnavailableLocalStorage()); } else { getModel().getCpuPinning().setChangeProhibitionReason(constants.cpuPinningUnavailable()); } getModel().getCpuPinning().setEntity(""); } getModel().getCpuPinning().setIsChangeable(hasCpuPinning); } }
@org.junit.Before public void mockConfig() { java.util.HashSet<org.ovirt.engine.core.compat.Version> supportedClusters = new java.util.HashSet<>(); supportedClusters.add(version); when(host.getSupportedClusterVersionsSet()).thenReturn(supportedClusters); when(host.getClusterCompatibilityVersion()).thenReturn(version); configRule.mockConfigValue(ConfigValues.DefaultMTU, 1500); configRule.mockConfigValue(ConfigValues.HostNetworkQosSupported, version, false); }	@org.junit.Before public void mockConfig() { when(host.getClusterCompatibilityVersion()).thenReturn(version); configRule.mockConfigValue(ConfigValues.DefaultMTU, 1500); configRule.mockConfigValue(ConfigValues.HostNetworkQosSupported, version, false); }
private java.util.Map<java.lang.String, java.lang.String> createMigrationInfo() { java.util.Map<java.lang.String, java.lang.String> migrationInfo = new java.util.HashMap<>(); P parameters = org.ovirt.engine.core.vdsbroker.vdsbroker.MigrateBrokerVDSCommand.getParameters(); migrationInfo.put(VdsProperties.vm_guid, parameters.getVmId().toString()); migrationInfo.put(VdsProperties.src, java.lang.String.format("%1$s", parameters.getSrcHost())); migrationInfo.put(VdsProperties.dst, java.lang.String.format("%1$s", parameters.getDstHost())); migrationInfo.put(VdsProperties.method, org.ovirt.engine.core.vdsbroker.vdsbroker.VdsProperties.migrationMethodtoString(parameters.getMigrationMethod())); <START_MOD>migrationInfo.put("abortOnError", java.lang.Boolean.TRUE.toString()); migrationInfo.put(VdsProperties.TUNNELED, java.lang.Boolean.toString(parameters.isTunnelMigration())); <END_MOD>if (org.<START_MOD>apache.commons.lang.StringUtils.isNotBlank(parameters.getDstQemu())) { migrationInfo.put(VdsProperties.DST_QEMU, parameters.getDstQemu(<END_MOD>)); } if (<START_MOD>(parameters.getMigrationDowntime()) != 0) { migrationInfo.put(VdsProperties.MIGRATION_DOWNTIME, java.lang.Integer.toString(parameters.getMigrationDowntime()<END_MOD>)); } if (<START_MOD>(parameters.getAutoConverge()) != null) { migrationInfo.put(VdsProperties.AUTO_CONVERGE, parameters.getAutoConverge()<END_MOD>.toString()); } if ((parameters.<START_MOD>getMigrateCompressed<END_MOD>()) != <START_MOD>null) { migrationInfo.put(VdsProperties.MIGRATE_COMPRESSED, parameters.getMigrateCompressed().toString(<END_MOD>)); } if ((parameters.<START_MOD>getConsoleAddress<END_MOD>()) != null) { migrationInfo.put(VdsProperties.<START_MOD>CONSOLE_ADDRESS, <END_MOD>parameters.getConsoleAddress()); } return migrationInfo; }	private java.util.Map<java.lang.String, java.lang.String> createMigrationInfo() { java.util.Map<java.lang.String, java.lang.String> migrationInfo = new java.util.HashMap<>(); P parameters = org.ovirt.engine.core.vdsbroker.vdsbroker.MigrateBrokerVDSCommand.getParameters(); migrationInfo.put(VdsProperties.vm_guid, parameters.getVmId().toString()); migrationInfo.put(VdsProperties.src, java.lang.String.format("%1$s", parameters.getSrcHost())); migrationInfo.put(VdsProperties.dst, java.lang.String.format("%1$s", parameters.getDstHost())); migrationInfo.put(VdsProperties.method, org.ovirt.engine.core.vdsbroker.vdsbroker.VdsProperties.migrationMethodtoString(parameters.getMigrationMethod())); migrationInfo.put(VdsProperties.TUNNELED, java.lang.Boolean.toString(parameters.isTunnelMigration())); migrationInfo.put("abortOnError", java.lang.Boolean.TRUE.toString()); if (org.apache.commons.lang.StringUtils.isNotBlank(parameters.getDstQemu())) { migrationInfo.put(VdsProperties.DST_QEMU, parameters.getDstQemu()); } if ((parameters.getMigrationDowntime()) != 0) { migrationInfo.put(VdsProperties.MIGRATION_DOWNTIME, java.lang.Integer.toString(parameters.getMigrationDowntime())); } if ((parameters.getAutoConverge()) != null) { migrationInfo.put(VdsProperties.AUTO_CONVERGE, parameters.getAutoConverge().toString()); } if ((parameters.getMigrateCompressed()) != null) { migrationInfo.put(VdsProperties.MIGRATE_COMPRESSED, parameters.getMigrateCompressed().toString()); } if ((parameters.getConsoleAddress()) != null) { migrationInfo.put(VdsProperties.CONSOLE_ADDRESS, parameters.getConsoleAddress()); } return migrationInfo; }
private void prepareParameters() { vdsId = org.ovirt.engine.core.compat.Guid.newGuid(); when(getQueryParameters().getId()).thenReturn(vdsId); storageType = org.ovirt.engine.core.common.businessentities.storage.StorageType.UNKNOWN; when(getQueryParameters().getStorageType()).thenReturn(storageType); vds = new org.ovirt.engine.core.common.businessentities.VDS(); when(vdsDaoMock.get(getQueryParameters().getId())).thenReturn(vds); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = java.util.Collections.emptyList(); when(storageDomainDaoMock.getAll()).thenReturn(domainsList); }	private void prepareParameters() { vdsId = org.ovirt.engine.core.compat.Guid.newGuid(); when(getQueryParameters().getId()).thenReturn(vdsId); storageType = org.ovirt.engine.core.common.businessentities.storage.StorageType.UNKNOWN; when(getQueryParameters().getStorageType()).thenReturn(storageType); }
private boolean volumeExists(org.ovirt.engine.core.compat.Guid volumeId) { log.debug( for the existence of volume '{0}' using GetVolumeInfo volumeId); org.ovirt.engine.core.common.vdscommands.SPMGetVolumeInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.SPMGetVolumeInfoVDSCommandParameters(org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getImageGroupId(), volumeId); <START_MOD>params.setDisplayAuditLogMessage(false); <END_MOD>try { runVdsCommand(VDSCommandType.SPMGetVolumeInfo, params); } catch (org.ovirt.engine.core.common.errors.EngineException e) { if ((e.getVdsError().getCode()) == (org.ovirt.engine.core.common.errors.EngineError.VolumeDoesNotExist)) { return false; } log.error( to determine volume '{0}' existence using GetVolumeInfo volumeId, e); } return true; }	private boolean volumeExists(org.ovirt.engine.core.compat.Guid volumeId) { log.debug("Checking for the existence of volume '{0}' using GetVolumeInfo", volumeId); org.ovirt.engine.core.common.vdscommands.SPMGetVolumeInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.SPMGetVolumeInfoVDSCommandParameters(org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getImageGroupId(), volumeId); params.setExpectedEngineErrors(java.util.Collections.singleton(EngineError.VolumeDoesNotExist)); try { runVdsCommand(VDSCommandType.SPMGetVolumeInfo, params); } catch (org.ovirt.engine.core.common.errors.EngineException e) { if ((e.getVdsError().getCode()) == (org.ovirt.engine.core.common.errors.EngineError.VolumeDoesNotExist)) { return false; } log.error("Failed to determine volume '{0}' existence using GetVolumeInfo", volumeId, e); } return true; }
@java.lang.Override protected void executeIrsBrokerCommand() { org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.log.info( GetVolumeInfo using the current SPM org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getCurrentIrsProxyData().getCurrentVdsId(), org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().getImageGroupId(), org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().getImageId()); <START_MOD>params.setDisplayAuditLogMessage(org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().isDisplayAuditLogMessage()); <END_MOD>setVDSReturnValue(resourceManager.runVdsCommand(VDSCommandType.GetVolumeInfo, params)); }	@java.lang.Override protected void executeIrsBrokerCommand() { org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.log.info("Executing GetVolumeInfo using the current SPM"); org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getCurrentIrsProxyData().getCurrentVdsId(), org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().getImageGroupId(), org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().getImageId()); params.setExpectedEngineErrors(org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().getExpectedEngineErrors()); setVDSReturnValue(resourceManager.runVdsCommand(VDSCommandType.GetVolumeInfo, params)); }
public boolean isVMWithMemoryCompatible(org.ovirt.engine.core.common.businessentities.VM vm) { if (vm == null) { return true; } org.ovirt.engine.core.compat.Version recentClusterVersion = vm.getClusterCompatibilityVersion(); org.ovirt.engine.core.compat.Version originalClusterVersion = vm.getClusterCompatibilityVersionOrigin(); if ((vm.getCustomCompatibilityVersion()) != null) { return true; } return ((originalClusterVersion != null) && ((recentClusterVersion.getMajor()) == (originalClusterVersion.getMajor()))) && ((recentClusterVersion.getMinor()) == (originalClusterVersion.getMinor())); }	public boolean isVMWithMemoryCompatible(org.ovirt.engine.core.common.businessentities.VM vm) { if ((vm == null) || ((vm.getCustomCompatibilityVersion()) != null)) { return true; } org.ovirt.engine.core.compat.Version recentClusterVersion = vm.getClusterCompatibilityVersion(); org.ovirt.engine.core.compat.Version originalClusterVersion = vm.getClusterCompatibilityVersionOrigin(); return ((originalClusterVersion != null) && ((recentClusterVersion.getMajor()) == (originalClusterVersion.getMajor()))) && ((recentClusterVersion.getMinor()) == (originalClusterVersion.getMinor())); }
public static boolean supportedInConfig(org.ovirt.engine.core.common.config.ConfigValues feature, org.ovirt.engine.core.compat.Version version, org.ovirt.engine.core.common.businessentities.ArchitectureType arch) { java.util.Map<java.lang.String, java.lang.String> archOptions = org.ovirt.engine.core.common.config.Config.<java.util.Map>getValue(feature, version.getValue()); java.lang.<START_MOD>String value = <END_MOD>archOptions.<START_MOD>get<END_MOD>(arch.name()<START_MOD>); if (value == null) {<END_MOD> archOptions.get(arch.getFamily().name())<START_MOD>; } return java.lang.Boolean.parseBoolean(value<END_MOD>); }	public static boolean supportedInConfig(org.ovirt.engine.core.common.config.ConfigValues feature, org.ovirt.engine.core.compat.Version version, org.ovirt.engine.core.common.businessentities.ArchitectureType arch) { java.util.Map<java.lang.String, java.lang.String> archOptions = org.ovirt.engine.core.common.config.Config.<java.util.Map>getValue(feature, version.getValue()); java.lang.String value = archOptions.get(arch.name()); if (value == null) { value = archOptions.get(arch.getFamily().name()); } return java.lang.Boolean.parseBoolean(value); }
private java.util.Map<java.lang.String, java.util.List> getEmptyMapReturnValue() { java.util.Map<java.lang.String, java.util.List> map = new java.util.HashMap<>(); map.put(OvfUtils.UNREGISTERED_ENTITIES, new java.util.ArrayList()); map.put(OvfUtils.UNREGISTERED_DISKS, new java.util.ArrayList()); return map; }	protected void castDiskImagesToUnregisteredDisks(java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksFromStorage) { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : disksFromStorage) { org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk unregisteredDisk = new org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk(disk); unregisteredDisks.add(unregisteredDisk); } }
protected void castDiskImagesToUnregisteredDisks(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksFromStorage) { unregisteredDisks = new java.util.ArrayList(); if (disksFromStorage != null) { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : disksFromStorage) { org.ovirt.engine.core.common.businessentities.UnregisteredDisk unregisteredDisk = new org.ovirt.engine.core.common.businessentities.UnregisteredDisk(); unregisteredDisk.setDiskAlias(disk.getDiskAlias()); unregisteredDisk.setDiskDescription(disk.getDiskDescription()); unregisteredDisk.setStorageDomainId(storageDomainId); unregisteredDisks.add(unregisteredDisk); } } }	protected void initUnregisteredDisksToDB(org.ovirt.engine.core.compat.Guid storageDomainId) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> existingDisks = org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getDiskImageDao().getAllForStorageDomain(org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getStorageDomainId()); for (java.lang.Object unregisteredDiskObj : unregisteredDisks) { org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk unregisteredDisk = ((org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk) (unregisteredDiskObj)); if (existingDisks.stream().anyMatch(( diskImage) -> diskImage.getId().equals(unregisteredDisk.getId()))) { log.info(("Disk {} with id '{}' already exists in the engine, therefore will not be " + "part of the unregistered disks."), unregisteredDisk.getDiskAlias(), unregisteredDisk.getId()); continue; } unregisteredDisksDao.removeUnregisteredDisk(unregisteredDisk.getId(), storageDomainId); unregisteredDisksDao.saveUnregisteredDisk(unregisteredDisk); log.info("Adding unregistered disk of disk id '{}' and disk alias '{}'", unregisteredDisk.getId(), unregisteredDisk.getDiskAlias()); } }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAllOVFDisks(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid storagePoolId) { if ((ovfDisks) == null) { ovfDisks = new java.util.ArrayList(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.<START_MOD>DiskImage> disksFromStorage = getBackend().runInternalQuery(VdcQueryType.GetUnregisteredDisks, new org.ovirt.engine.core.common.queries.GetUnregisteredDisksQueryParameters(storageDomainId, storagePoolId)).getReturnValue(); castDiskImagesToUnregisteredDisks(storageDomainId, disksFromStorage); if (disksFromStorage == null) { log.error( error occurred while fetching unregistered disks from Storage Domain id '{}' storageDomainId); return ovfDisks; } for (org.ovirt.engine.core.common.businessentities.storage.<END_MOD>Disk disk : <START_MOD>disksFromStorage<END_MOD>) { org.ovirt.engine.core.common.businessentities.storage.DiskImage ovfStoreDisk = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); java.lang.String diskDescription = ovfStoreDisk.getDescription(); if (diskDescription.contains(OvfInfoFileConstants.OvfStoreDescriptionLabel)) { java.util.Map<java.lang.String, java.lang.Object> diskDescriptionMap; try { diskDescriptionMap = org.ovirt.engine.core.utils.JsonHelper.jsonToMap(diskDescription); } catch (java.io.IOException e) { log.warn( while generating json containing ovf store info: {} e.getMessage()); log.debug("Exception", e); continue; } if (!(isDomainExistsInDiskDescription(diskDescriptionMap, storageDomainId))) { log.warn( disk description does not contain the storage domain id '{}' storageDomainId); continue; } ovfDisks.add(ovfStoreDisk); } } } return ovfDisks; }	protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAllOVFDisks(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid storagePoolId) { if ((ovfDisks) == null) { ovfDisks = new java.util.ArrayList(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksFromStorage = getBackend().runInternalQuery(VdcQueryType.GetUnregisteredDisks, new org.ovirt.engine.core.common.queries.GetUnregisteredDisksQueryParameters(storageDomainId, storagePoolId)).getReturnValue(); if (disksFromStorage == null) { log.error("An error occurred while fetching unregistered disks from Storage Domain id '{}'", storageDomainId); return ovfDisks; } else { castDiskImagesToUnregisteredDisks(disksFromStorage); } for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disksFromStorage) { org.ovirt.engine.core.common.businessentities.storage.DiskImage ovfStoreDisk = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); java.lang.String diskDescription = ovfStoreDisk.getDescription(); if (diskDescription.contains(OvfInfoFileConstants.OvfStoreDescriptionLabel)) { java.util.Map<java.lang.String, java.lang.Object> diskDescriptionMap; try { diskDescriptionMap = org.ovirt.engine.core.utils.JsonHelper.jsonToMap(diskDescription); } catch (java.io.IOException e) { log.warn("Exception while generating json containing ovf store info: {}", e.getMessage()); log.debug("Exception", e); continue; } if (!(isDomainExistsInDiskDescription(diskDescriptionMap, storageDomainId))) { log.warn("The disk description does not contain the storage domain id '{}'", storageDomainId); continue; } ovfDisks.add(ovfStoreDisk); } } } return ovfDisks; }
@org.junit.Test public void testGetVmDisks() throws java.io.IOException { try { org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument = new org.ovirt.engine.core.utils.ovf.xml.XmlDocument(getXmlOvfData()); org.ovirt.engine.core.utils.OvfUtils.getVmDisks(xmlDocument); } catch (java.io.IOException e) { e.printStackTrace(); } catch (java.lang.Exception e) { e.printStackTrace(); } assertEquals(true, true); }	@org.junit.Test public void testFetchVmDisks() throws java.io.IOException { try { org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument = new org.ovirt.engine.core.utils.ovf.xml.XmlDocument(getXmlOvfData()); java.util.List<org.ovirt.engine.core.compat.Guid> disks = org.ovirt.engine.core.utils.OvfUtils.fetchVmDisks(xmlDocument); assertNotNull("The list of disks should not be null", disks); assertTrue("The list of disks should not be empty", (!(disks.isEmpty()))); } catch (java.lang.Exception e) { e.printStackTrace(); } }
@java.lang.Override protected java.util.<START_MOD>Map<java.lang.String, java.util.<END_MOD>List> getEntitiesFromStorageOvfDisk(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid storagePoolId) { return super.getEntitiesFromStorageOvfDisk(storageDomainId, storagePoolId); }	@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> getEntitiesFromStorageOvfDisk(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid storagePoolId) { return super.getEntitiesFromStorageOvfDisk(storageDomainId, storagePoolId); }
public static java.util.List<org.ovirt.engine.core.compat.Guid> getVmDisks(org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument) { java.util.List<org.ovirt.engine.core.compat.Guid> disksIds = new java.util.ArrayList<>(); org.ovirt.engine.core.utils.ovf.xml.XmlNodeList nodeList = xmlDocument.selectNodes("//*/Section"); XmlNode selectedSection = null; for (XmlNode section : nodeList) { java.lang.String value = section.attributes.get("xsi:type").getValue(); if (value.equals("ovf:DiskSection_Type")) { selectedSection = section; break; } } if (selectedSection != null) { org.w3c.dom.NodeList childNodeList = selectedSection.getChildNodes(); for (int k = 0; k < (childNodeList.getLength()); k++) { if (childNodeList.item(k).getLocalName().equals("Disk")) { org.w3c.dom.Node node = childNodeList.item(k).getAttributes().getNamedItem("ovf:diskId"); if (node != null) { disksIds.add(org.ovirt.engine.core.compat.Guid.createGuidFromString(node.getTextContent())); } } } } return disksIds; }	public static java.util.List<org.ovirt.engine.core.compat.Guid> fetchVmDisks(org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument) { java.util.List<org.ovirt.engine.core.compat.Guid> disksIds = new java.util.ArrayList<>(); org.ovirt.engine.core.utils.ovf.xml.XmlNodeList nodeList = xmlDocument.selectNodes("//*/Section"); XmlNode selectedSection = null; for (XmlNode section : nodeList) { java.lang.String value = section.attributes.get("xsi:type").getValue(); if (value.equals("ovf:DiskSection_Type")) { selectedSection = section; break; } } if (selectedSection != null) { org.w3c.dom.NodeList childNodeList = selectedSection.getChildNodes(); for (int k = 0; k < (childNodeList.getLength()); k++) { if (childNodeList.item(k).getLocalName().equals("Disk")) { org.w3c.dom.Node node = childNodeList.item(k).getAttributes().getNamedItem("ovf:fileRef"); if ((node != null) && ((node.getTextContent()) != null)) { disksIds.add(org.ovirt.engine.core.compat.Guid.createGuidFromString(node.getTextContent().substring(0, org.ovirt.engine.core.utils.OvfUtils.GUID_LENGTH))); } } } } return disksIds; }
private static void updateDisksWithVMs(java.util.List<org.ovirt.engine.core.common.businessentities.UnregisteredDisk> unregisteredDisks, org.ovirt.engine.core.compat.Guid entityId, java.lang.String vmName, org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument) { for (org.ovirt.engine.core.compat.Guid diskId : org.ovirt.engine.core.utils.OvfUtils.getVmDisks(xmlDocument)) { org.ovirt.engine.core.common.businessentities.UnregisteredDisk unregisterDisk = unregisteredDisks.stream().filter(( unregDisk) -> unregDisk.getDiskId().equals(diskId)).findFirst().orElse(null); if (unregisterDisk != null) { unregisterDisk.getVmsId().add(entityId.toString()); unregisterDisk.getVmsName().add(vmName); } } }	public static void updateUnregisteredDisksWithVMs(java.util.List<org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk> unregisteredDisks, org.ovirt.engine.core.compat.Guid entityId, java.lang.String vmName, org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument) { for (org.ovirt.engine.core.compat.Guid diskId : org.ovirt.engine.core.utils.OvfUtils.fetchVmDisks(xmlDocument)) { org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk unregisterDisk = unregisteredDisks.stream().filter(( unregrDisk) -> diskId.equals(unregrDisk.getId())).findAny().orElse(null); org.ovirt.engine.core.common.businessentities.VmBase vm = new org.ovirt.engine.core.common.businessentities.VmBase(); vm.setId(entityId); vm.setName(vmName); if (unregisterDisk != null) { unregisterDisk.getVms().add(vm); } } }
public java.util.Set<org.ovirt.engine.core.common.errors.EngineError> getExpectedEngineErrors() { return expectedEngineErrors.orElse(java.util.Collections.<org.ovirt.engine.core.common.errors.EngineError>emptySet()); }	public java.util.Set<org.ovirt.engine.core.common.errors.EngineError> getExpectedEngineErrors() { return expectedEngineErrors; }
private org.ovirt.api.metamodel.tool.JavaClassName getEnumName(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName enumName = new org.ovirt.api.metamodel.tool.JavaClassName(); enumName.setPackageName(javaPackages.getXjcPackageName()); enumName.setSimpleName(<START_MOD>versionedJavaNames<END_MOD>.getJavaClassStyleName(type.getName())); return enumName; }	private org.ovirt.api.metamodel.tool.JavaClassName getEnumName(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName enumName = new org.ovirt.api.metamodel.tool.JavaClassName(); enumName.setPackageName(javaPackages.getTypesPackageName()); enumName.setSimpleName(versionedJavaNames.getJavaClassStyleName(type.getName())); return enumName; }
private void writeImports() { javaBuffer.addLine("import org.slf4j.Logger;"); javaBuffer.addLine("import org.slf4j.LoggerFactory;"); javaBuffer.addImport(javax.xml.bind.annotation.XmlEnum.class); javaBuffer.addImport(javax.xml.bind.annotation.XmlEnumValue.class); javaBuffer.addImport(javax.xml.bind.annotation.XmlType.class); javaBuffer.addLine(); }	private void writeImports() { javaBuffer.addImport(javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter.class); javaBuffer.addImport(javax.xml.bind.annotation.XmlType.class); javaBuffer.addLine("import org.ovirt.engine.api.utils.InvalidEnumValueException;"); javaBuffer.addLine(); }
private void writeAnnotations(java.lang.String enumName) { javaBuffer.addLine((("@XmlType(name = \"" + enumName) + "\")")); javaBuffer.addLine("@XmlEnum"); }	private void writeAnnotations(java.lang.String enumName) { javaBuffer.addLine("@XmlType(name = \"%1$s\")", enumName); javaBuffer.addLine("@XmlJavaTypeAdapter(%1$s.Adapter.class)", enumName); }
private void generateEnumSource(org.ovirt.api.metamodel.concepts.EnumType enumType) { java.lang.String enumName = javaBuffer.getClassName().getSimpleName(); writeImports(); writeAnnotations(enumName); writeClassHeader(enumName); writeEnumValues(enumType); writeLogger(enumName); writeValueMethod(); writeFromValueMethod(enumName, enumType); writeClassClose(); }	private void generateEnumSource(org.ovirt.api.metamodel.concepts.EnumType enumType) { java.lang.String enumName = javaBuffer.getClassName().getSimpleName(); writeImports(); writeAnnotations(enumName); writeClassHeader(enumName); writeEnumValues(enumType); writeValueMethod(); writeFromValueMethod(enumName, enumType); writeAdapter(enumName); writeClassClose(); }
public void generate(org.ovirt.api.metamodel.concepts.Model model) { for (org.ovirt.api.metamodel.concepts.Type type : model.getTypes()) { if ((type instanceof org.ovirt.api.metamodel.concepts.EnumType) && (!(schemaNames.isSchemaEnum(type)))) { org.ovirt.api.metamodel.concepts.EnumType enumType = ((org.ovirt.api.metamodel.concepts.EnumType) (type)); generateEnum(enumType); } } }	public void generate(org.ovirt.api.metamodel.concepts.Model model) { for (org.ovirt.api.metamodel.concepts.Type type : model.getTypes()) { if (type instanceof org.ovirt.api.metamodel.concepts.EnumType) { org.ovirt.api.metamodel.concepts.EnumType enumType = ((org.ovirt.api.metamodel.concepts.EnumType) (type)); generateEnum(enumType); } } }
private void writeSchema() { writer.writeStartElement(org.ovirt.api.metamodel.tool.SchemaGenerator.XS_URI, "schema"); writer.writeAttribute("version", "1.0"); writeActionTypes(); java.util.List<org.ovirt.api.metamodel.concepts.StructType> structTypes = new java.util.ArrayList<>(); java.util.List<org.ovirt.api.metamodel.concepts.EnumType> enumTypes = new java.util.ArrayList<>(); for (org.ovirt.api.metamodel.concepts.Type type : model.getTypes()) { if ((type instanceof org.ovirt.api.metamodel.concepts.StructType) && (type != (identifiedType))) { structTypes.add(((org.ovirt.api.metamodel.concepts.StructType) (type))); } if (type instanceof org.ovirt.api.metamodel.concepts.EnumType) { enumTypes.add(((org.ovirt.api.metamodel.concepts.EnumType) (type))); } } writeEnumValues(enumTypes); for (org.ovirt.api.metamodel.concepts.EnumType enumType : enumTypes) { writeEnumType(enumType); } for (org.ovirt.api.metamodel.concepts.StructType structType : structTypes) { writeStructType(structType); } writer.writeEndElement(); }	private void writeSchema() { writer.writeStartElement(org.ovirt.api.metamodel.tool.SchemaGenerator.XS_URI, "schema"); writer.writeAttribute("version", "1.0"); writeActionTypes(); java.util.List<org.ovirt.api.metamodel.concepts.StructType> structTypes = new java.util.ArrayList<>(); java.util.List<org.ovirt.api.metamodel.concepts.EnumType> enumTypes = new java.util.ArrayList<>(); for (org.ovirt.api.metamodel.concepts.Type type : model.getTypes()) { if ((type instanceof org.ovirt.api.metamodel.concepts.StructType) && (type != (identifiedType))) { structTypes.add(((org.ovirt.api.metamodel.concepts.StructType) (type))); } if (type instanceof org.ovirt.api.metamodel.concepts.EnumType) { enumTypes.add(((org.ovirt.api.metamodel.concepts.EnumType) (type))); } } writeEnumValues(enumTypes); enumTypes.forEach(this::writeEnumType); structTypes.forEach(this::writeStructType); writer.writeEndElement(); }
private void writeEnumValues(org.ovirt.api.metamodel.concepts.EnumType type) { java.util.Iterator<org.ovirt.api.metamodel.concepts.EnumValue> iterator = type.getValues().iterator(); while (iterator.hasNext()) { org.ovirt.api.metamodel.concepts.EnumValue value = iterator.next(); javaBuffer.addLine((("@XmlEnumValue(\"" + (java.lang.String.join("_", value.getName().getWords()).toLowerCase())) + "\")")); javaBuffer.addLine(getEnumValueLine(value, (!(iterator.hasNext())))); } javaBuffer.addLine(); }	private void writeEnumValues(org.ovirt.api.metamodel.concepts.EnumType type) { java.util.Iterator<org.ovirt.api.metamodel.concepts.EnumValue> iterator = type.getValues().iterator(); while (iterator.hasNext()) { org.ovirt.api.metamodel.concepts.EnumValue value = iterator.next(); javaBuffer.addLine(getEnumValueLine(value, (!(iterator.hasNext())))); } javaBuffer.addLine(); }
private static void mapQosToEntity(org.ovirt.engine.api.model.Qos model, org.ovirt.engine.core.common.businessentities.qos.QosBase entity<START_MOD>) {<END_MOD> org.ovirt.engine.api.model.QosType qosType<START_MOD> = ((model.getType()) == null) ? (entity.getQosType()) == null ? null : org.ovirt.engine.api.restapi.types.QosTypeMapper.map(entity.getQosType(), null) : model.getType(); switch (qosType<END_MOD>) { case STORAGE : org.ovirt.engine.api.restapi.types.QosMapper.mapStorageQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.qos.StorageQos) (entity))); break; case CPU : org.ovirt.engine.api.restapi.types.QosMapper.mapCpuQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.qos.CpuQos) (entity))); break; case NETWORK : org.ovirt.engine.api.restapi.types.QosMapper.mapNetworkQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.network.NetworkQoS) (entity))); break; case HOSTNETWORK : org.ovirt.engine.api.restapi.types.QosMapper.mapHostNetworkQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.network.HostNetworkQos) (entity))); break; default : break; } }	private static void mapQosToEntity(org.ovirt.engine.api.model.Qos model, org.ovirt.engine.core.common.businessentities.qos.QosBase entity) { org.ovirt.engine.api.model.QosType qosType = model.getType(); if ((qosType == null) && ((entity.getQosType()) != null)) { qosType = org.ovirt.engine.api.restapi.types.QosTypeMapper.map(entity.getQosType(), null); } if (qosType != null) { switch (qosType) { case STORAGE : org.ovirt.engine.api.restapi.types.QosMapper.mapStorageQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.qos.StorageQos) (entity))); break; case CPU : org.ovirt.engine.api.restapi.types.QosMapper.mapCpuQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.qos.CpuQos) (entity))); break; case NETWORK : org.ovirt.engine.api.restapi.types.QosMapper.mapNetworkQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.network.NetworkQoS) (entity))); break; case HOSTNETWORK : org.ovirt.engine.api.restapi.types.QosMapper.mapHostNetworkQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.network.HostNetworkQos) (entity))); break; default : break; } } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Qos.class, to = org.ovirt.engine.core.common.businessentities.qos.QosBase.class) public static org.ovirt.engine.core.common.businessentities.qos.QosBase map(org.ovirt.engine.api.model.Qos model, org.ovirt.engine.core.common.businessentities.qos.QosBase template) { <START_MOD>if<END_MOD> (template == null) <START_MOD>{<END_MOD> org.ovirt.engine.api.restapi.types.<START_MOD>QosMapper.createNewQosEntityForQosType<END_MOD>(model.getType()<START_MOD>); } if (model.isSetId()) { template.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if (model.isSetName()) { template.setName(model.getName()); } if ((model.isSetDataCenter()) && (model.getDataCenter().isSetId())) { template.setStoragePoolId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getDataCenter().getId())); } if (model.isSetDescription()) { template.setDescription(model.getDescription()); } org.ovirt.engine.api.restapi.types.QosMapper.mapQosToEntity(model<END_MOD>, <START_MOD>template<END_MOD>); return <START_MOD>template; }<END_MOD>	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Qos.class, to = org.ovirt.engine.core.common.businessentities.qos.QosBase.class) public static org.ovirt.engine.core.common.businessentities.qos.QosBase map(org.ovirt.engine.api.model.Qos model, org.ovirt.engine.core.common.businessentities.qos.QosBase template) { if (template == null) { template = org.ovirt.engine.api.restapi.types.QosMapper.createNewQosEntityForQosType(model.getType()); } if (model.isSetId()) { template.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if (model.isSetName()) { template.setName(model.getName()); } if ((model.isSetDataCenter()) && (model.getDataCenter().isSetId())) { template.setStoragePoolId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getDataCenter().getId())); } if (model.isSetDescription()) { template.setDescription(model.getDescription()); } org.ovirt.engine.api.restapi.types.QosMapper.mapQosToEntity(model, template); return template; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.qos.QosBase.class, to = org.ovirt.engine.api.model.Qos.class) public static org.ovirt.engine.api.model.Qos map(org.ovirt.engine.core.common.businessentities.qos.QosBase entity, org.ovirt.engine.api.model.Qos template) { org.ovirt.engine.api.model.Qos model = (template != null) ? template : new org.ovirt.engine.api.model.Qos(); model.setId(entity.getId().toString()); model.setName(entity.getName()); <START_MOD>org.ovirt.engine.core.compat.Guid storagePoolId = entity.getStoragePoolId(); if (storagePoolId != null) { org.ovirt.engine.api.model.DataCenter dataCenter = new org.ovirt.engine.api.model.DataCenter(); dataCenter.setId(storagePoolId.toString()); model.setDataCenter(dataCenter); } model.setDescription(entity.getDescription()); if ((entity.getQosType()) != null) { <END_MOD>model.setType(org.ovirt.engine.api.restapi.types.QosTypeMapper.<START_MOD>map<END_MOD>(entity.getQosType()<START_MOD>,<END_MOD> null)); } return model; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.qos.QosBase.class, to = org.ovirt.engine.api.model.Qos.class) public static org.ovirt.engine.api.model.Qos map(org.ovirt.engine.core.common.businessentities.qos.QosBase entity, org.ovirt.engine.api.model.Qos template) { org.ovirt.engine.api.model.Qos model = (template != null) ? template : new org.ovirt.engine.api.model.Qos(); model.setId(entity.getId().toString()); model.setName(entity.getName()); org.ovirt.engine.core.compat.Guid storagePoolId = entity.getStoragePoolId(); if (storagePoolId != null) { org.ovirt.engine.api.model.DataCenter dataCenter = new org.ovirt.engine.api.model.DataCenter(); dataCenter.setId(storagePoolId.toString()); model.setDataCenter(dataCenter); } model.setDescription(entity.getDescription()); org.ovirt.engine.api.restapi.types.QosMapper.mapQosTypeToModel(entity, model); if ((entity.getQosType()) != null) { model.setType(org.ovirt.engine.api.restapi.types.QosTypeMapper.map(entity.getQosType(), null)); } return model; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.pm.FenceProxySourceType.class, to = org.ovirt.engine.api.model.PmProxyType.class) private static org.ovirt.engine.api.model.PmProxyType map(org.ovirt.engine.core.common.businessentities.pm.FenceProxySourceType fenceProxySource, org.ovirt.engine.api.model.PmProxyType template) { switch (template) { case CLUSTER : return org.ovirt.engine.api.model.PmProxyType.CLUSTER; case DC : return org.ovirt.engine.api.model.PmProxyType.DC; case OTHER_DC : return org.ovirt.engine.api.model.PmProxyType.OTHER_DC; default : return null; } }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.pm.FenceProxySourceType.class, to = org.ovirt.engine.api.model.PmProxyType.class) private static org.ovirt.engine.api.model.PmProxyType map(org.ovirt.engine.core.common.businessentities.pm.FenceProxySourceType fenceProxySource, org.ovirt.engine.api.model.PmProxyType template) { switch (fenceProxySource) { case CLUSTER : return org.ovirt.engine.api.model.PmProxyType.CLUSTER; case DC : return org.ovirt.engine.api.model.PmProxyType.DC; case OTHER_DC : return org.ovirt.engine.api.model.PmProxyType.OTHER_DC; default : return null; } }
@java.lang.Override public org.ovirt.engine.ui.common.widget.ImageWithDecorator getValue(org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel item) { org.ovirt.engine.core.common.businessentities.VM vm = item.getVM(); com.google.gwt.resources.client.ImageResource changesImage = null; if ((vm != null) && (vm.isNextRunConfigurationExists())) { changesImage = org.ovirt.engine.ui.userportal.widget.table.column.VmStatusColumn.resources.vmDelta(); } return new org.ovirt.engine.ui.common.widget.ImageWithDecorator(getMainImage(item), changesImage, org.ovirt.engine.ui.userportal.widget.table.column.VmStatusColumn.DECORATOR_POSITION_LEFT, org.ovirt.engine.ui.userportal.widget.table.column.VmStatusColumn.DECORATOR_POSITION_TOP<START_MOD>, vm.getStatus().toString()<END_MOD>); }	@java.lang.Override public org.ovirt.engine.ui.common.widget.ImageWithDecorator getValue(org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel item) { org.ovirt.engine.core.common.businessentities.VM vm = item.getVM(); com.google.gwt.resources.client.ImageResource changesImage = null; java.lang.String vmStatus = ""; if (vm != null) { if (vm.isNextRunConfigurationExists()) { changesImage = org.ovirt.engine.ui.userportal.widget.table.column.VmStatusColumn.resources.vmDelta(); } vmStatus = vm.getStatus().toString(); } return new org.ovirt.engine.ui.common.widget.ImageWithDecorator(getMainImage(item), changesImage, org.ovirt.engine.ui.userportal.widget.table.column.VmStatusColumn.DECORATOR_POSITION_LEFT, org.ovirt.engine.ui.userportal.widget.table.column.VmStatusColumn.DECORATOR_POSITION_TOP, vmStatus); }
public void fillReportedConfigurations(java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> networkAttachments, org.ovirt.engine.core.compat.Guid hostId) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allInterfacesForHost = interfaceDao.getAllInterfacesForVds(hostId); org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Network> networkMap = new org.ovirt.engine.core.common.businessentities.BusinessEntityMap(networkDao.getAllForCluster(vdsDao.get(hostId).getClusterId())); fillReportedConfigurations(<START_MOD>allInterfacesForHost<END_MOD>, networkMap, <START_MOD>networkAttachments, hostId<END_MOD>); }	public void fillReportedConfigurations(java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> networkAttachments, org.ovirt.engine.core.compat.Guid hostId) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allInterfacesForHost = interfaceDao.getAllInterfacesForVds(hostId); org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Network> networkMap = new org.ovirt.engine.core.common.businessentities.BusinessEntityMap(networkDao.getAllForCluster(vdsDao.get(hostId).getClusterId())); fillReportedConfigurations(allInterfacesForHost, networkMap, networkAttachments); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.bll.network.host.GetNetworkAttachmentsByHostIdQuery.getParameters().getId(); java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> networkAttachments = networkAttachmentDao.getAllForHost(hostId); <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allInterfacesForHost = interfaceDao.getAllInterfacesForVds(hostId); org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Network> networkMap = new org.ovirt.engine.core.common.businessentities.BusinessEntityMap(networkDao.getAllForCluster(hostDao.get(hostId).getClusterId())); <END_MOD>reportedConfigurationsFiller.fillReportedConfigurations(<START_MOD>allInterfacesForHost, networkMap, networkAttachments, hostId); completeNicNames(allInterfacesForHost, networkAttachments); completeNetworkNames(networkMap, networkAttachments<END_MOD>); org.ovirt.engine.core.bll.network.host.GetNetworkAttachmentsByHostIdQuery.getQueryReturnValue().setReturnValue(networkAttachments); }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.bll.network.host.GetNetworkAttachmentsByHostIdQuery.getParameters().getId(); java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> networkAttachments = networkAttachmentDao.getAllForHost(hostId); java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allInterfacesForHost = interfaceDao.getAllInterfacesForVds(hostId); org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Network> networkMap = new org.ovirt.engine.core.common.businessentities.BusinessEntityMap(networkDao.getAllForCluster(hostDao.get(hostId).getClusterId())); reportedConfigurationsFiller.fillReportedConfigurations(allInterfacesForHost, networkMap, networkAttachments); completeNicNames(networkAttachments, allInterfacesForHost); completeNetworkNames(networkAttachments, networkMap); org.ovirt.engine.core.bll.network.host.GetNetworkAttachmentsByHostIdQuery.getQueryReturnValue().setReturnValue(networkAttachments); }
private void completeNetworkNames(org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Network> networkMap, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachments) { networkIdNetworkNameCompleter.completeNetworkAttachments(attachments, networkMap); }	private void completeNetworkNames(java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachments, org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Network> networkMap) { networkIdNetworkNameCompleter.completeNetworkAttachments(attachments, networkMap); }
public void fillReportedConfigurations(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allInterfacesForHost, org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Network> networkMap, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> networkAttachments, org.ovirt.engine.core.compat.Guid hostId) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> networkNameToNicMap = nicsByNetworkId(allInterfacesForHost); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment : networkAttachments) { fillReportedConfigurations(networkNameToNicMap, networkMap, networkAttachment); } }	public void fillReportedConfigurations(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allInterfacesForHost, org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Network> networkMap, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> networkAttachments) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> networkNameToNicMap = nicsByNetworkId(allInterfacesForHost); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment : networkAttachments) { fillReportedConfigurations(networkNameToNicMap, networkMap, networkAttachment); } }
private void completeNicNames(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allInterfacesForHost, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachments) { org.ovirt.engine.core.bll.network.host.NicNameNicIdCompleter nicNameNicIdCompleter = new org.ovirt.engine.core.bll.network.host.NicNameNicIdCompleter(allInterfacesForHost); nicNameNicIdCompleter.completeNetworkAttachments(attachments); }	private void completeNicNames(java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachments, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allInterfacesForHost) { org.ovirt.engine.core.bll.network.host.NicNameNicIdCompleter nicNameNicIdCompleter = new org.ovirt.engine.core.bll.network.host.NicNameNicIdCompleter(allInterfacesForHost); nicNameNicIdCompleter.completeNetworkAttachments(attachments); }
@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { if ((org.ovirt.engine.core.bll.MaintenanceVdsCommand.getVds().getVdsGroupSupportsGlusterService()) && (org.ovirt.engine.core.bll.MaintenanceVdsCommand.getParameters().isStopGlusterService())) { return new org.ovirt.engine.core.bll.HostMaintenanceCallback(); } else { return super.getCallback(); } }	@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallBack getCallBack() { if ((org.ovirt.engine.core.bll.MaintenanceVdsCommand.getVds().getVdsGroupSupportsGlusterService()) && (org.ovirt.engine.core.bll.MaintenanceVdsCommand.getParameters().isStopGlusterService())) { return new org.ovirt.engine.core.bll.HostMaintenanceCallback(); } else { return super.getCallBack(); } }
public static boolean isStopGlusterProcessesSupported(org.ovirt.engine.core.compat.Version version) { return Version.v3_5.lessOrEquals(version); }	public static boolean isStopGlusterProcessesSupported(org.ovirt.engine.core.compat.Version version) { return (Version.v3_5.compareTo(version)) <= 0; }
public static int[] asIntArray(java.util.List<?> l<START_MOD>, int def, int size<END_MOD>) { int[] ret = new int[size]; <START_MOD>java.util.Arrays.fill(ret, java.lang.Integer.valueOf(def)); for (<END_MOD>int i = 0; <START_MOD>(i <<END_MOD> (<START_MOD>l<END_MOD>.<START_MOD>size()))<END_MOD> <START_MOD>&&<END_MOD> <START_MOD>(i<END_MOD> <START_MOD>< size); i++<END_MOD>) { ret[i] = java.lang.Integer.valueOf(<START_MOD>l.get(i)<END_MOD>.toString()); } return ret; }	public static int[] asIntArray(java.util.List<?> l, int def, int size) { int[] ret = new int[size]; java.util.Arrays.fill(ret, def); for (int i = 0; (i < (l.size())) && (i < size); i++) { ret[i] = java.lang.Integer.valueOf(l.get(i).toString()); } return ret; }
private org.ovirt.engine.core.common.action.ImportVmParameters createImportParams(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.StorageDomain sd) { org.ovirt.engine.core.common.action.ImportVmParameters parameters = new org.ovirt.engine.core.common.action.ImportVmParameters(vm, sd.getId(), sd.getId(), sd.getStoragePoolId(), vm.getClusterId()); org.ovirt.engine.core.compat.Guid sdProfileId = diskProfileDao.getAllForStorageDomain(sd.getId()).get(0).getId(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : vm.getImages()) { image.setDiskProfileId(sdProfileId); image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(sd.getId()))); image.setVmSnapshotId(org.ovirt.engine.core.compat.Guid.newGuid()); } parameters.setImagesExistOnTargetStorageDomain(true); vm.setOrigin(OriginType.MANAGED_HOSTED_ENGINE); org.ovirt.engine.core.common.businessentities.Cluster cluster = clusterDAO.get(vm.getClusterId()); vm.setClusterArch(cluster.getArchitecture()); vm.setVmCreationDate(new java.util.Date()); vm.setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE); vm.setVmOs(osRepository.getLinuxOss().stream().sorted().findFirst().get()); <START_MOD>vm.setPriority(1); vm.setTimeZone(java.util.TimeZone.getDefault().getID()); <END_MOD>return parameters; }	private org.ovirt.engine.core.common.action.ImportVmParameters createImportParams(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.StorageDomain sd) { org.ovirt.engine.core.common.action.ImportVmParameters parameters = new org.ovirt.engine.core.common.action.ImportVmParameters(vm, sd.getId(), sd.getId(), sd.getStoragePoolId(), vm.getClusterId()); org.ovirt.engine.core.compat.Guid sdProfileId = diskProfileDao.getAllForStorageDomain(sd.getId()).get(0).getId(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : vm.getImages()) { image.setDiskProfileId(sdProfileId); image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(sd.getId()))); image.setVmSnapshotId(org.ovirt.engine.core.compat.Guid.newGuid()); } parameters.setImagesExistOnTargetStorageDomain(true); vm.setOrigin(OriginType.MANAGED_HOSTED_ENGINE); org.ovirt.engine.core.common.businessentities.Cluster cluster = clusterDAO.get(vm.getClusterId()); vm.setClusterArch(cluster.getArchitecture()); vm.setVmCreationDate(new java.util.Date()); vm.setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE); vm.setVmOs(osRepository.getLinuxOss().stream().sorted().findFirst().get()); vm.setPriority(1); org.ovirt.engine.core.bll.VmHandler.updateDefaultTimeZone(vm.getStaticData()); return parameters; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel> imageLineModels = new java.util.ArrayList<>(); <START_MOD>boolean isChangeable = ((vm) == null) || (org.ovirt.engine.core.common.validation.VmActionValidator.isCommandAllowed(vm.getOrigin(), VdcActionType.UpdateVmDisk)); <END_MOD>for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (returnValue))) { org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel lineModel = new org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel(getModel().getInstanceImages()); lineModel.initialize(disk, getVm()); <START_MOD>lineModel.setEnabled(isChangeable); <END_MOD>imageLineModels.add(lineModel); } getModel().getInstanceImages().<START_MOD>setIsChangeable(isChangeable); getModel().getInstanceImages().<END_MOD>setItems(imageLineModels); getModel().getInstanceImages().setVm(getVm()); }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel> imageLineModels = new java.util.ArrayList<>(); boolean isChangeable = ((vm) == null) || (org.ovirt.engine.core.common.validation.VmActionByVmOriginTypeValidator.isCommandAllowed(vm, VdcActionType.UpdateVmDisk)); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (returnValue))) { org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel lineModel = new org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel(getModel().getInstanceImages()); lineModel.initialize(disk, getVm()); lineModel.setEnabled(isChangeable); imageLineModels.add(lineModel); } getModel().getInstanceImages().setIsChangeable(isChangeable); getModel().getInstanceImages().setItems(imageLineModels); getModel().getInstanceImages().setVm(getVm()); }
private void updateInstanceImages() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmDiskList(new org.ovirt.engine.ui.frontend.AsyncQuery(getModel(), new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel> imageLineModels = new java.util.ArrayList<>(); <START_MOD>boolean isChangeable = ((vm) == null) || (org.ovirt.engine.core.common.validation.VmActionValidator.isCommandAllowed(vm.getOrigin(), VdcActionType.UpdateVmDisk)); <END_MOD>for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (returnValue))) { org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel lineModel = new org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel(getModel().getInstanceImages()); lineModel.initialize(disk, getVm()); <START_MOD>lineModel.setEnabled(isChangeable); <END_MOD>imageLineModels.add(lineModel); } getModel().getInstanceImages().<START_MOD>setIsChangeable(isChangeable); getModel().getInstanceImages().<END_MOD>setItems(imageLineModels); getModel().getInstanceImages().setVm(getVm()); } }), getVm().getId()); }	private void updateInstanceImages() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmDiskList(new org.ovirt.engine.ui.frontend.AsyncQuery(getModel(), new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel> imageLineModels = new java.util.ArrayList<>(); boolean isChangeable = ((vm) == null) || (org.ovirt.engine.core.common.validation.VmActionByVmOriginTypeValidator.isCommandAllowed(vm, VdcActionType.UpdateVmDisk)); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (returnValue))) { org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel lineModel = new org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel(getModel().getInstanceImages()); lineModel.initialize(disk, getVm()); lineModel.setEnabled(isChangeable); imageLineModels.add(lineModel); } getModel().getInstanceImages().setIsChangeable(isChangeable); getModel().getInstanceImages().setItems(imageLineModels); getModel().getInstanceImages().setVm(getVm()); } }), getVm().getId()); }
public static org.ovirt.engine.core.bll.ValidationResult canRunActionOnNonManagedVm(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.action.VdcActionType actionType) { org.ovirt.engine.core.bll.ValidationResult validationResult = ValidationResult.VALID; if (!(org.ovirt.engine.core.<START_MOD>common<END_MOD>.<START_MOD>validation<END_MOD>.<START_MOD>VmActionValidator<END_MOD>.<START_MOD>isCommandAllowed<END_MOD>(vm.<START_MOD>getOrigin<END_MOD>()<START_MOD>,<END_MOD> actionType))) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CANNOT_RUN_ACTION_ON_NON_MANAGED_VM); } return validationResult; }	public static org.ovirt.engine.core.bll.ValidationResult canRunActionOnNonManagedVm(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.action.VdcActionType actionType) { org.ovirt.engine.core.bll.ValidationResult validationResult = ValidationResult.VALID; if (!(org.ovirt.engine.core.common.validation.VmActionByVmOriginTypeValidator.isCommandAllowed(vm, actionType))) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CANNOT_RUN_ACTION_ON_NON_MANAGED_VM); } return validationResult; }
private void toggleActive() { if (((vm) != null) && (!(org.ovirt.engine.core.common.validation.VmActionValidator.isCommandAllowed(vm.getOrigin(), VdcActionType.UpdateVmDisk)))) { active = false; } }	private void toggleActive() { if (((vm) != null) && (!(org.ovirt.engine.core.common.validation.VmActionByVmOriginTypeValidator.isCommandAllowed(vm, VdcActionType.UpdateVmDisk)))) { active = false; } }
public boolean isHostedEngine() { return <START_MOD>org<END_MOD>.<START_MOD>ovirt.engine.core.common.validation.VmActionValidator.isHostedEngine<END_MOD>(getOrigin()); }	public boolean isHostedEngine() { return ((OriginType.HOSTED_ENGINE) == (getOrigin())) || ((OriginType.MANAGED_HOSTED_ENGINE) == (getOrigin())); }
public static boolean isCommandAllowed(org.ovirt.engine.core.common.businessentities.OriginType originType, org.ovirt.engine.core.common.action.VdcActionType actionType) { return !(((org.ovirt.engine.core.common.validation.VmActionValidator.isHostedEngine(originType)) && (!(org.ovirt.engine.core.common.validation.VmActionValidator.isCommandAllowedOnHostedEngine(actionType)))) || ((org.ovirt.engine.core.common.validation.VmActionValidator.isExternalVm(originType)) && (!(org.ovirt.engine.core.common.validation.VmActionValidator.isCommandAllowedOnExternalVms(actionType))))); }	public static boolean isCommandAllowed(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.action.VdcActionType actionType) { return !(((vm.isHostedEngine()) && (!(org.ovirt.engine.core.common.validation.VmActionByVmOriginTypeValidator.COMMANDS_ALLOWED_ON_HOSTED_ENGINE.contains(actionType)))) || ((vm.isExternalVm()) && (!(org.ovirt.engine.core.common.validation.VmActionByVmOriginTypeValidator.COMMANDS_ALLOWED_ON_EXTERNAL_VMS.contains(actionType))))); }
private boolean isDiskUpdateAllowed(org.ovirt.engine.core.common.businessentities.VM vm) { return org.ovirt.engine.core.common.validation.VmActionValidator.isCommandAllowed(vm.getOrigin(), VdcActionType.UpdateVmDisk); }	private boolean isDiskUpdateAllowed(org.ovirt.engine.core.common.businessentities.VM vm) { return org.ovirt.engine.core.common.validation.VmActionByVmOriginTypeValidator.isCommandAllowed(vm, VdcActionType.UpdateVmDisk); }
public boolean isExternalVm() { return <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.validation.VmActionValidator.isExternalVm<END_MOD>(getOrigin()); }	public boolean isExternalVm() { return OriginType.EXTERNAL.equals(getOrigin()); }
@java.lang.Override public boolean isValid(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, javax.validation.ConstraintValidatorContext context) { org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol bootProtocol = iface.getBootProtocol(); java.lang.String address = iface.getAddress(); if ((bootProtocol != null) && (bootProtocol == (STATIC_IP))) { if (isNullOrEmpty(address)) { context.disableDefaultConstraintViolation(); context.buildConstraintViolationWithTemplate(<START_MOD>EngineMessage.NETWORK_ADDR_MANDATORY_IN_STATIC_IP.name()<END_MOD>).addNode("address").addConstraintViolation(); return false; } } if ((!(org.ovirt.engine.core.common.validation.NetworkInterfaceValidator.isEmpty(iface.getBondName()))) && (!(validateSlave(iface)))) { context.disableDefaultConstraintViolation(); context.buildConstraintViolationWithTemplate("SLAVE_INTERFACE_IS_MISCONFIGURED").addConstraintViolation(); return false; } if (!(validateLabel(iface))) { context.disableDefaultConstraintViolation(); context.buildConstraintViolationWithTemplate("IMPROPER_INTERFACE_IS_LABELED").addConstraintViolation(); } return true; }	@java.lang.Override public boolean isValid(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, javax.validation.ConstraintValidatorContext context) { org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol bootProtocol = iface.getBootProtocol(); java.lang.String address = iface.getAddress(); if ((bootProtocol != null) && (bootProtocol == (STATIC_IP))) { if (isNullOrEmpty(address)) { context.disableDefaultConstraintViolation(); context.buildConstraintViolationWithTemplate("NETWORK_ADDR_MANDATORY_IN_STATIC_IP").addNode("address").addConstraintViolation(); return false; } } if ((!(org.ovirt.engine.core.common.validation.NetworkInterfaceValidator.isEmpty(iface.getBondName()))) && (!(validateSlave(iface)))) { context.disableDefaultConstraintViolation(); context.buildConstraintViolationWithTemplate("SLAVE_INTERFACE_IS_MISCONFIGURED").addConstraintViolation(); return false; } if (!(validateLabel(iface))) { context.disableDefaultConstraintViolation(); context.buildConstraintViolationWithTemplate("IMPROPER_INTERFACE_IS_LABELED").addConstraintViolation(); } return true; }
@org.junit.Test public void testPersistNetworkAttachmentsWhenNetworkMovedToDifferentNic() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachmentForClusterNetworkA = createNetworkAttachment(clusterNetworkA); org.ovirt.engine.core.compat.Guid notUpToDateNicId = org.ovirt.engine.core.compat.Guid.newGuid(); networkAttachmentForClusterNetworkA.setNicId(notUpToDateNicId); networkAttachmentForClusterNetworkA.setNicName("nonsense"); org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = org.ovirt.engine.core.utils.NetworkUtils.createIpConfigurationFromVdsNetworkInterface(interfaceWithAttachedClusterNetworkA); networkAttachmentForClusterNetworkA.setIpConfiguration(ipConfiguration); networkAttachmentForClusterNetworkA.setProperties(customPropertiesForNics.getCustomPropertiesFor(interfaceWithAttachedClusterNetworkA)); callPersistNetworkAttachmentsAndVerifyThatNetworkAttachmentIsSynced(networkAttachmentForClusterNetworkA); }	@org.junit.Test public void testPersistNetworkAttachmentsWhenNetworkMovedToDifferentNic() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachmentForClusterNetworkA = createNetworkAttachment(clusterNetworkA); org.ovirt.engine.core.compat.Guid notUpToDateNicId = org.ovirt.engine.core.compat.Guid.newGuid(); networkAttachmentForClusterNetworkA.setNicId(notUpToDateNicId); networkAttachmentForClusterNetworkA.setNicName("nonsense"); org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = org.ovirt.engine.core.common.utils.NetworkCommonUtils.createIpConfigurationFromVdsNetworkInterface(interfaceWithAttachedClusterNetworkA); networkAttachmentForClusterNetworkA.setIpConfiguration(ipConfiguration); networkAttachmentForClusterNetworkA.setProperties(customPropertiesForNics.getCustomPropertiesFor(interfaceWithAttachedClusterNetworkA)); callPersistNetworkAttachmentsAndVerifyThatNetworkAttachmentIsSynced(networkAttachmentForClusterNetworkA, createPersister(java.util.Collections.<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>emptyList())); }
private void createNetworkAttachmentForReportedNetworksNotHavingOne(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, java.lang.String networkName) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(getBaseInterfaceNicOrThis(nic), clusterNetworks.get(networkName), org.ovirt.engine.core.utils.NetworkUtils.createIpConfigurationFromVdsNetworkInterface(nic)); networkAttachment.setId(org.ovirt.engine.core.compat.Guid.newGuid()); networkAttachmentDao.save(networkAttachment); }	private void createNetworkAttachmentForReportedNetworksNotHavingOne(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, java.lang.String networkName) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(getBaseInterfaceNicOrThis(nic), clusterNetworks.get(networkName), org.ovirt.engine.core.common.utils.NetworkCommonUtils.createIpConfigurationFromVdsNetworkInterface(nic)); networkAttachment.setId(org.ovirt.engine.core.compat.Guid.newGuid()); networkAttachmentDao.save(networkAttachment); }
private void callPersistNetworkAttachmentsAndVerifyThatNetworkAttachmentIsSynced(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment<START_MOD>) {<END_MOD> org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersister persister<START_MOD> = createPersister(java.util.Collections.<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>emptyList());<END_MOD> when(networkAttachmentDao.getAllForHost(eq(hostId))).thenReturn(java.util.Collections.singletonList(attachment)); persister.persistNetworkAttachments(); verify(networkAttachmentDao).getAllForHost(any(org.ovirt.engine.core.compat.Guid.class)); verify(networkAttachmentDao).update(argThat(new org.mockito.ArgumentMatcher<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>() { @java.lang.Override public boolean matches(java.lang.Object o) { if (!(o instanceof org.ovirt.engine.core.common.businessentities.network.NetworkAttachment)) { return false; } org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = org.ovirt.engine.core.utils.NetworkUtils.createIpConfigurationFromVdsNetworkInterface(interfaceWithAttachedClusterNetworkA); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = ((org.ovirt.engine.core.common.businessentities.network.NetworkAttachment) (o)); return ((((((networkAttachment.getId()) != null) && (networkAttachment.getId().equals(attachment.getId()))) && ((networkAttachment.getNicId()) != null)) && (networkAttachment.getNicId().equals(interfaceWithAttachedClusterNetworkA.getId()))) && (java.util.Objects.equals(networkAttachment.getIpConfiguration(), ipConfiguration))) && (java.util.Objects.equals(networkAttachment.getProperties(), customPropertiesForNics.getCustomPropertiesFor(interfaceWithAttachedClusterNetworkA))); } })); verifyNoMoreInteractions(networkAttachmentDao); }	private void callPersistNetworkAttachmentsAndVerifyThatNetworkAttachmentIsSynced(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment, org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersister persister) { when(networkAttachmentDao.getAllForHost(eq(hostId))).thenReturn(java.util.Collections.singletonList(attachment)); persister.persistNetworkAttachments(); verify(networkAttachmentDao).getAllForHost(any(org.ovirt.engine.core.compat.Guid.class)); verify(networkAttachmentDao).update(argThat(new org.mockito.ArgumentMatcher<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>() { @java.lang.Override public boolean matches(java.lang.Object o) { if (!(o instanceof org.ovirt.engine.core.common.businessentities.network.NetworkAttachment)) { return false; } org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = org.ovirt.engine.core.common.utils.NetworkCommonUtils.createIpConfigurationFromVdsNetworkInterface(interfaceWithAttachedClusterNetworkA); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = ((org.ovirt.engine.core.common.businessentities.network.NetworkAttachment) (o)); return ((((((networkAttachment.getId()) != null) && (networkAttachment.getId().equals(attachment.getId()))) && ((networkAttachment.getNicId()) != null)) && (networkAttachment.getNicId().equals(interfaceWithAttachedClusterNetworkA.getId()))) && (java.util.Objects.equals(networkAttachment.getIpConfiguration(), ipConfiguration))) && (java.util.Objects.equals(networkAttachment.getProperties(), customPropertiesForNics.getCustomPropertiesFor(interfaceWithAttachedClusterNetworkA))); } })); verifyNoMoreInteractions(networkAttachmentDao); }
private java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> prepareNicsForUpdate() { <START_MOD>return dbNics<END_MOD>.<START_MOD>stream<END_MOD>()<START_MOD>.filter<END_MOD>(<START_MOD>(<END_MOD> dbNic) <START_MOD>-><END_MOD> reportedNicsByNames.containsKey(dbNic.getName())).<START_MOD>map(this::mapDbNicToNicForUpdate)<END_MOD>.<START_MOD>collect(java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>stream<END_MOD>.<START_MOD>Collectors<END_MOD>.<START_MOD>toList<END_MOD>()); }	private java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> prepareNicsForUpdate() { return dbNics.stream().filter(( dbNic) -> reportedNicsByNames.containsKey(dbNic.getName())).map(this::mapDbNicToNicForUpdate).filter(( e) -> e != null).collect(java.util.stream.Collectors.toList()); }
private <START_MOD>void<END_MOD> overrideNicWithUserConfiguration(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface <START_MOD>nicWithValuesToBeOverriden)<END_MOD> <START_MOD>{ <END_MOD>java.lang.String <START_MOD>nicName<END_MOD> <START_MOD>=<END_MOD> <START_MOD>nicWithValuesToBeOverriden<END_MOD>.getName()<START_MOD>;<END_MOD> <START_MOD>nicWithValuesToBeOverriden<END_MOD>.<START_MOD>overrideEngineManagedAttributes(userOverriddenNicValuesByNicName<END_MOD>.get(<START_MOD>nicName<END_MOD>)); }	private void overrideNicWithUserConfiguration(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicWithValuesToBeOverridden) { java.lang.String nicName = nicWithValuesToBeOverridden.getName(); nicWithValuesToBeOverridden.overrideEngineManagedAttributes(userOverriddenNicValuesByNicName.get(nicName)); }
public void overrideEngineManagedAttributes(org.ovirt.engine.core.common.vdscommands.UserOverriddenNicValues userOverriddenNicValues) { setLabels(userOverriddenNicValues.getLabels()); }	public void overrideEngineManagedAttributes(org.ovirt.engine.core.common.vdscommands.UserOverriddenNicValues userOverriddenNicValues) { if (userOverriddenNicValues != null) { setLabels(userOverriddenNicValues.getLabels()); } }
private org.ovirt.engine.core.common.action.ImportVmParameters createImportParams(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.StorageDomain sd) { org.ovirt.engine.core.common.action.ImportVmParameters parameters = new org.ovirt.engine.core.common.action.ImportVmParameters(vm, sd.getId(), sd.getId(), sd.getStoragePoolId(), vm.getVdsGroupId()); org.ovirt.engine.core.compat.Guid sdProfileId = diskProfileDao.getAllForStorageDomain(sd.getId()).get(0).getId(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : vm.getImages()) { image.setDiskProfileId(sdProfileId); image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(sd.getId()))); image.setVmSnapshotId(org.ovirt.engine.core.compat.Guid.newGuid()); } parameters.setImagesExistOnTargetStorageDomain(true); vm.setOrigin(OriginType.MANAGED_HOSTED_ENGINE); org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = vdsGroupDAO.get(vm.getVdsGroupId()); vm.setClusterArch(vdsGroup.getArchitecture()); vm.setVmCreationDate(new java.util.Date()); vm.setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE); java.util.ArrayList<java.lang.Integer> linuxOss = osRepository.getLinuxOss(); java.util.Collections.sort(linuxOss); vm.setVmOs(linuxOss.get(0)); <START_MOD>vm.setPriority(1); vm.setTimeZone(java.util.TimeZone.getDefault().getID()); <END_MOD>return parameters; }	private org.ovirt.engine.core.common.action.ImportVmParameters createImportParams(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.StorageDomain sd) { org.ovirt.engine.core.common.action.ImportVmParameters parameters = new org.ovirt.engine.core.common.action.ImportVmParameters(vm, sd.getId(), sd.getId(), sd.getStoragePoolId(), vm.getVdsGroupId()); org.ovirt.engine.core.compat.Guid sdProfileId = diskProfileDao.getAllForStorageDomain(sd.getId()).get(0).getId(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : vm.getImages()) { image.setDiskProfileId(sdProfileId); image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(sd.getId()))); image.setVmSnapshotId(org.ovirt.engine.core.compat.Guid.newGuid()); } parameters.setImagesExistOnTargetStorageDomain(true); vm.setOrigin(OriginType.MANAGED_HOSTED_ENGINE); org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = vdsGroupDAO.get(vm.getVdsGroupId()); vm.setClusterArch(vdsGroup.getArchitecture()); vm.setVmCreationDate(new java.util.Date()); vm.setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE); java.util.ArrayList<java.lang.Integer> linuxOss = osRepository.getLinuxOss(); java.util.Collections.sort(linuxOss); vm.setVmOs(linuxOss.get(0)); vm.setPriority(1); org.ovirt.engine.core.bll.VmHandler.updateDefaultTimeZone(vm.getStaticData()); return parameters; }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getRegisterCommand())) { register(); } else if ("OnRegister".equals(command.getName())) { onRegister(); } else if ("Cancel".equals(command.getName())) { cancel(); } }	@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getRegisterCommand())) { register(); } else if ("Cancel".equals(command.getName())) { cancel(); } }
private void updateActionAvailability() { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk> disks = ((getSelectedItems()) != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk>cast(getSelectedItems()) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk>(); getRegisterCommand().setIsExecutionAllowed(((disks.size()) > 0)); }	private void updateActionAvailability() { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = ((getSelectedItems()) != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.storage.DiskImage>cast(getSelectedItems()) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage>(); getRegisterCommand().setIsExecutionAllowed((((disks.size()) > 0) && ((getEntity().getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)))); }
@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { return; } org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdAndBooleanQueryParameters(getEntity().getId(), true); parameters.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetUnregisteredDisksFromDB, parameters, new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk> unregisteredDisks = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue(); java.util.Collections.sort(unregisteredDisks, new org.ovirt.engine.core.common.businessentities.comparators.UnregisteredDiskByDiskAliasComparator()); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> diskItems = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk unregisteredDisk : unregisteredDisks) { diskItems.add(unregisteredDisk.getDiskImage()); } setItems(diskItems); } })); }	@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { setItems(null); return; } org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdAndBooleanQueryParameters(getEntity().getId(), true); parameters.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetUnregisteredDisksFromDB, parameters, new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk> unregisteredDisks = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue(); java.util.Collections.sort(unregisteredDisks, new org.ovirt.engine.core.common.businessentities.comparators.UnregisteredDiskByDiskAliasComparator()); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> diskItems = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk unregisteredDisk : unregisteredDisks) { diskItems.add(unregisteredDisk.getDiskImage()); } setItems(diskItems); } })); }
private void register() { if ((getWindow()) != null) { return; } java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parametersList = new java.util.ArrayList<>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk disk = ((org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk) (item)); org.ovirt.engine.core.common.action.RegisterDiskParameters parameters = new org.ovirt.engine.core.common.action.RegisterDiskParameters(disk.getDiskImage(), getEntity().getId()); parametersList.add(parameters); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.RegisterDisk, parametersList, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { } }, this); }	private void register() { if ((getWindow()) != null) { return; } for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (item)); org.ovirt.engine.core.common.queries.GetUnregisteredDiskQueryParameters parameters = new org.ovirt.engine.core.common.queries.GetUnregisteredDiskQueryParameters(disk.getId(), getEntity().getId(), getEntity().getStoragePoolId()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetUnregisteredDisk, parameters, new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue(); org.ovirt.engine.core.common.action.RegisterDiskParameters registerDiskParams = new org.ovirt.engine.core.common.action.RegisterDiskParameters(diskImage, getEntity().getId()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.RegisterDisk, registerDiskParams); } })); } }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.storage.Disk, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterDiskImageListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStorageRegisterDiskImagePresenter.constants.registerDisksImageLabel(), 4, modelProvider); }	@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.storage.Disk, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterDiskImageListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStorageRegisterDiskImagePresenter.constants.storageDiskBackupSubTabLabel(), 4, modelProvider); }
@org.ovirt.engine.ui.common.DefaultStringValue("Register Disks") java.lang.String registerDisksImageLabel();	@org.ovirt.engine.ui.common.DefaultStringValue("Memory restore from different cluster version can cause failure.") java.lang.String snapshotPreviewWithMemoryFromDifferentClusterVersion();
private void scanDisks() { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getSelectedItem(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.ScanStorageForUnregisteredDisks, new org.ovirt.engine.core.common.action.StorageDomainParametersBase(storageDomain.getStoragePoolId(), storageDomain.getId())); }	private void scanDisks() { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getSelectedItem(); if (storageDomain != null) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.ScanStorageForUnregisteredDisks, new org.ovirt.engine.core.common.action.StorageDomainParametersBase(storageDomain.getStoragePoolId(), storageDomain.getId())); } }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { allBonds = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); initNetworkModels(); initDcNetworkParams(); initNicModels(); stopProgress(); }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { allBonds = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); initNetworkModels(); initNicModels(); stopProgress(); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.network.HostNetworkQos getHostNetworkQos() { return networkAttachment.getHostNetworkQos(); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.network.HostNetworkQos getHostNetworkQos() { if (networkAttachment.isQosOverridden()) { return networkAttachment.getHostNetworkQos(); } else { return networkQos; } }
<START_MOD>private<END_MOD> java.util.<START_MOD>Map<END_MOD><<START_MOD>org.ovirt.engine.core.compat.Guid, <END_MOD>org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> <START_MOD>mapNetworkAttachmentsByNetworkId<END_MOD>() { return <START_MOD>new org.ovirt.engine.core.common.utils.MapNetworkAttachments(hostSetupNetworksParametersData.newOrModifiedNetworkAttachments).byNetworkId()<END_MOD>; }	private java.util.Map<java.lang.String, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>> createNicNameToNetworkModels() { java.util.Map<java.lang.String, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>> nicToNetworks = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment : hostSetupNetworksParametersData.getNetworkAttachments()) { java.lang.String nicName = networkAttachment.getNicName(); if (!(nicToNetworks.containsKey(nicName))) { nicToNetworks.put(nicName, new java.util.HashSet<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>()); } org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel = networkModelByName.get(networkAttachment.getNetworkName()); assert networkModel != null : "network on an attachment should have a logical model"; setVlanDeviceOnNetworkModelIfNeeded(nicName, networkModel); nicToNetworks.get(nicName).add(networkModel); } createModelsForUnamangedNetworks(nicToNetworks); return nicToNetworks; }
private org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel createUnmanagedNetworkModel(java.lang.String networkName, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { org.ovirt.engine.core.common.businessentities.network.Network unmanagedNetwork = new org.ovirt.engine.core.common.businessentities.network.Network(); unmanagedNetwork.setName(networkName); unmanagedNetwork.setVlanId(nic.getVlanId()); unmanagedNetwork.setMtu(nic.getMtu()); unmanagedNetwork.setVmNetwork(nic.isBridged()); org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel = new org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel(unmanagedNetwork, <START_MOD>null, <END_MOD>this); networkMap.put(networkName, networkModel); return networkModel; }	private org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel createUnmanagedNetworkModel(java.lang.String networkName, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { org.ovirt.engine.core.common.businessentities.network.Network unmanagedNetwork = new org.ovirt.engine.core.common.businessentities.network.Network(); unmanagedNetwork.setName(networkName); unmanagedNetwork.setVlanId(nic.getVlanId()); unmanagedNetwork.setMtu(nic.getMtu()); unmanagedNetwork.setVmNetwork(nic.isBridged()); org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel = new org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel(unmanagedNetwork, null, this); return networkModel; }
<START_MOD>private<END_MOD> <START_MOD>boolean shouldSyncNetwork(final java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>String<END_MOD> <START_MOD>networkName<END_MOD>) { return <START_MOD>networksToSync.contains(networkName)<END_MOD>; }	private boolean shouldSyncNetwork(final java.lang.String networkName) { return hostSetupNetworksParametersData.getNetworksToSync().contains(networkName); }
private void queryFreeBonds() { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.setModel(this); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { allBonds = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); initNetworkModels(); initDcNetworkParams(); initNicModels(); stopProgress(); } }; org.ovirt.engine.core.common.businessentities.VDS vds = getEntity(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVdsFreeBondsByVdsId, new org.ovirt.engine.core.common.queries.IdQueryParameters(vds.getId()), asyncQuery); }	private void queryFreeBonds() { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.setModel(this); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { allBonds = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); initNetworkModels(); initNicModels(); stopProgress(); } }; org.ovirt.engine.core.common.businessentities.VDS vds = getEntity(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVdsFreeBondsByVdsId, new org.ovirt.engine.core.common.queries.IdQueryParameters(vds.getId()), asyncQuery); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValueObj) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValueObj)); java.lang.Object returnValue2 = returnValue.getReturnValue(); <START_MOD>hostSetupNetworksParametersData<END_MOD>.<START_MOD>newOrModifiedNetworkAttachments<END_MOD> = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>) (returnValue2)); queryVfsConfig(); }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValueObj) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValueObj)); java.lang.Object returnValue2 = returnValue.getReturnValue(); hostSetupNetworksParametersData.getNetworkAttachments().addAll(((java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>) (returnValue2))); queryVfsConfig(); }
private org.ovirt.engine.core.common.businessentities.network.NetworkAttachment getExistingAttachmentByNetworkId(org.ovirt.engine.core.compat.Guid networkId) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment existingNetworkAttachment = <START_MOD>mapNetworkAttachmentsByNetworkId<END_MOD>().get(networkId); return existingNetworkAttachment; }	private void setVlanDeviceOnNetworkModelIfNeeded(java.lang.String baseNicName, org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel) { if (networkModel.hasVlan()) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingVlanDevice = networkModel.getVlanDevice(); assert existingVlanDevice == null : "should have only one vlan device, but found " + existingVlanDevice; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanDeviceWithTheSameVlanIdAsTheNetwork = getExistingVlanDeviceByVlanId(networkModel.getVlanId()); if ((vlanDeviceWithTheSameVlanIdAsTheNetwork != null) && (baseNicName.equals(vlanDeviceWithTheSameVlanIdAsTheNetwork.getBaseInterface()))) { networkModel.setVlanDevice(vlanDeviceWithTheSameVlanIdAsTheNetwork); } } }
private void queryNetworkAttachments() { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.setModel(this); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValueObj) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValueObj)); java.lang.Object returnValue2 = returnValue.getReturnValue(); <START_MOD>hostSetupNetworksParametersData.newOrModifiedNetworkAttachments<END_MOD> = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>) (returnValue2)); queryVfsConfig(); } }; org.ovirt.engine.core.common.businessentities.VDS vds = getEntity(); org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters(vds.getId()); params.setRefresh(false); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetNetworkAttachmentsByHostId, params, asyncQuery); }	private void queryNetworkAttachments() { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.setModel(this); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValueObj) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValueObj)); java.lang.Object returnValue2 = returnValue.getReturnValue(); hostSetupNetworksParametersData.getNetworkAttachments().addAll(((java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>) (returnValue2))); queryVfsConfig(); } }; org.ovirt.engine.core.common.businessentities.VDS vds = getEntity(); org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters(vds.getId()); params.setRefresh(false); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetNetworkAttachmentsByHostId, params, asyncQuery); }
private void initNetworkModels() { java.util.Map<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> networkModels = new java.util.HashMap<>(); <START_MOD>java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> networkAttachmentByNetworkId = mapNetworkAttachmentsByNetworkId(); <END_MOD>for (org.ovirt.engine.core.common.businessentities.network.Network network : allNetworks) { org.ovirt.engine.<START_MOD>core.common.businessentities.network.NetworkAttachment attachment = networkAttachmentByNetworkId.get(network.getId()); org.ovirt.engine.<END_MOD>ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel = new org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel(network, <START_MOD>attachment, <END_MOD>this); networkModels.put(network.getName(), networkModel); if (networkModel.isManagement()) { managementNetworkModel = networkModel; } if (!(network.isExternal())) { java.lang.String label = network.getLabel(); if (label != null) { networkLabelMap.get(label).getNetworks().add(networkModel); } } } setNetworks(networkModels); }	private void markNetworkModelsAsAttachedViaLabel(java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> errorLabelNetworks, java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> nicNetworks, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkLabelModel labelModel) { for (java.util.Iterator<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> iter = labelModel.getNetworks().iterator(); iter.hasNext();) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel = iter.next(); if ((nicNetworks != null) && (nicNetworks.contains(networkModel))) { networkModel.attachViaLabel(); } else { iter.remove(); errorLabelNetworks.add(networkModel); } } }
public void addJob(org.ovirt.engine.core.common.businessentities.VmJob vmJob) { vmJobDao.save(vmJob); vmJobs.add(vmJob); org.ovirt.engine.core.vdsbroker.monitoring.VmJobsMonitoring.log.info("Stored placeholder for job id '{}'", vmJob.getId()); }	public void addJob(org.ovirt.engine.core.common.businessentities.VmJob job) { getVmJobDao().save(job); jobsRepository.put(job.getId(), job); org.ovirt.engine.core.vdsbroker.monitoring.VmJobsMonitoring.log.info("Stored placeholder for job id '{}'", job.getId()); }
@javax.annotation.PostConstruct private void init() { vmJobs.addAll(vmJobDao.getAll()); }	@javax.annotation.PostConstruct void init() { jobsRepository.putAll(getVmJobDao().getAll().stream().collect(java.util.stream.Collectors.toMap(VmJob::getId, java.util.function.Function.identity()))); }
@org.junit.Test public void testGetAllIds() { java.util.List<org.ovirt.engine.core.compat.Guid> ids = dao.<START_MOD>getAll<END_MOD>(<START_MOD>).stream().map(VmJob::getId).collect(java.util.stream.Collectors.toList()<END_MOD>); assertTrue(ids.remove(FixturesTool.EXISTING_VM_JOB)); assertTrue(ids.remove(FixturesTool.EXISTING_VM_BLOCK_JOB)); assertTrue(ids.isEmpty()); }	@org.junit.Test public void testGetAll() { java.util.List<org.ovirt.engine.core.compat.Guid> ids = dao.getAll().stream().map(VmJob::getId).collect(java.util.stream.Collectors.toList()); assertTrue(ids.remove(FixturesTool.EXISTING_VM_JOB)); assertTrue(ids.remove(FixturesTool.EXISTING_VM_BLOCK_JOB)); assertTrue(ids.isEmpty()); }
public java.util.<START_MOD>Set<END_MOD><org.ovirt.engine.core.common.businessentities.VmJob> getVmJobs() { return vmJobs; }	public java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> getVmJobs() { return vmJobs; }
private static void updateJob(org.ovirt.engine.core.common.businessentities.VmJob vmJob, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmJob> vmJobsRepository, java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> vmJobsToUpdateInDb) { org.ovirt.engine.core.common.businessentities.VmJob prevJob = vmJobsRepository.put(vmJob.getId(), vmJob); if (vmJob.equals(prevJob)) { org.ovirt.engine.core.vdsbroker.monitoring.VmJobsMonitoring.log.info("VM job '{}': In progress (no change)", vmJob.getId()); } else { vmJobsToUpdateInDb.add(vmJob); org.ovirt.engine.core.vdsbroker.monitoring.VmJobsMonitoring.log.info("VM job '{}': In progress, updating", vmJob.getId()); } }	void removeJobs(java.util.List<org.ovirt.engine.core.compat.Guid> vmJobIdsToRemove) { removeJobsFromDb(vmJobIdsToRemove); vmJobIdsToRemove.forEach(jobsRepository::remove); }
private static void removeJob(org.ovirt.engine.core.common.businessentities.VmJob vmJob, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmJob> vmJobsRepository, java.util.List<org.ovirt.engine.core.compat.Guid> vmJobIdsToRemoveFromDb) { vmJobsRepository.remove(vmJob.getId()); vmJobIdsToRemoveFromDb.add(vmJob.getId()); org.ovirt.engine.core.vdsbroker.monitoring.VmJobsMonitoring.log.info("VM job '{}': Deleting", vmJob.getId()); }	void removeJobsFromDb(java.util.List<org.ovirt.engine.core.compat.Guid> vmJobIdsToRemove) { if (!(vmJobIdsToRemove.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { getVmJobDao().removeAll(vmJobIdsToRemove); return null; }); } }
@javax.annotation.PostConstruct private void init() { vmJobDao.getAll().forEach(<START_MOD>( job) -> { if (!(jobsRepository.containsKey(job.getVmId()))) { jobsRepository.put(job.getVmId(), new org.ovirt.engine.core.vdsbroker.monitoring.HashMap<>()<END_MOD>); }<START_MOD> jobsRepository.get(job.getVmId()).put(job.getId(), job); org.ovirt.engine.core.vdsbroker.monitoring.VmJobsMonitoring.log.info( job id '{}' job.getId()); }); }<END_MOD>	@javax.annotation.PostConstruct void init() { jobsRepository.putAll(getVmJobDao().getAll().stream().collect(java.util.stream.Collectors.toMap(VmJob::getId, java.util.function.Function.identity()))); }
private void saveVmJobsToDb(java.util.Collection<org.ovirt.engine.core.common.businessentities.VmJob> <START_MOD>vmJobsToUpdateInDb<END_MOD>, java.util.List<org.ovirt.engine.core.compat.Guid> <START_MOD>vmJobIdsToRemoveFromDb<END_MOD>) { vmJobDao.updateAllInBatch(<START_MOD>vmJobsToUpdateInDb<END_MOD>); if (!(<START_MOD>vmJobIdsToRemoveFromDb<END_MOD>.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { vmJobDao.removeAll(<START_MOD>vmJobIdsToRemoveFromDb<END_MOD>); return null; }); } }	public void addJob(org.ovirt.engine.core.common.businessentities.VmJob job) { getVmJobDao().save(job); jobsRepository.put(job.getId(), job); org.ovirt.engine.core.vdsbroker.monitoring.VmJobsMonitoring.log.info("Stored placeholder for job id '{}'", job.getId()); }
private void onVmDelete(@javax.enterprise.event.Observes @org.ovirt.engine.core.common.qualifiers.VmDeleted org.ovirt.engine.core.compat.Guid vmId) { jobsRepository.remove(vmId); }	void onVmDelete(@javax.enterprise.event.Observes @org.ovirt.engine.core.common.qualifiers.VmDeleted org.ovirt.engine.core.compat.Guid vmId) { jobsRepository.values().stream().filter(( job) -> job.getVmId().equals(vmId)).map(VmJob::getId).forEach(jobsRepository::remove); }
private void updateVmJobs(org.ovirt.engine.core.compat.Guid vmId<START_MOD>, java.util.Set<org.ovirt.engine.core.common.businessentities.VmJob> reportedJobs<END_MOD>, java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> <START_MOD>vmJobsToUpdateInDb, java.util.List<org.ovirt.engine.core.compat.Guid> vmJobIdsToRemoveFromDb) { if (reportedJobs == null) { org.ovirt.engine.core.vdsbroker.monitoring.VmJobsMonitoring.log.debug( vmJob data returned from VDSM, preserving existing jobs return; }<END_MOD> java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmJob> <START_MOD>vmJobsRepository = jobsRepository.get(vmId);<END_MOD> if (<START_MOD>vmJobsRepository<END_MOD> == null) { org.ovirt.engine.core.vdsbroker.monitoring.VmJobsMonitoring.log.debug( <START_MOD>'{}' is missing in the repository, ignoring the reported<END_MOD> jobs <START_MOD>vmId); <END_MOD>return; } <START_MOD>reportedJobs.stream().filter(( job) -> vmJobsRepository.containsKey(job.getId())).forEach(( job) -> updateJob(job, vmJobsRepository, vmJobsToUpdateInDb)); vmJobsRepository.values().stream().filter(( job) -> !(reportedJobs.contains(job))).forEach(( job) -> removeJob(job, vmJobsRepository, vmJobIdsToRemoveFromDb)); synchronized(vmJobsRepository) { if (vmJobsRepository.isEmpty()) {<END_MOD> jobsRepository.<START_MOD>remove<END_MOD>(vmId); <START_MOD>} } }<END_MOD>	private void processVmJobs(org.ovirt.engine.core.compat.Guid vmId, java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> jobs, java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> jobsToUpdate, java.util.List<org.ovirt.engine.core.compat.Guid> jobIdsToRemove) { if (jobs == null) { org.ovirt.engine.core.vdsbroker.monitoring.VmJobsMonitoring.log.debug("No vmJob data returned from VDSM, preserving existing jobs"); return; } java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmJob> jobIdToReportedJob = jobs.stream().collect(java.util.stream.Collectors.toMap(VmJob::getId, java.util.function.Function.identity())); getExistingJobsForVm(vmId).forEach(( job) -> { org.ovirt.engine.core.common.businessentities.VmJob reportedJob = jobIdToReportedJob.get(job.getId()); if (reportedJob != null) { if (reportedJob.equals(job)) { org.ovirt.engine.core.vdsbroker.monitoring.VmJobsMonitoring.log.info("VM job '{}': In progress (no change)", job.getId()); } else { jobsToUpdate.add(reportedJob); org.ovirt.engine.core.vdsbroker.monitoring.VmJobsMonitoring.log.info("VM job '{}': In progress, updating", job.getId()); } } else { jobIdsToRemove.add(job.getId()); org.ovirt.engine.core.vdsbroker.monitoring.VmJobsMonitoring.log.info("VM job '{}': Deleting", job.getId()); } }); }
protected void process(java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.<START_MOD>Set<END_MOD><org.ovirt.engine.core.common.businessentities.VmJob>> vmIdToVmJobs) { java.util.<START_MOD>List<END_MOD><org.ovirt.engine.core.common.businessentities.VmJob> <START_MOD>vmJobsToUpdateInDb<END_MOD> = new java.util.<START_MOD>LinkedList<END_MOD><>(); java.util.List<org.ovirt.engine.core.compat.Guid> <START_MOD>vmJobIdsToRemoveFromDb<END_MOD> = new java.util.<START_MOD>LinkedList<END_MOD><>(); vmIdToVmJobs.entrySet().forEach(( entry) -> updateVmJobs(entry.getKey(), entry.getValue(), <START_MOD>vmJobsToUpdateInDb<END_MOD>, <START_MOD>vmJobIdsToRemoveFromDb<END_MOD>)); saveVmJobsToDb(<START_MOD>vmJobsToUpdateInDb<END_MOD>, <START_MOD>vmJobIdsToRemoveFromDb<END_MOD>); }	void process(java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VmJob>> vmIdToJobs) { if (vmIdToJobs.isEmpty()) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> jobsToUpdate = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.compat.Guid> jobIdsToRemove = new java.util.ArrayList<>(); vmIdToJobs.entrySet().forEach(( entry) -> processVmJobs(entry.getKey(), entry.getValue(), jobsToUpdate, jobIdsToRemove)); updateJobs(jobsToUpdate); removeJobs(jobIdsToRemove); }
private<START_MOD> synchronized<END_MOD> void addJobToRepository(org.ovirt.engine.core.common.businessentities.VmJob vmJob) { java.util.<START_MOD>Map<END_MOD><<START_MOD>org.ovirt.engine.core.compat.Guid, <END_MOD>org.ovirt.engine.core.common.businessentities.VmJob> vmJobs = jobsRepository.<START_MOD>get(vmJob.getVmId()); if (vmJobs == null) { vmJobs = new java.util.HashMap(); vmJobs.put(vmJob.getId(), vmJob); jobsRepository.put<END_MOD>(vmJob.getVmId(), <START_MOD>vmJobs<END_MOD>); <START_MOD>} else { <END_MOD>vmJobs.<START_MOD>put<END_MOD>(<START_MOD>vmJob.getId(), <END_MOD>vmJob); <START_MOD>synchronized(vmJobs) { jobsRepository.put(vmJob.getVmId(), vmJobs); <END_MOD>}<START_MOD> } }<END_MOD>	void updateJobs(java.util.Collection<org.ovirt.engine.core.common.businessentities.VmJob> vmJobsToUpdate) { getVmJobDao().updateAllInBatch(vmJobsToUpdate); vmJobsToUpdate.forEach(( job) -> jobsRepository.put(job.getId(), job)); }
private void updateVmJobs() { vmJobs = <START_MOD>new java.util.HashSet(<END_MOD>vdsmVm.getVmStatistics().getVmJobs()<START_MOD>)<END_MOD>; }	private void updateVmJobs() { vmJobs = vdsmVm.getVmStatistics().getVmJobs(); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> getAll() { throw new <START_MOD>java<END_MOD>.lang.<START_MOD>UnsupportedOperationException<END_MOD>(); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> getAll() { return getCallsHandler().executeReadList("GetAllVmJobs", org.ovirt.engine.core.dao.VmJobDaoImpl.VmJobRowMapper.instance, getCustomMapSqlParameterSource()); }
@org.junit.Test public void shouldFallbackToLastHost() { final org.ovirt.engine.core.common.businessentities.VM stoppedVM = new org.ovirt.engine.core.common.businessentities.VM(); stoppedVM.setLastVdsRunOn(currentHost.getId()); assertThat(filter(stoppedVM, tooOldHost, newEnoughHost)).containsExactly(org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight(tooOldHost, org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BAD_WEIGHT), org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight(newEnoughHost, org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BEST_WEIGHT)); }	@org.junit.Test public void shouldKeepSameMajorWithOlderMinor() { newEnoughHost.setHostOs("RHEL - 6.0 - 1.el6"); assertThat(filter(runningVm, newEnoughHost, currentHost)).containsExactly(org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight(newEnoughHost, org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BETTER_WEIGHT), org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight(currentHost, org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BETTER_WEIGHT)); }
@org.junit.Test public void shouldFallbackToLastHost() { final org.ovirt.engine.core.common.businessentities.VM stoppedVM = new org.ovirt.engine.core.common.businessentities.VM(); stoppedVM.setLastVdsRunOn(currentHost.getId()); assertThat(filter(stoppedVM, tooOldHost, newEnoughHost)).containsOnly(newEnoughHost); }	@org.junit.Test public void shouldKeepSameMajorWithOlderMinor() { newEnoughHost.setHostOs("RHEL - 6.0 - 1.el6"); assertThat(filter(runningVm, newEnoughHost, currentHost)).containsExactly(newEnoughHost, currentHost); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("The set cluster compatibility version does not allow mixed major host OS versions. Can not start the cluster upgrade.") java.lang.String MIXED_HOST_VERSIONS_NOT_ALLOWED();	@org.ovirt.engine.ui.frontend.DefaultStringValue("$entities Disks") java.lang.String VAR__ENTITIES__DISKS();
public boolean isClusterUpgradePolicy() { return (<START_MOD>id<END_MOD>) <START_MOD>==<END_MOD> (org.ovirt.engine.core.common.scheduling.ClusterPolicy.<START_MOD>UPGRADE_POLICY_GUID<END_MOD>); }	public boolean isClusterUpgradePolicy() { return org.ovirt.engine.core.common.scheduling.ClusterPolicy.UPGRADE_POLICY_GUID.equals(id); }
@org.junit.Test public void shouldDetectCpuPinning() { invalidVM.setCpuPinning("i am pinned"); assertThat(validator.isVmReadyForUpgrade(invalidVM)).contains(UPGRADE_ERROR.VM_CPUS_PINNED); }	@org.junit.Test public void shouldDetectCpuPinning() { invalidVM.setCpuPinning("i am pinned"); assertThat(validator.isVmReadyForUpgrade(invalidVM)).contains(UpgradeError.VM_CPUS_PINNED); }
@org.junit.Test public void shouldDetectPassThroughDeviceOnVM() { when(hostDeviceManager.checkVmNeedsDirectPassthrough(any(org.ovirt.engine.core.common.businessentities.VM.class))).thenReturn(true); assertThat(validator.isVmReadyForUpgrade(invalidVM)).contains(UPGRADE_ERROR.VM_NEEDS_PASSTHROUGH); }	@org.junit.Test public void shouldDetectPassThroughDeviceOnVM() { when(hostDeviceManager.checkVmNeedsDirectPassthrough(any(org.ovirt.engine.core.common.businessentities.VM.class))).thenReturn(true); assertThat(validator.isVmReadyForUpgrade(invalidVM)).contains(UpgradeError.VM_NEEDS_PASSTHROUGH); }
@org.junit.Test public void shouldDetectNumaPinning() { invalidVM.setvNumaNodeList(java.util.Arrays.asList(createVmNumaNode(1, java.util.Arrays.asList(createVdsNumaNode(1))))); assertThat(validator.isVmReadyForUpgrade(invalidVM)).contains(UPGRADE_ERROR.VM_NUMA_PINNED); }	@org.junit.Test public void shouldDetectNumaPinning() { invalidVM.setvNumaNodeList(java.util.Arrays.asList(createVmNumaNode(1, java.util.Arrays.asList(createVdsNumaNode(1))))); assertThat(validator.isVmReadyForUpgrade(invalidVM)).contains(UpgradeError.VM_NUMA_PINNED); }
@org.junit.Test public void shouldCreateNiceJsonValidationResult() throws java.io.IOException { invalidVM.setCpuPinning("i am pinned"); invalidVM.setDedicatedVmForVdsList(org.ovirt.engine.core.compat.Guid.newGuid()); invalidVM.setMigrationSupport(org.ovirt.engine.core.bll.validator.PINNED_TO_HOST); invalidVM.setId(Guid.Empty); newHost1.setHostOs("invalid os"); org.ovirt.engine.core.bll.ValidationResult validationResult = validator.isUpgradePossible(java.util.Arrays.asList(newHost1), java.util.Arrays.asList(invalidVM)); assertThat(validationResult.getVariableReplacements().get(0)).contains("VM_CPUS_PINNED", "VM_PINNED_TO_HOSTS", "HOST_INVALID_OS"); }	@org.junit.Test public void shouldCreateNiceJsonValidationResult() throws java.io.IOException { invalidVM.setCpuPinning("i am pinned"); invalidVM.setDedicatedVmForVdsList(org.ovirt.engine.core.compat.Guid.newGuid()); invalidVM.setMigrationSupport(org.ovirt.engine.core.bll.validator.PINNED_TO_HOST); invalidVM.setId(Guid.Empty); newHost1.setHostOs("invalid os"); org.ovirt.engine.core.bll.ValidationResult validationResult = validator.isUpgradePossible(java.util.Arrays.asList(newHost1), java.util.Arrays.asList(invalidVM)); assertThat(validationResult.getVariableReplacements().get(0)).contains("VM_CPUS_PINNED", "VM_NOT_MIGRATABLE", "HOST_INVALID_OS"); }
@org.junit.Test public void shouldDetectSuspendedVM() { invalidVM.setStatus(VMStatus.Suspended); assertThat(validator.isVmReadyForUpgrade(invalidVM)).contains(UPGRADE_ERROR.VM_SUSPENDED); }	@org.junit.Test public void shouldDetectSuspendedVM() { invalidVM.setStatus(VMStatus.Suspended); assertThat(validator.isVmReadyForUpgrade(invalidVM)).contains(UpgradeError.VM_SUSPENDED); }
@org.junit.Test public void shouldNotMigrateVmOnClusterTwoWhileInUpgradeMode() { vdsGroup2.setClusterPolicyId(ClusterPolicy.UPGRADE_POLICY_GUID); arem.refresh(); verify(arem).migrateVM(vm1); verify(arem, times(1)).migrateVM(any(org.ovirt.engine.core.common.businessentities.VM.class)); verify(arem, times(0)).migrateVM(eq(vm2)); }	@org.junit.Test public void shouldNotMigrateVmOnClusterTwoWhileInUpgradeMode() { cluster2.setClusterPolicyId(ClusterPolicy.UPGRADE_POLICY_GUID); arem.refresh(); verify(arem).migrateVM(vm1); verify(arem, times(1)).migrateVM(any(org.ovirt.engine.core.common.businessentities.VM.class)); verify(arem, times(0)).migrateVM(eq(vm2)); }
@org.junit.Test public void shouldDetectPinnedVM() { invalidVM.setDedicatedVmForVdsList(org.ovirt.engine.core.compat.Guid.newGuid()); invalidVM.setMigrationSupport(org.ovirt.engine.core.bll.validator.PINNED_TO_HOST); assertThat(validator.<START_MOD>checkVmReadyForUpgrade<END_MOD>(invalidVM)).contains(UPGRADE_ERROR.VM_PINNED_TO_HOSTS); }	@org.junit.Test public void shouldDetectNonMigratableVMs() { invalidVM.setMigrationSupport(org.ovirt.engine.core.bll.validator.PINNED_TO_HOST); assertThat(validator.checkVmReadyForUpgrade(invalidVM)).contains(UpgradeError.VM_NOT_MIGRATABLE); }
@org.junit.Test public void shouldDetectSuspendedVM() { invalidVM.setStatus(VMStatus.Suspended); assertThat(validator.<START_MOD>checkVmReadyForUpgrade<END_MOD>(invalidVM)).contains(UPGRADE_ERROR.VM_SUSPENDED); }	@org.junit.Test public void shouldDetectSuspendedVM() { invalidVM.setStatus(VMStatus.Suspended); assertThat(validator.checkVmReadyForUpgrade(invalidVM)).contains(UpgradeError.VM_SUSPENDED); }
protected java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR> checkVmReadyForUpgrade(final org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Objects.requireNonNull(vm); final java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR> errors = new java.util.ArrayList<>(); if (vm.getStatus().isSuspended()) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_SUSPENDED); } if (!(org.apache.commons.lang.StringUtils.isEmpty(vm.getCpuPinning()))) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_CPUS_PINNED); } for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : vm.getvNumaNodeList()) { if (!(org.ovirt.engine.core.utils.NumaUtils.getPinnedNodeIndexList(vmNumaNode.getVdsNumaNodeList()).isEmpty())) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_NUMA_PINNED); break; } } if ((!(vm.getDedicatedVmForVdsList().isEmpty())) && ((org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST) == (vm.getMigrationSupport()))) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_PINNED_TO_HOSTS); } if (hostDeviceManager.checkVmNeedsDirectPassthrough(vm)) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_NEEDS_PASSTHROUGH); } return errors; }	protected java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UpgradeError> checkVmReadyForUpgrade(final org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Objects.requireNonNull(vm); final java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UpgradeError> errors = new java.util.ArrayList<>(); if (vm.getStatus().isSuspended()) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UpgradeError.VM_SUSPENDED); } if (!(org.apache.commons.lang.StringUtils.isEmpty(vm.getCpuPinning()))) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UpgradeError.VM_CPUS_PINNED); } for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : vm.getvNumaNodeList()) { if (!(org.ovirt.engine.core.utils.NumaUtils.getPinnedNodeIndexList(vmNumaNode.getVdsNumaNodeList()).isEmpty())) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UpgradeError.VM_NUMA_PINNED); break; } } if ((org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE) != (vm.getMigrationSupport())) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UpgradeError.VM_NOT_MIGRATABLE); } if (hostDeviceManager.checkVmNeedsDirectPassthrough(vm)) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UpgradeError.VM_NEEDS_PASSTHROUGH); } return errors; }
@org.junit.Test public void shouldDetectCpuPinning() { invalidVM.setCpuPinning( am pinned assertThat(validator.<START_MOD>checkVmReadyForUpgrade<END_MOD>(invalidVM)).contains(UPGRADE_ERROR.VM_CPUS_PINNED); }	@org.junit.Test public void shouldDetectCpuPinning() { invalidVM.setCpuPinning("i am pinned"); assertThat(validator.checkVmReadyForUpgrade(invalidVM)).contains(UpgradeError.VM_CPUS_PINNED); }
public java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR> getVm() { return vm; }	public java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UpgradeError> getVm() { return vm; }
public static java.lang.String toJson(final java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR> vm) { final org.codehaus.jackson.map.ObjectMapper mapper = new org.codehaus.jackson.map.ObjectMapper(); mapper.setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL); try { return mapper.writerWithDefaultPrettyPrinter().writeValueAsString(new org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.VmValidation(vm)); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } }	public static java.lang.String toJson(final java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UpgradeError> vm) { final org.codehaus.jackson.map.ObjectMapper mapper = new org.codehaus.jackson.map.ObjectMapper(); mapper.setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL); try { return mapper.writerWithDefaultPrettyPrinter().writeValueAsString(new org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.VmValidation(vm)); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } }
@org.junit.Test public void shouldDetectNumaPinning() { invalidVM.setvNumaNodeList(java.util.Arrays.asList(createVmNumaNode(1, java.util.Arrays.asList(createVdsNumaNode(1))))); assertThat(validator.<START_MOD>checkVmReadyForUpgrade<END_MOD>(invalidVM)).contains(UPGRADE_ERROR.VM_NUMA_PINNED); }	@org.junit.Test public void shouldDetectNumaPinning() { invalidVM.setvNumaNodeList(java.util.Arrays.asList(createVmNumaNode(1, java.util.Arrays.asList(createVdsNumaNode(1))))); assertThat(validator.checkVmReadyForUpgrade(invalidVM)).contains(UpgradeError.VM_NUMA_PINNED); }
@org.junit.Test public void shouldDetectPassThroughDeviceOnVM() { when(hostDeviceManager.checkVmNeedsDirectPassthrough(any(org.ovirt.engine.core.common.businessentities.VM.class))).thenReturn(true); assertThat(validator.<START_MOD>checkVmReadyForUpgrade<END_MOD>(invalidVM)).contains(UPGRADE_ERROR.VM_NEEDS_PASSTHROUGH); }	@org.junit.Test public void shouldDetectPassThroughDeviceOnVM() { when(hostDeviceManager.checkVmNeedsDirectPassthrough(any(org.ovirt.engine.core.common.businessentities.VM.class))).thenReturn(true); assertThat(validator.checkVmReadyForUpgrade(invalidVM)).contains(UpgradeError.VM_NEEDS_PASSTHROUGH); }
public org.ovirt.engine.core.bll.<START_MOD>ValidationResult<END_MOD> isVmReadyForUpgrade(final org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Objects.requireNonNull(vm); java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR> <START_MOD>validationResult<END_MOD> = <START_MOD>checkVmReadyForUpgrade<END_MOD>(<START_MOD>vm<END_MOD>); if (<START_MOD>validationResult<END_MOD>.<START_MOD>isEmpty<END_MOD>()) { <START_MOD>return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.<END_MOD>errors.<START_MOD>EngineMessage.BOUND_TO_HOST_WHILE_UPGRADING_CLUSTER, java.lang.String.format<END_MOD>(<START_MOD> %1$s <END_MOD>org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.<START_MOD>VmValidation<END_MOD>.<START_MOD>toJson(validationResult))<END_MOD>); } }	public org.ovirt.engine.core.bll.ValidationResult isVmReadyForUpgrade(final org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Objects.requireNonNull(vm); java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UpgradeError> validationResult = checkVmReadyForUpgrade(vm); if (validationResult.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.BOUND_TO_HOST_WHILE_UPGRADING_CLUSTER, java.lang.String.format("$json %1$s", org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.VmValidation.toJson(validationResult))); } }
@org.junit.Test public void shouldDetectDifferentOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")).<START_MOD>isEqualOs<END_MOD>(new org.ovirt.engine.core.bll.scheduling.OS("os2", new org.ovirt.engine.core.compat.Version("6.3")))).isFalse(); }	@org.junit.Test public void shouldDetectDifferentOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")).isSameOsFamily(new org.ovirt.engine.core.bll.scheduling.OS("os2", new org.ovirt.engine.core.compat.Version("6.3")))).isFalse(); }
@org.junit.Test public void shouldDetectSameOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")).<START_MOD>isEqualOs<END_MOD>(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")))).isTrue(); }	@org.junit.Test public void shouldDetectSameOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")).isSameOsFamily(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")))).isTrue(); }
@org.junit.Test public void shouldDetectEqualOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("RHEL", new org.ovirt.engine.core.compat.Version("6.3")).isEqualOs(new org.ovirt.engine.core.bll.scheduling.OS("oVirt Node", new org.ovirt.engine.core.compat.Version("6.3")))).isTrue(); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("RHEL", new org.ovirt.engine.core.compat.Version("6.3")).isEqualOs(new org.ovirt.engine.core.bll.scheduling.OS("RHEV Hypervisor", new org.ovirt.engine.core.compat.Version("6.3")))).isTrue(); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("oVirt Node", new org.ovirt.engine.core.compat.Version("6.3")).isEqualOs(new org.ovirt.engine.core.bll.scheduling.OS("RHEV Hypervisor", new org.ovirt.engine.core.compat.Version("6.3")))).isTrue(); }	@org.junit.Test public void shouldDetectEqualOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("RHEL", new org.ovirt.engine.core.compat.Version("6.3")).isSameOsFamily(new org.ovirt.engine.core.bll.scheduling.OS("oVirt Node", new org.ovirt.engine.core.compat.Version("6.3")))).isTrue(); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("RHEL", new org.ovirt.engine.core.compat.Version("6.3")).isSameOsFamily(new org.ovirt.engine.core.bll.scheduling.OS("RHEV Hypervisor", new org.ovirt.engine.core.compat.Version("6.3")))).isTrue(); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("oVirt Node", new org.ovirt.engine.core.compat.Version("6.3")).isSameOsFamily(new org.ovirt.engine.core.bll.scheduling.OS("RHEV Hypervisor", new org.ovirt.engine.core.compat.Version("6.3")))).isTrue(); }
@org.junit.Test public void <START_MOD>shouldCreateNiceValidationResult<END_MOD>() throws java.io.IOException { invalidVM.setCpuPinning( am pinned invalidVM.setDedicatedVmForVdsList(org.ovirt.engine.core.compat.Guid.newGuid()); invalidVM.setMigrationSupport(org.ovirt.engine.core.bll.validator.PINNED_TO_HOST); invalidVM.setId(Guid.Empty); newHost1.setHostOs( os org.ovirt.engine.core.bll.ValidationResult validationResult = validator.isUpgradePossible(java.util.Arrays.asList(newHost1), java.util.Arrays.asList(invalidVM)); assertThat(validationResult.getVariableReplacements().get(0)).contains("VM_CPUS_PINNED", <START_MOD>"VM_PINNED_TO_HOSTS"<END_MOD>, "HOST_INVALID_OS"); }	@org.junit.Test public void shouldCreateNiceValidationResult() throws java.io.IOException { invalidVM.setCpuPinning("i am pinned"); invalidVM.setDedicatedVmForVdsList(org.ovirt.engine.core.compat.Guid.newGuid()); invalidVM.setMigrationSupport(org.ovirt.engine.core.bll.validator.PINNED_TO_HOST); invalidVM.setId(Guid.Empty); newHost1.setHostOs("invalid os"); org.ovirt.engine.core.bll.ValidationResult validationResult = validator.isUpgradePossible(java.util.Arrays.asList(newHost1), java.util.Arrays.asList(invalidVM)); assertThat(validationResult.getVariableReplacements()).contains("CLUSTER_UPGRADE_DETAIL_HOST_INVALID_OS", "CLUSTER_UPGRADE_DETAIL_VM_CPUS_PINNED", "CLUSTER_UPGRADE_DETAIL_VM_NOT_MIGRATABLE"); }
private void removeUserRemovedNetworkAttachments(<START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> existingNetworkAttachments<END_MOD>) { for (org.ovirt.engine.core.compat.Guid attachmentId : userRemovedNetworkAttachments) { networkAttachmentDao.remove(attachmentId); <START_MOD>for (java.util.Iterator<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> iterator = existingNetworkAttachments.iterator(); iterator.hasNext();) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = iterator.next(); if (attachmentId.equals(networkAttachment.getId())) { iterator.remove(); break; <END_MOD>} }<START_MOD> } }<END_MOD>	private void removeUserRemovedNetworkAttachments(java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> existingNetworkAttachments) { for (org.ovirt.engine.core.compat.Guid attachmentId : userRemovedNetworkAttachments) { networkAttachmentDao.remove(attachmentId); } for (java.util.Iterator<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> iterator = existingNetworkAttachments.iterator(); iterator.hasNext();) { org.ovirt.engine.core.compat.Guid networkAttachmentId = iterator.next().getId(); if (userRemovedNetworkAttachments.contains(networkAttachmentId)) { iterator.remove(); } } }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot deactivate the management interface of the Hosted Engine VM.") java.lang.String ACTIVATE_DEACTIVATE_MANAGEMENT_NETWORK_FOR_HOSTED_ENGINE();	@org.ovirt.engine.ui.frontend.DefaultStringValue("$detailMessage its OS version is too old, found ${found}") java.lang.String VAR__DETAIL__OLD_OS();
private void waitBetweenPolls() { while (((lastTimeBeforePoll) != null) && (((java.lang.System.currentTimeMillis()) - (lastTimeBeforePoll)) < (org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.POLLING_BREAK))) { try { java.lang.Thread.sleep(org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.POLLING_BREAK); } catch (java.lang.InterruptedException e) { } } lastTimeBeforePoll = java.lang.System.currentTimeMillis(); }	private void waitBetweenPolls() { while (((timestampOfEndOfPreviousInvocation) != null) && (((currentTimestamp()) - (timestampOfEndOfPreviousInvocation)) < (org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.POLLING_BREAK_IN_NANOS))) { try { java.lang.Thread.sleep(org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.POLLING_BREAK); } catch (java.lang.InterruptedException e) { } } }
public boolean poll(org.ovirt.engine.core.compat.Guid hostId) { <START_MOD>waitBetweenPolls(); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace( do do poll for {}. hostId<END_MOD>); org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> task = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().runFutureVdsCommand(FutureVDSCommandType.Poll, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(hostId)); <START_MOD>org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace( executed. boolean succeeded = getValue(task); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace( result=<END_MOD>{<START_MOD>} succeeded);<END_MOD> return <START_MOD>succeeded<END_MOD>; }	public boolean poll(org.ovirt.engine.core.compat.Guid hostId) { waitBetweenPolls(); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace("Request to do poll for host {}.", hostId); org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> task = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().runFutureVdsCommand(FutureVDSCommandType.Poll, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(hostId)); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace("FutureVDSCommandType.Poll executed for host{}.", hostId); boolean succeeded = getValue(task); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace("Result of FutureVDSCommandType.Poll for host {}: {}", hostId, succeeded); timestampOfEndOfPreviousInvocation = currentTimestamp(); return succeeded; }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getDiskImage().getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getParameters().getDiskImage().getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> getQuotaStorageConsumptionParameters() { java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> list = new java.util.ArrayList<>(); list.add(new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter(org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getDiskImage().getQuotaId(), null, QuotaConsumptionParameter.QuotaAction.CONSUME, org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getDiskImage().getActualSize())); return list; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> getQuotaStorageConsumptionParameters() { java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> list = new java.util.ArrayList<>(); list.add(new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter(org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getParameters().getDiskImage().getQuotaId(), null, QuotaConsumptionParameter.QuotaAction.CONSUME, org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getDiskImage().getActualSize())); return list; }
@org.junit.Test public void shouldKeepSameMajorWithNewerMinor() { newEnoughHost.setHostOs("RHEL - 6.3 - 1.el6"); assertThat(filter(runningVm, newEnoughHost, currentHost)).containsExactly(org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight(newEnoughHost, org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BETTER_WEIGHT), org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight(currentHost, org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BETTER_WEIGHT)); }	@org.junit.Test public void shouldKeepSameMajorWithNewerMinor() { newEnoughHost.setHostOs("RHEL - 6.3 - 1.el6"); assertThat(filter(runningVm, newEnoughHost, currentHost), hasItems(org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight(newEnoughHost, org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BETTER_WEIGHT), org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight(currentHost, org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BETTER_WEIGHT))); assertThat(filter(runningVm, newEnoughHost, currentHost), hasSize(2)); }
@org.junit.Test public void shouldKeepSameMajorWithOlderMinor() { newEnoughHost.setHostOs("RHEL - 6.0 - 1.el6"); assertThat(filter(runningVm, newEnoughHost, currentHost)).containsExactly(org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight(newEnoughHost, org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BETTER_WEIGHT), org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight(currentHost, org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BETTER_WEIGHT)); }	@org.junit.Test public void shouldKeepSameMajorWithOlderMinor() { newEnoughHost.setHostOs("RHEL - 6.0 - 1.el6"); assertThat(filter(runningVm, newEnoughHost, currentHost), hasItems(org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight(newEnoughHost, org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BETTER_WEIGHT), org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight(currentHost, org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BETTER_WEIGHT))); assertThat(filter(runningVm, newEnoughHost, currentHost), hasSize(2)); }
@org.junit.Test public void shouldKeepSameMajorWithNewerMinor() { newEnoughHost.setHostOs("RHEL - 6.3 - 1.el6"); assertThat(filter(runningVm, newEnoughHost, currentHost)).containsExactly(newEnoughHost, currentHost); }	@org.junit.Test public void shouldKeepSameMajorWithNewerMinor() { newEnoughHost.setHostOs("RHEL - 6.3 - 1.el6"); assertThat(filter(runningVm, newEnoughHost, currentHost), hasItems(newEnoughHost, currentHost)); assertThat(filter(runningVm, newEnoughHost, currentHost), hasSize(2)); }
@org.junit.Test public void shouldKeepSameMajorWithOlderMinor() { newEnoughHost.setHostOs("RHEL - 6.0 - 1.el6"); assertThat(filter(runningVm, newEnoughHost, currentHost)).containsExactly(newEnoughHost, currentHost); }	@org.junit.Test public void shouldKeepSameMajorWithOlderMinor() { newEnoughHost.setHostOs("RHEL - 6.0 - 1.el6"); assertThat(filter(runningVm, newEnoughHost, currentHost), hasItems(newEnoughHost, currentHost)); assertThat(filter(runningVm, newEnoughHost, currentHost), hasSize(2)); }
@org.junit.Test public void shouldHandleNumMajorVersion() { final org.ovirt.engine.core.bll.scheduling.OS validOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - 7 - release"); assertThat(validOs.isValid()).isTrue(); assertThat(validOs.getVersion().getMajor()).isEqualTo(7); assertThat(validOs.getVersion().getMinor()).isEqualTo((-1)); }	@org.junit.Test public void shouldHandleNumMajorVersion() { final org.ovirt.engine.core.bll.scheduling.OS validOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - 7 - release"); assertThat(validOs.isValid(), is(true)); assertThat(validOs.getVersion().getMajor(), equalTo(7)); assertThat(validOs.getVersion().getMinor(), equalTo((-1))); }
@org.junit.Test public void shouldHandleAlNumMajorVersion() { final org.ovirt.engine.core.bll.scheduling.OS validOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - 7Server - release"); assertThat(validOs.isValid()).isTrue(); assertThat(validOs.getVersion().getMajor()).isEqualTo(7); }	@org.junit.Test public void shouldHandleAlNumMajorVersion() { final org.ovirt.engine.core.bll.scheduling.OS validOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - 7Server - release"); assertThat(validOs.isValid(), is(true)); assertThat(validOs.getVersion().getMajor(), equalTo(7)); }
@org.junit.Test public void shouldHandleStrangeMajorVersion() { final org.ovirt.engine.core.bll.scheduling.OS validOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - 7. - release"); assertThat(validOs.isValid()).isTrue(); assertThat(validOs.getVersion().getMajor()).isEqualTo(7); assertThat(validOs.getVersion().getMinor()).isEqualTo((-1)); }	@org.junit.Test public void shouldHandleStrangeMajorVersion() { final org.ovirt.engine.core.bll.scheduling.OS validOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - 7. - release"); assertThat(validOs.isValid(), is(true)); assertThat(validOs.getVersion().getMajor(), equalTo(7)); assertThat(validOs.getVersion().getMinor(), equalTo((-1))); }
@org.junit.Test public void shouldFalbackToEl6ReleaseIdentifier() { final org.ovirt.engine.core.bll.scheduling.OS validOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - Server7 - release.el6"); assertThat(validOs.isValid()).isTrue(); assertThat(validOs.getVersion().getMajor()).isEqualTo(6); }	@org.junit.Test public void shouldFalbackToEl6ReleaseIdentifier() { final org.ovirt.engine.core.bll.scheduling.OS validOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - Server7 - release.el6"); assertThat(validOs.isValid(), is(true)); assertThat(validOs.getVersion().getMajor(), equalTo(6)); }
@org.junit.Test public void shouldOnlyTakeStartingDigits() { final org.ovirt.engine.core.bll.scheduling.OS invalidOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - Server7 - release"); assertThat(invalidOs.isValid()).isFalse(); }	@org.junit.Test public void shouldOnlyTakeStartingDigits() { final org.ovirt.engine.core.bll.scheduling.OS invalidOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - Server7 - release"); assertThat(invalidOs.isValid(), is(false)); }
@org.junit.Test public void shouldDetectIncompleteOsIdentifier() { final org.ovirt.engine.core.bll.scheduling.OS invalidOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos"); assertThat(invalidOs.isValid()).isFalse(); }	@org.junit.Test public void shouldDetectIncompleteOsIdentifier() { final org.ovirt.engine.core.bll.scheduling.OS invalidOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos"); assertThat(invalidOs.isValid(), is(false)); }
@org.junit.Test public void shouldDetectDifferentOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")).isSameOs(new org.ovirt.engine.core.bll.scheduling.OS("os2", new org.ovirt.engine.core.compat.Version("6.3")))).isFalse(); }	@org.junit.Test public void shouldDetectDifferentOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")).isSameOs(new org.ovirt.engine.core.bll.scheduling.OS("os2", new org.ovirt.engine.core.compat.Version("6.3"))), is(false)); }
@org.junit.Test public void shouldHandleNumMinorVersion() { final org.ovirt.engine.core.bll.scheduling.OS validOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - 7.3 - release"); assertThat(validOs.isValid()).isTrue(); assertThat(validOs.getVersion().getMajor()).isEqualTo(7); assertThat(validOs.getVersion().getMinor()).isEqualTo(3); }	@org.junit.Test public void shouldHandleNumMinorVersion() { final org.ovirt.engine.core.bll.scheduling.OS validOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - 7.3 - release"); assertThat(validOs.isValid(), is(true)); assertThat(validOs.getVersion().getMajor(), equalTo(7)); assertThat(validOs.getVersion().getMinor(), equalTo(3)); }
@org.junit.Test public void shouldDetectVersionWithoutDigits() { final org.ovirt.engine.core.bll.scheduling.OS invalidOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - Seven - release"); assertThat(invalidOs.isValid()).isFalse(); }	@org.junit.Test public void shouldDetectVersionWithoutDigits() { final org.ovirt.engine.core.bll.scheduling.OS invalidOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - Seven - release"); assertThat(invalidOs.isValid(), is(false)); }
@org.junit.Test public void shouldDetectSameOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")).isSameOs(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")))).isTrue(); }	@org.junit.Test public void shouldDetectSameOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")).isSameOs(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3"))), is(true)); }
@org.junit.Test public void shouldFalbackToEl7ReleaseIdentifier() { final org.ovirt.engine.core.bll.scheduling.OS validOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - Server9 - release.el7"); assertThat(validOs.isValid()).isTrue(); assertThat(validOs.getVersion().getMajor()).isEqualTo(7); }	@org.junit.Test public void shouldFalbackToEl7ReleaseIdentifier() { final org.ovirt.engine.core.bll.scheduling.OS validOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - Server9 - release.el7"); assertThat(validOs.isValid(), is(true)); assertThat(validOs.getVersion().getMajor(), equalTo(7)); }
@org.junit.Test public void shouldDetectNewerOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")).isNewerThan(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.2")))).isTrue(); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("7.1")).isNewerThan(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.2")))).isTrue(); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.2")).isNewerThan(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")))).isFalse(); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("5.4")).isNewerThan(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")))).isFalse(); }	@org.junit.Test public void shouldDetectNewerOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")).isNewerThan(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.2"))), is(true)); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("7.1")).isNewerThan(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.2"))), is(true)); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.2")).isNewerThan(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3"))), is(false)); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("5.4")).isNewerThan(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3"))), is(false)); }
@org.junit.Test public void shouldDetectOlderOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.2")).isOlderThan(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")))).isTrue(); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.2")).isOlderThan(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("7.1")))).isTrue(); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.2")).isOlderThan(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.1")))).isFalse(); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("7.2")).isOlderThan(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")))).isFalse(); }	@org.junit.Test public void shouldDetectOlderOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.2")).isOlderThan(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3"))), is(true)); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.2")).isOlderThan(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("7.1"))), is(true)); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.2")).isOlderThan(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.1"))), is(false)); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("7.2")).isOlderThan(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3"))), is(false)); }
@org.junit.Test public void shouldDetectSameMajorVersion() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("test", new org.ovirt.engine.core.compat.Version("6.3")).isSameMajorVersion(new org.ovirt.engine.core.bll.scheduling.OS("test", new org.ovirt.engine.core.compat.Version("6.6")))).isTrue(); }	@org.junit.Test public void shouldDetectSameMajorVersion() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("test", new org.ovirt.engine.core.compat.Version("6.3")).isSameMajorVersion(new org.ovirt.engine.core.bll.scheduling.OS("test", new org.ovirt.engine.core.compat.Version("6.6"))), is(true)); }
@org.junit.Test public void shouldDetectDifferentMajorVersion() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("test", new org.ovirt.engine.core.compat.Version("6.3")).isSameMajorVersion(new org.ovirt.engine.core.bll.scheduling.OS("test", new org.ovirt.engine.core.compat.Version("7.3")))).isFalse(); }	@org.junit.Test public void shouldDetectDifferentMajorVersion() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("test", new org.ovirt.engine.core.compat.Version("6.3")).isSameMajorVersion(new org.ovirt.engine.core.bll.scheduling.OS("test", new org.ovirt.engine.core.compat.Version("7.3"))), is(false)); }
@org.junit.Test public void shouldHandleAlNumFullVersion() { final org.ovirt.engine.core.bll.scheduling.OS validOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - 7.3.2Server - release"); assertThat(validOs.isValid()).isTrue(); assertThat(validOs.getVersion().getMajor()).isEqualTo(7); assertThat(validOs.getVersion().getMinor()).isEqualTo(3); assertThat(validOs.getVersion().getBuild()).isEqualTo(2); }	@org.junit.Test public void shouldHandleAlNumFullVersion() { final org.ovirt.engine.core.bll.scheduling.OS validOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - 7.3.2Server - release"); assertThat(validOs.isValid(), is(true)); assertThat(validOs.getVersion().getMajor(), equalTo(7)); assertThat(validOs.getVersion().getMinor(), equalTo(3)); assertThat(validOs.getVersion().getBuild(), equalTo(2)); }
@org.junit.Test public void shouldCreateNiceJsonValidationResult() throws java.io.IOException { invalidVM.setCpuPinning("i am pinned"); invalidVM.setDedicatedVmForVdsList(org.ovirt.engine.core.compat.Guid.newGuid()); invalidVM.setMigrationSupport(org.ovirt.engine.core.bll.validator.PINNED_TO_HOST); invalidVM.setId(Guid.Empty); newHost1.setHostOs("invalid os"); org.ovirt.engine.core.bll.ValidationResult validationResult = validator.isUpgradePossible(java.util.Arrays.asList(newHost1), java.util.Arrays.asList(invalidVM)); assertThat(validationResult.getVariableReplacements().get(0), containsString("VM_CPUS_PINNED")); assertThat(validationResult.getVariableReplacements().get(0), containsString("VM_PINNED_TO_HOSTS")); assertThat(validationResult.getVariableReplacements().get(0), containsString("HOST_INVALID_OS")); }	@org.junit.Test public void shouldCreateNiceJsonValidationResult() throws java.io.IOException { invalidVM.setCpuPinning("i am pinned"); invalidVM.setDedicatedVmForVdsList(org.ovirt.engine.core.compat.Guid.newGuid()); invalidVM.setMigrationSupport(org.ovirt.engine.core.bll.validator.PINNED_TO_HOST); invalidVM.setId(Guid.Empty); newHost1.setHostOs("invalid os"); org.ovirt.engine.core.bll.ValidationResult validationResult = validator.isUpgradePossible(java.util.Arrays.asList(newHost1), java.util.Arrays.asList(invalidVM)); assertThat(validationResult.getVariableReplacements().get(0), containsString("VM_CPUS_PINNED")); assertThat(validationResult.getVariableReplacements().get(0), containsString("VM_NOT_MIGRATABLE")); assertThat(validationResult.getVariableReplacements().get(0), containsString("HOST_INVALID_OS")); }
public boolean isClusterUpgradePolicy() { return (getFilterPositionMap()) != null ? getFilterPositionMap().containsKey(org.ovirt.engine.core.common.scheduling.ClusterPolicy.UPGRADE_POLICY_UNIT_GUID) : false; }	public boolean isClusterUpgradePolicy() { return (filters) != null ? filters.contains(org.ovirt.engine.core.common.scheduling.ClusterPolicy.UPGRADE_POLICY_UNIT_GUID) : false; }
public java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR> isVmReadyForUpgrade(final org.ovirt.engine.core.common.businessentities.VM vm) {<START_MOD> java.util.Objects.requireNonNull(vm);<END_MOD> final java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR> errors = new java.util.ArrayList<>(); if (vm.getStatus().isSuspended()) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_SUSPENDED); } if (!(org.apache.commons.lang.StringUtils.isEmpty(vm.getCpuPinning()))) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_CPUS_PINNED); } for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : vm.getvNumaNodeList()) { if (!(org.ovirt.engine.core.utils.NumaUtils.getPinnedNodeIndexList(vmNumaNode.getVdsNumaNodeList()).isEmpty())) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_NUMA_PINNED); break; } } if ((!(vm.getDedicatedVmForVdsList().isEmpty())) && ((org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST) == (vm.getMigrationSupport()))) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_PINNED_TO_HOSTS); } if (hostDeviceManager.checkVmNeedsDirectPassthrough(vm)) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_NEEDS_PASSTHROUGH); } return errors; }	public java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR> isVmReadyForUpgrade(final org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Objects.requireNonNull(vm); final java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR> errors = new java.util.ArrayList<>(); if (vm.getStatus().isSuspended()) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_SUSPENDED); } if (!(org.apache.commons.lang.StringUtils.isEmpty(vm.getCpuPinning()))) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_CPUS_PINNED); } for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : vm.getvNumaNodeList()) { if (!(org.ovirt.engine.core.utils.NumaUtils.getPinnedNodeIndexList(vmNumaNode.getVdsNumaNodeList()).isEmpty())) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_NUMA_PINNED); break; } } if ((org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE) != (vm.getMigrationSupport())) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_NOT_MIGRATABLE); } if (hostDeviceManager.checkVmNeedsDirectPassthrough(vm)) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_NEEDS_PASSTHROUGH); } return errors; }
@org.junit.Test public void <START_MOD>shouldCheckIfMixedHostOsIsAllowed<END_MOD>() { <START_MOD>createCommandWithDefaultVdsGroup<END_MOD>(); <START_MOD>oldGroupIsDetachedDefault<END_MOD>(); cpuExists(); architectureIsUpdatable(); <START_MOD>cmd.getVdsGroup<END_MOD>(<START_MOD>).setClusterPolicyId(ClusterPolicy.UPGRADE_POLICY_GUID<END_MOD>); cmd.getVdsGroup().<START_MOD>setCompatibilityVersion<END_MOD>(org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.<START_MOD>VERSION_1_2<END_MOD>); <START_MOD>assertFalse<END_MOD>(cmd.canDoAction()); verify(inClusterUpgradeValidator, times(0)).isUpgradePossible(anyList(), anyList()); verify(inClusterUpgradeValidator, times(<START_MOD>0<END_MOD>)).isUpgradeDone(anyList()); }	@org.junit.Test public void shouldCheckIfMixedHostOsIsAllowed() { createCommandWithDefaultVdsGroup(); cpuExists(); architectureIsUpdatable(); cmd.getVdsGroup().setClusterPolicyId(ClusterPolicy.UPGRADE_POLICY_GUID); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.CLUSTER_UPGRADE_CAN_NOT_BE_STARTED)).when(inClusterUpgradeValidator).checkClusterUpgradeIsEnabled(any(org.ovirt.engine.core.common.businessentities.VDSGroup.class)); assertFalse(cmd.canDoAction()); verify(inClusterUpgradeValidator, times(0)).isUpgradePossible(anyList(), anyList()); verify(inClusterUpgradeValidator, times(0)).isUpgradeDone(anyList()); verify(inClusterUpgradeValidator, times(1)).checkClusterUpgradeIsEnabled(any(org.ovirt.engine.core.common.businessentities.VDSGroup.class)); }
@org.junit.Test public void shouldCheckIfClusterCanBeUpgraded() { <START_MOD>createCommandWithDefaultVdsGroup<END_MOD>(); <START_MOD>oldGroupFromDb<END_MOD>(); cpuExists(); architectureIsUpdatable(); <START_MOD>cmd.getVdsGroup<END_MOD>(<START_MOD>).setClusterPolicyId(ClusterPolicy.UPGRADE_POLICY_GUID<END_MOD>); cmd.getVdsGroup().<START_MOD>setCompatibilityVersion<END_MOD>(org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.<START_MOD>VERSION_1_1<END_MOD>); assertTrue(cmd.canDoAction()); verify(inClusterUpgradeValidator, times(1)).isUpgradePossible(anyList(), anyList()); verify(inClusterUpgradeValidator, times(0)).isUpgradeDone(anyList()); }	@org.junit.Test public void shouldCheckIfClusterCanBeUpgraded() { createCommandWithDefaultVdsGroup(); cpuExists(); architectureIsUpdatable(); cmd.getVdsGroup().setClusterPolicyId(ClusterPolicy.UPGRADE_POLICY_GUID); doReturn(ValidationResult.VALID).when(inClusterUpgradeValidator).checkClusterUpgradeIsEnabled(any(org.ovirt.engine.core.common.businessentities.VDSGroup.class)); cmd.getVdsGroup().setCompatibilityVersion(org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.VERSION_1_1); assertTrue(cmd.canDoAction()); verify(inClusterUpgradeValidator, times(1)).isUpgradePossible(anyList(), anyList()); verify(inClusterUpgradeValidator, times(0)).isUpgradeDone(anyList()); verify(inClusterUpgradeValidator, times(1)).checkClusterUpgradeIsEnabled(any(org.ovirt.engine.core.common.businessentities.VDSGroup.class)); }
public boolean isInUpgradeMode() { return (clusterPolicyId) == (org.ovirt.engine.core.common.scheduling.ClusterPolicy.UPGRADE_POLICY_GUID); }	public boolean isInUpgradeMode() { return ClusterPolicy.UPGRADE_POLICY_GUID.equals(clusterPolicyId); }
@org.junit.Test public void shouldDetectPinnedVM() { invalidVM.setDedicatedVmForVdsList(org.ovirt.engine.core.compat.Guid.newGuid()); invalidVM.setMigrationSupport(org.ovirt.engine.core.bll.validator.PINNED_TO_HOST); assertThat(validator.<START_MOD>checkVmReadyForUpgrade<END_MOD>(invalidVM), hasItem(UPGRADE_ERROR.VM_PINNED_TO_HOSTS)); }	@org.junit.Test public void shouldDetectNonMigratableVMs() { invalidVM.setMigrationSupport(org.ovirt.engine.core.bll.validator.PINNED_TO_HOST); assertThat(validator.checkVmReadyForUpgrade(invalidVM), hasItem(UPGRADE_ERROR.VM_NOT_MIGRATABLE)); }
@org.junit.Test public void shouldDetectDifferentOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")).<START_MOD>isEqualOs<END_MOD>(new org.ovirt.engine.core.bll.scheduling.OS("os2", new org.ovirt.engine.core.compat.Version("6.3"))), is(false)); }	@org.junit.Test public void shouldDetectDifferentOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")).isSameOsFamily(new org.ovirt.engine.core.bll.scheduling.OS("os2", new org.ovirt.engine.core.compat.Version("6.3"))), is(false)); }
@org.junit.Test public void shouldDetectSameOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")).<START_MOD>isEqualOs<END_MOD>(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3"))), is(true)); }	@org.junit.Test public void shouldDetectSameOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")).isSameOsFamily(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3"))), is(true)); }
@org.junit.Test public void shouldDetectEqualOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("RHEL", new org.ovirt.engine.core.compat.Version("6.3")).isEqualOs(new org.ovirt.engine.core.bll.scheduling.OS("oVirt Node", new org.ovirt.engine.core.compat.Version("6.3"))), is(true)); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("RHEL", new org.ovirt.engine.core.compat.Version("6.3")).isEqualOs(new org.ovirt.engine.core.bll.scheduling.OS("RHEV Hypervisor", new org.ovirt.engine.core.compat.Version("6.3"))), is(true)); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("oVirt Node", new org.ovirt.engine.core.compat.Version("6.3")).isEqualOs(new org.ovirt.engine.core.bll.scheduling.OS("RHEV Hypervisor", new org.ovirt.engine.core.compat.Version("6.3"))), is(true)); }	@org.junit.Test public void shouldDetectEqualOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("RHEL", new org.ovirt.engine.core.compat.Version("6.3")).isSameOsFamily(new org.ovirt.engine.core.bll.scheduling.OS("oVirt Node", new org.ovirt.engine.core.compat.Version("6.3"))), is(true)); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("RHEL", new org.ovirt.engine.core.compat.Version("6.3")).isSameOsFamily(new org.ovirt.engine.core.bll.scheduling.OS("RHEV Hypervisor", new org.ovirt.engine.core.compat.Version("6.3"))), is(true)); assertThat(new org.ovirt.engine.core.bll.scheduling.OS("oVirt Node", new org.ovirt.engine.core.compat.Version("6.3")).isSameOsFamily(new org.ovirt.engine.core.bll.scheduling.OS("RHEV Hypervisor", new org.ovirt.engine.core.compat.Version("6.3"))), is(true)); }
public static org.ovirt.vdsm.jsonrpc.client.JsonRpcClient createStompClient(java.lang.String hostname, int port, int connectionTimeout, int clientTimeout, int connectionRetry, int heartbeat, boolean isSecure, java.lang.String protocol, java.lang.String requestQueue, java.lang.String responseQueue) { org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy connectionPolicy = new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.StompClientPolicy(connectionTimeout, connectionRetry, heartbeat, java.io.IOException.class, requestQueue, responseQueue<START_MOD>, hostname<END_MOD>); org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy clientPolicy = new org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy(clientTimeout, connectionRetry, heartbeat, java.io.IOException.class<START_MOD>, hostname<END_MOD>); return org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.createClient(hostname, port, connectionPolicy, clientPolicy, isSecure, ReactorType.STOMP, protocol); }	public static org.ovirt.vdsm.jsonrpc.client.JsonRpcClient createStompClient(java.lang.String hostname, int port, int connectionTimeout, int clientTimeout, int connectionRetry, int heartbeat, boolean isSecure, java.lang.String protocol, int parallelism, java.lang.String requestQueue, java.lang.String responseQueue, java.lang.String eventQueue) { org.ovirt.vdsm.jsonrpc.client.reactors.stomp.StompClientPolicy connectionPolicy = new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.StompClientPolicy(connectionTimeout, connectionRetry, heartbeat, java.io.IOException.class, requestQueue, responseQueue); connectionPolicy.setEventQueue(eventQueue); org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy clientPolicy = new org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy(clientTimeout, connectionRetry, heartbeat, java.io.IOException.class); if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.UseHostNameIdentifier)) { org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.log.debug(org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.identifierLogMessage, hostname); connectionPolicy.setIdentifier(hostname); } return org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.createClient(hostname, port, connectionPolicy, clientPolicy, isSecure, ReactorType.STOMP, protocol, parallelism); }
public static org.ovirt.vdsm.jsonrpc.client.JsonRpcClient createClient(java.lang.String hostname, int port, int connectionTimeout, int clientTimeout, int connectionRetry, int heartbeat, boolean isSecure, org.ovirt.vdsm.jsonrpc.client.reactors.ReactorType type, java.lang.String protocol) { org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy connectionPolicy = new org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy(connectionTimeout, connectionRetry, heartbeat, java.io.IOException.class<START_MOD>, hostname<END_MOD>); org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy clientPolicy = new org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy(clientTimeout, connectionRetry, heartbeat, java.io.IOException.class<START_MOD>, hostname<END_MOD>); return org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.createClient(hostname, port, connectionPolicy, clientPolicy, isSecure, type, protocol); }	public static org.ovirt.vdsm.jsonrpc.client.JsonRpcClient createClient(java.lang.String hostname, int port, int connectionTimeout, int clientTimeout, int connectionRetry, int heartbeat, boolean isSecure, org.ovirt.vdsm.jsonrpc.client.reactors.ReactorType type, java.lang.String protocol, int parallelism) { org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy connectionPolicy = new org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy(connectionTimeout, connectionRetry, heartbeat, java.io.IOException.class); org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy clientPolicy = new org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy(clientTimeout, connectionRetry, heartbeat, java.io.IOException.class); if (org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.UseHostNameIdentifier)) { org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.log.debug(org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.identifierLogMessage, hostname); connectionPolicy.setIdentifier(hostname); } return org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.createClient(hostname, port, connectionPolicy, clientPolicy, isSecure, type, protocol, parallelism); }
private void addImportedDevices(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vm.getStaticData(); vmStatic.setImages(new java.util.ArrayList()); vmStatic.setInterfaces(new java.util.ArrayList()); org.ovirt.engine.core.bll<START_MOD>.exportimport<END_MOD>.ImportUtils.updateGraphicsDevices(vmStatic, org.ovirt.engine.core.bll.ConvertVmCommand.getStoragePool().getCompatibilityVersion()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.addImportedDevices(vmStatic, false); org.ovirt.engine.core.bll.ConvertVmCommand.getVmDeviceDao().updateBootOrderInBatch(new java.util.ArrayList(vm.getManagedVmDeviceMap().values())); }	private void addImportedDevices(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vm.getStaticData(); vmStatic.setImages(new java.util.ArrayList()); vmStatic.setInterfaces(new java.util.ArrayList()); org.ovirt.engine.core.bll.exportimport.ImportUtils.updateGraphicsDevices(vmStatic, org.ovirt.engine.core.bll.exportimport.ConvertVmCommand.getStoragePool().getCompatibilityVersion()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.addImportedDevices(vmStatic, false); org.ovirt.engine.core.bll.exportimport.ConvertVmCommand.getVmDeviceDao().updateBootOrderInBatch(new java.util.ArrayList(vm.getManagedVmDeviceMap().values())); }
private java.lang.String getProviderid() { return providerId; }	private org.ovirt.engine.core.compat.Guid getDataCenterId(org.ovirt.engine.api.model.Action action) { java.lang.String dcIdFromAction = action.getDataCenter().getId(); if (dcIdFromAction != null) { return new org.ovirt.engine.core.compat.Guid(dcIdFromAction); } return getDataCenterIdByName(action.getDataCenter().getName()); }
private org.ovirt.engine.core.common.businessentities.network.Network getNetwork() { org.ovirt.engine.core.common.businessentities.network.Network network = null; try { org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters(asGuid(providerId)); org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = runQuery(VdcQueryType.GetAllExternalNetworksOnProvider, parameters); if (!(result.getSucceeded())) { backendFailure(result.getExceptionString()); } java.util.Map<org.ovirt.engine.core.common.businessentities.network.Network, java.util.Set<org.ovirt.engine.core.compat.Guid>> networks = result.getReturnValue(); if (networks != null) { for (java.util.Map.Entry<org.ovirt.engine.core.common.businessentities.network.Network, java.util.Set<org.ovirt.engine.core.compat.Guid>> entry : networks.entrySet()) { org.ovirt.engine.core.common.businessentities.network.Network current = entry.getKey(); org.ovirt.engine.core.common.businessentities.network.ProviderNetwork providedBy = current.getProvidedBy(); if (java.util.Objects.equals(providedBy.getExternalId(), id)) { network = current; break; } } } } catch (java.lang.Exception exception) { return handleError(exception, false); } if (network == null) { notFound(); } return network; }	private org.ovirt.engine.core.common.businessentities.network.Network getNetwork() { java.util.Map<org.ovirt.engine.core.common.businessentities.network.Network, java.util.Set<org.ovirt.engine.core.compat.Guid>> networks = getAllNetworks(); return findCurrentNetwork(networks); }
@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { validateParameters(action, "dataCenter.id"); org.ovirt.engine.core.compat.Guid dataCenterId = new org.ovirt.engine.core.compat.Guid(action.getDataCenter().getId()); org.ovirt.engine.core.common.businessentities.network.ProviderNetwork providerNetwork = new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(new org.ovirt.engine.core.compat.Guid(getProviderid()), getNetworkId()); org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network(); network.setProvidedBy(providerNetwork); network.setDataCenterId(dataCenterId); network.setName(getNetwork().getName()); org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters parameters = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(dataCenterId, network); return doAction(VdcActionType.AddNetwork, parameters, action); }	@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { validateParameters(action, "dataCenter.id|name"); org.ovirt.engine.core.compat.Guid dataCenterId = getDataCenterId(action); org.ovirt.engine.core.common.businessentities.network.ProviderNetwork providerNetwork = new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(new org.ovirt.engine.core.compat.Guid(providerId), id); org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network(); network.setProvidedBy(providerNetwork); network.setDataCenterId(dataCenterId); network.setName(getNetwork().getName()); org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters parameters = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(dataCenterId, network); return doAction(VdcActionType.AddNetwork, parameters, action); }
private java.lang.String getNetworkId() { return id; }	private java.util.Map<org.ovirt.engine.core.common.businessentities.network.Network, java.util.Set<org.ovirt.engine.core.compat.Guid>> getAllNetworks() { org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters(asGuid(providerId)); org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = runQuery(VdcQueryType.GetAllExternalNetworksOnProvider, parameters); checkResultAndThrowExceptionIfFailed(result); java.util.Map<org.ovirt.engine.core.common.businessentities.network.Network, java.util.Set<org.ovirt.engine.core.compat.Guid>> networks = result.getReturnValue(); return networks; }
@org.junit.Test public void testReadOneSkipsAndIngoresUnknownElements() { org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader(("<vm>" + (("<junk>ungly</junk>" + "<name>myvm</name>") + "</vm>"))); org.ovirt.engine.api.types.V4Vm vm = org.ovirt.engine.api.xml.V4XmlVmReader.readOne(reader); assertEquals("myvm", vm.name()); }	@org.junit.Test public void testReadOneSkipsAndIngoresUnknownElements() { org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader(("<vm>" + (("<junk>ugly</junk>" + "<name>myvm</name>") + "</vm>"))); org.ovirt.engine.api.types.V4Vm vm = org.ovirt.engine.api.xml.V4XmlVmReader.readOne(reader); assertEquals("myvm", vm.name()); }
@java.lang.Override protected boolean validate() { boolean returnValue = true; org.ovirt.engine.core.common.businessentities.Permission p = org.ovirt.engine.core.bll.RemovePermissionCommand.getPermissionDao().get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getPermission().getId()); if (org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isLastSuperUserPermission(p.getRoleId())) { org.ovirt.engine.core.bll.RemovePermissionCommand.getReturnValue().getValidationMessages().add(EngineMessage.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString()); returnValue = false; } else if ((p.getRoleType().equals(RoleType.ADMIN)) && (!(org.ovirt.engine.core.bll.RemovePermissionCommand.isSystemSuperUser()))) { addValidationMessage(EngineMessage.PERMISSION_REMOVE_FAILED_ONLY_SYSTEM_SUPER_USER_CAN_REMOVE_ADMIN_ROLES); returnValue = false; } <START_MOD>if ((((org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getUser()) != null) && (!(java.util.Objects.equals(p.getAdElementId(), org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getUser().getId())))) || (((org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getGroup()) != null) && (!(java.util.Objects.equals(p.getAdElementId(), org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getGroup().getId()))))) { addValidationMessage(EngineMessage.INHERITED_PERMISSION_CANT_BE_REMOVED); returnValue = false; } <END_MOD>return returnValue; }	@java.lang.Override protected boolean validate() { boolean returnValue = true; org.ovirt.engine.core.common.businessentities.Permission p = org.ovirt.engine.core.bll.RemovePermissionCommand.getPermissionDao().get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getPermission().getId()); if (org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isLastSuperUserPermission(p.getRoleId())) { org.ovirt.engine.core.bll.RemovePermissionCommand.getReturnValue().getValidationMessages().add(EngineMessage.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString()); returnValue = false; } else if ((p.getRoleType().equals(RoleType.ADMIN)) && (!(org.ovirt.engine.core.bll.RemovePermissionCommand.isSystemSuperUser()))) { addValidationMessage(EngineMessage.PERMISSION_REMOVE_FAILED_ONLY_SYSTEM_SUPER_USER_CAN_REMOVE_ADMIN_ROLES); returnValue = false; } if (!(java.util.Objects.equals(p.getAdElementId(), org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getTargetId()))) { addValidationMessage(EngineMessage.INHERITED_PERMISSION_CANT_BE_REMOVED); returnValue = false; } return returnValue; }
@java.lang.Override public javax.ws.rs.core.Response remove() { get(); return performAction(VdcActionType.RemovePermission, <START_MOD>(parent.isGroupSubCollection() ? <END_MOD>new org.ovirt.engine.core.common.action.PermissionsOperationsParameters(getPermissions()<START_MOD>, parent.getGroup()) : new org.ovirt.engine.core.common.action.PermissionsOperationsParameters(getPermissions(), parent.getUser())<END_MOD>)); }	@java.lang.Override public javax.ws.rs.core.Response remove() { get(); return performAction(VdcActionType.RemovePermission, new org.ovirt.engine.core.common.action.PermissionsOperationsParameters(getPermissions(), targetId)); }
@java.lang.Override protected void executeVdsBrokerCommand() { java.util.List<java.lang.String> jobIds = ((org.ovirt.engine.core.vdsbroker.vdsbroker.GetHostJobsVDSCommand.getParameters().getJobIds()) == null) ? null : org.ovirt.engine.core.vdsbroker.vdsbroker.GetHostJobsVDSCommand.getParameters().getJobIds().stream().map(( e) -> e.toString()).collect(java.util.stream.Collectors.toList()); jobResult = org.ovirt.engine.core.vdsbroker.vdsbroker.GetHostJobsVDSCommand.getBroker().getHostJobs(org.ovirt.engine.core.vdsbroker.vdsbroker.GetHostJobsVDSCommand.getParameters().getType().name().toLowerCase(), jobIds); org.ovirt.engine.core.vdsbroker.vdsbroker.GetHostJobsVDSCommand.proceedProxyReturnValue(); setReturnValue(parseHostJobs(jobResult.getHostJobsInfo())); }	@java.lang.Override protected void executeVdsBrokerCommand() { java.util.List<java.lang.String> jobIds = ((org.ovirt.engine.core.vdsbroker.vdsbroker.GetHostJobsVDSCommand.getParameters().getJobIds()) == null) ? null : org.ovirt.engine.core.vdsbroker.vdsbroker.GetHostJobsVDSCommand.getParameters().getJobIds().stream().map(( e) -> e.toString()).collect(java.util.stream.Collectors.toList()); jobResult = org.ovirt.engine.core.vdsbroker.vdsbroker.GetHostJobsVDSCommand.getBroker().getHostJobs(org.ovirt.engine.core.vdsbroker.vdsbroker.GetHostJobsVDSCommand.getParameters().getType().name(), jobIds); org.ovirt.engine.core.vdsbroker.vdsbroker.GetHostJobsVDSCommand.proceedProxyReturnValue(); setReturnValue(parseHostJobs(jobResult.getHostJobsInfo())); }
private void generateWriteOne(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getEnumName(type); java.lang.String tag = schemaNames.getSchemaTagName(type.getName()); javaBuffer.addImport(typeName); javaBuffer.addImport(org.ovirt.api.metamodel.runtime.json.JsonWriter.class); javaBuffer.addLine("public static void writeOne(%1$s object, JsonWriter writer) {", typeName.getSimpleName()); javaBuffer.addLine(" writeOne(object, null, writer);"); javaBuffer.addLine("}"); javaBuffer.addLine(); javaBuffer.addLine("public static void writeOne(%1$s object, String name, JsonWriter writer) {", typeName.getSimpleName()); javaBuffer.addLine("if (name != null) {"); javaBuffer.addLine("writer.writeStartObject(name);"); javaBuffer.addLine("}"); javaBuffer.addLine("else {"); javaBuffer.addLine("writer.writeStartObject();"); javaBuffer.addLine("}"); javaBuffer.addLine("writer.writeString(\"%1$s\", object.value());", tag); javaBuffer.addLine("writer.writeEnd();"); javaBuffer.addLine("}"); javaBuffer.addLine(); }	private void generateEnumWriteOne(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getEnumName(type); java.lang.String tag = schemaNames.getSchemaTagName(type.getName()); javaBuffer.addImport(typeName); javaBuffer.addImport(org.ovirt.api.metamodel.runtime.json.JsonWriter.class); javaBuffer.addLine("public static void writeOne(%1$s object, JsonWriter writer) {", typeName.getSimpleName()); javaBuffer.addLine(" writeOne(object, null, writer);"); javaBuffer.addLine("}"); javaBuffer.addLine(); javaBuffer.addLine("public static void writeOne(%1$s object, String name, JsonWriter writer) {", typeName.getSimpleName()); javaBuffer.addLine("if (name != null) {"); javaBuffer.addLine("writer.writeStartObject(name);"); javaBuffer.addLine("}"); javaBuffer.addLine("else {"); javaBuffer.addLine("writer.writeStartObject();"); javaBuffer.addLine("}"); javaBuffer.addLine("writer.writeString(\"%1$s\", object.value());", tag); javaBuffer.addLine("writer.writeEnd();"); javaBuffer.addLine("}"); javaBuffer.addLine(); }
private void generateWriterSource(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName writerName = javaTypes.getJsonWriterName(type); javaBuffer.addLine("public class %1$s {", writerName.getSimpleName()); javaBuffer.addLine(); generateWriteOne(type); generateWriteMany(type); javaBuffer.addLine("}"); javaBuffer.addLine(); }	private void generateEnumWriterSource(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName writerName = javaTypes.getJsonWriterName(type); javaBuffer.addLine("public class %1$s {", writerName.getSimpleName()); javaBuffer.addLine(); generateEnumWriteOne(type); generateEnumWriteMany(type); javaBuffer.addLine("}"); javaBuffer.addLine(); }
private void generateWriter(org.ovirt.api.metamodel.concepts.EnumType type) { javaBuffer = new org.ovirt.api.metamodel.tool.JavaClassBuffer(); org.ovirt.api.metamodel.tool.JavaClassName writerName = javaTypes.getJsonWriterName(type); javaBuffer.setClassName(writerName); generateWriterSource(type); try { javaBuffer.write(outDir); } catch (java.io.IOException exception) { throw new java.lang.RuntimeException((("Can\'t write file for XML writer \"" + writerName) + "\""), exception); } }	private void generateEnumWriter(org.ovirt.api.metamodel.concepts.EnumType type) { javaBuffer = new org.ovirt.api.metamodel.tool.JavaClassBuffer(); org.ovirt.api.metamodel.tool.JavaClassName writerName = javaTypes.getJsonWriterName(type); javaBuffer.setClassName(writerName); generateEnumWriterSource(type); try { javaBuffer.write(outDir); } catch (java.io.IOException exception) { throw new java.lang.RuntimeException((("Can\'t write file for XML writer \"" + writerName) + "\""), exception); } }
private void generateReader(org.ovirt.api.metamodel.concepts.EnumType type) { javaBuffer = new org.ovirt.api.metamodel.tool.JavaClassBuffer(); org.ovirt.api.metamodel.tool.JavaClassName readerName = javaTypes.getJsonReaderName(type); javaBuffer.setClassName(readerName); generateReaderSource(type); try { javaBuffer.write(outDir); } catch (java.io.IOException exception) { throw new java.lang.RuntimeException((("Can\'t write file for XML reader \"" + readerName) + "\""), exception); } }	private void generateEnumReader(org.ovirt.api.metamodel.concepts.EnumType type) { javaBuffer = new org.ovirt.api.metamodel.tool.JavaClassBuffer(); org.ovirt.api.metamodel.tool.JavaClassName readerName = javaTypes.getJsonReaderName(type); javaBuffer.setClassName(readerName); generateEnumReaderSource(type); try { javaBuffer.write(outDir); } catch (java.io.IOException exception) { throw new java.lang.RuntimeException((("Can\'t write file for XML reader \"" + readerName) + "\""), exception); } }
private void generateReadOne(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getInterfaceName(type); javaBuffer.addImport(typeName); javaBuffer.addImport(org.ovirt.api.metamodel.runtime.xml.XmlReader.class); javaBuffer.addLine("public static %1$s readOne(XmlReader reader) {", typeName.getSimpleName()); javaBuffer.addLine("// Do nothing if there aren't more tags:"); javaBuffer.addLine("if (!reader.forward()) {"); javaBuffer.addLine("return null;"); javaBuffer.addLine("}"); javaBuffer.addLine(); javaBuffer.addLine("%1$s object = null;", javaNames.getJavaClassStyleName(type.getName())); javaBuffer.addLine("// Process the value of enum:"); javaBuffer.addLine("while(reader.forward()) {"); javaBuffer.addLine("object = %1$s.fromValue(reader.readString());", javaNames.getJavaClassStyleName(type.getName())); javaBuffer.addLine("}"); javaBuffer.addLine(); javaBuffer.addLine("return object;"); javaBuffer.addLine("}"); javaBuffer.addLine(); }	private void generateEnumReadOne(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getInterfaceName(type); javaBuffer.addImport(typeName); javaBuffer.addImport(org.ovirt.api.metamodel.runtime.xml.XmlReader.class); javaBuffer.addLine("public static %1$s readOne(XmlReader reader) {", typeName.getSimpleName()); javaBuffer.addLine("// Do nothing if there aren't more tags:"); javaBuffer.addLine("if (!reader.forward()) {"); javaBuffer.addLine("return null;"); javaBuffer.addLine("}"); javaBuffer.addLine(); javaBuffer.addLine("// Process the value of enum:"); javaBuffer.addLine("return %1$s.fromValue(reader.readString());", typeName.getSimpleName()); javaBuffer.addLine("}"); javaBuffer.addLine(); }
private void generateReaderSource(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName readerName = javaTypes.getJsonReaderName(type); javaBuffer.addLine("public class %1$s {", readerName.getSimpleName()); javaBuffer.addLine(); generateReadOne(type); generateReadMany(type); javaBuffer.addLine("}"); javaBuffer.addLine(); }	private void generateEnumReaderSource(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName readerName = javaTypes.getJsonReaderName(type); javaBuffer.addLine("public class %1$s {", readerName.getSimpleName()); javaBuffer.addLine(); generateEnumReadOne(type); generateEnumReadMany(type); javaBuffer.addLine("}"); javaBuffer.addLine(); }
private void generateReaderSource(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName readerName = javaTypes.getXmlReaderName(type); javaBuffer.addLine("public class %1$s {", readerName.getSimpleName()); javaBuffer.addLine(); generateReadOne(type); generateReadMany(type); javaBuffer.addLine("}"); javaBuffer.addLine(); }	private void generateEnumReaderSource(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName readerName = javaTypes.getXmlReaderName(type); javaBuffer.addLine("public class %1$s {", readerName.getSimpleName()); javaBuffer.addLine(); generateEnumReadOne(type); generateEnumReadMany(type); javaBuffer.addLine("}"); javaBuffer.addLine(); }
private void generateWriteOne(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getEnumName(type); java.lang.String tag = schemaNames.getSchemaTagName(type.getName()); javaBuffer.addImport(typeName); javaBuffer.addImport(org.ovirt.api.metamodel.runtime.xml.XmlWriter.class); javaBuffer.addLine("public static void writeOne(%1$s object, XmlWriter writer) {", typeName.getSimpleName()); javaBuffer.addLine("writeOne(object, \"%1$s\", writer);", tag); javaBuffer.addLine("}"); javaBuffer.addLine(); javaBuffer.addLine("public static void writeOne(%1$s object, String tag, XmlWriter writer) {", typeName.getSimpleName()); javaBuffer.addLine("writer.writeElement(tag, object.value());"); javaBuffer.addLine("}"); javaBuffer.addLine(); }	private void generateEnumWriteOne(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getEnumName(type); java.lang.String tag = schemaNames.getSchemaTagName(type.getName()); javaBuffer.addImport(typeName); javaBuffer.addImport(org.ovirt.api.metamodel.runtime.xml.XmlWriter.class); javaBuffer.addLine("public static void writeOne(%1$s object, XmlWriter writer) {", typeName.getSimpleName()); javaBuffer.addLine("writeOne(object, \"%1$s\", writer);", tag); javaBuffer.addLine("}"); javaBuffer.addLine(); javaBuffer.addLine("public static void writeOne(%1$s object, String tag, XmlWriter writer) {", typeName.getSimpleName()); javaBuffer.addLine("writer.writeElement(tag, object.value());"); javaBuffer.addLine("}"); javaBuffer.addLine(); }
private void generateWriterSource(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName writerName = javaTypes.getXmlWriterName(type); javaBuffer.addLine("public class %1$s {", writerName.getSimpleName()); javaBuffer.addLine(); generateWriteOne(type); generateWriteMany(type); javaBuffer.addLine("}"); javaBuffer.addLine(); }	private void generateEnumWriterSource(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName writerName = javaTypes.getXmlWriterName(type); javaBuffer.addLine("public class %1$s {", writerName.getSimpleName()); javaBuffer.addLine(); generateEnumWriteOne(type); generateEnumWriteMany(type); javaBuffer.addLine("}"); javaBuffer.addLine(); }
private void generateWriteMemberAsAttribute(org.ovirt.api.metamodel.concepts.StructMember member) { org.ovirt.api.metamodel.concepts.Name name = member.getName(); org.ovirt.api.metamodel.concepts.Type type = member.getType(); java.lang.String field = javaNames.getJavaMemberStyleName(name); java.lang.String tag = schemaNames.getSchemaTagName(name); javaBuffer.addLine( (object.%1$sPresent()) { field); if (type instanceof org.ovirt.api.metamodel.concepts.PrimitiveType) { org.ovirt.api.metamodel.concepts.Model model = type.getModel(); if (((type == (model.getBooleanType())) || (type == (model.getIntegerType()))) || (type == (model.getDecimalType()))) { javaBuffer.addLine( object.%2$s().toString()); tag, field); } else if (type == (model.getStringType())) { javaBuffer.addLine( object.%2$s()); tag, field); } else if (type == (model.getDateType())) { javaBuffer.addLine( object.%2$s().toString()); tag, field); } } else if (type instanceof org.ovirt.api.metamodel.concepts.EnumType) { javaBuffer.addLine( object.%2$s().<START_MOD>value<END_MOD>()); tag, field); } javaBuffer.addLine("}"); }	private void generateStructWriteMemberAsAttribute(org.ovirt.api.metamodel.concepts.StructMember member) { org.ovirt.api.metamodel.concepts.Name name = member.getName(); org.ovirt.api.metamodel.concepts.Type type = member.getType(); java.lang.String field = javaNames.getJavaMemberStyleName(name); java.lang.String tag = schemaNames.getSchemaTagName(name); javaBuffer.addLine("if (object.%1$sPresent()) {", field); if (type instanceof org.ovirt.api.metamodel.concepts.PrimitiveType) { org.ovirt.api.metamodel.concepts.Model model = type.getModel(); if (((type == (model.getBooleanType())) || (type == (model.getIntegerType()))) || (type == (model.getDecimalType()))) { javaBuffer.addLine("writer.writeAttribute(\"%1$s\", object.%2$s().toString());", tag, field); } else if (type == (model.getStringType())) { javaBuffer.addLine("writer.writeAttribute(\"%1$s\", object.%2$s());", tag, field); } else if (type == (model.getDateType())) { javaBuffer.addLine("writer.writeAttribute(\"%1$s\", object.%2$s().toString());", tag, field); } } else if (type instanceof org.ovirt.api.metamodel.concepts.EnumType) { javaBuffer.addLine("writer.writeAttribute(\"%1$s\", object.%2$s().value());", tag, field); } javaBuffer.addLine("}"); }
private void generateWriter(org.ovirt.api.metamodel.concepts.EnumType type) { javaBuffer = new org.ovirt.api.metamodel.tool.JavaClassBuffer(); org.ovirt.api.metamodel.tool.JavaClassName writerName = javaTypes.getXmlWriterName(type); javaBuffer.setClassName(writerName); generateWriterSource(type); try { javaBuffer.write(outDir); } catch (java.io.IOException exception) { throw new java.lang.RuntimeException((("Can\'t write file for XML writer \"" + writerName) + "\""), exception); } }	private void generateEnumWriter(org.ovirt.api.metamodel.concepts.EnumType type) { javaBuffer = new org.ovirt.api.metamodel.tool.JavaClassBuffer(); org.ovirt.api.metamodel.tool.JavaClassName writerName = javaTypes.getXmlWriterName(type); javaBuffer.setClassName(writerName); generateEnumWriterSource(type); try { javaBuffer.write(outDir); } catch (java.io.IOException exception) { throw new java.lang.RuntimeException((("Can\'t write file for XML writer \"" + writerName) + "\""), exception); } }
private void generateReader(org.ovirt.api.metamodel.concepts.EnumType type) { javaBuffer = new org.ovirt.api.metamodel.tool.JavaClassBuffer(); org.ovirt.api.metamodel.tool.JavaClassName readerName = javaTypes.getXmlReaderName(type); javaBuffer.setClassName(readerName); generateReaderSource(type); try { javaBuffer.write(outDir); } catch (java.io.IOException exception) { throw new java.lang.RuntimeException((("Can\'t write file for XML reader \"" + readerName) + "\""), exception); } }	private void generateEnumReader(org.ovirt.api.metamodel.concepts.EnumType type) { javaBuffer = new org.ovirt.api.metamodel.tool.JavaClassBuffer(); org.ovirt.api.metamodel.tool.JavaClassName readerName = javaTypes.getXmlReaderName(type); javaBuffer.setClassName(readerName); generateEnumReaderSource(type); try { javaBuffer.write(outDir); } catch (java.io.IOException exception) { throw new java.lang.RuntimeException((("Can\'t write file for XML reader \"" + readerName) + "\""), exception); } }
private void generateReadOne(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getEnumName(type); javaBuffer.addImport(typeName); javaBuffer.addImport(org.ovirt.api.metamodel.runtime.json.JsonReader.class); javaBuffer.addLine("public static %1$s readOne(JsonReader reader) {", typeName.getSimpleName()); javaBuffer.addLine("return readOne(reader, false);"); javaBuffer.addLine("}"); javaBuffer.addLine(); javaBuffer.addLine("public static %1$s readOne(JsonReader reader, boolean started) {", typeName.getSimpleName()); javaBuffer.addLine("if (!started) {"); javaBuffer.addLine("reader.expect(Event.START_OBJECT);"); javaBuffer.addLine("}"); javaBuffer.addLine("%1$s object = null;", typeName.getSimpleName()); javaBuffer.addLine("while (reader.next() == Event.KEY_NAME) {"); javaBuffer.addLine("object = %1$s.fromValue(reader.readString());", javaNames.getJavaClassStyleName(type.getName())); javaBuffer.addLine("}"); javaBuffer.addLine("return object;"); javaBuffer.addLine("}"); javaBuffer.addLine(); }	private void generateEnumReadOne(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getEnumName(type); javaBuffer.addImport(typeName); javaBuffer.addImport(org.ovirt.api.metamodel.runtime.json.JsonReader.class); javaBuffer.addImport(JsonParser.Event.class); javaBuffer.addLine("public static %1$s readOne(JsonReader reader) {", typeName.getSimpleName()); javaBuffer.addLine("return readOne(reader, false);"); javaBuffer.addLine("}"); javaBuffer.addLine(); javaBuffer.addLine("public static %1$s readOne(JsonReader reader, boolean started) {", typeName.getSimpleName()); javaBuffer.addLine("if (!started) {"); javaBuffer.addLine("reader.expect(Event.START_OBJECT);"); javaBuffer.addLine("}"); javaBuffer.addLine("return %1$s.fromValue(reader.readString());", typeName.getSimpleName()); javaBuffer.addLine("}"); javaBuffer.addLine(); }
public java.lang.String getCertificateSubject() { certificateSubject = java.lang.String.format("O=%1$s,CN=%2$s", getOrganizationName().replace("\\", "\\\\").replace(",", "\\,"), getHostName().replace("\\", "\\\\").replace(",", "\\,")); return certificateSubject; }	public java.lang.String getCertificateSubject() { if (((certificateSubject) == null) && ((getHostName()) != null)) { setCertificateSubject(org.ovirt.engine.core.common.utils.CertificateSubjectHelper.getCertificateSubject(getHostName())); } return certificateSubject; }
private static org.ovirt.engine.core.bll.ValidationResult assignFirstCpuProfile(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { java.util.List<org.ovirt.engine.core.common.businessentities.profiles.CpuProfile> cpuProfiles = org.ovirt.engine.core.bll.profiles.CpuProfileHelper.getCpuProfileDao().getAllForCluster(vmBase.getVdsGroupId()); if ((cpuProfiles.size()) == 0) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_CPU_PROFILE_EMPTY); } else { vmBase.setCpuProfileId(cpuProfiles.get(0).getId()); return org.ovirt.engine.core.bll.ValidationResult.VALID; } }	private static org.ovirt.engine.core.bll.ValidationResult assignFirstCpuProfile(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { java.util.List<org.ovirt.engine.core.common.businessentities.profiles.CpuProfile> cpuProfilesWithPermissions = org.ovirt.engine.core.bll.profiles.CpuProfileHelper.getCpuProfileDao().getAllForCluster(vmBase.getVdsGroupId()); if (cpuProfilesWithPermissions.isEmpty()) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_CPU_PROFILE_EMPTY); } else { vmBase.setCpuProfileId(cpuProfilesWithPermissions.get(0).getId()); return org.ovirt.engine.core.bll.ValidationResult.VALID; } }
public static java.lang.String signCertificateRequest(java.lang.String request, java.lang.String name, java.lang.String hostname) throws java.io.IOException { org.ovirt.engine.core.utils.EngineLocalConfig config = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance(); try (final java.io.OutputStream os = new java.io.FileOutputStream(new java.io.File(new java.io.File(config.getPKIDir(), "requests"), java.lang.String.format("%s.req", name)))) { os.write(request.getBytes(java.nio.charset.StandardCharsets.UTF_8)); } if (!(new org.ovirt.engine.core.utils.hostinstall.OpenSslCAWrapper().signCertificateRequest(new java.io.File(new java.io.File(config.getUsrDir(), "bin"), "pki-enroll-request.sh"), name, hostname))) { throw new java.lang.RuntimeException( enrollment failed } return <START_MOD>new java.lang.String(java.nio.file.Files.readAllBytes<END_MOD>(new java.io.File(new java.io.File(config.getPKIDir(), "certs"), java.lang.String.format("%s.cer", name)).<START_MOD>toPath()<END_MOD>)); }	public static java.lang.String signCertificateRequest(java.lang.String request, java.lang.String name, java.lang.String hostname) throws java.io.IOException { org.ovirt.engine.core.utils.EngineLocalConfig config = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance(); try (final java.io.OutputStream os = new java.io.FileOutputStream(new java.io.File(new java.io.File(config.getPKIDir(), "requests"), java.lang.String.format("%s.req", name)))) { os.write(request.getBytes(java.nio.charset.StandardCharsets.UTF_8)); } if (!(new org.ovirt.engine.core.utils.hostinstall.OpenSslCAWrapper().signCertificateRequest(new java.io.File(new java.io.File(config.getUsrDir(), "bin"), "pki-enroll-request.sh"), name, hostname))) { throw new java.lang.RuntimeException("Certificate enrollment failed"); } return new java.lang.String(java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(config.getPKIDir().getPath(), "certs", java.lang.String.format("%s.cer", name)))); }
private static java.lang.String loadFile(java.lang.String fileName) { java.lang.String content = ""; fileName = org.ovirt.engine.core.common.config.ConfigUtil.resolvePath(org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.getSysprepDir(), fileName); <START_MOD>java.io.File file = new java.io.File(fileName); <END_MOD>if (<START_MOD>file.exists()) { try { content = <END_MOD>new java.<START_MOD>lang.String(java.nio.file.Files.readAllBytes(file.toPath())<END_MOD>); } catch (java.lang.Exception e) { org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.log.error( to read sysprep template '{}': {} fileName, e.getMessage()); org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.log.debug("Exception", e); } } else { org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.log.error( template: '{}' not found fileName); } return content; }	private static java.lang.String loadFile(java.lang.String fileName) { java.lang.String content = ""; fileName = org.ovirt.engine.core.common.config.ConfigUtil.resolvePath(org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.getSysprepDir(), fileName); java.nio.file.Path path = java.nio.file.Paths.get(fileName); if (java.nio.file.Files.exists(path)) { try { content = new java.lang.String(java.nio.file.Files.readAllBytes(path)); } catch (java.lang.Exception e) { org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.log.error("Failed to read sysprep template '{}': {}", fileName, e.getMessage()); org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.log.debug("Exception", e); } } else { org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.log.error("Sysprep template: '{}' not found", fileName); } return content; }
public static java.lang.String signOpenSSHCertificate(java.lang.String name, java.lang.String hostname, java.lang.String principal) throws java.io.IOException { org.ovirt.engine.core.utils.EngineLocalConfig config = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance(); if (!(new org.ovirt.engine.core.utils.hostinstall.OpenSslCAWrapper().signOpenSSHCertificate(new java.io.File(new java.io.File(config.getUsrDir(), "bin"), "pki-enroll-openssh-cert.sh"), name, hostname, principal))) { throw new java.lang.RuntimeException( certificate enrollment failed } return <START_MOD>new java.lang.String(java.nio.file.Files.readAllBytes<END_MOD>(new java.io.File(new java.io.File(config.getPKIDir(), "certs"), java.lang.String.format("%s-cert.pub", name)).<START_MOD>toPath()<END_MOD>)); }	public static java.lang.String signOpenSSHCertificate(java.lang.String name, java.lang.String hostname, java.lang.String principal) throws java.io.IOException { org.ovirt.engine.core.utils.EngineLocalConfig config = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance(); if (!(new org.ovirt.engine.core.utils.hostinstall.OpenSslCAWrapper().signOpenSSHCertificate(new java.io.File(new java.io.File(config.getUsrDir(), "bin"), "pki-enroll-openssh-cert.sh"), name, hostname, principal))) { throw new java.lang.RuntimeException("OpenSSH certificate enrollment failed"); } return new java.lang.String(java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(config.getPKIDir().getPath(), "certs", java.lang.String.format("%s-cert.pub", name)))); }
public static void endFinalizingStepOrCurrentStep(org.ovirt.engine.core.bll.job.ExecutionContext context, boolean exitStatus) { if (context == null) { return; } try { org.ovirt.engine.core.common.job.Step parentStep = context.getStep(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsStep)) && (parentStep != null)) { org.ovirt.engine.core.common.job.Step finalizingStep = parentStep.getStep(StepEnum.FINALIZING); if (finalizingStep != null) { finalizingStep.markStepEnded(exitStatus); org.ovirt.engine.core.bll.job.JobRepositoryFactory.getJobRepository().updateStep(finalizingStep); } parentStep.markStepEnded(exitStatus); org.ovirt.engine.core.bll.job.JobRepositoryFactory.getJobRepository().updateStep(parentStep); } } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.job.ExecutionHandler.log.error("Exception", e); } }	public static void endFinalizingStepAndCurrentStep(org.ovirt.engine.core.bll.job.ExecutionContext context, boolean exitStatus) { if (context == null) { return; } try { org.ovirt.engine.core.common.job.Step parentStep = context.getStep(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsStep)) && (parentStep != null)) { org.ovirt.engine.core.common.job.Step finalizingStep = parentStep.getStep(StepEnum.FINALIZING); if (finalizingStep != null) { finalizingStep.markStepEnded(exitStatus); org.ovirt.engine.core.bll.job.JobRepositoryFactory.getJobRepository().updateStep(finalizingStep); } parentStep.markStepEnded(exitStatus); org.ovirt.engine.core.bll.job.JobRepositoryFactory.getJobRepository().updateStep(parentStep); } } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.job.ExecutionHandler.log.error("Exception", e); } }
public static void <START_MOD>endTaskStepAndJob<END_MOD>(org.ovirt.engine.core.bll.job.ExecutionContext context, boolean exitStatus) { org.ovirt.engine.core.bll.job.ExecutionHandler.<START_MOD>endFinalizingStepOrCurrentStep<END_MOD>(context, exitStatus); org.ovirt.engine.core.bll.job.<START_MOD>ExecutionHandler<END_MOD>.<START_MOD>endTaskJobIfNeeded<END_MOD>(<START_MOD>context, exitStatus<END_MOD>); }	public static void endTaskStepAndJob(org.ovirt.engine.core.bll.job.ExecutionContext context, boolean exitStatus) { org.ovirt.engine.core.bll.job.ExecutionHandler.endFinalizingStepAndCurrentStep(context, exitStatus); org.ovirt.engine.core.bll.job.ExecutionHandler.endTaskJobIfNeeded(context, exitStatus); }
public static void endTaskJobIfNeeded(org.ovirt.engine.core.bll.job.ExecutionContext context, boolean exitStatus) { if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsJob)) && ((context.getJob()) != null)) { org.ovirt.engine.core.bll.job.ExecutionHandler.endJob(context, exitStatus); } else { org.ovirt.engine.core.common.job.Step parentStep = context.getStep(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsStep)) && (parentStep != null)) { java.util.List<org.ovirt.engine.core.common.job.Step> steps = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStepDao().getStepsByJobId(parentStep.getJobId()); boolean hasChildStepsRunning = false; for (org.ovirt.engine.core.common.job.Step step : steps) { if (((step.getStatus()) == (org.ovirt.engine.core.common.job.JobExecutionStatus.STARTED)) && ((step.getParentStepId()) != null)) { hasChildStepsRunning = true; break; } } if (!hasChildStepsRunning) { org.ovirt.engine.core.bll.job.ExecutionHandler.endJob(exitStatus, org.ovirt.engine.core.bll.job.JobRepositoryFactory.getJobRepository().getJob(parentStep.getJobId())); } } } }	public static void endTaskJobIfNeeded(org.ovirt.engine.core.bll.job.ExecutionContext context, boolean exitStatus) { if (context == null) { return; } if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsJob)) && ((context.getJob()) != null)) { org.ovirt.engine.core.bll.job.ExecutionHandler.endJob(context, exitStatus); } else { org.ovirt.engine.core.common.job.Step parentStep = context.getStep(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsStep)) && (parentStep != null)) { java.util.List<org.ovirt.engine.core.common.job.Step> steps = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStepDao().getStepsByJobId(parentStep.getJobId()); boolean hasChildStepsRunning = false; for (org.ovirt.engine.core.common.job.Step step : steps) { if (((step.getStatus()) == (org.ovirt.engine.core.common.job.JobExecutionStatus.STARTED)) && ((step.getParentStepId()) != null)) { hasChildStepsRunning = true; break; } } if (!hasChildStepsRunning) { org.ovirt.engine.core.bll.job.ExecutionHandler.endJob(exitStatus, org.ovirt.engine.core.bll.job.JobRepositoryFactory.getJobRepository().getJob(parentStep.getJobId())); } } } }
public static boolean validHostname(java.lang.String s) { if ((s == null) || (s.trim().isEmpty())) { return false; } <START_MOD>return<END_MOD> <START_MOD>(org.ovirt.engine.core.common.utils.ValidationUtils.isValidIpAddressOrHostname(s))<END_MOD> <START_MOD>|| (org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>common.utils.ValidationUtils.isValidIpv6Address<END_MOD>(s)); }	public static boolean validHostname(java.lang.String address) { if ((address == null) || (address.trim().isEmpty())) { return false; } return (org.ovirt.engine.core.common.utils.ValidationUtils.isValidIpAddressOrHostname(address)) || (org.ovirt.engine.core.common.utils.ValidationUtils.isValidIpv6Address(address)); }
private static boolean isValidIpv6Address(java.lang.String address) { final java.lang.String quotedIpv6 = java.lang.String.format("[%s]", address); return org.ovirt.engine.core.common.utils.ValidationUtils.isValidIpAddressOrHostname(quotedIpv6); }	private static boolean isValidIpv6Address(java.lang.String address) { final java.lang.String quotedIpv6 = ("[" + address) + "]"; return org.ovirt.engine.core.common.utils.ValidationUtils.isValidIpAddressOrHostname(quotedIpv6); }
@org.junit.Test public void testEmptyStringIsInvalid() { org.junit.Assert.assertFalse(underTest.isValid("", mockConstraintValidatorContext)); }	@org.junit.Test public void testEmptyStringIsInvalid() { doTest("", false); }
@org.junit.Test public void testStandardIsValid() { assertTrue(underTest.isValid("0123:1234:7:8:12CD:0ABC:ABcd:cdef", mockConstraintValidatorContext)); }	@org.junit.Test public void testStandardIsValid() { doTest("0123:1234:7:8:12CD:0ABC:ABcd:cdef", true); }
@org.junit.Test public void testNullIsValid() { assertTrue(underTest.isValid(null, mockConstraintValidatorContext)); }	@org.junit.Test public void testNullIsValid() { doTest(null, true); }
@org.junit.Test public void testHexCompressedIsValid() { assertTrue(underTest.isValid("1234::cdef", mockConstraintValidatorContext)); }	@org.junit.Test public void testHexCompressedIsValid() { doTest("1234::cdef", true); }
@org.junit.Test public void testIpv4IsInvalid() { org.junit.Assert.assertFalse(underTest.isValid("1.2.3.4", mockConstraintValidatorContext)); }	@org.junit.Test public void testIpv4IsInvalid() { doTest("1.2.3.4", false); }
@java.lang.Override public boolean isValid(java.lang.String value, javax.validation.ConstraintValidatorContext context) { return (value == null) || (org.apache.http.conn.util.InetAddressUtils.isIPv6Address(value)); }	@java.lang.Override public boolean isValid(java.lang.String value, javax.validation.ConstraintValidatorContext context) { return (value == null) || (org.ovirt.engine.core.common.validation.Ipv6Constraint.ipv6Pattern.matcher(value).matches()); }
@org.junit.Test public void testAllowSettingHaOnNonHostedEngine() { prepareVmToPassValidate(); command.initEffectiveCompatibilityVersion(); vm.setOrigin(OriginType.RHEV); vmStatic.setOrigin(OriginType.RHEV); command.getParameters().getVm().setAutoStartup(true); boolean validInput = command.validate(); assertTrue(validInput); }	@org.junit.Test public void testAllowSettingHaOnNonHostedEngine() { prepareVmToPassCanDoAction(); vm.setOrigin(OriginType.RHEV); vmStatic.setOrigin(OriginType.RHEV); command.getParameters().getVm().setAutoStartup(true); boolean validInput = command.canDoAction(); assertTrue(validInput); }
@org.junit.Test public void testBlockSettingHaOnHostedEngine() { prepareVmToPassValidate(); command.initEffectiveCompatibilityVersion(); vm.setOrigin(OriginType.MANAGED_HOSTED_ENGINE); vmStatic.setOrigin(OriginType.MANAGED_HOSTED_ENGINE); command.getParameters().getVm().setAutoStartup(true); boolean validInput = command.validate(); assertFalse(validInput); assertTrue(command.getReturnValue().getValidationMessages().contains(org.ovirt.engine.core.bll.ACTION_TYPE_FAILED_VM_CANNOT_BE_HIGHLY_AVAILABLE_AND_HOSTED_ENGINE.name())); }	@org.junit.Test public void testBlockSettingHaOnHostedEngine() { prepareVmToPassCanDoAction(); vm.setOrigin(OriginType.MANAGED_HOSTED_ENGINE); vmStatic.setOrigin(OriginType.MANAGED_HOSTED_ENGINE); command.getParameters().getVm().setAutoStartup(true); boolean validInput = command.canDoAction(); assertFalse(validInput); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(org.ovirt.engine.core.bll.ACTION_TYPE_FAILED_VM_CANNOT_BE_HIGHLY_AVAILABLE_AND_HOSTED_ENGINE.name())); }
private void generateEnumWriteOne(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getEnumName(type); java.lang.String tag = schemaNames.getSchemaTagName(type.getName()); javaBuffer.addImport(typeName); javaBuffer.addImport(org.ovirt.api.metamodel.runtime.json.JsonWriter.class); javaBuffer.addLine( static void writeOne(%1$s object, JsonWriter writer) { typeName.getSimpleName()); javaBuffer.addLine( writeOne(object, null, writer); javaBuffer.addLine("}"); javaBuffer.addLine(); javaBuffer.addLine( static void writeOne(%1$s object, String name, JsonWriter writer) { typeName.getSimpleName()); javaBuffer.addLine( (name != null) { javaBuffer.addLine("writer.writeStartObject(name);"); javaBuffer.addLine("}"); javaBuffer.addLine( { javaBuffer.addLine("writer.writeStartObject();"); javaBuffer.addLine("}"); javaBuffer.addLine( object.value()); javaBuffer.addLine("writer.writeEnd();"); javaBuffer.addLine("}"); javaBuffer.addLine(); }	private void generateEnumWriteOne(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getEnumName(type); javaBuffer.addImport(typeName); javaBuffer.addImport(org.ovirt.api.metamodel.runtime.json.JsonWriter.class); javaBuffer.addLine("public static void writeOne(%1$s object, JsonWriter writer) {", typeName.getSimpleName()); javaBuffer.addLine(" writeOne(object, null, writer);"); javaBuffer.addLine("}"); javaBuffer.addLine(); javaBuffer.addLine("public static void writeOne(%1$s object, String name, JsonWriter writer) {", typeName.getSimpleName()); javaBuffer.addLine("if (name != null) {"); javaBuffer.addLine("writer.writeStartObject(name);"); javaBuffer.addLine("}"); javaBuffer.addLine("else {"); javaBuffer.addLine("writer.writeStartObject();"); javaBuffer.addLine("}"); javaBuffer.addLine("writer.writeString(name, object.value());"); javaBuffer.addLine("writer.writeEnd();"); javaBuffer.addLine("}"); javaBuffer.addLine(); }
private void generateEnumReadOne(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getEnumName(type); javaBuffer.addImport(typeName); javaBuffer.addImport(org.ovirt.api.metamodel.runtime.json.JsonReader.class); javaBuffer.addImport(JsonParser.Event.class); javaBuffer.addLine( static %1$s readOne(JsonReader reader) { typeName.getSimpleName()); javaBuffer.addLine( readOne(reader, <START_MOD>true<END_MOD>); javaBuffer.addLine("}"); javaBuffer.addLine(); javaBuffer.addLine( static %1$s readOne(JsonReader reader, boolean started) { typeName.getSimpleName()); javaBuffer.addLine( (!started) { javaBuffer.addLine("reader.expect(Event.START_OBJECT);"); javaBuffer.addLine("}"); javaBuffer.addLine( %1$s.fromValue(reader.readString()); typeName.getSimpleName()); javaBuffer.addLine("}"); javaBuffer.addLine(); }	private void generateEnumReadOne(org.ovirt.api.metamodel.concepts.EnumType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getEnumName(type); javaBuffer.addImport(typeName); javaBuffer.addImport(org.ovirt.api.metamodel.runtime.json.JsonReader.class); javaBuffer.addImport(JsonParser.Event.class); javaBuffer.addLine("public static %1$s readOne(JsonReader reader) {", typeName.getSimpleName()); javaBuffer.addLine("return %1$s.fromValue(reader.readString());", typeName.getSimpleName()); javaBuffer.addLine("}"); javaBuffer.addLine(); }
org.ovirt.engine.core.bll.ValidationResult notRemovingLabeledNetworks(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { org.ovirt.engine.core.common.businessentities.network.Network removedNetwork = existingNetworkRelatedToAttachment(attachment); if (!(org.ovirt.engine.core.utils.NetworkUtils.isLabeled(removedNetwork))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } boolean networkAttachedToNicByAnotherAttachment = (<START_MOD>networkAttachmentsFromParamsByNetworkId<END_MOD>.get(removedNetwork.getId())) != null; org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_LABELED_NETWORK_FROM_NIC; return org.ovirt.engine.core.bll.ValidationResult.failWith(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentStringWithMultipleValues(engineMessage, removedNetwork.getName())).when(((!networkAttachedToNicByAnotherAttachment) && (isNicToConfigureContainTheLabel(attachment.getNicName(), removedNetwork.getLabel())))); }	org.ovirt.engine.core.bll.ValidationResult notRemovingLabeledNetworks(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { org.ovirt.engine.core.common.businessentities.network.Network removedNetwork = existingNetworkRelatedToAttachment(attachment); if (!(org.ovirt.engine.core.utils.NetworkUtils.isLabeled(removedNetwork))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_LABELED_NETWORK_FROM_NIC; return org.ovirt.engine.core.bll.ValidationResult.failWith(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentStringWithMultipleValues(engineMessage, removedNetwork.getName())).when(isNicToConfigureContainTheLabel(attachment.getNicName(), removedNetwork.getLabel())); }
org.ovirt.engine.core.bll.ValidationResult notMovingLabeledNetworkToDifferentNic(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment <START_MOD>newOrModifedAttachmet<END_MOD>) { org.ovirt.engine.core.common.businessentities.network.Network movedNetwork = existingNetworkRelatedToAttachment(<START_MOD>newOrModifedAttachmet<END_MOD>); if (!(org.ovirt.engine.core.utils.NetworkUtils.isLabeled(movedNetwork))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } org.ovirt.engine.core.common.businessentities.network.NetworkAttachment existingAttachment = <START_MOD>existingAttachmentsByNetworkId<END_MOD>.get(<START_MOD>newOrModifedAttachmet.getNetworkId<END_MOD>()); boolean movedToDifferentNic = !(existingAttachment.getNicId().equals(<START_MOD>newOrModifedAttachmet<END_MOD>.getNicId())); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CANNOT_MOVE_LABELED_NETWORK_TO_ANOTHER_NIC; return org.ovirt.engine.core.bll.ValidationResult.failWith(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.VAR_NETWORK_NAME, movedNetwork.getName()), org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(engineMessage, movedNetwork.getLabel())).when((movedToDifferentNic && (isNicToConfigureContainTheLabel(existingAttachment.getNicName(), movedNetwork.getLabel())))); }	org.ovirt.engine.core.bll.ValidationResult notMovingLabeledNetworkToDifferentNic(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment newOrModifedAttachmet) { org.ovirt.engine.core.common.businessentities.network.Network movedNetwork = existingNetworkRelatedToAttachment(newOrModifedAttachmet); if (!(org.ovirt.engine.core.utils.NetworkUtils.isLabeled(movedNetwork))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } org.ovirt.engine.core.common.businessentities.network.NetworkAttachment existingAttachment = existingAttachmentsById.get(newOrModifedAttachmet.getId()); boolean movedToDifferentNic = !(existingAttachment.getNicId().equals(newOrModifedAttachmet.getNicId())); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CANNOT_MOVE_LABELED_NETWORK_TO_ANOTHER_NIC; return org.ovirt.engine.core.bll.ValidationResult.failWith(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.VAR_NETWORK_NAME, movedNetwork.getName()), org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(engineMessage, movedNetwork.getLabel())).when((movedToDifferentNic && (isNicToConfigureContainTheLabel(existingAttachment.getNicName(), movedNetwork.getLabel())))); }
private org.ovirt.engine.core.bll.ValidationResult validRemovedNetworkAttachments() { java.util.List<org.ovirt.engine.core.compat.Guid> invalidIds = org.ovirt.engine.core.common.businessentities.Entities.idsNotReferencingExistingRecords(params.getRemovedNetworkAttachments(), existingAttachments); if (!(invalidIds.isEmpty())) { org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_ATTACHMENTS_NOT_EXISTS; return new org.ovirt.engine.core.bll.ValidationResult(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage, invalidIds)); } org.ovirt.engine.core.bll.ValidationResult vr = org.ovirt.engine.core.bll.ValidationResult.VALID; java.util.Iterator<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> iterator = removedNetworkAttachments.iterator(); while ((iterator.hasNext()) && (vr.isValid())) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = iterator.next(); org.ovirt.engine.core.<START_MOD>bll.validator.NetworkAttachmentValidator validator = createNetworkAttachmentValidator<END_MOD>(attachment<START_MOD>); vr = (skipValidation(vr)) ? vr : <END_MOD>validator.<START_MOD>networkAttachmentIsSet(); vr = (skipValidation(vr)) ? vr :<END_MOD> validator<START_MOD>.notExternalNetwork(); if (!(networkAttachmentsFromParamsByNetworkId.containsKey(attachment.getNetworkId()))) {<END_MOD> vr = (skipValidation(vr)) ? vr : validator.<START_MOD>notRemovingManagementNetwork<END_MOD>(); vr = (skipValidation(vr)) ? vr : <START_MOD>notRemovingLabeledNetworks(attachment<END_MOD>); vr = (skipValidation(vr)) ? vr : <START_MOD>validateNotRemovingUsedNetworkByVms<END_MOD>(attachment<START_MOD>.getNetworkName()<END_MOD>); } <START_MOD>} <END_MOD>return vr; }	private org.ovirt.engine.core.bll.ValidationResult validRemovedNetworkAttachments() { java.util.List<org.ovirt.engine.core.compat.Guid> invalidIds = org.ovirt.engine.core.common.businessentities.Entities.idsNotReferencingExistingRecords(params.getRemovedNetworkAttachments(), existingAttachments); if (!(invalidIds.isEmpty())) { org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_ATTACHMENTS_NOT_EXISTS; return new org.ovirt.engine.core.bll.ValidationResult(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage, invalidIds)); } org.ovirt.engine.core.bll.ValidationResult vr = org.ovirt.engine.core.bll.ValidationResult.VALID; java.util.Iterator<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> iterator = removedNetworkAttachments.iterator(); while ((iterator.hasNext()) && (vr.isValid())) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = iterator.next(); org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator validator = createNetworkAttachmentValidator(attachment); vr = (skipValidation(vr)) ? vr : validator.networkAttachmentIsSet(); vr = (skipValidation(vr)) ? vr : validator.notExternalNetwork(); vr = (skipValidation(vr)) ? vr : validator.notRemovingManagementNetwork(); vr = (skipValidation(vr)) ? vr : notRemovingLabeledNetworks(attachment); vr = (skipValidation(vr)) ? vr : validateNotRemovingUsedNetworkByVms(attachment.getNetworkName()); } return vr; }
private void initToolTips() { numberOfCoresTooltip.setText(org.ovirt.engine.ui.userportal.section.main.view.tab.basic.MainTabBasicDetailsView.constants.numOfCoresTooltipBasicDetails()); }	private void initToolTips() { numberOfCoresTooltip.setHtml(org.ovirt.engine.ui.userportal.section.main.view.tab.basic.MainTabBasicDetailsView.templates.numOfCpuCoresTooltip()); }
public static boolean configurableMigrationsSupported(org.ovirt.engine.core.compat.Version version) { return org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.ConfigurableMigrations, version); }	public static boolean migrationPoliciesSupported(org.ovirt.engine.core.compat.Version version) { return org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.MigrationPoliciesSupported, version); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.profiles.AddProfileCommandBase.getParameters().getProfile().setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.profiles.AddProfileCommandBase.getProfileDao().save(org.ovirt.engine.core.bll.profiles.AddProfileCommandBase.getParameters().getProfile()); org.ovirt.engine.core.bll.profiles.AddProfileCommandBase.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.profiles.AddProfileCommandBase.getParameters().getProfile().getId()); org.ovirt.engine.core.bll.profiles.AddProfileCommandBase.setSucceeded(true); <START_MOD>if (this.getParameters().getShouldAddPermissions()) { addPermissions(); <END_MOD>}<START_MOD> }<END_MOD>	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.profiles.AddProfileCommandBase.getParameters().getProfile().setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.profiles.AddProfileCommandBase.getProfileDao().save(org.ovirt.engine.core.bll.profiles.AddProfileCommandBase.getParameters().getProfile()); org.ovirt.engine.core.bll.profiles.AddProfileCommandBase.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.profiles.AddProfileCommandBase.getParameters().getProfile().getId()); if (org.ovirt.engine.core.bll.profiles.AddProfileCommandBase.getParameters().isAddPermissions()) { addPermissions(); } org.ovirt.engine.core.bll.profiles.AddProfileCommandBase.setSucceeded(true); }
@java.lang.Override protected void addPermissions() { org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.addPermission(new org.ovirt.engine.core.common.businessentities.Permission(org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID, PredefinedRoles.CPU_PROFILE_OPERATOR.getId(), getProfileId(), org.ovirt.engine.core.common.VdcObjectType.CpuProfile)); }	@java.lang.Override protected void addPermissions() { org.ovirt.engine.core.common.action.PermissionsOperationsParameters permissionsOperationsParameters = createPermissionParameters(MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID, PredefinedRoles.CPU_PROFILE_OPERATOR.getId()); getBackend().runAction(VdcActionType.AddPermission, permissionsOperationsParameters); permissionsOperationsParameters = createPermissionParameters(getUserId(), PredefinedRoles.CPU_PROFILE_CREATOR.getId()); getBackend().runAction(VdcActionType.AddPermission, permissionsOperationsParameters); }
public boolean getShouldAddPermissions() { return shouldAddPermissions; }	public boolean isAddPermissions() { return addPermissions; }
public void setShouldAddPermissions(boolean shouldAddPermissions) { this.shouldAddPermissions = shouldAddPermissions; }	public void setAddPermissions(boolean addPermissions) { this.addPermissions = addPermissions; }
private void generateBaseContainerSource() { org.ovirt.api.metamodel.tool.JavaClassName containerName = javaTypes.getBaseContainerName(); javaBuffer.addLine( class %1$s { containerName.getSimpleName()); javaBuffer.addLine(<START_MOD>); javaBuffer.addLine( String href; javaBuffer.addLine(); javaBuffer.addLine( String href() { javaBuffer.addLine( href; javaBuffer.addLine("}"); javaBuffer.addLine(); javaBuffer.addLine( void href(String href) { javaBuffer.addLine( = href; javaBuffer.addLine("}"); javaBuffer.addLine(<END_MOD>"}"); }	private void generateBaseContainerSource() { org.ovirt.api.metamodel.tool.JavaClassName containerName = javaTypes.getBaseContainerName(); javaBuffer.addLine("public class %1$s {", containerName.getSimpleName()); javaBuffer.addLine("}"); }
private void generateStructReadOne(org.ovirt.api.metamodel.concepts.StructType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getInterfaceName(type); org.ovirt.api.metamodel.tool.JavaClassName containerName = javaTypes.getContainerName(type); javaBuffer.addImport(typeName); javaBuffer.addImport(containerName); javaBuffer.addImport(JsonParser.Event.class); javaBuffer.addImport(org.ovirt.api.metamodel.runtime.json.JsonReader.class); javaBuffer.addLine( static %1$s readOne(JsonReader reader) { typeName.getSimpleName()); javaBuffer.addLine( readOne(reader, false); javaBuffer.addLine("}"); javaBuffer.addLine(); java.util.List<org.ovirt.api.metamodel.concepts.StructMember> members = new java.util.ArrayList<>(); members.addAll(type.getAttributes()); members.addAll(type.getLinks()); javaBuffer.addLine( static %1$s readOne(JsonReader reader, boolean started) { typeName.getSimpleName()); javaBuffer.addLine( (!started) { javaBuffer.addLine("reader.expect(Event.START_OBJECT);"); javaBuffer.addLine("}"); javaBuffer.addLine( object = new %1$s(); containerName.getSimpleName()); javaBuffer.addLine( (reader.next() == Event.KEY_NAME) { if (members.isEmpty()) { javaBuffer.addLine("reader.skip();"); } else { javaBuffer.addLine( name = reader.getString(); javaBuffer.addLine( (name) { members.stream().sorted().forEach(this::generateStructReadMember); javaBuffer.addLine(<START_MOD>   javaBuffer.addLine("object.href(reader.readString());"); javaBuffer.addLine("break;"); javaBuffer.addLine(<END_MOD>"default:"); javaBuffer.addLine("reader.skip();"); javaBuffer.addLine("}"); } javaBuffer.addLine("}"); javaBuffer.addLine( object; javaBuffer.addLine("}"); javaBuffer.addLine(); }	private void generateStructReadOne(org.ovirt.api.metamodel.concepts.StructType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = javaTypes.getInterfaceName(type); org.ovirt.api.metamodel.tool.JavaClassName containerName = javaTypes.getContainerName(type); javaBuffer.addImport(typeName); javaBuffer.addImport(containerName); javaBuffer.addImport(JsonParser.Event.class); javaBuffer.addImport(org.ovirt.api.metamodel.runtime.json.JsonReader.class); javaBuffer.addLine("public static %1$s readOne(JsonReader reader) {", typeName.getSimpleName()); javaBuffer.addLine("return readOne(reader, false);"); javaBuffer.addLine("}"); javaBuffer.addLine(); java.util.List<org.ovirt.api.metamodel.concepts.StructMember> members = new java.util.ArrayList<>(); members.addAll(type.getAttributes()); members.addAll(type.getLinks()); javaBuffer.addLine("public static %1$s readOne(JsonReader reader, boolean started) {", typeName.getSimpleName()); javaBuffer.addLine("if (!started) {"); javaBuffer.addLine("reader.expect(Event.START_OBJECT);"); javaBuffer.addLine("}"); javaBuffer.addLine("%1$s object = new %1$s();", containerName.getSimpleName()); javaBuffer.addLine("while (reader.next() == Event.KEY_NAME) {"); if (members.isEmpty()) { javaBuffer.addLine("reader.skip();"); } else { javaBuffer.addLine("String name = reader.getString();"); javaBuffer.addLine("switch (name) {"); members.stream().sorted().forEach(this::generateStructReadMember); javaBuffer.addLine("default:"); javaBuffer.addLine("reader.skip();"); javaBuffer.addLine("}"); } javaBuffer.addLine("}"); javaBuffer.addLine("return object;"); javaBuffer.addLine("}"); javaBuffer.addLine(); }
@java.lang.Override public boolean isLink(<START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.sdk.types.Identified<END_MOD> object) { <START_MOD>return<END_MOD> (object.<START_MOD>href<END_MOD>()) <START_MOD>!=<END_MOD> <START_MOD>null<END_MOD>; }	@java.lang.Override public boolean isLink(java.lang.Object object) { if (object instanceof org.ovirt.engine.sdk.types.Identified) { return (((org.ovirt.engine.sdk.types.Identified) (object)).href()) != null; } return false; }
@java.lang.Override public <<START_MOD>T extends org.ovirt.engine.sdk.types.Identified<END_MOD>> <START_MOD>T<END_MOD> followLink(<START_MOD>org.ovirt.engine.sdk.types.Identified<END_MOD> object) { if (!(isLink(object))) { throw new java.lang.RuntimeException( follow link because object don have any. } try { java.lang.<START_MOD>String href = object.href(); if (href == null) { throw new java.lang.RuntimeException( follow link because the 'href' attribute does have a value } java.net.URL url = new java.net.URL(getUrl()); java.lang.String prefix = url.getPath(); if (!(prefix.endsWith("/"))) { prefix += "/"; } if (!(href.startsWith(prefix))) { throw new java.lang.RuntimeException((( URL   + href) +   isn compatible with the base URL of the connection } java.lang.String path = href.substring(prefix.length()); org.ovirt.engine.sdk.Service service = systemService().service(path); java.lang.<END_MOD>reflect.Method <START_MOD>get = service<END_MOD>.getClass().getMethod(<START_MOD>"get"); get.setAccessible(true); java.lang.Object getRequest = get<END_MOD>.invoke(service<START_MOD>); java.lang.reflect.Method send = getRequest.getClass().getMethod("send"); send.setAccessible(true<END_MOD>); java.lang.Object <START_MOD>getReponse = send.invoke(<END_MOD>getRequest<START_MOD>); java.lang.reflect.Method obtainObject = <END_MOD>getReponse.getClass().getDeclaredMethods()[0]<START_MOD>; obtainObject.setAccessible(true); return ((T) (obtainObject<END_MOD>.invoke(getReponse))); } catch (java.lang.NoSuchMethodException ex) { throw new java.lang.RuntimeException(ex); } catch (java.lang.IllegalAccessException ex) { throw new java.lang.RuntimeException(ex); } catch (java.lang.reflect.InvocationTargetException ex) { throw new java.lang.RuntimeException(ex); } catch (java.net.MalformedURLException ex) { throw new java.lang.RuntimeException(ex); } }	@java.lang.Override public <TYPE> TYPE followLink(TYPE object) { if (!(isLink(object))) { throw new java.lang.RuntimeException("Can't follow link because object don't have any."); } try { java.lang.String href = ((org.ovirt.engine.sdk.types.Identified) (object)).href(); if (href == null) { throw new java.lang.RuntimeException("Can't follow link because the 'href' attribute does't have a value"); } java.net.URL url = new java.net.URL(getUrl()); java.lang.String prefix = url.getPath(); if (!(prefix.endsWith("/"))) { prefix += "/"; } if (!(href.startsWith(prefix))) { throw new java.lang.RuntimeException((("The URL '" + href) + "' isn't compatible with the base URL of the connection")); } java.lang.String path = href.substring(prefix.length()); org.ovirt.engine.sdk.Service service = systemService().service(path); java.lang.reflect.Method get = service.getClass().getMethod("get"); java.lang.Object getRequest = get.invoke(service); java.lang.reflect.Method send = getRequest.getClass().getMethod("send"); send.setAccessible(true); java.lang.Object getResponse = send.invoke(getRequest); java.lang.reflect.Method obtainObject = getResponse.getClass().getDeclaredMethods()[0]; obtainObject.setAccessible(true); return ((TYPE) (obtainObject.invoke(getResponse))); } catch (java.lang.NoSuchMethodException ex) { throw new java.lang.RuntimeException(ex); } catch (java.lang.IllegalAccessException ex) { throw new java.lang.RuntimeException(ex); } catch (java.lang.reflect.InvocationTargetException ex) { throw new java.lang.RuntimeException(ex); } catch (java.net.MalformedURLException ex) { throw new java.lang.RuntimeException(ex); } }
boolean isLink(<START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.sdk.types.Identified<END_MOD> object);	boolean isLink(java.lang.Object object);
<<START_MOD>T extends org.ovirt.engine.sdk.types.Identified<END_MOD>> <START_MOD>T<END_MOD> followLink(<START_MOD>org.ovirt.engine.sdk.types.Identified<END_MOD> object);	<TYPE> TYPE followLink(TYPE object);
@java.lang.Override <START_MOD>protected<END_MOD> <START_MOD>org.ovirt.engine.core.common.queries.ConfigurationValues<END_MOD> <START_MOD>spiceFullScreenConfigKey<END_MOD>() { return <START_MOD>org<END_MOD>.<START_MOD>ovirt.engine.core.common.queries.ConfigurationValues.FullScreenUserportalDefault<END_MOD>; }	@java.lang.Override protected org.ovirt.engine.core.common.queries.ConfigurationValues spiceFullScreenConfigKey() { if (placeManager.isMainSectionBasicPlaceVisible()) { return org.ovirt.engine.core.common.queries.ConfigurationValues.FullScreenUserportalBasicDefault; } return org.ovirt.engine.core.common.queries.ConfigurationValues.FullScreenUserportalExtendedDefault; }
<START_MOD>public <END_MOD>static void handleIoTune(org.ovirt.engine.core.<START_MOD>vdsbroker.vdsbroker.IoTuneBuilder builder, org.ovirt.engine.core.<END_MOD>common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage<START_MOD>) { if (org.ovirt.engine.core.common.FeatureSupported.storageQoS(vm.getCompatibilityVersion())) {<END_MOD> java.util.Map<java.lang.String, java.lang.Long><START_MOD> ioTune = builder.buildIoTune(diskImage);<END_MOD> if (<START_MOD>ioTune != null) { if ((vmDevice.getSpecParams()) == null) { vmDevice.setSpecParams(new<END_MOD> java.util.<START_MOD>HashMap()); } vmDevice.getSpecParams().put(VdsProperties.Iotune,<END_MOD> ioTune); <START_MOD>} } }<END_MOD>	public static void handleIoTune(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.common.businessentities.qos.StorageQos storageQos) { if (storageQos != null) { if ((vmDevice.getSpecParams()) == null) { vmDevice.setSpecParams(new java.util.HashMap()); } vmDevice.getSpecParams().put(VdsProperties.Iotune, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.ioTuneMapFrom(storageQos)); } }
@org.junit.Test public void <START_MOD>testGetAllForCpuProfiles<END_MOD>() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> result = dao.<START_MOD>getAllForCpuProfiles(java.util.Collections.singletonList<END_MOD>(FixturesTool.CPU_PROFILE_1<START_MOD>)<END_MOD>); assertNotNull(result); assertEquals(1, result.size()); }	@org.junit.Test public void testGetAllForCpuProfiles() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> result = dao.getAllForCpuProfiles(java.util.Collections.singleton(FixturesTool.CPU_PROFILE_1)); assertNotNull(result); assertEquals(1, result.size()); }
java.util.List<org.ovirt.engine.core.common.businessentities.VM> <START_MOD>getAllForCpuProfiles<END_MOD>(<START_MOD>java.util.List<<END_MOD>org.ovirt.engine.core.compat.Guid<START_MOD>><END_MOD> <START_MOD>cpuProfileIds<END_MOD>);	java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllForCpuProfiles(java.util.Collection<org.ovirt.engine.core.compat.Guid> cpuProfileIds);
java.util.List<org.ovirt.engine.core.common.businessentities.VM> <START_MOD>getAllForDiskProfiles<END_MOD>(<START_MOD>java.util.List<<END_MOD>org.ovirt.engine.core.compat.Guid<START_MOD>><END_MOD> <START_MOD>diskProfileIds<END_MOD>);	java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllForDiskProfiles(java.util.Collection<org.ovirt.engine.core.compat.Guid> diskProfileIds);
java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> <START_MOD>getAllForDiskProfiles<END_MOD>(<START_MOD>java.util.List<<END_MOD>org.ovirt.engine.core.compat.Guid<START_MOD>><END_MOD> <START_MOD>diskProfileIds<END_MOD>);	java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAllForDiskProfiles(java.util.Collection<org.ovirt.engine.core.compat.Guid> diskProfileIds);
@org.junit.Test public void <START_MOD>testGetAllDisksByDiskProfiles<END_MOD>() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = dao.<START_MOD>getAllForDiskProfiles(java.util.Collections.singletonList<END_MOD>(FixturesTool.DISK_PROFILE_1<START_MOD>)<END_MOD>); assertNotNull(diskImages); assertEquals(6, diskImages.size()); }	@org.junit.Test public void testGetAllDisksByDiskProfiles() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = dao.getAllForDiskProfiles(java.util.Arrays.asList(FixturesTool.DISK_PROFILE_1, FixturesTool.DISK_PROFILE_2)); assertNotNull(diskImages); assertEquals(6, diskImages.size()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> <START_MOD>getAllForDiskProfiles<END_MOD>(<START_MOD>java.util.List<<END_MOD>org.ovirt.engine.core.compat.Guid<START_MOD>><END_MOD> <START_MOD>diskProfileIds<END_MOD>) {<START_MOD> java.lang.Object[] uuids = diskProfileIds.stream().map(Guid::getUuid).toArray();<END_MOD> return getCallsHandler().executeReadList("GetAllVmsRelatedToDiskProfile", org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue(<START_MOD>"disk_profile_ids"<END_MOD>, <START_MOD>createArrayOf("uuid", uuids)<END_MOD>)); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllForDiskProfiles(java.util.Collection<org.ovirt.engine.core.compat.Guid> diskProfileIds) { return getCallsHandler().executeReadList("GetAllVmsRelatedToDiskProfiles", org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("disk_profile_ids", createArrayOfUUIDs(diskProfileIds))); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> <START_MOD>getAllForCpuProfiles<END_MOD>(<START_MOD>java.util.List<<END_MOD>org.ovirt.engine.core.compat.Guid<START_MOD>><END_MOD> <START_MOD>cpuProfileIds<END_MOD>) {<START_MOD> java.lang.Object[] uuids = cpuProfileIds.stream().map(Guid::getUuid).toArray();<END_MOD> return getCallsHandler().executeReadList("GetVmsByCpuProfileId", org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue(<START_MOD>"cpu_profile_ids"<END_MOD>, <START_MOD>createArrayOf("uuid", uuids)<END_MOD>)); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllForCpuProfiles(java.util.Collection<org.ovirt.engine.core.compat.Guid> cpuProfileIds) { return getCallsHandler().executeReadList("GetVmsByCpuProfileIds", org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("cpu_profile_ids", createArrayOfUUIDs(cpuProfileIds))); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> <START_MOD>getAllForDiskProfiles<END_MOD>(<START_MOD>java.util.List<<END_MOD>org.ovirt.engine.core.compat.Guid<START_MOD>><END_MOD> <START_MOD>diskProfileIds<END_MOD>) {<START_MOD> java.lang.Object[] uuids = diskProfileIds.stream().map(Guid::getUuid).toArray();<END_MOD> org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("disk_profile_id", <START_MOD>createArrayOf("uuid", uuids)<END_MOD>); return getCallsHandler().executeReadList("GetAllForDiskProfile", org.ovirt.engine.core.dao.DiskImageDaoImpl.DiskImageRowMapper.instance, parameterSource); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAllForDiskProfiles(java.util.Collection<org.ovirt.engine.core.compat.Guid> diskProfileIds) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("disk_profile_ids", createArrayOfUUIDs(diskProfileIds)); return getCallsHandler().executeReadList("GetAllForDiskProfiles", org.ovirt.engine.core.dao.DiskImageDaoImpl.DiskImageRowMapper.instance, parameterSource); }
@org.junit.Test public void <START_MOD>testGetAllForDiskProfiles<END_MOD>() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> result = dao.<START_MOD>getAllForDiskProfiles(java.util.Collections.singletonList<END_MOD>(FixturesTool.DISK_PROFILE_1<START_MOD>)<END_MOD>); assertNotNull(result); assertEquals(2, result.size()); }	@org.junit.Test public void testGetAllForDiskProfiles() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> result = dao.getAllForDiskProfiles(java.util.Collections.singleton(FixturesTool.DISK_PROFILE_1)); assertNotNull(result); assertEquals(2, result.size()); }
@java.lang.Override protected org.ovirt.engine.core.common.action.ProfileParametersBase<org.ovirt.engine.core.common.businessentities.profiles.CpuProfile> getParameters() { return new org.ovirt.engine.core.common.action.CpuProfileParameters(getProfile()); }	@java.lang.Override protected org.ovirt.engine.core.common.action.ProfileParametersBase<org.ovirt.engine.core.common.businessentities.profiles.CpuProfile> getParameters() { org.ovirt.engine.core.common.action.CpuProfileParameters cpuProfileParameters = new org.ovirt.engine.core.common.action.CpuProfileParameters(getProfile()); cpuProfileParameters.setAddPermissions(true); return cpuProfileParameters; }
@java.lang.Override protected void init() { org.ovirt.engine.core.common.businessentities.VM vmFromConfiguration = org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().getVm(); if (vmFromConfiguration != null) { vmFromConfiguration.getStaticData().setVdsGroupId(org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().getVdsGroupId()); if (!(org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget())) { setDisksToBeAttached(vmFromConfiguration); } org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().setContainerId(vmFromConfiguration.getId()); } else { initUnregisteredVM(); } <START_MOD>org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().setVmId(org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().getVm().getId()); <END_MOD>setVdsGroupId(org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().getVdsGroupId()); org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().setStoragePoolId(org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getVdsGroup().getStoragePoolId()); super.init(); }	@java.lang.Override protected void init() { org.ovirt.engine.core.common.businessentities.VM vmFromConfiguration = org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().getVm(); if (vmFromConfiguration != null) { vmFromConfiguration.getStaticData().setVdsGroupId(org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().getVdsGroupId()); if (!(org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget())) { setDisksToBeAttached(vmFromConfiguration); } org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().setContainerId(vmFromConfiguration.getId()); } else { initUnregisteredVM(); } if ((Guid.Empty.equals(org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().getVmId())) && ((org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().getVm()) != null)) { org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().setVmId(org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().getVm().getId()); } setVdsGroupId(org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().getVdsGroupId()); org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().setStoragePoolId(org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getVdsGroup().getStoragePoolId()); super.init(); }
@org.junit.Test public void testNoStorageQuotaAssigned() { when(storageQosDao.getQosByDiskProfileId(diskImage.getDiskProfileId())).thenReturn(null); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.handleIoTune(vmDevice, org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.loadStorageQos(diskImage)); java.util.Map<java.lang.String, java.lang.Long> ioTune = ((java.util.Map<java.lang.String, java.lang.Long>) (vmDevice.getSpecParams().get(VdsProperties.Iotune))); assertNull(getIoTune(vmDevice)); }	@org.junit.Test public void testNoStorageQuotaAssigned() { when(storageQosDao.getQosByDiskProfileId(diskImage.getDiskProfileId())).thenReturn(null); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.handleIoTune(vmDevice, org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.loadStorageQos(diskImage)); assertNull(vmDevice.getSpecParams()); }
@org.junit.Test public void testNoCpuProfileAssigned() { diskImage.setDiskProfileId(null); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.handleIoTune(vmDevice, org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.loadStorageQos(diskImage)); assertNull(getIoTune(vmDevice)); }	@org.junit.Test public void testNoCpuProfileAssigned() { diskImage.setDiskProfileId(null); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.handleIoTune(vmDevice, org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.loadStorageQos(diskImage)); assertNull(vmDevice.getSpecParams()); }
@org.junit.Before public void setUp() { diskImage.setDiskProfileId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().bind(org.ovirt.engine.core.dal.dbbroker.DbFacade.class, dbFacade); org.ovirt.engine.core.dal.dbbroker.DbFacade.setInstance(dbFacade); when(dbFacade.getStorageQosDao()).thenReturn(storageQosDao); qos = new org.ovirt.engine.core.common.businessentities.qos.StorageQos(); qos.setId(org.ovirt.engine.core.compat.Guid.newGuid()); vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(); }	@org.junit.Before public void setUp() { diskImage.setDiskProfileId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance().bind(org.ovirt.engine.core.dal.dbbroker.DbFacade.class, dbFacade); org.ovirt.engine.core.dal.dbbroker.DbFacade.setInstance(dbFacade); when(dbFacade.getStorageQosDao()).thenReturn(storageQosDao); qos = new org.ovirt.engine.core.common.businessentities.qos.StorageQos(); qos.setId(org.ovirt.engine.core.compat.Guid.newGuid()); vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(); }
public void addIoTuneParams(java.lang.String domainId, java.lang.String poolId, java.lang.String imageId, java.lang.String volumeId, java.util.Map<java.lang.String, java.lang.Long> ioTune) { this.ioTuneList.add(new org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams.IoTuneParams(domainId, poolId, imageId, volumeId, ioTune)); }	public void addIoTuneParams(java.lang.String domainId, java.lang.String poolId, java.lang.String imageId, java.lang.String volumeId, java.util.Map<java.lang.String, java.lang.Long> ioTune) { addIoTuneParams(new org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams.IoTuneParams(domainId, poolId, imageId, volumeId, ioTune)); }
protected java.util.Map<java.lang.String, java.lang.Object> build() { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(<START_MOD>VdsProperties.vm_guid<END_MOD>, org.ovirt.engine.core.vdsbroker.UpdateVmPolicyVDSCommand.getParameters().getVmId().toString()); <START_MOD>if ((org.ovirt.engine.core.vdsbroker.UpdateVmPolicyVDSCommand.getParameters().getCpuLimit()) != null) { <END_MOD>struct.put(<START_MOD>VdsProperties.vCpuLimit<END_MOD>, java.lang.String.valueOf(org.ovirt.engine.core.vdsbroker.UpdateVmPolicyVDSCommand.getParameters().getCpuLimit())); <START_MOD>} java.util.List<java.lang.Object> ioTunesList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams.IoTuneParams param : org.ovirt.engine.core.vdsbroker.UpdateVmPolicyVDSCommand.getParameters().getIoTuneList()) { java.util.Map<java.lang.String, java.lang.Object> ioStruct = new java.util.HashMap<>(); if ((param.getDomainId()) != null) { ioStruct.put("domainId", param.getDomainId()); } if ((param.getPoolId()) != null) { ioStruct.put("poolId", param.getPoolId()); } if ((param.getImageId()) != null) { ioStruct.put("imageId", param.getImageId()); } if ((param.getVolumeId()) != null) { ioStruct.put("volumeId", param.getVolumeId()); } ioStruct.put("maximum", param.getIoTune()); ioTunesList.add(ioStruct); } if (!(ioTunesList.isEmpty())) { struct.put(VdsProperties.Iotune, ioTunesList); } <END_MOD>return struct; }	protected java.util.Map<java.lang.String, java.lang.Object> build() { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.vm_guid, org.ovirt.engine.core.vdsbroker.UpdateVmPolicyVDSCommand.getParameters().getVmId().toString()); if ((org.ovirt.engine.core.vdsbroker.UpdateVmPolicyVDSCommand.getParameters().getCpuLimit()) != null) { struct.put(VdsProperties.vCpuLimit, java.lang.String.valueOf(org.ovirt.engine.core.vdsbroker.UpdateVmPolicyVDSCommand.getParameters().getCpuLimit())); } java.util.List<java.lang.Object> ioTunesList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams.IoTuneParams param : org.ovirt.engine.core.vdsbroker.UpdateVmPolicyVDSCommand.getParameters().getIoTuneList()) { java.util.Map<java.lang.String, java.lang.Object> ioStruct = new java.util.HashMap<>(); ioStruct.put(VdsProperties.DomainId, param.getDomainId()); ioStruct.put(VdsProperties.PoolId, param.getPoolId()); ioStruct.put(VdsProperties.ImageId, param.getImageId()); ioStruct.put(VdsProperties.VolumeId, param.getVolumeId()); ioStruct.put(VdsProperties.IoPolicyMaximum, param.getIoTune()); ioStruct.put(VdsProperties.IoPolicyGuarenteed, param.getIoTune()); ioTunesList.add(ioStruct); } if (!(ioTunesList.isEmpty())) { struct.put(VdsProperties.Iotune, ioTunesList); } return struct; }
<START_MOD>public <END_MOD>static void handleIoTune(org.ovirt.engine.core.<START_MOD>vdsbroker.vdsbroker.IoTuneBuilder builder, org.ovirt.engine.core.<END_MOD>common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage<START_MOD>) { if (org.ovirt.engine.core.common.FeatureSupported.storageQoS(vm.getClusterCompatibilityVersion())) {<END_MOD> java.util.Map<java.lang.String, java.lang.Long><START_MOD> ioTune = builder.buildIoTune(diskImage);<END_MOD> if (<START_MOD>ioTune != null) { if ((vmDevice.getSpecParams()) == null) { vmDevice.setSpecParams(new<END_MOD> java.util.<START_MOD>HashMap()); } vmDevice.getSpecParams().put(VdsProperties.Iotune,<END_MOD> ioTune); <START_MOD>} } }<END_MOD>	public static void handleIoTune(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.common.businessentities.qos.StorageQos storageQos) { if (storageQos != null) { if ((vmDevice.getSpecParams()) == null) { vmDevice.setSpecParams(new java.util.HashMap()); } vmDevice.getSpecParams().put(VdsProperties.Iotune, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.ioTuneMapFrom(storageQos)); } }
public void addIoTuneParams(org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams.IoTuneParams params) { this.ioTuneList.add(params); }	public void addIoTuneParams(org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams.IoTuneParams params) { ioTuneList.add(params); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.<START_MOD>UpdateVmPolicyVDSParams<END_MOD> <START_MOD>params<END_MOD> = new org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams(org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVmId(), org.ovirt.engine.core.bll.VmSlaPolicyCommand.getParameters().getCpuLimit())<START_MOD>; org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.UpdateVmPolicy, params<END_MOD>); setSucceeded(vdsReturnValue.getSucceeded()); }	@java.lang.Override protected void executeCommand() { java.lang.Integer cpuLimit = null; if ((org.ovirt.engine.core.bll.VmSlaPolicyCommand.getParameters().getCpuQos()) != null) { cpuLimit = org.ovirt.engine.core.bll.VmSlaPolicyCommand.getParameters().getCpuQos().getCpuLimit(); cpuLimit = (cpuLimit != null) ? cpuLimit : 100; } org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams params = new org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams(org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVmId(), cpuLimit); for (java.util.Map.Entry<org.ovirt.engine.core.common.businessentities.storage.DiskImage, org.ovirt.engine.core.common.businessentities.qos.StorageQos> entry : org.ovirt.engine.core.bll.VmSlaPolicyCommand.getParameters().getStorageQos().entrySet()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = entry.getKey(); java.util.Map<java.lang.String, java.lang.Long> ioTuneStruct = org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.ioTuneMapFrom(entry.getValue()); params.addIoTuneParams(diskImage, ioTuneStruct); } org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.UpdateVmPolicy, params); setSucceeded(vdsReturnValue.getSucceeded()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> <START_MOD>getAllForCpuProfiles<END_MOD>(<START_MOD>java.util.Collection<<END_MOD>org.ovirt.engine.core.compat.Guid<START_MOD>><END_MOD> <START_MOD>cpuProfileIds<END_MOD>) {<START_MOD> java.util.UUID[] uuids = cpuProfileIds.stream().map(Guid::getUuid).toArray(( size) -> new java.util.UUID[size]);<END_MOD> return getCallsHandler().executeReadList(<START_MOD>"GetVmsByCpuProfileIds"<END_MOD>, org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue(<START_MOD>"cpu_profile_ids"<END_MOD>, <START_MOD>createArrayOf("uuid", uuids)<END_MOD>)); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllForCpuProfiles(java.util.Collection<org.ovirt.engine.core.compat.Guid> cpuProfileIds) { return getCallsHandler().executeReadList("GetVmsByCpuProfileIds", org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("cpu_profile_ids", createArrayOfUUIDs(cpuProfileIds))); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> <START_MOD>getAllForDiskProfiles<END_MOD>(<START_MOD>java.util.Collection<<END_MOD>org.ovirt.engine.core.compat.Guid<START_MOD>><END_MOD> <START_MOD>diskProfileIds<END_MOD>) {<START_MOD> java.util.UUID[] uuids = diskProfileIds.stream().map(Guid::getUuid).toArray(( size) -> new java.util.UUID[size]);<END_MOD> return getCallsHandler().executeReadList(<START_MOD>"GetAllVmsRelatedToDiskProfiles"<END_MOD>, org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue(<START_MOD>"disk_profile_ids"<END_MOD>, <START_MOD>createArrayOf("uuid", uuids)<END_MOD>)); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllForDiskProfiles(java.util.Collection<org.ovirt.engine.core.compat.Guid> diskProfileIds) { return getCallsHandler().executeReadList("GetAllVmsRelatedToDiskProfiles", org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("disk_profile_ids", createArrayOfUUIDs(diskProfileIds))); }
@java.lang.Override public java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk>> getAllForVms(java.util.Collection<org.ovirt.engine.core.compat.Guid> vmIds) { java.util.UUID[] uuids = vmIds.stream().map(Guid::getUuid).toArray(( size) -> new java.util.UUID[size]); org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_guids", createArrayOf("uuid", uuids)); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.Disk>> pairs = getCallsHandler().executeReadList("GetDisksVmGuids", org.ovirt.engine.core.dao.DiskDaoImpl.DisksForVmsRowMapper.instance, parameterSource); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk>> resultMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.Disk> pair : pairs) { resultMap.putIfAbsent(pair.getFirst(), new java.util.ArrayList()); resultMap.get(pair.getFirst()).add(pair.getSecond()); } return resultMap; }	@java.lang.Override public java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk>> getAllForVms(java.util.Collection<org.ovirt.engine.core.compat.Guid> vmIds) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_guids", createArrayOfUUIDs(vmIds)); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.Disk>> pairs = getCallsHandler().executeReadList("GetDisksVmGuids", org.ovirt.engine.core.dao.DiskDaoImpl.DisksForVmsRowMapper.instance, parameterSource); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk>> resultMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.Disk> pair : pairs) { if (!(resultMap.containsKey(pair.getFirst()))) { resultMap.put(pair.getFirst(), new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>()); } resultMap.get(pair.getFirst()).add(pair.getSecond()); } return resultMap; }
@java.lang.Override public java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.qos.StorageQos> getQosByDiskProfileIds(java.util.Collection<org.ovirt.engine.core.compat.Guid> diskProfileIds) { java.util.UUID[] uuids = diskProfileIds.stream().map(Guid::getUuid).toArray(( size) -> new java.util.UUID[size]); org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("disk_profile_ids", createArrayOf("uuid", uuids)); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.qos.StorageQos>> pairs = getCallsHandler().executeReadList("GetQosByDiskProfiles", org.ovirt.engine.core.dao.qos.StorageQosDaoImpl.StorageQosMultipleProfilesMapper.MAPPER, parameterSource); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.qos.StorageQos> resMap = new java.util.HashMap<>(); pairs.stream().forEach(( pair) -> resMap.put(pair.getFirst(), pair.getSecond())); return resMap; }	@java.lang.Override public java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.qos.StorageQos> getQosByDiskProfileIds(java.util.Collection<org.ovirt.engine.core.compat.Guid> diskProfileIds) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("disk_profile_ids", createArrayOfUUIDs(diskProfileIds)); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.qos.StorageQos>> pairs = getCallsHandler().executeReadList("GetQosByDiskProfiles", org.ovirt.engine.core.dao.qos.StorageQosDaoImpl.StorageQosMultipleProfilesMapper.MAPPER, parameterSource); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.qos.StorageQos> resMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.qos.StorageQos> pair : pairs) { resMap.put(pair.getFirst(), pair.getSecond()); } return resMap; }
@java.lang.Override public <START_MOD>java.util.Map<org.ovirt.engine.core.compat.Guid, <END_MOD>org.ovirt.engine.core.common.businessentities.qos.CpuQos<START_MOD>> getCpuQosByVmIds(java.util.Collection<org.ovirt.engine.core.compat.Guid> vmIds<END_MOD>) { <START_MOD>java.util.UUID[] uuids = vmIds.stream().map(Guid::getUuid).toArray(( size) -> new java.util.UUID[size]); <END_MOD>org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue(<START_MOD>"vm_ids", createArrayOf("uuid", uuids)); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.qos.CpuQos>> pairs = getCallsHandler().executeReadList("GetQosByVmIds", org.ovirt.engine.core.dao.qos.CpuQosDaoImpl.CpuQosMultipleMapper.MAPPER, parameterSource); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.qos.CpuQos> qosMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.qos.CpuQos> pair : pairs) { qosMap.put(pair.getFirst(), pair.getSecond()); }<END_MOD> return <START_MOD>qosMap<END_MOD>; }	@java.lang.Override public java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.qos.CpuQos> getCpuQosByVmIds(java.util.Collection<org.ovirt.engine.core.compat.Guid> vmIds) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_ids", createArrayOfUUIDs(vmIds)); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.qos.CpuQos>> pairs = getCallsHandler().executeReadList("GetQosByVmIds", org.ovirt.engine.core.dao.qos.CpuQosDaoImpl.CpuQosMultipleMapper.MAPPER, parameterSource); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.qos.CpuQos> qosMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.qos.CpuQos> pair : pairs) { qosMap.put(pair.getFirst(), pair.getSecond()); } return qosMap; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> <START_MOD>getAllForDiskProfiles<END_MOD>(<START_MOD>java.util.Collection<<END_MOD>org.ovirt.engine.core.compat.Guid<START_MOD>><END_MOD> <START_MOD>diskProfileIds<END_MOD>) {<START_MOD> java.util.UUID[] uuids = diskProfileIds.stream().map(Guid::getUuid).toArray(( size) -> new java.util.UUID[size]);<END_MOD> org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue(<START_MOD>"disk_profile_ids"<END_MOD>, <START_MOD>createArrayOf("uuid", uuids)<END_MOD>); return getCallsHandler().executeReadList(<START_MOD>"GetAllForDiskProfiles"<END_MOD>, org.ovirt.engine.core.dao.DiskImageDaoImpl.DiskImageRowMapper.instance, parameterSource); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAllForDiskProfiles(java.util.Collection<org.ovirt.engine.core.compat.Guid> diskProfileIds) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("disk_profile_ids", createArrayOfUUIDs(diskProfileIds)); return getCallsHandler().executeReadList("GetAllForDiskProfiles", org.ovirt.engine.core.dao.DiskImageDaoImpl.DiskImageRowMapper.instance, parameterSource); }
@org.junit.Test public void testCpuQos() { org.ovirt.engine.core.common.businessentities.qos.CpuQos cpuQos = new org.ovirt.engine.core.common.businessentities.qos.CpuQos(); cpuQos.setCpuLimit(50); parameters.setCpuQos(cpuQos); vdsFunction = new java.util.function.Function<org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams, java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean apply(org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams params) { assertEquals(params.getCpuLimit().intValue(), 50); return true; } }; assertTrue(command.canDoAction()); command.executeCommand(); assertTrue(command.getReturnValue().getSucceeded()); }	@org.junit.Test public void testCpuQos() { org.ovirt.engine.core.common.businessentities.qos.CpuQos cpuQos = new org.ovirt.engine.core.common.businessentities.qos.CpuQos(); cpuQos.setCpuLimit(50); parameters.setCpuQos(cpuQos); vdsFunction = new org.ovirt.engine.core.utils.linq.Function<org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams, java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean eval(org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams params) { assertEquals(params.getCpuLimit().intValue(), 50); return true; } }; assertTrue(command.canDoAction()); command.executeCommand(); assertTrue(command.getReturnValue().getSucceeded()); }
@java.lang.Override public java.lang.Boolean apply(org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams params) { assertEquals(params.getCpuLimit().intValue(), 50); return true; }	@java.lang.Override public java.lang.Boolean eval(org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams params) { assertEquals(params.getCpuLimit().intValue(), 50); return true; }
@org.junit.Test public void testStorageQos() { org.ovirt.engine.core.common.businessentities.qos.StorageQos storageQos = new org.ovirt.engine.core.common.businessentities.qos.StorageQos(); storageQos.setMaxThroughput(100); storageQos.setMaxIops(60000); parameters.getStorageQos().put(diskImage, storageQos); vdsFunction = new java.util.function.Function<org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams, java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean apply(org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams params) { org.ovirt.engine.core.bll.VmSlaPolicyCommandTest.this.assertIoTune(params.getIoTuneList().get(0), ((100L * 1024L) * 1024L), 0, 0, 60000, 0, 0); return true; } }; assertTrue(command.canDoAction()); command.executeCommand(); assertTrue(command.getReturnValue().getSucceeded()); }	@org.junit.Test public void testStorageQos() { org.ovirt.engine.core.common.businessentities.qos.StorageQos storageQos = new org.ovirt.engine.core.common.businessentities.qos.StorageQos(); storageQos.setMaxThroughput(100); storageQos.setMaxIops(60000); parameters.getStorageQos().put(diskImage, storageQos); vdsFunction = new org.ovirt.engine.core.utils.linq.Function<org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams, java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean eval(org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams params) { org.ovirt.engine.core.bll.VmSlaPolicyCommandTest.this.assertIoTune(params.getIoTuneList().get(0), ((100L * 1024L) * 1024L), 0, 0, 60000, 0, 0); return true; } }; assertTrue(command.canDoAction()); command.executeCommand(); assertTrue(command.getReturnValue().getSucceeded()); }
@org.junit.Test public void testCpuQosUnlimited() { org.ovirt.engine.core.common.businessentities.qos.CpuQos cpuQos = new org.ovirt.engine.core.common.businessentities.qos.CpuQos(); cpuQos.setCpuLimit(null); parameters.setCpuQos(cpuQos); vdsFunction = new java.util.function.Function<org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams, java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean apply(org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams params) { assertEquals(params.getCpuLimit().intValue(), 100); return true; } }; assertTrue(command.canDoAction()); command.executeCommand(); assertTrue(command.getReturnValue().getSucceeded()); }	@org.junit.Test public void testCpuQosUnlimited() { org.ovirt.engine.core.common.businessentities.qos.CpuQos cpuQos = new org.ovirt.engine.core.common.businessentities.qos.CpuQos(); cpuQos.setCpuLimit(null); parameters.setCpuQos(cpuQos); vdsFunction = new org.ovirt.engine.core.utils.linq.Function<org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams, java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean eval(org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams params) { assertEquals(params.getCpuLimit().intValue(), 100); return true; } }; assertTrue(command.canDoAction()); command.executeCommand(); assertTrue(command.getReturnValue().getSucceeded()); }
@java.lang.Override public java.lang.Boolean apply(org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams params) { this.assertIoTune(params.getIoTuneList().get(0), 0, 0, 0, 0, 0, 0); return true; }	@java.lang.Override public java.lang.Boolean eval(org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams params) { this.assertIoTune(params.getIoTuneList().get(0), 0, 0, 0, 0, 0, 0); return true; }
@java.lang.Override public java.lang.Boolean apply(org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams params) { this.assertIoTune(params.getIoTuneList().get(0), ((100L * 1024L) * 1024L), 0, 0, 60000, 0, 0); return true; }	@java.lang.Override public java.lang.Boolean eval(org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams params) { this.assertIoTune(params.getIoTuneList().get(0), ((100L * 1024L) * 1024L), 0, 0, 60000, 0, 0); return true; }
@java.lang.Override public java.lang.Object answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable { org.ovirt.engine.core.common.vdscommands.VDSCommandType commandType = ((org.ovirt.engine.core.common.vdscommands.VDSCommandType) (invocation.getArguments()[0])); assertEquals(commandType, VDSCommandType.UpdateVmPolicy); org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams params = ((org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams) (invocation.getArguments()[1])); org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); retVal.setSucceeded(vdsFunction.apply(params)); return retVal; }	@java.lang.Override public java.lang.Object answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable { org.ovirt.engine.core.common.vdscommands.VDSCommandType commandType = ((org.ovirt.engine.core.common.vdscommands.VDSCommandType) (invocation.getArguments()[0])); assertEquals(commandType, VDSCommandType.UpdateVmPolicy); org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams params = ((org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams) (invocation.getArguments()[1])); org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); retVal.setSucceeded(vdsFunction.eval(params)); return retVal; }
@java.lang.Override public java.lang.Boolean apply(org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams params) { assertEquals(params.getCpuLimit().intValue(), 100); return true; }	@java.lang.Override public java.lang.Boolean eval(org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams params) { assertEquals(params.getCpuLimit().intValue(), 100); return true; }
@org.junit.Test public void testStorageQosUnlimited() { parameters.getStorageQos().put(diskImage, new org.ovirt.engine.core.common.businessentities.qos.StorageQos()); vdsFunction = new java.util.function.Function<org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams, java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean apply(org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams params) { org.ovirt.engine.core.bll.VmSlaPolicyCommandTest.this.assertIoTune(params.getIoTuneList().get(0), 0, 0, 0, 0, 0, 0); return true; } }; assertTrue(command.canDoAction()); command.executeCommand(); assertTrue(command.getReturnValue().getSucceeded()); }	@org.junit.Test public void testStorageQosUnlimited() { parameters.getStorageQos().put(diskImage, new org.ovirt.engine.core.common.businessentities.qos.StorageQos()); vdsFunction = new org.ovirt.engine.core.utils.linq.Function<org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams, java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean eval(org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams params) { org.ovirt.engine.core.bll.VmSlaPolicyCommandTest.this.assertIoTune(params.getIoTuneList().get(0), 0, 0, 0, 0, 0, 0); return true; } }; assertTrue(command.canDoAction()); command.executeCommand(); assertTrue(command.getReturnValue().getSucceeded()); }
<START_MOD>private<END_MOD> boolean isVmExist() { return (((org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getVmId()) == null) || (Guid.Empty.equals(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getVmId()))) || (<START_MOD>validate(new org<END_MOD>.<START_MOD>ovirt.engine.core.bll.storage.disk.VmValidator<END_MOD>(<START_MOD>org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getVm()).isVmExists()<END_MOD>)); }	private boolean isVmExist() { return (((org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getVmId()) == null) || (Guid.Empty.equals(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getVmId()))) || (validate(new org.ovirt.engine.core.bll.validator.VmValidator(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getVm()).isVmExists())); }
protected boolean isVmNotLocked() { return ((org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVm()) != null) && (validate(new org.ovirt.engine.core.bll.<START_MOD>storage.disk<END_MOD>.VmValidator(org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVm()).vmNotLocked())); }	protected boolean isVmNotLocked() { return ((org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVm()) != null) && (validate(new org.ovirt.engine.core.bll.validator.VmValidator(org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVm()).vmNotLocked())); }
@org.junit.Test public void testVmOvfCreationDefaultGraphicsDevice() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.utils.ovf.OvfManagerTest.createVM(); vm.setDefaultDisplayType(DisplayType.cirrus); vm.setVmOs(org.ovirt.engine.core.utils.ovf.OvfManagerTest.DEFAULT_OS_ID); java.lang.String xml = manager.exportVm(vm, new java.util.ArrayList(), Version.v3_5); assertNotNull(xml); final org.ovirt.engine.core.common.businessentities.VM newVm = new org.ovirt.engine.core.common.businessentities.VM(); manager.importVm(xml, newVm, new java.util.ArrayList(), new java.util.ArrayList()); int graphicsDeviceCount = 0; for (org.ovirt.engine.core.common.businessentities.VmDevice device : newVm.getManagedVmDeviceMap().values()) { if ((device.getType()) == (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.GRAPHICS)) { graphicsDeviceCount++; assertEquals(device.getDevice(), VmDeviceType.<START_MOD>SPICE<END_MOD>.getName()); } } assertEquals(graphicsDeviceCount, 1); }	@org.junit.Test public void testVmOvfCreationDefaultGraphicsDevice() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.utils.ovf.OvfManagerTest.createVM(); vm.setDefaultDisplayType(DisplayType.cirrus); vm.setVmOs(org.ovirt.engine.core.utils.ovf.OvfManagerTest.DEFAULT_OS_ID); java.lang.String xml = manager.exportVm(vm, new java.util.ArrayList(), Version.v3_5); assertNotNull(xml); final org.ovirt.engine.core.common.businessentities.VM newVm = new org.ovirt.engine.core.common.businessentities.VM(); manager.importVm(xml, newVm, new java.util.ArrayList(), new java.util.ArrayList()); int graphicsDeviceCount = 0; for (org.ovirt.engine.core.common.businessentities.VmDevice device : newVm.getManagedVmDeviceMap().values()) { if ((device.getType()) == (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.GRAPHICS)) { graphicsDeviceCount++; assertEquals(device.getDevice(), VmDeviceType.VNC.getName()); } } assertEquals(graphicsDeviceCount, 1); }
public org.ovirt.engine.core.bll.ValidationResult isDiskAttachedToVm(org.ovirt.engine.core.<START_MOD>common.businessentities.VM vm<END_MOD>) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = getVmDao().getVmsListForDisk(disk.getId(), true); <START_MOD>java.lang.String[] replacements = new java.lang.String[]{ java.lang.String.format(org.ovirt.engine.core.bll.validator.storage.DiskValidator.DISK_NAME_REPLACEMENT, disk.getDiskAlias()), java.lang.String.format(org.ovirt.engine.core.bll.validator.storage.DiskValidator.VM_NAME_REPLACEMENT, vm.getName()) }; <END_MOD>return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_ATTACHED_TO_VM<START_MOD>, replacements<END_MOD>).when(vms.stream().noneMatch(( <START_MOD>vm1) -> vm1.getId().equals(<END_MOD>vm.getId()))); }	public org.ovirt.engine.core.bll.ValidationResult isDiskAttachedToVm(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = getVmDao().getVmsListForDisk(disk.getId(), true); java.lang.String[] replacements = new java.lang.String[]{ org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.storage.DiskValidator.DISK_NAME_VARIABLE, disk.getDiskAlias()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.storage.DiskValidator.VM_NAME_VARIABLE, vm.getName()) }; return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_ATTACHED_TO_VM, replacements).when(vms.stream().noneMatch(( vm1) -> vm1.getId().equals(vm.getId()))); }
public java.util.List<java.lang.Integer> readIntegers() { return read(java.lang.Integer.class); }	public java.util.List<java.math.BigInteger> readIntegers() { java.util.List<java.math.BigInteger> list = new java.util.ArrayList<>(); expect(JsonParser.Event.START_ARRAY); boolean listEnd = false; while (!listEnd) { javax.json.stream.JsonParser.Event next = next(); switch (next) { case VALUE_NUMBER : list.add(parser.getBigDecimal().toBigInteger()); break; case END_ARRAY : listEnd = true; break; default : continue; } } return list; }
@org.junit.Test public void testReadBooleans() { org.ovirt.engine.api.types.V4Vm object = objectFromJson("{'properties': [false, true]}"); java.util.List<java.lang.Boolean> expected = java.util.Arrays.asList(false, true); assertEquals(expected, object.properties()); }	@org.junit.Test public void testReadStringsWithIncorrectType() { org.ovirt.engine.api.types.V4Vm object = objectFromJson("{'properties': [false, 'string', true]}"); java.util.List<java.lang.String> expected = java.util.Arrays.asList("string"); assertEquals(expected, object.properties()); }
public java.util.List<java.lang.Integer> readIntegers() { return read(java.lang.Integer.class, this::readInteger); }	public java.util.List<java.math.BigInteger> readIntegers() { return readStrings().stream().map(this::parseInteger).collect(java.util.stream.Collectors.toList()); }
public java.util.List<java.lang.String> readStrings() { return read(java.lang.String.class, this::readString); }	public java.util.List<java.lang.String> readStrings() { java.util.List<java.lang.String> values = new java.util.ArrayList<>(); java.lang.String startingLocalName = reader.getLocalName(); java.lang.String currentLocalName = startingLocalName; while (forward()) { currentLocalName = reader.getLocalName(); if (currentLocalName.equals(startingLocalName)) { values.add(readString()); } else { skip(); } } return values; }
public java.util.List<java.math.BigDecimal> readDecimals() { return read(java.math.BigDecimal.class, this::readDecimal); }	public java.util.List<java.math.BigDecimal> readDecimals() { return readStrings().stream().map(this::parseDecimal).collect(java.util.stream.Collectors.toList()); }
public java.util.List<java.util.Date> readDates() { return read(java.util.Date.class, this::readDate); }	public java.util.List<java.util.Date> readDates() { return readStrings().stream().map(this::parseDate).collect(java.util.stream.Collectors.toList()); }
public java.util.List<java.lang.Boolean> readBooleans() { return read(java.lang.Boolean.class, this::readBoolean); }	public java.util.List<java.lang.Boolean> readBooleans() { return readStrings().stream().map(this::parseBoolean).collect(java.util.stream.Collectors.toList()); }
@org.junit.Test public void testReadStringList() { java.util.List<java.lang.String> expected = java.util.Arrays.asList("1", "2"); org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader("<action><value>1</value><value>2</value></action>"); reader.next(); java.util.List<java.lang.String> strings = reader.readStrings(); assertEquals(javax.xml.stream.XMLStreamConstants.END_ELEMENT, reader.getEventType()); assertEquals("action", reader.getLocalName()); assertEquals(expected, strings); }	@org.junit.Test public void testReadStringList() { java.util.List<java.lang.String> expected = java.util.Arrays.asList("1", "2"); org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader("<action><value>1</value><value>2</value></action>"); reader.next(); java.util.List<java.lang.String> strings = reader.readStrings(); assertEquals(expected, strings); }
@org.junit.Test public void testReadBooleanList() { java.util.List<java.lang.Boolean> expected = java.util.Arrays.asList(true, false); org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader("<action><value>true</value><value>false</value></action>"); reader.next(); java.util.List<java.lang.Boolean> booleans = reader.readBooleans(); assertEquals(javax.xml.stream.XMLStreamConstants.END_ELEMENT, reader.getEventType()); assertEquals("action", reader.getLocalName()); assertEquals(expected, booleans); }	@org.junit.Test public void testReadBooleanList() { java.util.List<java.lang.Boolean> expected = java.util.Arrays.asList(true, false); org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader("<action><value>true</value><value>false</value></action>"); reader.next(); java.util.List<java.lang.Boolean> booleans = reader.readBooleans(); assertEquals(expected, booleans); }
public java.util.List<java.lang.String> readStrings() { return read(java.lang.String.class); }	public java.util.List<java.lang.String> readStrings() { java.util.List<java.lang.String> list = new java.util.ArrayList<>(); expect(JsonParser.Event.START_ARRAY); boolean listEnd = false; while (!listEnd) { javax.json.stream.JsonParser.Event next = next(); switch (next) { case VALUE_STRING : list.add(getString()); break; case END_ARRAY : listEnd = true; break; default : continue; } } return list; }
public java.util.List<java.util.Date> readDates() { return read(java.util.Date.class); }	public java.util.List<java.util.Date> readDates() { java.util.List<java.util.Date> list = new java.util.ArrayList<>(); expect(JsonParser.Event.START_ARRAY); boolean listEnd = false; while (!listEnd) { javax.json.stream.JsonParser.Event next = next(); switch (next) { case VALUE_STRING : java.lang.String image = parser.getString(); try { list.add(org.ovirt.api.metamodel.runtime.json.JsonReader.DATE_FORMAT.get().parse(image)); } catch (java.text.ParseException exception) { throw new javax.json.JsonException((("The text \"" + image) + "\" isn\'t a valid date"), exception); } case END_ARRAY : listEnd = true; break; default : continue; } } return list; }
public java.util.List<java.lang.Boolean> readBooleans() { return read(java.lang.Boolean.class); }	public java.util.List<java.lang.Boolean> readBooleans() { java.util.List<java.lang.Boolean> list = new java.util.ArrayList<>(); expect(JsonParser.Event.START_ARRAY); boolean listEnd = false; while (!listEnd) { javax.json.stream.JsonParser.Event next = next(); switch (next) { case VALUE_FALSE : list.add(false); break; case VALUE_TRUE : list.add(true); break; case END_ARRAY : listEnd = true; break; default : continue; } } return list; }
public java.util.List<java.math.BigDecimal> readDecimals() { return read(java.math.BigDecimal.class); }	public java.util.List<java.math.BigDecimal> readDecimals() { java.util.List<java.math.BigDecimal> list = new java.util.ArrayList<>(); expect(JsonParser.Event.START_ARRAY); boolean listEnd = false; while (!listEnd) { javax.json.stream.JsonParser.Event next = next(); switch (next) { case VALUE_NUMBER : list.add(parser.getBigDecimal()); break; case END_ARRAY : listEnd = true; break; default : continue; } } return list; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean <START_MOD>isTenantAware = isTypeTenantAware(); boolean isAuthUrlAware = isTypeAuthUrlAware<END_MOD>(); getTenantName().setIsAvailable(<START_MOD>isTenantAware<END_MOD>); getAuthUrl().setIsAvailable(<START_MOD>isAuthUrlAware<END_MOD>); if (<START_MOD>isTenantAware<END_MOD>) { org.ovirt.engine.core.common.businessentities.TenantProviderProperties properties = ((org.ovirt.engine.core.common.businessentities.TenantProviderProperties) (provider.getAdditionalProperties())); getTenantName().setEntity((properties == null ? null : properties.getTenantName())); } boolean isNeutron = isTypeOpenStackNetwork(); getNeutronAgentModel().setIsAvailable(isNeutron); boolean isVmware = isTypeVmware(); boolean requiresAuth = isTypeRequiresAuthentication(); getRequiresAuthentication().setEntity((isVmware || (java.lang.Boolean.valueOf(requiresAuth)))); getRequiresAuthentication().setIsChangeable((!requiresAuth)); boolean isCinder = isTypeOpenStackVolume(); getDataCenter().setIsAvailable((isCinder || isVmware)); if (isCinder) { updateDatacentersForVolumeProvider(); } getVmwarePropertiesModel().setIsAvailable(isVmware); getRequiresAuthentication().setIsAvailable((!isVmware)); getUrl().setIsAvailable((!isVmware)); if (isVmware) { updateDatacentersForVmwareProvider(); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean isTenantAware = getType().getSelectedItem().isTenantAware(); boolean isAuthUrlAware = getType().getSelectedItem().isAuthUrlAware(); getTenantName().setIsAvailable(isTenantAware); getAuthUrl().setIsAvailable(isAuthUrlAware); if (isTenantAware) { org.ovirt.engine.core.common.businessentities.TenantProviderProperties properties = ((org.ovirt.engine.core.common.businessentities.TenantProviderProperties) (provider.getAdditionalProperties())); getTenantName().setEntity((properties == null ? null : properties.getTenantName())); } boolean isNeutron = isTypeOpenStackNetwork(); getNeutronAgentModel().setIsAvailable(isNeutron); boolean isVmware = isTypeVmware(); boolean requiresAuth = isTypeRequiresAuthentication(); getRequiresAuthentication().setEntity((isVmware || (java.lang.Boolean.valueOf(requiresAuth)))); getRequiresAuthentication().setIsChangeable((!requiresAuth)); boolean isCinder = isTypeOpenStackVolume(); getDataCenter().setIsAvailable((isCinder || isVmware)); if (isCinder) { updateDatacentersForVolumeProvider(); } getVmwarePropertiesModel().setIsAvailable(isVmware); getRequiresAuthentication().setIsAvailable((!isVmware)); getUrl().setIsAvailable((!isVmware)); if (isVmware) { updateDatacentersForVmwareProvider(); } }
public void setReadOnly(java.lang.Boolean entity) { this.readOnly = readOnly; }	public void setReadOnly(java.lang.Boolean entity) { this.readOnly = entity; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean isTenantAware = isTypeTenantAware(); boolean isAuthUrlAware = isTypeAuthUrlAware(); getTenantName().setIsAvailable(isTenantAware); getAuthUrl().setIsAvailable(isAuthUrlAware); if (isTenantAware) { org.ovirt.engine.core.common.businessentities.TenantProviderProperties properties = ((org.ovirt.engine.core.common.businessentities.TenantProviderProperties) (provider.getAdditionalProperties())); getTenantName().setEntity((properties == null ? null : properties.getTenantName())); } boolean isNeutron = isTypeOpenStackNetwork(); getNeutronAgentModel().setIsAvailable(isNeutron); <START_MOD>getReadOnly().setIsAvailable(isExternalNetwork()); <END_MOD>boolean isVmware = isTypeVmware(); boolean requiresAuth = isTypeRequiresAuthentication(); getRequiresAuthentication().setEntity((isVmware || (java.lang.Boolean.valueOf(requiresAuth)))); getRequiresAuthentication().setIsChangeable((!requiresAuth)); boolean isCinder = isTypeOpenStackVolume(); getDataCenter().setIsAvailable((isCinder || isVmware)); if (isCinder) { updateDatacentersForVolumeProvider(); } getVmwarePropertiesModel().setIsAvailable(isVmware); getRequiresAuthentication().setIsAvailable((!isVmware)); getUrl().setIsAvailable((!isVmware)); if (isVmware) { updateDatacentersForVmwareProvider(); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean isTenantAware = getType().getSelectedItem().isTenantAware(); boolean isAuthUrlAware = getType().getSelectedItem().isAuthUrlAware(); boolean isReadOnlyAware = getType().getSelectedItem().isReadOnlyAware(); getTenantName().setIsAvailable(isTenantAware); getAuthUrl().setIsAvailable(isAuthUrlAware); if (isTenantAware) { org.ovirt.engine.core.common.businessentities.TenantProviderProperties properties = ((org.ovirt.engine.core.common.businessentities.TenantProviderProperties) (provider.getAdditionalProperties())); getTenantName().setEntity((properties == null ? null : properties.getTenantName())); } boolean isNeutron = isTypeOpenStackNetwork(); getNeutronAgentModel().setIsAvailable(isNeutron); getReadOnly().setIsAvailable(isReadOnlyAware); if (isReadOnlyAware) { org.ovirt.engine.core.common.businessentities.ExternalNetworkProviderProperties properties = ((org.ovirt.engine.core.common.businessentities.ExternalNetworkProviderProperties) (provider.getAdditionalProperties())); getReadOnly().setEntity((properties != null ? properties.getReadOnly() : false)); } boolean isVmware = isTypeVmware(); boolean requiresAuth = isTypeRequiresAuthentication(); getRequiresAuthentication().setEntity((isVmware || (java.lang.Boolean.valueOf(requiresAuth)))); getRequiresAuthentication().setIsChangeable((!requiresAuth)); boolean isCinder = isTypeOpenStackVolume(); getDataCenter().setIsAvailable((isCinder || isVmware)); if (isCinder) { updateDatacentersForVolumeProvider(); } getVmwarePropertiesModel().setIsAvailable(isVmware); getRequiresAuthentication().setIsAvailable((!isVmware)); getUrl().setIsAvailable((!isVmware)); if (isVmware) { updateDatacentersForVmwareProvider(); } }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if (obj == null) return false; if ((getClass()) != (obj.getClass())) return false; final ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.row13Struct other = ((ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.row13Struct) (obj)); if ((this.var_name) == null) { if ((other.var_name) != null) return false; } else if (!(this.var_name.equals(other.var_name))) return false; return true; }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if (obj == null) return false; if ((getClass()) != (obj.getClass())) return false; final ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.row12Struct other = ((ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.row12Struct) (obj)); if ((this.key) == null) { if ((other.key) != null) return false; } else if (!(this.key.equals(other.key))) return false; return true; }
public void copyDataTo(ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.row13Struct other) { other.var_name = this.var_name; other.var_value = this.var_value; }	public void copyDataTo(ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.row12Struct other) { other.key = this.key; other.value = this.value; }
public void tJDBCOutput_2_error(java.lang.Exception exception, java.lang.String errorComponent, final java.util.Map<java.lang.String, java.lang.Object> globalMap) throws ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.TalendException { end_Hash.put(errorComponent, java.lang.System.currentTimeMillis()); ((java.util.Map) (threadLocal.get())).put("status", "failure"); tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap); }	public void tBufferOutput_2_error(java.lang.Exception exception, java.lang.String errorComponent, final java.util.Map<java.lang.String, java.lang.Object> globalMap) throws ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.TalendException { end_Hash.put(errorComponent, java.lang.System.currentTimeMillis()); ((java.util.Map) (threadLocal.get())).put("status", "failure"); tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap); }
public int compareTo(ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.row13Struct other) { int returnValue = -1; returnValue = checkNullsAndCompare(this.var_name, other.var_name); if (returnValue != 0) { return returnValue; } return returnValue; }	public int compareTo(ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.row12Struct other) { int returnValue = -1; returnValue = checkNullsAndCompare(this.key, other.key); if (returnValue != 0) { return returnValue; } return returnValue; }
@java.lang.Override public int hashCode() { if (this.hashCodeDirty) { final int prime = ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.row13Struct.PRIME; int result = ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.row13Struct.DEFAULT_HASHCODE; result = (prime * result) + ((this.var_name) == null ? 0 : this.var_name.hashCode()); this.hashCode = result; this.hashCodeDirty = false; } return this.hashCode; }	@java.lang.Override public int hashCode() { if (this.hashCodeDirty) { final int prime = ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.row12Struct.PRIME; int result = ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.row12Struct.DEFAULT_HASHCODE; result = (prime * result) + ((this.key) == null ? 0 : this.key.hashCode()); this.hashCode = result; this.hashCodeDirty = false; } return this.hashCode; }
public void copyKeysDataTo(ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.row13Struct other) { other.var_name = this.var_name; }	public void copyKeysDataTo(ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.row12Struct other) { other.key = this.key; }
@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<org.ovirt.engine.core.common.businessentities.MigrationBandwidthLimitType> event) { final boolean enabled = (event.getValue()) == (org.ovirt.engine.core.common.businessentities.MigrationBandwidthLimitType.CUSTOM); getView().getCustomMigrationBandwidthLimitEditor().setEnabled(enabled); }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { updateCustomMigrationBandwidthLimitEnabledState(model, null); }
@org.ovirt.engine.ui.webadmin.Template("Maximum bandwidth of both outgoing and incoming migrations per Host. " + (((("<p><b>Auto</b> Bandwidth is copied from Migration Host Network QoS > Rate Limit if it exists. Otherwise " + "it is computed as minimum of link speeds of sending and receiving network interfaces if link speeds are ") + "available. Otherwise it behaves as\"VDSM\" option.</p>") + "<p><b>VDSM</b> Bandwidth is controlled by local VDSM setting on sending Host.</p>") + "<p><b>Custom</b> User defined.</p>")) com.google.gwt.safehtml.shared.SafeHtml migrationBandwidthLimit();	@org.ovirt.engine.ui.webadmin.Template("<p>Maximum bandwidth of both outgoing and incoming migrations per Host.</p>" + (((("<p><b>Auto</b> Bandwidth is copied from Migration Host Network QoS > Rate Limit if it exists. Otherwise " + "it is computed as minimum of link speeds of sending and receiving network interfaces if link speeds are ") + "available. Otherwise it behaves as\"VDSM\" option.</p>") + "<p><b>Hypervisor default</b> Bandwidth is controlled by local VDSM setting on sending Host.</p>") + "<p><b>Custom</b> User defined.</p>")) com.google.gwt.safehtml.shared.SafeHtml migrationBandwidthLimit();
@java.lang.Override public com.google.gwt.user.client.ui.HasValue<org.ovirt.engine.core.common.businessentities.MigrationBandwidthLimitType> getMigrationBandwidthLimitTypeEditor() { return migrationBandwidthLimitTypeEditor; }	@java.lang.Override public org.ovirt.engine.ui.common.widget.HasEnabledWithHints getMigrationBandwidthLimitTypeEditor() { return migrationBandwidthLimitTypeEditor; }
@java.lang.Override public com.google.gwt.user.client.ui.HasEnabled getCustomMigrationBandwidthLimitEditor() { return customMigrationBandwidthLimitEditor; }	@java.lang.Override public org.ovirt.engine.ui.common.widget.HasEnabledWithHints getCustomMigrationBandwidthLimitEditor() { return customMigrationBandwidthLimitEditor; }
com.google.gwt.user.client.ui.HasValue<org.ovirt.engine.core.common.businessentities.MigrationBandwidthLimitType> getMigrationBandwidthLimitTypeEditor();	org.ovirt.engine.ui.common.widget.HasEnabledWithHints getMigrationBandwidthLimitTypeEditor();
com.google.gwt.user.client.ui.HasEnabled getCustomMigrationBandwidthLimitEditor();	org.ovirt.engine.ui.common.widget.HasEnabledWithHints getCustomMigrationBandwidthLimitEditor();
public void readData(java.io.ObjectInputStream dis) { synchronized(ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.row12Struct.commonByteArrayLock_OVIRT_ENGINE_DWH_DeleteTimeKeepingJob) { try { int length = 0; this.moment = readDate(dis); this.pid = readString(dis); this.father_pid = readString(dis); this.root_pid = readString(dis); length = dis.readByte(); if (length == (-1)) { this.system_pid = null; } else { this.system_pid = dis.readLong(); } this.project = readString(dis); this.job = readString(dis); this.job_repository_id = readString(dis); this.job_version = readString(dis); this.context = readString(dis); this.origin = readString(dis); this.message_type = readString(dis); this.message = readString(dis); length = dis.readByte(); if (length == (-1)) { this.duration = null; } else { this.duration = dis.readLong(); } } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } } }	public void readData(java.io.ObjectInputStream dis) { synchronized(ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.row14Struct.commonByteArrayLock_OVIRT_ENGINE_DWH_DeleteTimeKeepingJob) { try { int length = 0; this.moment = readDate(dis); this.pid = readString(dis); this.father_pid = readString(dis); this.root_pid = readString(dis); length = dis.readByte(); if (length == (-1)) { this.system_pid = null; } else { this.system_pid = dis.readLong(); } this.project = readString(dis); this.job = readString(dis); this.job_repository_id = readString(dis); this.job_version = readString(dis); this.context = readString(dis); this.origin = readString(dis); this.message_type = readString(dis); this.message = readString(dis); length = dis.readByte(); if (length == (-1)) { this.duration = null; } else { this.duration = dis.readLong(); } } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } } }
public int compareTo(ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.row12Struct other) { int returnValue = -1; return returnValue; }	public int compareTo(ovirt_engine_dwh.deletetimekeepingjob_3_6.DeleteTimeKeepingJob.row14Struct other) { int returnValue = -1; return returnValue; }
public void copyKeysDataTo(ovirt_engine_dwh.deletetimekeepingjob_3_5.DeleteTimeKeepingJob.row13Struct other) { other.var_name = this.var_name; }	public void copyKeysDataTo(ovirt_engine_dwh.deletetimekeepingjob_3_5.DeleteTimeKeepingJob.row12Struct other) { other.key = this.key; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if (obj == null) return false; if ((getClass()) != (obj.getClass())) return false; final ovirt_engine_dwh.deletetimekeepingjob_3_5.DeleteTimeKeepingJob.row13Struct other = ((ovirt_engine_dwh.deletetimekeepingjob_3_5.DeleteTimeKeepingJob.row13Struct) (obj)); if ((this.var_name) == null) { if ((other.var_name) != null) return false; } else if (!(this.var_name.equals(other.var_name))) return false; return true; }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if (obj == null) return false; if ((getClass()) != (obj.getClass())) return false; final ovirt_engine_dwh.deletetimekeepingjob_3_5.DeleteTimeKeepingJob.row12Struct other = ((ovirt_engine_dwh.deletetimekeepingjob_3_5.DeleteTimeKeepingJob.row12Struct) (obj)); if ((this.key) == null) { if ((other.key) != null) return false; } else if (!(this.key.equals(other.key))) return false; return true; }
public int compareTo(ovirt_engine_dwh.deletetimekeepingjob_3_5.DeleteTimeKeepingJob.row13Struct other) { int returnValue = -1; returnValue = checkNullsAndCompare(this.var_name, other.var_name); if (returnValue != 0) { return returnValue; } return returnValue; }	public int compareTo(ovirt_engine_dwh.deletetimekeepingjob_3_5.DeleteTimeKeepingJob.row12Struct other) { int returnValue = -1; returnValue = checkNullsAndCompare(this.key, other.key); if (returnValue != 0) { return returnValue; } return returnValue; }
public void copyDataTo(ovirt_engine_dwh.deletetimekeepingjob_3_5.DeleteTimeKeepingJob.row13Struct other) { other.var_name = this.var_name; other.var_value = this.var_value; }	public void copyDataTo(ovirt_engine_dwh.deletetimekeepingjob_3_5.DeleteTimeKeepingJob.row12Struct other) { other.key = this.key; other.value = this.value; }
@java.lang.Override public int hashCode() { if (this.hashCodeDirty) { final int prime = ovirt_engine_dwh.deletetimekeepingjob_3_5.DeleteTimeKeepingJob.row13Struct.PRIME; int result = ovirt_engine_dwh.deletetimekeepingjob_3_5.DeleteTimeKeepingJob.row13Struct.DEFAULT_HASHCODE; result = (prime * result) + ((this.var_name) == null ? 0 : this.var_name.hashCode()); this.hashCode = result; this.hashCodeDirty = false; } return this.hashCode; }	@java.lang.Override public int hashCode() { if (this.hashCodeDirty) { final int prime = ovirt_engine_dwh.deletetimekeepingjob_3_5.DeleteTimeKeepingJob.row12Struct.PRIME; int result = ovirt_engine_dwh.deletetimekeepingjob_3_5.DeleteTimeKeepingJob.row12Struct.DEFAULT_HASHCODE; result = (prime * result) + ((this.key) == null ? 0 : this.key.hashCode()); this.hashCode = result; this.hashCodeDirty = false; } return this.hashCode; }
public void tJDBCOutput_2_error(java.lang.Exception exception, java.lang.String errorComponent, final java.util.Map<java.lang.String, java.lang.Object> globalMap) throws ovirt_engine_dwh.deletetimekeepingjob_3_5.DeleteTimeKeepingJob.TalendException { end_Hash.put("tJDBCOutput_2", java.lang.System.currentTimeMillis()); ((java.util.Map) (threadLocal.get())).put("status", "failure"); tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap); }	public void tBufferOutput_1_error(java.lang.Exception exception, java.lang.String errorComponent, final java.util.Map<java.lang.String, java.lang.Object> globalMap) throws ovirt_engine_dwh.deletetimekeepingjob_3_5.DeleteTimeKeepingJob.TalendException { end_Hash.put("tBufferOutput_1", java.lang.System.currentTimeMillis()); ((java.util.Map) (threadLocal.get())).put("status", "failure"); tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap); }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("address", getAddress()).append("netmask", getPrefix()).append("gateway", getGateway()).append("bootProtocol", getBootProtocol()).build(); }	@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("address", getAddress()).append("prefix", getPrefix()).append("gateway", getGateway()).append("bootProtocol", getBootProtocol()).build(); }
private void initIpConfigurationBootProtocolGateway(org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol networkBootProtocol, boolean syncNetmask) { initIpConfigurationStaticBootProtocol(networkBootProtocol); when(mockedIPv4Address.getGateway()).thenReturn(org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.GATEWAY); iface.<START_MOD>setIpv4Gateway<END_MOD>((syncNetmask ? org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.GATEWAY : null)); }	private void initIpConfigurationBootProtocolGateway(org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol networkBootProtocol, boolean syncGateway) { initIpConfigurationStaticBootProtocol(networkBootProtocol); when(mockedIPv4Address.getGateway()).thenReturn(org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.GATEWAY); iface.setIpv4Gateway((syncGateway ? org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.GATEWAY : null)); }
private org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkParameters createBeforeSyncNetParams(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkParameters params = new org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkParameters(); params.setBootProtocol(nic.<START_MOD>getIpv4BootProtocol<END_MOD>()); params.setAddress(nic.<START_MOD>getIpv4Address<END_MOD>()); params.setSubnet(nic.<START_MOD>getIpv4Subnet<END_MOD>()); params.setGateway(nic.<START_MOD>getIpv4Gateway<END_MOD>()); params.setQos(nic.getQos()); params.setQosOverridden(attachment.isQosOverridden()); params.setCustomProperties(attachment.getProperties()); return params; }	private boolean shouldCreateUnmanagedNetworkModel(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { return (((nic.getNetworkImplementationDetails()) != null) && (!(nic.getNetworkImplementationDetails().isManaged()))) && (!(hostSetupNetworksParametersData.getRemovedUnmanagedNetworks().contains(nic.getNetworkName()))); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { if (!(networkDialogModel.validate())) { return; } nic.<START_MOD>setIpv4BootProtocol(networkDialogModel.getIpv4BootProtocol<END_MOD>()); if (networkDialogModel.getIsStaticAddress()) { nic.<START_MOD>setIpv4Address(networkDialogModel.getIpv4Address<END_MOD>().getEntity()); nic.<START_MOD>setIpv4Subnet(networkDialogModel.getIpv4Subnet<END_MOD>().getEntity()); nic.<START_MOD>setIpv4Gateway(networkDialogModel.getIpv4Gateway<END_MOD>().getEntity()); } org.ovirt.engine.core.common.businessentities.network.HostNetworkQos displayedQos = getDisplayedQos(); if (displayedQos != null) { nic.setQos(displayedQos); } if (networkDialogModel.getIsToSync().getEntity()) { networksToSync.add(logicalNetworkModelName); } else { networksToSync.remove(logicalNetworkModelName); } boolean customPropertiesAvailable = networkDialogModel.getCustomPropertiesModel().getIsAvailable(); java.util.Map<java.lang.String, java.lang.String> customProperties = (customPropertiesAvailable) ? org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueModel.convertProperties(networkDialogModel.getCustomPropertiesModel().serialize()) : null; removePreviousNetworkAttachmentInstanceFromRequestAndAddNewOne(logicalNetworkModel, getOverridingHostNetworkQos(displayedQos), customProperties); sourceListModel.setConfirmWindow(null); }	@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { if (!(networkDialogModel.validate())) { return; } org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address = networkAttachment.getIpConfiguration().getPrimaryAddress(); iPv4Address.setBootProtocol(networkDialogModel.getIpv4BootProtocol()); if (networkDialogModel.getIsStaticAddress()) { iPv4Address.setAddress(networkDialogModel.getIpv4Address().getEntity()); iPv4Address.setNetmask(networkDialogModel.getIpv4Subnet().getEntity()); iPv4Address.setGateway(networkDialogModel.getIpv4Gateway().getEntity()); } if (networkDialogModel.getQosModel().getIsAvailable()) { if (networkDialogModel.getQosOverridden().getEntity()) { org.ovirt.engine.core.common.businessentities.network.HostNetworkQos overriddenQos = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos(); networkDialogModel.getQosModel().flush(overriddenQos); networkAttachment.setHostNetworkQos(overriddenQos); } else { networkAttachment.setHostNetworkQos(null); } } if (networkDialogModel.getIsToSync().getEntity()) { hostSetupNetworksParametersData.getNetworksToSync().add(logicalNetworkModelName); } else { hostSetupNetworksParametersData.getNetworksToSync().remove(logicalNetworkModelName); } boolean customPropertiesAvailable = networkDialogModel.getCustomPropertiesModel().getIsAvailable(); java.util.Map<java.lang.String, java.lang.String> customProperties = (customPropertiesAvailable) ? org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueModel.convertProperties(networkDialogModel.getCustomPropertiesModel().serialize()) : null; networkAttachment.setProperties(customProperties); sourceListModel.setConfirmWindow(null); }
private void addReportedIpConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result) { if (!(isPrimaryAddressExist())) { return; } org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol definedBootProtocol = getPrimaryAddress().getBootProtocol(); result.add(ReportedConfigurationType.BOOT_PROTOCOL, iface.<START_MOD>getIpv4BootProtocol<END_MOD>(), definedBootProtocol); if ((definedBootProtocol == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP)) && ((iface.<START_MOD>getIpv4BootProtocol<END_MOD>()) == definedBootProtocol)) { result.add(ReportedConfigurationType.NETMASK, iface.<START_MOD>getIpv4Subnet<END_MOD>(), getPrimaryAddress().getNetmask(), isNetworkSubnetInSync()); result.add(ReportedConfigurationType.IP_ADDRESS, iface.<START_MOD>getIpv4Address(), getPrimaryAddress().<END_MOD>getAddress()); result.add(ReportedConfigurationType.GATEWAY, iface.<START_MOD>getIpv4Gateway(), getPrimaryAddress().<END_MOD>getGateway()); } }	private void addReportedIpConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result) { if (!(isPrimaryAddressExist())) { return; } org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol definedBootProtocol = getPrimaryAddress().getBootProtocol(); result.add(ReportedConfigurationType.BOOT_PROTOCOL, iface.getIpv4BootProtocol(), definedBootProtocol); if ((definedBootProtocol == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP)) && ((iface.getIpv4BootProtocol()) == definedBootProtocol)) { result.add(ReportedConfigurationType.NETMASK, iface.getIpv4Subnet(), getPrimaryAddress().getNetmask(), isNetworkSubnetInSync()); result.add(ReportedConfigurationType.IP_ADDRESS, iface.getIpv4Address(), getPrimaryAddress().getAddress()); result.add(ReportedConfigurationType.GATEWAY, iface.getIpv4Gateway(), getPrimaryAddress().getGateway(), isGatewayInSync()); } }
public boolean isHostExists(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo> glusterServers, org.ovirt.engine.core.common.businessentities.VDS server) { if (org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterHostUuidSupported(server.getVdsGroupCompatibilityVersion())) { org.ovirt.engine.core.common.businessentities.gluster.GlusterServer glusterServer = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getGlusterServerDao().getByServerId(server.getId()); if (glusterServer != null) { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo glusterServerInfo : glusterServers) { if (glusterServerInfo.getUuid().equals(glusterServer.getGlusterServerUuid())) { return true; } } } } else { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo glusterServer : glusterServers) { if (glusterServer.getHostnameOrIp().equals(server.getHostName())) { return true; } try { java.lang.String glusterHostAddr = java.net.InetAddress.getByName(glusterServer.getHostnameOrIp()).getHostAddress(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNwInterface : getVdsInterfaces(server.getId())) { if (glusterHostAddr.equals(vdsNwInterface.<START_MOD>getIpv4Address<END_MOD>())) { return true; } } } catch (java.net.UnknownHostException e) { log.error( not resolve IP address of the host '{}': {} glusterServer.getHostnameOrIp(), e.getMessage()); } } } return false; }	public boolean isHostExists(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo> glusterServers, org.ovirt.engine.core.common.businessentities.VDS server) { org.ovirt.engine.core.common.businessentities.gluster.GlusterServer glusterServer = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getGlusterServerDao().getByServerId(server.getId()); if (glusterServer != null) { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo glusterServerInfo : glusterServers) { if (glusterServerInfo.getUuid().equals(glusterServer.getGlusterServerUuid())) { return true; } } } return false; }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity = createInterface(rs); entity.setStatistics(org.ovirt.engine.core.dao.network.InterfaceDaoImpl.HostNetworkStatisticsRowMapper.INSTANCE.mapRow(rs, rowNum)); entity.setType(((java.lang.Integer) (rs.getObject("type")))); entity.setIpv4Gateway(rs.getString("gateway")); entity.<START_MOD>setIpv6Gateway(rs.getString("ipv6_gateway")); entity.<END_MOD>setIpv4Subnet(rs.getString("subnet")); entity.<START_MOD>setIpv6Prefix(rs.getInt("ipv6_prefix")); entity.<END_MOD>setIpv4Address(rs.getString("addr")); entity.<START_MOD>setIpv6Address(rs.getString("ipv6_address")); entity.<END_MOD>setNetworkName(rs.getString("network_name")); entity.setName(rs.getString("name")); entity.setVdsId(getGuid(rs, "vds_id")); entity.setVdsName(rs.getString("vds_name")); entity.setId(getGuidDefaultEmpty(rs, "id")); entity.setIpv4BootProtocol(org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.forValue(rs.getInt("boot_protocol"))); entity.<START_MOD>setIpv6BootProtocol(org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.forValue(rs.getInt("ipv6_boot_protocol"))); entity.<END_MOD>setMtu(rs.getInt("mtu")); entity.setBridged(rs.getBoolean("bridged")); entity.setQos(hostNetworkQosDao.get(entity.getId())); entity.setLabels(org.ovirt.engine.core.utils.SerializationFactory.getDeserializer().deserialize(rs.getString("labels"), java.util.HashSet.class)); return entity; }	@java.lang.SuppressWarnings("unchecked") @java.lang.Override public org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity = createInterface(rs); entity.setStatistics(org.ovirt.engine.core.dao.network.InterfaceDaoImpl.HostNetworkStatisticsRowMapper.INSTANCE.mapRow(rs, rowNum)); entity.setType(((java.lang.Integer) (rs.getObject("type")))); entity.setIpv4Gateway(rs.getString("gateway")); entity.setIpv6Gateway(rs.getString("ipv6_gateway")); entity.setIpv4Subnet(rs.getString("subnet")); entity.setIpv6Prefix(getInteger(rs, "ipv6_prefix")); entity.setIpv4Address(rs.getString("addr")); entity.setIpv6Address(rs.getString("ipv6_address")); entity.setNetworkName(rs.getString("network_name")); entity.setName(rs.getString("name")); entity.setVdsId(getGuid(rs, "vds_id")); entity.setVdsName(rs.getString("vds_name")); entity.setId(getGuidDefaultEmpty(rs, "id")); entity.setIpv4BootProtocol(org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.forValue(rs.getInt("boot_protocol"))); entity.setIpv6BootProtocol(org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.forValue(rs.getInt("ipv6_boot_protocol"))); entity.setMtu(rs.getInt("mtu")); entity.setBridged(rs.getBoolean("bridged")); entity.setQos(hostNetworkQosDao.get(entity.getId())); entity.setLabels(org.ovirt.engine.core.utils.SerializationFactory.getDeserializer().deserialize(rs.getString("labels"), java.util.HashSet.class)); return entity; }
public org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol <START_MOD>resolve(org.ovirt.engine.core.vdsbroker.vdsbroker.IpInfoFetcher ipInfoFetcher) { org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol bootProtocol<END_MOD> = org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.NONE; if (<START_MOD>ipInfoFetcher.<END_MOD>bootProtocolDhcp()) { <START_MOD>bootProtocol<END_MOD> = org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.DHCP; } else if (org.apache.commons.lang.StringUtils.isNotEmpty(<START_MOD>ipInfoFetcher.<END_MOD>fetchIpAddress())) { <START_MOD>bootProtocol<END_MOD> = org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP; } <START_MOD>return<END_MOD> <START_MOD>bootProtocol<END_MOD>; }	public org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol resolve(org.ovirt.engine.core.vdsbroker.vdsbroker.IpInfoFetcher ipInfoFetcher) { if (ipInfoFetcher.isBootProtocolDhcp()) { return org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.DHCP; } else if (org.apache.commons.lang.StringUtils.isNotEmpty(ipInfoFetcher.fetchIpAddress())) { return org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP; } else { return org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.NONE; } }
private static java.lang.Integer extractIpv6Prefix(java.util.Map<java.lang.String, java.lang.Object> properties) { final java.lang.String ipv6Address = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractIpv6Address(properties); if (ipv6Address == null) { return null; } final java.lang.String[] splitIpv6Address = ipv6Address.split("/"); if ((splitIpv6Address.length) != 2) { return null; } try { return java.lang.Integer.parseInt(splitIpv6Address[1]); } catch (java.lang.NumberFormatException e) { return null; } }	static java.lang.String extractIpv6Address(java.lang.String address) { if (org.apache.commons.lang.StringUtils.isEmpty(address)) { return null; } final java.util.regex.Matcher matcher = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.IPV6_ADDRESS_CAPTURE_PATTERN.matcher(address); return matcher.matches() ? matcher.group(1) : address; }
private static java.lang.String extractIpv6Address(java.util.Map<java.lang.String, java.lang.Object> properties) { return ((java.lang.String) (properties.get("addr"))); }	private static java.lang.String getIpv6Address(java.util.Map<java.lang.String, java.lang.Object> properties) { final java.lang.Object[] ipv6Addresses = ((java.lang.Object[]) (properties.get("ipv6addrs"))); if ((ipv6Addresses == null) || ((ipv6Addresses.length) == 0)) { return null; } return ((java.lang.String) (ipv6Addresses[0])); }
private static void setGateway(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.VDS host, org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol bootProtocol, org.ovirt.engine.core.vdsbroker.vdsbroker.IpInfoFetcher ipInfoFetcher, java.util.function.Consumer<java.lang.String> gatewaySetter) { if (bootProtocol == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP)) { java.lang.String gateway = ipInfoFetcher.fetchGateway(); if (org.apache.commons.lang.StringUtils.isNotEmpty(gateway)) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setGatewayIfNecessary(iface, host, gateway, gatewaySetter); } } }	private static void setBootProtocolAndGateway(org.ovirt.engine.core.vdsbroker.vdsbroker.BootProtocolResolver bootProtocolResolver, org.ovirt.engine.core.vdsbroker.vdsbroker.IpInfoFetcher ipInfoFetcher, java.util.function.Consumer<org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol> bootProtocolSetter, java.util.function.Consumer<java.lang.String> gatewaySetter) { final org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol bootProtocol = bootProtocolResolver.resolve(ipInfoFetcher); bootProtocolSetter.accept(bootProtocol); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setGateway(bootProtocol, ipInfoFetcher, gatewaySetter); }
public static void setGatewayIfNecessary(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.VDS host, java.lang.String gateway<START_MOD>, java.util.function.Consumer<java.lang.String> gatewaySetter<END_MOD>) { <START_MOD>if<END_MOD> <START_MOD>(<END_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.<START_MOD>isGatewayNecessary<END_MOD>().<START_MOD>test<END_MOD>(iface, host)) { <START_MOD>gatewaySetter<END_MOD>.<START_MOD>accept<END_MOD>(gateway); } }	private static void setGateway(org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol bootProtocol, org.ovirt.engine.core.vdsbroker.vdsbroker.IpInfoFetcher ipInfoFetcher, java.util.function.Consumer<java.lang.String> gatewaySetter) { if (bootProtocol == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP)) { java.lang.String gateway = ipInfoFetcher.fetchGateway(); if (org.apache.commons.lang.StringUtils.isNotEmpty(gateway)) { gatewaySetter.accept(gateway); } } }
@java.lang.Override public boolean bootProtocolDhcp() { return java.lang.Boolean.TRUE.equals(nicProperties.get("dhcpv6")); }	@java.lang.Override public boolean isBootProtocolDhcp() { return java.lang.Boolean.TRUE.equals(nicProperties.get("dhcpv6")); }
boolean bootProtocolDhcp();	boolean isBootProtocolDhcp();
@java.lang.Override public boolean bootProtocolDhcp() { return "dhcp".equalsIgnoreCase(((java.lang.String) (nicProperties.get(VdsProperties.BOOT_PROTOCOL)))); }	@java.lang.Override public boolean isBootProtocolDhcp() { return "dhcp".equalsIgnoreCase(((java.lang.String) (nicProperties.get(VdsProperties.BOOT_PROTOCOL)))); }
@java.lang.Override public boolean bootProtocolDhcp() { return java.lang.Boolean.TRUE.equals(nicProperties.get("dhcpv4")); }	@java.lang.Override public boolean isBootProtocolDhcp() { return java.lang.Boolean.TRUE.equals(nicProperties.get("dhcpv4")); }
protected void addBootProtocolForRoleNetworkAttachment(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { if (org.ovirt.engine.core.utils.NetworkUtils.isRoleNetwork(getNetworkCluster(nic, network))) { if (((attachment.getIpConfiguration()) != null) && (attachment.getIpConfiguration().<START_MOD>hasPrimaryIpv4AddressSet<END_MOD>())) { org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = attachment.getIpConfiguration().<START_MOD>getIpv4PrimaryAddress<END_MOD>(); if (((primaryAddress.getBootProtocol()) == null) || ((primaryAddress.getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.NONE))) { primaryAddress.setBootProtocol(NetworkBootProtocol.DHCP); } } else { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration; if ((attachment.getIpConfiguration()) == null) { ipConfiguration = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration(); } else { ipConfiguration = attachment.getIpConfiguration(); } org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); primaryAddress.setBootProtocol(NetworkBootProtocol.DHCP); ipConfiguration.setIPv4Addresses(java.util.Collections.singletonList(primaryAddress)); attachment.setIpConfiguration(ipConfiguration); } } }	protected void addBootProtocolForRoleNetworkAttachment(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { if (org.ovirt.engine.core.utils.NetworkUtils.isRoleNetwork(getNetworkCluster(nic, network))) { if (((attachment.getIpConfiguration()) != null) && (attachment.getIpConfiguration().hasIpv4PrimaryAddressSet())) { org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = attachment.getIpConfiguration().getIpv4PrimaryAddress(); if (((primaryAddress.getBootProtocol()) == null) || ((primaryAddress.getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.NONE))) { primaryAddress.setBootProtocol(NetworkBootProtocol.DHCP); } } else { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration; if ((attachment.getIpConfiguration()) == null) { ipConfiguration = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration(); } else { ipConfiguration = attachment.getIpConfiguration(); } org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); primaryAddress.setBootProtocol(NetworkBootProtocol.DHCP); ipConfiguration.setIPv4Addresses(java.util.Collections.singletonList(primaryAddress)); attachment.setIpConfiguration(ipConfiguration); } } }
private void <START_MOD>addIpv4BootProtocol<END_MOD>(java.util.Map<java.lang.String, java.lang.Object> opts, org.ovirt.engine.core.common.vdscommands.HostNetwork attachment) { switch (attachment.<START_MOD>getIpv4BootProtocol<END_MOD>()) { case DHCP : opts.put(org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.BOOT_PROTOCOL, org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.DHCP_BOOT_PROTOCOL); break; case STATIC_IP : org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.putIfNotEmpty(opts, "ipaddr", attachment.<START_MOD>getIpv4Address<END_MOD>()); putPrefixOrNetmaskIfNotEmpty(opts, attachment.<START_MOD>getIpv4Netmask<END_MOD>()); org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.putIfNotEmpty(opts, "gateway", attachment.<START_MOD>getIpv4Gateway<END_MOD>()); break; default : break; } }	private void addIpv4BootProtocol(java.util.Map<java.lang.String, java.lang.Object> opts, org.ovirt.engine.core.common.vdscommands.HostNetwork attachment) { switch (attachment.getIpv4BootProtocol()) { case DHCP : opts.put(org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.BOOT_PROTOCOL, org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.DHCP_BOOT_PROTOCOL); break; case STATIC_IP : org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.putIfNotEmpty(opts, "ipaddr", attachment.getIpv4Address()); putIpv4PrefixOrNetmaskIfNotEmpty(opts, attachment.getIpv4Netmask()); org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.putIfNotEmpty(opts, "gateway", attachment.getIpv4Gateway()); break; default : break; } }
private void addIpv6BootProtocol(java.util.Map<java.lang.String, java.lang.Object> opts, org.ovirt.engine.core.common.vdscommands.HostNetwork attachment) { switch (attachment.getIpv6BootProtocol()) { case DHCP : opts.put(org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.DHCPV6_BOOT_PROTOCOL, java.lang.Boolean.TRUE); break; case STATIC_IP : opts.put(org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.DHCPV6_BOOT_PROTOCOL, java.lang.Boolean.FALSE); org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.putIfNotEmpty(opts, "ipv6addr", getIpv6Address(attachment)); putPrefixOrNetmaskIfNotEmpty(opts, attachment.getIpv4Netmask()); org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.putIfNotEmpty(opts, "ipv6gateway", attachment.getIpv6Gateway()); break; default : opts.put(org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.DHCPV6_BOOT_PROTOCOL, java.lang.Boolean.FALSE); break; } }	private void addIpv6BootProtocol(java.util.Map<java.lang.String, java.lang.Object> opts, org.ovirt.engine.core.common.vdscommands.HostNetwork attachment) { final org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol ipv6BootProtocol = attachment.getIpv6BootProtocol(); opts.put(org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.DHCPV6_BOOT_PROTOCOL, ((org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.DHCP) == ipv6BootProtocol)); if ((org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP) == ipv6BootProtocol) { org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.putIfNotEmpty(opts, "ipv6addr", getIpv6Address(attachment)); org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.putIfNotEmpty(opts, "ipv6gateway", attachment.getIpv6Gateway()); } }
private java.lang.String getIpv6Address(org.ovirt.engine.core.common.vdscommands.HostNetwork attachment) { final java.lang.String ipv6Address = attachment.getIpv6Address(); if (ipv6Address.contains("/")) { return ipv6Address; } else { return java.text.MessageFormat.format("{1}/{2}", ipv6Address, attachment.getIpv6Prefix()); } }	private java.lang.String getIpv6Address(org.ovirt.engine.core.common.vdscommands.HostNetwork attachment) { final java.lang.String ipv6Address = attachment.getIpv6Address(); final java.lang.Integer ipv6Prefix = attachment.getIpv6Prefix(); return ipv6Prefix == null ? ipv6Address : java.lang.String.format("%s/%d", ipv6Address, ipv6Prefix); }
private void assertIpConfiguration(org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration) { org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = ipConfiguration.<START_MOD>getIpv4PrimaryAddress<END_MOD>(); assertThat(primaryAddress.getBootProtocol(), is(interfaceWithAttachedClusterNetworkA.getIpv4BootProtocol())); assertThat(primaryAddress.getAddress(), is(interfaceWithAttachedClusterNetworkA.getIpv4Address())); assertThat(primaryAddress.getNetmask(), is(interfaceWithAttachedClusterNetworkA.getIpv4Subnet())); assertThat(primaryAddress.getGateway(), is(interfaceWithAttachedClusterNetworkA.getIpv4Gateway())); }	private void assertNicIpConfiguration(org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { assertNicIpv4Configuration(ipConfiguration.getIpv4PrimaryAddress(), nic); assertNicIpv6Configuration(ipConfiguration.getIpv6PrimaryAddress(), nic); }
private boolean primaryIpv6AddressNotSet() { return (!(hasIpConfiguration())) || (!(getIpConfiguration().hasPrimaryIpv6AddressSet())); }	private boolean primaryIpv6AddressNotSet() { return (!(hasIpConfiguration())) || (!(getIpConfiguration().hasIpv6PrimaryAddressSet())); }
@org.junit.Test public void testIsNetworkInSyncWhenIpConfigurationIsEmpty() throws java.lang.Exception { when(mockedIpConfiguration.<START_MOD>hasPrimaryIpv4AddressSet<END_MOD>()).thenReturn(false); assertThat(createTestedInstance().isNetworkInSync(), is(true)); }	@org.junit.Test public void testIsNetworkInSyncWhenIpConfigurationIsEmpty() throws java.lang.Exception { when(mockedIpConfiguration.hasIpv4PrimaryAddressSet()).thenReturn(false); assertThat(createTestedInstance().isNetworkInSync(), is(true)); }
private void assertIpConfiguration(org.ovirt.engine.core.common.businessentities.network.IpConfiguration persistedIpConfiguration, org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration) { org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = persistedIpConfiguration.<START_MOD>getIpv4PrimaryAddress<END_MOD>(); assertThat(primaryAddress.getBootProtocol(), is(ipConfiguration.<START_MOD>getIpv4PrimaryAddress<END_MOD>().getBootProtocol())); assertThat(primaryAddress.getAddress(), is(ipConfiguration.<START_MOD>getIpv4PrimaryAddress<END_MOD>().getAddress())); assertThat(primaryAddress.getNetmask(), is(ipConfiguration.<START_MOD>getIpv4PrimaryAddress<END_MOD>().getNetmask())); assertThat(primaryAddress.getGateway(), is(ipConfiguration.<START_MOD>getIpv4PrimaryAddress<END_MOD>().getGateway())); }	private void assertIpConfigurationsEqual(org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration1, org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration2) { assertIpv4AddressesEqual(ipConfiguration1.getIpv4PrimaryAddress(), ipConfiguration2.getIpv4PrimaryAddress()); assertIpv6AddressesEqual(ipConfiguration1.getIpv6PrimaryAddress(), ipConfiguration2.getIpv6PrimaryAddress()); }
private void initIpConfiguration() { when(mockedIpConfiguration.<START_MOD>hasPrimaryIpv4AddressSet<END_MOD>()).thenReturn(true); when(mockedIpConfiguration.<START_MOD>getIpv4PrimaryAddress<END_MOD>()).thenReturn(mockedIPv4Address); }	private void initIpConfiguration() { when(mockedIpConfiguration.hasIpv4PrimaryAddressSet()).thenReturn(true); when(mockedIpConfiguration.getIpv4PrimaryAddress()).thenReturn(mockedIPv4Address); }
private boolean <START_MOD>primaryIpv4AddressNotSet<END_MOD>() { return (!(hasIpConfiguration())) || (!(getIpConfiguration().<START_MOD>hasPrimaryIpv4AddressSet<END_MOD>())); }	private boolean primaryIpv4AddressNotSet() { return (!(hasIpConfiguration())) || (!(getIpConfiguration().hasIpv4PrimaryAddressSet())); }
public org.ovirt.engine.core.bll.ValidationResult bootProtocolSetForRoleNetwork() { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = attachment.getIpConfiguration(); boolean failWhen = (isRoleNetwork()) && (((ipConfiguration == null) || (!(ipConfiguration.<START_MOD>hasPrimaryIpv4AddressSet<END_MOD>()))) || ((ipConfiguration.<START_MOD>getIpv4PrimaryAddress<END_MOD>().getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.NONE))); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL_ENTITY, getNetwork().getName())).when(failWhen); }	public org.ovirt.engine.core.bll.ValidationResult bootProtocolSetForRoleNetwork() { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = attachment.getIpConfiguration(); boolean failWhen = (isRoleNetwork()) && (((ipConfiguration == null) || (!(ipConfiguration.hasIpv4PrimaryAddressSet()))) || ((ipConfiguration.getIpv4PrimaryAddress().getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.NONE))); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL_ENTITY, getNetwork().getName())).when(failWhen); }
public org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol getIpv6BootProtocol() { return (hasIpConfiguration()) && (getIpConfiguration().hasPrimaryIpv4AddressSet()) ? getIpConfiguration().getIpv4PrimaryAddress().getBootProtocol() : null; }	public org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol getIpv6BootProtocol() { if (primaryIpv6AddressNotSet()) { return null; } return getIpConfiguration().getIpv6PrimaryAddress().getBootProtocol(); }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("defaultRoute", isDefaultRoute()).append("bonding", isBonding()).append("networkName", getNetworkName()).append("nicName", getNicName()).append("vlan", getVlan()).append("mtu", getMtu()).append("vmNetwork", isVmNetwork()).append("stp", isStp()).append("properties", getProperties()).append("bootProtocol", <START_MOD>getIpv4BootProtocol<END_MOD>()).append("address", <START_MOD>getIpv4Address<END_MOD>()).append("netmask", <START_MOD>getIpv4Netmask<END_MOD>()).append("gateway", <START_MOD>getIpv4Gateway<END_MOD>()).build(); }	@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("defaultRoute", isDefaultRoute()).append("bonding", isBonding()).append("networkName", getNetworkName()).append("nicName", getNicName()).append("vlan", getVlan()).append("mtu", getMtu()).append("vmNetwork", isVmNetwork()).append("stp", isStp()).append("properties", getProperties()).append("ipv4BootProtocol", getIpv4BootProtocol()).append("ipv4Address", getIpv4Address()).append("ipv4Netmask", getIpv4Netmask()).append("ipv4Gateway", getIpv4Gateway()).append("ipv6BootProtocol", getIpv6BootProtocol()).append("ipv6Address", getIpv6Address()).append("ipv6Prefix", getIpv6Prefix()).append("ipv6Gateway", getIpv6Gateway()).build(); }
public java.lang.String getIpv6Address() { if (primaryIpv6AddressNotSet()) { return null; } return getIpConfiguration().getIpv4PrimaryAddress().getAddress(); }	public java.lang.String getIpv6Address() { if (primaryIpv6AddressNotSet()) { return null; } return getIpConfiguration().getIpv6PrimaryAddress().getAddress(); }
public org.ovirt.engine.core.bll.ValidationResult validateGateway() { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = attachment.getIpConfiguration(); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.NETWORK_ATTACH_ILLEGAL_GATEWAY).when((((((ipConfiguration != null) && (ipConfiguration.<START_MOD>hasPrimaryIpv4AddressSet<END_MOD>())) && (org.apache.commons.lang.StringUtils.isNotEmpty(ipConfiguration.<START_MOD>getIpv4PrimaryAddress<END_MOD>().getGateway()))) && (!(managementNetworkUtil.isManagementNetwork(getNetwork().getId(), host.getClusterId())))) && (!(org.ovirt.engine.core.common.FeatureSupported.multipleGatewaysSupported(host.getClusterCompatibilityVersion()))))); }	public org.ovirt.engine.core.bll.ValidationResult existingAttachmentIsReused(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> existingAttachmentsByNetworkId) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment existingAttachmentWithTheSameNetwork = existingAttachmentsByNetworkId.get(attachment.getNetworkId()); if (existingAttachmentWithTheSameNetwork == null) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ATTACHMENT_IS_NOT_REUSED, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_ATTACHMENT_ID, existingAttachmentWithTheSameNetwork.getId()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_NAME, existingAttachmentWithTheSameNetwork.getNetworkName())).unless(existingAttachmentWithTheSameNetwork.getId().equals(attachment.getId())); }
public org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol <START_MOD>getIpv4BootProtocol<END_MOD>() { return (hasIpConfiguration()) && (getIpConfiguration().<START_MOD>hasPrimaryIpv4AddressSet<END_MOD>()) ? getIpConfiguration().<START_MOD>getIpv4PrimaryAddress<END_MOD>().getBootProtocol() : null; }	public org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol getIpv4BootProtocol() { if (primaryIpv4AddressNotSet()) { return null; } return getIpConfiguration().getIpv4PrimaryAddress().getBootProtocol(); }
public org.ovirt.engine.core.common.businessentities.network.IpV6Address getIpv6PrimaryAddress() { if (!(hasPrimaryIpv6AddressSet())) { throw new java.lang.IllegalStateException("IpConfiguration does not have IPv4 address set."); } return getIpV6Addresses().get(0); }	public org.ovirt.engine.core.common.businessentities.network.IpV6Address getIpv6PrimaryAddress() { if (!(hasIpv6PrimaryAddressSet())) { throw new java.lang.IllegalStateException("IpConfiguration does not have IPv6 address set."); } return getIpV6Addresses().get(0); }
public org.ovirt.engine.core.common.businessentities.network.IPv4Address <START_MOD>getIpv4PrimaryAddress<END_MOD>() { if (!(<START_MOD>hasPrimaryIpv4AddressSet<END_MOD>())) { throw new java.lang.IllegalStateException( does not have IPv4 address set. } return getIPv4Addresses().get(0); }	public org.ovirt.engine.core.common.businessentities.network.IPv4Address getIpv4PrimaryAddress() { if (!(hasIpv4PrimaryAddressSet())) { throw new java.lang.IllegalStateException("IpConfiguration does not have IPv4 address set."); } return getIPv4Addresses().get(0); }
public boolean hasPrimaryIpv6AddressSet() { return (((ipV6Addresses) != null) && (!(ipV6Addresses.isEmpty()))) && ((ipV6Addresses.get(0)) != null); }	public boolean hasIpv6PrimaryAddressSet() { return (((ipV6Addresses) != null) && (!(ipV6Addresses.isEmpty()))) && ((ipV6Addresses.get(0)) != null); }
public boolean <START_MOD>hasPrimaryIpv4AddressSet<END_MOD>() { return (((iPv4Addresses) != null) && (!(iPv4Addresses.isEmpty()))) && ((iPv4Addresses.get(0)) != null); }	public boolean hasIpv4PrimaryAddressSet() { return (((iPv4Addresses) != null) && (!(iPv4Addresses.isEmpty()))) && ((iPv4Addresses.get(0)) != null); }
private void mapIpConfiguration(org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper, org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration) { boolean <START_MOD>hasPrimaryIpv4AddressSet<END_MOD> = ipConfiguration.<START_MOD>hasPrimaryIpv4AddressSet<END_MOD>(); org.ovirt.engine.core.common.businessentities.network.IPv4Address <START_MOD>primaryIpv4Address<END_MOD> = (<START_MOD>hasPrimaryIpv4AddressSet) ? ipConfiguration.getIpv4PrimaryAddress<END_MOD>() : null; mapper.addValue("boot_protocol", (<START_MOD>hasPrimaryIpv4AddressSet<END_MOD> ? org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(<START_MOD>primaryIpv4Address<END_MOD>.getBootProtocol()) : null)).addValue("address", (<START_MOD>hasPrimaryIpv4AddressSet ? primaryIpv4Address<END_MOD>.getAddress() : null)).addValue("netmask", (<START_MOD>hasPrimaryIpv4AddressSet ? primaryIpv4Address<END_MOD>.getNetmask() : null)).addValue("gateway", (<START_MOD>hasPrimaryIpv4AddressSet ? primaryIpv4Address<END_MOD>.getGateway() : null)); <START_MOD>boolean hasPrimaryIpv6AddressSet = ipConfiguration.hasPrimaryIpv6AddressSet(); org.ovirt.engine.core.common.businessentities.network.IpV6Address primaryIpv6Address = (hasPrimaryIpv6AddressSet) ? ipConfiguration.getIpv6PrimaryAddress() : null; mapper.addValue("ipv6_boot_protocol", (hasPrimaryIpv6AddressSet ? org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(primaryIpv6Address.getBootProtocol()) : null)).addValue("ipv6_address", (hasPrimaryIpv6AddressSet ? primaryIpv6Address.getAddress() : null)).addValue("ipv6_prefix", (hasPrimaryIpv6AddressSet ? primaryIpv6Address.getPrefix() : null)).addValue("ipv6_gateway", (hasPrimaryIpv6AddressSet ? primaryIpv6Address.getGateway() : null)); <END_MOD>}	private void mapIpv4Configuration(org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper, org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration) { if (ipConfiguration.hasIpv4PrimaryAddressSet()) { final org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryIpv4Address = ipConfiguration.getIpv4PrimaryAddress(); mapper.addValue("boot_protocol", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(primaryIpv4Address.getBootProtocol())).addValue("address", primaryIpv4Address.getAddress()).addValue("netmask", primaryIpv4Address.getNetmask()).addValue("gateway", primaryIpv4Address.getGateway()); } else { mapper.addValue("boot_protocol", null).addValue("address", null).addValue("netmask", null).addValue("gateway", null); } }
private boolean defaultRouteRequired(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration) { return (((managementNetworkUtil.isManagementNetwork(network.getId(), org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getClusterId())) && (ipConfiguration != null)) && (ipConfiguration.<START_MOD>hasPrimaryIpv4AddressSet())) && (((ipConfiguration.getIpv4PrimaryAddress<END_MOD>().getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.DHCP)) || (((ipConfiguration.<START_MOD>getIpv4PrimaryAddress<END_MOD>().getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP)) && (org.apache.commons.lang.StringUtils.isNotEmpty(ipConfiguration.<START_MOD>getIpv4PrimaryAddress<END_MOD>().getGateway())))); }	private boolean defaultRouteRequired(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration) { return ((managementNetworkUtil.isManagementNetwork(network.getId(), org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getClusterId())) && (ipConfiguration != null)) && ((isIpv4GatewaySet(ipConfiguration)) || (isIpv6GatewaySet(ipConfiguration))); }
private boolean isPrimaryAddressExist() { return ((networkDataCenterIpConfigurationDefinition) != null) && (networkDataCenterIpConfigurationDefinition.<START_MOD>hasPrimaryIpv4AddressSet<END_MOD>()); }	private boolean isPrimaryAddressExist() { return ((networkDataCenterIpConfigurationDefinition) != null) && (networkDataCenterIpConfigurationDefinition.hasIpv4PrimaryAddressSet()); }
public org.ovirt.engine.core.bll.ValidationResult networkIpAddressWasSameAsHostnameAndChanged(org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingInterfaces) { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = attachment.getIpConfiguration(); if (((ipConfiguration != null) && (ipConfiguration.<START_MOD>hasPrimaryIpv4AddressSet<END_MOD>())) && ((ipConfiguration.<START_MOD>getIpv4PrimaryAddress<END_MOD>().getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP))) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingIface = existingInterfaces.get(attachment.getNicName()); if (existingIface != null) { java.lang.String oldAddress = existingIface.getIpv4Address(); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_NETWORK_ADDRESS_CANNOT_BE_CHANGED, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_ACTION_TYPE_FAILED_NETWORK_ADDRESS_CANNOT_BE_CHANGED_LIST, getNetwork().getName())).when(((org.apache.commons.lang.StringUtils.equals(oldAddress, host.getHostName())) && (!(org.apache.commons.lang.StringUtils.equals(oldAddress, ipConfiguration.<START_MOD>getIpv4PrimaryAddress<END_MOD>().getAddress()))))); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult networkIpAddressWasSameAsHostnameAndChanged(org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingInterfaces) { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = attachment.getIpConfiguration(); if (((ipConfiguration != null) && (ipConfiguration.hasIpv4PrimaryAddressSet())) && ((ipConfiguration.getIpv4PrimaryAddress().getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP))) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingIface = existingInterfaces.get(attachment.getNicName()); if (existingIface != null) { java.lang.String oldAddress = existingIface.getIpv4Address(); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_NETWORK_ADDRESS_CANNOT_BE_CHANGED, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_ACTION_TYPE_FAILED_NETWORK_ADDRESS_CANNOT_BE_CHANGED_LIST, getNetwork().getName())).when(((org.apache.commons.lang.StringUtils.equals(oldAddress, host.getHostName())) && (!(org.apache.commons.lang.StringUtils.equals(oldAddress, ipConfiguration.getIpv4PrimaryAddress().getAddress()))))); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public static org.ovirt.engine.core.common.businessentities.network.IpConfiguration createIpConfigurationFromVdsNetworkInterface(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { if (nic == null) { return org.ovirt.engine.core.utils.NetworkUtils.createDefaultIpConfiguration(); } <START_MOD>final java.util.List<<END_MOD>org.ovirt.engine.core.common.businessentities.network.IPv4Address<START_MOD>> iPv4Addresses<END_MOD> = <START_MOD>java.util.Collections.singletonList(org.ovirt.engine.core.utils.network.function.Ipv4AddressFunction.getInstance().apply(nic)); final java.util.List<org.ovirt.engine.core.common.businessentities.network.IpV6Address> ipV6Addresses = java.util.Collections.singletonList(org.ovirt.engine.core.utils.network.function.Ipv6AddressFunction.getInstance().apply(nic)); org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = <END_MOD>new org.ovirt.engine.core.common.businessentities.network.<START_MOD>IpConfiguration(); ipConfiguration.setIPv4Addresses(iPv4Addresses); ipConfiguration.setIpV6Addresses(ipV6Addresses); return ipConfiguration<END_MOD>; }	public static org.ovirt.engine.core.common.businessentities.network.IpConfiguration createIpConfigurationFromVdsNetworkInterface(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { if (nic == null) { return org.ovirt.engine.core.common.utils.NetworkCommonUtils.createDefaultIpConfiguration(); } final java.util.List<org.ovirt.engine.core.common.businessentities.network.IPv4Address> iPv4Addresses = java.util.stream.Stream.of(nic).map(new org.ovirt.engine.core.utils.network.function.NicToIpv4AddressFunction()).collect(java.util.stream.Collectors.toList()); final java.util.List<org.ovirt.engine.core.common.businessentities.network.IpV6Address> ipV6Addresses = java.util.stream.Stream.of(nic).map(new org.ovirt.engine.core.utils.network.function.NicToIpv6AddressFunction()).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration(); ipConfiguration.setIPv4Addresses(iPv4Addresses); ipConfiguration.setIpV6Addresses(ipV6Addresses); return ipConfiguration; }
private java.lang.String resolveHostManagementNetworkIpv6Address(java.lang.String managementNetworkName) { return resolveHostManagementNetworkAddress(managementNetworkName, VdsNetworkInterface::getIpv6Address); }	private java.lang.String getIpv6AddressOfNetwork(java.lang.String networkName) { return resolveHostManagementNetworkAddress(networkName, VdsNetworkInterface::getIpv6Address); }
public org.ovirt.engine.core.common.action.HostSetupNetworksParameters createSetupNetworkParams(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { org.ovirt.engine.core.common.action.HostSetupNetworksParameters parameters = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters(host.getId()); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment managementAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); managementAttachment.setNetworkId(managementNetwork.getId()); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicNameToNic = org.ovirt.engine.core.common.businessentities.Entities.entitiesByName(host.getInterfaces()); org.ovirt.engine.core.compat.Guid baseNicId = nicNameToNic.get(org.ovirt.engine.core.utils.NetworkUtils.stripVlan(nic)).getId(); managementAttachment.setNicId(baseNicId); org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration(); ipConfiguration.getIPv4Addresses().add(<START_MOD>org.ovirt.engine.core.utils.network.function.Ipv4AddressFunction.getInstance().apply<END_MOD>(nic)); <START_MOD>ipConfiguration.getIpV6Addresses().add(org.ovirt.engine.core.utils.network.function.Ipv6AddressFunction.getInstance().apply(nic)); <END_MOD>managementAttachment.setIpConfiguration(ipConfiguration); parameters.getNetworkAttachments().add(managementAttachment); return parameters; }	public org.ovirt.engine.core.common.action.HostSetupNetworksParameters createSetupNetworkParams(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { org.ovirt.engine.core.common.action.HostSetupNetworksParameters parameters = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters(host.getId()); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment managementAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); managementAttachment.setNetworkId(managementNetwork.getId()); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicNameToNic = org.ovirt.engine.core.common.businessentities.Entities.entitiesByName(host.getInterfaces()); org.ovirt.engine.core.compat.Guid baseNicId = nicNameToNic.get(org.ovirt.engine.core.common.utils.NetworkCommonUtils.stripVlan(nic)).getId(); managementAttachment.setNicId(baseNicId); org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration(); ipConfiguration.setIPv4Addresses(java.util.Collections.singletonList(new org.ovirt.engine.core.utils.network.function.NicToIpv4AddressFunction().apply(nic))); ipConfiguration.setIpV6Addresses(java.util.Collections.singletonList(new org.ovirt.engine.core.utils.network.function.NicToIpv6AddressFunction().apply(nic))); managementAttachment.setIpConfiguration(ipConfiguration); parameters.getNetworkAttachments().add(managementAttachment); return parameters; }
private static java.lang.String findActiveBridge(java.lang.String ipAddress, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> bridges) { java.lang.String activeBridge = null; if (bridges != null) { for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> entry : bridges.entrySet()) { java.util.Map<java.lang.String, java.lang.Object> bridgeProperties = entry.getValue(); java.lang.String bridgeName = entry.getKey(); if (bridgeProperties != null) { java.lang.String <START_MOD>bridgeIpv4Address<END_MOD> = ((java.lang.String) (bridgeProperties.get("addr"))); <START_MOD>java.lang.String bridgeIpv6Address = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractIpv6Address(bridgeProperties); <END_MOD>if ((<START_MOD>(bridgeIpv4Address<END_MOD> != null) && (<START_MOD>bridgeIpv4Address<END_MOD>.equals(ipAddress))) <START_MOD>|| ((bridgeIpv6Address != null) && (bridgeIpv6Address.equals(ipAddress)))) <END_MOD>{ activeBridge = bridgeName; } } } } return activeBridge; }	private static java.lang.String findActiveBridge(java.lang.String ipAddress, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> bridges) { java.lang.String activeBridge = null; if (bridges != null) { for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> entry : bridges.entrySet()) { java.util.Map<java.lang.String, java.lang.Object> bridgeProperties = entry.getValue(); java.lang.String bridgeName = entry.getKey(); if (bridgeProperties != null) { java.lang.String bridgeIpv4Address = ((java.lang.String) (bridgeProperties.get("addr"))); java.lang.String bridgeIpv6Address = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractIpv6Address(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.getIpv6Address(bridgeProperties)); if (((bridgeIpv4Address != null) && (bridgeIpv4Address.equals(ipAddress))) || ((bridgeIpv6Address != null) && (bridgeIpv6Address.equals(ipAddress)))) { activeBridge = bridgeName; } } } } return activeBridge; }
private java.lang.String <START_MOD>resolveHostManagementNetworkIpv4Address<END_MOD>(java.lang.String managementNetworkName) { <START_MOD>return<END_MOD> <START_MOD>resolveHostManagementNetworkAddress<END_MOD>(managementNetworkName<START_MOD>,<END_MOD> VdsNetworkInterface::getIpv4Address); }	private java.lang.String getIpv4AddressOfNetwork(java.lang.String networkName) { return resolveHostManagementNetworkAddress(networkName, VdsNetworkInterface::getIpv4Address); }
<START_MOD>private<END_MOD> java.lang.String ip() { return <START_MOD>((ipv4()) + "|") + (ipv6())<END_MOD>; }	private java.lang.String ip() { if (supportIpv6) { return ((ipv4()) + "|") + (ipv6()); } else { return ipv4(); } }
private java.lang.String ipv6() { return "(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|" + "((?:[0-9A-Fa-f]{1,4}(?::[0-9A-Fa-f]{1,4})*)?)::((?:[0-9A-Fa-f]{1,4}(?::[0-9A-Fa-f]{1,4})*)?)"; }	private java.lang.String ipv6() { return org.ovirt.engine.core.common.utils.ValidationUtils.IPV6_PATTERN; }
private void waitForConnectionStateChange() throws java.lang.InterruptedException { if (client.isClosed()) { org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.logger.debug("Waiting on loosing connection"); int retries = 50; while (client.isClosed()) { if (retries == 0) { throw new org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException("Unable to reconnect after policy reset"); } retries--; java.util.concurrent.TimeUnit.MILLISECONDS.sleep(200); } org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.logger.debug("Connection lost"); } int retries = 10; org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.logger.debug("Waiting on opening connection"); while (!(client.isClosed())) { if (retries == 0) { throw new org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException("Unable to reconnect after policy reset"); } retries--; java.util.concurrent.TimeUnit.MILLISECONDS.sleep(200); } org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.logger.debug("done!"); }	private void waitUntilCheck(java.util.function.Predicate<org.ovirt.vdsm.jsonrpc.client.JsonRpcClient> check, java.lang.String formatBefore, java.lang.String formatAfter) throws java.lang.InterruptedException { java.lang.String hostname = client.getHostname(); org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.logger.debug(formatBefore, hostname); int retries = 50; while (check.test(this.client)) { if (retries == 0) { throw new org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException((("Unable to reconnect to " + hostname) + " after policy reset")); } retries--; java.util.concurrent.TimeUnit.MILLISECONDS.sleep(200); } org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.logger.debug(formatAfter, hostname); }
@java.lang.SuppressWarnings("rawtypes") @java.lang.Override public java.util.concurrent.Future<java.util.Map<java.lang.String, java.lang.Object>> setupNetworks(java.util.Map networks, java.util.Map bonding, java.util.Map options, final boolean isPolicyReset) { final org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.setupNetworks").withParameter("networks", networks).withParameter("bondings", bonding).withParameter("options", options).build(); final org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.FutureCallable callable = new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.FutureCallable(() -> { if (isPolicyReset) { updateHeartbeatPolicy(client.getClientRetryPolicy().clone(), false); <START_MOD>waitForConnectionStateChange(); <END_MOD>} return new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withResponseKey("status"); }); java.util.concurrent.FutureTask<java.util.Map<java.lang.String, java.lang.Object>> future = new java.util.concurrent.FutureTask<java.util.Map<java.lang.String, java.lang.Object>>(callable) { @java.lang.Override public boolean isDone() { if (callable.isDone()) { if (isPolicyReset) { updateHeartbeatPolicy(client.getClientRetryPolicy(), true); } return true; } return false; } }; org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(future); return future; }	@java.lang.SuppressWarnings("rawtypes") @java.lang.Override public java.util.concurrent.Future<java.util.Map<java.lang.String, java.lang.Object>> setupNetworks(java.util.Map networks, java.util.Map bonding, java.util.Map options, final boolean isPolicyReset) { final org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.setupNetworks").withParameter("networks", networks).withParameter("bondings", bonding).withParameter("options", options).build(); final org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.FutureCallable callable = new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.FutureCallable(() -> { if (isPolicyReset) { updateHeartbeatPolicy(client.getClientRetryPolicy().clone(), false); if (client.isClosed()) { waitUntilCheck(( client) -> client.isClosed(), "Waiting on losing connection to {}", "Connection lost for {}"); } waitUntilCheck(( client) -> !(client.isClosed()), "Waiting on opening connection for {}", "Done reconnecting for {}!"); } return new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withResponseKey("status"); }); java.util.concurrent.FutureTask<java.util.Map<java.lang.String, java.lang.Object>> future = new java.util.concurrent.FutureTask<java.util.Map<java.lang.String, java.lang.Object>>(callable) { @java.lang.Override public boolean isDone() { if (callable.isDone()) { if (isPolicyReset) { updateHeartbeatPolicy(client.getClientRetryPolicy(), true); } return true; } return false; } }; org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(future); return future; }
private void setCommandExecutionAllowed(boolean isAllowed) { isExecutionAllowed = isAllowed; newCommand.setIsExecutionAllowed(isAllowed); removeCommand.setIsExecutionAllowed(isAllowed); }	private void setCommandExecutionAllowed(boolean isAllowed) { isExecutionAllowed = isAllowed; updateActionAvailability(); }
private void updateActionAvailability() { getRemoveCommand().setIsExecutionAllowed<START_MOD>(<END_MOD>((((getSelectedItems()) != null) && ((getSelectedItems().size()) > 0))<START_MOD> && (isExecutionAllowed))<END_MOD>); }	private void updateActionAvailability() { newCommand.setIsExecutionAllowed(isExecutionAllowed); getRemoveCommand().setIsExecutionAllowed(((((getSelectedItems()) != null) && ((getSelectedItems().size()) > 0)) && (isExecutionAllowed))); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("External network provider ${providerName} is read only.") java.lang.String ACTION_TYPE_FAILED_EXTERNAL_PROVIDER_IS_READ_ONLY();	@org.ovirt.engine.ui.frontend.DefaultStringValue("External network provider ${ACTION_TYPE_FAILED_EXTERNAL_PROVIDER_IS_READ_ONLY_ENTITY} is read only.") java.lang.String ACTION_TYPE_FAILED_EXTERNAL_PROVIDER_IS_READ_ONLY();
java.lang.String getProviderNameReplacement() { return java.lang.String.format(org.ovirt.engine.core.bll.provider.ProviderValidator.PROVIDER_NAME_REPLACEMENT, provider.getName()); }	private java.lang.String getProviderNameReplacement() { return org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_PROVIDER_IS_READ_ONLY, provider.getName()); }
private org.ovirt.engine.core.bll.ValidationResult validateRemoveExternalNetwork() { org.ovirt.engine.core.common.businessentities.network.ProviderNetwork providerNetwork = getNetwork().getProvidedBy(); if ((providerNetwork == null) || (!(org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getParameters().isRemoveFromNetworkProvider()))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } org.ovirt.engine.core.bll.provider.ProviderValidator providerValidator = new org.ovirt.engine.core.bll.provider.ProviderValidator(getProvider()); return providerValidator.validateReadOnlyActions(); }	private org.ovirt.engine.core.bll.ValidationResult getRemoveExternalNetworkValidationResult() { org.ovirt.engine.core.common.businessentities.network.ProviderNetwork providerNetwork = getNetwork().getProvidedBy(); if ((providerNetwork == null) || (!(org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getParameters().isRemoveFromNetworkProvider()))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } org.ovirt.engine.core.bll.provider.ProviderValidator providerValidator = new org.ovirt.engine.core.bll.provider.ProviderValidator(getProvider()); return providerValidator.validateReadOnlyActions(); }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.NetworkValidator validator = new org.ovirt.engine.core.bll.validator.NetworkValidator(vmDao, org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getNetworkDao().get(getNetwork().getId())); <START_MOD>org.ovirt.engine.core.bll.ValidationResult providerValidationResult = validateRemoveExternalNetwork(); <END_MOD>return ((((<START_MOD>(<END_MOD>validate(validator.networkIsSet(org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getParameters().getId()))) && (validate(validator.notRemovingManagementNetwork()))) && (validate(validator.notIscsiBondNetwork()))) && (validate(validator.networkNotUsedByVms()))) && (validate(validator.networkNotUsedByTemplates()))<START_MOD>) && (validate(providerValidationResult))<END_MOD>; }	@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.NetworkValidator validator = new org.ovirt.engine.core.bll.validator.NetworkValidator(vmDao, org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getNetworkDao().get(getNetwork().getId())); return (((((validate(validator.networkIsSet(org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getParameters().getId()))) && (validate(validator.notRemovingManagementNetwork()))) && (validate(validator.notIscsiBondNetwork()))) && (validate(validator.networkNotUsedByVms()))) && (validate(validator.networkNotUsedByTemplates()))) && (validate(getRemoveExternalNetworkValidationResult())); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { java.util.List<org.ovirt.engine.core.common.businessentities.Provider> providers = <START_MOD>new java.util.LinkedList(); for (org.ovirt.engine.core.common.businessentities.Provider provider : <END_MOD>((java.util.List<org.ovirt.engine.core.common.businessentities.Provider>) (result))<START_MOD>) { if (isProviderReadOnly(provider)) { continue<END_MOD>;<START_MOD> } providers.add(provider); }<END_MOD> getExternalProviders().setItems(providers); selectExternalProvider(); }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { java.util.List<org.ovirt.engine.core.common.businessentities.Provider> providers = getNonReadOnlyExternalNetworkProviders(result); getExternalProviders().setItems(providers); selectExternalProvider(); }
private void initExternalProviderList() { org.ovirt.engine.ui.frontend.AsyncQuery getProvidersQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { java.util.List<org.ovirt.engine.core.common.businessentities.Provider> providers = <START_MOD>new java.util.LinkedList(); for (org.ovirt.engine.core.common.businessentities.Provider provider : <END_MOD>((java.util.List<org.ovirt.engine.core.common.businessentities.Provider>) (result))<START_MOD>) { if (isProviderReadOnly(provider)) { continue; } providers.add(provider); }<END_MOD> getExternalProviders().setItems(providers); selectExternalProvider(); } }); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getAllNetworkProviders(getProvidersQuery); }	private void initExternalProviderList() { org.ovirt.engine.ui.frontend.AsyncQuery getProvidersQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { java.util.List<org.ovirt.engine.core.common.businessentities.Provider> providers = getNonReadOnlyExternalNetworkProviders(result); getExternalProviders().setItems(providers); selectExternalProvider(); } }); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getAllNetworkProviders(getProvidersQuery); }
private boolean isProviderReadOnly(org.ovirt.engine.core.common.businessentities.Provider provider) { if ((provider.getType()) == (org.ovirt.engine.core.common.businessentities.ProviderType.EXTERNAL_NETWORK)) { org.ovirt.engine.core.common.businessentities.ExternalNetworkProviderProperties properties = ((org.ovirt.engine.core.common.businessentities.ExternalNetworkProviderProperties) (provider.getAdditionalProperties())); if (properties.getReadOnly()) { return true; } } return false; }	private boolean isExternalNetworkProviderReadOnly(org.ovirt.engine.core.common.businessentities.Provider provider) { if ((provider.getType()) == (org.ovirt.engine.core.common.businessentities.ProviderType.EXTERNAL_NETWORK)) { org.ovirt.engine.core.common.businessentities.ExternalNetworkProviderProperties properties = ((org.ovirt.engine.core.common.businessentities.ExternalNetworkProviderProperties) (provider.getAdditionalProperties())); if (properties.getReadOnly()) { return true; } } return false; }
@java.lang.Override protected void setClientTokenProvider(com.woorea.openstack.quantum.Quantum client) { com.woorea.openstack.keystone.Keystone keystone = new com.woorea.openstack.keystone.Keystone(provider.getAuthUrl()); com.woorea.openstack.base.client.OpenStackTokenProvider tokenProvider = new com.woorea.openstack.base.client.OpenStackTokenProvider() { private com.woorea.openstack.keystone.model.Access access; @java.lang.Override public java.lang.String getToken() { if ((access) == null) { access = keystone.tokens().authenticate(new com.woorea.openstack.keystone.model.authentication.UsernamePassword(provider.getUsername(), provider.getPassword())).execute(); } return access.getToken().getId(); } @java.lang.Override public void expireToken() { access = null; } }; client.setTokenProvider(tokenProvider); }	private void testProviderIsNotReadOnly() { if (isReadOnly()) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.NO_IMPLEMENTATION); } }
@java.lang.Override public java.lang.String add(org.ovirt.engine.core.common.businessentities.network.Network network) { if (isReadOnly()) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.NO_IMPLEMENTATION); } return super.add(network); }	@java.lang.Override public java.lang.String add(org.ovirt.engine.core.common.businessentities.network.Network network) { testProviderIsNotReadOnly(); return super.add(network); }
@java.lang.Override public void addSubnet(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet subnet) { if (isReadOnly()) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.NO_IMPLEMENTATION); } super.addSubnet(subnet); }	@java.lang.Override public void addSubnet(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet subnet) { testProviderIsNotReadOnly(); super.addSubnet(subnet); }
@java.lang.Override public void removeSubnet(java.lang.String id) { if (isReadOnly()) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.NO_IMPLEMENTATION); } super.removeSubnet(id); }	@java.lang.Override public void removeSubnet(java.lang.String id) { testProviderIsNotReadOnly(); super.removeSubnet(id); }
@java.lang.Override public void remove(java.lang.String id) { if (isReadOnly()) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.NO_IMPLEMENTATION); } super.remove(id); }	@java.lang.Override public void remove(java.lang.String id) { testProviderIsNotReadOnly(); super.remove(id); }
private void waitUntilCheck(org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.Predicate<org.ovirt.vdsm.jsonrpc.client.JsonRpcClient> check, java.lang.String formatBefore, java.lang.String formatAfter) throws java.lang.InterruptedException { if (org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.logger.isDebugEnabled()) { org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.logger.debug(formatBefore, client.getHostname()); } int retries = 50; while (check.test(this.client)) { if (retries == 0) { throw new org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException((("Unable to reconnect to " + (client.getHostname())) + " after policy reset")); } retries--; java.util.concurrent.TimeUnit.MILLISECONDS.sleep(200); } if (org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.logger.isDebugEnabled()) { org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.logger.debug(formatAfter, client.getHostname()); } }	private void waitUntilCheck(org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.Predicate<org.ovirt.vdsm.jsonrpc.client.JsonRpcClient> check, java.lang.String formatBefore, java.lang.String formatAfter) throws java.lang.InterruptedException { java.lang.String hostname = client.getHostname(); org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.logger.debug(formatBefore, hostname); int retries = 50; while (check.test(this.client)) { if (retries == 0) { throw new org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException((("Unable to reconnect to " + hostname) + " after policy reset")); } retries--; java.util.concurrent.TimeUnit.MILLISECONDS.sleep(200); } org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.logger.debug(formatAfter, hostname); }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.Object> call() throws java.lang.Exception { if (isPolicyReset) { updateHeartbeatPolicy(client.getClientRetryPolicy().clone(), false); <START_MOD>if (client.isClosed()) { waitUntilCheck(new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.Predicate<org.ovirt.vdsm.jsonrpc.client.JsonRpcClient>() { @java.lang.Override public boolean test(org.ovirt.vdsm.jsonrpc.client.JsonRpcClient client) {<END_MOD> return <START_MOD>client.isClosed(); } },   on loosing connection to {}   lost for {} } waitUntilCheck(<END_MOD>new org.ovirt.engine.core.vdsbroker.jsonrpc.<START_MOD>JsonRpcVdsServer.Predicate<org.ovirt.vdsm.jsonrpc.client.JsonRpcClient>() { @java.lang.Override public boolean test(org.ovirt.vdsm.jsonrpc.client.JsonRpcClient client) { return !(client.isClosed()); } },   on opening connection for {}   reconnecting for {}! } return new org.ovirt.engine.core.vdsbroker.jsonrpc.<END_MOD>FutureMap(client, request).withResponseKey("status"); }	@java.lang.Override public java.util.Map<java.lang.String, java.lang.Object> call() throws java.lang.Exception { if (isPolicyReset) { updateHeartbeatPolicy(client.getClientRetryPolicy().clone(), false); if (client.isClosed()) { waitUntilCheck(new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.Predicate<org.ovirt.vdsm.jsonrpc.client.JsonRpcClient>() { @java.lang.Override public boolean test(org.ovirt.vdsm.jsonrpc.client.JsonRpcClient client) { return client.isClosed(); } }, "Waiting on losing connection to {}", "Connection lost for {}"); } waitUntilCheck(new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.Predicate<org.ovirt.vdsm.jsonrpc.client.JsonRpcClient>() { @java.lang.Override public boolean test(org.ovirt.vdsm.jsonrpc.client.JsonRpcClient client) { return !(client.isClosed()); } }, "Waiting on opening connection for {}", "Done reconnecting for {}!"); } return new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withResponseKey("status"); }
private static org.ovirt.engine.core.common.businessentities.network.IPv4Address <START_MOD>mapIpv4AddressAssignment<END_MOD>(org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment) { org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); if (ipAddressAssignment.isSetAssignmentMethod()) { org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol assignmentMethod = org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(org.ovirt.engine.api.model.BootProtocol.fromValue(ipAddressAssignment.getAssignmentMethod()), null); iPv4Address.setBootProtocol(assignmentMethod); } if (ipAddressAssignment.isSetIp()) { if (ipAddressAssignment.getIp().isSetAddress()) { iPv4Address.setAddress(ipAddressAssignment.getIp().getAddress()); } if (ipAddressAssignment.getIp().isSetGateway()) { iPv4Address.setGateway(ipAddressAssignment.getIp().getGateway()); } if (ipAddressAssignment.getIp().isSetNetmask()) { iPv4Address.setNetmask(ipAddressAssignment.getIp().getNetmask()); } } return iPv4Address; }	private static org.ovirt.engine.core.common.businessentities.network.IPv4Address mapIpv4AddressAssignment(org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment) { org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); if (ipAddressAssignment.isSetAssignmentMethod()) { org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol assignmentMethod = org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(ipAddressAssignment.getAssignmentMethod(), null); iPv4Address.setBootProtocol(assignmentMethod); } if (ipAddressAssignment.isSetIp()) { if (ipAddressAssignment.getIp().isSetAddress()) { iPv4Address.setAddress(ipAddressAssignment.getIp().getAddress()); } if (ipAddressAssignment.getIp().isSetGateway()) { iPv4Address.setGateway(ipAddressAssignment.getIp().getGateway()); } if (ipAddressAssignment.getIp().isSetNetmask()) { iPv4Address.setNetmask(ipAddressAssignment.getIp().getNetmask()); } } return iPv4Address; }
private static org.ovirt.engine.api.model.IpAddressAssignment mapIpv6AddressAssignment(org.ovirt.engine.core.common.businessentities.network.IpV6Address ipV6Address) { org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment = new org.ovirt.engine.api.model.IpAddressAssignment(); org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip(); ip.setVersion(IpVersion.V6.value()); if ((ipV6Address.getAddress()) != null) { ip.setAddress(ipV6Address.getAddress()); } if ((ipV6Address.getGateway()) != null) { ip.setGateway(ipV6Address.getGateway()); } if ((ipV6Address.getPrefix()) != null) { ip.setNetmask(ipV6Address.getPrefix().toString()); } ipAddressAssignment.setIp(ip); org.ovirt.engine.api.model.BootProtocol assignmentMethod = org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(ipV6Address.getBootProtocol(), null); ipAddressAssignment.setAssignmentMethod((assignmentMethod == null ? null : assignmentMethod.value())); return ipAddressAssignment; }	static org.ovirt.engine.api.model.IpAddressAssignment mapIpv6AddressAssignment(org.ovirt.engine.core.common.businessentities.network.IpV6Address ipV6Address) { org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment = new org.ovirt.engine.api.model.IpAddressAssignment(); org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip(); ip.setVersion(IpVersion.V6); if ((ipV6Address.getAddress()) != null) { ip.setAddress(ipV6Address.getAddress()); } if ((ipV6Address.getGateway()) != null) { ip.setGateway(ipV6Address.getGateway()); } if ((ipV6Address.getPrefix()) != null) { ip.setNetmask(ipV6Address.getPrefix().toString()); } ipAddressAssignment.setIp(ip); org.ovirt.engine.api.model.BootProtocol assignmentMethod = org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(ipV6Address.getBootProtocol(), null); ipAddressAssignment.setAssignmentMethod((assignmentMethod == null ? null : assignmentMethod)); return ipAddressAssignment; }
private static org.ovirt.engine.core.common.businessentities.network.IpV6Address mapIpv6AddressAssignment(org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment) { org.ovirt.engine.core.common.businessentities.network.IpV6Address ipV6Address = new org.ovirt.engine.core.common.businessentities.network.IpV6Address(); if (ipAddressAssignment.isSetAssignmentMethod()) { org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol assignmentMethod = org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(org.ovirt.engine.api.model.BootProtocol.fromValue(ipAddressAssignment.getAssignmentMethod()), null); ipV6Address.setBootProtocol(assignmentMethod); } if (ipAddressAssignment.isSetIp()) { if (ipAddressAssignment.getIp().isSetAddress()) { ipV6Address.setAddress(ipAddressAssignment.getIp().getAddress()); } if (ipAddressAssignment.getIp().isSetGateway()) { ipV6Address.setGateway(ipAddressAssignment.getIp().getGateway()); } if (ipAddressAssignment.getIp().isSetNetmask()) { ipV6Address.setPrefix(java.lang.Integer.valueOf(ipAddressAssignment.getIp().getNetmask())); } } return ipV6Address; }	static org.ovirt.engine.core.common.businessentities.network.IpV6Address mapIpv6AddressAssignment(org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment) { org.ovirt.engine.core.common.businessentities.network.IpV6Address ipV6Address = new org.ovirt.engine.core.common.businessentities.network.IpV6Address(); if (ipAddressAssignment.isSetAssignmentMethod()) { org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol assignmentMethod = org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(ipAddressAssignment.getAssignmentMethod(), null); ipV6Address.setBootProtocol(assignmentMethod); } if (ipAddressAssignment.isSetIp()) { if (ipAddressAssignment.getIp().isSetAddress()) { ipV6Address.setAddress(ipAddressAssignment.getIp().getAddress()); } if (ipAddressAssignment.getIp().isSetGateway()) { ipV6Address.setGateway(ipAddressAssignment.getIp().getGateway()); } if (ipAddressAssignment.getIp().isSetNetmask()) { final java.lang.String netmask = ipAddressAssignment.getIp().getNetmask(); final java.lang.Integer prefix; try { prefix = java.lang.Integer.valueOf(netmask); } catch (java.lang.NumberFormatException e) { final java.lang.String message = java.text.MessageFormat.format("IPv6 prefix has to be integer number. '{}' is not a valid value", netmask); throw new javax.ws.rs.WebApplicationException(message, e, javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(org.ovirt.engine.api.restapi.types.NetworkAttachmentMapper.fault("Invalid value", message)).build()); } ipV6Address.setPrefix(prefix); } } return ipV6Address; }
private static org.ovirt.engine.api.model.IpAddressAssignment <START_MOD>mapIpv4AddressAssignment<END_MOD>(org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address) { org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment = new org.ovirt.engine.api.model.IpAddressAssignment(); org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip(); <START_MOD>ip.setVersion(IpVersion.V4.value()); <END_MOD>if ((iPv4Address.getAddress()) != null) { ip.setAddress(iPv4Address.getAddress()); } if ((iPv4Address.getGateway()) != null) { ip.setGateway(iPv4Address.getGateway()); } if ((iPv4Address.getNetmask()) != null) { ip.setNetmask(iPv4Address.getNetmask()); } ipAddressAssignment.setIp(ip); org.ovirt.engine.api.model.BootProtocol assignmentMethod = org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(iPv4Address.getBootProtocol(), null); ipAddressAssignment.setAssignmentMethod((assignmentMethod == null ? null : assignmentMethod.value())); return ipAddressAssignment; }	private static org.ovirt.engine.api.model.IpAddressAssignment mapIpv4Address(org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address) { org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment = new org.ovirt.engine.api.model.IpAddressAssignment(); org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip(); ip.setVersion(IpVersion.V4); if ((iPv4Address.getAddress()) != null) { ip.setAddress(iPv4Address.getAddress()); } if ((iPv4Address.getGateway()) != null) { ip.setGateway(iPv4Address.getGateway()); } if ((iPv4Address.getNetmask()) != null) { ip.setNetmask(iPv4Address.getNetmask()); } ipAddressAssignment.setIp(ip); org.ovirt.engine.api.model.BootProtocol assignmentMethod = org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(iPv4Address.getBootProtocol(), null); ipAddressAssignment.setAssignmentMethod(assignmentMethod); return ipAddressAssignment; }
private static org.ovirt.engine.api.restapi.types.IpVersion getIpVersion(org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment) { if (!(ipAddressAssignment.isSetIp())) { return null; } return org.ovirt.engine.api.restapi.types.IpVersion.fromValue(ipAddressAssignment.getIp().getVersion()); }	private static org.ovirt.engine.api.model.IpVersion getIpVersion(org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment) { if (!((ipAddressAssignment.isSetIp()) && (ipAddressAssignment.getIp().isSetVersion()))) { return null; } return ipAddressAssignment.getIp().getVersion(); }
private static void addBootProtocol(java.util.Map<java.lang.String, java.lang.Object> entry, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface) { org.ovirt.engine.core.vdsbroker.vdsbroker.BootProtocolResolver resolver = new org.ovirt.engine.core.vdsbroker.vdsbroker.NoCfgBootProtocolResolver(entry, iface); resolver.resolve(); }	private static void addBootProtocol(java.util.Map<java.lang.String, java.lang.Object> nicProperties, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface) { if (nicProperties == null) { return; } final org.ovirt.engine.core.vdsbroker.vdsbroker.BootProtocolResolver resolver = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.getBootProtocolResolver(); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setBootProtocolAndGateway(resolver, new org.ovirt.engine.core.vdsbroker.vdsbroker.NoCfgIpv4InfoFetcher(nicProperties, iface.getIpv4Address()), iface::setIpv4BootProtocol, iface::setIpv4Gateway); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setBootProtocolAndGateway(resolver, new org.ovirt.engine.core.vdsbroker.vdsbroker.NoCfgIpv6InfoFetcher(nicProperties, iface.getIpv6Address()), iface::setIpv6BootProtocol, iface::setIpv6Gateway); }
private static org.ovirt.engine.core.common.businessentities.VmStatic doMapVmBaseHwPartToVmStatic(org.ovirt.engine.core.common.businessentities.VmBase entity, org.ovirt.engine.core.common.businessentities.VmStatic staticVm, org.ovirt.engine.core.compat.Version version) { org.ovirt.engine.core.compat.Version clusterVersion = (version == null) ? org.ovirt.engine.core.compat.Version.getLast() : version; staticVm.setMemSizeMb(entity.getMemSizeMb()); staticVm.setAutoStartup(entity.isAutoStartup()); staticVm.setSmartcardEnabled(entity.isSmartcardEnabled()); staticVm.setDefaultBootSequence(entity.getDefaultBootSequence()); staticVm.setDefaultDisplayType(entity.getDefaultDisplayType()); staticVm.setNumOfSockets(entity.getNumOfSockets()); staticVm.setCpuPerSocket(entity.getCpuPerSocket()); staticVm.setThreadsPerCpu(entity.getThreadsPerCpu()); staticVm.setNumOfMonitors(entity.getNumOfMonitors()); staticVm.setSingleQxlPci(entity.getSingleQxlPci()); staticVm.setPriority(entity.getPriority()); staticVm.setUsbPolicy(entity.getUsbPolicy()); staticVm.setTunnelMigration(entity.getTunnelMigration()); staticVm.setMigrationSupport(entity.getMigrationSupport()); staticVm.setMigrationDowntime(entity.getMigrationDowntime()); staticVm.setMinAllocatedMem(entity.getMinAllocatedMem()); staticVm.setNumOfIoThreads(entity.getNumOfIoThreads()); <START_MOD>return staticVm; <END_MOD>}	private static org.ovirt.engine.core.common.businessentities.VmStatic doMapVmBaseHwPartToVmStatic(org.ovirt.engine.core.common.businessentities.VmBase entity, org.ovirt.engine.core.common.businessentities.VmStatic staticVm, org.ovirt.engine.core.compat.Version version) { staticVm.setMemSizeMb(entity.getMemSizeMb()); staticVm.setAutoStartup(entity.isAutoStartup()); staticVm.setSmartcardEnabled(entity.isSmartcardEnabled()); staticVm.setDefaultBootSequence(entity.getDefaultBootSequence()); staticVm.setDefaultDisplayType(entity.getDefaultDisplayType()); staticVm.setNumOfSockets(entity.getNumOfSockets()); staticVm.setCpuPerSocket(entity.getCpuPerSocket()); staticVm.setThreadsPerCpu(entity.getThreadsPerCpu()); staticVm.setNumOfMonitors(entity.getNumOfMonitors()); staticVm.setSingleQxlPci(entity.getSingleQxlPci()); staticVm.setPriority(entity.getPriority()); staticVm.setUsbPolicy(entity.getUsbPolicy()); staticVm.setTunnelMigration(entity.getTunnelMigration()); staticVm.setMigrationSupport(entity.getMigrationSupport()); staticVm.setMigrationDowntime(entity.getMigrationDowntime()); staticVm.setMinAllocatedMem(entity.getMinAllocatedMem()); staticVm.setNumOfIoThreads(entity.getNumOfIoThreads()); return staticVm; }
private void issueTokenForLoginOnBehalf(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, java.lang.String scope) throws java.lang.Exception { org.ovirt.engine.core.sso.servlets.OAuthTokenServlet.log.debug( issueTokenForLoginOnBehalf java.lang.String[] clientIdAndSecret = org.ovirt.engine.core.sso.utils.SSOUtils.getClientIdClientSecret(request); java.lang.String username = org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameter(request, "username", null); org.ovirt.engine.core.sso.servlets.OAuthTokenServlet.log.debug( to issueTokenForLoginOnBehalf for client: {}, user: {} clientIdAndSecret[0], username); org.ovirt.engine.core.sso.utils.AuthenticationUtils.loginOnBehalf(ssoContext, request, username); java.lang.String token = ((java.lang.String) (request.getAttribute(SSOConstants.HTTP_REQ_ATTR_ACCESS_TOKEN))); org.ovirt.engine.core.sso.utils.SSOUtils.validateRequestScope(request, token, scope); org.ovirt.engine.core.sso.utils.SSOSession ssoSession = org.ovirt.engine.core.sso.utils.SSOUtils.getSsoSession(request, token, true); if (ssoSession == null) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SSOConstants.ERR_CODE_INVALID_GRANT, <START_MOD>ssoContext.getLocalizationUtils().localize(SSOConstants.APP_ERROR_AUTHORIZATION_GRANT_EXPIRED_FOR_USERNAME_PASSWORD, request.getLocale()));<END_MOD> } org.ovirt.engine.core.sso.servlets.OAuthTokenServlet.log.debug( json response org.ovirt.engine.core.sso.utils.SSOUtils.sendJsonData(response, buildResponse(ssoSession)); }	private void issueTokenForLoginOnBehalf(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, java.lang.String scope) throws java.lang.Exception { org.ovirt.engine.core.sso.servlets.OAuthTokenServlet.log.debug("Entered issueTokenForLoginOnBehalf"); java.lang.String[] clientIdAndSecret = org.ovirt.engine.core.sso.utils.SSOUtils.getClientIdClientSecret(request); java.lang.String username = org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameter(request, "username", null); org.ovirt.engine.core.sso.servlets.OAuthTokenServlet.log.debug("Attempting to issueTokenForLoginOnBehalf for client: {}, user: {}", clientIdAndSecret[0], username); org.ovirt.engine.core.sso.utils.AuthenticationUtils.loginOnBehalf(ssoContext, request, username); java.lang.String token = ((java.lang.String) (request.getAttribute(SSOConstants.HTTP_REQ_ATTR_ACCESS_TOKEN))); org.ovirt.engine.core.sso.utils.SSOUtils.validateRequestScope(request, token, scope); org.ovirt.engine.core.sso.utils.SSOSession ssoSession = org.ovirt.engine.core.sso.utils.SSOUtils.getSsoSession(request, token, true); if (ssoSession == null) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SSOConstants.ERR_CODE_INVALID_GRANT, ssoContext.getLocalizationUtils().localize(SSOConstants.APP_ERROR_AUTHORIZATION_GRANT_EXPIRED_FOR_USERNAME_PASSWORD, ((java.util.Locale) (request.getAttribute(SSOConstants.LOCALE))))); } org.ovirt.engine.core.sso.servlets.OAuthTokenServlet.log.debug("Sending json response"); org.ovirt.engine.core.sso.utils.SSOUtils.sendJsonData(response, buildResponse(ssoSession)); }
public java.lang.String localize(final java.lang.String errorMsg, final java.util.Locale requestLocale) { java.util.Locale locale = (requestLocale == null) ? java.util.Locale.getDefault() : requestLocale; java.lang.String ret = ""; java.util.Map<java.lang.String, java.lang.String> messages = getMessages(locale); if ((messages != null) && (messages.containsKey(errorMsg))) { ret = messages.get(errorMsg); } else { if (!((errorMsg == null) || (errorMsg.isEmpty()))) { java.lang.String[] splitted = errorMsg.toLowerCase().split("[_]", (-1)); ret = org.apache.commons.lang.StringUtils.join(splitted, " "); } } return ret; }	public java.lang.String localize(final java.lang.String errorMsg, final java.util.Locale requestLocale) { java.lang.String localizedErrorMsg = errorMsg; java.util.ResourceBundle resourceBundle = getResourceBundle((requestLocale == null ? defaultLocale : requestLocale)); if ((resourceBundle != null) && (resourceBundle.containsKey(errorMsg))) { localizedErrorMsg = resourceBundle.getString(errorMsg); } return localizedErrorMsg; }
public static final java.lang.String mapMessageErrorCode(<START_MOD>org.ovirt.engine.core.sso.utils.SSOContext ssoContext, <END_MOD>javax.servlet.http.HttpServletRequest request, java.lang.String profile, org.ovirt.engine.api.extensions.ExtMap outputMap) { int authResult = outputMap.<java.lang.Integer>get(Authn.InvokeKeys.RESULT); java.lang.String msg = (org.ovirt.engine.core.sso.utils.AuthnMessageMapper.messagesMap.containsKey(authResult)) ? org.ovirt.engine.core.sso.utils.AuthnMessageMapper.messagesMap.get(authResult) : <START_MOD>SSOConstants.APP_ERROR_USER_FAILED_TO_AUTHENTICATE; boolean changePasswordSupported = false<END_MOD>; if (authResult == (Authn.AuthResult.CREDENTIALS_EXPIRED)) { if (((outputMap.<java.lang.String>get(Authn.InvokeKeys.CREDENTIALS_CHANGE_URL)) != null) || (org.ovirt.engine.core.sso.utils.SSOUtils.getSsoContext(request).getSsoProfilesSupportingPasswdChange().contains(profile))) { <START_MOD>changePasswordSupported = true; msg = SSOConstants.APP_ERROR_USER_PASSWORD_EXPIRED_CHANGE_URL_PROVIDED; } else { msg = SSOConstants.APP_ERROR_USER_PASSWORD_EXPIRED; } } msg = ssoContext.getLocalizationUtils().localize(msg, request.getLocale()); if (changePasswordSupported) { <END_MOD>msg = java.lang.String.format(<START_MOD>msg<END_MOD>, ((request.getContextPath()) + (SSOConstants.INTERACTIVE_CHANGE_PASSWD_FORM_URI))); } return msg; }	public static final java.lang.String mapMessageErrorCode(org.ovirt.engine.core.sso.utils.SSOContext ssoContext, javax.servlet.http.HttpServletRequest request, java.lang.String profile, org.ovirt.engine.api.extensions.ExtMap outputMap) { int authResult = outputMap.<java.lang.Integer>get(Authn.InvokeKeys.RESULT); java.lang.String msg = (org.ovirt.engine.core.sso.utils.AuthnMessageMapper.messagesMap.containsKey(authResult)) ? org.ovirt.engine.core.sso.utils.AuthnMessageMapper.messagesMap.get(authResult) : SSOConstants.APP_ERROR_USER_FAILED_TO_AUTHENTICATE; boolean changePasswordSupported = false; if (authResult == (Authn.AuthResult.CREDENTIALS_EXPIRED)) { if (((outputMap.<java.lang.String>get(Authn.InvokeKeys.CREDENTIALS_CHANGE_URL)) != null) || (org.ovirt.engine.core.sso.utils.SSOUtils.getSsoContext(request).getSsoProfilesSupportingPasswdChange().contains(profile))) { changePasswordSupported = true; msg = SSOConstants.APP_ERROR_USER_PASSWORD_EXPIRED_CHANGE_URL_PROVIDED; } else { msg = SSOConstants.APP_ERROR_USER_PASSWORD_EXPIRED; } } msg = ssoContext.getLocalizationUtils().localize(msg, ((java.util.Locale) (request.getAttribute(SSOConstants.LOCALE)))); if (changePasswordSupported) { msg = java.lang.String.format(msg, ((request.getContextPath()) + (SSOConstants.INTERACTIVE_CHANGE_PASSWD_FORM_URI))); } return msg; }
public static void handleCredentials(org.ovirt.engine.core.sso.utils.SSOContext ssoContext, javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.Credentials credentials) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug( AuthenticationUtils.handleCredentials if ((org.apache.commons.lang.StringUtils.isEmpty(credentials.getUsername())) || (org.apache.commons.lang.StringUtils.isEmpty(credentials.getProfile()))) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(<START_MOD>ssoContext.getLocalizationUtils().localize(SSOConstants.APP_ERROR_PROVIDE_USERNAME_PASSWORD_AND_PROFILE, request.getLocale()));<END_MOD> } org.ovirt.engine.core.sso.utils.SSOSession ssoSession = org.ovirt.engine.core.sso.utils.AuthenticationUtils.login(ssoContext, request, credentials, null); org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.info( {}@{} successfully logged in with scopes: {} credentials.getUsername(), credentials.getProfile(), ssoSession.getScope()); }	public static void handleCredentials(org.ovirt.engine.core.sso.utils.SSOContext ssoContext, javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.Credentials credentials) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug("Entered AuthenticationUtils.handleCredentials"); if ((org.apache.commons.lang.StringUtils.isEmpty(credentials.getUsername())) || (org.apache.commons.lang.StringUtils.isEmpty(credentials.getProfile()))) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SSOConstants.APP_ERROR_PROVIDE_USERNAME_PASSWORD_AND_PROFILE, ((java.util.Locale) (request.getAttribute(SSOConstants.LOCALE))))); } org.ovirt.engine.core.sso.utils.SSOSession ssoSession = org.ovirt.engine.core.sso.utils.AuthenticationUtils.login(ssoContext, request, credentials, null); org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.info("User {}@{} successfully logged in with scopes: {}", credentials.getUsername(), credentials.getProfile(), ssoSession.getScope()); }
private java.lang.String changeUserPasswd(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.Credentials userCredentials) throws org.ovirt.engine.core.sso.utils.AuthenticationException { org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.log.debug( Authn to change password for user '{}@{}'. userCredentials.getUsername(), userCredentials.getProfile()); org.ovirt.engine.core.sso.utils.AuthenticationUtils.changePassword(ssoContext, request, userCredentials); org.ovirt.engine.core.sso.utils.SSOUtils.getSsoSession(request).setChangePasswdCredentials(null); if (org.ovirt.engine.core.sso.utils.SSOUtils.isUserAuthenticated(request)) { org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.log.debug( is authenticated updating password in SSOSession for password-access scope. org.ovirt.engine.core.sso.utils.SSOUtils.persistUserPassword(request, org.ovirt.engine.core.sso.utils.SSOUtils.getSsoSession(request), userCredentials.getNewCredentials()); } else { org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.log.debug( password change succeeded, redirecting to login page. org.ovirt.engine.core.sso.utils.SSOUtils.getSsoSession(request).setLoginMessage(<START_MOD>ssoContext.getLocalizationUtils().localize(SSOConstants.APP_MSG_CHANGE_PASSWORD_SUCCEEDED, request.getLocale()));<END_MOD> } return (request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SSOConstants.INTERACTIVE_LOGIN_URI); }	private java.lang.String changeUserPasswd(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.Credentials userCredentials) throws org.ovirt.engine.core.sso.utils.AuthenticationException { org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.log.debug("Calling Authn to change password for user '{}@{}'.", userCredentials.getUsername(), userCredentials.getProfile()); org.ovirt.engine.core.sso.utils.AuthenticationUtils.changePassword(ssoContext, request, userCredentials); org.ovirt.engine.core.sso.utils.SSOUtils.getSsoSession(request).setChangePasswdCredentials(null); if (org.ovirt.engine.core.sso.utils.SSOUtils.isUserAuthenticated(request)) { org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.log.debug("User is authenticated updating password in SSOSession for password-access scope."); org.ovirt.engine.core.sso.utils.SSOUtils.persistUserPassword(request, org.ovirt.engine.core.sso.utils.SSOUtils.getSsoSession(request), userCredentials.getNewCredentials()); } else { org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.log.debug("User password change succeeded, redirecting to login page."); org.ovirt.engine.core.sso.utils.SSOUtils.getSsoSession(request).setLoginMessage(ssoContext.getLocalizationUtils().localize(SSOConstants.APP_MSG_CHANGE_PASSWORD_SUCCEEDED, ((java.util.Locale) (request.getAttribute(SSOConstants.LOCALE))))); } return (request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SSOConstants.INTERACTIVE_LOGIN_URI); }
private org.ovirt.engine.core.sso.utils.Credentials getUserCredentials(javax.servlet.http.HttpServletRequest request) throws org.ovirt.engine.core.sso.utils.AuthenticationException { try { java.lang.String username = org.ovirt.engine.core.sso.utils.SSOUtils.getParameter(request, org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.USERNAME); java.lang.String credentials = org.ovirt.engine.core.sso.utils.SSOUtils.getParameter(request, org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.CREDENTIALS); java.lang.String credentialsNew1 = org.ovirt.engine.core.sso.utils.SSOUtils.getParameter(request, org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.CREDENTIALS_NEW1); java.lang.String credentialsNew2 = org.ovirt.engine.core.sso.utils.SSOUtils.getParameter(request, org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.CREDENTIALS_NEW2); java.lang.String profile = org.ovirt.engine.core.sso.utils.SSOUtils.getParameter(request, org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.PROFILE); return ((((org.apache.commons.lang.StringUtils.isNotEmpty(username)) && (org.apache.commons.lang.StringUtils.isNotEmpty(credentials))) && (org.apache.commons.lang.StringUtils.isNotEmpty(credentialsNew1))) && (org.apache.commons.lang.StringUtils.isNotEmpty(credentialsNew2))) && (org.apache.commons.lang.StringUtils.isNotEmpty(profile)) ? new org.ovirt.engine.core.sso.utils.Credentials(username, credentials, credentialsNew1, credentialsNew2, profile) : null; } catch (java.lang.Exception ex) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(<START_MOD>ssoContext.getLocalizationUtils().localize(SSOConstants.APP_ERROR_UNABLE_TO_EXTRACT_CREDENTIALS, request.getLocale()),<END_MOD> ex); } }	private org.ovirt.engine.core.sso.utils.Credentials getUserCredentials(javax.servlet.http.HttpServletRequest request) throws org.ovirt.engine.core.sso.utils.AuthenticationException { try { java.lang.String username = org.ovirt.engine.core.sso.utils.SSOUtils.getParameter(request, org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.USERNAME); java.lang.String credentials = org.ovirt.engine.core.sso.utils.SSOUtils.getParameter(request, org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.CREDENTIALS); java.lang.String credentialsNew1 = org.ovirt.engine.core.sso.utils.SSOUtils.getParameter(request, org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.CREDENTIALS_NEW1); java.lang.String credentialsNew2 = org.ovirt.engine.core.sso.utils.SSOUtils.getParameter(request, org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.CREDENTIALS_NEW2); java.lang.String profile = org.ovirt.engine.core.sso.utils.SSOUtils.getParameter(request, org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.PROFILE); return ((((org.apache.commons.lang.StringUtils.isNotEmpty(username)) && (org.apache.commons.lang.StringUtils.isNotEmpty(credentials))) && (org.apache.commons.lang.StringUtils.isNotEmpty(credentialsNew1))) && (org.apache.commons.lang.StringUtils.isNotEmpty(credentialsNew2))) && (org.apache.commons.lang.StringUtils.isNotEmpty(profile)) ? new org.ovirt.engine.core.sso.utils.Credentials(username, credentials, credentialsNew1, credentialsNew2, profile) : null; } catch (java.lang.Exception ex) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SSOConstants.APP_ERROR_UNABLE_TO_EXTRACT_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SSOConstants.LOCALE)))), ex); } }
private java.util.Map<java.lang.String, java.lang.String> retrieveByLocale(java.util.Locale locale) { java.util.Map<java.lang.String, java.lang.String> messages = new java.util.HashMap<>(); for (java.lang.String messageSource : messageSources) { retrieveByLocale(locale, messageSource, messages); } return messages; }	private synchronized java.util.ResourceBundle loadResourceBundle(java.util.Locale locale) { java.util.ResourceBundle resourceBundle = null; try { resourceBundle = java.util.ResourceBundle.getBundle(messageSource, locale); resourceBundlesByLocale.put(locale, resourceBundle); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.sso.utils.LocalizationUtils.log.error("File: '{}' could not be loaded: {}", messageSource, e.getMessage()); org.ovirt.engine.core.sso.utils.LocalizationUtils.log.debug("Exception", e); } return resourceBundle; }
private synchronized java.util.Map<java.lang.String, java.lang.String> getMessages(java.util.Locale locale) { java.util.Map<java.lang.String, java.lang.String> messages; if (standardLocale.equals(locale)) { messages = standardMessages; } else { if ((messages = messagesByLocale.get(locale)) == null) { messages = retrieveByLocale(locale); messagesByLocale.put(locale, messages); } } return messages; }	private synchronized java.util.ResourceBundle getResourceBundle(java.util.Locale locale) { java.util.ResourceBundle resourceBundle = resourceBundlesByLocale.get(locale); if (resourceBundle == null) { resourceBundle = loadResourceBundle(locale); } return resourceBundle == null ? defaultResourceBundle : resourceBundle; }
@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { try { org.ovirt.engine.core.sso.servlets.OAuthAuthorizeServlet.log.debug( AuthorizeServlet QueryString: {}, Parameters : {} request.getQueryString(), org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameters(request)); java.lang.String clientId = org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameter(request, SSOConstants.HTTP_PARAM_CLIENT_ID); java.lang.String responseType = org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameter(request, SSOConstants.JSON_RESPONSE_TYPE); java.lang.String scope = org.ovirt.engine.core.sso.utils.SSOUtils.getScopeRequestParameter(request, ""); java.lang.String state = org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameter(request, SSOConstants.HTTP_PARAM_STATE, ""); java.lang.String redirectUri = org.ovirt.engine.core.sso.utils.SSOUtils.getParameter(request, SSOConstants.HTTP_PARAM_REDIRECT_URI); org.ovirt.engine.core.sso.utils.SSOUtils.validateClientRequest(request, clientId, null, scope, redirectUri); if (!(responseType.equals("code"))) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SSOConstants.ERR_CODE_INVALID_REQUEST, java.lang.String.format(<START_MOD>ssoContext.getLocalizationUtils().localize(SSOConstants.APP_ERROR_UNSUPPORTED_PARAMETER_IN_REQUEST, request.getLocale()),<END_MOD> responseType, SSOConstants.JSON_RESPONSE_TYPE)); } login(request, response, clientId, scope, state, redirectUri); } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.SSOUtils.redirectToErrorPage(request, response, ex); } }	@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { try { org.ovirt.engine.core.sso.servlets.OAuthAuthorizeServlet.log.debug("Entered AuthorizeServlet QueryString: {}, Parameters : {}", request.getQueryString(), org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameters(request)); java.lang.String clientId = org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameter(request, SSOConstants.HTTP_PARAM_CLIENT_ID); java.lang.String responseType = org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameter(request, SSOConstants.JSON_RESPONSE_TYPE); java.lang.String scope = org.ovirt.engine.core.sso.utils.SSOUtils.getScopeRequestParameter(request, ""); java.lang.String state = org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameter(request, SSOConstants.HTTP_PARAM_STATE, ""); java.lang.String redirectUri = org.ovirt.engine.core.sso.utils.SSOUtils.getParameter(request, SSOConstants.HTTP_PARAM_REDIRECT_URI); org.ovirt.engine.core.sso.utils.SSOUtils.validateClientRequest(request, clientId, null, scope, redirectUri); if (!(responseType.equals("code"))) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SSOConstants.ERR_CODE_INVALID_REQUEST, java.lang.String.format(ssoContext.getLocalizationUtils().localize(SSOConstants.APP_ERROR_UNSUPPORTED_PARAMETER_IN_REQUEST, ((java.util.Locale) (request.getAttribute(SSOConstants.LOCALE)))), responseType, SSOConstants.JSON_RESPONSE_TYPE)); } login(request, response, clientId, scope, state, redirectUri); } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.SSOUtils.redirectToErrorPage(request, response, ex); } }
private java.lang.String authenticateUser(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, org.ovirt.engine.core.sso.utils.Credentials userCredentials) throws java.io.IOException, javax.servlet.ServletException, org.ovirt.engine.core.sso.utils.AuthenticationException { if ((userCredentials == null) || (!(userCredentials.isValid()))) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(<START_MOD>ssoContext.getLocalizationUtils().localize(SSOConstants.APP_ERROR_INVALID_CREDENTIALS, request.getLocale()));<END_MOD> } try { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug( user using credentials response.addCookie(new javax.servlet.http.Cookie("profile", userCredentials.getProfile())); org.ovirt.engine.core.sso.utils.AuthenticationUtils.handleCredentials(ssoContext, request, userCredentials); return (request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SSOConstants.INTERACTIVE_REDIRECT_TO_MODULE_URI); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { throw ex; } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.error( Server Error: {} ex.getMessage()); org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Exception", ex); throw new java.lang.RuntimeException(ex); } }	private java.lang.String authenticateUser(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, org.ovirt.engine.core.sso.utils.Credentials userCredentials) throws java.io.IOException, javax.servlet.ServletException, org.ovirt.engine.core.sso.utils.AuthenticationException { if ((userCredentials == null) || (!(userCredentials.isValid()))) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SSOConstants.APP_ERROR_INVALID_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SSOConstants.LOCALE))))); } try { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Authenticating user using credentials"); response.addCookie(new javax.servlet.http.Cookie("profile", userCredentials.getProfile())); org.ovirt.engine.core.sso.utils.AuthenticationUtils.handleCredentials(ssoContext, request, userCredentials); return (request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SSOConstants.INTERACTIVE_REDIRECT_TO_MODULE_URI); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { throw ex; } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.error("Internal Server Error: {}", ex.getMessage()); org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Exception", ex); throw new java.lang.RuntimeException(ex); } }
private void validateQueryType(javax.servlet.http.HttpServletRequest request) throws java.lang.Exception { java.lang.String queryType = org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameter(request, SSOConstants.HTTP_PARAM_SEARCH_QUERY_TYPE); if ((!(directoryQueries.containsKey(queryType))) && (!(directoryPublicQueries.containsKey(queryType)))) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SSOConstants.ERR_CODE_INVALID_REQUEST, java.lang.String.format(<START_MOD>ssoContext.getLocalizationUtils().localize(SSOConstants.APP_ERROR_UNSUPPORTED_PARAMETER_IN_REQUEST,<END_MOD> request.<START_MOD>getLocale()),<END_MOD> queryType, SSOConstants.HTTP_PARAM_SEARCH_QUERY_TYPE)); } }	private void validateQueryType(javax.servlet.http.HttpServletRequest request) throws java.lang.Exception { java.lang.String queryType = org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameter(request, SSOConstants.HTTP_PARAM_SEARCH_QUERY_TYPE); if ((!(directoryQueries.containsKey(queryType))) && (!(directoryPublicQueries.containsKey(queryType)))) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SSOConstants.ERR_CODE_INVALID_REQUEST, java.lang.String.format(ssoContext.getLocalizationUtils().localize(SSOConstants.APP_ERROR_UNSUPPORTED_PARAMETER_IN_REQUEST, ((java.util.Locale) (request.getAttribute(SSOConstants.LOCALE)))), queryType, SSOConstants.HTTP_PARAM_SEARCH_QUERY_TYPE)); } }
<START_MOD>private boolean<END_MOD> initialize() { try <START_MOD>{ org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerRanges.log.info( initializing {} getClass().getSimpleName()); this.macsStorage<END_MOD> = createMacsStorage(rangesBoundaries); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerRanges.log.info( initializing. Available MACs in pool: {} macsStorage.getAvailableMacsCount()); <START_MOD>return true; <END_MOD>} catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerRanges.log.error( in initializing MAC Addresses pool manager: {} ex.getMessage()); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerRanges.log.debug("Exception", ex); <START_MOD>return false; } }<END_MOD>	private void initialize() { org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerRanges.log.info("Start initializing {}", getClass().getSimpleName()); this.macsStorage = createMacsStorage(rangesBoundaries); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerRanges.log.info("Finished initializing. Available MACs in pool: {}", macsStorage.getAvailableMacsCount()); }
public void addVLans(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel) { boolean hasVlan = (lineModel.getVlanSize()) != 0; for (org.ovirt.engine.ui.uicommonweb.models.hosts.HostVLan hostVLan : lineModel.getVLans()) { add(new org.ovirt.engine.ui.webadmin.widget.host.VLanElementPanel(hostVLan, isSelectionAvailable)); } if (((!hasVlan) || (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(lineModel.getNetworkName())))) || (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(lineModel.<START_MOD>getIpv4Address<END_MOD>())))) { add(new org.ovirt.engine.ui.webadmin.widget.host.VLanElementPanel(lineModel)); } }	public void addVLans(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel) { boolean hasVlan = (lineModel.getVlanSize()) != 0; for (org.ovirt.engine.ui.uicommonweb.models.hosts.HostVLan hostVLan : lineModel.getVLans()) { add(new org.ovirt.engine.ui.webadmin.widget.host.VLanElementPanel(hostVLan)); } if ((((!hasVlan) || (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(lineModel.getNetworkName())))) || (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(lineModel.getIpv4Address())))) || (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(lineModel.getIpv6Address())))) { add(new org.ovirt.engine.ui.webadmin.widget.host.VLanElementPanel(lineModel)); } }
com.google.gwt.user.client.ui.Grid createRow(final org.ovirt.engine.ui.uicommonweb.models.hosts.HostVLan hostVLan) { com.google.gwt.user.client.ui.HorizontalPanel checkboxPanel = new com.google.gwt.user.client.ui.HorizontalPanel(); checkboxPanel.setWidth("100%"); if (isSelectionAvailable) { checkboxPanel.add(getCheckBox()); } checkboxPanel.add(new com.google.gwt.user.client.ui.Image(org.ovirt.engine.ui.webadmin.widget.host.VLanElementPanel.resources.splitRotateImage())); checkboxPanel.add(new com.google.gwt.user.client.ui.Label(new org.ovirt.engine.ui.webadmin.widget.renderer.HostVLanNameRenderer().render(hostVLan))); com.google.gwt.user.client.ui.Grid row = createBaseVlanRow(checkboxPanel, hostVLan.getInterface().getIsManagement(), hostVLan.getNetworkName(), hostVLan.getInterface().getNetworkImplementationDetails(), hostVLan.<START_MOD>getIpv4Address(), hostVLan.getIpv6Address<END_MOD>()); return row; }	com.google.gwt.user.client.ui.Grid createRow(final org.ovirt.engine.ui.uicommonweb.models.hosts.HostVLan hostVLan) { com.google.gwt.user.client.ui.HorizontalPanel checkboxPanel = new com.google.gwt.user.client.ui.HorizontalPanel(); checkboxPanel.setWidth("100%"); checkboxPanel.add(new com.google.gwt.user.client.ui.Image(org.ovirt.engine.ui.webadmin.widget.host.VLanElementPanel.resources.splitRotateImage())); checkboxPanel.add(new com.google.gwt.user.client.ui.Label(new org.ovirt.engine.ui.webadmin.widget.renderer.HostVLanNameRenderer().render(hostVLan))); com.google.gwt.user.client.ui.Grid row = createBaseVlanRow(checkboxPanel, hostVLan.getInterface().getIsManagement(), hostVLan.getNetworkName(), hostVLan.getInterface().getNetworkImplementationDetails(), hostVLan.getIpv4Address(), hostVLan.getIpv6Address()); return row; }
@org.junit.Test public void testUpdate() { networkAttachment.setNicId(FixturesTool.NETWORK_ATTACHMENT_NIC); dao.save(networkAttachment); org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = networkAttachment.getIpConfiguration(); org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); primaryAddress.setBootProtocol(<START_MOD>Ipv4BootProtocol<END_MOD>.STATIC_IP); primaryAddress.setAddress("192.168.1.2"); primaryAddress.setGateway("192.168.1.1"); primaryAddress.setNetmask("255.255.255.0"); ipConfiguration.setIPv4Addresses(java.util.Collections.singletonList(primaryAddress)); networkAttachment.setIpConfiguration(ipConfiguration); java.util.Map<java.lang.String, java.lang.String> properties = new java.util.HashMap<>(); properties.put("key", "value"); networkAttachment.setProperties(properties); networkAttachment.setNicId(FixturesTool.NETWORK_ATTACHMENT_NIC2); dao.update(networkAttachment); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment result = dao.get(networkAttachment.getId()); assertNotNull(result); assertNetworkAttachmentEquals(networkAttachment, result); }	@org.junit.Test public void testUpdate() { networkAttachment.setNicId(FixturesTool.NETWORK_ATTACHMENT_NIC); dao.save(networkAttachment); org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = populateIpConfiguration(networkAttachment.getIpConfiguration(), Ipv4BootProtocol.STATIC_IP, Ipv4BootProtocol.STATIC_IP); networkAttachment.setIpConfiguration(ipConfiguration); java.util.Map<java.lang.String, java.lang.String> properties = new java.util.HashMap<>(); properties.put("key", "value"); networkAttachment.setProperties(properties); networkAttachment.setNicId(FixturesTool.NETWORK_ATTACHMENT_NIC2); dao.update(networkAttachment); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment result = dao.get(networkAttachment.getId()); assertNotNull(result); assertNetworkAttachmentEquals(networkAttachment, result); }
public org.ovirt.engine.core.common.businessentities.network.IPv4Address createPrimaryAddress() { org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); iPv4Address.setBootProtocol(<START_MOD>Ipv4BootProtocol<END_MOD>.DHCP); return iPv4Address; }	public org.ovirt.engine.core.common.businessentities.network.IPv4Address createPrimaryIpv4Address() { org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); iPv4Address.setBootProtocol(Ipv4BootProtocol.DHCP); return iPv4Address; }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); statsTest = new org.ovirt.engine.core.dao.network.InterfaceDaoTest.HostNetworkStatisticsDaoTest(); dao = dbFacade.getInterfaceDao(); existingVdsInterface = dao.get(FixturesTool.VDS_NETWORK_INTERFACE); newQos = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos(); newQos.setOutAverageLinkshare(30); newQos.setOutAverageUpperlimit(30); newQos.setOutAverageRealtime(30); newVdsInterface = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); newVdsInterface.setStatistics(new org.ovirt.engine.core.common.businessentities.network.VdsNetworkStatistics()); newVdsInterface.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVdsInterface.setName("eth77"); newVdsInterface.setNetworkName("enginet"); newVdsInterface.setIpv4Address("192.168.122.177"); newVdsInterface.setIpv4Subnet("255.255.255.0"); newVdsInterface.setSpeed(1000); newVdsInterface.setType(3); newVdsInterface.setIpv4BootProtocol(<START_MOD>Ipv4BootProtocol<END_MOD>.STATIC_IP); newVdsInterface.setMacAddress("01:C0:81:21:71:17"); newVdsInterface.setIpv4Gateway("192.168.122.1"); newVdsInterface.setMtu(1500); newVdsInterface.setQos(newQos); newVdsStatistics = newVdsInterface.getStatistics(); }	@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); statsTest = new org.ovirt.engine.core.dao.network.InterfaceDaoImplTest.HostNetworkStatisticsDaoTest(); dao = dbFacade.getInterfaceDao(); existingVdsInterface = dao.get(FixturesTool.VDS_NETWORK_INTERFACE); newQos = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos(); newQos.setOutAverageLinkshare(30); newQos.setOutAverageUpperlimit(30); newQos.setOutAverageRealtime(30); newVdsInterface = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); newVdsInterface.setStatistics(new org.ovirt.engine.core.common.businessentities.network.VdsNetworkStatistics()); newVdsInterface.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVdsInterface.setName("eth77"); newVdsInterface.setNetworkName("enginet"); newVdsInterface.setSpeed(1000); newVdsInterface.setType(3); newVdsInterface.setMacAddress("01:C0:81:21:71:17"); newVdsInterface.setIpv4BootProtocol(Ipv4BootProtocol.STATIC_IP); newVdsInterface.setIpv4Address("192.168.122.177"); newVdsInterface.setIpv4Subnet("255.255.255.0"); newVdsInterface.setIpv4Gateway("192.168.122.1"); newVdsInterface.setIpv6BootProtocol(Ipv4BootProtocol.DHCP); newVdsInterface.setIpv6Address("ipv6 address"); newVdsInterface.setIpv6Prefix(666); newVdsInterface.setIpv6Gateway("ipv6 gateway"); newVdsInterface.setMtu(1500); newVdsInterface.setQos(newQos); newVdsStatistics = newVdsInterface.getStatistics(); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.NicConfiguration.class, to = org.ovirt.engine.core.common.businessentities.VmInitNetwork.class) public static org.ovirt.engine.core.common.businessentities.VmInitNetwork map(org.ovirt.engine.api.model.NicConfiguration model, org.ovirt.engine.core.common.businessentities.VmInitNetwork template) { org.ovirt.engine.core.common.businessentities.VmInitNetwork entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); if (model.isSetName()) { entity.setName(model.getName()); } if (model.isOnBoot()) { entity.setStartOnBoot(model.isOnBoot()); } if (model.isSetBootProtocol()) { entity.setBootProtocol(org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(org.ovirt.engine.api.model.BootProtocol.fromValue(model.getBootProtocol()), <START_MOD>Ipv4BootProtocol<END_MOD>.NONE)); } if (model.isSetIp()) { if (model.getIp().isSetAddress()) { entity.setIp(model.getIp().getAddress()); } if (model.getIp().isSetNetmask()) { entity.setNetmask(model.getIp().getNetmask()); } if (model.getIp().isSetGateway()) { entity.setGateway(model.getIp().getGateway()); } } return entity; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.NicConfiguration.class, to = org.ovirt.engine.core.common.businessentities.VmInitNetwork.class) public static org.ovirt.engine.core.common.businessentities.VmInitNetwork map(org.ovirt.engine.api.model.NicConfiguration model, org.ovirt.engine.core.common.businessentities.VmInitNetwork template) { org.ovirt.engine.core.common.businessentities.VmInitNetwork entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); if (model.isSetName()) { entity.setName(model.getName()); } if (model.isOnBoot()) { entity.setStartOnBoot(model.isOnBoot()); } if (model.isSetBootProtocol()) { entity.setBootProtocol(org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(model.getBootProtocol(), Ipv4BootProtocol.NONE)); } if (model.isSetIp()) { if (model.getIp().isSetAddress()) { entity.setIp(model.getIp().getAddress()); } if (model.getIp().isSetNetmask()) { entity.setNetmask(model.getIp().getNetmask()); } if (model.getIp().isSetGateway()) { entity.setGateway(model.getIp().getGateway()); } } return entity; }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getNetworkAttachmentDao(); networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); networkAttachment.setNicId(FixturesTool.VDS_NETWORK_INTERFACE); networkAttachment.setProperties(new java.util.HashMap()); networkAttachment.setId(org.ovirt.engine.core.compat.Guid.newGuid()); networkAttachment.setNetworkId(FixturesTool.NETWORK_ENGINE); org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration(); org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); iPv4Address.setBootProtocol(<START_MOD>Ipv4BootProtocol<END_MOD>.DHCP); ipConfiguration.getIPv4Addresses().add(iPv4Address); networkAttachment.setIpConfiguration(ipConfiguration); }	@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getNetworkAttachmentDao(); networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); networkAttachment.setNicId(FixturesTool.VDS_NETWORK_INTERFACE); networkAttachment.setProperties(new java.util.HashMap()); networkAttachment.setId(org.ovirt.engine.core.compat.Guid.newGuid()); networkAttachment.setNetworkId(FixturesTool.NETWORK_ENGINE); networkAttachment.setIpConfiguration(createIpConfiguration(Ipv4BootProtocol.DHCP, Ipv4BootProtocol.NONE)); }
private static void setBootProtocolAndGateway(org.ovirt.engine.core.common.businessentities.VDS host, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.vdsbroker.vdsbroker.BootProtocolResolver bootProtocolResolver, org.ovirt.engine.core.vdsbroker.vdsbroker.IpInfoFetcher ipInfoFetcher, java.util.function.Consumer<org.ovirt.engine.core.common.businessentities.network.<START_MOD>Ipv4BootProtocol<END_MOD>> bootProtocolSetter, java.util.function.Consumer<java.lang.String> gatewaySetter) { final org.ovirt.engine.core.common.businessentities.network.<START_MOD>Ipv4BootProtocol<END_MOD> bootProtocol = bootProtocolResolver.resolve(ipInfoFetcher); bootProtocolSetter.accept(bootProtocol); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setGateway(iface, host, bootProtocol, ipInfoFetcher, gatewaySetter); }	private static void addBootProtocol(java.util.Map<java.lang.String, java.lang.Object> nicProperties, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface) { if (nicProperties == null) { return; } final org.ovirt.engine.core.vdsbroker.vdsbroker.BootProtocolResolver resolver = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.getBootProtocolResolver(); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setBootProtocolAndGateway(resolver, new org.ovirt.engine.core.vdsbroker.vdsbroker.NoCfgIpv4InfoFetcher(nicProperties, iface.getIpv4Address()), iface::setIpv4BootProtocol, iface::setIpv4Gateway); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setBootProtocolAndGateway(resolver, new org.ovirt.engine.core.vdsbroker.vdsbroker.NoCfgIpv6InfoFetcher(nicProperties, iface.getIpv6Address()), iface::setIpv6BootProtocol, iface::setIpv6Gateway); }
@org.junit.Before public void setUp() throws java.lang.Exception { clusterNetworkA = createNetworkWithName("clusterNetworkA"); clusterNetworkB = createNetworkWithName("clusterNetworkB"); clusterNetworks = new java.util.ArrayList(java.util.Arrays.asList(clusterNetworkA, clusterNetworkB)); interfaceWithAttachedClusterNetworkA = createVdsNetworkInterfaceWithId("interfaceWithAttachedClusterNetworkA"); interfaceWithAttachedClusterNetworkA.setNetworkName(clusterNetworkA.getName()); customPropertiesForNics.add(interfaceWithAttachedClusterNetworkA, createCustomProperties()); interfaceWithAttachedClusterNetworkA.setIpv4BootProtocol(<START_MOD>Ipv4BootProtocol<END_MOD>.STATIC_IP); interfaceWithAttachedClusterNetworkA.setIpv4Address(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.IP_ADDRESS); interfaceWithAttachedClusterNetworkA.setIpv4Subnet(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.NETMASK); interfaceWithAttachedClusterNetworkA.setIpv4Gateway(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.GATEWAY); interfaceWithoutAttachedNetwork = createVdsNetworkInterfaceWithId("interfaceWithoutAttachedNetwork"); }	@org.junit.Before public void setUp() throws java.lang.Exception { clusterNetworkA = createNetworkWithName("clusterNetworkA"); clusterNetworkB = createNetworkWithName("clusterNetworkB"); clusterNetworks = new java.util.ArrayList(java.util.Arrays.asList(clusterNetworkA, clusterNetworkB)); interfaceWithAttachedClusterNetworkA = createVdsNetworkInterfaceWithId("interfaceWithAttachedClusterNetworkA"); interfaceWithAttachedClusterNetworkA.setNetworkName(clusterNetworkA.getName()); customPropertiesForNics.add(interfaceWithAttachedClusterNetworkA, createCustomProperties()); interfaceWithAttachedClusterNetworkA.setIpv4BootProtocol(Ipv4BootProtocol.STATIC_IP); interfaceWithAttachedClusterNetworkA.setIpv4Address(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.IPV4_ADDRESS); interfaceWithAttachedClusterNetworkA.setIpv4Subnet(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.IPV4_NETMASK); interfaceWithAttachedClusterNetworkA.setIpv4Gateway(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.IPV4_GATEWAY); interfaceWithoutAttachedNetwork = createVdsNetworkInterfaceWithId("interfaceWithoutAttachedNetwork"); }
private static void setGateway(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.VDS host, org.ovirt.engine.core.common.businessentities.network.<START_MOD>Ipv4BootProtocol<END_MOD> bootProtocol, org.ovirt.engine.core.vdsbroker.vdsbroker.IpInfoFetcher ipInfoFetcher, java.util.function.Consumer<java.lang.String> gatewaySetter) { if (bootProtocol == (org.ovirt.engine.core.common.businessentities.network.<START_MOD>Ipv4BootProtocol<END_MOD>.STATIC_IP)) { java.lang.String gateway = ipInfoFetcher.fetchGateway(); if (org.apache.commons.lang.StringUtils.isNotEmpty(gateway)) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setGatewayIfNecessary(iface, host, gateway, gatewaySetter); } } }	private static void setBootProtocolAndGateway(org.ovirt.engine.core.vdsbroker.vdsbroker.BootProtocolResolver bootProtocolResolver, org.ovirt.engine.core.vdsbroker.vdsbroker.IpInfoFetcher ipInfoFetcher, java.util.function.Consumer<org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol> bootProtocolSetter, java.util.function.Consumer<java.lang.String> gatewaySetter) { final org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol bootProtocol = bootProtocolResolver.resolve(ipInfoFetcher); bootProtocolSetter.accept(bootProtocol); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setGateway(bootProtocol, ipInfoFetcher, gatewaySetter); }
private org.ovirt.engine.core.common.businessentities.network.IpConfiguration createIpConfiguration() { org.ovirt.engine.core.common.businessentities.network.IPv4Address address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); address.setAddress(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.IP_ADDRESS); address.setNetmask(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.NETMASK); address.setGateway(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.GATEWAY); address.setBootProtocol(<START_MOD>Ipv4BootProtocol<END_MOD>.STATIC_IP); org.ovirt.engine.core.common.businessentities.network.IpConfiguration result = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration(); result.setIPv4Addresses(java.util.Collections.singletonList(address)); return result; }	private org.ovirt.engine.core.common.businessentities.network.IpV6Address createIpv6Address() { org.ovirt.engine.core.common.businessentities.network.IpV6Address address = new org.ovirt.engine.core.common.businessentities.network.IpV6Address(); address.setAddress(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.IPV6_ADDRESS); address.setPrefix(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.IPV6_PREFIX); address.setGateway(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.IPV6_GATEWAY); address.setBootProtocol(Ipv4BootProtocol.STATIC_IP); return address; }
public static boolean isMemoryToBeHotplugged(org.ovirt.engine.core.common.businessentities.VM source, org.ovirt.engine.core.common.businessentities.VM destination) { return (source.getMemSizeMb()) < (destination.getMemSizeMb()); }	public static boolean isMemoryToBeHotplugged(org.ovirt.engine.core.common.businessentities.VM source, org.ovirt.engine.core.common.businessentities.VM destination, boolean memoryUnplugSupported) { return ((source.getMemSizeMb()) < (destination.getMemSizeMb())) || (memoryUnplugSupported && ((source.getMemSizeMb()) > (destination.getMemSizeMb()))); }
private void hotSetCpus(int cpuPerSocket, int newNumOfSockets, int newThreadsPerCpu) { int currentSockets = org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getNumOfSockets(); int currentCpuPerSocket = org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getCpuPerSocket(); int currentThreadsPerCpu = org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getThreadsPerCpu(); if (((org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) && (<START_MOD>org.ovirt.engine.core.common.utils.VmCommonUtils.isCpusToBeHotplugged(org.ovirt.engine.core.bll.UpdateVmCommand.getVm(), org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVm()))) { org.ovirt.engine.core.common.action.HotSetNumberOfCpusParameters params = new org.ovirt.engine.core.common.action.HotSetNumberOfCpusParameters(newVmStatic, (<END_MOD>currentSockets <START_MOD><<END_MOD> newNumOfSockets<START_MOD> ?<END_MOD> org.ovirt.engine.core.common.action.<START_MOD>PlugAction.PLUG : org.ovirt.engine.core.common.action.PlugAction.UNPLUG)); setNumberOfCpusResult = runInternalAction(VdcActionType.HotSetNumberOfCpus,<END_MOD> params<START_MOD>, org.ovirt.engine.core.bll.UpdateVmCommand.cloneContextAndDetachFromParent()); <END_MOD>newVmStatic<START_MOD>.setNumOfSockets((setNumberOfCpusResult.getSucceeded() ? newNumOfSockets : <END_MOD>currentSockets<START_MOD>)); hotSetCpusLog(<END_MOD>params); } }	private void hotSetCpus(org.ovirt.engine.core.common.businessentities.VM newVm) { int currentSockets = org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getNumOfSockets(); int newNumOfSockets = newVm.getNumOfSockets(); if (((org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) && (org.ovirt.engine.core.common.utils.VmCommonUtils.isCpusToBeHotplugged(org.ovirt.engine.core.bll.UpdateVmCommand.getVm(), newVm))) { org.ovirt.engine.core.common.action.HotSetNumberOfCpusParameters params = new org.ovirt.engine.core.common.action.HotSetNumberOfCpusParameters(newVmStatic, (currentSockets < newNumOfSockets ? org.ovirt.engine.core.common.action.PlugAction.PLUG : org.ovirt.engine.core.common.action.PlugAction.UNPLUG)); setNumberOfCpusResult = runInternalAction(VdcActionType.HotSetNumberOfCpus, params, org.ovirt.engine.core.bll.UpdateVmCommand.cloneContextAndDetachFromParent()); if (!(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isHostedEngine())) { newVmStatic.setNumOfSockets((setNumberOfCpusResult.getSucceeded() ? newNumOfSockets : currentSockets)); } hotSetCpusLog(params); } }
@java.lang.Override public void onSuccess(java.lang.Object thisModel, java.lang.Object returnValue) { java.util.List<java.lang.String> changedFields = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).<java.util.List<java.lang.String>>getReturnValue(); if ((!(changedFields.isEmpty())) || (isVmUnpinned())) { org.ovirt.engine.ui.uicommonweb.models.vms.VmNextRunConfigurationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.vms.VmNextRunConfigurationModel(); if (isVmUnpinned()) { confirmModel.setVmUnpinned(); } confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editNextRunConfigurationTitle()); confirmModel.setHelpTag(HelpTag.edit_next_run_configuration); confirmModel.setHashName("edit_next_run_configuration"); confirmModel.setChangedFields(changedFields); confirmModel.setCpuPluggable(<START_MOD>org.ovirt.engine.core.common.utils.VmCommonUtils.isCpusToBeHotplugged<END_MOD>(selectedItem<START_MOD>, <END_MOD>getcurrentVm()<START_MOD>)); confirmModel.setMemoryPluggable(org.ovirt.engine.core.common.utils.VmCommonUtils.isMemoryToBeHotplugged<END_MOD>(selectedItem<START_MOD>, <END_MOD>getcurrentVm())); confirmModel.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand("updateExistingVm", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true)); confirmModel.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("CancelConfirmation", this)); setConfirmWindow(confirmModel); } else { updateExistingVm(false); } }	@java.lang.Override public void onSuccess(java.lang.Object thisModel, java.lang.Object returnValue) { java.util.List<java.lang.String> changedFields = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).<java.util.List<java.lang.String>>getReturnValue(); if ((!(changedFields.isEmpty())) || (isVmUnpinned())) { org.ovirt.engine.ui.uicommonweb.models.vms.VmNextRunConfigurationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.vms.VmNextRunConfigurationModel(); if (isVmUnpinned()) { confirmModel.setVmUnpinned(); } confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editNextRunConfigurationTitle()); confirmModel.setHelpTag(HelpTag.edit_next_run_configuration); confirmModel.setHashName("edit_next_run_configuration"); confirmModel.setChangedFields(changedFields); confirmModel.setCpuPluggable(org.ovirt.engine.core.common.utils.VmCommonUtils.isCpusToBeHotplugged(selectedItem, getcurrentVm())); boolean isMemoryHotUnplugSupported = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isMemoryHotUnplugSupported(getcurrentVm()); confirmModel.setMemoryPluggable(org.ovirt.engine.core.common.utils.VmCommonUtils.isMemoryToBeHotplugged(selectedItem, getcurrentVm(), isMemoryHotUnplugSupported)); confirmModel.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand("updateExistingVm", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true)); confirmModel.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("CancelConfirmation", this)); setConfirmWindow(confirmModel); } else { updateExistingVm(false); } }
@java.lang.Override public void onSuccess(java.lang.Object thisModel, java.lang.Object returnValue) { java.util.List<java.lang.String> changedFields = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); if (!(changedFields.isEmpty())) { org.ovirt.engine.ui.uicommonweb.models.vms.VmNextRunConfigurationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.vms.VmNextRunConfigurationModel(); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editNextRunConfigurationTitle()); confirmModel.setHelpTag(HelpTag.edit_next_run_configuration); confirmModel.setHashName("edit_next_run_configuration"); confirmModel.setChangedFields(changedFields); confirmModel.setCpuPluggable(<START_MOD>org.ovirt.engine.core.common.utils.VmCommonUtils.isCpusToBeHotplugged<END_MOD>(selectedItem<START_MOD>, <END_MOD>gettempVm()<START_MOD>)); confirmModel.setMemoryPluggable(org.ovirt.engine.core.common.utils.VmCommonUtils.isMemoryToBeHotplugged<END_MOD>(selectedItem<START_MOD>, <END_MOD>gettempVm())); confirmModel.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand("updateExistingVm", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true)); confirmModel.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("CancelConfirmation", this)); setConfirmWindow(confirmModel); } else { updateExistingVm(((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel) (thisModel)), false); } }	@java.lang.Override public void onSuccess(java.lang.Object thisModel, java.lang.Object returnValue) { java.util.List<java.lang.String> changedFields = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); if (!(changedFields.isEmpty())) { org.ovirt.engine.ui.uicommonweb.models.vms.VmNextRunConfigurationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.vms.VmNextRunConfigurationModel(); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editNextRunConfigurationTitle()); confirmModel.setHelpTag(HelpTag.edit_next_run_configuration); confirmModel.setHashName("edit_next_run_configuration"); confirmModel.setChangedFields(changedFields); confirmModel.setCpuPluggable(org.ovirt.engine.core.common.utils.VmCommonUtils.isCpusToBeHotplugged(selectedItem, gettempVm())); boolean isMemoryHotUnplugSupported = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isMemoryHotUnplugSupported(gettempVm()); confirmModel.setMemoryPluggable(org.ovirt.engine.core.common.utils.VmCommonUtils.isMemoryToBeHotplugged(selectedItem, gettempVm(), isMemoryHotUnplugSupported)); confirmModel.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand("updateExistingVm", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true)); confirmModel.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("CancelConfirmation", this)); setConfirmWindow(confirmModel); } else { updateExistingVm(((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel) (thisModel)), false); } }
private void hotSetMemory(int newAmountOfMemory) { int currentMemory = org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getMemSizeMb(); if (((org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) && (<START_MOD>org.ovirt.engine.core.common.utils.VmCommonUtils.isMemoryToBeHotplugged(org.ovirt.engine.core.bll.UpdateVmCommand.getVm(), org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVm()))) { org.ovirt.engine.core.common.action.HotSetAmountOfMemoryParameters params = new org.ovirt.engine.core.common.action.HotSetAmountOfMemoryParameters(newVmStatic, (<END_MOD>currentMemory <START_MOD><<END_MOD> newAmountOfMemory<START_MOD> ? org.ovirt.engine.core.common.action.PlugAction.PLUG : org.ovirt.engine.core.common.action.PlugAction.UNPLUG), 0); org.ovirt.engine.core.common.action.VdcReturnValueBase setAmountOfMemoryResult = runInternalAction(VdcActionType.HotSetAmountOfMemory,<END_MOD> params<START_MOD>, org.ovirt.engine.core.bll.UpdateVmCommand.cloneContextAndDetachFromParent()); <END_MOD>newVmStatic<START_MOD>.setMemSizeMb((setAmountOfMemoryResult.getSucceeded() ? newAmountOfMemory : <END_MOD>currentMemory<START_MOD>)); hotSetMemlog(params,<END_MOD> setAmountOfMemoryResult); } }	private void updateCurrentMemory(org.ovirt.engine.core.common.businessentities.VM newVm) { int currentMemory = org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getMemSizeMb(); int newAmountOfMemory = newVm.getMemSizeMb(); if (org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus().isNotRunning()) { newVmStatic.setMemSizeMb(newAmountOfMemory); return; } if ((org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { newVmStatic.setMemSizeMb(currentMemory); log.warn("Memory update {}MB -> {}MB of VM {} ({}) left out. Memory can't be updated in current VM state ({}).", currentMemory, newAmountOfMemory, org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getName(), org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getId(), org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus()); return; } boolean isMemoryHotUnplugSupported = org.ovirt.engine.core.common.FeatureSupported.hotUnplugMemory(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getClusterArch()); if (org.ovirt.engine.core.common.utils.VmCommonUtils.isMemoryToBeHotplugged(org.ovirt.engine.core.bll.UpdateVmCommand.getVm(), newVm, isMemoryHotUnplugSupported)) { hotSetMemory(currentMemory, newAmountOfMemory); } }
void proceedDownVm() { if ((vdsmVm.getVmDynamic().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { return; } destroyVm(); <START_MOD>if ((dbVm) == null) { return; } switch (dbVm.getStatus()) { case SavingState : resourceManager.internalSetVmStatus(dbVm, <END_MOD>VMStatus<START_MOD>.Suspended); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); afterSuspendTreatment(); break; case MigratingFrom<END_MOD> : <START_MOD>proceedVmBeforeDeletion(); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); handOverVM(dbVm); break; default<END_MOD> : clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); handleVmOnDown(); } <START_MOD>}<END_MOD>	void proceedDownVm() { if ((vdsmVm.getVmDynamic().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { return; } destroyVm(); if ((dbVm) == null) { if ((vmDynamicDao.get(vdsmVm.getVmDynamic().getId()).getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom)) { handleVmOnDown(); } return; } switch (dbVm.getStatus()) { case SavingState : resourceManager.internalSetVmStatus(dbVm, VMStatus.Suspended); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); afterSuspendTreatment(); break; case MigratingFrom : proceedVmBeforeDeletion(); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); if ((vdsmVm.getVmDynamic().getExitStatus()) == (org.ovirt.engine.core.common.businessentities.VmExitStatus.Normal)) { handOverVM(dbVm); } break; default : clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); handleVmOnDown(); } }
public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(<START_MOD>org.ovirt.engine.core.common.businessentities.Cluster cluster, <END_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl.log.error( unit '{}' function is not implemented getPolicyUnit().getName()); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> pairs = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { pairs.add(new org.ovirt.engine.core.common.utils.Pair(vds.getId(), 1)); } return pairs; }	public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(@javax.validation.constraints.NotNull org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl.log.error("Policy unit '{}' function is not implemented", getPolicyUnit().getName()); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> pairs = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { pairs.add(new org.ovirt.engine.core.common.utils.Pair(vds.getId(), 1)); } return pairs; }
@java.lang.Override public void processOnVmStop(final java.util.Collection<org.ovirt.engine.core.compat.Guid> vmIds, final org.ovirt.engine.core.compat.Guid hostId) { if (vmIds.isEmpty()) { return; } <START_MOD>vmJobsMonitoring.removeJobsOfDownVms(vmIds); <END_MOD>org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(() -> processOnVmStopInternal(vmIds, hostId)); }	@java.lang.Override public void processOnVmStop(final java.util.Collection<org.ovirt.engine.core.compat.Guid> vmIds, final org.ovirt.engine.core.compat.Guid hostId) { if (vmIds.isEmpty()) { return; } vmJobsMonitoring.removeJobsByVmIds(vmIds); org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(() -> processOnVmStopInternal(vmIds, hostId)); }
@javax.annotation.PostConstruct void init() { jobsRepository.putAll(getVmJobDao().getAll().stream().collect(java.util.stream.Collectors.toMap(VmJob::getId, java.util.function.Function.identity()))); <START_MOD>removeJobsOfDownVms(vmDynamicDao.getIdsOfDowmVms()); <END_MOD>}	@javax.annotation.PostConstruct void init() { jobsRepository.putAll(getVmJobDao().getAll().stream().collect(java.util.stream.Collectors.toMap(VmJob::getId, java.util.function.Function.identity()))); removeJobsByVmIds(getIdsOfDownVms()); }
public void removeJobsOfDownVms(java.util.Collection<org.ovirt.engine.core.compat.Guid> vmIds) { java.util.List<org.ovirt.engine.core.compat.Guid> jobIdsToRemove = jobsRepository.values().stream().filter(( job) -> vmIds.contains(job.getVmId())).map(VmJob::getId).collect(java.util.stream.Collectors.toList()); getVmJobDao().removeAll(jobIdsToRemove); jobIdsToRemove.forEach(this::removeJobOfDownVm); }	public void removeJobsByVmIds(java.util.Collection<org.ovirt.engine.core.compat.Guid> vmIds) { java.util.List<org.ovirt.engine.core.compat.Guid> jobIdsToRemove = jobsRepository.values().stream().filter(( job) -> vmIds.contains(job.getVmId())).map(VmJob::getId).collect(java.util.stream.Collectors.toList()); getVmJobDao().removeAll(jobIdsToRemove); jobIdsToRemove.forEach(this::removeJobOfDownVm); }
<START_MOD>private<END_MOD> org.ovirt.engine.core.bll.ValidationResult <START_MOD>getNetworkInUsePlural<END_MOD>(<START_MOD>java.util.Collection<java.lang.String> names<END_MOD>) { <START_MOD>org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_NETWORK_IN_MANY_USES; <END_MOD>return <START_MOD>new org.ovirt.engine.core.bll.ValidationResult<END_MOD>(<START_MOD>engineMessage, org.ovirt.engine.core.utils.linq.LinqUtils.concat<END_MOD>(<START_MOD>org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage, names<END_MOD>), <START_MOD>java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>Collections.singletonList(entitiesReplacementPlural.name()))<END_MOD>); }	private org.ovirt.engine.core.bll.ValidationResult getNetworkInUsePlural(java.util.Collection<java.lang.String> names) { org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_NETWORK_IN_MANY_USES; java.util.List<java.lang.String> replacements = java.util.stream.Stream.concat(org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage, names).stream(), java.util.stream.Stream.of(entitiesReplacementPlural.name())).collect(java.util.stream.Collectors.toList()); return new org.ovirt.engine.core.bll.ValidationResult(engineMessage, replacements); }
protected org.ovirt.engine.core.bll.network.macpoolmanager.<START_MOD>MacPool<END_MOD> getMacPool() { return poolPerDc.poolForDataCenter(getStoragePoolId()); }	protected org.ovirt.engine.core.bll.network.macpool.MacPool getMacPool() { return poolPerDc.poolForDataCenter(getStoragePoolId()); }
private org.ovirt.engine.core.bll.network.macpoolmanager.<START_MOD>MacPool<END_MOD> getMacPool() { return poolPerDc.poolForDataCenter(org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand.getStoragePoolId()); }	private org.ovirt.engine.core.bll.network.macpool.MacPool getMacPool() { return poolPerDc.poolForDataCenter(org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand.getStoragePoolId()); }
protected org.ovirt.engine.core.bll.network.macpoolmanager.<START_MOD>MacPool<END_MOD> getMacPool() { return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc.class).poolForDataCenter(params.getStoragePoolId()); }	protected org.ovirt.engine.core.bll.network.macpool.MacPool getMacPool() { return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.network.macpool.MacPoolPerDc.class).poolForDataCenter(params.getStoragePoolId()); }
private void moveMacsOfUpdatedDataCenter(org.ovirt.engine.core.compat.Guid oldMacPoolId, org.ovirt.engine.core.compat.Guid newMacPoolId, java.util.List<java.lang.String> vmInterfaceMacs) { java.util.Objects.requireNonNull(vmInterfaceMacs); org.ovirt.engine.core.bll.network.macpoolmanager.<START_MOD>MacPool<END_MOD> sourcePool = poolPerDc.getPoolById(oldMacPoolId); org.ovirt.engine.core.bll.network.macpoolmanager.<START_MOD>MacPool<END_MOD> targetPool = poolPerDc.getPoolById(newMacPoolId); for (java.lang.String mac : vmInterfaceMacs) { sourcePool.freeMac(mac); targetPool.forceAddMac(mac); } }	private void moveMacsOfUpdatedDataCenter(org.ovirt.engine.core.compat.Guid oldMacPoolId, org.ovirt.engine.core.compat.Guid newMacPoolId, java.util.List<java.lang.String> vmInterfaceMacs) { java.util.Objects.requireNonNull(vmInterfaceMacs); org.ovirt.engine.core.bll.network.macpool.MacPool sourcePool = poolPerDc.getPoolById(oldMacPoolId); org.ovirt.engine.core.bll.network.macpool.MacPool targetPool = poolPerDc.getPoolById(newMacPoolId); for (java.lang.String mac : vmInterfaceMacs) { sourcePool.freeMac(mac); targetPool.forceAddMac(mac); } }
protected org.ovirt.engine.core.bll.ValidationResult macAvailable() { org.ovirt.engine.core.bll.network.macpoolmanager.<START_MOD>MacPool<END_MOD> macPool = org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getMacPool(); java.lang.Boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(macPool); if (allowDupMacs || (!(vmInterfaceManager.existsPluggedInterfaceWithSameMac(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic())))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE); } }	protected org.ovirt.engine.core.bll.ValidationResult macAvailable() { org.ovirt.engine.core.bll.network.macpool.MacPool macPool = org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getMacPool(); java.lang.Boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(macPool); if (allowDupMacs || (!(vmInterfaceManager.existsPluggedInterfaceWithSameMac(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic())))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE); } }
private org.ovirt.engine.core.bll.network.macpoolmanager.<START_MOD>MacPool<END_MOD> getMacPool(org.ovirt.engine.core.compat.Guid storagePoolId) { return poolPerDc.poolForDataCenter(storagePoolId); }	private org.ovirt.engine.core.bll.network.macpool.MacPool getMacPool(org.ovirt.engine.core.compat.Guid storagePoolId) { return poolPerDc.poolForDataCenter(storagePoolId); }
protected org.ovirt.engine.core.bll.network.macpoolmanager.<START_MOD>MacPool<END_MOD> getMacPool() { if ((macPool) == null) { macPool = poolPerDc.poolForDataCenter(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getStoragePoolId()); } return macPool; }	protected org.ovirt.engine.core.bll.network.macpool.MacPool getMacPool() { if ((macPool) == null) { macPool = poolPerDc.poolForDataCenter(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getStoragePoolId()); } return macPool; }
public static boolean verifyAddVm(java.util.List<java.lang.String> reasons, int nicsCount, int vmPriority, org.ovirt.engine.core.bll.network.macpoolmanager.<START_MOD>MacPool<END_MOD> macPool) { boolean returnValue = true; if ((macPool.getAvailableMacsCount()) < nicsCount) { if (reasons != null) { reasons.add(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES.toString()); } returnValue = false; } else if (!(org.ovirt.engine.core.bll.VmTemplateCommand.isVmPriorityValueLegal(vmPriority, reasons))) { returnValue = false; } return returnValue; }	public static boolean verifyAddVm(java.util.List<java.lang.String> reasons, int nicsCount, int vmPriority, org.ovirt.engine.core.bll.network.macpool.MacPool macPool) { boolean returnValue = true; if ((macPool.getAvailableMacsCount()) < nicsCount) { if (reasons != null) { reasons.add(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES.toString()); } returnValue = false; } else if (!(org.ovirt.engine.core.bll.VmTemplateCommand.isVmPriorityValueLegal(vmPriority, reasons))) { returnValue = false; } return returnValue; }
protected void runAddAndVerify(org.ovirt.engine.core.common.businessentities.network.VmNic iface, boolean reserveExistingMac, org.mockito.verification.VerificationMode addMacVerification, int osId, org.ovirt.engine.core.compat.Version version) { org.ovirt.engine.core.common.osinfo.OsRepository osRepository = mock(org.ovirt.engine.core.common.osinfo.OsRepository.class); when(vmInterfaceManager.getOsRepository()).thenReturn(osRepository); when(osRepository.hasNicHotplugSupport(any(java.lang.Integer.class), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(true); vmInterfaceManager.add(iface, org.ovirt.engine.core.bll.context.NoOpCompensationContext.getInstance(), reserveExistingMac, osId, version); if (reserveExistingMac) { verify(<START_MOD>macPool<END_MOD>, times(1)).forceAddMac(iface.getMacAddress()); } else { verifyZeroInteractions(<START_MOD>macPool<END_MOD>); } verifyAddDelegatedCorrectly(iface, addMacVerification); }	protected void runAddAndVerify(org.ovirt.engine.core.common.businessentities.network.VmNic iface, boolean reserveExistingMac, org.mockito.verification.VerificationMode addMacVerification, int osId) { org.ovirt.engine.core.common.osinfo.OsRepository osRepository = mock(org.ovirt.engine.core.common.osinfo.OsRepository.class); when(vmInterfaceManager.getOsRepository()).thenReturn(osRepository); when(osRepository.hasNicHotplugSupport(any(java.lang.Integer.class), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(true); vmInterfaceManager.add(iface, org.ovirt.engine.core.bll.context.NoOpCompensationContext.getInstance(), reserveExistingMac, osId, version); if (reserveExistingMac) { verify(macPool, times(1)).forceAddMac(iface.getMacAddress()); } else { verifyZeroInteractions(macPool); } verifyAddDelegatedCorrectly(iface, addMacVerification); }
<START_MOD>@org.ovirt.engine.core.bll.network.macpool.AcquireWriteLock <END_MOD>void forceAddMac(java.lang.String mac);	@org.ovirt.engine.core.utils.lock.AcquireWriteLock void forceAddMac(java.lang.String mac);
<START_MOD>@org.ovirt.engine.core.bll.network.macpool.AcquireReadLock <END_MOD>boolean isMacInUse(java.lang.String mac);	@org.ovirt.engine.core.utils.lock.AcquireReadLock boolean isMacInUse(java.lang.String mac);
<START_MOD>@org.ovirt.engine.core.bll.network.macpool.AcquireWriteLock <END_MOD>void freeMac(java.lang.String mac);	@org.ovirt.engine.core.utils.lock.AcquireWriteLock void freeMac(java.lang.String mac);
<START_MOD>@org.ovirt.engine.core.bll.network.macpool.AcquireWriteLock <END_MOD>boolean addMac(java.lang.String mac);	@org.ovirt.engine.core.utils.lock.AcquireWriteLock boolean addMac(java.lang.String mac);
<START_MOD>@org.ovirt.engine.core.bll.network.macpool.AcquireReadLock <END_MOD>int getAvailableMacsCount();	@org.ovirt.engine.core.utils.lock.AcquireReadLock int getAvailableMacsCount();
private org.ovirt.engine.core.bll.network.macpool.MacPool createPoolInternal(org.ovirt.engine.core.common.businessentities.MacPool macPool) { if (macPools.containsKey(macPool.getId())) { throw new java.lang.IllegalStateException(org.ovirt.engine.core.bll.network.macpool.MacPoolPerDc.UNABLE_TO_CREATE_MAC_POOL_IT_ALREADY_EXIST); } org.ovirt.engine.core.bll.network.macpool.MacPool poolForScope = new org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges(macPoolToRanges(macPool), macPool.isAllowDuplicateMacAddresses()); macPools.put(macPool.getId(), org.ovirt.engine.core.bll.network.macpool.MacPoolLockingProxy<START_MOD>.createMacPoolLockingProxy<END_MOD>(poolForScope)); return poolForScope; }	private org.ovirt.engine.core.bll.network.macpool.MacPool createPoolInternal(org.ovirt.engine.core.common.businessentities.MacPool macPool) { if (macPools.containsKey(macPool.getId())) { throw new java.lang.IllegalStateException(org.ovirt.engine.core.bll.network.macpool.MacPoolPerDc.UNABLE_TO_CREATE_MAC_POOL_IT_ALREADY_EXIST); } org.ovirt.engine.core.bll.network.macpool.MacPool poolForScope = new org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges(macPoolToRanges(macPool), macPool.isAllowDuplicateMacAddresses()); macPools.put(macPool.getId(), lockedObjectFactory.createLockingInstance(poolForScope, org.ovirt.engine.core.bll.network.macpool.MacPool.class)); return poolForScope; }
<START_MOD>@org.ovirt.engine.core.bll.network.macpool.AcquireWriteLock <END_MOD>void freeMacs(java.util.List<java.lang.String> macs);	@org.ovirt.engine.core.utils.lock.AcquireWriteLock void freeMacs(java.util.List<java.lang.String> macs);
<START_MOD>@org.ovirt.engine.core.bll.network.macpool.AcquireWriteLock <END_MOD>java.util.List<java.lang.String> allocateMacAddresses(int numberOfAddresses);	@org.ovirt.engine.core.utils.lock.AcquireWriteLock java.util.List<java.lang.String> allocateMacAddresses(int numberOfAddresses);
<START_MOD>@org.ovirt.engine.core.bll.network.macpool.AcquireWriteLock <END_MOD>java.lang.String allocateNewMac();	@org.ovirt.engine.core.utils.lock.AcquireWriteLock java.lang.String allocateNewMac();
@org.junit.Test public void testPermissionsForAddingTemplateDedicatedHostNotChanged() { setupDedicatedHostForVmAndTemplate(true); java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionCheckSubjects = cmd.getPermissionCheckSubjects(); for (org.ovirt.engine.core.bll.utils.PermissionSubject permissionSubject : permissionCheckSubjects) { assertFalse(ActionGroup.EDIT_ADMIN_TEMPLATE_PROPERTIES.equals(permissionSubject.getActionGroup())); } }	@org.junit.Test public void testPermissionsForAddingTemplateDedicatedHostNotChanged() { setupDedicatedHostForVmAndTemplate(true); java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionCheckSubjects = cmd.getPermissionCheckSubjects(); for (org.ovirt.engine.core.bll.utils.PermissionSubject permissionSubject : permissionCheckSubjects) { assertFalse(((org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_ADMIN_TEMPLATE_PROPERTIES) == (permissionSubject.getActionGroup()))); } }
private static org.ovirt.engine.core.common.businessentities.network.IpV6Address mapIpv6AddressAssignment(org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment) { org.ovirt.engine.core.common.businessentities.network.IpV6Address ipV6Address = new org.ovirt.engine.core.common.businessentities.network.IpV6Address(); if (ipAddressAssignment.isSetAssignmentMethod()) { org.ovirt.engine.core.common.businessentities.network.<START_MOD>Ipv6BootProtocol<END_MOD> assignmentMethod = org.ovirt.engine.api.restapi.types.<START_MOD>Ipv6BootProtocolMapper<END_MOD>.map(org.ovirt.engine.api.model.<START_MOD>Ipv6BootProtocol<END_MOD>.fromValue(ipAddressAssignment.getAssignmentMethod()), null); ipV6Address.setBootProtocol(assignmentMethod); } if (ipAddressAssignment.isSetIp()) { if (ipAddressAssignment.getIp().isSetAddress()) { ipV6Address.setAddress(ipAddressAssignment.getIp().getAddress()); } if (ipAddressAssignment.getIp().isSetGateway()) { ipV6Address.setGateway(ipAddressAssignment.getIp().getGateway()); } if (ipAddressAssignment.getIp().isSetNetmask()) { ipV6Address.setPrefix(java.lang.Integer.valueOf(ipAddressAssignment.getIp().getNetmask())); } } return ipV6Address; }	static org.ovirt.engine.core.common.businessentities.network.IpV6Address mapIpv6AddressAssignment(org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment) { org.ovirt.engine.core.common.businessentities.network.IpV6Address ipV6Address = new org.ovirt.engine.core.common.businessentities.network.IpV6Address(); if (ipAddressAssignment.isSetAssignmentMethod()) { org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol assignmentMethod = org.ovirt.engine.api.restapi.types.Ipv6BootProtocolMapper.map(ipAddressAssignment.getAssignmentMethod()); ipV6Address.setBootProtocol(assignmentMethod); } if (ipAddressAssignment.isSetIp()) { if (ipAddressAssignment.getIp().isSetAddress()) { ipV6Address.setAddress(ipAddressAssignment.getIp().getAddress()); } if (ipAddressAssignment.getIp().isSetGateway()) { ipV6Address.setGateway(ipAddressAssignment.getIp().getGateway()); } if (ipAddressAssignment.getIp().isSetNetmask()) { final java.lang.String netmask = ipAddressAssignment.getIp().getNetmask(); final java.lang.Integer prefix; try { prefix = java.lang.Integer.valueOf(netmask); } catch (java.lang.NumberFormatException e) { final java.lang.String message = java.lang.String.format("IPv6 prefix has to be integer number. '%s' is not a valid value", netmask); throw new javax.ws.rs.WebApplicationException(message, e, javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(org.ovirt.engine.api.restapi.types.NetworkAttachmentMapper.fault("Invalid value", message)).build()); } ipV6Address.setPrefix(prefix); } } return ipV6Address; }
private static org.ovirt.engine.api.model.IpAddressAssignment mapIpv6AddressAssignment(org.ovirt.engine.core.common.businessentities.network.IpV6Address ipV6Address) { org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment = new org.ovirt.engine.api.model.IpAddressAssignment(); org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip(); ip.setVersion(IpVersion.V6.value()); if ((ipV6Address.getAddress()) != null) { ip.setAddress(ipV6Address.getAddress()); } if ((ipV6Address.getGateway()) != null) { ip.setGateway(ipV6Address.getGateway()); } if ((ipV6Address.getPrefix()) != null) { ip.setNetmask(ipV6Address.getPrefix().toString()); } ipAddressAssignment.setIp(ip); org.ovirt.engine.api.model.<START_MOD>Ipv6BootProtocol<END_MOD> assignmentMethod = org.ovirt.engine.api.restapi.types.<START_MOD>Ipv6BootProtocolMapper<END_MOD>.map(ipV6Address.getBootProtocol(), null); ipAddressAssignment.setAssignmentMethod((assignmentMethod == null ? null : assignmentMethod.value())); return ipAddressAssignment; }	static org.ovirt.engine.api.model.IpAddressAssignment mapIpv6AddressAssignment(org.ovirt.engine.core.common.businessentities.network.IpV6Address ipV6Address) { org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment = new org.ovirt.engine.api.model.IpAddressAssignment(); org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip(); ip.setVersion(IpVersion.V6); if ((ipV6Address.getAddress()) != null) { ip.setAddress(ipV6Address.getAddress()); } if ((ipV6Address.getGateway()) != null) { ip.setGateway(ipV6Address.getGateway()); } if ((ipV6Address.getPrefix()) != null) { ip.setNetmask(ipV6Address.getPrefix().toString()); } ipAddressAssignment.setIp(ip); org.ovirt.engine.api.model.BootProtocol assignmentMethod = org.ovirt.engine.api.restapi.types.Ipv6BootProtocolMapper.map(ipV6Address.getBootProtocol()); ipAddressAssignment.setAssignmentMethod(assignmentMethod); return ipAddressAssignment; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Ipv6BootProtocol.class, to = org.ovirt.engine.api.model.Ipv6BootProtocol.class) public static org.ovirt.engine.api.model.Ipv6BootProtocol map(org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol ipv6BootProtocol, org.ovirt.engine.api.model.Ipv6BootProtocol ignore) { if (ipv6BootProtocol != null) { switch (ipv6BootProtocol) { case DHCP : return org.ovirt.engine.api.model.Ipv6BootProtocol.DHCP; case STATIC_IP : return org.ovirt.engine.api.model.Ipv6BootProtocol.STATIC; case AUTOCONF : return org.ovirt.engine.api.model.Ipv6BootProtocol.AUTOCONF; case NONE : return org.ovirt.engine.api.model.Ipv6BootProtocol.NONE; default : return null; } } return null; }	public static org.ovirt.engine.api.model.BootProtocol map(org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol entity) { if (entity == null) { return null; } switch (entity) { case AUTOCONF : return org.ovirt.engine.api.model.BootProtocol.AUTOCONF; case DHCP : return org.ovirt.engine.api.model.BootProtocol.DHCP; case NONE : return org.ovirt.engine.api.model.BootProtocol.NONE; case STATIC_IP : return org.ovirt.engine.api.model.BootProtocol.STATIC; default : return null; } }
private static void addBootProtocol(java.util.Map<java.lang.String, java.lang.Object> nicProperties, org.ovirt.engine.core.common.businessentities.VDS host, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface) { if (nicProperties == null) { return; } final boolean cfgEntriesDeprecated = org.ovirt.engine.core.common.FeatureSupported.cfgEntriesDeprecated(host.getClusterCompatibilityVersion()); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.<START_MOD>setBootProtocolAndGateway(host, iface,<END_MOD> org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.<START_MOD>getIpv4BootProtocolResolver()<END_MOD>, (cfgEntriesDeprecated ? new org.ovirt.engine.core.vdsbroker.vdsbroker.NoCfgIpv4InfoFetcher(nicProperties, iface.getIpv4Address()) : new org.ovirt.engine.core.vdsbroker.vdsbroker.CfgIpv4InfoFetcher(nicProperties)), iface::setIpv4BootProtocol, iface::setIpv4Gateway); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setBootProtocolAndGateway(host, iface, <START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.getIpv6BootProtocolResolver()<END_MOD>, (cfgEntriesDeprecated ? new org.ovirt.engine.core.vdsbroker.vdsbroker.NoCfgIpv6InfoFetcher(nicProperties, iface.getIpv6Address()) : new org.ovirt.engine.core.vdsbroker.vdsbroker.CfgIpv6InfoFetcher(nicProperties)), iface::setIpv6BootProtocol, iface::setIpv6Gateway); }	static java.lang.String extractIpv6Address(java.lang.String address) { if (org.apache.commons.lang.StringUtils.isEmpty(address)) { return null; } final java.util.regex.Matcher matcher = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.IPV6_ADDRESS_CAPTURE_PATTERN.matcher(address); return matcher.matches() ? matcher.group(1) : address; }
private static<START_MOD> <T, F extends org.ovirt.engine.core.vdsbroker.vdsbroker.IpInfoFetcher><END_MOD> void setBootProtocolAndGateway(org.ovirt.engine.core.common.businessentities.VDS host, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.vdsbroker.vdsbroker.BootProtocolResolver<START_MOD><T, F><END_MOD> bootProtocolResolver, <START_MOD>F<END_MOD> <START_MOD>infoFetcher<END_MOD>, java.util.function.Consumer<<START_MOD>T<END_MOD>> bootProtocolSetter, java.util.function.Consumer<java.lang.String> gatewaySetter) { final <START_MOD>T<END_MOD> bootProtocol = bootProtocolResolver.resolve(<START_MOD>infoFetcher<END_MOD>); bootProtocolSetter.accept(bootProtocol); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setGateway(iface, host, bootProtocol, <START_MOD>infoFetcher<END_MOD>, gatewaySetter); }	private static void addBootProtocol(java.util.Map<java.lang.String, java.lang.Object> nicProperties, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface) { if (nicProperties == null) { return; } org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setBootProtocolAndGateway(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.getIpv4BootProtocolResolver(), new org.ovirt.engine.core.vdsbroker.vdsbroker.NoCfgIpv4InfoFetcher(nicProperties, iface.getIpv4Address()), ( bootProtocol) -> Ipv4BootProtocol.STATIC_IP == bootProtocol, iface::setIpv4BootProtocol, iface::setIpv4Gateway); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setBootProtocolAndGateway(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.getIpv6BootProtocolResolver(), new org.ovirt.engine.core.vdsbroker.vdsbroker.NoCfgIpv6InfoFetcher(nicProperties, iface.getIpv6Address()), ( bootProtocol) -> Ipv6BootProtocol.STATIC_IP == bootProtocol, iface::setIpv6BootProtocol, iface::setIpv6Gateway); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Ipv6BootProtocol.class, to = org.ovirt.engine.api.model.Ipv6BootProtocol.class) public static org.ovirt.engine.api.model.Ipv6BootProtocol map(org.ovirt.engine.api.model.Ipv6BootProtocol ipv6BootProtocol, org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol ignore) { if (ipv6BootProtocol != null) { switch (ipv6BootProtocol) { case DHCP : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol; case AUTOCONF : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol; case STATIC : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol; case NONE : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol; default : return null; } } return null; }	public static org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol map(org.ovirt.engine.api.model.BootProtocol model) { if (model == null) { return null; } switch (model) { case AUTOCONF : return org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol.AUTOCONF; case DHCP : return org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol.DHCP; case NONE : return org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol.NONE; case STATIC : return org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol.STATIC_IP; default : return null; } }
@org.junit.Test public void testMapNullFromModelToBE() { org.junit.Assert.assertThat(underTest.map(((org.ovirt.engine.api.model.Ipv6BootProtocol) (null)), null), org.hamcrest.CoreMatchers.is(((org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol) (null)))); }	@org.junit.Test public void testMapNullFromModelToBe() { assertThat(org.ovirt.engine.api.restapi.types.Ipv6BootProtocolMapper.map(((org.ovirt.engine.api.model.BootProtocol) (null))), is(((org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol) (null)))); }
@org.junit.Test public void testMapNullFromBEToModel() { org.junit.Assert.assertThat(underTest.map(((org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol) (null)), null), org.hamcrest.CoreMatchers.is(((org.ovirt.engine.api.model.Ipv6BootProtocol) (null)))); }	@org.junit.Test public void testMapNullFromBeToModel() { assertThat(org.ovirt.engine.api.restapi.types.Ipv6BootProtocolMapper.map(((org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol) (null))), is(((org.ovirt.engine.api.model.BootProtocol) (null)))); }
private static<START_MOD> <T><END_MOD> void setGateway(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.VDS host, <START_MOD>T<END_MOD> bootProtocol, org.ovirt.engine.core.vdsbroker.vdsbroker.IpInfoFetcher ipInfoFetcher, java.util.function.Consumer<java.lang.String> gatewaySetter) { if (bootProtocol == (org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.STATIC_IP)) { java.lang.String gateway = ipInfoFetcher.fetchGateway(); if (org.apache.commons.lang.StringUtils.isNotEmpty(gateway)) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setGatewayIfNecessary(iface, host, gateway, gatewaySetter); } } }	private static <T, F extends org.ovirt.engine.core.vdsbroker.vdsbroker.IpInfoFetcher> void setBootProtocolAndGateway(org.ovirt.engine.core.vdsbroker.vdsbroker.BootProtocolResolver<T, F> bootProtocolResolver, F infoFetcher, java.util.function.Predicate<T> bootProtocolStaticIpPredicate, java.util.function.Consumer<T> bootProtocolSetter, java.util.function.Consumer<java.lang.String> gatewaySetter) { final T bootProtocol = bootProtocolResolver.resolve(infoFetcher); bootProtocolSetter.accept(bootProtocol); if (bootProtocolStaticIpPredicate.test(bootProtocol)) { java.lang.String gateway = infoFetcher.fetchGateway(); if (org.apache.commons.lang.StringUtils.isNotEmpty(gateway)) { gatewaySetter.accept(gateway); } } }
protected void enableDisableByBootProtocol(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceModel model) { boolean bootProtocolsAvailable = model.getBootProtocolsAvailable(); ipv4BootProtocolLabel.setEnabled(bootProtocolsAvailable); ipv4BootProtocol.setEnabled(bootProtocolsAvailable); ipv4BootProtocol.setEnabled(Ipv4BootProtocol.NONE, model.getNoneBootProtocolAvailable()); <START_MOD>ipv6BootProtocolLabel.setEnabled(bootProtocolsAvailable); ipv6BootProtocol.setEnabled(bootProtocolsAvailable); ipv6BootProtocol.setEnabled(Ipv6BootProtocol.NONE, model.getNoneBootProtocolAvailable()); <END_MOD>}	private void enableDisableByBootProtocol(org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel model) { boolean bootProtocolsAvailable = model.getBootProtocolsAvailable(); ipv4BootProtocolLabel.setEnabled(bootProtocolsAvailable); ipv4BootProtocol.setEnabled(bootProtocolsAvailable); ipv6BootProtocolLabel.setEnabled(bootProtocolsAvailable); ipv6BootProtocol.setEnabled(bootProtocolsAvailable); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceModel object) { driver.edit(object); qosWidget.edit(object.getQosModel()); enableDisableByBootProtocol(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceModel) (sender)); java.lang.String propertyName = args.propertyName; if (("BootProtocolsAvailable".equals(propertyName)) || ("NoneBootProtocolAvailable".equals(propertyName))) { enableDisableByBootProtocol(model); } } }); if (object.getIsToSync().getIsChangable()) { isToSyncInfo.setVisible(true); } <START_MOD>customPropertiesTab<END_MOD>.setVisible(object.getCustomPropertiesModel().getIsAvailable()); customPropertiesWidget.edit(object.getCustomPropertiesModel()); customPropertiesLabel.setEnabled(object.getCustomPropertiesModel().getIsChangable()); }	@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel object) { driver.edit(object); qosWidget.edit(object.getQosModel()); enableDisableByBootProtocol(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel) (sender)); java.lang.String propertyName = args.propertyName; if ("BootProtocolsAvailable".equals(propertyName)) { enableDisableByBootProtocol(model); } } }); if (object.getIsToSync().getIsChangable()) { isToSyncInfo.setVisible(true); } customPropertiesTab.setVisible(object.getCustomPropertiesModel().getIsAvailable()); customPropertiesWidget.edit(object.getCustomPropertiesModel()); customPropertiesLabel.setEnabled(object.getCustomPropertiesModel().getIsChangable()); }
public void setIpv4BootProtocol(org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol value) { if ((ipv4BootProtocol) != value) { ipv4BootProtocol = value; <START_MOD>ipv4BootProtocolChanged<END_MOD>(); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs(<START_MOD>"IPv4BootProtocol"<END_MOD>)); } }	public void setIpv4BootProtocol(org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol value) { if ((ipv4BootProtocol) != value) { ipv4BootProtocol = value; ipv4BootProtocolChanged(); } }
public void setStaticIpChangeAllowed(boolean staticIpChangeAllowed) { this.staticIpChangeAllowed = staticIpChangeAllowed; <START_MOD>updateCanSpecifyIpv4(); updateCanSpecifyIpv6<END_MOD>(); }	public void setStaticIpv6ChangeAllowed(boolean value) { this.staticIpv6ChangeAllowed = value; updateCanSpecifyIpv6(); }
private void revertChanges() { if ((originalNetParams) != null) { setIpv4BootProtocol(originalNetParams.<START_MOD>getIpv4BootProtocol<END_MOD>()); getIpv4Address().setEntity(originalNetParams.<START_MOD>getIpv4Address<END_MOD>()); getIpv4Subnet().setEntity(originalNetParams.<START_MOD>getIpv4Subnet<END_MOD>()); getIpv4Gateway().setEntity(originalNetParams.<START_MOD>getIpv4Gateway()); setIpv6BootProtocol(originalNetParams.getIpv6BootProtocol()); getIpv6Address().setEntity(originalNetParams.getIpv6Address()); getIpv6Prefix().setEntity(originalNetParams.getIpv6Prefix()); getIpv6Gateway().setEntity(originalNetParams.getIpv6Gateway<END_MOD>()); getQosOverridden().setEntity(originalNetParams.isQosOverridden()); getQosModel().init(originalNetParams.getQos()); getCustomPropertiesModel().deserialize(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueModel.convertProperties(originalNetParams.getCustomProperties())); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (sender == (getQosOverridden())) { qosOverriddenChanged(); } if (sender == (getIsToSync())) { isToSyncChanged(); } }
private boolean isaMultipleGatewaysSupported(java.lang.String version) { return (java.lang.Boolean.TRUE) == (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.MultipleGatewaysSupported, version)); }	private boolean shouldSyncNetwork(final java.lang.String networkName) { return hostSetupNetworksParametersData.getNetworksToSync().contains(networkName); }
public org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol <START_MOD>getIpv4BootProtocol<END_MOD>() { return <START_MOD>ipv4BootProtocol<END_MOD>; }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol getIpv4BootProtocol() { return ipv4BootProtocol; }
private void <START_MOD>updateCanSpecifyIpv4<END_MOD>() { boolean <START_MOD>isChangeable<END_MOD> = (bootProtocolsAvailable) && (<START_MOD>getIsStaticIpv4Address<END_MOD>()); getIpv4Address().setChangeProhibitionReason((<START_MOD>isChangeable<END_MOD> && (!(staticIpChangeAllowed)) ? org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().staticIpAddressSameAsHostname() : null)); getIpv4Address().setIsChangeable((<START_MOD>isChangeable<END_MOD> && (staticIpChangeAllowed))); getIpv4Subnet().setIsChangeable(<START_MOD>isChangeable<END_MOD>); getIpv4Gateway().setIsChangeable(<START_MOD>isChangeable<END_MOD>); }	private void updateCanSpecifyIpv4() { boolean isChangeable = (bootProtocolsAvailable) && (getIsStaticIpv4Address()); getIpv4Address().setChangeProhibitionReason((isChangeable && (!(staticIpv4ChangeAllowed)) ? org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().staticIpAddressSameAsHostname() : null)); getIpv4Address().setIsChangeable((isChangeable && (staticIpv4ChangeAllowed))); getIpv4Subnet().setIsChangeable(isChangeable); getIpv4Gateway().setIsChangeable(isChangeable); }
private void updateCanSpecifyIpv6() { boolean isChangeable = (bootProtocolsAvailable) && (getIsStaticIpv6Address()); getIpv6Address().setChangeProhibitionReason((isChangeable && (!(staticIpChangeAllowed)) ? org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().staticIpAddressSameAsHostname() : null)); getIpv6Address().setIsChangeable((isChangeable && (staticIpChangeAllowed))); getIpv6Prefix().setIsChangeable(isChangeable); getIpv6Gateway().setIsChangeable(isChangeable); }	private void updateCanSpecifyIpv6() { boolean isChangeable = (bootProtocolsAvailable) && (getIsStaticIpv6Address()); getIpv6Address().setChangeProhibitionReason((isChangeable && (!(staticIpv6ChangeAllowed)) ? org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().staticIpAddressSameAsHostname() : null)); getIpv6Address().setIsChangeable((isChangeable && (staticIpv6ChangeAllowed))); getIpv6Prefix().setIsChangeable(isChangeable); getIpv6Gateway().setIsChangeable(isChangeable); }
public void setIpv6BootProtocol(org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol value) { if ((ipv6BootProtocol) != value) { ipv6BootProtocol = value; ipv6BootProtocolChanged(); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("IPv6BootProtocol")); } }	public void setIpv6BootProtocol(org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol value) { if ((ipv6BootProtocol) != value) { ipv6BootProtocol = value; ipv6BootProtocolChanged(); } }
private org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkParameters createBeforeSyncNetParams(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkParameters params = new org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkParameters(); params.<START_MOD>setIpv4BootProtocol<END_MOD>(nic.getIpv4BootProtocol()); params.<START_MOD>setIpv4Address<END_MOD>(nic.getIpv4Address()); params.<START_MOD>setIpv4Subnet<END_MOD>(nic.getIpv4Subnet()); params.<START_MOD>setIpv4Gateway<END_MOD>(nic.getIpv4Gateway()); params.<START_MOD>setIpv6BootProtocol(nic.getIpv6BootProtocol()); params.setIpv6Address(nic.getIpv6Address()); params.setIpv6Prefix(nic.getIpv6Prefix()); params.setIpv6Gateway(nic.getIpv6Gateway()); params.<END_MOD>setQos(nic.getQos()); params.setQosOverridden(attachment.isQosOverridden()); params.setCustomProperties(attachment.getProperties()); return params; }	private boolean shouldCreateUnmanagedNetworkModel(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { return (((nic.getNetworkImplementationDetails()) != null) && (!(nic.getNetworkImplementationDetails().isManaged()))) && (!(hostSetupNetworksParametersData.getRemovedUnmanagedNetworks().contains(nic.getNetworkName()))); }
@org.junit.Test public void checkIncompatibleIpv6AddressDetailsBootProtocolNone() { checkIncompatibleIpv6AddressDetailsBootProtocol(Ipv6BootProtocol.DHCP); }	@org.junit.Test public void checkIncompatibleIpv6AddressDetailsBootProtocolNone() { checkIncompatibleIpv6AddressDetailsBootProtocol(Ipv6BootProtocol.NONE); }
public org.ovirt.engine.core.bll.ValidationResult validateNetworkAttachmentIpConfiguration(java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure) { <START_MOD>for (<END_MOD>org.ovirt.engine.core.common.businessentities.network.<START_MOD>NetworkAttachment networkAttachment : attachmentsToConfigure) { org.ovirt.engine.core.common.businessentities.network.<END_MOD>IpConfiguration <START_MOD>ipConfiguration<END_MOD> = <START_MOD>networkAttachment.getIpConfiguration(); if ((ipConfiguration == <END_MOD>null) || (!(<START_MOD>(isIpv4Configured(ipConfiguration)) || (isIpv6Configured(ipConfiguration)<END_MOD>)))) { return incompleteIpConfigurationValidationResult(EngineMessage.NETWORK_ATTACHMENT_MISSING_IP_CONFIGURATION, networkAttachment.getNetworkName(), networkAttachment.getNicName()); } <START_MOD>final org.ovirt.engine.core.bll.ValidationResult ipv4ValidationResult<END_MOD> = <START_MOD>validateIpv4Configuration(networkAttachment<END_MOD>); if (<START_MOD>!(ipv4ValidationResult.isValid())) { return ipv4ValidationResult; } final org.ovirt.engine.core.bll.ValidationResult ipv6ValidationResult<END_MOD> = <START_MOD>validateIpv6Configuration(networkAttachment<END_MOD>); if (!(<START_MOD>ipv6ValidationResult.isValid())) { return ipv6ValidationResult;<END_MOD> } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult validateNetworkAttachmentIpConfiguration(java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure) { for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment : attachmentsToConfigure) { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = networkAttachment.getIpConfiguration(); if ((ipConfiguration == null) || (!((ipConfiguration.hasIpv4PrimaryAddressSet()) || (ipConfiguration.hasIpv6PrimaryAddressSet())))) { return incompleteIpConfigurationValidationResult(EngineMessage.NETWORK_ATTACHMENT_MISSING_IP_CONFIGURATION, networkAttachment.getNetworkName(), networkAttachment.getNicName()); } final org.ovirt.engine.core.bll.ValidationResult ipv4ValidationResult = validateIpv4Configuration(networkAttachment); if (!(ipv4ValidationResult.isValid())) { return ipv4ValidationResult; } final org.ovirt.engine.core.bll.ValidationResult ipv6ValidationResult = validateIpv6Configuration(networkAttachment); if (!(ipv6ValidationResult.isValid())) { return ipv6ValidationResult; } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@org.junit.Test public void <START_MOD>checkIncompatibleIpv4AddressDetailsBootProtocolNone<END_MOD>() { <START_MOD>checkIncompatibleIpv4AddressDetailsBootProtocol<END_MOD>(Ipv4BootProtocol.<START_MOD>DHCP<END_MOD>); }	@org.junit.Test public void checkIncompatibleIpv4AddressDetailsBootProtocolNone() { checkIncompatibleIpv4AddressDetailsBootProtocol(Ipv4BootProtocol.NONE); }
private void notifyListener(org.ovirt.engine.core.compat.Guid jobId) { org.ovirt.engine.core.vdsbroker.monitoring.VmJobListener listener = listeners.get(jobId); if (listener != null) { listener.jobFinished(); } }	public org.ovirt.engine.core.common.businessentities.VmJob getJobById(org.ovirt.engine.core.compat.Guid jobId) { return jobId != null ? jobsRepository.get(jobId) : null; }
void removeJobs(java.util.List<org.ovirt.engine.core.compat.Guid> vmJobIdsToRemove) { removeJobsFromDb(vmJobIdsToRemove); vmJobIdsToRemove.forEach(jobsRepository::remove); <START_MOD>vmJobIdsToRemove.forEach(this::notifyListener); <END_MOD>}	void removeJobs(java.util.List<org.ovirt.engine.core.compat.Guid> vmJobIdsToRemove) { removeJobsFromDb(vmJobIdsToRemove); vmJobIdsToRemove.forEach(jobsRepository::remove); }
public void registerListener(org.ovirt.engine.core.compat.Guid jobId, org.ovirt.engine.core.vdsbroker.monitoring.VmJobListener listener) { listeners.put(jobId, listener); }	private void removeJobOfDownVm(org.ovirt.engine.core.compat.Guid jobId) { jobsRepository.remove(jobId); org.ovirt.engine.core.vdsbroker.monitoring.VmJobsMonitoring.log.info("VM job '{}' is removed, VM is down", jobId); }
@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return <START_MOD>org.ovirt.engine.core.di.Injector.injectMembers(<END_MOD>new org.ovirt.engine.core.bll.MergeCommandCallback(<START_MOD>org.ovirt.engine.core.bll.MergeCommand.getCommandId(), org.ovirt.engine.core.bll.MergeCommand.getParameters().getVmJobId())<END_MOD>); }	@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.bll.MergeCommandCallback()); }
@java.lang.Override public void doPolling(org.ovirt.engine.core.compat.Guid cmdId, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds) { }	@java.lang.Override public void doPolling(org.ovirt.engine.core.compat.Guid cmdId, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds) { org.ovirt.engine.core.bll.MergeCommand<org.ovirt.engine.core.common.action.MergeParameters> command = getCommand(cmdId); org.ovirt.engine.core.compat.Guid jobId = command.getParameters().getVmJobId(); org.ovirt.engine.core.common.businessentities.VmJob vmJob = vmJobsMonitoring.getJobById(jobId); if (vmJob != null) { org.ovirt.engine.core.bll.MergeCommandCallback.log.info("Waiting on merge command to complete"); return; } command.setSucceeded(true); command.setCommandStatus(CommandStatus.SUCCEEDED); command.persistCommand(command.getParameters().getParentCommand(), true); org.ovirt.engine.core.bll.MergeCommandCallback.log.info("Merge command has completed for images '{}'..'{}'", command.getParameters().getBaseImage().getImageId(), command.getParameters().getTopImage().getImageId()); }
private void revoveAccessToken() { java.net.URI ssoRevokeURI = null; if ((ssoRevokeUrl) != null) { ssoRevokeURI = org.ovirt.engine.sdk.internal.SSOUtils.buildSimpleUrl(ssoRevokeUrl); } else { ssoRevokeURI = org.ovirt.engine.sdk.internal.SSOUtils.buildSSORevokeUrl(url, ssoToken); } org.codehaus.jackson.JsonNode node = getSSOResponse(ssoRevokeURI); if (node.isArray()) { node = node.get(0); } if (node.get("error").isNull()) { throw new java.lang.RuntimeException(java.lang.String.format("Error during SSO token revoke %1$s : %2$s", node.get("error_code"), node.get("error"))); } }	private void revokeAccessToken() { java.net.URI ssoRevokeURI = ((ssoRevokeUrl) != null) ? org.ovirt.engine.sdk4.internal.SsoUtils.buildUrl(ssoRevokeUrl) : (ssoToken) != null ? org.ovirt.engine.sdk4.internal.SsoUtils.buildSsoRevokeUrl(url, ssoToken) : null; if (ssoRevokeURI != null) { org.codehaus.jackson.JsonNode node = getSsoResponse(ssoRevokeURI); if (node.isArray()) { node = node.get(0); } if ((node.get("error")) != null) { throw new java.lang.RuntimeException(java.lang.String.format("Error during SSO token revoke %1$s : %2$s", node.get("error_code"), node.get("error"))); } } }
@java.lang.Override public void close() throws java.lang.Exception { <START_MOD>revoveAccessToken<END_MOD>(); if ((client) != null) { client.close(); } }	@java.lang.Override public void close() throws java.lang.Exception { revokeAccessToken(); if ((client) != null) { client.close(); } }
private <START_MOD>org.codehaus.jackson.JsonNode getSSOResponse(java.net.URI uri) { org.apache.http.HttpResponse response = null; try { <END_MOD>org.apache.http.client.methods.<START_MOD>HttpGet requestToken = <END_MOD>new org.apache.http.<START_MOD>client.methods.HttpGet(uri); requestToken<END_MOD>.addHeader("User-Agent", "JavaSDK"); <START_MOD>requestToken<END_MOD>.addHeader("Accept", <START_MOD>"application/json"); response = client.execute(requestToken); org.codehaus.jackson.map.ObjectMapper mapper = new org.codehaus.jackson.map.ObjectMapper(); return mapper.readTree(response.getEntity().getContent()); } catch (java.io.IOException ex) { throw new java.lang.RuntimeException(ex); } finally {<END_MOD> if (<START_MOD>response != null) { org.apache.http.util.EntityUtils.consumeQuietly(response.getEntity()); } } }<END_MOD>	private org.codehaus.jackson.JsonNode getSsoResponse(java.net.URI uri) { org.apache.http.HttpResponse response = null; try { org.apache.http.client.methods.HttpGet requestToken = new org.apache.http.client.methods.HttpGet(uri); requestToken.addHeader("User-Agent", "JavaSDK"); requestToken.addHeader("Accept", "application/json"); response = client.execute(requestToken); org.codehaus.jackson.map.ObjectMapper mapper = new org.codehaus.jackson.map.ObjectMapper(); return mapper.readTree(response.getEntity().getContent()); } catch (java.io.IOException ex) { throw new java.lang.RuntimeException(ex); } finally { if (response != null) { org.apache.http.util.EntityUtils.consumeQuietly(response.getEntity()); } } }
private java.lang.String getAccessToken() { if ((ssoToken) == null) { java.net.URI ssoURI = null; if ((ssoUrl) != null) { ssoURI = org.ovirt.engine.sdk.internal.SSOUtils.buildSimpleUrl(ssoUrl); } else { if (kerberos) { ssoURI = org.ovirt.engine.sdk.internal.SSOUtils.buildSSOUrlKerberos(url); } else { ssoURI = org.ovirt.engine.sdk.internal.SSOUtils.buildSSOUrlBasic(url, user, password); } } org.codehaus.jackson.JsonNode node = getSSOResponse(ssoURI); if (node.isArray()) { node = node.get(0); } if ((node.get("error")) != null) { throw new java.lang.RuntimeException(java.lang.String.format("Error during SSO authentication %1$s : %2$s", node.get("error_code"), node.get("error"))); } ssoToken = node.get(ssoTokenName).getTextValue(); } return ssoToken; }	private java.lang.String getAccessToken() { if ((ssoToken) == null) { java.net.URI ssoURI = ((ssoUrl) != null) ? org.ovirt.engine.sdk4.internal.SsoUtils.buildUrl(ssoUrl) : kerberos ? org.ovirt.engine.sdk4.internal.SsoUtils.buildSsoUrlKerberos(url) : org.ovirt.engine.sdk4.internal.SsoUtils.buildSsoUrlBasic(url, user, password); org.codehaus.jackson.JsonNode node = getSsoResponse(ssoURI); if (node.isArray()) { node = node.get(0); } if ((node.get("error")) != null) { throw new java.lang.RuntimeException(java.lang.String.format("Error during SSO authentication %1$s : %2$s", node.get("error_code"), node.get("error"))); } ssoToken = node.get(ssoTokenName).getTextValue(); } return ssoToken; }
@java.lang.Override protected org.ovirt.engine.api.model.HostNic postPopulate(org.ovirt.engine.api.model.HostNic model) { org.ovirt.engine.api.model.HostNic hostNIC = super.postPopulate(model); org.ovirt.engine.api.model.Qos qos = hostNIC.getQos(); qos.setType(QosType.HOSTNETWORK); qos.setName(null); qos.setDataCenter(null); <START_MOD>model.setBootProtocol(BootProtocol.STATIC); <END_MOD>return hostNIC; }	@java.lang.Override protected org.ovirt.engine.api.model.HostNic postPopulate(org.ovirt.engine.api.model.HostNic model) { org.ovirt.engine.api.model.HostNic hostNIC = super.postPopulate(model); org.ovirt.engine.api.model.Qos qos = hostNIC.getQos(); qos.setType(QosType.HOSTNETWORK); qos.setName(null); qos.setDataCenter(null); model.setBootProtocol(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.BootProtocol.class, BootProtocol.AUTOCONF)); return hostNIC; }
@org.junit.Before public void setup() { <START_MOD>org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepository); command = spy(createCommand()); mockVds(); mockVmDevice(false); when(command.getActionType()).thenReturn(getCommandActionType()); org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = mock(org.ovirt.engine.core.bll.snapshots.SnapshotsValidator.class); doReturn(snapshotsValidator).when(command).getSnapshotsValidator(); doReturn(ValidationResult.VALID).when(snapshotsValidator).vmNotDuringSnapshot(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(ValidationResult.VALID).when(snapshotsValidator).vmNotInPreview(any(org.ovirt.engine.core.compat.Guid.class)); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = mock(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator.class); doReturn(storageDomainValidator).when(command).getStorageDomainValidator(any(org.ovirt.engine.core.common.businessentities.StorageDomain.class)); doReturn(ValidationResult.VALID).when(storageDomainValidator).isDomainExistAndActive(); doReturn(vmNetworkInterfaceDao).when(command).getVmNetworkInterfaceDao(); <END_MOD>doReturn(diskValidator).when(command).getDiskValidator(disk); doReturn(ValidationResult.VALID).when(diskValidator).isDiskExists(); doReturn(ValidationResult.VALID).when(diskValidator).isDiskAttachedToVm(vm); }	@org.junit.Before public void setUp() { org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepository); command = spy(createCommand()); mockVds(); mockVmDevice(false); when(command.getActionType()).thenReturn(getCommandActionType()); org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = mock(org.ovirt.engine.core.bll.snapshots.SnapshotsValidator.class); doReturn(snapshotsValidator).when(command).getSnapshotsValidator(); doReturn(ValidationResult.VALID).when(snapshotsValidator).vmNotDuringSnapshot(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(ValidationResult.VALID).when(snapshotsValidator).vmNotInPreview(any(org.ovirt.engine.core.compat.Guid.class)); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = mock(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator.class); doReturn(storageDomainValidator).when(command).getStorageDomainValidator(any(org.ovirt.engine.core.common.businessentities.StorageDomain.class)); doReturn(ValidationResult.VALID).when(storageDomainValidator).isDomainExistAndActive(); doReturn(vmNetworkInterfaceDao).when(command).getVmNetworkInterfaceDao(); doReturn(diskValidator).when(command).getDiskValidator(disk); doReturn(ValidationResult.VALID).when(diskValidator).isDiskExists(); doReturn(ValidationResult.VALID).when(diskValidator).isDiskAttachedToVm(vm); }
public void updateUseHostCpuAvailability() { boolean clusterSupportsHostCpu = ((getCompatibilityVersion()) != null) && ((getCompatibilityVersion().compareTo(Version.v3_2)) >= 0); boolean nonMigratable = (org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST) == (getModel().getMigrationMode().getSelectedItem()); <START_MOD>boolean usingPpcArch = hostHasPpcArchitecture(); <END_MOD>if <START_MOD>(<END_MOD>(clusterSupportsHostCpu && nonMigratable<START_MOD>) && (!usingPpcArch)<END_MOD>) { getModel().getHostCpu().setIsChangeable(true); } else { getModel().getHostCpu().setEntity(false); getModel().getHostCpu().setChangeProhibitionReason(constants.hosCPUUnavailable()); getModel().getHostCpu().setIsChangeable(false); } }	public void updateUseHostCpuAvailability() { boolean clusterSupportsHostCpu = (getCompatibilityVersion()) != null; boolean nonMigratable = (org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST) == (getModel().getMigrationMode().getSelectedItem()); if ((clusterSupportsHostCpu && nonMigratable) && (!(clusterHasPpcArchitecture()))) { getModel().getHostCpu().setIsChangeable(true); } else { getModel().getHostCpu().setEntity(false); getModel().getHostCpu().setChangeProhibitionReason(constants.hosCPUUnavailable()); getModel().getHostCpu().setIsChangeable(false); } }
@org.junit.Test public void testBlockUseHostCpuWithPPCArch() { mockConfig(); org.ovirt.engine.core.bll.AddVmCommand<org.ovirt.engine.core.common.action.AddVmParameters> cmd = setupCanAddPpcTest(); cmd.setEffectiveCompatibilityVersion(Version.v3_3); doReturn(java.util.Collections.<org.ovirt.engine.core.common.businessentities.storage.DiskImageBase>emptyList()).when(cmd).getImagesToCheckDestinationStorageDomains(); org.ovirt.engine.core.common.businessentities.Cluster cluster = createPpcCluster(); when(clusterDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(cluster); org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().bind(org.ovirt.engine.core.dal.dbbroker.DbFacade.class, dbFacade); doReturn(clusterDao).when(dbFacade).getClusterDao(); doReturn(true).when(cmd).areParametersLegal(java.util.Collections.<java.lang.String>emptyList()); doReturn(true).when(cmd).validateAddVmCommand(); doReturn(true).when(cmd).isVmNameValidLength(any(org.ovirt.engine.core.common.businessentities.VM.class)); mockOsRepository(); when(osRepository.isCpuSupported(anyInt(), any(org.ovirt.engine.core.compat.Version.class), anyString())).thenReturn(true); when(osRepository.getArchitectureFromOS(any(java.lang.Integer.class))).thenReturn(ArchitectureType.ppc64); cmd.getParameters().getVm().setClusterArch(ArchitectureType.ppc64); cmd.getParameters().getVm().setUseHostCpuFlags(true); cmd.getParameters().getVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST); cmd.getParameters().getVm().setClusterId(cluster.getId()); cmd.getParameters().getVm().setVmOs(2); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.USE_HOST_CPU_REQUESTED_ON_UNSUPPORTED_ARCH); }	@org.junit.Test public void testBlockUseHostCpuWithPPCArch() { mockConfig(); org.ovirt.engine.core.bll.AddVmCommand<org.ovirt.engine.core.common.action.AddVmParameters> cmd = setupCanAddPpcTest(); cmd.setEffectiveCompatibilityVersion(Version.v4_0); doReturn(java.util.Collections.<org.ovirt.engine.core.common.businessentities.storage.DiskImageBase>emptyList()).when(cmd).getImagesToCheckDestinationStorageDomains(); org.ovirt.engine.core.common.businessentities.Cluster cluster = createPpcCluster(); when(clusterDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(cluster); doReturn(clusterDao).when(dbFacade).getClusterDao(); doReturn(true).when(cmd).areParametersLegal(java.util.Collections.<java.lang.String>emptyList()); doReturn(true).when(cmd).validateAddVmCommand(); doReturn(true).when(cmd).isVmNameValidLength(any(org.ovirt.engine.core.common.businessentities.VM.class)); when(osRepository.getArchitectureFromOS(any(java.lang.Integer.class))).thenReturn(ArchitectureType.ppc64); cmd.getParameters().getVm().setClusterArch(ArchitectureType.ppc64); cmd.getParameters().getVm().setUseHostCpuFlags(true); cmd.getParameters().getVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST); cmd.getParameters().getVm().setClusterId(cluster.getId()); cmd.getParameters().getVm().setVmOs(OsType.Other.ordinal()); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.USE_HOST_CPU_REQUESTED_ON_UNSUPPORTED_ARCH); }
private boolean hostHasPpcArchitecture() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getModel().getSelectedCluster(); if (cluster == null) { return false; } org.ovirt.engine.core.common.businessentities.ArchitectureType archType = cluster.getArchitecture(); return ((archType == (org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64)) || (archType == (org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64le))) || (archType == (org.ovirt.engine.core.common.businessentities.ArchitectureType.ppcle)); }	private boolean clusterHasPpcArchitecture() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getModel().getSelectedCluster(); return ((cluster != null) && ((cluster.getArchitecture()) != null)) && ((org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc) == (cluster.getArchitecture().getFamily())); }
private org.ovirt.engine.core.common.businessentities.Cluster createPpcCluster() { if ((cluster) == null) { cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); cluster.setClusterId(org.ovirt.engine.core.compat.Guid.newGuid()); cluster.setCompatibilityVersion(Version.v3_3); cluster.setCpuName("PPC8"); cluster.setArchitecture(ArchitectureType.ppc64); } return cluster; }	private org.ovirt.engine.core.common.businessentities.Cluster createPpcCluster() { if ((cluster) == null) { cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); cluster.setClusterId(org.ovirt.engine.core.compat.Guid.newGuid()); cluster.setCompatibilityVersion(Version.v4_0); cluster.setCpuName("PPC8"); cluster.setArchitecture(ArchitectureType.ppc64); } return cluster; }
@org.junit.Test public void testBlockUseHostCpuWithPPCArch() { prepareVmToPassValidate(); command.initEffectiveCompatibilityVersion(); vm.setClusterArch(ArchitectureType.ppc64le); vmStatic.setUseHostCpuFlags(true); vmStatic.setMigrationSupport(MigrationSupport.PINNED_TO_HOST); boolean validInput = command.validate(); assertFalse("validate should fail with can't use host CPU.", validInput); assertValidateMessage(EngineMessage.USE_HOST_CPU_REQUESTED_ON_UNSUPPORTED_ARCH); }	@org.junit.Test public void testBlockUseHostCpuWithPPCArch() { prepareVmToPassValidate(); command.initEffectiveCompatibilityVersion(); vm.setClusterArch(ArchitectureType.ppc64le); group.setArchitecture(ArchitectureType.ppc); when(osRepository.getArchitectureFromOS(OsType.Windows.ordinal())).thenReturn(ArchitectureType.ppc); vmStatic.setUseHostCpuFlags(true); vmStatic.setMigrationSupport(MigrationSupport.PINNED_TO_HOST); boolean validInput = command.validate(); assertFalse("validate should fail with can't use host CPU.", validInput); assertValidateMessage(EngineMessage.USE_HOST_CPU_REQUESTED_ON_UNSUPPORTED_ARCH); }
public java.util.Map<java.lang.String, java.lang.Object> setVolumeLegality(java.lang.String spID, java.lang.String sdID, java.lang.String imageID, java.lang.String volumeID, java.lang.String legality);	public java.util.Map<java.lang.String, java.lang.Object> getHostJobs(java.lang.String job_type, java.util.List<java.lang.String> jobIds);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc setVolumeLegality(java.lang.String spID, java.lang.String sdID, java.lang.String imageID, java.lang.String volumeID, java.lang.String legality) { try { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = vdsServer.setVolumeLegality(sdID, spID, imageID, volumeID, legality); org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc(xmlRpcReturnValue); return wrapper; } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.HostJobsReturnForXmlRpc getHostJobs(java.lang.String jobType, java.util.List<java.lang.String> jobIds) { try { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = vdsServer.getHostJobs(jobType, jobIds); org.ovirt.engine.core.vdsbroker.vdsbroker.HostJobsReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.HostJobsReturnForXmlRpc(xmlRpcReturnValue); return wrapper; } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.action.VdcReturnValueBase> execute() { if (((parameters) == null) || (parameters.isEmpty())) { org.ovirt.engine.core.bll.PrevalidatingMultipleActionsRunner.log.info("{} of type '{}' invoked with no actions", this.getClass().getSimpleName(), actionType); return new java.util.ArrayList<>(); } java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase> returnValues = new java.util.ArrayList<>(); try { initCommandsAndReturnValues(returnValues); invokeCommands(returnValues); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.PrevalidatingMultipleActionsRunner.log.error("Failed to execute multiple actions of type '{}': {}", actionType, e.getMessage()); org.ovirt.engine.core.bll.PrevalidatingMultipleActionsRunner.log.error("Exception", e); } return returnValues; }	@java.lang.Override public java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase> execute() { if (((parameters) == null) || (parameters.isEmpty())) { org.ovirt.engine.core.bll.PrevalidatingMultipleActionsRunner.log.info("{} of type '{}' invoked with no actions", this.getClass().getSimpleName(), actionType); return new java.util.ArrayList<>(); } java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase> returnValues = new java.util.ArrayList<>(); try { initCommandsAndReturnValues(returnValues); invokeCommands(returnValues); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.PrevalidatingMultipleActionsRunner.log.error("Failed to execute multiple actions of type '{}': {}", actionType, e.getMessage()); org.ovirt.engine.core.bll.PrevalidatingMultipleActionsRunner.log.error("Exception", e); } return returnValues; }
protected void executeValidatedCommand(org.ovirt.engine.core.bll.CommandBase<?> command) { if ((((commandContext) == null) || ((commandContext.getExecutionContext()) == null)) || (commandContext.getExecutionContext().isMonitored())) { org.ovirt.engine.core.bll.job.ExecutionHandler.prepareCommandForMonitoring(command, command.getActionType(), command.isInternalExecution()); } org.ovirt.engine.core.utils.CorrelationIdTracker.setCorrelationId(command.getCorrelationId()); command.executeAction(); }	protected void executeValidatedCommand(org.ovirt.engine.core.bll.CommandBase<?> command) { commandFactory.prepareCommandForMonitoring(commandContext, command); command.executeAction(); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.action.VdcReturnValueBase> execute() { for (org.ovirt.engine.core.common.action.VdcActionParametersBase parameter : parameters) { org.ovirt.engine.core.bll.CommandBase<?> command = (isInternal) ? org.ovirt.engine.core.bll.CommandsFactory.createCommand(actionType, parameter, ((commandContext) != null ? commandContext.clone().withoutCompensationContext() : null)) : org.ovirt.engine.core.bll.CommandsFactory.createCommand(actionType, parameter); returnValues.add(executeCommand(command)); } return returnValues; }	@java.lang.Override public java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase> execute() { for (org.ovirt.engine.core.common.action.VdcActionParametersBase parameter : parameters) { org.ovirt.engine.core.bll.CommandBase<?> command = commandFactory.createWrappedCommand(commandContext, actionType, parameter, isInternal); commandFactory.prepareCommandForMonitoring(commandContext, command); returnValues.add(command.executeAction()); } return returnValues; }
private void initCommandsAndReturnValues(java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase> returnValues) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue; for (org.ovirt.engine.core.common.action.VdcActionParametersBase parameter : getParameters()) { parameter.setMultipleAction(true); returnValue = org.ovirt.engine.core.bll.job.ExecutionHandler.evaluateCorrelationId(parameter); if (returnValue == null) { org.ovirt.engine.core.bll.CommandBase<?> command = (isInternal) ? org.ovirt.engine.core.bll.CommandsFactory.createCommand(actionType, parameter, ((commandContext) != null ? commandContext.clone().withoutCompensationContext() : null)) : org.ovirt.engine.core.bll.CommandsFactory.createCommand(actionType, parameter); command.setInternalExecution(isInternal); getCommands().add(command); } else { returnValues.add(returnValue); } } }	private void initCommandsAndReturnValues(java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase> returnValues) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue; for (org.ovirt.engine.core.common.action.VdcActionParametersBase parameter : getParameters()) { parameter.setMultipleAction(true); returnValue = org.ovirt.engine.core.bll.job.ExecutionHandler.evaluateCorrelationId(parameter); if (returnValue == null) { getCommands().add(commandFactory.createWrappedCommand(commandContext, actionType, parameter, isInternal)); } else { returnValues.add(returnValue); } } }
java.util.List<org.ovirt.engine.core.common.action.VdcReturnValueBase> execute();	java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase> execute();
private boolean findDefaultManagementNetwork() { managementNetwork = defaultManagementNetworkFinder.findDefaultManagementNetwork(org.ovirt.engine.core.bll.AddVdsGroupCommand.getVdsGroup().getStoragePoolId()); if ((<START_MOD>getManagementNetwork()<END_MOD>) == null) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND); return false; } return true; }	private boolean findDefaultManagementNetwork() { setManagementNetwork(defaultManagementNetworkFinder.findDefaultManagementNetwork(org.ovirt.engine.core.bll.AddVdsGroupCommand.getVdsGroup().getStoragePoolId())); if ((getManagementNetwork()) == null) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND); return false; } return true; }
private void addDefaultCpuProfile() { org.ovirt.engine.core.common.businessentities.profiles.CpuProfile cpuProfile = org.ovirt.engine.core.bll.profiles.CpuProfileHelper.createCpuProfile(org.ovirt.engine.core.bll.AddVdsGroupCommand.getParameters().getVdsGroup().getId(), org.ovirt.engine.core.bll.AddVdsGroupCommand.getParameters().getVdsGroup().getName()); org.ovirt.engine.core.common.action.CpuProfileParameters cpuProfileAddParameters = new org.ovirt.engine.core.common.action.CpuProfileParameters(cpuProfile); cpuProfileAddParameters.setAddPermissions(true); cpuProfileAddParameters.setParametersCurrentUser(org.ovirt.engine.core.bll.AddVdsGroupCommand.getCurrentUser()); cpuProfileAddParameters.setSessionId(org.ovirt.engine.core.bll.AddVdsGroupCommand.getContext().getEngineContext().getSessionId()); org.ovirt.engine.core.common.action.VdcReturnValueBase addCpuProfileReturnValue = org.ovirt.engine.core.bll.AddVdsGroupCommand.getBackend().runAction(VdcActionType.AddCpuProfile, cpuProfileAddParameters); cpuProfile.setId(((org.ovirt.engine.core.compat.Guid) (addCpuProfileReturnValue.getActionReturnValue()))); }	private void addDefaultCpuProfile() { org.ovirt.engine.core.common.businessentities.profiles.CpuProfile cpuProfile = org.ovirt.engine.core.bll.profiles.CpuProfileHelper.createCpuProfile(org.ovirt.engine.core.bll.AddVdsGroupCommand.getParameters().getVdsGroup().getId(), org.ovirt.engine.core.bll.AddVdsGroupCommand.getParameters().getVdsGroup().getName()); org.ovirt.engine.core.common.action.CpuProfileParameters cpuProfileAddParameters = new org.ovirt.engine.core.common.action.CpuProfileParameters(cpuProfile, cpuProfile.getId()); cpuProfileAddParameters.setAddPermissions(true); cpuProfileAddParameters.setParametersCurrentUser(org.ovirt.engine.core.bll.AddVdsGroupCommand.getCurrentUser()); cpuProfileAddParameters.setSessionId(org.ovirt.engine.core.bll.AddVdsGroupCommand.getContext().getEngineContext().getSessionId()); org.ovirt.engine.core.bll.AddVdsGroupCommand.getBackend().runAction(VdcActionType.AddCpuProfile, cpuProfileAddParameters); }
private void createCommandContext() { org.ovirt.engine.core.bll.context.EngineContext engineContext = new org.ovirt.engine.core.bll.context.EngineContext(); engineContext.withSessionId(parameters.getSessionId()); commandContext = new org.ovirt.engine.core.bll.context.CommandContext(engineContext); }	private void createCommandContext() { commandContext = new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext().withSessionId(parameters.getSessionId())).withExecutionContext(new org.ovirt.engine.core.bll.job.ExecutionContext()); }
@org.junit.Before public void setUp() { createCluster(); createParameters(); injectMocks(); createCommandContext(); createCommand(); mockBackend(); }	@org.junit.Before public void setUp() { createCluster(); createParameters(); createCommandContext(); createCommand(); mockBackend(); }
<START_MOD>private<END_MOD> org.ovirt.engine.core.common.businessentities.storage.DiskImage <START_MOD>mockDiskImage<END_MOD>() { disk.setImageId(diskImageGuid); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> storageIdList = new java.util.ArrayList<>(); storageIdList.add(storageDomainId); disk.setStorageIds(storageIdList); disk.setStoragePoolId(storagePoolId); <START_MOD>disk.setActive(true); when(diskDao.get(diskImageGuid)).thenReturn(disk); when(osRepository.getDiskHotpluggableInterfaces(any(java.lang.Integer.class), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(new java.util.HashSet(org.ovirt.engine.core.bll.storage.disk.HotPlugDiskToVmCommandTest.DISK_HOTPLUGGABLE_INTERFACES)); <END_MOD>return disk; }	private org.ovirt.engine.core.common.businessentities.storage.DiskImage mockDiskImage() { disk.setImageId(diskImageGuid); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> storageIdList = new java.util.ArrayList<>(); storageIdList.add(storageDomainId); disk.setStorageIds(storageIdList); disk.setStoragePoolId(storagePoolId); disk.setActive(true); when(diskDao.get(diskImageGuid)).thenReturn(disk); return disk; }
@org.junit.Before public void setUpContainer() { when(engineSessionDao.remove(any(java.lang.Long.class))).thenReturn(1); when(ssoSessionValidator.isSessionValid(anyString())).thenReturn(true); <START_MOD>when(ssoSessionUtils.isSessionInUse(anyString())).thenReturn(false); <END_MOD>org.ovirt.engine.core.common.businessentities.aaa.DbUser user = mock(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class); container.<START_MOD>setSSOSessionUtils(ssoSessionUtils); container.<END_MOD>setSSOSessionValidaor(ssoSessionValidator); container.setUser(org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID, user); }	@org.junit.Before public void setUpContainer() { when(engineSessionDao.remove(any(java.lang.Long.class))).thenReturn(1); when(ssoSessionValidator.isSessionValid(anyString())).thenReturn(true); when(ssoSessionUtils.isSessionInUse(anyLong())).thenReturn(false); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = mock(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class); container.setUser(org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID, user); }
public static java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsForSession(java.lang.String engineSessionId) { return org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.coco.getCommandIdsForSession(engineSessionId); }	public static java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsBySessionSeqId(long engineSessionSeqId) { return org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.coco.getCommandIdsBySessionSeqId(engineSessionSeqId); }
@org.junit.Test public void testCleanExpiredSessionsWithRunningCommands() { when(ssoSessionUtils.isSessionInUse(org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID)).thenReturn(true); initDataForClearTest(org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_KEY); container.cleanExpiredUsersSessions(); assertNotNull("Get found the session", container.getData(org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID, org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_KEY, false)); }	@org.junit.Test public void testCleanExpiredSessionsWithRunningCommands() { when(ssoSessionUtils.isSessionInUse(anyLong())).thenReturn(true); initDataForClearTest(org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_KEY); container.cleanExpiredUsersSessions(); assertNotNull("Get found the session", container.getData(org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID, org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_KEY, false)); }
private void removeSessionImpl(java.lang.String sessionId, int reason, java.lang.String message, java.lang.Object... msgArgs) { <START_MOD>org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = getUser(sessionId, false); if (ssoSessionUtils.isSessionInUse(sessionId)) { log.info( removing session '{}', session has running commands for user '{}@{}'. sessionId, dbUser.getLoginName(), dbUser.getDomain()); return; } <END_MOD>java.lang.String authzName = null; if ((getProfile(sessionId)) != null) { authzName = getProfile(sessionId).getAuthz().getContext().<java.lang.String>get(Base.ContextKeys.INSTANCE_NAME); } org.ovirt.engine.core.aaa.AcctUtils.reportRecords(reason, authzName, getPrincipalName(sessionId), message, msgArgs); engineSessionDao.remove(getEngineSessionSeqId(sessionId)); sessionInfoMap.remove(sessionId); }	private void removeSessionImpl(java.lang.String sessionId, int reason, java.lang.String message, java.lang.Object... msgArgs) { if (ssoSessionUtils.isSessionInUse(getEngineSessionSeqId(sessionId))) { org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = getUser(sessionId, false); log.info("Not removing session '{}', session has running commands{}", sessionId, (dbUser == null ? "." : java.lang.String.format(" for user '%s@%s'.", dbUser.getLoginName(), dbUser.getDomain()))); return; } java.lang.String authzName = null; if ((getProfile(sessionId)) != null) { authzName = getProfile(sessionId).getAuthzName(); } org.ovirt.engine.core.aaa.AcctUtils.reportRecords(reason, authzName, getPrincipalName(sessionId), message, msgArgs); engineSessionDao.remove(getEngineSessionSeqId(sessionId)); sessionInfoMap.remove(sessionId); }
@org.junit.Before @java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); actionGroup = org.ovirt.engine.core.utils.RandomUtils.instance().pickRandom(org.ovirt.engine.core.common.businessentities.ActionGroup.values()); when(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.getQueryParameters().getActionGroup()).thenReturn(actionGroup); sessionID = org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10); when(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.getQueryParameters().getSessionId()).thenReturn(sessionID); when(engineSessionDao.save(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.any(org.ovirt.engine.core.common.businessentities.EngineSession.class))).thenReturn(org.ovirt.engine.core.utils.RandomUtils.instance().nextLong()); when(engineSessionDao.remove(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.any(java.lang.Long.class))).thenReturn(1); <START_MOD>when(ssoSessionUtils.isSessionInUse(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.anyString())).thenReturn(false); sessionDataContainer.setSSOSessionUtils(ssoSessionUtils); <END_MOD>sessionDataContainer.setUser(sessionID, org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.getUser()); }	@org.junit.Before @java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); actionGroup = org.ovirt.engine.core.utils.RandomUtils.instance().pickRandom(org.ovirt.engine.core.common.businessentities.ActionGroup.values()); when(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.getQueryParameters().getActionGroup()).thenReturn(actionGroup); sessionID = org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10); when(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.getQueryParameters().getSessionId()).thenReturn(sessionID); when(engineSessionDao.save(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.any(org.ovirt.engine.core.common.businessentities.EngineSession.class))).thenReturn(org.ovirt.engine.core.utils.RandomUtils.instance().nextLong()); when(engineSessionDao.remove(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.any(java.lang.Long.class))).thenReturn(1); when(ssoSessionUtils.isSessionInUse(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.anyLong())).thenReturn(false); sessionDataContainer.setUser(sessionID, org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.getUser()); }
private org.ovirt.engine.core.common.businessentities.CommandEntity buildCommandEntity(org.ovirt.engine.core.compat.Guid rootCommandId, boolean enableCallback) { return org.ovirt.engine.core.common.businessentities.CommandEntity.buildCommandEntity(<START_MOD>getContext().getEngineContext().getSessionId(), <END_MOD>org.ovirt.engine.core.bll.CommandBase.getUserId(), getCommandId(), ((getParameters().getParentParameters()) == null ? org.ovirt.engine.core.compat.Guid.Empty : getParameters().getParentParameters().getCommandId()), rootCommandId, (((getExecutionContext()) == null) || ((getExecutionContext().getJob()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getJob().getId()), (((getExecutionContext()) == null) || ((getExecutionContext().getStep()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getStep().getId()), getActionType(), getParameters(), commandStatus, enableCallback, getReturnValue(), getCommandData()); }	private org.ovirt.engine.core.common.businessentities.CommandEntity buildCommandEntity(org.ovirt.engine.core.compat.Guid rootCommandId, boolean enableCallback) { return org.ovirt.engine.core.common.businessentities.CommandEntity.buildCommandEntity(org.ovirt.engine.core.bll.CommandBase.getUserId(), getSessionSeqId(), getCommandId(), ((getParameters().getParentParameters()) == null ? org.ovirt.engine.core.compat.Guid.Empty : getParameters().getParentParameters().getCommandId()), rootCommandId, (((getExecutionContext()) == null) || ((getExecutionContext().getJob()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getJob().getId()), (((getExecutionContext()) == null) || ((getExecutionContext().getStep()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getStep().getId()), getActionType(), getParameters(), commandStatus, enableCallback, getReturnValue(), getCommandData()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsForSession(java.lang.String engineSessionId) { return commandsRepository.getCommandIdsForSession(engineSessionId); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsBySessionSeqId(long engineSessionSeqId) { return commandsRepository.getCommandIdsBySessionSeqId(engineSessionSeqId); }
public static org.ovirt.engine.core.common.businessentities.CommandEntity buildCommandEntity(<START_MOD>java.lang.String engineSessionId, <END_MOD>org.ovirt.engine.core.compat.Guid userId, org.ovirt.engine.core.compat.Guid commandId, org.ovirt.engine.core.compat.Guid parentCommandId, org.ovirt.engine.core.compat.Guid rootCommandId, org.ovirt.engine.core.compat.Guid jobId, org.ovirt.engine.core.compat.Guid stepId, org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase params, org.ovirt.engine.core.compat.CommandStatus status, boolean callbackEnabled, org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue, java.util.Map<java.lang.String, java.io.Serializable> data) { org.ovirt.engine.core.common.businessentities.CommandEntity entity = new org.ovirt.engine.core.common.businessentities.CommandEntity(); entity.<START_MOD>setEngineSessionId(engineSessionId); entity.<END_MOD>setUserId(userId); entity.setId(commandId); entity.setParentCommandId(parentCommandId); entity.setRootCommandId(rootCommandId); entity.setJobId(jobId); entity.setStepId(stepId); entity.setCommandType(actionType); entity.setCommandParameters(params); entity.setCommandStatus(status); entity.setCallbackEnabled(callbackEnabled); entity.setReturnValue(returnValue); entity.setData(data); return entity; }	public static org.ovirt.engine.core.common.businessentities.CommandEntity buildCommandEntity(org.ovirt.engine.core.compat.Guid userId, long engineSessionSeqId, org.ovirt.engine.core.compat.Guid commandId, org.ovirt.engine.core.compat.Guid parentCommandId, org.ovirt.engine.core.compat.Guid rootCommandId, org.ovirt.engine.core.compat.Guid jobId, org.ovirt.engine.core.compat.Guid stepId, org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase params, org.ovirt.engine.core.compat.CommandStatus status, boolean callbackEnabled, org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue, java.util.Map<java.lang.String, java.io.Serializable> data) { org.ovirt.engine.core.common.businessentities.CommandEntity entity = new org.ovirt.engine.core.common.businessentities.CommandEntity(); entity.setEngineSessionSeqId(engineSessionSeqId); entity.setUserId(userId); entity.setId(commandId); entity.setParentCommandId(parentCommandId); entity.setRootCommandId(rootCommandId); entity.setJobId(jobId); entity.setStepId(stepId); entity.setCommandType(actionType); entity.setCommandParameters(params); entity.setCommandStatus(status); entity.setCallbackEnabled(callbackEnabled); entity.setReturnValue(returnValue); entity.setData(data); return entity; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters().getAction(), org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters().getActionParameters(), org.ovirt.engine.core.bll.RunAsyncActionCommand.cloneContextAndDetachFromParent()); org.ovirt.engine.core.bll.RunAsyncActionCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.VdcActionType actionToExecute = org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters().getAction(); org.ovirt.engine.core.common.action.VdcActionParametersBase actionParameters = org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters().getActionParameters(); actionParameters.setParentCommand(VdcActionType.RunAsyncAction); actionParameters.setParentParameters(org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters()); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(actionToExecute, actionParameters, org.ovirt.engine.core.bll.RunAsyncActionCommand.cloneContextAndDetachFromParent()); org.ovirt.engine.core.bll.RunAsyncActionCommand.setSucceeded(true); }
protected void doNonBlockingAction(final org.ovirt.engine.core.common.action.VdcActionType task, final org.ovirt.engine.core.common.action.VdcActionParametersBase params) { setCorrelationId(params); setJobOrStepId(params); org.ovirt.engine.core.common.action.VdcActionParametersBase sp = sessionize(params); org.ovirt.engine.core.common.businessentities.aaa.DbUser currentUser = getCurrent().getUser(); org.ovirt.engine.core.common.action.VdcActionParametersBase logout = (currentUser != null) ? sessionize(new org.ovirt.engine.core.common.action.VdcActionParametersBase()) : null; try { backend.runAction<START_MOD>(VdcActionType.RunAsyncAction, new org.ovirt.engine.core.common.action.RunAsyncActionParameters<END_MOD>(task, sp)<START_MOD>)<END_MOD>; } finally { if (currentUser != null) { backend.logoff(logout); } } }	protected void doNonBlockingAction(final org.ovirt.engine.core.common.action.VdcActionType task, final org.ovirt.engine.core.common.action.VdcActionParametersBase params) { org.ovirt.engine.core.common.interfaces.BackendLocal backend = getBackend(); setCorrelationId(params); setJobOrStepId(params); backend.runAction(VdcActionType.RunAsyncAction, sessionize(new org.ovirt.engine.core.common.action.RunAsyncActionParameters(task, sessionize(params)))); }
java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsForSession(java.lang.String engineSessionId);	java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsBySessionSeqId(long engineSessionSeqId);
public java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsForSession(java.lang.String engineSessionId) { java.util.List<org.ovirt.engine.core.compat.Guid> cmdIds = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.keySet()) { cmdEntity = commandsCache.get(cmdId); if (((cmdEntity != null) && (org.apache.commons.lang.StringUtils.isNotEmpty(cmdEntity.getEngineSessionId()))) && (cmdEntity.getEngineSessionId().equals(engineSessionId))) { cmdIds.add(cmdId); } } return cmdIds; }	public java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsBySessionSeqId(long engineSessionSeqId) { java.util.List<org.ovirt.engine.core.compat.Guid> cmdIds = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.keySet()) { cmdEntity = commandsCache.get(cmdId); if (((cmdEntity != null) && ((cmdEntity.getEngineSessionSeqId()) != (org.ovirt.engine.core.bll.aaa.SSOSessionUtils.EMPTY_SESSION_SEQ_ID))) && ((cmdEntity.getEngineSessionSeqId()) == engineSessionSeqId)) { cmdIds.add(cmdId); } } return cmdIds; }
@org.junit.Before public void setUpContainer() { when(engineSessionDao.remove(any(java.lang.Long.class))).thenReturn(1<START_MOD>); when(jobDao.getJobsBySessionId(any(java.lang.String.class))).thenReturn(java.util.Collections.emptyList()<END_MOD>); when(ssoSessionValidator.isSessionValid(anyString())).thenReturn(true); when(ssoSessionUtils.isSessionInUse(anyString())).thenReturn(false); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = mock(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class); container.setSSOSessionUtils(ssoSessionUtils); container.setSSOSessionValidaor(ssoSessionValidator); container.setUser(org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID, user); }	@org.junit.Before public void setUpContainer() { when(engineSessionDao.remove(any(java.lang.Long.class))).thenReturn(1); when(ssoSessionValidator.isSessionValid(anyString())).thenReturn(true); when(ssoSessionUtils.isSessionInUse(anyLong())).thenReturn(false); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = mock(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class); container.setUser(org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID, user); }
@java.lang.Override public org.ovirt.engine.core.common.job.Job mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.job.Job job = new org.ovirt.engine.core.common.job.Job(); job.setId(getGuidDefaultEmpty(rs, "job_id")); job.setActionType(org.ovirt.engine.core.common.action.VdcActionType.valueOf(rs.getString("action_type"))); job.setDescription(rs.getString("description")); job.setStatus(org.ovirt.engine.core.common.job.JobExecutionStatus.valueOf(rs.getString("status"))); job.setOwnerId(getGuid(rs, "owner_id")); job.<START_MOD>setEngineSessionId(rs.getString("engine_session_id")); job.<END_MOD>setVisible(rs.getBoolean("visible")); job.setStartTime(org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.fromDate(rs.getTimestamp("start_time"))); job.setEndTime(org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.fromDate(rs.getTimestamp("end_time"))); job.setLastUpdateTime(org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.fromDate(rs.getTimestamp("last_update_time"))); job.setCorrelationId(rs.getString("correlation_id")); job.setExternal(rs.getBoolean("is_external")); job.setAutoCleared(rs.getBoolean("is_auto_cleared")); return job; }	@java.lang.Override public org.ovirt.engine.core.common.job.Job mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.job.Job job = new org.ovirt.engine.core.common.job.Job(); job.setId(getGuidDefaultEmpty(rs, "job_id")); job.setActionType(org.ovirt.engine.core.common.action.VdcActionType.valueOf(rs.getString("action_type"))); job.setDescription(rs.getString("description")); job.setStatus(org.ovirt.engine.core.common.job.JobExecutionStatus.valueOf(rs.getString("status"))); job.setOwnerId(getGuid(rs, "owner_id")); job.setEngineSessionSeqId(rs.getLong("engine_session_seq_id")); job.setVisible(rs.getBoolean("visible")); job.setStartTime(org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.fromDate(rs.getTimestamp("start_time"))); job.setEndTime(org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.fromDate(rs.getTimestamp("end_time"))); job.setLastUpdateTime(org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.fromDate(rs.getTimestamp("last_update_time"))); job.setCorrelationId(rs.getString("correlation_id")); job.setExternal(rs.getBoolean("is_external")); job.setAutoCleared(rs.getBoolean("is_auto_cleared")); return job; }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.job.Job entity) { return createIdParameterMapper(entity.getId()).addValue("action_type", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(entity.getActionType())).addValue("description", entity.getDescription()).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(entity.getStatus())).addValue("owner_id", entity.getOwnerId()).addValue(<START_MOD>"engine_session_id", entity.getEngineSessionId()).addValue(<END_MOD>"visible", entity.isVisible()).addValue("start_time", entity.getStartTime()).addValue("end_time", entity.getEndTime()).addValue("last_update_time", entity.getLastUpdateTime()).addValue("correlation_id", entity.getCorrelationId()).addValue("is_external", entity.isExternal()).addValue("is_auto_cleared", entity.isAutoCleared()); }	@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.job.Job entity) { return createIdParameterMapper(entity.getId()).addValue("action_type", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(entity.getActionType())).addValue("description", entity.getDescription()).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(entity.getStatus())).addValue("owner_id", entity.getOwnerId()).addValue("engine_session_seq_id", entity.getEngineSessionSeqId()).addValue("visible", entity.isVisible()).addValue("start_time", entity.getStartTime()).addValue("end_time", entity.getEndTime()).addValue("last_update_time", entity.getLastUpdateTime()).addValue("correlation_id", entity.getCorrelationId()).addValue("is_external", entity.isExternal()).addValue("is_auto_cleared", entity.isAutoCleared()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.job.Job> getJobsBySessionId(java.lang.String engineSessionId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("engine_session_id", engineSessionId); return getCallsHandler().executeReadList("GetJobsByEngineSessionId", createEntityRowMapper(), parameterSource); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.job.Job> getJobsBySessionSeqIdAndStatus(long engineSessionSeqId, org.ovirt.engine.core.common.job.JobExecutionStatus status) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("engine_session_seq_id", engineSessionSeqId).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(status)); return getCallsHandler().executeReadList("GetJobsByEngineSessionSeqIdAndStatus", createEntityRowMapper(), parameterSource); }
@org.junit.Before @java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); actionGroup = org.ovirt.engine.core.utils.RandomUtils.instance().pickRandom(org.ovirt.engine.core.common.businessentities.ActionGroup.values()); when(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.getQueryParameters().getActionGroup()).thenReturn(actionGroup); sessionID = org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10); when(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.getQueryParameters().getSessionId()).thenReturn(sessionID<START_MOD>); when(jobDao.getJobsBySessionId(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.any(java.lang.String.class))).thenReturn(java.util.Collections.emptyList()<END_MOD>); when(engineSessionDao.save(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.any(org.ovirt.engine.core.common.businessentities.EngineSession.class))).thenReturn(org.ovirt.engine.core.utils.RandomUtils.instance().nextLong()); when(engineSessionDao.remove(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.any(java.lang.Long.class))).thenReturn(1); when(ssoSessionUtils.isSessionInUse(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.anyString())).thenReturn(false); sessionDataContainer.setSSOSessionUtils(ssoSessionUtils); sessionDataContainer.setUser(sessionID, org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.getUser()); }	@org.junit.Before @java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); actionGroup = org.ovirt.engine.core.utils.RandomUtils.instance().pickRandom(org.ovirt.engine.core.common.businessentities.ActionGroup.values()); when(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.getQueryParameters().getActionGroup()).thenReturn(actionGroup); sessionID = org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10); when(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.getQueryParameters().getSessionId()).thenReturn(sessionID); when(engineSessionDao.save(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.any(org.ovirt.engine.core.common.businessentities.EngineSession.class))).thenReturn(org.ovirt.engine.core.utils.RandomUtils.instance().nextLong()); when(engineSessionDao.remove(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.any(java.lang.Long.class))).thenReturn(1); when(ssoSessionUtils.isSessionInUse(org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.anyLong())).thenReturn(false); sessionDataContainer.setUser(sessionID, org.ovirt.engine.core.bll.AbstractGetEntitiesWithPermittedActionParametersQueryTest.getUser()); }
public static org.ovirt.engine.core.common.job.Job createJob(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.bll.CommandBase<?> command) { org.ovirt.engine.core.common.job.Job job = new org.ovirt.engine.core.common.job.Job(); job.setId(org.ovirt.engine.core.compat.Guid.newGuid()); job.setActionType(actionType); job.setDescription(org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveJobMessage(actionType, command.getJobMessageProperties())); job.setJobSubjectEntities(org.ovirt.engine.core.bll.job.ExecutionHandler.getSubjectEntities(command.getPermissionCheckSubjects())); job.setOwnerId(command.getUserId()); job.<START_MOD>setEngineSessionId(command.getContext().getEngineContext().getSessionId()); job.<END_MOD>setStatus(JobExecutionStatus.STARTED); job.setStartTime(new java.util.Date()); job.setCorrelationId(command.getCorrelationId()); return job; }	public static org.ovirt.engine.core.common.job.Job createJob(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.bll.CommandBase<?> command) { org.ovirt.engine.core.common.job.Job job = new org.ovirt.engine.core.common.job.Job(); job.setId(org.ovirt.engine.core.compat.Guid.newGuid()); job.setActionType(actionType); job.setDescription(org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveJobMessage(actionType, command.getJobMessageProperties())); job.setJobSubjectEntities(org.ovirt.engine.core.bll.job.ExecutionHandler.getSubjectEntities(command.getPermissionCheckSubjects())); job.setOwnerId(command.getUserId()); job.setEngineSessionSeqId(command.getSessionSeqId()); job.setStatus(JobExecutionStatus.STARTED); job.setStartTime(new java.util.Date()); job.setCorrelationId(command.getCorrelationId()); return job; }
java.util.List<org.ovirt.engine.core.common.job.Job> getJobsBySessionId(java.lang.String engineSessionId);	java.util.List<org.ovirt.engine.core.common.job.Job> getJobsBySessionSeqIdAndStatus(long engineSessionSeqId, org.ovirt.engine.core.common.job.JobExecutionStatus status);
protected Q setUpSpyQuery(P parameters) throws java.lang.Exception { org.ovirt.engine.core.dal.dbbroker.DbFacade dbFacadeMock = org.ovirt.engine.core.bll.AbstractQueryTest.mock(org.ovirt.engine.core.dal.dbbroker.DbFacade.class); org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUserMock = org.ovirt.engine.core.bll.AbstractQueryTest.mock(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class<START_MOD>); when(jobDao.getJobsBySessionId(org.ovirt.engine.core.bll.AbstractQueryTest.any(java.lang.String.class))).thenReturn(java.util.Collections.emptyList()<END_MOD>); when(engineSessionDao.save(org.ovirt.engine.core.bll.AbstractQueryTest.any(org.ovirt.engine.core.common.businessentities.EngineSession.class))).thenReturn(org.ovirt.engine.core.utils.RandomUtils.instance().nextLong()); when(engineSessionDao.remove(org.ovirt.engine.core.bll.AbstractQueryTest.any(java.lang.Long.class))).thenReturn(1); sessionDataContainer.setUser(parameters.getSessionId(), dbUserMock); java.lang.reflect.Constructor<? extends Q> con = getQueryType().getConstructor(getParameterType()); query = org.ovirt.engine.core.bll.AbstractQueryTest.spy(con.newInstance(parameters)); doReturn(sessionDataContainer).when(query).getSessionDataContainer(); doReturn(dbFacadeMock).when(query).getDbFacade(); doReturn(dbUserMock).when(query).initUser(); initQuery(query); query.postConstruct(); return query; }	protected Q setUpSpyQuery(P parameters) throws java.lang.Exception { org.ovirt.engine.core.dal.dbbroker.DbFacade dbFacadeMock = org.ovirt.engine.core.bll.AbstractQueryTest.mock(org.ovirt.engine.core.dal.dbbroker.DbFacade.class); org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUserMock = org.ovirt.engine.core.bll.AbstractQueryTest.mock(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class); when(engineSessionDao.save(org.ovirt.engine.core.bll.AbstractQueryTest.any(org.ovirt.engine.core.common.businessentities.EngineSession.class))).thenReturn(org.ovirt.engine.core.utils.RandomUtils.instance().nextLong()); when(engineSessionDao.remove(org.ovirt.engine.core.bll.AbstractQueryTest.any(java.lang.Long.class))).thenReturn(1); sessionDataContainer.setUser(parameters.getSessionId(), dbUserMock); java.lang.reflect.Constructor<? extends Q> con = getQueryType().getConstructor(getParameterType()); query = org.ovirt.engine.core.bll.AbstractQueryTest.spy(con.newInstance(parameters)); doReturn(sessionDataContainer).when(query).getSessionDataContainer(); doReturn(dbFacadeMock).when(query).getDbFacade(); doReturn(dbUserMock).when(query).initUser(); initQuery(query); query.postConstruct(); return query; }
private org.ovirt.engine.core.common.businessentities.EngineSession injectSessionInfo(org.ovirt.engine.core.common.businessentities.EngineSession engineSession) { engineSession.setStartTime(org.ovirt.engine.core.bll.SearchQuery.getSessionDataContainer().getSessionStartTime(engineSession.getEngineSessionId())); engineSession.setLastActiveTime(org.ovirt.engine.core.bll.SearchQuery.getSessionDataContainer().getSessionLastActiveTime(engineSession.getEngineSessionId())); return engineSession; }	private void injectSessionInfo(org.ovirt.engine.core.common.businessentities.EngineSession engineSession) { engineSession.setStartTime(org.ovirt.engine.core.bll.SearchQuery.getSessionDataContainer().getSessionStartTime(engineSession.getEngineSessionId())); engineSession.setLastActiveTime(org.ovirt.engine.core.bll.SearchQuery.getSessionDataContainer().getSessionLastActiveTime(engineSession.getEngineSessionId())); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.UserSession session) { return dateFormat.format(session.getSessionLastActiveTime()); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.UserSession session) { return (session.getSessionLastActiveTime()) == null ? "" : dateFormat.format(session.getSessionLastActiveTime()); }
public final void updateSessionLastActiveTime(java.lang.String sessionId) { if ((org.apache.commons.lang.StringUtils.isNotEmpty(sessionId)) && (isSessionExists(sessionId))) { setData(sessionId, org.ovirt.engine.core.bll.aaa.SessionDataContainer.SESSION_LAST_ACTIVE_TIME, new java.util.Date()); } }	public final void updateSessionLastActiveTime(java.lang.String sessionId) { if (isSessionExists(sessionId)) { setData(sessionId, org.ovirt.engine.core.bll.aaa.SessionDataContainer.SESSION_LAST_ACTIVE_TIME, new java.util.Date()); } }
private java.util.List<org.ovirt.engine.core.common.businessentities.UserSession> searchSessions() { return genericSearch(org.ovirt.engine.core.bll.SearchQuery.getDbFacade().getEngineSessionDao(), false).stream().map(<START_MOD>this::injectSessionInfo).map(<END_MOD>UserSession::new).collect(java.util.stream.Collectors.toList()); }	private java.util.List<org.ovirt.engine.core.common.businessentities.UserSession> searchSessions() { return genericSearch(org.ovirt.engine.core.bll.SearchQuery.getDbFacade().getEngineSessionDao(), false).stream().peek(this::injectSessionInfo).map(UserSession::new).collect(java.util.stream.Collectors.toList()); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.UserSession session) { return dateFormat.format(session.getSessionStartTime()); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.UserSession session) { return (session.getSessionStartTime()) == null ? "" : dateFormat.format(session.getSessionStartTime()); }
@org.junit.Test public void testGetRoot() throws java.lang.Exception { try (org.apache.http.client.methods.CloseableHttpResponse response = ((org.apache.http.client.methods.CloseableHttpResponse) (connection.send(new org.apache.http.client.methods.HttpGet(connection.getUrl()))))) { assertEquals(200, response.getStatusLine().getStatusCode()); } }	@org.junit.Test public void testGetRoot() throws java.lang.Exception { assertNotNull(connection.systemService().get().send()); }
@org.junit.Before public void setUp() { setXmlResponse("datacenters", 200, "<data_centers/>"); startServer(); connection = testConnection(); dataCentersService = connection.systemService().dataCentersService(); }	@org.junit.Before public void setUp() { setXmlResponse("datacenters", 200, "<data_centers/>"); setXmlResponse("datacenters/123", 200, "<data_center id=\"123\"><name>testdc</name></data_center>"); startServer(); connection = testConnection(); dataCentersService = connection.systemService().dataCentersService(); }
@org.junit.Test public void testGetService() { assertNotNull(dataCentersService); }	@org.junit.Test public void testGetDataCentersService() { assertNotNull(dataCentersService); }
@org.junit.Before public void setUp() { setXmlResponse("clusters", 200, "<clusters/>"); startServer(); connection = testConnection(); clustersService = connection.systemService().clustersService(); }	@org.junit.Before public void setUp() { setXmlResponse("clusters", 200, "<clusters/>"); setXmlResponse("clusters/123", 200, "<cluster id=\"123\"><name>testcluster</name></cluster>"); startServer(); connection = testConnection(); clustersService = connection.systemService().clustersService(); }
@org.junit.Before public void setUp() { setXmlResponse("vms", 200, "<vms/>"); startServer(); connection = testConnection(); vmsService = connection.systemService().vmsService(); }	@org.junit.Before public void setUp() { setXmlResponse("vms", 200, "<vms/>"); setXmlResponse("vms/123", 200, "<vm id=\"123\"><name>testvm</name></vm>"); startServer(); connection = testConnection(); vmsService = connection.systemService().vmsService(); }
@org.junit.Before public void setUp() { setXmlResponse("storagedomains", 200, "<storage_domains/>"); startServer(); connection = testConnection(); storageDomainsService = connection.systemService().storageDomainsService(); }	@org.junit.Before public void setUp() { setXmlResponse("storagedomains", 200, "<storage_domains/>"); setXmlResponse("storagedomains/123", 200, "<storage_domain id=\"123\"><name>testsd</name></storage_domain>"); startServer(); connection = testConnection(); storageDomainsService = connection.systemService().storageDomainsService(); }
@org.junit.Before public void setUp() { setXmlResponse("vms", 200, "<vms/>", 2); startServer(); connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection().url(testUrl()).user(testUser()).password(testPassword()).timeout(1).keyStorePath(testKeyStorePath()).keyStorePassword(testKeyStorePassword()).build(); vmsService = connection.systemService().vmsService(); }	@org.junit.Before public void setUp() { setXmlResponse("vms", 200, "<vms/>", 2); startServer(); connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection().url(testUrl()).user(testUser()).password(testPassword()).timeout(1).trustStoreFile(testTrustStoreFile()).trustStorePassword(testTrustStorePassword()).build(); vmsService = connection.systemService().vmsService(); }
@org.junit.Test public void testKerberosAuth() throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection().url(testUrl()).kerberos(true).keyStorePath(testKeyStorePath()).keyStorePassword(testKeyStorePassword()).build(); connection.close(); }	@org.junit.Test public void testKerberosAuth() throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection().url(testUrl()).kerberos(true).trustStoreFile(testTrustStoreFile()).trustStorePassword(testTrustStorePassword()).build(); connection.close(); }
public <START_MOD>void<END_MOD> <START_MOD>auditClientIpChange<END_MOD>() { <START_MOD>final<END_MOD> <START_MOD>org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); event.setVmId(dbVm.getId()); event.setUserName(dbVm.getDynamicData().getConsoleCurrentUserName()); auditLogDirector.log(event, (org.apache.commons.lang.StringUtils.isEmpty(dbVm.getDynamicData().getClientIp()) ? org.ovirt.engine.core.common.AuditLogType.VM_CONSOLE_DISCONNECTED : org.ovirt.engine.core.common.AuditLogType.VM_CONSOLE_CONNECTED))<END_MOD>; }	public void auditClientIpChange() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); event.setVmId(dbVm.getId()); event.setUserName(dbVm.getConsoleCurentUserName()); java.lang.String clientIp = vdsmVm.getVmDynamic().getClientIp(); auditLogDirector.log(event, ((clientIp == null) || (clientIp.isEmpty()) ? org.ovirt.engine.core.common.AuditLogType.VM_CONSOLE_DISCONNECTED : org.ovirt.engine.core.common.AuditLogType.VM_CONSOLE_CONNECTED)); }
@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.bll.storage.disk.cinder.AddCinderDiskCommand addCinderDiskCommand = ((org.ovirt.engine.core.bll.storage.disk.cinder.AddCinderDiskCommand) (command)); org.ovirt.engine.core.compat.Guid diskId = ((org.ovirt.engine.core.common.action.AddDiskParameters) (addCinderDiskCommand.getParameters())).getDiskInfo().getId(); org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus = addCinderDiskCommand.getCinderBroker().getDiskStatus(diskId); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = ((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().get(diskId))); if ((imageStatus != null) && (imageStatus != (disk.getImageStatus()))) { switch (imageStatus) { case OK : super.childCommandsExecutionEnded(command, false, childCmdIds, status, completedChildren); break; case ILLEGAL : super.childCommandsExecutionEnded(command, true, childCmdIds, status, completedChildren); break; } } }	@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.bll.storage.disk.cinder.AddCinderDiskCommand<org.ovirt.engine.core.common.action.AddDiskParameters> addCinderDiskCommand = ((org.ovirt.engine.core.bll.storage.disk.cinder.AddCinderDiskCommand<org.ovirt.engine.core.common.action.AddDiskParameters>) (command)); org.ovirt.engine.core.compat.Guid diskId = getDiskId(addCinderDiskCommand); org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus = addCinderDiskCommand.getCinderBroker().getDiskStatus(diskId); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = ((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (command.getDiskDao().get(diskId))); if ((imageStatus != null) && (imageStatus != (disk.getImageStatus()))) { switch (imageStatus) { case OK : setCommandEndStatus(command, false, status, childCmdIds); break; case ILLEGAL : setCommandEndStatus(command, true, status, childCmdIds); break; } } }
@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.bll.storage.disk.image.BaseImagesCommand cloneCinderDiskCommand = ((org.ovirt.engine.core.bll.storage.disk.image.BaseImagesCommand) (command)); org.ovirt.engine.core.compat.Guid diskId = ((org.ovirt.engine.core.common.action.ImagesContainterParametersBase) (cloneCinderDiskCommand.getParameters())).getDestinationImageId(); org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus = cloneCinderDiskCommand.getCinderBroker().getDiskStatus(diskId); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = ((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().get(diskId))); if ((imageStatus != null) && (imageStatus != (disk.getImageStatus()))) { switch (imageStatus) { case OK : super.childCommandsExecutionEnded(command, false, childCmdIds, status, completedChildren); break; case ILLEGAL : super.childCommandsExecutionEnded(command, true, childCmdIds, status, completedChildren); break; } } }	@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.bll.storage.disk.image.BaseImagesCommand<org.ovirt.engine.core.common.action.ImagesContainterParametersBase> cloneCinderDiskCommand = ((org.ovirt.engine.core.bll.storage.disk.image.BaseImagesCommand<org.ovirt.engine.core.common.action.ImagesContainterParametersBase>) (command)); org.ovirt.engine.core.common.action.ImagesContainterParametersBase parameters = cloneCinderDiskCommand.getParameters(); org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus = cloneCinderDiskCommand.getCinderBroker().getDiskStatus(parameters.getDestinationImageId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = ((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (command.getDiskDao().get(parameters.getContainerId()))); if ((imageStatus != null) && (imageStatus != (disk.getImageStatus()))) { switch (imageStatus) { case OK : setCommandEndStatus(command, false, status, childCmdIds); break; case ILLEGAL : setCommandEndStatus(command, true, status, childCmdIds); break; } } }
@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.bll.storage.disk.cinder.CreateCinderSnapshotCommand createCinderSnapshotCommand = ((org.ovirt.engine.core.bll.storage.disk.cinder.CreateCinderSnapshotCommand) (command)); org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters parameters = ((org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters) (createCinderSnapshotCommand.getParameters())); org.ovirt.engine.core.compat.Guid diskId = parameters.getDestinationImageId(); org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus; if (parameters.getSnapshotType().equals(Snapshot.SnapshotType.STATELESS)) { imageStatus = createCinderSnapshotCommand.getCinderBroker().getDiskStatus(diskId); } else { imageStatus = createCinderSnapshotCommand.getCinderBroker().getSnapshotStatus(diskId); } org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskImageDao().getSnapshotById(diskId); if ((imageStatus != null) && (imageStatus != (disk.getImageStatus()))) { switch (imageStatus) { case OK : super.childCommandsExecutionEnded(command, false, childCmdIds, status, completedChildren); break; case ILLEGAL : super.childCommandsExecutionEnded(command, true, childCmdIds, status, completedChildren); break; } } }	@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.bll.storage.disk.cinder.CreateCinderSnapshotCommand<org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters> createCinderSnapshotCommand = ((org.ovirt.engine.core.bll.storage.disk.cinder.CreateCinderSnapshotCommand<org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters>) (command)); org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters parameters = createCinderSnapshotCommand.getParameters(); org.ovirt.engine.core.compat.Guid diskId = parameters.getDestinationImageId(); org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus; if (parameters.getSnapshotType().equals(Snapshot.SnapshotType.STATELESS)) { imageStatus = createCinderSnapshotCommand.getCinderBroker().getDiskStatus(diskId); } else { imageStatus = createCinderSnapshotCommand.getCinderBroker().getSnapshotStatus(diskId); } org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = command.getDiskImageDao().getSnapshotById(diskId); if ((imageStatus != null) && (imageStatus != (disk.getImageStatus()))) { switch (imageStatus) { case OK : setCommandEndStatus(command, false, status, childCmdIds); break; case ILLEGAL : setCommandEndStatus(command, true, status, childCmdIds); break; } } }
@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderSnapshotDiskCommand removeCinderSnapshotDiskCommand = ((org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderSnapshotDiskCommand) (command)); org.ovirt.engine.core.common.action.ImagesContainterParametersBase parameters = ((org.ovirt.engine.core.common.action.ImagesContainterParametersBase) (removeCinderSnapshotDiskCommand.getParameters())); org.ovirt.engine.core.compat.Guid diskId = parameters.getDestinationImageId(); if (!(removeCinderSnapshotDiskCommand.getCinderBroker().isSnapshotExist(diskId))) { super.childCommandsExecutionEnded(command, false, childCmdIds, status, completedChildren); return; } org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus = removeCinderSnapshotDiskCommand.getCinderBroker().getSnapshotStatus(diskId); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskImageDao().getSnapshotById(diskId); if ((imageStatus != null) && (imageStatus != (disk.getImageStatus()))) { switch (imageStatus) { case ILLEGAL : super.childCommandsExecutionEnded(command, true, childCmdIds, status, completedChildren); break; } } }	@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderSnapshotDiskCommand<org.ovirt.engine.core.common.action.ImagesContainterParametersBase> removeCinderSnapshotDiskCommand = ((org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderSnapshotDiskCommand<org.ovirt.engine.core.common.action.ImagesContainterParametersBase>) (command)); org.ovirt.engine.core.common.action.ImagesContainterParametersBase parameters = removeCinderSnapshotDiskCommand.getParameters(); org.ovirt.engine.core.compat.Guid diskId = parameters.getDestinationImageId(); if (!(removeCinderSnapshotDiskCommand.getCinderBroker().isSnapshotExist(diskId))) { setCommandEndStatus(command, false, status, childCmdIds); return; } org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus = removeCinderSnapshotDiskCommand.getCinderBroker().getSnapshotStatus(diskId); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = command.getDiskImageDao().getSnapshotById(diskId); if ((imageStatus != null) && (imageStatus != (disk.getImageStatus()))) { switch (imageStatus) { case ILLEGAL : setCommandEndStatus(command, true, status, childCmdIds); break; } } }
@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.common.action.RemoveCinderDiskVolumeParameters parameters = ((org.ovirt.engine.core.common.action.RemoveCinderDiskVolumeParameters) (command.getParameters())); org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskVolumeCommand removeCinderDiskVolumeCommand = ((org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskVolumeCommand) (command)); org.ovirt.engine.core.common.businessentities.storage.CinderDisk removedVolume = parameters.getRemovedVolume(); if (!(removeCinderDiskVolumeCommand.getCinderBroker().isVolumeExistsByClassificationType(removedVolume))) { super.childCommandsExecutionEnded(command, false, childCmdIds, status, completedChildren); } org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus = checkImageStatus(removedVolume, removeCinderDiskVolumeCommand); if ((imageStatus != null) && (imageStatus != (removedVolume.getImageStatus()))) { switch (imageStatus) { case ILLEGAL : super.childCommandsExecutionEnded(command, true, childCmdIds, status, completedChildren); break; } } }	@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskVolumeCommand<org.ovirt.engine.core.common.action.RemoveCinderDiskVolumeParameters> removeCinderDiskVolumeCommand = ((org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskVolumeCommand<org.ovirt.engine.core.common.action.RemoveCinderDiskVolumeParameters>) (command)); org.ovirt.engine.core.common.businessentities.storage.CinderDisk removedVolume = removeCinderDiskVolumeCommand.getParameters().getRemovedVolume(); if (!(removeCinderDiskVolumeCommand.getCinderBroker().isVolumeExistsByClassificationType(removedVolume))) { setCommandEndStatus(command, false, status, childCmdIds); } org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus = checkImageStatus(removedVolume, removeCinderDiskVolumeCommand); if ((imageStatus != null) && (imageStatus != (removedVolume.getImageStatus()))) { switch (imageStatus) { case ILLEGAL : setCommandEndStatus(command, true, status, childCmdIds); break; } } }
@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.bll.storage.disk.cinder.ExtendCinderDiskCommand extendCinderDiskCommand = ((org.ovirt.engine.core.bll.storage.disk.cinder.ExtendCinderDiskCommand) (command)); org.ovirt.engine.core.common.action.UpdateVmDiskParameters parameters = ((org.ovirt.engine.core.common.action.UpdateVmDiskParameters) (extendCinderDiskCommand.getParameters())); org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus = extendCinderDiskCommand.getCinderBroker().getDiskStatus(parameters.getDiskId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = ((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (command.getDiskDao().get(parameters.getDiskId()))); if ((imageStatus != null) && (imageStatus != (disk.getImageStatus()))) { switch (imageStatus) { case OK : super.childCommandsExecutionEnded(command, false, childCmdIds, status, completedChildren); break; case ILLEGAL : super.childCommandsExecutionEnded(command, true, childCmdIds, status, completedChildren); break; } } }	@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.bll.storage.disk.cinder.ExtendCinderDiskCommand<org.ovirt.engine.core.common.action.UpdateVmDiskParameters> extendCinderDiskCommand = ((org.ovirt.engine.core.bll.storage.disk.cinder.ExtendCinderDiskCommand<org.ovirt.engine.core.common.action.UpdateVmDiskParameters>) (command)); org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus = extendCinderDiskCommand.getCinderBroker().getDiskStatus(getDiskId(extendCinderDiskCommand)); if ((imageStatus != null) && (imageStatus != (getDisk(extendCinderDiskCommand).getImageStatus()))) { switch (imageStatus) { case OK : setCommandEndStatus(command, false, status, childCmdIds); break; case ILLEGAL : setCommandEndStatus(command, true, status, childCmdIds); break; } } }
@java.lang.Override protected void endWithFailure() { org.ovirt.engine.core.bll.storage.disk.<START_MOD>image.ImagesHandler.updateImageStatus(org.ovirt.engine.core.bll.storage.disk.cinder.ExtendCinderDiskCommand.getParameters().getDiskId(), ImageStatus.ILLEGAL); org.ovirt.engine.core.bll.storage.disk.cinder.ExtendCinderDiskCommand.log.error( extending disk. ID: {} org.ovirt.engine.core.bll.storage.disk.cinder.ExtendCinderDiskCommand.getParameters().getDiskId()); updateAuditLog(AuditLogType.USER_EXTEND_DISK_SIZE_FAILURE, org.ovirt.engine.core.bll.storage.disk.cinder.ExtendCinderDiskCommand.getNewDiskSizeInGB()); org.ovirt.engine.core.bll.storage.disk.<END_MOD>cinder.ExtendCinderDiskCommand.setSucceeded(true); }	@java.lang.Override protected void endWithFailure() { org.ovirt.engine.core.bll.storage.disk.cinder.ExtendCinderDiskCommand.setSucceeded(true); }
private boolean setVolumeLegalityInStorage(org.ovirt.engine.core.compat.Guid transferingVdsId, boolean legal) { org.ovirt.engine.core.common.vdscommands.SetVolumeLegalityVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.SetVolumeLegalityVDSCommandParameters(transferingVdsId, org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getImage().getImage().getDiskId(), org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getImage().getImageId(), legal); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsRetVal; try { vdsRetVal = org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getBackend().getResourceManager().runVdsCommand(VDSCommandType.SetVolumeLegality, parameters); } catch (java.lang.RuntimeException e) { log.error("Failed to set image's volume's legality: {}", e); return false; } return true; }	private boolean setVolumeLegalityInStorage(boolean legal) { org.ovirt.engine.core.common.vdscommands.SetVolumeLegalityVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.SetVolumeLegalityVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getImage().getImage().getDiskId(), org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getImage().getImageId(), legal); try { runVdsCommand(VDSCommandType.SetVolumeLegality, parameters); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Failed to set image's volume's legality to {} for image {} and volume {}: {}", legal, org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getImage().getImage().getDiskId(), org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getImage().getImageId(), e); return false; } return true; }
private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand<T>.StateContext context) { log.info( successful upload to {} getUploadDescription()); org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.unLockImage(); <START_MOD>setVolumeLegalityInStorage(context.entity.getVdsId(), true); <END_MOD>stopImageTransferSession(context.entity); updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); }	private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand<T>.StateContext context) { log.info("Finalizing successful upload to {}", getUploadDescription()); stopImageTransferSession(context.entity); setVolumeLegalityInStorage(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.LEGAL_IMAGE); org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.unLockImage(); updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); }
private <START_MOD>boolean<END_MOD> stopImageTransferSession(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity) { if ((entity.getImagedTicketId()) == null) { return<START_MOD> false<END_MOD>; } org.ovirt.engine.core.compat.Guid resourceId = entity.getImagedTicketId(); org.ovirt.engine.core.common.vdscommands.RemoveImageTicketVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.RemoveImageTicketVDSCommandParameters(entity.getVdsId(), resourceId); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsRetVal; try { vdsRetVal = org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getBackend().getResourceManager().runVdsCommand(VDSCommandType.RemoveImageTicket, parameters); } catch (java.lang.RuntimeException e) { log.error( to stop image transfer session for ticket '{}': {} resourceId.toString(), e); return<START_MOD> false<END_MOD>; } if (!(vdsRetVal.getSucceeded())) { log.warn( to stop image transfer session for ticket '{}' resourceId.toString()); return<START_MOD> false<END_MOD>; } log.info( stopped image transfer session for ticket '{}' resourceId.toString()); org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates(); updates.setClearResourceId(true); updateEntity(updates); tearDownImage(entity.getVdsId()); <START_MOD>return true; }<END_MOD>	private boolean stopImageTransferSession(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity) { if ((entity.getImagedTicketId()) == null) { log.warn("Failed to stop image transfer session. Ticket does not exist for image '{}'", entity.getDiskId()); return false; } org.ovirt.engine.core.compat.Guid resourceId = entity.getImagedTicketId(); org.ovirt.engine.core.common.vdscommands.RemoveImageTicketVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.RemoveImageTicketVDSCommandParameters(entity.getVdsId(), resourceId); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsRetVal; try { vdsRetVal = org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getBackend().getResourceManager().runVdsCommand(VDSCommandType.RemoveImageTicket, parameters); } catch (java.lang.RuntimeException e) { log.error("Failed to stop image transfer session for ticket '{}': {}", resourceId.toString(), e); return false; } if (!(vdsRetVal.getSucceeded())) { log.warn("Failed to stop image transfer session for ticket '{}'", resourceId.toString()); return false; } log.info("Successfully stopped image transfer session for ticket '{}'", resourceId.toString()); org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates(); updates.setClearResourceId(true); updateEntity(updates); tearDownImage(entity.getVdsId()); return true; }
private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand<T>.StateContext context) { log.info( successful upload to {} getUploadDescription()); <START_MOD>if (<END_MOD>stopImageTransferSession(context.entity)<START_MOD>) {<END_MOD> org.ovirt.engine.core.compat.Guid transferingVdsId = context.entity.getVdsId(); if (verifyImage(transferingVdsId)) { setVolumeLegalityInStorage(transferingVdsId, true); org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.unLockImage(); updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); } else { setImageStatus(ImageStatus.ILLEGAL); updateEntityPhase(ImageTransferPhase.FINALIZING_FAILURE); } }<START_MOD> }<END_MOD>	private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand<T>.StateContext context) { log.info("Finalizing successful upload to {}", getUploadDescription()); if (stopImageTransferSession(context.entity)) { org.ovirt.engine.core.compat.Guid transferingVdsId = context.entity.getVdsId(); if (verifyImage(transferingVdsId)) { setVolumeLegalityInStorage(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.LEGAL_IMAGE); org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.unLockImage(); updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); } else { setImageStatus(ImageStatus.ILLEGAL); updateEntityPhase(ImageTransferPhase.FINALIZING_FAILURE); } } }
private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand<T>.StateContext context) { log.info( successful upload to {} getUploadDescription()); stopImageTransferSession(context.entity); <START_MOD>org.ovirt.engine.core.compat.Guid transferingVdsId = <END_MOD>context.entity.getVdsId()<START_MOD>; if (verifyImage(transferingVdsId)) { setVolumeLegalityInStorage(transferingVdsId<END_MOD>, true); org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.unLockImage(); updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); }<START_MOD> else { setImageStatus(ImageStatus.ILLEGAL); updateEntityPhase(ImageTransferPhase.FINALIZING_FAILURE); } }<END_MOD>	private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand<T>.StateContext context) { log.info("Finalizing successful upload to {}", getUploadDescription()); stopImageTransferSession(context.entity); org.ovirt.engine.core.compat.Guid transferingVdsId = context.entity.getVdsId(); if (verifyImage(transferingVdsId)) { setVolumeLegalityInStorage(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.LEGAL_IMAGE); org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.unLockImage(); updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); } else { setImageStatus(ImageStatus.ILLEGAL); updateEntityPhase(ImageTransferPhase.FINALIZING_FAILURE); } }
@java.lang.Override protected void executeVmCommand() { org.ovirt.engine.core.bll.VmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.ArrayList<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (<START_MOD>!(<END_MOD>canAddVm(errorMessages, destStorages.values()))<START_MOD>)<END_MOD> { log.error( to add <START_MOD>VM<END_MOD>. The reasons are: {} org.apache.commons.lang.StringUtils.join(errorMessages, ',')); <START_MOD>return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId()) != null) { addVmToPool(); } }<END_MOD>	@java.lang.Override protected void executeVmCommand() { org.ovirt.engine.core.bll.VmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error("Failed to add VM. The reasons are: {}", java.lang.String.join(",", errorMessages)); return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId()) != null) { addVmToPool(); } }
private void logVmDown() { org.ovirt.engine.core.vdsbroker.monitoring.VmAnalyzer.log.info("VM '{}' was reported as Down on VDS '{}'({})", vdsmVm.getVmDynamic().getId(), vdsManager.getVdsId(), vdsManager.getVdsName()); }	public void auditClientIpChange() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); event.setVmId(dbVm.getId()); event.setUserName(dbVm.getConsoleCurentUserName()); java.lang.String clientIp = vdsmVm.getVmDynamic().getClientIp(); auditLogDirector.log(event, ((clientIp == null) || (clientIp.isEmpty()) ? org.ovirt.engine.core.common.AuditLogType.VM_CONSOLE_DISCONNECTED : org.ovirt.engine.core.common.AuditLogType.VM_CONSOLE_CONNECTED)); }
void proceedDownVm() { if ((vdsmVm.getVmDynamic().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { return; } destroyVm(); if ((dbVm) == null) { <START_MOD>logVmDown(); <END_MOD>return; } <START_MOD>logVmStatusTransition(); <END_MOD>switch (dbVm.getStatus()) { case SavingState : resourceManager.internalSetVmStatus(dbVm, VMStatus.Suspended); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); afterSuspendTreatment(); break; case MigratingFrom : proceedVmBeforeDeletion(); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); handOverVM(dbVm); break; default : auditVmOnDownEvent(); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); switch (vdsmVm.getVmDynamic().getExitStatus()) { case Error : if (resourceManager.isVmInAsyncRunningList(vdsmVm.getVmDynamic().getId())) { setRerunFlag(); break; } if (dbVm.isAutoStartup()) { setAutoRunFlag(); break; } break; case Normal : resourceManager.removeAsyncRunningVm(vdsmVm.getVmDynamic().getId()); if (((getVmManager()) != null) && (getVmManager().isColdReboot())) { setColdRebootFlag(); } } } }	void proceedDownVm() { destroyVm(); if ((dbVm) == null) { return; } switch (dbVm.getStatus()) { case SavingState : resourceManager.internalSetVmStatus(dbVm, VMStatus.Suspended); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); afterSuspendTreatment(); break; case MigratingFrom : proceedVmBeforeDeletion(); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); if ((vdsmVm.getVmDynamic().getExitStatus()) == (org.ovirt.engine.core.common.businessentities.VmExitStatus.Normal)) { handOverVm(dbVm); } break; default : auditVmOnDownEvent(); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); switch (vdsmVm.getVmDynamic().getExitStatus()) { case Error : if (resourceManager.isVmInAsyncRunningList(vdsmVm.getVmDynamic().getId())) { setRerunFlag(); break; } if (dbVm.isAutoStartup()) { setAutoRunFlag(); break; } break; case Normal : resourceManager.removeAsyncRunningVm(vdsmVm.getVmDynamic().getId()); if (((getVmManager()) != null) && (getVmManager().isColdReboot())) { setColdRebootFlag(); } } } }
private java.lang.String createSpiceInvocationInfo() { return new org.ovirt.engine.ui.common.view.popup.ConsolePopupView.KeyValueHtmlRowMaker(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.auto(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokeAuto()).append(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.nativeClient(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.consoleInvokeNative()).append(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceHtml5(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokeHtml5()).toString(); }	private java.lang.String createSpiceInvocationInfo() { org.ovirt.engine.ui.common.view.popup.ConsolePopupView.KeyValueHtmlRowMaker rowMaker = new org.ovirt.engine.ui.common.view.popup.ConsolePopupView.KeyValueHtmlRowMaker(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.auto(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokeAuto()); rowMaker.append(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.nativeClient(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.consoleInvokeNative()); if (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isEnableDeprecatedClientModeSpicePlugin()) { rowMaker.append(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.browserPlugin(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokePlugin()); } rowMaker.append(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceHtml5(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokeHtml5()); return rowMaker.toString(); }
@java.lang.Override public void setSpicePluginImplEnabled(boolean enabled, java.lang.String reason) { spicePluginImplRadioButton.<START_MOD>setVisible(enabled); spicePluginImplRadioButton.<END_MOD>setEnabled(enabled); if (!enabled) { spicePluginImplRadioButtonTooltip.setText(reason); } }	@java.lang.Override public void setSpicePluginImplEnabled(boolean enabled, java.lang.String reason) { spicePluginImplRadioButton.setEnabled(enabled); if (!enabled) { spicePluginImplRadioButtonTooltip.setText(reason); } }
private boolean isSucceededWithReasonGiven() { return (isSucceededWithHA()) && (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.MaintenanceVdsCommand.getVds().getMaintenanceReason()))); }	private boolean isSucceededWithReasonGiven() { return (isSucceededWithHA()) && (org.apache.commons.lang.StringUtils.isNotEmpty(org.ovirt.engine.core.bll.MaintenanceVdsCommand.getVds().getMaintenanceReason())); }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { log.debug( <START_MOD>SsoRestApiAuthFilter<END_MOD> javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (request)); if ((!(org.ovirt.engine.core.aaa.filters.FiltersHelper.isAuthenticated(req))) || (!(org.ovirt.engine.core.aaa.filters.FiltersHelper.isSessionValid(((javax.servlet.http.HttpServletRequest) (request)))))) { log.debug( authenticating with sso authenticateWithSSO(req, ((javax.servlet.http.HttpServletResponse) (response))); } chain.doFilter(request, response); }	@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { log.debug("Entered SsoRestApiAuthFilter"); javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (request)); if ((!(org.ovirt.engine.core.aaa.filters.FiltersHelper.isAuthenticated(req))) || (!(org.ovirt.engine.core.aaa.filters.FiltersHelper.isSessionValid(((javax.servlet.http.HttpServletRequest) (request)))))) { log.debug("SsoRestApiAuthFilter authenticating with sso"); authenticateWithSso(req, ((javax.servlet.http.HttpServletResponse) (response))); } chain.doFilter(request, response); }
public void setSSOSessionValidaor(org.ovirt.engine.core.bll.aaa.SessionDataContainer.<START_MOD>SsoSessionValidator<END_MOD> ssoSessionValidator) { this.ssoSessionValidator = ssoSessionValidator; }	public final void setSessionStartTime(java.lang.String sessionId) { setData(sessionId, org.ovirt.engine.core.bll.aaa.SessionDataContainer.SESSION_START_TIME, new java.util.Date()); }
@java.lang.Override protected boolean canAddDomain() { if ((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomainStaticDao().get(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getId())) != null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST); } java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsOnStorage = getLUNsFromVgInfo(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorage()); if (lunsOnStorage.isEmpty()) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_PROBLEM_WITH_CANDIDATE_INFO); } <START_MOD>java.util.Set<java.lang.String> lunsOnStorageIds = lunsOnStorage.stream().map(LUNs::getId).collect(java.util.stream.Collectors.toSet()); <END_MOD>if (getAllLuns()<START_MOD>.stream().anyMatch(lunsOnStorageIds::contains<END_MOD>)) { log.info( are existing luns in the system which are part of VG id '{}' org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorage()); return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMPORT_STORAGE_DOMAIN_EXTERNAL_LUN_DISK_EXIST); } return true; }	@java.lang.Override protected boolean canAddDomain() { if ((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomainStaticDao().get(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getId())) != null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST); } java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsOnStorage = getLUNsFromVgInfo(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorage()); if (lunsOnStorage.isEmpty()) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_PROBLEM_WITH_CANDIDATE_INFO); } java.util.Set<java.lang.String> allLunIds = getAllLuns().stream().map(LUNs::getId).collect(java.util.stream.Collectors.toSet()); if (lunsOnStorage.stream().map(LUNs::getId).anyMatch(allLunIds::contains)) { log.info("There are existing luns in the system which are part of VG id '{}'", org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorage()); return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMPORT_STORAGE_DOMAIN_EXTERNAL_LUN_DISK_EXIST); } return true; }
private java.lang.String findMigrationIpAddress(org.ovirt.engine.core.common.businessentities.network.Network migrationNetwork, java.util.function.Function<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface, java.lang.String> ipAddressGetter) { final java.lang.String migrationSourceIpAddress = getMigrationNetworkAddress(org.ovirt.engine.core.bll.MigrateVmCommand.getVds().getId(), migrationNetwork.getName(), ipAddressGetter); if (org.apache.commons.lang.StringUtils.isNotEmpty(migrationSourceIpAddress)) { final java.lang.String migrationDestinationIpAddress = getMigrationNetworkAddress(getDestinationVds().getId(), migrationNetwork.getName(), ipAddressGetter); if (org.apache.commons.lang.StringUtils.isNotEmpty(migrationDestinationIpAddress)) { return migrationDestinationIpAddress; } } return null; }	private java.lang.String findValidMigrationIpAddress(org.ovirt.engine.core.common.businessentities.network.Network migrationNetwork, java.util.function.Function<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface, java.lang.String> ipAddressGetter) { final java.lang.String migrationSourceIpAddress = getMigrationNetworkAddress(org.ovirt.engine.core.bll.MigrateVmCommand.getVds().getId(), migrationNetwork.getName(), ipAddressGetter); if (org.apache.commons.lang.StringUtils.isNotEmpty(migrationSourceIpAddress)) { final java.lang.String migrationDestinationIpAddress = getMigrationNetworkAddress(getDestinationVds().getId(), migrationNetwork.getName(), ipAddressGetter); if (org.apache.commons.lang.StringUtils.isNotEmpty(migrationDestinationIpAddress)) { return migrationDestinationIpAddress; } } return null; }
private java.lang.String getMigrationNetworkIp() { org.ovirt.engine.core.common.businessentities.network.Network migrationNetwork = null; java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> allNetworksInCluster = org.ovirt.engine.core.bll.MigrateVmCommand.getNetworkDao().getAllForCluster(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getClusterId()); for (org.ovirt.engine.core.common.businessentities.network.Network tempNetwork : allNetworksInCluster) { if (tempNetwork.getCluster().isMigration()) { migrationNetwork = tempNetwork; break; } } if (migrationNetwork != null) { <START_MOD>final java.lang.String migrationDestinationIpv4Address = findMigrationIpAddress(migrationNetwork<END_MOD>, <START_MOD>VdsNetworkInterface::getIpv4Address); if (migrationDestinationIpv4Address !=<END_MOD> null) { return <START_MOD>migrationDestinationIpv4Address; } final java.lang.String migrationDestinationIpv6Address = findMigrationIpAddress(migrationNetwork, VdsNetworkInterface::getIpv6Address); if (migrationDestinationIpv6Address != null) {<END_MOD> return <START_MOD>migrationDestinationIpv6Address; }<END_MOD> } return null; }	private java.lang.String getMigrationNetworkIp() { org.ovirt.engine.core.common.businessentities.network.Network migrationNetwork = null; java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> allNetworksInCluster = org.ovirt.engine.core.bll.MigrateVmCommand.getNetworkDao().getAllForCluster(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getClusterId()); for (org.ovirt.engine.core.common.businessentities.network.Network tempNetwork : allNetworksInCluster) { if (tempNetwork.getCluster().isMigration()) { migrationNetwork = tempNetwork; break; } } if (migrationNetwork != null) { final java.lang.String migrationDestinationIpv4Address = findValidMigrationIpAddress(migrationNetwork, VdsNetworkInterface::getIpv4Address); if (migrationDestinationIpv4Address != null) { return migrationDestinationIpv4Address; } final java.lang.String migrationDestinationIpv6Address = findValidMigrationIpAddress(migrationNetwork, VdsNetworkInterface::getIpv6Address); if (migrationDestinationIpv6Address != null) { return migrationDestinationIpv6Address; } } return null; }
private void addDefaultNetworks() { org.ovirt.engine.core.common.businessentities.network.Network net = new org.ovirt.engine.core.common.businessentities.network.Network(); net.setId(org.ovirt.engine.core.compat.Guid.newGuid()); net.setName(managementNetworkUtil.getDefaultManagementNetworkName()); net.setDescription(AddClusterCommand.DefaultNetworkDescription); <START_MOD>final org.ovirt.engine.core.compat.Guid dataCenterId = org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.getStoragePool().getId(); <END_MOD>net.setDataCenterId(<START_MOD>dataCenterId<END_MOD>); net.setVmNetwork(true); org.ovirt.engine.core.<START_MOD>common.businessentities.network.HostNetworkQos defaultQos = createDeafaultManagemantNetworkQos(dataCenterId); net.setQosId(defaultQos.getId()); org.ovirt.engine.core.<END_MOD>bll.storage.pool.AddEmptyStoragePoolCommand.getNetworkDao().save(net); org.ovirt.engine.core.bll.network.cluster.NetworkHelper.addPermissionsOnNetwork(org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.getCurrentUser().getId(), net.getId()); org.ovirt.engine.core.common.businessentities.network.VnicProfile profile = org.ovirt.engine.core.bll.network.cluster.NetworkHelper.createVnicProfile(net); org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.getVnicProfileDao().save(profile); org.ovirt.engine.core.bll.network.cluster.NetworkHelper.addPermissionsOnVnicProfile(org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.getCurrentUser().getId(), profile.getId(), true); }	private void addDefaultNetworks() { final org.ovirt.engine.core.compat.Guid dataCenterId = org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.getStoragePool().getId(); org.ovirt.engine.core.compat.Guid defaultQosId = createDefaultManagementNetworkQos(dataCenterId); org.ovirt.engine.core.common.businessentities.network.Network net = new org.ovirt.engine.core.common.businessentities.network.Network(); net.setId(org.ovirt.engine.core.compat.Guid.newGuid()); net.setName(managementNetworkUtil.getDefaultManagementNetworkName()); net.setDescription(AddClusterCommand.DefaultNetworkDescription); net.setDataCenterId(dataCenterId); net.setVmNetwork(true); net.setQosId(defaultQosId); org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.getNetworkDao().save(net); org.ovirt.engine.core.bll.network.cluster.NetworkHelper.addPermissionsOnNetwork(org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.getCurrentUser().getId(), net.getId()); org.ovirt.engine.core.common.businessentities.network.VnicProfile profile = org.ovirt.engine.core.bll.network.cluster.NetworkHelper.createVnicProfile(net); org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.getVnicProfileDao().save(profile); org.ovirt.engine.core.bll.network.cluster.NetworkHelper.addPermissionsOnVnicProfile(org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.getCurrentUser().getId(), profile.getId(), true); }
private org.ovirt.engine.core.common.businessentities.network.HostNetworkQos createDeafaultManagemantNetworkQos(org.ovirt.engine.core.compat.Guid dataCenterId) { final org.ovirt.engine.core.common.businessentities.network.HostNetworkQos result = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos(); result.setId(org.ovirt.engine.core.compat.Guid.newGuid()); result.setStoragePoolId(dataCenterId); result.setName(org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.DEFAULT_MGMT_NETWORK_QOS_NAME); result.setDescription(org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.DEFAULT_MGMT_NETWORK_QOS_DESC); result.setOutAverageLinkshare(50); hostNetworkQosDao.save(result); org.ovirt.engine.core.bll.network.cluster.NetworkHelper.addPermissionsOnQoS(org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.getCurrentUser().getId(), result.getId(), true); return result; }	private org.ovirt.engine.core.compat.Guid createDefaultManagementNetworkQos(org.ovirt.engine.core.compat.Guid dataCenterId) { final org.ovirt.engine.core.common.businessentities.network.HostNetworkQos hostNetworkQos = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos(); hostNetworkQos.setStoragePoolId(dataCenterId); hostNetworkQos.setName(org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.DEFAULT_MGMT_NETWORK_QOS_NAME); hostNetworkQos.setDescription(org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.DEFAULT_MGMT_NETWORK_QOS_DESC); hostNetworkQos.setOutAverageLinkshare(50); final org.ovirt.engine.core.common.action.QosParametersBase<org.ovirt.engine.core.common.businessentities.network.HostNetworkQos> hostNetworkQosParameters = new org.ovirt.engine.core.common.action.QosParametersBase(); hostNetworkQosParameters.setQos(hostNetworkQos); final org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalAction(VdcActionType.AddHostNetworkQos, hostNetworkQosParameters); if (returnValue.getSucceeded()) { return returnValue.getActionReturnValue(); } else { propagateFailure(returnValue); throw new java.lang.RuntimeException(java.lang.String.format("Failed to create default network QoS: %s", returnValue.getDescription())); } }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(getId(), parentDeviceName, capability, iommuGroup, productName, productId, vendorName, vendorId, parentPhysicalFunction, totalVirtualFunctions, networkInterfaceName, <START_MOD>assignable, <END_MOD>vmId); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(getId(), parentDeviceName, capability, iommuGroup, productName, productId, vendorName, vendorId, parentPhysicalFunction, totalVirtualFunctions, networkInterfaceName, driver, assignable, vmId); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.HostDevice)) { return false; } org.ovirt.engine.core.common.businessentities.HostDevice other = ((org.ovirt.engine.core.common.businessentities.HostDevice) (obj)); return (((((((((((<START_MOD>(<END_MOD>java.util.Objects.equals(getId(), other.getId())) && (java.util.Objects.equals(parentDeviceName, other.parentDeviceName))) && (java.util.Objects.equals(capability, other.capability))) && (java.util.Objects.equals(iommuGroup, other.iommuGroup))) && (java.util.Objects.equals(productName, other.productName))) && (java.util.Objects.equals(productId, other.productId))) && (java.util.Objects.equals(vendorName, other.vendorName))) && (java.util.Objects.equals(vendorId, other.vendorId))) && (java.util.Objects.equals(parentPhysicalFunction, other.parentPhysicalFunction))) && (java.util.Objects.equals(totalVirtualFunctions, other.totalVirtualFunctions))) && (java.util.Objects.equals(networkInterfaceName, other.networkInterfaceName))) && (java.util.Objects.equals(<START_MOD>assignable, other.assignable))) && (java.util.Objects.equals(<END_MOD>vmId, other.vmId)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.HostDevice)) { return false; } org.ovirt.engine.core.common.businessentities.HostDevice other = ((org.ovirt.engine.core.common.businessentities.HostDevice) (obj)); return (((((((((((((java.util.Objects.equals(getId(), other.getId())) && (java.util.Objects.equals(parentDeviceName, other.parentDeviceName))) && (java.util.Objects.equals(capability, other.capability))) && (java.util.Objects.equals(iommuGroup, other.iommuGroup))) && (java.util.Objects.equals(productName, other.productName))) && (java.util.Objects.equals(productId, other.productId))) && (java.util.Objects.equals(vendorName, other.vendorName))) && (java.util.Objects.equals(vendorId, other.vendorId))) && (java.util.Objects.equals(parentPhysicalFunction, other.parentPhysicalFunction))) && (java.util.Objects.equals(totalVirtualFunctions, other.totalVirtualFunctions))) && (java.util.Objects.equals(networkInterfaceName, other.networkInterfaceName))) && (java.util.Objects.equals(driver, other.driver))) && (java.util.Objects.equals(assignable, other.assignable))) && (java.util.Objects.equals(vmId, other.vmId)); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.HostDevice entity) { return createIdParameterMapper(entity.getId()).addValue("parent_device_name", entity.getParentDeviceName()).addValue("capability", entity.getCapability()).addValue("iommu_group", entity.getIommuGroup()).addValue("product_name", entity.getProductName()).addValue("product_id", entity.getProductId()).addValue("vendor_name", entity.getVendorName()).addValue("vendor_id", entity.getVendorId()).addValue("physfn", entity.getParentPhysicalFunction()).addValue("total_vfs", entity.getTotalVirtualFunctions()).addValue("net_iface_name", entity.getNetworkInterfaceName())<START_MOD>.addValue("is_assignable", entity.isAssignable())<END_MOD>; }	@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.HostDevice entity) { return createIdParameterMapper(entity.getId()).addValue("parent_device_name", entity.getParentDeviceName()).addValue("capability", entity.getCapability()).addValue("iommu_group", entity.getIommuGroup()).addValue("product_name", entity.getProductName()).addValue("product_id", entity.getProductId()).addValue("vendor_name", entity.getVendorName()).addValue("vendor_id", entity.getVendorId()).addValue("physfn", entity.getParentPhysicalFunction()).addValue("total_vfs", entity.getTotalVirtualFunctions()).addValue("net_iface_name", entity.getNetworkInterfaceName()).addValue("driver", entity.getDriver()).addValue("is_assignable", entity.isAssignable()); }
@java.lang.Override protected org.ovirt.engine.core.common.businessentities.HostDevice generateNewEntity() { org.ovirt.engine.core.common.businessentities.HostDevice device = new org.ovirt.engine.core.common.businessentities.HostDevice(); device.setHostId(org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_HOST_ID); device.setDeviceName(((org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_DEVICE_NAME) + "___child")); device.setParentDeviceName(org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_DEVICE_NAME); device.setCapability("pci"); <START_MOD>device.setAssignable(true); <END_MOD>return device; }	@java.lang.Override protected org.ovirt.engine.core.common.businessentities.HostDevice generateNewEntity() { org.ovirt.engine.core.common.businessentities.HostDevice device = new org.ovirt.engine.core.common.businessentities.HostDevice(); device.setHostId(org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_HOST_ID); device.setDeviceName(((org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_DEVICE_NAME) + "___child")); device.setParentDeviceName(org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_DEVICE_NAME); device.setCapability("pci"); device.setDriver("mock driver"); device.setAssignable(true); return device; }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("hostId", hostId).append("deviceName", deviceName).append("parentDeviceName", parentDeviceName).append("capability", capability).append("iommuGroup", iommuGroup).append("productName", productName).append("productId", productId).append("vendorName", vendorName).append("vendorId", vendorId).append("parentPhysicalFunction", parentPhysicalFunction).append("totalVirtualFunctions", totalVirtualFunctions).append("networkInterfaceName", networkInterfaceName).append(<START_MOD>"assignable", assignable).append(<END_MOD>"vmId", vmId).build(); }	@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("hostId", hostId).append("deviceName", deviceName).append("parentDeviceName", parentDeviceName).append("capability", capability).append("iommuGroup", iommuGroup).append("productName", productName).append("productId", productId).append("vendorName", vendorName).append("vendorId", vendorId).append("parentPhysicalFunction", parentPhysicalFunction).append("totalVirtualFunctions", totalVirtualFunctions).append("networkInterfaceName", networkInterfaceName).append("driver", driver).append("assignable", assignable).append("vmId", vmId).build(); }
protected void map(java.sql.ResultSet rs, org.ovirt.engine.core.common.businessentities.HostDevice device) throws java.sql.SQLException { device.setHostId(org.ovirt.engine.core.dao.HostDeviceDaoImpl.BaseHostDeviceRowMapper.getGuid(rs, "host_id")); device.setDeviceName(rs.getString("device_name")); device.setParentDeviceName(rs.getString("parent_device_name")); device.setCapability(rs.getString("capability")); device.setIommuGroup(((java.lang.Integer) (rs.getObject("iommu_group")))); device.setProductName(rs.getString("product_name")); device.setProductId(rs.getString("product_id")); device.setVendorName(rs.getString("vendor_name")); device.setVendorId(rs.getString("vendor_id")); device.setParentPhysicalFunction(rs.getString("physfn")); device.setTotalVirtualFunctions(((java.lang.Integer) (rs.getObject("total_vfs")))); device.setNetworkInterfaceName(rs.getString("net_iface_name")); device.<START_MOD>setAssignable(rs.getBoolean("is_assignable")); device.<END_MOD>setVmId(org.ovirt.engine.core.dao.HostDeviceDaoImpl.BaseHostDeviceRowMapper.getGuid(rs, "vm_id")); }	protected void map(java.sql.ResultSet rs, org.ovirt.engine.core.common.businessentities.HostDevice device) throws java.sql.SQLException { device.setHostId(org.ovirt.engine.core.dao.HostDeviceDaoImpl.BaseHostDeviceRowMapper.getGuid(rs, "host_id")); device.setDeviceName(rs.getString("device_name")); device.setParentDeviceName(rs.getString("parent_device_name")); device.setCapability(rs.getString("capability")); device.setIommuGroup(((java.lang.Integer) (rs.getObject("iommu_group")))); device.setProductName(rs.getString("product_name")); device.setProductId(rs.getString("product_id")); device.setVendorName(rs.getString("vendor_name")); device.setVendorId(rs.getString("vendor_id")); device.setParentPhysicalFunction(rs.getString("physfn")); device.setTotalVirtualFunctions(((java.lang.Integer) (rs.getObject("total_vfs")))); device.setNetworkInterfaceName(rs.getString("net_iface_name")); device.setAssignable(rs.getBoolean("is_assignable")); device.setVmId(org.ovirt.engine.core.dao.HostDeviceDaoImpl.BaseHostDeviceRowMapper.getGuid(rs, "vm_id")); device.setDriver(rs.getString("driver")); }
public int getConnectionId() { return this.getConnectionId(); }	public int getConnectionId() { return this.client.getConnectionId(); }
private void createVMFromTemplate() { org.ovirt.engine.core.common.businessentities.VmTemplate template = getSelectedItem();<START_MOD> final<END_MOD> java.util.List<org.ovirt.engine.ui.uicommonweb.UICommand> commands = new java.util.ArrayList<>(); commands.add(org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSaveVm", this)); commands.add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this)); <START_MOD>org.ovirt.engine.ui.frontend.AsyncQuery getVmInitQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); getVmInitQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.core.common.businessentities.VmTemplate withVmInit = ((org.ovirt.engine.core.common.businessentities.VmTemplate) (result)); <END_MOD>setupNewVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.NewVmFromTemplateModelBehavior(<START_MOD>withVmInit), org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel.this), withVmInit.getVmType(), getSystemTreeSelectedItem(), commands); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getTemplateById(getVmInitQuery, <END_MOD>template<START_MOD>.getId()<END_MOD>); }	private void createVMFromTemplate() { org.ovirt.engine.core.common.businessentities.VmTemplate template = getSelectedItem(); final java.util.List<org.ovirt.engine.ui.uicommonweb.UICommand> commands = new java.util.ArrayList<>(); commands.add(org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSaveVm", this)); commands.add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this)); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getTemplateById(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.VmTemplate withVmInit = ((org.ovirt.engine.core.common.businessentities.VmTemplate) (returnValue)); setupNewVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.NewVmFromTemplateModelBehavior(withVmInit), org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel.this), withVmInit.getVmType(), getSystemTreeSelectedItem(), commands); } }), template.getId()); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.core.common.businessentities.VmTemplate withVmInit = ((org.ovirt.engine.core.common.businessentities.VmTemplate) (result)); setupNewVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.NewVmFromTemplateModelBehavior(withVmInit), this), withVmInit.getVmType(), getSystemTreeSelectedItem(), commands); }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.VmTemplate withVmInit = ((org.ovirt.engine.core.common.businessentities.VmTemplate) (returnValue)); setupNewVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.NewVmFromTemplateModelBehavior(withVmInit), this), withVmInit.getVmType(), getSystemTreeSelectedItem(), commands); }
@java.lang.Override public void executeCommand() { <START_MOD>boolean isMergeSucceeded = false; try { <END_MOD>org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.Merge, createVDSParameters()); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.compat.Guid jobId = ((org.ovirt.engine.core.compat.Guid) (vdsReturnValue.getReturnValue())); persistBlockJobPlaceholder(jobId); org.ovirt.engine.core.bll.MergeCommand.getParameters().setVmJobId(jobId); <START_MOD>persistCommand(org.ovirt.engine.core.bll.MergeCommand.getParameters().getParentCommand(), true); org.ovirt.engine.core.bll.MergeCommand.log.debug( started successfully isMergeSucceeded = true; } else { org.ovirt.engine.core.bll.MergeCommand.log.error( to start Merge on VDS } } catch (org.ovirt.engine.core.common.errors.EngineException e) { org.ovirt.engine.core.bll.MergeCommand.log.error( exception thrown while sending merge command e); if (((e.getErrorCode()) == (org.ovirt.engine.core.common.errors.EngineError.imageErr)) || ((e.getErrorCode()) == (org.ovirt.engine.core.common.errors.EngineError.mergeErr))) { isMergeSucceeded = true; } } finally { if (isMergeSucceeded) { <END_MOD>org.ovirt.engine.core.bll.MergeCommand.setSucceeded(true); } else { setCommandStatus(CommandStatus.FAILED); } }<START_MOD> }<END_MOD>	@java.lang.Override public void executeCommand() { boolean mergeRunning = false; try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.Merge, createVDSParameters()); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.compat.Guid jobId = ((org.ovirt.engine.core.compat.Guid) (vdsReturnValue.getReturnValue())); persistBlockJobPlaceholder(jobId); org.ovirt.engine.core.bll.MergeCommand.getParameters().setVmJobId(jobId); persistCommand(org.ovirt.engine.core.bll.MergeCommand.getParameters().getParentCommand(), true); org.ovirt.engine.core.bll.MergeCommand.log.debug("Merge started successfully"); mergeRunning = true; } else { org.ovirt.engine.core.bll.MergeCommand.log.error("Failed to start Merge on VDS"); } } catch (org.ovirt.engine.core.common.errors.EngineException e) { org.ovirt.engine.core.bll.MergeCommand.log.error("Engine exception thrown while sending merge command", e); if (((e.getErrorCode()) == (org.ovirt.engine.core.common.errors.EngineError.imageErr)) || ((e.getErrorCode()) == (org.ovirt.engine.core.common.errors.EngineError.mergeErr))) { mergeRunning = true; } } finally { if (mergeRunning) { org.ovirt.engine.core.bll.MergeCommand.setSucceeded(true); } else { setCommandStatus(CommandStatus.FAILED); } } }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.NAME)); usage.setUsed(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.USED)) / 1024)); usage.setTotal(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.TOTAL)) / 1024)); usage.setPreviousUsed((((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.PREVIOUS_USED)) / (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.PREVIOUS_TOTAL))) * 100)); result.add(usage); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.NAME)); usage.setUsed(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.USED)) / 1024)); usage.setTotal(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.TOTAL)) / 1024)); usage.setPreviousUsed((((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.PREVIOUS_USED)) / (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.PREVIOUS_TOTAL))) * 100)); result.add(usage); }
public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> getStorageDomainUtilization() throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException<END_MOD> {<START_MOD> final<END_MOD> java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> result = new java.util.ArrayList<>(); <START_MOD>runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.STORAGE_DOMAIN_UTILIZATION, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult<END_MOD>(java.sql.<START_MOD>ResultSet rs) throws java.sql.SQLException { while (rs.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage<END_MOD> = <START_MOD>new<END_MOD> org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(<START_MOD>rs<END_MOD>.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.NAME)); usage.setUsed(<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.USED)); usage.setTotal(((<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.USED)) + (<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.AVAILABLE)))); usage.setPreviousUsed(<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.PREVIOUS_USED)); result.add(usage); } } <START_MOD>}); <END_MOD>return result; }	public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> getStorageDomainUtilization() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> result = new java.util.ArrayList<>(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.STORAGE_DOMAIN_UTILIZATION, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.NAME)); usage.setUsed(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.USED)); usage.setTotal(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.USED)) + (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.AVAILABLE)))); usage.setPreviousUsed(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.PREVIOUS_USED)); result.add(usage); } }); return result; }
public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage> getHourlyStorageHistory() throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException<END_MOD> {<START_MOD> final<END_MOD> java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage> history = new java.util.ArrayList<>(); <START_MOD>runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.HOURLY_STORAGE_HISTORY, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult<END_MOD>(java.sql.<START_MOD>ResultSet rs) throws java.sql.SQLException { while (rs.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage usage<END_MOD> = <START_MOD>new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage(); usage.setEpoch(rs.getTimestamp<END_MOD>(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.<START_MOD>DATE).getTime());<END_MOD> usage<START_MOD>.setStorageValue(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.USED)); history.add(<END_MOD>usage<START_MOD>); } } }); return<END_MOD> history; }	public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage> getHourlyStorageHistory() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage> history = new java.util.ArrayList<>(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.HOURLY_STORAGE_HISTORY, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage(); usage.setEpoch(rs.getTimestamp(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.DATE).getTime()); usage.setStorageValue(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.USED)); history.add(usage); } }); return history; }
public static void populateCpuUtilizationHosts(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> resourceUsage = dao.getCpuUtilizationHosts(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : resourceUsage) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed((((usage.getUsed()) * (usage.getTotal())) / 100)); entity.setTotal(usage.getTotal()); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addResource(entity); } }	public static void populateCpuUtilizationHosts(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> resourceUsage = dao.getCpuUtilizationHosts(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : resourceUsage) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed((((usage.getUsed()) * (usage.getTotal())) / 100)); entity.setTotal(usage.getTotal()); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addResource(entity); } }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { result[0] = rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.TOTAL); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { result[0] = rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.TOTAL); }
public java.util.Map<org.ovirt.engine.core.common.AuditLogSeverity, java.lang.Integer> getEventStatusCount() throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final<END_MOD> java.util.Map<org.ovirt.engine.core.common.AuditLogSeverity, java.lang.Integer> result = new java.util.HashMap<>(); <START_MOD>runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDAO.AUDIT_LOG_COUNT, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult<END_MOD>(java.sql.<START_MOD>ResultSet rs) throws <END_MOD>java.sql.<START_MOD>SQLException { while (rs.next()) { result.put(org.ovirt.engine.core.common.AuditLogSeverity.forValue(rs.getInt<END_MOD>(org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDAO.<START_MOD>SEVERITY)), rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDAO.COUNT)); } } }); return<END_MOD> result<START_MOD>; }<END_MOD>	public java.util.Map<org.ovirt.engine.core.common.AuditLogSeverity, java.lang.Integer> getEventStatusCount() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final java.util.Map<org.ovirt.engine.core.common.AuditLogSeverity, java.lang.Integer> result = new java.util.HashMap<>(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDao.AUDIT_LOG_COUNT, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { result.put(org.ovirt.engine.core.common.AuditLogSeverity.forValue(rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDao.SEVERITY)), rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDao.COUNT)); } }); return result; }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage(); usage.setEpoch(rs.getTimestamp(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.DATE).getTime()); usage.setStorageValue(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.USED)); history.add(usage); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage(); usage.setEpoch(rs.getTimestamp(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.DATE).getTime()); usage.setStorageValue(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.USED)); history.add(usage); }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.NAME)); usage.setUsed(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.USED)); usage.setTotal(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.USED)) + (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.AVAILABLE)))); usage.setPreviousUsed(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.PREVIOUS_USED)); result.add(usage); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.NAME)); usage.setUsed(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.USED)); usage.setTotal(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.USED)) + (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.AVAILABLE)))); usage.setPreviousUsed(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.PREVIOUS_USED)); result.add(usage); }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { result.put(org.ovirt.engine.core.common.AuditLogSeverity.forValue(rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDAO.SEVERITY)), rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDAO.COUNT)); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { result.put(org.ovirt.engine.core.common.AuditLogSeverity.forValue(rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDao.SEVERITY)), rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDao.COUNT)); }
public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.StorageDomainAverage> getStorageAverage() throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final<END_MOD> java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.StorageDomainAverage> result = new java.util.ArrayList<>(); <START_MOD>runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.STORAGE_LAST24_AVERAGE, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult<END_MOD>(java.sql.<START_MOD>ResultSet rs) throws <END_MOD>java.sql.<START_MOD>SQLException { while (rs.next()) { result.add(new org.ovirt.engine.ui.frontend.server.dashboard.models.StorageDomainAverage(rs.getString<END_MOD>(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.<START_MOD>NAME), rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.AVERAGE))); } } }); return<END_MOD> result<START_MOD>; }<END_MOD>	public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.StorageDomainAverage> getStorageAverage() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.StorageDomainAverage> result = new java.util.ArrayList<>(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.STORAGE_LAST24_AVERAGE, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { result.add(new org.ovirt.engine.ui.frontend.server.dashboard.models.StorageDomainAverage(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.NAME), rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.AVERAGE))); } }); return result; }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { result[0] = rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.USED); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { result[0] = rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.USED); }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { result.add(new org.ovirt.engine.ui.frontend.server.dashboard.models.StorageDomainAverage(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.NAME), rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.AVERAGE))); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { result.add(new org.ovirt.engine.ui.frontend.server.dashboard.models.StorageDomainAverage(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.NAME), rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.AVERAGE))); }
public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getDcInventoryStatus(javax.sql.DataSource engineDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.DataCenterDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.DataCenterDAO(engineDataSource); return dao.getDcInventoryStatus(); }	public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getDcInventoryStatus(javax.sql.DataSource engineDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.DataCenterDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.DataCenterDao(engineDataSource); return dao.getDcInventoryStatus(); }
public java.lang.Double getTotalStorageCount() throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final java.lang.Double[] result = new java.lang.Double[]{ 0.0 }; runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.TOTAL_STORAGE_COUNT, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(<END_MOD>java.sql.<START_MOD>ResultSet rs) throws java.sql.<END_MOD>SQLException { <START_MOD>while (rs.next()) {<END_MOD> result<START_MOD>[0]<END_MOD> = <START_MOD>rs.getDouble<END_MOD>(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.<START_MOD>TOTAL); } } }); return<END_MOD> result<START_MOD>[0]; }<END_MOD>	public java.lang.Double getTotalStorageCount() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final java.lang.Double[] result = new java.lang.Double[]{ 0.0 }; runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.TOTAL_STORAGE_COUNT, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { result[0] = rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.TOTAL); } }); return result[0]; }
public static void getCpuAndMemory(org.ovirt.engine.ui.frontend.server.dashboard.HeatMapData utilization, javax.sql.DataSource dataSource) throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO(dataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage> averages = dao.getClusterCpuAndMemoryAverage(); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HeatMapBlock> cpu = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HeatMapBlock> memory = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage data : averages) { cpu.add(new org.ovirt.engine.ui.frontend.server.dashboard.HeatMapBlock(data.getName()<END_MOD>, <START_MOD>data.getCpuAverage())); memory.add(new <END_MOD>org.ovirt.engine.ui.frontend.server.dashboard.HeatMapBlock<START_MOD>(data.getName(), data.getMemoryAverage())); } utilization.setCpu(<END_MOD>cpu<START_MOD>); utilization.setMemory(<END_MOD>memory); }	public static void getCpuAndMemory(org.ovirt.engine.ui.frontend.server.dashboard.HeatMapData utilization, javax.sql.DataSource dataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDao(dataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage> averages = dao.getClusterCpuAndMemoryAverage(); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HeatMapBlock> cpu = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HeatMapBlock> memory = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage data : averages) { cpu.add(new org.ovirt.engine.ui.frontend.server.dashboard.HeatMapBlock(data.getName(), data.getCpuAverage())); memory.add(new org.ovirt.engine.ui.frontend.server.dashboard.HeatMapBlock(data.getName(), data.getMemoryAverage())); } utilization.setCpu(cpu); utilization.setMemory(memory); }
protected void runQuery(java.lang.String key, org.ovirt.engine.ui.frontend.server.dashboard.dao.BaseDAO.QueryResultCallback callback) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { if (!(sqlQueries.containsKey(key))) { throw new org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException(("SQL query not found: " + key)); } try (java.sql.Connection con = dataSource.getConnection();java.sql.PreparedStatement ps = con.prepareStatement(sqlQueries.getProperty(key));java.sql.ResultSet rs = ps.executeQuery()) { callback.onResult(rs); } catch (java.sql.SQLException e) { throw new org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException("Error while running SQL query", e); } }	protected void runQuery(java.lang.String key, org.ovirt.engine.ui.frontend.server.dashboard.dao.BaseDao.QueryResultCallback callback) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { if (!(sqlQueries.containsKey(key))) { throw new org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException(("SQL query not found: " + key)); } try (java.sql.Connection con = dataSource.getConnection();java.sql.PreparedStatement ps = con.prepareStatement(sqlQueries.getProperty(key));java.sql.ResultSet rs = ps.executeQuery()) { while (rs.next()) { callback.onResult(rs); } } catch (java.sql.SQLException e) { throw new org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException("Error while running SQL query", e); } }
public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getEventStatus(javax.sql.DataSource dataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDAO(dataSource); java.util.Map<org.ovirt.engine.core.common.AuditLogSeverity, java.lang.Integer> data = dao.getEventStatusCount(); for (java.util.Map.Entry<org.ovirt.engine.core.common.AuditLogSeverity, java.lang.Integer> entry : data.entrySet()) { switch (entry.getKey()) { case ALERT : result.setStatusCount(AuditLogSeverity.ALERT.name().toLowerCase(), entry.getValue()); result.setTotalCount(((result.getTotalCount()) + (entry.getValue()))); break; case ERROR : result.setStatusCount(AuditLogSeverity.ERROR.name().toLowerCase(), entry.getValue()); result.setTotalCount(((result.getTotalCount()) + (entry.getValue()))); break; case NORMAL : break; case WARNING : result.setStatusCount(AuditLogSeverity.WARNING.name().toLowerCase(), entry.getValue()); result.setTotalCount(((result.getTotalCount()) + (entry.getValue()))); break; default : break; } } return result; }	public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getEventStatus(javax.sql.DataSource dataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDao(dataSource); java.util.Map<org.ovirt.engine.core.common.AuditLogSeverity, java.lang.Integer> data = dao.getEventStatusCount(); for (java.util.Map.Entry<org.ovirt.engine.core.common.AuditLogSeverity, java.lang.Integer> entry : data.entrySet()) { switch (entry.getKey()) { case ALERT : result.setStatusCount(AuditLogSeverity.ALERT.name().toLowerCase(), entry.getValue()); result.setTotalCount(((result.getTotalCount()) + (entry.getValue()))); break; case ERROR : result.setStatusCount(AuditLogSeverity.ERROR.name().toLowerCase(), entry.getValue()); result.setTotalCount(((result.getTotalCount()) + (entry.getValue()))); break; case NORMAL : break; case WARNING : result.setStatusCount(AuditLogSeverity.WARNING.name().toLowerCase(), entry.getValue()); result.setTotalCount(((result.getTotalCount()) + (entry.getValue()))); break; default : break; } } return result; }
public org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getHostInventoryStatus() throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostEngineDAO.HOST_INVENTORY, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @<END_MOD>java.<START_MOD>lang.Override public void onResult(java.<END_MOD>sql.<START_MOD>ResultSet rs) throws java.sql.<END_MOD>SQLException { while (rs.next()) { processHostStatus(result, rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostEngineDAO.STATUS)); } } <START_MOD>}); <END_MOD>return result; }	public org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getHostInventoryStatus() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostEngineDao.HOST_INVENTORY, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { processHostStatus(result, rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostEngineDao.STATUS)); } }); return result; }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { processHostStatus(result, rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostEngineDAO.STATUS)); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { processHostStatus(result, rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostEngineDao.STATUS)); }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { result.add(new org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.NAME), rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.CPU_AVERAGE), rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.MEM_AVERAGE))); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { result.add(new org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDao.NAME), rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDao.CPU_AVERAGE), rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDao.MEM_AVERAGE))); }
public double getLast5MinutesStorageAverage() throws <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.ui.frontend.server.dashboard.DashboardDataException<END_MOD> { <START_MOD>final <END_MOD>double<START_MOD>[]<END_MOD> result = <START_MOD>new double[]{   }<END_MOD>; <START_MOD>runQuery<END_MOD>(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.LAST5_MIN_STORAGE_AVERAGE<START_MOD>, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback(<END_MOD>)<START_MOD> { @java.lang.Override public void onResult(<END_MOD>java.sql.ResultSet <START_MOD>rs)<END_MOD> <START_MOD>throws<END_MOD> <START_MOD>java<END_MOD>.<START_MOD>sql.SQLException<END_MOD> { while (<START_MOD>rs<END_MOD>.next()) { result<START_MOD>[0]<END_MOD> = <START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.USED); } } <START_MOD>}); <END_MOD>return result<START_MOD>[0]<END_MOD>; }	public double getLast5MinutesStorageAverage() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final double[] result = new double[]{ 0 }; runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.LAST5_MIN_STORAGE_AVERAGE, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { result[0] = rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.USED); } }); return result[0]; }
public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage> getClusterCpuAndMemoryAverage() throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException<END_MOD> {<START_MOD> final<END_MOD> java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage> result = new java.util.ArrayList<>(); <START_MOD>runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.CLUSTER_LAST_24_AVERAGE, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult<END_MOD>(java.sql.<START_MOD>ResultSet rs) throws java.sql.SQLException { while (rs.next()) { result.add(new org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.NAME), rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.CPU_AVERAGE), rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.MEM_AVERAGE))<END_MOD>);<START_MOD> } } }<END_MOD>); return result; }	public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage> getClusterCpuAndMemoryAverage() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage> result = new java.util.ArrayList<>(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDao.CLUSTER_LAST_24_AVERAGE, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { result.add(new org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDao.NAME), rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDao.CPU_AVERAGE), rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDao.MEM_AVERAGE))); } }); return result; }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { processVmStatus(result, rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmEngineDAO.STATUS)); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { processVmStatus(result, rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmEngineDao.STATUS)); }
public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getHostInventoryStatus(javax.sql.DataSource engineDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.HostEngineDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostEngineDAO(engineDataSource); return dao.getHostInventoryStatus(); }	public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getHostInventoryStatus(javax.sql.DataSource engineDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.HostEngineDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostEngineDao(engineDataSource); return dao.getHostInventoryStatus(); }
public static void populateStorageUtilizationVms(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> usageList = dao.getStorageUtilizationVms(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : usageList) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed(((usage.getUsed()) / 1024)); entity.setTotal(((usage.getTotal()) / 1024)); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend((((usage.getUsed()) / (usage.getTotal())) * 100), usage.getPreviousUsed())); utilization.addVm(entity); } }	public static void populateStorageUtilizationVms(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> usageList = dao.getStorageUtilizationVms(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : usageList) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed(((usage.getUsed()) / 1024)); entity.setTotal(((usage.getTotal()) / 1024)); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend((((usage.getUsed()) / (usage.getTotal())) * 100), usage.getPreviousUsed())); utilization.addVm(entity); } }
public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getStorageInventoryStatus(javax.sql.DataSource engineDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainEngineDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainEngineDAO(engineDataSource); return dao.getStorageInventoryStatus(); }	public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getStorageInventoryStatus(javax.sql.DataSource engineDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainEngineDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainEngineDao(engineDataSource); return dao.getStorageInventoryStatus(); }
public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getVmInventorySummary(javax.sql.DataSource engineDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.VmEngineDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.VmEngineDAO(engineDataSource); return dao.getVmInventoryStatus(); }	public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getVmInventorySummary(javax.sql.DataSource engineDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.VmEngineDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.VmEngineDao(engineDataSource); return dao.getVmInventoryStatus(); }
public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getClusterInventoryStatus(javax.sql.DataSource engineDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterEngineDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterEngineDAO(engineDataSource); return dao.getClusterInventorySummary(); }	public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getClusterInventoryStatus(javax.sql.DataSource engineDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterEngineDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterEngineDao(engineDataSource); return dao.getClusterInventorySummary(); }
public org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getVmInventoryStatus() throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmEngineDAO.VM_INVENTORY, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @<END_MOD>java.<START_MOD>lang.Override public void onResult(java.<END_MOD>sql.<START_MOD>ResultSet rs) throws java.sql.<END_MOD>SQLException { while (<START_MOD>rs<END_MOD>.next()) { processVmStatus(result, <START_MOD>rs<END_MOD>.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmEngineDAO.STATUS)); } } <START_MOD>}); <END_MOD>return result; }	public org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getVmInventoryStatus() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmEngineDao.VM_INVENTORY, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { processVmStatus(result, rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmEngineDao.STATUS)); } }); return result; }
public static void populateMemoryUtilizationHosts(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> usageList = dao.getMemoryUtilizationHosts(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : usageList) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed(((usage.getUsed()) / 1024)); entity.setTotal(((usage.getTotal()) / 1024)); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addResource(entity); } }	public static void populateMemoryUtilizationHosts(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> usageList = dao.getMemoryUtilizationHosts(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : usageList) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed(((usage.getUsed()) / 1024)); entity.setTotal(((usage.getTotal()) / 1024)); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addResource(entity); } }
private static void getTotalCpuMemCount(org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary cpuSummary, org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary memSummary, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO(dwhDataSource); org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal total = dao.getTotalCpuMemCount(); cpuSummary.setPhysicalTotal(total.getCpuTotal()); memSummary.setPhysicalTotal(((total.getMemTotal()) / 1024)); }	private static void getTotalCpuMemCount(org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary cpuSummary, org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary memSummary, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao(dwhDataSource); org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal total = dao.getTotalCpuMemCount(); cpuSummary.setPhysicalTotal(total.getCpuTotal()); memSummary.setPhysicalTotal(((total.getMemTotal()) / 1024)); }
public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> getStorageUtilizationVms() throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException<END_MOD> {<START_MOD> final<END_MOD> java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> result = new java.util.ArrayList<>(); <START_MOD>runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.VM_STORAGE_UTILIZATION, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult<END_MOD>(java.sql.<START_MOD>ResultSet rs) throws java.sql.SQLException { while (rs.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage<END_MOD> = <START_MOD>new<END_MOD> org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(<START_MOD>rs<END_MOD>.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.NAME)); usage.setUsed(((<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.USED)) / 1024)); usage.setTotal(((<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.TOTAL)) / 1024)); usage.setPreviousUsed((((<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.PREVIOUS_USED)) / (<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO.PREVIOUS_TOTAL))) * 100)); result.add(usage); } } <START_MOD>}); <END_MOD>return result; }	public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> getStorageUtilizationVms() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> result = new java.util.ArrayList<>(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.VM_STORAGE_UTILIZATION, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.NAME)); usage.setUsed(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.USED)) / 1024)); usage.setTotal(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.TOTAL)) / 1024)); usage.setPreviousUsed((((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.PREVIOUS_USED)) / (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao.PREVIOUS_TOTAL))) * 100)); result.add(usage); } }); return result; }
private static void getVirtualStorageCount(org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary storageSummary, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO(dwhDataSource); org.ovirt.engine.ui.frontend.server.dashboard.models.VmStorage storageCount = dao.getVirtualStorageCount(); storageSummary.setVirtualUsed(storageCount.getUsed()); storageSummary.setVirtualTotal(storageCount.getTotal()); }	private static void getVirtualStorageCount(org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary storageSummary, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao(dwhDataSource); org.ovirt.engine.ui.frontend.server.dashboard.models.VmStorage storageCount = dao.getVirtualStorageCount(); storageSummary.setVirtualUsed(storageCount.getUsed()); storageSummary.setVirtualTotal(storageCount.getTotal()); }
private static java.lang.Double getTotalStorageCount(javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO(dwhDataSource); return (dao.getTotalStorageCount()) / 1024; }	private static java.lang.Double getTotalStorageCount(javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao(dwhDataSource); return (dao.getTotalStorageCount()) / 1024; }
private static java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HistoryNode> getHourlyStorageHistory(<START_MOD>javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HistoryNode> history = new java.util.ArrayList<>(); org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage> usageList = dao.getHourlyStorageHistory(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage usage : usageList) { history.add(new org.ovirt.engine.ui.frontend.server.dashboard.HistoryNode(usage.getEpoch()<END_MOD>, <START_MOD>((usage.getStorageValue()) / 1024))); } return<END_MOD> history; }	private static java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HistoryNode> getHourlyStorageHistory(javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HistoryNode> history = new java.util.ArrayList<>(); org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage> usageList = dao.getHourlyStorageHistory(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage usage : usageList) { history.add(new org.ovirt.engine.ui.frontend.server.dashboard.HistoryNode(usage.getEpoch(), ((usage.getStorageValue()) / 1024))); } return history; }
private static void getHourlyCpuMemUsage(org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary cpuSummary, org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary memSummary, javax.sql.DataSource dataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HistoryNode> cpuHistory = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HistoryNode> memHistory = new java.util.ArrayList<>(); org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO(dataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage> history = dao.getHourlyCpuMemUsage(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage item : history) { cpuHistory.add(new org.ovirt.engine.ui.frontend.server.dashboard.HistoryNode(item.getEpoch(), item.getCpuValue())); memHistory.add(new org.ovirt.engine.ui.frontend.server.dashboard.HistoryNode(item.getEpoch(), (((item.getMemValue()) * (memSummary.getTotal())) / 100))); } org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage last5minUsage = dao.getLast5MinCpuMemUsage(); cpuSummary.setUsed(last5minUsage.getCpuValue()); memSummary.setUsed((((last5minUsage.getMemValue()) * (memSummary.getTotal())) / 100)); cpuSummary.setHistory(cpuHistory); memSummary.setHistory(memHistory); }	private static void getHourlyCpuMemUsage(org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary cpuSummary, org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary memSummary, javax.sql.DataSource dataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HistoryNode> cpuHistory = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HistoryNode> memHistory = new java.util.ArrayList<>(); org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao(dataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage> history = dao.getHourlyCpuMemUsage(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage item : history) { cpuHistory.add(new org.ovirt.engine.ui.frontend.server.dashboard.HistoryNode(item.getEpoch(), item.getCpuValue())); memHistory.add(new org.ovirt.engine.ui.frontend.server.dashboard.HistoryNode(item.getEpoch(), (((item.getMemValue()) * (memSummary.getTotal())) / 100))); } org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage last5minUsage = dao.getLast5MinCpuMemUsage(); cpuSummary.setUsed(last5minUsage.getCpuValue()); memSummary.setUsed((((last5minUsage.getMemValue()) * (memSummary.getTotal())) / 100)); cpuSummary.setHistory(cpuHistory); memSummary.setHistory(memHistory); }
public org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal getVirtualCpuMemCount() throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal result = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.VIRTUAL_CPU_MEMORY_COUNT, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @<END_MOD>java.<START_MOD>lang.Override public void onResult(java.<END_MOD>sql.<START_MOD>ResultSet rs) throws java.sql.<END_MOD>SQLException { <START_MOD>while (rs.next<END_MOD>()) { result.setCpuTotal(<START_MOD>rs<END_MOD>.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.CPU_TOTAL_VMS)); result.setCpuUsed(<START_MOD>rs<END_MOD>.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.CPU_USED_VMS)); result.setMemTotal(((<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.MEM_TOTAL_VMS)) / 1024)); result.setMemUsed(((<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.MEM_USED_VMS)) / 1024)); } } <START_MOD>}); <END_MOD>return result; }	public org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal getVirtualCpuMemCount() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal result = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.VIRTUAL_CPU_MEMORY_COUNT, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { result.setCpuTotal(rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.CPU_TOTAL_VMS)); result.setCpuUsed(rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.CPU_USED_VMS)); result.setMemTotal(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.MEM_TOTAL_VMS)) / 1024)); result.setMemUsed(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.MEM_USED_VMS)) / 1024)); } }); return result; }
public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> getMemoryUtilizationVms() throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException<END_MOD> {<START_MOD> final<END_MOD> java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> result = new java.util.ArrayList<>(); <START_MOD>runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.MEM_VM_UTILIZATION, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult<END_MOD>(java.sql.<START_MOD>ResultSet rs) throws java.sql.SQLException { while (rs.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage<END_MOD> = <START_MOD>new<END_MOD> org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(<START_MOD>rs<END_MOD>.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.NAME)); usage.setUsed((((<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.MEMORY_USAGE_PERCENT)) * (<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.MEMORY_SIZE))) / 100)); usage.setTotal(<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.MEMORY_SIZE)); usage.setPreviousUsed((((<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.PREVIOUS_MEMORY_PERCENT)) * (<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.MEMORY_SIZE))) / 100)); result.add(usage); } } <START_MOD>}); <END_MOD>return result; }	public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> getMemoryUtilizationVms() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> result = new java.util.ArrayList<>(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.MEM_VM_UTILIZATION, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.NAME)); usage.setUsed((((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.MEMORY_USAGE_PERCENT)) * (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.MEMORY_SIZE))) / 100)); usage.setTotal(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.MEMORY_SIZE)); usage.setPreviousUsed((((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.PREVIOUS_MEMORY_PERCENT)) * (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.MEMORY_SIZE))) / 100)); result.add(usage); } }); return result; }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.NAME)); usage.setUsed((((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.MEMORY_USAGE_PERCENT)) * (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.MEMORY_SIZE))) / 100)); usage.setTotal(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.MEMORY_SIZE)); usage.setPreviousUsed((((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.PREVIOUS_MEMORY_PERCENT)) * (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.MEMORY_SIZE))) / 100)); result.add(usage); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.NAME)); usage.setUsed((((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.MEMORY_USAGE_PERCENT)) * (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.MEMORY_SIZE))) / 100)); usage.setTotal(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.MEMORY_SIZE)); usage.setPreviousUsed((((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.PREVIOUS_MEMORY_PERCENT)) * (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.MEMORY_SIZE))) / 100)); result.add(usage); }
private static void getVirtualCpuMemCount(org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary cpuSummary, org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary memSummary, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO(dwhDataSource); org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal resourcesTotal = dao.getVirtualCpuMemCount(); cpuSummary.setVirtualTotal(resourcesTotal.getCpuTotal()); cpuSummary.setVirtualUsed(resourcesTotal.getCpuUsed()); memSummary.setVirtualTotal(resourcesTotal.getMemTotal()); memSummary.setVirtualUsed(resourcesTotal.getMemUsed()); }	private static void getVirtualCpuMemCount(org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary cpuSummary, org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary memSummary, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao(dwhDataSource); org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal resourcesTotal = dao.getVirtualCpuMemCount(); cpuSummary.setVirtualTotal(resourcesTotal.getCpuTotal()); cpuSummary.setVirtualUsed(resourcesTotal.getCpuUsed()); memSummary.setVirtualTotal(resourcesTotal.getMemTotal()); memSummary.setVirtualUsed(resourcesTotal.getMemUsed()); }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.NAME)); usage.setUsed(((((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.CPU_USAGE_PERCENT)) * (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.NUMBER_OF_SOCKETS))) * (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.VM_CPU_PER_SOCKET))) / 100)); usage.setTotal(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.VM_CPU_PER_SOCKET)) * (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.NUMBER_OF_SOCKETS)))); usage.setPreviousUsed(((((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.PREVIOUS_CPU_PERCENT)) * (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.NUMBER_OF_SOCKETS))) * (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.VM_CPU_PER_SOCKET))) / 100)); result.add(usage); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.NAME)); usage.setUsed(((((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.CPU_USAGE_PERCENT)) * (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.NUMBER_OF_SOCKETS))) * (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.VM_CPU_PER_SOCKET))) / 100)); usage.setTotal(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.VM_CPU_PER_SOCKET)) * (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.NUMBER_OF_SOCKETS)))); usage.setPreviousUsed(((((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.PREVIOUS_CPU_PERCENT)) * (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.NUMBER_OF_SOCKETS))) * (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.VM_CPU_PER_SOCKET))) / 100)); result.add(usage); }
public org.ovirt.engine.ui.frontend.server.dashboard.models.VmStorage getVirtualStorageCount() throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.models.VmStorage result = new org.ovirt.engine.ui.frontend.server.dashboard.models.VmStorage(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.VIRTUAL_STORAGE_COUNT, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @<END_MOD>java.<START_MOD>lang.Override public void onResult(java.<END_MOD>sql.<START_MOD>ResultSet rs) throws java.sql.<END_MOD>SQLException { <START_MOD>while (rs.next()) { result.setTotal(((rs.getDouble<END_MOD>(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.<START_MOD>TOTAL_VMS)) / 1024)); result.setUsed(((rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.<START_MOD>USED_VMS<END_MOD>)) / 1024)); <START_MOD>} } });<END_MOD> return result; }	public org.ovirt.engine.ui.frontend.server.dashboard.models.VmStorage getVirtualStorageCount() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.models.VmStorage result = new org.ovirt.engine.ui.frontend.server.dashboard.models.VmStorage(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.VIRTUAL_STORAGE_COUNT, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { result.setTotal(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.TOTAL_VMS)) / 1024)); result.setUsed(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.USED_VMS)) / 1024)); } }); return result; }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { result.setTotal(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.TOTAL_VMS)) / 1024)); result.setUsed(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.USED_VMS)) / 1024)); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { result.setTotal(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.TOTAL_VMS)) / 1024)); result.setUsed(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.USED_VMS)) / 1024)); }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { processStorageStatus(result, rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainEngineDAO.STATUS)); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { processStorageStatus(result, rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainEngineDao.STATUS)); }
public org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getStorageInventoryStatus() throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainEngineDAO.STORAGE_INVENTORY, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @<END_MOD>java.<START_MOD>lang.Override public void onResult(java.<END_MOD>sql.<START_MOD>ResultSet rs) throws java.sql.<END_MOD>SQLException { while (<START_MOD>rs<END_MOD>.next()) { processStorageStatus(result, <START_MOD>rs<END_MOD>.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainEngineDAO.STATUS)); } } <START_MOD>}); <END_MOD>return result; }	public org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getStorageInventoryStatus() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainEngineDao.STORAGE_INVENTORY, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { processStorageStatus(result, rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainEngineDao.STATUS)); } }); return result; }
public org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal getTotalCpuMemCount() throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal result = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.TOTAL_CPU_MEMORY_COUNT, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @<END_MOD>java.<START_MOD>lang.Override public void onResult(java.<END_MOD>sql.<START_MOD>ResultSet rs) throws java.sql.<END_MOD>SQLException { <START_MOD>while (rs.next()) { result.setCpuTotal(rs.getInt<END_MOD>(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.<START_MOD>CPU_TOTAL)); result.setMemTotal(rs.getDouble<END_MOD>(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEM_TOTAL)); } } <START_MOD>}); <END_MOD>return result; }	public org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal getTotalCpuMemCount() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal result = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.TOTAL_CPU_MEMORY_COUNT, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { result.setCpuTotal(rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.CPU_TOTAL)); result.setMemTotal(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.MEM_TOTAL)); } }); return result; }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.NAME)); usage.setUsed(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.CPU_USAGE_PERCENT)); usage.setTotal(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.CORES_HOST)); usage.setPreviousUsed(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.PREVIOUS_CPU_PERCENT)); result.add(usage); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.NAME)); usage.setUsed(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.CPU_USAGE_PERCENT)); usage.setTotal(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.CORES_HOST)); usage.setPreviousUsed(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.PREVIOUS_CPU_PERCENT)); result.add(usage); }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.NAME)); usage.setUsed((((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEMORY_USAGE_PERCENT)) * (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEMORY_SIZE))) / 100)); usage.setTotal(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEMORY_SIZE)); usage.setPreviousUsed((((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.PREVIOUS_MEMORY_PERCENT)) * (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEMORY_SIZE))) / 100)); result.add(usage); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.NAME)); usage.setUsed((((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.MEMORY_USAGE_PERCENT)) * (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.MEMORY_SIZE))) / 100)); usage.setTotal(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.MEMORY_SIZE)); usage.setPreviousUsed((((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.PREVIOUS_MEMORY_PERCENT)) * (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.MEMORY_SIZE))) / 100)); result.add(usage); }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { result.setCpuTotal(rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.CPU_TOTAL_VMS)); result.setCpuUsed(rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.CPU_USED_VMS)); result.setMemTotal(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.MEM_TOTAL_VMS)) / 1024)); result.setMemUsed(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO.MEM_USED_VMS)) / 1024)); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { result.setCpuTotal(rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.CPU_TOTAL_VMS)); result.setCpuUsed(rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.CPU_USED_VMS)); result.setMemTotal(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.MEM_TOTAL_VMS)) / 1024)); result.setMemUsed(((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao.MEM_USED_VMS)) / 1024)); }
public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage> getHourlyCpuMemUsage() throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException<END_MOD> {<START_MOD> final<END_MOD> java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage> result = new java.util.ArrayList<>(); <START_MOD>runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.HOURLY_CPU_MEM_HISTORY, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult<END_MOD>(java.sql.<START_MOD>ResultSet rs) throws java.sql.SQLException { while (rs.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage resourceUsage<END_MOD> = <START_MOD>new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage(); resourceUsage.setEpoch(rs.getTimestamp<END_MOD>(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.<START_MOD>DATE).getTime()); resourceUsage.setCpuValue(rs.getDouble<END_MOD>(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.<START_MOD>CPU_USAGE)); resourceUsage.setMemValue(rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEM_USAGE)); result.add(resourceUsage); } } <START_MOD>}); <END_MOD>return result; }	public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage> getHourlyCpuMemUsage() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage> result = new java.util.ArrayList<>(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.HOURLY_CPU_MEM_HISTORY, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage resourceUsage = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage(); resourceUsage.setEpoch(rs.getTimestamp(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.DATE).getTime()); resourceUsage.setCpuValue(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.CPU_USAGE)); resourceUsage.setMemValue(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.MEM_USAGE)); result.add(resourceUsage); } }); return result; }
private static double getLast5MinutesStorageAverage(javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO(dwhDataSource); return (dao.getLast5MinutesStorageAverage()) / 1024; }	private static double getLast5MinutesStorageAverage(javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao(dwhDataSource); return (dao.getLast5MinutesStorageAverage()) / 1024; }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { result.setCpuValue(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.CPU_USAGE)); result.setMemValue(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEM_USAGE)); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { result.setCpuValue(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.CPU_USAGE)); result.setMemValue(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.MEM_USAGE)); }
public static java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HeatMapBlock> getStorage(javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HeatMapBlock> nodes = new java.util.ArrayList<>(); org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO(dwhDataSource); for (org.ovirt.engine.ui.frontend.server.dashboard.models.StorageDomainAverage data : dao.getStorageAverage()) { nodes.add(new org.ovirt.engine.ui.frontend.server.dashboard.HeatMapBlock(data.getName(), data.getValue())); } return nodes; }	public static java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HeatMapBlock> getStorage(javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.HeatMapBlock> nodes = new java.util.ArrayList<>(); org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao(dwhDataSource); for (org.ovirt.engine.ui.frontend.server.dashboard.models.StorageDomainAverage data : dao.getStorageAverage()) { nodes.add(new org.ovirt.engine.ui.frontend.server.dashboard.HeatMapBlock(data.getName(), data.getValue())); } return nodes; }
public org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getDcInventoryStatus() throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.DataCenterDAO.DC_INVENTORY, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @<END_MOD>java.<START_MOD>lang.Override public void onResult(java.<END_MOD>sql.<START_MOD>ResultSet rs) throws java.sql.<END_MOD>SQLException { while (<START_MOD>rs<END_MOD>.next()) { processDcStatus(result, <START_MOD>rs<END_MOD>.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.DataCenterDAO.STATUS)); } } <START_MOD>}); <END_MOD>return result; }	public org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getDcInventoryStatus() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.DataCenterDao.DC_INVENTORY, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { processDcStatus(result, rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.DataCenterDao.STATUS)); } }); return result; }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { processDcStatus(result, rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.DataCenterDAO.STATUS)); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { processDcStatus(result, rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.DataCenterDao.STATUS)); }
public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> getMemoryUtilizationHosts() throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException<END_MOD> {<START_MOD> final<END_MOD> java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> result = new java.util.ArrayList<>(); <START_MOD>runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEM_HOST_UTILIZATION, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult<END_MOD>(java.sql.<START_MOD>ResultSet rs) throws java.sql.SQLException { while (rs.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage<END_MOD> = <START_MOD>new<END_MOD> org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(<START_MOD>rs<END_MOD>.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.NAME)); usage.setUsed((((<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEMORY_USAGE_PERCENT)) * (<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEMORY_SIZE))) / 100)); usage.setTotal(<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEMORY_SIZE)); usage.setPreviousUsed((((<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.PREVIOUS_MEMORY_PERCENT)) * (<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEMORY_SIZE))) / 100)); result.add(usage); } } <START_MOD>}); <END_MOD>return result; }	public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> getMemoryUtilizationHosts() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> result = new java.util.ArrayList<>(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.MEM_HOST_UTILIZATION, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.NAME)); usage.setUsed((((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.MEMORY_USAGE_PERCENT)) * (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.MEMORY_SIZE))) / 100)); usage.setTotal(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.MEMORY_SIZE)); usage.setPreviousUsed((((rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.PREVIOUS_MEMORY_PERCENT)) * (rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.MEMORY_SIZE))) / 100)); result.add(usage); } }); return result; }
public static void populateCpuUtilizationVms(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> usageList = dao.getCpuUtilizationVms(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : usageList) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed(usage.getUsed()); entity.setTotal(usage.getTotal()); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addVm(entity); } }	public static void populateCpuUtilizationVms(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> usageList = dao.getCpuUtilizationVms(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : usageList) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed(usage.getUsed()); entity.setTotal(usage.getTotal()); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addVm(entity); } }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { result.setCpuTotal(rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.CPU_TOTAL)); result.setMemTotal(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEM_TOTAL)); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { result.setCpuTotal(rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.CPU_TOTAL)); result.setMemTotal(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.MEM_TOTAL)); }
public org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage getLast5MinCpuMemUsage() throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage result = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.LAST5_MIN_CPU_MEM_AVERAGE, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @<END_MOD>java.<START_MOD>lang.Override public void onResult(java.<END_MOD>sql.<START_MOD>ResultSet rs) throws java.sql.<END_MOD>SQLException { <START_MOD>while (rs.next()) { result.setCpuValue(rs.getDouble<END_MOD>(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.<START_MOD>CPU_USAGE)); result.setMemValue(rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEM_USAGE)); } } <START_MOD>}); <END_MOD>return result; }	public org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage getLast5MinCpuMemUsage() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage result = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.LAST5_MIN_CPU_MEM_AVERAGE, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { result.setCpuValue(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.CPU_USAGE)); result.setMemValue(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.MEM_USAGE)); } }); return result; }
public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> getCpuUtilizationHosts() throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException<END_MOD> {<START_MOD> final<END_MOD> java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> result = new java.util.ArrayList<>(); <START_MOD>runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.CPU_HOST_UTILIZATION, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult<END_MOD>(java.sql.<START_MOD>ResultSet rs) throws java.sql.SQLException { while (rs.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage<END_MOD> = <START_MOD>new<END_MOD> org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(<START_MOD>rs<END_MOD>.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.NAME)); usage.setUsed(<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.CPU_USAGE_PERCENT)); usage.setTotal(<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.CORES_HOST)); usage.setPreviousUsed(<START_MOD>rs<END_MOD>.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.PREVIOUS_CPU_PERCENT)); result.add(usage); } } <START_MOD>}); <END_MOD>return result; }	public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> getCpuUtilizationHosts() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> result = new java.util.ArrayList<>(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.CPU_HOST_UTILIZATION, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage = new org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources(); usage.setName(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.NAME)); usage.setUsed(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.CPU_USAGE_PERCENT)); usage.setTotal(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.CORES_HOST)); usage.setPreviousUsed(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.PREVIOUS_CPU_PERCENT)); result.add(usage); } }); return result; }
public static void populateMemoryUtilizationVms(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> usageList = dao.getMemoryUtilizationVms(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : usageList) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed(((usage.getUsed()) / 1024)); entity.setTotal(((usage.getTotal()) / 1024)); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addVm(entity); } }	public static void populateMemoryUtilizationVms(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDao(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> usageList = dao.getMemoryUtilizationVms(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : usageList) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed(((usage.getUsed()) / 1024)); entity.setTotal(((usage.getTotal()) / 1024)); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addVm(entity); } }
public static void populateStorageUtilizationDomains(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> usageList = dao.getStorageDomainUtilization(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : usageList) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed(((usage.getUsed()) / 1024)); entity.setTotal(((usage.getTotal()) / 1024)); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addResource(entity); } }	public static void populateStorageUtilizationDomains(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDao(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> usageList = dao.getStorageDomainUtilization(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : usageList) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed(((usage.getUsed()) / 1024)); entity.setTotal(((usage.getTotal()) / 1024)); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addResource(entity); } }
public org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getClusterInventorySummary() throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterEngineDAO.CLUSTER_INVENTORY, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @<END_MOD>java.<START_MOD>lang.Override public void onResult(java.<END_MOD>sql.<START_MOD>ResultSet rs) throws java.sql.<END_MOD>SQLException { <START_MOD>while (rs.next()) {<END_MOD> result<START_MOD>.setTotalCount(rs.getInt<END_MOD>(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterEngineDAO.<START_MOD>COUNT)); } } }); return<END_MOD> result<START_MOD>; }<END_MOD>	public org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getClusterInventorySummary() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterEngineDao.CLUSTER_INVENTORY, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { result.setTotalCount(rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterEngineDao.COUNT)); } }); return result; }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage resourceUsage = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage(); resourceUsage.setEpoch(rs.getTimestamp(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.DATE).getTime()); resourceUsage.setCpuValue(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.CPU_USAGE)); resourceUsage.setMemValue(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEM_USAGE)); result.add(resourceUsage); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage resourceUsage = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourceUsage(); resourceUsage.setEpoch(rs.getTimestamp(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.DATE).getTime()); resourceUsage.setCpuValue(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.CPU_USAGE)); resourceUsage.setMemValue(rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDao.MEM_USAGE)); result.add(resourceUsage); }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { result.setTotalCount(rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterEngineDAO.COUNT)); } }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { result.setTotalCount(rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterEngineDao.COUNT)); }
@java.lang.SuppressWarnings("rawtypes") @java.lang.Override public java.util.concurrent.Future<java.util.Map<java.lang.String, java.lang.Object>> setupNetworks(java.util.Map networks, java.util.Map bonding, java.util.Map options, final boolean isPolicyReset) { final org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.setupNetworks").withParameter("networks", networks).withParameter("bondings", bonding).withParameter("options", options).build(); final org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.FutureCallable callable = new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.FutureCallable(() -> { if (isPolicyReset) { <START_MOD>int connectionId = client.getConnectionId(); <END_MOD>updateHeartbeatPolicy(client.getClientRetryPolicy().clone(), false); if (<START_MOD>(<END_MOD>client.isClosed()) <START_MOD>&& ((client.getConnectionId()) == connectionId)) <END_MOD>{ waitUntilCheck(( client) -> client.isClosed(),   on losing connection to {}   lost for {} } <START_MOD>if ((!(client.isClosed())) && ((client.getConnectionId()) != connectionId)) { <END_MOD>waitUntilCheck(( client) -> !(client.isClosed()),   on opening connection for {}   reconnecting for {}!<START_MOD> }<END_MOD> } return new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withResponseKey("status"); }); java.util.concurrent.FutureTask<java.util.Map<java.lang.String, java.lang.Object>> future = new java.util.concurrent.FutureTask<java.util.Map<java.lang.String, java.lang.Object>>(callable) { @java.lang.Override public boolean isDone() { if (callable.isDone()) { if (isPolicyReset) { updateHeartbeatPolicy(client.getClientRetryPolicy(), true); } return true; } return false; } }; org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(future); return future; }	@java.lang.SuppressWarnings("rawtypes") @java.lang.Override public java.util.concurrent.Future<java.util.Map<java.lang.String, java.lang.Object>> setupNetworks(java.util.Map networks, java.util.Map bonding, java.util.Map options, final boolean isPolicyReset) { final org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.setupNetworks").withParameter("networks", networks).withParameter("bondings", bonding).withParameter("options", options).build(); final org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.FutureCallable callable = new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.FutureCallable(() -> { if (isPolicyReset) { int connectionId = client.getConnectionId(); updateHeartbeatPolicy(client.getClientRetryPolicy().clone(), false); if ((client.isClosed()) && ((client.getConnectionId()) == connectionId)) { waitUntilCheck(( client) -> client.isClosed(), "Waiting on losing connection to {}", "Connection lost for {}"); } } return new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withResponseKey("status"); }); java.util.concurrent.FutureTask<java.util.Map<java.lang.String, java.lang.Object>> future = new java.util.concurrent.FutureTask<java.util.Map<java.lang.String, java.lang.Object>>(callable) { @java.lang.Override public boolean isDone() { if (callable.isDone()) { if (isPolicyReset) { updateHeartbeatPolicy(client.getClientRetryPolicy(), true); } return true; } return false; } }; org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(future); return future; }
@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { if (anyFailed) { super.childCommandsExecutionEnded(command, anyFailed, childCmdIds, status, completedChildren); return; } else { org.ovirt.engine.core.bll.RemoveVmPoolCommand<? extends org.ovirt.engine.core.common.action.VmPoolParametersBase> removeVmPoolCommand = ((org.ovirt.engine.core.bll.RemoveVmPoolCommand) (command)); org.ovirt.engine.core.common.businessentities.VmPool pool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmPoolDao().get(removeVmPoolCommand.getVmPoolId()); if ((pool == null) || ((pool.getRunningVmsCount()) == 0)) { super.childCommandsExecutionEnded(command, false, childCmdIds, status, completedChildren); return; } } }	@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { if (anyFailed) { setCommandEndStatus(command, true, status, childCmdIds); } else { org.ovirt.engine.core.bll.RemoveVmPoolCommand<? extends org.ovirt.engine.core.common.action.VmPoolParametersBase> removeVmPoolCommand = ((org.ovirt.engine.core.bll.RemoveVmPoolCommand<? extends org.ovirt.engine.core.common.action.VmPoolParametersBase>) (command)); org.ovirt.engine.core.common.businessentities.VmPool pool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmPoolDao().get(removeVmPoolCommand.getVmPoolId()); if ((pool == null) || ((pool.getRunningVmsCount()) == 0)) { setCommandEndStatus(command, false, status, childCmdIds); } } }
private java.util.List<org.ovirt.engine.core.compat.Guid> findVmViolatingPositiveAg(org.ovirt.engine.core.common.scheduling.AffinityGroup affinityGroup, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> vmToHost) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.compat.Guid>> hostCount = new java.util.HashMap<>(); for (org.ovirt.engine.core.compat.Guid vm : affinityGroup.getEntityIds()) { org.ovirt.engine.core.compat.Guid host = vmToHost.get(vm); if (host == null) { continue; } if (hostCount.containsKey(host)) { hostCount.get(host).add(vm); } else { hostCount.put(host, new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>()); hostCount.get(host).add(vm); } } org.ovirt.engine.core.compat.Guid host = chooseCandidateHostForMigration(hostCount); if (host == null) { return <START_MOD>java.util.Collections.EMPTY_LIST<END_MOD>; } return hostCount.get(host); }	private java.util.List<org.ovirt.engine.core.compat.Guid> findVmViolatingPositiveAg(org.ovirt.engine.core.common.scheduling.AffinityGroup affinityGroup, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> vmToHost) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.compat.Guid>> hostCount = new java.util.HashMap<>(); for (org.ovirt.engine.core.compat.Guid vm : affinityGroup.getEntityIds()) { org.ovirt.engine.core.compat.Guid host = vmToHost.get(vm); if (host == null) { continue; } if (hostCount.containsKey(host)) { hostCount.get(host).add(vm); } else { hostCount.put(host, new java.util.ArrayList()); hostCount.get(host).add(vm); } } org.ovirt.engine.core.compat.Guid host = chooseCandidateHostForMigration(hostCount); if (host == null) { return java.util.Collections.emptyList(); } return hostCount.get(host); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isUpdatePrestartedVms() ? java.util.Collections.singletonMap(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM_POOL, getVmBeingRemovedFromPoolMessage())) : null; }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { return org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isUpdatePrestartedVms() ? java.util.Collections.singletonMap(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM_POOL, getVmBeingRemovedFromPoolMessage())) : null; }
@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()) != null) { org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolDao().removeVmFromVmPool(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmId()); <START_MOD>updateVmPoolPrestartedVms(); <END_MOD>org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.setSucceeded(true); } }	@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()) != null) { org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolDao().removeVmFromVmPool(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmId()); if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isUpdatePrestartedVms()) { org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolDao().boundVmPoolPrestartedVms(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()); } org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.setSucceeded(true); } }
public java.lang.String getConvergenceSchedule() { return convergenceSchedule; }	public java.util.Map<java.lang.String, java.lang.Object> getConvergenceSchedule() { return convergenceSchedule; }
@org.junit.Test public void fromOnlyDowntimes() throws java.io.IOException { java.lang.String schedule = org.ovirt.engine.core.bll.migration.ConvergenceSchedule.from(new org.ovirt.engine.core.bll.migration.ConvergenceConfig(500, 150, 15)).asJson(); assertEquals("[[],[[15,[\"setDowntime\",[51]]],[15,[\"setDowntime\",[52]]],[15,[\"setDowntime\",[54]]],[15,[\"setDowntime\",[57]]],[15,[\"setDowntime\",[62]]],[15,[\"setDowntime\",[71]]],[15,[\"setDowntime\",[85]]],[15,[\"setDowntime\",[109]]],[15,[\"setDowntime\",[150]]]]]", schedule); }	private java.util.Map<java.lang.String, java.lang.Object> action(java.lang.String actionName, java.lang.Object... actionParams) { java.util.Map<java.lang.String, java.lang.Object> action = new java.util.HashMap<>(); action.put("name", actionName); action.put("params", java.util.Arrays.asList(actionParams)); return action; }
@org.junit.Test public void asJsonBoth() throws java.io.IOException { schedule.addInitStep(new org.ovirt.engine.core.bll.migration.ConvergenceItem("action", 10)).addInitStep(new org.ovirt.engine.core.bll.migration.ConvergenceItem("action2", 15)).addConvergenceStep(new org.ovirt.engine.core.bll.migration.ConvergenceItemWithStallingLimit(8, "action", 10)).addConvergenceStep(new org.ovirt.engine.core.bll.migration.ConvergenceItemWithStallingLimit(12, "action2", 12)); assertEquals("[[[\"action\",[10]],[\"action2\",[15]]],[[8,[\"action\",[10]]],[12,[\"action2\",[12]]]]]", schedule.asJson()); }	@org.junit.Test public void asMapBoth() throws java.io.IOException { schedule.addInitStep(new org.ovirt.engine.core.common.migration.ConvergenceItem("action", 10)).addInitStep(new org.ovirt.engine.core.common.migration.ConvergenceItem("action2", 15)).addStallingStep(new org.ovirt.engine.core.common.migration.ConvergenceItemWithStallingLimit(8, "action", 10)).addStallingStep(new org.ovirt.engine.core.common.migration.ConvergenceItemWithStallingLimit(12, "action2", 12)); java.util.Map<java.lang.String, java.lang.Object> expected = new org.ovirt.engine.core.bll.migration.ConvergenceScheduleTest.ExpectedConvergence().addInit("action", 10).addInit("action2", 15).addStalling(8, "action", 10).addStalling(12, "action2", 12); assertEquals(expected, schedule.asMap()); }
@org.junit.Test public void asJsonEmpty() throws java.io.IOException { assertEquals("[[],[]]", schedule.asJson()); }	@org.junit.Test public void asMapEmpty() throws java.io.IOException { assertEquals(new org.ovirt.engine.core.bll.migration.ConvergenceScheduleTest.ExpectedConvergence(), schedule.asMap()); }
@org.junit.Test public void asJsonTwoConvItems() throws java.io.IOException { schedule.addConvergenceStep(new org.ovirt.engine.core.bll.migration.ConvergenceItemWithStallingLimit(8, "action", 10)).addConvergenceStep(new org.ovirt.engine.core.bll.migration.ConvergenceItemWithStallingLimit(12, "action2", 12)); assertEquals("[[],[[8,[\"action\",[10]]],[12,[\"action2\",[12]]]]]", schedule.asJson()); }	@org.junit.Test public void asMapTwoConvItems() throws java.io.IOException { schedule.addStallingStep(new org.ovirt.engine.core.common.migration.ConvergenceItemWithStallingLimit(8, "action", 10)).addStallingStep(new org.ovirt.engine.core.common.migration.ConvergenceItemWithStallingLimit(12, "action2", 12)); assertEquals(new org.ovirt.engine.core.bll.migration.ConvergenceScheduleTest.ExpectedConvergence().addStalling(8, "action", 10).addStalling(12, "action2", 12), schedule.asMap()); }
public void setConvergenceSchedule(java.lang.String convergenceSchedule) { this.convergenceSchedule = convergenceSchedule; }	public void setConvergenceSchedule(java.util.Map<java.lang.String, java.lang.Object> convergenceSchedule) { this.convergenceSchedule = convergenceSchedule; }
@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("srcHost", getSrcHost()).append("dstVdsId", getDstVdsId()).append("dstHost", getDstHost()).append("migrationMethod", getMigrationMethod()).append("tunnelMigration", isTunnelMigration()).append("migrationDowntime", getMigrationDowntime()).append("autoConverge", getAutoConverge()).append("migrateCompressed", getMigrateCompressed()).append("consoleAddress", getConsoleAddress())<START_MOD>.append("convergenceSchedule", getConvergenceSchedule())<END_MOD>; }	@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("srcHost", getSrcHost()).append("dstVdsId", getDstVdsId()).append("dstHost", getDstHost()).append("migrationMethod", getMigrationMethod()).append("tunnelMigration", isTunnelMigration()).append("migrationDowntime", getMigrationDowntime()).append("autoConverge", getAutoConverge()).append("migrateCompressed", getMigrateCompressed()).append("consoleAddress", getConsoleAddress()).append("maxBandwidth", getMaxBandwidth()).append("convergenceSchedule", getConvergenceSchedule()); }
@org.junit.Test public void asJsonOneConvItem() throws java.io.IOException { schedule.addConvergenceStep(new org.ovirt.engine.core.bll.migration.ConvergenceItemWithStallingLimit(8, "action", 10)); assertEquals("[[],[[8,[\"action\",[10]]]]]", schedule.asJson()); }	@org.junit.Test public void asMapOneConvItem() throws java.io.IOException { schedule.addStallingStep(new org.ovirt.engine.core.common.migration.ConvergenceItemWithStallingLimit(8, "action", 10)); assertEquals(new org.ovirt.engine.core.bll.migration.ConvergenceScheduleTest.ExpectedConvergence().addStalling(8, "action", 10), schedule.asMap()); }
@org.junit.Test public void asJsonOneInit() throws java.io.IOException { schedule.addInitStep(new org.ovirt.engine.core.bll.migration.ConvergenceItem("action", 10)); assertEquals("[[[\"action\",[10]]],[]]", schedule.asJson()); }	@org.junit.Test public void asMapOneInit() throws java.io.IOException { schedule.addInitStep(new org.ovirt.engine.core.common.migration.ConvergenceItem("action", 10)); assertEquals(new org.ovirt.engine.core.bll.migration.ConvergenceScheduleTest.ExpectedConvergence().addInit("action", 10), schedule.asMap()); }
@org.junit.Test public void asJsonTwoInits() throws java.io.IOException { schedule.addInitStep(new org.ovirt.engine.core.bll.migration.ConvergenceItem("action", 10)).addInitStep(new org.ovirt.engine.core.bll.migration.ConvergenceItem("action2", 15)); assertEquals("[[[\"action\",[10]],[\"action2\",[15]]],[]]", schedule.asJson()); }	@org.junit.Test public void asMapTwoInits() throws java.io.IOException { schedule.addInitStep(new org.ovirt.engine.core.common.migration.ConvergenceItem("action", 10)).addInitStep(new org.ovirt.engine.core.common.migration.ConvergenceItem("action2", 15)); assertEquals(new org.ovirt.engine.core.bll.migration.ConvergenceScheduleTest.ExpectedConvergence().addInit("action", 10).addInit("action2", 15), schedule.asMap()); }
public org.ovirt.engine.core.bll.migration.ConvergenceSchedule addConvergenceStep(org.ovirt.engine.core.bll.migration.ConvergenceItemWithStallingLimit item) { convergence.add(item); return this; }	public org.ovirt.engine.core.bll.migration.ConvergenceSchedule addStallingStep(org.ovirt.engine.core.common.migration.ConvergenceItemWithStallingLimit item) { stalling.add(item); return this; }
public org.ovirt.engine.core.bll.migration.ConvergenceSchedule addInitStep(org.ovirt.engine.core.bll.migration.ConvergenceItem item) { init.add(item); return this; }	public org.ovirt.engine.core.bll.migration.ConvergenceSchedule addInitStep(org.ovirt.engine.core.common.migration.ConvergenceItem item) { init.add(item); return this; }
static java.util.List<java.lang.Integer> generateDowntimeList(org.ovirt.engine.core.bll.migration.ConvergenceConfig config) { java.util.List<java.lang.Integer> res = new java.util.ArrayList<>(); double maxDowntime = config.getMigrationProgressTimeout(); double numOfSteps = maxDowntime / (config.getStallingLimit()); double min = (config.getMaxDowntimeLimit()) / numOfSteps; double base = java.lang.Math.pow((maxDowntime - min), (1.0 / (numOfSteps - 1.0))); java.util.stream.IntStream.range(1, ((int) (numOfSteps))).map(( i) -> ((int) (min + (java.lang.Math.pow(base, i))))).forEach(res::add); return res; }	public static void addDowntimes(org.ovirt.engine.core.common.migration.ConvergenceConfig config, org.ovirt.engine.core.bll.migration.ConvergenceSchedule schedule) { if (((config.getConvergenceItems()) != null) && (!(config.getConvergenceItems().isEmpty()))) { config.getConvergenceItems().stream().forEachOrdered(schedule::addStallingStep); } if ((config.getLastItems()) != null) { config.getLastItems().stream().map(( item) -> new org.ovirt.engine.core.common.migration.ConvergenceItemWithStallingLimit((-1), item)).forEachOrdered(schedule::addStallingStep); } }
java.util.List<org.ovirt.engine.core.bll.migration.MigrationPolicy> parse(java.lang.String policy) throws java.io.IOException { org.codehaus.jackson.map.ObjectMapper mapper = new org.codehaus.jackson.map.ObjectMapper(); org.codehaus.jackson.map.type.CollectionType type = mapper.getTypeFactory().constructCollectionType(java.util.List.class, org.ovirt.engine.core.bll.migration.MigrationPolicy.class); return mapper.readValue(policy, type); }	java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy> parse(java.lang.String policy) throws java.io.IOException { org.codehaus.jackson.map.ObjectMapper mapper = new org.codehaus.jackson.map.ObjectMapper(); org.codehaus.jackson.map.type.CollectionType type = mapper.getTypeFactory().constructCollectionType(java.util.List.class, org.ovirt.engine.core.common.migration.MigrationPolicy.class); return mapper.readValue(policy, type); }
void initMigrationPolicies(java.lang.String policiesStr) { java.util.List<org.ovirt.engine.core.bll.migration.MigrationPolicy> policies = new java.util.ArrayList<>(); try { policies = parse(policiesStr); } catch (java.io.IOException e) { log.error("The provided migration policies: '{}' are not valid, ignoring", policiesStr); } migrationPolicies = policies.stream().collect(java.util.stream.Collectors.toMap(MigrationPolicy::getId, java.util.function.Function.identity())); }	void initMigrationPolicies(java.lang.String policiesStr) { java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy> policies = java.util.Collections.EMPTY_LIST; try { policies = parse(policiesStr); } catch (java.io.IOException e) { log.error("The provided migration policies: '{}' are not valid, ignoring", policiesStr); } migrationPolicies = policies.stream().collect(java.util.stream.Collectors.toMap(MigrationPolicy::getId, java.util.function.Function.identity())); migrationPolicies.put(NoMigrationPolicy.ID, new org.ovirt.engine.core.common.migration.NoMigrationPolicy()); }
@org.junit.Test public void jsonInvalidJson() throws java.io.IOException { provider.initMigrationPolicies("this is not a valid json"); org.ovirt.engine.core.bll.migration.MigrationPolicy policy = provider.getMigrationPolicy(org.ovirt.engine.core.compat.Guid.newGuid()); assertNull(policy); }	@org.junit.Test public void jsonInvalidJson() throws java.io.IOException { provider.initMigrationPolicies("this is not a valid json"); org.ovirt.engine.core.common.migration.MigrationPolicy policy = provider.getMigrationPolicy(org.ovirt.engine.core.compat.Guid.newGuid()); assertTrue((policy instanceof org.ovirt.engine.core.common.migration.NoMigrationPolicy)); }
public static org.ovirt.engine.core.bll.migration.ConvergenceSchedule from(org.ovirt.engine.core.bll.migration.ConvergenceConfig config) { org.ovirt.engine.core.bll.migration.ConvergenceSchedule schedule = new org.ovirt.engine.core.bll.migration.ConvergenceSchedule(); java.util.stream.Stream<java.lang.Integer> downtimes = org.ovirt.engine.core.bll.migration.ConvergenceSchedule.generateDowntimeList(config).stream(); downtimes.map(( item) -> new org.ovirt.engine.core.bll.migration.ConvergenceItemWithStallingLimit(config.getStallingLimit(), org.ovirt.engine.core.bll.migration.ConvergenceSchedule.setDowntime, item)).forEach(schedule::addConvergenceStep); return schedule; }	public static org.ovirt.engine.core.bll.migration.ConvergenceSchedule from(org.ovirt.engine.core.common.migration.ConvergenceConfig config) { if (config instanceof org.ovirt.engine.core.common.migration.NoConvergenceConfig) { return new org.ovirt.engine.core.bll.migration.NoConvergenceSchedule(); } org.ovirt.engine.core.bll.migration.ConvergenceSchedule schedule = new org.ovirt.engine.core.bll.migration.ConvergenceSchedule(); org.ovirt.engine.core.bll.migration.ConvergenceSchedule.addDowntimes(config, schedule); org.ovirt.engine.core.bll.migration.ConvergenceSchedule.addInit(config, schedule); return schedule; }
public java.lang.String asJson() { java.util.List<java.lang.Object> both = new java.util.ArrayList<>(); both.add(init); both.add(convergence); try { return org.ovirt.engine.core.utils.JsonHelper.objectToJson(both, false); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } }	public static void addInit(org.ovirt.engine.core.common.migration.ConvergenceConfig config, org.ovirt.engine.core.bll.migration.ConvergenceSchedule schedule) { if ((config.getInitialItems()) == null) { return; } config.getInitialItems().stream().forEachOrdered(schedule::addInitStep); }
public org.ovirt.engine.core.bll.migration.MigrationPolicy getMigrationPolicy(org.ovirt.engine.core.compat.Guid id) { if (id == null) { return null; } if ((migrationPolicies) == null) { initMigrationPolicies(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.MigrationPolicies)); } return migrationPolicies.get(id); }	public org.ovirt.engine.core.common.migration.MigrationPolicy getMigrationPolicy(org.ovirt.engine.core.compat.Guid id) { if (migrationPolicies.containsKey(id)) { return migrationPolicies.get(id); } else { return migrationPolicies.get(NoMigrationPolicy.ID); } }
public java.lang.String getVmName() { return VmName; }	public java.lang.String getVmName() { return vmName; }
public void setVmName(java.lang.String VmName) { this.VmName = VmName; }	public void setVmName(java.lang.String vmName) { this.vmName = vmName; }
private java.lang.Object toPrintableResult(org.codehaus.jackson.JsonNode result) { java.lang.Class<java.util.Map<java.lang.String, java.lang.String>> clazz = ((java.lang.Class) (java.util.Map.class)); java.util.Map<java.lang.String, java.lang.String> resultMap = null; try { resultMap = org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse.MAPPER.convertValue(result, clazz); } catch (java.lang.IllegalArgumentException e) { return result; } if (resultMap.containsKey("password")) { resultMap.put("password", "*****"); } return resultMap; }	private java.lang.Object toPrintableResult(org.codehaus.jackson.JsonNode result) { if (result.isArray()) { return result; } java.lang.Class<java.util.Map<java.lang.String, java.lang.String>> clazz = ((java.lang.Class) (java.util.Map.class)); java.util.Map<java.lang.String, java.lang.String> resultMap = org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse.MAPPER.convertValue(result, clazz); if (resultMap.containsKey("password")) { resultMap.put("password", "*****"); } return resultMap; }
private java.lang.Integer getQosBandwidth(org.ovirt.engine.core.compat.Guid clusterId) { final org.ovirt.engine.core.common.businessentities.network.HostNetworkQos migrationalHostNetworkQos = org.ovirt.engine.core.bll.MigrateVmCommand.getDbFacade().getHostNetworkQosDao().getHostNetworkQosOfMigrationNetworkByClusterId(clusterId); return migrationalHostNetworkQos == null ? null : migrationalHostNetworkQos.getOutAverageRealtime(); }	private java.lang.Integer getQosBandwidth(org.ovirt.engine.core.compat.Guid clusterId) { final org.ovirt.engine.core.common.businessentities.network.HostNetworkQos migrationHostNetworkQos = org.ovirt.engine.core.bll.MigrateVmCommand.getDbFacade().getHostNetworkQosDao().getHostNetworkQosOfMigrationNetworkByClusterId(clusterId); if (migrationHostNetworkQos == null) { return null; } if ((migrationHostNetworkQos.getOutAverageRealtime()) != null) { return migrationHostNetworkQos.getOutAverageRealtime(); } return migrationHostNetworkQos.getOutAverageUpperlimit(); }
private java.lang.Integer getAutoMaxBandwidthForCluster(org.ovirt.engine.core.compat.Guid clusterId) { java.lang.Integer qosBandwidth = getQosBandwidth(clusterId); if (qosBandwidth != null) { return qosBandwidth; } java.lang.Integer linkSpeedBandwidth = getLinkSpeedBandwidth(clusterId); return linkSpeedBandwidth; }	private java.lang.Integer getAutoMaxBandwidth(org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.compat.Guid hostId) { java.lang.Integer qosBandwidth = getQosBandwidth(clusterId); if (qosBandwidth != null) { return qosBandwidth; } return getLinkSpeedBandwidth(hostId); }
private java.lang.Integer getAutoMaxBandwidth() { if (getSourceClusterId().equals(getDestinationClusterId())) { return getAutoMaxBandwidthForCluster(getSourceClusterId()); } return org.ovirt.engine.core.bll.MigrateVmCommand.minIfExists(getAutoMaxBandwidthForCluster(getSourceClusterId()), getAutoMaxBandwidthForCluster(getDestinationClusterId())); }	private java.lang.Integer getAutoMaxBandwidth() { final org.ovirt.engine.core.compat.Guid sourceClusterId = org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getClusterId(); final org.ovirt.engine.core.compat.Guid destinationClusterId = org.ovirt.engine.core.bll.MigrateVmCommand.getClusterId(); final org.ovirt.engine.core.compat.Guid sourceHostId = org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds(); final org.ovirt.engine.core.compat.Guid destinationHostId = getDestinationVdsId(); return org.ovirt.engine.core.common.utils.ObjectUtils.minIfExists(getAutoMaxBandwidth(sourceClusterId, sourceHostId), getAutoMaxBandwidth(destinationClusterId, destinationHostId)); }
private static java.lang.Integer minIfExists(java.lang.Integer a, java.lang.Integer b) { return (a != null) && (b != null) ? java.lang.Math.min(a, b) : null; }	private java.lang.String findValidMigrationIpAddress(org.ovirt.engine.core.common.businessentities.network.Network migrationNetwork, java.util.function.Function<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface, java.lang.String> ipAddressGetter) { final java.lang.String migrationSourceIpAddress = getMigrationNetworkAddress(org.ovirt.engine.core.bll.MigrateVmCommand.getVds().getId(), migrationNetwork.getName(), ipAddressGetter); if (org.apache.commons.lang.StringUtils.isNotEmpty(migrationSourceIpAddress)) { final java.lang.String migrationDestinationIpAddress = getMigrationNetworkAddress(getDestinationVds().getId(), migrationNetwork.getName(), ipAddressGetter); if (org.apache.commons.lang.StringUtils.isNotEmpty(migrationDestinationIpAddress)) { return migrationDestinationIpAddress; } } return null; }
private java.lang.Integer getMaxBandwidth(org.ovirt.engine.core.common.migration.MigrationPolicy migrationPolicy) { switch (org.ovirt.engine.core.bll.MigrateVmCommand.getCluster().getMigrationBandwidthLimitType()) { case AUTO : return java.util.Optional.ofNullable(getAutoMaxBandwidth()).map(( bandwidth) -> bandwidth / (migrationPolicy.getMaxMigrations())).orElse(null); case VDSM_CONFIG : return null; case CUSTOM : return (org.ovirt.engine.core.bll.MigrateVmCommand.getCluster().getCustomMigrationNetworkBandwidth()) / (migrationPolicy.getMaxMigrations()); default : throw new java.lang.IllegalStateException("Unexpected enum item."); } }	private java.lang.Integer getMaxBandwidth(org.ovirt.engine.core.common.migration.MigrationPolicy migrationPolicy) { switch (org.ovirt.engine.core.bll.MigrateVmCommand.getCluster().getMigrationBandwidthLimitType()) { case AUTO : return java.util.Optional.ofNullable(getAutoMaxBandwidth()).map(( bandwidth) -> bandwidth / (migrationPolicy.getMaxMigrations())).orElse(null); case VDSM_CONFIG : return null; case CUSTOM : return (org.ovirt.engine.core.bll.MigrateVmCommand.getCluster().getCustomMigrationNetworkBandwidth()) / (migrationPolicy.getMaxMigrations()); default : throw new java.lang.IllegalStateException(("Unexpected enum item: " + (org.ovirt.engine.core.bll.MigrateVmCommand.getCluster().getMigrationBandwidthLimitType()))); } }
private java.lang.Integer getLinkSpeedBandwidth(org.ovirt.engine.core.compat.Guid clusterId) { final java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> migrationalClusterNics = org.ovirt.engine.core.bll.MigrateVmCommand.getDbFacade().getInterfaceDao().getAllMigrationNetworkInterfacesInCluster(clusterId); return migrationalClusterNics.stream().map(VdsNetworkInterface::getSpeed).reduce(org.ovirt.engine.core.bll.MigrateVmCommand::minIfExists).orElse(null); }	private java.lang.Integer getLinkSpeedBandwidth(org.ovirt.engine.core.compat.Guid hostId) { return org.ovirt.engine.core.bll.MigrateVmCommand.getInterfaceDao().getActiveMigrationNetworkInterfaceForHost(hostId).map(NetworkInterface::getSpeed).map(( speed) -> speed > 0 ? speed : null).orElse(null); }
private<START_MOD> static<END_MOD> org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> <START_MOD>parseSlashSeparatedPair<END_MOD>(java.lang.String <START_MOD>slashSeparatedString<END_MOD>) { java.util.ArrayList<java.lang.String> splitted = <START_MOD>org.ovirt.engine.core.utils.OsRepositoryImpl.<END_MOD>trimElements(<START_MOD>slashSeparatedString<END_MOD>.split("/")); return (splitted.size()) == 2 ? new org.ovirt.engine.core.common.utils.Pair(splitted.get(0), splitted.get(1)) : null; }	private static org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> parseSlashSeparatedPair(java.lang.String slashSeparatedString) { java.util.List<java.lang.String> splitted = org.ovirt.engine.core.utils.OsRepositoryImpl.trimElements(slashSeparatedString.split("/")); return (splitted.size()) == 2 ? new org.ovirt.engine.core.common.utils.Pair(splitted.get(0), splitted.get(1)) : null; }
@java.lang.Override public java.util.ArrayList<java.lang.String> getWatchDogModels(int osId, org.ovirt.engine.core.compat.Version version) { java.lang.String models = getValueByVersion(idToUnameLookup.get(osId), "devices.watchdog.models", version); return <START_MOD>org.ovirt.engine.core.utils.OsRepositoryImpl.<END_MOD>trimElements(models.split(",")); }	@java.lang.Override public java.util.List<java.lang.String> getWatchDogModels(int osId, org.ovirt.engine.core.compat.Version version) { java.lang.String models = getValueByVersion(idToUnameLookup.get(osId), "devices.watchdog.models", version); return org.ovirt.engine.core.utils.OsRepositoryImpl.trimElements(models.split(",")); }
private<START_MOD> static<END_MOD> java.util.ArrayList<java.lang.String> trimElements(java.lang.String... elements) { java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>(elements.length); for (java.lang.String e : elements) { e = e.trim(); if ((e.length()) > 0) { list.add(e); } } return list; }	private static java.util.List<java.lang.String> trimElements(java.lang.String... elements) { java.util.List<java.lang.String> list = new java.util.ArrayList<>(elements.length); for (java.lang.String e : elements) { e = e.trim(); if ((e.length()) > 0) { list.add(e); } } return list; }
@java.lang.Override public java.util.ArrayList<java.lang.String> getNetworkDevices(int osId, org.ovirt.engine.core.compat.Version version) { java.lang.String devices = getValueByVersion(idToUnameLookup.get(osId), "devices.network", version); return <START_MOD>org.ovirt.engine.core.utils.OsRepositoryImpl.<END_MOD>trimElements(devices.split(",")); }	@java.lang.Override public java.util.List<java.lang.String> getNetworkDevices(int osId, org.ovirt.engine.core.compat.Version version) { java.lang.String devices = getValueByVersion(idToUnameLookup.get(osId), "devices.network", version); return org.ovirt.engine.core.utils.OsRepositoryImpl.trimElements(devices.split(",")); }
private static void addCdDetails(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.osinfo.OsRepository osRepository = org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.getOsRepository(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); java.lang.String cdInterface = osRepository.getCdInterface(vm.getOs(), vm.getCompatibilityVersion()<START_MOD>, org.ovirt.engine.core.common.businessentities.ChipsetType.fromMachineType(vm.getEmulatedMachine())<END_MOD>); if ("scsi".equals(cdInterface)) { struct.put(VdsProperties.Index, "0"); struct.put(VdsProperties.Address, org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.createAddressForScsiDisk(0, 0)); } else if ("ide".equals(cdInterface)) { struct.put(VdsProperties.Index, "2"); } struct.put(VdsProperties.INTERFACE, cdInterface); struct.put(VdsProperties.ReadOnly, java.lang.Boolean.TRUE.toString()); struct.put(VdsProperties.Shareable, java.lang.Boolean.FALSE.toString()); }	private static void addCdDetails(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.VM vm) { struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); java.lang.String cdInterface = org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.getOsRepository().getCdInterface(vm.getOs(), vm.getCompatibilityVersion(), org.ovirt.engine.core.common.businessentities.ChipsetType.fromMachineType(vm.getEmulatedMachine())); if ("scsi".equals(cdInterface)) { struct.put(VdsProperties.Index, "0"); struct.put(VdsProperties.Address, org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.createAddressForScsiDisk(0, 0)); } else if ("ide".equals(cdInterface)) { struct.put(VdsProperties.Index, "2"); } else if ("sata".equals(cdInterface)) { struct.put(VdsProperties.Index, "0"); } struct.put(VdsProperties.INTERFACE, cdInterface); struct.put(VdsProperties.ReadOnly, java.lang.Boolean.TRUE.toString()); struct.put(VdsProperties.Shareable, java.lang.Boolean.FALSE.toString()); }
private void addDevice(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.lang.String path) { boolean isPayload = (org.ovirt.engine.core.common.businessentities.VmPayload.isPayload(vmDevice.getSpecParams())) && (vmDevice.getDevice().equals(VmDeviceType.CDROM.getName())); java.util.Map<java.lang.String, java.lang.Object> specParams = ((vmDevice.getSpecParams()) == null) ? java.util.Collections.<java.lang.String, java.lang.Object>emptyMap() : vmDevice.getSpecParams(); if (path != null) { struct.put(VdsProperties.Path, (isPayload ? "" : path)); } if (isPayload) { java.lang.String cdInterface = osRepository.getCdInterface(vm.getOs(), vm.getCompatibilityVersion()<START_MOD>, org.ovirt.engine.core.common.businessentities.ChipsetType.fromMachineType(vm.getEmulatedMachine())<END_MOD>); if ("scsi".equals(cdInterface)) { struct.put(VdsProperties.Index, "1"); struct.put(VdsProperties.Address, org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.createAddressForScsiDisk(0, 1)); } else if ("ide".equals(cdInterface)) { struct.put(VdsProperties.Index, "3"); } } struct.put(VdsProperties.SpecParams, specParams); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addBootOrder(vmDevice, struct); devices.add(struct); addToManagedDevices(vmDevice); }	private void addDevice(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.lang.String path) { boolean isPayload = (org.ovirt.engine.core.common.businessentities.VmPayload.isPayload(vmDevice.getSpecParams())) && (vmDevice.getDevice().equals(VmDeviceType.CDROM.getName())); java.util.Map<java.lang.String, java.lang.Object> specParams = ((vmDevice.getSpecParams()) == null) ? java.util.Collections.<java.lang.String, java.lang.Object>emptyMap() : vmDevice.getSpecParams(); if (path != null) { struct.put(VdsProperties.Path, (isPayload ? "" : path)); } if (isPayload) { java.lang.String cdInterface = osRepository.getCdInterface(vm.getOs(), vm.getCompatibilityVersion(), org.ovirt.engine.core.common.businessentities.ChipsetType.fromMachineType(vm.getEmulatedMachine())); if ("scsi".equals(cdInterface)) { struct.put(VdsProperties.Index, "1"); struct.put(VdsProperties.Address, org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.createAddressForScsiDisk(0, 1)); } else if ("ide".equals(cdInterface)) { struct.put(VdsProperties.Index, "3"); } else if ("sata".equals(cdInterface)) { struct.put(VdsProperties.Index, "1"); } } struct.put(VdsProperties.SpecParams, specParams); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addBootOrder(vmDevice, struct); devices.add(struct); addToManagedDevices(vmDevice); }
@java.lang.Override public java.util.ArrayList<java.lang.String> getDiskInterfaces(int osId, org.ovirt.engine.core.compat.Version version) { java.lang.String devices = getValueByVersion(idToUnameLookup.get(osId), "devices.diskInterfaces", version); return <START_MOD>org.ovirt.engine.core.utils.OsRepositoryImpl.<END_MOD>trimElements(devices.split(",")); }	@java.lang.Override public java.util.List<java.lang.String> getDiskInterfaces(int osId, org.ovirt.engine.core.compat.Version version) { java.lang.String devices = getValueByVersion(idToUnameLookup.get(osId), "devices.diskInterfaces", version); return org.ovirt.engine.core.utils.OsRepositoryImpl.trimElements(devices.split(",")); }
@java.lang.Override public java.lang.String getCdInterface(int osId, org.ovirt.engine.core.compat.Version version, org.ovirt.engine.core.common.businessentities.ChipsetType chipset) { java.lang.String line = getValueByVersion(idToUnameLookup.get(osId), "devices.cdInterface", version); java.lang.String defaultInterface = null; for (java.lang.String element : line.split(",")) { org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> pair = org.ovirt.engine.core.utils.OsRepositoryImpl.parseSlashSeparatedPair(element); if (pair == null) { defaultInterface = element.trim(); } else if (chipset.getChipsetName().equalsIgnoreCase(pair.getFirst())) { return pair.getSecond(); } } return defaultInterface; }	@java.lang.Override public java.lang.String getCdInterface(int osId, org.ovirt.engine.core.compat.Version version, org.ovirt.engine.core.common.businessentities.ChipsetType chipset) { java.lang.String line = getValueByVersion(idToUnameLookup.get(osId), "devices.cdInterface", version); java.lang.String defaultInterface = null; for (java.lang.String element : line.split(",")) { org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> pair = org.ovirt.engine.core.utils.OsRepositoryImpl.parseSlashSeparatedPair(element); if (pair == null) { defaultInterface = element.trim().toLowerCase(); } else if ((chipset != null) && (chipset.getChipsetName().equalsIgnoreCase(pair.getFirst()))) { return pair.getSecond().toLowerCase(); } } return defaultInterface; }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.Object> call() throws java.lang.Exception { if (isPolicyReset) { <START_MOD>int connectionId = client.getConnectionId(); <END_MOD>updateHeartbeatPolicy(client.getClientRetryPolicy().clone(), false); if (<START_MOD>(<END_MOD>client.isClosed(<START_MOD>)) && ((client.getConnectionId()) == connectionId<END_MOD>)) { waitUntilCheck(new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.Predicate<org.ovirt.vdsm.jsonrpc.client.JsonRpcClient>() { @java.lang.Override public boolean test(org.ovirt.vdsm.jsonrpc.client.JsonRpcClient client) { return client.isClosed(); } },   on losing connection to {}   lost for {} } <START_MOD>if ((!(client.isClosed())) && ((client.getConnectionId()) != connectionId)) { <END_MOD>waitUntilCheck(new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.Predicate<org.ovirt.vdsm.jsonrpc.client.JsonRpcClient>() { @java.lang.Override public boolean test(org.ovirt.vdsm.jsonrpc.client.JsonRpcClient client) { return !(client.isClosed()); } },   on opening connection for {}   reconnecting for {}! } <START_MOD>} <END_MOD>return new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withResponseKey("status"); }	@java.lang.Override public java.util.Map<java.lang.String, java.lang.Object> call() throws java.lang.Exception { if (isPolicyReset) { int connectionId = client.getConnectionId(); updateHeartbeatPolicy(client.getClientRetryPolicy().clone(), false); if ((client.isClosed()) && ((client.getConnectionId()) == connectionId)) { waitUntilCheck(new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.Predicate<org.ovirt.vdsm.jsonrpc.client.JsonRpcClient>() { @java.lang.Override public boolean test(org.ovirt.vdsm.jsonrpc.client.JsonRpcClient client) { return client.isClosed(); } }, "Waiting on losing connection to {}", "Connection lost for {}"); } } return new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withResponseKey("status"); }
private void generatePathLocator() { <START_MOD>javaBuffer<END_MOD>.addImport(((BASE_PACKAGE) + ".Service")); <START_MOD>javaBuffer.addDocComment( relevant service based on URL path. javaBuffer<END_MOD>.addLine( service(String path); }	private void generatePathLocator() { javaBuffer.addImport(((BASE_PACKAGE) + ".Service")); javaBuffer.addDocComment("Service locator method, returns individual service on which the URI is dispatched."); javaBuffer.addLine("Service service(String path);"); }
private void <START_MOD>createVmStatlessImages<END_MOD>() { warnIfNotAllDisksPermitSnapshots(); org.ovirt.engine.core.bll.RunVmCommand.log.infoFormat( stateless snapshot for VM {0} ({1}) org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters createAllSnapshotsFromVmParameters = buildCreateSnapshotParameters(); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = org.ovirt.engine.core.bll.RunVmCommand.getBackend().runInternalAction(VdcActionType.CreateAllSnapshotsFromVm, createAllSnapshotsFromVmParameters, createContextForStatelessSnapshotCreation()); org.ovirt.engine.core.bll.RunVmCommand.setLock(null); setSucceeded(vdcReturnValue.getSucceeded()); if (vdcReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.RunVmCommand.getReturnValue().getVdsmTaskIdList().addAll(vdcReturnValue.getInternalVdsmTaskIdList()); org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(org.ovirt.engine.core.bll.RunVmCommand.getVm()); } else { if (areDisksLocked(vdcReturnValue)) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL); } org.ovirt.engine.core.bll.RunVmCommand.getReturnValue().setFault(vdcReturnValue.getFault()); org.ovirt.engine.core.bll.RunVmCommand.log.errorFormat( to create stateless snapshot for VM {0} ({1}) org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); } }	private void createVmStatelessImages() { warnIfNotAllDisksPermitSnapshots(); org.ovirt.engine.core.bll.RunVmCommand.log.info("Creating stateless snapshot for VM '{}' ({})", org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters createAllSnapshotsFromVmParameters = buildCreateSnapshotParameters(); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = runInternalAction(VdcActionType.CreateAllSnapshotsFromVm, createAllSnapshotsFromVmParameters, createContextForStatelessSnapshotCreation()); org.ovirt.engine.core.bll.RunVmCommand.setLock(null); setSucceeded(vdcReturnValue.getSucceeded()); if (vdcReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.RunVmCommand.getReturnValue().getVdsmTaskIdList().addAll(vdcReturnValue.getInternalVdsmTaskIdList()); } else { if (areDisksLocked(vdcReturnValue)) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IRS_IMAGE_STATUS_ILLEGAL); } org.ovirt.engine.core.bll.RunVmCommand.getReturnValue().setFault(vdcReturnValue.getFault()); org.ovirt.engine.core.bll.RunVmCommand.log.error("Failed to create stateless snapshot for VM '{}' ({})", org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); } }
protected org.ovirt.engine.core.compat.Guid initVds() { org.ovirt.engine.core.compat.Guid selectedVdsId = (<START_MOD>(getFlow()) == (org.ovirt.engine.core.bll.RunVmCommand.Flow.RESUME)<END_MOD>) ? org.ovirt.engine.core.bll.RunVmCommand.getVm().getRunOnVds() : org.ovirt.engine.core.bll.RunVmCommand.schedule(); initVds(selectedVdsId); return selectedVdsId; }	protected void updateGraphicsInfos() { for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : org.ovirt.engine.core.bll.RunVmCommand.getVmDeviceDao().getVmDeviceByVmIdAndType(org.ovirt.engine.core.bll.RunVmCommand.getVmId(), VmDeviceGeneralType.GRAPHICS)) { org.ovirt.engine.core.bll.RunVmCommand.getVm().getGraphicsInfos().put(org.ovirt.engine.core.common.businessentities.GraphicsType.fromString(vmDevice.getDevice()), new org.ovirt.engine.core.common.businessentities.GraphicsInfo()); } }
protected void perform() { switch (getFlow()) { case RESUME : resumeVm(); break; case REMOVE_STATELESS_IMAGES : removeVmStatlessImages(); break; case CREATE_STATELESS_IMAGES : createVmStatlessImages(); break; case RUN : default : runVm(); } }	protected void perform() { switch (getFlow()) { case RESUME_PAUSE : resumeVm(); break; case REMOVE_STATELESS_IMAGES : removeVmStatlessImages(); break; case CREATE_STATELESS_IMAGES : createVmStatelessImages(); break; case RESUME_HIBERNATE : case RUN : default : runVm(); } }
private boolean clusterHasPpcArchitecture() { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = getModel().getSelectedCluster(); return ((vdsGroup != null) && ((vdsGroup.getArchitecture()) != null)) && (org.ovirt.engine.core.common.businessentities.ArchitectureType.isPpcBasedArchitecture(vdsGroup.getArchitecture())); }	private boolean clusterHasPpcArchitecture() { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = getModel().getSelectedCluster(); return ((vdsGroup != null) && ((vdsGroup.getArchitecture()) != null)) && (vdsGroup.getArchitecture().isPpcFamily()); }
public static boolean isPpcBasedArchitecture(org.ovirt.engine.core.common.businessentities.ArchitectureType archType) { return ((((org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc) == archType) || ((org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64) == archType)) || ((org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64le) == archType)) || ((org.ovirt.engine.core.common.businessentities.ArchitectureType.ppcle) == archType); }	public boolean isPpcFamily() { return ((((this) == (org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc)) || ((this) == (org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64))) || ((this) == (org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64le))) || ((this) == (org.ovirt.engine.core.common.businessentities.ArchitectureType.ppcle)); }
public void disableAutoSetHostname() { canAutoSetHostname = (disableOnHostnameChanged) ? canAutoSetHostname : false; }	public void disableAutoSetHostname() { if (!(disableOnHostnameChanged)) { canAutoSetHostname = false; } }
protected abstract org.ovirt.engine.sdk4.HttpClient createHttpClient() throws <START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>Error<END_MOD>;	protected abstract org.ovirt.engine.sdk4.HttpClient createHttpClient();
@java.lang.Override protected org.ovirt.engine.sdk4.HttpClient createHttpClient() throws <START_MOD>java.lang.Error<END_MOD> { int port = getPort(); org.apache.http.config.Lookup<org.apache.http.auth.AuthSchemeProvider> authSchemeProvider = null; org.apache.http.client.CredentialsProvider credsProvider = new org.apache.http.impl.client.BasicCredentialsProvider(); org.apache.http.auth.AuthScope authScope = new org.apache.http.auth.AuthScope(getHost(), port, org.apache.http.auth.AuthScope.ANY_REALM, org.apache.http.auth.AuthScope.ANY_SCHEME); if (((user) != null) && ((user.length()) > 0)) { credsProvider.setCredentials(authScope, new org.apache.http.auth.UsernamePasswordCredentials(user, password)); } else if (kerberos) { authSchemeProvider = org.apache.http.config.RegistryBuilder.<org.apache.http.auth.AuthSchemeProvider>create().register(AuthSchemes.SPNEGO, new org.apache.http.impl.auth.SPNegoSchemeFactory(true)).build(); credsProvider.setCredentials(authScope, new org.apache.http.auth.Credentials() { @java.lang.Override public java.security.Principal getUserPrincipal() { return null; } @java.lang.Override public java.lang.String getPassword() { return null; } }); } org.apache.http.client.config.RequestConfig globalConfig = org.apache.http.client.config.RequestConfig.custom().setCookieSpec(CookieSpecs.IGNORE_COOKIES).setConnectTimeout(timeout).build(); org.apache.http.impl.client.HttpClientBuilder clientBuilder = org.apache.http.impl.client.HttpClientBuilder.create().setConnectionManager(new org.apache.http.impl.conn.BasicHttpClientConnectionManager(createConnectionSocketFactoryRegistry())).setDefaultRequestConfig(globalConfig).setDefaultCredentialsProvider(credsProvider).setDefaultAuthSchemeRegistry(authSchemeProvider); if (!(compress)) { clientBuilder.disableContentCompression(); } return new org.ovirt.engine.sdk4.internal.HttpClient45(clientBuilder.build()); }	@java.lang.Override protected org.ovirt.engine.sdk4.HttpClient createHttpClient() { int port = getPort(); org.apache.http.config.Lookup<org.apache.http.auth.AuthSchemeProvider> authSchemeProvider = null; org.apache.http.client.CredentialsProvider credsProvider = new org.apache.http.impl.client.BasicCredentialsProvider(); org.apache.http.auth.AuthScope authScope = new org.apache.http.auth.AuthScope(getHost(), port, org.apache.http.auth.AuthScope.ANY_REALM, org.apache.http.auth.AuthScope.ANY_SCHEME); if (((user) != null) && ((user.length()) > 0)) { credsProvider.setCredentials(authScope, new org.apache.http.auth.UsernamePasswordCredentials(user, password)); } else if (kerberos) { authSchemeProvider = org.apache.http.config.RegistryBuilder.<org.apache.http.auth.AuthSchemeProvider>create().register(AuthSchemes.SPNEGO, new org.apache.http.impl.auth.SPNegoSchemeFactory(true)).build(); credsProvider.setCredentials(authScope, new org.apache.http.auth.Credentials() { @java.lang.Override public java.security.Principal getUserPrincipal() { return null; } @java.lang.Override public java.lang.String getPassword() { return null; } }); } org.apache.http.client.config.RequestConfig globalConfig = org.apache.http.client.config.RequestConfig.custom().setCookieSpec(CookieSpecs.IGNORE_COOKIES).setConnectTimeout(timeout).build(); org.apache.http.impl.client.HttpClientBuilder clientBuilder = org.apache.http.impl.client.HttpClientBuilder.create().setConnectionManager(new org.apache.http.impl.conn.BasicHttpClientConnectionManager(createConnectionSocketFactoryRegistry())).setDefaultRequestConfig(globalConfig).setDefaultCredentialsProvider(credsProvider).setDefaultAuthSchemeRegistry(authSchemeProvider); if (!(compress)) { clientBuilder.disableContentCompression(); } return new org.ovirt.engine.sdk4.internal.HttpClient45(clientBuilder.build()); }
private java.lang.String getProxyUri() { <START_MOD>java.lang.String<END_MOD> <START_MOD>scheme<END_MOD> <START_MOD>=<END_MOD> (org.ovirt.engine.core.common.config.Config.<java.lang.<START_MOD>Boolean<END_MOD>>getValue(ConfigValues.<START_MOD>ImageProxySSLEnabled<END_MOD>))<START_MOD> ? "https" : "http"; java.lang.String address = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.ImageProxyAddress); return ((scheme + "://") + address<END_MOD>) + "/images"; }	private java.lang.String getProxyUri() { java.lang.String scheme = (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.ImageProxySSLEnabled)) ? org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.HTTPS_SCHEME : org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.HTTP_SCHEME; java.lang.String address = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.ImageProxyAddress); return (scheme + address) + (org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.IMAGES_PATH); }
private java.lang.String getImageDaemonUri(java.lang.String daemonHostname) { java.lang.String scheme = (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.ImageDaemonSSLEnabled)) ? "https" : "http"; java.lang.String port = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.ImageDaemonPort); return (((scheme + "://") + daemonHostname) + ":") + port; }	private java.lang.String getImageDaemonUri(java.lang.String daemonHostname) { java.lang.String port = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.ImageDaemonPort); return (((org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.HTTPS_SCHEME) + daemonHostname) + ":") + port; }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__TYPE__GLUSTER_BRICK); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__TYPE__GLUSTER_BRICK); }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (<START_MOD>(!(getParameters().isForceAction())) || ((getParameters().getAction()) != (org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskOperation.COMMIT))) { addCanDoActionMessage(VdcBllMessages.ACTION_NOT_SUPPORTED_FOR_CLUSTER_POOL_LEVEL); return false; } if (<END_MOD>!(getGlusterVolume().isOnline())) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_IS_DOWN); return false; } if (((getParameters().getExistingBrick()) == null) || ((getParameters().getNewBrick()) == null)) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED); return false; } if (!(updateBrickServerAndInterfaceName(getParameters().getExistingBrick(), true))) { return false; } if (!(updateBrickServerAndInterfaceName(getParameters().getNewBrick(), true))) { return false; } if (!(isValidVolumeBrick(getParameters().getExistingBrick()))) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NOT_A_GLUSTER_VOLUME_BRICK); return false; } return true; }	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (!(getGlusterVolume().getVolumeType().isReplicatedType())) { addValidationMessage(EngineMessage.ACTION_TYPE_NOT_SUPPORTED_FOR_VOLUME_TYPE); return false; } if (!(getGlusterVolume().isOnline())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_IS_DOWN); return false; } if (((getGlusterVolume().getAsyncTask()) != null) && (((getGlusterVolume().getAsyncTask().getStatus()) == (org.ovirt.engine.core.common.job.JobExecutionStatus.STARTED)) || (((getGlusterVolume().getAsyncTask().getType()) == (org.ovirt.engine.core.common.asynctasks.gluster.GlusterTaskType.REMOVE_BRICK)) && ((getGlusterVolume().getAsyncTask().getStatus()) == (org.ovirt.engine.core.common.job.JobExecutionStatus.FINISHED))))) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_HAS_RUNNING_TASKS); return false; } if (((getParameters().getExistingBrick()) == null) || ((getParameters().getNewBrick()) == null)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_BRICKS_REQUIRED); return false; } if (!(isValidVolumeBrick(getParameters().getExistingBrick()))) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_NOT_A_GLUSTER_VOLUME_BRICK); return false; } if (!(updateBrickServerAndInterfaceName(getParameters().getNewBrick(), true))) { return false; } return true; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.ReplaceGlusterVolumeBrick, new org.ovirt.engine.core.common.vdscommands.gluster.ReplaceGlusterVolumeBrickActionVDSParameters(upServer.getId(), getGlusterVolumeName(), getParameters().getAction(), getParameters().getExistingBrick().getQualifiedName(), getParameters().getNewBrick().getQualifiedName(), getParameters().isForceAction())); <START_MOD>setSucceeded(returnValue.getSucceeded()); <END_MOD>if (getSucceeded()) { <START_MOD>if ((getParameters().getAction()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskOperation.COMMIT)) { getGlusterBrickDao().replaceBrick(getParameters().getExistingBrick(), getParameters().getNewBrick()); } } else { handleVdsError(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_FAILED, <END_MOD>returnValue.getVdsError().getMessage()); return; } }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.ReplaceGlusterVolumeBrick, new org.ovirt.engine.core.common.vdscommands.gluster.ReplaceGlusterVolumeBrickActionVDSParameters(upServer.getId(), getGlusterVolumeName(), getParameters().getExistingBrick().getQualifiedName(), getParameters().getNewBrick().getQualifiedName())); setSucceeded(returnValue.getSucceeded()); if (getSucceeded()) { getParameters().getNewBrick().setStatus(getParameters().getExistingBrick().getStatus()); getGlusterBrickDao().replaceBrick(getParameters().getExistingBrick(), getParameters().getNewBrick()); } else { handleVdsError(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_FAILED, returnValue.getVdsError().getMessage()); return; } }
private static org.ovirt.engine.core.common.businessentities.network.NetworkFilter fetchVnicProfileNetworkFilter(org.ovirt.engine.core.common.businessentities.network.VmNic vmNic) { org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVnicProfileDao().get(vmNic.getVnicProfileId()); final org.ovirt.engine.core.compat.Guid networkFilterId = vnicProfile.getNetworkFilterId(); return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkFilterDao().getNetworkFilterById(networkFilterId); }	private static org.ovirt.engine.core.common.businessentities.network.NetworkFilter fetchVnicProfileNetworkFilter(org.ovirt.engine.core.common.businessentities.network.VmNic vmNic) { if ((vmNic.getVnicProfileId()) != null) { org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVnicProfileDao().get(vmNic.getVnicProfileId()); if (vnicProfile != null) { final org.ovirt.engine.core.compat.Guid networkFilterId = vnicProfile.getNetworkFilterId(); return networkFilterId == null ? null : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkFilterDao().getNetworkFilterById(networkFilterId); } } return null; }
public static void addNetworkFiltersToNic(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.<START_MOD>common<END_MOD>.<START_MOD>businessentities.network.VmNic<END_MOD> <START_MOD>vmNic<END_MOD>) { <START_MOD>final<END_MOD> org.ovirt.engine.core.common.<START_MOD>businessentities<END_MOD>.<START_MOD>network.NetworkFilter<END_MOD> <START_MOD>networkFilter<END_MOD> <START_MOD>= <END_MOD>org.ovirt.engine.core.<START_MOD>vdsbroker<END_MOD>.<START_MOD>vdsbroker<END_MOD>.<START_MOD>VmInfoBuilder<END_MOD>.<START_MOD>fetchVnicProfileNetworkFilter(vmNic); if (networkFilter.isConfigurable()) { final <END_MOD>java.lang.<START_MOD>String networkFilterName = networkFilter.getName<END_MOD>()<START_MOD>;<END_MOD> struct.put(VdsProperties.NW_FILTER, <START_MOD>networkFilterName<END_MOD>); } }	public static void addNetworkFiltersToNic(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VmNic vmNic) { final org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.fetchVnicProfileNetworkFilter(vmNic); if (networkFilter != null) { final java.lang.String networkFilterName = networkFilter.getName(); struct.put(VdsProperties.NW_FILTER, networkFilterName); } }
private void addNetworkInterfaceProperties(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VmNic vmInterface, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.lang.String nicModel, org.ovirt.engine.core.compat.Version clusterVersion) { struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); if (org.ovirt.engine.core.common.FeatureSupported.networkLinking(clusterVersion)) { struct.put(VdsProperties.LINK_ACTIVE, java.lang.String.valueOf(vmInterface.isLinked())); } org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); struct.put(VdsProperties.MAC_ADDR, vmInterface.getMacAddress()); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addBootOrder(vmDevice, struct); struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); struct.put(VdsProperties.NIC_TYPE, nicModel); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addProfileDataToNic(struct, vm, vmDevice, vmInterface); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addNetworkFiltersToNic(struct, <START_MOD>vmInterface<END_MOD>); }	private void addNetworkInterfaceProperties(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VmNic vmInterface, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.lang.String nicModel) { struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); struct.put(VdsProperties.LINK_ACTIVE, java.lang.String.valueOf(vmInterface.isLinked())); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); struct.put(VdsProperties.MAC_ADDR, vmInterface.getMacAddress()); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addBootOrder(vmDevice, struct); struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); struct.put(VdsProperties.NIC_TYPE, nicModel); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addProfileDataToNic(struct, vm, vmDevice, vmInterface); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addNetworkFiltersToNic(struct, vmInterface); }
@org.junit.Test public void newVnicProfileInValidNetworkFilterId() { initVnicProfileInvalidNetworkFIlterId(); assertThat(validator.validNetworkFilterForNewVnicProfile(), networkFilterFailureMatcher()); }	@org.junit.Test public void testValidNetworkFilterIdNoDefaultNoFilterId() { assertThat(validator.validUseDefaultNetworkFilterFlag(false), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
public org.ovirt.engine.core.bll.ValidationResult validNetworkFilterForNewVnicProfile() { return validateVnicProfileNetworkFilter(true); }	public org.ovirt.engine.core.bll.ValidationResult validNetworkFilterId() { final org.ovirt.engine.core.compat.Guid networkFilterId = getNetworkFilterId(); if (networkFilterId == null) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = networkFilterDao.getNetworkFilterById(networkFilterId); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_INVALID_VNIC_PROFILE_NETWORK_FILTER_ID, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.VnicProfileValidator.VAR_VNIC_PROFILE_NAME, vnicProfile.getName()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.VnicProfileValidator.VAR_NETWORK_FILTER_ID, networkFilterId)).when((networkFilter == null)); }
private org.ovirt.engine.core.bll.ValidationResult validateVnicProfileNetworkFilter(boolean nullFilterIdIsValid) { if ((getNetworkFilterId()) == null) { return nullFilterIdIsValid ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VNIC_PROFILE_IS_MISSING_NETWORK_FILTER_ID, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.VnicProfileValidator.VAR_VNIC_PROFILE_NAME, vnicProfile.getName())); } final org.ovirt.engine.core.compat.Guid networkFilterId = getNetworkFilterId(); org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = networkFilterDao.getNetworkFilterById(networkFilterId); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_INVALID_VNIC_PROFILE_NETWORK_FILTER_ID, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.VnicProfileValidator.VAR_VNIC_PROFILE_NAME, vnicProfile.getName()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.VnicProfileValidator.VAR_NETWORK_FILTER_ID, networkFilterId)).when((networkFilter == null)); }	public org.ovirt.engine.core.bll.ValidationResult validUseDefaultNetworkFilterFlag(boolean useDefaultNetworkFilterId) { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_INVALID_VNIC_PROFILE_NETWORK_ID_CONFIGURATION, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.VnicProfileValidator.VAR_VNIC_PROFILE_NAME, vnicProfile.getName()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.VnicProfileValidator.VAR_NETWORK_FILTER_ID, vnicProfile.getNetworkFilterId())).when((useDefaultNetworkFilterId && ((vnicProfile.getNetworkFilterId()) != null))); }
@org.junit.Before public void setup() { validator = spy(new org.ovirt.engine.core.bll.validator.VnicProfileValidator(vmDao<START_MOD>, networkFilterDao<END_MOD>, vnicProfile)); doReturn(dbFacade).when(validator).getDbFacade(); when(dbFacade.getVnicProfileDao()).thenReturn(vnicProfileDao); when(dbFacade.getNetworkDao()).thenReturn(networkDao); when(dbFacade.getNetworkQosDao()).thenReturn(networkQosDao); when(dbFacade.getVmDao()).thenReturn(vmDao); <START_MOD>initNetworkFilterDao(); <END_MOD>when(vnicProfileDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vnicProfile); when(vnicProfileDao.getAllForNetwork(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vnicProfiles); }	@org.junit.Before public void setup() { validator = spy(new org.ovirt.engine.core.bll.validator.VnicProfileValidator(vnicProfile, vmDao, dcDao, networkFilterDao)); doReturn(dbFacade).when(validator).getDbFacade(); when(dbFacade.getVnicProfileDao()).thenReturn(vnicProfileDao); when(dbFacade.getNetworkDao()).thenReturn(networkDao); when(dbFacade.getNetworkQosDao()).thenReturn(networkQosDao); when(dbFacade.getVmDao()).thenReturn(vmDao); initNetworkFilterDao(); when(vnicProfileDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vnicProfile); when(vnicProfileDao.getAllForNetwork(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vnicProfiles); }
private void initNetworkFilterDao() { when(dbFacade.getNetworkFilterDao()).thenReturn(networkFilterDao); when(networkFilterDao.getNetworkFilterById(org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.INVALID_NETWORK_FILTER_ID)).thenReturn(null); when(networkFilterDao.getNetworkFilterById(org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.VALID_NETWORK_FILTER_ID)).thenReturn(new org.ovirt.engine.core.common.businessentities.network.NetworkFilter(org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.VALID_NETWORK_FILTER_ID)); }	private void initNetworkFilterDao() { when(networkFilterDao.getNetworkFilterById(org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.INVALID_NETWORK_FILTER_ID)).thenReturn(null); when(networkFilterDao.getNetworkFilterById(org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.VALID_NETWORK_FILTER_ID)).thenReturn(new org.ovirt.engine.core.common.businessentities.network.NetworkFilter(org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.VALID_NETWORK_FILTER_ID)); }
@org.junit.Test public void newVnicProfileNoNetworkFilterId() { when(vnicProfile.getNetworkFilterId()).thenReturn(null); assertThat(validator.validNetworkFilterForNewVnicProfile(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }	@org.junit.Test public void testValidNetworkFilterIdUseDefaultNoFilterId() { assertThat(validator.validUseDefaultNetworkFilterFlag(true), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
@org.junit.Test public void updateVnicProfileValidNetworkFilterId() { when(vnicProfile.getNetworkFilterId()).thenReturn(org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.VALID_NETWORK_FILTER_ID); assertThat(validator.validNetworkFilterForUpdatedVnicProfile(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }	@org.junit.Test public void testValidNetworkFilterIdNoDefaultWithFilterId() { when(vnicProfile.getNetworkFilterId()).thenReturn(org.ovirt.engine.core.compat.Guid.newGuid()); assertThat(validator.validUseDefaultNetworkFilterFlag(false), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
@org.junit.Test public void updateVnicProfileNoNetworkFilterId() { when(vnicProfile.getName()).thenReturn(org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.DEFAULT_VNIC_PROFILE_NAME); assertThat(validator.validNetworkFilterForUpdatedVnicProfile(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_VNIC_PROFILE_IS_MISSING_NETWORK_FILTER_ID, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(VnicProfileValidator.VAR_VNIC_PROFILE_NAME, org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.DEFAULT_VNIC_PROFILE_NAME))); }	@org.junit.Test public void validVnicProfileNetworkFilterId() { when(vnicProfile.getNetworkFilterId()).thenReturn(org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.VALID_NETWORK_FILTER_ID); assertThat(validator.validNetworkFilterId(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
private org.hamcrest.Matcher<org.ovirt.engine.core.bll.ValidationResult> networkFilterFailureMatcher() { return org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_INVALID_VNIC_PROFILE_NETWORK_FILTER_ID, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(VnicProfileValidator.VAR_VNIC_PROFILE_NAME, org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.DEFAULT_VNIC_PROFILE_NAME), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(VnicProfileValidator.VAR_NETWORK_FILTER_ID, org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.INVALID_NETWORK_FILTER_ID)); }	private void initVnicProfileNetworkFilterId(org.ovirt.engine.core.compat.Guid networkFilterId, java.lang.String name) { when(vnicProfile.getNetworkFilterId()).thenReturn(networkFilterId); when(vnicProfile.getName()).thenReturn(name); }
@org.junit.Test public void newVnicProfileValidNetworkFilterId() { when(vnicProfile.getNetworkFilterId()).thenReturn(org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.VALID_NETWORK_FILTER_ID); assertThat(validator.validNetworkFilterForNewVnicProfile(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }	@org.junit.Test public void testValidNetworkFilterIdUseDefaultWithFilterId() { initVnicProfileNetworkFilterId(org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.VALID_NETWORK_FILTER_ID, org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.DEFAULT_VNIC_PROFILE_NAME); assertThat(validator.validUseDefaultNetworkFilterFlag(true), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_INVALID_VNIC_PROFILE_NETWORK_ID_CONFIGURATION, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(VnicProfileValidator.VAR_VNIC_PROFILE_NAME, org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.DEFAULT_VNIC_PROFILE_NAME), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(VnicProfileValidator.VAR_NETWORK_FILTER_ID, org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.VALID_NETWORK_FILTER_ID))); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. vNIC profile '{$VAR_VNIC_PROFILE_NAME}' has an invalid network filter id '{$VAR_NETWORK_FILTER_ID}'.") java.lang.String ACTION_TYPE_FAILED_INVALID_VNIC_PROFILE_NETWORK_FILTER_ID();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Bad format of an IPv6 address.") java.lang.String BAD_IPV6_ADDRESS_FORMAT();
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. vNIC profile '{$VAR_VNIC_PROFILE_NAME}' is missing a network filter id.") java.lang.String ACTION_TYPE_FAILED_VNIC_PROFILE_IS_MISSING_NETWORK_FILTER_ID();	@org.ovirt.engine.ui.frontend.DefaultStringValue("Bad format of IPv4 gateway address") java.lang.String IPV4_ADDR_GATEWAY_BAD_FORMAT();
private void initVnicProfileInvalidNetworkFIlterId() { when(vnicProfile.getNetworkFilterId()).thenReturn(org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.INVALID_NETWORK_FILTER_ID); when(vnicProfile.getName()).thenReturn(org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.DEFAULT_VNIC_PROFILE_NAME); }	@org.junit.Test public void invalidVnicProfileNetworkFilterId() { initVnicProfileNetworkFilterId(org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.INVALID_NETWORK_FILTER_ID, org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.DEFAULT_VNIC_PROFILE_NAME); assertThat(validator.validNetworkFilterId(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_INVALID_VNIC_PROFILE_NETWORK_FILTER_ID, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(VnicProfileValidator.VAR_VNIC_PROFILE_NAME, org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.DEFAULT_VNIC_PROFILE_NAME), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(VnicProfileValidator.VAR_NETWORK_FILTER_ID, org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.INVALID_NETWORK_FILTER_ID))); }
@org.junit.Test public void updateVnicProfileInValidNetworkFilterId() { initVnicProfileInvalidNetworkFIlterId(); assertThat(validator.validNetworkFilterForUpdatedVnicProfile(), networkFilterFailureMatcher()); }	@org.junit.Test public void validVnicProfileNullNetworkFilterId() { when(vnicProfile.getNetworkFilterId()).thenReturn(null); assertThat(validator.validNetworkFilterId(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
private void updateDefaultNetworkFilterIfRequired() { org.ovirt.engine.core.compat.Guid networkFilterId = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getNetworkFilterId(); if (networkFilterId == null) { final org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = resolveVnicProfileDefaultNetworkFilter(); networkFilterId = networkFilter.getId(); org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getVnicProfile().setNetworkFilterId(networkFilterId); } }	private void updateDefaultNetworkFilterIfRequired() { if (org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().isUseDefaultNetworkFiterId()) { final org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = resolveVnicProfileDefaultNetworkFilter(); if (networkFilter != null) { final org.ovirt.engine.core.compat.Guid networkFilterId = networkFilter.getId(); setNetworkFilterId(networkFilterId); } } }
private org.ovirt.engine.core.common.businessentities.network.NetworkFilter resolveVnicProfileDefaultNetworkFilter() { final org.ovirt.engine.core.compat.Version dataCenterVersion = resolveDataCenterVersion(); final java.lang.String networkFilterName = ((org.ovirt.engine.core.common.FeatureSupported.antiMacSpoofing(dataCenterVersion)) && (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EnableMACAntiSpoofingFilterRules))) ? org.ovirt.engine.core.common.businessentities.network.NetworkFilter.VDSM_NO_MAC_SPOOFING : org.ovirt.engine.core.common.businessentities.network.NetworkFilter.NON_CONFIGURABLE_NETWORK_FILTER; org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = networkFilterDao.getNetworkFilterByName(networkFilterName); return networkFilter; }	private org.ovirt.engine.core.common.businessentities.network.NetworkFilter resolveVnicProfileDefaultNetworkFilter() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EnableMACAntiSpoofingFilterRules)) { return networkFilterDao.getNetworkFilterByName(NetworkFilter.VDSM_NO_MAC_SPOOFING); } return null; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (getPassthrough().getEntity()) { getPortMirroring().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().portMirroringNotChangedIfPassthrough()); getPortMirroring().setIsChangeable(false); getPortMirroring().setEntity(false); getNetworkQoS().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().networkQosNotChangedIfPassthrough()); getNetworkQoS().setIsChangeable(false); getNetworkQoS().setSelectedItem(NetworkQoSModel.EMPTY_QOS); <START_MOD>getNetworkFilter().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().networkFilterNotChangedIfPassthrough()); getNetworkFilter().setIsChangeable(false); getNetworkFilter().setSelectedItem(null); <END_MOD>} else { getPortMirroring().setIsChangeable(true); getNetworkQoS().setIsChangeable(true); <START_MOD>getNetworkFilter().setIsChangeable(true); <END_MOD>} }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (getPassthrough().getEntity()) { getPortMirroring().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().portMirroringNotChangedIfPassthrough()); getPortMirroring().setIsChangeable(false); getPortMirroring().setEntity(false); getNetworkQoS().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().networkQosNotChangedIfPassthrough()); getNetworkQoS().setIsChangeable(false); getNetworkQoS().setSelectedItem(NetworkQoSModel.EMPTY_QOS); getNetworkFilter().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().networkFilterNotChangedIfPassthrough()); getNetworkFilter().setIsChangeable(false); getNetworkFilter().setSelectedItem(org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel.EMPTY_FILTER); } else { getPortMirroring().setIsChangeable(true); getNetworkQoS().setIsChangeable(true); getNetworkFilter().setIsChangeable(true); } }
private void initPassthroughChangeListener() { getPassthrough().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (getPassthrough().getEntity()) { getPortMirroring().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().portMirroringNotChangedIfPassthrough()); getPortMirroring().setIsChangeable(false); getPortMirroring().setEntity(false); getNetworkQoS().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().networkQosNotChangedIfPassthrough()); getNetworkQoS().setIsChangeable(false); getNetworkQoS().setSelectedItem(NetworkQoSModel.EMPTY_QOS); <START_MOD>getNetworkFilter().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().networkFilterNotChangedIfPassthrough()); getNetworkFilter().setIsChangeable(false); getNetworkFilter().setSelectedItem(null); <END_MOD>} else { getPortMirroring().setIsChangeable(true); getNetworkQoS().setIsChangeable(true); <START_MOD>getNetworkFilter().setIsChangeable(true); } } }); }<END_MOD>	private void initPassthroughChangeListener() { getPassthrough().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (getPassthrough().getEntity()) { getPortMirroring().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().portMirroringNotChangedIfPassthrough()); getPortMirroring().setIsChangeable(false); getPortMirroring().setEntity(false); getNetworkQoS().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().networkQosNotChangedIfPassthrough()); getNetworkQoS().setIsChangeable(false); getNetworkQoS().setSelectedItem(NetworkQoSModel.EMPTY_QOS); getNetworkFilter().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().networkFilterNotChangedIfPassthrough()); getNetworkFilter().setIsChangeable(false); getNetworkFilter().setSelectedItem(org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel.EMPTY_FILTER); } else { getPortMirroring().setIsChangeable(true); getNetworkQoS().setIsChangeable(true); getNetworkFilter().setIsChangeable(true); } } }); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkFilter> networkFilters = new java.util.ArrayList(((java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkFilter>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()))); networkFilters.add(null); final org.ovirt.engine.core.common.businessentities.network.NetworkFilter selectedNetworkFilter = (((vnicProfile) == null) || ((vnicProfile.getNetworkFilterId()) == null)) ? null : org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(networkFilters, new org.ovirt.engine.ui.uicommonweb.Linq.IdPredicate<>(vnicProfile.getNetworkFilterId())); getNetworkFilter().setItems(networkFilters, selectedNetworkFilter); }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkFilter> networkFilters = new java.util.ArrayList(((java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkFilter>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()))); networkFilters.add(org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel.EMPTY_FILTER); getNetworkFilter().setItems(networkFilters); initSelectedNetworkFilter(); }
public void initNetworkFilterList(org.ovirt.engine.core.compat.Version dcCompatibilityVersion) { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkFilter> networkFilters = new java.util.ArrayList(((java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkFilter>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()))); networkFilters.add(null); final org.ovirt.engine.core.common.businessentities.network.NetworkFilter selectedNetworkFilter = (((vnicProfile) == null) || ((vnicProfile.getNetworkFilterId()) == null)) ? null : org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(networkFilters, new org.ovirt.engine.ui.uicommonweb.Linq.IdPredicate<>(vnicProfile.getNetworkFilterId())); getNetworkFilter().setItems(networkFilters, selectedNetworkFilter); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllSupportedNetworkFiltersByVersion, new org.ovirt.engine.core.common.action.VersionQueryParameters(dcCompatibilityVersion), asyncQuery); }	public void initNetworkFilterList(org.ovirt.engine.core.compat.Version dcCompatibilityVersion) { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkFilter> networkFilters = new java.util.ArrayList(((java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkFilter>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()))); networkFilters.add(org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel.EMPTY_FILTER); getNetworkFilter().setItems(networkFilters); initSelectedNetworkFilter(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllSupportedNetworkFiltersByVersion, new org.ovirt.engine.core.common.action.VersionQueryParameters(dcCompatibilityVersion), asyncQuery); }
private void checkTimeout() throws java.util.concurrent.TimeoutException { java.lang.String message = org.ovirt.engine.core.vdsbroker.vdsbroker.FutureVDSCommand.getReturnStatus().message; if ("Internal timeout occured".equals(message)) { throw new java.util.concurrent.TimeoutException(message); } }	private void checkTimeout() throws java.util.concurrent.TimeoutException { java.lang.String message = org.ovirt.engine.core.vdsbroker.vdsbroker.FutureVDSCommand.getReturnStatus().message; if (org.ovirt.engine.core.vdsbroker.vdsbroker.FutureVDSCommand.TIMEOUT_MESSAGE.equals(message)) { throw new java.util.concurrent.TimeoutException(message); } }
@java.lang.Override protected void init() { disk = <START_MOD>org.ovirt.engine.core.bll.DiskHandler.<END_MOD>loadDisk(org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getParameters().getEntityInfo().getId()<START_MOD>, org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getParameters().getSnapshotId()<END_MOD>); }	@java.lang.Override protected void init() { disk = diskHandler.loadDiskFromSnapshot(org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getParameters().getEntityInfo().getId(), org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getParameters().getSnapshotId()); }
protected boolean addVmImages() { if (!(vmDisksSource.getDiskTemplateMap().isEmpty())) { if ((org.ovirt.engine.core.bll.AddVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { log.error( add images. VM is not Down throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IRS_IMAGE_STATUS_ILLEGAL); } <START_MOD>lockVM(<END_MOD>); java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDisks = getImagesToCheckDestinationStorageDomains(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(templateDisks, true, false, true); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : diskImages) { org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalActionWithTasksContext(<START_MOD>getDiskCreationCommandType()<END_MOD>, buildCreateSnapshotFromTemplateParameters(image)); if (!(result.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(result.getFault().getError()); } else { org.ovirt.engine.core.bll.AddVmCommand.getTaskIdList().addAll(result.getInternalVdsmTaskIdList()); org.ovirt.engine.core.common.businessentities.storage.DiskImage newImage = result.getActionReturnValue(); srcDiskIdToTargetDiskIdMapping.put(image.getId(), newImage.getId()); } } addVmCinderDisks(templateDisks); } return true; }	protected boolean addVmImages() { if (!(vmDisksSource.getDiskTemplateMap().isEmpty())) { if ((org.ovirt.engine.core.bll.AddVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { log.error("Cannot add images. VM is not Down"); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IRS_IMAGE_STATUS_ILLEGAL); } lockVM(); java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDisks = getImagesToCheckDestinationStorageDomains(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(templateDisks, true, false, true); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : diskImages) { org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalActionWithTasksContext(getDiskCreationCommandType(), buildDiskCreationParameters(image)); if (!(result.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(result.getFault().getError()); } else { org.ovirt.engine.core.bll.AddVmCommand.getTaskIdList().addAll(result.getInternalVdsmTaskIdList()); org.ovirt.engine.core.common.businessentities.storage.DiskImage newImage = result.getActionReturnValue(); srcDiskIdToTargetDiskIdMapping.put(image.getId(), newImage.getId()); } } addVmCinderDisks(templateDisks); } return true; }
@javax.ws.rs.DELETE @javax.ws.rs.Consumes({ "application/xml", "application/json" }) public javax.ws.rs.core.Response remove(@javax.ws.rs.core.Context javax.ws.rs.core.UriInfo ui, org.ovirt.engine.api.v3.types.V3Action action) { if (action.isSetDetach()) { javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> query = ui.getQueryParameters(); query.putSingle("detach_only", action.isDetach().toString()); } return adaptRemove(getDelegate()::remove); }	@javax.ws.rs.DELETE @javax.ws.rs.Consumes({ "application/xml", "application/json" }) public javax.ws.rs.core.Response remove(org.ovirt.engine.api.v3.types.V3Action action) { javax.ws.rs.core.Response response = adaptRemove(getDelegate()::remove); if ((!(action.isSetDetach())) || (!(action.isDetach()))) { org.ovirt.engine.api.resource.DisksResource disksResource = org.ovirt.engine.api.restapi.resource.BackendApiResource.getInstance().getDisksResource(); org.ovirt.engine.api.resource.DiskResource diskResource = disksResource.getDiskResource(id); response = adaptRemove(diskResource::remove); } return response; }
private void writeAnnotationParameter(org.ovirt.api.metamodel.concepts.AnnotationParameter parameter) { writeName(parameter); java.util.List<java.lang.String> values = parameter.getValues(); if (!(values.isEmpty())) { writer.writeStartElement("values"); values.forEach(( x) -> writer.writeElement("value", x)); writer.writeEndElement(); } }	private void writeAnnotationParameter(org.ovirt.api.metamodel.concepts.AnnotationParameter parameter) { writer.writeStartElement("parameter"); writeName(parameter); java.util.List<java.lang.String> values = parameter.getValues(); if (!(values.isEmpty())) { writer.writeStartElement("values"); values.forEach(( x) -> writer.writeElement("value", x)); writer.writeEndElement(); } writer.writeEndElement(); }
protected void updateMigrationPolicies() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getMigrationPolicies(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { getModel().getMigrationPolicies().setItems(((java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy>) (returnValue))); } })); }	public void updateNumOfIoThreads() { getModel().getIoThreadsEnabled().setIsChangeable(true); getModel().getNumOfIoThreads().setIsChangeable(true); getModel().getNumOfIoThreads().setIsAvailable(getModel().getIoThreadsEnabled().getEntity()); if ((getModel().getIoThreadsEnabled().getEntity()) && ((getModel().getNumOfIoThreads().getEntity()) == 0)) { getModel().getNumOfIoThreads().setEntity(org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase.DEFAULT_NUM_OF_IOTHREADS); } }
public void getMigrationPolicies(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object returnValue, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { if (returnValue == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.migration.MigrationPolicy>(); } <START_MOD>java.util.Collections.sort(((java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy>) (returnValue)), new java.util.Comparator<org.ovirt.engine.core.common.migration.MigrationPolicy>() { @java.lang.Override public int compare(org.ovirt.engine.core.common.migration.MigrationPolicy m1, org.ovirt.engine.core.common.migration.MigrationPolicy m2) { if ((m1.getId()) == null) { <END_MOD>return <START_MOD>-1; } return m1.getName().compareTo(m2.getName()); } }); return <END_MOD>returnValue; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllMigrationPolicies, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }	public java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy> getMigrationPolicies() { return migrationPolicies; }
@java.lang.Override public void initialize(org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel systemTreeSelectedItem) { super.initialize(systemTreeSelectedItem); getModel().getIsSoundcardEnabled().setIsChangeable(true); getModel().getVmType().setIsChangeable(true); getModel().getVmId().setIsAvailable(true); loadDataCenters(); <START_MOD>updateMigrationPolicies(); <END_MOD>initPriority(0); getModel().getVmInitModel().init(null); instanceTypeManager = new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.NewVmInstanceTypeManager(getModel()); }	@java.lang.Override public void initialize(org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel systemTreeSelectedItem) { super.initialize(systemTreeSelectedItem); getModel().getIsSoundcardEnabled().setIsChangeable(true); getModel().getVmType().setIsChangeable(true); getModel().getVmId().setIsAvailable(true); loadDataCenters(); initPriority(0); getModel().getVmInitModel().init(null); instanceTypeManager = new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.NewVmInstanceTypeManager(getModel()); }
<START_MOD>public <END_MOD>static org.ovirt.engine.core.common.businessentities.network.BondMode parseBondMode(java.lang.String bondOptions) { return bondOptions == null ? null : org.ovirt.engine.core.common.businessentities.network.BondMode.getBondMode(org.ovirt.engine.core.common.businessentities.network.BondMode.findMode(bondOptions)); }	static org.ovirt.engine.core.common.businessentities.network.BondMode parseBondMode(java.lang.String bondOptions) { return bondOptions == null ? null : org.ovirt.engine.core.common.businessentities.network.BondMode.getBondMode(org.ovirt.engine.core.common.businessentities.network.BondMode.findMode(bondOptions)); }
protected org.ovirt.engine.core.common.businessentities.storage.Disk getOldDisk() { if ((oldDisk) == null) { oldDisk = org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskDao().get(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getParameters().<START_MOD>getDiskInfo().getId<END_MOD>()); } return oldDisk; }	protected org.ovirt.engine.core.common.businessentities.storage.Disk getOldDisk() { if (((oldDisk) == null) && ((org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getParameters().getDiskInfo()) != null)) { oldDisk = org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskDao().get(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getParameters().getDiskInfo().getId()); } return oldDisk; }
@org.junit.Test public void testAddIpv4BootProtocol() { final java.util.Map<java.lang.String, java.lang.Object> opts = new java.util.HashMap<>(); underTest.addIpv4BootProtocol(opts, mockHostNetwork); assertTrue(opts.isEmpty()); }	@org.junit.Test public void testAddIpv4BootProtocolWithNoAddressSet() { final java.util.Map<java.lang.String, java.lang.Object> opts = new java.util.HashMap<>(); underTest.addIpv4BootProtocol(opts, mockHostNetwork); assertTrue(opts.isEmpty()); }
@org.junit.Test public void testIsHostedEngineHost() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = dao.getAll(); for (org.ovirt.engine.core.common.businessentities.VDS host : result) { assertNotNull(host.isHostedEngineHost()); } }	private void setupHostedEngineTests(boolean isHostedEngineVm, int vmCount) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic(); vmStatic.setId(org.ovirt.engine.core.dao.VdsDaoTest.newVmId); vmStatic.setOrigin((isHostedEngineVm ? org.ovirt.engine.core.common.businessentities.OriginType.MANAGED_HOSTED_ENGINE : org.ovirt.engine.core.common.businessentities.OriginType.RHEV)); dbFacade.getVmStaticDao().save(vmStatic); org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic(); vmDynamic.setId(org.ovirt.engine.core.dao.VdsDaoTest.newVmId); vmDynamic.setStatus(VMStatus.Up); vmDynamic.setRunOnVds(existingVds.getId()); dbFacade.getVmDynamicDao().save(vmDynamic); existingVds.setVmCount(vmCount); dbFacade.getVdsDynamicDao().update(existingVds.getDynamicData()); }
private java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> getSafeHtmlStringMap(org.ovirt.engine.core.common.businessentities.VDS object) { org.ovirt.engine.core.common.businessentities.VDS host = getEntityObject(object); java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = new java.util.LinkedHashMap<>(); org.ovirt.engine.core.common.businessentities.ExternalStatus externalStatus = host.getExternalStatus(); if (host.isUpdateAvailable()) { imagesToText.put(getImageSafeHtml(resources.updateAvailableImage()), org.ovirt.engine.ui.webadmin.widget.table.column.HostAdditionalStatusColumn.constants.updateAvailable()); } if ((externalStatus != null) && ((host.getExternalStatus()) != (org.ovirt.engine.core.common.businessentities.ExternalStatus.Ok))) { com.google.gwt.resources.client.ImageResource statusImage = getStatusImage(externalStatus); if (statusImage != null) { imagesToText.put(getImageSafeHtml(statusImage), ((org.ovirt.engine.ui.webadmin.widget.table.column.HostAdditionalStatusColumn.constants.ExternalStatus()) + (externalStatus.name()))); } } <START_MOD>if (host.isHostedEngineHost()) { imagesToText.put(getImageSafeHtml(resources.watchdogDeviceGeneralTypeIcon()), org.ovirt.engine.ui.webadmin.widget.table.column.HostAdditionalStatusColumn.constants.actionItems()); } <END_MOD>return imagesToText; }	private java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> getSafeHtmlStringMap(org.ovirt.engine.core.common.businessentities.VDS object) { org.ovirt.engine.core.common.businessentities.VDS host = getEntityObject(object); java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = new java.util.LinkedHashMap<>(); org.ovirt.engine.core.common.businessentities.ExternalStatus externalStatus = host.getExternalStatus(); if (host.isUpdateAvailable()) { imagesToText.put(getImageSafeHtml(resources.updateAvailableImage()), org.ovirt.engine.ui.webadmin.widget.table.column.HostAdditionalStatusColumn.constants.updateAvailable()); } if ((externalStatus != null) && ((host.getExternalStatus()) != (org.ovirt.engine.core.common.businessentities.ExternalStatus.Ok))) { com.google.gwt.resources.client.ImageResource statusImage = getStatusImage(externalStatus); if (statusImage != null) { imagesToText.put(getImageSafeHtml(statusImage), ((org.ovirt.engine.ui.webadmin.widget.table.column.HostAdditionalStatusColumn.constants.ExternalStatus()) + (externalStatus.name()))); } } if (host.isHostedEngineHost()) { imagesToText.put(getImageSafeHtml(resources.mgmtNetwork()), org.ovirt.engine.ui.webadmin.widget.table.column.HostAdditionalStatusColumn.constants.actionItems()); } return imagesToText; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Version.class, to = org.ovirt.engine.api.model.Version.class) public static org.ovirt.engine.api.model.Version map(org.ovirt.engine.core.compat.Version versionEngine, org.ovirt.engine.api.model.Version versionApi) { if (versionApi == null) { versionApi = new org.ovirt.engine.api.model.Version(); } versionApi.setMajor(<START_MOD>((<END_MOD>versionEngine.getMajor())<START_MOD> >=   ? versionEngine.getMajor() : null))<END_MOD>; versionApi.setMinor(<START_MOD>((<END_MOD>versionEngine.getMinor())<START_MOD> >=   ? versionEngine.getMinor() : null))<END_MOD>; versionApi.setBuild(<START_MOD>((<END_MOD>versionEngine.getBuild())<START_MOD> >=   ? versionEngine.getBuild() : null))<END_MOD>; versionApi.setRevision(<START_MOD>((<END_MOD>versionEngine.getRevision())<START_MOD> >=   ? versionEngine.getRevision() : null))<END_MOD>; return versionApi; }	public static org.ovirt.engine.api.model.Version map(org.ovirt.engine.core.compat.Version versionEngine) { org.ovirt.engine.api.model.Version versionApi = new org.ovirt.engine.api.model.Version(); versionApi.setMajor(((versionEngine.getMajor()) >= 0 ? versionEngine.getMajor() : null)); versionApi.setMinor(((versionEngine.getMinor()) >= 0 ? versionEngine.getMinor() : null)); versionApi.setBuild(((versionEngine.getBuild()) >= 0 ? versionEngine.getBuild() : null)); versionApi.setRevision(((versionEngine.getRevision()) >= 0 ? versionEngine.getRevision() : null)); return versionApi; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Version.class, to = org.ovirt.engine.api.model.Version.class) public static org.ovirt.engine.api.model.Version map(org.ovirt.engine.api.model.Version versionApi, org.ovirt.engine.core.compat.Version versionEngine) { return new org.ovirt.engine.core.compat.Version(((versionApi.getMajor()) != null ? versionApi.getMajor() : -1), ((versionApi.getMinor()) != null ? versionApi.getMinor() : -1), ((versionApi.getBuild()) != null ? versionApi.getBuild() : -1), ((versionApi.getRevision()) != null ? versionApi.getRevision() : -1)); }	public static org.ovirt.engine.api.model.Version map(org.ovirt.engine.api.model.Version versionApi) { return new org.ovirt.engine.core.compat.Version(((versionApi.getMajor()) != null ? versionApi.getMajor() : -1), ((versionApi.getMinor()) != null ? versionApi.getMinor() : -1), ((versionApi.getBuild()) != null ? versionApi.getBuild() : -1), ((versionApi.getRevision()) != null ? versionApi.getRevision() : -1)); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DataCenter.class, to = org.ovirt.engine.core.common.businessentities.StoragePool.class) public static org.ovirt.engine.core.common.businessentities.StoragePool map(org.ovirt.engine.api.model.DataCenter model, org.ovirt.engine.core.common.businessentities.StoragePool template) { org.ovirt.engine.core.common.businessentities.StoragePool entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.StoragePool(); if (model.isSetId()) { entity.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if (model.isSetName()) { entity.setName(model.getName()); } if (model.isSetDescription()) { entity.setdescription(model.getDescription()); } if (model.isSetComment()) { entity.setComment(model.getComment()); } if (model.isSetLocal()) { entity.setIsLocal(model.isLocal()); } if (model.isSetStorageFormat()) { entity.setStoragePoolFormatType(org.ovirt.engine.api.restapi.types.StorageFormatMapper.map(model.getStorageFormat(), null)); } if (((model.isSetVersion()) && ((model.getVersion().getMajor()) != null)) && ((model.getVersion().getMinor()) != null)) { entity.setCompatibilityVersion(<START_MOD>org.ovirt.engine.api.restapi.types.VersionMapper.map<END_MOD>(model.getVersion(), <START_MOD>null<END_MOD>)); } if ((model.isSetMacPool()) && (model.getMacPool().isSetId())) { entity.setMacPoolId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getMacPool().getId())); } if (model.isSetQuotaMode()) { entity.setQuotaEnforcementType(org.ovirt.engine.api.restapi.types.DataCenterMapper.map(model.getQuotaMode())); } return entity; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DataCenter.class, to = org.ovirt.engine.core.common.businessentities.StoragePool.class) public static org.ovirt.engine.core.common.businessentities.StoragePool map(org.ovirt.engine.api.model.DataCenter model, org.ovirt.engine.core.common.businessentities.StoragePool template) { org.ovirt.engine.core.common.businessentities.StoragePool entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.StoragePool(); if (model.isSetId()) { entity.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if (model.isSetName()) { entity.setName(model.getName()); } if (model.isSetDescription()) { entity.setdescription(model.getDescription()); } if (model.isSetComment()) { entity.setComment(model.getComment()); } if (model.isSetLocal()) { entity.setIsLocal(model.isLocal()); } if (model.isSetStorageFormat()) { entity.setStoragePoolFormatType(org.ovirt.engine.api.restapi.types.StorageFormatMapper.map(model.getStorageFormat(), null)); } if (((model.isSetVersion()) && ((model.getVersion().getMajor()) != null)) && ((model.getVersion().getMinor()) != null)) { entity.setCompatibilityVersion(org.ovirt.engine.api.restapi.types.VersionMapper.map(model.getVersion())); } if ((model.isSetMacPool()) && (model.getMacPool().isSetId())) { entity.setMacPoolId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getMacPool().getId())); } if (model.isSetQuotaMode()) { entity.setQuotaEnforcementType(org.ovirt.engine.api.restapi.types.DataCenterMapper.map(model.getQuotaMode())); } return entity; }
public java.lang.String getCompatibilityVersionHost() { return compatibilityVersionHost; }	public java.lang.String getClusterCompatibilityVersion() { return clusterCompatibilityVersion; }
public void setCompatibilityVersionHost(java.lang.String compatibilityVersionHost) { if (!(java.util.Objects.equals(this.compatibilityVersionHost, compatibilityVersionHost))) { this.compatibilityVersionHost = compatibilityVersionHost; onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("compatibilityVersionHost")); } }	public void setClusterCompatibilityVersion(java.lang.String clusterCompatibilityVersion) { if (!(java.util.Objects.equals(this.clusterCompatibilityVersion, clusterCompatibilityVersion))) { this.clusterCompatibilityVersion = clusterCompatibilityVersion; onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("clusterCompatibilityVersion")); } }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Compatibility Version") java.lang.String compatibilityVersionHost();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("Cluster Compatibility Version") java.lang.String clusterCompatibilityVersion();
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Provider<?>> getAllByType(org.ovirt.engine.core.common.businessentities.ProviderType providerType) { return getCallsHandler().executeReadList("GetAllFromProvidersByType", org.ovirt.engine.core.dao.provider.ProviderDaoImpl.ProviderRowMapper.INSTANCE, getCustomMapSqlParameterSource().addValue("provider_type", providerType)); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Provider<?>> getAllByTypes(org.ovirt.engine.core.common.businessentities.ProviderType... providerTypes) { if (providerTypes == null) { return java.util.Collections.emptyList(); } return getCallsHandler().executeReadList("GetAllFromProvidersByTypes", org.ovirt.engine.core.dao.provider.ProviderDaoImpl.ProviderRowMapper.INSTANCE, getCustomMapSqlParameterSource().addValue("provider_types", createArrayOf("varchar", java.util.Arrays.stream(providerTypes).map(ProviderType::name).toArray()))); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.ProviderType providerType = org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getParameters().getProviderType(); <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.ProviderType> providerTypes = org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getParameters().getProviderTypes(); <END_MOD>if (providerType == null) { setReturnValue(org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getDbFacade().getProviderDao().getAll()); } else <START_MOD>if (providerTypes != null) <END_MOD>{ setReturnValue(org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getDbFacade().getProviderDao().<START_MOD>getAllByTypes(providerTypes)); } else { setReturnValue(org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getDbFacade().getProviderDao().<END_MOD>getAllByType(providerType)); } }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.ProviderType[] providerTypes = org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getParameters().getProviderTypes(); if (providerTypes == null) { setReturnValue(org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getDbFacade().getProviderDao().getAll()); } else { setReturnValue(org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getDbFacade().getProviderDao().getAllByTypes(providerTypes)); } }
public java.util.List<org.ovirt.engine.core.common.businessentities.ProviderType> getProviderTypes() { return providerTypes; }	public org.ovirt.engine.core.common.businessentities.ProviderType[] getProviderTypes() { return providerTypes; }
private void adjustRemoveExternalOptions(java.util.Set<org.ovirt.engine.core.compat.Guid> externalProviderIds) { if (externalProviderIds.isEmpty()) { return; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllProviders, new org.ovirt.engine.core.common.queries.GetAllProvidersParameters(<START_MOD>java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>Arrays<END_MOD>.<START_MOD>asList(<END_MOD>ProviderType.EXTERNAL_NETWORK<START_MOD>, ProviderType.OPENSTACK_NETWORK)<END_MOD>), createProviderReadOnlyCallback(externalProviderIds)); }	private void adjustRemoveExternalOptions(java.util.Set<org.ovirt.engine.core.compat.Guid> externalProviderIds) { if (externalProviderIds.isEmpty()) { return; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllProviders, new org.ovirt.engine.core.common.queries.GetAllProvidersParameters(org.ovirt.engine.core.common.businessentities.ProviderType.EXTERNAL_NETWORK, org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_NETWORK), createProviderReadOnlyCallback(externalProviderIds)); }
public void loadVmsFromKvm() { clearProblem(); if (!(validateKvmConfiguration())) { return; } loadVMsFromExternalProvider(OriginType.KVM, getKvmUri().getEntity(), getKvmUsername().getEntity(), getKvmPassword().getEntity()); }	public void loadVmsFromKvm() { clearProblem(); if (!(validateKvmConfiguration())) { return; } org.ovirt.engine.core.compat.Guid proxyId = ((getXenProxyHosts().getSelectedItem()) != null) ? getXenProxyHosts().getSelectedItem().getId() : null; loadVMsFromExternalProvider(OriginType.KVM, getKvmUri().getEntity(), getKvmUsername().getEntity(), getKvmPassword().getEntity(), proxyId); }
private java.util.Map<java.lang.String, java.lang.Object> buildVmGraphicsSpecParamsFromVm(java.util.Map<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.GraphicsInfo> infos) { java.util.Map<java.lang.String, java.lang.Object> specParamsFromVm = null; if (infos != null) { specParamsFromVm = new java.util.HashMap(); <START_MOD>addVmGraphicsOptions<END_MOD>(infos, specParamsFromVm); } return specParamsFromVm; }	private static org.ovirt.engine.core.common.businessentities.network.NetworkFilter fetchVnicProfileNetworkFilter(org.ovirt.engine.core.common.businessentities.network.VmNic vmNic) { if ((vmNic.getVnicProfileId()) != null) { org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVnicProfileDao().get(vmNic.getVnicProfileId()); if (vnicProfile != null) { final org.ovirt.engine.core.compat.Guid networkFilterId = vnicProfile.getNetworkFilterId(); return networkFilterId == null ? null : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkFilterDao().getNetworkFilterById(networkFilterId); } } return null; }
protected void <START_MOD>addVmGraphicsOptions<END_MOD>(java.util.Map<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.GraphicsInfo> infos, java.util.Map<java.lang.String, java.lang.Object> params) { if ((infos != null) && (infos.containsKey(GraphicsType.SPICE))) { params.put(VdsProperties.spiceFileTransferEnable, java.lang.Boolean.toString(vm.isSpiceFileTransferEnabled())); params.put(VdsProperties.spiceCopyPasteEnable, java.lang.Boolean.toString(vm.isSpiceCopyPasteEnabled())); <START_MOD>if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.SSLEnabled)) { params.put(VdsProperties.spiceSslCipherSuite, org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.CipherSuite)); params.put(VdsProperties.SpiceSecureChannels, org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.SpiceSecureChannels, vm.getCompatibilityVersion().toString())); } } if ((infos != null) && (infos.containsKey(GraphicsType.VNC))) { java.lang.String keyboardLayout = vm.getDynamicData().getVncKeyboardLayout(); if (keyboardLayout == null) { keyboardLayout = vm.getDefaultVncKeyboardLayout(); if (keyboardLayout == null) { keyboardLayout = org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.VncKeyboardLayout); } } params.put(VdsProperties.KeyboardLayout, keyboardLayout); params.put(VdsProperties.TabletEnable, "true"); } }<END_MOD>	protected void addVmGraphicsOptions(java.util.Map<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.GraphicsInfo> infos, java.util.Map<java.lang.String, java.lang.Object> params) { if ((infos != null) && (infos.containsKey(GraphicsType.SPICE))) { params.put(VdsProperties.spiceFileTransferEnable, java.lang.Boolean.toString(vm.isSpiceFileTransferEnabled())); params.put(VdsProperties.spiceCopyPasteEnable, java.lang.Boolean.toString(vm.isSpiceCopyPasteEnabled())); if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.SSLEnabled)) { params.put(VdsProperties.spiceSslCipherSuite, org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.CipherSuite)); params.put(VdsProperties.SpiceSecureChannels, org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.SpiceSecureChannels, vm.getCompatibilityVersion().toString())); } } if ((infos != null) && (infos.containsKey(GraphicsType.VNC))) { java.lang.String keyboardLayout = vm.getDynamicData().getVncKeyboardLayout(); if (keyboardLayout == null) { keyboardLayout = vm.getDefaultVncKeyboardLayout(); if (keyboardLayout == null) { keyboardLayout = org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.VncKeyboardLayout); } } params.put(VdsProperties.KeyboardMap, keyboardLayout); } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.OpenStackNetworkProviderType.class, to = org.ovirt.engine.core.common.businessentities.ProviderType.class) private static org.ovirt.engine.core.common.businessentities.ProviderType map(org.ovirt.engine.api.model.OpenStackNetworkProviderType type) { if (OpenStackNetworkProviderType.NEUTRON.name().equals(type.name().toUpperCase())) { return org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_NETWORK; } if (OpenStackNetworkProviderType.EXTERNAL.name().equals(type.name().toUpperCase())) { return org.ovirt.engine.core.common.businessentities.ProviderType.EXTERNAL_NETWORK; } throw new java.lang.IllegalArgumentException((("Unknown network provider type \"" + (type.name())) + "\"")); }	private static org.ovirt.engine.core.common.businessentities.ProviderType mapProviderType(org.ovirt.engine.api.model.OpenStackNetworkProviderType type) { switch (type) { case NEUTRON : return org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_NETWORK; case EXTERNAL : return org.ovirt.engine.core.common.businessentities.ProviderType.EXTERNAL_NETWORK; } throw new java.lang.IllegalArgumentException((("Unknown network provider type \"" + (type.name())) + "\"")); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.ProviderType.class, to = org.ovirt.engine.api.model.OpenStackNetworkProviderType.class) private static org.ovirt.engine.api.model.OpenStackNetworkProviderType map(org.ovirt.engine.core.common.businessentities.ProviderType type) { if (ProviderType.OPENSTACK_NETWORK.name().equals(type.name().toUpperCase())) { return org.ovirt.engine.api.model.OpenStackNetworkProviderType.NEUTRON; } if (ProviderType.EXTERNAL_NETWORK.name().equals(type.name().toUpperCase())) { return org.ovirt.engine.api.model.OpenStackNetworkProviderType.EXTERNAL; } throw new java.lang.IllegalArgumentException((("ProviderType not allowed: \"" + (type.name())) + "\"")); }	private static org.ovirt.engine.api.model.OpenStackNetworkProviderType mapProviderType(org.ovirt.engine.core.common.businessentities.ProviderType type) { switch (type) { case OPENSTACK_NETWORK : return org.ovirt.engine.api.model.OpenStackNetworkProviderType.NEUTRON; case EXTERNAL_NETWORK : return org.ovirt.engine.api.model.OpenStackNetworkProviderType.EXTERNAL; } throw new java.lang.IllegalArgumentException((("Provider type not allowed: \"" + (type.name())) + "\"")); }
@java.lang.Override public javax.ws.rs.core.Response install(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.businessentities.VDS vds = getEntity(); org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters(vds.getStaticData(), action.getRootPassword(), true); params<START_MOD>.setFenceAgents(vds.getFenceAgents()); params<END_MOD> = ((org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters) (getMapper(org.ovirt.engine.api.model.Action.class, org.ovirt.engine.core.common.action.VdsOperationActionParameters.class).map(action, params))); if (vds.isOvirtNode()) { params.setReinstallOrUpgrade(true); if (action.isSetImage()) { params.setoVirtIsoFile(action.getImage()); return doAction(VdcActionType.UpgradeOvirtNode, params, action); } } return doAction(VdcActionType.UpdateVds, params, action); }	@java.lang.Override public javax.ws.rs.core.Response install(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.businessentities.VDS vds = getEntity(); org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters(vds.getStaticData(), action.getRootPassword(), true); params.setFenceAgents(null); params = ((org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters) (getMapper(org.ovirt.engine.api.model.Action.class, org.ovirt.engine.core.common.action.VdsOperationActionParameters.class).map(action, params))); if (vds.isOvirtNode()) { params.setReinstallOrUpgrade(true); if (action.isSetImage()) { params.setoVirtIsoFile(action.getImage()); return doAction(VdcActionType.UpgradeOvirtNode, params, action); } } return doAction(VdcActionType.UpdateVds, params, action); }
protected void subscribe(java.lang.String eventKey) { org.ovirt.engine.core.common.businessentities.CommandEntity commandEntity = buildCommandEntity(getCommandId(), false); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.subscribe(eventKey, commandEntity); }	protected void subscribe(java.lang.String eventKey) { org.ovirt.engine.core.common.businessentities.CommandEntity commandEntity = buildCommandEntity(getCommandId(), true); commandEntity.setWaitingForEvent(true); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.subscribe(eventKey, commandEntity); }
@java.lang.Override public void subscribe(java.lang.String eventKey, org.ovirt.engine.core.common.businessentities.CommandEntity commandEntity) { getResourceManager().subscribe(new org.ovirt.engine.core.bll.tasks.CommandCoordinatorImpl.CoCoEventSubscriber(eventKey, commandEntity)); }	@java.lang.Override public void subscribe(java.lang.String eventKey, org.ovirt.engine.core.common.businessentities.CommandEntity commandEntity) { commandsRepository.persistCommand(commandEntity); org.ovirt.engine.core.bll.tasks.CoCoEventSubscriber subscriber = new org.ovirt.engine.core.bll.tasks.CoCoEventSubscriber(eventKey, commandEntity, commandsRepository); getResourceManager().subscribe(subscriber); commandsRepository.addEventSubscription(commandEntity, subscriber); }
@org.junit.Test public void testQueryWithHostId() { org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(vdsId); vds.setVdsType(VDSType.<START_MOD>oVirtLegacyNode<END_MOD>); vds.setHostOs(org.ovirt.engine.core.bll.hostdeploy.GetoVirtISOsTest.AVAILABLE_OVIRT_ISO_VERSION); vds.setClusterCompatibilityVersion(org.ovirt.engine.core.bll.hostdeploy.GetoVirtISOsTest.EXISTING_CLUSTER_VERSION); when(vdsDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vds); when(getQueryParameters().getId()).thenReturn(vdsId); getQuery().setInternalExecution(true); getQuery().executeCommand(); org.ovirt.engine.core.bll.CommandAssertUtils.checkSucceeded(getQuery(), true); org.ovirt.engine.core.bll.hostdeploy.GetoVirtISOsTest.checkReturnValueEmpty(getQuery()); }	@org.junit.Test public void testQueryWithHostId() { org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(vdsId); vds.setVdsType(VDSType.oVirtVintageNode); vds.setHostOs(org.ovirt.engine.core.bll.hostdeploy.GetoVirtISOsTest.AVAILABLE_OVIRT_ISO_VERSION); when(vdsDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vds); when(getQueryParameters().getId()).thenReturn(vdsId); getQuery().setInternalExecution(true); getQuery().executeCommand(); org.ovirt.engine.core.bll.CommandAssertUtils.checkSucceeded(getQuery(), true); org.ovirt.engine.core.bll.hostdeploy.GetoVirtISOsTest.checkReturnValueEmpty(getQuery()); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VDSType getHostType() { return org.ovirt.engine.core.common.businessentities.VDSType.<START_MOD>oVirtLegacyNode<END_MOD>; }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.VDSType getHostType() { return org.ovirt.engine.core.common.businessentities.VDSType.oVirtVintageNode; }
@org.junit.Test public void testQueryClusterLevel() { org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(vdsId); vds.setVdsType(VDSType.<START_MOD>oVirtLegacyNode<END_MOD>); vds.setHostOs(org.ovirt.engine.core.bll.hostdeploy.GetoVirtISOsTest.UNAVAILABLE_OVIRT_ISO_VERSION); vds.setClusterCompatibilityVersion(org.ovirt.engine.core.bll.hostdeploy.GetoVirtISOsTest.EXISTING_CLUSTER_VERSION); when(vdsDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vds); when(getQueryParameters().getId()).thenReturn(vdsId); getQuery().setInternalExecution(true); getQuery().executeCommand(); org.ovirt.engine.core.bll.CommandAssertUtils.checkSucceeded(getQuery(), true); org.ovirt.engine.core.bll.hostdeploy.GetoVirtISOsTest.checkReturnValueEmpty(getQuery()); }	@org.junit.Test public void testQueryClusterLevel() { org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(vdsId); vds.setVdsType(VDSType.oVirtVintageNode); vds.setHostOs(org.ovirt.engine.core.bll.hostdeploy.GetoVirtISOsTest.UNAVAILABLE_OVIRT_ISO_VERSION); when(vdsDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vds); when(getQueryParameters().getId()).thenReturn(vdsId); getQuery().setInternalExecution(true); getQuery().executeCommand(); org.ovirt.engine.core.bll.CommandAssertUtils.checkSucceeded(getQuery(), true); org.ovirt.engine.core.bll.hostdeploy.GetoVirtISOsTest.checkReturnValueEmpty(getQuery()); }
@org.junit.Test public void testGetAllOfTypeWithUnrepresentedType() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = dao.getAllOfType(VDSType.<START_MOD>oVirtLegacyNode<END_MOD>); org.ovirt.engine.core.dao.VdsDaoTest.assertIncorrectGetResult(result); }	@org.junit.Test public void testGetAllOfTypeWithUnrepresentedType() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = dao.getAllOfType(VDSType.oVirtVintageNode); org.ovirt.engine.core.dao.VdsDaoTest.assertIncorrectGetResult(result); }
@org.junit.Test public void testGetAllOfTypesWithUnrepresentedTypes() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = dao.getAllOfTypes(new org.ovirt.engine.core.common.businessentities.VDSType[]{ org.ovirt.engine.core.common.businessentities.VDSType.<START_MOD>oVirtLegacyNode<END_MOD> }); org.ovirt.engine.core.dao.VdsDaoTest.assertIncorrectGetResult(result); }	@org.junit.Test public void testGetAllOfTypesWithUnrepresentedTypes() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = dao.getAllOfTypes(new org.ovirt.engine.core.common.businessentities.VDSType[]{ org.ovirt.engine.core.common.businessentities.VDSType.oVirtVintageNode }); org.ovirt.engine.core.dao.VdsDaoTest.assertIncorrectGetResult(result); }
public boolean isOvirtNode() { return (getVdsType()) == (VDSType.<START_MOD>oVirtLegacyNode<END_MOD>); }	public boolean isHostedEngineHost() { return hostedEngineHost; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.VDSType.class, to = org.ovirt.engine.api.model.HostType.class) public static org.ovirt.engine.api.model.HostType map(org.ovirt.engine.core.common.businessentities.VDSType type, org.ovirt.engine.api.model.HostType template) { switch (type) { case VDS : return org.ovirt.engine.api.model.HostType.RHEL; case <START_MOD>oVirtLegacyNode<END_MOD> : return org.ovirt.engine.api.model.HostType.RHEV_H; default : return null; } }	@org.ovirt.engine.api.restapi.types.Mapping(from = java.lang.String.class, to = org.ovirt.engine.api.model.OsType.class) public static org.ovirt.engine.api.model.OsType map(java.lang.String osType, org.ovirt.engine.api.model.OsType template) { return org.ovirt.engine.api.model.OsType.fromValue(osType); }
public java.lang.Boolean call() throws java.lang.Exception { if (((java.lang.Boolean) (_deploy.getParser().cliEnvironmentGet(VdsmEnv.<START_MOD>OVIRT_LEGACY_NODE<END_MOD>)))) { _deploy.userVisibleLog(java.util.logging.Level.INFO,   is hypervisor setNode(); } return true; }	public java.lang.Boolean call() throws java.lang.Exception { if (((java.lang.Boolean) (_deploy.getParser().cliEnvironmentGet(VdsmEnv.OVIRT_VINTAGE_NODE)))) { _deploy.userVisibleLog(java.util.logging.Level.INFO, "Host is hypervisor"); setNode(); } return true; }
@org.junit.Test public void imageProvidedForOvirtNode() { when(host.getVdsType()).thenReturn(VDSType.<START_MOD>oVirtLegacyNode<END_MOD>); java.lang.String imageName = org.ovirt.engine.core.utils.RandomUtils.instance().nextString(20); assertThat(validator.imageProvidedForOvirtNode(imageName), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }	@org.junit.Test public void imageProvidedForOvirtNode() { when(host.getVdsType()).thenReturn(VDSType.oVirtVintageNode); java.lang.String imageName = org.ovirt.engine.core.utils.RandomUtils.instance().nextString(20); assertThat(validator.imageProvidedForOvirtNode(imageName), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
private void setNode() { _isNode = true; _deploy.getVds().setVdsType(VDSType.<START_MOD>oVirtLegacyNode<END_MOD>); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsStaticDao().update(_deploy.getVds().getStaticData()); return null; }); }	private void setNode() { _isNode = true; _deploy.getVds().setVdsType(VDSType.oVirtVintageNode); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsStaticDao().update(_deploy.getVds().getStaticData()); return null; }); }
private org.ovirt.engine.core.bll.host.UpdateAvailable create(org.ovirt.engine.core.common.businessentities.VDSType hostType) { for (org.ovirt.engine.core.bll.host.UpdateAvailable hostUpdater : hostUpdaters) { <START_MOD>java.util.EnumSet<org.ovirt.engine.core.common.businessentities.VDSType><END_MOD> <START_MOD>hostTypes<END_MOD> <START_MOD>=<END_MOD> hostUpdater.getHostType()<START_MOD>; if (hostTypes.contains(hostType<END_MOD>)) { return hostUpdater; } } org.ovirt.engine.core.bll.host.AvailableUpdatesFinder.log.error( instantiate host available strategy for unknown host type '{}' hostType); throw new java.lang.RuntimeException( instantiate host available strategy for unknown host type }	private org.ovirt.engine.core.bll.host.UpdateAvailable create(org.ovirt.engine.core.common.businessentities.VDSType hostType) { for (org.ovirt.engine.core.bll.host.UpdateAvailable hostUpdater : hostUpdaters) { java.util.EnumSet<org.ovirt.engine.core.common.businessentities.VDSType> hostTypes = hostUpdater.getHostTypes(); if (hostTypes.contains(hostType)) { return hostUpdater; } } org.ovirt.engine.core.bll.host.AvailableUpdatesFinder.log.error("Cannot instantiate host available strategy for unknown host type '{}'", hostType); throw new java.lang.RuntimeException("Cannot instantiate host available strategy for unknown host type"); }
<START_MOD>java.util.EnumSet<<END_MOD>org.ovirt.engine.core.common.businessentities.VDSType<START_MOD>><END_MOD> getHostType();	java.util.EnumSet<org.ovirt.engine.core.common.businessentities.VDSType> getHostTypes();
@java.lang.Override public <START_MOD>java.util.EnumSet<<END_MOD>org.ovirt.engine.core.common.businessentities.VDSType<START_MOD>><END_MOD> getHostType() { return <START_MOD>java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>EnumSet<END_MOD>.<START_MOD>of(<END_MOD>VDSType.oVirtLegacyNode<START_MOD>)<END_MOD>; }	@java.lang.Override public java.util.EnumSet<org.ovirt.engine.core.common.businessentities.VDSType> getHostTypes() { return java.util.EnumSet.of(VDSType.oVirtVintageNode); }
public org.ovirt.engine.core.bll.ValidationResult updatesAvailable() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.NO_AVAILABLE_UPDATES_FOR_HOST).unless(((<START_MOD>(<END_MOD>host.isOvirtLegacyNode(<START_MOD>)) || (host.isOvirNode()<END_MOD>)) || (host.isUpdateAvailable()))); }	public org.ovirt.engine.core.bll.ValidationResult updatesAvailable() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.NO_AVAILABLE_UPDATES_FOR_HOST).unless(((host.isOvirtVintageNode()) || (host.isUpdateAvailable()))); }
@java.lang.Override public <START_MOD>java.util.EnumSet<<END_MOD>org.ovirt.engine.core.common.businessentities.VDSType<START_MOD>><END_MOD> getHostType() { return <START_MOD>java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>EnumSet<END_MOD>.<START_MOD>of(<END_MOD>VDSType.VDS<START_MOD>, VDSType.oVirtNode)<END_MOD>; }	@java.lang.Override public java.util.EnumSet<org.ovirt.engine.core.common.businessentities.VDSType> getHostTypes() { return java.util.EnumSet.of(VDSType.VDS, VDSType.oVirtNode); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.SshHostRebootCommand.setVds(null); if ((org.ovirt.engine.core.bll.SshHostRebootCommand.getVds()) == null) { handleError("SSH reboot will not be executed on host {} ({}) since it doesn't exist anymore."); return; } org.ovirt.engine.core.common.businessentities.VDSStatus oldStatus = org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getStatus(); boolean result = executeSshReboot(org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getClusterCompatibilityVersion().toString()); if (result) { setVdsStatus(VDSStatus.Connecting); } else { setVdsStatus(oldStatus); } org.ovirt.engine.core.bll.SshHostRebootCommand.setSucceeded(result); }	@java.lang.Override protected void executeCommand() { boolean result = executeSshReboot(org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getClusterCompatibilityVersion().toString()); if (result) { setVdsStatus(VDSStatus.Initializing); } org.ovirt.engine.core.bll.SshHostRebootCommand.setSucceeded(result); }
private boolean executeSshReboot(java.lang.String version) { boolean ret = false; try (final org.ovirt.engine.core.bll.utils.EngineSSHClient sshClient = new org.ovirt.engine.core.bll.utils.EngineSSHClient();final java.io.ByteArrayOutputStream cmdOut = new java.io.ByteArrayOutputStream();final java.io.ByteArrayOutputStream cmdErr = new java.io.ByteArrayOutputStream()) { try { log.info("Opening SSH reboot session on host {}", org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getHostName()); sshClient.setVds(org.ovirt.engine.core.bll.SshHostRebootCommand.getVds()); sshClient.useDefaultKeyPair(); sshClient.connect(); sshClient.authenticate(); log.info("Executing SSH reboot command on host {}", org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getHostName()); sshClient.executeCommand(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.SshHostRebootCommand, version), null, cmdOut, cmdErr); ret = true; } catch (java.lang.Exception ex) { log.error("SSH reboot command failed on host \'{}\': {}\nStdout: {}\nStderr: {}", org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getHostName(), ex.getMessage(), cmdOut, cmdErr); log.debug("Exception", ex); } } catch (java.io.IOException e) { log.error("IOException", e); } return ret; }	private boolean executeSshReboot(java.lang.String version) { try (final org.ovirt.engine.core.bll.utils.EngineSSHClient sshClient = new org.ovirt.engine.core.bll.utils.EngineSSHClient();final java.io.ByteArrayOutputStream cmdOut = new java.io.ByteArrayOutputStream();final java.io.ByteArrayOutputStream cmdErr = new java.io.ByteArrayOutputStream()) { try { log.info("Opening SSH reboot session on host {}", org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getHostName()); sshClient.setVds(org.ovirt.engine.core.bll.SshHostRebootCommand.getVds()); sshClient.useDefaultKeyPair(); sshClient.connect(); sshClient.authenticate(); log.info("Executing SSH reboot command on host {}", org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getHostName()); sshClient.executeCommand(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.SshHostRebootCommand, version), null, cmdOut, cmdErr); return true; } catch (java.lang.Exception ex) { log.error("SSH reboot command failed on host \'{}\': {}\nStdout: {}\nStderr: {}", org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getHostName(), ex.getMessage(), cmdOut, cmdErr); log.debug("Exception", ex); } } catch (java.io.IOException e) { log.error("IOException", e); } return false; }
@java.lang.Override protected void onPropertyChanged(PropertyChangedEventArgs e) { super.onPropertyChanged(e); if ((<START_MOD>(<END_MOD>e.propertyName.equals("Disks")) || (e.propertyName.equals(DisksAllocationModel.VOLUME_TYPE))) <START_MOD>|| (e.propertyName.equals(DisksAllocationModel.VOLUME_FORMAT))) <END_MOD>{ updateStorageDomainsAvailability(); updateQuotaAvailability(); } }	@java.lang.Override protected void onPropertyChanged(PropertyChangedEventArgs e) { super.onPropertyChanged(e); if ((((e.propertyName.equals("Disks")) || (e.propertyName.equals(DisksAllocationModel.VOLUME_TYPE))) || (e.propertyName.equals(DisksAllocationModel.VOLUME_FORMAT))) || (e.propertyName.equals(DisksAllocationModel.THIN_PROVISIONING))) { updateStorageDomainsAvailability(); updateQuotaAvailability(); } }
private void updateStorageDomainsAvailability() { if ((disks) == null) { return; } for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : disks) { diskModel.getSourceStorageDomain().setIsAvailable(isSourceStorageDomainAvailable); diskModel.getSourceStorageDomainName().setIsAvailable(isSourceStorageDomainNameAvailable); diskModel.getVolumeType().setIsAvailable(isVolumeTypeAvailable); diskModel.getVolumeType().setIsChangeable(isVolumeTypeChangable); diskModel.<START_MOD>getVolumeFormat().setIsAvailable(volumeFormatAvailable); diskModel.getVolumeFormat().setIsChangeable(isVolumeFormatChangeable); diskModel.<END_MOD>getAlias().setIsChangeable(isAliasChangable); <START_MOD>boolean isCinder = (diskModel.getDisk().getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.CINDER); if (isCinder) { diskModel.getVolumeFormat().setIsChangeable(false); diskModel.getVolumeFormat().setSelectedItem(VolumeFormat.RAW); } if ((!(isVolumeFormatChangeable)) && (!isCinder)) { diskModel.getVolumeFormat().setSelectedItem(VolumeFormat.COW); } } }<END_MOD>	private void updateStorageDomainsAvailability() { if ((disks) == null) { return; } for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : disks) { diskModel.getSourceStorageDomain().setIsAvailable(isSourceStorageDomainAvailable); diskModel.getSourceStorageDomainName().setIsAvailable(isSourceStorageDomainNameAvailable); diskModel.getVolumeType().setIsAvailable(isVolumeTypeAvailable); diskModel.getVolumeType().setIsChangeable(isVolumeTypeChangable); diskModel.getVolumeFormat().setIsAvailable(isVolumeFormatAvailable); diskModel.getVolumeFormat().setIsChangeable(isVolumeFormatChangeable); diskModel.getAlias().setIsChangeable(isAliasChangable); boolean isCinder = (diskModel.getDisk().getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.CINDER); if (isCinder) { diskModel.getVolumeFormat().setIsChangeable(false); diskModel.getVolumeFormat().setSelectedItem(VolumeFormat.RAW); } else if (isThinProvisioning) { diskModel.getVolumeFormat().setSelectedItem(VolumeFormat.COW); } } }
public void setIsVolumeFormatChangable(boolean isVolumeFormatChangable) { if ((this.isVolumeFormatChangeable) != isVolumeFormatChangable) { this.isVolumeFormatChangeable = isVolumeFormatChangable; onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs(org.ovirt.engine.ui.uicommonweb.models.storage.DisksAllocationModel.VOLUME_FORMAT)); } }	public void setIsVolumeFormatChangeable(boolean isVolumeFormatChangeable) { if ((this.isVolumeFormatChangeable) != isVolumeFormatChangeable) { this.isVolumeFormatChangeable = isVolumeFormatChangeable; onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs(org.ovirt.engine.ui.uicommonweb.models.storage.DisksAllocationModel.VOLUME_FORMAT)); } }
@java.lang.Override public void provisioning_SelectedItemChanged() { boolean provisioning = getModel().getProvisioning().getEntity(); getModel().getProvisioningThin_IsSelected().setEntity((!provisioning)); getModel().getProvisioningClone_IsSelected().setEntity(provisioning); getModel().getDisksAllocationModel().<START_MOD>setIsVolumeFormatAvailable<END_MOD>(true); getModel().getDisksAllocationModel().<START_MOD>setIsVolumeFormatChangable<END_MOD>(provisioning); getModel().getDisksAllocationModel().setIsAliasChangable(true); initStorageDomains(); }	@java.lang.Override public void provisioning_SelectedItemChanged() { boolean provisioning = getModel().getProvisioning().getEntity(); getModel().getProvisioningThin_IsSelected().setEntity((!provisioning)); getModel().getProvisioningClone_IsSelected().setEntity(provisioning); getModel().getDisksAllocationModel().setIsVolumeFormatAvailable(true); getModel().getDisksAllocationModel().setIsVolumeFormatChangeable(provisioning); getModel().getDisksAllocationModel().setIsThinProvisioning((!provisioning)); getModel().getDisksAllocationModel().setIsAliasChangable(true); initStorageDomains(); }
public void enablePluginInvocation() { canInvokePlugins = true; com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { for (org.ovirt.engine.ui.webadmin.plugin.Plugin plugin : getPlugins()) { initPlugin(plugin); } <START_MOD>org.ovirt.engine.ui.webadmin.plugin.UiPluginsInitializedEvent.fire(org.ovirt.engine.ui.webadmin.plugin.PluginManager.this); <END_MOD>} }); }	public void enablePluginInvocation() { canInvokePlugins = true; com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { initAllPlugins(); } }); }
@java.lang.Override public void execute() { for (org.ovirt.engine.ui.webadmin.plugin.Plugin plugin : getPlugins()) { initPlugin(plugin); } <START_MOD>org.ovirt.engine.ui.webadmin.plugin.UiPluginsInitializedEvent.fire(this); <END_MOD>}	@java.lang.Override public void execute() { initAllPlugins(); }
private java.util.Map<java.lang.String, java.lang.<START_MOD>Integer<END_MOD>> getQxlVideoDeviceSpecParams(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { java.util.Map<java.lang.String, java.lang.<START_MOD>Integer<END_MOD>> specParams = new java.util.HashMap<>(); int heads = (vmBase.getSingleQxlPci()) ? vmBase.getNumOfMonitors() : 1; int vgamem = (org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VgamemVideoRAMSettings.BASE_RAM_SIZE) * heads; int vramMultiplier = getVramMultiplier(vmBase); int vram = (vramMultiplier == 0) ? org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VgamemVideoRAMSettings.DEFAULT_VRAM_SIZE : vramMultiplier * vgamem; specParams.put(VdsProperties.VIDEO_HEADS, heads); specParams.put(VdsProperties.VIDEO_VGAMEM, <START_MOD>vgamem<END_MOD>); specParams.put(VdsProperties.VIDEO_RAM, ((org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VgamemVideoRAMSettings.RAM_MULTIPLIER) * vgamem)); specParams.put(VdsProperties.VIDEO_VRAM, vram); return specParams; }	private java.util.Map<java.lang.String, java.lang.Integer> getQxlVideoDeviceSettings(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { java.util.Map<java.lang.String, java.lang.Integer> settings = new java.util.HashMap<>(); int heads = (vmBase.getSingleQxlPci()) ? vmBase.getNumOfMonitors() : 1; int vgamem = (org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VgamemVideoSettings.BASE_RAM_SIZE) * heads; int vramMultiplier = getVramMultiplier(vmBase); int vram = (vramMultiplier == 0) ? org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VgamemVideoSettings.DEFAULT_VRAM_SIZE : vramMultiplier * vgamem; settings.put(VdsProperties.VIDEO_HEADS, heads); settings.put(VdsProperties.VIDEO_VGAMEM, vgamem); settings.put(VdsProperties.VIDEO_RAM, ((org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VgamemVideoSettings.RAM_MULTIPLIER) * vgamem)); settings.put(VdsProperties.VIDEO_VRAM, vram); return settings; }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.<START_MOD>Integer<END_MOD>> <START_MOD>getVideoDeviceParams<END_MOD>(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { java.util.Map<java.lang.String, java.lang.<START_MOD>Integer<END_MOD>> specParams = new java.util.HashMap<>(); boolean singleQxlPci = vmBase.getSingleQxlPci(); int numOfMonitors = vmBase.getNumOfMonitors(); int heads = (singleQxlPci) ? numOfMonitors : 1; specParams.put(VdsProperties.VIDEO_HEADS, heads); specParams.put(VdsProperties.VIDEO_VRAM, org.ovirt.engine.core.bll.utils.VideoDeviceSettings.LegacyVideoRAMSettings.VRAM_SIZE); if (singleQxlPci) { specParams.put(VdsProperties.VIDEO_RAM, ((org.ovirt.engine.core.bll.utils.VideoDeviceSettings.LegacyVideoRAMSettings.BASE_RAM_SIZE) * heads)); } return specParams; }	@java.lang.Override public java.util.Map<java.lang.String, java.lang.Integer> getVideoDeviceSettings(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { java.util.Map<java.lang.String, java.lang.Integer> settings = new java.util.HashMap<>(); boolean singleQxlPci = vmBase.getSingleQxlPci(); int numOfMonitors = vmBase.getNumOfMonitors(); int heads = (singleQxlPci) ? numOfMonitors : 1; settings.put(VdsProperties.VIDEO_HEADS, heads); settings.put(VdsProperties.VIDEO_VRAM, org.ovirt.engine.core.bll.utils.VideoDeviceSettings.LegacyVideoSettings.VRAM_SIZE); if (singleQxlPci) { settings.put(VdsProperties.VIDEO_RAM, ((org.ovirt.engine.core.bll.utils.VideoDeviceSettings.LegacyVideoSettings.BASE_RAM_SIZE) * heads)); } return settings; }
private static java.util.Map<java.lang.String, java.lang.Integer> getVideoDeviceParams(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return VideoDeviceSettings.selectVideoRAMSettings(vmBase).getVideoDeviceParams(vmBase); }	private static java.util.Map<java.lang.String, java.lang.Integer> getVideoDeviceSettings(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return VideoDeviceSettings.selectVideoSettings(vmBase).getVideoDeviceSettings(vmBase); }
private java.util.Map<java.lang.String, java.lang.<START_MOD>Integer<END_MOD>> getVgaVideoDeviceSpecParams() { return java.util.Collections.singletonMap(VdsProperties.VIDEO_VRAM, org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VgamemVideoRAMSettings.BASE_RAM_SIZE); }	private java.util.Map<java.lang.String, java.lang.Integer> getVgaVideoDeviceSettings() { return java.util.Collections.singletonMap(VdsProperties.VIDEO_VRAM, org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VgamemVideoSettings.BASE_RAM_SIZE); }
public static int totalVideoRAMSizeMb(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Map<java.lang.String, java.lang.Integer> params = org.ovirt.engine.core.bll.utils.VideoDeviceSettings.getVideoDeviceParams(vm.getStaticData()); return (((params.get("ram")) + (params.get("vram"))) + 1023) / 1024; }	public static int totalVideoRAMSizeMb(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Map<java.lang.String, java.lang.Integer> settings = org.ovirt.engine.core.bll.utils.VideoDeviceSettings.getVideoDeviceSettings(vm.getStaticData()); return (((settings.getOrDefault(VdsProperties.VIDEO_RAM, 0)) + (settings.getOrDefault(VdsProperties.VIDEO_VRAM, 0))) + 1023) / 1024; }
public static java.util.Map<java.lang.String, java.lang.Object> getVideoDeviceSpecParams(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { <START_MOD>java.util.Map<java.lang.String,<END_MOD> <START_MOD>java.lang.Object> specParams = new java.util.HashMap<>(); org.ovirt.engine.core.bll.utils.<END_MOD>VideoDeviceSettings.<START_MOD>getVideoDeviceParams<END_MOD>(vmBase).<START_MOD>forEach<END_MOD>(<START_MOD>( k, v) -> specParams.put(k, java.lang.String.valueOf(v))<END_MOD>); <START_MOD>return specParams; <END_MOD>}	public static java.util.Map<java.lang.String, java.lang.Object> getVideoDeviceSpecParams(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return org.ovirt.engine.core.bll.utils.VideoDeviceSettings.getVideoDeviceSettings(vmBase).entrySet().stream().collect(java.util.stream.Collectors.toMap(java.util.Map.Entry::getKey, ( e) -> java.lang.String.valueOf(e.getValue()))); }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.<START_MOD>Integer<END_MOD>> <START_MOD>getVideoDeviceParams<END_MOD>(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { if ((vmBase.getDefaultDisplayType()) == (org.ovirt.engine.core.common.businessentities.DisplayType.qxl)) { return getQxlVideoDeviceSpecParams(vmBase); } else { return getVgaVideoDeviceSpecParams(); } }	@java.lang.Override public java.util.Map<java.lang.String, java.lang.Integer> getVideoDeviceSettings(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { if ((vmBase.getDefaultDisplayType()) == (org.ovirt.engine.core.common.businessentities.DisplayType.qxl)) { return getQxlVideoDeviceSettings(vmBase); } else { return getVgaVideoDeviceSettings(); } }
public abstract java.util.Map<java.lang.String, java.lang.<START_MOD>Integer<END_MOD>> <START_MOD>getVideoDeviceParams<END_MOD>(org.ovirt.engine.core.common.businessentities.VmBase vmBase);	public abstract java.util.Map<java.lang.String, java.lang.Integer> getVideoDeviceSettings(org.ovirt.engine.core.common.businessentities.VmBase vmBase);
private boolean validateStorage() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> vmDisksList = getDisksListForChecks(); vmDisksList = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getDisksDummiesForStorageAllocations(vmDisksList); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allDisks = new java.util.ArrayList(vmDisksList); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> memoryDisksList = null; if (org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().isSaveMemory()) { memoryDisksList = org.ovirt.engine.core.bll.memory.MemoryUtils.createDiskDummies(org.ovirt.engine.core.bll.<START_MOD>utils.VmDeviceUtils.getTotalMemorySizeInBytes(org.ovirt.engine.core.bll.<END_MOD>snapshots.CreateAllSnapshotsFromVmCommand.getVm()), MemoryUtils.METADATA_SIZE_IN_BYTES); if (Guid.Empty.equals(getStorageDomainIdForVmMemory(memoryDisksList))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_NO_SUITABLE_DOMAIN_FOUND); } allDisks.addAll(memoryDisksList); } org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator sdValidator = createMultipleStorageDomainsValidator(allDisks); if (((!(validate(sdValidator.allDomainsExistAndActive()))) || (!(validate(sdValidator.allDomainsWithinThresholds())))) || (!(validateCinder()))) { return false; } if (memoryDisksList == null) { return validate(sdValidator.allDomainsHaveSpaceForNewDisks(vmDisksList)); } return validate(sdValidator.allDomainsHaveSpaceForAllDisks(vmDisksList, memoryDisksList)); }	private boolean validateStorage() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> vmDisksList = getDisksListForChecks(); vmDisksList = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getDisksDummiesForStorageAllocations(vmDisksList); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allDisks = new java.util.ArrayList(vmDisksList); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> memoryDisksList = null; if (org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().isSaveMemory()) { memoryDisksList = org.ovirt.engine.core.bll.memory.MemoryUtils.createDiskDummies(org.ovirt.engine.core.bll.utils.VmUtils.getSnapshotMemorySizeInBytes(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm()), MemoryUtils.METADATA_SIZE_IN_BYTES); if (Guid.Empty.equals(getStorageDomainIdForVmMemory(memoryDisksList))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_NO_SUITABLE_DOMAIN_FOUND); } allDisks.addAll(memoryDisksList); } org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator sdValidator = createMultipleStorageDomainsValidator(allDisks); if (((!(validate(sdValidator.allDomainsExistAndActive()))) || (!(validate(sdValidator.allDomainsWithinThresholds())))) || (!(validateCinder()))) { return false; } if (memoryDisksList == null) { return validate(sdValidator.allDomainsHaveSpaceForNewDisks(vmDisksList)); } return validate(sdValidator.allDomainsHaveSpaceForAllDisks(vmDisksList, memoryDisksList)); }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getMemoryVolumes() { int numOfSnapshots = snapshotsWithMemory.size(); long memorySize = numOfSnapshots * (org.ovirt.engine.core.bll.<START_MOD>utils.VmDeviceUtils.getTotalMemorySizeInBytes(org.ovirt.engine.core.bll.<END_MOD>exportimport.ExportVmCommand.getVm())); long metadataSize = numOfSnapshots * (org.ovirt.engine.core.bll.memory.MemoryUtils.METADATA_SIZE_IN_BYTES); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> memoryDisksList = org.ovirt.engine.core.bll.memory.MemoryUtils.createDiskDummies(memorySize, metadataSize); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> sdId = new java.util.ArrayList(java.util.Collections.singletonList(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getStorageDomainId())); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : memoryDisksList) { diskImage.setStorageIds(sdId); } return memoryDisksList; }	private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getMemoryVolumes() { int numOfSnapshots = snapshotsWithMemory.size(); long memorySize = numOfSnapshots * (org.ovirt.engine.core.bll.utils.VmUtils.getSnapshotMemorySizeInBytes(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm())); long metadataSize = numOfSnapshots * (org.ovirt.engine.core.bll.memory.MemoryUtils.METADATA_SIZE_IN_BYTES); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> memoryDisksList = org.ovirt.engine.core.bll.memory.MemoryUtils.createDiskDummies(memorySize, metadataSize); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> sdId = new java.util.ArrayList(java.util.Collections.singletonList(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getStorageDomainId())); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : memoryDisksList) { diskImage.setStorageIds(sdId); } return memoryDisksList; }
private org.ovirt.engine.core.common.businessentities.StorageDomain updateStorageDomainInMemoryVolumes(java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksList) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> memoryDisksList = org.ovirt.engine.core.bll.memory.MemoryUtils.createDiskDummies(org.ovirt.engine.core.bll.<START_MOD>utils.VmDeviceUtils.getTotalMemorySizeInBytes(org.ovirt.engine.core.bll.<END_MOD>exportimport.ImportVmCommand.getVm()), MemoryUtils.METADATA_SIZE_IN_BYTES); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.bll.memory.MemoryStorageHandler.getInstance().findStorageDomainForMemory(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getStoragePoolId(), memoryDisksList, getVmDisksDummies(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm()); disksList.addAll(memoryDisksList); return storageDomain; }	private org.ovirt.engine.core.common.businessentities.StorageDomain updateStorageDomainInMemoryVolumes(java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksList) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> memoryDisksList = org.ovirt.engine.core.bll.memory.MemoryUtils.createDiskDummies(org.ovirt.engine.core.bll.utils.VmUtils.getSnapshotMemorySizeInBytes(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm()), MemoryUtils.METADATA_SIZE_IN_BYTES); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.bll.memory.MemoryStorageHandler.getInstance().findStorageDomainForMemory(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getStoragePoolId(), memoryDisksList, getVmDisksDummies(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm()); disksList.addAll(memoryDisksList); return storageDomain; }
public static org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.storage.StorageType storageType) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); image.setSize(<START_MOD>org.ovirt.engine.core.bll.utils.VmDeviceUtils<END_MOD>.getTotalMemorySizeInBytes(<START_MOD>vm<END_MOD>)); image.setVolumeType(org.ovirt.engine.core.bll.memory.MemoryUtils.storageTypeToMemoryVolumeType(storageType)); image.setvolumeFormat(VolumeFormat.RAW); image.setDiskInterface(DiskInterface.VirtIO); return image; }	public static org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.storage.StorageType storageType) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); image.setSize(org.ovirt.engine.core.bll.utils.VmUtils.getSnapshotMemorySizeInBytes(vm)); image.setVolumeType(org.ovirt.engine.core.bll.memory.MemoryUtils.storageTypeToMemoryVolumeType(storageType)); image.setvolumeFormat(VolumeFormat.RAW); image.setDiskInterface(DiskInterface.VirtIO); return image; }
@java.lang.Override public org.ovirt.engine.core.compat.Guid getStorageDomainId() { if ((cachedStorageDomainId) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskDummiesForMemSize = org.ovirt.engine.core.bll.memory.MemoryUtils.createDiskDummies(org.ovirt.engine.core.bll.<START_MOD>utils.VmDeviceUtils.getTotalMemorySizeInBytes(org.ovirt.engine.core.bll.<END_MOD>HibernateVmCommand.getVm()), MemoryUtils.METADATA_SIZE_IN_BYTES); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.bll.memory.MemoryStorageHandler.getInstance().findStorageDomainForMemory(org.ovirt.engine.core.bll.HibernateVmCommand.getStoragePoolId(), diskDummiesForMemSize, org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(org.ovirt.engine.core.bll.HibernateVmCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.HibernateVmCommand.getVmId()), false, false, false), org.ovirt.engine.core.bll.HibernateVmCommand.getVm()); if (storageDomain != null) { cachedStorageDomainId = storageDomain.getId(); } } return cachedStorageDomainId; }	@java.lang.Override public org.ovirt.engine.core.compat.Guid getStorageDomainId() { if ((cachedStorageDomainId) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskDummiesForMemSize = org.ovirt.engine.core.bll.memory.MemoryUtils.createDiskDummies(org.ovirt.engine.core.bll.utils.VmUtils.getSnapshotMemorySizeInBytes(org.ovirt.engine.core.bll.HibernateVmCommand.getVm()), MemoryUtils.METADATA_SIZE_IN_BYTES); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.bll.memory.MemoryStorageHandler.getInstance().findStorageDomainForMemory(org.ovirt.engine.core.bll.HibernateVmCommand.getStoragePoolId(), diskDummiesForMemSize, org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(org.ovirt.engine.core.bll.HibernateVmCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.HibernateVmCommand.getVmId()), false, false, false), org.ovirt.engine.core.bll.HibernateVmCommand.getVm()); if (storageDomain != null) { cachedStorageDomainId = storageDomain.getId(); } } return cachedStorageDomainId; }
<START_MOD>private<END_MOD> <START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>String getSsoToken(final javax<END_MOD>.<START_MOD>servlet<END_MOD>.<START_MOD>http.HttpServletRequest<END_MOD> <START_MOD>request<END_MOD>) { <START_MOD>return ((java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>String) (request<END_MOD>.<START_MOD>getSession<END_MOD>().<START_MOD>getAttribute<END_MOD>(<START_MOD>SessionConstants.SSO_TOKEN_KEY)<END_MOD>)); }	private java.lang.String getSsoToken(final java.lang.String engineSessionId) { return ((java.lang.String) (runQuery(VdcQueryType.GetEngineSessionIdToken, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), engineSessionId))); }
public <T extends org.ovirt.engine.ui.uicommonweb.restapi.HasForeignMenuData> T withSessionId(T consoleImpl) { consoleImpl.setSessionId(<START_MOD>currentUser.getEngineSessionId()<END_MOD>); return consoleImpl; }	public <T extends org.ovirt.engine.ui.uicommonweb.restapi.HasForeignMenuData> T withSsoToken(T consoleImpl) { consoleImpl.setSsoToken(currentUser.getSsoToken()); return consoleImpl; }
protected org.codehaus.jackson.node.ObjectNode <START_MOD>getUserInfoObject<END_MOD>(<START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.businessentities.aaa.DbUser<END_MOD> <START_MOD>loggedInUser<END_MOD>, java.lang.<START_MOD>String<END_MOD> <START_MOD>engineSessionId, java.lang.String ssoToken<END_MOD>) { org.codehaus.jackson.node.ObjectNode obj = createObjectNode(); obj.put(<START_MOD>"id"<END_MOD>, <START_MOD>loggedInUser<END_MOD>.<START_MOD>getId()<END_MOD>.<START_MOD>toString<END_MOD>()); obj.put(<START_MOD>"userName"<END_MOD>, <START_MOD>loggedInUser<END_MOD>.<START_MOD>getLoginName()); obj<END_MOD>.<START_MOD>put("domain", loggedInUser<END_MOD>.<START_MOD>getDomain<END_MOD>()<START_MOD>); obj.put("engineSessionId", engineSessionId); obj.put("ssoToken", ssoToken<END_MOD>); return obj; }	protected org.codehaus.jackson.node.ObjectNode getUserInfoObject(org.ovirt.engine.core.common.businessentities.aaa.DbUser loggedInUser, java.lang.String engineSessionId, java.lang.String ssoToken) { org.codehaus.jackson.node.ObjectNode obj = createObjectNode(); obj.put("id", loggedInUser.getId().toString()); obj.put("userName", loggedInUser.getLoginName()); obj.put("domain", loggedInUser.getDomain()); obj.put("isAdmin", loggedInUser.isAdmin()); obj.put("engineSessionId", engineSessionId); obj.put("ssoToken", ssoToken); return obj; }
public static void main(java.lang.String[] args) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection().url("https://engine40.example.com/ovirt-engine/api").user("admin@internal").password("redhat123").trustStoreFile("truststore.jks").build(); org.ovirt.engine.sdk4.services.StorageDomainsService sdsService = connection.systemService().storageDomainsService(); org.ovirt.engine.sdk4.types.StorageDomain sd = sdsService.list().search("name=mydata").send().storageDomains().get(0); org.ovirt.engine.sdk4.services.DataCentersService dcsService = connection.systemService().dataCentersService(); org.ovirt.engine.sdk4.types.DataCenter dc = dcsService.list().search("name=mydc").send().dataCenters().get(0); org.ovirt.engine.sdk4.services.DataCenterService dcService = dcsService.dataCenterService(dc.id()); org.ovirt.engine.sdk4.services.AttachedStorageDomainsService attachedSdsService = dcService.storageDomainsService(); attachedSdsService.add().storageDomain(storageDomain().id(sd.id())).send(); org.ovirt.engine.sdk4.services.StorageDomainService sdService = sdsService.storageDomainService(sd.id()); for (; ;) { java.lang.Thread.sleep((5 * 1000)); sd = sdService.get().send().storageDomain(); <START_MOD>if ((<END_MOD>sd.status()<START_MOD>) == (org.ovirt.engine.sdk4.types.StorageDomainStatus.ACTIVE<END_MOD>)) { break; } } connection.close(); }	public static void main(java.lang.String[] args) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection().url("https://engine40.example.com/ovirt-engine/api").user("admin@internal").password("redhat123").trustStoreFile("truststore.jks").build(); org.ovirt.engine.sdk4.services.StorageDomainsService sdsService = connection.systemService().storageDomainsService(); org.ovirt.engine.sdk4.types.StorageDomain sd = sdsService.list().search("name=mydata").send().storageDomains().get(0); org.ovirt.engine.sdk4.services.DataCentersService dcsService = connection.systemService().dataCentersService(); org.ovirt.engine.sdk4.types.DataCenter dc = dcsService.list().search("name=mydc").send().dataCenters().get(0); org.ovirt.engine.sdk4.services.DataCenterService dcService = dcsService.dataCenterService(dc.id()); org.ovirt.engine.sdk4.services.AttachedStorageDomainsService attachedSdsService = dcService.storageDomainsService(); attachedSdsService.add().storageDomain(storageDomain().id(sd.id())).send(); org.ovirt.engine.sdk4.services.AttachedStorageDomainService attachedSdService = attachedSdsService.storageDomainService(sd.id()); for (; ;) { java.lang.Thread.sleep((5 * 1000)); sd = attachedSdService.get().send().storageDomain(); if ((sd.status()) == (org.ovirt.engine.sdk4.types.StorageDomainStatus.ACTIVE)) { break; } } connection.close(); }
public static void main(java.lang.String[] args) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection().url("https://engine40.example.com/ovirt-engine/api").user("admin@internal").password("redhat123").trustStoreFile("truststore.jks").build(); org.ovirt.engine.sdk4.services.VmsService vmsService = connection.systemService().vmsService(); org.ovirt.engine.sdk4.types.Vm vm = vmsService.list().search("name=myvm").send().vms().get(0); org.ovirt.engine.sdk4.services.VmDisksService disksService = vmsService.vmService(vm.id()).disksService(); org.ovirt.engine.sdk4.types.Disk disk = disksService.add().disk(disk().name("mydisk").description( disk * ((int) (java.lang.Math.pow(2, 20))))).storageDomains(storageDomain().name("myadata"))).send().disk(); org.ovirt.engine.sdk4.services.VmDiskService diskService = disksService.diskService(disk.id()); for (; ;) { java.lang.Thread.sleep((5 * 1000)); disk = diskService.get().send().disk(); <START_MOD>if ((<END_MOD>disk.status()<START_MOD>) == (org.ovirt.engine.sdk4.types.DiskStatus.OK<END_MOD>)) { break; } } connection.close(); }	public static void main(java.lang.String[] args) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection().url("https://engine40.example.com/ovirt-engine/api").user("admin@internal").password("redhat123").trustStoreFile("truststore.jks").build(); org.ovirt.engine.sdk4.services.VmsService vmsService = connection.systemService().vmsService(); org.ovirt.engine.sdk4.types.Vm vm = vmsService.list().search("name=myvm").send().vms().get(0); org.ovirt.engine.sdk4.services.VnicProfilesService profilesService = connection.systemService().vnicProfilesService(); java.lang.String profileId = null; java.util.List<org.ovirt.engine.sdk4.types.VnicProfile> profiles = profilesService.list().send().profiles(); for (org.ovirt.engine.sdk4.types.VnicProfile profile : profiles) { if (java.util.Objects.equals(profile.name(), "mynetwork")) { profileId = profile.id(); break; } } org.ovirt.engine.sdk4.services.VmNicsService nicsService = vmsService.vmService(vm.id()).nicsService(); nicsService.add().nic(nic().name("mynic").description("My network interface card").vnicProfile(vnicProfile().id(profileId))).send(); connection.close(); }
public static void main(java.lang.String[] args) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection().url("https://engine40.example.com/ovirt-engine/api").user("admin@internal").password("redhat123").trustStoreFile("truststore.jks").build(); org.ovirt.engine.sdk4.services.StorageDomainsService sdsService = connection.systemService().storageDomainsService(); org.ovirt.engine.sdk4.types.StorageDomain sd = sdsService.list().search("name=myiso").send().storageDomains().get(0); org.ovirt.engine.sdk4.services.DataCentersService dcsService = connection.systemService().dataCentersService(); org.ovirt.engine.sdk4.types.DataCenter dc = dcsService.list().search("name=mydc").send().dataCenters().get(0); org.ovirt.engine.sdk4.services.DataCenterService dcService = dcsService.dataCenterService(dc.id()); org.ovirt.engine.sdk4.services.AttachedStorageDomainsService attachedSdsService = dcService.storageDomainsService(); attachedSdsService.add().storageDomain(storageDomain().id(sd.id())).send(); org.ovirt.engine.sdk4.services.StorageDomainService sdService = sdsService.storageDomainService(sd.id()); for (; ;) { java.lang.Thread.sleep((5 * 1000)); sd = sdService.get().send().storageDomain(); <START_MOD>if ((<END_MOD>sd.status()<START_MOD>) == (org.ovirt.engine.sdk4.types.StorageDomainStatus.ACTIVE<END_MOD>)) { break; } } connection.close(); }	public static void main(java.lang.String[] args) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection().url("https://engine40.example.com/ovirt-engine/api").user("admin@internal").password("redhat123").trustStoreFile("truststore.jks").build(); org.ovirt.engine.sdk4.services.StorageDomainsService sdsService = connection.systemService().storageDomainsService(); org.ovirt.engine.sdk4.types.StorageDomain sd = sdsService.list().search("name=myiso").send().storageDomains().get(0); org.ovirt.engine.sdk4.services.DataCentersService dcsService = connection.systemService().dataCentersService(); org.ovirt.engine.sdk4.types.DataCenter dc = dcsService.list().search("name=mydc").send().dataCenters().get(0); org.ovirt.engine.sdk4.services.DataCenterService dcService = dcsService.dataCenterService(dc.id()); org.ovirt.engine.sdk4.services.AttachedStorageDomainsService attachedSdsService = dcService.storageDomainsService(); attachedSdsService.add().storageDomain(storageDomain().id(sd.id())).send(); org.ovirt.engine.sdk4.services.AttachedStorageDomainService attachedSdService = attachedSdsService.storageDomainService(sd.id()); for (; ;) { java.lang.Thread.sleep((5 * 1000)); sd = attachedSdService.get().send().storageDomain(); if ((sd.status()) == (org.ovirt.engine.sdk4.types.StorageDomainStatus.ACTIVE)) { break; } } connection.close(); }
public static void main(java.lang.String[] args) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection().url("https://engine40.example.com/ovirt-engine/api").user("admin@internal").password("redhat123").trustStoreFile("truststore.jks").build(); org.ovirt.engine.sdk4.services.HostsService hostsService = connection.systemService().hostsService(); org.ovirt.engine.sdk4.types.Host host = hostsService.add().host(host().name("myhost").description( host").address("node40.example.com").rootPassword("readhat123").cluster(cluster().name("mycluster org.ovirt.engine.sdk4.services.HostService hostService = hostsService.hostService(host.id()); for (; ;) { java.lang.Thread.sleep((5 * 1000)); host = hostService.get().send().host(); <START_MOD>if ((<END_MOD>host.status()<START_MOD>) == (org.ovirt.engine.sdk4.types.HostStatus.UP<END_MOD>)) { break; } } connection.close(); }	public static void main(java.lang.String[] args) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection().url("https://engine40.example.com/ovirt-engine/api").user("admin@internal").password("redhat123").trustStoreFile("truststore.jks").build(); org.ovirt.engine.sdk4.services.HostsService hostsService = connection.systemService().hostsService(); org.ovirt.engine.sdk4.types.Host host = hostsService.add().host(host().name("myhost").description("My host").address("node40.example.com").rootPassword("redhat123").cluster(cluster().name("mycluster"))).send().host(); org.ovirt.engine.sdk4.services.HostService hostService = hostsService.hostService(host.id()); for (; ;) { java.lang.Thread.sleep((5 * 1000)); host = hostService.get().send().host(); if ((host.status()) == (org.ovirt.engine.sdk4.types.HostStatus.UP)) { break; } } connection.close(); }
public static void main(java.lang.String[] args) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection().url("https://engine40.example.com/ovirt-engine/api").user("admin@internal").password("redhat123").trustStoreFile("truststore.jks").build(); org.ovirt.engine.sdk4.services.VmsService vmsService = connection.systemService().vmsService(); org.ovirt.engine.sdk4.types.Vm vm = vmsService.list().search("name=myvm").send().vms().get(0); org.ovirt.engine.sdk4.services.VmService vmService = vmsService.vmService(vm.id()); vmService.stop().send(); for (; ;) { java.lang.Thread.sleep((5 * 1000)); vm = vmService.get().send().vm(); <START_MOD>if ((<END_MOD>vm.status()<START_MOD>) == (org.ovirt.engine.sdk4.types.VmStatus.UP<END_MOD>)) { break; } } connection.close(); }	public static void main(java.lang.String[] args) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection().url("https://engine40.example.com/ovirt-engine/api").user("admin@internal").password("redhat123").trustStoreFile("truststore.jks").build(); org.ovirt.engine.sdk4.services.VmsService vmsService = connection.systemService().vmsService(); org.ovirt.engine.sdk4.types.Vm vm = vmsService.list().search("name=myvm").send().vms().get(0); org.ovirt.engine.sdk4.services.VmService vmService = vmsService.vmService(vm.id()); vmService.stop().send(); for (; ;) { java.lang.Thread.sleep((5 * 1000)); vm = vmService.get().send().vm(); if ((vm.status()) == (org.ovirt.engine.sdk4.types.VmStatus.DOWN)) { break; } } connection.close(); }
private boolean executeWithoutTransaction() { boolean functionReturnValue = false; boolean exceptionOccurred = true; try { logRunningCommand(); if (hasTaskHandlers()) { getCurrentTaskHandler().execute(); } else { executeCommand(); } functionReturnValue = getSucceeded(); exceptionOccurred = false; } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error( '{}' failed: {} getClass().getName(), e.getMessage()); log.debug("Exception", e); processExceptionToClient(new org.ovirt.engine.core.common.errors.EngineFault(e, e.getVdsError().getCode())); } catch (com.woorea.openstack.base.client.OpenStackResponseException e) { if (_returnValue.getExecuteFailedMessages().isEmpty()) { processExceptionToClient(new org.ovirt.engine.core.common.errors.EngineFault(e, org.ovirt.engine.core.common.errors.EngineError.ENGINE)); } log.error( '{}' failed: {} getClass().getName(), e.getMessage()); log.error("Exception", e); } catch (java.lang.RuntimeException e) { processExceptionToClient(new org.ovirt.engine.core.common.errors.EngineFault(e, org.ovirt.engine.core.common.errors.EngineError.ENGINE)); log.error( '{}' failed: {} getClass().getName(), e.getMessage()); log.error("Exception", e); } finally { if (!exceptionOccurred) { setCommandExecuted(); } if (exceptionOccurred || (!(getSucceeded()))) { setSucceeded(false); compensate(); setCommandStatus(CommandStatus.<START_MOD>EXECUTION_FAILED<END_MOD>); } else { if (((((getTaskType()) == (org.ovirt.engine.core.common.asynctasks.AsyncTaskType.notSupported)) && (getReturnValue().getVdsmTaskIdList().isEmpty())) && ((getCallback()) == null)) && ((commandStatus) == (org.ovirt.engine.core.compat.CommandStatus.ACTIVE))) { setCommandStatus(CommandStatus.ENDED_SUCCESSFULLY); } cleanUpCompensationData(); } } return functionReturnValue; }	private boolean executeWithoutTransaction() { boolean functionReturnValue = false; boolean exceptionOccurred = true; try { logRunningCommand(); if (hasTaskHandlers()) { getCurrentTaskHandler().execute(); } else { executeCommand(); } functionReturnValue = getSucceeded(); exceptionOccurred = false; } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Command '{}' failed: {}", getClass().getName(), e.getMessage()); log.debug("Exception", e); processExceptionToClient(new org.ovirt.engine.core.common.errors.EngineFault(e, e.getVdsError().getCode())); } catch (com.woorea.openstack.base.client.OpenStackResponseException e) { if (returnValue.getExecuteFailedMessages().isEmpty()) { processExceptionToClient(new org.ovirt.engine.core.common.errors.EngineFault(e, org.ovirt.engine.core.common.errors.EngineError.ENGINE)); } log.error("Command '{}' failed: {}", getClass().getName(), e.getMessage()); log.error("Exception", e); } catch (java.lang.RuntimeException e) { processExceptionToClient(new org.ovirt.engine.core.common.errors.EngineFault(e, org.ovirt.engine.core.common.errors.EngineError.ENGINE)); log.error("Command '{}' failed: {}", getClass().getName(), e.getMessage()); log.error("Exception", e); } finally { if (!exceptionOccurred) { setCommandExecuted(); } if (exceptionOccurred || (!(getSucceeded()))) { setSucceeded(false); compensate(); setCommandStatus(CommandStatus.FAILED); } else { if ((((getReturnValue().getVdsmTaskIdList().isEmpty()) && (getReturnValue().getInternalVdsmTaskIdList().isEmpty())) && ((getCallback()) == null)) && ((commandStatus) == (org.ovirt.engine.core.compat.CommandStatus.ACTIVE))) { setCommandStatus(CommandStatus.ENDED_SUCCESSFULLY); } cleanUpCompensationData(); } } return functionReturnValue; }
private org.ovirt.engine.core.bll.context.CompensationContext createCompensationContext(org.ovirt.engine.core.compat.TransactionScopeOption transactionScopeOption, boolean forceCompensation) { if ((<START_MOD>(<END_MOD>transactionScopeOption == (org.ovirt.engine.core.compat.TransactionScopeOption.Suppress)) && (!forceCompensation<START_MOD>)) || ((getCallback()) != null<END_MOD>)) { return org.ovirt.engine.core.bll.context.NoOpCompensationContext.getInstance(); } return createDefaultCompensationContext(commandId); }	private org.ovirt.engine.core.bll.context.CompensationContext createCompensationContext(org.ovirt.engine.core.compat.TransactionScopeOption transactionScopeOption, boolean forceCompensation) { if ((transactionScopeOption == (org.ovirt.engine.core.compat.TransactionScopeOption.Suppress)) && (!forceCompensation)) { return org.ovirt.engine.core.bll.context.NoOpCompensationContext.getInstance(); } return createDefaultCompensationContext(commandId); }
private org.ovirt.engine.core.common.action.ImagesContainterParametersBase getCinderDiskSnapshotParameter(org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk) { org.ovirt.engine.core.common.action.ImagesContainterParametersBase removeCinderSnapshotParams = new org.ovirt.engine.core.common.action.ImagesContainterParametersBase(cinderDisk.getImageId()); removeCinderSnapshotParams.setDestinationImageId(cinderDisk.getImageId()); removeCinderSnapshotParams.setStorageDomainId(cinderDisk.getStorageIds().get(0)); removeCinderSnapshotParams.setParentCommand(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllCinderSnapshotDisksCommand.getActionType()); removeCinderSnapshotParams.setParentParameters(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllCinderSnapshotDisksCommand.getParameters()); removeCinderSnapshotParams.<START_MOD>setEndProcedure<END_MOD>(<START_MOD>EndProcedure.ASYNC_OPERATIONS_END<END_MOD>); return removeCinderSnapshotParams; }	private org.ovirt.engine.core.common.action.ImagesContainterParametersBase getCinderDiskSnapshotParameter(org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk) { org.ovirt.engine.core.common.action.ImagesContainterParametersBase removeCinderSnapshotParams = new org.ovirt.engine.core.common.action.ImagesContainterParametersBase(cinderDisk.getImageId()); removeCinderSnapshotParams.setDestinationImageId(cinderDisk.getImageId()); removeCinderSnapshotParams.setStorageDomainId(cinderDisk.getStorageIds().get(0)); removeCinderSnapshotParams.setParentCommand(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllCinderSnapshotDisksCommand.getActionType()); removeCinderSnapshotParams.setParentParameters(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllCinderSnapshotDisksCommand.getParameters()); removeCinderSnapshotParams.setEndProcedure(EndProcedure.COMMAND_MANAGED); return removeCinderSnapshotParams; }
public org.ovirt.engine.core.common.action.CreateOvfVolumeForStorageDomainCommandParameters createCreateOvfVolumeForStorageDomainParams() { org.ovirt.engine.core.common.action.CreateOvfVolumeForStorageDomainCommandParameters parameters = new org.ovirt.engine.core.common.action.CreateOvfVolumeForStorageDomainCommandParameters(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getParameters().getStorageDomainId()); parameters.setSkipDomainChecks(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getParameters().isSkipDomainChecks()); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getParameters()); parameters.<START_MOD>setEndProcedure(EndProcedure.ASYNC_OPERATIONS_END<END_MOD>); return parameters; }	public org.ovirt.engine.core.common.action.CreateOvfVolumeForStorageDomainCommandParameters createCreateOvfVolumeForStorageDomainParams() { org.ovirt.engine.core.common.action.CreateOvfVolumeForStorageDomainCommandParameters parameters = new org.ovirt.engine.core.common.action.CreateOvfVolumeForStorageDomainCommandParameters(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getParameters().getStorageDomainId()); parameters.setSkipDomainChecks(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getParameters().isSkipDomainChecks()); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getParameters()); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); return parameters; }
private boolean shouldCommandEndOnAsyncOpEnd(org.ovirt.engine.core.bll.CommandBase<?> cmd) { return (cmd.getParameters().getEndProcedure()) == (org.ovirt.engine.core.common.action.VdcActionParametersBase.EndProcedure.ASYNC_OPERATIONS_END); }	private boolean shouldCommandEndOnAsyncOpEnd(org.ovirt.engine.core.bll.CommandBase<?> cmd) { return (cmd.getParameters().getEndProcedure()) == (org.ovirt.engine.core.common.action.VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); }
private org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters buildRemoveCinderSnapshotDiskParameters(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks) { org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters params = new org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters(); params.setCinderDisks(cinderDisks); params.setParentCommand(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getActionType()); params.setParentParameters(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters()); params.setSessionId(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getSessionId()); params.setInvokeEndActionOnParent(false); params.<START_MOD>setEndProcedure<END_MOD>(<START_MOD>EndProcedure.ASYNC_OPERATIONS_END<END_MOD>); return params; }	private org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters buildRemoveCinderSnapshotDiskParameters(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks) { org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters params = new org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters(); params.setCinderDisks(cinderDisks); params.setParentCommand(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getActionType()); params.setParentParameters(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters()); params.setSessionId(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getSessionId()); params.setInvokeEndActionOnParent(false); params.setEndProcedure(EndProcedure.COMMAND_MANAGED); return params; }
private java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> removeCinderDisks() { java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> failedRemoveCinderDisks = null; if (org.ovirt.engine.core.bll.RemoveVmCommand.getParameters().isRemoveDisks()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = getCinderDisks(); if (cinderDisks.isEmpty()) { return java.util.Collections.emptyList(); } org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters param = new org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters(org.ovirt.engine.core.bll.RemoveVmCommand.getVmId(), cinderDisks); param.<START_MOD>setEndProcedure(EndProcedure.ASYNC_OPERATIONS_END<END_MOD>); java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> future = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveAllVmCinderDisks, withRootCommandInfo(param), org.ovirt.engine.core.bll.RemoveVmCommand.cloneContextAndDetachFromParent()); try { failedRemoveCinderDisks = future.get().getActionReturnValue(); } catch (java.lang.InterruptedException | java.util.concurrent.ExecutionException e) { failedRemoveCinderDisks = cinderDisks; log.error("Exception", e); } } return failedRemoveCinderDisks; }	private java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> removeCinderDisks() { java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> failedRemoveCinderDisks = null; if (org.ovirt.engine.core.bll.RemoveVmCommand.getParameters().isRemoveDisks()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = getCinderDisks(); if (cinderDisks.isEmpty()) { return java.util.Collections.emptyList(); } org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters param = new org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters(org.ovirt.engine.core.bll.RemoveVmCommand.getVmId(), cinderDisks); param.setEndProcedure(EndProcedure.COMMAND_MANAGED); java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> future = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveAllVmCinderDisks, withRootCommandInfo(param), org.ovirt.engine.core.bll.RemoveVmCommand.cloneContextAndDetachFromParent()); try { failedRemoveCinderDisks = future.get().getActionReturnValue(); } catch (java.lang.InterruptedException | java.util.concurrent.ExecutionException e) { failedRemoveCinderDisks = cinderDisks; log.error("Exception", e); } } return failedRemoveCinderDisks; }
private org.ovirt.engine.core.common.action.ConvertVmParameters buildConvertVmParameters() { org.ovirt.engine.core.common.action.ConvertVmParameters parameters = new org.ovirt.engine.core.common.action.ConvertVmParameters(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()); parameters.setUrl(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getUrl()); parameters.setUsername(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getUsername()); parameters.setPassword(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getPassword()); parameters.setVmName(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmName()); parameters.setOriginType(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getOrigin()); parameters.setDisks(getDisks()); parameters.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStoragePoolId()); parameters.setStorageDomainId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStorageDomainId()); parameters.setProxyHostId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getProxyHostId()); parameters.setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getClusterId()); parameters.setVirtioIsoName(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getVirtioIsoName()); parameters.<START_MOD>setEndProcedure(EndProcedure.ASYNC_OPERATIONS_END<END_MOD>); return parameters; }	private org.ovirt.engine.core.common.action.ConvertVmParameters buildConvertVmParameters() { org.ovirt.engine.core.common.action.ConvertVmParameters parameters = new org.ovirt.engine.core.common.action.ConvertVmParameters(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()); parameters.setUrl(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getUrl()); parameters.setUsername(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getUsername()); parameters.setPassword(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getPassword()); parameters.setVmName(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmName()); parameters.setOriginType(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getOrigin()); parameters.setDisks(getDisks()); parameters.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStoragePoolId()); parameters.setStorageDomainId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStorageDomainId()); parameters.setProxyHostId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getProxyHostId()); parameters.setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getClusterId()); parameters.setVirtioIsoName(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getVirtioIsoName()); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); return parameters; }
private org.ovirt.engine.core.common.action.VdcActionParametersBase buildExtendCinderDiskParameters(org.ovirt.engine.core.common.businessentities.storage.CinderDisk newCinderDisk) { org.ovirt.engine.core.common.action.UpdateVmDiskParameters parameters = new org.ovirt.engine.core.common.action.UpdateVmDiskParameters(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getVmId(), newCinderDisk.getId(), newCinderDisk); parameters.setParametersCurrentUser(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getParameters().getParametersCurrentUser()); parameters.<START_MOD>setEndProcedure<END_MOD>(<START_MOD>EndProcedure.ASYNC_OPERATIONS_END<END_MOD>); return parameters; }	private org.ovirt.engine.core.common.action.VdcActionParametersBase buildExtendCinderDiskParameters(org.ovirt.engine.core.common.businessentities.storage.CinderDisk newCinderDisk) { org.ovirt.engine.core.common.action.VmDiskOperationParameterBase parameters = new org.ovirt.engine.core.common.action.VmDiskOperationParameterBase(new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(newCinderDisk.getId(), org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getVmId()), newCinderDisk); parameters.setParametersCurrentUser(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getParameters().getParametersCurrentUser()); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); return parameters; }
private boolean isEndProcedureApplicableToEndAction() { return ((getParameters().getEndProcedure()) == (org.ovirt.engine.core.common.action.VdcActionParametersBase.EndProcedure.PARENT_MANAGED)) || ((getParameters().getEndProcedure()) == (org.ovirt.engine.core.common.action.VdcActionParametersBase.EndProcedure.ASYNC_OPERATIONS_END)); }	private boolean isEndProcedureApplicableToEndAction() { return ((getParameters().getEndProcedure()) == (org.ovirt.engine.core.common.action.VdcActionParametersBase.EndProcedure.FLOW_MANAGED)) || ((getParameters().getEndProcedure()) == (org.ovirt.engine.core.common.action.VdcActionParametersBase.EndProcedure.COMMAND_MANAGED)); }
public void handleChildCommands() { if ((getCallback()) != null) { java.util.List<org.ovirt.engine.core.compat.Guid> childCommands = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(getCommandId()); java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.LinkedList<>(); for (org.ovirt.engine.core.compat.Guid id : childCommands) { org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.retrieveCommand(id); if (<START_MOD>((command.getParameters().getEndProcedure()) == (org.ovirt.engine.core.common.action.VdcActionParametersBase.EndProcedure.BY_PARENT)) || ((command.getParameters().getEndProcedure()) == (org.ovirt.engine.core.common.action.VdcActionParametersBase.EndProcedure.PARENT_MANAGED)<END_MOD>)) { command.getParameters().<START_MOD>setEndProcedure(EndProcedure.PARENT_MANAGED<END_MOD>); command.getParameters().setCommandType(command.getActionType()); parameters.add(command.getParameters()); } } getParameters().setImagesParameters(parameters); } }	public void handleChildCommands() { if ((getCallback()) != null) { java.util.List<org.ovirt.engine.core.compat.Guid> childCommands = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(getCommandId()); java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.LinkedList<>(); for (org.ovirt.engine.core.compat.Guid id : childCommands) { org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.retrieveCommand(id); if (((command.getParameters().getEndProcedure()) == (org.ovirt.engine.core.common.action.VdcActionParametersBase.EndProcedure.PARENT_MANAGED)) || ((command.getParameters().getEndProcedure()) == (org.ovirt.engine.core.common.action.VdcActionParametersBase.EndProcedure.FLOW_MANAGED))) { command.getParameters().setEndProcedure(EndProcedure.FLOW_MANAGED); command.getParameters().setCommandType(command.getActionType()); parameters.add(command.getParameters()); } } getParameters().setImagesParameters(parameters); } }
public void startNextLiveMerge(int completedChildren) { if (completedChildren == 0) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImageSnapshotsStatus(getImageGroupId(), ImageStatus.LOCKED); } else { checkImageIdConsistency((completedChildren - 1)); } org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getImageIds().get(completedChildren); org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.log.info( child command {} of {}, image '{}' (completedChildren + 1), org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getImageIds().size(), imageId); org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters parameters = buildRemoveSnapshotSingleDiskLiveParameters(imageId); parameters.<START_MOD>setEndProcedure(EndProcedure.ASYNC_OPERATIONS_END<END_MOD>); if ((org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getChildImageIds()) == null) { org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().setChildImageIds(java.util.Arrays.asList(new org.ovirt.engine.core.compat.Guid[org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getImageIds().size()])); } org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getChildImageIds().set(completedChildren, parameters.getDestinationImageId()); persistCommand(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getParentCommand(), true); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveSnapshotSingleDiskLive, parameters, org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.cloneContextAndDetachFromParent()); }	public void startNextLiveMerge(int completedChildren) { if (completedChildren == 0) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImageSnapshotsStatus(getImageGroupId(), ImageStatus.LOCKED); } else { checkImageIdConsistency((completedChildren - 1)); } org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getImageIds().get(completedChildren); org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.log.info("Starting child command {} of {}, image '{}'", (completedChildren + 1), org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getImageIds().size(), imageId); org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters parameters = buildRemoveSnapshotSingleDiskLiveParameters(imageId); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); if ((org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getChildImageIds()) == null) { org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().setChildImageIds(java.util.Arrays.asList(new org.ovirt.engine.core.compat.Guid[org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getImageIds().size()])); } org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getChildImageIds().set(completedChildren, parameters.getDestinationImageId()); persistCommand(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getParentCommand(), true); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveSnapshotSingleDiskLive, parameters, org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.cloneContextAndDetachFromParent()); }
private org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters createProcessOvfUpdateForDomainParams() { org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters params = new org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getStoragePoolId(), org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getStorageDomainId()); params.setParentCommand(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getActionType()); params.setParentParameters(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getParameters()); params.setSkipDomainChecks(true); params.<START_MOD>setEndProcedure<END_MOD>(<START_MOD>EndProcedure.ASYNC_OPERATIONS_END<END_MOD>); return params; }	private org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters createProcessOvfUpdateForDomainParams() { org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters params = new org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getStoragePoolId(), org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getStorageDomainId()); params.setParentCommand(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getActionType()); params.setParentParameters(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getParameters()); params.setSkipDomainChecks(true); params.setEndProcedure(EndProcedure.COMMAND_MANAGED); return params; }
@java.lang.Override protected void executeCommand() { switch (getDisk().getDiskStorageType()) { case IMAGE : org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = runInternalActionWithTasksContext(VdcActionType.RemoveImage, buildRemoveImageParameters(getDiskImage())); if (vdcReturnValue.getSucceeded()) { incrementVmsGeneration(); org.ovirt.engine.core.bll.storage.disk.RemoveDiskCommand.getReturnValue().getVdsmTaskIdList().addAll(vdcReturnValue.getInternalVdsmTaskIdList()); org.ovirt.engine.core.bll.storage.disk.RemoveDiskCommand.setSucceeded(true); } break; case LUN : removeLunDisk(); break; case CINDER : org.ovirt.engine.core.common.action.RemoveCinderDiskParameters params = new org.ovirt.engine.core.common.action.RemoveCinderDiskParameters(org.ovirt.engine.core.bll.storage.disk.RemoveDiskCommand.getParameters().getDiskId()); params.<START_MOD>setEndProcedure(EndProcedure.ASYNC_OPERATIONS_END<END_MOD>); java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> future = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveCinderDisk, params, org.ovirt.engine.core.bll.storage.disk.RemoveDiskCommand.cloneContextAndDetachFromParent()); try { setReturnValue(future.get()); setSucceeded(org.ovirt.engine.core.bll.storage.disk.RemoveDiskCommand.getReturnValue().getSucceeded()); } catch (java.lang.InterruptedException | java.util.concurrent.ExecutionException e) { log.error( removing Cinder disk '{}': {} getDiskImage().getDiskAlias(), e.getMessage()); log.debug("Exception", e); } break; } }	@java.lang.Override protected void executeCommand() { switch (getDisk().getDiskStorageType()) { case IMAGE : org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = runInternalActionWithTasksContext(VdcActionType.RemoveImage, buildRemoveImageParameters(getDiskImage())); if (vdcReturnValue.getSucceeded()) { incrementVmsGeneration(); org.ovirt.engine.core.bll.storage.disk.RemoveDiskCommand.getReturnValue().getVdsmTaskIdList().addAll(vdcReturnValue.getInternalVdsmTaskIdList()); org.ovirt.engine.core.bll.storage.disk.RemoveDiskCommand.setSucceeded(true); } break; case LUN : removeLunDisk(); break; case CINDER : org.ovirt.engine.core.common.action.RemoveCinderDiskParameters params = new org.ovirt.engine.core.common.action.RemoveCinderDiskParameters(org.ovirt.engine.core.bll.storage.disk.RemoveDiskCommand.getParameters().getDiskId()); params.setEndProcedure(EndProcedure.COMMAND_MANAGED); java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> future = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveCinderDisk, params, org.ovirt.engine.core.bll.storage.disk.RemoveDiskCommand.cloneContextAndDetachFromParent()); try { setReturnValue(future.get()); setSucceeded(org.ovirt.engine.core.bll.storage.disk.RemoveDiskCommand.getReturnValue().getSucceeded()); } catch (java.lang.InterruptedException | java.util.concurrent.ExecutionException e) { log.error("Error removing Cinder disk '{}': {}", getDiskImage().getDiskAlias(), e.getMessage()); log.debug("Exception", e); } break; } }
private org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters buildCreateSnapshotParametersForEndAction() { org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters parameters = buildCreateSnapshotParameters(); parameters.setImagesParameters(org.ovirt.engine.core.bll.RunVmCommand.getParameters().getImagesParameters()); if (org.ovirt.engine.core.bll.RunVmCommand.getParameters().isUseCinderCommandCallback()) { parameters.<START_MOD>setEndProcedure<END_MOD>(<START_MOD>EndProcedure.ASYNC_OPERATIONS_END<END_MOD>); parameters.setCommandId(org.ovirt.engine.core.bll.RunVmCommand.getParametersForChildCommand().get(0).getCommandId()); } return parameters; }	private org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters buildCreateSnapshotParametersForEndAction() { org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters parameters = buildCreateSnapshotParameters(); parameters.setImagesParameters(org.ovirt.engine.core.bll.RunVmCommand.getParameters().getImagesParameters()); if (org.ovirt.engine.core.bll.RunVmCommand.getParameters().isUseCinderCommandCallback()) { parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); parameters.setCommandId(org.ovirt.engine.core.bll.RunVmCommand.getParametersForChildCommand().get(0).getCommandId()); } return parameters; }
private org.ovirt.engine.core.common.action.RestoreAllCinderSnapshotsParameters buildCinderChildCommandParameters(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisksToRestore, java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisksToRemove, java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderVolumesToRemove, org.ovirt.engine.core.compat.Guid removedSnapshotId) { org.ovirt.engine.core.common.action.RestoreAllCinderSnapshotsParameters restoreParams = new org.ovirt.engine.core.common.action.RestoreAllCinderSnapshotsParameters(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVmId(), cinderDisksToRestore, cinderDisksToRemove, cinderVolumesToRemove); restoreParams.setRemovedSnapshotId(removedSnapshotId); restoreParams.setSnapshot(getSnapshot()); restoreParams.setParentHasTasks((!(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getReturnValue().getVdsmTaskIdList().isEmpty()))); restoreParams.setParentCommand(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getActionType()); restoreParams.setParentParameters(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters()); restoreParams.<START_MOD>setEndProcedure(EndProcedure.ASYNC_OPERATIONS_END<END_MOD>); return withRootCommandInfo(restoreParams); }	private org.ovirt.engine.core.common.action.RestoreAllCinderSnapshotsParameters buildCinderChildCommandParameters(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisksToRestore, java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisksToRemove, java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderVolumesToRemove, org.ovirt.engine.core.compat.Guid removedSnapshotId) { org.ovirt.engine.core.common.action.RestoreAllCinderSnapshotsParameters restoreParams = new org.ovirt.engine.core.common.action.RestoreAllCinderSnapshotsParameters(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVmId(), cinderDisksToRestore, cinderDisksToRemove, cinderVolumesToRemove); restoreParams.setRemovedSnapshotId(removedSnapshotId); restoreParams.setSnapshot(getSnapshot()); restoreParams.setParentHasTasks((!(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getReturnValue().getVdsmTaskIdList().isEmpty()))); restoreParams.setParentCommand(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getActionType()); restoreParams.setParentParameters(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters()); restoreParams.setEndProcedure(EndProcedure.COMMAND_MANAGED); return withRootCommandInfo(restoreParams); }
private org.ovirt.engine.core.common.action.RemoveCinderDiskParameters buildChildCommandParameters(org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk) { org.ovirt.engine.core.common.action.RemoveCinderDiskParameters removeDiskParams = new org.ovirt.engine.core.common.action.RemoveCinderDiskParameters(cinderDisk.getId()); removeDiskParams.setParentCommand(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getActionType()); removeDiskParams.setParentParameters(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getParameters()); removeDiskParams.setShouldBeLogged(false); removeDiskParams.<START_MOD>setEndProcedure<END_MOD>(<START_MOD>EndProcedure.ASYNC_OPERATIONS_END<END_MOD>); return removeDiskParams; }	private org.ovirt.engine.core.common.action.RemoveCinderDiskParameters buildChildCommandParameters(org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk) { org.ovirt.engine.core.common.action.RemoveCinderDiskParameters removeDiskParams = new org.ovirt.engine.core.common.action.RemoveCinderDiskParameters(cinderDisk.getId()); removeDiskParams.setParentCommand(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getActionType()); removeDiskParams.setParentParameters(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getParameters()); removeDiskParams.setShouldBeLogged(false); removeDiskParams.setEndProcedure(EndProcedure.COMMAND_MANAGED); return removeDiskParams; }
private org.ovirt.engine.core.common.action.VdcActionParametersBase buildAddCinderDiskParameters() { org.ovirt.engine.core.common.action.AddDiskParameters parameters = new org.ovirt.engine.core.common.action.AddDiskParameters(); parameters.setDiskInfo(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getDiskInfo()); parameters.setPlugDiskToVm(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getPlugDiskToVm()); parameters.setVmId(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getVmId()); parameters.setStorageDomainId(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getStorageDomainId()); parameters.setQuotaId(getQuotaId()); parameters.<START_MOD>setEndProcedure(EndProcedure.ASYNC_OPERATIONS_END<END_MOD>); if ((org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getVm()) != null) { parameters.setVmSnapshotId(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getSnapshotDao().getId(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getVmId(), SnapshotType.ACTIVE)); } return parameters; }	private org.ovirt.engine.core.common.action.VdcActionParametersBase buildAddCinderDiskParameters() { org.ovirt.engine.core.common.action.AddDiskParameters parameters = new org.ovirt.engine.core.common.action.AddDiskParameters(new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(null, org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getVmId()), org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getDiskInfo()); parameters.setPlugDiskToVm(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getPlugDiskToVm()); parameters.setStorageDomainId(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getStorageDomainId()); parameters.setQuotaId(getQuotaId()); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); if ((org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getVm()) != null) { parameters.setVmSnapshotId(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getSnapshotDao().getId(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getVmId(), SnapshotType.ACTIVE)); } return parameters; }
private org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters buildRemoveSnapshotSingleDiskParameters(final org.ovirt.engine.core.common.businessentities.storage.DiskImage source, org.ovirt.engine.core.common.businessentities.storage.DiskImage dest) { org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters parameters = new org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters(source.getImageId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVmId()); parameters.setDestinationImageId((dest != null ? dest.getImageId() : null)); parameters.setEntityInfo(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getParameters().getEntityInfo()); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getParameters()); parameters.setParentCommand(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getActionType()); parameters.setCommandType(getSnapshotActionType()); parameters.setVdsId(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVm().getRunOnVds()); parameters.<START_MOD>setEndProcedure(EndProcedure.ASYNC_OPERATIONS_END<END_MOD>); return parameters; }	private org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters buildRemoveSnapshotSingleDiskParameters(final org.ovirt.engine.core.common.businessentities.storage.DiskImage source, org.ovirt.engine.core.common.businessentities.storage.DiskImage dest) { org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters parameters = new org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters(source.getImageId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVmId()); parameters.setDestinationImageId((dest != null ? dest.getImageId() : null)); parameters.setEntityInfo(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getParameters().getEntityInfo()); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getParameters()); parameters.setParentCommand(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getActionType()); parameters.setCommandType(getSnapshotActionType()); parameters.setVdsId(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVm().getRunOnVds()); parameters.setEndProcedure((org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVm().isQualifiedForLiveSnapshotMerge() ? org.ovirt.engine.core.common.action.VdcActionParametersBase.EndProcedure.COMMAND_MANAGED : org.ovirt.engine.core.common.action.VdcActionParametersBase.EndProcedure.PARENT_MANAGED)); return parameters; }
private org.ovirt.engine.core.common.action.RemoveCinderDiskVolumeParameters createChildParams(org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDiskVolume) { org.ovirt.engine.core.common.action.RemoveCinderDiskVolumeParameters childParam = new org.ovirt.engine.core.common.action.RemoveCinderDiskVolumeParameters(cinderDiskVolume); childParam.setParentCommand(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderVolumeParentCommand.getActionType()); childParam.setParentParameters(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderVolumeParentCommand.getParameters()); childParam.<START_MOD>setEndProcedure<END_MOD>(<START_MOD>EndProcedure.ASYNC_OPERATIONS_END<END_MOD>); return childParam; }	private org.ovirt.engine.core.common.action.RemoveCinderDiskVolumeParameters createChildParams(org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDiskVolume) { org.ovirt.engine.core.common.action.RemoveCinderDiskVolumeParameters childParam = new org.ovirt.engine.core.common.action.RemoveCinderDiskVolumeParameters(cinderDiskVolume); childParam.setParentCommand(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderVolumeParentCommand.getActionType()); childParam.setParentParameters(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderVolumeParentCommand.getParameters()); childParam.setEndProcedure(EndProcedure.COMMAND_MANAGED); return childParam; }
private boolean endCallback(org.ovirt.engine.core.compat.Guid cmdId, org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback callback, org.ovirt.engine.core.compat.CommandStatus status) { try { if (status == (org.ovirt.engine.core.compat.CommandStatus.FAILED)) { callback.onFailed(cmdId, getChildCommandIds(cmdId)); } else { callback.onSucceeded(cmdId, getChildCommandIds(cmdId)); } } catch (java.lang.Exception ex) { if (callback.repeatEndMethodsOnFail(cmdId)) { org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.error(("Failed invoking callback end method '{}' for command '{}' with exception '{}', the callback" + " is marked for end method retries"), getCallbackMethod(status), cmdId, ex.getMessage()); return true; } else { org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.error("Failed invoking callback end method '{}' for command '{}' with exception '{}'", getCallbackMethod(status), cmdId, ex.getMessage()); } } return false; }	private boolean endCallback(org.ovirt.engine.core.compat.Guid cmdId, org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback callback, org.ovirt.engine.core.compat.CommandStatus status) { try { if (status == (org.ovirt.engine.core.compat.CommandStatus.FAILED)) { callback.onFailed(cmdId, getChildCommandIds(cmdId)); } else { callback.onSucceeded(cmdId, getChildCommandIds(cmdId)); } } catch (java.lang.Exception ex) { if (callback.shouldRepeatEndMethodsOnFail(cmdId)) { org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.error(("Failed invoking callback end method '{}' for command '{}' with exception '{}', the callback" + " is marked for end method retries"), getCallbackMethod(status), cmdId, ex.getMessage()); org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.debug("Exception", ex); return true; } throw ex; } return false; }
private void pollCallback(org.ovirt.engine.core.compat.Guid cmdId, org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback callback, org.ovirt.engine.core.compat.CommandStatus status) { try { callback.doPolling(cmdId, getChildCommandIds(cmdId)); } catch (java.lang.Exception ex) { handleError(ex, status, cmdId); } }	private boolean updateCommandWaitingForEvent(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity, org.ovirt.engine.core.bll.tasks.CallbackTiming callbackTiming) { if (cmdEntity.isWaitingForEvent()) { if ((callbackTiming.getWaitOnEventEndTime()) < (java.lang.System.currentTimeMillis())) { org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("The command '{}' reached its event's waiting timeout and will be moved to polling mode", cmdEntity.getId()); commandsRepository.removeEventSubscription(cmdEntity.getId()); cmdEntity.setWaitingForEvent(false); return false; } return true; } return false; }
private void endAction(org.ovirt.engine.core.bll.CommandBase<?> commandBase, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, boolean succeeded) { if (shouldExecuteEndMethod(commandBase)) { <START_MOD>org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = <END_MOD>commandBase.endAction(); if ((<START_MOD>!(commandBase.getReturnValue().getSucceeded())) && (repeatEndMethodsOnFail(returnVal))) { if (repeatEndMethodsOnFail(returnVal)) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.ENGINE, java.lang.String.format(( %1$s id: '%2$s' endAction()   +   complete successfully commandBase.getActionType(), commandBase.getCommandId())); } else { log.info(( '{}' id: '{}' end method execution failed, as the command isn marked for   +   retries silently ignoring commandBase.getActionType(), commandBase.getCommandId()); } } if ((<END_MOD>commandBase.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.VdcActionType.Unknown)) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.removeAllCommandsInHierarchy(commandBase.getCommandId()); } org.ovirt.engine.core.bll.job.ExecutionHandler.endJob(commandBase.getExecutionContext(), succeeded); } }	private void endAction(org.ovirt.engine.core.bll.CommandBase<?> commandBase, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, boolean succeeded) { if (shouldExecuteEndMethod(commandBase)) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = commandBase.endAction(); if ((!(returnVal.getSucceeded())) && (shouldRepeatEndMethodsOnFail(returnVal))) { if (shouldRepeatEndMethodsOnFail(returnVal)) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.ENGINE, java.lang.String.format(("Command %1$s id: '%2$s' endAction() " + "didn't complete successfully"), commandBase.getActionType(), commandBase.getCommandId())); } else { log.warn(("Command '{}' id: '{}' end method execution failed, as the command isn't marked for " + "endAction() retries silently ignoring"), commandBase.getActionType(), commandBase.getCommandId()); } } if ((commandBase.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.VdcActionType.Unknown)) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.removeAllCommandsInHierarchy(commandBase.getCommandId()); } org.ovirt.engine.core.bll.job.ExecutionHandler.endJob(commandBase.getExecutionContext(), succeeded); } }
@java.lang.Override public boolean repeatEndMethodsOnFail(org.ovirt.engine.core.compat.Guid cmdId) { return repeatEndMethodsOnFail(org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandEntity(cmdId).getReturnValue()); }	@java.lang.Override public boolean shouldRepeatEndMethodsOnFail(org.ovirt.engine.core.compat.Guid cmdId) { return shouldRepeatEndMethodsOnFail(org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandEntity(cmdId).getReturnValue()); }
private boolean repeatEndMethodsOnFail(org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue) { return returnValue.getEndActionTryAgain(); }	private boolean shouldRepeatEndMethodsOnFail(org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue) { return returnValue.getEndActionTryAgain(); }
public boolean repeatEndMethodsOnFail(org.ovirt.engine.core.compat.Guid cmdId) { return false; }	public boolean shouldRepeatEndMethodsOnFail(org.ovirt.engine.core.compat.Guid cmdId) { return false; }
protected void <START_MOD>addVmGraphicsOptions<END_MOD>(java.util.Map<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.GraphicsInfo> infos, java.util.Map<java.lang.String, java.lang.Object> params<START_MOD>, boolean legacyNames<END_MOD>) { if ((infos != null) && (infos.containsKey(GraphicsType.SPICE))) { params.put(VdsProperties.spiceFileTransferEnable, java.lang.Boolean.toString(vm.isSpiceFileTransferEnabled())); params.put(VdsProperties.spiceCopyPasteEnable, java.lang.Boolean.toString(vm.isSpiceCopyPasteEnabled())); <START_MOD>if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.SSLEnabled)) { params.put(VdsProperties.spiceSslCipherSuite, org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.CipherSuite)); params.put(VdsProperties.SpiceSecureChannels, org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.SpiceSecureChannels, vm.getCompatibilityVersion().toString())); } } if ((infos != null) && (infos.containsKey(GraphicsType.VNC))) { java.lang.String keyboardLayout = vm.getDynamicData().getVncKeyboardLayout(); if (keyboardLayout == null) { keyboardLayout = vm.getDefaultVncKeyboardLayout(); if (keyboardLayout == null) { keyboardLayout = org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.VncKeyboardLayout); } } if (legacyNames) { params.put(VdsProperties.KeyboardLayout, keyboardLayout); } else { params.put(VdsProperties.KeyboardMap, keyboardLayout); } params.put(VdsProperties.TabletEnable, "true"); } }<END_MOD>	protected void addVmGraphicsOptions(java.util.Map<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.GraphicsInfo> infos, java.util.Map<java.lang.String, java.lang.Object> params, boolean legacyNames) { if ((infos != null) && (infos.containsKey(GraphicsType.SPICE))) { params.put(VdsProperties.spiceFileTransferEnable, java.lang.Boolean.toString(vm.isSpiceFileTransferEnabled())); params.put(VdsProperties.spiceCopyPasteEnable, java.lang.Boolean.toString(vm.isSpiceCopyPasteEnabled())); if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.SSLEnabled)) { params.put(VdsProperties.spiceSslCipherSuite, org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.CipherSuite)); params.put(VdsProperties.SpiceSecureChannels, org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.SpiceSecureChannels, vm.getVdsGroupCompatibilityVersion().toString())); } } if ((infos != null) && (infos.containsKey(GraphicsType.VNC))) { java.lang.String keyboardLayout = vm.getDynamicData().getVncKeyboardLayout(); if (keyboardLayout == null) { keyboardLayout = vm.getDefaultVncKeyboardLayout(); if (keyboardLayout == null) { keyboardLayout = org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.VncKeyboardLayout); } } if (legacyNames) { params.put(VdsProperties.KeyboardLayout, keyboardLayout); } else { params.put(VdsProperties.KeyboardMap, keyboardLayout); } params.put(VdsProperties.TabletEnable, "true"); } }
protected void setUpGetGraphicsMultipleExpectations(int times) throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice>> vmDevices = new java.util.HashMap<>(); java.util.List<org.ovirt.engine.core.compat.Guid> vmIds = new java.util.ArrayList<>(); for (int i = 0; i < times; i++) { vmDevices.put(GUIDS[i], java.util.Arrays.asList(new org.ovirt.engine.core.common.businessentities.GraphicsDevice(org.ovirt.engine.core.common.utils.VmDeviceType.SPICE))); vmIds.add(GUIDS[i]); } setUpGetEntityExpectations(VdcQueryType.GetGraphicsDevicesMultiple, org.ovirt.engine.core.common.queries.IdsQueryParameters.class, new java.lang.String[]{ "Ids" }, new java.lang.Object[]{ vmIds }, vmDevices); }	protected void setUpGetGraphicsMultipleExpectations(int times) throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice>> vmDevices = new java.util.HashMap<>(); for (int i = 0; i < times; i++) { vmDevices.put(GUIDS[i], java.util.Arrays.asList(new org.ovirt.engine.core.common.businessentities.GraphicsDevice(org.ovirt.engine.core.common.utils.VmDeviceType.SPICE))); } setUpGetEntityExpectations(VdcQueryType.GetGraphicsDevicesMultiple, org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, vmDevices); }
@org.junit.Test public void testListAllContent() throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations(null); java.util.List<java.lang.String> populates = new java.util.ArrayList<>(); populates.add("true"); expect(httpHeaders.getRequestHeader(BackendResource.POPULATE)).andReturn(populates).anyTimes(); setUpGetPayloadExpectations(3); setUpGetBallooningExpectations(3); <START_MOD>setUpGetGraphicsMultipleExpectations<END_MOD>(3); setUpGetConsoleExpectations(new int[]{ 0, 1, 2 }); setUpGetVmOvfExpectations(new int[]{ 0, 1, 2 }); setUpGetVirtioScsiExpectations(new int[]{ 0, 1, 2 }); setUpGetSoundcardExpectations(new int[]{ 0, 1, 2 }); setUpGetRngDeviceExpectations(new int[]{ 0, 1, 2 }); setUpGetCertuficateExpectations(3); setUpQueryExpectations(""); collection.setUriInfo(uriInfo); verifyCollection(getCollection()); }	@org.junit.Test public void testListAllContent() throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations(null); java.util.List<java.lang.String> populates = new java.util.ArrayList<>(); populates.add("true"); expect(httpHeaders.getRequestHeader(BackendResource.POPULATE)).andReturn(populates).anyTimes(); setUpGetPayloadExpectations(3); setUpGetBallooningExpectations(3); setUpGetGraphicsMultipleExpectations(3); setUpGetConsoleExpectations(0, 1, 2); setUpGetVmOvfExpectations(0, 1, 2); setUpGetVirtioScsiExpectations(0, 1, 2); setUpGetSoundcardExpectations(0, 1, 2); setUpGetRngDeviceExpectations(0, 1, 2); setUpGetCertuficateExpectations(3); setUpQueryExpectations(""); collection.setUriInfo(uriInfo); verifyCollection(getCollection()); }
private void mapDevices(java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice>> result, org.ovirt.engine.core.common.utils.VmDeviceType type, java.util.List<org.ovirt.engine.core.compat.Guid> vmIds) { log.debug("Retrieving graphics devices '{}' for '{}' vms", type.getName(), vmIds.size()); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devicesList = org.ovirt.engine.core.bll.GetGraphicsDevicesMultipleQuery.getDbFacade().getVmDeviceDao().getVmDeviceByType(VmDeviceGeneralType.GRAPHICS, org.ovirt.engine.core.bll.GetGraphicsDevicesMultipleQuery.getUserID(), org.ovirt.engine.core.bll.GetGraphicsDevicesMultipleQuery.getParameters().isFiltered()); devicesList.stream().filter(( device) -> (type.getName().equals(device.getDevice())) && (vmIds.contains(device.getVmId()))).forEach(( device) -> result.get(device.getVmId()).add(new org.ovirt.engine.core.common.businessentities.GraphicsDevice(device))); }	private void mapDevices(java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice>> result, org.ovirt.engine.core.common.utils.VmDeviceType type, java.util.List<org.ovirt.engine.core.compat.Guid> vmsIds) { log.debug("Retrieving graphics devices '{}' for '{}' vms", type.getName(), vmsIds.size()); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devicesList = org.ovirt.engine.core.bll.GetGraphicsDevicesMultipleQuery.getDbFacade().getVmDeviceDao().getVmDeviceByTypeAndDevice(vmsIds, VmDeviceGeneralType.GRAPHICS, type.getName(), org.ovirt.engine.core.bll.GetGraphicsDevicesMultipleQuery.getUserID(), org.ovirt.engine.core.bll.GetGraphicsDevicesMultipleQuery.getParameters().isFiltered()); for (org.ovirt.engine.core.common.businessentities.VmDevice device : devicesList) { result.computeIfAbsent(device.getVmId(), ( guid) -> new org.ovirt.engine.core.bll.ArrayList<>()).add(new org.ovirt.engine.core.common.businessentities.GraphicsDevice(device)); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> getVmDeviceByType(org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { return getCallsHandler().executeReadList("GetVmDeviceByType", createEntityRowMapper(), getCustomMapSqlParameterSource().addValue("type", type.getValue()).addValue("user_id", userID).addValue("is_filtered", isFiltered)); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> getVmDeviceByTypeAndDevice(java.util.List<org.ovirt.engine.core.compat.Guid> vmsIds, org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type, java.lang.String device, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_ids", createArrayOfUUIDs(vmsIds)).addValue("type", type.getValue()).addValue("device", device).addValue("user_id", userID).addValue("is_filtered", isFiltered); return getCallsHandler().executeReadList("GetVmDeviceByTypeAndDevice", createEntityRowMapper(), parameterSource); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> getVmDeviceByType(org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type) { return <START_MOD>getVmDeviceByType<END_MOD>(<START_MOD>type<END_MOD>, <START_MOD>null<END_MOD>, <START_MOD>false<END_MOD>); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> getVmDeviceByType(org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type) { return getCallsHandler().executeReadList("GetVmDeviceByType", createEntityRowMapper(), getCustomMapSqlParameterSource().addValue("type", type.getValue())); }
public static java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice>> getGraphicsDevicesForMultipleEntities(org.ovirt.engine.api.restapi.resource.BackendResource backendResource, java.util.List<org.ovirt.engine.core.compat.Guid> vmIds) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice>> graphicsDevices = backendResource.getEntity(java.util.Map.class, VdcQueryType.GetGraphicsDevicesMultiple, new org.ovirt.engine.core.common.queries.IdsQueryParameters(vmIds), java.lang.String.valueOf(vmIds.size()), true); return graphicsDevices; }	public static java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice>> getGraphicsDevicesForMultipleEntities(org.ovirt.engine.api.restapi.resource.BackendResource backendResource, java.util.List<org.ovirt.engine.core.compat.Guid> vmIds) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice>> graphicsDevices = backendResource.getEntity(java.util.Map.class, VdcQueryType.GetGraphicsDevicesMultiple, new org.ovirt.engine.core.common.queries.IdsQueryParameters(vmIds), "GetGraphicsDevicesMultiple", true); return graphicsDevices; }
private static void adjustDisplayDataInternal(org.ovirt.engine.api.restapi.resource.BackendResource backendResource, org.ovirt.engine.api.model.BaseResource res<START_MOD>, java.util.Map<org.ovirt.engine.core.compat.Guid,<END_MOD> java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>GraphicsDevice>> vmsGraphicsDevices) { org.ovirt.engine.api.model.Display display = org.ovirt.engine.api.restapi.util.DisplayHelper.extractDisplayFromResource(res); if ((display != null) && (!(display.isSetType()))) { java.util.List<org.ovirt.engine.core.common.businessentities.<END_MOD>GraphicsType> graphicsTypes = org.ovirt.engine.api.restapi.util.DisplayHelper.getGraphicsTypesForEntity(backendResource, new org.ovirt.engine.core.compat.Guid(res.getId())<START_MOD>, vmsGraphicsDevices<END_MOD>); if (graphicsTypes.contains(GraphicsType.SPICE)) { display.setType(DisplayType.SPICE.value()); } else if (graphicsTypes.contains(GraphicsType.VNC)) { display.setType(DisplayType.VNC.value()); } else { org.ovirt.engine.api.restapi.util.DisplayHelper.resetDisplay(res); } } }	private static void adjustDisplayDataInternal(org.ovirt.engine.api.restapi.resource.BackendResource backendResource, org.ovirt.engine.api.model.BaseResource res, java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice>> vmsGraphicsDevices) { org.ovirt.engine.api.model.Display display = org.ovirt.engine.api.restapi.util.DisplayHelper.extractDisplayFromResource(res); if ((display != null) && (!(display.isSetType()))) { java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsType> graphicsTypes = org.ovirt.engine.api.restapi.util.DisplayHelper.getGraphicsTypesForEntity(backendResource, new org.ovirt.engine.core.compat.Guid(res.getId()), vmsGraphicsDevices); if (graphicsTypes.contains(GraphicsType.SPICE)) { display.setType(DisplayType.SPICE); } else if (graphicsTypes.contains(GraphicsType.VNC)) { display.setType(DisplayType.VNC); } else { org.ovirt.engine.api.restapi.util.DisplayHelper.resetDisplay(res); } } }
java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> getVmDeviceByType(org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered);	java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> getVmDeviceByTypeAndDevice(java.util.List<org.ovirt.engine.core.compat.Guid> vmsIds, org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type, java.lang.String device, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered);
@java.lang.Override protected void executeQueryCommand() { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice>> result = new java.util.HashMap<>(); for (org.ovirt.engine.core.compat.Guid id : org.ovirt.engine.core.bll.GetGraphicsDevicesMultipleQuery.getParameters().getIds()) { result.put(id, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.GraphicsDevice>()); } mapDevices(result, VmDeviceType.SPICE, org.ovirt.engine.core.bll.GetGraphicsDevicesMultipleQuery.getParameters().getIds()); mapDevices(result, VmDeviceType.VNC, org.ovirt.engine.core.bll.GetGraphicsDevicesMultipleQuery.getParameters().getIds()); setReturnValue(result); }	@java.lang.Override protected void executeQueryCommand() { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice>> result = new java.util.HashMap<>(); mapDevices(result, VmDeviceType.SPICE, org.ovirt.engine.core.bll.GetGraphicsDevicesMultipleQuery.getParameters().getIds()); mapDevices(result, VmDeviceType.VNC, org.ovirt.engine.core.bll.GetGraphicsDevicesMultipleQuery.getParameters().getIds()); setReturnValue(result); }
private void testListAllConsoleAware(boolean allContent) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations(null); <START_MOD>setUpGetGraphicsMultipleExpectations<END_MOD>(3); if (allContent) { java.util.List<java.lang.String> populates = new java.util.ArrayList<>(); populates.add("true"); expect(httpHeaders.getRequestHeader(BackendResource.POPULATE)).andReturn(populates).anyTimes(); setUpGetPayloadExpectations(3); setUpGetBallooningExpectations(3); setUpGetConsoleExpectations(new int[]{ 0, 1, 2 }); setUpGetVmOvfExpectations(new int[]{ 0, 1, 2 }); setUpGetVirtioScsiExpectations(new int[]{ 0, 1, 2 }); setUpGetSoundcardExpectations(new int[]{ 0, 1, 2 }); setUpGetRngDeviceExpectations(new int[]{ 0, 1, 2 }); setUpGetCertuficateExpectations(3); } setUpQueryExpectations(""); collection.setUriInfo(uriInfo); verifyCollection(getCollection()); }	private void testListAllConsoleAware(boolean allContent) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations(null); setUpGetGraphicsMultipleExpectations(3); if (allContent) { java.util.List<java.lang.String> populates = new java.util.ArrayList<>(); populates.add("true"); expect(httpHeaders.getRequestHeader(BackendResource.POPULATE)).andReturn(populates).anyTimes(); setUpGetPayloadExpectations(3); setUpGetBallooningExpectations(3); setUpGetConsoleExpectations(0, 1, 2); setUpGetVmOvfExpectations(0, 1, 2); setUpGetVirtioScsiExpectations(0, 1, 2); setUpGetSoundcardExpectations(0, 1, 2); setUpGetRngDeviceExpectations(0, 1, 2); setUpGetCertuficateExpectations(3); } setUpQueryExpectations(""); collection.setUriInfo(uriInfo); verifyCollection(getCollection()); }
@java.lang.Override protected void endWithFailure() { if (isConsiderSuccessful()) { auditLog(this, AuditLogType.USER_MOVE_IMAGE_GROUP_FAILED_TO_DELETE_SRC_IMAGE); this.endSuccessfully(); return; } super.endWithFailure(); unlockDisk(); org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.setSucceeded(true); }	@java.lang.Override protected void endWithFailure() { if (isConsiderSuccessful()) { auditLog(this, AuditLogType.USER_MOVE_IMAGE_GROUP_FAILED_TO_DELETE_SRC_IMAGE); this.endSuccessfully(); return; } super.endWithFailure(); handleDestDisk(); unlockDisk(); org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.setSucceeded(true); }
<START_MOD>private void replicateDiskFinish(<END_MOD>org.ovirt.engine.core.compat.Guid <START_MOD>srcDomain, <END_MOD>org.ovirt.engine.core.compat.Guid <START_MOD>dstDomain) { if (Guid.Empty.equals(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getVdsId())) { log.error( '{}' is not running on any VDS, skipping VmReplicateDiskFinish org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getVmId()); return; }<END_MOD> org.ovirt.engine.core.common.<START_MOD>vdscommands.VmReplicateDiskParameters migrationStartParams = new<END_MOD> org.ovirt.engine.core.common.<START_MOD>vdscommands.VmReplicateDiskParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getVdsId(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getVmId(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getStoragePoolId(), srcDomain, dstDomain, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getDestinationImageId()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue ret = org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().runVdsCommand(VDSCommandType.VmReplicateDiskFinish, migrationStartParams); if (!(ret.getSucceeded())<END_MOD>) { <START_MOD>throw new org.ovirt.engine.core.common.errors.EngineException(ret.getVdsError().getCode(), ret.getVdsError().getMessage()<END_MOD>); }<START_MOD> }<END_MOD>	private void replicateDiskFinish(org.ovirt.engine.core.compat.Guid srcDomain, org.ovirt.engine.core.compat.Guid dstDomain) { org.ovirt.engine.core.common.vdscommands.VmReplicateDiskParameters migrationStartParams = new org.ovirt.engine.core.common.vdscommands.VmReplicateDiskParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getVdsId(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getVmId(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getStoragePoolId(), srcDomain, dstDomain, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getDestinationImageId()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue ret = org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().runVdsCommand(VDSCommandType.VmReplicateDiskFinish, migrationStartParams); if (!(ret.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(ret.getVdsError().getCode(), ret.getVdsError().getMessage()); } }
private void removeImage(org.ovirt.engine.core.compat.Guid storageDomain) { org.ovirt.engine.core.common.action.RemoveImageParameters removeImageParams = new org.ovirt.engine.core.common.action.RemoveImageParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getDestinationImageId()); removeImageParams.setStorageDomainId(storageDomain); removeImageParams.setParentCommand(VdcActionType.RemoveImage); removeImageParams.setDbOperationScope(ImageDbOperationScope.NONE); removeImageParams.setShouldLockImage(false); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalActionWithTasksContext(VdcActionType.RemoveImage, removeImageParams); if (returnValue.getSucceeded()) { startPollingAsyncTasks(returnValue.getInternalVdsmTaskIdList()); } }	private org.ovirt.engine.core.bll.context.CommandContext createStepsContext(org.ovirt.engine.core.common.job.StepEnum step) { org.ovirt.engine.core.common.job.Step addedStep = org.ovirt.engine.core.bll.job.ExecutionHandler.addSubStep(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getExecutionContext(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getExecutionContext().getJob().getStep(StepEnum.EXECUTING), step, org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveStepMessage(step, java.util.Collections.emptyMap())); org.ovirt.engine.core.bll.job.ExecutionContext ctx = new org.ovirt.engine.core.bll.job.ExecutionContext(); ctx.setStep(addedStep); ctx.setMonitored(true); org.ovirt.engine.core.bll.context.CommandContext commandCtx = org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContextForTasks(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getContext(), null).withExecutionContext(ctx); return commandCtx; }
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getLiveDiskMigrateStage()) == (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters.LiveDiskMigrateStage.IMAGE_PLACEHOLDER_CREATION)) { updateStage(LiveDiskMigrateStage.VM_REPLICATE_START); replicateDiskStart(); updateStage(LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_START); syncImageData(); updateStage(LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_END); return true; } if ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getLiveDiskMigrateStage()) == (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters.LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_END)) { completeLiveMigration(); updateStage(LiveDiskMigrateStage.SOURCE_IMAGE_DELETION); removeImage(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getSourceStorageDomainId()); return false; } return false; }	@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getLiveDiskMigrateStage()) == (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters.LiveDiskMigrateStage.IMAGE_PLACEHOLDER_CREATION)) { updateStage(LiveDiskMigrateStage.VM_REPLICATE_DISK_START); replicateDiskStart(); updateStage(LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_START); syncImageData(); updateStage(LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_END); return true; } if ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getLiveDiskMigrateStage()) == (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters.LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_END)) { updateStage(LiveDiskMigrateStage.VM_REPLICATE_DISK_FINISH); completeLiveMigration(); updateStage(LiveDiskMigrateStage.SOURCE_IMAGE_DELETION); org.ovirt.engine.core.bll.storage.lsm.LiveStorageMigrationHelper.removeImage(this, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getSourceStorageDomainId(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getDestinationImageId(), AuditLogType.USER_MOVE_IMAGE_GROUP_FAILED_TO_DELETE_SRC_IMAGE); return false; } return false; }
private org.ovirt.engine.core.common.action.CreateImagePlaceholderCommandParameters buildCreateImagePlacerholderParams() { org.ovirt.engine.core.common.action.CreateImagePlaceholderCommandParameters p = new org.ovirt.engine.core.common.action.CreateImagePlaceholderCommandParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getSourceStorageDomainId(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getTargetStorageDomainId()); p.setParentCommand(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getActionType()); p.setParentParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters()); p.setShouldBeEndedByParent(false); return p; }	private org.ovirt.engine.core.common.action.CreateImagePlaceholderCommandParameters buildCreateImagePlacerholderParams() { org.ovirt.engine.core.common.action.CreateImagePlaceholderCommandParameters p = new org.ovirt.engine.core.common.action.CreateImagePlaceholderCommandParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getSourceStorageDomainId(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getTargetStorageDomainId()); p.setParentCommand(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getActionType()); p.setParentParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters()); p.setEndProcedure(EndProcedure.COMMAND_MANAGED); return p; }
public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return new org.ovirt.engine.core.bll.ConcurrentChildCommandsExecutionCallback(); }	public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return new org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback(); }
<START_MOD>protected org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters getCreateSnapshotParameters<END_MOD>() { <START_MOD>org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters params = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getVmId(),   for Live Storage Migration params.setParentCommand(VdcActionType.LiveMigrateVmDisks); params.setSnapshotType(SnapshotType.REGULAR); params.setParentParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters()); params.setImagesParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getImagesParameters()); params.setTaskGroupSuccess(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getTaskGroupSuccess()); params.setDisks(getMovedDisks()); params.setDiskIdsToIgnoreInChecks(getMovedDiskIds()); params.setNeedsLocking(false); params.setShouldBeEndedByParent(false); return params; <END_MOD>}	protected org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters getCreateSnapshotParameters() { org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters params = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getVmId(), "Auto-generated for Live Storage Migration"); params.setParentCommand(VdcActionType.LiveMigrateVmDisks); params.setSnapshotType(SnapshotType.REGULAR); params.setParentParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters()); params.setImagesParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getImagesParameters()); params.setTaskGroupSuccess(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getTaskGroupSuccess()); params.setDisks(getMovedDisks()); params.setDiskIdsToIgnoreInChecks(getMovedDiskIds()); params.setNeedsLocking(false); params.setEndProcedure(EndProcedure.COMMAND_MANAGED); return params; }
<START_MOD>private<END_MOD> void <START_MOD>syncImageData<END_MOD>() { <START_MOD>org.ovirt.engine.core.common.action.SyncImageGroupDataCommandParameters parameters = new org.ovirt.engine.core.common.action.SyncImageGroupDataCommandParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getSourceStorageDomainId(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getTargetStorageDomainId()); parameters.setShouldBeEndedByParent(false); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters()); runInternalAction(VdcActionType.SyncImageGroupData, parameters); <END_MOD>}	private void syncImageData() { org.ovirt.engine.core.common.action.SyncImageGroupDataCommandParameters parameters = new org.ovirt.engine.core.common.action.SyncImageGroupDataCommandParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getSourceStorageDomainId(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getTargetStorageDomainId()); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters()); runInternalAction(VdcActionType.SyncImageGroupData, parameters, createStepsContext(StepEnum.SYNC_IMAGE_DATA)); }
@java.lang.Override protected <START_MOD>void executeCommand() { runInternalAction(VdcActionType<END_MOD>.<START_MOD>CreateImagePlaceholder, buildCreateImagePlacerholderParams(), <END_MOD>org.ovirt.engine.core.bll.<START_MOD>job<END_MOD>.<START_MOD>ExecutionHandler.createInternalJobContext<END_MOD>(org.ovirt.engine.core.bll.<START_MOD>storage<END_MOD>.<START_MOD>lsm.LiveMigrateDiskCommand.getContext<END_MOD>(<START_MOD>)));<END_MOD> org.ovirt.engine.core.bll.storage.lsm.<START_MOD>LiveMigrateDiskCommand.setSucceeded<END_MOD>(<START_MOD>true<END_MOD>); }	@java.lang.Override protected void executeCommand() { runInternalAction(VdcActionType.CreateImagePlaceholder, buildCreateImagePlacerholderParams(), createStepsContext(StepEnum.CLONE_IMAGE_STRUCTURE)); org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.setSucceeded(true); }
public static org.ovirt.engine.core.common.utils.CpuVendor fromFlags(java.util.Set<java.lang.String> flags) { for (org.ovirt.engine.core.common.utils.CpuVendor vendor : org.ovirt.engine.core.common.utils.CpuVendor.values()) { if (flags.contains(vendor.flag)) { return vendor; } } throw new java.lang.RuntimeException(("Unknow processor vendor. Flags: " + flags)); }	public static org.ovirt.engine.core.common.utils.CpuVendor fromFlags(java.util.Set<java.lang.String> flags) { for (org.ovirt.engine.core.common.utils.CpuVendor vendor : org.ovirt.engine.core.common.utils.CpuVendor.values()) { if (flags.contains(vendor.flag)) { return vendor; } } return null; }
protected static boolean canAttachPrestartedVmToUser(org.ovirt.engine.core.compat.Guid vmId<START_MOD>, boolean isStatefulPool<END_MOD>, java.util.List<java.lang.String> messages) { return (!(org.ovirt.engine.core.bll.VmPoolCommandBase.vmAssignedToUser(vmId, messages))) && (<START_MOD>isStatefulPool || (<END_MOD>org.ovirt.engine.core.bll.VmPoolCommandBase.vmIsRunningStateless(vmId))<START_MOD>)<END_MOD>; }	protected static boolean canAttachPrestartedVmToUser(org.ovirt.engine.core.compat.Guid vmId, boolean isStatefulPool, java.util.List<java.lang.String> messages) { return (!(org.ovirt.engine.core.bll.VmPoolCommandBase.vmAssignedToUser(vmId, messages))) && ((isStatefulPool && (!(org.ovirt.engine.core.bll.VmPoolCommandBase.vmIsStartedByRunOnce(vmId)))) || (org.ovirt.engine.core.bll.VmPoolCommandBase.vmIsRunningStateless(vmId))); }
private org.ovirt.engine.core.compat.Guid getPrestartedVmToAttach(org.ovirt.engine.core.compat.Guid vmPoolId) {<START_MOD> org.ovirt.engine.core.common.businessentities.VmPool vmPool = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPoolDao().get(vmPoolId);<END_MOD> java.util.List<org.ovirt.engine.core.common.businessentities.VmPoolMap> vmPoolMaps = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPoolDao().getVmMapsInVmPoolByVmPoolIdAndStatus(vmPoolId, VMStatus.Up); if (vmPoolMaps != null) { for (org.ovirt.engine.core.common.businessentities.VmPoolMap map : vmPoolMaps) { if (canAttachPrestartedVmToUser(map.getVmId(), <START_MOD>vmPool.isStateful(), <END_MOD>org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getReturnValue().getValidationMessages())) { return map.getVmId(); } } } return org.ovirt.engine.core.compat.Guid.Empty; }	private org.ovirt.engine.core.compat.Guid getPrestartedVmToAttach(org.ovirt.engine.core.compat.Guid vmPoolId) { java.util.List<org.ovirt.engine.core.common.businessentities.VmPoolMap> vmPoolMaps = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPoolDao().getVmMapsInVmPoolByVmPoolIdAndStatus(vmPoolId, VMStatus.Up); if (vmPoolMaps != null) { for (org.ovirt.engine.core.common.businessentities.VmPoolMap map : vmPoolMaps) { if (canAttachPrestartedVmToUser(map.getVmId(), org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPool().isStateful(), org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getReturnValue().getValidationMessages())) { return map.getVmId(); } } } return org.ovirt.engine.core.compat.Guid.Empty; }
public java.util.List<java.lang.Integer> getUnSyncedEntiresTrend() { return unSyncedEntiresTrend; }	public java.util.List<java.lang.Integer> getUnSyncedEntriesTrend() { return unSyncedEntriesTrend; }
public java.lang.Integer getUnsycnedEntries() { return unSycnedEntries; }	public java.lang.Integer getUnSyncedEntries() { return unSyncedEntries; }
public void setUnSyncedEntiresTrend(java.util.List<java.lang.Integer> unSyncedEntiresTrend) { this.unSyncedEntiresTrend = unSyncedEntiresTrend; }	public void setUnSyncedEntriesTrend(java.util.List<java.lang.Integer> unSyncedEntriesTrend) { this.unSyncedEntriesTrend = unSyncedEntriesTrend; setSelfHealEta(calculateSelfHealEta()); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, volumeId, serverId, brickDirectory, brickOrder, status, asyncTask<START_MOD>, unSycnedEntries, unSyncedEntiresTrend<END_MOD>); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, volumeId, serverId, brickDirectory, brickOrder, status, asyncTask, unSyncedEntries, unSyncedEntriesTrend, selfHealEta); }
@java.lang.Override public org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> getBatchMapper() { return new org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>() { @java.lang.Override public org.springframework.jdbc.core.namedparam.MapSqlParameterSource map(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource paramValue = new org.springframework.jdbc.core.namedparam.MapSqlParameterSource().addValue("volume_id", entity.getVolumeId()).addValue("server_id", entity.getServerId()).addValue("brick_dir", entity.getBrickDirectory()).addValue("status", entity.getStatus().name()).addValue("id", entity.getId().toString()).addValue("brick_order", entity.getBrickOrder()).addValue("network_id", entity.getNetworkId()).addValue("task_id", ((entity.getAsyncTask().getTaskId()) != null ? entity.getAsyncTask().getTaskId().toString() : ""))<START_MOD>.addValue("unsynced_entries", entity.getUnsycnedEntries()).addValue("unsynced_entires_history", entity.getUnSyncedEntiresTrend())<END_MOD>; return paramValue; } }; }	@java.lang.Override public org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> getBatchMapper() { return new org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>() { @java.lang.Override public org.springframework.jdbc.core.namedparam.MapSqlParameterSource map(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource paramValue = new org.springframework.jdbc.core.namedparam.MapSqlParameterSource().addValue("volume_id", entity.getVolumeId()).addValue("server_id", entity.getServerId()).addValue("brick_dir", entity.getBrickDirectory()).addValue("status", entity.getStatus().name()).addValue("id", entity.getId().toString()).addValue("brick_order", entity.getBrickOrder()).addValue("network_id", entity.getNetworkId()).addValue("task_id", ((entity.getAsyncTask().getTaskId()) != null ? entity.getAsyncTask().getTaskId().toString() : "")).addValue("unsynced_entries", entity.getUnSyncedEntries()).addValue("unsynced_entries_history", org.apache.commons.lang.StringUtils.join(entity.getUnSyncedEntriesTrend(), ",")); return paramValue; } }; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); brick.setId(getGuidDefaultEmpty(rs, "id")); brick.setVolumeId(getGuidDefaultEmpty(rs, "volume_id")); brick.setVolumeName(rs.getString("volume_name")); org.ovirt.engine.core.compat.Guid serverId = getGuidDefaultEmpty(rs, "server_id"); brick.setServerId(serverId); brick.setServerName(rs.getString("vds_name")); brick.setBrickDirectory(rs.getString("brick_dir")); brick.setBrickOrder(rs.getInt("brick_order")); brick.setStatus(org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.valueOf(rs.getString("status"))); brick.getAsyncTask().setTaskId(getGuid(rs, "task_id")); brick.setNetworkId(getGuid(rs, "network_id")); brick.setNetworkAddress(rs.getString("interface_address")); <START_MOD>brick.setUnsycnedEntries(rs.getInt("unsynced_entries")); brick.setUnSyncedEntiresTrend(org.ovirt.engine.core.dao.gluster.GlusterBrickDaoImpl.asIntList(((java.lang.String) (rs.getObject("unsynced_entires_history"))))); <END_MOD>return brick; }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); brick.setId(getGuidDefaultEmpty(rs, "id")); brick.setVolumeId(getGuidDefaultEmpty(rs, "volume_id")); brick.setVolumeName(rs.getString("volume_name")); org.ovirt.engine.core.compat.Guid serverId = getGuidDefaultEmpty(rs, "server_id"); brick.setServerId(serverId); brick.setServerName(rs.getString("vds_name")); brick.setBrickDirectory(rs.getString("brick_dir")); brick.setBrickOrder(rs.getInt("brick_order")); brick.setStatus(org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.valueOf(rs.getString("status"))); brick.getAsyncTask().setTaskId(getGuid(rs, "task_id")); brick.setNetworkId(getGuid(rs, "network_id")); brick.setNetworkAddress(rs.getString("interface_address")); brick.setUnSyncedEntries(((rs.getObject("unsynced_entries")) != null ? rs.getInt("unsynced_entries") : null)); brick.setUnSyncedEntriesTrend(org.ovirt.engine.core.dao.gluster.GlusterBrickDaoImpl.asIntList(((java.lang.String) (rs.getObject("unsynced_entries_history"))))); return brick; }
public void setUnsycnedEntries(java.lang.Integer unsycnedEntries) { this.unSycnedEntries = unsycnedEntries; }	public void setUnSyncedEntries(java.lang.Integer unSyncedEntries) { this.unSyncedEntries = unSyncedEntries; }
@java.lang.Override public org.springframework.jdbc.core.namedparam.MapSqlParameterSource map(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource paramValue = new org.springframework.jdbc.core.namedparam.MapSqlParameterSource().addValue("volume_id", entity.getVolumeId()).addValue("server_id", entity.getServerId()).addValue("brick_dir", entity.getBrickDirectory()).addValue("status", entity.getStatus().name()).addValue("id", entity.getId().toString()).addValue("brick_order", entity.getBrickOrder()).addValue("network_id", entity.getNetworkId()).addValue("task_id", ((entity.getAsyncTask().getTaskId()) != null ? entity.getAsyncTask().getTaskId().toString() : ""))<START_MOD>.addValue("unsynced_entries", entity.getUnsycnedEntries()).addValue("unsynced_entires_history", entity.getUnSyncedEntiresTrend())<END_MOD>; return paramValue; }	@java.lang.Override public org.springframework.jdbc.core.namedparam.MapSqlParameterSource map(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource paramValue = new org.springframework.jdbc.core.namedparam.MapSqlParameterSource().addValue("volume_id", entity.getVolumeId()).addValue("server_id", entity.getServerId()).addValue("brick_dir", entity.getBrickDirectory()).addValue("status", entity.getStatus().name()).addValue("id", entity.getId().toString()).addValue("brick_order", entity.getBrickOrder()).addValue("network_id", entity.getNetworkId()).addValue("task_id", ((entity.getAsyncTask().getTaskId()) != null ? entity.getAsyncTask().getTaskId().toString() : "")).addValue("unsynced_entries", entity.getUnSyncedEntries()).addValue("unsynced_entries_history", org.apache.commons.lang.StringUtils.join(entity.getUnSyncedEntriesTrend(), ",")); return paramValue; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity other = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity) (obj)); return ((((((<START_MOD>((<END_MOD>java.util.Objects.equals(id, other.id)) && (java.util.Objects.equals(volumeId, other.volumeId))) && (java.util.Objects.equals(serverId, other.serverId))) && (java.util.Objects.equals(brickDirectory, other.brickDirectory))) && (java.util.Objects.equals(brickOrder, other.brickOrder))) && (java.util.Objects.equals(asyncTask, other.asyncTask))) && (<START_MOD>java.util.Objects.equals(unSycnedEntries, other.unSycnedEntries))) && (java.util.Objects.equals(unSyncedEntiresTrend, other.unSyncedEntiresTrend))) && (<END_MOD>(status) == (other.status)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity other = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity) (obj)); return (((((((((java.util.Objects.equals(id, other.id)) && (java.util.Objects.equals(volumeId, other.volumeId))) && (java.util.Objects.equals(serverId, other.serverId))) && (java.util.Objects.equals(brickDirectory, other.brickDirectory))) && (java.util.Objects.equals(brickOrder, other.brickOrder))) && (java.util.Objects.equals(asyncTask, other.asyncTask))) && (java.util.Objects.equals(unSyncedEntries, other.unSyncedEntries))) && (java.util.Objects.equals(unSyncedEntriesTrend, other.unSyncedEntriesTrend))) && (java.util.Objects.equals(selfHealEta, other.selfHealEta))) && ((status) == (other.status)); }
public void copyFrom(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) { setId(brick.getId()); setVolumeId(brick.getVolumeId()); setServerId(brick.getServerId()); setServerName(brick.getServerName()); setBrickDirectory(brick.getBrickDirectory()); setBrickOrder(brick.getBrickOrder()); <START_MOD>setUnsycnedEntries(brick.unSycnedEntries); setUnSyncedEntiresTrend(brick.getUnSyncedEntiresTrend()); <END_MOD>setStatus(brick.getStatus()); }	public void copyFrom(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) { setId(brick.getId()); setVolumeId(brick.getVolumeId()); setServerId(brick.getServerId()); setServerName(brick.getServerName()); setBrickDirectory(brick.getBrickDirectory()); setBrickOrder(brick.getBrickOrder()); setUnSyncedEntries(brick.unSyncedEntries); setUnSyncedEntriesTrend(brick.getUnSyncedEntriesTrend()); setStatus(brick.getStatus()); }
protected org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters getCreateSnapshotParameters() { org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters params = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getVmId(), <START_MOD>org.ovirt.engine.core.common.constants.StorageConstants.LSM_AUTO_GENERATED_SNAPSHOT_DESCRIPTION);<END_MOD> params.setParentCommand(VdcActionType.LiveMigrateVmDisks); params.setSnapshotType(SnapshotType.REGULAR); params.setParentParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters()); params.setImagesParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getImagesParameters()); params.setTaskGroupSuccess(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getTaskGroupSuccess()); params.setDisks(getMovedDisks()); params.setDiskIdsToIgnoreInChecks(getMovedDiskIds()); params.setNeedsLocking(false); params.setEndProcedure(EndProcedure.COMMAND_MANAGED); return params; }	protected org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters getCreateSnapshotParameters() { org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters params = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getVmId(), "Auto-generated for Live Storage Migration"); params.setParentCommand(VdcActionType.LiveMigrateVmDisks); params.setSnapshotType(SnapshotType.REGULAR); params.setParentParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters()); params.setImagesParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getImagesParameters()); params.setTaskGroupSuccess(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getTaskGroupSuccess()); params.setDisks(getMovedDisks()); params.setDiskIdsToIgnoreInChecks(getMovedDiskIds()); params.setNeedsLocking(false); params.setEndProcedure(EndProcedure.COMMAND_MANAGED); return params; }
protected boolean validateImages() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesToValidate = getDiskImagesToValidate(); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(imagesToValidate); <START_MOD>boolean<END_MOD> <START_MOD>isVmQualifiedForLMOrImagesNotIllegal<END_MOD> <START_MOD>=<END_MOD> (org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVm().isQualifiedForLiveSnapshotMerge()) || (validate(diskImagesValidator.diskImagesNotIllegal()))<START_MOD>; return org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getParameters(<END_MOD>)<START_MOD>.isNeedsLocking() ? isVmQualifiedForLMOrImagesNotIllegal && (validate(diskImagesValidator.diskImagesNotLocked())) : isVmQualifiedForLMOrImagesNotIllegal<END_MOD>; }	protected boolean validateImages() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesToValidate = getDiskImagesToValidate(); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(imagesToValidate); return (validateImagesNotLocked(diskImagesValidator)) && ((org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVm().isQualifiedForLiveSnapshotMerge()) || (validate(diskImagesValidator.diskImagesNotIllegal()))); }
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getLiveDiskMigrateStage()) == (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters.LiveDiskMigrateStage.IMAGE_PLACEHOLDER_CREATION)) { updateStage(LiveDiskMigrateStage.VM_REPLICATE_DISK_START); replicateDiskStart(); updateStage(LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_START); syncImageData(); updateStage(LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_END); return true; } if ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getLiveDiskMigrateStage()) == (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters.LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_END)) { updateStage(LiveDiskMigrateStage.VM_REPLICATE_DISK_FINISH); completeLiveMigration(); updateStage(LiveDiskMigrateStage.SOURCE_IMAGE_DELETION); org.ovirt.engine.core.bll.storage.lsm.LiveStorageMigrationHelper.removeImage(this, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getSourceStorageDomainId(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getDestinationImageId(), AuditLogType.USER_MOVE_IMAGE_GROUP_FAILED_TO_DELETE_SRC_IMAGE); <START_MOD>updateStage(LiveDiskMigrateStage.AUTO_GENERATED_SNAPSHOT_REMOVE_START); removeAutogeneratedSnapshot(); updateStage(LiveDiskMigrateStage.AUTO_GENERATED_SNAPSHOT_REMOVE_END); <END_MOD>return <START_MOD>true; } return <END_MOD>false; }	@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getLiveDiskMigrateStage()) == (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters.LiveDiskMigrateStage.IMAGE_PLACEHOLDER_CREATION)) { updateStage(LiveDiskMigrateStage.VM_REPLICATE_DISK_START); replicateDiskStart(); updateStage(LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_START); syncImageData(); updateStage(LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_END); return true; } if ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getLiveDiskMigrateStage()) == (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters.LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_END)) { updateStage(LiveDiskMigrateStage.VM_REPLICATE_DISK_FINISH); completeLiveMigration(); updateStage(LiveDiskMigrateStage.SOURCE_IMAGE_DELETION); org.ovirt.engine.core.bll.storage.lsm.LiveStorageMigrationHelper.removeImage(this, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getSourceStorageDomainId(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getDestinationImageId(), AuditLogType.USER_MOVE_IMAGE_GROUP_FAILED_TO_DELETE_SRC_IMAGE); return false; } return false; }
@org.ovirt.api.metamodel.annotations.Service services.<START_MOD>NetworkLabelsService<END_MOD> labels();	@org.ovirt.api.metamodel.annotations.Service services.NetworkLabelsService networkLabels();
public org.ovirt.engine.ui.webadmin.section.main.presenter.DynamicUrlContentTabProxy create(com.google.gwt.event.shared.GwtEvent.Type<com.gwtplatform.mvp.client.RequestTabsHandler> requestTabsEventType, com.google.gwt.event.shared.GwtEvent.Type<com.gwtplatform.mvp.client.ChangeTabHandler> changeTabEventType, com.google.gwt.event.shared.GwtEvent.Type<com.gwtplatform.mvp.client.proxy.RevealContentHandler<?>> slot, java.lang.String label, float priority, java.lang.String historyToken, boolean isMainTab, java.lang.String contentUrl, org.ovirt.engine.ui.common.widget.Align align) { <START_MOD>if (isMainTab) { commonModelProvider.get().addUiPluginListModel(label, historyToken); } <END_MOD>return new org.ovirt.engine.ui.webadmin.section.main.presenter.DynamicUrlContentTabProxy(placeManager, eventBus, gatekeeper, requestTabsEventType, changeTabEventType, slot, viewProvider, label, priority, historyToken, isMainTab, contentUrl, align<START_MOD>, commonModelProvider<END_MOD>); }	public org.ovirt.engine.ui.webadmin.section.main.presenter.DynamicUrlContentTabProxy create(com.google.gwt.event.shared.GwtEvent.Type<com.gwtplatform.mvp.client.RequestTabsHandler> requestTabsEventType, com.google.gwt.event.shared.GwtEvent.Type<com.gwtplatform.mvp.client.ChangeTabHandler> changeTabEventType, com.google.gwt.event.shared.GwtEvent.Type<com.gwtplatform.mvp.client.proxy.RevealContentHandler<?>> slot, java.lang.String label, float priority, java.lang.String historyToken, boolean isMainTab, java.lang.String contentUrl, org.ovirt.engine.ui.common.widget.Align align, java.lang.String searchPrefix) { if (isMainTab) { commonModelProvider.get().addPluginModel(historyToken, (searchPrefix != null ? searchPrefix : label.replace(":", ""))); } return new org.ovirt.engine.ui.webadmin.section.main.presenter.DynamicUrlContentTabProxy(placeManager, eventBus, gatekeeper, requestTabsEventType, changeTabEventType, slot, viewProvider, label, priority, historyToken, isMainTab, contentUrl, align, commonModelProvider); }
public void setUiPluginTabSelected(java.lang.String tabName) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?, ?> uiPluginListModel = uiPluginLabelListMap.get(tabName); if (uiPluginListModel != null) { setSelectedItem(uiPluginListModel); } setSearchStringPrefix(uiPluginListModel.getListName()); setSearchString(""); }	public void setPluginTabSelected(java.lang.String historyToken) { org.ovirt.engine.ui.uicommonweb.models.plugin.PluginModel model = pluginModelMap.get(historyToken); if (model != null) { setSelectedItem(model); setSearchEnabled(false); } else { setSelectedItem(getDefaultItem()); } }
public void addUiPluginListModel(final java.lang.String label, java.lang.String historyToken) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<java.lang.Void, java.lang.Void> uiPluginListModel = new org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<java.lang.Void, java.lang.Void>() { @java.lang.Override protected java.lang.String getListName() { return label; } }; uiPluginListModel.setSearchString(label); uiPluginListModel.setApplicationPlace(historyToken); getItems().add(uiPluginListModel); uiPluginLabelListMap.put(historyToken, uiPluginListModel); }	public void addPluginModel(java.lang.String historyToken, java.lang.String searchPrefix) { org.ovirt.engine.ui.uicommonweb.models.plugin.PluginModel model = new org.ovirt.engine.ui.uicommonweb.models.plugin.PluginModel(historyToken, searchPrefix); getItems().add(model); pluginModelMap.put(historyToken, model); }
@java.lang.Override protected void onReveal() { super.onReveal(); commonModelProvider.get().setUiPluginTabSelected(this.getProxy().getNameToken()); }	@java.lang.Override protected void onReveal() { super.onReveal(); commonModelProvider.get().setPluginTabSelected(getProxy().getTargetHistoryToken()); }
public void setUsePatternFly(boolean usePatternFly) {<START_MOD> this.usePatternFly = usePatternFly;<END_MOD> getWidget().addStyleName(style.listBox()); if (usePatternFly) { container.addStyleName(Styles.FORM_CONTROL); container.addStyleName(style.container<START_MOD>()); container.removeStyleName(style.container_legacy<END_MOD>()); getWidget().addStyleName(style.listBoxPatternfly()); groupLabelContainer.addStyleName(style.labelContainer()); } else { container.addStyleName(style.container_legacy()); } }	public void setUsePatternFly(boolean usePatternFly) { getWidget().addStyleName(style.listBox()); if (usePatternFly) { container.addStyleName(Styles.FORM_CONTROL); container.addStyleName(style.container()); container.removeStyleName(style.container_legacy()); getWidget().addStyleName(style.listBoxPatternfly()); groupLabelContainer.addStyleName(style.labelContainer()); } else { container.addStyleName(style.container_legacy()); } }
private void refreshSelfHealData(org.ovirt.engine.core.common.businessentities.VDS upServer, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { java.lang.Integer usageHistoryLimit = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.UsageHistoryLimit); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> healInfo = getGlusterVolumeHealInfo(upServer, volume.getName()); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : volume.getBricks()) { brick.setUnsycnedEntries(healInfo.get(brick.getId())); brick.setUnSyncedEntiresTrend(addToHistory(brick.getUnSyncedEntiresTrend(), healInfo.get(brick.getId()), usageHistoryLimit)); } getBrickDao().updateUnSyncedEntries(volume.getBricks()); }	private void refreshSelfHealData(org.ovirt.engine.core.common.businessentities.VDS upServer, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { java.lang.Integer usageHistoryLimit = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.GlusterUnSyncedEntriesHistoryLimit); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> healInfo = getGlusterVolumeHealInfo(upServer, volume.getName()); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : volume.getBricks()) { brick.setUnSyncedEntries(healInfo.get(brick.getId())); brick.setUnSyncedEntriesTrend(addToHistory(brick.getUnSyncedEntriesTrend(), healInfo.get(brick.getId()), usageHistoryLimit)); } getBrickDao().updateUnSyncedEntries(volume.getBricks()); }
java.util.List<java.lang.Integer> addToHistory(java.util.List<java.lang.Integer> current, java.lang.Integer newValue, int limit) { if (newValue == null) { return current; } if ((current == null) || (current.isEmpty())) { return java.util.Arrays.asList(newValue); } if (limit == 0) { return java.util.Collections.emptyList(); } java.util.List<java.lang.Integer> res = new java.util.ArrayList<>(current); res.add(newValue); if (limit >= (res.size())) { return res; } return res.subList(((res.size()) - limit), res.size()); }	private java.util.List<java.lang.Integer> addToHistory(java.util.List<java.lang.Integer> current, java.lang.Integer newValue, int limit) { if (newValue == null) { newValue = -1; } if ((current == null) || (current.isEmpty())) { return java.util.Arrays.asList(newValue); } if (limit == 0) { return java.util.Collections.emptyList(); } java.util.List<java.lang.Integer> res = new java.util.ArrayList<>(current); res.add(newValue); if (limit >= (res.size())) { return res; } return res.subList(((res.size()) - limit), res.size()); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("refreshSelfHealInfo") public void refreshSelfHealInfo() { log.debug("Refreshing Gluster Self Heal Data"); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : getClusterDao().getAll()) { if (cluster.supportsGlusterService()) { try { refreshSelfHealData(cluster); } catch (java.lang.Exception e) { log.error("Error while refreshing Gluster self heal data of cluster '{}': {}", cluster.getName(), e.getMessage()); log.debug("Exception", e); } } } }	@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("refreshSelfHealInfo") public void refreshSelfHealInfo() { log.debug("Refreshing Gluster Self Heal Data"); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : getClusterDao().getAll()) { if (supportsGlusterSelfHealMonitoring(cluster)) { try { refreshSelfHealData(cluster); } catch (java.lang.Exception e) { log.error("Error while refreshing Gluster self heal data of cluster '{}': {}", cluster.getName(), e.getMessage()); log.debug("Exception", e); } } } log.debug("Refreshing Gluster Self Heal data is completed"); }
public void refreshSelfHealData(org.ovirt.engine.core.common.businessentities.Cluster cluster) { org.ovirt.engine.core.common.businessentities.VDS upServer = getClusterUtils().getRandomUpServer(cluster.getId()); if (upServer == null) { log.debug("No server UP in cluster '{}'. Can't refresh self heal data at this point.", cluster.getName()); return; } for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume : getVolumeDao().getByClusterId(cluster.getId())) { log.debug("Refreshing self heal status for volume '{}' of cluster '{}'", volume.getName(), cluster.getName()); if (volume.isOnline()) { acquireLock(cluster.getId()); try { refreshSelfHealData(upServer, volume); } catch (java.lang.Exception e) { log.error("Error while refreshing brick statuses for volume '{}' of cluster '{}': {}", volume.getName(), cluster.getName(), e.getMessage()); log.debug("Exception", e); } finally { releaseLock(cluster.getId()); } } } }	public void refreshSelfHealData(org.ovirt.engine.core.common.businessentities.Cluster cluster) { org.ovirt.engine.core.common.businessentities.VDS upServer = getClusterUtils().getRandomUpServer(cluster.getId()); if (upServer == null) { log.debug("No server UP in cluster '{}'. Can't refresh self heal data at this point.", cluster.getName()); return; } for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume : getVolumeDao().getByClusterId(cluster.getId())) { log.debug("Refreshing self heal status for volume '{}' of cluster '{}'", volume.getName(), cluster.getName()); if (volume.isOnline()) { try { refreshSelfHealData(upServer, volume); } catch (java.lang.Exception e) { log.error("Error while refreshing brick statuses for volume '{}' of cluster '{}': {}", volume.getName(), cluster.getName(), e.getMessage()); log.debug("Exception", e); } } } }
protected java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> getGlusterVolumeHealInfo(org.ovirt.engine.core.common.businessentities.VDS upServer, java.lang.String volumeName) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue result = runVdsCommand(VDSCommandType.GetGlusterVolumeHealInfo, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeVDSParameters(upServer.getId(), volumeName)); return ((java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer>) (result.getReturnValue())); }	private java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> getGlusterVolumeHealInfo(org.ovirt.engine.core.common.businessentities.VDS upServer, java.lang.String volumeName) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue result = runVdsCommand(VDSCommandType.GetGlusterVolumeHealInfo, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeVDSParameters(upServer.getId(), volumeName)); if (result.getSucceeded()) { return ((java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer>) (result.getReturnValue())); } else { return java.util.Collections.emptyMap(); } }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("UnSynced Entries") java.lang.String UnSyncedEntries();	@org.ovirt.engine.ui.webadmin.DefaultStringValue("Network Filter") java.lang.String networkFilterNameVnicProfile();
@java.lang.Override protected java.util.List<java.lang.Integer> getValues(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity object) { return object.getUnSyncedEntiresTrend(); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity object) { if ((object.getSelfHealEta()) > 0) { return super.getValue(object); } else { return (object.getUnSyncedEntries()) == null ? org.ovirt.engine.ui.webadmin.section.main.view.tab.gluster.SubTabVolumeBrickView.constants.notAvailableLabel() : (object.getUnSyncedEntries()) > 0 ? org.ovirt.engine.ui.webadmin.section.main.view.tab.gluster.SubTabVolumeBrickView.messages.unSyncedEntriesPresent(object.getUnSyncedEntries()) : org.ovirt.engine.ui.webadmin.section.main.view.tab.gluster.SubTabVolumeBrickView.constants.GlusterSelfHealOk(); } }
public java.util.List<org.ovirt.engine.core.common.businessentities.GuestContainer> getGuestContainerList() { return vmDynamic.getGuestContainerList(); }	public java.util.List<org.ovirt.engine.core.common.businessentities.GuestContainer> getGuestContainers() { return vmDynamic.getGuestContainers(); }
public void setGuestContainerList(java.util.List<org.ovirt.engine.core.common.businessentities.GuestContainer> containerList) { vmDynamic.setGuestContainerList(containerList); }	public void setGuestContainers(java.util.List<org.ovirt.engine.core.common.businessentities.GuestContainer> containers) { vmDynamic.setGuestContainers(containers); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, acpiEnabled, appList, bootSequence, clientIp, vncKeyboardLayout, consoleCurrentUserName, guestCurUserName, consoleUserId, guestOs, guestRequestedMemory, kvmEnable, lastVdsRunOn, disks, exitMessage, exitStatus, win2kHackEnabled, migratingToVds, pauseStatus, runOnVds, session, status, utcDiff, vmHost, vmIp, vmFQDN, lastStartTime, lastStopTime, vmPid, lastWatchdogEvent, lastWatchdogAction, runOnce, cpuName, guestAgentStatus, currentCd, stopReason, exitReason, emulatedMachine, graphicsInfos, guestMemoryFree, guestMemoryBuffered, guestMemoryCached, guestOsTimezoneName, guestOsTimezoneOffset, guestOsArch, guestOsCodename, guestOsDistribution, guestOsKernelVersion, guestOsVersion, guestOsType<START_MOD>, guestContainerList<END_MOD>); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, acpiEnabled, appList, bootSequence, clientIp, vncKeyboardLayout, consoleCurrentUserName, guestCurUserName, consoleUserId, guestOs, guestRequestedMemory, kvmEnable, lastVdsRunOn, disks, exitMessage, exitStatus, win2kHackEnabled, migratingToVds, pauseStatus, runOnVds, session, status, utcDiff, vmHost, vmIp, vmFQDN, lastStartTime, lastStopTime, vmPid, lastWatchdogEvent, lastWatchdogAction, runOnce, cpuName, guestAgentStatus, currentCd, stopReason, exitReason, emulatedMachine, graphicsInfos, guestMemoryFree, guestMemoryBuffered, guestMemoryCached, guestOsTimezoneName, guestOsTimezoneOffset, guestOsArch, guestOsCodename, guestOsDistribution, guestOsKernelVersion, guestOsVersion, guestOsType, guestContainers); }
public void setGuestContainerList(java.util.List<org.ovirt.engine.core.common.businessentities.GuestContainer> guestContainerList) { this.guestContainerList = guestContainerList; }	public void setGuestContainers(java.util.List<org.ovirt.engine.core.common.businessentities.GuestContainer> guestContainers) { this.guestContainers = guestContainers; }
public java.util.List<org.ovirt.engine.core.common.businessentities.GuestContainer> getGuestContainerList() { return guestContainerList; }	public java.util.List<org.ovirt.engine.core.common.businessentities.GuestContainer> getGuestContainers() { return guestContainers; }
private static java.lang.String toGuestContainerListString(org.ovirt.engine.core.common.businessentities.VmDynamic vm) { try { return new org.codehaus.jackson.map.ObjectMapper().writeValueAsString(vm.getGuestContainerList()); } catch (java.lang.Exception e) { return "[]"; } }	private static java.lang.String toGuestContainersString(org.ovirt.engine.core.common.businessentities.VmDynamic vm) { try { return org.ovirt.engine.core.dao.VmDynamicDaoImpl.JSON_MAPPER.writeValueAsString(vm.getGuestContainers()); } catch (java.lang.Exception e) { return "[]"; } }
private static java.util.ArrayList<org.ovirt.engine.core.common.businessentities.GuestContainer> fromContainerListString(java.lang.String s) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.GuestContainer> v = new java.util.ArrayList<>(); try { new org.codehaus.jackson.map.ObjectMapper().readerForUpdating(v).readTree(s); } catch (java.lang.Exception e) { } return v; }	@java.lang.SuppressWarnings("unchecked") private static java.util.List<org.ovirt.engine.core.common.businessentities.GuestContainer> fromContainersString(java.lang.String s) { try { return ((java.util.List<org.ovirt.engine.core.common.businessentities.GuestContainer>) (org.ovirt.engine.core.dao.VmDynamicDaoImpl.JSON_MAPPER.readValue(s, new org.codehaus.jackson.type.TypeReference<java.util.List<org.ovirt.engine.core.common.businessentities.GuestContainer>>() {}))); } catch (java.lang.Exception e) { return new java.util.ArrayList<>(); } }
private static void initGuestContainerList(java.util.Map<java.lang.String, java.lang.Object> vmStruct, org.ovirt.engine.core.common.businessentities.VmDynamic vm) { if (vmStruct.containsKey(VdsProperties.guest_containers)) { vm.setGuestContainerList(new java.util.ArrayList()); java.lang.Object obj = vmStruct.get(VdsProperties.guest_containers); if (obj instanceof java.lang.Object[]) { java.lang.Object[] containerList = ((java.lang.Object[]) (obj)); for (java.lang.Object containerObj : containerList) { java.util.Map<java.lang.String, java.lang.Object> container = ((java.util.Map<java.lang.String, java.lang.Object>) (containerObj)); vm.getGuestContainerList().add(new org.ovirt.engine.core.common.businessentities.GuestContainer(((java.lang.String) (container.get(VdsProperties.guest_container_id))), ((java.util.List<java.lang.Object>) (container.get(VdsProperties.guest_container_names))).stream().map(( nameObj) -> ((java.lang.String) (nameObj))).collect(java.util.stream.Collectors.toList()), ((java.lang.String) (container.get(VdsProperties.guest_container_image))), ((java.lang.String) (container.get(VdsProperties.guest_container_command))), ((java.lang.String) (container.get(VdsProperties.guest_container_status))))); } } } }	private static void initGuestContainers(java.util.Map<java.lang.String, java.lang.Object> vmStruct, org.ovirt.engine.core.common.businessentities.VmDynamic vm) { if (vmStruct.containsKey(VdsProperties.guest_containers)) { vm.setGuestContainers(new java.util.ArrayList()); java.lang.Object obj = vmStruct.get(VdsProperties.guest_containers); if (obj instanceof java.lang.Object[]) { java.lang.Object[] containers = ((java.lang.Object[]) (obj)); for (java.lang.Object containerObj : containers) { java.util.Map<java.lang.String, java.lang.Object> container = ((java.util.Map<java.lang.String, java.lang.Object>) (containerObj)); java.util.ArrayList<java.lang.String> names = new java.util.ArrayList<>(); for (java.lang.Object o : ((java.lang.Object[]) (container.get(VdsProperties.guest_container_names)))) { names.add(((java.lang.String) (o))); } vm.getGuestContainers().add(new org.ovirt.engine.core.common.businessentities.GuestContainer(((java.lang.String) (container.get(VdsProperties.guest_container_id))), names, ((java.lang.String) (container.get(VdsProperties.guest_container_image))), ((java.lang.String) (container.get(VdsProperties.guest_container_command))), ((java.lang.String) (container.get(VdsProperties.guest_container_status))))); } } } else { vm.setGuestContainers(java.util.Collections.emptyList()); } }
org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.GuestContainer, org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void>, org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestContainerListModel<org.ovirt.engine.core.common.businessentities.VM>> getSubTabVirtualMachineGuestContainerModelProvider();	org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.GuestContainer, org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void>, org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestContainerListModel> getSubTabVirtualMachineGuestContainerModelProvider();
protected void updateGuestContainerList() { if ((org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestContainerListModel.getEntity()) instanceof org.ovirt.engine.core.common.businessentities.VM) { setItems(((org.ovirt.engine.core.common.businessentities.VM) (org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestContainerListModel.getEntity())).getGuestContainerList()); } else { org.ovirt.engine.core.common.businessentities.VmPool pool = ((org.ovirt.engine.core.common.businessentities.VmPool) (org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestContainerListModel.getEntity())); if (pool != null) { org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { if (result != null) { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (result)).getReturnValue(); if (vm != null) { setItems(vm.getGuestContainerList()); } } } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVmDataByPoolId, new org.ovirt.engine.core.common.queries.IdQueryParameters(pool.getVmPoolId()), _asyncQuery); } } }	protected void updateGuestContainers() { if ((getEntity()) != null) { setItems(getEntity().getGuestContainers()); } }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.GuestContainer row) { if (row != null) { return row.getStatus(); } return org.ovirt.engine.ui.common.widget.uicommon.vm.VmGuestContainerListModelTable.constants.empty(); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.GuestContainer row) { return row.getStatus(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.GuestContainer row) { if ((row != null) && ((row.getNames()) != null)) { return org.ovirt.engine.ui.uicompat.external.StringUtils.join(row.getNames(), ", "); } return org.ovirt.engine.ui.common.widget.uicommon.vm.VmGuestContainerListModelTable.constants.empty(); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.GuestContainer row) { return org.ovirt.engine.ui.uicompat.external.StringUtils.join(row.getNames(), ", "); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.GuestContainer row) { if (row != null) { return row.getCommand(); } return org.ovirt.engine.ui.common.widget.uicommon.vm.VmGuestContainerListModelTable.constants.empty(); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.GuestContainer row) { return row.getCommand(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.GuestContainer row) { if (row != null) { return row.getImage(); } return org.ovirt.engine.ui.common.widget.uicommon.vm.VmGuestContainerListModelTable.constants.empty(); }	@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.GuestContainer row) { return row.getImage(); }
@java.lang.Override protected void syncSearch() { updateGuestContainerList(); org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestContainerListModel.setIsQueryFirstTime(false); }	@java.lang.Override protected void syncSearch() { updateGuestContainers(); }
@java.lang.Override protected void onEntityChanged() { super.onEntityChanged(); updateGuestContainerList(); }	@java.lang.Override protected void onEntityChanged() { super.onEntityChanged(); updateGuestContainers(); }
@java.lang.Override protected void entityPropertyChanged(java.lang.Object sender, PropertyChangedEventArgs e) { super.entityPropertyChanged(sender, e); if (e.propertyName.equals("guestContainerList")) { updateGuestContainerList(); } }	@java.lang.Override protected void entityPropertyChanged(java.lang.Object sender, PropertyChangedEventArgs e) { super.entityPropertyChanged(sender, e); if (e.propertyName.equals("guestContainers")) { updateGuestContainers(); } }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.VirtualMachineSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.GuestContainer, org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void>, org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestContainerListModel<org.ovirt.engine.core.common.businessentities.VM>> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachineGuestContainerPresenter.constants.virtualMachineContainerSubTabLabel(), 4, modelProvider); }	@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.VirtualMachineSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.GuestContainer, org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void>, org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestContainerListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachineGuestContainerPresenter.constants.virtualMachineContainerSubTabLabel(), 4, modelProvider); }
public static java.lang.String getDefaultProfile(org.ovirt.engine.core.sso.utils.SsoExtensionsManager extensionsManager) { java.util.Optional<org.ovirt.engine.core.extensions.mgr.ExtensionProxy> defaultExtension = extensionsManager.getExtensionsByService(org.ovirt.engine.api.extensions.aaa.Authn.class.getName()).stream().filter(ExtensionProxy::isDefault).findFirst(); return defaultExtension.isPresent() ? org.ovirt.engine.core.sso.utils.AuthenticationUtils.getProfileName(defaultExtension.get()) : null; }	public static java.lang.String getDefaultProfile(org.ovirt.engine.core.sso.utils.SsoExtensionsManager extensionsManager) { java.util.Optional<org.ovirt.engine.core.extensions.mgr.ExtensionProxy> defaultExtension = extensionsManager.getExtensionsByService(org.ovirt.engine.api.extensions.aaa.Authn.class.getName()).stream().filter(( a) -> java.lang.Boolean.valueOf(a.getContext().<java.util.Properties>get(Base.ContextKeys.CONFIGURATION).getProperty(Authn.ConfigKeys.DEFAULT_PROFILE))).findFirst(); return defaultExtension.isPresent() ? org.ovirt.engine.core.sso.utils.AuthenticationUtils.getProfileName(defaultExtension.get()) : null; }
public static void copyMigrationOptions(org.ovirt.engine.api.model.MigrationOptions model, org.ovirt.engine.core.common.businessentities.HasMigrationOptions entity) { if (model.isSetAutoConverge()) { entity.setAutoConverge(org.ovirt.engine.api.restapi.types.MigrationOptionsMapper.mapFromInheritableBoolean(model.getAutoConverge())); } if (model.isSetCompressed()) { entity.setMigrateCompressed(org.ovirt.engine.api.restapi.types.MigrationOptionsMapper.mapFromInheritableBoolean(model.getCompressed())); } <START_MOD>if (model.isSetMigrationPolicyId()) { org.ovirt.engine.core.compat.Guid id = (!(model.getMigrationPolicyId().isEmpty())) ? org.ovirt.engine.core.compat.Guid.createGuidFromString(model.getMigrationPolicyId()) : null; entity.setMigrationPolicyId(id); } }<END_MOD>	public static void copyMigrationOptions(org.ovirt.engine.api.model.MigrationOptions model, org.ovirt.engine.core.common.businessentities.HasMigrationOptions entity) { if (model.isSetAutoConverge()) { entity.setAutoConverge(org.ovirt.engine.api.restapi.types.MigrationOptionsMapper.mapFromInheritableBoolean(model.getAutoConverge())); } if (model.isSetCompressed()) { entity.setMigrateCompressed(org.ovirt.engine.api.restapi.types.MigrationOptionsMapper.mapFromInheritableBoolean(model.getCompressed())); } if (model.isSetPolicy()) { if (model.getPolicy().isSetId()) { entity.setMigrationPolicyId(org.ovirt.engine.core.compat.Guid.createGuidFromString(model.getPolicy().getId())); } else { entity.setMigrationPolicyId(null); } } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.HasMigrationOptions.class, to = org.ovirt.engine.api.model.MigrationOptions.class) public static org.ovirt.engine.api.model.MigrationOptions map(org.ovirt.engine.core.common.businessentities.HasMigrationOptions entity, org.ovirt.engine.api.model.MigrationOptions template) { if (template == null) { template = new org.ovirt.engine.api.model.MigrationOptions(); } template.setAutoConverge(org.ovirt.engine.api.restapi.types.MigrationOptionsMapper.mapToInheritableBoolean(entity.getAutoConverge())); template.setCompressed(org.ovirt.engine.api.restapi.types.MigrationOptionsMapper.mapToInheritableBoolean(entity.getMigrateCompressed())); <START_MOD>template.setMigrationPolicyId(((entity.getMigrationPolicyId()) != null ? entity.getMigrationPolicyId().toString() : null)); <END_MOD>return template; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.HasMigrationOptions.class, to = org.ovirt.engine.api.model.MigrationOptions.class) public static org.ovirt.engine.api.model.MigrationOptions map(org.ovirt.engine.core.common.businessentities.HasMigrationOptions entity, org.ovirt.engine.api.model.MigrationOptions template) { if (template == null) { template = new org.ovirt.engine.api.model.MigrationOptions(); } template.setAutoConverge(org.ovirt.engine.api.restapi.types.MigrationOptionsMapper.mapToInheritableBoolean(entity.getAutoConverge())); template.setCompressed(org.ovirt.engine.api.restapi.types.MigrationOptionsMapper.mapToInheritableBoolean(entity.getMigrateCompressed())); if ((entity.getMigrationPolicyId()) != null) { org.ovirt.engine.api.model.MigrationPolicy policy = template.getPolicy(); if (policy == null) { policy = new org.ovirt.engine.api.model.MigrationPolicy(); template.setPolicy(policy); } policy.setId(entity.getMigrationPolicyId().toString()); } return template; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.Cluster.class, to = org.ovirt.engine.api.model.MigrationOptions.class) public static org.ovirt.engine.api.model.MigrationOptions map(org.ovirt.engine.core.common.businessentities.Cluster entity, org.ovirt.engine.api.model.MigrationOptions template) { template = org.ovirt.engine.api.restapi.types.MigrationOptionsMapper.map(entity, template); org.ovirt.engine.api.model.Bandwidth bandwidth = template.getBandwidth(); if (bandwidth == null) { bandwidth = new org.ovirt.engine.api.model.Bandwidth(); template.setBandwidth(bandwidth); } switch (entity.getMigrationBandwidthLimitType()) { case AUTO : bandwidth.setType(BandwidthType.AUTO); break; case VDSM_CONFIG : bandwidth.setType(BandwidthType.HYPERVISOR_DEFAULT); break; case CUSTOM : bandwidth.setType(BandwidthType.CUSTOM); bandwidth.setCustomValue(entity.getCustomMigrationNetworkBandwidth()); break; } return template; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.Cluster.class, to = org.ovirt.engine.api.model.MigrationOptions.class) public static org.ovirt.engine.api.model.MigrationOptions map(org.ovirt.engine.core.common.businessentities.Cluster entity, org.ovirt.engine.api.model.MigrationOptions template) { template = org.ovirt.engine.api.restapi.types.MigrationOptionsMapper.map(entity, template); org.ovirt.engine.api.model.MigrationBandwidth bandwidth = template.getBandwidth(); if (bandwidth == null) { bandwidth = new org.ovirt.engine.api.model.MigrationBandwidth(); template.setBandwidth(bandwidth); } switch (entity.getMigrationBandwidthLimitType()) { case AUTO : bandwidth.setAssignmentMethod(MigrationBandwidthAssignmentMethod.AUTO); break; case VDSM_CONFIG : bandwidth.setAssignmentMethod(MigrationBandwidthAssignmentMethod.HYPERVISOR_DEFAULT); break; case CUSTOM : bandwidth.setAssignmentMethod(MigrationBandwidthAssignmentMethod.CUSTOM); bandwidth.setCustomValue(entity.getCustomMigrationNetworkBandwidth()); break; } return template; }
public static void copyMigrationOptions(org.ovirt.engine.api.model.MigrationOptions model, org.ovirt.engine.core.common.businessentities.Cluster entity) { org.ovirt.engine.api.restapi.types.MigrationOptionsMapper.copyMigrationOptions(model, entity); if (model.isSetBandwidth()) { org.ovirt.engine.api.model.Bandwidth bandwidth = model.getBandwidth(); switch (bandwidth.getType()) { case AUTO : entity.setMigrationBandwidthLimitType(MigrationBandwidthLimitType.AUTO); break; case HYPERVISOR_DEFAULT : entity.setMigrationBandwidthLimitType(MigrationBandwidthLimitType.VDSM_CONFIG); break; case CUSTOM : entity.setMigrationBandwidthLimitType(MigrationBandwidthLimitType.CUSTOM); entity.setCustomMigrationNetworkBandwidth(model.getBandwidth().getCustomValue()); } } }	public static void copyMigrationOptions(org.ovirt.engine.api.model.MigrationOptions model, org.ovirt.engine.core.common.businessentities.Cluster entity) { org.ovirt.engine.api.restapi.types.MigrationOptionsMapper.copyMigrationOptions(model, entity); if (model.isSetBandwidth()) { org.ovirt.engine.api.model.MigrationBandwidth bandwidth = model.getBandwidth(); switch (bandwidth.getAssignmentMethod()) { case AUTO : entity.setMigrationBandwidthLimitType(MigrationBandwidthLimitType.AUTO); break; case HYPERVISOR_DEFAULT : entity.setMigrationBandwidthLimitType(MigrationBandwidthLimitType.VDSM_CONFIG); break; case CUSTOM : entity.setMigrationBandwidthLimitType(MigrationBandwidthLimitType.CUSTOM); entity.setCustomMigrationNetworkBandwidth(model.getBandwidth().getCustomValue()); } } }
java.lang.String <START_MOD>contenWithQuestionMarkLabel<END_MOD>();	java.lang.String contentWithQuestionMarkLabel();
private static java.lang.Object cloneVDS(org.ovirt.engine.core.common.businessentities.VDS instance) { org.ovirt.engine.core.common.businessentities.VDS obj = new org.ovirt.engine.core.common.businessentities.VDS(); obj.setHostName(instance.getHostName()); obj.setSshKeyFingerprint(instance.getSshKeyFingerprint()); obj.setSshPort(instance.getSshPort()); obj.setSshUsername(instance.getSshUsername()); obj.setFenceAgents(org.ovirt.engine.ui.uicommonweb.Cloner.cloneAgents(instance.getFenceAgents())); obj.setDisablePowerManagementPolicy(instance.isDisablePowerManagementPolicy()); obj.setPmKdumpDetection(instance.isPmKdumpDetection()); obj.setPort(instance.getPort()); obj.setServerSslEnabled(instance.isServerSslEnabled()); obj.setClusterId(instance.getClusterId()); obj.setId(instance.getId()); obj.setVdsName(instance.getName()); obj.setVdsStrength(instance.getVdsStrength()); obj.setVdsType(instance.getVdsType()); obj.setUniqueId(instance.getUniqueId()); obj.setVdsSpmPriority(instance.getVdsSpmPriority()); obj.setProtocol(instance.getProtocol()); <START_MOD>obj.setCurrentKernelCmdline(instance.getCurrentKernelCmdline()); obj.setLastSentKernelCmdline(instance.getLastSentKernelCmdline()); obj.setKernelCmdlineIommu(instance.isKernelCmdlineIommu()); obj.setKernelCmdlineKvmNested(instance.isKernelCmdlineKvmNested()); obj.setKernelCmdlinePciRealloc(instance.isKernelCmdlinePciRealloc()); obj.setKernelCmdlineUnsafeInterrupts(instance.isKernelCmdlineUnsafeInterrupts()); <END_MOD>return obj; }	private static java.lang.Object cloneVDS(org.ovirt.engine.core.common.businessentities.VDS instance) { org.ovirt.engine.core.common.businessentities.VDS obj = new org.ovirt.engine.core.common.businessentities.VDS(); obj.setHostName(instance.getHostName()); obj.setSshKeyFingerprint(instance.getSshKeyFingerprint()); obj.setSshPort(instance.getSshPort()); obj.setSshUsername(instance.getSshUsername()); obj.setFenceAgents(org.ovirt.engine.ui.uicommonweb.Cloner.cloneAgents(instance.getFenceAgents())); obj.setDisablePowerManagementPolicy(instance.isDisablePowerManagementPolicy()); obj.setPmKdumpDetection(instance.isPmKdumpDetection()); obj.setPort(instance.getPort()); obj.setServerSslEnabled(instance.isServerSslEnabled()); obj.setClusterId(instance.getClusterId()); obj.setId(instance.getId()); obj.setVdsName(instance.getName()); obj.setVdsStrength(instance.getVdsStrength()); obj.setVdsType(instance.getVdsType()); obj.setUniqueId(instance.getUniqueId()); obj.setVdsSpmPriority(instance.getVdsSpmPriority()); obj.setProtocol(instance.getProtocol()); return obj; }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, hostName, consoleAddress, name, otpValidity, pmEnabled, pmKdumpDetection, port, protocol, sshPort, sshUsername, serverSslEnabled, uniqueId, clusterId, vdsStrength, vdsType, disablePowerManagementPolicy, hostProviderId<START_MOD>, currentKernelCmdline, kernelCmdlineParsable, lastStoredKernelCmdline, kernelCmdlineIommu, kernelCmdlineKvmNested, kernelCmdlinePciRealloc, kernelCmdlineUnsafeInterrupts<END_MOD>); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, hostName, consoleAddress, name, otpValidity, pmEnabled, pmKdumpDetection, port, protocol, sshPort, sshUsername, serverSslEnabled, uniqueId, clusterId, vdsStrength, vdsType, disablePowerManagementPolicy, hostProviderId, openstackNetworkProviderId, currentKernelCmdline, kernelCmdlineParsable, lastStoredKernelCmdline, kernelCmdlineIommu, kernelCmdlineKvmNested, kernelCmdlinePciRealloc, kernelCmdlineUnsafeInterrupts); }
void updateVdsStaticLastStoredKernelCmdline(org.ovirt.engine.core.compat.Guid hostId, java.lang.String lastStoredKernelCmdline);	void updateLastStoredKernelCmdline(org.ovirt.engine.core.compat.Guid vdsStaticId, java.lang.String lastStoredKernelCmdline);
public static org.ovirt.engine.core.dao.VdsStaticDaoImpl.KernelCmdlineColumn fromJson(java.lang.String json) { try { return new org.codehaus.jackson.map.ObjectMapper().readValue(json, org.ovirt.engine.core.dao.VdsStaticDaoImpl.KernelCmdlineColumn.class); } catch (java.io.IOException ex) { throw new java.lang.RuntimeException(("Error during JSON deserialization of " + (org.ovirt.engine.core.dao.VdsStaticDaoImpl.KernelCmdlineColumn.class.getCanonicalName())), ex); } }	public static org.ovirt.engine.core.dao.VdsStaticDaoImpl.KernelCmdlineColumn fromJson(java.lang.String json) { final java.lang.String nonSafeJson = (json == null) ? "{}" : json; try { return new org.codehaus.jackson.map.ObjectMapper().readValue(nonSafeJson, org.ovirt.engine.core.dao.VdsStaticDaoImpl.KernelCmdlineColumn.class); } catch (java.io.IOException ex) { throw new java.lang.RuntimeException(("Error during JSON deserialization of " + (org.ovirt.engine.core.dao.VdsStaticDaoImpl.KernelCmdlineColumn.class.getCanonicalName())), ex); } }
@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.VdsStatic vds) { getCallsHandler().executeModification("UpdateVdsStatic", <START_MOD>getUpdateParams<END_MOD>(vds)); }	@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.VdsStatic vds) { getCallsHandler().executeModification("UpdateVdsStatic", getInsertOrUpdateParams(vds)); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.VdsStatic vds) { org.ovirt.engine.core.compat.Guid id = vds.getId(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(id)) { id = org.ovirt.engine.core.compat.Guid.newGuid(); vds.setId(id); } new org.springframework.jdbc.core.simple.SimpleJdbcCall(getJdbcTemplate()).withProcedureName("InsertVdsStatic").execute(<START_MOD>getInsertParams<END_MOD>(vds)); }	@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.VdsStatic vds) { org.ovirt.engine.core.compat.Guid id = vds.getId(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(id)) { id = org.ovirt.engine.core.compat.Guid.newGuid(); vds.setId(id); } new org.springframework.jdbc.core.simple.SimpleJdbcCall(getJdbcTemplate()).withProcedureName("InsertVdsStatic").execute(getInsertOrUpdateParams(vds)); }
public static org.ovirt.engine.core.common.utils.CpuVendor fromFlags(java.lang.String flags) { for (org.ovirt.engine.core.common.utils.CpuVendor vendor : org.ovirt.engine.core.common.utils.CpuVendor.values()) { if (flags.contains(vendor.flag)) { return vendor; } } throw new java.lang.RuntimeException(("Unknow processor vendor. Flags: " + flags)); }	public static org.ovirt.engine.core.common.utils.CpuVendor fromFlags(java.util.Set<java.lang.String> flags) { for (org.ovirt.engine.core.common.utils.CpuVendor vendor : org.ovirt.engine.core.common.utils.CpuVendor.values()) { if (flags.contains(vendor.flag)) { return vendor; } } return null; }
public static long getSerialVersionUID() { return org.ovirt.engine.core.common.businessentities.VDS.serialVersionUID; }	public boolean isHostedEngineHost() { return hostedEngineHost; }
@java.lang.Override public void updateVdsStaticLastStoredKernelCmdline(org.ovirt.engine.core.compat.Guid hostId, java.lang.String lastStoredKernelCmdline) { getCallsHandler().executeModification("UpdateVdsStaticLastStoredKernelCmdline", getCustomMapSqlParameterSource().addValue("last_stored_kernel_cmdline", lastStoredKernelCmdline)); }	@java.lang.Override public void updateLastStoredKernelCmdline(org.ovirt.engine.core.compat.Guid vdsStaticId, java.lang.String lastStoredKernelCmdline) { getCallsHandler().executeModification("UpdateVdsStaticLastStoredKernelCmdline", getCustomMapSqlParameterSource().addValue("vds_id", vdsStaticId).addValue("last_stored_kernel_cmdline", lastStoredKernelCmdline)); }
private void addKernelCmdlineCheckboxesListeners() { final org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs> listener = new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (isKernelCmdlineParsable()) { updateKernelCmdline(); } } }; getKernelCmdlineIommu().getEntityChangedEvent().addListener(listener); getKernelCmdlineKvmNested().getEntityChangedEvent().addListener(listener); getKernelCmdlineUnsafeInterrupts().getEntityChangedEvent().addListener(listener); getKernelCmdlinePciRealloc().getEntityChangedEvent().addListener(listener); }	private void addKernelCmdlineCheckboxesListeners() { getKernelCmdlineIommu().getEntityChangedEvent().addListener(this); getKernelCmdlineKvmNested().getEntityChangedEvent().addListener(this); getKernelCmdlineUnsafeInterrupts().getEntityChangedEvent().addListener(this); getKernelCmdlinePciRealloc().getEntityChangedEvent().addListener(this); }
public void initCache(org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel) { cacheConfigValues(new org.ovirt.engine.ui.frontend.AsyncQuery(loginModel, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { getDefaultConfigurationVersion(target); } })); initOsNames(); initOsDefaultIconIds(); initUniqueOsNames(); initLinuxOsTypes(); initWindowsOsTypes(); initDisplayTypes(); initBalloonSupportMap(); initNicHotplugSupportMap(); initDiskHotpluggableInterfacesMap(); initOsArchitecture(); initDefaultOSes(); initMigrationSupportMap(); initMemorySnapshotSupportMap(); initSuspendSupportMap(); initMemoryHotUnplugSupportMap(); initCustomPropertiesList(); initSoundDeviceSupportMap(); <START_MOD>initCpuMap(); <END_MOD>}	public void initCache(org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel) { cacheConfigValues(new org.ovirt.engine.ui.frontend.AsyncQuery(loginModel, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { getDefaultConfigurationVersion(target); } })); initOsNames(); initOsDefaultIconIds(); initUniqueOsNames(); initLinuxOsTypes(); initWindowsOsTypes(); initDisplayTypes(); initBalloonSupportMap(); initNicHotplugSupportMap(); initDiskHotpluggableInterfacesMap(); initOsArchitecture(); initDefaultOSes(); initMigrationSupportMap(); initMemorySnapshotSupportMap(); initSuspendSupportMap(); initMemoryHotUnplugSupportMap(); initCustomPropertiesList(); initSoundDeviceSupportMap(); initMigrationPolicies(); initCpuMap(); }
@org.ovirt.engine.ui.common.Template("This is not entire kernel command line. Parameters listed below will be added to default kernel parameters.") com.google.gwt.safehtml.shared.SafeHtml kernelCmdlineInfoIcon();	@org.ovirt.engine.ui.common.Template("This is not the entire kernel command line. Parameters listed below will be added to default kernel parameters.") com.google.gwt.safehtml.shared.SafeHtml kernelCmdlineInfoIcon();
private void addKernelCmdlineResetListener(final org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model) { registerHandler(getView().getKernelCmdlineResetButton().addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { model.onKernelCmdlineResetButton(); } })); }	private void addKernelCmdlineResetListener(final org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model) { registerHandler(getView().getKernelCmdlineResetButton().addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { model.resetKernelCmdline(); } })); }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { model.onKernelCmdlineResetButton(); }	@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { model.resetKernelCmdline(); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends T> ev, java.lang.Object sender, T args) { if (enabled) { delegate.eventRaised(ev, sender, args); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends T> ev, java.lang.Object sender, T args) { if ((enabled) && ((delegate) != null)) { delegate.eventRaised(ev, sender, args); } }
private void updateKernelCmdline() { final org.ovirt.engine.core.common.utils.CpuVendor cpuVendor = getCurrentCpuVendor(); if (((((cpuVendor == null) || ((getKernelCmdlineIommu().getEntity()) == null)) || ((getKernelCmdlineKvmNested().getEntity()) == null)) || ((getKernelCmdlineUnsafeInterrupts().getEntity()) == null)) || ((getKernelCmdlinePciRealloc().getEntity()) == null)) { return; } final java.lang.String kernelCmdline = org.ovirt.engine.core.common.utils.KernelCmdlineUtil.create(cpuVendor, getKernelCmdlineIommu().getEntity(), getKernelCmdlineKvmNested().getEntity(), getKernelCmdlineUnsafeInterrupts().getEntity(), getKernelCmdlinePciRealloc().getEntity()); kernelCmdlineListener.setEnabled(false); getKernelCmdline().setEntity(kernelCmdline); kernelCmdlineListener.setEnabled(true); }	private void updateKernelCmdlineAccordingToCheckboxes() { final org.ovirt.engine.core.common.utils.CpuVendor cpuVendor = getCurrentCpuVendor(); if (((((cpuVendor == null) || ((getKernelCmdlineIommu().getEntity()) == null)) || ((getKernelCmdlineKvmNested().getEntity()) == null)) || ((getKernelCmdlineUnsafeInterrupts().getEntity()) == null)) || ((getKernelCmdlinePciRealloc().getEntity()) == null)) { return; } final java.lang.String kernelCmdline = org.ovirt.engine.ui.uicommonweb.models.hosts.KernelCmdlineUtil.create(cpuVendor, getKernelCmdlineIommu().getEntity(), getKernelCmdlineKvmNested().getEntity(), getKernelCmdlineUnsafeInterrupts().getEntity(), getKernelCmdlinePciRealloc().getEntity()); kernelCmdlineListener.whilePaused(new java.lang.Runnable() { @java.lang.Override public void run() { getKernelCmdline().setEntity(kernelCmdline); } }); }
private void updateKernelCmdlineCheckboxesChangeability() { final org.ovirt.engine.core.common.utils.CpuVendor cpuVendor = getCurrentCpuVendor(); if (cpuVendor == null) { return; } switch (cpuVendor) { case INTEL : case AMD : setKernelCmdlineCheckboxesChangeability(isKernelCmdlineParsable(), constants.kernelCmdlineCheckboxesAndDirectCustomizationNotAllowed()); break; case IBM : setKernelCmdlineCheckboxesChangeability(false, constants.kernelCmdlineNotAvailableInClusterWithIbmCpu()); break; default : throw new java.lang.RuntimeException(("Unknown CpuVendor type: " + cpuVendor)); } }	protected void updateKernelCmdlineCheckboxesChangeability() { final org.ovirt.engine.core.common.utils.CpuVendor cpuVendor = getCurrentCpuVendor(); if (cpuVendor == null) { return; } switch (cpuVendor) { case INTEL : case AMD : setKernelCmdlineCheckboxesChangeability(isKernelCmdlineParsable(), constants.kernelCmdlineCheckboxesAndDirectCustomizationNotAllowed()); break; case IBM : setKernelCmdlineCheckboxesChangeability(false, constants.kernelCmdlineNotAvailableInClusterWithIbmCpu()); break; default : throw new java.lang.RuntimeException(("Unknown CpuVendor type: " + cpuVendor)); } }
private void addKernelCmdlineListener() { kernelCmdlineListener = new org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.EnableableIEventListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { setKernelCmdlineParsable(false); resetKernelCmdlineCheckboxes(); } }); getKernelCmdline().getEntityChangedEvent().addListener(kernelCmdlineListener); }	private void addKernelCmdlineListener() { kernelCmdlineListener = new org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.EnableableEventListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { setKernelCmdlineParsable(false); resetKernelCmdlineCheckboxes(); } }); getKernelCmdline().getEntityChangedEvent().addListener(kernelCmdlineListener); }
@org.ovirt.engine.ui.common.DefaultStringValue("Modifying the settings below can lead to a boot failure. " + "Please consult the documentation before doing any changes.") java.lang.String kernelCmdlineWarning();	@org.ovirt.engine.ui.common.DefaultStringValue("Modifying kernel boot parameters settings can lead to a host boot failure. " + ("Please consult the documentation before doing any changes. " + "The host needs to be rebooted after successful host deploy for kernel boot parameters to be applied.")) java.lang.String kernelCmdlineWarning();
private void resetKernelCmdlineCheckboxes() { final org.ovirt.engine.core.common.utils.CpuVendor cpuVendor = getCurrentCpuVendor(); if (cpuVendor == null) { return; } switch (cpuVendor) { case INTEL : case AMD : setKernelCmdlineCheckboxesValue(false); break; case IBM : setKernelCmdlineCheckboxesValue(true); break; default : throw new java.lang.RuntimeException(("Unknown CpuVendor type: " + cpuVendor)); } updateKernelCmdlineCheckboxesChangeability(); }	public void resetKernelCmdlineCheckboxes() { final org.ovirt.engine.core.common.utils.CpuVendor cpuVendor = getCurrentCpuVendor(); if (cpuVendor == null) { return; } switch (cpuVendor) { case INTEL : case AMD : setKernelCmdlineCheckboxesValue(false); break; case IBM : setKernelCmdlineCheckboxesValue(true); break; default : throw new java.lang.RuntimeException(("Unknown CpuVendor type: " + cpuVendor)); } updateKernelCmdlineCheckboxesChangeability(); }
public void onKernelCmdlineResetButton() { setKernelCmdlineParsable(true); kernelCmdlineListener.setEnabled(false); getKernelCmdline().setEntity(""); kernelCmdlineListener.setEnabled(true); resetKernelCmdlineCheckboxes(); }	public void resetKernelCmdline() { setKernelCmdlineParsable(true); kernelCmdlineListener.whilePaused(new java.lang.Runnable() { @java.lang.Override public void run() { getKernelCmdline().setEntity(""); } }); resetKernelCmdlineCheckboxes(); }
private boolean shouldTakeIpv6DataFromNic() { if ((org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol.DHCP) == (getIpv6BootProtocol())) { return true; } return false; }	private boolean shouldTakeIpv6DataFromNic() { if (((org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol.DHCP) == (getIpv6BootProtocol())) || ((org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol.AUTOCONF) == (getIpv6BootProtocol()))) { return true; } return false; }
@java.lang.Override public int hashCode() { if (((service) == null) && ((parentService) == null)) { return 0; } if ((service) == null) { return parentService.hashCode(); } if ((parentService) == null) { return service.hashCode(); } return (997 * ((int) (service.hashCode()))) ^ (991 * ((int) (parentService.hashCode()))); }	@java.lang.Override public int hashCode() { if (((service) == null) && ((parentService) == null)) { return 0; } if ((service) == null) { return parentService.hashCode(); } if ((parentService) == null) { return service.hashCode(); } return (997 * (service.hashCode())) ^ (991 * (parentService.hashCode())); }
private static java.lang.String getRelativePath(java.lang.Class<?> <START_MOD>service<END_MOD>, java.lang.Class<?> <START_MOD>parentService) { org.ovirt.engine.api.restapi.util.LinkHelper.PathKey key = new org.ovirt.engine.api.restapi.util.LinkHelper.PathKey(service, parentService); if (org.ovirt.engine.api.restapi.util.LinkHelper.pathCache.containsKey(key)) { return org.ovirt.engine.api.restapi.util.LinkHelper.pathCache.get(key); } else<END_MOD> { for (java.lang.reflect.Method method : <START_MOD>parentService<END_MOD>.getMethods()) { if ((method.getName().startsWith("get")) && ((method.getReturnType()) == <START_MOD>service<END_MOD>)) { javax.ws.rs.Path pathAnnotation = method.getAnnotation(javax.ws.rs.Path.class); <START_MOD>if (pathAnnotation != null) { org.ovirt.engine.api.restapi.util.LinkHelper.pathCache.put(key, pathAnnotation.value()); <END_MOD>return pathAnnotation.value(); } } <START_MOD>} } org.ovirt.engine.api.restapi.util.LinkHelper.log.error((( find relative path for class   + (service.getName())) +   will <END_MOD>return null<START_MOD> return null; }<END_MOD>	private static java.lang.String getRelativePath(java.lang.Class<?> service, java.lang.Class<?> parentService) { org.ovirt.engine.api.restapi.util.LinkHelper.PathKey key = new org.ovirt.engine.api.restapi.util.LinkHelper.PathKey(service, parentService); java.lang.String path = org.ovirt.engine.api.restapi.util.LinkHelper.pathCache.get(key); if (path != null) { return path; } else { for (java.lang.reflect.Method method : parentService.getMethods()) { if ((method.getName().startsWith("get")) && ((method.getReturnType()) == service)) { javax.ws.rs.Path pathAnnotation = method.getAnnotation(javax.ws.rs.Path.class); if (pathAnnotation != null) { org.ovirt.engine.api.restapi.util.LinkHelper.pathCache.put(key, pathAnnotation.value()); return pathAnnotation.value(); } } } } org.ovirt.engine.api.restapi.util.LinkHelper.log.error((("Can\'t find relative path for class \"" + (service.getName())) + "\", will return null")); return null; }
private boolean equals(java.lang.Class<?> class1, java.lang.Class<?> class2) { if (class1 == null) { return class2 == null; } if (class2 == null) { return class1 == null; } return class1.equals(class2); }	private boolean equals(java.lang.Class<?> class1, java.lang.Class<?> class2) { return java.util.Objects.equals(class1, class2); }
private static <R extends org.ovirt.engine.api.model.BaseResource> org.ovirt.engine.api.model.BaseResource <START_MOD>getParent<END_MOD>(R model, java.lang.Class<?> parentType) { for (<START_MOD>java.lang.reflect.Method method : org.ovirt.engine.api.restapi.util.LinkHelper.getRelevantMethods(model.getClass())) { try { java.lang.Object potentialParent = method.invoke(model); if ((potentialParent != null) && (parentType.isAssignableFrom(potentialParent.getClass()))) { return ((<END_MOD>org.ovirt.engine.api.model.BaseResource<START_MOD>) (potentialParent)); } } catch (java.lang.Exception e) { continue; } }<END_MOD> return null; }	private static <R extends org.ovirt.engine.api.model.BaseResource> org.ovirt.engine.api.model.BaseResource getParent(R model, java.lang.Class<?> parentType) { for (java.lang.reflect.Method method : org.ovirt.engine.api.restapi.util.LinkHelper.getRelevantMethods(model.getClass())) { try { java.lang.Object potentialParent = method.invoke(model); if ((potentialParent != null) && (parentType.isAssignableFrom(potentialParent.getClass()))) { return ((org.ovirt.engine.api.model.BaseResource) (potentialParent)); } } catch (java.lang.Exception e) { org.ovirt.engine.api.restapi.util.LinkHelper.log.error("Error invoking method when adding links to an API entity", e); continue; } } return null; }
protected boolean validateMemoryAlignment(org.ovirt.engine.core.common.businessentities.VmStatic vmStaticData) { if (((org.ovirt.engine.core.bll.VmManagementCommandBase.getCluster().getArchitecture().getFamily()) == (org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc)) && (((vmStaticData.getMemSizeMb()) % 256) != 0)) { addValidationMessageVariable("clusterArch", org.ovirt.engine.core.bll.VmManagementCommandBase.getCluster().getArchitecture()); return failValidation(EngineMessage.MEMORY_SIZE_NOT_MULTIPLE_OF_256_ON_PPC); } return true; }	protected boolean validateMemoryAlignment(org.ovirt.engine.core.common.businessentities.VmStatic vmStaticData) { if (((org.ovirt.engine.core.bll.VmManagementCommandBase.getCluster().getArchitecture().getFamily()) == (org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc)) && (((vmStaticData.getMemSizeMb()) % 256) != 0)) { return failValidation(EngineMessage.MEMORY_SIZE_NOT_MULTIPLE_OF_256_ON_PPC, java.lang.String.format("$%s %s", "clusterArch", org.ovirt.engine.core.bll.VmManagementCommandBase.getCluster().getArchitecture())); } return true; }
private void onExecute() { if ((getProgress()) != null) { return; } startProgress(); for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel item : getDisks()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (item.getDisk())); org.ovirt.engine.core.common.action.RegisterDiskParameters registerDiskParams = new org.ovirt.engine.core.common.action.RegisterDiskParameters(disk, disk.getStorageIds().get(0)); registerDiskParams.setRefreshFromStorage(true); } stopProgress(); getCancelCommand().execute(); }	private void onExecute() { if ((getProgress()) != null) { return; } startProgress(); for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel item : getDisks()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (item.getDisk())); if ((item.getQuota().getSelectedItem()) != null) { disk.setQuotaId(item.getQuota().getSelectedItem().getId()); } org.ovirt.engine.core.common.action.RegisterDiskParameters registerDiskParams = new org.ovirt.engine.core.common.action.RegisterDiskParameters(disk, disk.getStorageIds().get(0)); registerDiskParams.setRefreshFromStorage(true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.RegisterDisk, registerDiskParams); } stopProgress(); getCancelCommand().execute(); }
private boolean validateSameArchitecture(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsToImport) { for (org.ovirt.engine.core.common.businessentities.VM vm : vmsToImport) { if (!(java.util.Objects.equals(vmsToImport.get(0).getClusterArch(), vm.getClusterArch()))) { showErrorPopup(constants.sameArchitectureRequired()); return false; } } return true; }	private boolean validateSameArchitecture(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsToImport) { final org.ovirt.engine.core.common.businessentities.ArchitectureType architectureOfFirst = vmsToImport.get(0).getClusterArch(); for (org.ovirt.engine.core.common.businessentities.VM vm : vmsToImport) { if (!(java.util.Objects.equals(architectureOfFirst, vm.getClusterArch()))) { showErrorPopup(constants.sameArchitectureRequired()); return false; } } return true; }
private boolean validateClusterExistsForArchitecture(org.ovirt.engine.core.common.businessentities.ArchitectureType architecture, org.ovirt.engine.core.common.businessentities.StoragePool dataCenter) { if (!(clusterArchitecturesInDataCenters.get(dataCenter.getId()).contains(architecture))) { showErrorPopup(constants.noClusterSupportingArchitectureInDC()); return false; } return true; }	private boolean validateClusterExistsForArchitecture(org.ovirt.engine.core.common.businessentities.ArchitectureType architecture, org.ovirt.engine.core.common.businessentities.StoragePool dataCenter) { if ((((clusterArchitecturesInDataCenters) == null) || ((clusterArchitecturesInDataCenters.get(dataCenter.getId())) == null)) || (!(clusterArchitecturesInDataCenters.get(dataCenter.getId()).contains(architecture)))) { showErrorPopup(constants.noClusterSupportingArchitectureInDC()); return false; } return true; }
@java.lang.Override protected org.ovirt.engine.api.model.Disk postPopulate(org.ovirt.engine.api.model.Disk model) { model.setFormat(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskFormat.class)); model.setSgio(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.ScsiGenericIO.class)); model.setStatus(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskStatus.class)); model.setLunStorage(null); return model; }	@java.lang.Override protected org.ovirt.engine.api.model.Disk postPopulate(org.ovirt.engine.api.model.Disk model) { model.setFormat(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskFormat.class)); model.setInterface(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskInterface.class)); model.setSgio(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.ScsiGenericIO.class)); model.setStatus(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskStatus.class)); model.setLunStorage(null); return model; }
@java.lang.Override protected org.ovirt.engine.api.model.DiskSnapshot postPopulate(org.ovirt.engine.api.model.DiskSnapshot model) { model.setFormat(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskFormat.class)); model.setSgio(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.ScsiGenericIO.class)); model.setStatus(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskStatus.class)); model.setLunStorage(null); return model; }	@java.lang.Override protected org.ovirt.engine.api.model.DiskSnapshot postPopulate(org.ovirt.engine.api.model.DiskSnapshot model) { model.setFormat(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskFormat.class)); model.setInterface(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskInterface.class)); model.setSgio(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.ScsiGenericIO.class)); model.setStatus(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskStatus.class)); model.setLunStorage(null); return model; }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.DiskSnapshot model, org.ovirt.engine.api.model.DiskSnapshot transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getFormat(), transform.getFormat()); assertEquals(model.isActive(), transform.isActive()); assertEquals(model.isReadOnly(), transform.isReadOnly()); assertEquals(model.getDescription(), transform.getDescription()); assertNotNull(model.getSnapshot()); assertEquals(model.getSnapshot().getId(), transform.getSnapshot().getId()); assertEquals( status model.getStatus(), transform.getStatus()); assertEquals( sparse model.isSparse(), transform.isSparse()); assertEquals( propagate errors model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals( wipe after delete model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals( shareable model.isShareable(), transform.isShareable()); }	@java.lang.Override protected void verify(org.ovirt.engine.api.model.DiskSnapshot model, org.ovirt.engine.api.model.DiskSnapshot transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getFormat(), transform.getFormat()); assertEquals(model.getInterface(), transform.getInterface()); assertEquals(model.isActive(), transform.isActive()); assertEquals(model.isReadOnly(), transform.isReadOnly()); assertEquals(model.getDescription(), transform.getDescription()); assertNotNull(model.getSnapshot()); assertEquals(model.getSnapshot().getId(), transform.getSnapshot().getId()); assertEquals("unexpected status", model.getStatus(), transform.getStatus()); assertEquals("unexpected sparse", model.isSparse(), transform.isSparse()); assertEquals("unexpected bootable", model.isBootable(), transform.isBootable()); assertEquals("unexpected propagate errors", model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals("unexpected wipe after delete", model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals("unexpected shareable", model.isShareable(), transform.isShareable()); }
static void verifyModelSpecific(org.ovirt.engine.api.model.Disk model, int index) { assertEquals(GUIDS[index].toString(), model.getId()); assertFalse(model.isSetVm()); assertTrue(model.isSparse()); assertTrue(model.isPropagateErrors()); assertEquals(model.getStorageDomain().getId(), org.ovirt.engine.api.restapi.resource.BackendStorageDomainDiskResourceTest.STORAGE_DOMAIN_ID.toString()); }	static void verifyModelSpecific(org.ovirt.engine.api.model.Disk model, int index) { assertEquals(GUIDS[index].toString(), model.getId()); assertFalse(model.isSetVm()); assertTrue(model.isSparse()); assertTrue((!(model.isBootable()))); assertTrue(model.isPropagateErrors()); assertEquals(model.getStorageDomain().getId(), org.ovirt.engine.api.restapi.resource.BackendStorageDomainDiskResourceTest.STORAGE_DOMAIN_ID.toString()); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.Disk model, org.ovirt.engine.api.model.Disk transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.isActive(), transform.isActive()); assertEquals( propagate errors model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals( wipe after delete model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals( shareable model.isShareable(), transform.isShareable()); }	@java.lang.Override protected void verify(org.ovirt.engine.api.model.Disk model, org.ovirt.engine.api.model.Disk transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getInterface(), transform.getInterface()); assertEquals(model.isActive(), transform.isActive()); assertEquals("unexpected bootable", model.isBootable(), transform.isBootable()); assertEquals("unexpected propagate errors", model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals("unexpected wipe after delete", model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals("unexpected shareable", model.isShareable(), transform.isShareable()); }
@java.lang.Override protected org.ovirt.engine.api.model.Disk postPopulate(org.ovirt.engine.api.model.Disk model) { model.setFormat(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskFormat.class)); model.setStatus(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskStatus.class)); model.setLunStorage(new org.ovirt.engine.api.model.HostStorage()); return model; }	@java.lang.Override protected org.ovirt.engine.api.model.Disk postPopulate(org.ovirt.engine.api.model.Disk model) { model.setFormat(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskFormat.class)); model.setInterface(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskInterface.class)); model.setStatus(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.DiskStatus.class)); model.setLunStorage(new org.ovirt.engine.api.model.HostStorage()); return model; }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.Disk model, org.ovirt.engine.api.model.Disk transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getImageId(), transform.getImageId()); assertEquals(model.getFormat(), transform.getFormat()); assertEquals(model.isActive(), transform.isActive()); assertEquals(model.isReadOnly(), transform.isReadOnly()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getLogicalName(), transform.getLogicalName()); assertEquals(model.getOpenstackVolumeType().getName(), transform.getOpenstackVolumeType().getName()); assertNotNull(model.getSnapshot()); assertEquals(model.getSnapshot().getId(), transform.getSnapshot().getId()); assertEquals( status model.getStatus(), transform.getStatus()); assertEquals( sparse model.isSparse(), transform.isSparse()); assertEquals( propagate errors model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals( wipe after delete model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals( shareable model.isShareable(), transform.isShareable()); }	@java.lang.Override protected void verify(org.ovirt.engine.api.model.Disk model, org.ovirt.engine.api.model.Disk transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getImageId(), transform.getImageId()); assertEquals(model.getFormat(), transform.getFormat()); assertEquals(model.getInterface(), transform.getInterface()); assertEquals(model.isActive(), transform.isActive()); assertEquals(model.isReadOnly(), transform.isReadOnly()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getLogicalName(), transform.getLogicalName()); assertEquals(model.getOpenstackVolumeType().getName(), transform.getOpenstackVolumeType().getName()); assertNotNull(model.getSnapshot()); assertEquals(model.getSnapshot().getId(), transform.getSnapshot().getId()); assertEquals("unexpected status", model.getStatus(), transform.getStatus()); assertEquals("unexpected sparse", model.isSparse(), transform.isSparse()); assertEquals("unexpected bootable", model.isBootable(), transform.isBootable()); assertEquals("unexpected propagate errors", model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals("unexpected wipe after delete", model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals("unexpected shareable", model.isShareable(), transform.isShareable()); }
private void verifyModelSpecific(org.ovirt.engine.api.model.Disk model, int index) { assertEquals(GUIDS[index].toString(), model.getId()); assertTrue(model.isSparse()); assertTrue(model.isPropagateErrors()); }	private void verifyModelSpecific(org.ovirt.engine.api.model.Disk model, int index) { assertEquals(GUIDS[index].toString(), model.getId()); assertTrue(model.isSparse()); assertTrue((!(model.isBootable()))); assertTrue(model.isPropagateErrors()); }
static org.ovirt.engine.api.model.Disk getModel() { org.ovirt.engine.api.model.Disk model = new org.ovirt.engine.api.model.Disk(); model.setFormat(DiskFormat.COW); model.setSparse(true); model.setShareable(false); model.setPropagateErrors(true); model.setStorageDomains(new org.ovirt.engine.api.model.StorageDomains()); model.getStorageDomains().getStorageDomains().add(new org.ovirt.engine.api.model.StorageDomain()); model.getStorageDomains().getStorageDomains().get(0).setId(GUIDS[2].toString()); model.setProvisionedSize(1000000000L); return model; }	static org.ovirt.engine.api.model.Disk getModel() { org.ovirt.engine.api.model.Disk model = new org.ovirt.engine.api.model.Disk(); model.setFormat(DiskFormat.COW); model.setInterface(org.ovirt.engine.api.model.DiskInterface.VIRTIO); model.setSparse(true); model.setBootable(false); model.setShareable(false); model.setPropagateErrors(true); model.setStorageDomains(new org.ovirt.engine.api.model.StorageDomains()); model.getStorageDomains().getStorageDomains().add(new org.ovirt.engine.api.model.StorageDomain()); model.getStorageDomains().getStorageDomains().get(0).setId(GUIDS[2].toString()); model.setProvisionedSize(1000000000L); return model; }
private org.ovirt.engine.core.common.businessentities.storage.Disk findBoot(java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks) { for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { if (disk.<START_MOD>getDiskVmElementForVm(getVm().getId()).<END_MOD>isBoot()) { return disk; } } return null; }	private org.ovirt.engine.core.common.businessentities.storage.Disk findBoot(java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks) { for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = disk.getDiskVmElementForVm(getVm().getId()); if ((dve != null) && (dve.isBoot())) { return disk; } } return null; }
<START_MOD>@org.junit.Test public<END_MOD> void <START_MOD>getIpv4AddressOfNetworkReturnsNullWhenThereIsNoIpSet<END_MOD>() { <START_MOD>assertThat(underTest<END_MOD>.<START_MOD>getIpv4AddressOfNetwork<END_MOD>(org.ovirt.engine.core.bll.network.<START_MOD>NetworkConfiguratorTest<END_MOD>.<START_MOD>NETWORK_NAME<END_MOD>), nullValue(<START_MOD>null<END_MOD>)); }	@org.junit.Test public void getIpv4AddressOfNetworkReturnsNullWhenThereIsNoIpSet() { assertThat(underTest.getIpv4AddressOfNetwork(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NETWORK_NAME1), nullValue()); }
@org.junit.Test public void <START_MOD>getIpv4AddressOfNetwork<END_MOD>() { <START_MOD>nic<END_MOD>.<START_MOD>setIpv4Address(org<END_MOD>.<START_MOD>ovirt.engine.core.bll.network.NetworkConfiguratorTest.IPV4_ADDRESS)<END_MOD>; <START_MOD>assertThat<END_MOD>(<START_MOD>underTest<END_MOD>.getIpv4AddressOfNetwork(<START_MOD>org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NETWORK_NAME<END_MOD>), <START_MOD>is(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.IPV4_ADDRESS)<END_MOD>); }	@org.junit.Test public void getIpv4AddressOfNetwork() { nic.setIpv4Address(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.IPV4_ADDRESS); assertThat(underTest.getIpv4AddressOfNetwork(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NETWORK_NAME1), is(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.IPV4_ADDRESS)); }
@org.junit.Test public void getIpv6AddressOfNetworkReturnsNullWhenThereIsNoIpSet() { assertThat(underTest.getIpv6AddressOfNetwork(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NETWORK_NAME), nullValue(null)); }	@org.junit.Test public void getIpv6AddressOfNetworkReturnsNullWhenThereIsNoIpSet() { assertThat(underTest.getIpv6AddressOfNetwork(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NETWORK_NAME1), nullValue()); }
@org.junit.Test public void getIpv4AddressOfNetworkReturnsNullWhenThereIsNoNetworkOfGivenName() { nic.setIpv4Address(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.IPV4_ADDRESS); assertThat(underTest.getIpv4AddressOfNetwork(("not" + (org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NETWORK_NAME))), nullValue(null)); }	@org.junit.Test public void getIpv4AddressOfNetworkReturnsNullWhenThereIsNoNetworkOfGivenName() { nic.setIpv4Address(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.IPV4_ADDRESS); assertThat(underTest.getIpv4AddressOfNetwork(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NETWORK_NAME2), nullValue()); }
@org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtil.class, managementNetworkUtil); nic.setNetworkName(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NETWORK_NAME); org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.getInterfaces().add(nic); underTest = new org.ovirt.engine.core.bll.network.NetworkConfigurator(vds, org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.COMMAND_CONTEXT); }	@org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtil.class, managementNetworkUtil); nic.setNetworkName(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NETWORK_NAME1); org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.getInterfaces().add(nic); underTest = new org.ovirt.engine.core.bll.network.NetworkConfigurator(vds, org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.COMMAND_CONTEXT); }
@org.junit.Test public void getIpv6AddressOfNetworkReturnsNullWhenThereIsNoNetworkOfGivenName() { nic.setIpv6Address(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.IPV6_ADDRESS); assertThat(underTest.getIpv6AddressOfNetwork(("not" + (org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NETWORK_NAME))), nullValue(null)); }	@org.junit.Test public void getIpv6AddressOfNetworkReturnsNullWhenThereIsNoNetworkOfGivenName() { nic.setIpv6Address(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.IPV6_ADDRESS); assertThat(underTest.getIpv6AddressOfNetwork(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NETWORK_NAME2), nullValue()); }
@org.junit.Test public void getIpv6AddressOfNetwork() { <START_MOD>nic<END_MOD>.<START_MOD>setIpv6Address(org<END_MOD>.<START_MOD>ovirt.engine.core.bll.network.NetworkConfiguratorTest.IPV6_ADDRESS)<END_MOD>; <START_MOD>assertThat<END_MOD>(<START_MOD>underTest<END_MOD>.getIpv6AddressOfNetwork(<START_MOD>org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NETWORK_NAME<END_MOD>), <START_MOD>is(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.IPV6_ADDRESS)<END_MOD>); }	@org.junit.Test public void getIpv6AddressOfNetwork() { nic.setIpv6Address(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.IPV6_ADDRESS); assertThat(underTest.getIpv6AddressOfNetwork(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NETWORK_NAME1), is(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.IPV6_ADDRESS)); }
private boolean checkIfDisksExist(java.lang.Iterable<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksList) { <START_MOD>return<END_MOD> new org.ovirt.engine.core.bll.<START_MOD>validator<END_MOD>.<START_MOD>storage<END_MOD>.<START_MOD>DiskImagesValidator<END_MOD>(<START_MOD>disksList<END_MOD>)<START_MOD>.diskImagesOnStorage(imageToDestinationDomainMap<END_MOD>)<START_MOD>.isValid<END_MOD>(); }	private boolean checkIfDisksExist(java.lang.Iterable<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksList) { return validate(new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(disksList).diskImagesOnStorage(imageToDestinationDomainMap)); }
@java.lang.Override public void init() { final java.util.List<java.util.concurrent.Callable<java.lang.Boolean>> customizationDialog = java.util.Arrays.asList(() -> { deploy.getParser().cliEnvironmentSet(org.ovirt.engine.core.bll.hostdeploy.VdsDeployKernelUnit.KernelArgumentsEnvTmp.NEW, deploy.getVds().getCurrentKernelCmdline()); return true; }, () -> { deploy.getParser().cliEnvironmentSet(org.ovirt.engine.core.bll.hostdeploy.VdsDeployKernelUnit.KernelArgumentsEnvTmp.OLD, deploy); return true; }); deploy.addCustomizationDialog(customizationDialog); deploy.addCustomizationCondition(org.ovirt.engine.core.bll.hostdeploy.VdsDeployKernelUnit.CONDITION); }	@java.lang.Override public void init() { final java.util.List<java.util.concurrent.Callable<java.lang.Boolean>> customizationDialog = java.util.Arrays.asList(() -> { deploy.getParser().cliEnvironmentSet(KernelEnv.CMDLINE_NEW, deploy.getVds().getCurrentKernelCmdline()); return true; }, () -> { deploy.getParser().cliEnvironmentSet(KernelEnv.CMDLINE_OLD, deploy.getVds().getLastStoredKernelCmdline()); return true; }); deploy.addCustomizationDialog(customizationDialog); }
java.lang.String ACTION_TYPE_FAILED_VMS_BOOT_IN_USE();	java.lang.String VM_POOL_CANNOT_CHANGE_POOL_TYPE();
@java.lang.Override public void init(final org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel model) { super.init(model); <START_MOD>addDataCenterListener(); <END_MOD>}	@java.lang.Override public void init(final org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel model) { super.init(model); addDataCenterListener(); addImportSourceListener(); updateExportDomainLoadButtonEnabledState(); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsChangable".equals(args.propertyName)) { final boolean enabled = getModel().getDataCenters().getIsChangable(); getView().getLoadVmsFromExportDomainButton().setEnabled(enabled); getView().getLoadVmsFromVmwareButton().setEnabled(enabled); getView().getLoadOvaButton().setEnabled(enabled); getView().getLoadXenButton().setEnabled(enabled); getView().getLoadKvmButton().setEnabled(enabled); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsChangable".equals(args.propertyName)) { final boolean enabled = getModel().getDataCenters().getIsChangable(); updateExportDomainLoadButtonEnabledState(); getView().getLoadVmsFromVmwareButton().setEnabled(enabled); getView().getLoadOvaButton().setEnabled(enabled); getView().getLoadXenButton().setEnabled(enabled); getView().getLoadKvmButton().setEnabled(enabled); } }
private void addDataCenterListener() { getModel().getDataCenters().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsChangable".equals(args.propertyName)) { final boolean enabled = getModel().getDataCenters().getIsChangable(); getView().getLoadVmsFromExportDomainButton().setEnabled(enabled); getView().getLoadVmsFromVmwareButton().setEnabled(enabled); getView().getLoadOvaButton().setEnabled(enabled); getView().getLoadXenButton().setEnabled(enabled); getView().getLoadKvmButton().setEnabled(enabled); } } }); }	private void addDataCenterListener() { getModel().getDataCenters().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsChangable".equals(args.propertyName)) { final boolean enabled = getModel().getDataCenters().getIsChangable(); updateExportDomainLoadButtonEnabledState(); getView().getLoadVmsFromVmwareButton().setEnabled(enabled); getView().getLoadOvaButton().setEnabled(enabled); getView().getLoadXenButton().setEnabled(enabled); getView().getLoadKvmButton().setEnabled(enabled); } } }); }
private void addStyles() { externalHostProviderEnabledEditor.addContentWidgetContainerStyleName(style.externalHostProviderEnabledEditorContent()); providerSearchFilterEditor.addContentWidgetContainerStyleName(style.searchFilter()); providerSearchFilterEditor.setLabelStyleName(style.emptyEditor()); providerSearchFilterLabel.addContentWidgetContainerStyleName(style.emptyEditor()); publicKeyEditor.setCustomStyle(style.pkStyle()); tabPanel.addBarStyle(style.bar()); }	private void addStyles() { providerSearchFilterEditor.addContentWidgetContainerStyleName(style.searchFilter()); }
protected javax.ws.rs.core.Response add(org.ovirt.engine.api.model.VnicProfile vnicProfile) { validateParameters(vnicProfile); <START_MOD>org.ovirt.engine.core.common.action.AddVnicProfileParameters<END_MOD> <START_MOD>addVnicProfileParameters = <END_MOD>(<START_MOD>vnicProfile<END_MOD>.<START_MOD>isSetNetworkFilter()) ?<END_MOD> new org.ovirt.engine.core.common.action.AddVnicProfileParameters(map(vnicProfile))<START_MOD> : new org.ovirt.engine.core.common.action.AddVnicProfileParameters(map(vnicProfile), true); return performCreate(VdcActionType.AddVnicProfile, addVnicProfileParameters<END_MOD>, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetVnicProfileById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }	protected javax.ws.rs.core.Response add(org.ovirt.engine.api.model.VnicProfile vnicProfile) { validateParameters(vnicProfile); org.ovirt.engine.core.common.action.AddVnicProfileParameters addVnicProfileParameters = new org.ovirt.engine.core.common.action.AddVnicProfileParameters(map(vnicProfile), (!(vnicProfile.isSetNetworkFilter()))); return performCreate(VdcActionType.AddVnicProfile, addVnicProfileParameters, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetVnicProfileById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
private void handleNetworkFilterLinks(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.api.model.NetworkFilter> networkFilterMap) { if (!(networkFilterMap.isEmpty())) { java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkFilter> list = getBackendCollection(org.ovirt.engine.api.model.NetworkFilter.class, VdcQueryType.GetAllNetworkFilters, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase()); for (org.ovirt.engine.core.common.businessentities.network.NetworkFilter fetchedNetworkFilter : list) { org.ovirt.engine.api.model.NetworkFilter networkFilter = networkFilterMap.get(fetchedNetworkFilter.getId()); if (networkFilter != null) { networkFilter.setVersion(org.ovirt.engine.api.restapi.types.VersionMapper.map(fetchedNetworkFilter.getVersion(), null)); networkFilter.setName(fetchedNetworkFilter.getName()); } } } }	private void handleNetworkFilterLinks(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.api.model.NetworkFilter> networkFilterMap) { if (!(networkFilterMap.isEmpty())) { java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkFilter> list = getBackendCollection(org.ovirt.engine.api.model.NetworkFilter.class, VdcQueryType.GetAllNetworkFilters, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase()); for (org.ovirt.engine.core.common.businessentities.network.NetworkFilter fetchedNetworkFilter : list) { org.ovirt.engine.api.model.NetworkFilter networkFilter = networkFilterMap.get(fetchedNetworkFilter.getId()); if (networkFilter != null) { networkFilter.setVersion(org.ovirt.engine.api.restapi.types.VersionMapper.map(fetchedNetworkFilter.getVersion())); networkFilter.setName(fetchedNetworkFilter.getName()); } } } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.Label label = new org.ovirt.engine.core.common.businessentities.LabelBuilder().id(org.ovirt.engine.core.bll.AddLabelCommand.getLabelId()).name(org.ovirt.engine.core.bll.AddLabelCommand.getParameters().getName()).readOnly(org.ovirt.engine.core.bll.AddLabelCommand.getParameters().isReadOnly()).build(); labelDao.save(label); org.ovirt.engine.core.bll.AddLabelCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.Label label = new org.ovirt.engine.core.common.businessentities.LabelBuilder(org.ovirt.engine.core.bll.AddLabelCommand.getParameters().getLabel()).build(); labelDao.save(label); org.ovirt.engine.core.bll.AddLabelCommand.setSucceeded(true); setActionReturnValue(label.getId()); }
@java.lang.Override protected boolean validate() { if ((org.ovirt.engine.core.bll.AddLabelCommand.getLabelId()) == null) { return false; } org.ovirt.engine.core.common.businessentities.Label label = labelDao.get(org.ovirt.engine.core.bll.AddLabelCommand.getLabelId()); if (label != null) { return false; } label = labelDao.getByName(org.ovirt.engine.core.bll.AddLabelCommand.getParameters().getName()); if (label != null) { return false; } return true; }	@java.lang.Override protected boolean validate() { org.ovirt.engine.core.common.businessentities.Label label = labelDao.get(org.ovirt.engine.core.bll.AddLabelCommand.getLabelId()); if (label != null) { addValidationMessage(EngineMessage.AFFINITY_LABEL_ID_ALREADY_EXISTS); return false; } if (org.ovirt.engine.core.bll.AddLabelCommand.getParameters().getLabel().getName().isEmpty()) { addValidationMessage(EngineMessage.AFFINITY_LABEL_BAD_NAME); return false; } label = labelDao.getByName(org.ovirt.engine.core.bll.AddLabelCommand.getParameters().getLabel().getName()); if (label != null) { addValidationMessage(EngineMessage.AFFINITY_LABEL_NAME_ALREADY_EXISTS); return false; } return true; }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_REMOVE_TAG : org.ovirt.engine.core.common.AuditLogType.USER_REMOVE_TAG_FAILED; }	@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_UPDATED_AFFINITY_LABEL : org.ovirt.engine.core.common.AuditLogType.USER_FAILED_TO_UPDATE_AFFINITY_LABEL; }
@java.lang.Override protected void executeCommand() { labelDao.update(getParameters().getLabel()); setSucceeded(true); }	@java.lang.Override protected void executeCommand() { labelDao.update(getParameters().getLabel()); setActionReturnValue(getParameters().getLabel()); setSucceeded(true); }
@java.lang.Override protected boolean validate() { if ((getLabelId()) == null) { addValidationMessage(EngineMessage.TAGS_CANNOT_REMOVE_TAG_NOT_EXIST); return false; } org.ovirt.engine.core.common.businessentities.Label label = labelDao.get(getLabelId()); if (label == null) { addValidationMessage(EngineMessage.TAGS_CANNOT_REMOVE_TAG_NOT_EXIST); return false; } if (label.isReadOnly()) { addValidationMessage(EngineMessage.TAGS_CANNOT_REMOVE_TAG_NOT_EXIST); return false; } return super.validate(); }	@java.lang.Override protected boolean validate() { if ((getLabelId()) == null) { addValidationMessage(EngineMessage.AFFINITY_LABEL_NOT_EXISTS); return false; } org.ovirt.engine.core.common.businessentities.Label label = labelDao.get(getLabelId()); if (label == null) { addValidationMessage(EngineMessage.AFFINITY_LABEL_NOT_EXISTS); return false; } if (label.isReadOnly()) { addValidationMessage(EngineMessage.AFFINITY_LABEL_READ_ONLY); return false; } label = getParameters().getLabel(); if (((label.getName()) == null) || (label.getName().isEmpty())) { addValidationMessage(EngineMessage.AFFINITY_LABEL_BAD_NAME); return false; } org.ovirt.engine.core.common.businessentities.Label existing = labelDao.getByName(label.getName()); if ((existing != null) && (!(existing.getId().equals(label.getId())))) { addValidationMessage(EngineMessage.AFFINITY_LABEL_NAME_ALREADY_EXISTS); return false; } return super.validate(); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.RemoveLabelCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_REMOVE_TAG : org.ovirt.engine.core.common.AuditLogType.USER_REMOVE_TAG_FAILED; }	@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.RemoveLabelCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_REMOVED_AFFINITY_LABEL : org.ovirt.engine.core.common.AuditLogType.USER_FAILED_TO_REMOVE_AFFINITY_LABEL; }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.AddLabelCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_REMOVE_TAG : org.ovirt.engine.core.common.AuditLogType.USER_REMOVE_TAG_FAILED; }	@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.AddLabelCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_ADDED_AFFINITY_LABEL : org.ovirt.engine.core.common.AuditLogType.USER_FAILED_TO_ADD_AFFINITY_LABEL; }
@java.lang.Override protected boolean validate() { if ((org.ovirt.engine.core.bll.RemoveLabelCommand.getLabelId()) == null) { addValidationMessage(EngineMessage.TAGS_CANNOT_REMOVE_TAG_NOT_EXIST); return false; } org.ovirt.engine.core.common.businessentities.Label label = labelDao.get(org.ovirt.engine.core.bll.RemoveLabelCommand.getLabelId()); if (label == null) { addValidationMessage(EngineMessage.TAGS_CANNOT_REMOVE_TAG_NOT_EXIST); return false; } if (label.isReadOnly()) { addValidationMessage(EngineMessage.TAGS_CANNOT_REMOVE_TAG_NOT_EXIST); return false; } return true; }	@java.lang.Override protected boolean validate() { if ((org.ovirt.engine.core.bll.RemoveLabelCommand.getLabelId()) == null) { addValidationMessage(EngineMessage.AFFINITY_LABEL_NOT_EXISTS); return false; } org.ovirt.engine.core.common.businessentities.Label label = labelDao.get(org.ovirt.engine.core.bll.RemoveLabelCommand.getLabelId()); if (label == null) { addValidationMessage(EngineMessage.AFFINITY_LABEL_NOT_EXISTS); return false; } if (label.isReadOnly()) { addValidationMessage(EngineMessage.AFFINITY_LABEL_READ_ONLY); return false; } if (!(label.getVms().isEmpty())) { addValidationMessage(EngineMessage.AFFINITY_LABEL_NOT_EMPTY); return false; } if (!(label.getHosts().isEmpty())) { addValidationMessage(EngineMessage.AFFINITY_LABEL_NOT_EMPTY); return false; } return true; }
private void setTicketUsingUpdateDevice() { java.util.Map<java.lang.String, java.lang.Object> devStruct = new java.util.HashMap<>(); devStruct.put("deviceType", "graphics"); devStruct.put("graphicsType", org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getGraphicsType().name().toLowerCase()); devStruct.put("password", org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getTicket()); devStruct.put("ttl", org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getValidTime()); <START_MOD>if (org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getClusterCompatibilityVersion().less(new org.ovirt.engine.core.compat.Version(4, 0))) { <END_MOD>devStruct.put("existingConnAction", connectionAction); <START_MOD>} <END_MOD>devStruct.put("disconnectAction", org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getDisconnectAction()); devStruct.put("params", getUidParams()); status = org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getBroker().vmUpdateDevice(org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getVmId().toString(), devStruct); }	private void setTicketUsingUpdateDevice() { java.util.Map<java.lang.String, java.lang.Object> devStruct = new java.util.HashMap<>(); devStruct.put("deviceType", "graphics"); devStruct.put("graphicsType", org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getGraphicsType().name().toLowerCase()); devStruct.put("password", org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getTicket()); devStruct.put("ttl", org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getValidTime()); if (org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getCompatibilityVersion().less(Version.v4_0)) { devStruct.put("existingConnAction", connectionAction); } devStruct.put("disconnectAction", org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getDisconnectAction()); devStruct.put("params", getUidParams()); status = org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getBroker().vmUpdateDevice(org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getVmId().toString(), devStruct); }
public org.ovirt.engine.core.compat.Version getClusterCompatibilityVersion() { return clusterCompatibilityVersion; }	public org.ovirt.engine.core.compat.Version getCompatibilityVersion() { return compatibilityVersion; }
private void sendTicket() { final org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.bll.SetVmTicketCommand.getCurrentUser(); final boolean sent = runVdsCommand(VDSCommandType.SetVmTicket, new org.ovirt.engine.core.common.vdscommands.SetVmTicketVDSCommandParameters(org.ovirt.engine.core.bll.SetVmTicketCommand.getVdsId(), org.ovirt.engine.core.bll.SetVmTicketCommand.getVmId(), ticket, org.ovirt.engine.core.bll.SetVmTicketCommand.getParameters().getValidTime(), user.getLoginName(), user.getId(), org.ovirt.engine.core.bll.SetVmTicketCommand.getParameters().getGraphicsType(), org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getConsoleDisconnectAction()<START_MOD>, org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getClusterCompatibilityVersion()<END_MOD>)).getSucceeded(); if (sent) { org.ovirt.engine.core.bll.SetVmTicketCommand.setActionReturnValue(ticket); } org.ovirt.engine.core.bll.SetVmTicketCommand.setSucceeded(sent); }	private void sendTicket() { final org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.bll.SetVmTicketCommand.getCurrentUser(); final boolean sent = runVdsCommand(VDSCommandType.SetVmTicket, new org.ovirt.engine.core.common.vdscommands.SetVmTicketVDSCommandParameters(org.ovirt.engine.core.bll.SetVmTicketCommand.getVdsId(), org.ovirt.engine.core.bll.SetVmTicketCommand.getVmId(), ticket, org.ovirt.engine.core.bll.SetVmTicketCommand.getParameters().getValidTime(), user.getLoginName(), user.getId(), org.ovirt.engine.core.bll.SetVmTicketCommand.getParameters().getGraphicsType(), org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getConsoleDisconnectAction(), org.ovirt.engine.core.bll.SetVmTicketCommand.getVm().getCompatibilityVersion())).getSucceeded(); if (sent) { org.ovirt.engine.core.bll.SetVmTicketCommand.setActionReturnValue(ticket); } org.ovirt.engine.core.bll.SetVmTicketCommand.setSucceeded(sent); }
private org.ovirt.engine.core.bll.context.CommandContext createContextForStatelessSnapshotCreation() { java.util.Map<java.lang.String, java.lang.String> values = getVmValuesForMsgResolving(); org.ovirt.engine.core.common.job.Step createSnapshotsStep = addSubStep(StepEnum.EXECUTING, StepEnum.CREATING_SNAPSHOTS, values); org.ovirt.engine.core.bll.job.ExecutionContext createSnapshotsCtx = new org.ovirt.engine.core.bll.job.ExecutionContext(); createSnapshotsCtx.setMonitored(true); createSnapshotsCtx.setStep(createSnapshotsStep); return org.ovirt.engine.core.bll.RunVmCommand.getContext().withExecutionContext(createSnapshotsCtx)<START_MOD>.withoutCompensationContext()<END_MOD>; }	private org.ovirt.engine.core.bll.context.CommandContext createContextForStatelessSnapshotCreation() { java.util.Map<java.lang.String, java.lang.String> values = getVmValuesForMsgResolving(); org.ovirt.engine.core.common.job.Step createSnapshotsStep = addSubStep(StepEnum.EXECUTING, StepEnum.CREATING_SNAPSHOTS, values); org.ovirt.engine.core.bll.job.ExecutionContext createSnapshotsCtx = new org.ovirt.engine.core.bll.job.ExecutionContext(); createSnapshotsCtx.setMonitored(true); createSnapshotsCtx.setStep(createSnapshotsStep); org.ovirt.engine.core.bll.RunVmCommand.getContext().withExecutionContext(createSnapshotsCtx); org.ovirt.engine.core.bll.RunVmCommand.persistCommandIfNeeded(); return org.ovirt.engine.core.bll.RunVmCommand.getContext().clone().withoutCompensationContext(); }
public static int getCdPayloadDeviceIndex(java.lang.String cdInterface) { if ("scsi".equals(cdInterface)) { return 1; } else if ("ide".equals(cdInterface)) { return 3; } else if ("sata".equals(cdInterface)) { return 1; } return -1; }	public static int getCdPayloadDeviceIndex(java.lang.String cdInterface) { switch (cdInterface) { case "scsi" : return 1; case "ide" : return 3; case "sata" : return 1; default : return -1; } }
public static int getCdDeviceIndex(java.lang.String cdInterface) { if ("scsi".equals(cdInterface)) { return 0; } else if ("ide".equals(cdInterface)) { return 2; } else if ("sata".equals(cdInterface)) { return 0; } return -1; }	public static int getCdDeviceIndex(java.lang.String cdInterface) { switch (cdInterface) { case "scsi" : return 0; case "ide" : return 2; case "sata" : return 0; default : return -1; } }
@java.lang.Override protected void executeVdsBrokerCommand() { vmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.ChangeDiskVDSCommand.getBroker().changeDisk(vmId.toString(), <START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.ChangeDiskVDSCommand.getParameters().getIface(), org.ovirt.engine.core.vdsbroker.vdsbroker.ChangeDiskVDSCommand.getParameters().getIndex(), org.ovirt.engine.core.vdsbroker.vdsbroker.ChangeDiskVDSCommand.getParameters().getDiskPath()<END_MOD>); org.ovirt.engine.core.vdsbroker.vdsbroker.ChangeDiskVDSCommand.proceedProxyReturnValue(); setReturnValue(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVMDynamicData(vmReturn.vm, org.ovirt.engine.core.vdsbroker.vdsbroker.ChangeDiskVDSCommand.getVds()).getStatus()); }	@java.lang.Override protected void executeVdsBrokerCommand() { if ((org.ovirt.engine.core.vdsbroker.vdsbroker.ChangeDiskVDSCommand.getParameters().getIface()) != null) { java.util.Map<java.lang.String, java.lang.Object> driveSpec = new java.util.HashMap<>(); driveSpec.put(VdsProperties.INTERFACE, org.ovirt.engine.core.vdsbroker.vdsbroker.ChangeDiskVDSCommand.getParameters().getIface()); driveSpec.put(VdsProperties.Index, java.lang.Integer.toString(org.ovirt.engine.core.vdsbroker.vdsbroker.ChangeDiskVDSCommand.getParameters().getIndex())); driveSpec.put(VdsProperties.Path, org.ovirt.engine.core.vdsbroker.vdsbroker.ChangeDiskVDSCommand.getParameters().getDiskPath()); vmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.ChangeDiskVDSCommand.getBroker().changeDisk(vmId.toString(), driveSpec); } else { vmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.ChangeDiskVDSCommand.getBroker().changeDisk(vmId.toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ChangeDiskVDSCommand.getParameters().getDiskPath()); } org.ovirt.engine.core.vdsbroker.vdsbroker.ChangeDiskVDSCommand.proceedProxyReturnValue(); setReturnValue(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVMDynamicData(vmReturn.vm, org.ovirt.engine.core.vdsbroker.vdsbroker.ChangeDiskVDSCommand.getVds()).getStatus()); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { this.addCustomValue("DiskAlias", org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getDiskImage().getDiskAlias()); return org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_REGISTER_DISK_FINISHED_SUCCESS : org.ovirt.engine.core.common.AuditLogType.USER_REGISTER_DISK_FINISHED_FAILURE; }	@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { addCustomValue("DiskAlias", org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getDiskImage().getDiskAlias()); return org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_REGISTER_DISK_FINISHED_SUCCESS : org.ovirt.engine.core.common.AuditLogType.USER_REGISTER_DISK_FINISHED_FAILURE; }
@java.lang.Override public final void cleanupCompensationDataAfterSuccessfulCommand() { listeners.forEach(CompensationListener::cleaningCompensationDataAfterSuccess); doCleanupCompensationDataAfterSuccessfulCommand(); }	@java.lang.Override public final void cleanupCompensationDataAfterSuccessfulCommand() { processListenersInReverseOrder(CompensationListener::cleaningCompensationDataAfterSuccess); doCleanupCompensationDataAfterSuccessfulCommand(); }
@java.lang.Override public final void clearCollectedCompensationData() { listeners.forEach(CompensationListener::cleaningCompensationData); doClearCollectedCompensationData(); }	private void processListenersInReverseOrder(java.util.function.Consumer<org.ovirt.engine.core.bll.context.CompensationListener> afterCompensation) { new java.util.LinkedList(listeners).descendingIterator().forEachRemaining(afterCompensation); }
@java.lang.Override public final void afterCompensationCleanup() { listeners.forEach(CompensationListener::afterCompensation); doAfterCompensationCleanup(); }	@java.lang.Override public final void afterCompensationCleanup() { processListenersInReverseOrder(CompensationListener::afterCompensation); doAfterCompensationCleanup(); }
public void loadVmsFromVmware() { clearProblem<START_MOD>(); clearVms<END_MOD>(); if (!(validateVmwareConfiguration())) { return; } org.ovirt.engine.core.compat.Guid proxyId = ((getProxyHosts().getSelectedItem()) != null) ? getProxyHosts().getSelectedItem().getId() : null; loadVMsFromExternalProvider(OriginType.VMWARE, getUrl(), getUsername().getEntity(), getPassword().getEntity(), proxyId); }	public void loadVmsFromVmware() { clearForLoad(); if (!(validateVmwareConfiguration())) { return; } org.ovirt.engine.core.compat.Guid proxyId = ((getProxyHosts().getSelectedItem()) != null) ? getProxyHosts().getSelectedItem().getId() : null; loadVMsFromExternalProvider(OriginType.VMWARE, getUrl(), getUsername().getEntity(), getPassword().getEntity(), proxyId); }
@java.lang.Override public javax.ws.rs.core.Response restore(org.ovirt.engine.api.model.Action action) { action.setAsync(false); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(parentId, guid); <START_MOD>tryBackParams.setRestoreMemory((action.isSetRestoreMemory() ? action.isRestoreMemory() : true)); <END_MOD>if (action.<START_MOD>isSetDisks<END_MOD>()) { tryBackParams.<START_MOD>setDisks(collection.mapDisks(action.getDisks()<END_MOD>)); } <START_MOD>tryBackParams.setCorrelationId(org.ovirt.engine.api.restapi.resource.BackendSnapshotResource.RESTORE_SNAPSHOT_CORRELATION_ID); javax.ws.rs.core.Response response = doAction(VdcActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action, PollingType.JOB); <END_MOD>if (<START_MOD>(response.getStatus()) == (Response.Status.OK.getStatusCode()<END_MOD>)) { <START_MOD>org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters restoreParams = new org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters(parentId, org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.COMMIT); restoreParams.setCorrelationId(org.ovirt.engine.api.restapi.resource.BackendSnapshotResource.RESTORE_SNAPSHOT_CORRELATION_ID); javax.ws.rs.core.Response response2 = doAction(VdcActionType.RestoreAllSnapshots, restoreParams, action); if ((response2.getStatus()) != (Response.Status.OK.getStatusCode())) { return response2<END_MOD>; } <START_MOD>} return<END_MOD> response; }	@java.lang.Override public javax.ws.rs.core.Response restore(org.ovirt.engine.api.model.Action action) { action.setAsync(false); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(parentId, guid); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) { tryBackParams.setDisks(collection.mapDisks(action.getDisks())); } tryBackParams.setCorrelationId(org.ovirt.engine.api.restapi.resource.BackendSnapshotResource.RESTORE_SNAPSHOT_CORRELATION_ID); javax.ws.rs.core.Response response = doAction(VdcActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action, PollingType.JOB); if ((response.getStatus()) == (Response.Status.OK.getStatusCode())) { org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters restoreParams = new org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters(parentId, org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.COMMIT); restoreParams.setCorrelationId(org.ovirt.engine.api.restapi.resource.BackendSnapshotResource.RESTORE_SNAPSHOT_CORRELATION_ID); javax.ws.rs.core.Response response2 = doAction(VdcActionType.RestoreAllSnapshots, restoreParams, action); if ((response2.getStatus()) != (Response.Status.OK.getStatusCode())) { return response2; } } return response; }
public void updateBootableFrom(java.util.List<org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.DiskModel<END_MOD>> vmDisks) { getIsBootable().setEntity(true); getIsBootable().setIsChangeable(true); if (((getDisk()) == null) || (!(getDisk().isDiskSnapshot()))) { for (org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.DiskModel<END_MOD> disk : vmDisks) { if ((disk.<START_MOD>getDiskVmElement(<END_MOD>).isBoot()) && (!(disk.<START_MOD>getDisk().<END_MOD>equals(getDisk())))) { getIsBootable().setEntity(false); if (!(disk.<START_MOD>getDisk().<END_MOD>isDiskSnapshot())) { getIsBootable().setChangeProhibitionReason(org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.onlyOneBootableDisk()); getIsBootable().setIsChangeable(false); break; } } } } }	public void updateBootableFrom(java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> vmDisks) { getIsBootable().setIsChangeable(true); if (((getDisk()) == null) || (!(getDisk().isDiskSnapshot()))) { for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel disk : vmDisks) { if ((disk.getDiskVmElement().isBoot()) && (!(disk.getDisk().equals(getDisk())))) { getIsBootable().setEntity(false); if (!(disk.getDisk().isDiskSnapshot())) { getIsBootable().setChangeProhibitionReason(org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.onlyOneBootableDisk()); getIsBootable().setIsChangeable(false); break; } } } } }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (returnValue)); }	@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (returnValue)); updateCanSetBoot(disks); }
protected void updateBootableDiskAvailable() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmDiskList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (returnValue)); } }), getVm().getId()); }	protected void updateBootableDiskAvailable() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmDiskList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (returnValue)); updateCanSetBoot(disks); } }), getVm().getId()); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Memory saved on a different compatibility version cannot be properly restored, following VMs should be off:") java.lang.String CLUSTER_WARN_CHANGE();	java.lang.String AFFINITY_LABEL_BAD_NAME();
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Shut down all VMs before changing the cluster version.") java.lang.String cannotClusterVersionChangeWithActiveVm();	java.lang.String cannotClusterVersionChangeWithActiveVm();
@java.lang.Override public boolean equals(java.lang.Object obj) { if (!(obj instanceof org.ovirt.engine.core.compat.Version)) { return false; } org.ovirt.engine.core.compat.Version other = ((org.ovirt.engine.core.compat.Version) (obj)); return ((<START_MOD>equalsMajorMinor<END_MOD>(other)) && ((revision) == (other.revision))) && ((build) == (other.build)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.compat.Version)) { return false; } org.ovirt.engine.core.compat.Version other = ((org.ovirt.engine.core.compat.Version) (obj)); return ((((major) == (other.major)) && ((minor) == (other.minor))) && ((revision) == (other.revision))) && ((build) == (other.build)); }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); org.ovirt.engine.core.compat.Version newClusterVersion = ((org.ovirt.engine.core.compat.Version) (value)); if ((value == null) || ((isActiveVm) && (!(newClusterVersion.equalsMajorMinor(oldClusterVersion))))) { result.setSuccess(false); result.getReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cannotClusterVersionChangeWithActiveVm()); } return result; }	@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); org.ovirt.engine.core.compat.Version newClusterVersion = ((org.ovirt.engine.core.compat.Version) (value)); if ((value == null) || ((hasActiveVm) && (!(newClusterVersion.equals(oldClusterVersion))))) { result.setSuccess(false); result.getReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cannotClusterVersionChangeWithActiveVm()); } return result; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.lang.Integer numOfActiveVms = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); isActiveVm = numOfActiveVms != 0; }	@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.lang.Integer numOfActiveVms = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); hasActiveVm = numOfActiveVms != 0; }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue( add Cluster with Compatibility Version that is lower than the Data Center Compatibility Version. upgrade your Cluster to a later Compatibility version first. <END_MOD>java.lang.String CLUSTER_CANNOT_ADD_COMPATIBILITY_VERSION_WITH_LOWER_STORAGE_POOL();	java.lang.String CLUSTER_CANNOT_ADD_COMPATIBILITY_VERSION_WITH_LOWER_STORAGE_POOL();
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot change Cluster.Version when a VM is active. Please shutdown all VMs in the cluster.") java.lang.String CLUSTER_VERSION_CANNOT_UPDATE_WHEN_ACTIVE_VM();	java.lang.String CLUSTER_VERSION_CANNOT_UPDATE_WHEN_ACTIVE_VM();
CLUSTER_WARN_VM_DUE_TO_UNSUPPORTED_MEMORY_RESTORE()<START_MOD> { }<END_MOD>	java.lang.String CLUSTER_WARN_VM_DUE_TO_UNSUPPORTED_MEMORY_RESTORE();
@java.lang.Override public void idle() { if (((lastSendInterval)++) >= (sendIntervals)) { lastSendInterval = 0; java.util.Iterator<org.ovirt.engine.core.notifier.transport.smtp.Smtp.DispatchAttempt> iterator = sendQueue.iterator(); while (iterator.hasNext()) { org.ovirt.engine.core.notifier.transport.smtp.Smtp.DispatchAttempt attempt = iterator.next(); try { org.ovirt.engine.core.notifier.transport.smtp.EventMessageContent message = new org.ovirt.engine.core.notifier.transport.smtp.EventMessageContent(); message.prepareMessage(hostName, attempt.event, isBodyHtml); org.ovirt.engine.core.notifier.transport.smtp.Smtp.log.info( mail subject='{}' to='{}' message.getMessageSubject(), attempt.address); org.ovirt.engine.core.notifier.transport.smtp.Smtp.log.debug( mail body='{}' message.getMessageBody()); sendMail(attempt.address, message.getMessageSubject(), message.getMessageBody()); notifyObservers(org.ovirt.engine.core.notifier.dao.DispatchResult.success(attempt.event, attempt.address, EventNotificationMethod.SMTP)); iterator.remove(); <START_MOD>org.ovirt.engine.core.notifier.transport.smtp.Smtp.log.info( sent successfully <END_MOD>} catch (java.lang.Exception ex) { (attempt.retries)++; if ((attempt.retries) >= (retries)) { notifyObservers(org.ovirt.engine.core.notifier.dao.DispatchResult.failure(attempt.event, attempt.address, EventNotificationMethod.SMTP, ex.getMessage())); iterator.remove(); } } } } }	@java.lang.Override public void idle() { if (((lastSendInterval)++) >= (sendIntervals)) { lastSendInterval = 0; java.util.Iterator<org.ovirt.engine.core.notifier.transport.smtp.Smtp.DispatchAttempt> iterator = sendQueue.iterator(); while (iterator.hasNext()) { org.ovirt.engine.core.notifier.transport.smtp.Smtp.DispatchAttempt attempt = iterator.next(); try { org.ovirt.engine.core.notifier.transport.smtp.EventMessageContent message = new org.ovirt.engine.core.notifier.transport.smtp.EventMessageContent(); message.prepareMessage(hostName, attempt.event, isBodyHtml); org.ovirt.engine.core.notifier.transport.smtp.Smtp.log.info("Send mail subject='{}' to='{}'", message.getMessageSubject(), attempt.address); org.ovirt.engine.core.notifier.transport.smtp.Smtp.log.debug("Send mail body='{}'", message.getMessageBody()); sendMail(attempt.address, message.getMessageSubject(), message.getMessageBody()); org.ovirt.engine.core.notifier.transport.smtp.Smtp.log.info("Mail subject='{}' to='{}' sent successfully", message.getMessageSubject(), attempt.address); notifyObservers(org.ovirt.engine.core.notifier.dao.DispatchResult.success(attempt.event, attempt.address, EventNotificationMethod.SMTP)); iterator.remove(); } catch (java.lang.Exception ex) { (attempt.retries)++; if ((attempt.retries) >= (retries)) { notifyObservers(org.ovirt.engine.core.notifier.dao.DispatchResult.failure(attempt.event, attempt.address, EventNotificationMethod.SMTP, ex.getMessage())); iterator.remove(); } } } } }
@org.junit.Test public void untarEmptyTarArchiveReturnsNoContent() throws java.io.IOException { byte[] emptyFile = load("empty.tar"); try (org.ovirt.engine.core.utils.archivers.tar.TarInMemoryExport tar = new org.ovirt.engine.core.utils.archivers.tar.TarInMemoryExport(new java.io.ByteArrayInputStream(emptyFile))) { java.util.Map<java.lang.String, java.nio.ByteBuffer> emptyTarEntries = tar.unTar(); assertTrue(emptyTarEntries.isEmpty()); } }	@org.junit.Test public void untarEmptyTarArchiveReturnsEntries() throws java.io.IOException { byte[] emptyFile = load("tar-with-empty-file.tar"); try (org.ovirt.engine.core.utils.archivers.tar.TarInMemoryExport tar = new org.ovirt.engine.core.utils.archivers.tar.TarInMemoryExport(new java.io.ByteArrayInputStream(emptyFile))) { java.util.Map<java.lang.String, java.nio.ByteBuffer> entries = tar.unTar(); assertThat(entries.size(), is(1)); assertThat(entries, hasKey("empty.file")); } }
@org.junit.Test public void untarAndSkipBadEntries() throws java.io.IOException { byte[] mixedContentArchive = load("mixed-content.tar"); try (org.ovirt.engine.core.utils.archivers.tar.TarInMemoryExport tar = new org.ovirt.engine.core.utils.archivers.tar.TarInMemoryExport(new java.io.ByteArrayInputStream(mixedContentArchive))) { java.util.Map<java.lang.String, java.nio.ByteBuffer> emptyTarEntries = tar.unTar(); assertThat(emptyTarEntries.entrySet(), not(empty())); assertThat(emptyTarEntries, hasKey("file.conf")); assertThat(emptyTarEntries.get("file.conf"), notNullValue()); assertThat(emptyTarEntries, not(hasKey("empty.file"))); } }	@org.junit.Test public void untarAndSkipBadEntries() throws java.io.IOException { byte[] mixedContentArchive = load("mixed-content.tar"); try (org.ovirt.engine.core.utils.archivers.tar.TarInMemoryExport tar = new org.ovirt.engine.core.utils.archivers.tar.TarInMemoryExport(new java.io.ByteArrayInputStream(mixedContentArchive))) { java.util.Map<java.lang.String, java.nio.ByteBuffer> entries = tar.unTar(); assertThat(entries.entrySet(), not(empty())); assertThat(entries, hasKey("file.conf")); assertThat(entries.get("file.conf"), notNullValue()); assertThat(entries, hasKey("empty.file")); } }
public java.util.Map<java.lang.String, java.nio.ByteBuffer> unTar() throws java.io.IOException { java.util.Map<java.lang.String, java.nio.ByteBuffer> fileContent = new java.util.HashMap<>(); <START_MOD>for (<END_MOD>org.apache.commons.compress.archivers.tar.TarArchiveEntry tarEntry = <START_MOD>tarInputStream.getNextTarEntry(); tarEntry != <END_MOD>null; tarEntry = tarInputStream.getNextTarEntry()) { byte[] content = new byte[((int) (tarEntry.getSize()))]; if ((tarInputStream.read(content)) == (-1)) { org.ovirt.engine.core.utils.archivers.tar.TarInMemoryExport.log.error( '{}' could not be read. tarEntry.getFile()); continue; } fileContent.put(tarEntry.getName(), java.nio.ByteBuffer.wrap(content)); } return fileContent; }	public java.util.Map<java.lang.String, java.nio.ByteBuffer> unTar() throws java.io.IOException { java.util.Map<java.lang.String, java.nio.ByteBuffer> fileContent = new java.util.HashMap<>(); for (org.apache.commons.compress.archivers.tar.TarArchiveEntry tarEntry = tarInputStream.getNextTarEntry(); tarEntry != null; tarEntry = tarInputStream.getNextTarEntry()) { byte[] content = new byte[((int) (tarEntry.getSize()))]; if ((tarInputStream.read(content)) == (-1)) { org.ovirt.engine.core.utils.archivers.tar.TarInMemoryExport.log.warn("File '{}' could not be read.", tarEntry.getFile()); } fileContent.put(tarEntry.getName(), java.nio.ByteBuffer.wrap(content)); } return fileContent; }
private void mockHostValidator() { when(validator.nameNotEmpty()).thenReturn(ValidationResult.VALID); doReturn(ValidationResult.VALID).when(validator).nameLengthIsLegal(); doReturn(ValidationResult.VALID).when(validator).hostNameIsValid(); doReturn(ValidationResult.VALID).when(validator).nameNotUsed(); doReturn(ValidationResult.VALID).when(validator).hostNameNotUsed(); doReturn(ValidationResult.VALID).when(validator).portIsValid(); when(validator.sshUserNameNotEmpty()).thenReturn(ValidationResult.VALID); doReturn(ValidationResult.VALID).when(validator).validateSingleHostAttachedToLocalStorage(); doReturn(ValidationResult.VALID).when(validator).securityKeysExists(); doReturn(ValidationResult.VALID).when(validator).provisioningComputeResourceValid(any(java.lang.Boolean.class), any(org.ovirt.engine.core.common.businessentities.ExternalComputeResource.class)); doReturn(ValidationResult.VALID).when(validator).provisioningHostGroupValid(any(java.lang.Boolean.class), any(org.ovirt.engine.core.common.businessentities.ExternalHostGroup.class)); <START_MOD>doReturn(ValidationResult.VALID).when(validator).isHeVmManaged(any(org.ovirt.engine.core.common.businessentities.HostedEngineDeployConfiguration.class)); <END_MOD>when(validator.passwordNotEmpty(any(java.lang.Boolean.class), any(org.ovirt.engine.core.common.action.VdsOperationActionParameters.AuthenticationMethod.class), any(java.lang.String.class))).thenReturn(ValidationResult.VALID); when(commandMock.getHostValidator()).thenReturn(validator); when(commandMock.validate(any(org.ovirt.engine.core.bll.ValidationResult.class))).thenCallRealMethod(); }	private void mockHostValidator() { when(validator.nameNotEmpty()).thenReturn(ValidationResult.VALID); doReturn(ValidationResult.VALID).when(validator).nameLengthIsLegal(); doReturn(ValidationResult.VALID).when(validator).hostNameIsValid(); doReturn(ValidationResult.VALID).when(validator).nameNotUsed(); doReturn(ValidationResult.VALID).when(validator).hostNameNotUsed(); doReturn(ValidationResult.VALID).when(validator).portIsValid(); when(validator.sshUserNameNotEmpty()).thenReturn(ValidationResult.VALID); doReturn(ValidationResult.VALID).when(validator).validateSingleHostAttachedToLocalStorage(); doReturn(ValidationResult.VALID).when(validator).securityKeysExists(); doReturn(ValidationResult.VALID).when(validator).provisioningComputeResourceValid(any(java.lang.Boolean.class), any(org.ovirt.engine.core.common.businessentities.ExternalComputeResource.class)); doReturn(ValidationResult.VALID).when(validator).provisioningHostGroupValid(any(java.lang.Boolean.class), any(org.ovirt.engine.core.common.businessentities.ExternalHostGroup.class)); doReturn(ValidationResult.VALID).when(validator).protocolIsNotXmlrpc(); doReturn(ValidationResult.VALID).when(validator).supportsDeployingHostedEngine(any(org.ovirt.engine.core.common.businessentities.HostedEngineDeployConfiguration.class)); when(validator.passwordNotEmpty(any(java.lang.Boolean.class), any(org.ovirt.engine.core.common.action.VdsOperationActionParameters.AuthenticationMethod.class), any(java.lang.String.class))).thenReturn(ValidationResult.VALID); when(commandMock.getHostValidator()).thenReturn(validator); when(commandMock.validate(any(org.ovirt.engine.core.bll.ValidationResult.class))).thenCallRealMethod(); }
public boolean isDeployHostedEngineAgent() { return deployHostedEngineAgent; }	public org.ovirt.engine.core.common.businessentities.HostedEngineDeployConfiguration.Action getDeployAction() { return deployAction; }
public void heVmManaged() { when(hostedEngineHelper.isVmManaged()).thenReturn(true); assertThat(validator.isHeVmManaged(new org.ovirt.engine.core.common.businessentities.HostedEngineDeployConfiguration(true, "")), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }	@org.junit.Test public void unsupportedHostedEngineDeployWhenClusterLevelIsUnsupported() { when(hostedEngineHelper.isVmManaged()).thenReturn(false); mockCluster(Version.v3_6); when(host.getClusterId()).thenReturn(Guid.Empty); assertThat(validator.supportsDeployingHostedEngine(new org.ovirt.engine.core.common.businessentities.HostedEngineDeployConfiguration(HostedEngineDeployConfiguration.Action.DEPLOY)), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_HOSTED_ENGINE_DEPLOYMENT_UNSUPPORTED)); }
@org.junit.Test public void validateSingleHostAttachedToFewStorages() { org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = mock(org.ovirt.engine.core.common.businessentities.StoragePool.class); when(dataCenter.isLocal()).thenReturn(true); when(storagePoolDao.getForVdsGroup(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(dataCenter); when(dbFacade.getStoragePoolDao()).thenReturn(storagePoolDao); when(hostStaticDao.getAllForVdsGroup(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Collections.<org.ovirt.engine.core.common.businessentities.VdsStatic>singletonList(mock(org.ovirt.engine.core.common.businessentities.VdsStatic.class))); when(dbFacade.getVdsStaticDao()).thenReturn(hostStaticDao); validator = new org.ovirt.engine.core.bll.validator.HostValidator(dbFacade, host<START_MOD>, hostedEngineHelper<END_MOD>); assertThat(validator.validateSingleHostAttachedToLocalStorage(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.VDS_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE)); }	@org.junit.Test public void validateSingleHostAttachedToFewStorages() { org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = mock(org.ovirt.engine.core.common.businessentities.StoragePool.class); when(dataCenter.isLocal()).thenReturn(true); when(storagePoolDao.getForCluster(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(dataCenter); when(dbFacade.getStoragePoolDao()).thenReturn(storagePoolDao); when(hostStaticDao.getAllForCluster(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Collections.<org.ovirt.engine.core.common.businessentities.VdsStatic>singletonList(mock(org.ovirt.engine.core.common.businessentities.VdsStatic.class))); when(dbFacade.getVdsStaticDao()).thenReturn(hostStaticDao); validator = new org.ovirt.engine.core.bll.validator.HostValidator(dbFacade, host, hostedEngineHelper); assertThat(validator.validateSingleHostAttachedToLocalStorage(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.VDS_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE)); }
@org.junit.Test public void validateSingleHostAttachedToLocalStorage() { org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = mock(org.ovirt.engine.core.common.businessentities.StoragePool.class); when(dataCenter.isLocal()).thenReturn(true); when(storagePoolDao.getForVdsGroup(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(dataCenter); when(dbFacade.getStoragePoolDao()).thenReturn(storagePoolDao); when(hostStaticDao.getAllForVdsGroup(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Collections.<org.ovirt.engine.core.common.businessentities.VdsStatic>emptyList()); when(dbFacade.getVdsStaticDao()).thenReturn(hostStaticDao); validator = new org.ovirt.engine.core.bll.validator.HostValidator(dbFacade, host<START_MOD>, hostedEngineHelper<END_MOD>); assertThat(validator.validateSingleHostAttachedToLocalStorage(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }	@org.junit.Test public void validateSingleHostAttachedToLocalStorage() { org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = mock(org.ovirt.engine.core.common.businessentities.StoragePool.class); when(dataCenter.isLocal()).thenReturn(true); when(storagePoolDao.getForCluster(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(dataCenter); when(dbFacade.getStoragePoolDao()).thenReturn(storagePoolDao); when(hostStaticDao.getAllForCluster(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Collections.<org.ovirt.engine.core.common.businessentities.VdsStatic>emptyList()); when(dbFacade.getVdsStaticDao()).thenReturn(hostStaticDao); validator = new org.ovirt.engine.core.bll.validator.HostValidator(dbFacade, host, hostedEngineHelper); assertThat(validator.validateSingleHostAttachedToLocalStorage(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
@org.junit.Before public void setup() { mockConfigRule.mockConfigValue(ConfigValues.MaxVdsNameLength, org.ovirt.engine.core.bll.validator.HostValidatorTest.HOST_NAME_SIZE); mockConfigRule.mockConfigValue(ConfigValues.EncryptHostCommunication, java.lang.Boolean.TRUE); validator = new org.ovirt.engine.core.bll.validator.HostValidator(dbFacade, host<START_MOD>, hostedEngineHelper<END_MOD>); }	@org.junit.Before public void setup() { mockConfigRule.mockConfigValue(ConfigValues.MaxVdsNameLength, org.ovirt.engine.core.bll.validator.HostValidatorTest.HOST_NAME_SIZE); mockConfigRule.mockConfigValue(ConfigValues.EncryptHostCommunication, java.lang.Boolean.TRUE); when(dbFacade.getClusterDao()).thenReturn(clusterDao); validator = new org.ovirt.engine.core.bll.validator.HostValidator(dbFacade, host, hostedEngineHelper); }
@org.junit.Test public void hostAttachedToLocalStorageWithoutDataCenter() { when(storagePoolDao.getForVdsGroup(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); when(dbFacade.getStoragePoolDao()).thenReturn(storagePoolDao); validator = new org.ovirt.engine.core.bll.validator.HostValidator(dbFacade, host<START_MOD>, hostedEngineHelper<END_MOD>); assertThat(validator.validateSingleHostAttachedToLocalStorage(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }	@org.junit.Test public void hostAttachedToLocalStorageWithoutDataCenter() { when(storagePoolDao.getForCluster(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); when(dbFacade.getStoragePoolDao()).thenReturn(storagePoolDao); validator = new org.ovirt.engine.core.bll.validator.HostValidator(dbFacade, host, hostedEngineHelper); assertThat(validator.validateSingleHostAttachedToLocalStorage(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
public org.ovirt.engine.core.bll.ValidationResult isHeVmManaged(org.ovirt.engine.core.common.businessentities.HostedEngineDeployConfiguration hostedEngineDeployConfiguration) { if (hostedEngineDeployConfiguration == null) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.HOSTED_ENGINE_VM_IS_UNMANAGED).when(((hostedEngineDeployConfiguration.isDeployHostedEngineAgent()) && (!(hostedEngineHelper.isVmManaged())))); } }	public org.ovirt.engine.core.bll.ValidationResult supportsDeployingHostedEngine(org.ovirt.engine.core.common.businessentities.HostedEngineDeployConfiguration heConfig) { if (heConfig == null) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } final org.ovirt.engine.core.common.businessentities.Cluster cluster = clusterDao.get(host.getClusterId()); if (cluster.getCompatibilityVersion().less(Version.v4_0)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_HOSTED_ENGINE_DEPLOYMENT_UNSUPPORTED, ("$deployAction " + (heConfig.getDeployAction().name().toLowerCase())), ("$clusterLevel " + (cluster.getCompatibilityVersion()))); } return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_UNMANAGED_HOSTED_ENGINE).when((((heConfig.getDeployAction()) == (HostedEngineDeployConfiguration.Action.DEPLOY)) && (!(hostedEngineHelper.isVmManaged())))); }
@org.junit.Test public void heVmUnManaged() { when(hostedEngineHelper.isVmManaged()).thenReturn(false); assertThat(validator.isHeVmManaged(new org.ovirt.engine.core.common.businessentities.HostedEngineDeployConfiguration(true, "")), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.HOSTED_ENGINE_VM_IS_UNMANAGED)); }	public void mockCluster(org.ovirt.engine.core.compat.Version version) { org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); cluster.setCompatibilityVersion(version); when(clusterDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(cluster); }
<START_MOD>protected<END_MOD> void importHostedEngineVm(java.util.Map<java.lang.String, java.lang.Object> vmStruct) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVmsDataFromExternalProvider(vmStruct); if (vm != null) { vm.setImages(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildDiskImagesFromDevices(vmStruct, vm.getId())); vm.setInterfaces(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVmNetworkInterfacesFromDevices(vmStruct)); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : vm.getImages()) { vm.getDiskMap().put(diskImage.getId(), diskImage); } vm.setClusterId(org.ovirt.engine.core.bll.AddUnmanagedVmsCommand.getClusterId()); vm.setRunOnVds(org.ovirt.engine.core.bll.AddUnmanagedVmsCommand.getVdsId()); <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> graphicsDevices = extractGraphicsDevices(vm.getId(), ((java.lang.Object[]) (vmStruct.get(VdsProperties.Devices)))); if (((graphicsDevices.size()) == 1) && ((org.ovirt.engine.core.common.utils.VmDeviceType.valueOf(graphicsDevices.get(0).getDevice().toUpperCase())) == (org.ovirt.engine.core.common.utils.VmDeviceType.VNC))) { vm.setDefaultDisplayType(DisplayType.vga); vm.setSingleQxlPci(false); } else { vm.setDefaultDisplayType(DisplayType.qxl); vm.setSingleQxlPci(true); } for (org.ovirt.engine.core.common.businessentities.GraphicsDevice graphicsDevice : graphicsDevices) { vm.getManagedVmDeviceMap().put(graphicsDevice.getDeviceId(), graphicsDevice); } <END_MOD>importHostedEngineVm(vm); } }	protected void importHostedEngineVm(java.util.Map<java.lang.String, java.lang.Object> vmStruct) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVmsDataFromExternalProvider(vmStruct); if (vm != null) { vm.setImages(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildDiskImagesFromDevices(vmStruct, vm.getId())); vm.setInterfaces(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVmNetworkInterfacesFromDevices(vmStruct)); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : vm.getImages()) { vm.getDiskMap().put(diskImage.getId(), diskImage); } vm.setClusterId(org.ovirt.engine.core.bll.AddUnmanagedVmsCommand.getClusterId()); vm.setRunOnVds(org.ovirt.engine.core.bll.AddUnmanagedVmsCommand.getVdsId()); java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> graphicsDevices = extractGraphicsDevices(vm.getId(), ((java.lang.Object[]) (vmStruct.get(VdsProperties.Devices)))); if (((graphicsDevices.size()) == 1) && ((org.ovirt.engine.core.common.utils.VmDeviceType.valueOf(graphicsDevices.get(0).getDevice().toUpperCase())) == (org.ovirt.engine.core.common.utils.VmDeviceType.VNC))) { vm.setDefaultDisplayType(DisplayType.vga); } else { vm.setDefaultDisplayType(DisplayType.qxl); } vm.setSingleQxlPci(false); for (org.ovirt.engine.core.common.businessentities.GraphicsDevice graphicsDevice : graphicsDevices) { vm.getManagedVmDeviceMap().put(graphicsDevice.getDeviceId(), graphicsDevice); } importHostedEngineVm(vm); } }
public void setDeployHostedEngineAgent(boolean deployHostedEngineAgent) { this.deployHostedEngineAgent = deployHostedEngineAgent; }	public org.ovirt.engine.core.common.businessentities.HostedEngineDeployConfiguration.Action getDeployAction() { return deployAction; }
@java.lang.Override public javax.ws.rs.core.Response install(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.businessentities.VDS vds = getEntity(); validateEnums(org.ovirt.engine.api.model.Action.class, action); org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters(vds.getStaticData(), action.getRootPassword(), true); <START_MOD>if (((action.getHost()) != null) && (action.getHost().isSetHostedEngineConfiguration())) { params.setHostedEngineDeployConfiguration(getMapper(org.ovirt.engine.api.model.HostedEngineConfiguration.class, org.ovirt.engine.core.common.businessentities.HostedEngineDeployConfiguration.class).map(action.getHost().getHostedEngineConfiguration(), null)); } <END_MOD>params = ((org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters) (getMapper(org.ovirt.engine.api.model.Action.class, org.ovirt.engine.core.common.action.VdsOperationActionParameters.class).map(action, ((org.ovirt.engine.core.common.action.VdsOperationActionParameters) (params))))); if (vds.isOvirtNode()) { params.setReinstallOrUpgrade(true); if (action.isSetImage()) { params.setoVirtIsoFile(action.getImage()); } } return doAction(VdcActionType.UpdateVds, params, action); }	@java.lang.Override public javax.ws.rs.core.Response install(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.businessentities.VDS vds = getEntity(); org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters(vds.getStaticData(), action.getRootPassword(), true); params.setFenceAgents(null); params.setHostedEngineDeployConfiguration(org.ovirt.engine.api.restapi.resource.HostResourceParametersUtil.getHostedEngineDeployConfiguration(this)); params = ((org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters) (getMapper(org.ovirt.engine.api.model.Action.class, org.ovirt.engine.core.common.action.VdsOperationActionParameters.class).map(action, params))); if (vds.isOvirtVintageNode()) { params.setReinstallOrUpgrade(true); if (action.isSetImage()) { params.setoVirtIsoFile(action.getImage()); return doAction(VdcActionType.UpgradeOvirtNode, params, action); } } return doAction(VdcActionType.UpdateVds, params, action); }
public void setDeployHostedEngineAgent(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> deployHostedEngineAgent) { this.deployHostedEngineAgent = deployHostedEngineAgent; }	public void setHostedEngineHostModel(org.ovirt.engine.ui.uicommonweb.models.hosts.HostedEngineHostModel hostedEngineHostModel) { this.hostedEngineHostModel = hostedEngineHostModel; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getDeployHostedEngineAgent() { return deployHostedEngineAgent; }	public org.ovirt.engine.ui.uicommonweb.models.hosts.HostedEngineHostModel getHostedEngineHostModel() { return hostedEngineHostModel; }
java.lang.String more();	java.lang.String management();
java.lang.String storage();	java.lang.String clusterAdditionalMigrationProperties();
public void sshStop() { restart("OnSshStop"); }	public void sshStop() { stop("OnSshStop"); }
public void stop() { restart("OnStop"); }	public void stop() { stop("OnStop"); }
@org.junit.Test public void testMacPoolGetByDataCenterIdExist() throws java.lang.Exception { final org.ovirt.engine.core.common.businessentities.MacPool macPool = dao.<START_MOD>getByClusterId<END_MOD>(FixturesTool.STORAGE_POOL_RHEL6_ISCSI_OTHER); assertThat(macPool, notNullValue()); assertThat(macPool.getId(), is(FixturesTool.NON_DEFAULT_MAC_POOL)); }	@org.junit.Test public void testMacPoolGetByClusterIdExist() throws java.lang.Exception { final org.ovirt.engine.core.common.businessentities.MacPool macPool = dao.getByClusterId(FixturesTool.CLUSTER_RHEL6_ISCSI); assertThat(macPool, notNullValue()); assertThat(macPool.getId(), is(FixturesTool.NON_DEFAULT_MAC_POOL)); }
protected org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters> createVmFromTemplateCommand(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.action.AddVmParameters param = new org.ovirt.engine.core.common.action.AddVmParameters(); param.setVm(vm); org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters> concrete = new org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters>(param) { @java.lang.Override protected void initUser() { } @java.lang.Override protected void initTemplateDisks() { } @java.lang.Override protected void initStoragePoolId() { } @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmTemplate getVmTemplate() { return createVmTemplate(); } }; org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters> result = spy(concrete); doReturn(true).when(result).checkNumberOfMonitors(); doReturn(createVmTemplate()).when(result).getVmTemplate(); doReturn(true).when(result).validateCustomProperties(any(org.ovirt.engine.core.common.businessentities.VmStatic.class), anyList()); mockDaos(result); mockBackend(result); org.ovirt.engine.core.bll.AddVmCommandTest.initCommandMethods(result); result.<START_MOD>poolPerCluster<END_MOD> = this.<START_MOD>macPoolPerCluster<END_MOD>; result.postConstruct(); return result; }	protected org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters> createVmFromTemplateCommand(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.action.AddVmParameters param = new org.ovirt.engine.core.common.action.AddVmParameters(); param.setVm(vm); org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters> concrete = new org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters>(param, org.ovirt.engine.core.bll.context.CommandContext.createContext(param.getSessionId())) { @java.lang.Override protected void initUser() { } @java.lang.Override protected void initTemplateDisks() { } @java.lang.Override protected void initStoragePoolId() { } @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmTemplate getVmTemplate() { return createVmTemplate(); } }; org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters> result = spy(concrete); doReturn(true).when(result).checkNumberOfMonitors(); doReturn(createVmTemplate()).when(result).getVmTemplate(); doReturn(true).when(result).validateCustomProperties(any(org.ovirt.engine.core.common.businessentities.VmStatic.class), anyList()); mockDaos(result); mockBackend(result); org.ovirt.engine.core.bll.AddVmCommandTest.initCommandMethods(result); result.macPoolPerCluster = this.macPoolPerCluster; result.postConstruct(); return result; }
private org.ovirt.engine.core.bll.AddVmCommand<org.ovirt.engine.core.common.action.AddVmParameters> setupCanAddVmTests(final int domainSizeGB) { org.ovirt.engine.core.common.businessentities.VM vm = initializeMock(domainSizeGB); org.ovirt.engine.core.bll.AddVmCommand<org.ovirt.engine.core.common.action.AddVmParameters> cmd = createCommand(vm); cmd.<START_MOD>poolPerCluster<END_MOD> = <START_MOD>macPoolPerCluster<END_MOD>; org.ovirt.engine.core.bll.AddVmCommandTest.initCommandMethods(cmd); doReturn(createVmTemplate()).when(cmd).getVmTemplate(); doReturn(createStoragePool()).when(cmd).getStoragePool(); return cmd; }	private org.ovirt.engine.core.bll.AddVmCommand<org.ovirt.engine.core.common.action.AddVmParameters> setupCanAddVmTests(final int domainSizeGB) { org.ovirt.engine.core.common.businessentities.VM vm = initializeMock(domainSizeGB); org.ovirt.engine.core.bll.AddVmCommand<org.ovirt.engine.core.common.action.AddVmParameters> cmd = createCommand(vm); cmd.macPoolPerCluster = macPoolPerCluster; org.ovirt.engine.core.bll.AddVmCommandTest.initCommandMethods(cmd); initializeVmStaticDaoMock(vm); doReturn(createVmTemplate()).when(cmd).getVmTemplate(); doReturn(createStoragePool()).when(cmd).getStoragePool(); return cmd; }
@java.lang.Override public void rollback() { super.rollback(); <START_MOD>poolPerCluster<END_MOD>.createPool(getOldMacPool()); }	@java.lang.Override public void onRollback() { macPoolPerCluster.createPool(getOldMacPool()); }
@org.junit.Before @java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); injectorRule.bind(org.ovirt.engine.core.bll.network.macpoolmanager.<START_MOD>MacPoolPerCluster<END_MOD>.class, mock(org.ovirt.engine.core.bll.network.macpoolmanager.<START_MOD>MacPoolPerCluster<END_MOD>.class)); existingSnapshot = createSnapshot(existingSnapshotId); existingSnapshot.setVmConfiguration(org.ovirt.engine.core.bll.GetVmConfigurationBySnapshotQueryTest.EXISTING_VM_NAME); snapshotVmConfigurationHelper = spy(new org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelper()); when(getQuery().getSnapshotVmConfigurationHelper()).thenReturn(snapshotVmConfigurationHelper); snapshotsManager = mock(org.ovirt.engine.core.bll.snapshots.SnapshotsManager.class); when(snapshotVmConfigurationHelper.getSnapshotManager()).thenReturn(snapshotsManager); setUpDaoMocks(); }	@org.junit.Before @java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); injectorRule.bind(org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.class, mock(org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.class)); existingSnapshot = createSnapshot(existingSnapshotId); existingSnapshot.setVmConfiguration(org.ovirt.engine.core.bll.GetVmConfigurationBySnapshotQueryTest.EXISTING_VM_NAME); snapshotVmConfigurationHelper = spy(new org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelper()); when(getQuery().getSnapshotVmConfigurationHelper()).thenReturn(snapshotVmConfigurationHelper); org.ovirt.engine.core.bll.snapshots.SnapshotsManager snapshotsManager = mock(org.ovirt.engine.core.bll.snapshots.SnapshotsManager.class); when(snapshotVmConfigurationHelper.getSnapshotManager()).thenReturn(snapshotsManager); setUpDaoMocks(); }
@java.lang.Override protected void executeCommand() { getMacPoolDao().remove(getMacPoolId()); <START_MOD>poolPerCluster<END_MOD>.removePool(getMacPoolId()); getReturnValue().setSucceeded(true); }	@java.lang.Override protected void executeCommand() { registerRollbackHandler(new org.ovirt.engine.core.bll.RemoveMacPoolCommand.CustomTransactionCompletionListener()); getMacPoolDao().remove(getMacPoolId()); macPoolPerCluster.removePool(getMacPoolId()); getReturnValue().setSucceeded(true); }
@org.junit.Before public void setUp() throws java.lang.Exception { injectorRule.bind(org.ovirt.engine.core.bll.network.macpoolmanager.<START_MOD>MacPoolPerCluster<END_MOD>.class, mock(org.ovirt.engine.core.bll.network.macpoolmanager.<START_MOD>MacPoolPerCluster<END_MOD>.class)); existingSnapshot = createSnapshot(existingSnapshotId); existingVm = createVm(existingVmId); existingSnapshot.setVmConfiguration(org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelperTest.EXISTING_VM_NAME); existingDiskImage = createDiskImage(existingImageId, existingImageGroupId); snapshotVmConfigurationHelper = spy(new org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelper()); snapshotsManager = mock(org.ovirt.engine.core.bll.snapshots.SnapshotsManager.class); when(snapshotVmConfigurationHelper.getSnapshotManager()).thenReturn(snapshotsManager); setUpDaoMocks(); }	@org.junit.Before public void setUp() throws java.lang.Exception { injectorRule.bind(org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.class, mock(org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.class)); existingSnapshot = createSnapshot(existingSnapshotId); existingVm = createVm(existingVmId); existingSnapshot.setVmConfiguration(org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelperTest.EXISTING_VM_NAME); existingDiskImage = createDiskImage(existingImageId, existingImageGroupId); snapshotVmConfigurationHelper = spy(new org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelper()); snapshotsManager = mock(org.ovirt.engine.core.bll.snapshots.SnapshotsManager.class); when(snapshotVmConfigurationHelper.getSnapshotManager()).thenReturn(snapshotsManager); setUpDaoMocks(); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.MacPool macPool = getDbFacade().getMacPoolDao().getByClusterId(getParameters().getId()); getQueryReturnValue().setReturnValue(macPool); }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.MacPool macPool = macPoolDao.getByClusterId(getParameters().getId()); getQueryReturnValue().setReturnValue(macPool); }
@java.lang.Override protected void executeCommand() { getMacPoolDao().update(getMacPoolEntity()); <START_MOD>poolPerCluster<END_MOD>.modifyPool(getMacPoolEntity()); setSucceeded(true); getReturnValue().setActionReturnValue(getMacPoolId()); }	@java.lang.Override protected void executeCommand() { registerRollbackHandler(new org.ovirt.engine.core.bll.UpdateMacPoolCommand.CustomTransactionCompletionListener()); getMacPoolDao().update(getMacPoolEntity()); macPoolPerCluster.modifyPool(getMacPoolEntity()); setSucceeded(true); getReturnValue().setActionReturnValue(getMacPoolId()); }
@java.lang.Override public void rollback() { super.rollback(); <START_MOD>poolPerCluster<END_MOD>.modifyPool(oldMacPool); }	@java.lang.Override public void onRollback() { macPoolPerCluster.modifyPool(oldMacPool); }
@java.lang.Override public void rollback() { super.rollback(); <START_MOD>poolPerCluster<END_MOD>.removePool(getMacPoolId()); }	@java.lang.Override public void onRollback() { macPoolPerCluster.removePool(getMacPoolId()); }
@java.lang.Override protected void executeCommand() { getMacPoolEntity().setId(org.ovirt.engine.core.compat.Guid.newGuid()); getMacPoolDao().save(getMacPoolEntity()); addPermission(getCurrentUser().getId(), getMacPoolEntity().getId()); <START_MOD>poolPerCluster<END_MOD>.createPool(getMacPoolEntity()); setSucceeded(true); getReturnValue().setActionReturnValue(getMacPoolId()); }	@java.lang.Override protected void executeCommand() { registerRollbackHandler(new org.ovirt.engine.core.bll.AddMacPoolCommand.CustomTransactionCompletionListener()); getMacPoolEntity().setId(org.ovirt.engine.core.compat.Guid.newGuid()); getMacPoolDao().save(getMacPoolEntity()); addPermission(getCurrentUser().getId(), getMacPoolEntity().getId()); macPoolPerCluster.createPool(getMacPoolEntity()); setSucceeded(true); getReturnValue().setActionReturnValue(getMacPoolId()); }
private void moveMacsOfUpdatedDataCenter(org.ovirt.engine.core.compat.Guid oldMacPoolId, org.ovirt.engine.core.compat.Guid newMacPoolId, java.util.List<java.lang.String> vmInterfaceMacs) { java.util.Objects.requireNonNull(vmInterfaceMacs); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy sourcePool = <START_MOD>poolPerCluster<END_MOD>.getPoolById(oldMacPoolId); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy targetPool = <START_MOD>poolPerCluster<END_MOD>.getPoolById(newMacPoolId); for (java.lang.String mac : vmInterfaceMacs) { sourcePool.freeMac(mac); targetPool.forceAddMac(mac); } }	private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getParameters().getStoragePool().getMacPoolId(); final boolean shouldSetNewMacPoolOnAllClusters = newMacPoolId != null; if (shouldSetNewMacPoolOnAllClusters) { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { this.moveMacsOfUpdatedCluster.updateClusterAndMoveMacs(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext()); } } }
private org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy getMacPool(org.ovirt.engine.core.compat.Guid <START_MOD>clusterId<END_MOD>) { return <START_MOD>poolPerCluster<END_MOD>.<START_MOD>poolForCluster<END_MOD>(<START_MOD>clusterId<END_MOD>); }	protected org.ovirt.engine.core.dao.DiskVmElementDao getDiskVmElementDao() { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskVmElementDao(); }
protected void synchronizeNics(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.context.CompensationContext compensationContext, org.ovirt.engine.core.common.businessentities.aaa.DbUser user) { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(getMacPool(vm.<START_MOD>getVdsGroupId())); org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(vm.getVdsGroupId(), vm.<END_MOD>getStoragePoolId()<START_MOD>, vm.getVdsGroupCompatibilityVersion(), org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_SNAPSHOT_VM_INVALID_INTERFACES); vmInterfaceManager.removeAll(vm.getId()); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vmInterface : vm.getInterfaces()) { vmInterface.setVmId(vm.getId()); if ((vmInterface.getId()) == null) { vmInterface.setId(org.ovirt.engine.core.compat.Guid.newGuid()); }<END_MOD> vnicProfileHelper<START_MOD>.updateNicWithVnicProfileForUser(vmInterface, user); vmInterfaceManager.add(vmInterface, compensationContext, true, vm.getOs<END_MOD>(), vm.getVdsGroupCompatibilityVersion()); } vnicProfileHelper.<START_MOD>auditInvalidInterfaces(vm.getName<END_MOD>()); }	private void synchronizeNics(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.context.CompensationContext compensationContext, org.ovirt.engine.core.common.businessentities.aaa.DbUser user, org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager) { org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(vm.getClusterId(), vm.getStoragePoolId(), org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_SNAPSHOT_VM_INVALID_INTERFACES); vmInterfaceManager.removeAll(vm.getId()); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vmInterface : vm.getInterfaces()) { vmInterface.setVmId(vm.getId()); if ((vmInterface.getId()) == null) { vmInterface.setId(org.ovirt.engine.core.compat.Guid.newGuid()); } vnicProfileHelper.updateNicWithVnicProfileForUser(vmInterface, user); vmInterfaceManager.add(vmInterface, compensationContext, true, vm.getOs(), vm.getCompatibilityVersion()); } vnicProfileHelper.auditInvalidInterfaces(vm.getName()); }
protected org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy getMacPool() { return <START_MOD>poolPerCluster<END_MOD>.<START_MOD>poolForCluster<END_MOD>(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.<START_MOD>getVdsGroupId<END_MOD>()); }	@java.lang.Override protected void setActionMessageParameters() { addValidationMessage(EngineMessage.VAR__TYPE__INTERFACE); }
protected org.ovirt.engine.core.bll.ValidationResult macAvailable() { org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy macPool = <START_MOD>poolPerCluster.poolForCluster<END_MOD>(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.<START_MOD>getVdsGroupId<END_MOD>()); java.lang.Boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(macPool); if (allowDupMacs || (!(vmInterfaceManager.existsPluggedInterfaceWithSameMac(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic())))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE); } }	protected org.ovirt.engine.core.bll.ValidationResult macAvailable() { org.ovirt.engine.core.bll.network.macpool.MacPool macPool = org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getMacPool(); java.lang.Boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(macPool); if (allowDupMacs || (!(vmInterfaceManager.existsPluggedInterfaceWithSameMac(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic())))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE); } }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.MacPool <START_MOD>getByClusterId<END_MOD>(org.ovirt.engine.core.compat.Guid dataCenterId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", dataCenterId); return getCallsHandler().executeRead(<START_MOD>"GetMacPoolByClusterId"<END_MOD>, new org.ovirt.engine.core.dao.MacPoolDaoImpl.MacPoolRowMapper(), parameterSource); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.MacPool getByClusterId(org.ovirt.engine.core.compat.Guid dataCenterId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("cluster_id", dataCenterId); return getCallsHandler().executeRead("GetMacPoolByClusterId", new org.ovirt.engine.core.dao.MacPoolDaoImpl.MacPoolRowMapper(), parameterSource); }
protected void removeVmNetwork() { if ((getInterfaces()) != null) { for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : getInterfaces()) { org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy macPool = <START_MOD>poolPerCluster<END_MOD>.<START_MOD>poolForCluster<END_MOD>(<START_MOD>org.ovirt.engine.core.bll.VmCommand.getVdsGroupId<END_MOD>()); macPool.freeMac(iface.getMacAddress()); } } }	protected void removeVmNetwork() { org.ovirt.engine.core.bll.network.macpool.MacPool macPool = getMacPool(); if ((getInterfaces()) != null) { for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : getInterfaces()) { macPool.freeMac(iface.getMacAddress()); } } }
@java.lang.Override protected void executeVmCommand() { this.setVmName(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getVmStaticDao().get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getVmId()).getName()); org.ovirt.engine.core.common.businessentities.network.VmNic iface = org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getVmNicDao().get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getInterfaceId()); if (iface != null) { interfaceName = iface.getName(); java.lang.String interType = org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(iface.getType()).getDescription(); if (interType != null) { org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.addCustomValue("InterfaceType", interType); } new org.ovirt.engine.core.bll.network.ExternalNetworkManager(iface).deallocateIfExternal(); <START_MOD>org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy pool = poolPerCluster.poolForCluster(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getVdsGroupId()); pool<END_MOD>.freeMac(iface.getMacAddress()); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { getVmNicDao().remove(getParameters().getInterfaceId()); getDbFacade().getVmNetworkStatisticsDao().remove(getParameters().getInterfaceId()); getDbFacade().getVmDeviceDao().remove(new org.ovirt.engine.core.common.businessentities.VmDeviceId(getParameters().getInterfaceId(), getParameters().getVmId())); setSucceeded(true); return null; } }); }	@java.lang.Override protected void executeVmCommand() { this.setVmName(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getVmStaticDao().get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getVmId()).getName()); org.ovirt.engine.core.common.businessentities.network.VmNic iface = org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getVmNicDao().get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getInterfaceId()); if (iface != null) { interfaceName = iface.getName(); java.lang.String interType = org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(iface.getType()).getDescription(); if (interType != null) { org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.addCustomValue("InterfaceType", interType); } new org.ovirt.engine.core.bll.network.ExternalNetworkManager(iface).deallocateIfExternal(); org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getMacPool().freeMac(iface.getMacAddress()); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.bll.network.vm.vmStaticDao.incrementDbGeneration(getParameters().getVmId()); getVmNicDao().remove(getParameters().getInterfaceId()); getDbFacade().getVmNetworkStatisticsDao().remove(getParameters().getInterfaceId()); getDbFacade().getVmDeviceDao().remove(new org.ovirt.engine.core.common.businessentities.VmDeviceId(getParameters().getInterfaceId(), getParameters().getVmId())); setSucceeded(true); return null; }); }
@org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.bll.network.macpoolmanager.<START_MOD>MacPoolPerCluster<END_MOD>.class, mock(org.ovirt.engine.core.bll.network.macpoolmanager.<START_MOD>MacPoolPerCluster<END_MOD>.class)); vmId = org.ovirt.engine.core.compat.Guid.newGuid(); vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setId(vmId); when(vmDao.get(vmId)).thenReturn(vm); org.ovirt.engine.core.compat.Guid snapshotId = org.ovirt.engine.core.compat.Guid.newGuid(); snapshot = new org.ovirt.engine.core.common.businessentities.Snapshot(); snapshot.setId(snapshotId); snapshot.setVmId(vmId); when(snapshotDao.get(snapshotId)).thenReturn(snapshot); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters params = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vmId, snapshotId); cmd = spy(new org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand(params)); doNothing().when(cmd).updateVmDisksFromDb(); doReturn(snapshotDao).when(cmd).getSnapshotDao(); doReturn(vmDao).when(cmd).getVmDao(); }	@org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.class, mock(org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.class)); vmId = org.ovirt.engine.core.compat.Guid.newGuid(); vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setId(vmId); when(vmDao.get(vmId)).thenReturn(vm); org.ovirt.engine.core.compat.Guid snapshotId = org.ovirt.engine.core.compat.Guid.newGuid(); snapshot = new org.ovirt.engine.core.common.businessentities.Snapshot(); snapshot.setId(snapshotId); snapshot.setVmId(vmId); when(snapshotDao.get(snapshotId)).thenReturn(snapshot); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters params = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vmId, snapshotId); cmd = spy(new org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand(params, null)); doNothing().when(cmd).updateVmDisksFromDb(); doReturn(snapshotDao).when(cmd).getSnapshotDao(); doReturn(vmDao).when(cmd).getVmDao(); }
protected void setUpCommand() { command = createCommand(); command.<START_MOD>poolPerCluster<END_MOD> = <START_MOD>macPoolPerCluster<END_MOD>; doReturn(true).when(command).areTemplateImagesInStorageReady(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(true).when(command).verifyAddVM(); doReturn(true).when(command).setAndValidateDiskProfiles(); doReturn(true).when(command).setAndValidateCpuProfile(); }	protected void setUpCommand() { command = createCommand(); doReturn(true).when(command).areTemplateImagesInStorageReady(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(true).when(command).verifyAddVM(); doReturn(true).when(command).setAndValidateDiskProfiles(); doReturn(true).when(command).setAndValidateCpuProfile(); }
protected org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy getMacPool() { return <START_MOD>poolPerCluster<END_MOD>.<START_MOD>poolForCluster<END_MOD>(org.ovirt.engine.core.bll.AddVmCommand.<START_MOD>getVdsGroupId<END_MOD>()); }	protected void copyDiskVmElements() { for (java.util.Map.Entry<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> srcToDst : getSrcDiskIdToTargetDiskIdMapping().entrySet()) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement srcDve = getImagesToCheckDestinationStorageDomains().stream().filter(( d) -> d.getId().equals(srcToDst.getKey())).findFirst().get().getDiskVmElementForVm(getSourceVmId()); createAndSaveNewDiskVmElement(srcToDst.getValue(), org.ovirt.engine.core.bll.AddVmCommand.getVmId(), srcDve); } }
@java.lang.Override protected void init() { if ((org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters()) == null) { return; } setEffectiveCompatibilityVersion(org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData(), this::getVdsGroup)); org.ovirt.engine.core.compat.Guid templateIdToUse = org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData().getVmtGuid(); if (org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData().isUseLatestVersion()) { org.ovirt.engine.core.common.businessentities.VmTemplate latest = org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplateDao().getTemplateWithLatestVersionInChain(templateIdToUse); if (latest != null) { if (!(templateIdToUse.equals(latest.getId()))) { org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().setDiskInfoDestinationMap(null); } setVmTemplate(latest); templateIdToUse = latest.getId(); org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData().setVmtGuid(templateIdToUse); } } setVmTemplateId(templateIdToUse); initTemplate(); ensureDestinationImageMap(); nameForVmInPoolGenerator = new org.ovirt.engine.core.utils.NameForVmInPoolGenerator(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmPool().getName()); macPool = <START_MOD>poolPerCluster.poolForCluster(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVdsGroupId()); }<END_MOD>	@java.lang.Override protected void init() { if ((org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters()) == null) { return; } setEffectiveCompatibilityVersion(org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData(), this::getCluster)); org.ovirt.engine.core.compat.Guid templateIdToUse = org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData().getVmtGuid(); if (org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData().isUseLatestVersion()) { org.ovirt.engine.core.common.businessentities.VmTemplate latest = org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplateDao().getTemplateWithLatestVersionInChain(templateIdToUse); if (latest != null) { if (!(templateIdToUse.equals(latest.getId()))) { org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().setDiskInfoDestinationMap(null); } setVmTemplate(latest); templateIdToUse = latest.getId(); org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData().setVmtGuid(templateIdToUse); } } setVmTemplateId(templateIdToUse); initTemplate(); ensureDestinationImageMap(); nameForVmInPoolGenerator = new org.ovirt.engine.core.utils.NameForVmInPoolGenerator(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmPool().getName()); }
@org.junit.Test public void testGetByDataCenterId() throws java.lang.Exception { final org.ovirt.engine.core.compat.Guid notExistingRecordGuid = org.ovirt.engine.core.compat.Guid.newGuid(); final org.ovirt.engine.core.common.businessentities.MacPool macPool = dao.<START_MOD>getByClusterId<END_MOD>(notExistingRecordGuid); assertThat(macPool, nullValue()); }	@org.junit.Test public void testGetByClusterId() throws java.lang.Exception { final org.ovirt.engine.core.compat.Guid notExistingRecordGuid = org.ovirt.engine.core.compat.Guid.newGuid(); final org.ovirt.engine.core.common.businessentities.MacPool macPool = dao.getByClusterId(notExistingRecordGuid); assertThat(macPool, nullValue()); }
private static java.net.HttpURLConnection create(java.net.URL url) throws java.io.IOException, java.security.GeneralSecurityException { return new org.ovirt.engine.core.uutils.net.HttpURLConnectionBuilder(url).setHttpsProtocol(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_SSO_SERVICE_SSL_PROTOCOL")).setReadTimeout(0).setTrustManagerAlgorithm(javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm()).setTrustStore(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty(<START_MOD>"ENGINE_SSO_PKI_TRUST_STORE"<END_MOD>)).setTrustStorePassword(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().<START_MOD>getProperty("ENGINE_SSO_PKI_TRUST_STORE_PASSWORD"<END_MOD>)).setTrustStoreType(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().<START_MOD>getProperty("ENGINE_SSO_PKI_TRUST_STORE_TYPE"<END_MOD>)).setURL(url).setVerifyChain(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getBoolean("ENGINE_SSO_SERVICE_SSL_VERIFY_CHAIN")).setVerifyHost(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getBoolean("ENGINE_SSO_SERVICE_SSL_VERIFY_HOST")).create(); }	private static java.net.HttpURLConnection create(java.net.URL url) throws java.io.IOException, java.security.GeneralSecurityException { return new org.ovirt.engine.core.uutils.net.HttpURLConnectionBuilder(url).setHttpsProtocol(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_SSO_SERVICE_SSL_PROTOCOL")).setReadTimeout(0).setTrustManagerAlgorithm(javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm()).setTrustStore(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_HTTPS_PKI_TRUST_STORE")).setTrustStorePassword(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_HTTPS_PKI_TRUST_STORE_PASSWORD")).setTrustStoreType(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_HTTPS_PKI_TRUST_STORE_TYPE")).setURL(url).setVerifyChain(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getBoolean("ENGINE_SSO_SERVICE_SSL_VERIFY_CHAIN")).setVerifyHost(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getBoolean("ENGINE_SSO_SERVICE_SSL_VERIFY_HOST")).create(); }
@java.lang.Override protected boolean canDoAction() { boolean returnValue = true; org.ovirt.engine.core.common.businessentities.Permission p = org.ovirt.engine.core.bll.RemovePermissionCommand.getPermissionDao().get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getPermission().getId()); if (org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isLastSuperUserPermission(p.getRoleId())) { org.ovirt.engine.core.bll.RemovePermissionCommand.getReturnValue().getCanDoActionMessages().add(EngineMessage.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString()); returnValue = false; } else if ((p.getRoleType().equals(RoleType.ADMIN)) && (!(org.ovirt.engine.core.bll.RemovePermissionCommand.isSystemSuperUser()))) { addCanDoActionMessage(EngineMessage.PERMISSION_REMOVE_FAILED_ONLY_SYSTEM_SUPER_USER_CAN_REMOVE_ADMIN_ROLES); returnValue = false; } <START_MOD>if ((!(java.util.Objects.equals(p.getAdElementId(), org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getTargetId()))) && ((org.ovirt.engine.core.bll.RemovePermissionCommand.getDbUserDao().get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getTargetId())) != null)) { addCanDoActionMessage(EngineMessage.INHERITED_PERMISSION_CANT_BE_REMOVED); returnValue = false; } <END_MOD>return returnValue; }	@java.lang.Override protected boolean canDoAction() { boolean returnValue = true; org.ovirt.engine.core.common.businessentities.Permission p = org.ovirt.engine.core.bll.RemovePermissionCommand.getPermissionDao().get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getPermission().getId()); if (org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isLastSuperUserPermission(p.getRoleId())) { org.ovirt.engine.core.bll.RemovePermissionCommand.getReturnValue().getCanDoActionMessages().add(EngineMessage.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString()); returnValue = false; } else if ((p.getRoleType().equals(RoleType.ADMIN)) && (!(org.ovirt.engine.core.bll.RemovePermissionCommand.isSystemSuperUser()))) { addCanDoActionMessage(EngineMessage.PERMISSION_REMOVE_FAILED_ONLY_SYSTEM_SUPER_USER_CAN_REMOVE_ADMIN_ROLES); returnValue = false; } if (!(java.util.Objects.equals(p.getAdElementId(), org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getTargetId()))) { addCanDoActionMessage(EngineMessage.INHERITED_PERMISSION_CANT_BE_REMOVED); returnValue = false; } return returnValue; }
protected void updateCurrentCd(java.lang.String cdPath) {<START_MOD> cdPath = (cdPath.isEmpty()) ? null : cdPath;<END_MOD> org.ovirt.engine.core.bll.VmHandler.updateCurrentCd(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm(), cdPath); }	protected void updateCurrentCd(java.lang.String cdPath) { cdPath = (org.apache.commons.lang.StringUtils.isEmpty(cdPath)) ? null : cdPath; org.ovirt.engine.core.bll.VmHandler.updateCurrentCd(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm(), cdPath); }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters(org.ovirt.engine.api.model.Watchdog model, org.ovirt.engine.core.common.businessentities.VmWatchdog entity) { org.ovirt.engine.core.common.action.WatchdogParameters parameters = new org.ovirt.engine.core.common.action.WatchdogParameters(); <START_MOD>if (model.isSetAction()) { <END_MOD>parameters.setAction(org.ovirt.engine.api.restapi.types.WatchdogMapper.map(model.getAction())); <START_MOD>} else { parameters.setAction(entity.getAction()); } if (model.isSetModel()) { <END_MOD>parameters.setModel(org.ovirt.engine.api.restapi.types.WatchdogMapper.map(model.getModel())); <START_MOD>} else { parameters.setAction(entity.getAction()); } <END_MOD>parameters.setId(instanceTypeId); parameters.setVm(false); return parameters; }	@java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters(org.ovirt.engine.api.model.Watchdog model, org.ovirt.engine.core.common.businessentities.VmWatchdog entity) { org.ovirt.engine.core.common.action.WatchdogParameters parameters = new org.ovirt.engine.core.common.action.WatchdogParameters(); if (model.isSetAction()) { parameters.setAction(org.ovirt.engine.api.restapi.types.WatchdogMapper.map(model.getAction())); } else { parameters.setAction(entity.getAction()); } if (model.isSetModel()) { parameters.setModel(org.ovirt.engine.api.restapi.types.WatchdogMapper.map(model.getModel())); } else { parameters.setModel(entity.getModel()); } parameters.setId(instanceTypeId); parameters.setVm(false); return parameters; }
@java.lang.Override public void setEntity(org.ovirt.engine.core.common.businessentities.VDSGroup value) { super.setEntity(value); initSelectedMacPool(); }	@java.lang.Override public void setEntity(org.ovirt.engine.core.common.businessentities.Cluster value) { super.setEntity(value); initSelectedMacPool(); }
private void initSelectedMacPool() { java.util.Collection<org.ovirt.engine.core.common.businessentities.MacPool> allMacPools = getMacPoolListModel().getItems(); org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = getEntity(); if ((allMacPools != null) && (vdsGroup != null)) { org.ovirt.engine.core.compat.Guid macPoolId = vdsGroup.getMacPoolId(); for (org.ovirt.engine.core.common.businessentities.MacPool macPool : allMacPools) { if (macPool.getId().equals(macPoolId)) { getMacPoolListModel().setSelectedItem(macPool); break; } } } }	private void initSelectedMacPool() { java.util.Collection<org.ovirt.engine.core.common.businessentities.MacPool> allMacPools = getMacPoolListModel().getItems(); org.ovirt.engine.core.common.businessentities.Cluster cluster = getEntity(); if ((allMacPools != null) && (cluster != null)) { org.ovirt.engine.core.compat.Guid macPoolId = cluster.getMacPoolId(); for (org.ovirt.engine.core.common.businessentities.MacPool macPool : allMacPools) { if (macPool.getId().equals(macPoolId)) { getMacPoolListModel().setSelectedItem(macPool); break; } } } }
@java.lang.Override protected void populateTabMap() { getTabNameMapping().put(TabName.GENERAL_TAB, this.generalTab); getTabNameMapping().put(TabName.CONSOLE_TAB, this.consoleTab); getTabNameMapping().put(TabName.CLUSTER_POLICY_TAB, this.clusterPolicyTab); getTabNameMapping().put(TabName.OPTIMIZATION_TAB, this.optimizationTab); getTabNameMapping().put(TabName.RESILIENCE_POLICY_TAB, this.resiliencePolicyTab); <START_MOD>getTabNameMapping().put(TabName.MAC_POOL_TAB, macPoolTab); <END_MOD>}	@java.lang.Override protected void populateTabMap() { getTabNameMapping().put(TabName.GENERAL_TAB, this.generalTab); getTabNameMapping().put(TabName.CONSOLE_TAB, this.consoleTab); getTabNameMapping().put(TabName.CLUSTER_POLICY_TAB, this.clusterPolicyTab); getTabNameMapping().put(TabName.OPTIMIZATION_TAB, this.optimizationTab); getTabNameMapping().put(TabName.MIGRATION_TAB, this.migrationTab); getTabNameMapping().put(TabName.MAC_POOL_TAB, macPoolTab); }
public boolean validate() { boolean generalTabValid = isGeneralTabValid(); setValidTab(TabName.GENERAL_TAB, generalTabValid); org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent.fire(getEventBus(), this); return generalTabValid; }	public boolean validate() { getName().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(40), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(getMaxNameLength()), new org.ovirt.engine.ui.uicommonweb.validation.AsciiNameValidation() }); getVersion().validateSelectedItem(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); getDescription().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.AsciiOrNoneValidation() }); getComment().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.SpecialAsciiI18NOrNoneValidation() }); boolean validationResult = (((getName().getIsValid()) && (getDescription().getIsValid())) && (getComment().getIsValid())) && (getVersion().getIsValid()); return validationResult; }
private void handleSelectedItemChangedEventDefinition(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (sender == (getDataCenter())) { storagePool_SelectedItemChanged(args); } else if (sender == (getVersion())) { version_SelectedItemChanged(args); } else if (sender == (getClusterPolicy())) { clusterPolicyChanged(); } else if (sender == (getCPU())) { CPU_SelectedItemChanged(args); } else if (sender == (getArchitecture())) { architectureSelectedItemChanged(args); } else if (sender == (getMacPoolListModel())) { getMacPoolModel().setEntity(getMacPoolListModel().getSelectedItem()); } }	private void handleSelectedItemChangedEventDefinition(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (sender == (getDataCenter())) { storagePool_SelectedItemChanged(args); } else if (sender == (getVersion())) { version_SelectedItemChanged(args); } else if (sender == (getClusterPolicy())) { clusterPolicyChanged(); } else if (sender == (getCPU())) { CPU_SelectedItemChanged(args); } else if (sender == (getArchitecture())) { architectureSelectedItemChanged(args); } else if (sender == (getMacPoolListModel())) { getMacPoolModel().setEntity(getMacPoolListModel().getSelectedItem()); } else if (sender == (getMigrationPolicies())) { migrationPoliciesChanged(); } }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getStoragePoolDao(); existingPool = dao.get(new org.ovirt.engine.core.compat.Guid("6d849ebf-755f-4552-ad09-9a090cda105d")); existingPool.setStatus(StoragePoolStatus.Up); vds = new org.ovirt.engine.core.compat.Guid("afce7a39-8e8c-4819-ba9c-796d316592e6"); vdsGroup = new org.ovirt.engine.core.compat.Guid("b399944a-81ab-4ec5-8266-e19ba7c3c9d1"); storageDomain = new org.ovirt.engine.core.compat.Guid("72e3a666-89e1-4005-a7ca-f7548004a9ab"); newPool = new org.ovirt.engine.core.common.businessentities.StoragePool(); newPool.setName("newPoolDude"); newPool.setCompatibilityVersion(new org.ovirt.engine.core.compat.Version("3.0")); }	@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getStoragePoolDao(); existingPool = dao.get(new org.ovirt.engine.core.compat.Guid("6d849ebf-755f-4552-ad09-9a090cda105d")); existingPool.setStatus(StoragePoolStatus.Up); vds = new org.ovirt.engine.core.compat.Guid("afce7a39-8e8c-4819-ba9c-796d316592e6"); cluster = new org.ovirt.engine.core.compat.Guid("b399944a-81ab-4ec5-8266-e19ba7c3c9d1"); storageDomain = new org.ovirt.engine.core.compat.Guid("72e3a666-89e1-4005-a7ca-f7548004a9ab"); newPool = new org.ovirt.engine.core.common.businessentities.StoragePool(); newPool.setName("newPoolDude"); newPool.setCompatibilityVersion(org.ovirt.engine.core.compat.Version.getLast()); }
public org.ovirt.engine.core.bll.ValidationResult validateMacAddress(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VmNic> vmNics, org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy macPool) { int freeMacs = 0; for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : vmNics) { if (!(org.apache.commons.lang.StringUtils.isEmpty(iface.getMacAddress()))) { if (!(org.ovirt.engine.core.bll.validator.VmNicMacsUtils.VALIDATE_MAC_ADDRESS.matcher(iface.getMacAddress()).matches())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_NETWORK_INTERFACE_MAC_INVALID, java.lang.String.format("$IfaceName %1$s", iface.getName()), java.lang.String.format("$MacAddress %1$s", iface.getMacAddress())); } } else { freeMacs++; } } if ((freeMacs > 0) && (!((macPool.getAvailableMacsCount()) >= freeMacs))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult validateMacAddress(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VmNic> vmNics, org.ovirt.engine.core.bll.network.macpool.MacPool macPool) { int freeMacs = 0; for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : vmNics) { if (!(org.apache.commons.lang.StringUtils.isEmpty(iface.getMacAddress()))) { if (!(org.ovirt.engine.core.bll.validator.VmNicMacsUtils.VALIDATE_MAC_ADDRESS.matcher(iface.getMacAddress()).matches())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_NETWORK_INTERFACE_MAC_INVALID, java.lang.String.format("$IfaceName %1$s", iface.getName()), java.lang.String.format("$MacAddress %1$s", iface.getMacAddress())); } } else { freeMacs++; } } if ((freeMacs > 0) && (!((macPool.getAvailableMacsCount()) >= freeMacs))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public org.ovirt.engine.core.bll.ValidationResult validateThereIsEnoughOfFreeMacs(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VmNic> vmNics, org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy macPool) { long requiredMacs = streamOfFilteredNics(vmNics, true).count(); boolean notEnoughOfMacs = (requiredMacs > 0) && ((macPool.getAvailableMacsCount()) < requiredMacs); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES).when(notEnoughOfMacs); }	public org.ovirt.engine.core.bll.ValidationResult validateThereIsEnoughOfFreeMacs(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VmNic> vmNics, org.ovirt.engine.core.bll.network.macpool.MacPool macPool) { long requiredMacs = streamOfFilteredNics(vmNics, true).count(); boolean notEnoughOfMacs = (requiredMacs > 0) && ((macPool.getAvailableMacsCount()) < requiredMacs); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES).when(notEnoughOfMacs); }
@java.lang.Override protected void onFetchVms() { logBuilder = new java.lang.StringBuilder(java.lang.String.format("Poll %s:", vdsManager.getVdsId())); super.onFetchVms(); logBuilder.append(java.lang.String.format("(%d VMs)", vmsCounter)); org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher.log.info(logBuilder.toString()); }	@java.lang.Override protected void onFetchVms() { logBuilder = new java.lang.StringBuilder(java.lang.String.format("Poll %s:", vdsManager.getVdsId())); super.onFetchVms(); logBuilder.append(java.lang.String.format("(%d VMs)", changedVms.size())); org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher.log.info(logBuilder.toString()); }
@java.lang.Override protected void gatherChangedVms(org.ovirt.engine.core.common.businessentities.VM dbVm, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData vdsmVm) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, vdsmVm)); <START_MOD>logBuilder.append(java.lang.String.format( %s:%s vdsmVm.getVmDynamic().getId().toString().substring(0, 8), vdsmVm.getVmDynamic().getStatus())); ++(vmsCounter); <END_MOD>}	@java.lang.Override protected void gatherChangedVms(org.ovirt.engine.core.common.businessentities.VM dbVm, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData vdsmVm) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, vdsmVm)); logBuilder.append(java.lang.String.format(" %s:%s", vdsmVm.getVmDynamic().getId().toString().substring(0, 8), vdsmVm.getVmDynamic().getStatus())); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DataCenter.class, to = org.ovirt.engine.core.common.businessentities.StoragePool.class) public static org.ovirt.engine.core.common.businessentities.StoragePool map(org.ovirt.engine.api.model.DataCenter model, org.ovirt.engine.core.common.businessentities.StoragePool template) { org.ovirt.engine.core.common.businessentities.StoragePool entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.StoragePool(); if (model.isSetId()) { entity.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if (model.isSetName()) { entity.setName(model.getName()); } if (model.isSetDescription()) { entity.setdescription(model.getDescription()); } if (model.isSetComment()) { entity.setComment(model.getComment()); } if (model.isSetLocal()) { entity.setIsLocal(model.isLocal()); } if (model.isSetStorageFormat()) { org.ovirt.engine.api.restapi.model.StorageFormat storageFormat = org.ovirt.engine.api.restapi.model.StorageFormat.fromValue(model.getStorageFormat()); if (storageFormat != null) { entity.setStoragePoolFormatType(org.ovirt.engine.api.restapi.types.StorageFormatMapper.map(storageFormat, null)); } } if (((model.isSetVersion()) && ((model.getVersion().getMajor()) != null)) && ((model.getVersion().getMinor()) != null)) { entity.setCompatibilityVersion(new org.ovirt.engine.core.compat.Version(model.getVersion().getMajor(), model.getVersion().getMinor())); } if (<START_MOD>model.isSetQuotaMode()) { entity.setQuotaEnforcementType<END_MOD>(org.ovirt.engine.api.restapi.types.DataCenterMapper.map(org.ovirt.engine.api.model.QuotaModeType.fromValue(model.getQuotaMode()))); } return entity; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DataCenter.class, to = org.ovirt.engine.core.common.businessentities.StoragePool.class) public static org.ovirt.engine.core.common.businessentities.StoragePool map(org.ovirt.engine.api.model.DataCenter model, org.ovirt.engine.core.common.businessentities.StoragePool template) { org.ovirt.engine.core.common.businessentities.StoragePool entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.StoragePool(); if (model.isSetId()) { entity.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if (model.isSetName()) { entity.setName(model.getName()); } if (model.isSetDescription()) { entity.setdescription(model.getDescription()); } if (model.isSetComment()) { entity.setComment(model.getComment()); } if (model.isSetLocal()) { entity.setIsLocal(model.isLocal()); } if (model.isSetStorageFormat()) { entity.setStoragePoolFormatType(org.ovirt.engine.api.restapi.types.StorageFormatMapper.map(model.getStorageFormat(), null)); } if (((model.isSetVersion()) && ((model.getVersion().getMajor()) != null)) && ((model.getVersion().getMinor()) != null)) { entity.setCompatibilityVersion(org.ovirt.engine.api.restapi.types.VersionMapper.map(model.getVersion())); } if ((model.isSetMacPool()) && (model.getMacPool().isSetId())) { entity.setMacPoolId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getMacPool().getId())); } if (model.isSetQuotaMode()) { entity.setQuotaEnforcementType(org.ovirt.engine.api.restapi.types.DataCenterMapper.map(model.getQuotaMode())); } return entity; }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.DataCenter model, org.ovirt.engine.api.model.DataCenter transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getComment(), transform.getComment()); assertEquals(model.isLocal(), transform.isLocal()); assertEquals(model.getStorageFormat(), transform.getStorageFormat()); assertEquals(model.getQuotaMode(), transform.getQuotaMode()); }	@java.lang.Override protected void verify(org.ovirt.engine.api.model.DataCenter model, org.ovirt.engine.api.model.DataCenter transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getComment(), transform.getComment()); assertEquals(model.isLocal(), transform.isLocal()); assertEquals(model.getStorageFormat(), transform.getStorageFormat()); assertEquals(model.getMacPool().getId(), transform.getMacPool().getId()); assertEquals(model.getQuotaMode(), transform.getQuotaMode()); }
private void dataCenterQueryResult(org.ovirt.engine.core.common.businessentities.StoragePool storagePool) { final java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(storagePool.getId()); final java.util.Set<org.ovirt.engine.core.compat.Guid> macPoolIds = clusters.stream().map(Cluster::getMacPoolId).collect(java.util.stream.Collectors.toSet()); storagePool.setMacPoolId((macPoolIds.<START_MOD>isEmpty<END_MOD>() ? null : macPoolIds.iterator().next())); }	private void dataCenterQueryResult(org.ovirt.engine.core.common.businessentities.StoragePool storagePool) { final java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(storagePool.getId()); final java.util.Set<org.ovirt.engine.core.compat.Guid> macPoolIds = clusters.stream().map(Cluster::getMacPoolId).collect(java.util.stream.Collectors.toSet()); storagePool.setMacPoolId(((macPoolIds.size()) != 1 ? null : macPoolIds.iterator().next())); }
private void initValues() { <START_MOD>if ((networkAttachment) == null) { return; } <END_MOD>boolean newAttachment = (<START_MOD>networkAttachment.getId()) ==<END_MOD> null<START_MOD>; boolean syncedNetwork = ((networkAttachment.getReportedConfigurations<END_MOD>()) == null)<START_MOD> ||<END_MOD> (networkAttachment.getReportedConfigurations().isNetworkInSync()); boolean shouldBeSyncedNetwork = (!syncedNetwork) && (java.lang.Boolean.TRUE.equals(getIsToSync().getEntity())); if ((newAttachment || syncedNetwork) || shouldBeSyncedNetwork) { syncWith(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromNetworkAttachmentForModel(networkAttachment, networkQos, nic)); } else { syncWith(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromNic(nic)); } }	private void initValues() { if ((networkAttachment) == null) { return; } boolean newAttachment = (networkAttachment.getId()) == null; boolean attachmentNotReportedByTheEngine = (networkAttachment.getReportedConfigurations()) == null; boolean syncedNetwork = attachmentNotReportedByTheEngine || (networkAttachment.getReportedConfigurations().isNetworkInSync()); boolean syncRequestedByUser = (!syncedNetwork) && (java.lang.Boolean.TRUE.equals(getIsToSync().getEntity())); if ((newAttachment || syncedNetwork) || syncRequestedByUser) { syncWith(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromNetworkAttachmentForModel(networkAttachment, networkQos, nic)); } else { syncWith(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromNic(nic)); } }
@java.lang.Override public org.ovirt.engine.api.resource.LabelsResource getLabelsResource() { return inject(new org.ovirt.engine.api.restapi.resource.BackendLabelsResource()); }	@java.lang.Override public org.ovirt.engine.api.resource.AffinityLabelsResource getAffinityLabelsResource() { return inject(new org.ovirt.engine.api.restapi.resource.BackendAffinityLabelsResource()); }
public static org.jboss.shrinkwrap.api.spec.JavaArchive createDeployment(java.lang.Class<?>[] classes) { final java.lang.Class<?>[] defaultClasses = new java.lang.Class<?>[]{ org.ovirt.engine.arquillian.database.DataSourceFactory.class, org.ovirt.engine.arquillian.database.TransactionRollbackRule.class, org.ovirt.engine.core.bll.scheduling.CommonTestMocks.class, org.ovirt.engine.core.di.Injector.class, org.ovirt.engine.core.bll.aaa.SessionDataContainer.class, org.ovirt.engine.core.dal.dbbroker.DbFacade.class }; final java.util.List<java.lang.Class<?>> classList = new java.util.ArrayList<>(); classList.addAll(java.util.Arrays.asList(defaultClasses)); if ((classes != null) && ((classes.length) > 0)) { classList.addAll(java.util.Arrays.asList(classes)); } <START_MOD>return<END_MOD> org.jboss.shrinkwrap.api.ShrinkWrap.create(org.jboss.shrinkwrap.api.spec.JavaArchive.class).addPackages(true, org.ovirt.engine.core.dao.Dao.class.getPackage()).addPackage(org.ovirt.engine.core.bll.builder.AbstractBuilder.class.getPackage()).addPackage(org.ovirt.engine.arquillian.database.TransactionRollbackRule.class.getPackage()).addClasses(classList.toArray(new java.lang.Class<?>[classList.size()])).addAsManifestResource(EmptyAsset.INSTANCE, org.jboss.shrinkwrap.api.ArchivePaths.create("beans.xml")); }	public static org.jboss.shrinkwrap.api.spec.JavaArchive createDeployment(java.lang.Class<?>[] classes) { final java.lang.Class<?>[] defaultClasses = new java.lang.Class<?>[]{ org.ovirt.engine.arquillian.database.DataSourceFactory.class, org.ovirt.engine.arquillian.database.TransactionRollbackRule.class, org.ovirt.engine.core.bll.scheduling.CommonTestMocks.class, org.ovirt.engine.core.di.Injector.class, org.ovirt.engine.core.bll.aaa.SessionDataContainer.class, org.ovirt.engine.core.dal.dbbroker.DbFacade.class }; final java.util.List<java.lang.Class<?>> classList = new java.util.ArrayList<>(); classList.addAll(java.util.Arrays.asList(defaultClasses)); if ((classes != null) && ((classes.length) > 0)) { classList.addAll(java.util.Arrays.asList(classes)); } return org.jboss.shrinkwrap.api.ShrinkWrap.create(org.jboss.shrinkwrap.api.spec.JavaArchive.class).addPackages(true, org.ovirt.engine.core.dao.Dao.class.getPackage()).addPackage(org.ovirt.engine.core.builder.AbstractBuilder.class.getPackage()).addPackage(org.ovirt.engine.arquillian.database.TransactionRollbackRule.class.getPackage()).addClasses(classList.toArray(new java.lang.Class<?>[classList.size()])).addAsManifestResource(EmptyAsset.INSTANCE, org.jboss.shrinkwrap.api.ArchivePaths.create("beans.xml")); }
@org.junit.Test public void shouldHaveAccesToMockedContainerTransactionManager() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Object>() { @java.lang.Override public java.lang.Object runInTransaction() { return null; } }); }	@org.junit.Test public void shouldHaveAccessToMockedContainerTransactionManager() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> null); }
public static java.lang.Class[] dependentClasses() { return null; }	public static org.jboss.shrinkwrap.api.spec.JavaArchive createDeployment() { return org.ovirt.engine.arquillian.TransactionalTestBase.createDeployment(new java.util.ArrayList<java.lang.Class<?>>()); }
@org.junit.Before public void setUp() { super.setUp(); vmBuilder.id(org.ovirt.engine.core.compat.Guid.createGuidFromString("0fe4bc81-5999-4ab6-80f8-7a4a2d4bfacd")).vdsGroup(vdsGroupBuilder.reset().persist()).persist(); }	@org.junit.Before public void setUp() { vmBuilder.id(VM1_GUID).cluster(clusterBuilder.reset().persist()).persist(); }
@org.junit.Test(expected = org.springframework.dao.DuplicateKeyException.class) public void shouldFailOnExistingEntity() { vmBuilder.id(org.ovirt.engine.core.compat.Guid.createGuidFromString("0fe4bc81-5999-4ab6-80f8-7a4a2d4bfacd")).persist(); }	@org.junit.Test(expected = org.springframework.dao.DuplicateKeyException.class) public void shouldFailOnExistingEntity() { vmBuilder.id(VM1_GUID).persist(); }
@org.junit.Test public void shouldRollbackAfterPersisting() { org.ovirt.engine.core.common.businessentities.VM vm = vmBuilder.id(org.ovirt.engine.core.compat.Guid.createGuidFromString("0ff4bd81-5899-4ab6-80f8-7a4a2d4bfacd")).persist(); vm = vmDao.get(vm.getId()); vm.getId(); }	@org.junit.Test public void shouldRollbackAfterPersistingPart1() { vmBuilder.id(VM2_GUID).persist(); }
@org.junit.Before public void setUp() { defaultCluster = vdsGroupBuilder.persist(); defaultHost = vdsBuilder.vdsGroup(defaultCluster).persist(); defaultVM = vmBuilder.host(defaultHost).up().persist(); }	@org.junit.Before public void setUpDefaultEntities() { defaultCluster = clusterBuilder.persist(); defaultHost = vdsBuilder.cluster(defaultCluster).persist(); defaultVM = vmBuilder.host(defaultHost).up().persist(); }
@org.jboss.arquillian.container.test.api.Deployment public static org.jboss.shrinkwrap.api.spec.JavaArchive createDeployment() { org.jboss.shrinkwrap.api.spec.JavaArchive archive = org.jboss.shrinkwrap.api.ShrinkWrap.create(org.jboss.shrinkwrap.api.spec.JavaArchive.class).addPackage(org.ovirt.engine.core.dao.Dao.class.getPackage()).addPackage(org.ovirt.engine.core.bll.builder.AbstractBuilder.class.getPackage()).addPackage(org.ovirt.engine.arquillian.database.TransactionRollbackRule.class.getPackage()).addClasses(org.ovirt.engine.arquillian.database.DataSourceFactory.class, org.ovirt.engine.arquillian.database.TransactionRollbackRule.class).addAsManifestResource(EmptyAsset.INSTANCE, org.jboss.shrinkwrap.api.ArchivePaths.create("beans.xml")); if ((org.ovirt.engine.arquillian.TransactionalTestBase.dependentClasses()) != null) { archive.addClasses(org.ovirt.engine.arquillian.TransactionalTestBase.dependentClasses()); } return archive; }	public static org.jboss.shrinkwrap.api.spec.JavaArchive createDeployment(java.util.List<java.lang.Class<?>> classes) { return org.ovirt.engine.arquillian.TransactionalTestBase.createDeployment(classes.toArray(new java.lang.Class<?>[classes.size()])); }
private java.lang.String buildMetadataDictionaryForVm(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> AllVmImages = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(vm.getDiskList(), false, true, true); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : filteredDisks) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getAllImageSnapshots(diskImage.getImageId()); AllVmImages.addAll(images); <START_MOD>for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : AllVmImages) { disk.setDiskVmElements(java.util.Collections.singletonList(diskImage.getDiskVmElementForVm(vm.getId()))); <END_MOD>} <START_MOD>} <END_MOD>return ovfManager.exportVm(vm, AllVmImages, org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion(vm)); }	private java.lang.String buildMetadataDictionaryForVm(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> AllVmImages = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(vm.getDiskList(), false, true, true); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : filteredDisks) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getAllImageSnapshots(diskImage.getImageId()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : images) { disk.setDiskVmElements(java.util.Collections.singletonList(diskImage.getDiskVmElementForVm(vm.getId()))); } AllVmImages.addAll(images); } return ovfManager.exportVm(vm, AllVmImages, org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion(vm)); }
private java.lang.String buildMetadataDictionaryForVm(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> <START_MOD>allVmImages<END_MOD> = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(vm.getDiskList(), false, true, true); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : filteredDisks) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getAllImageSnapshots(diskImage.getImageId()); <START_MOD>allVmImages<END_MOD>.addAll(images); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : <START_MOD>allVmImages<END_MOD>) { disk.setDiskVmElements(java.util.Collections.singletonList(diskImage.getDiskVmElementForVm(vm.getId()))); } } return ovfManager.exportVm(vm, <START_MOD>allVmImages<END_MOD>, org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion(vm)); }	private java.lang.String buildMetadataDictionaryForVm(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allVmImages = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(vm.getDiskList(), false, true, true); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : filteredDisks) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getAllImageSnapshots(diskImage.getImageId()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : images) { disk.setDiskVmElements(java.util.Collections.singletonList(diskImage.getDiskVmElementForVm(vm.getId()))); } allVmImages.addAll(images); } return ovfManager.exportVm(vm, allVmImages, org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion(vm)); }
private boolean isRemoveAutoGeneratedSnapshotRequired() { return ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getStage()) == (org.ovirt.engine.core.common.action.LiveMigrateVmDisksParameters.LiveMigrateStage.LIVE_MIGRATE_DISK_EXEC_START)) || ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getStage()) == (org.ovirt.engine.core.common.action.LiveMigrateVmDisksParameters.LiveMigrateStage.LIVE_MIGRATE_DISK_EXEC_COMPLETED)); }	private boolean isRemoveAutoGeneratedSnapshotRequired() { return ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getStage()) != (org.ovirt.engine.core.common.action.LiveMigrateVmDisksParameters.LiveMigrateStage.CREATE_SNAPSHOT)) && ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getStage()) != (org.ovirt.engine.core.common.action.LiveMigrateVmDisksParameters.LiveMigrateStage.AUTO_GENERATED_SNAPSHOT_REMOVE_END)); }
@java.lang.Override public boolean ignoreChildCommandFailure() { return (org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getStage()) != (org.ovirt.engine.core.common.action.LiveMigrateVmDisksParameters.LiveMigrateStage.CREATE_SNAPSHOT); }	@java.lang.Override public boolean ignoreChildCommandFailure() { return isRemoveAutoGeneratedSnapshotRequired(); }
@java.lang.Override protected void onFetchVms() { <START_MOD>super.onFetchVms();<END_MOD> <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.vdsbroker.monitoring.VmsStatisticsFetcher.log.info<END_MOD>(java.lang.String.format( %<START_MOD>d VMs from %<END_MOD>s<START_MOD> changedVms.size(),<END_MOD> vdsManager.getVdsId())); org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher.log.<START_MOD>debug<END_MOD>(logBuilder.toString()); }	@java.lang.Override protected void onFetchVms() { if (org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher.log.isDebugEnabled()) { logBuilder = new java.lang.StringBuilder(); } super.onFetchVms(); org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher.log.info("Fetched {} VMs from VDS '{}'", vdsmVms.size(), vdsManager.getVdsId()); if (org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher.log.isDebugEnabled()) { org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher.log.debug(logBuilder.toString()); } }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VM mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.VM entity = new org.ovirt.engine.core.common.businessentities.VM(); entity.setStaticData(org.ovirt.engine.core.dao.VmStaticDaoImpl.getRowMapper().mapRow(rs, rowNum)); entity.setDynamicData(org.ovirt.engine.core.dao.VmDynamicDaoImpl.getRowMapper().mapRow(rs, rowNum)); entity.setStatisticsData(org.ovirt.engine.core.dao.VmStatisticsDaoImpl.getRowMapper().mapRow(rs, rowNum)); return entity; }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.VM mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.VM entity = new org.ovirt.engine.core.common.businessentities.VM(); entity.setId(getGuidDefaultEmpty(rs, "vm_guid")); entity.setName(rs.getString("vm_name")); entity.setOrigin(org.ovirt.engine.core.common.businessentities.OriginType.forValue(rs.getInt("origin"))); entity.setAutoStartup(rs.getBoolean("auto_startup")); entity.setVmMemSizeMb(rs.getInt("mem_size_mb")); entity.setMinAllocatedMem(rs.getInt("min_allocated_mem")); entity.setNumOfSockets(rs.getInt("num_of_sockets")); entity.setCpuPerSocket(rs.getInt("cpu_per_socket")); entity.setThreadsPerCpu(rs.getInt("threads_per_cpu")); entity.setDynamicData(org.ovirt.engine.core.dao.VmDynamicDaoImpl.getRowMapper().mapRow(rs, rowNum)); entity.setStatisticsData(org.ovirt.engine.core.dao.VmStatisticsDaoImpl.getRowMapper().mapRow(rs, rowNum)); return entity; }
private org.ovirt.engine.core.common.businessentities.network.NetworkAttachment createAttachmentWhenAttachingTo(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface targetNic) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(targetNic, networkModel.getNetwork(), org.ovirt.engine.core.common.utils.NetworkCommonUtils.createDefaultIpConfiguration()); org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkParameters netParams = networkModel.getSetupModel().getNetworkToLastDetachParams().get(networkModel.getName()); if (netParams != null) { applyOnAttachmentParamsFrom(netParams, networkAttachment); } else { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicToTakeParamsFrom = null; if (networkModel.hasVlan()) { nicToTakeParamsFrom = getPotentialVlanDevice(targetNic); } else { nicToTakeParamsFrom = targetNic; } if (<START_MOD>(<END_MOD>nicToTakeParamsFrom != null) <START_MOD>&& ((nicToTakeParamsFrom.getId()) != null)) <END_MOD>{ applyOnAttachmentParamsFrom(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromNic(nicToTakeParamsFrom), networkAttachment); } fixBootProtocolOfMgmtNetworkIfNeeded(networkAttachment); } return networkAttachment; }	private org.ovirt.engine.core.common.businessentities.network.NetworkAttachment createAttachmentWhenAttachingTo(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface targetNic) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(targetNic, networkModel.getNetwork(), org.ovirt.engine.core.common.utils.NetworkCommonUtils.createDefaultIpConfiguration()); org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkParameters netParams = networkModel.getSetupModel().getNetworkToLastDetachParams().get(networkModel.getName()); if (netParams != null) { applyOnAttachmentParamsFrom(netParams, networkAttachment); } else { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicToTakeParamsFrom = null; if (networkModel.hasVlan()) { nicToTakeParamsFrom = getPotentialVlanDevice(targetNic); } else { nicToTakeParamsFrom = targetNic; } boolean newlyCreatedBond = (nicToTakeParamsFrom != null) && ((nicToTakeParamsFrom.getId()) == null); if ((nicToTakeParamsFrom != null) && (!newlyCreatedBond)) { applyOnAttachmentParamsFrom(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromNic(nicToTakeParamsFrom), networkAttachment); } fixBootProtocolOfMgmtNetworkIfNeeded(networkAttachment); } return networkAttachment; }
protected <T extends org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionWeightPolicyUnit> T mockPolicyUnit(java.lang.Class<T> unitType) throws java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException { return spy(unitType.getConstructor(org.ovirt.engine.core.common.scheduling.PolicyUnit.class, org.ovirt.engine.core.bll.scheduling.pending.PendingResourceManager.class).newInstance(null, new org.ovirt.engine.core.bll.scheduling.pending.PendingResourceManager())); }	protected <T extends org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionWeightPolicyUnit> T mockPolicyUnit(java.lang.Class<T> unitType) throws java.lang.Exception { return spy(unitType.getConstructor(org.ovirt.engine.core.common.scheduling.PolicyUnit.class, org.ovirt.engine.core.bll.scheduling.pending.PendingResourceManager.class).newInstance(null, new org.ovirt.engine.core.bll.scheduling.pending.PendingResourceManager())); }
@org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtil.class, <START_MOD>mockManagementNetworkUtil); managementNetwork.setId(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.MANAGEMENT_NETWORK_ID); org.mockito.Mockito.when(mockManagementNetworkUtil.getManagementNetwork(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.CLUSTER_ID)).thenReturn(managementNetwork<END_MOD>); nic.setNetworkName(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NETWORK_NAME1); <START_MOD>nic.setName(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_NAME); host = new <END_MOD>org.ovirt.engine.core.common.businessentities.VDS<START_MOD>(); host.setClusterId(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.CLUSTER_ID); host.setClusterCompatibilityVersion(Version.v4_0); host.getInterfaces().add(nic); underTest<END_MOD> = new org.ovirt.engine.core.bll.network.NetworkConfigurator(<START_MOD>host<END_MOD>, org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.COMMAND_CONTEXT); }	@org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtil.class, mockManagementNetworkUtil); managementNetwork.setId(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.MANAGEMENT_NETWORK_ID); when(mockManagementNetworkUtil.getManagementNetwork(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.CLUSTER_ID)).thenReturn(managementNetwork); nic.setNetworkName(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NETWORK_NAME1); nic.setName(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_NAME); host = new org.ovirt.engine.core.common.businessentities.VDS(); host.setClusterId(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.CLUSTER_ID); host.setClusterCompatibilityVersion(Version.v4_0); host.getInterfaces().add(nic); underTest = new org.ovirt.engine.core.bll.network.NetworkConfigurator(host, org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.COMMAND_CONTEXT); }
org.ovirt.engine.core.common.businessentities.VM getHostedEngine();	org.ovirt.engine.core.common.businessentities.VM getHostedEngineVm();
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VM getHostedEngine() { return getCallsHandler().executeRead("GetHostedEngineVm", org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance, getCustomMapSqlParameterSource()); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.VM getHostedEngineVm() { return getCallsHandler().executeRead("GetHostedEngineVm", org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance, getCustomMapSqlParameterSource()); }
@org.junit.Test public void basicTestWith0ScoreHost() throws java.lang.Exception { parameters.put(HostedEngineMemoryReservationFilterPolicyUnit.SPARES_COUNT, "3"); hostedEngine.setVmMemSizeMb(7000); hosts.get(2).setHighlyAvailableScore(0); hosts.get(3).setPhysicalMemMb(2048); hosts.get(4).setPhysicalMemMb(2048); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = uut.filter(hosts, vm, parameters, messages); assertEquals(4, result.size()); }	@org.junit.Test public void testWith0ScoreHost() throws java.lang.Exception { parameters.put(PolicyUnitParameter.HE_SPARES_COUNT.getDbName(), "3"); hostedEngine.setVmMemSizeMb(7000); hosts.get(2).setHighlyAvailableScore(0); hosts.get(3).setPhysicalMemMb(2048); hosts.get(4).setPhysicalMemMb(2048); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = policyUnit.filter(cluster, hosts, vm, parameters, messages); assertEquals(4, result.size()); }
@org.junit.Test public void basicTestWithoutEnoughSparesMemory() throws java.lang.Exception { parameters.put(HostedEngineMemoryReservationFilterPolicyUnit.SPARES_COUNT, "3"); hostedEngine.setVmMemSizeMb(7000); hosts.get(3).setPhysicalMemMb(2048); hosts.get(4).setPhysicalMemMb(2048); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = uut.filter(hosts, vm, parameters, messages); assertEquals(3, result.size()); }	@org.junit.Test public void testWithoutEnoughSparesMemory() throws java.lang.Exception { parameters.put(PolicyUnitParameter.HE_SPARES_COUNT.getDbName(), "3"); hostedEngine.setVmMemSizeMb(7000); hosts.get(3).setPhysicalMemMb(2048); hosts.get(4).setPhysicalMemMb(2048); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = policyUnit.filter(cluster, hosts, vm, parameters, messages); assertEquals(3, result.size()); }
@org.junit.Test public void basicTestWith0ScoreHostAndEnoughMEmoryForTwo() throws java.lang.Exception { parameters.put(HostedEngineMemoryReservationFilterPolicyUnit.SPARES_COUNT, "3"); hostedEngine.setVmMemSizeMb(5000); hosts.get(2).setHighlyAvailableScore(0); hosts.get(3).setPhysicalMemMb(2048); hosts.get(4).setPhysicalMemMb(2048); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = uut.filter(hosts, vm, parameters, messages); assertEquals(5, result.size()); }	@org.junit.Test public void testWith0ScoreHostAndEnoughMemoryForTwo() throws java.lang.Exception { parameters.put(PolicyUnitParameter.HE_SPARES_COUNT.getDbName(), "3"); hostedEngine.setVmMemSizeMb(5000); hosts.get(2).setHighlyAvailableScore(0); hosts.get(3).setPhysicalMemMb(2048); hosts.get(4).setPhysicalMemMb(2048); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = policyUnit.filter(cluster, hosts, vm, parameters, messages); assertEquals(5, result.size()); }
@org.junit.Test public void differentCluster() throws java.lang.Exception { parameters.put(HostedEngineMemoryReservationFilterPolicyUnit.SPARES_COUNT, "5"); hostedEngine.setVmMemSizeMb(7000); hostedEngine.setVdsGroupId(Guid.SYSTEM); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = uut.filter(hosts, vm, parameters, messages); assertEquals(5, result.size()); }	@org.junit.Test public void testDifferentCluster() throws java.lang.Exception { parameters.put(PolicyUnitParameter.HE_SPARES_COUNT.getDbName(), "5"); hostedEngine.setVmMemSizeMb(7000); hostedEngine.setClusterId(Guid.SYSTEM); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = policyUnit.filter(cluster, hosts, vm, parameters, messages); assertEquals(5, result.size()); }
@org.junit.Test public void basicTestWithoutEnoughSpares() throws java.lang.Exception { parameters.put(HostedEngineMemoryReservationFilterPolicyUnit.SPARES_COUNT, "6"); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = uut.filter(hosts, vm, parameters, messages); assertEquals(5, result.size()); }	@org.junit.Test public void testWithoutEnoughSpares() throws java.lang.Exception { parameters.put(PolicyUnitParameter.HE_SPARES_COUNT.getDbName(), "6"); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = policyUnit.filter(cluster, hosts, vm, parameters, messages); assertEquals(5, result.size()); }
private org.ovirt.engine.core.common.businessentities.VDS prepareHost(java.lang.String name, int freeMemoryMb, boolean heEnabled, int heScore, boolean localMaintnance) { org.ovirt.engine.core.common.businessentities.VDS host = new org.ovirt.engine.core.common.businessentities.VDS(); host.setId(org.ovirt.engine.core.compat.Guid.newGuid()); host.setVdsGroupId(clusterId); host.setVdsName(name); host.setPhysicalMemMb(freeMemoryMb); host.setMemCommited(0); host.setMemShared(0L); host.setMemShared(0L); host.setGuestOverhead(64); host.setHighlyAvailableIsActive(heEnabled); host.setHighlyAvailableScore(heScore); host.setHighlyAvailableLocalMaintenance(localMaintnance); return host; }	private org.ovirt.engine.core.common.businessentities.VDS prepareHost(java.lang.String name, int freeMemoryMb, boolean heEnabled, int heScore, boolean localMaintnance) { org.ovirt.engine.core.common.businessentities.VDS host = new org.ovirt.engine.core.common.businessentities.VDS(); host.setId(org.ovirt.engine.core.compat.Guid.newGuid()); host.setClusterId(clusterId); host.setVdsName(name); host.setPhysicalMemMb(freeMemoryMb); host.setMemAvailable(((long) (freeMemoryMb))); host.setMemCommited(0); host.setMemShared(0L); host.setReservedMem(128); host.setGuestOverhead(64); host.setHighlyAvailableIsActive(heEnabled); host.setHighlyAvailableScore(heScore); host.setHighlyAvailableLocalMaintenance(localMaintnance); host.setMaxVdsMemoryOverCommit(100); return host; }
@org.junit.Test public void basicTestWithEnoughSpares() throws java.lang.Exception { parameters.put(HostedEngineMemoryReservationFilterPolicyUnit.SPARES_COUNT, "5"); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = uut.filter(hosts, vm, parameters, messages); assertEquals(5, result.size()); }	@org.junit.Test public void testWithEnoughSpares() throws java.lang.Exception { parameters.put(PolicyUnitParameter.HE_SPARES_COUNT.getDbName(), "5"); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = policyUnit.filter(cluster, hosts, vm, parameters, messages); assertEquals(5, result.size()); }
@org.junit.Test public void basicTestWithNonHEHost() throws java.lang.Exception { parameters.put(HostedEngineMemoryReservationFilterPolicyUnit.SPARES_COUNT, "3"); hostedEngine.setVmMemSizeMb(7000); hosts.get(2).setHighlyAvailableIsActive(false); hosts.get(3).setPhysicalMemMb(2048); hosts.get(4).setPhysicalMemMb(2048); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = uut.filter(hosts, vm, parameters, messages); assertEquals(4, result.size()); }	@org.junit.Test public void testWithNonHEHost() throws java.lang.Exception { parameters.put(PolicyUnitParameter.HE_SPARES_COUNT.getDbName(), "3"); hostedEngine.setVmMemSizeMb(7000); hosts.get(2).setHighlyAvailableIsActive(false); hosts.get(3).setPhysicalMemMb(2048); hosts.get(4).setPhysicalMemMb(2048); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = policyUnit.filter(cluster, hosts, vm, parameters, messages); assertEquals(4, result.size()); }
@org.junit.Test public void basicHostInMaintenance() throws java.lang.Exception { hosts.get(0).setHighlyAvailableLocalMaintenance(true); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = uut.filter(hosts, vm, parameters, messages); assertEquals(5, result.size()); }	@org.junit.Test public void testHostInMaintenance() throws java.lang.Exception { hosts.get(0).setHighlyAvailableLocalMaintenance(true); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = policyUnit.filter(cluster, hosts, vm, parameters, messages); assertEquals(5, result.size()); }
@org.junit.Before public void setUp() throws java.lang.Exception { clusterId = org.ovirt.engine.core.compat.Guid.newGuid(); pendingResourceManager = new org.ovirt.engine.core.bll.scheduling.pending.PendingResourceManager(); vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setId(org.ovirt.engine.core.compat.Guid.newGuid()); vm.setVdsGroupId(clusterId); vm.setVmMemSizeMb(1024); hosts = new java.util.ArrayList(); hosts.add(prepareHost("A", 8192, true, 2400, false)); hosts.add(prepareHost("B", 8192, true, 2400, false)); hosts.add(prepareHost("C", 8192, true, 2400, false)); hosts.add(prepareHost("D", 8192, true, 2400, false)); hosts.add(prepareHost("E", 8192, true, 2400, false)); hostedEngine = new org.ovirt.engine.core.common.businessentities.VM(); hostedEngine.setOrigin(OriginType.HOSTED_ENGINE); hostedEngine.setVmMemSizeMb(4096); hostedEngine.setId(org.ovirt.engine.core.compat.Guid.newGuid()); hostedEngine.setVdsGroupId(clusterId); hostedEngine.setRunOnVds(hosts.get(0).getId()); uut = new org.ovirt.engine.core.bll.scheduling.policyunits.HostedEngineMemoryReservationFilterPolicyUnit(null, pendingResourceManager); parameters = new java.util.HashMap<>(); parameters.put(HostedEngineMemoryReservationFilterPolicyUnit.SPARES_COUNT, "0"); messages = new org.ovirt.engine.core.common.scheduling.PerHostMessages(); when(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao()).thenReturn(vmDao); doReturn(hostedEngine).when(vmDao).getHostedEngine(); }	@org.junit.Before public void setUp() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); clusterId = org.ovirt.engine.core.compat.Guid.newGuid(); cluster.setId(clusterId); pendingResourceManager = new org.ovirt.engine.core.bll.scheduling.pending.PendingResourceManager(); vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setId(org.ovirt.engine.core.compat.Guid.newGuid()); vm.setClusterId(clusterId); vm.setVmMemSizeMb(1024); hosts = new java.util.ArrayList(); hosts.add(prepareHost("A", 8192, true, 2400, false)); hosts.add(prepareHost("B", 8192, true, 2400, false)); hosts.add(prepareHost("C", 8192, true, 2400, false)); hosts.add(prepareHost("D", 8192, true, 2400, false)); hosts.add(prepareHost("E", 8192, true, 2400, false)); hostedEngine = new org.ovirt.engine.core.common.businessentities.VM(); hostedEngine.setOrigin(OriginType.HOSTED_ENGINE); hostedEngine.setVmMemSizeMb(4096); hostedEngine.setId(org.ovirt.engine.core.compat.Guid.newGuid()); hostedEngine.setClusterId(clusterId); hostedEngine.setRunOnVds(hosts.get(0).getId()); policyUnit = new org.ovirt.engine.core.bll.scheduling.policyunits.HostedEngineMemoryReservationFilterPolicyUnit(null, pendingResourceManager); parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HE_SPARES_COUNT.getDbName(), "0"); messages = new org.ovirt.engine.core.common.scheduling.PerHostMessages(); when(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao()).thenReturn(vmDao); doReturn(hostedEngine).when(vmDao).getHostedEngineVm(); }
@org.junit.Test public void noHostedEngine() throws java.lang.Exception { parameters.put(HostedEngineMemoryReservationFilterPolicyUnit.SPARES_COUNT, "5"); hostedEngine.setVmMemSizeMb(7000); hostedEngine.setOrigin(OriginType.OVIRT); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = uut.filter(hosts, vm, parameters, messages); assertEquals(5, result.size()); }	@org.junit.Test public void testNoHostedEngine() throws java.lang.Exception { parameters.put(PolicyUnitParameter.HE_SPARES_COUNT.getDbName(), "5"); hostedEngine.setVmMemSizeMb(7000); hostedEngine.setOrigin(OriginType.OVIRT); doReturn(null).when(vmDao).getHostedEngineVm(); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = policyUnit.filter(cluster, hosts, vm, parameters, messages); assertEquals(5, result.size()); }
@org.junit.Test public void basicTestWith0ScoreHostAndSomeHaveEnoughMemoryForTwo() throws java.lang.Exception { parameters.put(HostedEngineMemoryReservationFilterPolicyUnit.SPARES_COUNT, "3"); hostedEngine.setVmMemSizeMb(5000); hosts.get(2).setHighlyAvailableScore(0); hosts.get(3).setPhysicalMemMb(7000); hosts.get(4).setPhysicalMemMb(2048); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = uut.filter(hosts, vm, parameters, messages); assertEquals(4, result.size()); }	@org.junit.Test public void testWith0ScoreHostAndSomeHaveEnoughMemoryForTwo() throws java.lang.Exception { parameters.put(PolicyUnitParameter.HE_SPARES_COUNT.getDbName(), "3"); hostedEngine.setVmMemSizeMb(5000); hosts.get(2).setHighlyAvailableScore(0); hosts.get(3).setPhysicalMemMb(6000); hosts.get(4).setPhysicalMemMb(2048); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = policyUnit.filter(cluster, hosts, vm, parameters, messages); assertEquals(4, result.size()); }
@org.junit.Test public void basicTestWithoutEnoughSparesFullMemory() throws java.lang.Exception { parameters.put(HostedEngineMemoryReservationFilterPolicyUnit.SPARES_COUNT, "5"); hostedEngine.setVmMemSizeMb(7000); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = uut.filter(hosts, vm, parameters, messages); assertEquals(1, result.size()); }	@org.junit.Test public void testWithoutEnoughSparesFullMemory() throws java.lang.Exception { parameters.put(PolicyUnitParameter.HE_SPARES_COUNT.getDbName(), "5"); hostedEngine.setVmMemSizeMb(7000); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = policyUnit.filter(cluster, hosts, vm, parameters, messages); assertEquals(1, result.size()); assertEquals("A", result.get(0).getName()); }
@org.junit.Test public void basicTest() throws java.lang.Exception { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = uut.filter(hosts, vm, parameters, messages); assertEquals(5, result.size()); }	@org.junit.Test public void testNoHosts() throws java.lang.Exception { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = policyUnit.filter(cluster, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>(), vm, parameters, messages); assertEquals(0, result.size()); }
@org.junit.Test public void basicTestWithEnoughSparesMemory() throws java.lang.Exception { parameters.put(HostedEngineMemoryReservationFilterPolicyUnit.SPARES_COUNT, "2"); hostedEngine.setVmMemSizeMb(7000); hosts.get(3).setPhysicalMemMb(2048); hosts.get(4).setPhysicalMemMb(2048); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = uut.filter(hosts, vm, parameters, messages); assertEquals(5, result.size()); }	@org.junit.Test public void testWithEnoughSparesMemory() throws java.lang.Exception { parameters.put(PolicyUnitParameter.HE_SPARES_COUNT.getDbName(), "1"); hostedEngine.setVmMemSizeMb(7000); hosts.get(3).setPhysicalMemMb(2048); hosts.get(4).setPhysicalMemMb(2048); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = policyUnit.filter(cluster, hosts, vm, parameters, messages); assertEquals(5, result.size()); }
@org.junit.Test public void testGetHighUtilizationForAllCores() throws java.lang.Exception { org.ovirt.engine.core.bll.scheduling.policyunits.CPUPolicyUnit policyUnit = new org.ovirt.engine.core.bll.scheduling.policyunits.CPUPolicyUnit(null, null); assertEquals(90, policyUnit.getHighUtilizationForAllCores(90, 1)); assertEquals(100, policyUnit.getHighUtilizationForAllCores(100, 1)); assertEquals(100, policyUnit.getHighUtilizationForAllCores(100, 100)); assertEquals(75, policyUnit.getHighUtilizationForAllCores(50, 2)); }	@org.junit.Test public void shouldKeepHostsWithEnoughCpuCores() { cluster.setCountThreadsAsCores(false); vdsWithCores.setCpuCores(4); final java.util.List<org.ovirt.engine.core.common.businessentities.VDS> candidates = filter(); assertThat(candidates).contains(vdsWithCores); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getOverUtilizedCPUHosts(java.util.Collection<org.ovirt.engine.core.common.businessentities.VDS> relevantHosts, final int highUtilization, final int cpuOverCommitDurationMinutes) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> overUtilizedHosts = org.ovirt.engine.core.utils.linq.LinqUtils.filter(relevantHosts, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.VDS>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.VDS p) { return (((((p.getUsageCpuPercent()) + (<START_MOD>org.ovirt.engine.core.bll.scheduling.policyunits.CpuAndMemoryBalancingPolicyUnit.<END_MOD>calcSpmCpuConsumption(p))) >= highUtilization) && ((p.getCpuOverCommitTimestamp()) != null)) && (((getTime().getTime()) - (p.getCpuOverCommitTimestamp().getTime())) >= (java.util.concurrent.TimeUnit.MINUTES.toMillis(cpuOverCommitDurationMinutes)))) && ((p.getVmCount()) > 0); } }); if ((overUtilizedHosts.size()) > 1) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getVdsGroupDao().get(overUtilizedHosts.get(0).getVdsGroupId()); java.util.Collections.sort(overUtilizedHosts, new org.apache.commons.collections.comparators.ReverseComparator(new org.ovirt.engine.core.bll.scheduling.utils.VdsCpuUsageComparator(((cluster != null) && (cluster.getCountThreadsAsCores()))))); } return overUtilizedHosts; }	protected java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getOverUtilizedCPUHosts(java.util.Collection<org.ovirt.engine.core.common.businessentities.VDS> relevantHosts, final int highUtilization, final int cpuOverCommitDurationMinutes) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> overUtilizedHosts = relevantHosts.stream().filter(( p) -> (((((p.getUsageCpuPercent()) + (calcSpmCpuConsumption(p))) >= highUtilization) && ((p.getCpuOverCommitTimestamp()) != null)) && (((getTime().getTime()) - (p.getCpuOverCommitTimestamp().getTime())) >= (TimeUnit.MINUTES.toMillis(cpuOverCommitDurationMinutes)))) && ((p.getVmCount()) > 0)).collect(java.util.stream.Collectors.toList()); if ((overUtilizedHosts.size()) > 1) { org.ovirt.engine.core.common.businessentities.Cluster cluster = getClusterDao().get(overUtilizedHosts.get(0).getClusterId()); java.util.Collections.sort(overUtilizedHosts, new org.ovirt.engine.core.bll.scheduling.utils.VdsCpuUsageComparator(((cluster != null) && (cluster.getCountThreadsAsCores()))).reversed()); } return overUtilizedHosts; }
protected java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getUnderUtilizedCPUHosts(java.util.Collection<org.ovirt.engine.core.common.businessentities.VDS> relevantHosts, final int lowUtilization, final int minVmCount, final int cpuOverCommitDurationMinutes) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> underUtilizedHosts = org.ovirt.engine.core.utils.linq.LinqUtils.filter(relevantHosts, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.VDS>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.VDS p) { return ((((p.getUsageCpuPercent()) + (<START_MOD>org.ovirt.engine.core.bll.scheduling.policyunits.CpuAndMemoryBalancingPolicyUnit.<END_MOD>calcSpmCpuConsumption(p))) < lowUtilization) && ((p.getVmCount()) >= minVmCount)) && (((p.getCpuOverCommitTimestamp()) == null) || (((getTime().getTime()) - (p.getCpuOverCommitTimestamp().getTime())) < (java.util.concurrent.TimeUnit.MINUTES.toMillis(cpuOverCommitDurationMinutes)))); } }); if ((underUtilizedHosts.size()) > 1) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getVdsGroupDao().get(underUtilizedHosts.get(0).getVdsGroupId()); java.util.Collections.sort(underUtilizedHosts, new org.ovirt.engine.core.bll.scheduling.utils.VdsCpuUsageComparator(((cluster != null) && (cluster.getCountThreadsAsCores())))); } return underUtilizedHosts; }	protected java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getUnderUtilizedCPUHosts(java.util.Collection<org.ovirt.engine.core.common.businessentities.VDS> relevantHosts, final int lowUtilization, final int minVmCount, final int cpuOverCommitDurationMinutes) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> underUtilizedHosts = relevantHosts.stream().filter(( p) -> ((((p.getUsageCpuPercent()) + (calcSpmCpuConsumption(p))) < lowUtilization) && ((p.getVmCount()) >= minVmCount)) && (((p.getCpuOverCommitTimestamp()) == null) || (((getTime().getTime()) - (p.getCpuOverCommitTimestamp().getTime())) >= (TimeUnit.MINUTES.toMillis(cpuOverCommitDurationMinutes))))).collect(java.util.stream.Collectors.toList()); if ((underUtilizedHosts.size()) > 1) { org.ovirt.engine.core.common.businessentities.Cluster cluster = getClusterDao().get(underUtilizedHosts.get(0).getClusterId()); java.util.Collections.sort(underUtilizedHosts, new org.ovirt.engine.core.bll.scheduling.utils.VdsCpuUsageComparator(((cluster != null) && (cluster.getCountThreadsAsCores())))); } return underUtilizedHosts; }
protected int getHighUtilizationForAllCores(int highUtilization, java.lang.Integer cores) { double freeCpu = (100 - highUtilization) / 100.0; freeCpu = java.lang.Math.pow(freeCpu, cores); return 100 - (new java.lang.Double((freeCpu * 100)).intValue()); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { java.lang.Integer cores = org.ovirt.engine.core.bll.scheduling.SlaValidator.getEffectiveCpuCores(vds, cluster.getCountThreadsAsCores()); if ((cores != null) && ((vm.getNumOfCpus(false)) > cores)) { messages.addMessage(vds.getId(), EngineMessage.VAR__DETAIL__NOT_ENOUGH_CORES.toString()); org.ovirt.engine.core.bll.scheduling.policyunits.CPUPolicyUnit.log.debug("Host '{}' has less cores ({}) than vm cores ({})", vds.getName(), cores, vm.getNumOfCpus()); continue; } list.add(vds); } return list; }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((balance) == null ?   : balance.hashCode()); result = (prime * result) + (<START_MOD>(selector) == null ?   : selector.hashCode()); result = (prime * result) + (<END_MOD>defaultPolicy ? 1231 : 1237); result = (prime * result) + ((description) == null ?   : description.hashCode()); result = (prime * result) + ((filterPositionMap) == null ?   : filterPositionMap.hashCode()); result = (prime * result) + ((filters) == null ?   : filters.hashCode()); result = (prime * result) + ((functions) == null ?   : functions.hashCode()); result = (prime * result) + ((id) == null ?   : id.hashCode()); result = (prime * result) + (locked ? 1231 : 1237); result = (prime * result) + ((name) == null ?   : name.hashCode()); result = (prime * result) + ((parameterMap) == null ?   : parameterMap.hashCode()); return result; }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(balance, defaultPolicy, description, filterPositionMap, filters, functions, id, locked, name, parameterMap, selector); }
public org.ovirt.engine.core.bll.scheduling.selector.SelectorInstance selector(java.util.Map<java.lang.String, java.lang.String> parameters) { org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl.log.error("Policy unit '{}' balance is not implemented", getPolicyUnit().getName()); return null; }	public org.ovirt.engine.core.bll.scheduling.selector.SelectorInstance selector(java.util.Map<java.lang.String, java.lang.String> parameters) { org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl.log.error("Policy unit '{}' selector is not implemented", getPolicyUnit().getName()); return null; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if (obj == null) return false; if ((getClass()) != (obj.getClass())) return false; org.ovirt.engine.core.common.scheduling.ClusterPolicy other = ((org.ovirt.engine.core.common.scheduling.ClusterPolicy) (obj)); if ((<START_MOD>selector) == null) { if ((other.selector) != null) return false; } else if (!(selector.equals(other.selector))) return false; if ((<END_MOD>balance) == null) { if ((other.balance) != null) return false; } else if (!(balance.equals(other.balance))) return false; if ((defaultPolicy) != (other.defaultPolicy)) return false; if ((description) == null) { if ((other.description) != null) return false; } else if (!(description.equals(other.description))) return false; if ((filterPositionMap) == null) { if ((other.filterPositionMap) != null) return false; } else if (!(filterPositionMap.equals(other.filterPositionMap))) return false; if ((filters) == null) { if ((other.filters) != null) return false; } else if (!(filters.equals(other.filters))) return false; if ((functions) == null) { if ((other.functions) != null) return false; } else if (!(functions.equals(other.functions))) return false; if ((id) == null) { if ((other.id) != null) return false; } else if (!(id.equals(other.id))) return false; if ((locked) != (other.locked)) return false; if ((name) == null) { if ((other.name) != null) return false; } else if (!(name.equals(other.name))) return false; if ((parameterMap) == null) { if ((other.parameterMap) != null) return false; } else if (!(parameterMap.equals(other.parameterMap))) return false; return true; }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.scheduling.ClusterPolicy)) { return false; } org.ovirt.engine.core.common.scheduling.ClusterPolicy other = ((org.ovirt.engine.core.common.scheduling.ClusterPolicy) (obj)); return ((((((((((java.util.Objects.equals(balance, other.balance)) && ((defaultPolicy) == (other.defaultPolicy))) && (java.util.Objects.equals(description, other.description))) && (java.util.Objects.equals(filterPositionMap, other.filterPositionMap))) && (java.util.Objects.equals(filters, other.filters))) && (java.util.Objects.equals(functions, other.functions))) && (java.util.Objects.equals(selector, other.selector))) && (java.util.Objects.equals(id, other.id))) && ((locked) == (other.locked))) && (java.util.Objects.equals(name, other.name))) && (java.util.Objects.equals(parameterMap, other.parameterMap)); }
@java.lang.Override public void record(org.ovirt.engine.core.compat.Guid policyUnit, org.ovirt.engine.core.compat.Guid host, java.lang.Integer weight) { weightTable.putIfAbsent(host, 0); java.lang.Integer acc = weightTable.get(host); java.lang.Integer factor = factorTable.get(policyUnit); acc += (factor == null ? 1 : factor) * weight; weightTable.put(host, acc); }	@java.lang.Override public void record(org.ovirt.engine.core.compat.Guid policyUnit, org.ovirt.engine.core.compat.Guid host, java.lang.Integer weight) { weightTable.putIfAbsent(host, 0); java.lang.Integer acc = weightTable.get(host); java.lang.Integer factor = factorTable.getOrDefault(policyUnit, 1); acc += factor * weight; weightTable.put(host, acc); }
@org.junit.Test public void testRanking() { org.ovirt.engine.core.bll.scheduling.policyunits.RankSelectorPolicyUnit.Selector selector = new org.ovirt.engine.core.bll.scheduling.policyunits.RankSelectorPolicyUnit.Selector(); org.ovirt.engine.core.compat.Guid unit1 = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.compat.Guid unit2 = org.ovirt.engine.core.compat.Guid.newGuid(); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> units = new java.util.ArrayList<>(); units.add(new org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>(unit1, 1)); units.add(new org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>(unit2, 100)); org.ovirt.engine.core.compat.Guid host1 = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.compat.Guid host2 = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.compat.Guid host3 = org.ovirt.engine.core.compat.Guid.newGuid(); java.util.List<org.ovirt.engine.core.compat.Guid> hosts = new java.util.ArrayList<>(); hosts.add(host1); hosts.add(host2); hosts.add(host3); selector.init(units, hosts); selector.record(unit1, host1, 500000); selector.record(unit1, host2, 1000); selector.record(unit1, host3, 85366814); selector.record(unit2, host3, 50); selector.record(unit2, host1, 100); org.ovirt.engine.core.compat.Guid best = selector.best(); assertEquals(host2, best); }	@org.junit.Test public void testRanking() { org.ovirt.engine.core.bll.scheduling.policyunits.RankSelectorPolicyUnit.Selector selector = new org.ovirt.engine.core.bll.scheduling.policyunits.RankSelectorPolicyUnit.Selector(); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> units = new java.util.ArrayList<>(); units.add(new org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>(unit1, 1)); units.add(new org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>(unit2, 100)); selector.init(units, hosts); selector.record(unit1, host1, 500000); selector.record(unit1, host2, 1000); selector.record(unit1, host3, 85366814); selector.record(unit2, host3, 50); selector.record(unit2, host1, 100); org.ovirt.engine.core.compat.Guid best = selector.best(); assertEquals(host2, best); }
@java.lang.Override public org.ovirt.engine.core.compat.Guid best() { java.util.Map.Entry<org.ovirt.engine.core.compat.Guid, java.lang.Integer> bestHostEntry = null; for (java.util.Map.Entry<org.ovirt.engine.core.compat.Guid, java.lang.Integer> entry : weightTable.entrySet()) { if ((bestHostEntry == null) || ((bestHostEntry.getValue()) > (entry.getValue()))) { bestHostEntry = entry; } } if (bestHostEntry == null) { return null; } return bestHostEntry.getKey(); }	@java.lang.Override public org.ovirt.engine.core.compat.Guid best() { java.util.Optional<org.ovirt.engine.core.compat.Guid> bestHostEntry = weightTable.entrySet().stream().min(( a, b) -> java.lang.Integer.compare(a.getValue(), b.getValue())).map(java.util.Map.Entry::getKey); return bestHostEntry.orElse(null); }
private <START_MOD>void runInternalFunctions(org.ovirt.engine.core.bll.scheduling.selector.SelectorInstance selector, <END_MOD>java.util.<START_MOD>List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl, java.lang.Integer>> functions, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList, org.ovirt.engine.core.common.businessentities.VM vm, java.util.<END_MOD>Map<<START_MOD>java.lang.String, java.lang.String> parameters) { for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl, java.lang.Integer> pair : functions) { java.util.List<org.ovirt.engine.core.common.utils.Pair<<END_MOD>org.ovirt.engine.core.compat.Guid, java.lang.Integer><START_MOD>> scoreResult = pair.getFirst().score(hostList, vm, parameters); for (<END_MOD>org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.<START_MOD>compat.Guid<END_MOD>, java.lang.Integer><START_MOD> result : scoreResult<END_MOD>) { org.ovirt.engine.core.compat.Guid<START_MOD> hostId<END_MOD> = <START_MOD>result.getFirst<END_MOD>(); <START_MOD>selector.record(<END_MOD>pair.getFirst().<START_MOD>getGuid(), result.getFirst(), result.getSecond()<END_MOD>); } } }	private void runInternalFunctions(org.ovirt.engine.core.bll.scheduling.selector.SelectorInstance selector, java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl, java.lang.Integer>> functions, org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl, java.lang.Integer> pair : functions) { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> scoreResult = pair.getFirst().score(cluster, hostList, vm, parameters); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer> result : scoreResult) { org.ovirt.engine.core.compat.Guid hostId = result.getFirst(); selector.record(pair.getFirst().getGuid(), result.getFirst(), result.getSecond()); } } }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, compatVersion, compatibilityVersion, cpuName, description, maxVdsMemoryOverCommit, countThreadsAsCores, migrateOnError, name, storagePoolId, storagePoolName<START_MOD>, switchType<END_MOD>, transparentHugepages, virtService, glusterService, glusterCliBasedSchedulingOn, tunnelMigration, emulatedMachine, trustedService, haReservation, clusterPolicyName, clusterPolicyProperties, requiredRngSources, enableKsm, enableBallooning, optimizationType, serialNumberPolicy, customSerialNumber, groupHostsAndVms, fencingPolicy, autoConverge, migrateCompressed, glusterTunedProfile, addtionalFeaturesSupported, maintenanceReasonRequired, ksmMergeAcrossNumaNodes, customMigrationNetworkBandwidth, migrationBandwidthLimitType); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, compatVersion, compatibilityVersion, cpuName, description, maxVdsMemoryOverCommit, countThreadsAsCores, migrateOnError, name, storagePoolId, storagePoolName, requiredSwitchTypeForCluster, transparentHugepages, virtService, glusterService, glusterCliBasedSchedulingOn, tunnelMigration, emulatedMachine, trustedService, haReservation, clusterPolicyName, clusterPolicyProperties, requiredRngSources, enableKsm, enableBallooning, optimizationType, serialNumberPolicy, customSerialNumber, clusterHostsAndVms, fencingPolicy, autoConverge, migrateCompressed, glusterTunedProfile, addtionalFeaturesSupported, maintenanceReasonRequired, ksmMergeAcrossNumaNodes, customMigrationNetworkBandwidth, migrationBandwidthLimitType, migrationPolicyId, macPoolId); }
protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return tsb.append("id", getId()).append("name", getName()).append("vdsId", getVdsId()).append("networkName", getNetworkName()).append("ipv4BootProtocol", getIpv4BootProtocol()).append("ipv4Address", getIpv4Address()).append("ipv4Subnet", getIpv4Subnet()).append("ipv4Gateway", getIpv4Gateway()).append("ipv6BootProtocol", getIpv6BootProtocol()).append("ipv6Address", getIpv6Address()).append("ipv6Prefix", getIpv6Prefix()).append("ipv6Gateway", getIpv6Gateway()).append("mtu", getMtu()).append("bridged", isBridged()).append(<START_MOD>"switchType", getSwitchType()).append(<END_MOD>"type", getType()).append("networkImplementationDetails", getNetworkImplementationDetails()).append("qos", getQos()); }	protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return tsb.append("id", getId()).append("name", getName()).append("vdsId", getVdsId()).append("networkName", getNetworkName()).append("ipv4BootProtocol", getIpv4BootProtocol()).append("ipv4Address", getIpv4Address()).append("ipv4Subnet", getIpv4Subnet()).append("ipv4Gateway", getIpv4Gateway()).append("ipv6BootProtocol", getIpv6BootProtocol()).append("ipv6Address", getIpv6Address()).append("ipv6Prefix", getIpv6Prefix()).append("ipv6Gateway", getIpv6Gateway()).append("mtu", getMtu()).append("bridged", isBridged()).append("reportedSwitchType", getReportedSwitchType()).append("type", getType()).append("networkImplementationDetails", getNetworkImplementationDetails()).append("qos", getQos()).append("adPartnerMac", getAdPartnerMac()); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper = createIdParameterMapper(networkAttachment.getId()).addValue("network_id", networkAttachment.getNetworkId()).addValue(<START_MOD>"switch_type", networkAttachment.getSwitchType().getOptionValue()).addValue(<END_MOD>"nic_id", networkAttachment.getNicId()).addValue("custom_properties", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(networkAttachment.getProperties())); mapIpConfiguration(networkAttachment, mapper); return mapper; }	@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper = createIdParameterMapper(networkAttachment.getId()).addValue("network_id", networkAttachment.getNetworkId()).addValue("nic_id", networkAttachment.getNicId()).addValue("custom_properties", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(networkAttachment.getProperties())); mapIpConfiguration(networkAttachment, mapper); return mapper; }
private org.springframework.jdbc.core.namedparam.MapSqlParameterSource createInterfaceParametersMapper(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { return getCustomMapSqlParameterSource().addValue("addr", nic.getIpv4Address()).addValue("ipv6_address", nic.getIpv6Address()).addValue("bond_name", nic.getBondName()).addValue("bond_type", nic.getBondType()).addValue("gateway", nic.getIpv4Gateway()).addValue("ipv6_gateway", nic.getIpv6Gateway()).addValue("id", nic.getId()).addValue("is_bond", nic.getBonded()).addValue("bond_opts", nic.getBondOptions()).addValue("mac_addr", nic.getMacAddress()).addValue("name", nic.getName()).addValue("network_name", nic.getNetworkName()).addValue("speed", nic.getSpeed()).addValue("subnet", nic.getIpv4Subnet()).addValue("ipv6_prefix", nic.getIpv6Prefix()).addValue("boot_protocol", nic.getIpv4BootProtocol()).addValue("ipv6_boot_protocol", nic.getIpv6BootProtocol()).addValue("type", nic.getType()).addValue("vds_id", nic.getVdsId()).addValue("vlan_id", nic.getVlanId()).addValue("base_interface", nic.getBaseInterface()).addValue("mtu", nic.getMtu()).addValue("bridged", nic.isBridged()).addValue(<START_MOD>"switch_type", nic.getSwitchType().getOptionValue()).addValue(<END_MOD>"labels", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(nic.getLabels())); }	private org.springframework.jdbc.core.namedparam.MapSqlParameterSource createInterfaceParametersMapper(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { return getCustomMapSqlParameterSource().addValue("addr", nic.getIpv4Address()).addValue("ipv6_address", nic.getIpv6Address()).addValue("bond_name", nic.getBondName()).addValue("bond_type", nic.getBondType()).addValue("gateway", nic.getIpv4Gateway()).addValue("ipv6_gateway", nic.getIpv6Gateway()).addValue("id", nic.getId()).addValue("is_bond", nic.getBonded()).addValue("bond_opts", nic.getBondOptions()).addValue("mac_addr", nic.getMacAddress()).addValue("name", nic.getName()).addValue("network_name", nic.getNetworkName()).addValue("speed", nic.getSpeed()).addValue("subnet", nic.getIpv4Subnet()).addValue("ipv6_prefix", nic.getIpv6Prefix()).addValue("boot_protocol", nic.getIpv4BootProtocol()).addValue("ipv6_boot_protocol", nic.getIpv6BootProtocol()).addValue("type", nic.getType()).addValue("vds_id", nic.getVdsId()).addValue("vlan_id", nic.getVlanId()).addValue("base_interface", nic.getBaseInterface()).addValue("mtu", nic.getMtu()).addValue("bridged", nic.isBridged()).addValue("labels", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(nic.getLabels())).addValue("ad_partner_mac", nic.getAdPartnerMac()).addValue("reported_switch_type", ((nic.getReportedSwitchType()) == null ? null : nic.getReportedSwitchType().getOptionValue())); }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("id", getId()).append("networkId", getNetworkId()).append("networkName", getNetworkName()).append("nicId", getNicId()).append("nicName", getNicName()).append("ipConfiguration", getIpConfiguration()).append("properties", getProperties()).append("overrideConfiguration", isOverrideConfiguration()).<START_MOD>append("switchType", getSwitchType()).<END_MOD>build(); }	@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("id", getId()).append("networkId", getNetworkId()).append("networkName", getNetworkName()).append("nicId", getNicId()).append("nicName", getNicName()).append("ipConfiguration", getIpConfiguration()).append("properties", getProperties()).append("overrideConfiguration", isOverrideConfiguration()).build(); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), ipv4Address, ipv6Address, bondName, bondOptions, bondType, bonded, ipv4BootProtocol, ipv6BootProtocol, <START_MOD>switchType, <END_MOD>networkName, bridged, ipv4Gateway, ipv6Gateway, mtu, ipv4Subnet, ipv6Prefix, vdsId, baseInterface, vlanId, qos, labels); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), ipv4Address, ipv6Address, bondName, bondOptions, bondType, bonded, ipv4BootProtocol, ipv6BootProtocol, reportedSwitchType, networkName, bridged, ipv4Gateway, ipv6Gateway, mtu, ipv4Subnet, ipv6Prefix, vdsId, baseInterface, vlanId, qos, labels, adPartnerMac); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.network.NetworkAttachment mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment entity = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); entity.setId(getGuid(rs, "id")); entity.setNetworkId(getGuid(rs, "network_id")); entity.<START_MOD>setSwitchType(org.ovirt.engine.core.common.SwitchType.parseString(rs.getString("switch_type"))); entity.<END_MOD>setNicId(getGuid(rs, "nic_id")); entity.setProperties(getCustomProperties(rs)); final org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration(); final java.lang.String bootProtocol = rs.getString("boot_protocol"); if (bootProtocol != null) { final org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address = createIpv4Address(rs, bootProtocol); ipConfiguration.getIPv4Addresses().add(iPv4Address); } final java.lang.String v6BootProtocol = rs.getString("ipv6_boot_protocol"); if (v6BootProtocol != null) { final org.ovirt.engine.core.common.businessentities.network.IpV6Address ipV6Address = createIpV6Address(rs, v6BootProtocol); ipConfiguration.getIpV6Addresses().add(ipV6Address); } if ((bootProtocol != null) || (v6BootProtocol != null)) { entity.setIpConfiguration(ipConfiguration); } entity.setHostNetworkQos(hostNetworkQosDao.get(entity.getId())); return entity; }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.network.NetworkAttachment mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment entity = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); entity.setId(getGuid(rs, "id")); entity.setNetworkId(getGuid(rs, "network_id")); entity.setNicId(getGuid(rs, "nic_id")); entity.setProperties(getCustomProperties(rs)); final org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration(); final java.lang.String bootProtocol = rs.getString("boot_protocol"); if (bootProtocol != null) { final org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address = createIpv4Address(rs, bootProtocol); ipConfiguration.getIPv4Addresses().add(iPv4Address); } final java.lang.String v6BootProtocol = rs.getString("ipv6_boot_protocol"); if (v6BootProtocol != null) { final org.ovirt.engine.core.common.businessentities.network.IpV6Address ipV6Address = createIpV6Address(rs, v6BootProtocol); ipConfiguration.getIpV6Addresses().add(ipV6Address); } if ((bootProtocol != null) || (v6BootProtocol != null)) { entity.setIpConfiguration(ipConfiguration); } entity.setHostNetworkQos(hostNetworkQosDao.get(entity.getId())); return entity; }
private boolean isPrimaryAddressExist() { <START_MOD>org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = getIpConfigurationOfNetworkAttachment(); <END_MOD>return (<START_MOD>ipConfiguration<END_MOD> != null) && (<START_MOD>ipConfiguration<END_MOD>.hasIpv4PrimaryAddressSet()); }	private boolean isIpv4PrimaryAddressExist() { org.ovirt.engine.core.common.businessentities.network.IpConfiguration networkDataCenterIpConfigurationDefinition = getIpConfigurationOfNetworkAttachment(); return (networkDataCenterIpConfigurationDefinition != null) && (networkDataCenterIpConfigurationDefinition.hasIpv4PrimaryAddressSet()); }
<START_MOD>@java.lang.SuppressWarnings("ConstantConditions") <END_MOD>private org.ovirt.engine.core.common.businessentities.network.IPv4Address getPrimaryAddress() { <START_MOD>org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = getIpConfigurationOfNetworkAttachment(); <END_MOD>return <START_MOD>ipConfiguration<END_MOD>.getIpv4PrimaryAddress(); }	@java.lang.SuppressWarnings("ConstantConditions") private org.ovirt.engine.core.common.businessentities.network.IPv4Address getIpv4PrimaryAddress() { return getIpConfigurationOfNetworkAttachment().getIpv4PrimaryAddress(); }
@org.junit.Test public void testReportConfigurationsOnHostWhenBootProtocolNotStatic() { initIpConfigurationBootProtocolAddress(NetworkBootProtocol.NONE, false); initIpConfigurationBootProtocolNetmask(NetworkBootProtocol.NONE, false); initIpConfigurationBootProtocolGateway(NetworkBootProtocol.NONE, false); org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface testedInstanceWithSameNonQosValues = createTestedInstanceWithSameNonQosValues(); java.util.List<org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration> reportedConfigurationList = testedInstanceWithSameNonQosValues.reportConfigurationsOnHost().getReportedConfigurationList(); java.util.List<org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration> expectedReportedConfigurations = createDefaultExpectedReportedConfigurations(); <START_MOD>org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = this.testedNetworkAttachment.getIpConfiguration().getIpv4PrimaryAddress(); <END_MOD>expectedReportedConfigurations.add(new org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurationType.BOOT_PROTOCOL, iface.getIpv4BootProtocol().name(), <START_MOD>primaryAddress<END_MOD>.getBootProtocol().name(), true)); assertThat(reportedConfigurationList.containsAll(expectedReportedConfigurations), is(true)); assertThat(reportedConfigurationList.size(), is(expectedReportedConfigurations.size())); }	@org.junit.Test public void testReportConfigurationsOnHostWhenIpv4BootProtocolNotStatic() { initIpv4ConfigurationBootProtocolAddress(Ipv4BootProtocol.NONE, false); initIpv4ConfigurationBootProtocolNetmask(Ipv4BootProtocol.NONE, false); initIpv4ConfigurationBootProtocolGateway(Ipv4BootProtocol.NONE, false); org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface testedInstanceWithSameNonQosValues = createTestedInstanceWithSameNonQosValues(); java.util.List<org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration> reportedConfigurationList = testedInstanceWithSameNonQosValues.reportConfigurationsOnHost().getReportedConfigurationList(); java.util.List<org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration> expectedReportedConfigurations = createDefaultExpectedReportedConfigurations(); org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = this.testedNetworkAttachment.getIpConfiguration().getIpv4PrimaryAddress(); expectedReportedConfigurations.add(new org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurationType.IPV4_BOOT_PROTOCOL, iface.getIpv4BootProtocol().name(), primaryAddress.getBootProtocol().name(), true)); assertThat(reportedConfigurationList.containsAll(expectedReportedConfigurations), is(true)); assertThat(reportedConfigurationList.size(), is(expectedReportedConfigurations.size())); }
public org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface createTestedInstance() { return new org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface(iface, network, networkQos, <START_MOD>testedNetworkAttachment<END_MOD>); }	public org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface createTestedInstance() { return new org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface(iface, network, networkQos, testedNetworkAttachment, cluster); }
org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface createNetworkInSyncWithVdsNetworkInterface(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.Network network) { org.ovirt.engine.core.common.businessentities.network.HostNetworkQos hostNetworkQos = effectiveHostNetworkQos.getQos(networkAttachment, network); return new org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface(nic, network, hostNetworkQos, networkAttachment); }	org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface createNetworkInSyncWithVdsNetworkInterface(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.Cluster cluster) { org.ovirt.engine.core.common.businessentities.network.HostNetworkQos hostNetworkQos = effectiveHostNetworkQos.getQos(networkAttachment, network); return new org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface(nic, network, hostNetworkQos, networkAttachment, cluster); }
private org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface build(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface, org.ovirt.engine.core.common.businessentities.network.Network network) { org.ovirt.engine.core.common.businessentities.network.HostNetworkQos hostNetworkQos = effectiveHostNetworkQos.getQos(networkAttachment, network); return new org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface(vdsNetworkInterface, network, hostNetworkQos, networkAttachment); }	private org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface build(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface, org.ovirt.engine.core.common.businessentities.network.Network network) { org.ovirt.engine.core.compat.Guid vdsId = vdsNetworkInterface.getVdsId(); org.ovirt.engine.core.common.businessentities.VDS vds = vdsDao.get(vdsId); org.ovirt.engine.core.compat.Guid clusterId = vds.getClusterId(); org.ovirt.engine.core.common.businessentities.Cluster cluster = clusterDao.get(clusterId); org.ovirt.engine.core.common.businessentities.network.HostNetworkQos hostNetworkQos = effectiveHostNetworkQos.getQos(networkAttachment, network); return new org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface(vdsNetworkInterface, network, hostNetworkQos, networkAttachment, cluster); }
private void initIpConfiguration() { <START_MOD>org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = this.testedNetworkAttachment.getIpConfiguration<END_MOD>(); <START_MOD>ipConfiguration.setIPv4Addresses<END_MOD>(<START_MOD>java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>Collections.singletonList<END_MOD>(mockedIPv4Address<START_MOD>)<END_MOD>); }	private void initIpv6ConfigurationBootProtocol(boolean sameBootProtocol) { initIpv6Configuration(); ipv6Address.setBootProtocol(org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.IPV6_BOOT_PROTOCOL); org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol ifaceBootProtocol = (sameBootProtocol) ? org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.IPV6_BOOT_PROTOCOL : org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol.forValue((((org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.IPV4_BOOT_PROTOCOL.getValue()) + 1) % (org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.values().length))); iface.setIpv6BootProtocol(ifaceBootProtocol); }
@org.junit.Before public void setUp() throws java.lang.Exception { ifaceQos = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos(); networkQos = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos(); iface = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); iface.setBridged(true); <START_MOD>iface.setQos(ifaceQos); iface.setSwitchType(SwitchType.LEGACY); <END_MOD>network = new org.ovirt.engine.core.common.businessentities.network.Network(); <START_MOD>testedNetworkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); testedNetworkAttachment.setSwitchType(SwitchType.LEGACY); testedNetworkAttachment.setIpConfiguration(new org.ovirt.engine.core.common.businessentities.network.IpConfiguration()<END_MOD>); }	@org.junit.Before public void setUp() throws java.lang.Exception { ifaceQos = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos(); networkQos = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos(); iface = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); iface.setBridged(true); iface.setQos(ifaceQos); iface.setReportedSwitchType(SwitchType.LEGACY); network = new org.ovirt.engine.core.common.businessentities.network.Network(); testedNetworkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); testedNetworkAttachment.setIpConfiguration(new org.ovirt.engine.core.common.businessentities.network.IpConfiguration()); cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); cluster.setRequiredSwitchTypeForCluster(SwitchType.LEGACY); }
@org.junit.Test public void testReportConfigurationsOnHostWhenBootProtocolNotStatic() { initIpConfigurationBootProtocolAddress(NetworkBootProtocol.NONE, false); initIpConfigurationBootProtocolNetmask(NetworkBootProtocol.NONE, false); initIpConfigurationBootProtocolGateway(NetworkBootProtocol.NONE, false); org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface testedInstanceWithSameNonQosValues = createTestedInstanceWithSameNonQosValues(); java.util.List<org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration> reportedConfigurationList = testedInstanceWithSameNonQosValues.reportConfigurationsOnHost().getReportedConfigurationList(); <START_MOD>org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = this.testedNetworkAttachment.getIpConfiguration().getIpv4PrimaryAddress(); <END_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration> expectedReportedConfigurations = <START_MOD>combineReportedConfigurations(createBasicAndQosReportedConfigurations(), new org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurationType.BOOT_PROTOCOL, iface.getIpv4BootProtocol().name(),<END_MOD> primaryAddress<START_MOD>.getBootProtocol().name(), true)); assertThat(reportedConfigurationList.containsAll(<END_MOD>expectedReportedConfigurations<START_MOD>), is(<END_MOD>true)); assertThat(reportedConfigurationList.<START_MOD>size(), is<END_MOD>(expectedReportedConfigurations.size())); }	@org.junit.Test public void testReportConfigurationsOnHostWhenIpv4BootProtocolNotStatic() { initIpv4ConfigurationBootProtocolAddress(Ipv4BootProtocol.NONE, false); initIpv4ConfigurationBootProtocolNetmask(Ipv4BootProtocol.NONE, false); initIpv4ConfigurationBootProtocolGateway(Ipv4BootProtocol.NONE, false); org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface testedInstanceWithSameNonQosValues = createTestedInstanceWithSameNonQosValues(); java.util.List<org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration> reportedConfigurationList = testedInstanceWithSameNonQosValues.reportConfigurationsOnHost().getReportedConfigurationList(); org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = this.testedNetworkAttachment.getIpConfiguration().getIpv4PrimaryAddress(); java.util.List<org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration> expectedReportedConfigurations = combineReportedConfigurations(createBasicAndQosReportedConfigurations(), new org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurationType.IPV4_BOOT_PROTOCOL, iface.getIpv4BootProtocol().name(), primaryAddress.getBootProtocol().name(), true)); assertThat(reportedConfigurationList.containsAll(expectedReportedConfigurations), is(true)); assertThat(reportedConfigurationList.size(), is(expectedReportedConfigurations.size())); }
private org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration reportEqualSwitchType() { return new org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurationType.SWITCH_TYPE, org.ovirt.engine.core.common.SwitchType.LEGACY, org.ovirt.engine.core.common.SwitchType.LEGACY, true); }	private org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration reportEqualSwitchType() { return new org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurationType.SWITCH_TYPE, org.ovirt.engine.core.common.network.SwitchType.LEGACY, org.ovirt.engine.core.common.network.SwitchType.LEGACY, true); }
@org.junit.Test public void testReportConfigurationsOnHostWhenSwitchTypeIsOutOfSync() throws java.lang.Exception { networkQos = null; iface.setMtu(org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.DEFAULT_MTU_VALUE); network.setMtu(org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.DEFAULT_MTU_VALUE); iface.setQos(null); testedNetworkAttachment.setSwitchType(SwitchType.OVS); org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations reportedConfigurations = createTestedInstance().reportConfigurationsOnHost(); assertThat(reportedConfigurations.isNetworkInSync(), is(false)); java.util.List<org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration> reportedConfigurationList = reportedConfigurations.getReportedConfigurationList(); java.util.List<org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration> expectedReportedConfigurations = java.util.Arrays.asList(reportedEqualMtu(), reporteEqualBridged(), reportEqualVLAN(), new org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurationType.SWITCH_TYPE, org.ovirt.engine.core.common.SwitchType.LEGACY, org.ovirt.engine.core.common.SwitchType.OVS, false)); assertThat(reportedConfigurationList.containsAll(expectedReportedConfigurations), is(true)); assertThat(reportedConfigurationList.size(), is(expectedReportedConfigurations.size())); }	@org.junit.Test public void testReportConfigurationsOnHostWhenSwitchTypeIsOutOfSync() throws java.lang.Exception { cluster.setRequiredSwitchTypeForCluster(SwitchType.OVS); org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations reportedConfigurations = createTestedInstance().reportConfigurationsOnHost(); assertThat(reportedConfigurations.isNetworkInSync(), is(false)); java.util.List<org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration> reportedConfigurationList = reportedConfigurations.getReportedConfigurationList(); org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration expectedReportedConfiguration = new org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurationType.SWITCH_TYPE, org.ovirt.engine.core.common.network.SwitchType.LEGACY, org.ovirt.engine.core.common.network.SwitchType.OVS, false); assertThat(reportedConfigurationList.contains(expectedReportedConfiguration), is(true)); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.core.bll.AddClusterCommand.getCluster(); cluster.setArchitecture(org.ovirt.engine.core.bll.AddClusterCommand.getArchitecture()); <START_MOD>setDefaultSwitchTypeIfNeeded(cluster); <END_MOD>org.ovirt.engine.core.bll.AddClusterCommand.checkMaxMemoryOverCommitValue(); cluster.setDetectEmulatedMachine(true); org.ovirt.engine.core.bll.AddClusterCommand.getClusterDao().save(cluster); org.ovirt.engine.core.bll.AddClusterCommand.alertIfFencingDisabled(); if ((org.ovirt.engine.core.bll.AddClusterCommand.getParameters().getCluster().getStoragePoolId()) != null) { attachManagementNetwork(); } addDefaultCpuProfile(); if (org.apache.commons.collections.CollectionUtils.isNotEmpty(cluster.getAddtionalFeaturesSupported())) { for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature feature : cluster.getAddtionalFeaturesSupported()) { feature.setClusterId(cluster.getId()); } clusterFeatureDao.addAllSupportedClusterFeature(cluster.getAddtionalFeaturesSupported()); } setActionReturnValue(cluster.getId()); org.ovirt.engine.core.bll.AddClusterCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.core.bll.AddClusterCommand.getCluster(); cluster.setArchitecture(org.ovirt.engine.core.bll.AddClusterCommand.getArchitecture()); org.ovirt.engine.core.bll.AddClusterCommand.setDefaultSwitchTypeIfNeeded(); org.ovirt.engine.core.bll.AddClusterCommand.checkMaxMemoryOverCommitValue(); cluster.setDetectEmulatedMachine(true); cluster.setMacPoolId(calculateMacPoolIdToUse()); org.ovirt.engine.core.bll.AddClusterCommand.getClusterDao().save(cluster); org.ovirt.engine.core.bll.AddClusterCommand.alertIfFencingDisabled(); if ((org.ovirt.engine.core.bll.AddClusterCommand.getParameters().getCluster().getStoragePoolId()) != null) { attachManagementNetwork(); } addDefaultCpuProfile(); if (org.apache.commons.collections.CollectionUtils.isNotEmpty(cluster.getAddtionalFeaturesSupported())) { for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature feature : cluster.getAddtionalFeaturesSupported()) { feature.setClusterId(cluster.getId()); } clusterFeatureDao.addAllSupportedClusterFeature(cluster.getAddtionalFeaturesSupported()); } setActionReturnValue(cluster.getId()); org.ovirt.engine.core.bll.AddClusterCommand.setSucceeded(true); }
protected void setDefaultSwitchTypeIfNeeded(org.ovirt.engine.core.common.businessentities.Cluster cluster) { if ((cluster.getSwitchType()) == null) { org.ovirt.engine.core.compat.Version ovsSupportedFromVersion = new org.ovirt.engine.core.compat.Version(4, 0); boolean ovsSupported = cluster.getCompatibilityVersion().greaterOrEquals(ovsSupportedFromVersion); cluster.setSwitchType((ovsSupported ? org.ovirt.engine.core.common.SwitchType.OVS : org.ovirt.engine.core.common.SwitchType.LEGACY)); } }	protected void setDefaultSwitchTypeIfNeeded() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster(); if ((cluster.getRequiredSwitchTypeForCluster()) == null) { org.ovirt.engine.core.common.network.SwitchType defaultSwitchType = org.ovirt.engine.core.common.network.DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); cluster.setRequiredSwitchTypeForCluster(defaultSwitchType); } }
private void updateSwitchTypeIfNeeded() { org.ovirt.engine.core.common.SwitchType switchType = org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getSwitchType(); boolean needToUpdate = !(java.util.Objects.equals(switchType, oldCluster.getSwitchType())); if (needToUpdate) { org.ovirt.engine.core.bll.UpdateClusterCommand.getClusterDao().setSwitchTypeOfAllNetworkAttachmentsInCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getClusterId(), switchType); } }	@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { final java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> result = new java.util.ArrayList(super.getPermissionCheckSubjects()); final org.ovirt.engine.core.compat.Guid macPoolId = getNewMacPoolId(); final boolean changingPoolDefinition = (macPoolId != null) && (!(macPoolId.equals(getOldMacPoolId()))); if (changingPoolDefinition) { result.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(macPoolId, org.ovirt.engine.core.common.VdcObjectType.MacPool, org.ovirt.engine.core.common.businessentities.ActionGroup.CONFIGURE_MAC_POOL)); } return result; }
public void setSwitchType(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.SwitchType> switchType) { this.switchType = switchType; }	public void setSwitchType(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.network.SwitchType> switchType) { this.switchType = switchType; }
private void initSwitchType() { boolean version40OrNewer = version40OrNewer(); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.SwitchType> switchType = getSwitchType(); switchType.setItems(java.util.Arrays.asList(org.ovirt.engine.core.common.SwitchType.values())); switchType.setIsChangeable(version40OrNewer); switchType.setSelectedItem((version40OrNewer ? org.ovirt.engine.core.common.SwitchType.OVS : org.ovirt.engine.core.common.SwitchType.LEGACY)); }	private void initSwitchType() { org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.network.SwitchType> switchType = getSwitchType(); switchType.setItems(java.util.Arrays.asList(org.ovirt.engine.core.common.network.SwitchType.values())); switchType.setIsChangeable(false); switchType.setSelectedItem(SwitchType.LEGACY); }
private void updateSwitchTypeUponVersionChange() { boolean version40OrNewer = version40OrNewer(); boolean needToChangeValue = !version40OrNewer; org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.SwitchType> switchType = getSwitchType(); switchType.setIsChangeable(version40OrNewer); if (needToChangeValue) { switchType.setSelectedItem(SwitchType.LEGACY); } }	private void updateSwitchTypeUponVersionChange(org.ovirt.engine.core.compat.Version version) { org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.network.SwitchType> switchType = getSwitchType(); boolean ovsSupported = isOvsSupported(version); switchType.setIsChangeable(ovsSupported); if ((!ovsSupported) && (switchType.getSelectedItem().equals(SwitchType.OVS))) { switchType.setSelectedItem(SwitchType.LEGACY); } }
public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.SwitchType> getSwitchType() { return switchType; }	public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.network.SwitchType> getSwitchType() { return switchType; }
private boolean version40OrNewer() { if (((getVersion()) == null) || ((getVersion().getSelectedItem()) == null)) { return false; } org.ovirt.engine.core.compat.Version version = getVersion().getSelectedItem(); return version.greaterOrEquals(new org.ovirt.engine.core.compat.Version(4, 0)); }	private boolean isOvsSupported(org.ovirt.engine.core.compat.Version version) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider instance = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance(); return ((java.lang.Boolean) (instance.getConfigValuePreConverted(ConfigurationValues.OvsSupported, version.getValue()))); }
private void setDefaultSwitchTypeIfNeeded(org.ovirt.engine.core.common.businessentities.Cluster cluster) { if ((cluster.getRequiredSwitchTypeForCluster()) == null) { cluster.setRequiredSwitchTypeForCluster(org.ovirt.engine.core.common.network.SwitchType.getDefaultSwitchType()); } }	private org.ovirt.engine.core.compat.Guid calculateMacPoolIdToUse() { org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.core.bll.AddClusterCommand.getCluster(); org.ovirt.engine.core.compat.Guid requestedMacPoolId = (cluster == null) ? null : cluster.getMacPoolId(); return requestedMacPoolId == null ? macPoolDao.getDefaultPool().getId() : requestedMacPoolId; }
private void initSwitchType() { boolean version40OrNewer = version40OrNewer(); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.network.SwitchType> switchType = getSwitchType(); switchType.setItems(java.util.Arrays.asList(org.ovirt.engine.core.common.network.SwitchType.values())); switchType.setIsChangeable(version40OrNewer); switchType.setSelectedItem(SwitchType.LEGACY); }	private void initSwitchType() { org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.network.SwitchType> switchType = getSwitchType(); switchType.setItems(java.util.Arrays.asList(org.ovirt.engine.core.common.network.SwitchType.values())); switchType.setIsChangeable(false); switchType.setSelectedItem(SwitchType.LEGACY); }
protected org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession getSession(java.lang.String masterVolumeName, java.util.Map<java.lang.String, java.lang.Object> innerMap) { org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession geoRepSession = new org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession(); java.lang.String sessionKey = ((java.lang.String) (innerMap.get(org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc.SESSION_KEY))); java.lang.String[] sessSplit = sessionKey.split("([://]+)"); java.lang.String slaveNode = ((sessSplit.length) <START_MOD>== 5) ? sessSplit[((sessSplit.length) <END_MOD>- <START_MOD>3)] : sessSplit[((sessSplit.length) - <END_MOD>2)]; if (slaveNode.contains("@")) { java.lang.String[] hostComponents = slaveNode.split("@"); slaveNode = hostComponents[((hostComponents.length) - 1)]; geoRepSession.setUserName(hostComponents[0]); } java.lang.String slaveVolume = ((java.lang.String) (innerMap.get(org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc.REMOTE_VOL_NAME))); geoRepSession.setSlaveHostName(slaveNode); geoRepSession.setSlaveVolumeName(slaveVolume); geoRepSession.setSessionKey(sessionKey); geoRepSession.setMasterVolumeName(masterVolumeName); return geoRepSession; }	protected org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession getSession(java.lang.String masterVolumeName, java.util.Map<java.lang.String, java.lang.Object> innerMap) { org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession geoRepSession = new org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession(); java.lang.String sessionKey = ((java.lang.String) (innerMap.get(org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc.SESSION_KEY))); java.lang.String[] sessSplit = sessionKey.split("([://]+)"); java.lang.String slaveNode = sessSplit[2]; if (slaveNode.contains("@")) { java.lang.String[] hostComponents = slaveNode.split("@"); slaveNode = hostComponents[((hostComponents.length) - 1)]; geoRepSession.setUserName(hostComponents[0]); } java.lang.String slaveVolume = ((java.lang.String) (innerMap.get(org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc.REMOTE_VOL_NAME))); geoRepSession.setSlaveHostName(slaveNode); geoRepSession.setSlaveVolumeName(slaveVolume); geoRepSession.setSessionKey(sessionKey); geoRepSession.setMasterVolumeName(masterVolumeName); return geoRepSession; }
private java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> runInternalFunctions(java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl, java.lang.Integer>> functions, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> hostCostTable = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl, java.lang.Integer> pair : functions) { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> scoreResult = pair.getFirst().score(hostList, vm, parameters); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer> result : scoreResult) { org.ovirt.engine.core.compat.Guid hostId = result.getFirst(); if ((hostCostTable.get(hostId)) == null) { hostCostTable.put(hostId, 0); } <START_MOD>if ((result.getSecond()) != null) { <END_MOD>hostCostTable.put(hostId, ((hostCostTable.get(hostId)) + ((pair.getSecond()) * (result.getSecond())))); } } <START_MOD>} <END_MOD>return hostCostTable; }	private void runInternalFunctions(org.ovirt.engine.core.bll.scheduling.selector.SelectorInstance selector, java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl, java.lang.Integer>> functions, org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl, java.lang.Integer> pair : functions) { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> scoreResult = pair.getFirst().score(cluster, hostList, vm, parameters); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer> result : scoreResult) { selector.record(pair.getFirst().getGuid(), result.getFirst(), result.getSecond()); } } }
@java.lang.Override public void init(final org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel model) { super.init(model); <START_MOD>addDataCenterListeners<END_MOD>(); updateExportDomainLoadButtonEnabledState(); }	@java.lang.Override public void init(final org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel model) { super.init(model); addDataCenterListener(); addExportDomainListener(); updateExportDomainLoadButtonEnabledState(); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) {<START_MOD> clearVms();<END_MOD> org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = dataCenters.getSelectedItem(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenter.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(this, createGetStorageDomainsByStoragePoolIdCallback(dataCenter))); }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { clearVms(); exportDomain.setEntity(null); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = dataCenters.getSelectedItem(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenter.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(this, createGetStorageDomainsByStoragePoolIdCallback(dataCenter))); }
private void <START_MOD>addDataCenterListeners<END_MOD>() { getModel().getDataCenters().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsChangable".equals(args.propertyName)) { final boolean enabled = getModel().getDataCenters().getIsChangable(); updateExportDomainLoadButtonEnabledState(); getView().getLoadVmsFromVmwareButton().setEnabled(enabled); getView().getLoadOvaButton().setEnabled(enabled); getView().getLoadXenButton().setEnabled(enabled); getView().getLoadKvmButton().setEnabled(enabled); } } }); <START_MOD>getModel().getExportDomain().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { updateExportDomainLoadButtonEnabledState(); } }); }<END_MOD>	private void addDataCenterListener() { getModel().getDataCenters().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsChangable".equals(args.propertyName)) { final boolean enabled = getModel().getDataCenters().getIsChangable(); updateExportDomainLoadButtonEnabledState(); getView().getLoadVmsFromVmwareButton().setEnabled(enabled); getView().getLoadOvaButton().setEnabled(enabled); getView().getLoadXenButton().setEnabled(enabled); getView().getLoadKvmButton().setEnabled(enabled); } } }); }
@java.lang.Override public void updateAllDiskImageDynamicWithDiskIdByVmId(java.util.Collection<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic>> diskImageDynamicForVm) { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic>> sortedDisks = new java.util.ArrayList<>(); sortedDisks.addAll(diskImageDynamicForVm); <START_MOD>sortedDisks<END_MOD>.sort(<START_MOD>(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic> p1,org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic> p2) -> p1.getSecond().getId().compareTo(p2.getSecond().getId<END_MOD>())); getCallsHandler().executeStoredProcAsBatch("Updatedisk_image_dynamic_by_disk_id_and_vm_id", sortedDisks, getBatchImageGroupMapper()); }	@java.lang.Override public void updateAllDiskImageDynamicWithDiskIdByVmId(java.util.Collection<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic>> diskImageDynamicForVm) { getCallsHandler().executeStoredProcAsBatch("Updatedisk_image_dynamic_by_disk_id_and_vm_id", org.ovirt.engine.core.dao.DiskImageDynamicDaoImpl.sortDiskImageDynamicForUpdate(diskImageDynamicForVm), getBatchImageGroupMapper()); }
@java.lang.Override protected void endWithFailure() {<START_MOD> org.ovirt.engine.core.common.action.RunVmParams runVmParams = getChildRunVmParameters(); if (runVmParams != null) { setVmId(runVmParams.getVmId());<END_MOD> setSucceeded(org.ovirt.engine.core.bll.Backend.getInstance().endAction(VdcActionType.RunVm, <START_MOD>runVmParams<END_MOD>, org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.cloneContext().withoutExecutionContext().withoutLock()).getSucceeded()); if (!(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getSucceeded())) { log.warn( endAction of RunVm <START_MOD>failed<END_MOD> } detachUserFromVmFromPool(); }<START_MOD> }<END_MOD>	@java.lang.Override protected void endWithFailure() { org.ovirt.engine.core.common.action.RunVmParams runVmParams = getChildRunVmParameters(); if (runVmParams != null) { setVmId(runVmParams.getVmId()); log.warn("endWithFailure: RunVm failed, detaching user from VM"); detachUserFromVmFromPool(); } else { log.warn("endWithFailure: VM is null"); } org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.setSucceeded(true); }
@java.lang.Override protected void endSuccessfully() { <START_MOD>org.ovirt.engine.core.common.action.RunVmParams runVmParams = getChildRunVmParameters(); <END_MOD>if (<START_MOD>runVmParams<END_MOD> != null) { <START_MOD>setVmId(runVmParams.getVmId()); <END_MOD>if (org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getSnapshotDao().exists(<START_MOD>getVmId<END_MOD>(), SnapshotType.STATELESS)) { setSucceeded(org.ovirt.engine.core.bll.Backend.getInstance().endAction(VdcActionType.RunVm, <START_MOD>runVmParams<END_MOD>, org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.cloneContext().withoutLock().withoutExecutionContext()).getSucceeded()); if (!(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getSucceeded())) { log.warn( endAction of RunVm failed, detaching user from Vm detachUserFromVmFromPool(); org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getReturnValue().setEndActionTryAgain(false); } } else { log.warn( No images were created for Vm, detaching user from Vm detachUserFromVmFromPool(); org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getReturnValue().setEndActionTryAgain(false); } } else { org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.setCommandShouldBeLogged(false); log.warn( Vm is null - not performing full endAction org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.setSucceeded(true); } }	@java.lang.Override protected void endSuccessfully() { org.ovirt.engine.core.common.action.RunVmParams runVmParams = getChildRunVmParameters(); if (runVmParams != null) { setVmId(runVmParams.getVmId()); if (!(isRunVmSucceeded())) { log.warn("endSuccessfully: RunVm failed, detaching user from VM"); detachUserFromVmFromPool(); org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getReturnValue().setEndActionTryAgain(false); } } else { org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.setCommandShouldBeLogged(false); log.warn("endSuccessfully: VM is null"); } org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.setSucceeded(true); }
public boolean attemptConnection() { boolean connected = false; long timeout = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SetupNetworksPollingTimeout); <START_MOD>for (int i = 0; i < (this.retryAttempts); i++) { try { <END_MOD>org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> task = resourceManager.runFutureVdsCommand(FutureVDSCommandType.TimeBoundPoll, new org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters(vds.getId(), timeout, java.util.concurrent.TimeUnit.SECONDS)); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = task.get(timeout, java.util.concurrent.TimeUnit.SECONDS); connected = returnValue.getSucceeded(); if (connected) { break; } <START_MOD>} catch (java.util.concurrent.TimeoutException | org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ignored) { } catch (<END_MOD>java.lang.<START_MOD>Exception e) { org.ovirt.engine.core.bll.transport.ProtocolDetector.log.warn( to connect to host e.getMessage()); org.ovirt.engine.core.bll.transport.ProtocolDetector.log.debug("Exception", e); } org.ovirt.engine.core.utils.ThreadUtils<END_MOD>.sleep(this.connectionTimeout); } return connected; }	public boolean attemptConnection() { boolean connected = false; long timeout = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SetupNetworksPollingTimeout); for (int i = 0; i < (this.retryAttempts); i++) { try { if (i != 0) { java.lang.Thread.sleep(this.connectionTimeout); } org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> task = resourceManager.runFutureVdsCommand(FutureVDSCommandType.TimeBoundPoll, new org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters(vds.getId(), timeout, java.util.concurrent.TimeUnit.SECONDS)); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = task.get(timeout, java.util.concurrent.TimeUnit.SECONDS); connected = returnValue.getSucceeded(); if (connected) { break; } } catch (java.util.concurrent.TimeoutException | java.lang.InterruptedException | org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ignored) { } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.transport.ProtocolDetector.log.warn("Failed to connect to host", e.getMessage()); org.ovirt.engine.core.bll.transport.ProtocolDetector.log.debug("Exception", e); } } return connected; }
public static void init() { java.lang.Class<?>[] inspectedClasses = new java.lang.Class<?>[]{ org.ovirt.engine.core.common.businessentities.VDS.class, org.ovirt.engine.core.common.businessentities.VdsStatic.class, org.ovirt.engine.core.common.businessentities.VdsDynamic.class }; org.ovirt.engine.core.bll.VdsHandler.updateVdsStatic = new org.ovirt.engine.core.utils.ObjectIdentityChecker(org.ovirt.engine.core.bll.VdsHandler.class, java.util.Arrays.asList(inspectedClasses)); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>EditableVdsField<END_MOD>, java.lang.reflect.Field> pair : extractAnnotatedFields(org.ovirt.engine.core.common.businessentities.<START_MOD>EditableVdsField<END_MOD>.class, inspectedClasses)) { <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.VDSStatus> statusList = java.util.Arrays.asList(pair.getFirst().onStatuses()); java.lang.String fieldName = pair.getSecond().getName(); if (statusList.isEmpty()) { <END_MOD>org.ovirt.engine.core.bll.VdsHandler.updateVdsStatic.addPermittedFields(<START_MOD>fieldName); } else<END_MOD> { org.ovirt.engine.core.bll.VdsHandler.updateVdsStatic.addField(<START_MOD>statusList, fieldName); } } boolean stuff = true; }<END_MOD>	public static void init() { java.lang.Class<?>[] inspectedClasses = new java.lang.Class<?>[]{ org.ovirt.engine.core.common.businessentities.VDS.class, org.ovirt.engine.core.common.businessentities.VdsStatic.class, org.ovirt.engine.core.common.businessentities.VdsDynamic.class }; org.ovirt.engine.core.bll.VdsHandler.updateVdsStatic = new org.ovirt.engine.core.utils.ObjectIdentityChecker(org.ovirt.engine.core.bll.VdsHandler.class, java.util.Arrays.asList(inspectedClasses)); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.EditableVdsField, java.lang.reflect.Field> pair : extractAnnotatedFields(org.ovirt.engine.core.common.businessentities.EditableVdsField.class, inspectedClasses)) { java.util.List<org.ovirt.engine.core.common.businessentities.VDSStatus> statusList = java.util.Arrays.asList(pair.getFirst().onStatuses()); java.lang.String fieldName = pair.getSecond().getName(); if (statusList.isEmpty()) { org.ovirt.engine.core.bll.VdsHandler.updateVdsStatic.addPermittedFields(fieldName); } else { org.ovirt.engine.core.bll.VdsHandler.updateVdsStatic.addField(statusList, fieldName); } } }
public static void init() { final java.lang.Class<?>[] inspectedClassNames = new java.lang.Class<?>[]{ org.ovirt.engine.core.common.businessentities.VmBase.class, org.ovirt.engine.core.common.businessentities.VmTemplate.class }; org.ovirt.engine.core.bll.VmTemplateHandler.updateVmTemplate = new org.ovirt.engine.core.utils.ObjectIdentityChecker(org.ovirt.engine.core.bll.VmTemplateHandler.class); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>EditableVmField<END_MOD>, java.lang.reflect.Field> pair : org.ovirt.engine.core.common.backendinterfaces.BaseHandler.extractAnnotatedFields(org.ovirt.engine.core.common.businessentities.<START_MOD>EditableVmField<END_MOD>.class, inspectedClassNames)) { org.ovirt.engine.core.<START_MOD>common.businessentities.EditableVmField annotation = pair.getFirst(); java.util.List<org.ovirt.engine.core.common.businessentities.VMStatus> statusList = java.util.Arrays.asList(annotation.onStatuses()); java.lang.String fieldName = pair.getSecond().getName(); if ((statusList.isEmpty()) || (annotation.onTemplate())) { org.ovirt.engine.core.<END_MOD>bll.VmTemplateHandler.updateVmTemplate.addPermittedFields(<START_MOD>fieldName<END_MOD>); } } }	public static void init() { final java.lang.Class<?>[] inspectedClassNames = new java.lang.Class<?>[]{ org.ovirt.engine.core.common.businessentities.VmBase.class, org.ovirt.engine.core.common.businessentities.VmTemplate.class }; org.ovirt.engine.core.bll.VmTemplateHandler.updateVmTemplate = new org.ovirt.engine.core.utils.ObjectIdentityChecker(org.ovirt.engine.core.bll.VmTemplateHandler.class); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.EditableVmTemplateField, java.lang.reflect.Field> pair : org.ovirt.engine.core.common.backendinterfaces.BaseHandler.extractAnnotatedFields(org.ovirt.engine.core.common.businessentities.EditableVmTemplateField.class, inspectedClassNames)) { java.lang.String fieldName = pair.getSecond().getName(); org.ovirt.engine.core.bll.VmTemplateHandler.updateVmTemplate.addPermittedFields(fieldName); } for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.EditableVmField, java.lang.reflect.Field> pair : org.ovirt.engine.core.common.backendinterfaces.BaseHandler.extractAnnotatedFields(org.ovirt.engine.core.common.businessentities.EditableVmField.class, inspectedClassNames)) { org.ovirt.engine.core.common.businessentities.EditableVmField annotation = pair.getFirst(); java.util.List<org.ovirt.engine.core.common.businessentities.VMStatus> statusList = java.util.Arrays.asList(annotation.onStatuses()); java.lang.String fieldName = pair.getSecond().getName(); if (statusList.isEmpty()) { org.ovirt.engine.core.bll.VmTemplateHandler.updateVmTemplate.addPermittedFields(fieldName); } } }
protected void postSaveAction(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.common.businessentities.network.ProviderNetwork providedBy, boolean succeeded) { super.postSaveAction(id, succeeded); if (!succeeded) { return; } attachNetworkToClusters(id); if (((getExport().getEntity()) && (getCreateSubnet().getEntity())) && (providedBy != null)) { getSubnetModel().setExternalNetwork(providedBy); getSubnetModel().flush(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.AddSubnetToProvider, new org.ovirt.engine.core.common.action.AddExternalSubnetParameters(getSubnetModel().getSubnet(), providedBy.getProviderId(), providedBy.getExternalId())); } }	private boolean isActionSucceeded(org.ovirt.engine.core.common.action.VdcReturnValueBase retVal) { return (retVal != null) && (retVal.getSucceeded()); }
protected void postSaveAction(org.ovirt.engine.core.common.businessentities.network.Network network, boolean succeeded) { postSaveAction(network.getId(), network.getProvidedBy(), <START_MOD>succeeded<END_MOD>); }	private void postAddNetworkOnProvider(org.ovirt.engine.core.common.action.VdcReturnValueBase retVal) { if (isActionSucceeded(retVal)) { org.ovirt.engine.core.common.businessentities.network.Network network = ((org.ovirt.engine.core.common.businessentities.network.Network) (retVal.getActionReturnValue())); postSaveAction(network.getId(), network.getProvidedBy()); } else { failedPostSaveAction(); } }
private org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback addNetworkCallback(final boolean addOnProvider) { return new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result1) { org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = result1.getReturnValue(); boolean succeeded = false; if ((retVal != null) && (retVal.getSucceeded())) { succeeded = true; } if (!succeeded) { postSaveAction(null, null, succeeded); } else if (addOnProvider) { postSaveAction(((org.ovirt.engine.core.common.businessentities.network.Network) (retVal.getActionReturnValue())), succeeded); } else { postSaveAction(((org.ovirt.engine.core.compat.Guid) (retVal.getActionReturnValue())), null, succeeded); } } }; }	private void postAddNetwork(org.ovirt.engine.core.common.action.VdcReturnValueBase retVal) { if (isActionSucceeded(retVal)) { postSaveAction(((org.ovirt.engine.core.compat.Guid) (retVal.getActionReturnValue())), null); } else { failedPostSaveAction(); } }
@java.lang.Override protected void executeSave() { <START_MOD>boolean addOnProvider = getExport().getEntity(); <END_MOD>org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback addNetworkCallback = <START_MOD>addNetworkCallback(addOnProvider); final org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters parameters = <END_MOD>new org.ovirt.engine.<START_MOD>core.common.action.AddNetworkStoragePoolParameters(getSelectedDc().getId(), getNetwork()); parameters.setVnicProfileRequired(false); if (addOnProvider) { org.ovirt.engine.core.common.businessentities.Provider externalProvider = getExternalProviders().getSelectedItem(); org.ovirt.engine.core.common.businessentities.network.ProviderNetwork providerNetwork = new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(); providerNetwork.setProviderId(externalProvider.getId()); getNetwork().setProvidedBy(providerNetwork); org.ovirt.engine.<END_MOD>ui.<START_MOD>frontend.Frontend.getInstance().runAction(VdcActionType.AddNetworkOnProvider, parameters, addNetworkCallback, null); } else<END_MOD> { org.ovirt.engine.ui.<START_MOD>frontend.Frontend.getInstance().runAction(VdcActionType.AddNetwork, parameters, addNetworkCallback,<END_MOD> null); } }	@java.lang.Override protected void executeSave() { final org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters parameters = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(getSelectedDc().getId(), getNetwork()); parameters.setVnicProfileRequired(false); if (getExport().getEntity()) { org.ovirt.engine.core.common.businessentities.Provider externalProvider = getExternalProviders().getSelectedItem(); org.ovirt.engine.core.common.businessentities.network.ProviderNetwork providerNetwork = new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(); providerNetwork.setProviderId(externalProvider.getId()); getNetwork().setProvidedBy(providerNetwork); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.AddNetworkOnProvider, parameters, addNetworkOnProviderCallback(), null); } else { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.AddNetwork, parameters, addNetworkCallback(), null); } }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { java.util.List<org.ovirt.engine.core.common.businessentities.Label> allLabels = ((java.util.List<org.ovirt.engine.core.common.businessentities.Label>) (result)); if (getIsNew()) { labelList.setItems(allLabels); } else { java.util.List<org.ovirt.engine.core.common.businessentities.Label> selectedLabels = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Label label : allLabels) { if (label.getHosts().contains(getHostId())) { selectedLabels.add(label); } } labelList.setItems(allLabels); labelList.setSelectedItems(selectedLabels); } labelList.setIsChangeable(false); }	@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { final java.util.List<org.ovirt.engine.core.common.businessentities.Label> allLabels = ((java.util.List<org.ovirt.engine.core.common.businessentities.Label>) (result)); if (getIsNew()) { labelList.setItems(allLabels); labelList.setSelectedItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Label>()); } else { org.ovirt.engine.ui.frontend.AsyncQuery getLabelsByHostIdQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); getLabelsByHostIdQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.Label> hostLabelsList = ((java.util.List<org.ovirt.engine.core.common.businessentities.Label>) (returnValue)); labelList.setItems(allLabels); labelList.setSelectedItems(hostLabelsList); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getLabelListByEntityId(getLabelsByHostIdQuery, getHostId()); } labelList.setIsChangeable(false); }
public void getLabelList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, boolean doRefresh) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Label> list = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Label>) (source)); java.util.Collections.sort(list, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); return list; } return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Label>(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllLabels, (doRefresh ? new org.ovirt.engine.core.common.queries.VdcQueryParametersBase() : new org.ovirt.engine.core.common.queries.VdcQueryParametersBase().withoutRefresh()), aQuery); }	public void getLabelListByEntityId(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid entityId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Label> list = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Label>) (source)); java.util.Collections.sort(list, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); return list; } return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Label>(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetLabelByEntityId, new org.ovirt.engine.core.common.queries.IdQueryParameters(entityId), aQuery); }
private void labelsChanged() { behavior.labelChanged(getLabelList().getSelectedItems()); }	private void updateLabelList() { org.ovirt.engine.ui.frontend.AsyncQuery getLabelsQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); getLabelsQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { final java.util.List<org.ovirt.engine.core.common.businessentities.Label> allLabels = ((java.util.List<org.ovirt.engine.core.common.businessentities.Label>) (result)); if (getIsNew()) { labelList.setItems(allLabels); labelList.setSelectedItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Label>()); } else { org.ovirt.engine.ui.frontend.AsyncQuery getLabelsByVmIdQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); getLabelsByVmIdQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.Label> vmLabelsList = ((java.util.List<org.ovirt.engine.core.common.businessentities.Label>) (returnValue)); labelList.setItems(allLabels); labelList.setSelectedItems(vmLabelsList); } }; org.ovirt.engine.core.compat.Guid vmId = ((org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior) (getBehavior())).getVm().getId(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getLabelListByEntityId(getLabelsByVmIdQuery, vmId); } labelList.setIsChangeable(false); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getLabelList(getLabelsQuery); }
public void labelChanged(java.util.List<org.ovirt.engine.core.common.businessentities.Label> labels) { }	private boolean canUseHostCpuAvailability() { boolean clusterSupportsHostCpu = (getCompatibilityVersion()) != null; org.ovirt.engine.core.common.businessentities.MigrationSupport migrationMode = getModel().getMigrationMode().getSelectedItem(); boolean nonMigratable = (org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST) == migrationMode; boolean manuallyMigratable = (org.ovirt.engine.core.common.businessentities.MigrationSupport.IMPLICITLY_NON_MIGRATABLE) == migrationMode; java.lang.Boolean isAutoAssign = getModel().getIsAutoAssign().getEntity(); if ((!clusterSupportsHostCpu) || (clusterHasPpcArchitecture())) { return false; } else { return nonMigratable || (manuallyMigratable && isAutoAssign); } }
private void updateLabelList() { org.ovirt.engine.ui.frontend.AsyncQuery getLabelsQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); getLabelsQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { java.util.List<org.ovirt.engine.core.common.businessentities.Label> allLabels = ((java.util.List<org.ovirt.engine.core.common.businessentities.Label>) (result)); if (getIsNew()) { labelList.setItems(allLabels); } else { java.util.List<org.ovirt.engine.core.common.businessentities.Label> selectedLabels = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Label label : allLabels) { if (label.getHosts().contains(getHostId())) { selectedLabels.add(label); } } labelList.setItems(allLabels); labelList.setSelectedItems(selectedLabels); } labelList.setIsChangeable(false); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getLabelList(getLabelsQuery); }	private void updateLabelList() { final org.ovirt.engine.ui.frontend.AsyncQuery getAllLabelsQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); getAllLabelsQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { final java.util.List<org.ovirt.engine.core.common.businessentities.Label> allLabels = ((java.util.List<org.ovirt.engine.core.common.businessentities.Label>) (result)); if (getIsNew()) { labelList.setItems(allLabels); labelList.setSelectedItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Label>()); } else { org.ovirt.engine.ui.frontend.AsyncQuery getLabelsByHostIdQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); getLabelsByHostIdQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.Label> hostLabelsList = ((java.util.List<org.ovirt.engine.core.common.businessentities.Label>) (returnValue)); labelList.setItems(allLabels); labelList.setSelectedItems(hostLabelsList); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getLabelListByEntityId(getLabelsByHostIdQuery, getHostId()); } labelList.setIsChangeable(false); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getLabelList(getAllLabelsQuery); }
@org.ovirt.engine.ui.common.DefaultStringValue("Affinity Label(s)") java.lang.String affinityLabels();	java.lang.String affinityLabels();
<START_MOD>@org.ovirt.engine.ui.common.DefaultStringValue( VM permissions <END_MOD>java.lang.String copyVmPermissions();	java.lang.String copyVmPermissions();
public void getLabelList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { getLabelList(aQuery, true); }	public void getLabelList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Label> list = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Label>) (source)); java.util.Collections.sort(list, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); return list; } return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Label>(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllLabels, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Disk.class, to = org.ovirt.engine.api.model.DiskAttachment.class) public org.ovirt.engine.api.model.DiskAttachment mapDiskToDiskAttachment(org.ovirt.engine.api.model.Disk disk, org.ovirt.engine.api.model.DiskAttachment attachment) { if (disk.isSetInterface()) { attachment.setInterface(disk.getInterface()); } if (disk.isSetBootable()) { attachment.setBootable(disk.isBootable()); } return attachment; }	private org.ovirt.engine.core.common.businessentities.storage.DiskVmElement updateDiskVmElementFromDisk(org.ovirt.engine.api.model.Disk disk, org.ovirt.engine.core.common.businessentities.storage.DiskVmElement diskVmElement) { if (disk.isSetInterface()) { diskVmElement.setDiskInterface(org.ovirt.engine.core.common.businessentities.storage.DiskInterface.forValue(disk.getInterface().name().toLowerCase())); } if (disk.isSetBootable()) { diskVmElement.setBoot(disk.isBootable()); } return diskVmElement; }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Disk disk) { org.ovirt.engine.api.model.DiskAttachment diskAttachment = new org.ovirt.engine.api.model.DiskAttachment(); <START_MOD>if (disk.isSetBootable()) { diskAttachment.setBootable(disk.isBootable()); } if (disk.isSetInterface()) { <END_MOD>diskAttachment.setInterface(<START_MOD>disk.getInterface()); } else { diskAttachment.setInterface(<END_MOD>DiskInterface.VIRTIO); <START_MOD>}<END_MOD> diskAttachment.setDisk(disk); if (disk.isSetId()) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(disk.getId()); return getAttachmentsResource().attachDiskToVm(this, diskAttachment, new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource.OldAttachDiskResolver(diskId)); } else { return getAttachmentsResource().createDisk(this, diskAttachment, new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource.OldAddDiskResolver()); } }	@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Disk disk) { org.ovirt.engine.api.model.DiskAttachment diskAttachment = new org.ovirt.engine.api.model.DiskAttachment(); if (disk.isSetBootable()) { diskAttachment.setBootable(disk.isBootable()); } else { diskAttachment.setBootable(false); } if (disk.isSetInterface()) { diskAttachment.setInterface(disk.getInterface()); } else { diskAttachment.setInterface(DiskInterface.VIRTIO); } diskAttachment.setDisk(disk); if (disk.isSetId()) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(disk.getId()); return getAttachmentsResource().attachDiskToVm(this, diskAttachment, new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource.OldAttachDiskResolver(diskId)); } else { return getAttachmentsResource().createDisk(this, diskAttachment, new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource.OldAddDiskResolver()); } }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters(org.ovirt.engine.api.model.Disk incoming, org.ovirt.engine.core.common.businessentities.storage.Disk entity) { <START_MOD>org.ovirt.engine.api.model.DiskAttachment diskAttachmentFromDb = org.ovirt.engine.api.restapi.resource.BackendApiResource.getInstance().getVmsResource().getVmResource(vmId.toString()).getDiskAttachmentsResource().getAttachmentResource(entity.getId().toString()).get(); org.ovirt.engine.api.model.DiskAttachment updatedDiskAttachment = mapDiskToDiskAttachment(incoming, diskAttachmentFromDb); <END_MOD>return new org.ovirt.engine.core.common.action.VmDiskOperationParameterBase(<START_MOD>org.ovirt.engine.api.restapi.types.DiskAttachmentMapper.map(updatedDiskAttachment, <END_MOD>new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(entity.getId(), vmId)<START_MOD>)<END_MOD>, map(incoming, entity)); }	@java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters(org.ovirt.engine.api.model.Disk incoming, org.ovirt.engine.core.common.businessentities.storage.Disk entity) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dveFromDb = runQuery(VdcQueryType.GetDiskVmElementById, new org.ovirt.engine.core.common.queries.VmDeviceIdQueryParameters(new org.ovirt.engine.core.common.businessentities.VmDeviceId(entity.getId(), vmId))).getReturnValue(); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement updatedDve = updateDiskVmElementFromDisk(incoming, dveFromDb); return new org.ovirt.engine.core.common.action.VmDiskOperationParameterBase(updatedDve, map(incoming, entity)); }
private void completeNetworkAttachment(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment, org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks) { <START_MOD>completeDefaultIpConfiguration(networkAttachment.getIpConfiguration()); <END_MOD>org.ovirt.engine.core.compat.Guid networkId = networkAttachment.getNetworkId(); java.lang.String networkName = networkAttachment.getNetworkName(); if ((networkId == null) && (networkName == null)) { return; } if (networkName != null) { org.ovirt.engine.core.common.businessentities.network.Network network = getNetworkByName(networkName, clusterNetworks); if (network != null) { if (networkId == null) { networkAttachment.setNetworkId(network.getId()); } else { } } } else { org.ovirt.engine.core.common.businessentities.network.Network network = getNetworkById(networkId, clusterNetworks); networkAttachment.setNetworkName(network.getName()); } }	private void completeNetworkAttachment(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment, org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks) { org.ovirt.engine.core.compat.Guid networkId = networkAttachment.getNetworkId(); java.lang.String networkName = networkAttachment.getNetworkName(); if ((networkId == null) && (networkName == null)) { return; } if (networkName != null) { org.ovirt.engine.core.common.businessentities.network.Network network = getNetworkByName(networkName, clusterNetworks); if (network != null) { if (networkId == null) { networkAttachment.setNetworkId(network.getId()); } else { } } } else { org.ovirt.engine.core.common.businessentities.network.Network network = getNetworkById(networkId, clusterNetworks); networkAttachment.setNetworkName(network.getName()); } }
private org.ovirt.engine.api.extensions.ExtMap loginOnBehalf(org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser) { java.util.Map<java.lang.String, java.lang.Object> response = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.findPrincipalsByIds(dbUser.getDomain(), dbUser.getNamespace(), java.util.Arrays.asList(dbUser.getExternalId()), true, true); java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> principalRecords = java.util.Collections.emptyList(); if (response.containsKey("result")) { principalRecords = ((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (response.get("result"))); } if (principalRecords.isEmpty()) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PRINCIPAL_NOT_FOUND, java.lang.String.format( user %s in domain   dbUser.getLoginName(), dbUser.getDomain())); } return principalRecords.iterator().next(); }	private org.ovirt.engine.api.extensions.ExtMap loginOnBehalf(org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser) { java.util.Map<java.lang.String, java.lang.Object> response = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.findLoginOnBehalfPrincipalById(dbUser.getDomain(), dbUser.getNamespace(), java.util.Arrays.asList(dbUser.getExternalId()), true, true); java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> principalRecords = java.util.Collections.emptyList(); if (response.containsKey("result")) { principalRecords = ((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (response.get("result"))); } if (principalRecords.isEmpty()) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PRINCIPAL_NOT_FOUND, java.lang.String.format(" user %s in domain '%s", dbUser.getLoginName(), dbUser.getDomain())); } return principalRecords.iterator().next(); }
public static java.util.Map<java.lang.String, java.lang.Object> findPrincipalsByIds(java.lang.String domain, java.lang.String namespace, java.util.Collection<java.lang.String> ids, boolean groupsResolving, boolean groupsResolvingRecursive) { java.util.Map<java.lang.String, java.lang.Object> params = new java.util.HashMap<>(); params.put("domain", domain); params.put("namespace", namespace); params.put("ids", ids); params.put("groups_resolving", groupsResolving); params.put("groups_resolving_recursive", groupsResolvingRecursive); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.search(null, params, "find-principals-by-ids", org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.publicAuthzSearchScope); }	public static java.util.Map<java.lang.String, java.lang.Object> findLoginOnBehalfPrincipalById(java.lang.String domain, java.lang.String namespace, java.util.Collection<java.lang.String> ids, boolean groupsResolving, boolean groupsResolvingRecursive) { java.util.Map<java.lang.String, java.lang.Object> params = new java.util.HashMap<>(); params.put("domain", domain); params.put("namespace", namespace); params.put("ids", ids); params.put("groups_resolving", groupsResolving); params.put("groups_resolving_recursive", groupsResolvingRecursive); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.search(null, params, "find-login-on-behalf-principal-by-id", org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.publicAuthzSearchScope); }
private java.lang.String getUserName(java.lang.Object dbUserObject) { java.lang.String userName = ""; if (dbUserObject != null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = ((org.ovirt.engine.core.common.businessentities.aaa.DbUser) (dbUserObject)); if ((org.ovirt.engine.ui.uicompat.external.StringUtils.isNotEmpty(dbUser.getFirstName())) || (org.ovirt.engine.ui.uicompat.external.StringUtils.isNotEmpty(dbUser.getLastName()))) { userName = messages.userName(nullToEmpty(dbUser.getFirstName()), nullToEmpty(dbUser.getLastName())); } else { userName = dbUser.getLoginName(); } } return userName; }	private java.lang.String getUserName(org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser) { if ((org.ovirt.engine.ui.uicompat.external.StringUtils.isNotEmpty(dbUser.getFirstName())) || (org.ovirt.engine.ui.uicompat.external.StringUtils.isNotEmpty(dbUser.getLastName()))) { return messages.userName(nullToEmpty(dbUser.getFirstName()), nullToEmpty(dbUser.getLastName())); } return dbUser.getLoginName(); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.vms.VmGeneralModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmGeneralModel) (target)); java.lang.Object dbUser = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (result)).getReturnValue(); model.setCreatedByUser(getUserName(dbUser)); }	@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object result) { org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (result)).getReturnValue(); if (dbUser != null) { setCreatedByUser(getUserName(dbUser)); } }
public static <T> java.util.List<java.lang.String> validateInputs(java.util.List<java.lang.Class<?>> validationGroupList, T parameters) { java.util.List<java.lang.String> messages = java.util.Collections.emptyList(); java.util.Set<javax.validation.ConstraintViolation<T>> violations = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, validationGroupList.toArray(new java.lang.Class<?>[validationGroupList.size()])); if (!(violations.isEmpty())) { messages = new java.util.ArrayList(violations.size()); for (javax.validation.ConstraintViolation<T> constraintViolation : violations) { messages.add(<START_MOD>java.lang.String.format("%1$s[%2$s]", <END_MOD>constraintViolation.getMessage()<START_MOD>, constraintViolation.getPropertyPath())<END_MOD>); } } return messages; }	public static <T> java.util.List<java.lang.String> validateInputs(java.util.List<java.lang.Class<?>> validationGroupList, T parameters) { java.util.List<java.lang.String> messages = java.util.Collections.emptyList(); java.util.Set<javax.validation.ConstraintViolation<T>> violations = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, validationGroupList.toArray(new java.lang.Class<?>[validationGroupList.size()])); if (!(violations.isEmpty())) { messages = new java.util.ArrayList(violations.size()); for (javax.validation.ConstraintViolation<T> constraintViolation : violations) { messages.add(constraintViolation.getMessage()); if ((constraintViolation.getPropertyPath()) != null) { messages.add(EngineMessage.ACTION_TYPE_FAILED_ATTRIBUTE_PATH.name()); messages.add(java.lang.String.format("$path %s", constraintViolation.getPropertyPath())); } } } return messages; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.Erratum getErratumForHost(java.lang.String hostName, java.lang.String erratumId) { org.ovirt.engine.core.bll.host.provider.foreman.ContentHostV30 contentHost = findContentHost(hostName); if (contentHost == null) { org.ovirt.engine.core.bll.host.provider.foreman.KatelloV30Provider.log.error("Failed to find host on provider '{}' by host name '{}' ", provider.getProvider().getName(), hostName); return null; } return runErratumMethod(java.lang.String.format(org.ovirt.engine.core.bll.host.provider.foreman.KatelloV30Provider.CONTENT_HOST_ERRATUM_ENTRY_POINT, contentHost.getId(), erratumId)); }	@java.lang.Override protected java.lang.String getContentHostId(java.lang.String hostName) { org.ovirt.engine.core.bll.host.provider.foreman.ContentHostV30 contentHost = findContentHost(hostName); return contentHost == null ? null : java.lang.String.valueOf(findContentHost(hostName).getId()); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.ErrataData getErrataForHost(java.lang.String hostName, org.ovirt.engine.core.common.queries.ErrataFilter errataFilter) { org.ovirt.engine.core.bll.host.provider.foreman.ContentHostV30 contentHost = findContentHost(hostName); if (contentHost == null) { org.ovirt.engine.core.bll.host.provider.foreman.KatelloV30Provider.log.error("Failed to find host on provider '{}' by host name '{}' ", provider.getProvider().getName(), hostName); return org.ovirt.engine.core.common.businessentities.ErrataData.emptyData(); } if (errataFilter == null) { errataFilter = new org.ovirt.engine.core.common.queries.ErrataFilter(); errataFilter.setErrataTypes(java.util.EnumSet.allOf(Erratum.ErrataType.class)); } errataFilter.setPageSize(org.ovirt.engine.core.bll.host.provider.foreman.UNLIMITED_PAGE_SIZE); java.lang.String relativeUrl = org.ovirt.engine.core.bll.host.provider.foreman.FilteredErrataRelativeUrlBuilder.create(java.lang.String.valueOf(contentHost.getId()), errataFilter, org.ovirt.engine.core.bll.host.provider.foreman.KatelloV30Provider.CONTENT_HOST_ERRATA_ENTRY_POINT).build(); return runErrataListMethod(relativeUrl, hostName); }	@java.lang.Override protected java.lang.String getContentHostErrataEntryPoint() { return org.ovirt.engine.core.bll.host.provider.foreman.KatelloV30Provider.CONTENT_HOST_ERRATA_ENTRY_POINT; }
private java.util.List<org.ovirt.engine.core.bll.host.provider.foreman.ContentHostV30> runContentHostListMethod(java.lang.String relativeUrl) { try { org.ovirt.engine.core.bll.host.provider.foreman.ContentHostsV30Wrapper wrapper = objectMapper.readValue(provider.runHttpGetMethod(relativeUrl), org.ovirt.engine.core.bll.host.provider.foreman.ContentHostsV30Wrapper.class); return java.util.Arrays.asList(wrapper.getResults()); } catch (java.io.IOException e) { return java.util.Collections.emptyList(); } }	private java.util.List<org.ovirt.engine.core.bll.host.provider.foreman.ContentHostV30> runContentHostListMethod(java.lang.String relativeUrl) { try { org.ovirt.engine.core.bll.host.provider.foreman.ContentHostsV30Wrapper wrapper = objectMapper.readValue(provider.runHttpGetMethod(relativeUrl), org.ovirt.engine.core.bll.host.provider.foreman.ContentHostsV30Wrapper.class); return java.util.Arrays.asList(wrapper.getResults()); } catch (java.io.IOException e) { org.ovirt.engine.core.bll.host.provider.foreman.KatelloV30Provider.log.error("Failed to parse list of hosts retrieved from provider '{}' with error '{}'", provider.getProvider().getName(), e.getMessage()); org.ovirt.engine.core.bll.host.provider.foreman.KatelloV30Provider.log.debug("Exception: ", e); return java.util.Collections.emptyList(); } }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.ErrataData getErrataForHost(java.lang.String hostName, org.ovirt.engine.core.common.queries.ErrataFilter errataFilter) { org.ovirt.engine.core.bll.host.provider.foreman.ContentHost contentHost = findContentHost(hostName); if (contentHost == null) { org.ovirt.engine.core.bll.host.provider.foreman.KatelloV21Provider.log.error( to find host on provider '{}' by host name '{}'   provider.getProvider().getName(), hostName); return org.ovirt.engine.core.common.businessentities.ErrataData.emptyData(); } if (errataFilter == null) { errataFilter = new org.ovirt.engine.core.common.queries.ErrataFilter(); errataFilter.setErrataTypes(java.util.EnumSet.allOf(Erratum.ErrataType.class)); } errataFilter.setPageSize(org.ovirt.engine.core.bll.host.provider.foreman.KatelloV21Provider.UNLIMITED_PAGE_SIZE); java.lang.String relativeUrl = org.ovirt.engine.core.bll.host.provider.foreman.FilteredErrataRelativeUrlBuilder.create(contentHost.getUuid(), errataFilter<START_MOD>, org.ovirt.engine.core.bll.host.provider.foreman.KatelloV21Provider.CONTENT_HOST_ERRATA_ENTRY_POINT<END_MOD>).build(); return runErrataListMethod(relativeUrl, hostName); }	@java.lang.Override protected java.lang.String getContentHostErrataEntryPoint() { return org.ovirt.engine.core.bll.host.provider.foreman.KatelloV21Provider.CONTENT_HOST_ERRATA_ENTRY_POINT; }
private org.ovirt.engine.core.common.businessentities.Erratum runErratumMethod(java.lang.String relativeUrl) { try { org.ovirt.engine.core.bll.host.provider.foreman.ExternalErratum erratum = objectMapper.readValue(provider.runHttpGetMethod(relativeUrl), org.ovirt.engine.core.bll.host.provider.foreman.ExternalErratum.class); return mapErratum(erratum); } catch (java.io.IOException e) { return null; } }	@java.lang.Override protected java.lang.String getContentHostErratumEntryPoint() { return org.ovirt.engine.core.bll.host.provider.foreman.KatelloV30Provider.CONTENT_HOST_ERRATUM_ENTRY_POINT; }
public boolean isEmpty() { return (((getOutAverageLinkshare()) == null) && ((getOutAverageUpperlimit()) == null)) && ((getOutAverageRealtime()) == null); }	public boolean isEmpty() { return hostNetworkQosProperties.isEmpty(); }
public static org.ovirt.engine.core.common.businessentities.network.HostNetworkQos fromAnonymousHostNetworkQos(org.ovirt.engine.core.common.businessentities.network.AnonymousHostNetworkQos hostNetworkQos) { org.ovirt.engine.core.common.businessentities.network.HostNetworkQos result = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos(); result.hostNetworkQosProperties = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQosProperties(hostNetworkQos.getHostNetworkQosProperties()); return result; }	public static org.ovirt.engine.core.common.businessentities.network.HostNetworkQos fromAnonymousHostNetworkQos(org.ovirt.engine.core.common.businessentities.network.AnonymousHostNetworkQos hostNetworkQos) { if (hostNetworkQos == null) { return null; } org.ovirt.engine.core.common.businessentities.network.HostNetworkQos result = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos(); result.setId(hostNetworkQos.getId()); result.hostNetworkQosProperties = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQosProperties(hostNetworkQos.getHostNetworkQosProperties()); return result; }
public static org.ovirt.engine.core.common.businessentities.network.NetworkAttachment newNetworkAttachment(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface baseNic, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanDevice, org.ovirt.engine.core.compat.Guid networkAttachmentId, java.util.Set<java.lang.String> networksToSync, org.ovirt.engine.core.common.businessentities.network.HostNetworkQos overridingQos, java.util.Map<java.lang.String, java.lang.String> customProperties) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface targetNic = (vlanDevice == null) ? baseNic : vlanDevice; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); networkAttachment.setId(networkAttachmentId); networkAttachment.setNetworkId(network.getId()); networkAttachment.setNicId(baseNic.getId()); networkAttachment.setNicName(baseNic.getName()); networkAttachment.setOverrideConfiguration(networksToSync.contains(network.getName())); networkAttachment.setProperties(customProperties); networkAttachment.setHostNetworkQos(<START_MOD>org.ovirt.engine.core.common.businessentities.network.AnonymousHostNetworkQos.fromHostNetworkQos(<END_MOD>overridingQos)<START_MOD>)<END_MOD>; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.fillIpConfigurationData(networkAttachment, targetNic); return networkAttachment; }	private static void removeLabel(java.lang.String srcIfaceName, org.ovirt.engine.core.compat.Guid srcIfaceId, java.lang.String label, org.ovirt.engine.ui.uicommonweb.models.hosts.network.DataFromHostSetupNetworksModel dataFromHostSetupNetworksModel) { dataFromHostSetupNetworksModel.removeLabelFromParameters(new org.ovirt.engine.core.common.businessentities.network.NicLabel(srcIfaceId, srcIfaceName, label)); }
public static org.ovirt.engine.core.common.businessentities.network.AnonymousHostNetworkQos fromHostNetworkQos(org.ovirt.engine.core.common.businessentities.network.HostNetworkQos hostNetworkQos) { if (hostNetworkQos == null) { return null; } org.ovirt.engine.core.common.businessentities.network.AnonymousHostNetworkQos result = new org.ovirt.engine.core.common.businessentities.network.AnonymousHostNetworkQos(); result.hostNetworkQosProperties = hostNetworkQos.getHostNetworkQosProperties(); return result; }	public static org.ovirt.engine.core.common.businessentities.network.AnonymousHostNetworkQos fromHostNetworkQos(org.ovirt.engine.core.common.businessentities.network.HostNetworkQos hostNetworkQos) { if (hostNetworkQos == null) { return null; } org.ovirt.engine.core.common.businessentities.network.AnonymousHostNetworkQos result = new org.ovirt.engine.core.common.businessentities.network.AnonymousHostNetworkQos(); result.id = hostNetworkQos.getId(); result.hostNetworkQosProperties = hostNetworkQos.getHostNetworkQosProperties(); return result; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getAllForClusterWithStatusAndPeerStatus(org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.common.businessentities.VDSStatus status, org.ovirt.engine.core.common.businessentities.gluster.PeerStatus peerStatus) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = getCallsHandler().executeReadList("getVdsForClusterWithPeerStatus", org.ovirt.engine.core.dao.VdsDaoImpl.VdsRowMapper.instance, getCustomMapSqlParameterSource().addValue("cluster_id", clusterId).addValue("status", status.getValue()).addValue("peer_status", peerStatus)); return uniteAgents(vdsList); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getAllForClusterWithStatusAndPeerStatus(org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.common.businessentities.VDSStatus status, org.ovirt.engine.core.common.businessentities.gluster.PeerStatus peerStatus) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = getCallsHandler().executeReadList("getVdsForClusterWithPeerStatus", org.ovirt.engine.core.dao.VdsDaoImpl.VdsRowMapper.instance, getCustomMapSqlParameterSource().addValue("cluster_id", clusterId).addValue("status", status.getValue()).addValue("peer_status", peerStatus.name())); return uniteAgents(vdsList); }
private org.ovirt.engine.core.common.businessentities.VDS getAlternateUpServerInCluster(org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.compat.Guid vdsId) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = getVdsDao().getAllForClusterWithStatus(clusterId, VDSStatus.Up); if (vdsList.isEmpty()) { return null; } for (org.ovirt.engine.core.common.businessentities.VDS vds : vdsList) { if (<START_MOD>(<END_MOD>!(vdsId.equals(vds.getId()))) <START_MOD>&& ((vds.getExternalStatus()) == (org.ovirt.engine.core.common.businessentities.ExternalStatus.Ok))) <END_MOD>{ return vds; } } return null; }	private org.ovirt.engine.core.common.businessentities.VDS getAlternateUpServerInCluster(org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.compat.Guid vdsId) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = getVdsDao().getAllForClusterWithStatusAndPeerStatus(clusterId, VDSStatus.Up, PeerStatus.CONNECTED); if (vdsList.isEmpty()) { return null; } for (org.ovirt.engine.core.common.businessentities.VDS vds : vdsList) { if ((!(vdsId.equals(vds.getId()))) && ((vds.getExternalStatus()) == (org.ovirt.engine.core.common.businessentities.ExternalStatus.Ok))) { return vds; } } return null; }
private void setNonOperational(org.ovirt.engine.core.common.businessentities.VDS server) { org.ovirt.engine.core.common.<START_MOD>businessentities.Cluster cluster = getClusterDao().get(server.getClusterId()); if (!(cluster.supportsVirtService())) { org.ovirt.engine.core.common.<END_MOD>action.SetNonOperationalVdsParameters nonOpParams = new org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters(server.getId(), org.ovirt.engine.core.common.businessentities.NonOperationalReason.GLUSTER_COMMAND_FAILED, java.util.Collections.singletonMap(GlusterConstants.COMMAND,   peer status backend.runInternalAction(VdcActionType.SetNonOperationalVds, nonOpParams, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); }<START_MOD> getGlusterServerDao().updatePeerStatus(server.getId(), PeerStatus.DISCONNECTED); }<END_MOD>	private void setNonOperational(org.ovirt.engine.core.common.businessentities.VDS server) { org.ovirt.engine.core.common.businessentities.Cluster cluster = getClusterDao().get(server.getClusterId()); if (!(cluster.supportsVirtService())) { org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters nonOpParams = new org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters(server.getId(), org.ovirt.engine.core.common.businessentities.NonOperationalReason.GLUSTER_COMMAND_FAILED, java.util.Collections.singletonMap(GlusterConstants.COMMAND, "gluster peer status")); backend.runInternalAction(VdcActionType.SetNonOperationalVds, nonOpParams, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); } getGlusterServerDao().updatePeerStatus(server.getId(), PeerStatus.DISCONNECTED); logUtil.logServerMessage(server, AuditLogType.GLUSTER_SERVER_STATUS_DISCONNECTED); }
private org.ovirt.engine.core.dao.gluster.GlusterDBUtils getGlusterDBUtils() { return org.ovirt.engine.core.dao.gluster.GlusterDBUtils.getInstance(); }	private org.ovirt.engine.core.dao.gluster.GlusterDBUtils getGlusterDbUtils() { return org.ovirt.engine.core.dao.gluster.GlusterDBUtils.getInstance(); }
public org.ovirt.engine.core.common.businessentities.VDS getRandomUpServer(org.ovirt.engine.core.compat.Guid clusterId) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> servers = getAllUpServers(clusterId); if ((servers == null) || (servers.isEmpty())) { return null; } return servers.get(new java.util.Random().nextInt(servers.size())); }	public org.ovirt.engine.core.common.businessentities.VDS getRandomUpServer(org.ovirt.engine.core.compat.Guid clusterId) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> servers = getAllUpServers(clusterId); if (org.apache.commons.collections.CollectionUtils.isEmpty(servers)) { return null; } return servers.get(new java.util.Random().nextInt(servers.size())); }
private boolean validateVmwareConfiguration() { getvCenter().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(255), new org.ovirt.engine.ui.uicommonweb.validation.HostAddressValidation() }); getEsx().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(255), new org.ovirt.engine.ui.uicommonweb.validation.HostAddressValidation() }); getVmwareDatacenter().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); getUsername().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.NameAndOptionalDomainValidation() }); getPassword().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); <START_MOD>getDataCenters().setIsValid(((getDataCenters().getSelectedItem().getId()) != null)); <END_MOD>return ((((<START_MOD>(<END_MOD>getvCenter().getIsValid()) && (getEsx().getIsValid())) && (getVmwareDatacenter().getIsValid())) && (getUsername().getIsValid())) && (getPassword().getIsValid())<START_MOD>) && (getDataCenters().getIsValid()); }<END_MOD>	private boolean validateVmwareConfiguration() { getvCenter().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(255), new org.ovirt.engine.ui.uicommonweb.validation.HostAddressValidation() }); getEsx().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(255), new org.ovirt.engine.ui.uicommonweb.validation.HostAddressValidation() }); getVmwareDatacenter().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); getUsername().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.NameAndOptionalDomainValidation() }); getPassword().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); return ((((getvCenter().getIsValid()) && (getEsx().getIsValid())) && (getVmwareDatacenter().getIsValid())) && (getUsername().getIsValid())) && (getPassword().getIsValid()); }
@java.lang.Override public <START_MOD>void<END_MOD> <START_MOD>handleFailure<END_MOD>() { <START_MOD>updateDiskStatus(ImageStatus<END_MOD>.<START_MOD>ILLEGAL<END_MOD>); }	@java.lang.Override public void handleFailure() { updateDiskStatus(ImageStatus.ILLEGAL); removeDisk(); }
@java.lang.Override protected void executeCommand() { persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.DownloadImageCommand.getParameters().getParentCommand()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.DownloadImage, getVDSParameters()); if ((vdsReturnValue != null) && (vdsReturnValue.getSucceeded())) { org.ovirt.engine.core.bll.storage.DownloadImageCommand.getTaskIdList().add(createTask(org.ovirt.engine.core.bll.storage.DownloadImageCommand.getAsyncTaskId(), vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.DownloadImageCommand.getParameters().getParentCommand(), VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.DownloadImageCommand.getParameters().getDestinationImageId())); } setSucceeded(vdsReturnValue.getSucceeded()); }	@java.lang.Override protected void executeCommand() { persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.DownloadImageCommand.getParameters().getParentCommand()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.DownloadImage, getVDSParameters()); if ((vdsReturnValue != null) && (vdsReturnValue.getSucceeded())) { org.ovirt.engine.core.bll.storage.DownloadImageCommand.getTaskIdList().add(createTask(org.ovirt.engine.core.bll.storage.DownloadImageCommand.getAsyncTaskId(), vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.DownloadImageCommand.getParameters().getParentCommand(), VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.DownloadImageCommand.getParameters().getDestinationImageId())); } setSucceeded((vdsReturnValue != null ? vdsReturnValue.getSucceeded() : false)); }
<START_MOD>private<END_MOD> <START_MOD>void<END_MOD> <START_MOD>attachDiskToTemplate(<END_MOD>org.ovirt.engine.core.compat.Guid <START_MOD>templateId<END_MOD>) { <START_MOD>org.ovirt.engine.core.common.businessentities.storage.DiskImage<END_MOD> <START_MOD>templateDiskImage = <END_MOD>org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.<START_MOD>getParameters().getDiskImage(); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(templateDiskImage.getId<END_MOD>(), <START_MOD>templateId); dve.setDiskInterface(DiskInterface.VirtIO); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskVmElementDao().save(dve); org.ovirt.engine.core.bll.utils.VmDeviceUtils.addDiskDevice(templateId, templateDiskImage.getId()<END_MOD>); }	private void attachDiskToTemplate(org.ovirt.engine.core.compat.Guid templateId) { org.ovirt.engine.core.common.businessentities.storage.DiskImage templateDiskImage = org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getDiskImage(); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(templateDiskImage.getId(), templateId); dve.setDiskInterface(DiskInterface.VirtIO); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getDiskVmElementDao().save(dve); org.ovirt.engine.core.bll.utils.VmDeviceUtils.addDiskDevice(templateId, templateDiskImage.getId()); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setImageGroupID(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setDestinationImageId(org.ovirt.engine.core.compat.Guid.newGuid()); persistCommand(org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getParentCommand(), true); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImageGroupID())); org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.AddDisk, createAddDiskParameters(), org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContextForTasks(org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getContext())); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setNextPhase(ImportRepoImageParameters.Phase.DOWNLOAD); persistCommand(org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getParentCommand(), true); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { setupParameters(); persistCommand(org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getParentCommand(), true); org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.AddDisk, createAddDiskParameters(), org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContextForTasks(org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getContext())); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setNextPhase(ImportRepoImageParameters.Phase.DOWNLOAD); persistCommand(org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getParentCommand(), true); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.setSucceeded(true); }
@java.lang.Override public <START_MOD>boolean performNextOperation(int completedChildCount<END_MOD>) { <START_MOD>if ((org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getNextPhase()) == (ImportRepoImageParameters.Phase.DOWNLOAD)) { org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.DownloadImage, createDownloadImageParameters(), org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContextForTasks(org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getContext())); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setNextPhase(ImportRepoImageParameters.Phase.END); persistCommand(org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getParentCommand(), true); <END_MOD>return <START_MOD>true<END_MOD>; }<START_MOD> return false; }<END_MOD>	@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getNextPhase()) == (ImportRepoImageParameters.Phase.DOWNLOAD)) { org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setNextPhase(ImportRepoImageParameters.Phase.END); persistCommand(org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getParentCommand(), true); org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.DownloadImage, createDownloadImageParameters(), org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContextForTasks(org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getContext())); return true; } return false; }
@java.lang.Override public void <START_MOD>endSuccessfully<END_MOD>() { super.endSuccessfully(); <START_MOD>if (org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImportAsTemplate()) { org.ovirt.engine.core.compat.Guid newTemplateId = createTemplate(); if (newTemplateId != null) { attachDiskToTemplate(newTemplateId); <END_MOD>}<START_MOD> } updateDiskStatus(ImageStatus.OK); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getReturnValue().setSucceeded(true); }<END_MOD>	@java.lang.Override public void endSuccessfully() { super.endSuccessfully(); if (org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImportAsTemplate()) { org.ovirt.engine.core.compat.Guid newTemplateId = createTemplate(); if (newTemplateId != null) { attachDiskToTemplate(newTemplateId); } } updateDiskStatus(ImageStatus.OK); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.setSucceeded(true); }
public org.ovirt.engine.core.<START_MOD>common<END_MOD>.<START_MOD>businessentities.Cluster<END_MOD> <START_MOD>getCluster<END_MOD>(org.ovirt.engine.core.compat.Guid <START_MOD>clusterId) { return<END_MOD> org.ovirt.engine.core.<START_MOD>dal<END_MOD>.<START_MOD>dbbroker<END_MOD>.<START_MOD>DbFacade<END_MOD>.<START_MOD>getInstance()<END_MOD>.<START_MOD>getClusterDao()<END_MOD>.<START_MOD>get<END_MOD>(<START_MOD>clusterId<END_MOD>); }	public org.ovirt.engine.core.common.businessentities.Cluster getCluster(org.ovirt.engine.core.compat.Guid clusterId) { return org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getClusterDao().get(clusterId); }
private void createNewDiskId() { org.ovirt.engine.core.compat.Guid <START_MOD>diskId<END_MOD> =<START_MOD> (!(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().isUsePassedDiskId())) ?<END_MOD> org.ovirt.engine.core.compat.Guid.newGuid<START_MOD>() : org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getDiskInfo().getId<END_MOD>(); org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getDiskInfo().setId(<START_MOD>diskId<END_MOD>); if (!(isFloatingDisk())) { org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getDiskVmElement().getId().setDeviceId(<START_MOD>diskId<END_MOD>); } }	private void createNewDiskId() { org.ovirt.engine.core.compat.Guid diskId = (org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().isUsePassedDiskId()) ? org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getDiskInfo().getId() : org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getDiskInfo().setId(diskId); if (!(isFloatingDisk())) { org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getDiskVmElement().getId().setDeviceId(diskId); } }
@java.lang.Override <START_MOD>public<END_MOD> void <START_MOD>endWithFailure<END_MOD>() { <START_MOD>updateDiskStatus(ImageStatus<END_MOD>.<START_MOD>ILLEGAL<END_MOD>); }	@java.lang.Override public void endWithFailure() { updateDiskStatus(ImageStatus.ILLEGAL); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.setSucceeded(true); }
public void connectStoragePool() { java.util.Map<java.lang.String, java.lang.String> storageDomains = null; storageDomains = org.ovirt.engine.core.vdsbroker.storage.StoragePoolDomainHelper.buildStoragePoolDomainsMap(ConnectStoragePoolVDSCommand.getParameters().getStorageDomains()<START_MOD>); log.info( with domain map: {} storageDomains<END_MOD>); status = ConnectStoragePoolVDSCommand.getBroker().connectStoragePool(ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId().toString(), ConnectStoragePoolVDSCommand.getParameters().getVds().getVdsSpmId(), ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId().toString(), ConnectStoragePoolVDSCommand.getParameters().getMasterDomainId().toString(), ConnectStoragePoolVDSCommand.getParameters().getStoragePool().getMasterDomainVersion(), storageDomains); }	public void connectStoragePool() { java.util.Map<java.lang.String, java.lang.String> storageDomains = null; storageDomains = org.ovirt.engine.core.vdsbroker.storage.StoragePoolDomainHelper.buildStoragePoolDomainsMap(ConnectStoragePoolVDSCommand.getParameters().getStorageDomains()); log.info("Executing with domain map: {}", storageDomains); status = ConnectStoragePoolVDSCommand.getBroker().connectStoragePool(ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId().toString(), ConnectStoragePoolVDSCommand.getParameters().getVds().getVdsSpmId(), ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId().toString(), ConnectStoragePoolVDSCommand.getParameters().getMasterDomainId().toString(), ConnectStoragePoolVDSCommand.getParameters().getStoragePool().getMasterDomainVersion(), storageDomains); }
@java.lang.Override public org.ovirt.engine.api.resource.ClusterLevelsResource getClusterLevelsResource() { return null; }	@java.lang.Override public org.ovirt.engine.api.resource.ClusterLevelsResource getClusterLevelsResource() { return inject(new org.ovirt.engine.api.restapi.resource.BackendClusterLevelsResource()); }
@java.lang.Override public org.ovirt.engine.api.resource.ClusterLevelResource getLevelResource(java.lang.String id) { return null; }	@java.lang.Override public org.ovirt.engine.api.resource.ClusterLevelResource getLevelResource(java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendClusterLevelResource(id, this)); }
public org.ovirt.engine.api.model.ClusterLevel makeClusterLevel(java.lang.String version) { org.ovirt.engine.api.model.ClusterLevel level = new org.ovirt.engine.api.model.ClusterLevel(); level.setId(version); if (!(isFiltered())) { org.ovirt.engine.api.model.CpuTypes cpuTypes = level.getCpuTypes(); for (org.ovirt.engine.core.common.businessentities.ServerCpu serverCpu : getServerCpuList(version)) { org.ovirt.engine.api.model.CpuType cpuType = new org.ovirt.engine.api.model.CpuType(); cpuType.setName(serverCpu.getCpuName()); cpuType.setLevel(serverCpu.getLevel()); cpuType.setArchitecture(org.ovirt.engine.api.restapi.types.CPUMapper.map(serverCpu.getArchitecture(), null)); cpuTypes.getCpuTypes().add(cpuType); } level.setCpuTypes(cpuTypes); } return level; }	public org.ovirt.engine.api.model.ClusterLevel makeClusterLevel(java.lang.String version) { org.ovirt.engine.api.model.ClusterLevel level = new org.ovirt.engine.api.model.ClusterLevel(); level.setId(version); if (!(isFiltered())) { org.ovirt.engine.api.model.CpuTypes cpuTypes = new org.ovirt.engine.api.model.CpuTypes(); for (org.ovirt.engine.core.common.businessentities.ServerCpu serverCpu : getServerCpuList(version)) { org.ovirt.engine.api.model.CpuType cpuType = new org.ovirt.engine.api.model.CpuType(); cpuType.setName(serverCpu.getCpuName()); cpuType.setLevel(serverCpu.getLevel()); cpuType.setArchitecture(org.ovirt.engine.api.restapi.types.CPUMapper.map(serverCpu.getArchitecture(), null)); cpuTypes.getCpuTypes().add(cpuType); } level.setCpuTypes(cpuTypes); } return org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(level); }
@java.lang.Override public void before(org.jboss.arquillian.test.spi.event.suite.Before test) { mockEJBStrategyRule.starting(null); }	@java.lang.Override public void before(org.jboss.arquillian.test.spi.event.suite.Before test) { mockEJBStrategyRule = new org.ovirt.engine.core.utils.MockEJBStrategyRule(); mockEJBStrategyRule.starting(null); }
@org.junit.Before public void <START_MOD>setUpDefaultEnvironment<END_MOD>() {<START_MOD> java.lang.System.setProperty("ovirt-engine.config.defaults", "src/test/resources/engine.conf.arquillian"); org.ovirt.engine.core.common.config.Config.setConfigUtils(new org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils()); org.ovirt.engine.core.common.config.Config.getConfigUtils().setStringValue(ConfigValues.EnableVdsLoadBalancing.name(), "false");<END_MOD> defaultCluster = clusterBuilder.persist(); defaultHost = vdsBuilder.cluster(defaultCluster).persist(); defaultVM = vmBuilder.host(defaultHost).up().persist(); }	@org.junit.Before public void setUpDefaultEnvironment() { java.lang.System.setProperty("ovirt-engine.config.defaults", "src/test/resources/engine.conf.defaults"); org.ovirt.engine.core.common.config.Config.setConfigUtils(new org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils()); org.ovirt.engine.core.common.config.Config.getConfigUtils().setStringValue(ConfigValues.EnableVdsLoadBalancing.name(), "false"); defaultCluster = clusterBuilder.persist(); defaultHost = vdsBuilder.cluster(defaultCluster).persist(); defaultVM = vmBuilder.host(defaultHost).up().persist(); }
@org.junit.Test public void testSnmpManagersParsing() { java.util.List<org.ovirt.engine.core.notifier.transport.snmp.Snmp.Host> expectedManagers = new java.util.ArrayList<>(); java.lang.StringBuilder snmpManagers = new java.lang.StringBuilder(); for (org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> host : org.ovirt.engine.core.notifier.transport.snmp.ProfileTest.hosts) { expectedManagers.add(new org.ovirt.engine.core.notifier.transport.snmp.Snmp.Host(host.getFirst(), host.getSecond())); snmpManagers.append(host.getFirst()); if ((host.getSecond()) != null) { snmpManagers.append(":").append(host.getSecond()); } snmpManagers.append(   } org.ovirt.engine.core.notifier.transport.snmp.Snmp.Profile profile = new org.ovirt.engine.core.notifier.transport.snmp.Snmp.Profile(snmpManagers.toString(), "public", "1.3.6.1.4.1.2312.13.1.1"<START_MOD>, org.snmp4j.mp.SnmpConstants.version2c<END_MOD>); for (int i = 0; i < (expectedManagers.size()); i++) { org.ovirt.engine.core.notifier.transport.snmp.Snmp.Host parsed = profile.hosts.get(i); org.ovirt.engine.core.notifier.transport.snmp.Snmp.Host expected = expectedManagers.get(i); org.junit.Assert.assertEquals(parsed.name, expected.name); org.junit.Assert.assertEquals(parsed.port, expected.port); } }	@org.junit.Test public void testSnmpManagersParsing() { java.util.List<org.ovirt.engine.core.notifier.transport.snmp.Snmp.Host> expectedManagers = new java.util.ArrayList<>(); java.lang.StringBuilder snmpManagers = new java.lang.StringBuilder(); for (org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> host : org.ovirt.engine.core.notifier.transport.snmp.ProfileTest.hosts) { expectedManagers.add(new org.ovirt.engine.core.notifier.transport.snmp.Snmp.Host(host.getFirst(), host.getSecond())); snmpManagers.append(host.getFirst()); if ((host.getSecond()) != null) { snmpManagers.append(":").append(host.getSecond()); } snmpManagers.append(" "); } org.ovirt.engine.core.notifier.transport.snmp.Snmp.Profile profile = Snmp.Profile.buildProfile(snmpManagers.toString(), "public", "1.3.6.1.4.1.2312.13.1.1", SnmpConstants.version2c); for (int i = 0; i < (expectedManagers.size()); i++) { org.ovirt.engine.core.notifier.transport.snmp.Snmp.Host parsed = profile.hosts.get(i); org.ovirt.engine.core.notifier.transport.snmp.Snmp.Host expected = expectedManagers.get(i); org.junit.Assert.assertEquals(parsed.name, expected.name); org.junit.Assert.assertEquals(parsed.port, expected.port); } }
private org.snmp4j.Snmp createSnmp3(org.ovirt.engine.core.notifier.transport.snmp.Snmp.Profile profile) { try { org.snmp4j.TransportMapping<?> transport = new org.snmp4j.transport.DefaultUdpTransportMapping(); org.snmp4j.Snmp snmp = new org.snmp4j.Snmp(transport); org.snmp4j.security.SecurityProtocols securityProtocols = org.snmp4j.security.SecurityProtocols.getInstance(); securityProtocols.addDefaultProtocols(); securityProtocols.addPrivacyProtocol(new org.snmp4j.security.PrivAES192()); org.snmp4j.security.USM usm = new org.snmp4j.security.USM(securityProtocols, profile.engineId, 0); ((org.snmp4j.mp.MPv3) (snmp.getMessageProcessingModel(org.ovirt.engine.core.notifier.transport.snmp.org.snmp4j.mp.MPv3))).setLocalEngineID(profile.engineId.getValue()); ((org.snmp4j.mp.MPv3) (snmp.getMessageProcessingModel(org.ovirt.engine.core.notifier.transport.snmp.org.snmp4j.mp.MPv3))).getSecurityModels().addSecurityModel(usm); org.snmp4j.security.SecurityModels.getInstance().addSecurityModel(usm); transport.listen(); snmp.getUSM().addUser(profile.username, getUsmUser(profile)); return snmp; } catch (java.io.IOException e) { throw new org.ovirt.engine.core.notifier.NotificationServiceException(("error creating version 3 snmp " + (getClass().getName()))); } }	private org.snmp4j.Snmp createSnmp3(org.ovirt.engine.core.notifier.transport.snmp.Snmp.Profile profile) { try { org.snmp4j.TransportMapping<?> transport = new org.snmp4j.transport.DefaultUdpTransportMapping(); org.snmp4j.Snmp snmp = new org.snmp4j.Snmp(transport); org.snmp4j.security.SecurityProtocols securityProtocols = org.snmp4j.security.SecurityProtocols.getInstance(); securityProtocols.addDefaultProtocols(); securityProtocols.addAuthenticationProtocol(new org.snmp4j.security.AuthMD5()); securityProtocols.addAuthenticationProtocol(new org.snmp4j.security.AuthSHA()); securityProtocols.addPrivacyProtocol(new org.snmp4j.security.PrivAES128()); securityProtocols.addPrivacyProtocol(new org.snmp4j.security.PrivAES192()); securityProtocols.addPrivacyProtocol(new org.snmp4j.security.PrivAES256()); org.snmp4j.security.USM usm = new org.snmp4j.security.USM(securityProtocols, profile.engineId, 0); ((org.snmp4j.mp.MPv3) (snmp.getMessageProcessingModel(org.ovirt.engine.core.notifier.transport.snmp.org.snmp4j.mp.MPv3))).setLocalEngineID(profile.engineId.getValue()); ((org.snmp4j.mp.MPv3) (snmp.getMessageProcessingModel(org.ovirt.engine.core.notifier.transport.snmp.org.snmp4j.mp.MPv3))).getSecurityModels().addSecurityModel(usm); org.snmp4j.security.SecurityModels.getInstance().addSecurityModel(usm); transport.listen(); snmp.getUSM().addUser(profile.username, getUsmUser(profile)); return snmp; } catch (java.io.IOException e) { throw new org.ovirt.engine.core.notifier.NotificationServiceException(("error creating version 3 snmp " + (getClass().getName()))); } }
private org.snmp4j.security.UsmUser getUsmUser(org.ovirt.engine.core.notifier.transport.snmp.Snmp.Profile profile) { org.snmp4j.smi.OID authenticationProtocol = null; org.snmp4j.smi.OctetString authenticationPassphrase = null; org.snmp4j.smi.OID privacyProtocol = null; org.snmp4j.smi.OctetString privacyPassphrase = null; switch (profile.securityLevel) { case org.snmp4j.security.SecurityLevel.AUTH_NOPRIV : authenticationProtocol = org.snmp4j.security.AuthMD5.ID; authenticationPassphrase = profile.authPassphrase; break; case org.snmp4j.security.SecurityLevel.AUTH_PRIV : authenticationProtocol = org.snmp4j.security.AuthMD5.ID; authenticationPassphrase = profile.authPassphrase; privacyProtocol = org.snmp4j.security.PrivAES128.ID; privacyPassphrase = profile.privacyPassphrase; break; } return new org.snmp4j.security.UsmUser(profile.username, authenticationProtocol, authenticationPassphrase, privacyProtocol, privacyPassphrase); }	private org.snmp4j.security.UsmUser getUsmUser(org.ovirt.engine.core.notifier.transport.snmp.Snmp.Profile profile) { org.snmp4j.smi.OID authenticationProtocol = null; org.snmp4j.smi.OctetString authenticationPassphrase = null; org.snmp4j.smi.OID privacyProtocol = null; org.snmp4j.smi.OctetString privacyPassphrase = null; switch (profile.securityLevel) { case org.snmp4j.security.SecurityLevel.AUTH_NOPRIV : authenticationProtocol = profile.authProtocol; authenticationPassphrase = profile.authPassphrase; break; case org.snmp4j.security.SecurityLevel.AUTH_PRIV : authenticationProtocol = profile.authProtocol; authenticationPassphrase = profile.authPassphrase; privacyProtocol = profile.privProtocol; privacyPassphrase = profile.privacyPassphrase; break; } return new org.snmp4j.security.UsmUser(profile.username, authenticationProtocol, authenticationPassphrase, privacyProtocol, privacyPassphrase); }
public void restartGluster() { org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters parameters = new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters(getEntity().getClusterId(), getEntity().getId(), org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER, "restart"); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.ManageGlusterService, new java.util.ArrayList(java.util.Arrays.asList(new org.ovirt.engine.core.common.action.VdcActionParametersBase[]{ parameters })), new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { } }, null); }	public void restartGluster() { org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters parameters = new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters(getEntity().getClusterId(), getEntity().getId(), org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER, "restart"); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.ManageGlusterService, parameters); }
private static java.util.List<org.ovirt.engine.api.extensions.ExtMap> getPrincipalById(org.ovirt.engine.core.sso.utils.SsoContext ssoContext, java.util.Map<java.lang.String, java.lang.Object> params) { <START_MOD>final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension = ssoContext.getSsoExtensionsManager().getExtensionByName(((java.lang.String) (params.get(SsoConstants.HTTP_PARAM_DOMAIN)))); <END_MOD>java.util.List<org.ovirt.engine.api.extensions.ExtMap> <START_MOD>results<END_MOD> = new java.util.ArrayList<>(); org.ovirt.engine.core.<START_MOD>sso.search.DirectorySearch.getNamespaces(ssoContext, ((java.lang.String) (params.get(SsoConstants.HTTP_PARAM_NAMESPACE))), ((java.lang.String) (params.get(SsoConstants.HTTP_PARAM_DOMAIN)))).forEach(( namespace) -> results.addAll(org.ovirt.engine.core.sso.search.AuthzUtils.findPrincipalsByIds(<END_MOD>extension<START_MOD>, namespace, java.util.Arrays.asList(((java.lang.String) (params.get(SsoConstants.HTTP_PARAM_ID)))), ((boolean) (params.get(SsoConstants.HTTP_PARAM_GROUPS_RESOLVING))), ((boolean) (params.get(SsoConstants.HTTP_PARAM_GROUPS_RESOLVING_RECURSIVE))<END_MOD>)))); <START_MOD>return results<END_MOD>; }	private static java.util.List<org.ovirt.engine.api.extensions.ExtMap> getPrincipalById(org.ovirt.engine.core.sso.utils.SsoContext ssoContext, java.util.Map<java.lang.String, java.lang.Object> params) { java.util.List<org.ovirt.engine.api.extensions.ExtMap> users = new java.util.ArrayList<>(); final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension = ssoContext.getSsoExtensionsManager().getExtensionByName(((java.lang.String) (params.get(SsoConstants.HTTP_PARAM_DOMAIN)))); java.lang.String searchNamespace = ((java.lang.String) (params.get(SsoConstants.HTTP_PARAM_NAMESPACE))); for (java.lang.String namespace : org.apache.commons.lang.StringUtils.isEmpty(searchNamespace) ? org.ovirt.engine.core.sso.search.DirectorySearch.getNamespaces(ssoContext, ((java.lang.String) (params.get(SsoConstants.HTTP_PARAM_DOMAIN)))) : java.util.Arrays.asList(searchNamespace)) { users.addAll(org.ovirt.engine.core.sso.search.AuthzUtils.findPrincipalsByIds(extension, namespace, java.util.Arrays.asList(((java.lang.String) (params.get(SsoConstants.HTTP_PARAM_ID)))), ((boolean) (params.get(SsoConstants.HTTP_PARAM_GROUPS_RESOLVING))), ((boolean) (params.get(SsoConstants.HTTP_PARAM_GROUPS_RESOLVING_RECURSIVE))))); } return users; }
<START_MOD>public<END_MOD> void setDefaultInterface()<START_MOD> { org.ovirt.engine.core.compat.Guid vmId = getVmId()<END_MOD>;<START_MOD> if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(vmId))) { getDiskInterface().setSelectedItem(getDisk().getDiskVmElementForVm(vmId).getDiskInterface()); } else { getDiskInterface().setSelectedItem(DiskInterface.VirtIO); } }<END_MOD>	public void setDefaultInterface() { org.ovirt.engine.core.compat.Guid vmId = getVmId(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(vmId)) { getDiskInterface().setSelectedItem(DiskInterface.VirtIO); } else { getDiskInterface().setSelectedItem(getDisk().getDiskVmElementForVm(vmId).getDiskInterface()); } }
@org.junit.Test public void testCDAVDSDoesNotSupportVirtServices() { vds.setId(org.ovirt.engine.core.compat.Guid.newGuid()); vds.setClusterSupportsVirtService(false); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure("validate did not fail on cluster withou virt services", command, EngineMessage.CANNOT_FORCE_SELECT_SPM_CLUSTER_DOES_NOT_SUPPORT_VIRT_SERVICES); }	@org.junit.Test public void testCDAVDSDoesNotSupportVirtServices() { vds.setId(org.ovirt.engine.core.compat.Guid.newGuid()); vds.setClusterSupportsVirtService(false); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure("validate did not fail on host without virt services", command, EngineMessage.CANNOT_FORCE_SELECT_SPM_HOST_DOES_NOT_SUPPORT_VIRT_SERVICES); }
java.lang.String CANNOT_FORCE_SELECT_SPM_CLUSTER_DOES_NOT_SUPPORT_VIRT_SERVICES();	java.lang.String CANNOT_FORCE_SELECT_SPM_HOST_DOES_NOT_SUPPORT_VIRT_SERVICES();
private java.lang.String getTemplateVersionNameAndNumber(org.ovirt.engine.core.common.businessentities.VmTemplate template) { if (template.isBaseTemplate()) { return ""; } return org.ovirt.engine.core.compat.StringFormat.format(" (Version: %s (%s))", ((template.getTemplateVersionName()) != null ? template.getTemplateVersionName() : ""), template.getTemplateVersionNumber()); }	private java.lang.String getTemplateVersionNameAndNumber(org.ovirt.engine.core.common.businessentities.VmTemplate template) { if (template.isBaseTemplate()) { return ""; } return org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.messages.templateVersionNameAndNumber(((template.getTemplateVersionName()) != null ? template.getTemplateVersionName() : ""), template.getTemplateVersionNumber()); }
@java.lang.Override public void onColumnSort(com.google.gwt.user.cellview.client.ColumnSortEvent event) { com.google.gwt.user.cellview.client.Column<?, ?> column = event.getColumn(); if (column instanceof org.ovirt.engine.ui.common.widget.table.column.SortableColumn) { org.ovirt.engine.ui.common.widget.table.column.SortableColumn<T, ?> sortableColumn = ((org.ovirt.engine.ui.common.widget.table.column.SortableColumn<T, ?>) (column)); boolean sortApplied = false; if ((searchableModel != null) && (searchableModel.supportsServerSideSorting())) { java.util.Comparator<? super T> comparator = sortableColumn.getComparator(); if (comparator != null) { sortedModel.setComparator(comparator, event.isSortAscending()); sortApplied = true; if (searchableModel == null) { sortedModel.setItems(sortedModel.getItems()); } } <START_MOD>else { if (searchableModel.isSearchValidForServerSideSorting()) { searchableModel.updateSortOptions(sortableColumn.getSortBy(), event.isSortAscending()); sortApplied = true; } else { searchableModel.clearSortOptions(); } } } else { java.util.Comparator<? super T> comparator = sortableColumn.getComparator(); if (comparator != null) { sortedModel.setComparator(comparator, event.isSortAscending()); sortApplied = true; if (searchableModel == null) { sortedModel.setItems(sortedModel.getItems()); } } <END_MOD>} com.google.gwt.user.cellview.client.ColumnSortList.ColumnSortInfo columnSortInfo = event.getColumnSortList().get(0); if (sortApplied) { pushColumnSort(columnSortInfo); } else { clearColumnSort(); } } }	@java.lang.Override public void onColumnSort(com.google.gwt.user.cellview.client.ColumnSortEvent event) { com.google.gwt.user.cellview.client.Column<?, ?> column = event.getColumn(); if (column instanceof org.ovirt.engine.ui.common.widget.table.column.SortableColumn) { org.ovirt.engine.ui.common.widget.table.column.SortableColumn<T, ?> sortableColumn = ((org.ovirt.engine.ui.common.widget.table.column.SortableColumn<T, ?>) (column)); boolean sortApplied = false; java.util.Comparator<? super T> comparator = sortableColumn.getComparator(); boolean supportsServerSideSorting = (searchableModel != null) && (searchableModel.supportsServerSideSorting()); if (supportsServerSideSorting && (comparator != null)) { sortedModel.setComparator(comparator, event.isSortAscending()); sortApplied = true; } else if (supportsServerSideSorting) { sortedModel.setComparator(null); if (searchableModel.isSearchValidForServerSideSorting()) { searchableModel.updateSortOptions(sortableColumn.getSortBy(), event.isSortAscending()); sortApplied = true; } else { searchableModel.clearSortOptions(); } } else if (comparator != null) { sortedModel.setComparator(comparator, event.isSortAscending()); sortApplied = true; if (searchableModel == null) { sortedModel.setItems(sortedModel.getItems()); } } com.google.gwt.user.cellview.client.ColumnSortList.ColumnSortInfo columnSortInfo = event.getColumnSortList().get(0); if (sortApplied) { pushColumnSort(columnSortInfo); } else { clearColumnSort(); } } }
public int compare(org.ovirt.engine.core.common.businessentities.UserSession s1, org.ovirt.engine.core.common.businessentities.UserSession s2) { if (s1.getSessionStartTime().before(s2.getSessionStartTime())) { return -1; } else if (s1.getSessionStartTime().after(s2.getSessionStartTime())) { return 1; } else { return 0; } }	@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.UserSession s1, org.ovirt.engine.core.common.businessentities.UserSession s2) { return s1.getSessionStartTime().compareTo(s2.getSessionStartTime()); }
public int compare(org.ovirt.engine.core.common.businessentities.UserSession s1, org.ovirt.engine.core.common.businessentities.UserSession s2) { if (s1.getSessionLastActiveTime().before(s2.getSessionLastActiveTime())) { return -1; } else if (s1.getSessionLastActiveTime().after(s2.getSessionLastActiveTime())) { return 1; } else { return 0; } }	@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.UserSession s1, org.ovirt.engine.core.common.businessentities.UserSession s2) { return s1.getSessionLastActiveTime().compareTo(s2.getSessionLastActiveTime()); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { final java.util.List<org.ovirt.engine.core.common.businessentities.Label> allLabels = ((java.util.List<org.ovirt.engine.core.common.businessentities.Label>) (result)); <START_MOD>boolean isAnyTemplateBehavior = (getBehavior().isAnyTemplateBehavior()) || (getBehavior().isNewTemplateBehavior()); <END_MOD>if (<START_MOD>(<END_MOD>getIsNew()<START_MOD>) || isAnyTemplateBehavior<END_MOD>) { labelList.setItems(allLabels); labelList.setSelectedItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Label>()); } else { org.ovirt.engine.ui.frontend.AsyncQuery getLabelsByVmIdQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); getLabelsByVmIdQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.Label> vmLabelsList = ((java.util.List<org.ovirt.engine.core.common.businessentities.Label>) (returnValue)); labelList.setItems(allLabels); labelList.setSelectedItems(vmLabelsList); } }; org.ovirt.engine.core.compat.Guid vmId = ((org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior) (getBehavior())).getVm().getId(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getLabelListByEntityId(getLabelsByVmIdQuery, vmId); } labelList.setIsChangeable(false); }	@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { final java.util.List<org.ovirt.engine.core.common.businessentities.Label> allLabels = ((java.util.List<org.ovirt.engine.core.common.businessentities.Label>) (result)); boolean isExistingVmBehavior = (getBehavior()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior; if (isExistingVmBehavior) { org.ovirt.engine.ui.frontend.AsyncQuery getLabelsByVmIdQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); getLabelsByVmIdQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.Label> vmLabelsList = ((java.util.List<org.ovirt.engine.core.common.businessentities.Label>) (returnValue)); labelList.setItems(allLabels); labelList.setSelectedItems(vmLabelsList); } }; org.ovirt.engine.core.compat.Guid vmId = ((org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior) (getBehavior())).getVm().getId(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getLabelListByEntityId(getLabelsByVmIdQuery, vmId); } else { labelList.setItems(allLabels); labelList.setSelectedItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Label>()); } labelList.setIsChangeable(false); }
<START_MOD>protected<END_MOD> void enableLoadBalancer() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EnableVdsLoadBalancing)) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info( scheduling to enable vds load balancer org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.class).scheduleAFixedDelayJob(this, "performLoadBalancing", new java.lang.Class[]{ }, new java.lang.Object[]{ }, org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsLoadBalancingIntervalInMinutes), org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsLoadBalancingIntervalInMinutes), java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info( scheduling to enable vds load balancer } }	private void enableLoadBalancer() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EnableVdsLoadBalancing)) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info("Start scheduling to enable vds load balancer"); org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.class).scheduleAFixedDelayJob(this, "performLoadBalancing", new java.lang.Class[]{ }, new java.lang.Object[]{ }, org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsLoadBalancingIntervalInMinutes), org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsLoadBalancingIntervalInMinutes), java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info("Finished scheduling to enable vds load balancer"); } }
private void loadClusterPolicies() { policyMap.putAll(org.ovirt.engine.core.bll.scheduling.InternalClusterPolicies.getClusterPolicies()); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.scheduling.PolicyUnitType> internalTypes = new java.util.HashMap<>(); for (org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl unit : policyUnits.values()) { internalTypes.put(unit.getGuid(), unit.getType()); } java.util.List<org.ovirt.engine.core.common.scheduling.ClusterPolicy> allClusterPolicies = getClusterPolicyDao().getAll(java.util.Collections.unmodifiableMap(internalTypes)); <START_MOD>for (org.ovirt.engine.core.common.scheduling.ClusterPolicy clusterPolicy : allClusterPolicies) { policyMap.put(clusterPolicy.getId(), clusterPolicy); } <END_MOD>final org.ovirt.engine.core.compat.Guid defaultSelectorGuid = org.ovirt.engine.core.bll.scheduling.InternalPolicyUnits.getGuid(org.ovirt.engine.core.bll.scheduling.policyunits.BasicWeightSelectorPolicyUnit.class); for (org.ovirt.engine.core.common.scheduling.ClusterPolicy clusterPolicy : <START_MOD>policyMap.values()<END_MOD>) { if ((clusterPolicy.getSelector()) == null) { clusterPolicy.setSelector(defaultSelectorGuid); } <START_MOD>} }<END_MOD>	private void loadClusterPolicies() { policyMap.putAll(org.ovirt.engine.core.bll.scheduling.InternalClusterPolicies.getClusterPolicies()); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.scheduling.PolicyUnitType> internalTypes = new java.util.HashMap<>(); for (org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl unit : policyUnits.values()) { internalTypes.put(unit.getGuid(), unit.getType()); } java.util.List<org.ovirt.engine.core.common.scheduling.ClusterPolicy> allClusterPolicies = getClusterPolicyDao().getAll(java.util.Collections.unmodifiableMap(internalTypes)); for (org.ovirt.engine.core.common.scheduling.ClusterPolicy clusterPolicy : allClusterPolicies) { policyMap.put(clusterPolicy.getId(), clusterPolicy); } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalActionWithTasksContext(VdcActionType.UpdateVmVersion, new org.ovirt.engine.core.common.action.UpdateVmVersionParameters(org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getVmId())); if ((!(result.getSucceeded())) && (!(result.isValid()))) { log.warn( update VM '{}' ({}) version from it template, continue with restoring stateless snapshot. org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getVmId()); org.ovirt.engine.core.bll.RestoreStatelessVmCommand.setSucceeded(restoreInitialState()); } else { setSucceeded(result.getSucceeded()); } }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalActionWithTasksContext(VdcActionType.UpdateVmVersion, buildUpdateVmVersionParameters()); if ((!(result.getSucceeded())) && (!(result.isValid()))) { log.warn("Couldn't update VM '{}' ({}) version from it's template, continue with restoring stateless snapshot.", org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getVmId()); org.ovirt.engine.core.bll.RestoreStatelessVmCommand.setSucceeded(restoreInitialState()); } else { setSucceeded(result.getSucceeded()); } }
public void init(org.ovirt.engine.core.common.businessentities.Provider<org.ovirt.engine.core.common.businessentities.KVMVmProviderProperties> provider) { org.ovirt.engine.core.common.businessentities.KVMVmProviderProperties properties = provider.getAdditionalProperties(); this.lastProxyHostId = properties.getProxyHostId(); this.lastStoragePoolId = properties.getStoragePoolId(); }	public void init(org.ovirt.engine.core.common.businessentities.Provider<org.ovirt.engine.core.common.businessentities.KVMVmProviderProperties> provider) { org.ovirt.engine.core.common.businessentities.KVMVmProviderProperties properties = provider.getAdditionalProperties(); getUrl().setEntity(properties.getUrl()); setLastProxyHostId(properties.getProxyHostId()); setLastStoragePoolId(properties.getStoragePoolId()); }
public boolean validate() { if (!(getIsAvailable())) { setIsValid(true); } else { getUrl().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(255) }); } return getIsValid(); }	public boolean validate() { if (!(getIsAvailable())) { setIsValid(true); } else { getUrl().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(255) }); setIsValid(getUrl().getIsValid()); } return getIsValid(); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((<START_MOD>(<END_MOD>getType().getSelectedItem()) != (org.ovirt.engine.core.common.businessentities.ProviderType.VMWARE<START_MOD>)) && ((getType().getSelectedItem()) != (org.ovirt.engine.core.common.businessentities.ProviderType.KVM)<END_MOD>)) { return; } if ((getDataCenter().getSelectedItem()) == null) { getVmwarePropertiesModel().disableProxyHost(); } else { getVmwarePropertiesModel().getProxyHost().setIsChangeable(true); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostListByDataCenter(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((java.util.List<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); org.ovirt.engine.core.common.businessentities.VDS prevHost = getPreviousHost(hosts); hosts.add(0, null); getVmwarePropertiesModel().getProxyHost().setItems(hosts); getVmwarePropertiesModel().getProxyHost().setSelectedItem(prevHost); } }), getDataCenter().getSelectedItem().getId()); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((!(isTypeVmware())) && (!(isTypeKVM()))) { return; } final org.ovirt.engine.ui.uicommonweb.models.providers.ProxyHostPropertiesModel proxyHostPropertiesModel = getProxyHostPropertiesModel(); if ((getDataCenter().getSelectedItem()) == null) { proxyHostPropertiesModel.disableProxyHost(); } else { proxyHostPropertiesModel.getProxyHost().setIsChangeable(true); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostListByDataCenter(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((java.util.List<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); org.ovirt.engine.core.common.businessentities.VDS prevHost = getPreviousHost(hosts); hosts.add(0, null); proxyHostPropertiesModel.getProxyHost().setItems(hosts); proxyHostPropertiesModel.getProxyHost().setSelectedItem(prevHost); } }), getDataCenter().getSelectedItem().getId()); } }
private void kvmProviderChanged() { org.ovirt.engine.core.common.businessentities.Provider<org.ovirt.engine.core.common.businessentities.KVMVmProviderProperties> provider = getKvmProviders().getSelectedItem(); if (provider == null) { provider = new org.ovirt.engine.core.common.businessentities.Provider(); provider.setAdditionalProperties(new org.ovirt.engine.core.common.businessentities.KVMVmProviderProperties()); } getKvmUsername().setEntity(provider.getUsername()); getKvmPassword().setEntity(provider.getPassword()); getKvmUri().setEntity(provider.getUrl()); }	private void kvmProviderChanged() { org.ovirt.engine.core.common.businessentities.Provider<org.ovirt.engine.core.common.businessentities.KVMVmProviderProperties> provider = getKvmProviders().getSelectedItem(); if (provider == null) { provider = new org.ovirt.engine.core.common.businessentities.Provider(); provider.setAdditionalProperties(new org.ovirt.engine.core.common.businessentities.KVMVmProviderProperties()); } getKvmUsername().setEntity(provider.getUsername()); getKvmPassword().setEntity(provider.getPassword()); org.ovirt.engine.core.common.businessentities.KVMVmProviderProperties properties = provider.getAdditionalProperties(); getKvmUri().setEntity(properties.getUrl()); setupProxyHost(getKvmProxyHosts(), properties.getProxyHostId()); }
protected void <START_MOD>updateDatacentersForExternalProvider<END_MOD>() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterList(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { final java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = ((java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>) (returnValue)); org.ovirt.engine.core.common.businessentities.StoragePool prevDataCenter = getPreviousDataCenter(dataCenters); java.util.Collections.sort(dataCenters, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); dataCenters.add(0, null); getDataCenter().setItems(dataCenters); getDataCenter().setSelectedItem(prevDataCenter); if ((getDataCenter().getSelectedItem()) == null) { getVmwarePropertiesModel().disableProxyHost(); } } private org.ovirt.engine.core.common.businessentities.StoragePool getPreviousDataCenter(java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters) { org.ovirt.engine.core.compat.Guid previousDataCenterId = getVmwarePropertiesModel().getLastStoragePoolId(); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : dataCenters) { if (dataCenter.getId().equals(previousDataCenterId)) { return dataCenter; } } return null; } })); }	protected void updateDatacentersForExternalProvider() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterList(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { final java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = ((java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>) (returnValue)); org.ovirt.engine.core.common.businessentities.StoragePool prevDataCenter = getPreviousDataCenter(dataCenters); java.util.Collections.sort(dataCenters, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); dataCenters.add(0, null); getDataCenter().setItems(dataCenters); getDataCenter().setSelectedItem(prevDataCenter); if ((getDataCenter().getSelectedItem()) == null) { getProxyHostPropertiesModel().disableProxyHost(); } } private org.ovirt.engine.core.common.businessentities.StoragePool getPreviousDataCenter(java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters) { org.ovirt.engine.core.compat.Guid previousDataCenterId = getProxyHostPropertiesModel().getLastStoragePoolId(); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : dataCenters) { if (dataCenter.getId().equals(previousDataCenterId)) { return dataCenter; } } return null; } })); }
@java.lang.Override public void handleFailure() { org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.log.error("Failed child command status for step '{}'", org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.getParameters().getCommandStep()); }	@java.lang.Override public void handleFailure() { org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.log.error("Command id: '{} failed child command status for step '{}'", org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.getCommandId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.getParameters().getCommandStep()); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { final java.util.List<org.ovirt.engine.core.common.businessentities.Label> allLabels = ((java.util.List<org.ovirt.engine.core.common.businessentities.Label>) (result)); if (getIsNew()) { labelList.setItems(allLabels); labelList.setSelectedItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Label>()); } else { org.ovirt.engine.ui.frontend.AsyncQuery getLabelsByVmIdQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); getLabelsByVmIdQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.Label> vmLabelsList = ((java.util.List<org.ovirt.engine.core.common.businessentities.Label>) (returnValue)); labelList.setItems(allLabels); labelList.setSelectedItems(vmLabelsList); } }; org.ovirt.engine.core.compat.Guid vmId = ((org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior) (getBehavior())).getVm().getId(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getLabelListByEntityId(getLabelsByVmIdQuery, vmId); } labelList.setIsChangeable(false); }	@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { final java.util.List<org.ovirt.engine.core.common.businessentities.Label> allLabels = ((java.util.List<org.ovirt.engine.core.common.businessentities.Label>) (result)); boolean isExistingVmBehavior = (getBehavior()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior; if (isExistingVmBehavior) { org.ovirt.engine.ui.frontend.AsyncQuery getLabelsByVmIdQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); getLabelsByVmIdQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.Label> vmLabelsList = ((java.util.List<org.ovirt.engine.core.common.businessentities.Label>) (returnValue)); labelList.setItems(allLabels); labelList.setSelectedItems(vmLabelsList); } }; org.ovirt.engine.core.compat.Guid vmId = ((org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior) (getBehavior())).getVm().getId(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getLabelListByEntityId(getLabelsByVmIdQuery, vmId); } else { labelList.setItems(allLabels); labelList.setSelectedItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Label>()); } labelList.setIsChangeable(false); }
@java.lang.Override public java.lang.String convertPrefixToNetmask(java.lang.String prefix) {<START_MOD> prefix = removeTrailingSlashFromNetmaskIfPresent(prefix);<END_MOD> int prefixAsInt = java.lang.Integer.parseInt(prefix); int mask = (prefixAsInt == 0) ?   : -1 ^ ((1 << (32 - prefixAsInt)) - 1); byte[] netmaskByteArray = new byte[]{ ((byte) (mask >>> 24)), ((byte) (mask >>> 16)), ((byte) (mask >>> 8)), ((byte) (mask)) }; java.lang.StringBuilder stringBuilder = new java.lang.StringBuilder(); for (int i = 0; i < (netmaskByteArray.length); i++) { int octet = 255 & (netmaskByteArray[i]); stringBuilder.append(".").append(octet); } return stringBuilder.substring(1); }	@java.lang.Override public java.lang.String convertPrefixToNetmask(java.lang.String prefix) { prefix = removeLeadingSlashFromNetmaskIfPresent(prefix); int prefixAsInt = java.lang.Integer.parseInt(prefix); int mask = (prefixAsInt == 0) ? 0 : -1 ^ ((1 << (32 - prefixAsInt)) - 1); byte[] netmaskByteArray = new byte[]{ ((byte) (mask >>> 24)), ((byte) (mask >>> 16)), ((byte) (mask >>> 8)), ((byte) (mask)) }; java.lang.StringBuilder stringBuilder = new java.lang.StringBuilder(); for (int i = 0; i < (netmaskByteArray.length); i++) { int octet = 255 & (netmaskByteArray[i]); stringBuilder.append(".").append(octet); } return stringBuilder.substring(1); }
private java.lang.String removeTrailingSlashFromNetmaskIfPresent(java.lang.String prefix) { if ((prefix != null) && (prefix.startsWith("/"))) { return prefix.substring(1); } return prefix; }	private java.lang.String removeLeadingSlashFromNetmaskIfPresent(java.lang.String prefix) { if ((prefix != null) && (prefix.startsWith("/"))) { return prefix.substring(1); } return prefix; }
@java.lang.Override public org.ovirt.engine.core.bll.provider.ProviderValidator getProviderValidator() { if ((networkProviderValidator) == null) { networkProviderValidator = new org.ovirt.engine.core.bll.provider.NetworkProviderValidator(provider); } return networkProviderValidator; }	@java.lang.Override public org.ovirt.engine.core.bll.provider.ProviderValidator getProviderValidator() { return new org.ovirt.engine.core.bll.provider.NetworkProviderValidator(provider); }
@java.lang.Override public org.ovirt.engine.core.bll.ValidationResult validateAddProvider() { org.ovirt.engine.core.bll.ValidationResult result = validatePluginType(); if (!(result.isValid())) { return result; } if (!((result = validateAuthentication()).isValid())) { return result; } return super.validateAddProvider(); }	@java.lang.Override public org.ovirt.engine.core.bll.ValidationResult validateAddProvider() { org.ovirt.engine.core.bll.ValidationResult result = validatePluginType(); if (!(result.isValid())) { return result; } result = validateAuthentication(); if (!(result.isValid())) { return result; } return super.validateAddProvider(); }
public void setClientPolicy(org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy policy) { this.policy = policy; this.validate(); if (isOpen()) { <START_MOD>scheduleClose<END_MOD>( reset } }	public void setClientPolicy(org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy policy) { this.policy = policy; this.validate(); if (!(isOpen())) { return; } try (org.ovirt.vdsm.jsonrpc.client.utils.LockWrapper wrapper = new org.ovirt.vdsm.jsonrpc.client.utils.LockWrapper(this.lock)) { if ((isOpen()) && (!(this.closing.get()))) { scheduleClose("Policy reset"); this.closing.set(true); } } }
@java.lang.Override public org.ovirt.engine.api.model.VmPool doPopulate(org.ovirt.engine.api.model.VmPool pool, org.ovirt.engine.core.common.businessentities.VmPool entity) { <START_MOD>org.ovirt.engine.api.restapi.resource.BackendVmDeviceHelper.setPayload(this, pool.getVm()); org.ovirt.engine.api.restapi.resource.MemoryPolicyHelper.setupMemoryBalloon(pool.getVm(), this); org.ovirt.engine.api.restapi.resource.BackendVmDeviceHelper.setConsoleDevice(this, pool.getVm()); org.ovirt.engine.api.restapi.resource.BackendVmDeviceHelper.setVirtioScsiController(this, pool.getVm()); org.ovirt.engine.api.restapi.resource.BackendVmDeviceHelper.setSoundcard(this, pool.getVm()); org.ovirt.engine.api.restapi.resource.BackendVmDeviceHelper.setCertificateInfo(this, pool.getVm()); org.ovirt.engine.api.restapi.resource.BackendVmDeviceHelper.<END_MOD>setRngDevice(<START_MOD>this, pool.getVm()); setRngDevice(<END_MOD>pool); return pool; }	@java.lang.Override public org.ovirt.engine.api.model.VmPool doPopulate(org.ovirt.engine.api.model.VmPool pool, org.ovirt.engine.core.common.businessentities.VmPool entity) { org.ovirt.engine.core.common.businessentities.VM vmModel = getVM(pool); if (vmModel != null) { org.ovirt.engine.api.model.Vm vm = org.ovirt.engine.api.restapi.types.VmMapper.map(vmModel, new org.ovirt.engine.api.model.Vm()); org.ovirt.engine.api.restapi.resource.BackendVmDeviceHelper.setPayload(this, vm); org.ovirt.engine.api.restapi.resource.MemoryPolicyHelper.setupMemoryBalloon(vm, this); org.ovirt.engine.api.restapi.resource.BackendVmDeviceHelper.setConsoleDevice(this, vm); org.ovirt.engine.api.restapi.resource.BackendVmDeviceHelper.setVirtioScsiController(this, vm); org.ovirt.engine.api.restapi.resource.BackendVmDeviceHelper.setSoundcard(this, vm); org.ovirt.engine.api.restapi.resource.BackendVmDeviceHelper.setCertificateInfo(this, vm); org.ovirt.engine.api.restapi.resource.BackendVmDeviceHelper.setRngDevice(this, vm); pool.setVm(vm); } setRngDevice(pool); return pool; }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase runAction(<START_MOD>final <END_MOD>org.ovirt.engine.core.bll.CommandBase<?> action, org.ovirt.engine.core.bll.job.ExecutionContext executionContext) { org.ovirt.engine.core.bll.job.ExecutionHandler.setExecutionContextForTasks(action.getContext(), executionContext, null); <START_MOD>final com.netflix.hystrix.HystrixCommand.Setter setter = HystrixCommand.Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(action.getActionType().name())).andCommandKey(HystrixCommandKey.Factory.asKey(action.getActionType().name())).andCommandPropertiesDefaults(com.netflix.hystrix.HystrixCommandProperties.Setter().withExecutionTimeoutEnabled(false).withMetricsRollingStatisticalWindowInMilliseconds(60000).withMetricsRollingStatisticalWindowBuckets(60)); final com.netflix.hystrix.HystrixCommand<org.ovirt.engine.core.common.action.VdcReturnValueBase> hystrixCommand = new com.netflix.hystrix.HystrixCommand<org.ovirt.engine.core.common.action.VdcReturnValueBase>(setter) { @java.lang.Override protected org.ovirt.engine.core.common.action.VdcReturnValueBase run() throws java.lang.Exception { <END_MOD>return runAction(action, true); }<START_MOD> }; return hystrixCommand.execute(); }<END_MOD>	@java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase runAction(org.ovirt.engine.core.bll.CommandBase<?> action, org.ovirt.engine.core.bll.job.ExecutionContext executionContext) { org.ovirt.engine.core.bll.job.ExecutionHandler.setExecutionContextForTasks(action.getContext(), executionContext, action.getContext().getLock()); return runAction(action, true); }
private org.ovirt.engine.core.common.action.VdcReturnValueBase runActionImpl(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, <START_MOD>final <END_MOD>boolean runAsInternal, org.ovirt.engine.core.bll.context.CommandContext context) { org.ovirt.engine.core.common.action.VdcReturnValueBase result; if (((!(actionType.isActionMonitored())) && (!(isActionExternal(actionType)))) && (((parameters.getJobId()) != null) || ((parameters.getStepId()) != null))) { result = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); result.getCanDoActionMessages().add(EngineMessage.ACTION_TYPE_NON_MONITORED.toString()); result.setCanDoAction(false); result.setSucceeded(false); } else {<START_MOD> final<END_MOD> org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.CommandsFactory.createCommand(actionType, parameters, context); <START_MOD>final com.netflix.hystrix.HystrixCommand.Setter setter<END_MOD> = <START_MOD>HystrixCommand.Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(actionType.name())).andCommandKey(HystrixCommandKey.Factory.asKey(actionType.name())).andCommandPropertiesDefaults(com.netflix.hystrix.HystrixCommandProperties.Setter().withExecutionTimeoutEnabled(false).withMetricsRollingStatisticalWindowInMilliseconds(60000).withMetricsRollingStatisticalWindowBuckets(60)); final com.netflix.hystrix.HystrixCommand<org.ovirt.engine.core.common.action.VdcReturnValueBase> hystrixCommand = new com.netflix.hystrix.HystrixCommand<org.ovirt.engine.core.common.action.VdcReturnValueBase>(setter) { @java.lang.Override protected org.ovirt.engine.core.common.action.VdcReturnValueBase run() throws java.lang.Exception { return <END_MOD>runAction(command, runAsInternal); } <START_MOD>}; result = hystrixCommand.execute(); } <END_MOD>return result; }	private org.ovirt.engine.core.common.action.VdcReturnValueBase runActionImpl(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, boolean runAsInternal, org.ovirt.engine.core.bll.context.CommandContext context) { org.ovirt.engine.core.common.action.VdcReturnValueBase result; if (((!(actionType.isActionMonitored())) && (!(isActionExternal(actionType)))) && (((parameters.getJobId()) != null) || ((parameters.getStepId()) != null))) { result = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); result.getValidationMessages().add(EngineMessage.ACTION_TYPE_NON_MONITORED.toString()); result.setValid(false); result.setSucceeded(false); } else { if (!runAsInternal) { logExecution(parameters.getSessionId(), java.lang.String.format("command %s", actionType)); } org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.CommandsFactory.createCommand(actionType, parameters, context); result = runAction(command, runAsInternal); } return result; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface().setVmTemplateId(org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getVmTemplateId()); org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface().setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface().setSpeed(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface().getType()).getSpeed()); org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getVmNicDao().save(org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface()); <START_MOD>vmDeviceUtils<END_MOD>.addInterface(org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getVmTemplateId(), org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface().getId(), org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface().isPlugged(), org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface().isPassthrough()); org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface().setVmTemplateId(org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getVmTemplateId()); org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface().setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface().setSpeed(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface().getType()).getSpeed()); org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getVmNicDao().save(org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface()); org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getVmDeviceUtils().addInterface(org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getVmTemplateId(), org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface().getId(), org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface().isPlugged(), org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.getParameters().getInterface().isPassthrough()); org.ovirt.engine.core.bll.network.template.AddVmTemplateInterfaceCommand.setSucceeded(true); }
protected void updateParametersVmFromInstanceType() { org.ovirt.engine.core.common.businessentities.InstanceType instanceType = getInstanceType(); org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVmStaticData(); if (instanceType != null) { vmStatic.setMemSizeMb(instanceType.getMemSizeMb()); vmStatic.setNumOfSockets(instanceType.getNumOfSockets()); vmStatic.setCpuPerSocket(instanceType.getCpuPerSocket()); vmStatic.setThreadsPerCpu(instanceType.getThreadsPerCpu()); vmStatic.setAutoStartup(instanceType.isAutoStartup()); if (org.ovirt.engine.core.common.FeatureSupported.isMigrationSupported(org.ovirt.engine.core.bll.VmManagementCommandBase.getCluster().getArchitecture(), getEffectiveCompatibilityVersion())) { vmStatic.setMigrationSupport(instanceType.getMigrationSupport()); } vmStatic.setNumOfIoThreads(instanceType.getNumOfIoThreads()); vmStatic.setMigrationDowntime(instanceType.getMigrationDowntime()); vmStatic.setPriority(instanceType.getPriority()); vmStatic.setTunnelMigration(instanceType.getTunnelMigration()); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = <START_MOD>vmDeviceUtils.getMemoryBalloons(instanceType.getId()); vmStatic.setMinAllocatedMem(instanceType.getMinAllocatedMem()); if (vmDevices.isEmpty()) { <END_MOD>org.ovirt.engine.core.bll.<START_MOD>VmManagementCommandBase.getParameters().setBalloonEnabled(false); } else<END_MOD> if (<START_MOD>osRepository.isBalloonEnabled(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVmStaticData().getOsId(), getEffectiveCompatibilityVersion()<END_MOD>)) { org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().setBalloonEnabled(<START_MOD>true<END_MOD>); } <START_MOD>vmStatic.setMigrationPolicyId(instanceType.getMigrationPolicyId()<END_MOD>); } }	protected void updateParametersVmFromInstanceType() { org.ovirt.engine.core.common.businessentities.InstanceType instanceType = getInstanceType(); org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVmStaticData(); if (instanceType != null) { vmStatic.setMemSizeMb(instanceType.getMemSizeMb()); vmStatic.setNumOfSockets(instanceType.getNumOfSockets()); vmStatic.setCpuPerSocket(instanceType.getCpuPerSocket()); vmStatic.setThreadsPerCpu(instanceType.getThreadsPerCpu()); vmStatic.setAutoStartup(instanceType.isAutoStartup()); if (org.ovirt.engine.core.common.FeatureSupported.isMigrationSupported(org.ovirt.engine.core.bll.VmManagementCommandBase.getCluster().getArchitecture(), getEffectiveCompatibilityVersion())) { vmStatic.setMigrationSupport(instanceType.getMigrationSupport()); } vmStatic.setNumOfIoThreads(instanceType.getNumOfIoThreads()); vmStatic.setMigrationDowntime(instanceType.getMigrationDowntime()); vmStatic.setPriority(instanceType.getPriority()); vmStatic.setTunnelMigration(instanceType.getTunnelMigration()); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = org.ovirt.engine.core.bll.VmManagementCommandBase.getVmDeviceUtils().getMemoryBalloons(instanceType.getId()); vmStatic.setMinAllocatedMem(instanceType.getMinAllocatedMem()); if (vmDevices.isEmpty()) { org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().setBalloonEnabled(false); } else if (osRepository.isBalloonEnabled(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVmStaticData().getOsId(), getEffectiveCompatibilityVersion())) { org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().setBalloonEnabled(true); } vmStatic.setMigrationPolicyId(instanceType.getMigrationPolicyId()); } }
@java.lang.Override protected void perform() { java.lang.String iface = null; int index = 0; if (org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getCompatibilityVersion().greaterOrEquals(Version.v4_0)) { iface = <START_MOD>vmDeviceUtils.getCdInterface(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm()); index = org.ovirt.engine.core.common<END_MOD>.utils.<START_MOD>VmDeviceCommonUtils.getCdDeviceIndex(iface); } cdImagePath = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.cdPathWindowsToLinux(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getParameters().getCdImagePath(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getRunOnVds()); setActionReturnValue(runVdsCommand(VDSCommandType.ChangeDisk, new org.ovirt.engine.core.common.vdscommands.ChangeDiskVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVdsId(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getId(), iface,<END_MOD> index<START_MOD>, cdImagePath)).getReturnValue()); org.ovirt.engine.core.bll.VmHandler.updateCurrentCd(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVdsId(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getParameters().getCdImagePath()); org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.setSucceeded(true<END_MOD>); }	@java.lang.Override protected void perform() { java.lang.String iface = null; int index = 0; if (org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getCompatibilityVersion().greaterOrEquals(Version.v4_0)) { iface = org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVmDeviceUtils().getCdInterface(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm()); index = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getCdDeviceIndex(iface); } cdImagePath = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.cdPathWindowsToLinux(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getParameters().getCdImagePath(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getRunOnVds()); setActionReturnValue(runVdsCommand(VDSCommandType.ChangeDisk, new org.ovirt.engine.core.common.vdscommands.ChangeDiskVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVdsId(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getId(), iface, index, cdImagePath)).getReturnValue()); org.ovirt.engine.core.bll.VmHandler.updateCurrentCd(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVdsId(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getParameters().getCdImagePath()); org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.setSucceeded(true); }
protected org.ovirt.engine.core.bll.validator.storage.DiskValidator createDiskValidator(org.ovirt.engine.core.common.businessentities.storage.DiskImage disk) { return new org.ovirt.engine.core.bll.validator.storage.DiskValidator(disk<START_MOD>, super.getVmDeviceUtils()<END_MOD>); }	protected org.ovirt.engine.core.bll.validator.storage.DiskValidator createDiskValidator(org.ovirt.engine.core.common.businessentities.storage.DiskImage disk) { return new org.ovirt.engine.core.bll.validator.storage.DiskValidator(disk, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getVmDeviceUtils()); }
@java.lang.Override protected void addVmInterfaces() { super.addVmInterfaces(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getInterfaces()) { <START_MOD>vmDeviceUtils<END_MOD>.addInterface(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId(), iface.getId(), iface.isPlugged(), false); } }	@java.lang.Override protected void addVmInterfaces() { super.addVmInterfaces(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getInterfaces()) { org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmDeviceUtils().addInterface(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId(), iface.getId(), iface.isPlugged(), false); } }
@java.lang.Override @org.junit.Before public void setUp() { super.setUp(); org.ovirt.engine.core.common.action.ImportRepoImageParameters importParameters = new org.ovirt.engine.core.common.action.ImportRepoImageParameters(); importParameters.setSourceRepoImageId(getRepoImageId()); importParameters.setSourceStorageDomainId(getRepoStorageDomainId()); importParameters.setStoragePoolId(getStoragePoolId()); importParameters.setStorageDomainId(getStorageDomainId()); cmd = spy(new org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand<START_MOD><org.ovirt.engine.core.common.action.ImportRepoImageParameters><END_MOD>(importParameters, null)<START_MOD> { @java.lang.Override protected org.ovirt.engine.core.bll.utils.VmDeviceUtils getVmDeviceUtils() { return vmDeviceUtils; } }<END_MOD>); doReturn(getStorageDomainDao()).when(cmd).getStorageDomainDao(); doReturn(getStoragePoolDao()).when(cmd).getStoragePoolDao(); doReturn(getProviderProxy()).when(cmd).getProviderProxy(); doReturn(true).when(cmd).validateSpaceRequirements(any(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class)); }	@java.lang.Override @org.junit.Before public void setUp() { super.setUp(); injectorRule.bind(org.ovirt.engine.core.bll.utils.VmDeviceUtils.class, vmDeviceUtils); org.ovirt.engine.core.common.action.ImportRepoImageParameters importParameters = new org.ovirt.engine.core.common.action.ImportRepoImageParameters(); importParameters.setSourceRepoImageId(getRepoImageId()); importParameters.setSourceStorageDomainId(getRepoStorageDomainId()); importParameters.setStoragePoolId(getStoragePoolId()); importParameters.setStorageDomainId(getStorageDomainId()); cmd = spy(new org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand(importParameters, null)); doReturn(getStorageDomainDao()).when(cmd).getStorageDomainDao(); doReturn(getStoragePoolDao()).when(cmd).getStoragePoolDao(); doReturn(getProviderProxy()).when(cmd).getProviderProxy(); doReturn(true).when(cmd).validateSpaceRequirements(any(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class)); }
@java.lang.Override protected boolean validate() { if (!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.canRunActionOnNonManagedVm())) { return false; } if ((!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.isInternalExecution())) && (!(org.ovirt.engine.core.utils.ObjectIdentityChecker.canUpdateField(org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm(), "clusterId", org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm().getStatus())))) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } org.ovirt.engine.core.bll.ChangeVmClusterValidator validator = new org.ovirt.engine.core.bll.ChangeVmClusterValidator(this, org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getClusterId(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getVmCustomCompatibilityVersion()<START_MOD>, vmDeviceUtils<END_MOD>); return validator.validate(); }	@java.lang.Override protected boolean validate() { if (!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.canRunActionOnNonManagedVm())) { return false; } if ((!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.isInternalExecution())) && (!(org.ovirt.engine.core.utils.ObjectIdentityChecker.canUpdateField(org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm(), "clusterId", org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm().getStatus())))) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } org.ovirt.engine.core.bll.ChangeVmClusterValidator validator = new org.ovirt.engine.core.bll.ChangeVmClusterValidator(this, org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getClusterId(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getVmCustomCompatibilityVersion(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVmDeviceUtils()); return validator.validate(); }
protected boolean isBalloonEnabled(org.ovirt.engine.core.compat.Guid vmId) { return <START_MOD>getVmDeviceUtils()<END_MOD>.hasMemoryBalloon(vmId); }	protected boolean isBalloonEnabled(org.ovirt.engine.core.compat.Guid vmId) { return org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVmDeviceUtils().hasMemoryBalloon(vmId); }
protected boolean hasWatchdog(org.ovirt.engine.core.compat.Guid vmId) { return <START_MOD>getVmDeviceUtils()<END_MOD>.hasWatchdog(vmId); }	protected boolean hasWatchdog(org.ovirt.engine.core.compat.Guid vmId) { return AbstractDiskVmCommand.getVmDeviceUtils().hasWatchdog(vmId); }
protected org.ovirt.engine.core.bll.validator.storage.DiskValidator getDiskValidator(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { return new org.ovirt.engine.core.bll.validator.storage.DiskValidator(disk<START_MOD>, getVmDeviceUtils()<END_MOD>); }	protected org.ovirt.engine.core.bll.validator.storage.DiskValidator getDiskValidator(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { return new org.ovirt.engine.core.bll.validator.storage.DiskValidator(disk, org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVmDeviceUtils()); }
private void addImportedDevices(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vm.getStaticData(); vmStatic.setImages(new java.util.ArrayList()); vmStatic.setInterfaces(new java.util.ArrayList()); org.ovirt.engine.core.bll.exportimport.ImportUtils.updateGraphicsDevices(vmStatic, org.ovirt.engine.core.bll.exportimport.ConvertVmCommand.getStoragePool().getCompatibilityVersion()); <START_MOD>vmDeviceUtils<END_MOD>.addImportedDevices(vmStatic, false); saveDiskVmElements(vm); org.ovirt.engine.core.bll.exportimport.ConvertVmCommand.getVmDeviceDao().updateBootOrderInBatch(new java.util.ArrayList(vm.getManagedVmDeviceMap().values())); }	private void addImportedDevices(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vm.getStaticData(); vmStatic.setImages(new java.util.ArrayList()); vmStatic.setInterfaces(new java.util.ArrayList()); org.ovirt.engine.core.bll.exportimport.ImportUtils.updateGraphicsDevices(vmStatic, ConvertVmCommand.getStoragePool().getCompatibilityVersion()); ConvertVmCommand.getVmDeviceUtils().addImportedDevices(vmStatic, false); saveDiskVmElements(vm); ConvertVmCommand.getVmDeviceDao().updateBootOrderInBatch(new java.util.ArrayList(vm.getManagedVmDeviceMap().values())); }
protected boolean isSoundDeviceEnabled(org.ovirt.engine.core.compat.Guid vmId) { return <START_MOD>getVmDeviceUtils()<END_MOD>.hasSoundDevice(vmId); }	protected boolean isSoundDeviceEnabled(org.ovirt.engine.core.compat.Guid vmId) { return org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVmDeviceUtils().hasSoundDevice(vmId); }
protected final void endVmTemplateRelatedOps() { if ((org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getVmTemplate()) != null) { <START_MOD>vmDeviceUtils<END_MOD>.setVmDevices(org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getVmTemplate()); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getVmTemplate(), true); incrementDbGeneration(); org.ovirt.engine.core.bll.VmTemplateHandler.unlockVmTemplate(org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getVmTemplateId()); } else { org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.setCommandShouldBeLogged(false); log.warn( VmTemplate is null, not performing full endAction } }	protected final void endVmTemplateRelatedOps() { if ((org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getVmTemplate()) != null) { org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getVmDeviceUtils().setVmDevices(org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getVmTemplate()); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getVmTemplate(), true); incrementDbGeneration(); org.ovirt.engine.core.bll.VmTemplateHandler.unlockVmTemplate(org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getVmTemplateId()); } else { org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.setCommandShouldBeLogged(false); log.warn("MoveOrCopyTemplateCommand::EndMoveOrCopyCommand: VmTemplate is null, not performing full endAction"); } }
protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.VmHostDevice> getExistingVmHostDevicesByName() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> existingDevices = org.ovirt.engine.core.bll.hostdev.AbstractVmHostDevicesCommand.getVmDeviceDao().getVmDeviceByVmIdAndType(org.ovirt.engine.core.bll.hostdev.AbstractVmHostDevicesCommand.getVmId(), VmDeviceGeneralType.HOSTDEV); java.util.List<org.ovirt.engine.core.common.businessentities.VmHostDevice> result = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmDevice device : existingDevices) { result.add(new org.ovirt.engine.core.common.businessentities.VmHostDevice(device)); } return <START_MOD>vmDeviceUtils<END_MOD>.vmDevicesByDevice(result); }	protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.VmHostDevice> getExistingVmHostDevicesByName() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> existingDevices = org.ovirt.engine.core.bll.hostdev.AbstractVmHostDevicesCommand.getVmDeviceDao().getVmDeviceByVmIdAndType(org.ovirt.engine.core.bll.hostdev.AbstractVmHostDevicesCommand.getVmId(), VmDeviceGeneralType.HOSTDEV); java.util.List<org.ovirt.engine.core.common.businessentities.VmHostDevice> result = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmDevice device : existingDevices) { result.add(new org.ovirt.engine.core.common.businessentities.VmHostDevice(device)); } return org.ovirt.engine.core.bll.hostdev.AbstractVmHostDevicesCommand.getVmDeviceUtils().vmDevicesByDevice(result); }
@java.lang.Override protected void executeCommand() { boolean success = true; org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { initImportClonedTemplateDisks(); addVmTemplateToDb(); updateOriginalTemplateNameOnDerivedVms(); addVmInterfaces(); getCompensationContext().stateChanged(); org.ovirt.engine.core.bll.VmHandler.addVmInitToDB(getVmTemplate()); return null; }); boolean doesVmTemplateContainImages = !(getImages().isEmpty()); if (doesVmTemplateContainImages && (!(getParameters().isImagesExistOnTargetStorageDomain()))) { moveOrCopyAllImageGroups(getVmTemplateId(), getImages()); } <START_MOD>vmDeviceUtils<END_MOD>.addImportedDevices(getVmTemplate(), getParameters().isImportAsNewEntity()); if ((!doesVmTemplateContainImages) || (getParameters().isImagesExistOnTargetStorageDomain())) { endMoveOrCopyCommand(); } checkTrustedService(); setSucceeded(success); }	@java.lang.Override protected void executeCommand() { boolean success = true; org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { initImportClonedTemplateDisks(); addVmTemplateToDb(); updateOriginalTemplateNameOnDerivedVms(); addVmInterfaces(); getCompensationContext().stateChanged(); org.ovirt.engine.core.bll.VmHandler.addVmInitToDB(getVmTemplate()); return null; }); boolean doesVmTemplateContainImages = !(getImages().isEmpty()); if (doesVmTemplateContainImages && (!(getParameters().isImagesExistOnTargetStorageDomain()))) { moveOrCopyAllImageGroups(getVmTemplateId(), getImages()); } getVmDeviceUtils().addImportedDevices(getVmTemplate(), getParameters().isImportAsNewEntity()); if ((!doesVmTemplateContainImages) || (getParameters().isImagesExistOnTargetStorageDomain())) { endMoveOrCopyCommand(); } checkTrustedService(); setSucceeded(success); }
protected void mockOsRepository() { injectorRule.bind(org.ovirt.engine.core.bll.CpuFlagsManagerHandler.class, cpuFlagsManagerHandler); org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepository); <START_MOD>vmDeviceUtils.init(); <END_MOD>org.ovirt.engine.core.bll.VmHandler.init(); when(osRepository.isWindows(0)).thenReturn(true); when(osRepository.getMinimumRam(vm.getVmOsId(), org.ovirt.engine.core.compat.Version.getLast())).thenReturn(0); when(osRepository.getMaximumRam(vm.getVmOsId(), org.ovirt.engine.core.compat.Version.getLast())).thenReturn(100); when(osRepository.getArchitectureFromOS(14)).thenReturn(ArchitectureType.x86_64); }	protected void mockOsRepository() { injectorRule.bind(org.ovirt.engine.core.bll.CpuFlagsManagerHandler.class, cpuFlagsManagerHandler); org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepository); vmDeviceUtils.init(); injectorRule.bind(org.ovirt.engine.core.bll.utils.VmDeviceUtils.class, vmDeviceUtils); org.ovirt.engine.core.bll.VmHandler.init(); when(osRepository.isWindows(0)).thenReturn(true); when(osRepository.getMinimumRam(vm.getVmOsId(), org.ovirt.engine.core.compat.Version.getLast())).thenReturn(0); when(osRepository.getMaximumRam(vm.getVmOsId(), org.ovirt.engine.core.compat.Version.getLast())).thenReturn(100); when(osRepository.getArchitectureFromOS(14)).thenReturn(ArchitectureType.x86_64); }
private org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void> updateDevice() { return () -> { vmDevice.setIsPlugged(((getParameters().getAction()) == PlugAction.PLUG)); getVmDeviceDao().update(vmDevice); <START_MOD>vmDeviceUtils<END_MOD>.updateBootOrder(getVm().getId()); return null; }; }	private org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void> updateDevice() { return () -> { vmDevice.setIsPlugged(((getParameters().getAction()) == PlugAction.PLUG)); getVmDeviceDao().update(vmDevice); getVmDeviceUtils().updateBootOrder(getVm().getId()); return null; }; }
@java.lang.Override protected void incrementDbGeneration() { if (org.ovirt.engine.core.bll.exportimport.ExportVmTemplateCommand.getParameters().getTaskGroupSuccess()) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.util.List<org.ovirt.engine.core.compat.Guid>>> metaDictionary = new java.util.HashMap<>(); org.ovirt.engine.core.bll.storage.ovfstore.OvfUpdateProcessHelper ovfUpdateProcessHelper = new org.ovirt.engine.core.bll.storage.ovfstore.OvfUpdateProcessHelper(<START_MOD>vmDeviceUtils<END_MOD>); ovfUpdateProcessHelper.loadTemplateData(org.ovirt.engine.core.bll.exportimport.ExportVmTemplateCommand.getVmTemplate()); org.ovirt.engine.core.bll.VmTemplateHandler.updateDisksFromDb(org.ovirt.engine.core.bll.exportimport.ExportVmTemplateCommand.getVmTemplate()); ovfUpdateProcessHelper.buildMetadataDictionaryForTemplate(org.ovirt.engine.core.bll.exportimport.ExportVmTemplateCommand.getVmTemplate(), metaDictionary); ovfUpdateProcessHelper.executeUpdateVmInSpmCommand(org.ovirt.engine.core.bll.exportimport.ExportVmTemplateCommand.getVmTemplate().getStoragePoolId(), metaDictionary, org.ovirt.engine.core.bll.exportimport.ExportVmTemplateCommand.getParameters().getStorageDomainId()); } }	@java.lang.Override protected void incrementDbGeneration() { if (org.ovirt.engine.core.bll.exportimport.ExportVmTemplateCommand.getParameters().getTaskGroupSuccess()) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.util.List<org.ovirt.engine.core.compat.Guid>>> metaDictionary = new java.util.HashMap<>(); org.ovirt.engine.core.bll.storage.ovfstore.OvfUpdateProcessHelper ovfUpdateProcessHelper = new org.ovirt.engine.core.bll.storage.ovfstore.OvfUpdateProcessHelper(org.ovirt.engine.core.bll.exportimport.ExportVmTemplateCommand.getVmDeviceUtils()); ovfUpdateProcessHelper.loadTemplateData(org.ovirt.engine.core.bll.exportimport.ExportVmTemplateCommand.getVmTemplate()); org.ovirt.engine.core.bll.VmTemplateHandler.updateDisksFromDb(org.ovirt.engine.core.bll.exportimport.ExportVmTemplateCommand.getVmTemplate()); ovfUpdateProcessHelper.buildMetadataDictionaryForTemplate(org.ovirt.engine.core.bll.exportimport.ExportVmTemplateCommand.getVmTemplate(), metaDictionary); ovfUpdateProcessHelper.executeUpdateVmInSpmCommand(org.ovirt.engine.core.bll.exportimport.ExportVmTemplateCommand.getVmTemplate().getStoragePoolId(), metaDictionary, org.ovirt.engine.core.bll.exportimport.ExportVmTemplateCommand.getParameters().getStorageDomainId()); } }
protected boolean isVirtioScsiControllerAttached(org.ovirt.engine.core.compat.Guid vmId) { return <START_MOD>getVmDeviceUtils()<END_MOD>.hasVirtioScsiController(vmId); }	protected boolean isVirtioScsiControllerAttached(org.ovirt.engine.core.compat.Guid vmId) { return org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVmDeviceUtils().hasVirtioScsiController(vmId); }
private void populateVmData(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(vm); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(vm.getStaticData(), true); <START_MOD>vmDeviceUtils<END_MOD>.setVmDevices(vm.getStaticData()); }	private void populateVmData(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(vm); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(vm.getStaticData(), true); org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVmDeviceUtils().setVmDevices(vm.getStaticData()); }
private void addInterfaceDeviceToDb() { org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = <START_MOD>vmDeviceUtils<END_MOD>.addInterface(org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getParameters().getVmId(), org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getInterface().getId(), org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getInterface().isPlugged(), org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getInterface().isPassthrough()); org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getCompensationContext().snapshotNewEntity(vmDevice); }	private void addInterfaceDeviceToDb() { org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getVmDeviceUtils().addInterface(org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getParameters().getVmId(), org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getInterface().getId(), org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getInterface().isPlugged(), org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getInterface().isPassthrough()); org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getCompensationContext().snapshotNewEntity(vmDevice); }
private void processImages(final boolean useCopyImages) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmImagesAndSnapshots(); addMemoryImages(); updateSnapshotsFromExport(); if (useCopyImages) { moveOrCopyAllImageGroups(); } <START_MOD>vmDeviceUtils<END_MOD>.addImportedDevices(getVm().getStaticData(), getParameters().isImportAsNewEntity()); if (getParameters().isImportAsNewEntity()) { getParameters().setVm(getVm()); setVmId(getVm().getId()); } return null; }); }	private void processImages(final boolean useCopyImages) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmImagesAndSnapshots(); addMemoryImages(); updateSnapshotsFromExport(); if (useCopyImages) { moveOrCopyAllImageGroups(); } getVmDeviceUtils().addImportedDevices(getVm().getStaticData(), getParameters().isImportAsNewEntity()); if (getParameters().isImportAsNewEntity()) { getParameters().setVm(getVm()); setVmId(getVm().getId()); } return null; }); }
@org.junit.Before public void initTest() { mockCpuFlagsManagerHandler(); mockOsRepository(); doReturn(deviceDao).when(dbFacade).getVmDeviceDao(); }	@org.junit.Before public void initTest() { mockCpuFlagsManagerHandler(); mockOsRepository(); doReturn(deviceDao).when(dbFacade).getVmDeviceDao(); injectorRule.bind(org.ovirt.engine.core.bll.utils.VmDeviceUtils.class, vmDeviceUtils); org.ovirt.engine.core.bll.VmHandler.init(); }
protected boolean pciAndIdeWithinLimit(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> allInterfaces) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> diskVmElements = org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getDiskVmElementDao().getAllForVm(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()); return checkPciAndIdeLimit(vm.getOs(), vm.getCompatibilityVersion(), vm.getNumOfMonitors(), allInterfaces, diskVmElements, <START_MOD>vmDeviceUtils<END_MOD>.hasVirtioScsiController(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), <START_MOD>vmDeviceUtils<END_MOD>.hasWatchdog(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), <START_MOD>vmDeviceUtils<END_MOD>.hasMemoryBalloon(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), <START_MOD>vmDeviceUtils<END_MOD>.hasSoundDevice(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getReturnValue().getValidationMessages()); }	protected boolean pciAndIdeWithinLimit(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> allInterfaces) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> diskVmElements = org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getDiskVmElementDao().getAllForVm(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()); return checkPciAndIdeLimit(vm.getOs(), vm.getCompatibilityVersion(), vm.getNumOfMonitors(), allInterfaces, diskVmElements, org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmDeviceUtils().hasVirtioScsiController(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmDeviceUtils().hasWatchdog(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmDeviceUtils().hasMemoryBalloon(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmDeviceUtils().hasSoundDevice(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getReturnValue().getValidationMessages()); }
protected boolean updateVmInSpm() { org.ovirt.engine.core.bll.storage.ovfstore.OvfUpdateProcessHelper ovfHelper = new org.ovirt.engine.core.bll.storage.ovfstore.OvfUpdateProcessHelper(<START_MOD>vmDeviceUtils<END_MOD>); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.util.List<org.ovirt.engine.core.compat.Guid>>> metaDictionary = new java.util.HashMap<>(); ovfHelper.loadVmData(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm()); ovfHelper.buildMetadataDictionaryForVm(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm(), metaDictionary, ovfHelper.getVmImagesFromDb(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm())); return ovfHelper.executeUpdateVmInSpmCommand(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm().getStoragePoolId(), metaDictionary, org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getParameters().getStorageDomainId()); }	protected boolean updateVmInSpm() { org.ovirt.engine.core.bll.storage.ovfstore.OvfUpdateProcessHelper ovfHelper = new org.ovirt.engine.core.bll.storage.ovfstore.OvfUpdateProcessHelper(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVmDeviceUtils()); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.util.List<org.ovirt.engine.core.compat.Guid>>> metaDictionary = new java.util.HashMap<>(); ovfHelper.loadVmData(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm()); ovfHelper.buildMetadataDictionaryForVm(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm(), metaDictionary, ovfHelper.getVmImagesFromDb(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm())); return ovfHelper.executeUpdateVmInSpmCommand(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm().getStoragePoolId(), metaDictionary, org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getParameters().getStorageDomainId()); }
public boolean isHostedEngine(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { return isHostedEngineDomain(storageDomain); }	protected org.ovirt.engine.core.bll.utils.VmDeviceUtils getVmDeviceUtils() { return vmDeviceUtils; }
private boolean containsRunningHostedEngine(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { return org.ovirt.engine.core.<START_MOD>bll<END_MOD>.<START_MOD>hostedengine<END_MOD>.<START_MOD>HostedEngineHelper<END_MOD>.<START_MOD>isHostedEngineDomain<END_MOD>(<START_MOD>storageDomain<END_MOD>); }	public boolean containsRunningHostedEngine(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { return hostedEngineHelper.isHostedEngineStorageDomain(storageDomain); }
@org.junit.Test public void shouldNotElectInactiveHostedEngineDomain() { prepareStorageDomainForElection(StorageDomainStatus.Inactive, org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBaseTest.HE_STORAGE_DOMAIN_NAME); <START_MOD>doReturn(true).when(cmd).isHostedEngine(any(org.ovirt.engine.core.common.businessentities.StorageDomain.class)); <END_MOD>assertEquals(null, cmd.electNewMaster(false, true, false)); }	@org.junit.Test public void shouldNotElectInactiveHostedEngineDomain() { prepareStorageDomainForElection(StorageDomainStatus.Inactive, org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBaseTest.HE_STORAGE_DOMAIN_NAME); when(hostedEngineHelper.isHostedEngineStorageDomain(any(org.ovirt.engine.core.common.businessentities.StorageDomain.class))).thenReturn(true); assertEquals(null, cmd.electNewMaster(false, true, false)); }
@org.junit.Test public void shouldNotElectUnknownHostedEngineDomain() { prepareStorageDomainForElection(StorageDomainStatus.Unknown, org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBaseTest.HE_STORAGE_DOMAIN_NAME); <START_MOD>doReturn(true).when(cmd).isHostedEngine(any(org.ovirt.engine.core.common.businessentities.StorageDomain.class)); <END_MOD>assertEquals(null, cmd.electNewMaster()); }	@org.junit.Test public void shouldNotElectUnknownHostedEngineDomain() { prepareStorageDomainForElection(StorageDomainStatus.Unknown, org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBaseTest.HE_STORAGE_DOMAIN_NAME); when(hostedEngineHelper.isHostedEngineStorageDomain(any(org.ovirt.engine.core.common.businessentities.StorageDomain.class))).thenReturn(true); assertEquals(null, cmd.electNewMaster()); }
@org.junit.Test public void shouldNotElectActiveHostedEngineDomain() { prepareStorageDomainForElection(StorageDomainStatus.Active, org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBaseTest.HE_STORAGE_DOMAIN_NAME); <START_MOD>doReturn(true).when(cmd).isHostedEngine(any(org.ovirt.engine.core.common.businessentities.StorageDomain.class)); <END_MOD>assertEquals(null, cmd.electNewMaster()); }	@org.junit.Test public void shouldNotElectActiveHostedEngineDomain() { prepareStorageDomainForElection(StorageDomainStatus.Active, org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBaseTest.HE_STORAGE_DOMAIN_NAME); when(hostedEngineHelper.isHostedEngineStorageDomain(any(org.ovirt.engine.core.common.businessentities.StorageDomain.class))).thenReturn(true); assertEquals(null, cmd.electNewMaster()); }
@javax.annotation.PostConstruct private void init() { java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> byName = dbFacade.getVmStaticDao().getAllByName(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.HostedEngineVmName)); if ((byName != null) && (!(byName.isEmpty()))) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = byName.get(0); hostedEngineVm = dbFacade.getVmDao().get(vmStatic.getId()); org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(hostedEngineVm); } <START_MOD>org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getHostedEngineStorageDomainByHostedEngineVM(); <END_MOD>sd = <START_MOD>(storageDomain == null) ? null : storageDomain.getStorageStaticData(<END_MOD>); }	@javax.annotation.PostConstruct private void init() { java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> byName = vmStaticDao.getAllByName(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.HostedEngineVmName)); if ((byName != null) && (!(byName.isEmpty()))) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = byName.get(0); hostedEngineVm = vmDao.get(vmStatic.getId()); org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(hostedEngineVm); } initHostedEngineStorageDomain(); }
public static boolean isHostedEngineDomain(final org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { <START_MOD>java.util.List<<END_MOD>org.ovirt.engine.core.common.<START_MOD>businessentities<END_MOD>.<START_MOD>VM> vms = org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine<END_MOD>.<START_MOD>core.dal.dbbroker.DbFacade.getInstance<END_MOD>().<START_MOD>getVmDao().getAllForStorageDomain<END_MOD>(storageDomain.<START_MOD>getId()); if ((vms == null) || (vms.isEmpty())) { return false; } java.util.List<org.ovirt.engine.core.compat.Guid> hostedEngineVm = vms.stream().filter(( vm) -> vm.isHostedEngine()).map(VM::getId).collect(java.util.stream.Collectors.toList()); return !(hostedEngineVm.isEmpty<END_MOD>()); }	public boolean isHostedEngineStorageDomain(final org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = vmDao.getAllForStorageDomain(storageDomain.getId()); if (vms == null) { return false; } return vms.stream().filter(VM::isHostedEngine).findAny().isPresent(); }
public org.ovirt.engine.core.common.businessentities.StorageDomain getHostedEngineStorageDomainByHostedEngineVM() { if ((hostedEngineVm) == null) { return null; } org.ovirt.engine.core.compat.Guid hostedEngineStorageDomainId = hostedEngineVm.getImages().get(0).getStorageIds().get(0); org.ovirt.engine.core.common.businessentities.StoragePool storagePool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolDao().getForCluster(hostedEngineVm.getClusterId()); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().getForStoragePool(hostedEngineStorageDomainId, storagePool.getId()); return storageDomain; }	private void initHostedEngineStorageDomain() { if ((hostedEngineVm) == null) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskList = hostedEngineVm.getDiskList(); if ((diskList == null) || (diskList.isEmpty())) { return; } org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = diskList.get(0); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> allStorageDomainsByImageId = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().getAllStorageDomainsByImageId(disk.getImageId()); if ((allStorageDomainsByImageId == null) || (allStorageDomainsByImageId.isEmpty())) { return; } org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = allStorageDomainsByImageId.get(0); storageDomainStatic = (storageDomain == null) ? null : storageDomain.getStorageStaticData(); }
private org.ovirt.engine.core.common.businessentities.StorageDomain getHEStorageDomain(org.ovirt.engine.core.common.businessentities.VM vm<START_MOD>, org.ovirt.engine.core.common.businessentities.StoragePool storagePool, org.ovirt.engine.core.compat.Guid storageDomainId<END_MOD>) { org.ovirt.engine.core.common.businessentities.StorageDomain<START_MOD> storageDomain<END_MOD> = <START_MOD>org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().getForStoragePool(storageDomainId, storagePool.getId()); if (storageDomain != null) { return storageDomain; } org.ovirt.engine.core.common.action.StorageDomainManagementParameter importParams = new org.ovirt.engine.core.common.action.StorageDomainManagementParameter(); importParams.setStorageDomainId(storageDomainId); importParams.setVdsId(vm.getRunOnVds()); return <END_MOD>backend.<START_MOD>runInternalAction(VdcActionType.ImportHostedEngineStorageDomain, importParams).getActionReturnValue(<END_MOD>); }	private org.ovirt.engine.core.common.businessentities.StorageDomain getHEStorageDomain(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.StoragePool storagePool, org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = storageDomainDao.getForStoragePool(storageDomainId, storagePool.getId()); if (storageDomain != null) { return storageDomain; } org.ovirt.engine.core.common.action.StorageDomainManagementParameter importParams = new org.ovirt.engine.core.common.action.StorageDomainManagementParameter(); importParams.setStorageDomainId(storageDomainId); importParams.setVdsId(vm.getRunOnVds()); return backend.runInternalAction(VdcActionType.ImportHostedEngineStorageDomain, importParams).getActionReturnValue(); }
@org.junit.Test public void shouldElectActiveDataDomain() { final org.ovirt.engine.core.common.businessentities.StorageDomain domain = prepareStorageDomainForElection(StorageDomainStatus.Active,   he domain name <START_MOD>doReturn(false).when(cmd).isHostedEngine(any(org.ovirt.engine.core.common.businessentities.StorageDomain.class)); <END_MOD>assertEquals(domain, cmd.electNewMaster()); }	@org.junit.Test public void shouldElectActiveDataDomain() { final org.ovirt.engine.core.common.businessentities.StorageDomain domain = prepareStorageDomainForElection(StorageDomainStatus.Active, "not he domain name"); when(hostedEngineHelper.isHostedEngineStorageDomain(any(org.ovirt.engine.core.common.businessentities.StorageDomain.class))).thenReturn(false); assertEquals(domain, cmd.electNewMaster()); }
@java.lang.Override public void onNext(java.util.Map<java.lang.String, java.lang.Object> map) { <START_MOD>boolean lockAcquired = false; org.ovirt.engine.core.compat.Guid vdsId = vdsManager.getVdsId(); <END_MOD>try { <START_MOD>lockAcquired = org<END_MOD>.<START_MOD>ovirt.engine.core.utils.lock.LockManagerFactory.getLockManager().acquireLock(setupNetworksLock).getFirst<END_MOD>();<START_MOD> if (lockAcquired) { resourceManager.getEventListener().refreshHostCapabilities(vdsId); }<END_MOD> } finally {<START_MOD> if (lockAcquired) { org.ovirt.engine.core.utils.lock.LockManagerFactory.getLockManager().releaseLock(setupNetworksLock); }<END_MOD> subscription.request(1); } }	@java.lang.Override public void onNext(java.util.Map<java.lang.String, java.lang.Object> map) { try { resourceManager.getEventListener().refreshHostCapabilities(vdsManager.getVdsId()); } finally { subscription.request(1); } }
@org.ovirt.api.metamodel.annotations.Link types.Statistic[] statistic();	@org.ovirt.api.metamodel.annotations.Link types.Statistic[] statistics();
@org.ovirt.api.metamodel.annotations.Link types.NetworkFilter[] networkfilters();	@org.ovirt.api.metamodel.annotations.Link types.NetworkFilter[] networkFilters();
@org.ovirt.api.metamodel.annotations.Link types.GlusterVolume[] glustervolumes();	@org.ovirt.api.metamodel.annotations.Link types.GlusterVolume[] glusterVolumes();
@org.ovirt.api.metamodel.annotations.Link types.NetworkLabel virtualFunctionAllowedLabels();	@org.ovirt.api.metamodel.annotations.Link types.NetworkLabel[] virtualFunctionAllowedLabels();
@org.ovirt.api.metamodel.annotations.Link types.Network virtualFunctionAllowedNetworks();	@org.ovirt.api.metamodel.annotations.Link types.Network[] virtualFunctionAllowedNetworks();
public static void main(java.lang.String[] args) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection().url("https://engine40.example.com/ovirt-engine/api").user("admin@internal").password("redhat123").trustStoreFile("truststore.jks").build(); org.ovirt.engine.sdk4.services.VmsService vmsService = connection.systemService().vmsService(); org.ovirt.engine.sdk4.types.Vm vm = vmsService.list().search("name=myvm").send().vms().get(0); org.ovirt.engine.sdk4.types.Cluster cluster = connection.followLink(vm.cluster()); org.ovirt.engine.sdk4.types.Template template = connection.followLink(vm.template()); java.<START_MOD>util.List<org.ovirt.engine.sdk4.types.Permission> permissions = connection.followLink(vm.permissions()); java.<END_MOD>lang.System.out.printf( %s cluster.name()); java.lang.System.out.printf( %s template.name()); <START_MOD>for (org.ovirt.engine.sdk4.types.Permission permission : permissions) { java.lang.System.out.printf( role id: %s permission.role().id()); } <END_MOD>connection.close(); }	public static void main(java.lang.String[] args) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection().url("https://engine40.example.com/ovirt-engine/api").user("admin@internal").password("redhat123").trustStoreFile("truststore.jks").build(); org.ovirt.engine.sdk4.services.VmsService vmsService = connection.systemService().vmsService(); org.ovirt.engine.sdk4.types.Vm vm = vmsService.list().search("name=myvm").send().vms().get(0); org.ovirt.engine.sdk4.types.Cluster cluster = connection.followLink(vm.cluster()); org.ovirt.engine.sdk4.types.Template template = connection.followLink(vm.template()); java.util.List<org.ovirt.engine.sdk4.types.Permission> permissions = connection.followLink(vm.permissions()); java.lang.System.out.printf("cluster: %s\n", cluster.name()); java.lang.System.out.printf("template: %s\n", template.name()); for (org.ovirt.engine.sdk4.types.Permission permission : permissions) { java.lang.System.out.printf("role: %s\n", permission.role().id()); } connection.close(); }
@java.lang.Override protected com.google.gwt.dom.client.Element getContainerElement(com.google.gwt.dom.client.Element parent) { <START_MOD>com.google.gwt.dom.client.Element firstChildElement =<END_MOD> super.getContainerElement(parent).getFirstChildElement()<START_MOD>; if (firstChildElement != null) { return firstChildElement<END_MOD>.getFirstChildElement().getFirstChildElement(); }<START_MOD> else { return super.getContainerElement(parent); } }<END_MOD>	@java.lang.Override protected com.google.gwt.dom.client.Element getContainerElement(com.google.gwt.dom.client.Element parent) { return super.getContainerElement(parent).getFirstChildElement().getFirstChildElement().getFirstChildElement(); }
private boolean isClusterLevelChange() { org.ovirt.engine.core.compat.Version newVersion = org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getClusterLevelChangeToVersion(); return ((newVersion != null) && (org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isRunningOrPaused())) && (((org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getCustomCompatibilityVersion()) == null) || (!(newVersion.equals(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getCompatibilityVersion())))); }	private boolean isClusterLevelChange() { org.ovirt.engine.core.compat.Version newVersion = org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getClusterLevelChangeToVersion(); return ((newVersion != null) && ((org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isRunningOrPaused()) || (org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isSuspended()))) && ((org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getCustomCompatibilityVersion()) == null); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.SwitchType.class, to = org.ovirt.engine.core.common.SwitchType.class) public static org.ovirt.engine.core.common.SwitchType map(org.ovirt.engine.api.model.SwitchType switchType) { if (switchType == null) { return null; } switch (switchType) { case LEGACY : return org.ovirt.engine.core.common.SwitchType.LEGACY; case OVS : return org.ovirt.engine.core.common.SwitchType.OVS; default : throw new java.lang.IllegalArgumentException(("Unknown enum value: " + switchType)); } }	public static org.ovirt.engine.api.model.SwitchType mapFromModel(org.ovirt.engine.api.model.SwitchType switchType) { switch (switchType) { case LEGACY : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.network.SwitchType; case OVS : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.network.SwitchType; default : throw new java.lang.IllegalArgumentException(("Unknown switch type value: " + switchType)); } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.SwitchType.class, to = org.ovirt.engine.core.common.SwitchType.class) public static org.ovirt.engine.core.common.SwitchType map(org.ovirt.engine.core.common.SwitchType switchType) { if (switchType == null) { return null; } switch (switchType) { case LEGACY : return org.ovirt.engine.core.common.org.ovirt.engine.api.model.SwitchType; case OVS : return org.ovirt.engine.core.common.org.ovirt.engine.api.model.SwitchType; default : throw new java.lang.IllegalArgumentException(("Unknown enum value: " + switchType)); } }	public static org.ovirt.engine.api.model.SwitchType mapToModel(org.ovirt.engine.core.common.network.SwitchType switchType) { if (switchType == null) { return null; } switch (switchType) { case LEGACY : return org.ovirt.engine.api.model.SwitchType.LEGACY; case OVS : return org.ovirt.engine.api.model.SwitchType.OVS; default : throw new java.lang.IllegalArgumentException(("Unknown switch type value: " + switchType)); } }
private boolean isClusterLevelChange() { org.ovirt.engine.core.compat.Version newVersion = org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getClusterLevelChangeToVersion(); return ((newVersion != null) && (org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isRunningOrPaused())) && (((org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getCustomCompatibilityVersion()) == null) || (!(newVersion.equals(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getCustomCompatibilityVersion())))); }	private boolean isClusterLevelChange() { org.ovirt.engine.core.compat.Version newVersion = org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getClusterLevelChangeToVersion(); return ((newVersion != null) && ((org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isRunningOrPaused()) || (org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isSuspended()))) && ((org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getCustomCompatibilityVersion()) == null); }
@org.junit.Test public void canRemoveBrickReduceReplicaMoreThanOne() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedReplicatedVolume(volumeId1, 12, 4); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricksToRemove = new java.util.ArrayList<>(); bricksToRemove.add(volumeEntity.getBricks().get(0)); bricksToRemove.add(volumeEntity.getBricks().get(4)); bricksToRemove.add(volumeEntity.getBricks().get(8)); bricksToRemove.add(volumeEntity.getBricks().get(1)); bricksToRemove.add(volumeEntity.getBricks().get(5)); bricksToRemove.add(volumeEntity.getBricks().get(9)); org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(bricksToRemove, volumeEntity, 2, false); assertFalse(validationResult.isValid()); <START_MOD>assertEquals(<END_MOD>EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT_MORE_THAN_ONE<START_MOD>, <END_MOD>validationResult.getMessage()); }	@org.junit.Test public void canRemoveBrickReduceReplicaMoreThanOne() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedReplicatedVolume(volumeId1, 12, 4); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricksToRemove = new java.util.ArrayList<>(); bricksToRemove.add(volumeEntity.getBricks().get(0)); bricksToRemove.add(volumeEntity.getBricks().get(4)); bricksToRemove.add(volumeEntity.getBricks().get(8)); bricksToRemove.add(volumeEntity.getBricks().get(1)); bricksToRemove.add(volumeEntity.getBricks().get(5)); bricksToRemove.add(volumeEntity.getBricks().get(9)); org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(bricksToRemove, volumeEntity, 2, false); assertThat(validationResult, org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT_MORE_THAN_ONE)); }
@org.junit.Test public void canRemoveNonExistentBrick() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedVolume(volumeId1, 4); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricksToRemove = new java.util.ArrayList<>(); bricksToRemove.addAll(getBricks(volumeEntity.getId(), 1)); bricksToRemove.get(0).setBrickDirectory("NewServer:/NewExport"); org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(bricksToRemove, volumeEntity, 1, false); assertFalse(validationResult.isValid()); <START_MOD>assertEquals<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_BRICK_INVALID<START_MOD>,<END_MOD> validationResult.getMessage()); }	@org.junit.Test public void canRemoveNonExistentBrick() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedVolume(volumeId1, 4); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricksToRemove = new java.util.ArrayList<>(); bricksToRemove.addAll(getBricks(volumeEntity.getId(), 1)); bricksToRemove.get(0).setBrickDirectory("NewServer:/NewExport"); org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(bricksToRemove, volumeEntity, 1, false); assertThat(validationResult, org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_BRICK_INVALID)); }
@org.junit.Test public void canRemoveBrickEmptyList() { org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(java.util.Collections.emptyList(), getDistributedVolume(volumeId1, 1), 3, false); assertFalse(validationResult.isValid()); <START_MOD>assertEquals<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_BRICKS_REQUIRED<START_MOD>,<END_MOD> validationResult.getMessage()); }	@org.junit.Test public void canRemoveBrickEmptyList() { org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(java.util.Collections.emptyList(), getDistributedVolume(volumeId1, 1), 3, false); assertThat(validationResult, org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_BRICKS_REQUIRED)); }
@org.junit.Test public void canRemoveWithOutforceAndReduceReplicaCount() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedReplicatedVolume(volumeId1, 12, 4); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricksToRemove = new java.util.ArrayList<>(); bricksToRemove.add(volumeEntity.getBricks().get(0)); bricksToRemove.add(volumeEntity.getBricks().get(4)); bricksToRemove.add(volumeEntity.getBricks().get(8)); org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(bricksToRemove, volumeEntity, 3, false); assertFalse(validationResult.isValid()); <START_MOD>assertEquals<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT_WITH_DATA_MIGRATION<START_MOD>,<END_MOD> validationResult.getMessage()); }	@org.junit.Test public void canRemoveWithOutforceAndReduceReplicaCount() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedReplicatedVolume(volumeId1, 12, 4); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricksToRemove = new java.util.ArrayList<>(); bricksToRemove.add(volumeEntity.getBricks().get(0)); bricksToRemove.add(volumeEntity.getBricks().get(4)); bricksToRemove.add(volumeEntity.getBricks().get(8)); org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(bricksToRemove, volumeEntity, 3, false); assertThat(validationResult, org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT_WITH_DATA_MIGRATION)); }
@org.junit.Test public void canRemoveBrickIfSomeBricksAreDown() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedVolume(volumeId1, 4); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricksToRemove = new java.util.ArrayList<>(); bricksToRemove.add(volumeEntity.getBricks().get(1)); volumeEntity.getBricks().get(0).setStatus(GlusterStatus.DOWN); org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(bricksToRemove, volumeEntity, 1, false); assertFalse(validationResult.isValid()); <START_MOD>assertEquals<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_ONE_OR_MORE_BRICKS_ARE_DOWN<START_MOD>,<END_MOD> validationResult.getMessage()); }	@org.junit.Test public void canRemoveBrickIfSomeBricksAreDown() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedVolume(volumeId1, 4); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricksToRemove = new java.util.ArrayList<>(); bricksToRemove.add(volumeEntity.getBricks().get(1)); volumeEntity.getBricks().get(0).setStatus(GlusterStatus.DOWN); org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(bricksToRemove, volumeEntity, 1, false); assertThat(validationResult, org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_ONE_OR_MORE_BRICKS_ARE_DOWN)); }
@org.junit.Test public void canRemoveIncreaseReplica() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedReplicatedVolume(volumeId1, 12, 4); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricksToRemove = new java.util.ArrayList<>(); bricksToRemove.add(volumeEntity.getBricks().get(0)); org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(bricksToRemove, volumeEntity, 5, false); assertFalse(validationResult.isValid()); <START_MOD>assertEquals<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT<START_MOD>,<END_MOD> validationResult.getMessage()); }	@org.junit.Test public void canRemoveIncreaseReplica() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedReplicatedVolume(volumeId1, 12, 4); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricksToRemove = new java.util.ArrayList<>(); bricksToRemove.add(volumeEntity.getBricks().get(0)); org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(bricksToRemove, volumeEntity, 5, false); assertThat(validationResult, org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT)); }
@org.junit.Test public void canRemoveLastBrick() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedVolume(volumeId1, 1); org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(volumeEntity.getBricks(), volumeEntity, 1, false); assertFalse(validationResult.isValid()); <START_MOD>assertEquals<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_REMOVE_ALL_BRICKS_FROM_VOLUME<START_MOD>,<END_MOD> validationResult.getMessage()); }	@org.junit.Test public void canRemoveLastBrick() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedVolume(volumeId1, 1); org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(volumeEntity.getBricks(), volumeEntity, 1, false); assertThat(validationResult, org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_REMOVE_ALL_BRICKS_FROM_VOLUME)); }
@java.lang.Override protected void executeVdsBrokerCommand() { vmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getBroker().list(); org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.proceedProxyReturnValue(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> returnVMs = new java.util.HashMap<>(); for (int idx = 0; idx < (vmListReturn.vmList.length); ++idx) { java.util.Map<java.lang.String, java.lang.Object> vm = vmListReturn.vmList[idx]; org.ovirt.engine.core.common.businessentities.VmDynamic dynamicData = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVMDynamicDataFromList(vm); org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData vmData = new org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData(<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.getVdsmCallTimestamp(vm)).setVmDynamic(<END_MOD>dynamicData<START_MOD>); returnVMs.put(dynamicData.getId()<END_MOD>, <START_MOD>vmData); } setReturnValue(<END_MOD>returnVMs); }	@java.lang.Override protected void executeVdsBrokerCommand() { vmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getBroker().list(); org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.proceedProxyReturnValue(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> returnVMs = new java.util.HashMap<>(); for (int idx = 0; idx < (vmListReturn.vmList.length); ++idx) { java.util.Map<java.lang.String, java.lang.Object> vm = vmListReturn.vmList[idx]; org.ovirt.engine.core.common.businessentities.VmDynamic dynamicData = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.buildVMDynamicDataFromList(vm); org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData vmData = new org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData(org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getVdsmCallTimestamp(vm)).setVmDynamic(dynamicData); returnVMs.put(dynamicData.getId(), vmData); } setReturnValue(returnVMs); }
@java.lang.Override protected void executeVdsBrokerCommand() { vmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getBroker().list(); org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.proceedProxyReturnValue(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.<START_MOD>VdsmVm<END_MOD>> returnVMs = new java.util.HashMap<>(); for (int idx = 0; idx < (vmListReturn.vmList.length); ++idx) { java.util.Map<java.lang.String, java.lang.Object> vm = vmListReturn.vmList[idx]; org.ovirt.engine.core.common.businessentities.VmDynamic dynamicData = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVMDynamicDataFromList(vm); org.ovirt.engine.core.vdsbroker.vdsbroker.entities.<START_MOD>VdsmVm<END_MOD> vmData = new org.ovirt.engine.core.vdsbroker.vdsbroker.entities.<START_MOD>VdsmVm<END_MOD>(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.getVdsmCallTimestamp(vm)).setVmDynamic(dynamicData); returnVMs.put(dynamicData.getId(), vmData); } setReturnValue(returnVMs); }	@java.lang.Override protected void executeVdsBrokerCommand() { vmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getBroker().list(); org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.proceedProxyReturnValue(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VdsmVm> returnVMs = new java.util.HashMap<>(); for (int idx = 0; idx < (vmListReturn.vmList.length); ++idx) { java.util.Map<java.lang.String, java.lang.Object> vm = vmListReturn.vmList[idx]; org.ovirt.engine.core.common.businessentities.VmDynamic dynamicData = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.buildVMDynamicDataFromList(vm); org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VdsmVm vdsmVm = new org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VdsmVm(org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getVdsmCallTimestamp(vm)).setVmDynamic(dynamicData); returnVMs.put(dynamicData.getId(), vdsmVm); } setReturnValue(returnVMs); }
private void generateRows(org.ovirt.api.metamodel.concepts.Concept concept) { csvBuffer.addRow(getKind(concept), getName(concept), java.lang.String.valueOf(countItems(concept)), java.lang.String.valueOf(countDocuments(concept)), getAnnotation(concept, org.ovirt.api.metamodel.tool.DocReportGenerator.AREA), getAnnotation(concept, org.ovirt.api.metamodel.tool.DocReportGenerator.AUTHOR), getAnnotation(concept, org.ovirt.api.metamodel.tool.DocReportGenerator.DATE), getAnnotation(concept, org.ovirt.api.metamodel.tool.DocReportGenerator.STATUS)); }	private void generateRows(org.ovirt.api.metamodel.concepts.Concept concept) { csvBuffer.addRow(getKind(concept), getName(concept), java.lang.String.valueOf(countItems(concept)), java.lang.String.valueOf(countDocuments(concept)), getAnnotation(concept, org.ovirt.api.metamodel.tool.DocReportGenerator.AREA), getAnnotation(concept, org.ovirt.api.metamodel.tool.DocReportGenerator.AUTHOR), getAnnotation(concept, org.ovirt.api.metamodel.tool.DocReportGenerator.DATE), getAnnotation(concept, org.ovirt.api.metamodel.tool.DocReportGenerator.STATUS)); if (concept instanceof org.ovirt.api.metamodel.concepts.StructType) { org.ovirt.api.metamodel.concepts.StructType type = ((org.ovirt.api.metamodel.concepts.StructType) (concept)); type.attributes().sorted().forEach(this::generateRows); } else if (concept instanceof org.ovirt.api.metamodel.concepts.Service) { org.ovirt.api.metamodel.concepts.Service service = ((org.ovirt.api.metamodel.concepts.Service) (concept)); service.methods().sorted().forEach(this::generateRows); } }
private java.lang.String getName(org.ovirt.api.metamodel.concepts.Concept concept) { return concept.getName().toString(); }	private java.lang.String getName(org.ovirt.api.metamodel.concepts.Concept concept) { java.lang.String name = concept.getName().toString(); java.lang.String parent = null; if (concept instanceof org.ovirt.api.metamodel.concepts.StructMember) { org.ovirt.api.metamodel.concepts.StructMember member = ((org.ovirt.api.metamodel.concepts.StructMember) (concept)); parent = member.getDeclaringType().getName().toString(); } else if (concept instanceof org.ovirt.api.metamodel.concepts.Method) { org.ovirt.api.metamodel.concepts.Method method = ((org.ovirt.api.metamodel.concepts.Method) (concept)); parent = method.getDeclaringService().getName().toString(); } if (parent != null) { name = (parent + "/") + name; } return name; }
private java.lang.String getKind(org.ovirt.api.metamodel.concepts.Concept concept) { if (concept instanceof org.ovirt.api.metamodel.concepts.Type) { return "type"; } if (concept instanceof org.ovirt.api.metamodel.concepts.Service) { return "service"; } return ""; }	private java.lang.String getKind(org.ovirt.api.metamodel.concepts.Concept concept) { if (concept instanceof org.ovirt.api.metamodel.concepts.Type) { return "type"; } if (concept instanceof org.ovirt.api.metamodel.concepts.Attribute) { return "attribute"; } if (concept instanceof org.ovirt.api.metamodel.concepts.Link) { return "attribute"; } if (concept instanceof org.ovirt.api.metamodel.concepts.Service) { return "service"; } if (concept instanceof org.ovirt.api.metamodel.concepts.Method) { return "method"; } return ""; }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.<START_MOD>isAllAddVmsSucceeded<END_MOD>() ? org.ovirt.engine.core.common.AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS : org.ovirt.engine.core.common.AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS_FAILED; }	@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.UpdateVmPoolCommand.isAllAddVmsSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS : org.ovirt.engine.core.common.AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS_FAILED; }
@java.lang.Override protected <START_MOD>void<END_MOD> <START_MOD>createOrUpdateVmPool<END_MOD>() { org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getVmPoolDao().update(org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getVmPool()); }	@java.lang.Override protected void createOrUpdateVmPool() { org.ovirt.engine.core.bll.UpdateVmPoolCommand.getVmPoolDao().update(org.ovirt.engine.core.bll.UpdateVmPoolCommand.getVmPool()); }
private boolean isUpdateVmRequired(<START_MOD>java.util.List<<END_MOD>org.ovirt.engine.core.common.businessentities.VM<START_MOD>> vmsInPool) { if ((vmsInPool == null) || (vmsInPool.isEmpty())) { return false; } org.ovirt.engine.core.common.businessentities.VM<END_MOD> poolVm<START_MOD> = vmsInPool.get(0);<END_MOD> org.ovirt.engine.core.compat.Guid <START_MOD>currentTemplateVersion<END_MOD> = null; boolean isCurrentLatest = false; if (poolVm.isNextRunConfigurationExists()) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue qRetNextRun = org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getBackend().runInternalQuery(VdcQueryType.GetVmNextRunConfiguration, new org.ovirt.engine.core.common.queries.IdQueryParameters(poolVm.getId())); if (qRetNextRun.getSucceeded()) { final org.ovirt.engine.core.common.businessentities.VM nextRunVm = qRetNextRun.getReturnValue(); if (nextRunVm != null) { <START_MOD>currentTemplateVersion<END_MOD> = nextRunVm.getVmtGuid(); isCurrentLatest = nextRunVm.isUseLatestVersion(); } } } else { <START_MOD>currentTemplateVersion<END_MOD> = poolVm.getVmtGuid(); isCurrentLatest = poolVm.isUseLatestVersion(); } boolean isLatestPropertyChanged = isCurrentLatest != (org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getParameters().getVmStaticData().isUseLatestVersion()); boolean isTemplateIdChanged = false; org.ovirt.engine.core.compat.Guid newPoolTemplateVersion = org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getParameters().getVmStaticData().getVmtGuid(); if (newPoolTemplateVersion != null) { isTemplateIdChanged = (!(newPoolTemplateVersion.equals(<START_MOD>currentTemplateVersion<END_MOD>))) && (!isCurrentLatest); } return isLatestPropertyChanged || isTemplateIdChanged; }	private boolean isUpdateVmRequired(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsInPool) { if ((vmsInPool == null) || (vmsInPool.isEmpty())) { return false; } org.ovirt.engine.core.common.businessentities.VM poolVm = vmsInPool.get(0); org.ovirt.engine.core.compat.Guid currentTemplateVersion = null; boolean isCurrentLatest = false; if (poolVm.isNextRunConfigurationExists()) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue qRetNextRun = org.ovirt.engine.core.bll.UpdateVmPoolCommand.getBackend().runInternalQuery(VdcQueryType.GetVmNextRunConfiguration, new org.ovirt.engine.core.common.queries.IdQueryParameters(poolVm.getId())); if (qRetNextRun.getSucceeded()) { final org.ovirt.engine.core.common.businessentities.VM nextRunVm = qRetNextRun.getReturnValue(); if (nextRunVm != null) { currentTemplateVersion = nextRunVm.getVmtGuid(); isCurrentLatest = nextRunVm.isUseLatestVersion(); } } } else { currentTemplateVersion = poolVm.getVmtGuid(); isCurrentLatest = poolVm.isUseLatestVersion(); } boolean isLatestPropertyChanged = isCurrentLatest != (org.ovirt.engine.core.bll.UpdateVmPoolCommand.getParameters().getVmStaticData().isUseLatestVersion()); boolean isTemplateIdChanged = false; org.ovirt.engine.core.compat.Guid newPoolTemplateVersion = org.ovirt.engine.core.bll.UpdateVmPoolCommand.getParameters().getVmStaticData().getVmtGuid(); if (newPoolTemplateVersion != null) { isTemplateIdChanged = (!(newPoolTemplateVersion.equals(currentTemplateVersion))) && (!isCurrentLatest); } return isLatestPropertyChanged || isTemplateIdChanged; }
private void updatePoolVms(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsInPool) { boolean isUpdatedPoolLatest = org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getParameters().getVmStaticData().isUseLatestVersion(); org.ovirt.engine.core.bll.VmTemplateHandler.lockVmTemplateInTransaction(org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getParameters().getVmStaticData().getVmtGuid(), org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getCompensationContext()); for (org.ovirt.engine.core.common.businessentities.VM vm : vmsInPool) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.getVmStaticData().setUseLatestVersion(isUpdatedPoolLatest); if (!isUpdatedPoolLatest) { updateParams.getVmStaticData().setVmtGuid(org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getParameters().getVmStaticData().getVmtGuid()); } org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalActionWithTasksContext(VdcActionType.UpdateVm, updateParams, org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getLock()); org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getTaskIdList().addAll(result.getInternalVdsmTaskIdList()); setSucceeded(((org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getSucceeded()) && (result.getSucceeded()))); } org.ovirt.engine.core.bll.VmTemplateHandler.unlockVmTemplate(org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getParameters().getVmStaticData().getVmtGuid()); }	private void updatePoolVms(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsInPool) { boolean isUpdatedPoolLatest = org.ovirt.engine.core.bll.UpdateVmPoolCommand.getParameters().getVmStaticData().isUseLatestVersion(); org.ovirt.engine.core.bll.VmTemplateHandler.lockVmTemplateInTransaction(org.ovirt.engine.core.bll.UpdateVmPoolCommand.getParameters().getVmStaticData().getVmtGuid(), org.ovirt.engine.core.bll.UpdateVmPoolCommand.getCompensationContext()); for (org.ovirt.engine.core.common.businessentities.VM vm : vmsInPool) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.getVmStaticData().setUseLatestVersion(isUpdatedPoolLatest); if (!isUpdatedPoolLatest) { updateParams.getVmStaticData().setVmtGuid(org.ovirt.engine.core.bll.UpdateVmPoolCommand.getParameters().getVmStaticData().getVmtGuid()); } org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalActionWithTasksContext(VdcActionType.UpdateVm, updateParams, org.ovirt.engine.core.bll.UpdateVmPoolCommand.getLock()); org.ovirt.engine.core.bll.UpdateVmPoolCommand.getTaskIdList().addAll(result.getInternalVdsmTaskIdList()); setSucceeded(((org.ovirt.engine.core.bll.UpdateVmPoolCommand.getSucceeded()) && (result.getSucceeded()))); } org.ovirt.engine.core.bll.VmTemplateHandler.unlockVmTemplate(org.ovirt.engine.core.bll.UpdateVmPoolCommand.getParameters().getVmStaticData().getVmtGuid()); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue currentVmsInPoolQuery = runInternalQuery(VdcQueryType.GetAllPoolVms, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getVmPool().getVmPoolId())); java.util.List<org.ovirt.engine.core.common.businessentities.VM> poolVmsBeforeAdd = (currentVmsInPoolQuery.getSucceeded()) ? currentVmsInPoolQuery.<java.util.List<org.ovirt.engine.core.common.businessentities.VM>>getReturnValue() : null; super.executeCommand(); org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getCompensationContext().cleanupCompensationDataAfterSuccessfulCommand(); if (<START_MOD>(<END_MOD>org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getSucceeded()) <START_MOD>&& (isUpdateVmRequired(poolVmsBeforeAdd))) <END_MOD>{ updatePoolVms(poolVmsBeforeAdd); } vmPoolMonitor.triggerPoolMonitoringJob(); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue currentVmsInPoolQuery = runInternalQuery(VdcQueryType.GetAllPoolVms, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.UpdateVmPoolCommand.getVmPool().getVmPoolId())); java.util.List<org.ovirt.engine.core.common.businessentities.VM> poolVmsBeforeAdd = (currentVmsInPoolQuery.getSucceeded()) ? currentVmsInPoolQuery.<java.util.List<org.ovirt.engine.core.common.businessentities.VM>>getReturnValue() : null; super.executeCommand(); org.ovirt.engine.core.bll.UpdateVmPoolCommand.getCompensationContext().cleanupCompensationDataAfterSuccessfulCommand(); if ((org.ovirt.engine.core.bll.UpdateVmPoolCommand.getSucceeded()) && (isUpdateVmRequired(poolVmsBeforeAdd))) { updatePoolVms(poolVmsBeforeAdd); } vmPoolMonitor.triggerPoolMonitoringJob(); }
private void loadDc() { if ((cachedStoragePool) == null) { final org.ovirt.engine.core.compat.Guid dcId = params.getStoragePoolId(); if (isEmptyGuid(dcId)) { cachedStoragePool = getStoragePoolDao().getForCluster(params.getClusterId()); } else { cachedStoragePool = getStoragePoolDao().get(dcId); } } }	private void loadDc() { if ((cachedStoragePool) == null) { final org.ovirt.engine.core.compat.Guid dcId = params.getStoragePoolId(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(dcId)) { cachedStoragePool = getStoragePoolDao().getForCluster(params.getClusterId()); } else { cachedStoragePool = getStoragePoolDao().get(dcId); } } }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue nextRun = runInternalQuery(VdcQueryType.GetVmNextRunConfiguration, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.GetNextRunGraphicsDevicesQuery.getParameters().getId())); org.ovirt.engine.core.common.businessentities.VM vm = nextRun.getReturnValue(); if ((vm != null) && (vm.isNextRunConfigurationExists())) { java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> result = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.GraphicsType graphicsType : org.ovirt.engine.core.common.businessentities.GraphicsType.values()) { org.ovirt.engine.core.common.businessentities.VmDevice device = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.findVmDeviceByType(vm.getManagedVmDeviceMap(), graphicsType.getCorrespondingDeviceType()); if ((device != null) && (device instanceof org.ovirt.engine.core.common.businessentities.GraphicsDevice)) { result.add(((org.ovirt.engine.core.common.businessentities.GraphicsDevice) (device))); } } setReturnValue(result); } else { super.executeQueryCommand(); } }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue nextRun = runInternalQuery(VdcQueryType.GetVmNextRunConfiguration, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.GetNextRunGraphicsDevicesQuery.getParameters().getId())); org.ovirt.engine.core.common.businessentities.VM vm = nextRun.getReturnValue(); if ((vm != null) && (vm.isNextRunConfigurationExists())) { java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> result = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.GraphicsType graphicsType : org.ovirt.engine.core.common.businessentities.GraphicsType.values()) { org.ovirt.engine.core.common.businessentities.VmDevice device = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.findVmDeviceByType(vm.getManagedVmDeviceMap(), graphicsType.getCorrespondingDeviceType()); if (device != null) { result.add(new org.ovirt.engine.core.common.businessentities.GraphicsDevice(device)); } } setReturnValue(result); } else { super.executeQueryCommand(); } }
private <START_MOD>java.lang.String<END_MOD> <START_MOD>getMethodName<END_MOD>(java.lang.String httpMethod) { <START_MOD>if<END_MOD> (<START_MOD>httpMethod.equals<END_MOD>(<START_MOD>"POST"<END_MOD>)) <START_MOD>{ return "add"; } if<END_MOD> (<START_MOD>httpMethod<END_MOD>.<START_MOD>equals("PUT"<END_MOD>)) <START_MOD>{<END_MOD> <START_MOD>return<END_MOD> <START_MOD>"update";<END_MOD> <START_MOD>} if<END_MOD> (<START_MOD>httpMethod<END_MOD>.<START_MOD>equals<END_MOD>(<START_MOD>"GET"<END_MOD>)) <START_MOD>{<END_MOD> return <START_MOD>"get"; } if <END_MOD>(<START_MOD>httpMethod.equals<END_MOD>(<START_MOD>"DELETE"<END_MOD>)) <START_MOD>{<END_MOD> <START_MOD>return<END_MOD> <START_MOD>"remove"<END_MOD>; }<START_MOD> return ""; }<END_MOD>	private java.lang.String getMethodName(java.lang.String httpMethod) { switch (httpMethod) { case "POST" : return "add"; case "PUT" : return "update"; case "GET" : return "get"; case "DELETE" : return "remove"; default : return ""; } }
private <START_MOD>java.lang.String getUsageLink(<END_MOD>javax.ws.rs.core.UriInfo uriInfo, java.lang.String httpMethod) { <START_MOD>java.lang.String link = (uriInfo.getBaseUri().toString()) + "model.html#services/"; java.util.List<javax.ws.rs.core.PathSegment> pathSegments = uriInfo.getPathSegments(); <END_MOD>org.ovirt.engine.api.<START_MOD>rsdl.Node node = org.ovirt.engine.api.rsdl.ResourceTree.getTree()<END_MOD>; for (<START_MOD>javax.ws.rs.core.PathSegment pathSegment<END_MOD> : <START_MOD>pathSegments) { node = step(node, pathSegment); } javax.ws.rs.core.PathSegment lastPathSegment = pathSegments.get(((pathSegments.size()) - 1));<END_MOD> if (<START_MOD>node.containsAction(lastPathSegment.getPath())) { link += (processNodeName(node)) + "s/methods/"; link += lastPathSegment.getPath(); } else { link += (processNodeName(node)) + "/methods/"; link += getMethodName(<END_MOD>httpMethod)<START_MOD>; }<END_MOD> return link; }	private java.lang.String getUsageLink(javax.ws.rs.core.UriInfo uriInfo, java.lang.String httpMethod) { java.util.List<javax.ws.rs.core.PathSegment> pathSegments = uriInfo.getPathSegments(); org.ovirt.engine.api.rsdl.ServiceTreeNode node = org.ovirt.engine.api.rsdl.ServiceTree.getTree(); for (javax.ws.rs.core.PathSegment pathSegment : pathSegments) { node = step(node, pathSegment); } javax.ws.rs.core.PathSegment lastPathSegment = pathSegments.get(((pathSegments.size()) - 1)); java.lang.String link = getLinkPrefix(uriInfo, node, lastPathSegment.getPath(), httpMethod); if (isAction(node, lastPathSegment.getPath())) { link += camelCaseToDash(getAction(node, lastPathSegment.getPath())); } else { link += getMethodName(httpMethod); } return link; }
private static org.ovirt.engine.api.rsdl.Node buildNode(java.lang.Class<?> resource, java.lang.String path) { return new org.ovirt.engine.api.rsdl.Node.Builder().name(resource.getSimpleName()).path(path).subCollections(org.ovirt.engine.api.rsdl.ResourceTree.getSubResources(resource)).actions(org.ovirt.engine.api.rsdl.ResourceTree.getActions(resource)).build(); }	private static org.ovirt.engine.api.rsdl.ServiceTreeNode buildNode(java.lang.Class<?> resource, java.lang.String path) { return new org.ovirt.engine.api.rsdl.ServiceTreeNode.Builder().name(resource.getSimpleName()).path(path).subCollections(org.ovirt.engine.api.rsdl.ServiceTree.getSubServices(resource)).actions(org.ovirt.engine.api.rsdl.ServiceTree.getActions(resource)).build(); }
private static boolean isBlacklist(java.lang.reflect.Method method) { return method.getName().equals("getActionResource"); }	private static boolean isBlacklist(java.lang.reflect.Method method) { return method.getName().equals("getActionService"); }
public org.ovirt.engine.api.rsdl.Node.Builder name(java.lang.String name) { node.setName(name); return this; }	public org.ovirt.engine.api.rsdl.ServiceTreeNode.Builder name(java.lang.String name) { node.setName(name); return this; }
private javax.ws.rs.core.Request mockRequest() { javax.ws.rs.core.Request requestMock = control.createMock(javax.ws.rs.core.Request.class); expect(requestMock.getMethod()).andReturn("POST"); return requestMock; }	@org.junit.Test public void testUpdateWithNonGuidId() { try { javax.ws.rs.core.UriInfo uriInfo = mockUri("vms", "00000001-0001-0001-0001-000000000011", "disks", "116"); javax.ws.rs.core.Request request = mockRequest("PUT"); control.replay(); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("For correct usage, see: http://localhost:8080/ovirt-engine/api/model#services/vm-disk/methods/update", fault.getDetail()); } catch (java.net.URISyntaxException | java.lang.ClassNotFoundException | java.io.IOException e) { fail(); } }
@org.junit.Test public void testStart() { try { javax.ws.rs.core.UriInfo uriInfo = mockUri("vms", "00000001-0001-0001-0001-000000000011", "start"); javax.ws.rs.core.Request request = mockRequest(); control.replay(); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals(fault.getDetail(), "For correct usage, see: http://localhost:8080/ovirt-engine/api/model.html#services/vms/methods/start"); } catch (java.net.URISyntaxException | java.lang.ClassNotFoundException | java.io.IOException e) { fail(); } }	@org.junit.Test public void testAction() { try { javax.ws.rs.core.UriInfo uriInfo = mockUri("vms", "00000001-0001-0001-0001-000000000011", "freezefilesystems"); javax.ws.rs.core.Request request = mockRequest("POST"); control.replay(); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("For correct usage, see: http://localhost:8080/ovirt-engine/api/model#services/vm/methods/freeze-filesystems", fault.getDetail()); } catch (java.net.URISyntaxException | java.lang.ClassNotFoundException | java.io.IOException e) { fail(); } }
public static java.util.List<org.ovirt.engine.api.rsdl.Node> getSubResources(java.lang.Class<?> resource) { java.util.List<org.ovirt.engine.api.rsdl.Node> resources = new java.util.ArrayList<>(); for (java.lang.reflect.Method method : org.ovirt.engine.api.rsdl.ResourceTree.getMethods(resource, org.ovirt.engine.api.rsdl.ResourceTree.SUB_RESOURCES)) { javax.ws.rs.Path path = method.getAnnotation(javax.ws.rs.Path.class); resources.add(org.ovirt.engine.api.rsdl.ResourceTree.buildNode(method.getReturnType(), path.value())); } return resources; }	public static java.util.List<org.ovirt.engine.api.rsdl.ServiceTreeNode> getSubServices(java.lang.Class<?> resource) { java.util.List<org.ovirt.engine.api.rsdl.ServiceTreeNode> resources = new java.util.ArrayList<>(); for (java.lang.reflect.Method method : org.ovirt.engine.api.rsdl.ServiceTree.getMethods(resource, org.ovirt.engine.api.rsdl.ServiceTree.SUB_RESOURCES)) { javax.ws.rs.Path path = method.getAnnotation(javax.ws.rs.Path.class); resources.add(org.ovirt.engine.api.rsdl.ServiceTree.buildNode(method.getReturnType(), path.value())); } return resources; }
private static java.util.List<java.lang.String> getActions(java.lang.Class<?> resource) { java.util.List<java.lang.String> resourceMethods = new java.util.ArrayList<>(); for (java.lang.reflect.Method method : org.ovirt.engine.api.rsdl.ResourceTree.getMethods(resource, org.ovirt.engine.api.rsdl.ResourceTree.ACTIONS)) { resourceMethods.add(method.getName()); } return resourceMethods; }	private static java.util.List<java.lang.String> getActions(java.lang.Class<?> resource) { java.util.List<java.lang.String> resourceMethods = new java.util.ArrayList<>(); for (java.lang.reflect.Method method : org.ovirt.engine.api.rsdl.ServiceTree.getMethods(resource, org.ovirt.engine.api.rsdl.ServiceTree.ACTIONS)) { resourceMethods.add(method.getName()); } return resourceMethods; }
public static org.ovirt.engine.api.rsdl.Node getTree() { return org.ovirt.engine.api.rsdl.ResourceTree.tree; }	public static org.ovirt.engine.api.rsdl.ServiceTreeNode getTree() { return org.ovirt.engine.api.rsdl.ServiceTree.tree; }
public static java.util.List<java.lang.reflect.Method> getMethods(java.lang.Class<?> clazz, boolean subResource) { java.util.List<java.lang.reflect.Method> methods = new java.util.ArrayList<>(); while (clazz != null) { for (java.lang.reflect.Method method : clazz.getDeclaredMethods()) { if (org.ovirt.engine.api.rsdl.ResourceTree.isBlacklist(method)) { continue; } if ((org.ovirt.engine.api.rsdl.ResourceTree.isSubResource(method)) ^ (!subResource)) { methods.add(method); } } clazz = clazz.getSuperclass(); } return methods; }	public static java.util.List<java.lang.reflect.Method> getMethods(java.lang.Class<?> clazz, boolean subService) { java.util.List<java.lang.reflect.Method> methods = new java.util.ArrayList<>(); while (clazz != null) { for (java.lang.reflect.Method method : clazz.getDeclaredMethods()) { if (org.ovirt.engine.api.rsdl.ServiceTree.isBlacklist(method)) { continue; } if ((org.ovirt.engine.api.rsdl.ServiceTree.isSubService(method)) ^ (!subService)) { methods.add(method); } } clazz = clazz.getSuperclass(); } return methods; }
private static boolean isSubResource(java.lang.reflect.Method method) { return (org.ovirt.engine.api.rsdl.ResourceTree.hasPathAnnotation(method)) && (!(org.ovirt.engine.api.rsdl.ResourceTree.hasHttpAnnotation(method))); }	private static boolean isSubService(java.lang.reflect.Method method) { return (org.ovirt.engine.api.rsdl.ServiceTree.hasPathAnnotation(method)) && (!(org.ovirt.engine.api.rsdl.ServiceTree.hasHttpAnnotation(method))); }
private static org.ovirt.engine.api.rsdl.Node buildTree() { return org.ovirt.engine.api.rsdl.ResourceTree.buildNode(org.ovirt.engine.api.resource.SystemResource.class, ""); }	private static org.ovirt.engine.api.rsdl.ServiceTreeNode buildTree() { return org.ovirt.engine.api.rsdl.ServiceTree.buildNode(org.ovirt.engine.api.resource.SystemResource.class, ""); }
public org.ovirt.engine.api.rsdl.Node.Builder path(java.lang.String path) { node.setPath(path); return this; }	public org.ovirt.engine.api.rsdl.ServiceTreeNode.Builder path(java.lang.String path) { node.setPath(path); return this; }
public org.ovirt.engine.api.rsdl.Node.Builder actions(java.util.List<java.lang.String> actions) { node.setActions(actions); return this; }	public org.ovirt.engine.api.rsdl.ServiceTreeNode.Builder actions(java.util.List<java.lang.String> actions) { node.setActions(actions); return this; }
private java.lang.String getTabs(int tabNum) { java.lang.String tabs = ""; for (int i = 0; i < tabNum; i++) { tabs += "\t"; } return tabs; }	private java.lang.String getTabs(int tabNum) { java.lang.StringBuilder builder = new java.lang.StringBuilder(""); for (int i = 0; i < tabNum; i++) { builder.append("\t"); } return builder.toString(); }
private <START_MOD>java.lang.String processNodeName(<END_MOD>org.ovirt.engine.api.<START_MOD>rsdl<END_MOD>.<START_MOD>Node<END_MOD> <START_MOD>node<END_MOD>) <START_MOD>{<END_MOD> java.lang.<START_MOD>String<END_MOD> <START_MOD>name<END_MOD> = <START_MOD>node.getName().substring(0, node.getName().indexOf("Resource"))<END_MOD>; java.lang.<START_MOD>String[]<END_MOD> <START_MOD>parts<END_MOD> = <START_MOD>name.split<END_MOD>(org.ovirt.engine.api.restapi.resource.<START_MOD>validation.UsageFinder.CAMEL_CASE_REGEX); name = ""; for (java.lang.String part : parts<END_MOD>) <START_MOD>{ name += <END_MOD>(<START_MOD>part.toLowerCase()) + "-"; } return name.substring(0, ((name.length()) - 1<END_MOD>)); }	private java.lang.String processNodeName(org.ovirt.engine.api.rsdl.ServiceTreeNode node) { java.lang.String[] parts = node.getName().replaceAll("Resource$", "").split(org.ovirt.engine.api.restapi.resource.validation.UsageFinder.CAMEL_CASE_REGEX); java.lang.StringBuilder builder = new java.lang.StringBuilder(""); for (java.lang.String part : parts) { builder.append(part.toLowerCase()).append("-"); } java.lang.String name = builder.toString(); return name.substring(0, ((name.length()) - 1)); }
public void setSubResources(java.util.List<org.ovirt.engine.api.rsdl.Node> subResources) { this.subResources = subResources; }	public void setSubServices(java.util.List<org.ovirt.engine.api.rsdl.ServiceTreeNode> subServices) { this.subServices = subServices; }
private java.lang.String printSubResources(int tabNum) { java.lang.StringBuilder builder = new java.lang.StringBuilder(); for (org.ovirt.engine.api.rsdl.Node node : subResources) { builder.append(node.toString(tabNum)); } return builder.toString(); }	private java.lang.String printSubServices(int tabNum) { java.lang.StringBuilder builder = new java.lang.StringBuilder(); for (org.ovirt.engine.api.rsdl.ServiceTreeNode node : subServices) { builder.append(node.toString(tabNum)); } return builder.toString(); }
public org.ovirt.engine.api.rsdl.Node getSubResource(java.lang.String path) { if ((subResources) != null) { for (org.ovirt.engine.api.rsdl.Node node : subResources) { if (node.getPath().equals(path)) { return node; } } } return null; }	public org.ovirt.engine.api.rsdl.ServiceTreeNode getSubService(java.lang.String path) { if ((subServices) != null) { for (org.ovirt.engine.api.rsdl.ServiceTreeNode node : subServices) { if (node.getPath().equals(path)) { return node; } } } return null; }
public boolean containsSubResource(java.lang.String path) { if ((subResources) != null) { for (org.ovirt.engine.api.rsdl.Node node : subResources) { if (node.getPath().equals(path)) { return true; } } } return false; }	public boolean containsSubService(java.lang.String path) { if ((subServices) != null) { for (org.ovirt.engine.api.rsdl.ServiceTreeNode node : subServices) { if (node.getPath().equals(path)) { return true; } } } return false; }
public org.ovirt.engine.api.rsdl.Node.Builder subCollections(java.util.List<org.ovirt.engine.api.rsdl.Node> subCollections) { node.setSubResources(subCollections); return this; }	public org.ovirt.engine.api.rsdl.ServiceTreeNode.Builder subCollections(java.util.List<org.ovirt.engine.api.rsdl.ServiceTreeNode> subCollections) { node.setSubServices(subCollections); return this; }
public org.ovirt.engine.api.rsdl.Node build() { return node; }	public org.ovirt.engine.api.rsdl.ServiceTreeNode build() { return node; }
@org.junit.Test public void testAdd() { try { javax.ws.rs.core.UriInfo uriInfo = mockUri("vms", "00000001-0001-0001-0001-000000000011", "disks"); javax.ws.rs.core.Request request = mockRequest(); control.replay(); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals(fault.getDetail(), "For correct usage, see: http://localhost:8080/ovirt-engine/api/model.html#services/vm-disks/methods/add"); } catch (java.lang.ClassNotFoundException | java.io.IOException | java.net.URISyntaxException e) { fail(); } }	@org.junit.Test public void testAdd() { try { javax.ws.rs.core.UriInfo uriInfo = mockUri("vms", "00000001-0001-0001-0001-000000000011", "disks"); javax.ws.rs.core.Request request = mockRequest("POST"); control.replay(); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("For correct usage, see: http://localhost:8080/ovirt-engine/api/model#services/vm-disks/methods/add", fault.getDetail()); } catch (java.lang.ClassNotFoundException | java.io.IOException | java.net.URISyntaxException e) { fail(); } }
private javax.ws.rs.core.UriInfo mockUri(java.lang.String s1, java.lang.String s2, java.lang.String s3) throws java.net.URISyntaxException { javax.ws.rs.core.UriInfo uriInfoMock = control.createMock(javax.ws.rs.core.UriInfo.class); expect(uriInfoMock.getBaseUri()).andReturn(new java.net.URI("http://localhost:8080/ovirt-engine/api/")); javax.ws.rs.core.PathSegment segment1 = control.createMock(javax.ws.rs.core.PathSegment.class); expect(segment1.getPath()).andReturn(s1).anyTimes(); javax.ws.rs.core.PathSegment segment2 = control.createMock(javax.ws.rs.core.PathSegment.class); expect(segment2.getPath()).andReturn(s2).anyTimes(); javax.ws.rs.core.PathSegment segment3 = control.createMock(javax.ws.rs.core.PathSegment.class); expect(segment3.getPath()).andReturn(s3).anyTimes(); java.util.List<javax.ws.rs.core.PathSegment> pathSegments = java.util.Arrays.asList(new javax.ws.rs.core.PathSegment[]{ segment1, segment2, segment3 }); expect(uriInfoMock.getPathSegments()).andReturn(pathSegments); return uriInfoMock; }	private javax.ws.rs.core.UriInfo mockUri(java.lang.String... strings) throws java.net.URISyntaxException { javax.ws.rs.core.UriInfo uriInfoMock = control.createMock(javax.ws.rs.core.UriInfo.class); expect(uriInfoMock.getBaseUri()).andReturn(new java.net.URI("http://localhost:8080/ovirt-engine/api/")); java.util.List<javax.ws.rs.core.PathSegment> pathSegments = new java.util.ArrayList<>(); for (java.lang.String s : strings) { javax.ws.rs.core.PathSegment segment = control.createMock(javax.ws.rs.core.PathSegment.class); expect(segment.getPath()).andReturn(s).anyTimes(); pathSegments.add(segment); } expect(uriInfoMock.getPathSegments()).andReturn(pathSegments); return uriInfoMock; }
public boolean containsAction(java.lang.String actionName) { if ((actions) != null) { return actions.contains(actionName); } return false; }	public boolean containsAction(java.lang.String actionName) { if ((actions) != null) { for (java.lang.String action : actions) { if (action.toLowerCase().equals(actionName.toLowerCase())) { return true; } } } return false; }
private <START_MOD>org.ovirt.engine.api.rsdl.Node<END_MOD> <START_MOD>step<END_MOD>(<START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.api.rsdl.Node<END_MOD> <START_MOD>node<END_MOD>, javax.ws.rs.core.PathSegment <START_MOD>pathSegment) { if (isUUID(pathSegment.getPath())<END_MOD>) { return <START_MOD>node.getSubResource<END_MOD>(<START_MOD>"{id}"); } else { if (node<END_MOD>.<START_MOD>containsSubResource(pathSegment.getPath())<END_MOD>) <START_MOD>{<END_MOD> <START_MOD>return node.getSubResource<END_MOD>(<START_MOD>pathSegment<END_MOD>.<START_MOD>getPath<END_MOD>()); }<START_MOD> else { return node; } } }<END_MOD>	private org.ovirt.engine.api.rsdl.ServiceTreeNode step(org.ovirt.engine.api.rsdl.ServiceTreeNode node, javax.ws.rs.core.PathSegment pathSegment) { if (isID(pathSegment.getPath(), node)) { return node.getSubService("{id}"); } else { if (node.containsSubService(pathSegment.getPath())) { return node.getSubService(pathSegment.getPath()); } else { return node; } } }
private java.lang.String toString(int tabNum) { java.lang.StringBuilder builder = new java.lang.StringBuilder(); java.lang.String tabs = getTabs(tabNum); builder.append(tabs).append("name: ").append(name).append("\n").append(tabs).append("path: ").append(path).append("\n").append(tabs).append("actions: ").append(printActions()).append("\n").append(tabs).append("sub-resources:\n").append(printSubResources((++tabNum))).append("\n"); return builder.toString(); }	private java.lang.String toString(int tabNum) { java.lang.StringBuilder builder = new java.lang.StringBuilder(); java.lang.String tabs = getTabs(tabNum); builder.append(tabs).append("name: ").append(name).append("\n").append(tabs).append("path: ").append(path).append("\n").append(tabs).append("actions: ").append(printActions()).append("\n").append(tabs).append("sub-services:\n").append(printSubServices((++tabNum))).append("\n"); return builder.toString(); }
public java.util.List<org.ovirt.engine.api.rsdl.Node> getSubResources() { return subResources; }	public java.util.List<org.ovirt.engine.api.rsdl.ServiceTreeNode> getSubServices() { return subServices; }
@java.lang.Override public org.ovirt.engine.api.model.DiskAttachment update(org.ovirt.engine.api.model.DiskAttachment attachment) { <START_MOD>if (attachment.isSetActive()) { org.ovirt.engine.api.model.DiskAttachment attachmentFromDb = get(); if ((attachmentFromDb.isActive()) != (attachment.isActive())) { org.ovirt.engine.core.common.action.VdcActionType actionType = (attachment.isActive()) ? org.ovirt.engine.core.common.action.VdcActionType.HotPlugDiskToVm : org.ovirt.engine.core.common.action.VdcActionType.HotUnPlugDiskFromVm; org.ovirt.engine.core.common.action.VmDiskOperationParameterBase params = new org.ovirt.engine.core.common.action.VmDiskOperationParameterBase(new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(guid, vmId)); try { doAction(actionType, params); } catch (org.ovirt.engine.api.restapi.resource.BackendFailureException e) { <END_MOD>return <START_MOD>handleError(e, false); } } } return <END_MOD>performUpdate(attachment, new org.ovirt.engine.api.restapi.resource.BackendDiskAttachmentResource.AddDiskResolver(), VdcActionType.UpdateVmDisk, new org.ovirt.engine.api.restapi.resource.BackendDiskAttachmentResource.UpdateParametersProvider()); }	@java.lang.Override public org.ovirt.engine.api.model.DiskAttachment update(org.ovirt.engine.api.model.DiskAttachment attachment) { if (attachment.isSetActive()) { org.ovirt.engine.api.model.DiskAttachment attachmentFromDb = get(); if (!(attachmentFromDb.isActive().equals(attachment.isActive()))) { org.ovirt.engine.core.common.action.VdcActionType actionType = (attachment.isActive()) ? org.ovirt.engine.core.common.action.VdcActionType.HotPlugDiskToVm : org.ovirt.engine.core.common.action.VdcActionType.HotUnPlugDiskFromVm; org.ovirt.engine.core.common.action.VmDiskOperationParameterBase params = new org.ovirt.engine.core.common.action.VmDiskOperationParameterBase(new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(guid, vmId)); try { doAction(actionType, params); } catch (org.ovirt.engine.api.restapi.resource.BackendFailureException e) { return handleError(e, false); } } } return performUpdate(attachment, new org.ovirt.engine.api.restapi.resource.BackendDiskAttachmentResource.AddDiskResolver(), VdcActionType.UpdateVmDisk, new org.ovirt.engine.api.restapi.resource.BackendDiskAttachmentResource.UpdateParametersProvider()); }
protected boolean isQuietTimeFromLastActionPassed() { int secondsLeftToNextPmOp = (org.ovirt.engine.core.bll.pm.VdsNotRespondingTreatmentCommand.isInternalExecution()) ? 0 : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAuditLogDao().getTimeToWaitForNextPmOp(org.ovirt.engine.core.bll.pm.VdsNotRespondingTreatmentCommand.getVds().getName(), AuditLogType.USER_VDS_RESTART.name()); if (secondsLeftToNextPmOp > 0) { addValidationMessage(EngineMessage.VDS_FENCE_DISABLED_AT_QUIET_TIME); org.ovirt.engine.core.bll.pm.VdsNotRespondingTreatmentCommand.addValidationMessageVariable("seconds", secondsLeftToNextPmOp); return false; } else { return true; } }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return org.ovirt.engine.core.bll.pm.VdsNotRespondingTreatmentCommand.createFenceExclusiveLocksMap(org.ovirt.engine.core.bll.pm.VdsNotRespondingTreatmentCommand.getVdsId()); }
protected final <P extends org.ovirt.engine.core.common.action.VdcActionParametersBase> P withRootCommandInfo(P params) { return withRootCommandInfo(params, getActionType()); }	protected void persistCommandIfNeeded() { if (((getCallback()) != null) || (parentHasCallback())) { persistCommand(getParameters().getParentCommand()); } }
private boolean updateVms() {<START_MOD> final boolean compatibilityVersionUnchanged = java.util.Objects.equals(oldGroup.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getParameters().getCluster().getCompatibilityVersion()); if (compatibilityVersionUnchanged) { return true; }<END_MOD> java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = org.ovirt.engine.core.bll.UpdateClusterCommand.getVmDao().getAllForCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getParameters().getCluster().getId()); org.ovirt.engine.core.common.businessentities.Cluster oldCluster = org.ovirt.engine.core.bll.UpdateClusterCommand.getClusterDao().get(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()); for (org.ovirt.engine.core.common.businessentities.VM vm : vmList) { if ((!(vm.isExternalVm())) && (!(vm.isHostedEngine()))) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); <START_MOD>updateParams.setClusterLevelChangeToVersion(org.ovirt.engine.core.bll.UpdateClusterCommand.getParameters().getCluster()<END_MOD>.getCompatibilityVersion()<START_MOD>);<END_MOD> org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, updateParams, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { org.ovirt.engine.core.bll.UpdateClusterCommand.getReturnValue().setFault(result.getFault()); return false; } } } return true; }	private boolean updateVms() { final boolean compatibilityVersionUnchanged = java.util.Objects.equals(oldGroup.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getParameters().getCluster().getCompatibilityVersion()); if (compatibilityVersionUnchanged) { return true; } java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = org.ovirt.engine.core.bll.UpdateClusterCommand.getVmDao().getAllForCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getParameters().getCluster().getId()); for (org.ovirt.engine.core.common.businessentities.VM vm : vmList) { if ((!(vm.isExternalVm())) && (!(vm.isHostedEngine()))) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setClusterLevelChangeToVersion(org.ovirt.engine.core.bll.UpdateClusterCommand.getParameters().getCluster().getCompatibilityVersion()); org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, updateParams, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { org.ovirt.engine.core.bll.UpdateClusterCommand.getReturnValue().setFault(result.getFault()); return false; } } } return true; }
@org.junit.Test public void hasSharedDomain() { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdc = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); sdc.setStorageType(StorageType.NFS); storagePoolWithLocalFS(); when(spDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.createNewStoragePool()); when(sdDao.getAllForStoragePool(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Collections.singletonList(sdc)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(cmd); }	@org.junit.Test public void hasSharedDomain() { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdc = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); sdc.setStorageType(StorageType.NFS); when(spDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.createDefaultStoragePool()); when(sdDao.getAllForStoragePool(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Collections.singletonList(sdc)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(cmd); }
@org.junit.Test public void hasLocalDomain() { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdc = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); sdc.setStorageType(StorageType.LOCALFS); storagePoolWithLocalFS(); when(spDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.createNewStoragePool()); when(sdDao.getAllForStoragePool(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Collections.singletonList(sdc)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_POOL_TYPE_WITH_LOCAL); }	@org.junit.Test public void hasLocalDomain() { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdc = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); sdc.setStorageType(StorageType.LOCALFS); when(spDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.createDefaultStoragePool()); when(sdDao.getAllForStoragePool(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Collections.singletonList(sdc)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_POOL_TYPE_WITH_LOCAL); }
@org.junit.Test public void <START_MOD>hasNoStorageDomains<END_MOD>() {<START_MOD> storagePoolWithLocalFS(); when(spDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.createNewStoragePool());<END_MOD> when(sdDao.getAllForStoragePool(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Collections.<START_MOD>EMPTY_LIST<END_MOD>); org.ovirt.engine.core.bll.ValidateTestUtils.<START_MOD>runAndAssertValidateSuccess<END_MOD>(cmd); }	@org.junit.Test public void hasNoStorageDomains() { when(spDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.createDefaultStoragePool()); when(sdDao.getAllForStoragePool(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Collections.emptyList()); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(cmd); }
@org.junit.experimental.theories.Theory public void testCompare(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType) { storageDomain1.setStorageType(storageType); for (org.ovirt.engine.core.common.businessentities.storage.StorageType storageType2 : org.ovirt.engine.core.common.businessentities.storage.StorageType.values()) { storageDomain2.setStorageType(storageType2); int compareTypes = java.lang.Boolean.compare(storageType.isShared(), storageType2.isShared()); int comparatorReturnValue = comparator.compare(storageDomain1, storageDomain2); assertEquals((compareTypes < 0), (comparatorReturnValue < 0)); assertEquals((compareTypes == 0), (comparatorReturnValue == 0)); assertEquals((compareTypes > 0), (comparatorReturnValue > 0)); } }	@org.junit.Test public void testCompareLocalWithLocal() { storageDomain1.setStorageType(StorageType.LOCALFS); storageDomain2.setStorageType(StorageType.LOCALFS); assertEqualsTo(storageDomain1, storageDomain2); }
private void updateTimeoutLogableObject(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.AuditLogType logType) { int eventFloodRate = ((auditLogable.isExternal()) && ((auditLogable.getEventFloodInSec()) == 0)) ? 30 : logType.getEventFloodRate(); if (eventFloodRate > 0) { auditLogable.setEndTime(java.util.concurrent.TimeUnit.SECONDS.toMillis(eventFloodRate)); auditLogable.setTimeoutObjectId(<START_MOD>org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.<END_MOD>composeObjectId(auditLogable, logType)); } }	private void updateTimeoutLogableObject(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.AuditLogType logType) { int eventFloodRate = ((auditLogable.isExternal()) && ((auditLogable.getEventFloodInSec()) == 0)) ? 30 : logType.getEventFloodRate(); if (eventFloodRate > 0) { auditLogable.setEndTime(java.util.concurrent.TimeUnit.SECONDS.toMillis(eventFloodRate)); auditLogable.setTimeoutObjectId(composeObjectId(auditLogable, logType)); } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.<START_MOD>common<END_MOD>.<START_MOD>businessentities<END_MOD>.<START_MOD>AuditLog auditLog = org<END_MOD>.<START_MOD>ovirt.engine.core.bll.RemoveAuditLogByIdCommand<END_MOD>.getAuditLogDao().<START_MOD>get<END_MOD>(org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId()); org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.<START_MOD>getAuditLogDao().remove(org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId()); setAuditLogDetails(auditLog); evict(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.composeSystemObjectId(this, auditLog.getLogType())); org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.<END_MOD>setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.AuditLog auditLog = org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getAuditLogDao().get(org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId()); org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getAuditLogDao().remove(org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId()); setAuditLogDetails(auditLog); evict(auditLogDirector.composeSystemObjectId(this, auditLog.getLogType())); org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.setSucceeded(true); }
private<START_MOD> static<END_MOD> void compose(java.lang.StringBuilder builder, java.lang.String key, java.lang.String value) { final char DELIMITER = ','; final char NAME_VALUE_SEPARATOR = '='; if ((builder.length()) > 0) { builder.append(DELIMITER); } builder.append(key).append(NAME_VALUE_SEPARATOR).append(value); }	private void compose(java.lang.StringBuilder builder, java.lang.String key, java.lang.String value) { final char DELIMITER = ','; final char NAME_VALUE_SEPARATOR = '='; if ((builder.length()) > 0) { builder.append(DELIMITER); } builder.append(key).append(NAME_VALUE_SEPARATOR).append(value); }
@java.lang.Override protected boolean validate() { macPool = org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getMacPool(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCluster()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_CAN_NOT_BE_EMPTY); } <START_MOD>reportExternalMacs(); <END_MOD>return true; }	@java.lang.Override protected boolean validate() { macPool = org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getMacPool(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCluster()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_CAN_NOT_BE_EMPTY); } return true; }
public void <START_MOD>appendCustomValueSeparatedByComma<END_MOD>(final java.lang.String name, final java.lang.String value) { <START_MOD>appendCustomValueUsingCustomSeparator<END_MOD>(<START_MOD>name, value<END_MOD>,     }	public void appendCustomCommaSeparatedValue(final java.lang.String name, final java.lang.String value) { appendCustomValue(name, value, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase.COMMA_SEPARATOR); }
@org.junit.Test(expected = java.lang.NullPointerException.class) public void appendCustomValueDoesntHandleNullKeys() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = null; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME; final java.lang.String sep = "_"; b.<START_MOD>appendCustomValueUsingCustomSeparator<END_MOD>(key, value, sep); final java.lang.String s = b.getCustomValue(key); assertEquals(value, s); }	@org.junit.Test(expected = java.lang.NullPointerException.class) public void appendCustomValueDoesntHandleNullKeys() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = null; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME; final java.lang.String sep = "_"; b.appendCustomValue(key, value, sep); final java.lang.String s = b.getCustomValue(key); assertEquals(value, s); }
@org.junit.Test(expected = java.lang.NullPointerException.class) public void appendCustomValueUsesNullSeparator() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = "foo"; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME; final java.lang.String newVal = "bar"; final java.lang.String sep = null; b.addCustomValue(key, value); b.<START_MOD>appendCustomValueUsingCustomSeparator<END_MOD>(key, newVal, sep); }	@org.junit.Test public void appendCustomValueUsesNullSeparator() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = "foo"; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME; final java.lang.String newVal = "bar"; final java.lang.String sep = null; b.addCustomValue(key, value); b.appendCustomValue(key, newVal, sep); final java.lang.String s = b.getCustomValue(key); assertEquals(((value + sep) + newVal), s); }
@org.junit.Test public void appendCustomValue() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = "foo"; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME; final java.lang.String sep = "_"; b.<START_MOD>appendCustomValueUsingCustomSeparator<END_MOD>(key, value, sep); final java.lang.String s = b.getCustomValue(key); assertEquals(value, s); }	@org.junit.Test public void appendCustomValue() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = "foo"; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME; final java.lang.String sep = "_"; b.appendCustomValue(key, value, sep); final java.lang.String s = b.getCustomValue(key); assertEquals(value, s); }
@org.junit.Test public void appendCustomValueAppend() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = "foo"; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME; final java.lang.String newVal = "bar"; final java.lang.String sep = "_"; b.addCustomValue(key, value); b.<START_MOD>appendCustomValueUsingCustomSeparator<END_MOD>(key, newVal, sep); final java.lang.String s = b.getCustomValue(key); assertEquals(((value + sep) + newVal), s); }	@org.junit.Test public void appendCustomValueAppend() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = "foo"; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME; final java.lang.String newVal = "bar"; final java.lang.String sep = "_"; b.addCustomValue(key, value); b.appendCustomValue(key, newVal, sep); final java.lang.String s = b.getCustomValue(key); assertEquals(((value + sep) + newVal), s); }
@org.junit.Test public void appendCustomValueAppendsWithNull() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = "foo"; final java.lang.String value = null; final java.lang.String newVal = "bar"; final java.lang.String sep = "_"; b.addCustomValue(key, value); b.<START_MOD>appendCustomValueUsingCustomSeparator<END_MOD>(key, newVal, sep); final java.lang.String s = b.getCustomValue(key); assertEquals(((value + sep) + newVal), s); }	@org.junit.Test public void appendCustomValueAppendsWithNull() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = "foo"; final java.lang.String value = null; final java.lang.String newVal = "bar"; final java.lang.String sep = "_"; b.addCustomValue(key, value); b.appendCustomValue(key, newVal, sep); final java.lang.String s = b.getCustomValue(key); assertEquals(((value + sep) + newVal), s); }
@java.lang.Override protected void executeCommand() { boolean addedGroupThatAllowsViewingChildren = false; java.util.List<org.ovirt.engine.core.common.businessentities.ActionGroup> groups = org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getParameters().getActionGroups(); for (org.ovirt.engine.core.common.businessentities.ActionGroup group : groups) { addedGroupThatAllowsViewingChildren |= group.allowsViewingChildren(); org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getRoleGroupMapDao().save(new org.ovirt.engine.core.common.businessentities.RoleGroupMap(group, org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getParameters().getRoleId())); <START_MOD>appendCustomValueSeparatedByComma<END_MOD>("ActionGroup", group.toString()<START_MOD>);<END_MOD> } if (addedGroupThatAllowsViewingChildren) { org.ovirt.engine.core.common.businessentities.Role role = org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getRole(); if (!(role.allowsViewingChildren())) { role.setAllowsViewingChildren(true); org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getRoleDao().update(role); } } org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { boolean addedGroupThatAllowsViewingChildren = false; java.util.List<org.ovirt.engine.core.common.businessentities.ActionGroup> groups = org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getParameters().getActionGroups(); for (org.ovirt.engine.core.common.businessentities.ActionGroup group : groups) { addedGroupThatAllowsViewingChildren |= group.allowsViewingChildren(); org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getRoleGroupMapDao().save(new org.ovirt.engine.core.common.businessentities.RoleGroupMap(group, org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getParameters().getRoleId())); appendCustomCommaSeparatedValue("ActionGroup", group.toString()); } if (addedGroupThatAllowsViewingChildren) { org.ovirt.engine.core.common.businessentities.Role role = org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getRole(); if (!(role.allowsViewingChildren())) { role.setAllowsViewingChildren(true); org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getRoleDao().update(role); } } org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.setSucceeded(true); }
void appendCustomValueUsingCustomSeparator(java.lang.String name, java.lang.String value, java.lang.String separator) { java.util.Objects.requireNonNull(separator, "It makes no sense having 'null' literal as separator"); final java.lang.String key = name.toLowerCase(); java.lang.String newValue = value; allocateCustomValues(); if (customValues.containsKey(key)) { newValue = java.lang.String.format("%1$s%2$s%3$s", customValues.get(key), separator, value); } customValues.put(name.toLowerCase(), newValue); }	public void appendCustomValue(final java.lang.String name, final java.lang.String value, final java.lang.String separator) { final java.lang.String key = name.toLowerCase(); java.lang.String newValue = value; allocateCustomValues(); if (customValues.containsKey(key)) { newValue = java.lang.String.format("%1$s%2$s%3$s", customValues.get(key), separator, value); } customValues.put(name.toLowerCase(), newValue); }
protected boolean migrateAllVms(org.ovirt.engine.core.bll.job.ExecutionContext parentContext, boolean HAOnly) { boolean succeeded = true; for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { if (vm.isHostedEngine()) { if (!(canScheduleVm(vm))) { succeeded = false; <START_MOD>appendCustomValueSeparatedByComma<END_MOD>("failedVms", vm.getName()); log.error( is no host capable of running the hosted engine VM } continue; } if (((vm.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom)) && ((!HAOnly) || (vm.isAutoStartup()))) { if (!(migrateVm(vm, parentContext))) { succeeded = false; <START_MOD>appendCustomValueSeparatedByComma<END_MOD>("failedVms", vm.getName()); log.error( to migrate VM '{}' vm.getName()); } } } return succeeded; }	protected boolean migrateAllVms(org.ovirt.engine.core.bll.job.ExecutionContext parentContext, boolean HAOnly) { boolean succeeded = true; for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { if (vm.isHostedEngine()) { if (!(canScheduleVm(vm))) { succeeded = false; appendCustomCommaSeparatedValue("failedVms", vm.getName()); log.error("There is no host capable of running the hosted engine VM"); } continue; } if (((vm.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom)) && ((!HAOnly) || (vm.isAutoStartup()))) { if (!(migrateVm(vm, parentContext))) { succeeded = false; appendCustomCommaSeparatedValue("failedVms", vm.getName()); log.error("Failed to migrate VM '{}'", vm.getName()); } } } return succeeded; }
@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.DetachUserFromTagCommand.getTagId()) != null) { for (org.ovirt.engine.core.compat.Guid userGuid : org.ovirt.engine.core.bll.DetachUserFromTagCommand.getUserList()) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().get(userGuid); if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagUserByTagIdAndByuserId(org.ovirt.engine.core.bll.DetachUserFromTagCommand.getTagId(), userGuid)) != null) { if (user != null) { <START_MOD>appendCustomValueSeparatedByComma<END_MOD>("DetachUsersNames", user.getLoginName()<START_MOD>); } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().detachUserFromTag(org.ovirt.engine.core.bll.DetachUserFromTagCommand.getTagId()<END_MOD>, userGuid); noActionDone = false; org.ovirt.engine.core.bll.DetachUserFromTagCommand.setSucceeded(true); } } } }	@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.DetachUserFromTagCommand.getTagId()) != null) { for (org.ovirt.engine.core.compat.Guid userGuid : org.ovirt.engine.core.bll.DetachUserFromTagCommand.getUserList()) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().get(userGuid); if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagUserByTagIdAndByuserId(org.ovirt.engine.core.bll.DetachUserFromTagCommand.getTagId(), userGuid)) != null) { if (user != null) { appendCustomCommaSeparatedValue("DetachUsersNames", user.getLoginName()); } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().detachUserFromTag(org.ovirt.engine.core.bll.DetachUserFromTagCommand.getTagId(), userGuid); noActionDone = false; org.ovirt.engine.core.bll.DetachUserFromTagCommand.setSucceeded(true); } } } }
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.ActionGroup> groupsToDetach = org.ovirt.engine.core.bll.DetachActionGroupsFromRoleCommand.getParameters().getActionGroups(); for (org.ovirt.engine.core.common.businessentities.ActionGroup group : groupsToDetach) { org.ovirt.engine.core.bll.DetachActionGroupsFromRoleCommand.getRoleGroupMapDao().remove(group, org.ovirt.engine.core.bll.DetachActionGroupsFromRoleCommand.getParameters().getRoleId()); <START_MOD>appendCustomValueSeparatedByComma<END_MOD>("ActionGroup", group.toString()<START_MOD>);<END_MOD> } org.ovirt.engine.core.common.businessentities.Role role = org.ovirt.engine.core.bll.DetachActionGroupsFromRoleCommand.getRole(); if (role.allowsViewingChildren()) { boolean shouldAllowViewingChildren = false; java.util.List<org.ovirt.engine.core.common.businessentities.ActionGroup> groups = getActionGroupsByRoleId(role.getId()); for (org.ovirt.engine.core.common.businessentities.ActionGroup group : groups) { if (group.allowsViewingChildren()) { shouldAllowViewingChildren = true; break; } } if (!shouldAllowViewingChildren) { role.setAllowsViewingChildren(false); org.ovirt.engine.core.bll.DetachActionGroupsFromRoleCommand.getRoleDao().update(role); } } org.ovirt.engine.core.bll.DetachActionGroupsFromRoleCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.ActionGroup> groupsToDetach = org.ovirt.engine.core.bll.DetachActionGroupsFromRoleCommand.getParameters().getActionGroups(); for (org.ovirt.engine.core.common.businessentities.ActionGroup group : groupsToDetach) { org.ovirt.engine.core.bll.DetachActionGroupsFromRoleCommand.getRoleGroupMapDao().remove(group, org.ovirt.engine.core.bll.DetachActionGroupsFromRoleCommand.getParameters().getRoleId()); appendCustomCommaSeparatedValue("ActionGroup", group.toString()); } org.ovirt.engine.core.common.businessentities.Role role = org.ovirt.engine.core.bll.DetachActionGroupsFromRoleCommand.getRole(); if (role.allowsViewingChildren()) { boolean shouldAllowViewingChildren = false; java.util.List<org.ovirt.engine.core.common.businessentities.ActionGroup> groups = getActionGroupsByRoleId(role.getId()); for (org.ovirt.engine.core.common.businessentities.ActionGroup group : groups) { if (group.allowsViewingChildren()) { shouldAllowViewingChildren = true; break; } } if (!shouldAllowViewingChildren) { role.setAllowsViewingChildren(false); org.ovirt.engine.core.bll.DetachActionGroupsFromRoleCommand.getRoleDao().update(role); } } org.ovirt.engine.core.bll.DetachActionGroupsFromRoleCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.TagsVdsMap map; if ((org.ovirt.engine.core.bll.AttachVdsToTagCommand.getTagId()) != null) { for (org.ovirt.engine.core.compat.Guid vdsId : org.ovirt.engine.core.bll.AttachVdsToTagCommand.getVdsList()) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(vdsId); if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagVdsByTagIdAndByVdsId(org.ovirt.engine.core.bll.AttachVdsToTagCommand.getTagId(), vdsId)) == null) { if (vds != null) { <START_MOD>appendCustomValueSeparatedByComma<END_MOD>("VdsNames", vds.getName()<START_MOD>); } map = new org.ovirt.engine.core.common.businessentities.TagsVdsMap(org.ovirt.engine.core.bll.AttachVdsToTagCommand.getTagId()<END_MOD>, <START_MOD>vdsId); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().attachVdsToTag(<END_MOD>map<START_MOD>); noActionDone<END_MOD> = false; } else { if (vds != null) { <START_MOD>appendCustomValueSeparatedByComma<END_MOD>("VdsNamesExists", vds.getName()<START_MOD>);<END_MOD> } } } } org.ovirt.engine.core.bll.AttachVdsToTagCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.TagsVdsMap map; if ((org.ovirt.engine.core.bll.AttachVdsToTagCommand.getTagId()) != null) { for (org.ovirt.engine.core.compat.Guid vdsId : org.ovirt.engine.core.bll.AttachVdsToTagCommand.getVdsList()) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(vdsId); if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagVdsByTagIdAndByVdsId(org.ovirt.engine.core.bll.AttachVdsToTagCommand.getTagId(), vdsId)) == null) { if (vds != null) { appendCustomCommaSeparatedValue("VdsNames", vds.getName()); } map = new org.ovirt.engine.core.common.businessentities.TagsVdsMap(org.ovirt.engine.core.bll.AttachVdsToTagCommand.getTagId(), vdsId); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().attachVdsToTag(map); noActionDone = false; } else { if (vds != null) { appendCustomCommaSeparatedValue("VdsNamesExists", vds.getName()); } } } } org.ovirt.engine.core.bll.AttachVdsToTagCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.AttachVmsToTagCommand.getTagId()) != null) { for (org.ovirt.engine.core.compat.Guid vmGuid : org.ovirt.engine.core.bll.AttachVmsToTagCommand.getVmsList()) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(vmGuid); if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagVmByTagIdAndByVmId(org.ovirt.engine.core.bll.AttachVmsToTagCommand.getTagId(), vmGuid)) == null) { if (vm != null) { <START_MOD>appendCustomValueSeparatedByComma<END_MOD>("VmsNames", vm.getName()<START_MOD>); } org.ovirt.engine.core.common.businessentities.TagsVmMap map = new org.ovirt.engine.core.common.businessentities.TagsVmMap(org.ovirt.engine.core.bll.AttachVmsToTagCommand.getTagId()<END_MOD>, <START_MOD>vmGuid); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().attachVmToTag(<END_MOD>map<START_MOD>); noActionDone<END_MOD> = false; } else { if (vm != null) { <START_MOD>appendCustomValueSeparatedByComma<END_MOD>("VmsNamesExists", vm.getName()<START_MOD>);<END_MOD> } } } } org.ovirt.engine.core.bll.AttachVmsToTagCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.AttachVmsToTagCommand.getTagId()) != null) { for (org.ovirt.engine.core.compat.Guid vmGuid : org.ovirt.engine.core.bll.AttachVmsToTagCommand.getVmsList()) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(vmGuid); if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagVmByTagIdAndByVmId(org.ovirt.engine.core.bll.AttachVmsToTagCommand.getTagId(), vmGuid)) == null) { if (vm != null) { appendCustomCommaSeparatedValue("VmsNames", vm.getName()); } org.ovirt.engine.core.common.businessentities.TagsVmMap map = new org.ovirt.engine.core.common.businessentities.TagsVmMap(org.ovirt.engine.core.bll.AttachVmsToTagCommand.getTagId(), vmGuid); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().attachVmToTag(map); noActionDone = false; } else { if (vm != null) { appendCustomCommaSeparatedValue("VmsNamesExists", vm.getName()); } } } } org.ovirt.engine.core.bll.AttachVmsToTagCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() { for (org.ovirt.engine.core.compat.Guid templateGuid : org.ovirt.engine.core.bll.AttachTemplatesToTagCommand.getTemplatesList()) { org.ovirt.engine.core.common.businessentities.VmTemplate template = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().get(templateGuid); if (template != null) { if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagTemplateByTagIdAndByTemplateId(org.ovirt.engine.core.bll.AttachTemplatesToTagCommand.getTagId(), templateGuid)) == null) { <START_MOD>appendCustomValueSeparatedByComma<END_MOD>("TemplatesNames", template.getName()<START_MOD>); org.ovirt.engine.core.common.businessentities.TagsTemplateMap map = new org.ovirt.engine.core.common.businessentities.TagsTemplateMap(org.ovirt.engine.core.bll.AttachTemplatesToTagCommand.getTagId()<END_MOD>, <START_MOD>templateGuid); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().attachTemplateToTag(<END_MOD>map<START_MOD>); noActionDone<END_MOD> = false; } else { <START_MOD>appendCustomValueSeparatedByComma<END_MOD>("TemplatesNamesExists", template.getName()<START_MOD>);<END_MOD> } } } org.ovirt.engine.core.bll.AttachTemplatesToTagCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { for (org.ovirt.engine.core.compat.Guid templateGuid : org.ovirt.engine.core.bll.AttachTemplatesToTagCommand.getTemplatesList()) { org.ovirt.engine.core.common.businessentities.VmTemplate template = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().get(templateGuid); if (template != null) { if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagTemplateByTagIdAndByTemplateId(org.ovirt.engine.core.bll.AttachTemplatesToTagCommand.getTagId(), templateGuid)) == null) { appendCustomCommaSeparatedValue("TemplatesNames", template.getName()); org.ovirt.engine.core.common.businessentities.TagsTemplateMap map = new org.ovirt.engine.core.common.businessentities.TagsTemplateMap(org.ovirt.engine.core.bll.AttachTemplatesToTagCommand.getTagId(), templateGuid); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().attachTemplateToTag(map); noActionDone = false; } else { appendCustomCommaSeparatedValue("TemplatesNamesExists", template.getName()); } } } org.ovirt.engine.core.bll.AttachTemplatesToTagCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() { for (org.ovirt.engine.core.compat.Guid templateGuid : org.ovirt.engine.core.bll.DetachTemplateFromTagCommand.getTemplatesList()) { if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagTemplateByTagIdAndByTemplateId(org.ovirt.engine.core.bll.DetachTemplateFromTagCommand.getTagId(), templateGuid)) != null) { org.ovirt.engine.core.common.businessentities.VmTemplate template = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().get(templateGuid); if (template != null) { <START_MOD>appendCustomValueSeparatedByComma<END_MOD>("TemplatesNames", template.getName()<START_MOD>); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().detachTemplateFromTag(org.ovirt.engine.core.bll.DetachTemplateFromTagCommand.getTagId()<END_MOD>, templateGuid); } } } org.ovirt.engine.core.bll.DetachTemplateFromTagCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { for (org.ovirt.engine.core.compat.Guid templateGuid : org.ovirt.engine.core.bll.DetachTemplateFromTagCommand.getTemplatesList()) { if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagTemplateByTagIdAndByTemplateId(org.ovirt.engine.core.bll.DetachTemplateFromTagCommand.getTagId(), templateGuid)) != null) { org.ovirt.engine.core.common.businessentities.VmTemplate template = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().get(templateGuid); if (template != null) { appendCustomCommaSeparatedValue("TemplatesNames", template.getName()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().detachTemplateFromTag(org.ovirt.engine.core.bll.DetachTemplateFromTagCommand.getTagId(), templateGuid); } } } org.ovirt.engine.core.bll.DetachTemplateFromTagCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() { for (org.ovirt.engine.core.compat.Guid vmGuid : org.ovirt.engine.core.bll.DetachVmFromTagCommand.getVmsList()) { if (((org.ovirt.engine.core.bll.DetachVmFromTagCommand.getTagId()) != null) && ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagVmByTagIdAndByVmId(org.ovirt.engine.core.bll.DetachVmFromTagCommand.getTagId(), vmGuid)) != null)) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(vmGuid); if (vm != null) { <START_MOD>appendCustomValueSeparatedByComma<END_MOD>("VmsNames", vm.getName()<START_MOD>); } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().detachVmFromTag(org.ovirt.engine.core.bll.DetachVmFromTagCommand.getTagId()<END_MOD>, vmGuid); org.ovirt.engine.core.bll.DetachVmFromTagCommand.setSucceeded(true); } } }	@java.lang.Override protected void executeCommand() { for (org.ovirt.engine.core.compat.Guid vmGuid : org.ovirt.engine.core.bll.DetachVmFromTagCommand.getVmsList()) { if (((org.ovirt.engine.core.bll.DetachVmFromTagCommand.getTagId()) != null) && ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagVmByTagIdAndByVmId(org.ovirt.engine.core.bll.DetachVmFromTagCommand.getTagId(), vmGuid)) != null)) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(vmGuid); if (vm != null) { appendCustomCommaSeparatedValue("VmsNames", vm.getName()); } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().detachVmFromTag(org.ovirt.engine.core.bll.DetachVmFromTagCommand.getTagId(), vmGuid); org.ovirt.engine.core.bll.DetachVmFromTagCommand.setSucceeded(true); } } }
@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.getTagId()) != null) { for (org.ovirt.engine.core.compat.Guid groupGuid : org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.getGroupList()) { org.ovirt.engine.core.common.businessentities.aaa.DbGroup group = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbGroupDao().get(groupGuid); if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagUserGroupByGroupIdAndByTagId(org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.getTagId(), groupGuid)) != null) { if (group != null) { <START_MOD>appendCustomValueSeparatedByComma<END_MOD>("DetachGroupsNames", group.getName()<START_MOD>); } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().detachUserGroupFromTag(org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.getTagId()<END_MOD>, groupGuid); noActionDone = false; org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.setSucceeded(true); } } } }	@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.getTagId()) != null) { for (org.ovirt.engine.core.compat.Guid groupGuid : org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.getGroupList()) { org.ovirt.engine.core.common.businessentities.aaa.DbGroup group = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbGroupDao().get(groupGuid); if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagUserGroupByGroupIdAndByTagId(org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.getTagId(), groupGuid)) != null) { if (group != null) { appendCustomCommaSeparatedValue("DetachGroupsNames", group.getName()); } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().detachUserGroupFromTag(org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.getTagId(), groupGuid); noActionDone = false; org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.setSucceeded(true); } } } }
@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.AttachUserGroupToTagCommand.getTagId()) != null) { for (org.ovirt.engine.core.compat.Guid groupGuid : org.ovirt.engine.core.bll.AttachUserGroupToTagCommand.getGroupList()) { org.ovirt.engine.core.common.businessentities.aaa.DbGroup group = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbGroupDao().get(groupGuid); if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagUserGroupByGroupIdAndByTagId(org.ovirt.engine.core.bll.AttachUserGroupToTagCommand.getTagId(), groupGuid)) == null) { org.ovirt.engine.core.common.businessentities.TagsUserGroupMap map = new org.ovirt.engine.core.common.businessentities.TagsUserGroupMap(groupGuid, org.ovirt.engine.core.bll.AttachUserGroupToTagCommand.getTagId()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().attachUserGroupToTag(map); noActionDone = false; if (group != null) { <START_MOD>appendCustomValueSeparatedByComma<END_MOD>("AttachGroupsNames", group.getName()<START_MOD>);<END_MOD> } } else { if (group != null) { <START_MOD>appendCustomValueSeparatedByComma<END_MOD>("AttachGroupsNamesExists", group.getName()<START_MOD>);<END_MOD> } } } org.ovirt.engine.core.bll.AttachUserGroupToTagCommand.setSucceeded(true); } }	@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.AttachUserGroupToTagCommand.getTagId()) != null) { for (org.ovirt.engine.core.compat.Guid groupGuid : org.ovirt.engine.core.bll.AttachUserGroupToTagCommand.getGroupList()) { org.ovirt.engine.core.common.businessentities.aaa.DbGroup group = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbGroupDao().get(groupGuid); if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagUserGroupByGroupIdAndByTagId(org.ovirt.engine.core.bll.AttachUserGroupToTagCommand.getTagId(), groupGuid)) == null) { org.ovirt.engine.core.common.businessentities.TagsUserGroupMap map = new org.ovirt.engine.core.common.businessentities.TagsUserGroupMap(groupGuid, org.ovirt.engine.core.bll.AttachUserGroupToTagCommand.getTagId()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().attachUserGroupToTag(map); noActionDone = false; if (group != null) { appendCustomCommaSeparatedValue("AttachGroupsNames", group.getName()); } } else { if (group != null) { appendCustomCommaSeparatedValue("AttachGroupsNamesExists", group.getName()); } } } org.ovirt.engine.core.bll.AttachUserGroupToTagCommand.setSucceeded(true); } }
@java.lang.Override protected void executeCommand() { for (org.ovirt.engine.core.compat.Guid vdsId : org.ovirt.engine.core.bll.DetachVdsFromTagCommand.getVdsList()) { if (((org.ovirt.engine.core.bll.DetachVdsFromTagCommand.getTagId()) != null) && ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagVdsByTagIdAndByVdsId(org.ovirt.engine.core.bll.DetachVdsFromTagCommand.getTagId(), vdsId)) != null)) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(vdsId); if (vds != null) { <START_MOD>appendCustomValueSeparatedByComma<END_MOD>("VdsNames", vds.getName()<START_MOD>); } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().detachVdsFromTag(org.ovirt.engine.core.bll.DetachVdsFromTagCommand.getTagId()<END_MOD>, vdsId); org.ovirt.engine.core.bll.DetachVdsFromTagCommand.setSucceeded(true); } } }	@java.lang.Override protected void executeCommand() { for (org.ovirt.engine.core.compat.Guid vdsId : org.ovirt.engine.core.bll.DetachVdsFromTagCommand.getVdsList()) { if (((org.ovirt.engine.core.bll.DetachVdsFromTagCommand.getTagId()) != null) && ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagVdsByTagIdAndByVdsId(org.ovirt.engine.core.bll.DetachVdsFromTagCommand.getTagId(), vdsId)) != null)) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(vdsId); if (vds != null) { appendCustomCommaSeparatedValue("VdsNames", vds.getName()); } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().detachVdsFromTag(org.ovirt.engine.core.bll.DetachVdsFromTagCommand.getTagId(), vdsId); org.ovirt.engine.core.bll.DetachVdsFromTagCommand.setSucceeded(true); } } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.TagsUserMap map; if ((org.ovirt.engine.core.bll.AttachUserToTagCommand.getTagId()) != null) { for (org.ovirt.engine.core.compat.Guid userGuid : org.ovirt.engine.core.bll.AttachUserToTagCommand.getUserList()) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().get(userGuid); if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagUserByTagIdAndByuserId(org.ovirt.engine.core.bll.AttachUserToTagCommand.getTagId(), userGuid)) == null) { map = new org.ovirt.engine.core.common.businessentities.TagsUserMap(org.ovirt.engine.core.bll.AttachUserToTagCommand.getTagId(), userGuid); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().attachUserToTag(map); noActionDone = false; if (user != null) { <START_MOD>appendCustomValueSeparatedByComma<END_MOD>("AttachUsersNames", user.getLoginName()<START_MOD>);<END_MOD> } } else { if (user != null) { <START_MOD>appendCustomValueSeparatedByComma<END_MOD>("AttachUsersNamesExists", user.getLoginName()<START_MOD>);<END_MOD> } } } org.ovirt.engine.core.bll.AttachUserToTagCommand.setSucceeded(true); } }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.TagsUserMap map; if ((org.ovirt.engine.core.bll.AttachUserToTagCommand.getTagId()) != null) { for (org.ovirt.engine.core.compat.Guid userGuid : org.ovirt.engine.core.bll.AttachUserToTagCommand.getUserList()) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().get(userGuid); if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagUserByTagIdAndByuserId(org.ovirt.engine.core.bll.AttachUserToTagCommand.getTagId(), userGuid)) == null) { map = new org.ovirt.engine.core.common.businessentities.TagsUserMap(org.ovirt.engine.core.bll.AttachUserToTagCommand.getTagId(), userGuid); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().attachUserToTag(map); noActionDone = false; if (user != null) { appendCustomCommaSeparatedValue("AttachUsersNames", user.getLoginName()); } } else { if (user != null) { appendCustomCommaSeparatedValue("AttachUsersNamesExists", user.getLoginName()); } } } org.ovirt.engine.core.bll.AttachUserToTagCommand.setSucceeded(true); } }
private void assertFailsWith(org.ovirt.engine.core.bll.ValidationResult validationResult, org.ovirt.engine.core.common.errors.EngineMessage engineMessage) { <START_MOD>org.junit.Assert.<END_MOD>assertThat(validationResult<START_MOD>, org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>bll.validator.ValidationResultMatchers.failsWith<END_MOD>(engineMessage<START_MOD>)<END_MOD>); }	private void assertFailsWith(org.ovirt.engine.core.bll.ValidationResult validationResult, org.ovirt.engine.core.common.errors.EngineMessage engineMessage) { assertThat(validationResult, org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(engineMessage)); }
private boolean checkPciAndIdeLimit(org.ovirt.engine.core.common.businessentities.network.VmNic oldIface, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces, org.ovirt.engine.core.compat.Version clusterCompatibilityVersion) { interfaces.remove(oldIface); interfaces.add(org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getParameters().getInterface()); return <START_MOD>validate(org.ovirt.engine.core.bll.validator.VmValidator<END_MOD>.checkPciAndIdeLimit(org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getVmTemplate().getOsId(), clusterCompatibilityVersion, org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getVmTemplate().getNumOfMonitors(), interfaces, org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getTemplateDiskVmElements(), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasVirtioScsiController(org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getVmTemplate().getId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasWatchdog(org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getVmTemplate().getId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasMemoryBalloon(org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getVmTemplate().getId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasSoundDevice(org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getVmTemplate().getId()))); }	private boolean checkPciAndIdeLimit(org.ovirt.engine.core.common.businessentities.network.VmNic oldIface, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces, org.ovirt.engine.core.compat.Version clusterCompatibilityVersion) { interfaces.remove(oldIface); interfaces.add(org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getParameters().getInterface()); return validate(org.ovirt.engine.core.bll.validator.VmValidator.checkPciAndIdeLimit(org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getVmTemplate().getOsId(), clusterCompatibilityVersion, org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getVmTemplate().getNumOfMonitors(), interfaces, org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getTemplateDiskVmElements(), org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getVmDeviceUtils().hasVirtioScsiController(org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getVmTemplate().getId()), org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getVmDeviceUtils().hasWatchdog(org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getVmTemplate().getId()), org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getVmDeviceUtils().hasMemoryBalloon(org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getVmTemplate().getId()), org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getVmDeviceUtils().hasSoundDevice(org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getVmTemplate().getId()))); }
protected boolean pciAndIdeWithinLimit(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> allInterfaces) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> diskVmElements = org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getDiskVmElementDao().getAllForVm(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()); return <START_MOD>validate(org.ovirt.engine.core.bll.validator.VmValidator.<END_MOD>checkPciAndIdeLimit(vm.getOs(), vm.getCompatibilityVersion(), vm.getNumOfMonitors(), allInterfaces, diskVmElements, org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasVirtioScsiController(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasWatchdog(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasMemoryBalloon(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasSoundDevice(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()))); }	protected boolean pciAndIdeWithinLimit(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> allInterfaces) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> diskVmElements = org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getDiskVmElementDao().getAllForVm(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()); return validate(org.ovirt.engine.core.bll.validator.VmValidator.checkPciAndIdeLimit(vm.getOs(), vm.getCompatibilityVersion(), vm.getNumOfMonitors(), allInterfaces, diskVmElements, org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmDeviceUtils().hasVirtioScsiController(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmDeviceUtils().hasWatchdog(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmDeviceUtils().hasMemoryBalloon(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmDeviceUtils().hasSoundDevice(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()))); }
private void assertFailsWith(java.lang.String errorMessage, org.ovirt.engine.core.bll.ValidationResult validationResult, org.ovirt.engine.core.common.errors.EngineMessage engineMessage) { <START_MOD>org.junit.Assert.<END_MOD>assertThat(<START_MOD>errorMessage, <END_MOD>validationResult<START_MOD>, org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>bll<END_MOD>.<START_MOD>validator.ValidationResultMatchers.failsWith<END_MOD>(engineMessage)); }	private void assertFailsWith(java.lang.String errorMessage, org.ovirt.engine.core.bll.ValidationResult validationResult, org.ovirt.engine.core.common.errors.EngineMessage engineMessage) { assertThat(errorMessage, validationResult, org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(engineMessage)); }
private void doTestValidModifiedBonds(org.ovirt.engine.core.common.action.CreateOrUpdateBond createOrUpdateBond, org.ovirt.engine.core.bll.ValidationResult interfaceIsBondValidationResult, org.ovirt.engine.core.bll.ValidationResult expectedValidationResult, org.ovirt.engine.core.bll.ValidationResult slavesValidationValidationResult) { org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = spy(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(createOrUpdateBond)).addExistingInterfaces(((java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>) (null))).addExistingAttachments(((java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>) (null))).addNetworks(((java.util.Collection<org.ovirt.engine.core.common.businessentities.network.Network>) (null))).build()); org.ovirt.engine.core.bll.validator.HostInterfaceValidator hostInterfaceValidatorMock = mock(org.ovirt.engine.core.bll.validator.HostInterfaceValidator.class); when(hostInterfaceValidatorMock.interfaceIsBondOrNull()).thenReturn(interfaceIsBondValidationResult); doReturn(hostInterfaceValidatorMock).when(validator).createHostInterfaceValidator(any(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.class)); doReturn(slavesValidationValidationResult).when(validator).validateModifiedBondSlaves(any(org.ovirt.engine.core.common.action.CreateOrUpdateBond.class)); if (expectedValidationResult.isValid()) { assertThat(validator.validNewOrModifiedBonds(), isValid()); } else { assertThat(validator.validNewOrModifiedBonds(), failsWith(expectedValidationResult.<START_MOD>getMessages().get(0<END_MOD>), expectedValidationResult.getVariableReplacements())); } }	private void doTestValidModifiedBonds(org.ovirt.engine.core.common.action.CreateOrUpdateBond createOrUpdateBond, org.ovirt.engine.core.bll.ValidationResult interfaceIsBondValidationResult, org.ovirt.engine.core.bll.ValidationResult expectedValidationResult, org.ovirt.engine.core.bll.ValidationResult slavesValidationValidationResult) { org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = spy(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(createOrUpdateBond)).addExistingInterfaces(((java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>) (null))).addExistingAttachments(((java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>) (null))).addNetworks(((java.util.Collection<org.ovirt.engine.core.common.businessentities.network.Network>) (null))).build()); org.ovirt.engine.core.bll.validator.HostInterfaceValidator hostInterfaceValidatorMock = mock(org.ovirt.engine.core.bll.validator.HostInterfaceValidator.class); when(hostInterfaceValidatorMock.interfaceIsBondOrNull()).thenReturn(interfaceIsBondValidationResult); doReturn(hostInterfaceValidatorMock).when(validator).createHostInterfaceValidator(any(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.class)); doReturn(slavesValidationValidationResult).when(validator).validateModifiedBondSlaves(any(org.ovirt.engine.core.common.action.CreateOrUpdateBond.class)); if (expectedValidationResult.isValid()) { assertThat(validator.validNewOrModifiedBonds(), isValid()); } else { assertThat(validator.validNewOrModifiedBonds(), failsWith(expectedValidationResult.getMessages(), expectedValidationResult.getVariableReplacements())); } }
@org.junit.Test public void canRemoveBrickEmptyList() { org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(java.util.Collections.<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>emptyList(), getDistributedVolume(volumeId1, 1), 3, false); <START_MOD>assertThat<END_MOD>(validationResult<START_MOD>,<END_MOD> org.ovirt.engine.core.<START_MOD>bll<END_MOD>.<START_MOD>validator<END_MOD>.<START_MOD>ValidationResultMatchers.failsWith(<END_MOD>EngineMessage.ACTION_TYPE_FAILED_BRICKS_REQUIRED)); }	@org.junit.Test public void canRemoveBrickEmptyList() { org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(java.util.Collections.emptyList(), getDistributedVolume(volumeId1, 1), 3, false); assertThat(validationResult, org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_BRICKS_REQUIRED)); }
public java.lang.Integer calcMaxVCpu() { return vmStatic.calcMaxVCpu(getClusterCompatibilityVersion()); }	public void setGuestContainers(java.util.List<org.ovirt.engine.core.common.businessentities.GuestContainer> containers) { vmDynamic.setGuestContainers(containers); }
<START_MOD>public<END_MOD> java.lang.Integer calcMaxVCpu() { <START_MOD>return<END_MOD> vm.<START_MOD>calcMaxVCpu<END_MOD>(); }	public java.lang.Integer calcMaxVCpu() { return org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVCpu(vm.getStaticData(), vm.getClusterCompatibilityVersion()); }
public java.lang.Integer calcMaxVCpu(org.ovirt.engine.core.compat.Version compatibilityVersion) { java.lang.Integer maxSockets = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmSockets, compatibilityVersion.getValue()); java.lang.Integer maxVCpus = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmCpus, compatibilityVersion.getValue()); int threadsPerCore = getThreadsPerCpu(); int cpuPerSocket = getCpuPerSocket(); maxVCpus = (cpuPerSocket * threadsPerCore) * (java.lang.Math.min(maxSockets, (maxVCpus / (cpuPerSocket * threadsPerCore)))); return maxVCpus; }	public void setMigrationPolicyId(org.ovirt.engine.core.compat.Guid migrationPolicyId) { this.migrationPolicyId = migrationPolicyId; }
private java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> getConnections() { java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connectionsList = new java.util.ArrayList<>(); <START_MOD>for (int i = 0; i == (org.ovirt.engine.core.bll.validator.storage.StorageConnectionValidatorTest.NUMBER_OF_EXISTING_CONNECTIONS); i++) { <END_MOD>org.ovirt.engine.core.common.businessentities.StorageServerConnections <START_MOD>conn<END_MOD> = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); <START_MOD>conn<END_MOD>.setId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); connectionsList.add(<START_MOD>conn<END_MOD>); <START_MOD>}<END_MOD> return connectionsList; }	private java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> getConnections() { java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connectionsList = new java.util.ArrayList<>(); for (int i = 0; i < (org.ovirt.engine.core.bll.validator.storage.StorageConnectionValidatorTest.NUMBER_OF_EXISTING_CONNECTIONS); i++) { org.ovirt.engine.core.common.businessentities.StorageServerConnections conn = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); conn.setId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); connectionsList.add(conn); } return connectionsList; }
@java.lang.Override protected boolean validate() { final org.ovirt.engine.core.bll.validator.ClusterValidator validator = new org.ovirt.engine.core.bll.validator.ClusterValidator(org.ovirt.engine.core.bll.AddClusterCommand.getDbFacade(), org.ovirt.engine.core.bll.AddClusterCommand.getCluster(), org.ovirt.engine.core.bll.AddClusterCommand.getCpuFlagsManagerHandler()); return (((((((((((<START_MOD>(<END_MOD>validate(validator.nameNotUsed())) && (validate(validator.cpuTypeSupportsVirtService()))) && (validate(validator.versionSupported()))) && (validate(validator.dataCenterVersionMismatch()))) && (validate(validator.dataCenterExists()))) && (validate(validator.localStoragePoolAttachedToSingleCluster()))) && (validate(validator.clusterServiceDefined()))) && (validate(validator.mixedClusterServicesSupported()))) && (validate(validator.attestationServerConfigured()))) && (validate(validator.migrationSupported(org.ovirt.engine.core.bll.AddClusterCommand.getArchitecture())))) && (org.ovirt.engine.core.bll.AddClusterCommand.validateClusterPolicy(null))) && (validateManagementNetwork())<START_MOD>) && (org.ovirt.engine.core.bll.AddClusterCommand.validateMaxMemoryOverCommitValue())<END_MOD>; }	@java.lang.Override protected boolean validate() { final org.ovirt.engine.core.bll.validator.ClusterValidator validator = new org.ovirt.engine.core.bll.validator.ClusterValidator(org.ovirt.engine.core.bll.AddClusterCommand.getDbFacade(), org.ovirt.engine.core.bll.AddClusterCommand.getCluster(), org.ovirt.engine.core.bll.AddClusterCommand.getCpuFlagsManagerHandler()); return (((((((((((validate(validator.nameNotUsed())) && (validate(validator.cpuTypeSupportsVirtService()))) && (validate(validator.versionSupported()))) && (validate(validator.dataCenterVersionMismatch()))) && (validate(validator.dataCenterExists()))) && (validate(validator.localStoragePoolAttachedToSingleCluster()))) && (validate(validator.clusterServiceDefined()))) && (validate(validator.mixedClusterServicesSupported()))) && (validate(validator.attestationServerConfigured()))) && (validate(validator.migrationSupported(org.ovirt.engine.core.bll.AddClusterCommand.getArchitecture())))) && (org.ovirt.engine.core.bll.AddClusterCommand.validateClusterPolicy(null))) && (validateManagementNetwork()); }
@java.lang.Override protected void buildCloudInitVmPayload(java.util.Map<java.lang.String, byte[]> cloudInitContent) { org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(); vmPayload.setDeviceType(VmDeviceType.CDROM); vmPayload.setVolumeId(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.CLOUD_INIT_VOL_ID); for (java.util.Map.Entry<java.lang.String, byte[]> entry : cloudInitContent.entrySet()) { vmPayload.getFiles().put(entry.getKey(), new java.lang.String(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.BASE_64.encode(entry.getValue()), java.nio.charset.Charset.forName(CharEncoding.UTF_8))); } org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vm.getId()), org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null, null, null); java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); <START_MOD>vmInfoStatelessBuilder<END_MOD>.addCdDetails(vmDevice, struct, vm); addDevice(struct, vmDevice, ""); }	@java.lang.Override protected void buildCloudInitVmPayload(java.util.Map<java.lang.String, byte[]> cloudInitContent) { org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(); vmPayload.setDeviceType(VmDeviceType.CDROM); vmPayload.setVolumeId(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.CLOUD_INIT_VOL_ID); for (java.util.Map.Entry<java.lang.String, byte[]> entry : cloudInitContent.entrySet()) { vmPayload.getFiles().put(entry.getKey(), new java.lang.String(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.BASE_64.encode(entry.getValue()), java.nio.charset.Charset.forName(CharEncoding.UTF_8))); } org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vm.getId()), org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null, null, null); java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); vmInfoBuildUtils.addCdDetails(vmDevice, struct, vm); addDevice(struct, vmDevice, ""); }
@java.lang.Override protected void buildSysprepVmPayload(java.lang.String sysPrepContent) { org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(); vmPayload.setDeviceType(VmDeviceType.FLOPPY); vmPayload.getFiles().put(<START_MOD>vmInfoStatelessBuilder<END_MOD>.getOsRepository().getSysprepFileName(vm.getOs(), vm.getCompatibilityVersion()), new java.lang.String(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.BASE_64.encode(sysPrepContent.getBytes()), java.nio.charset.Charset.forName(CharEncoding.UTF_8))); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vm.getId()), org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null, null, null); java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); <START_MOD>vmInfoStatelessBuilder<END_MOD>.addFloppyDetails(vmDevice, struct); addDevice(struct, vmDevice, vm.getFloppyPath()); }	@java.lang.Override protected void buildSysprepVmPayload(java.lang.String sysPrepContent) { org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(); vmPayload.setDeviceType(VmDeviceType.FLOPPY); vmPayload.getFiles().put(vmInfoBuildUtils.getOsRepository().getSysprepFileName(vm.getOs(), vm.getCompatibilityVersion()), new java.lang.String(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.BASE_64.encode(sysPrepContent.getBytes()), java.nio.charset.Charset.forName(CharEncoding.UTF_8))); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vm.getId()), org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null, null, null); java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); vmInfoBuildUtils.addFloppyDetails(vmDevice, struct); addDevice(struct, vmDevice, vm.getFloppyPath()); }
private void addNetworkInterfaceProperties(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VmNic vmInterface, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.lang.String nicModel) { struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); struct.put(VdsProperties.LINK_ACTIVE, java.lang.String.valueOf(vmInterface.isLinked())); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); struct.put(VdsProperties.MAC_ADDR, vmInterface.getMacAddress()); <START_MOD>vmInfoStatelessBuilder<END_MOD>.addBootOrder(vmDevice, struct); struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); struct.put(VdsProperties.NIC_TYPE, nicModel); <START_MOD>vmInfoStatelessBuilder<END_MOD>.addProfileDataToNic(struct, vm, vmDevice, vmInterface); <START_MOD>vmInfoStatelessBuilder<END_MOD>.addNetworkFiltersToNic(struct, vmInterface); }	private void addNetworkInterfaceProperties(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VmNic vmInterface, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.lang.String nicModel) { struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); struct.put(VdsProperties.LINK_ACTIVE, java.lang.String.valueOf(vmInterface.isLinked())); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); struct.put(VdsProperties.MAC_ADDR, vmInterface.getMacAddress()); vmInfoBuildUtils.addBootOrder(vmDevice, struct); struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); struct.put(VdsProperties.NIC_TYPE, nicModel); vmInfoBuildUtils.addProfileDataToNic(struct, vm, vmDevice, vmInterface); vmInfoBuildUtils.addNetworkFiltersToNic(struct, vmInterface); }
private void buildVmUsbControllers() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = <START_MOD>dbFacade.getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.USB.getName()); for (<END_MOD>org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map struct = new java.util.HashMap(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); <START_MOD>vmInfoStatelessBuilder<END_MOD>.setVdsPropertiesFromSpecParams(vmDevice.getSpecParams(), struct); struct.put(VdsProperties.SpecParams, new java.util.HashMap<java.lang.String, java.lang.Object>()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); java.lang.String model = ((java.lang.String) (struct.get(VdsProperties.Model))); if ((model != null) && (<START_MOD>vmInfoStatelessBuilder<END_MOD>.isFirstMasterController(model))) { devices.add(0, struct); } else { devices.add(struct); } } }	private void buildVmUsbControllers() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = dbFacade.getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.USB.getName()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map struct = new java.util.HashMap(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); vmInfoBuildUtils.setVdsPropertiesFromSpecParams(vmDevice.getSpecParams(), struct); struct.put(VdsProperties.SpecParams, new java.util.HashMap<java.lang.String, java.lang.Object>()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); java.lang.String model = ((java.lang.String) (struct.get(VdsProperties.Model))); if ((model != null) && (vmInfoBuildUtils.isFirstMasterController(model))) { devices.add(0, struct); } else { devices.add(struct); } } }
private java.util.Map<java.lang.String, java.lang.Object> initNicStructure() { java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>(); org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugNicVDSCommand.getParameters().getNic(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugNicVDSCommand.getParameters().getVmDevice(); org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugNicVDSCommand.getParameters().getVm(); if (!(nic.isPassthrough())) { map.put(VdsProperties.Type, vmDevice.getType().getValue()); map.put(VdsProperties.Device, VmDeviceType.BRIDGE.getName()); map.put(VdsProperties.MAC_ADDR, nic.getMacAddress()); map.put(VdsProperties.LINK_ACTIVE, java.lang.String.valueOf(nic.isLinked())); addAddress(map, vmDevice.getAddress()); map.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); map.put(VdsProperties.NIC_TYPE, <START_MOD>vmInfoStatelessBuilder<END_MOD>.evaluateInterfaceType(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(nic.getType()), vm.getHasAgent())); map.put(VdsProperties.DeviceId, vmDevice.getId().getDeviceId().toString()); <START_MOD>vmInfoStatelessBuilder<END_MOD>.addProfileDataToNic(map, vm, vmDevice, nic); <START_MOD>vmInfoStatelessBuilder<END_MOD>.addNetworkFiltersToNic(map, nic); } else { <START_MOD>vmInfoStatelessBuilder<END_MOD>.addNetworkVirtualFunctionProperties(map, nic, vmDevice, vmDevice.getHostDevice(), vm); } return map; }	private java.util.Map<java.lang.String, java.lang.Object> initNicStructure() { java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>(); org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugNicVDSCommand.getParameters().getNic(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugNicVDSCommand.getParameters().getVmDevice(); org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugNicVDSCommand.getParameters().getVm(); if (!(nic.isPassthrough())) { map.put(VdsProperties.Type, vmDevice.getType().getValue()); map.put(VdsProperties.Device, VmDeviceType.BRIDGE.getName()); map.put(VdsProperties.MAC_ADDR, nic.getMacAddress()); map.put(VdsProperties.LINK_ACTIVE, java.lang.String.valueOf(nic.isLinked())); addAddress(map, vmDevice.getAddress()); map.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); map.put(VdsProperties.NIC_TYPE, vmInfoBuildUtils.evaluateInterfaceType(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(nic.getType()), vm.getHasAgent())); map.put(VdsProperties.DeviceId, vmDevice.getId().getDeviceId().toString()); vmInfoBuildUtils.addProfileDataToNic(map, vm, vmDevice, nic); vmInfoBuildUtils.addNetworkFiltersToNic(map, nic); } else { vmInfoBuildUtils.addNetworkVirtualFunctionProperties(map, nic, vmDevice, vmDevice.getHostDevice(), vm); } return map; }
private void addDevice(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.lang.String path) { boolean isPayload = (org.ovirt.engine.core.common.businessentities.VmPayload.isPayload(vmDevice.getSpecParams())) && (vmDevice.getDevice().equals(VmDeviceType.CDROM.getName())); java.util.Map<java.lang.String, java.lang.Object> specParams = ((vmDevice.getSpecParams()) == null) ? java.util.Collections.<START_MOD>emptyMap() : vmDevice.getSpecParams(); if (path != null) { struct.put(VdsProperties.Path, (isPayload ? "" : path)); } if (isPayload) { <END_MOD>java.lang.String<START_MOD> cdInterface = osRepository.getCdInterface(vm.getOs(), vm.getCompatibilityVersion(), org.ovirt.engine.core.common.businessentities.ChipsetType.fromMachineType(vm.getEmulatedMachine())); int index = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getCdPayloadDeviceIndex(cdInterface); struct.put(VdsProperties.Index, java.lang.Integer.toString(index)<END_MOD>); if (<START_MOD>"scsi".equals(cdInterface)<END_MOD>) { struct.put(VdsProperties.<START_MOD>Address, vmInfoStatelessBuilder.createAddressForScsiDisk(0, index<END_MOD>)); } <START_MOD>} struct.put(VdsProperties.SpecParams, specParams); struct.put(VdsProperties.DeviceId,<END_MOD> java.lang.String<START_MOD>.valueOf(vmDevice.getId().getDeviceId())); vmInfoStatelessBuilder.addBootOrder(vmDevice, struct); devices.add(struct); addToManagedDevices(vmDevice<END_MOD>); }	private void addDevice(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.lang.String path) { boolean isPayload = (org.ovirt.engine.core.common.businessentities.VmPayload.isPayload(vmDevice.getSpecParams())) && (vmDevice.getDevice().equals(VmDeviceType.CDROM.getName())); java.util.Map<java.lang.String, java.lang.Object> specParams = ((vmDevice.getSpecParams()) == null) ? java.util.Collections.emptyMap() : vmDevice.getSpecParams(); if (path != null) { struct.put(VdsProperties.Path, (isPayload ? "" : path)); } if (isPayload) { java.lang.String cdInterface = osRepository.getCdInterface(vm.getOs(), vm.getCompatibilityVersion(), org.ovirt.engine.core.common.businessentities.ChipsetType.fromMachineType(vm.getEmulatedMachine())); int index = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getCdPayloadDeviceIndex(cdInterface); struct.put(VdsProperties.Index, java.lang.Integer.toString(index)); if ("scsi".equals(cdInterface)) { struct.put(VdsProperties.Address, vmInfoBuildUtils.createAddressForScsiDisk(0, index)); } } struct.put(VdsProperties.SpecParams, specParams); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); vmInfoBuildUtils.addBootOrder(vmDevice, struct); devices.add(struct); addToManagedDevices(vmDevice); }
protected java.util.Map<java.lang.String, java.lang.Object> initDeviceStructure() { java.util.Map<java.lang.String, java.lang.Object> deviceStruct = new java.util.HashMap<>(); deviceStruct.put(VdsProperties.DeviceType, getParameters().getVmDevice().getType().getValue()); deviceStruct.put(VdsProperties.Alias, getParameters().getVmDevice().getAlias()); org.ovirt.engine.core.common.businessentities.network.VmNic nic = getParameters().getNic(); deviceStruct.put(VdsProperties.LINK_ACTIVE, java.lang.String.valueOf(nic.isLinked())); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = getParameters().getVmDevice(); <START_MOD>vmInfoStatelessBuilder<END_MOD>.addProfileDataToNic(deviceStruct, getParameters().getVm(), vmDevice, nic); return deviceStruct; }	protected java.util.Map<java.lang.String, java.lang.Object> initDeviceStructure() { java.util.Map<java.lang.String, java.lang.Object> deviceStruct = new java.util.HashMap<>(); deviceStruct.put(VdsProperties.DeviceType, getParameters().getVmDevice().getType().getValue()); deviceStruct.put(VdsProperties.Alias, getParameters().getVmDevice().getAlias()); org.ovirt.engine.core.common.businessentities.network.VmNic nic = getParameters().getNic(); deviceStruct.put(VdsProperties.LINK_ACTIVE, java.lang.String.valueOf(nic.isLinked())); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = getParameters().getVmDevice(); vmInfoBuildUtils.addProfileDataToNic(deviceStruct, getParameters().getVm(), vmDevice, nic); return deviceStruct; }
private java.util.Map<java.lang.String, java.lang.String> getAddressMapForScsiDisk(java.lang.String address, java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer> vmDeviceUnitMap, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, int controllerIndex, boolean reserveFirstAddress) { java.util.Map<java.lang.String, java.lang.String> addressMap; int availableUnit = <START_MOD>vmInfoStatelessBuilder.getAvailableUnitForScsiDisk(vmDeviceUnitMap, reserveFirstAddress); if (org.apache.commons.lang.StringUtils.isNotBlank(address)) { addressMap = <END_MOD>org.ovirt.engine.core.vdsbroker.<START_MOD>xmlrpc.XmlRpcStringUtils.string2Map(address); int unit = java.lang.Integer.parseInt(addressMap.get(VdsProperties.Unit)); if <END_MOD>(vmDeviceUnitMap<START_MOD>.containsValue(<END_MOD>unit<START_MOD>)) { addressMap = vmInfoStatelessBuilder<END_MOD>.createAddressForScsiDisk(controllerIndex, availableUnit); } } else { addressMap = <START_MOD>vmInfoStatelessBuilder<END_MOD>.createAddressForScsiDisk(controllerIndex, availableUnit); } updateVmDeviceAddress(addressMap.toString(), vmDevice); return addressMap; }	private java.util.Map<java.lang.String, java.lang.String> getAddressMapForScsiDisk(java.lang.String address, java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer> vmDeviceUnitMap, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, int controllerIndex, boolean reserveFirstAddress) { java.util.Map<java.lang.String, java.lang.String> addressMap; int availableUnit = vmInfoBuildUtils.getAvailableUnitForScsiDisk(vmDeviceUnitMap, reserveFirstAddress); if (org.apache.commons.lang.StringUtils.isNotBlank(address)) { addressMap = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map(address); int unit = java.lang.Integer.parseInt(addressMap.get(VdsProperties.Unit)); if (vmDeviceUnitMap.containsValue(unit)) { addressMap = vmInfoBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } } else { addressMap = vmInfoBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } updateVmDeviceAddress(addressMap.toString(), vmDevice); return addressMap; }
public boolean isFirstMasterController(java.lang.String model) { return model.equalsIgnoreCase(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoStatelessBuilder.FIRST_MASTER_MODEL); }	public boolean isFirstMasterController(java.lang.String model) { return model.equalsIgnoreCase(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuildUtils.FIRST_MASTER_MODEL); }
public org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder createVmInfoBuilder(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.compat.Guid vdsId, java.util.Map createInfo) { return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder(vm, vdsId, createInfo, dbFacade, vmInfoStatelessBuilder); }	public org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder createVmInfoBuilder(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.compat.Guid vdsId, java.util.Map createInfo) { return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder(vm, vdsId, createInfo, dbFacade, vmInfoBuildUtils); }
private void buildVmUsbControllers() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = <START_MOD>vmDeviceDao<END_MOD>.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.USB.getName()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map struct = new java.util.HashMap(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); vmInfoStatelessBuilder.setVdsPropertiesFromSpecParams(vmDevice.getSpecParams(), struct); struct.put(VdsProperties.SpecParams, new java.util.HashMap<java.lang.String, java.lang.Object>()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); java.lang.String model = ((java.lang.String) (struct.get(VdsProperties.Model))); if ((model != null) && (vmInfoStatelessBuilder.isFirstMasterController(model))) { devices.add(0, struct); } else { devices.add(struct); } } }	private void buildVmUsbControllers() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.USB.getName()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map struct = new java.util.HashMap(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); vmInfoBuildUtils.setVdsPropertiesFromSpecParams(vmDevice.getSpecParams(), struct); struct.put(VdsProperties.SpecParams, new java.util.HashMap<java.lang.String, java.lang.Object>()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); java.lang.String model = ((java.lang.String) (struct.get(VdsProperties.Model))); if ((model != null) && (vmInfoBuildUtils.isFirstMasterController(model))) { devices.add(0, struct); } else { devices.add(struct); } } }
public org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder createVmInfoBuilder(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.compat.Guid vdsId, java.util.Map createInfo) { return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder(vm, vdsId, createInfo, <START_MOD>vdsNumaNodeDao, vmDeviceDao, vmNumaNodeDao<END_MOD>, vmInfoStatelessBuilder); }	public org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder createVmInfoBuilder(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.compat.Guid vdsId, java.util.Map createInfo) { return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder(vm, vdsId, createInfo, vdsNumaNodeDao, vmDeviceDao, vmNumaNodeDao, vmInfoBuildUtils); }
public org.ovirt.engine.core.vdsbroker.<START_MOD>builder.vminfo<END_MOD>.VmInfoBuilder createVmInfoBuilder(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.compat.Guid vdsId, java.util.Map<START_MOD><java.lang.String, java.lang.Object><END_MOD> createInfo) { return new org.ovirt.engine.core.vdsbroker.<START_MOD>builder<END_MOD>.<START_MOD>vminfo.VmInfoBuilderImpl<END_MOD>(vm, vdsId, createInfo<START_MOD>, clusterDao, networkClusterDao, networkDao<END_MOD>, vdsNumaNodeDao, vmDeviceDao, vmNumaNodeDao, vmInfoBuildHelper); }	public org.ovirt.engine.core.vdsbroker.builder.vminfo.VmInfoBuilder createVmInfoBuilder(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.compat.Guid vdsId, java.util.Map<java.lang.String, java.lang.Object> createInfo) { return new org.ovirt.engine.core.vdsbroker.builder.vminfo.VmInfoBuilderImpl(vm, vdsId, createInfo, clusterDao, networkClusterDao, networkDao, vdsNumaNodeDao, vmDeviceDao, vmNumaNodeDao, vmInfoBuildUtils); }
@java.lang.Override <START_MOD>public<END_MOD> void buildCloudInitVmPayload(java.util.Map<java.lang.String, byte[]> cloudInitContent) { org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(); vmPayload.setDeviceType(VmDeviceType.CDROM); vmPayload.setVolumeId(org.ovirt.engine.core.vdsbroker.<START_MOD>builder.vminfo.VmInfoBuilderImpl<END_MOD>.CLOUD_INIT_VOL_ID); for (java.util.Map.Entry<java.lang.String, byte[]> entry : cloudInitContent.entrySet()) { vmPayload.getFiles().put(entry.getKey(), new java.lang.String(org.ovirt.engine.core.vdsbroker.<START_MOD>builder.vminfo.VmInfoBuilderImpl<END_MOD>.BASE_64.encode(entry.getValue()), java.nio.charset.Charset.forName(CharEncoding.UTF_8))); } org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vm.getId()), org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null, null, null); java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); vmInfoBuildHelper.addCdDetails(vmDevice, struct, vm); addDevice(struct, vmDevice, ""); }	@java.lang.Override public void buildCloudInitVmPayload(java.util.Map<java.lang.String, byte[]> cloudInitContent) { org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(); vmPayload.setDeviceType(VmDeviceType.CDROM); vmPayload.setVolumeId(org.ovirt.engine.core.vdsbroker.builder.vminfo.VmInfoBuilderImpl.CLOUD_INIT_VOL_ID); for (java.util.Map.Entry<java.lang.String, byte[]> entry : cloudInitContent.entrySet()) { vmPayload.getFiles().put(entry.getKey(), new java.lang.String(org.ovirt.engine.core.vdsbroker.builder.vminfo.VmInfoBuilderImpl.BASE_64.encode(entry.getValue()), java.nio.charset.Charset.forName(CharEncoding.UTF_8))); } org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vm.getId()), org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null, null, null); java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); vmInfoBuildUtils.addCdDetails(vmDevice, struct, vm); addDevice(struct, vmDevice, ""); }
@java.lang.Override <START_MOD>public<END_MOD> void buildVmHostDevices() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdAndType(vm.getId(), VmDeviceGeneralType.HOSTDEV); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, VmDeviceType.HOST_DEVICE.getName()); struct.put(VdsProperties.Device, vmDevice.getDevice()); struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, vmDevice.getId().getDeviceId().toString()); <START_MOD>vmInfoBuildHelper<END_MOD>.addAddress(vmDevice, struct); devices.add(struct); } }	@java.lang.Override public void buildVmHostDevices() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdAndType(vm.getId(), VmDeviceGeneralType.HOSTDEV); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, VmDeviceType.HOST_DEVICE.getName()); struct.put(VdsProperties.Device, vmDevice.getDevice()); struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, vmDevice.getId().getDeviceId().toString()); vmInfoBuildUtils.addAddress(vmDevice, struct); devices.add(struct); } }
private void buildVmUsbControllers() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.USB.getName()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<START_MOD><java.lang.String, java.lang.Object><END_MOD> struct = new java.util.HashMap<<START_MOD>>(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); vmInfoBuildHelper.setVdsPropertiesFromSpecParams(vmDevice.getSpecParams(), struct); struct.put(VdsProperties.SpecParams, new java.util.HashMap<<END_MOD>java.lang.String, java.lang.Object>()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); <START_MOD>vmInfoBuildHelper<END_MOD>.addAddress(vmDevice, struct); java.lang.String model = ((java.lang.String) (struct.get(VdsProperties.Model))); if ((model != null) && (vmInfoBuildHelper.isFirstMasterController(model))) { devices.add(0, struct); } else { devices.add(struct); } } }	private void buildVmUsbControllers() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.USB.getName()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); vmInfoBuildUtils.setVdsPropertiesFromSpecParams(vmDevice.getSpecParams(), struct); struct.put(VdsProperties.SpecParams, new java.util.HashMap<java.lang.String, java.lang.Object>()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); vmInfoBuildUtils.addAddress(vmDevice, struct); java.lang.String model = ((java.lang.String) (struct.get(VdsProperties.Model))); if ((model != null) && (vmInfoBuildUtils.isFirstMasterController(model))) { devices.add(0, struct); } else { devices.add(struct); } } }
@java.lang.Override <START_MOD>public<END_MOD> void buildUnmanagedDevices() { <START_MOD>@java.lang.SuppressWarnings("unchecked") <END_MOD>java.util.Map<java.lang.String, java.lang.String> customMap = (createInfo.containsKey(VdsProperties.Custom)) ? ((java.util.Map<java.lang.String, java.lang.String>) (createInfo.get(VdsProperties.Custom))) : new java.util.HashMap<>(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getUnmanagedDevicesByVmId(vm.getId()); if (!(vmDevices.isEmpty())) { java.lang.StringBuilder id = new java.lang.StringBuilder(); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<START_MOD><java.lang.String, java.lang.Object><END_MOD> struct = new java.util.HashMap<START_MOD><><END_MOD>(); id.append(VdsProperties.Device); id.append("_"); id.append(vmDevice.getDeviceId()); if (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isInWhiteList(vmDevice.getType(), vmDevice.getDevice())) { struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); <START_MOD>vmInfoBuildHelper.addAddress(vmDevice, struct); struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); devices.add(struct); } else { customMap.put(id.toString(), vmDevice.toString()); } } } createInfo.put(VdsProperties.Custom, customMap); createInfo.put(<END_MOD>org.ovirt.engine.core.vdsbroker.<START_MOD>builder.vminfo.VmInfoBuilderImpl.DEVICES,<END_MOD> devices); }	@java.lang.Override public void buildUnmanagedDevices() { @java.lang.SuppressWarnings("unchecked") java.util.Map<java.lang.String, java.lang.String> customMap = (createInfo.containsKey(VdsProperties.Custom)) ? ((java.util.Map<java.lang.String, java.lang.String>) (createInfo.get(VdsProperties.Custom))) : new java.util.HashMap<>(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getUnmanagedDevicesByVmId(vm.getId()); if (!(vmDevices.isEmpty())) { java.lang.StringBuilder id = new java.lang.StringBuilder(); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); id.append(VdsProperties.Device); id.append("_"); id.append(vmDevice.getDeviceId()); if (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isInWhiteList(vmDevice.getType(), vmDevice.getDevice())) { struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); vmInfoBuildUtils.addAddress(vmDevice, struct); struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); devices.add(struct); } else { customMap.put(id.toString(), vmDevice.toString()); } } } createInfo.put(VdsProperties.Custom, customMap); createInfo.put(org.ovirt.engine.core.vdsbroker.builder.vminfo.VmInfoBuilderImpl.DEVICES, devices); }
<START_MOD>public<END_MOD> void buildVmNumaProperties() { addNumaSetting(); }	@java.lang.Override public void buildVmNumaProperties() { addNumaSetting(); }
private void buildVmDevicesFromDb(org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType generalType, boolean addAddress, java.util.Map<java.lang.String, java.lang.Object> extraSpecParams) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdAndType(vm.getId(), generalType); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<START_MOD><java.lang.String, java.lang.Object><END_MOD> struct = new java.util.HashMap<START_MOD><><END_MOD>(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); java.util.Map<java.lang.String, java.lang.Object> specParams = vmDevice.getSpecParams(); if (extraSpecParams != null) { specParams.putAll(extraSpecParams); } struct.put(VdsProperties.SpecParams, specParams); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); if (addAddress) { <START_MOD>vmInfoBuildHelper<END_MOD>.addAddress(vmDevice, struct); } devices.add(struct); } }	private void buildVmDevicesFromDb(org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType generalType, boolean addAddress, java.util.Map<java.lang.String, java.lang.Object> extraSpecParams) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdAndType(vm.getId(), generalType); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); java.util.Map<java.lang.String, java.lang.Object> specParams = vmDevice.getSpecParams(); if (extraSpecParams != null) { specParams.putAll(extraSpecParams); } struct.put(VdsProperties.SpecParams, specParams); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); if (addAddress) { vmInfoBuildUtils.addAddress(vmDevice, struct); } devices.add(struct); } }
@java.lang.Override <START_MOD>public<END_MOD> void buildVmVideoCards() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmVideoDevices = vmDeviceDao.getVmDeviceByVmIdAndType(vm.getId(), VmDeviceGeneralType.VIDEO); for (org.ovirt.engine.core.common.businessentities.VmDevice vmVideoDevice : vmVideoDevices) { if (!(vmVideoDevice.getIsManaged())) { continue; } java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, vmVideoDevice.getType().getValue()); struct.put(VdsProperties.Device, vmVideoDevice.getDevice()); <START_MOD>vmInfoBuildHelper<END_MOD>.addAddress(vmVideoDevice, struct); struct.put(VdsProperties.SpecParams, vmVideoDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmVideoDevice.getId().getDeviceId())); addToManagedDevices(vmVideoDevice); devices.add(struct); } }	@java.lang.Override public void buildVmVideoCards() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmVideoDevices = vmDeviceDao.getVmDeviceByVmIdAndType(vm.getId(), VmDeviceGeneralType.VIDEO); for (org.ovirt.engine.core.common.businessentities.VmDevice vmVideoDevice : vmVideoDevices) { if (!(vmVideoDevice.getIsManaged())) { continue; } java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, vmVideoDevice.getType().getValue()); struct.put(VdsProperties.Device, vmVideoDevice.getDevice()); vmInfoBuildUtils.addAddress(vmVideoDevice, struct); struct.put(VdsProperties.SpecParams, vmVideoDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmVideoDevice.getId().getDeviceId())); addToManagedDevices(vmVideoDevice); devices.add(struct); } }
@java.lang.Override <START_MOD>public<END_MOD> void buildSysprepVmPayload(java.lang.String sysPrepContent) { org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(); vmPayload.setDeviceType(VmDeviceType.FLOPPY); vmPayload.getFiles().put(vmInfoBuildHelper.getOsRepository().getSysprepFileName(vm.getOs(), vm.getCompatibilityVersion()), new java.lang.String(org.ovirt.engine.core.vdsbroker.<START_MOD>builder.vminfo.VmInfoBuilderImpl<END_MOD>.BASE_64.encode(sysPrepContent.getBytes()), java.nio.charset.Charset.forName(CharEncoding.UTF_8))); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vm.getId()), org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null, null, null); java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); vmInfoBuildHelper.addFloppyDetails(vmDevice, struct); addDevice(struct, vmDevice, vm.getFloppyPath()); }	@java.lang.Override public void buildSysprepVmPayload(java.lang.String sysPrepContent) { org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(); vmPayload.setDeviceType(VmDeviceType.FLOPPY); vmPayload.getFiles().put(vmInfoBuildUtils.getOsRepository().getSysprepFileName(vm.getOs(), vm.getCompatibilityVersion()), new java.lang.String(org.ovirt.engine.core.vdsbroker.builder.vminfo.VmInfoBuilderImpl.BASE_64.encode(sysPrepContent.getBytes()), java.nio.charset.Charset.forName(CharEncoding.UTF_8))); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vm.getId()), org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null, null, null); java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); vmInfoBuildUtils.addFloppyDetails(vmDevice, struct); addDevice(struct, vmDevice, vm.getFloppyPath()); }
private void addMemBalloonDevice(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); java.util.Map<java.lang.String, java.lang.Object> specParams = vmDevice.getSpecParams(); if (specParams == null) { specParams = new java.util.HashMap<>(); vmDevice.setSpecParams(specParams); } specParams.put(VdsProperties.Model, VdsProperties.Virtio); <START_MOD>vmInfoBuildHelper<END_MOD>.addAddress(vmDevice, struct); addDevice(struct, vmDevice, null); }	private void addMemBalloonDevice(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); java.util.Map<java.lang.String, java.lang.Object> specParams = vmDevice.getSpecParams(); if (specParams == null) { specParams = new java.util.HashMap<>(); vmDevice.setSpecParams(specParams); } specParams.put(VdsProperties.Model, VdsProperties.Virtio); vmInfoBuildUtils.addAddress(vmDevice, struct); addDevice(struct, vmDevice, null); }
private java.lang.Integer calcMaxVCpu() { java.lang.Integer maxSockets = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmSockets, vm.getCompatibilityVersion().getValue()); java.lang.Integer maxVCpus = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmCpus, vm.getCompatibilityVersion().getValue()); int threadsPerCore = vm.getThreadsPerCpu(); int cpuPerSocket = vm.getCpuPerSocket(); maxVCpus = (cpuPerSocket * threadsPerCore) * (java.lang.Math.min(maxSockets, (maxVCpus / (cpuPerSocket * threadsPerCore)))); return maxVCpus; }	private java.lang.Integer calcMaxVCpu() { return org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVCpu(vm.getStaticData(), vm.getClusterCompatibilityVersion()); }
<START_MOD>public<END_MOD> void buildVmRngDevice() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.RNG, VmDeviceType.VIRTIO.getName()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, VmDeviceGeneralType.RNG.getValue()); struct.put(VdsProperties.Device, VmDeviceType.VIRTIO.getName()); struct.put(VdsProperties.Model, VdsProperties.Virtio); struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); addDevice(struct, vmDevice, null); } }	@java.lang.Override public void buildVmRngDevice() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.RNG, VmDeviceType.VIRTIO.getName()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, VmDeviceGeneralType.RNG.getValue()); struct.put(VdsProperties.Device, VmDeviceType.VIRTIO.getName()); struct.put(VdsProperties.Model, VdsProperties.Virtio); struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); addDevice(struct, vmDevice, null); } }
@java.lang.Override <START_MOD>public<END_MOD> void buildVmVirtioScsi() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.VIRTIOSCSI.getName()); java.util.Map<org.ovirt.engine.core.common.businessentities.storage.DiskInterface, java.lang.Integer> controllerIndexMap = org.ovirt.engine.core.utils.archstrategy.ArchStrategyFactory.getStrategy(vm.getClusterArch()).run(new org.ovirt.engine.core.vdsbroker.architecture.GetControllerIndices()).returnValue(); int virtioScsiIndex = controllerIndexMap.get(DiskInterface.VirtIO_SCSI); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, VmDeviceGeneralType.CONTROLLER.getValue()); struct.put(VdsProperties.Device, VdsProperties.Scsi); struct.put(VdsProperties.Model, VdsProperties.VirtioScsi); struct.put(VdsProperties.Index, java.lang.Integer.toString(virtioScsiIndex)); <START_MOD>vmInfoBuildHelper<END_MOD>.addAddress(vmDevice, struct); virtioScsiIndex++; addDevice(struct, vmDevice, null); } }	@java.lang.Override public void buildVmVirtioScsi() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.VIRTIOSCSI.getName()); java.util.Map<org.ovirt.engine.core.common.businessentities.storage.DiskInterface, java.lang.Integer> controllerIndexMap = org.ovirt.engine.core.utils.archstrategy.ArchStrategyFactory.getStrategy(vm.getClusterArch()).run(new org.ovirt.engine.core.vdsbroker.architecture.GetControllerIndices()).returnValue(); int virtioScsiIndex = controllerIndexMap.get(DiskInterface.VirtIO_SCSI); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, VmDeviceGeneralType.CONTROLLER.getValue()); struct.put(VdsProperties.Device, VdsProperties.Scsi); struct.put(VdsProperties.Model, VdsProperties.VirtioScsi); struct.put(VdsProperties.Index, java.lang.Integer.toString(virtioScsiIndex)); vmInfoBuildUtils.addAddress(vmDevice, struct); virtioScsiIndex++; addDevice(struct, vmDevice, null); } }
public void addProfileDataToNic(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.common.businessentities.network.VmNic nic) { org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = null; org.ovirt.engine.core.common.businessentities.network.Network network = null; java.lang.String networkName = ""; java.util.List<org.ovirt.engine.core.vdsbroker.<START_MOD>builder.vminfo<END_MOD>.VnicProfileProperties> unsupportedFeatures = new java.util.ArrayList<>(); if ((nic.getVnicProfileId()) != null) { vnicProfile = vnicProfileDao.get(nic.getVnicProfileId()); if (vnicProfile != null) { network = networkDao.get(vnicProfile.getNetworkId()); networkName = network.getName(); <START_MOD>org.ovirt.engine.core.vdsbroker.builder.vminfo.VmInfoBuildHelper.LOGGER<END_MOD>.debug( '{}' is using profile '{}' on network '{}' nic.getName(), vnicProfile, networkName); addQosForDevice(struct, vnicProfile); } } struct.put(VdsProperties.NETWORK, networkName); addPortMirroringToVmInterface(struct, vnicProfile, network); addCustomPropertiesForDevice(struct, vm, vmDevice, <START_MOD>getVnicCustomProperties(vnicProfile)); reportUnsupportedVnicProfileFeatures(<END_MOD>vm, nic, vnicProfile, unsupportedFeatures); }	public void addProfileDataToNic(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.common.businessentities.network.VmNic nic) { org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = null; org.ovirt.engine.core.common.businessentities.network.Network network = null; java.lang.String networkName = ""; java.util.List<org.ovirt.engine.core.vdsbroker.builder.vminfo.VnicProfileProperties> unsupportedFeatures = new java.util.ArrayList<>(); if ((nic.getVnicProfileId()) != null) { vnicProfile = vnicProfileDao.get(nic.getVnicProfileId()); if (vnicProfile != null) { network = networkDao.get(vnicProfile.getNetworkId()); networkName = network.getName(); org.ovirt.engine.core.vdsbroker.builder.vminfo.VmInfoBuildUtils.log.debug("VNIC '{}' is using profile '{}' on network '{}'", nic.getName(), vnicProfile, networkName); addQosForDevice(struct, vnicProfile); } } struct.put(VdsProperties.NETWORK, networkName); addPortMirroringToVmInterface(struct, vnicProfile, network); addCustomPropertiesForDevice(struct, vm, vmDevice, getVnicCustomProperties(vnicProfile)); reportUnsupportedVnicProfileFeatures(vm, nic, vnicProfile, unsupportedFeatures); }
org.ovirt.engine.core.common.businessentities.VmDevice getVmDeviceByDiskId(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid vmId) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDeviceDao().get(new org.ovirt.engine.core.common.businessentities.VmDeviceId(diskId, vmId)); }	org.ovirt.engine.core.common.businessentities.VmDevice getVmDeviceByDiskId(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid vmId) { return vmDeviceDao.get(new org.ovirt.engine.core.common.businessentities.VmDeviceId(diskId, vmId)); }
boolean isFirstMasterController(java.lang.String model) { return model.equalsIgnoreCase(org.ovirt.engine.core.vdsbroker.<START_MOD>builder.vminfo<END_MOD>.VmInfoBuildHelper.FIRST_MASTER_MODEL); }	boolean isFirstMasterController(java.lang.String model) { return model.equalsIgnoreCase(org.ovirt.engine.core.vdsbroker.builder.vminfo.VmInfoBuildUtils.FIRST_MASTER_MODEL); }
@java.lang.Override <START_MOD>public<END_MOD> void buildVmVirtioSerial() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.VIRTIOSERIAL.getName()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, VmDeviceGeneralType.CONTROLLER.getValue()); struct.put(VdsProperties.Device, VdsProperties.VirtioSerial); <START_MOD>vmInfoBuildHelper<END_MOD>.addAddress(vmDevice, struct); addDevice(struct, vmDevice, null); } }	@java.lang.Override public void buildVmVirtioSerial() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.VIRTIOSERIAL.getName()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, VmDeviceGeneralType.CONTROLLER.getValue()); struct.put(VdsProperties.Device, VdsProperties.VirtioSerial); vmInfoBuildUtils.addAddress(vmDevice, struct); addDevice(struct, vmDevice, null); } }
private void buildVmUsbSlots() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.REDIR, VmDeviceType.SPICEVMC.getName()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<START_MOD><java.lang.String, java.lang.Object><END_MOD> struct = new java.util.HashMap<START_MOD><><END_MOD>(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); struct.put(VdsProperties.Bus, org.ovirt.engine.core.vdsbroker.<START_MOD>builder.vminfo.VmInfoBuilderImpl<END_MOD>.USB_BUS); struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); <START_MOD>vmInfoBuildHelper<END_MOD>.addAddress(vmDevice, struct); devices.add(struct); } }	private void buildVmUsbSlots() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.REDIR, VmDeviceType.SPICEVMC.getName()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); struct.put(VdsProperties.Bus, org.ovirt.engine.core.vdsbroker.builder.vminfo.VmInfoBuilderImpl.USB_BUS); struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); vmInfoBuildUtils.addAddress(vmDevice, struct); devices.add(struct); } }
private void addNetworkInterfaceProperties(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VmNic vmInterface, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.lang.String nicModel) { struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); struct.put(VdsProperties.LINK_ACTIVE, java.lang.String.valueOf(vmInterface.isLinked())); <START_MOD>vmInfoBuildHelper<END_MOD>.addAddress(vmDevice, struct); struct.put(VdsProperties.MAC_ADDR, vmInterface.getMacAddress()); vmInfoBuildHelper.addBootOrder(vmDevice, struct); struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); struct.put(VdsProperties.NIC_TYPE, nicModel); vmInfoBuildHelper.addProfileDataToNic(struct, vm, vmDevice, vmInterface); vmInfoBuildHelper.addNetworkFiltersToNic(struct, vmInterface); }	private void addNetworkInterfaceProperties(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VmNic vmInterface, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.lang.String nicModel) { struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); struct.put(VdsProperties.LINK_ACTIVE, java.lang.String.valueOf(vmInterface.isLinked())); vmInfoBuildUtils.addAddress(vmDevice, struct); struct.put(VdsProperties.MAC_ADDR, vmInterface.getMacAddress()); vmInfoBuildUtils.addBootOrder(vmDevice, struct); struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); struct.put(VdsProperties.NIC_TYPE, nicModel); vmInfoBuildUtils.addProfileDataToNic(struct, vm, vmDevice, vmInterface); vmInfoBuildUtils.addNetworkFiltersToNic(struct, vmInterface); }
java.lang.String CLUSTER_VERSION_CANT_BE_CHANGED_BECAUSE_FOLLOWING_VMS_ARE_MIGRATING();	java.lang.String ACTION_TYPE_FAILED_CLUSTER_IS_BEING_UPDATED();
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.<START_MOD>compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getParentCommand()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand<END_MOD>(VDSCommandType.<START_MOD>CreateSnapshot, getCreateVDSCommandParameters()); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().setEntityInfo(<END_MOD>new org.ovirt.engine.core.common.<START_MOD>asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getImageGroupID())); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().setVdsmTaskIds(new java.util.ArrayList()); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getVdsmTaskIds().add(createTask(taskId, vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getParentCommand(), VdcObjectType.Storage, <END_MOD>org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getStorageDomainId()<START_MOD>)); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getTaskIdList().add(org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getVdsmTaskIds().get(0)<END_MOD>); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.setSucceeded(true); }<START_MOD> }<END_MOD>	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getParentCommand()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.CreateSnapshot, getCreateVDSCommandParameters()); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().setVdsmTaskIds(new java.util.ArrayList()); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getVdsmTaskIds().add(createTask(taskId, vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getTaskIdList().add(org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getVdsmTaskIds().get(0)); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.setSucceeded(true); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (ev.matchesDefinition(HasEntity.entityChangedEventDefinition)) { if (((sender == (getImageSourceLocalEnabled())) || (sender == (getImagePath()))) || (sender == (getImageUri()))) { recalculateImageDerivedFields(); } } <START_MOD>else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) { if ((sender == (getDiskModel().getStorageDomain())) || (sender == (getDiskModel().getVolumeType()))) { updateVolumeType(); } } }<END_MOD>	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) { if ((sender == (getDiskModel().getStorageDomain())) || (sender == (getDiskModel().getVolumeType()))) { updateVolumeType(); } } }
public org.ovirt.engine.core.bll.ValidationResult validateProfileNotEmptyForHostedEngineVm(org.ovirt.engine.core.common.businessentities.VM vm) { if ((vm.isHostedEngine()) && ((nic.getVnicProfileId()) == null)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.HOSTED_ENGINE_VM_CANNOT_HAVE_NIC_WITH_EMPTY_PROFILE); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult validateProfileNotEmptyForHostedEngineVm(org.ovirt.engine.core.common.businessentities.VM vm) { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.HOSTED_ENGINE_VM_CANNOT_HAVE_NIC_WITH_EMPTY_PROFILE).when(((vm.isHostedEngine()) && ((nic.getVnicProfileId()) == null))); }
private void liveUpdateCpuProfile() { if ((org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus().isQualifiedForQosChange()) && (oldVm.getCpuProfileId().equals(newVmStatic.getCpuProfileId()))) { vmSlaPolicyUtils.refreshCpuQosOfRunningVm(org.ovirt.engine.core.bll.UpdateVmCommand.getVm()); } }	private void liveUpdateCpuProfile() { if ((org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus().isQualifiedForQosChange()) && (!(oldVm.getCpuProfileId().equals(newVmStatic.getCpuProfileId())))) { vmSlaPolicyUtils.refreshCpuQosOfRunningVm(org.ovirt.engine.core.bll.UpdateVmCommand.getVm()); } }
private java.util.List<org.ovirt.engine.core.common.businessentities.VM> searchVmsFromDb() { org.ovirt.engine.core.aaa.QueryData data = initQueryData(true); if (data == null) { return java.util.Collections.emptyList(); } java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.bll.SearchQuery.getDbFacade().getVmDao().getAllUsingQuery(data.getQuery()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(vm); org.ovirt.engine.core.bll.VmHandler.updateVmLock(vm); } return vms; }	private java.util.List<org.ovirt.engine.core.common.businessentities.VM> searchVmsFromDb() { org.ovirt.engine.core.aaa.QueryData data = initQueryData(true); if (data == null) { return java.util.Collections.emptyList(); } java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.bll.SearchQuery.getDbFacade().getVmDao().getAllUsingQuery(data.getQuery()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(vm); org.ovirt.engine.core.bll.VmHandler.updateVmLock(vm); org.ovirt.engine.core.bll.VmHandler.updateOperationProgress(vm); } return vms; }
private org.ovirt.engine.core.common.queries.SearchParameters getSearchParameters(org.ovirt.engine.core.common.interfaces.SearchType searchType, java.lang.String constraint) { org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters(constraint, searchType); boolean caseSensitive = org.ovirt.engine.api.common.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource.CASE_SENSITIVE_CONSTRAINT_PARAMETER, true, false); int from = org.ovirt.engine.api.common.util.ParametersHelper.getIntegerParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource.FROM_CONSTRAINT_PARAMETER, (-1), (-1)); int max = org.ovirt.engine.api.common.util.ParametersHelper.getIntegerParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.MAX, <START_MOD>java.lang.Integer.MAX_VALUE, java.lang.Integer.MAX_VALUE); searchParams.setCaseSensitive(caseSensitive); if (from != <END_MOD>(-1)<START_MOD>) { searchParams.setSearchFrom(from); }<END_MOD> if (<START_MOD>max<END_MOD> != (<START_MOD>java.lang.Integer.MAX_VALUE<END_MOD>)) { searchParams.<START_MOD>setMaxCount(max<END_MOD>); } <START_MOD>return searchParams<END_MOD>; }	private org.ovirt.engine.core.common.queries.SearchParameters getSearchParameters(org.ovirt.engine.core.common.interfaces.SearchType searchType, java.lang.String constraint) { org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters(constraint, searchType); boolean caseSensitive = org.ovirt.engine.api.common.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource.CASE_SENSITIVE_CONSTRAINT_PARAMETER, true, false); int from = org.ovirt.engine.api.common.util.ParametersHelper.getIntegerParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource.FROM_CONSTRAINT_PARAMETER, (-1), (-1)); int max = org.ovirt.engine.api.common.util.ParametersHelper.getIntegerParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.MAX, java.lang.Integer.MAX_VALUE, java.lang.Integer.MAX_VALUE); searchParams.setCaseSensitive(caseSensitive); if (from != (-1)) { searchParams.setSearchFrom(from); } searchParams.setMaxCount(max); return searchParams; }
public void refreshNetworks(java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networksToRefresh) { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = createPersistentHostSetupNetworksParameters(networksToRefresh); if (!(parameters.isEmpty())) { org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(parameters); runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, parameters); } }	protected void refreshNetworks(java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters) { if (!(parameters.isEmpty())) { org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(parameters); runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, parameters); } }
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networksHavingQosToBeRemoved = networkDao.getAllForQos(getQosId()); super.executeCommand(); new org.ovirt.engine.core.bll.qos.RefreshNetworksHavingGivenQos(networkDao, vdsDao, networkAttachmentDao).refreshNetworks(networksHavingQosToBeRemoved); }	@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networksHavingQos = networkDao.getAllForQos(getQosId()); super.executeCommand(); refreshNetworks(refreshNetworksParametersFactory.create(networksHavingQos)); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid qosId = getQosId(); org.ovirt.engine.core.common.businessentities.network.HostNetworkQos oldQos = getQosDao().get(qosId); org.ovirt.engine.core.common.businessentities.network.HostNetworkQos newQos = getQos(); super.executeCommand(); if (networkUpdateRequired(oldQos, newQos)) { <START_MOD>new org.ovirt.engine.core.bll.qos.RefreshNetworksHavingGivenQos<END_MOD>(<START_MOD>networkDao, vdsDao, networkAttachmentDao).refreshNetworks(getQosId()<END_MOD>); } }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid qosId = getQosId(); org.ovirt.engine.core.common.businessentities.network.HostNetworkQos oldQos = getQosDao().get(qosId); org.ovirt.engine.core.common.businessentities.network.HostNetworkQos newQos = getQos(); super.executeCommand(); if (networkUpdateRequired(oldQos, newQos)) { refreshNetworks(refreshNetworksParametersFactory.create(qosId)); } }
void detachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().remove(alertPanel); <START_MOD>alertPanel.resetCount(); <END_MOD>}	void detachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().remove(alertPanel); }
public void refreshRunningVmsWithNewDiskProfile(org.ovirt.engine.core.compat.Guid diskProfileId) { refreshVmsStorageQos(getRunningVmDiskImageMapWithProfiles(java.util.Collections.singleton(diskProfileId)), storageQosDao.getQosByDiskProfileId(diskProfileId)); }	public void refreshRunningVmsWithDiskProfile(org.ovirt.engine.core.compat.Guid diskProfileId) { refreshVmsStorageQos(getRunningVmDiskImageMapWithProfiles(java.util.Collections.singleton(diskProfileId)), storageQosDao.getQosByDiskProfileId(diskProfileId)); }
@org.ovirt.engine.ui.common.Template( '&lthostname&gt' with the hostname of the Xen hypervisor in the libvirt URI. <br /> + (( SSH transport is allowed for Xen import and the connection has to be without password. <br /> <br /> +   disable SSH host key verification add 'no_verify' parameter to the URI,   +   xen+ssh: com.google.gwt.safehtml.shared.SafeHtml xenUriInfo();	@org.ovirt.engine.ui.common.Template("<i>Replace '&lthostname&gt' with the hostname of the Xen hypervisor in the libvirt URI. <br />" + (("Only SSH transport is allowed for Xen import and the connection has to be without password. <br /> <br />" + "To disable SSH host key verification add 'no_verify' parameter to the URI, ") + "i.e.: xen+ssh://root@xen.example.com?<br>no_verify=1</i>")) com.google.gwt.safehtml.shared.SafeHtml xenUriInfo();
@org.junit.Test public void testUpdateWithNonGuidId() { try { javax.ws.rs.core.UriInfo uriInfo = mockUri("vms", "00000001-0001-0001-0001-000000000011", "disks", "116"); javax.ws.rs.core.Request request = mockRequest("PUT"); control.replay(); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("For correct usage, see: http://localhost:8080/ovirt-engine/api/model#services/vm-disk/methods/update", fault.getDetail()); } catch (java.net.URISyntaxException | java.lang.ClassNotFoundException | java.io.IOException e) { fail(); } }	@org.junit.Test public void testUpdateWithNonGuidId() { try { javax.ws.rs.core.UriInfo uriInfo = mockUri("hosts", "00000001-0001-0001-0001-000000000011", "nics", "116"); javax.ws.rs.core.Request request = mockRequest("PUT"); control.replay(); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("For correct usage, see: http://localhost:8080/ovirt-engine/api/model#services/host-nic/methods/update", fault.getDetail()); } catch (java.net.URISyntaxException | java.lang.ClassNotFoundException | java.io.IOException e) { fail(); } }
@org.junit.Test public void testAdd() { try { javax.ws.rs.core.UriInfo uriInfo = mockUri("vms", "00000001-0001-0001-0001-000000000011", "disks"); javax.ws.rs.core.Request request = mockRequest("POST"); control.replay(); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("For correct usage, see: http://localhost:8080/ovirt-engine/api/model#services/vm-disks/methods/add", fault.getDetail()); } catch (java.lang.ClassNotFoundException | java.io.IOException | java.net.URISyntaxException e) { fail(); } }	@org.junit.Test public void testAdd() { try { javax.ws.rs.core.UriInfo uriInfo = mockUri("hosts", "00000001-0001-0001-0001-000000000011", "nics"); javax.ws.rs.core.Request request = mockRequest("POST"); control.replay(); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("For correct usage, see: http://localhost:8080/ovirt-engine/api/model#services/host-nics/methods/add", fault.getDetail()); } catch (java.lang.ClassNotFoundException | java.io.IOException | java.net.URISyntaxException e) { fail(); } }
protected java.util.List<? extends java.util.Comparator<org.ovirt.engine.core.common.businessentities.StorageDomain>> getStorageDomainComparators(java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> vmDisks) { return java.util.Arrays.asList(new org.ovirt.engine.core.bll.memory.sdcomparators.StorageDomainNumberOfVmDisksComparator(vmDisks), new org.ovirt.engine.core.bll.memory.sdcomparators.<START_MOD>StorageTypeLocalLastComparator<END_MOD>(), new org.ovirt.engine.core.bll.memory.sdcomparators.<START_MOD>StorageTypeBlockLastComparator<END_MOD>(), new org.ovirt.engine.core.bll.memory.sdcomparators.StorageDomainAvailableDiskSizeComparator()); }	protected java.util.List<? extends java.util.Comparator<org.ovirt.engine.core.common.businessentities.StorageDomain>> getStorageDomainComparators(java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> vmDisks) { return java.util.Arrays.asList(new org.ovirt.engine.core.bll.memory.sdcomparators.StorageDomainNumberOfVmDisksComparator(vmDisks), new org.ovirt.engine.core.bll.memory.sdcomparators.StorageTypeSharedFirstComparator(), new org.ovirt.engine.core.bll.memory.sdcomparators.StorageTypeFileFirstComparator(), new org.ovirt.engine.core.bll.memory.sdcomparators.StorageDomainAvailableDiskSizeComparator()); }
@org.junit.experimental.theories.Theory public void testCompare(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType) { storageDomain1.setStorageType(storageType); for (org.ovirt.engine.core.common.businessentities.storage.StorageType storageType2 : org.ovirt.engine.core.common.businessentities.storage.StorageType.values()) { storageDomain2.setStorageType(storageType2); int compareTypes = java.lang.Boolean.compare(storageType.<START_MOD>isBlockDomain<END_MOD>(), storageType2.<START_MOD>isBlockDomain<END_MOD>()); int comparatorReturnValue = comparator.compare(storageDomain1, storageDomain2); assertEquals((compareTypes < 0), (comparatorReturnValue < 0)); assertEquals((compareTypes == 0), (comparatorReturnValue == 0)); assertEquals((compareTypes > 0), (comparatorReturnValue > 0)); } }	@org.junit.experimental.theories.Theory public void testCompare(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType) { storageDomain1.setStorageType(storageType); for (org.ovirt.engine.core.common.businessentities.storage.StorageType storageType2 : org.ovirt.engine.core.common.businessentities.storage.StorageType.values()) { storageDomain2.setStorageType(storageType2); int compareTypes = (-1) * (java.lang.Boolean.compare(storageType.isFileDomain(), storageType2.isFileDomain())); int comparatorReturnValue = comparator.compare(storageDomain1, storageDomain2); assertEquals((compareTypes < 0), (comparatorReturnValue < 0)); assertEquals((compareTypes == 0), (comparatorReturnValue == 0)); assertEquals((compareTypes > 0), (comparatorReturnValue > 0)); } }
@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain, org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain2) { return java.lang.Boolean.compare(storageDomain.<START_MOD>isLocal<END_MOD>(), storageDomain2.<START_MOD>isLocal<END_MOD>()); }	@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain, org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain2) { return (-1) * (java.lang.Boolean.compare(storageDomain.isShared(), storageDomain2.isShared())); }
protected java.util.List<? extends java.util.Comparator<org.ovirt.engine.core.common.businessentities.StorageDomain>> getStorageDomainComparators(java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> vmDisks) { return java.util.Arrays.asList(new org.ovirt.engine.core.bll.memory.sdcomparators.StorageDomainNumberOfVmDisksComparator(vmDisks), <START_MOD>org.ovirt.engine.core.bll.memory.MemoryStorageHandler.LOCAL_LAST_COMPARATOR,<END_MOD> org.ovirt.engine.core.bll.memory.<START_MOD>MemoryStorageHandler<END_MOD>.<START_MOD>BLOCK_LAST_COMPARATOR<END_MOD>, org.ovirt.engine.core.bll.memory.<START_MOD>MemoryStorageHandler<END_MOD>.<START_MOD>AVAILABLE_SIZE_COMPARATOR<END_MOD>); }	protected java.util.List<? extends java.util.Comparator<org.ovirt.engine.core.common.businessentities.StorageDomain>> getStorageDomainComparators(java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> vmDisks) { return java.util.Arrays.asList(new org.ovirt.engine.core.bll.memory.sdcomparators.StorageDomainNumberOfVmDisksComparator(vmDisks), org.ovirt.engine.core.bll.memory.MemoryStorageHandler.SHARED_FIRST_COMPARATOR, org.ovirt.engine.core.bll.memory.MemoryStorageHandler.FILE_FIRST_COMPARATOR, org.ovirt.engine.core.bll.memory.MemoryStorageHandler.AVAILABLE_SIZE_COMPARATOR); }
private void resetVmInterfaceStatistics() { loadVmNetworkInterfaces(); ifaces.stream().map(VmNetworkInterface::getStatistics).forEach(VmNetworkStatistics::resetVmStatistics); }	protected void resetVmInterfaceStatistics() { loadVmNetworkInterfaces(); ifaces.stream().map(VmNetworkInterface::getStatistics).forEach(VmNetworkStatistics::resetVmStatistics); }
public java.lang.String getArchitectureType() { return architectureType; }	public org.ovirt.vdsmfake.AppConfig.ArchitectureType getArchitectureType() { return architectureType; }
public void init(java.util.Map<java.lang.String, java.lang.String> paramMap) { constantDelay = org.ovirt.vdsmfake.Utils.getLong(paramMap.get("constantDelay")); randomDelay = org.ovirt.vdsmfake.Utils.getLong(paramMap.get("randomDelay")); networkLoad = org.ovirt.vdsmfake.Utils.splitString(paramMap.get("networkLoad")); cpuLoadList = org.ovirt.vdsmfake.Utils.splitString(paramMap.get("cpuLoad")); memLoad = org.ovirt.vdsmfake.Utils.splitString(paramMap.get("memLoad")); storageDelay = org.ovirt.vdsmfake.Utils.splitString(paramMap.get("storageDelay")); networkBridgeName = paramMap.get("networkBridgeName"); cacheDir = paramMap.get("cacheDir"); logDir = ((paramMap.get("logDir")) + "/") + (java.lang.System.currentTimeMillis()); forwardVdsmServer = paramMap.get("forwardVdsmServer"); vdsmPort = paramMap.get("vdsmPort"); vmConfAndStatsConstants = paramMap.get("vmConfAndStatsConstants"); vmConfAndStatsUpdateIntervals = paramMap.get("vmConfAndStatsUpdateIntervals"); jsonHandlersThreadsPool = java.lang.Integer.valueOf(paramMap.get("jsonHandlersThreadsPool")<START_MOD>); architectureType = paramMap.get("architectureType"<END_MOD>); final java.lang.String notLoggedMethods = paramMap.get("notLoggedMethods"); if ((notLoggedMethods != null) && ((notLoggedMethods.trim().length()) > 0)) { final java.lang.String[] methodNames = notLoggedMethods.split(","); for (java.lang.String methodName : methodNames) { notLoggedMethodSet.add(methodName.trim()); } } makeDir(cacheDir); makeDir(logDir); if (isProxyActive()) { targetServerUrl = (((getForwardVdsmServer()) + ":") + (getVdsmPort())) + "/"; } }	public void init(java.util.Map<java.lang.String, java.lang.String> paramMap) { constantDelay = org.ovirt.vdsmfake.Utils.getLong(paramMap.get("constantDelay")); randomDelay = org.ovirt.vdsmfake.Utils.getLong(paramMap.get("randomDelay")); networkLoad = org.ovirt.vdsmfake.Utils.splitString(paramMap.get("networkLoad")); cpuLoadList = org.ovirt.vdsmfake.Utils.splitString(paramMap.get("cpuLoad")); memLoad = org.ovirt.vdsmfake.Utils.splitString(paramMap.get("memLoad")); storageDelay = org.ovirt.vdsmfake.Utils.splitString(paramMap.get("storageDelay")); networkBridgeName = paramMap.get("networkBridgeName"); cacheDir = paramMap.get("cacheDir"); logDir = ((paramMap.get("logDir")) + "/") + (java.lang.System.currentTimeMillis()); forwardVdsmServer = paramMap.get("forwardVdsmServer"); vdsmPort = paramMap.get("vdsmPort"); vmConfAndStatsConstants = paramMap.get("vmConfAndStatsConstants"); vmConfAndStatsUpdateIntervals = paramMap.get("vmConfAndStatsUpdateIntervals"); jsonHandlersThreadsPool = java.lang.Integer.valueOf(paramMap.get("jsonHandlersThreadsPool")); architectureType = org.ovirt.vdsmfake.AppConfig.ArchitectureType.valueOf(paramMap.get("architectureType").toUpperCase()); final java.lang.String notLoggedMethods = paramMap.get("notLoggedMethods"); if ((notLoggedMethods != null) && ((notLoggedMethods.trim().length()) > 0)) { final java.lang.String[] methodNames = notLoggedMethods.split(","); for (java.lang.String methodName : methodNames) { notLoggedMethodSet.add(methodName.trim()); } } makeDir(cacheDir); makeDir(logDir); if (isProxyActive()) { targetServerUrl = (((getForwardVdsmServer()) + ":") + (getVdsmPort())) + "/"; } }
@java.lang.Override public void onTabAccessibleChange(org.ovirt.engine.ui.common.widget.tab.TabAccessibleChangeEvent event) { <START_MOD>if (!(scheduled)) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { <END_MOD>getView().recalculateSize(); getView().showScrollButtons(); <START_MOD>scheduled = false; <END_MOD>}<START_MOD> }); scheduled = true; } }<END_MOD>	@java.lang.Override public void onTabAccessibleChange(org.ovirt.engine.ui.common.widget.tab.TabAccessibleChangeEvent event) { onTabAccessibleChanged(); }
@java.lang.Override public void onSetDynamicTabAccessible(org.ovirt.engine.ui.common.presenter.SetDynamicTabAccessibleEvent event) { if (!(scheduled)) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { getView().recalculateSize(); getView().showScrollButtons(); scheduled = false; } }); scheduled = true; } }	@java.lang.Override public void onSetDynamicTabAccessible(org.ovirt.engine.ui.common.presenter.SetDynamicTabAccessibleEvent event) { onTabAccessibleChanged(); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.userportal.section.main.presenter.tab.extended.vm.ExtendedVmSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.userportal.uicommon.model.UserPortalDetailModelProvider<org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel, org.ovirt.engine.ui.uicommonweb.models.vms.<START_MOD>UserPortalGuestInfoModel<END_MOD>> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.userportal.section.main.presenter.tab.extended.vm.SubTabExtendedVmGuestInfoPresenter.constants.extendedVirtualMachineGuestInfoSubTabLabel(), 11, modelProvider); }	@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.userportal.section.main.presenter.tab.extended.vm.ExtendedVmSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.userportal.uicommon.model.UserPortalDetailModelProvider<org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel, org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.userportal.section.main.presenter.tab.extended.vm.SubTabExtendedVmGuestInfoPresenter.constants.extendedVirtualMachineGuestInfoSubTabLabel(), 11, modelProvider); }
<START_MOD>@java.lang.Override protected<END_MOD> void updateProperties() { <START_MOD>updatePropertiesFromVm(<END_MOD>getEntity()); }	private void updateProperties() { java.lang.Object entity = getEntity(); if (!(entity instanceof org.ovirt.engine.core.common.businessentities.VM)) { return; } org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (entity)); setClientIp(vm.getClientIp()); setConsoleUserName((!(org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(vm.getClientIp())) ? vm.getConsoleCurentUserName() : null)); setGuestUserName(vm.getGuestCurentUserName()); setGuestOs(vm.getGuestOs()); setGuestOsArch(vm.getGuestOsArch()); setGuestOsCodename(vm.getGuestOsCodename()); setGuestOsDistribution(vm.getGuestOsDistribution()); setGuestOsKernelVersion(vm.getGuestOsKernelVersion()); setGuestOsType(vm.getGuestOsType()); setGuestOsVersion(vm.getGuestOsVersion()); setGuestOsTimezoneName(vm.getGuestOsTimezoneName()); setGuestOsTimezoneOffset(vm.getGuestOsTimezoneOffset()); setGuestOsNamedVersion(); java.lang.String hours = com.google.gwt.i18n.client.NumberFormat.getFormat("00").format(((guestOsTimezoneOffset) / 60.0)); java.lang.String minutes = com.google.gwt.i18n.client.NumberFormat.getFormat("00").format(((guestOsTimezoneOffset) % 60)); if ((guestOsTimezoneOffset) >= 0) { guestOsTimezone = org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel.messages.positiveTimezoneOffset(guestOsTimezoneName, hours, minutes); } else { guestOsTimezone = org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel.messages.negativeTimezoneOffset(guestOsTimezoneName, hours, minutes); } }
org.ovirt.engine.ui.userportal.uicommon.model.UserPortalDetailModelProvider<org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel, org.ovirt.engine.ui.uicommonweb.models.vms.<START_MOD>UserPortalGuestInfoModel<END_MOD>> <START_MOD>getUserPortalGuestInfoModelProvider<END_MOD>();	org.ovirt.engine.ui.userportal.uicommon.model.UserPortalDetailModelProvider<org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel, org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel> getVmGuestInfoModelProvider();
<START_MOD>@org.ovirt.engine.ui.common.widget.uicommon.vm.Ignore <END_MOD>@java.lang.Override protected <START_MOD>com.google.gwt.editor.client.SimpleBeanEditorDriver<<END_MOD>org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel<START_MOD>,<END_MOD> <START_MOD>org.ovirt.engine.ui.common.widget.uicommon.vm.VmGuestInfoModelForm> getDriver(<END_MOD>) { <START_MOD>return <END_MOD>driver; }	@java.lang.Override protected void doEdit(org.ovirt.engine.ui.uicommonweb.models.vms.VmGuestInfoModel model) { driver.edit(model); }
private void setDetailList() { vmGeneralModel.setIsAvailable(false); vmSnapshotListModel.setIsAvailable(false); vmMonitorModel.setIsAvailable(false); vmDiskListModel.setIsAvailable(false); vmInterfaceListModel.setIsAvailable(false); poolGeneralModel.setIsAvailable(false); poolDiskListModel.setIsAvailable(false); poolInterfaceListModel.setIsAvailable(false); permissionListModel.setIsAvailable(true); vmEventListModel.setIsAvailable(true); vmAppListModel.setIsAvailable(true); <START_MOD>userPortalGuestInfoModel<END_MOD>.setIsAvailable(true); vmGuestContainerListModel.setIsAvailable(true); java.util.List<org.ovirt.engine.ui.uicommonweb.models.HasEntity<?>> list = new java.util.ArrayList<>(); list.add(vmGeneralModel); list.add(poolGeneralModel); list.add(vmInterfaceListModel); list.add(poolInterfaceListModel); list.add(vmDiskListModel); list.add(poolDiskListModel); list.add(vmSnapshotListModel); list.add(permissionListModel); list.add(vmEventListModel); list.add(vmAppListModel); list.add(vmMonitorModel); list.add(<START_MOD>userPortalGuestInfoModel<END_MOD>); list.add(vmGuestContainerListModel); setDetailModels(((java.util.List) (list))); }	private void setDetailList() { vmGeneralModel.setIsAvailable(false); vmSnapshotListModel.setIsAvailable(false); vmMonitorModel.setIsAvailable(false); vmDiskListModel.setIsAvailable(false); vmInterfaceListModel.setIsAvailable(false); poolGeneralModel.setIsAvailable(false); poolDiskListModel.setIsAvailable(false); poolInterfaceListModel.setIsAvailable(false); permissionListModel.setIsAvailable(true); vmEventListModel.setIsAvailable(true); vmAppListModel.setIsAvailable(true); vmGuestInfoModel.setIsAvailable(true); vmGuestContainerListModel.setIsAvailable(true); java.util.List<org.ovirt.engine.ui.uicommonweb.models.HasEntity<?>> list = new java.util.ArrayList<>(); list.add(vmGeneralModel); list.add(poolGeneralModel); list.add(vmInterfaceListModel); list.add(poolInterfaceListModel); list.add(vmDiskListModel); list.add(poolDiskListModel); list.add(vmSnapshotListModel); list.add(permissionListModel); list.add(vmEventListModel); list.add(vmAppListModel); list.add(vmMonitorModel); list.add(vmGuestInfoModel); list.add(vmGuestContainerListModel); setDetailModels(((java.util.List) (list))); }
@java.lang.Override public java.lang.<START_MOD>Boolean<END_MOD> convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return (source != null) && (!((java.lang.Boolean) (source))); }	@java.lang.Override public java.lang.Boolean convert(java.lang.Object source) { return (source != null) && (!((java.lang.Boolean) (source))); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.Cluster> <END_MOD>clusters<START_MOD>) {<END_MOD> java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenterWithCluster = new java.util.ArrayList<>(); <START_MOD>for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { for (<END_MOD>org.ovirt.engine.core.common.businessentities.Cluster<START_MOD> cluster :<END_MOD> clusters<START_MOD>) { if (((cluster.getStoragePoolId()) != null) && (cluster.getStoragePoolId().equals(<END_MOD>dataCenter<START_MOD>.getId()))) { localDataCenterWithCluster.add(dataCenter); break; } } }<END_MOD> localDataCenters<START_MOD>.removeAll(<END_MOD>localDataCenterWithCluster<START_MOD>); updateOptionsRequiredAddDataCenter((!(<END_MOD>localDataCenters.isEmpty()))); }	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters) { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenterWithCluster = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if (((cluster.getStoragePoolId()) != null) && (cluster.getStoragePoolId().equals(dataCenter.getId()))) { localDataCenterWithCluster.add(dataCenter); break; } } } localDataCenters.removeAll(localDataCenterWithCluster); updateOptionsRequiredAddDataCenter((!(localDataCenters.isEmpty()))); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters<END_MOD>) { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenterWithCluster = new java.util.ArrayList<>(); <START_MOD>for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { for (<END_MOD>org.ovirt.engine.core.common.businessentities.Cluster<START_MOD> cluster :<END_MOD> clusters<START_MOD>) { if (((cluster.getStoragePoolId()) != null) && (cluster.getStoragePoolId().equals(dataCenter.getId()))) { localDataCenterWithCluster.add(dataCenter); break; } } } localDataCenters.removeAll(localDataCenterWithCluster<END_MOD>); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { <START_MOD>filteredDataCenters<END_MOD>.add(<START_MOD>new org.ovirt.engine.ui.uicommonweb.models.EntityModel(dataCenter)); } displayAddDataCenter(<END_MOD>filteredDataCenters<START_MOD>); }<END_MOD>	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters) { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenterWithCluster = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if (((cluster.getStoragePoolId()) != null) && (cluster.getStoragePoolId().equals(dataCenter.getId()))) { localDataCenterWithCluster.add(dataCenter); break; } } } localDataCenters.removeAll(localDataCenterWithCluster); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { filteredDataCenters.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(dataCenter)); } displayAddDataCenter(filteredDataCenters); }
public void updateAll() { final org.ovirt.engine.core.compat.Guid selectedInstanceTypeId = getSelectedInstanceTypeId(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllInstanceTypes, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { <START_MOD>if (<END_MOD>(returnValue == null) || (!(<START_MOD>returnValue<END_MOD>.getSucceeded()))) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.InstanceType> instanceTypes = new java.util.ArrayList<>(); if (!(getModel().isCreateInstanceOnly())) { instanceTypes.add(CustomInstanceType.INSTANCE); } for (org.ovirt.engine.core.common.businessentities.InstanceType instanceType : ((java.lang.Iterable<org.ovirt.engine.core.common.businessentities.InstanceType>) (<START_MOD>returnValue<END_MOD>.getReturnValue()))) { instanceTypes.add(instanceType); } getModel().getInstanceTypes().setItems(instanceTypes); for (org.ovirt.engine.core.common.businessentities.InstanceType instanceType : instanceTypes) { if ((instanceType instanceof org.ovirt.engine.ui.uicommonweb.models.vms.CustomInstanceType) && (selectedInstanceTypeId == null)) { getModel().getInstanceTypes().setSelectedItem(CustomInstanceType.INSTANCE); break; } if (((instanceType.getId()) == null) || (selectedInstanceTypeId == null)) { continue; } if (instanceType.getId().equals(selectedInstanceTypeId)) { getModel().getInstanceTypes().setSelectedItem(instanceType); break; } } if ((getModel().getInstanceTypes().getSelectedItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.CustomInstanceType) { getModel().getAttachedToInstanceType().setEntity(false); } updateFields(); } })); }	public void updateAll() { final org.ovirt.engine.core.compat.Guid selectedInstanceTypeId = getSelectedInstanceTypeId(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllInstanceTypes, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if ((returnValue == null) || (!(returnValue.getSucceeded()))) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.InstanceType> instanceTypes = new java.util.ArrayList<>(); if (!(getModel().isCreateInstanceOnly())) { instanceTypes.add(CustomInstanceType.INSTANCE); } for (org.ovirt.engine.core.common.businessentities.InstanceType instanceType : ((java.lang.Iterable<org.ovirt.engine.core.common.businessentities.InstanceType>) (returnValue.getReturnValue()))) { instanceTypes.add(instanceType); } getModel().getInstanceTypes().setItems(instanceTypes); for (org.ovirt.engine.core.common.businessentities.InstanceType instanceType : instanceTypes) { if ((instanceType instanceof org.ovirt.engine.ui.uicommonweb.models.vms.CustomInstanceType) && (selectedInstanceTypeId == null)) { getModel().getInstanceTypes().setSelectedItem(CustomInstanceType.INSTANCE); break; } if (((instanceType.getId()) == null) || (selectedInstanceTypeId == null)) { continue; } if (instanceType.getId().equals(selectedInstanceTypeId)) { getModel().getInstanceTypes().setSelectedItem(instanceType); break; } } if ((getModel().getInstanceTypes().getSelectedItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.CustomInstanceType) { getModel().getAttachedToInstanceType().setEntity(false); } updateFields(); } })); }
@java.lang.Override public void onSuccess(java.lang.Object modelFromCallback, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { deactivate(); org.ovirt.engine.core.common.businessentities.DisplayType displayProtocol = displayTypes.iterator().next(); if (displayTypes.contains(vmBase.getDefaultDisplayType())) { displayProtocol = vmBase.getDefaultDisplayType(); } maybeSetSelectedItem(model.getDisplayType(), displayProtocol); java.util.Set<org.ovirt.engine.core.common.businessentities.GraphicsType> graphicsTypes = new java.util.HashSet<>(); java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> graphicsDevices = returnValue.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.GraphicsDevice graphicsDevice : graphicsDevices) { graphicsTypes.add(graphicsDevice.getGraphicsType()); } org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.GraphicsTypes selected = UnitVmModel.GraphicsTypes.fromGraphicsTypes(graphicsTypes); if ((selected != null) && (getModel().getGraphicsType().getItems().contains(selected))) { maybeSetSelectedItem(getModel().getGraphicsType(), selected); } maybeSetSelectedItem(model.getNumOfMonitors(), vmBase.getNumOfMonitors()); maybeSetSelectedItem(model.getUsbPolicy(), vmBase.getUsbPolicy()); maybeSetEntity(model.getIsSmartcardEnabled(), vmBase.isSmartcardEnabled()); maybeSetSingleQxlPci(vmBase); activate(); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { deactivate(); org.ovirt.engine.core.common.businessentities.DisplayType displayProtocol = displayTypes.iterator().next(); if (displayTypes.contains(vmBase.getDefaultDisplayType())) { displayProtocol = vmBase.getDefaultDisplayType(); } maybeSetSelectedItem(model.getDisplayType(), displayProtocol); java.util.Set<org.ovirt.engine.core.common.businessentities.GraphicsType> graphicsTypes = new java.util.HashSet<>(); java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> graphicsDevices = returnValue.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.GraphicsDevice graphicsDevice : graphicsDevices) { graphicsTypes.add(graphicsDevice.getGraphicsType()); } org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.GraphicsTypes selected = UnitVmModel.GraphicsTypes.fromGraphicsTypes(graphicsTypes); if ((selected != null) && (getModel().getGraphicsType().getItems().contains(selected))) { maybeSetSelectedItem(getModel().getGraphicsType(), selected); } maybeSetSelectedItem(model.getNumOfMonitors(), vmBase.getNumOfMonitors()); maybeSetSelectedItem(model.getUsbPolicy(), vmBase.getUsbPolicy()); maybeSetEntity(model.getIsSmartcardEnabled(), vmBase.isSmartcardEnabled()); maybeSetSingleQxlPci(vmBase); activate(); }
@java.lang.Override public void onSuccess(java.lang.Object target, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { deactivate(); @java.lang.SuppressWarnings("unchecked") java.util.Collection<org.ovirt.engine.core.common.businessentities.VmWatchdog> watchdogs = <START_MOD>returnValue<END_MOD>.getReturnValue(); if ((watchdogs.size()) == 0) { model.getWatchdogAction().setSelectedItem(model.getWatchdogAction().getItems().iterator().next()); model.getWatchdogModel().setSelectedItem(model.getWatchdogModel().getItems().iterator().next()); } for (org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog : watchdogs) { if (watchdogAvailable(watchdog.getModel())) { model.getWatchdogAction().setSelectedItem(((watchdog.getAction()) == null ? null : watchdog.getAction())); model.getWatchdogModel().setSelectedItem(((watchdog.getModel()) == null ? null : watchdog.getModel())); } } activate(); if (continueWithNext) { updateBalloon(vmBase, true); } }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { deactivate(); @java.lang.SuppressWarnings("unchecked") java.util.Collection<org.ovirt.engine.core.common.businessentities.VmWatchdog> watchdogs = returnValue.getReturnValue(); if ((watchdogs.size()) == 0) { model.getWatchdogAction().setSelectedItem(model.getWatchdogAction().getItems().iterator().next()); model.getWatchdogModel().setSelectedItem(model.getWatchdogModel().getItems().iterator().next()); } for (org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog : watchdogs) { if (watchdogAvailable(watchdog.getModel())) { model.getWatchdogAction().setSelectedItem(((watchdog.getAction()) == null ? null : watchdog.getAction())); model.getWatchdogModel().setSelectedItem(((watchdog.getModel()) == null ? null : watchdog.getModel())); } } activate(); if (continueWithNext) { updateBalloon(vmBase, true); } }
public void updateNetworkInterfacesByTemplate(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { org.ovirt.engine.core.common.queries.VdcQueryType queryType = (vmBase instanceof org.ovirt.engine.core.common.businessentities.VmTemplate) ? org.ovirt.engine.core.common.queries.VdcQueryType.GetTemplateInterfacesByTemplateId : org.ovirt.engine.core.common.queries.VdcQueryType.GetVmInterfacesByVmId; org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object parentModel, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { if (returnValue == null) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = returnValue.getReturnValue(); updateNetworkInterfaces(getNetworkProfileBehavior(), nics); } }); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(queryType, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmBase.getId()), query); }	public void updateNetworkInterfacesByTemplate(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { org.ovirt.engine.core.common.queries.VdcQueryType queryType = (vmBase instanceof org.ovirt.engine.core.common.businessentities.VmTemplate) ? org.ovirt.engine.core.common.queries.VdcQueryType.GetTemplateInterfacesByTemplateId : org.ovirt.engine.core.common.queries.VdcQueryType.GetVmInterfacesByVmId; org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (returnValue == null) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = returnValue.getReturnValue(); updateNetworkInterfaces(getNetworkProfileBehavior(), nics); } }); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(queryType, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmBase.getId()), query); }
@java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { <END_MOD>java.lang.<START_MOD>String msg; if (returnValue == null) { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().testFailedUnknownErrorMsg(); } else<END_MOD> { org.ovirt.engine.core.common.<START_MOD>businessentities.pm.FenceOperationResult result =<END_MOD> returnValue<START_MOD>.getReturnValue(); if ((result.getStatus()) == (FenceOperationResult.Status.SUCCESS)) { msg<END_MOD> = <START_MOD>org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().testSuccessfulWithPowerStatus(((result.getPowerStatus()) == <END_MOD>(org.ovirt.engine.core.common.<START_MOD>businessentities.pm.PowerStatus.ON) ? org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().powerOn() : org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().powerOff())); } else<END_MOD> { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().<START_MOD>getMessages().testFailedWithErrorMsg(<END_MOD>result.getMessage()); } } setMessage(msg); getTestCommand().setIsExecutionAllowed(true); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.lang.String msg; if (returnValue == null) { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().testFailedUnknownErrorMsg(); } else { org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult result = returnValue.getReturnValue(); if ((result.getStatus()) == (FenceOperationResult.Status.SUCCESS)) { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().testSuccessfulWithPowerStatus(((result.getPowerStatus()) == (org.ovirt.engine.core.common.businessentities.pm.PowerStatus.ON) ? org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().powerOn() : org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().powerOff())); } else { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().testFailedWithErrorMsg(result.getMessage()); } } setMessage(msg); getTestCommand().setIsExecutionAllowed(true); }
@java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.ClusterPolicy> list = returnValue.getReturnValue(); java.util.Collections.sort(list, new org.ovirt.engine.ui.uicommonweb.Linq.ClusterPolicyComparator()); setItems(list); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.ClusterPolicy> list = returnValue.getReturnValue(); java.util.Collections.sort(list, new org.ovirt.engine.ui.uicommonweb.Linq.ClusterPolicyComparator()); setItems(list); }
@java.lang.Override public void onSuccess(java.lang.Object parentModel, <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { if (returnValue == null) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = returnValue.getReturnValue(); updateNetworkInterfaces(getNetworkProfileBehavior(), nics); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (returnValue == null) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = returnValue.getReturnValue(); updateNetworkInterfaces(getNetworkProfileBehavior(), nics); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.util.<START_MOD>List<END_MOD><org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters<START_MOD>) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model<END_MOD> = ((<START_MOD>org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel) (getWindow()<END_MOD>)); model.getDataCenter().setItems(dataCenters); if ((getEntity().getStoragePoolId()) != null) { model.getDataCenter().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(dataCenters, new org.ovirt.engine.ui.uicommonweb.Linq.IdPredicate<>(getEntity().getStoragePoolId()))); } model.getDataCenter().setIsChangeable(false); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnConfirmPMHost", <START_MOD>this<END_MOD>); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", <START_MOD>this<END_MOD>); model.getCommands().add(tempVar2); }	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel) (getWindow())); model.getDataCenter().setItems(dataCenters); if ((getEntity().getStoragePoolId()) != null) { model.getDataCenter().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(dataCenters, new org.ovirt.engine.ui.uicommonweb.Linq.IdPredicate<>(getEntity().getStoragePoolId()))); } model.getDataCenter().setIsChangeable(false); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnConfirmPMHost", this); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); model.getCommands().add(tempVar2); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValueObject = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); if (returnValueObject.getSucceeded()) { org.ovirt.engine.core.common.businessentities.ErrataData errataData = returnValueObject.getReturnValue(); unfilteredResultList = errataData.getErrata(); setItems(filter(unfilteredResultList)); } else { setMessage((((org.ovirt.engine.ui.uicommonweb.models.AbstractErrataListModel.constants.katelloProblemRetrievingErrata()) +     + (returnValueObject.getExceptionMessage()))); } }	@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (returnValue.getSucceeded()) { org.ovirt.engine.core.common.businessentities.ErrataData errataData = returnValue.getReturnValue(); unfilteredResultList = errataData.getErrata(); setItems(filter(unfilteredResultList)); } else { setMessage((((org.ovirt.engine.ui.uicommonweb.models.AbstractErrataListModel.constants.katelloProblemRetrievingErrata()) + " ") + (returnValue.getExceptionMessage()))); } }
private void runQuery(org.ovirt.engine.core.compat.Guid guid) { org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncQuery<END_MOD> = new org.ovirt.engine.ui.frontend.AsyncQuery(); <START_MOD>asyncQuery<END_MOD>.setHandleFailure(true); <START_MOD>asyncQuery<END_MOD>.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.<START_MOD>core.common.queries.VdcQueryReturnValue returnValueObject = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); if (returnValueObject.getSucceeded()) { org.ovirt.engine.core.common.businessentities.ErrataData errataData = returnValueObject.getReturnValue(); unfilteredResultList = errataData.getErrata(); setItems(filter(unfilteredResultList)); } else { setMessage((((org.ovirt.engine.<END_MOD>ui.uicommonweb.models.AbstractErrataListModel<START_MOD>.constants.katelloProblemRetrievingErrata()) +     + (returnValueObject.getExceptionMessage()))); } } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(getQueryType(), new<END_MOD> org.ovirt.engine.core.common.queries.<START_MOD>GetErrataCountsParameters(guid<END_MOD>), <START_MOD>asyncQuery); }<END_MOD>	private void runQuery(org.ovirt.engine.core.compat.Guid guid) { org.ovirt.engine.ui.uicommonweb.models.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncQuery = new org.ovirt.engine.ui.uicommonweb.models.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (returnValue.getSucceeded()) { org.ovirt.engine.core.common.businessentities.ErrataData errataData = returnValue.getReturnValue(); unfilteredResultList = errataData.getErrata(); setItems(filter(unfilteredResultList)); } else { setMessage((((org.ovirt.engine.ui.uicommonweb.models.AbstractErrataListModel.constants.katelloProblemRetrievingErrata()) + " ") + (returnValue.getExceptionMessage()))); } } }); asyncQuery.setHandleFailure(true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(getQueryType(), new org.ovirt.engine.core.common.queries.GetErrataCountsParameters(guid), asyncQuery); }
@java.lang.Override public void onSuccess(java.lang.Object target, org.ovirt.engine.core.common.businessentities.StoragePool storagePool) <START_MOD>{<END_MOD> setDataCenterVersion(storagePool.getCompatibilityVersion()); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.StoragePool storagePool) { setDataCenterVersion(storagePool.getCompatibilityVersion()); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.<START_MOD>util<END_MOD>.<START_MOD>List<org.ovirt.engine.core.common.businessentities.VDS><END_MOD> returnValue) { allHosts = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); updateOptionsNonLocalFS(); }	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> returnValue) { allHosts = returnValue; updateOptionsNonLocalFS(); }
@java.lang.Override protected void syncSearch() { super.syncSearch(); if (getIsQueryFirstTime()) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllPolicyUnits, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.PolicyUnit> list = returnValue.getReturnValue(); setPolicyUnits(list); fetchClusterPolicies(); if ((policyUnitModel) != null) { policyUnitModel.getPolicyUnits().setItems(sort(policyUnits)); } } })); } else { fetchClusterPolicies(); } }	@java.lang.Override protected void syncSearch() { super.syncSearch(); if (getIsQueryFirstTime()) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllPolicyUnits, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.PolicyUnit> list = returnValue.getReturnValue(); setPolicyUnits(list); fetchClusterPolicies(); if ((policyUnitModel) != null) { policyUnitModel.getPolicyUnits().setItems(sort(policyUnits)); } } })); } else { fetchClusterPolicies(); } }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.<START_MOD>Boolean returnValue) { deactivate(); getModel().getIsSoundcardEnabled().setEntity(returnValue); activate(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetConsoleDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmBase.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(java.lang.<END_MOD>Object <START_MOD>model,<END_MOD> org.ovirt.engine.core.common.queries.<START_MOD>VdcQueryReturnValue<END_MOD> returnValue) { deactivate(); java.util.List<java.lang.String> consoleDevices = <START_MOD>returnValue<END_MOD>.getReturnValue(); getModel().getIsConsoleDeviceEnabled().setEntity((!(consoleDevices.isEmpty()))); activate(); postDoUpdateManagedFieldsFrom(vmBase); } })); }	@java.lang.Override public void onSuccess(java.lang.Boolean returnValue) { deactivate(); getModel().getIsSoundcardEnabled().setEntity(returnValue); activate(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetConsoleDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmBase.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { deactivate(); java.util.List<java.lang.String> consoleDevices = returnValue.getReturnValue(); getModel().getIsConsoleDeviceEnabled().setEntity((!(consoleDevices.isEmpty()))); activate(); postDoUpdateManagedFieldsFrom(vmBase); } })); }
private void updateWatchdog(final org.ovirt.engine.core.common.businessentities.VmBase vmBase, final boolean continueWithNext) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getWatchdogByVmId(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { deactivate(); @java.lang.SuppressWarnings("unchecked") java.util.Collection<org.ovirt.engine.core.common.businessentities.VmWatchdog> watchdogs = <START_MOD>returnValue<END_MOD>.getReturnValue(); if ((watchdogs.size()) == 0) { model.getWatchdogAction().setSelectedItem(model.getWatchdogAction().getItems().iterator().next()); model.getWatchdogModel().setSelectedItem(model.getWatchdogModel().getItems().iterator().next()); } for (org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog : watchdogs) { if (watchdogAvailable(watchdog.getModel())) { model.getWatchdogAction().setSelectedItem(((watchdog.getAction()) == null ? null : watchdog.getAction())); model.getWatchdogModel().setSelectedItem(((watchdog.getModel()) == null ? null : watchdog.getModel())); } } activate(); if (continueWithNext) { updateBalloon(vmBase, true); } } }), vmBase.getId()); }	private void updateWatchdog(final org.ovirt.engine.core.common.businessentities.VmBase vmBase, final boolean continueWithNext) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getWatchdogByVmId(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { deactivate(); @java.lang.SuppressWarnings("unchecked") java.util.Collection<org.ovirt.engine.core.common.businessentities.VmWatchdog> watchdogs = returnValue.getReturnValue(); if ((watchdogs.size()) == 0) { model.getWatchdogAction().setSelectedItem(model.getWatchdogAction().getItems().iterator().next()); model.getWatchdogModel().setSelectedItem(model.getWatchdogModel().getItems().iterator().next()); } for (org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog : watchdogs) { if (watchdogAvailable(watchdog.getModel())) { model.getWatchdogAction().setSelectedItem(((watchdog.getAction()) == null ? null : watchdog.getAction())); model.getWatchdogModel().setSelectedItem(((watchdog.getModel()) == null ? null : watchdog.getModel())); } } activate(); if (continueWithNext) { updateBalloon(vmBase, true); } } }), vmBase.getId()); }
protected void updateRngDevice(final org.ovirt.engine.core.common.businessentities.VmBase vmBase) { if ((model.getIsRngEnabled().getIsChangable()) && (model.getIsRngEnabled().getIsAvailable())) { if (!(isNextRunConfigurationExists())) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetRngDevice, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmBase.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { deactivate(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); getModel().setRngDevice(rngDevice); } activate(); updateVirtioScsi(vmBase); } })); } else { deactivate(); org.ovirt.engine.core.common.businessentities.VmDevice rngDevice = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.findVmDeviceByGeneralType(vmBase.getManagedDeviceMap(), VmDeviceGeneralType.RNG); getModel().getIsRngEnabled().setEntity((rngDevice != null)); if (rngDevice != null) { getModel().setRngDevice(new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevice)); } activate(); updateVirtioScsi(vmBase); } } else { updateVirtioScsi(vmBase); } }	protected void updateRngDevice(final org.ovirt.engine.core.common.businessentities.VmBase vmBase) { if ((model.getIsRngEnabled().getIsChangable()) && (model.getIsRngEnabled().getIsAvailable())) { if (!(isNextRunConfigurationExists())) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetRngDevice, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmBase.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { deactivate(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); getModel().setRngDevice(rngDevice); } activate(); updateVirtioScsi(vmBase); } })); } else { deactivate(); org.ovirt.engine.core.common.businessentities.VmDevice rngDevice = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.findVmDeviceByGeneralType(vmBase.getManagedDeviceMap(), VmDeviceGeneralType.RNG); getModel().getIsRngEnabled().setEntity((rngDevice != null)); if (rngDevice != null) { getModel().setRngDevice(new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevice)); } activate(); updateVirtioScsi(vmBase); } } else { updateVirtioScsi(vmBase); } }
@java.lang.Override public void onSuccess(java.lang.Object target, <START_MOD>org.ovirt.engine.core.common.businessentities.StoragePool dataCenter<END_MOD>) { boolean isMultiHostDC = dataCenter.isLocal(); if (isMultiHostDC) { model.setMultiSelection(false); } setWindow(model); model.getCluster().setItems(clusters); model.getCluster().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(clusters)); model.getCluster().setIsAvailable(false); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSelectHost", this); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); model.getCommands().add(tempVar2); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.StoragePool dataCenter) { boolean isMultiHostDC = dataCenter.isLocal(); if (isMultiHostDC) { model.setMultiSelection(false); } setWindow(model); model.getCluster().setItems(clusters); model.getCluster().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(clusters)); model.getCluster().setIsAvailable(false); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSelectHost", this); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); model.getCommands().add(tempVar2); }
private void addDataCenter() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterList(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.StoragePool> allDataCenters) { @java.<END_MOD>lang.<START_MOD>SuppressWarnings("unchecked") java.util.List<<END_MOD>org.ovirt.engine.ui.uicommonweb.models.<START_MOD>EntityModel<org.ovirt.engine.core.common.businessentities.StoragePool>> filteredDataCenters<END_MOD> = <START_MOD>new java.util.ArrayList<>();<END_MOD> java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> <START_MOD>localDataCenters = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : <END_MOD>allDataCenters) { if ((getEntity().getCompatibilityVersion().compareTo(dataCenter.getCompatibilityVersion())) >= 0) { if (dataCenter.isLocal()) { localDataCenters.add(dataCenter); } else { filteredDataCenters.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(dataCenter)); } } } if (localDataCenters.isEmpty()) { displayAddDataCenter(filteredDataCenters); } else { verifyLocalDataCenterNoCluster(filteredDataCenters, localDataCenters); } } })); }	private void addDataCenter() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterList(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>>() { @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> allDataCenters) { @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.StoragePool>> filteredDataCenters = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenters = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : allDataCenters) { if ((getEntity().getCompatibilityVersion().compareTo(dataCenter.getCompatibilityVersion())) >= 0) { if (dataCenter.isLocal()) { localDataCenters.add(dataCenter); } else { filteredDataCenters.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(dataCenter)); } } } if (localDataCenters.isEmpty()) { displayAddDataCenter(filteredDataCenters); } else { verifyLocalDataCenterNoCluster(filteredDataCenters, localDataCenters); } } })); }
@java.lang.Override public void onSuccess(java.lang.Object target, org.ovirt.engine.core.common.businessentities.VDS<START_MOD> returnValue<END_MOD>) <START_MOD>{ localStorageHost = <END_MOD>returnValue; updateOptionsLocalFS(); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.VDS returnValue) { localStorageHost = returnValue; updateOptionsLocalFS(); }
@java.lang.Override public void onSuccess(java.lang.Object parentModel, java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> profiles<END_MOD>) { java.util.List<org.ovirt.engine.<START_MOD>ui.uicommonweb.models.vms.VnicInstanceType> vnicInstanceTypes = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.<END_MOD>core.common.businessentities.network.<START_MOD>VmNetworkInterface> nics = (argNics == null) ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>() : argNics; for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic : nics) { final org.ovirt.engine.ui.uicommonweb.models.vms.VnicInstanceType vnicInstanceType = new org.ovirt.engine.ui.uicommonweb.models.vms.VnicInstanceType(nic); vnicInstanceType.setItems(<END_MOD>profiles<START_MOD>); behavior.initSelectedProfile(vnicInstanceType, vnicInstanceType.getNetworkInterface()); vnicInstanceTypes.add(vnicInstanceType); } getModel().getNicsWithLogicalNetworks().getVnicProfiles().setItems(profiles); getModel().getNicsWithLogicalNetworks().setItems(vnicInstanceTypes); getModel().getNicsWithLogicalNetworks().setSelectedItem(<END_MOD>org.ovirt.engine.ui.uicommonweb.<START_MOD>Linq.firstOrNull(<END_MOD>vnicInstanceTypes<START_MOD>)<END_MOD>); }	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> profiles) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.VnicInstanceType> vnicInstanceTypes = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = (argNics == null) ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>() : argNics; for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic : nics) { final org.ovirt.engine.ui.uicommonweb.models.vms.VnicInstanceType vnicInstanceType = new org.ovirt.engine.ui.uicommonweb.models.vms.VnicInstanceType(nic); vnicInstanceType.setItems(profiles); behavior.initSelectedProfile(vnicInstanceType, vnicInstanceType.getNetworkInterface()); vnicInstanceTypes.add(vnicInstanceType); } getModel().getNicsWithLogicalNetworks().getVnicProfiles().setItems(profiles); getModel().getNicsWithLogicalNetworks().setItems(vnicInstanceTypes); getModel().getNicsWithLogicalNetworks().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(vnicInstanceTypes)); }
@java.lang.Override public java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView><END_MOD> convert(java.lang.Object returnValue, org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>><END_MOD> asyncQuery) { <START_MOD>this.clusterNetworks = clusterNetworks; <END_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.network.<START_MOD>VnicProfileView> vnicProfiles = new java.util.ArrayList<>(); vnicProfiles.add(VnicProfileView.EMPTY); if (returnValue == null) { return vnicProfiles; } for (org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile : ((java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>) (returnValue))) { org.ovirt.engine.core.common.businessentities.network.<END_MOD>Network<START_MOD> network<END_MOD> = <START_MOD>findNetworkById(vnicProfile.getNetworkId()); if ((network != null) && (network.isVmNetwork())) { vnicProfiles.add(vnicProfile); } } java.util.Collections.sort(vnicProfiles,<END_MOD> new <START_MOD>org.ovirt.engine.ui.uicommonweb.Linq.VnicProfileViewComparator());<END_MOD> return vnicProfiles; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> convert(java.lang.Object returnValue) { this.clusterNetworks = clusterNetworks; java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> vnicProfiles = new java.util.ArrayList<>(); vnicProfiles.add(VnicProfileView.EMPTY); if (returnValue == null) { return vnicProfiles; } for (org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile : ((java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>) (returnValue))) { org.ovirt.engine.core.common.businessentities.network.Network network = findNetworkById(vnicProfile.getNetworkId()); if ((network != null) && (network.isVmNetwork())) { vnicProfiles.add(vnicProfile); } } java.util.Collections.sort(vnicProfiles, new org.ovirt.engine.ui.uicommonweb.Linq.VnicProfileViewComparator()); return vnicProfiles; }
@java.lang.Override public void onSuccess(java.lang.Object target, org.ovirt.engine.<START_MOD>core<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>businessentities<END_MOD>.<START_MOD>Cluster<END_MOD> <START_MOD>returnValue<END_MOD>) <START_MOD>{<END_MOD> org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (getWindow())); model.setEntity(returnValue); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", <START_MOD>this<END_MOD>); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().configureLaterTitle()); tempVar.setIsDefault(true); tempVar.setIsCancel(true); model.getCommands().add(tempVar); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.Cluster returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (getWindow())); model.setEntity(returnValue); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().configureLaterTitle()); tempVar.setIsDefault(true); tempVar.setIsCancel(true); model.getCommands().add(tempVar); }
protected void updateBalloon(final org.ovirt.engine.core.common.businessentities.VmBase vmBase, final boolean continueWithNext) { if ((model.getMemoryBalloonDeviceEnabled().getIsChangable()) && (model.getMemoryBalloonDeviceEnabled().getIsAvailable())) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.IsBalloonEnabled, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmBase.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object parenModel, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { deactivate(); getModel().getMemoryBalloonDeviceEnabled().setEntity(((<END_MOD>java.lang.<START_MOD>Boolean) (<END_MOD>returnValue.getReturnValue()))); activate(); if (continueWithNext) { updateRngDevice(vmBase); } } })); } else if (continueWithNext) { updateRngDevice(vmBase); } }	protected void updateBalloon(final org.ovirt.engine.core.common.businessentities.VmBase vmBase, final boolean continueWithNext) { if ((model.getMemoryBalloonDeviceEnabled().getIsChangable()) && (model.getMemoryBalloonDeviceEnabled().getIsAvailable())) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.IsBalloonEnabled, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmBase.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { deactivate(); getModel().getMemoryBalloonDeviceEnabled().setEntity(((java.lang.Boolean) (returnValue.getReturnValue()))); activate(); if (continueWithNext) { updateRngDevice(vmBase); } } })); } else if (continueWithNext) { updateRngDevice(vmBase); } }
private void onSelectedHookSourceChanged() { org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook> selectedItem = getHookSources().getSelectedItem(); if (selectedItem == null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook selectedServer = selectedItem.getEntity(); getServerHooksList().setSelectedItem(selectedServer); if ((selectedServer.getStatus()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterHookStatus.MISSING)) { getContentModel().getContent().setEntity(null); getContentModel().getStatus().setEntity(null); getContentModel().getMd5Checksum().setEntity(null); return; } getContentModel().getStatus().setEntity(selectedServer.getStatus()); getContentModel().getMd5Checksum().setEntity(selectedServer.getChecksum()); if ((selectedServer.getContentType()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterHookContentType.TEXT)) { startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getGlusterHookContent(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.lang.String><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.String content<START_MOD>) {<END_MOD> getContentModel().getContent().setEntity(content); stopProgress(); } }), getGlusterHookEntity().getId(), selectedServer.getServerId()); } else { getContentModel().getContent().setEntity(null); } }	private void onSelectedHookSourceChanged() { org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook> selectedItem = getHookSources().getSelectedItem(); if (selectedItem == null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook selectedServer = selectedItem.getEntity(); getServerHooksList().setSelectedItem(selectedServer); if ((selectedServer.getStatus()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterHookStatus.MISSING)) { getContentModel().getContent().setEntity(null); getContentModel().getStatus().setEntity(null); getContentModel().getMd5Checksum().setEntity(null); return; } getContentModel().getStatus().setEntity(selectedServer.getStatus()); getContentModel().getMd5Checksum().setEntity(selectedServer.getChecksum()); if ((selectedServer.getContentType()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterHookContentType.TEXT)) { startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getGlusterHookContent(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.lang.String>() { @java.lang.Override public void onSuccess(java.lang.String content) { getContentModel().getContent().setEntity(content); stopProgress(); } }), getGlusterHookEntity().getId(), selectedServer.getServerId()); } else { getContentModel().getContent().setEntity(null); } }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.<START_MOD>String<END_MOD> <START_MOD>content<END_MOD>) { getContentModel().getContent().setEntity(content); stopProgress(); }	@java.lang.Override public void onSuccess(java.lang.String content) { getContentModel().getContent().setEntity(content); stopProgress(); }
@java.lang.Override public void onSuccess(java.lang.Object <START_MOD>_model<END_MOD>, <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { java.lang.Boolean connectAutomatically = java.lang.Boolean.TRUE; org.ovirt.engine.core.common.businessentities.UserProfile profile = returnValue.getReturnValue(); if (profile != null) { setUserProfile(profile); connectAutomatically = profile.isUserPortalVmLoginAutomatically(); model.getPublicKey().setEntity(profile.getSshPublicKey()); } model.getEnableConnectAutomatically().setEntity(connectAutomatically); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.lang.Boolean connectAutomatically = java.lang.Boolean.TRUE; org.ovirt.engine.core.common.businessentities.UserProfile profile = returnValue.getReturnValue(); if (profile != null) { setUserProfile(profile); connectAutomatically = profile.isUserPortalVmLoginAutomatically(); model.getPublicKey().setEntity(profile.getSshPublicKey()); } model.getEnableConnectAutomatically().setEntity(connectAutomatically); }
private void onEdit() { if ((getWindow()) != null) { return; } <START_MOD>final <END_MOD>org.ovirt.engine.ui.uicommonweb.models.EditOptionsModel model = new org.ovirt.engine.ui.uicommonweb.models.EditOptionsModel(); model.setTitle(org.ovirt.engine.ui.uicommonweb.models.OptionsModel.constants.editOptionsTitle()); model.setHashName("edit_options"); setWindow(model); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand(org.ovirt.engine.ui.uicommonweb.models.OptionsModel.constants.ok(), this); model.getCommands().add(okCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand(org.ovirt.engine.ui.uicommonweb.models.OptionsModel.constants.cancel(), this); model.getCommands().add(cancelCommand); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getUserProfile(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object <START_MOD>_model<END_MOD>, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { <END_MOD>java.lang.<START_MOD>Boolean connectAutomatically = java.lang.Boolean.TRUE; org.ovirt.engine.core.common.businessentities.UserProfile profile =<END_MOD> returnValue<START_MOD>.getReturnValue(); if (profile != null<END_MOD>) { <START_MOD>setUserProfile(profile);<END_MOD> connectAutomatically = profile<START_MOD>.isUserPortalVmLoginAutomatically(); model.getPublicKey().setEntity<END_MOD>(profile<START_MOD>.getSshPublicKey()); } model.getEnableConnectAutomatically().setEntity(<END_MOD>connectAutomatically); } }<START_MOD>));<END_MOD> }	private void onEdit() { if ((getWindow()) != null) { return; } final org.ovirt.engine.ui.uicommonweb.models.EditOptionsModel model = new org.ovirt.engine.ui.uicommonweb.models.EditOptionsModel(); model.setTitle(org.ovirt.engine.ui.uicommonweb.models.OptionsModel.constants.editOptionsTitle()); model.setHashName("edit_options"); setWindow(model); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand(org.ovirt.engine.ui.uicommonweb.models.OptionsModel.constants.ok(), this); model.getCommands().add(okCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand(org.ovirt.engine.ui.uicommonweb.models.OptionsModel.constants.cancel(), this); model.getCommands().add(cancelCommand); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getUserProfile(model.asyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.lang.Boolean connectAutomatically = java.lang.Boolean.TRUE; org.ovirt.engine.core.common.businessentities.UserProfile profile = returnValue.getReturnValue(); if (profile != null) { setUserProfile(profile); connectAutomatically = profile.isUserPortalVmLoginAutomatically(); model.getPublicKey().setEntity(profile.getSshPublicKey()); } model.getEnableConnectAutomatically().setEntity(connectAutomatically); } })); }
@java.lang.Override public void onSuccess(java.lang.Object model1, java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes) <START_MOD>{<END_MOD> if ((volumes.size()) > 0) { clusterModel.getEnableGlusterService().setIsChangeable(false); if (!isVirtGlusterAllowed) { clusterModel.getEnableOvirtService().setIsChangeable(false); } } }	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes) { if ((volumes.size()) > 0) { clusterModel.getEnableGlusterService().setIsChangeable(false); if (!isVirtGlusterAllowed) { clusterModel.getEnableOvirtService().setIsChangeable(false); } } }
public void init() { startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmListByClusterName(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.VM>><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.VM> vmList<END_MOD>) { java.util.List<org.ovirt.engine.core.compat.Guid> vmIds = getAffinityGroup().getEntityIds(); getVmsSelectionModel().init(vmList, (vmIds != null ? vmIds : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); stopProgress(); } }), clusterName); }	public void init() { startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmListByClusterName(new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.model.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.VM>>() { @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList) { java.util.List<org.ovirt.engine.core.compat.Guid> vmIds = getAffinityGroup().getEntityIds(); getVmsSelectionModel().init(vmList, (vmIds != null ? vmIds : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); stopProgress(); } }), clusterName); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.util.<START_MOD>List<END_MOD><org.ovirt.engine.core.common.businessentities.VM> vmList) <START_MOD>{<END_MOD> java.util.List<org.ovirt.engine.core.compat.Guid> vmIds = getAffinityGroup().getEntityIds(); getVmsSelectionModel().init(vmList, (vmIds != null ? vmIds : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); stopProgress(); }	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList) { java.util.List<org.ovirt.engine.core.compat.Guid> vmIds = getAffinityGroup().getEntityIds(); getVmsSelectionModel().init(vmList, (vmIds != null ? vmIds : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); stopProgress(); }
public void guide() { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newClusterGuideMeTitle()); model.setHelpTag(HelpTag.new_cluster___guide_me); model.setHashName("new_cluster_-_guide_me"); if ((getGuideContext()) == null) { org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.getSelectedItem(); setGuideContext(cluster.getId()); } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterById(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.businessentities.Cluster><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, <START_MOD>org.ovirt.engine.core.common.businessentities.Cluster<END_MOD> returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.<START_MOD>ClusterGuideModel model<END_MOD> = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel<START_MOD>) (<END_MOD>getWindow())); model.setEntity(returnValue); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", <START_MOD>org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.this<END_MOD>); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().configureLaterTitle()); tempVar.setIsDefault(true); tempVar.setIsCancel(true); model.getCommands().add(tempVar); } }), ((org.ovirt.engine.core.compat.Guid) (getGuideContext()))); }	public void guide() { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newClusterGuideMeTitle()); model.setHelpTag(HelpTag.new_cluster___guide_me); model.setHashName("new_cluster_-_guide_me"); if ((getGuideContext()) == null) { org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.getSelectedItem(); setGuideContext(cluster.getId()); } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterById(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.businessentities.Cluster>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.Cluster returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (getWindow())); model.setEntity(returnValue); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().configureLaterTitle()); tempVar.setIsDefault(true); tempVar.setIsCancel(true); model.getCommands().add(tempVar); } }), ((org.ovirt.engine.core.compat.Guid) (getGuideContext()))); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = null; if (returnValue instanceof java.util.List) { hosts = ((java.util.List<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); } else if ((returnValue instanceof org.ovirt.engine.core.common.queries.VdcQueryReturnValue) && ((((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()) instanceof java.util.List)) { hosts = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); } boolean foundNRHosts = false; if (hosts != null) { for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if ((org.ovirt.engine.core.common.businessentities.VDSStatus.NonResponsive) == (host.getStatus())) { foundNRHosts = true; break; } } } java.lang.String existingMsg = ((confirmModel.getMessage()) == null) ? "" : confirmModel.getMessage(); if (foundNRHosts) { confirmModel.setMessage((existingMsg + (constants.youAreAboutChangeClusterCompatibilityVersionNonResponsiveHostsMsg()))); } else { confirmModel.setMessage((existingMsg + (constants.youAreAboutChangeClusterCompatibilityVersionMsg()))); } stopProgress(); }	@java.lang.Override public void onSuccess(java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = null; if (returnValue instanceof java.util.List) { hosts = ((java.util.List<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); } else if ((returnValue instanceof org.ovirt.engine.core.common.queries.VdcQueryReturnValue) && ((((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()) instanceof java.util.List)) { hosts = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); } boolean foundNRHosts = false; if (hosts != null) { for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if ((org.ovirt.engine.core.common.businessentities.VDSStatus.NonResponsive) == (host.getStatus())) { foundNRHosts = true; break; } } } java.lang.String existingMsg = ((confirmModel.getMessage()) == null) ? "" : confirmModel.getMessage(); if (foundNRHosts) { confirmModel.setMessage((existingMsg + (constants.youAreAboutChangeClusterCompatibilityVersionNonResponsiveHostsMsg()))); } else { confirmModel.setMessage((existingMsg + (constants.youAreAboutChangeClusterCompatibilityVersionMsg()))); } stopProgress(); }
protected void updateDataCenterVersion() { org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><org.ovirt.engine.core.common.businessentities.StoragePool><END_MOD> query = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.businessentities.StoragePool><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, org.ovirt.engine.core.common.businessentities.StoragePool storagePool) <START_MOD>{<END_MOD> setDataCenterVersion(storagePool.getCompatibilityVersion()); } }); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterById(query, getEntity().getStoragePoolId()); }	protected void updateDataCenterVersion() { org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery<org.ovirt.engine.core.common.businessentities.StoragePool> query = new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.businessentities.StoragePool>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.StoragePool storagePool) { setDataCenterVersion(storagePool.getCompatibilityVersion()); } }); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterById(query, getEntity().getStoragePoolId()); }
@java.lang.Override protected void updateInternal() { super.updateInternal(); if (!((getContainer().isNewStorage()) || (getContainer().isStorageActive()))) { return; } org.ovirt.engine.core.common.businessentities.VDS host = getContainer().getHost().getSelectedItem(); if (host == null) { proposeDiscover(); return; } final java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.EntityModel<?>> prevSelected = org.ovirt.engine.ui.uicommonweb.Linq.findSelectedItems(((java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.EntityModel<?>>) (getSelectedItem()))); clearItems(); initializeItems(null, null); final org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel model = this; <START_MOD>org.ovirt.engine.ui.frontend.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncQuery<END_MOD> = <START_MOD>new<END_MOD> org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD>(<END_MOD>new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue response) { if (response.getSucceeded()) { model.applyData(((<END_MOD>java.<START_MOD>util.ArrayList<<END_MOD>org.ovirt.engine.core.common.<START_MOD>businessentities.storage.LUNs>) (response.getReturnValue())), false, prevSelected); model.setGetLUNsFailure(""); } else { model.setGetLUNsFailure(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().couldNotRetrieveLUNsLunsFailure()); } } }, true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetDeviceList, new org.ovirt.engine.core.common.<END_MOD>queries.<START_MOD>GetDeviceListQueryParameters(host.getId(), getType(<END_MOD>), false, null), asyncQuery); }	@java.lang.Override protected void updateInternal() { super.updateInternal(); if (!((getContainer().isNewStorage()) || (getContainer().isStorageActive()))) { return; } org.ovirt.engine.core.common.businessentities.VDS host = getContainer().getHost().getSelectedItem(); if (host == null) { proposeDiscover(); return; } final java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.EntityModel<?>> prevSelected = org.ovirt.engine.ui.uicommonweb.Linq.findSelectedItems(((java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.EntityModel<?>>) (getSelectedItem()))); clearItems(); initializeItems(null, null); final org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel model = this; org.ovirt.engine.ui.uicommonweb.models.storage.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncQuery = new org.ovirt.engine.ui.uicommonweb.models.storage.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue response) { if (response.getSucceeded()) { model.applyData(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (response.getReturnValue())), false, prevSelected); model.setGetLUNsFailure(""); } else { model.setGetLUNsFailure(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().couldNotRetrieveLUNsLunsFailure()); } } }, true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetDeviceList, new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(host.getId(), getType(), false, null), asyncQuery); }
@java.lang.Override public void onSuccess(java.lang.Object target, org.ovirt.engine.core.common.queries.VdcQueryReturnValue response) <START_MOD>{<END_MOD> if (response.getSucceeded()) { model.applyData(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (response.getReturnValue())), false, prevSelected); model.setGetLUNsFailure(""); } else { model.setGetLUNsFailure(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().couldNotRetrieveLUNsLunsFailure()); } }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue response) { if (response.getSucceeded()) { model.applyData(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (response.getReturnValue())), false, prevSelected); model.setGetLUNsFailure(""); } else { model.setGetLUNsFailure(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().couldNotRetrieveLUNsLunsFailure()); } }
@java.lang.Override public void onSuccess(java.lang.Object model, org.ovirt.engine.core.common.queries.VdcQueryReturnValue response<START_MOD>) {<END_MOD> if ((response == null) || (!(response.getSucceeded()))) { hasAdminSystemPermission = false; updateConfigureLocalStorageCommandAvailability1(); } else { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Permission> permissions = response.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.Permission permission : permissions) { if (((permission.getObjectType()) == (org.ovirt.engine.core.common.VdcObjectType.System)) && ((permission.getRoleType()) == (org.ovirt.engine.core.common.businessentities.RoleType.ADMIN))) { hasAdminSystemPermission = true; break; } } updateConfigureLocalStorageCommandAvailability1(); } }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue response) { if ((response == null) || (!(response.getSucceeded()))) { hasAdminSystemPermission = false; updateConfigureLocalStorageCommandAvailability1(); } else { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Permission> permissions = response.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.Permission permission : permissions) { if (((permission.getObjectType()) == (org.ovirt.engine.core.common.VdcObjectType.System)) && ((permission.getRoleType()) == (org.ovirt.engine.core.common.businessentities.RoleType.ADMIN))) { hasAdminSystemPermission = true; break; } } updateConfigureLocalStorageCommandAvailability1(); } }
public void updateConfigureLocalStorageCommandAvailability() { if ((hasAdminSystemPermission) == null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoggedInUser(); if (dbUser == null) { hasAdminSystemPermission = false; updateConfigureLocalStorageCommandAvailability1(); return; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetPermissionsByAdElementId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dbUser.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, org.ovirt.engine.core.common.queries.VdcQueryReturnValue response<START_MOD>) {<END_MOD> if ((response == null) || (!(response.getSucceeded()))) { hasAdminSystemPermission = false; updateConfigureLocalStorageCommandAvailability1(); } else { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Permission> permissions = response.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.Permission permission : permissions) { if (((permission.getObjectType()) == (org.ovirt.engine.core.common.VdcObjectType.System)) && ((permission.getRoleType()) == (org.ovirt.engine.core.common.businessentities.RoleType.ADMIN))) { hasAdminSystemPermission = true; break; } } updateConfigureLocalStorageCommandAvailability1(); } } }, true)); } else { updateConfigureLocalStorageCommandAvailability1(); } }	public void updateConfigureLocalStorageCommandAvailability() { if ((hasAdminSystemPermission) == null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoggedInUser(); if (dbUser == null) { hasAdminSystemPermission = false; updateConfigureLocalStorageCommandAvailability1(); return; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetPermissionsByAdElementId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dbUser.getId()), new org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue response) { if ((response == null) || (!(response.getSucceeded()))) { hasAdminSystemPermission = false; updateConfigureLocalStorageCommandAvailability1(); } else { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Permission> permissions = response.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.Permission permission : permissions) { if (((permission.getObjectType()) == (org.ovirt.engine.core.common.VdcObjectType.System)) && ((permission.getRoleType()) == (org.ovirt.engine.core.common.businessentities.RoleType.ADMIN))) { hasAdminSystemPermission = true; break; } } updateConfigureLocalStorageCommandAvailability1(); } } }, true)); } else { updateConfigureLocalStorageCommandAvailability1(); } }
private void updateOptionsNonLocalFSData() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostListByCluster(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.VDS>><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.VDS> returnValue) { hosts = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); updateOptionsNonLocalFS(); } }), getEntity().getName());<END_MOD> org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostList(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.VDS>><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.VDS> returnValue) { allHosts = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); updateOptionsNonLocalFS(); } })); if (getEntity().supportsGlusterService()<END_MOD>) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isAnyHostUpInCluster(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.lang.Boolean><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.<START_MOD>Boolean returnValue) { isAnyHostUpInCluster<END_MOD> = <START_MOD>returnValue; <END_MOD>updateOptionsNonLocalFS(); } }), getEntity().getName()); } }	private void updateOptionsNonLocalFSData() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostListByCluster(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.VDS>>() { @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> returnValue) { hosts = returnValue; updateOptionsNonLocalFS(); } }), getEntity().getName()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostList(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.VDS>>() { @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> returnValue) { allHosts = returnValue; updateOptionsNonLocalFS(); } })); if (getEntity().supportsGlusterService()) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isAnyHostUpInCluster(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.lang.Boolean>() { @java.lang.Override public void onSuccess(java.lang.Boolean returnValue) { isAnyHostUpInCluster = returnValue; updateOptionsNonLocalFS(); } }), getEntity().getName()); } }
@java.lang.Override public void onSuccess(java.lang.Object model1, java.lang.Object ReturnValue1) { org.ovirt.engine.ui.uicommonweb.models.pools.PoolGeneralModel poolGeneralModel1 = ((org.ovirt.engine.ui.uicommonweb.models.pools.PoolGeneralModel) (model1)); java.lang.String <START_MOD>defaultHost1<END_MOD> = ""; java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue1)).getReturnValue(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (poolGeneralModel1.getvm().getDedicatedVmForVdsList().contains(host.getId())) { if (<START_MOD>defaultHost1<END_MOD>.isEmpty()) { <START_MOD>defaultHost1<END_MOD> = host.getName(); } else { <START_MOD>defaultHost1<END_MOD> +=     + (host.getName()); } } } poolGeneralModel1.setDefaultHost(<START_MOD>defaultHost1); }<END_MOD>	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue1) { java.lang.String defaultHost1 = ""; java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> hosts = returnValue1.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (getvm().getDedicatedVmForVdsList().contains(host.getId())) { if (defaultHost1.isEmpty()) { defaultHost1 = host.getName(); } else { defaultHost1 += ", " + (host.getName()); } } } setDefaultHost(defaultHost1); }
@java.lang.Override public void onSuccess(java.lang.Object model, org.ovirt.engine.<START_MOD>core<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>queries<END_MOD>.<START_MOD>VdcQueryReturnValue<END_MOD> <START_MOD>returnValue<END_MOD>) <START_MOD>{<END_MOD> java.util.ArrayList<org.ovirt.engine.core.common.scheduling.PolicyUnit> list = returnValue.getReturnValue(); setPolicyUnits(list); fetchClusterPolicies(); if ((policyUnitModel) != null) { policyUnitModel.getPolicyUnits().setItems(sort(policyUnits)); } }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.PolicyUnit> list = returnValue.getReturnValue(); setPolicyUnits(list); fetchClusterPolicies(); if ((policyUnitModel) != null) { policyUnitModel.getPolicyUnits().setItems(sort(policyUnits)); } }
@java.lang.Override public void onSuccess(java.lang.Object model, org.ovirt.engine.core.common.queries.VdcQueryReturnValue <START_MOD>returnValue<END_MOD>) <START_MOD>{ stopProgress<END_MOD>(); org.ovirt.engine.core.common.businessentities.ErrataCounts resultEntity = <START_MOD>returnValue<END_MOD>.getReturnValue(); setMessage(null); if ((resultEntity != null) && (<START_MOD>returnValue<END_MOD>.getSucceeded())) { setErrataCounts(resultEntity); } else { setMessage((((org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel.constants.katelloProblemRetrievingErrata()) +     + (<START_MOD>returnValue<END_MOD>.getExceptionMessage()))); } }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { stopProgress(); org.ovirt.engine.core.common.businessentities.ErrataCounts resultEntity = returnValue.getReturnValue(); setMessage(null); if ((resultEntity != null) && (returnValue.getSucceeded())) { setErrataCounts(resultEntity); } else { setMessage((((org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel.constants.katelloProblemRetrievingErrata()) + " ") + (returnValue.getExceptionMessage()))); } }
private void fetchClusterPolicies() { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.ClusterPolicy> list = returnValue.getReturnValue(); java.util.Collections.sort(list, new org.ovirt.engine.ui.uicommonweb.Linq.ClusterPolicyComparator()); setItems(list); } }); org.ovirt.engine.core.common.queries.VdcQueryParametersBase parametersBase = new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(); parametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetClusterPolicies, parametersBase, asyncQuery); setIsQueryFirstTime(false); }	private void fetchClusterPolicies() { org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.AsyncQuery asyncQuery = new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.ClusterPolicy> list = returnValue.getReturnValue(); java.util.Collections.sort(list, new org.ovirt.engine.ui.uicommonweb.Linq.ClusterPolicyComparator()); setItems(list); } }); org.ovirt.engine.core.common.queries.VdcQueryParametersBase parametersBase = new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(); parametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetClusterPolicies, parametersBase, asyncQuery); setIsQueryFirstTime(false); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters<START_MOD>) { @java.lang.SuppressWarnings("unchecked")<END_MOD> final java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenters = new java.util.ArrayList<>(); boolean enableButton = false; for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : dataCenters) { if ((getEntity().getCompatibilityVersion().compareTo(dataCenter.getCompatibilityVersion())) >= 0) { if (dataCenter.isLocal()) { localDataCenters.add(dataCenter); } else { enableButton = true; break; } } } if (enableButton || (localDataCenters.isEmpty())) { updateOptionsRequiredAddDataCenter(enableButton); } else { updateOptionsRequiredAddDataCenter(localDataCenters); } }	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters) { @java.lang.SuppressWarnings("unchecked") final java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenters = new java.util.ArrayList<>(); boolean enableButton = false; for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : dataCenters) { if ((getEntity().getCompatibilityVersion().compareTo(dataCenter.getCompatibilityVersion())) >= 0) { if (dataCenter.isLocal()) { localDataCenters.add(dataCenter); } else { enableButton = true; break; } } } if (enableButton || (localDataCenters.isEmpty())) { updateOptionsRequiredAddDataCenter(enableButton); } else { updateOptionsRequiredAddDataCenter(localDataCenters); } }
@java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { <START_MOD>if (<END_MOD>(returnValue == null) || (!(<START_MOD>returnValue<END_MOD>.getSucceeded()))) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.InstanceType> instanceTypes = new java.util.ArrayList<>(); if (!(getModel().isCreateInstanceOnly())) { instanceTypes.add(CustomInstanceType.INSTANCE); } for (org.ovirt.engine.core.common.businessentities.InstanceType instanceType : ((java.lang.Iterable<org.ovirt.engine.core.common.businessentities.InstanceType>) (<START_MOD>returnValue<END_MOD>.getReturnValue()))) { instanceTypes.add(instanceType); } getModel().getInstanceTypes().setItems(instanceTypes); for (org.ovirt.engine.core.common.businessentities.InstanceType instanceType : instanceTypes) { if ((instanceType instanceof org.ovirt.engine.ui.uicommonweb.models.vms.CustomInstanceType) && (selectedInstanceTypeId == null)) { getModel().getInstanceTypes().setSelectedItem(CustomInstanceType.INSTANCE); break; } if (((instanceType.getId()) == null) || (selectedInstanceTypeId == null)) { continue; } if (instanceType.getId().equals(selectedInstanceTypeId)) { getModel().getInstanceTypes().setSelectedItem(instanceType); break; } } if ((getModel().getInstanceTypes().getSelectedItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.CustomInstanceType) { getModel().getAttachedToInstanceType().setEntity(false); } updateFields(); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if ((returnValue == null) || (!(returnValue.getSucceeded()))) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.InstanceType> instanceTypes = new java.util.ArrayList<>(); if (!(getModel().isCreateInstanceOnly())) { instanceTypes.add(CustomInstanceType.INSTANCE); } for (org.ovirt.engine.core.common.businessentities.InstanceType instanceType : ((java.lang.Iterable<org.ovirt.engine.core.common.businessentities.InstanceType>) (returnValue.getReturnValue()))) { instanceTypes.add(instanceType); } getModel().getInstanceTypes().setItems(instanceTypes); for (org.ovirt.engine.core.common.businessentities.InstanceType instanceType : instanceTypes) { if ((instanceType instanceof org.ovirt.engine.ui.uicommonweb.models.vms.CustomInstanceType) && (selectedInstanceTypeId == null)) { getModel().getInstanceTypes().setSelectedItem(CustomInstanceType.INSTANCE); break; } if (((instanceType.getId()) == null) || (selectedInstanceTypeId == null)) { continue; } if (instanceType.getId().equals(selectedInstanceTypeId)) { getModel().getInstanceTypes().setSelectedItem(instanceType); break; } } if ((getModel().getInstanceTypes().getSelectedItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.CustomInstanceType) { getModel().getAttachedToInstanceType().setEntity(false); } updateFields(); }
@java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>T<END_MOD> returnValue) { final org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); if (!(queryReturnValue.getSucceeded())) { final org.ovirt.engine.ui.uicommonweb.ErrorPopupManager popupManager = ((org.ovirt.engine.ui.uicommonweb.ErrorPopupManager) (org.ovirt.engine.ui.uicommonweb.TypeResolver.getInstance().resolve(org.ovirt.engine.ui.uicommonweb.ErrorPopupManager.class))); popupManager.show(queryReturnValue.getExceptionMessage()); return; } onRealSuccessCallback.onSuccess(model, returnValue); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (!(returnValue.getSucceeded())) { final org.ovirt.engine.ui.uicommonweb.ErrorPopupManager popupManager = ((org.ovirt.engine.ui.uicommonweb.ErrorPopupManager) (org.ovirt.engine.ui.uicommonweb.TypeResolver.getInstance().resolve(org.ovirt.engine.ui.uicommonweb.ErrorPopupManager.class))); popupManager.show(returnValue.getExceptionMessage()); return; } onRealSuccessCallback.onSuccess(returnValue); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getUserProfile(new org.ovirt.engine.ui.frontend.AsyncQuery(<START_MOD>new org.ovirt.engine.ui.frontend.INewAsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(java.lang.Object <END_MOD>model, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { org.ovirt.engine.core.common.businessentities.UserProfile profile = returnValue.getReturnValue(); java.lang.Boolean connectAutomatically = (profile == null) ? java.lang.Boolean.TRUE : profile.isUserPortalVmLoginAutomatically(); if (connectAutomatically) { handleConnectAutomatically(); } } })); }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getUserProfile(model.asyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { org.ovirt.engine.core.common.businessentities.UserProfile profile = returnValue.getReturnValue(); java.lang.Boolean connectAutomatically = (profile == null) ? java.lang.Boolean.TRUE : profile.isUserPortalVmLoginAutomatically(); if (connectAutomatically) { handleConnectAutomatically(); } } })); }
@java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { org.ovirt.engine.core.common.businessentities.UserProfile profile = returnValue.getReturnValue(); java.lang.Boolean connectAutomatically = (profile == null) ? java.lang.Boolean.TRUE : profile.isUserPortalVmLoginAutomatically(); if (connectAutomatically) { handleConnectAutomatically(); } }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { org.ovirt.engine.core.common.businessentities.UserProfile profile = returnValue.getReturnValue(); java.lang.Boolean connectAutomatically = (profile == null) ? java.lang.Boolean.TRUE : profile.isUserPortalVmLoginAutomatically(); if (connectAutomatically) { handleConnectAutomatically(); } }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object target, java.util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects><START_MOD> returnValue<END_MOD>) <START_MOD>{ spice.getOptions().setWanDisableEffects<END_MOD>(returnValue); }	@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects> returnValue) { spice.getOptions().setWanDisableEffects(returnValue); }
@java.lang.Override public void onSuccess(java.lang.Object target, org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth<START_MOD> returnValue<END_MOD>) <START_MOD>{ spice.getOptions().setWanColorDepth<END_MOD>(returnValue); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth returnValue) { spice.getOptions().setWanColorDepth(returnValue); }
private void updateWanColorDepthOptions(final org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getWANColorDepth(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth<START_MOD> returnValue<END_MOD>) <START_MOD>{ spice.getOptions().setWanColorDepth<END_MOD>(returnValue); } })); }	private void updateWanColorDepthOptions(final org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getWANColorDepth(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth returnValue) { spice.getOptions().setWanColorDepth(returnValue); } })); }
private void updateWANDisableEffects(final org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getWANDisableEffects(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects>><END_MOD>() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object target, java.util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects><START_MOD> returnValue<END_MOD>) <START_MOD>{ spice.getOptions().setWanDisableEffects<END_MOD>(returnValue); } })); }	private void updateWANDisableEffects(final org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getWANDisableEffects(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects>>() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects> returnValue) { spice.getOptions().setWanDisableEffects(returnValue); } })); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.<START_MOD>Integer<END_MOD> returnValue) { maxSpmPriority = returnValue; InitSpmPriorities1(); }	@java.lang.Override public void onSuccess(java.lang.Integer returnValue) { maxSpmPriority = returnValue; InitSpmPriorities1(); }
@java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.ClusterPolicy> list = returnValue.getReturnValue(); getClusterPolicy().setItems(list); org.ovirt.engine.core.common.scheduling.ClusterPolicy defaultClusterPolicy = null; org.ovirt.engine.core.common.scheduling.ClusterPolicy selectedClusterPolicy = null; for (org.ovirt.engine.core.common.scheduling.ClusterPolicy clusterPolicy : list) { if (((getIsEdit()) && ((getEntity()) != null)) && (clusterPolicy.getId().equals(getEntity().getClusterPolicyId()))) { selectedClusterPolicy = clusterPolicy; } if (clusterPolicy.isDefaultPolicy()) { defaultClusterPolicy = clusterPolicy; } } if (selectedClusterPolicy != null) { getClusterPolicy().setSelectedItem(selectedClusterPolicy); } else { getClusterPolicy().setSelectedItem(defaultClusterPolicy); } clusterPolicyChanged(); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.ClusterPolicy> list = returnValue.getReturnValue(); getClusterPolicy().setItems(list); org.ovirt.engine.core.common.scheduling.ClusterPolicy defaultClusterPolicy = null; org.ovirt.engine.core.common.scheduling.ClusterPolicy selectedClusterPolicy = null; for (org.ovirt.engine.core.common.scheduling.ClusterPolicy clusterPolicy : list) { if (((getIsEdit()) && ((getEntity()) != null)) && (clusterPolicy.getId().equals(getEntity().getClusterPolicyId()))) { selectedClusterPolicy = clusterPolicy; } if (clusterPolicy.isDefaultPolicy()) { defaultClusterPolicy = clusterPolicy; } } if (selectedClusterPolicy != null) { getClusterPolicy().setSelectedItem(selectedClusterPolicy); } else { getClusterPolicy().setSelectedItem(defaultClusterPolicy); } clusterPolicyChanged(); }
private void loadCurrentClusterManagementNetwork() { org.ovirt.engine.ui.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider.AsyncDataProvider.getInstance().getManagementNetwork(<END_MOD>new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.businessentities.network.Network><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, org.ovirt.engine.core.common.businessentities.network.Network <START_MOD>managementNetwork1<END_MOD>) <START_MOD>{<END_MOD> getManagementNetwork().setSelectedItem(<START_MOD>managementNetwork1<END_MOD>); } }), getEntity().getId()); }	private void loadCurrentClusterManagementNetwork() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getManagementNetwork(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.businessentities.network.Network>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.network.Network managementNetwork1) { getManagementNetwork().setSelectedItem(managementNetwork1); } }), getEntity().getId()); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.<START_MOD>Boolean<END_MOD> returnValue) { isAnyHostUpInCluster = returnValue; updateOptionsNonLocalFS(); }	@java.lang.Override public void onSuccess(java.lang.Boolean returnValue) { isAnyHostUpInCluster = returnValue; updateOptionsNonLocalFS(); }
@java.lang.Override public void onSuccess(java.lang.Object model, org.ovirt.engine.core.common.businessentities.network.Network <START_MOD>managementNetwork1<END_MOD>) <START_MOD>{<END_MOD> getManagementNetwork().setSelectedItem(<START_MOD>managementNetwork1<END_MOD>); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.network.Network managementNetwork1) { getManagementNetwork().setSelectedItem(managementNetwork1); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> dcNetworks<START_MOD>) { if ((getDataCenter().getSelectedItem()) == null) { return; } getManagementNetwork().setItems(dcNetworks); if (defaultManagementNetworkCache.containsKey(dataCenterId)) { final org.ovirt.engine.core.common.businessentities.network.Network defaultManagementNetwork<END_MOD> = <START_MOD>defaultManagementNetworkCache.get(dataCenterId); setSelectedDefaultManagementNetwork(defaultManagementNetwork); } else { final org.ovirt.engine.ui.frontend.AsyncQuery getDefaultManagementNetworkQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<END_MOD><org.ovirt.engine.core.common.businessentities.network.Network>() { @java.lang.Override public void onSuccess(java.lang.Object model, org.ovirt.engine.core.common.businessentities.network.Network defaultManagementNetwork<START_MOD>) {<END_MOD> defaultManagementNetworkCache.put(dataCenterId, defaultManagementNetwork); setSelectedDefaultManagementNetwork(defaultManagementNetwork); } }); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDefaultManagementNetwork(getDefaultManagementNetworkQuery, dataCenterId); } }	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> dcNetworks) { if ((getDataCenter().getSelectedItem()) == null) { return; } getManagementNetwork().setItems(dcNetworks); if (defaultManagementNetworkCache.containsKey(dataCenterId)) { final org.ovirt.engine.core.common.businessentities.network.Network defaultManagementNetwork = defaultManagementNetworkCache.get(dataCenterId); setSelectedDefaultManagementNetwork(defaultManagementNetwork); } else { final org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery getDefaultManagementNetworkQuery = new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.businessentities.network.Network>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.network.Network defaultManagementNetwork) { defaultManagementNetworkCache.put(dataCenterId, defaultManagementNetwork); setSelectedDefaultManagementNetwork(defaultManagementNetwork); } }); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDefaultManagementNetwork(getDefaultManagementNetworkQuery, dataCenterId); } }
@java.lang.Override public void onSuccess(java.lang.Object target, java.<START_MOD>util<END_MOD>.<START_MOD>List<org.ovirt.engine.core.common.businessentities.VDS><END_MOD> returnValue) { hosts = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); updateOptionsNonLocalFS(); }	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> returnValue) { hosts = returnValue; updateOptionsNonLocalFS(); }
private void updateOptionsLocalFSData() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getLocalStorageHost(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.businessentities.VDS><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, org.ovirt.engine.core.common.businessentities.VDS<START_MOD> returnValue<END_MOD>) <START_MOD>{ localStorageHost = <END_MOD>returnValue; updateOptionsLocalFS(); } }), dataCenter.getName()); }	private void updateOptionsLocalFSData() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getLocalStorageHost(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.businessentities.VDS>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.VDS returnValue) { localStorageHost = returnValue; updateOptionsLocalFS(); } }), dataCenter.getName()); }
@java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.PolicyUnit> policyUnits = returnValue.getReturnValue(); policyUnitMap = new java.util.LinkedHashMap(); for (org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit : policyUnits) { policyUnitMap.put(policyUnit.getId(), policyUnit); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetClusterPolicies, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), new org.ovirt.engine.ui.frontend.AsyncQuery(<START_MOD>new org.ovirt.engine.ui.frontend.INewAsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(java.lang.Object <END_MOD>model, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.ClusterPolicy> list = returnValue.getReturnValue(); getClusterPolicy().setItems(list); org.ovirt.engine.core.common.scheduling.ClusterPolicy defaultClusterPolicy = null; org.ovirt.engine.core.common.scheduling.ClusterPolicy selectedClusterPolicy = null; for (org.ovirt.engine.core.common.scheduling.ClusterPolicy clusterPolicy : list) { if (((getIsEdit()) && ((getEntity()) != null)) && (clusterPolicy.getId().equals(getEntity().getClusterPolicyId()))) { selectedClusterPolicy = clusterPolicy; } if (clusterPolicy.isDefaultPolicy()) { defaultClusterPolicy = clusterPolicy; } } if (selectedClusterPolicy != null) { getClusterPolicy().setSelectedItem(selectedClusterPolicy); } else { getClusterPolicy().setSelectedItem(defaultClusterPolicy); } clusterPolicyChanged(); } })); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.PolicyUnit> policyUnits = returnValue.getReturnValue(); policyUnitMap = new java.util.LinkedHashMap(); for (org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit : policyUnits) { policyUnitMap.put(policyUnit.getId(), policyUnit); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetClusterPolicies, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.ClusterPolicy> list = returnValue.getReturnValue(); getClusterPolicy().setItems(list); org.ovirt.engine.core.common.scheduling.ClusterPolicy defaultClusterPolicy = null; org.ovirt.engine.core.common.scheduling.ClusterPolicy selectedClusterPolicy = null; for (org.ovirt.engine.core.common.scheduling.ClusterPolicy clusterPolicy : list) { if (((getIsEdit()) && ((getEntity()) != null)) && (clusterPolicy.getId().equals(getEntity().getClusterPolicyId()))) { selectedClusterPolicy = clusterPolicy; } if (clusterPolicy.isDefaultPolicy()) { defaultClusterPolicy = clusterPolicy; } } if (selectedClusterPolicy != null) { getClusterPolicy().setSelectedItem(selectedClusterPolicy); } else { getClusterPolicy().setSelectedItem(defaultClusterPolicy); } clusterPolicyChanged(); } })); }
@java.lang.Override public void onSuccess(java.lang.Object model, org.ovirt.engine.core.common.businessentities.network.Network defaultManagementNetwork) <START_MOD>{<END_MOD> defaultManagementNetworkCache.put(dataCenterId, defaultManagementNetwork); setSelectedDefaultManagementNetwork(defaultManagementNetwork); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.network.Network defaultManagementNetwork) { defaultManagementNetworkCache.put(dataCenterId, defaultManagementNetwork); setSelectedDefaultManagementNetwork(defaultManagementNetwork); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.<START_MOD>Boolean<END_MOD> returnValue) { setAllowClusterWithVirtGlusterEnabled(returnValue); }	@java.lang.Override public void onSuccess(java.lang.Boolean returnValue) { setAllowClusterWithVirtGlusterEnabled(returnValue); }
private void InitSpmPriorities1() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDefaultSpmPriority(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.lang.Integer><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.<START_MOD>Integer<END_MOD> returnValue) { defaultSpmPriority = returnValue; InitSpmPriorities2(); } })); }	private void InitSpmPriorities1() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDefaultSpmPriority(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.lang.Integer>() { @java.lang.Override public void onSuccess(java.lang.Integer returnValue) { defaultSpmPriority = returnValue; InitSpmPriorities2(); } })); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.<START_MOD>Integer<END_MOD> returnValue) { defaultSpmPriority = returnValue; InitSpmPriorities2(); }	@java.lang.Override public void onSuccess(java.lang.Integer returnValue) { defaultSpmPriority = returnValue; InitSpmPriorities2(); }
private void InitSpmPriorities() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getMaxSpmPriority(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.lang.Integer><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.<START_MOD>Integer<END_MOD> returnValue) { maxSpmPriority = returnValue; InitSpmPriorities1(); } })); }	private void InitSpmPriorities() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getMaxSpmPriority(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.lang.Integer>() { @java.lang.Override public void onSuccess(java.lang.Integer returnValue) { maxSpmPriority = returnValue; InitSpmPriorities1(); } })); }
@java.lang.Override public void onSuccess(java.lang.Object target, org.ovirt.engine.core.common.businessentities.StoragePool<START_MOD> returnValue<END_MOD>) <START_MOD>{ dataCenter = <END_MOD>returnValue; if (((dataCenter) == null) || (!(dataCenter.isLocal()))) { updateOptionsNonLocalFSData(); } else { updateOptionsLocalFSData(); } }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.StoragePool returnValue) { dataCenter = returnValue; if (((dataCenter) == null) || (!(dataCenter.isLocal()))) { updateOptionsNonLocalFSData(); } else { updateOptionsLocalFSData(); } }
@java.lang.Override public void onSuccess(java.lang.Object model, java.<START_MOD>util.List<java.<END_MOD>lang.<START_MOD>String><END_MOD> <START_MOD>domains<END_MOD>) { setIsConnecting(false); if (<START_MOD>domains<END_MOD> == null) { setMessages(java.util.Arrays.asList(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().couldNotConnectToOvirtEngineServiceMsg())); return; } if (!(loggingInAutomatically)) { getUserName().setIsChangeable(true); getPassword().setIsChangeable(true); getProfile().setIsChangeable(true); } java.util.Collections.sort(domains); getProfile().setItems(domains); }	@java.lang.Override public void onSuccess(java.util.List<java.lang.String> domains) { if (domains == null) { setMessages(java.util.Arrays.asList(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().couldNotConnectToOvirtEngineServiceMsg())); return; } if (!(loggingInAutomatically)) { getUserName().setIsChangeable(true); getProfile().setIsChangeable(true); } java.util.Collections.sort(domains); getProfile().setItems(domains); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.Bookmark> resultList = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue(); if (resultList != null) { java.util.Collections.sort(resultList, org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel.COMPARATOR); } setIsBookmarkInitiated(true); bookmarkListModel.setItems(resultList); setIsBookmarkInitiated(false); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.Bookmark> resultList = returnValue.getReturnValue(); if (resultList != null) { java.util.Collections.sort(resultList, org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel.COMPARATOR); } setIsBookmarkInitiated(true); setItems(resultList); setIsBookmarkInitiated(false); }
@java.lang.Override protected void syncSearch() { super.syncSearch(); org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.Bookmark> resultList = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue(); if (resultList != null) { java.util.Collections.sort(resultList, org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel.COMPARATOR); } setIsBookmarkInitiated(true); bookmarkListModel.setItems(resultList); setIsBookmarkInitiated(false); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllBookmarks, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), _asyncQuery); }	@java.lang.Override protected void syncSearch() { super.syncSearch(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllBookmarks, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), new org.ovirt.engine.ui.uicommonweb.models.bookmarks.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.Bookmark> resultList = returnValue.getReturnValue(); if (resultList != null) { java.util.Collections.sort(resultList, org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel.COMPARATOR); } setIsBookmarkInitiated(true); setItems(resultList); setIsBookmarkInitiated(false); } })); }
@java.lang.Override protected void syncSearch() { super.syncSearch(); org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD> asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { setItems(((java.util.Collection) (returnValue.getReturnValue()))); } }); org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters(getEntity().getId()); params.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAttachedClustersByClusterPolicyId, params, asyncQuery); setIsQueryFirstTime(false); }	@java.lang.Override protected void syncSearch() { super.syncSearch(); org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters(getEntity().getId()); params.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAttachedClustersByClusterPolicyId, params, new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.SetItemsAsyncQuery()); setIsQueryFirstTime(false); }
@java.lang.Override public void onSuccess(java.lang.Object target, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { org.ovirt.engine.core.common.businessentities.VM localVm = getEntity(); if (localVm == null) { return; } java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> hosts = returnValue.getReturnValue(); if ((localVm.getDedicatedVmForVdsList().size()) > 0) { java.lang.String defaultHost = ""; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (localVm.getDedicatedVmForVdsList().contains(host.getId())) { if (defaultHost.isEmpty()) { defaultHost = host.getName(); } else { defaultHost +=     + (host.getName()); } } } setDefaultHost(defaultHost); } }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { org.ovirt.engine.core.common.businessentities.VM localVm = getEntity(); if (localVm == null) { return; } java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> hosts = returnValue.getReturnValue(); if ((localVm.getDedicatedVmForVdsList().size()) > 0) { java.lang.String defaultHost = ""; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (localVm.getDedicatedVmForVdsList().contains(host.getId())) { if (defaultHost.isEmpty()) { defaultHost = host.getName(); } else { defaultHost += ", " + (host.getName()); } } } setDefaultHost(defaultHost); } }
@java.lang.Override public void onSuccess(java.lang.Object target, <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.queries.VdcQueryReturnValue<END_MOD> result) { org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = result.getReturnValue(); if (dbUser != null) { setCreatedByUser(getUserName(dbUser)); } }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue result) { org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = result.getReturnValue(); if (dbUser != null) { setCreatedByUser(getUserName(dbUser)); } }
@java.lang.Override public void onSuccess(java.lang.Object target, <START_MOD>org.ovirt.engine.core.common.businessentities.VM vm<END_MOD>) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (getWindow())); org.ovirt.engine.ui.uicommonweb.models.vms.CloneVmFromSnapshotModelBehavior behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.CloneVmFromSnapshotModelBehavior) (model.getBehavior())); <START_MOD>behavior.setVm(<END_MOD>vm); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cloneVmFromSnapshotTitle()); model.setHelpTag(HelpTag.clone_vm_from_snapshot); model.setHashName("clone_vm_from_snapshot"); model.setCustomPropertiesKeysList(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getCustomPropertiesList()); model.initialize(getSystemTreeSelectedItem()); org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand switchModeCommand = new org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand(); switchModeCommand.init(model); model.getCommands().add(switchModeCommand); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnCloneVM", <START_MOD>this<END_MOD>); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", <START_MOD>this<END_MOD>); model.getCommands().add(tempVar2); stopProgress(); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (getWindow())); org.ovirt.engine.ui.uicommonweb.models.vms.CloneVmFromSnapshotModelBehavior behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.CloneVmFromSnapshotModelBehavior) (model.getBehavior())); behavior.setVm(vm); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cloneVmFromSnapshotTitle()); model.setHelpTag(HelpTag.clone_vm_from_snapshot); model.setHashName("clone_vm_from_snapshot"); model.setCustomPropertiesKeysList(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getCustomPropertiesList()); model.initialize(getSystemTreeSelectedItem()); org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand switchModeCommand = new org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand(); switchModeCommand.init(model); model.getCommands().add(switchModeCommand); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnCloneVM", this); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); model.getCommands().add(tempVar2); stopProgress(); }
private void onNewInstanceType() { if (!(((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (getWindow())).validateInstanceTypePart())) { return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isTemplateNameUnique(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.lang.Boolean><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.<START_MOD>Boolean<END_MOD> isNameUnique<START_MOD>) { if (isNameUnique) { postInstanceTypeNameUniqueCheck(); } else { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel VmModel<END_MOD> = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel<START_MOD>) (getWindow())); VmModel.getInvalidityReasons().clear(); VmModel.getName().getInvalidityReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason()); VmModel.getName().setIsValid(false); VmModel.setIsValid(false); } } }),<END_MOD> ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (getWindow())).getName().<START_MOD>getEntity(<END_MOD>), null); }	private void onNewInstanceType() { if (!(((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (getWindow())).validateInstanceTypePart())) { return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isTemplateNameUnique(new org.ovirt.engine.ui.uicommonweb.models.configure.instancetypes.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.lang.Boolean>() { @java.lang.Override public void onSuccess(java.lang.Boolean isNameUnique) { if (isNameUnique) { postInstanceTypeNameUniqueCheck(); } else { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel VmModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (getWindow())); VmModel.getInvalidityReasons().clear(); VmModel.getName().getInvalidityReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason()); VmModel.getName().setIsValid(false); VmModel.setIsValid(false); } } }), ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (getWindow())).getName().getEntity(), null); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.<START_MOD>Boolean<END_MOD> <START_MOD>isNameUnique<END_MOD>) { if (isNameUnique) { postInstanceTypeNameUniqueCheck(); } else { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel VmModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (getWindow())); VmModel.getInvalidityReasons().clear(); VmModel.getName().getInvalidityReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason()); VmModel.getName().setIsValid(false); VmModel.setIsValid(false); } }	@java.lang.Override public void onSuccess(java.lang.Boolean isNameUnique) { if (isNameUnique) { postInstanceTypeNameUniqueCheck(); } else { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel VmModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (getWindow())); VmModel.getInvalidityReasons().clear(); VmModel.getName().getInvalidityReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason()); VmModel.getName().setIsValid(false); VmModel.setIsValid(false); } }
@java.lang.Override public void onSuccess(java.lang.Object parentModel, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsAttachedToInstanceType = returnValue.getReturnValue(); if ((vmsAttachedToInstanceType == null) || ((vmsAttachedToInstanceType.size()) == 0)) { window.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeInstanceTypeTitle()); window.setItems(java.util.Arrays.asList(getSelectedItem().getName())); } else { java.util.List<java.lang.String> attachedVmsNames = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : vmsAttachedToInstanceType) { attachedVmsNames.add(vm.getName()); } java.util.Collections.sort(attachedVmsNames); window.setItems(attachedVmsNames); window.getLatch().setIsAvailable(true); window.getLatch().setIsChangeable(true); window.setNote(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().vmsAttachedToInstanceTypeNote()); window.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().vmsAttachedToInstanceTypeWarningMessage()); } window.stopProgress(); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsAttachedToInstanceType = returnValue.getReturnValue(); if ((vmsAttachedToInstanceType == null) || ((vmsAttachedToInstanceType.size()) == 0)) { window.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeInstanceTypeTitle()); window.setItems(java.util.Arrays.asList(getSelectedItem().getName())); } else { java.util.List<java.lang.String> attachedVmsNames = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : vmsAttachedToInstanceType) { attachedVmsNames.add(vm.getName()); } java.util.Collections.sort(attachedVmsNames); window.setItems(attachedVmsNames); window.getLatch().setIsAvailable(true); window.getLatch().setIsChangeable(true); window.setNote(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().vmsAttachedToInstanceTypeNote()); window.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().vmsAttachedToInstanceTypeWarningMessage()); } window.stopProgress(); }
@java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); getModel().setRngDevice(rngDevice); } }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); getModel().setRngDevice(rngDevice); } }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.<START_MOD>Boolean<END_MOD> returnValue) { getModel().getIsSoundcardEnabled().setEntity(returnValue); }	@java.lang.Override public void onSuccess(java.lang.Boolean returnValue) { getModel().getIsSoundcardEnabled().setEntity(returnValue); }
@java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); getModel().setRngDevice(rngDevice); } }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); getModel().setRngDevice(rngDevice); } }
@java.lang.Override public void onSuccess(java.lang.Object target, org.ovirt.engine.<START_MOD>core<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>queries<END_MOD>.<START_MOD>VdcQueryReturnValue<END_MOD> <START_MOD>returnValue<END_MOD>) <START_MOD>{<END_MOD> @java.lang.SuppressWarnings("unchecked") java.util.Collection<org.ovirt.engine.core.common.businessentities.VmWatchdog> watchdogs = returnValue.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog : watchdogs) { <START_MOD>getModel()<END_MOD>.getWatchdogAction().setSelectedItem(watchdog.getAction()); <START_MOD>getModel()<END_MOD>.getWatchdogModel().setSelectedItem(watchdog.getModel()); } }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { @java.lang.SuppressWarnings("unchecked") java.util.Collection<org.ovirt.engine.core.common.businessentities.VmWatchdog> watchdogs = returnValue.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog : watchdogs) { getModel().getWatchdogAction().setSelectedItem(watchdog.getAction()); getModel().getWatchdogModel().setSelectedItem(watchdog.getModel()); } }
protected void initSoundCard(org.ovirt.engine.core.compat.Guid id) { getInstance().isSoundcardEnabled(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.lang.Boolean><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.<START_MOD>Boolean<END_MOD> returnValue) { getModel().getIsSoundcardEnabled().setEntity(returnValue); } }), id); }	protected void initSoundCard(org.ovirt.engine.core.compat.Guid id) { getInstance().isSoundcardEnabled(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.lang.Boolean>() { @java.lang.Override public void onSuccess(java.lang.Boolean returnValue) { getModel().getIsSoundcardEnabled().setEntity(returnValue); } }), id); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.StoragePool> allDataCenters) { @java.<END_MOD>lang.<START_MOD>SuppressWarnings("unchecked") java.util.List<<END_MOD>org.ovirt.engine.ui.uicommonweb.models.<START_MOD>EntityModel<org.ovirt.engine.core.common.businessentities.StoragePool>> filteredDataCenters<END_MOD> = <START_MOD>new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenters = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : allDataCenters) { if ((getEntity().getCompatibilityVersion().compareTo(dataCenter.getCompatibilityVersion())) >= 0) { if (dataCenter.isLocal()) { localDataCenters.add(dataCenter); } else { filteredDataCenters.add(new <END_MOD>org.ovirt.engine.ui.uicommonweb.models.EntityModel<START_MOD>(dataCenter)); } } }<END_MOD> if (<START_MOD>localDataCenters.isEmpty()) { displayAddDataCenter(filteredDataCenters<END_MOD>); } else { verifyLocalDataCenterNoCluster(filteredDataCenters, localDataCenters); } }	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> allDataCenters) { @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.StoragePool>> filteredDataCenters = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenters = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : allDataCenters) { if ((getEntity().getCompatibilityVersion().compareTo(dataCenter.getCompatibilityVersion())) >= 0) { if (dataCenter.isLocal()) { localDataCenters.add(dataCenter); } else { filteredDataCenters.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(dataCenter)); } } } if (localDataCenters.isEmpty()) { displayAddDataCenter(filteredDataCenters); } else { verifyLocalDataCenterNoCluster(filteredDataCenters, localDataCenters); } }
@java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> graphicsDevices = returnValue.getReturnValue(); java.util.Set<org.ovirt.engine.core.common.businessentities.GraphicsType> graphicsTypesCollection = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.GraphicsDevice graphicsDevice : graphicsDevices) { graphicsTypesCollection.add(graphicsDevice.getGraphicsType()); } initDisplayTypes(entity.getDefaultDisplayType(), UnitVmModel.GraphicsTypes.fromGraphicsTypes(graphicsTypesCollection)); doBuild(); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> graphicsDevices = returnValue.getReturnValue(); java.util.Set<org.ovirt.engine.core.common.businessentities.GraphicsType> graphicsTypesCollection = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.GraphicsDevice graphicsDevice : graphicsDevices) { graphicsTypesCollection.add(graphicsDevice.getGraphicsType()); } initDisplayTypes(entity.getDefaultDisplayType(), UnitVmModel.GraphicsTypes.fromGraphicsTypes(graphicsTypesCollection)); doBuild(); }
@java.lang.Override public void onSuccess(java.lang.Object target, org.ovirt.engine.<START_MOD>core<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>queries<END_MOD>.<START_MOD>VdcQueryReturnValue<END_MOD> <START_MOD>returnValue<END_MOD>) <START_MOD>{<END_MOD> @java.lang.SuppressWarnings("unchecked") Collection<org.ovirt.engine.core.common.businessentities.VmWatchdog> watchdogs = returnValue.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog : watchdogs) { <START_MOD>getModel()<END_MOD>.getWatchdogAction().setSelectedItem(watchdog.getAction()); <START_MOD>getModel()<END_MOD>.getWatchdogModel().setSelectedItem(watchdog.getModel()); } }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { @java.lang.SuppressWarnings("unchecked") Collection<org.ovirt.engine.core.common.businessentities.VmWatchdog> watchdogs = returnValue.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog : watchdogs) { getModel().getWatchdogAction().setSelectedItem(watchdog.getAction()); getModel().getWatchdogModel().setSelectedItem(watchdog.getModel()); } }
protected void updateOptionsRequiredAddDataCenter(final java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenters) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterList(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.Cluster> <END_MOD>clusters<START_MOD>) { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenterWithCluster<END_MOD> = <START_MOD>new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { for (org.ovirt.engine.core.common.businessentities.Cluster cluster : <END_MOD>clusters<START_MOD>) { if (((cluster.getStoragePoolId()) != null) && (cluster.getStoragePoolId().equals(dataCenter.getId()))) {<END_MOD> localDataCenterWithCluster<START_MOD>.add(<END_MOD>dataCenter<START_MOD>); break; } } }<END_MOD> localDataCenters<START_MOD>.removeAll(<END_MOD>localDataCenterWithCluster<START_MOD>); updateOptionsRequiredAddDataCenter((!(<END_MOD>localDataCenters.isEmpty()))); } })); }	protected void updateOptionsRequiredAddDataCenter(final java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenters) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterList(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>>() { @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters) { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenterWithCluster = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if (((cluster.getStoragePoolId()) != null) && (cluster.getStoragePoolId().equals(dataCenter.getId()))) { localDataCenterWithCluster.add(dataCenter); break; } } } localDataCenters.removeAll(localDataCenterWithCluster); updateOptionsRequiredAddDataCenter((!(localDataCenters.isEmpty()))); } })); }
public void getClusterById(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><org.ovirt.engine.core.common.businessentities.Cluster><END_MOD> aQuery, org.ovirt.engine.core.compat.Guid id) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><org.ovirt.engine.core.common.businessentities.Cluster><END_MOD>() { @java.lang.Override public <START_MOD>org.ovirt.engine.core.common.businessentities.Cluster convert(<END_MOD>java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><org.ovirt.engine.core.common.businessentities.Cluster><END_MOD> _asyncQuery) { return <START_MOD>((org.ovirt.engine.core.common.businessentities.Cluster) (<END_MOD>source<START_MOD>))<END_MOD>; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetClusterById, new org.ovirt.engine.core.common.queries.IdQueryParameters(id), aQuery); }	public void getClusterById(org.ovirt.engine.ui.frontend.AsyncQuery<org.ovirt.engine.core.common.businessentities.Cluster> aQuery, org.ovirt.engine.core.compat.Guid id) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetClusterById, new org.ovirt.engine.core.common.queries.IdQueryParameters(id), aQuery); }
public void runQuery(org.ovirt.engine.core.compat.Guid guid) { startProgress("getCount"); org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncQuery<END_MOD> = new org.ovirt.engine.ui.frontend.AsyncQuery(); <START_MOD>asyncQuery<END_MOD>.setHandleFailure(true); <START_MOD>asyncQuery<END_MOD>.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { stopProgress(); org.ovirt.engine.<START_MOD>core.common.businessentities.ErrataCounts resultEntity = returnValue.getReturnValue(); setMessage(null); if ((resultEntity != null) && (returnValue.getSucceeded())) { setErrataCounts(resultEntity); } else { setMessage((((org.ovirt.engine.<END_MOD>ui.uicommonweb.models.AbstractErrataCountModel<START_MOD>.constants.katelloProblemRetrievingErrata()) +     + (returnValue.getExceptionMessage()))); } } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(getQueryType(), new<END_MOD> org.ovirt.engine.core.common.queries.<START_MOD>GetErrataCountsParameters(guid<END_MOD>), <START_MOD>asyncQuery); }<END_MOD>	public void runQuery(org.ovirt.engine.core.compat.Guid guid) { startProgress("getCount"); org.ovirt.engine.ui.uicommonweb.models.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncQuery = new org.ovirt.engine.ui.uicommonweb.models.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { stopProgress(); org.ovirt.engine.core.common.businessentities.ErrataCounts resultEntity = returnValue.getReturnValue(); setMessage(null); if ((resultEntity != null) && (returnValue.getSucceeded())) { setErrataCounts(resultEntity); } else { setMessage((((org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel.constants.katelloProblemRetrievingErrata()) + " ") + (returnValue.getExceptionMessage()))); } } }); asyncQuery.setHandleFailure(true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(getQueryType(), new org.ovirt.engine.core.common.queries.GetErrataCountsParameters(guid), asyncQuery); }
@java.lang.Override public void onSuccess(java.lang.Object model, org.ovirt.engine.core.common.businessentities.Cluster<START_MOD> cluster<END_MOD>) <START_MOD>{ clusterSnapshotConfigModel.getClusters().setItems<END_MOD>(returnValue, <START_MOD>cluster<END_MOD>); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.Cluster cluster) { clusterSnapshotConfigModel.getClusters().setItems(returnValue, cluster); }
@java.lang.Override public void onSuccess(java.lang.Object target, org.ovirt.engine.<START_MOD>core<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>businessentities<END_MOD>.<START_MOD>Tags<END_MOD> <START_MOD>returnValue<END_MOD>) <START_MOD>{<END_MOD> org.ovirt.engine.ui.uicommonweb.models.tags.TagModel rootTag = tagToModel(returnValue); rootTag.getName().setEntity(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().rootTag()); rootTag.setType(TagModelType.Root); rootTag.setIsChangeable(false); setItems(new java.util.ArrayList(java.util.Arrays.asList(new org.ovirt.engine.ui.uicommonweb.models.tags.TagModel[]{ rootTag }))); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.Tags returnValue) { org.ovirt.engine.ui.uicommonweb.models.tags.TagModel rootTag = tagToModel(returnValue); rootTag.getName().setEntity(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().rootTag()); rootTag.setType(TagModelType.Root); rootTag.setIsChangeable(false); setItems(new java.util.ArrayList(java.util.Arrays.asList(new org.ovirt.engine.ui.uicommonweb.models.tags.TagModel[]{ rootTag }))); }
public void getHostListByStatus(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.VDS>><END_MOD> aQuery, org.ovirt.engine.core.common.businessentities.VDSStatus status, boolean doRefresh) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.VDS>><END_MOD>() { @java.lang.Override public java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.VDS> convert(java.<END_MOD>lang.Object <START_MOD>source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { return org.ovirt.engine.ui.uicommonweb.Linq.cast((<END_MOD>(java.lang.<START_MOD>Iterable) (<END_MOD>source<START_MOD>))); } return new java.util.ArrayList<>(); } }; org.ovirt.engine.core.common.queries.SearchParameters searchParameters = new org.ovirt.engine.core.common.queries.SearchParameters((   + (status == null ? "" : "status=" + (status.name()))), org.ovirt.engine.core.common.interfaces.SearchType.VDS); searchParameters.setMaxCount(9999);<END_MOD> org.ovirt.engine.ui.frontend.<START_MOD>Frontend.getInstance().runQuery(VdcQueryType.Search, (doRefresh ? searchParameters : searchParameters.withoutRefresh()), aQuery)<END_MOD>; }	public void getHostListByStatus(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<org.ovirt.engine.core.common.businessentities.VDS>> aQuery, org.ovirt.engine.core.common.businessentities.VDSStatus status, boolean doRefresh) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter(); org.ovirt.engine.core.common.queries.SearchParameters searchParameters = new org.ovirt.engine.core.common.queries.SearchParameters(("Host: " + (status == null ? "" : "status=" + (status.name()))), org.ovirt.engine.core.common.interfaces.SearchType.VDS); searchParameters.setMaxCount(9999); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.Search, (doRefresh ? searchParameters : searchParameters.withoutRefresh()), aQuery); }
@java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { deactivate(); java.util.List<java.lang.String> consoleDevices = returnValue.getReturnValue(); getModel().getIsConsoleDeviceEnabled().setEntity((!(consoleDevices.isEmpty()))); activate(); postDoUpdateManagedFieldsFrom(vmBase); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { deactivate(); java.util.List<java.lang.String> consoleDevices = returnValue.getReturnValue(); getModel().getIsConsoleDeviceEnabled().setEntity((!(consoleDevices.isEmpty()))); activate(); postDoUpdateManagedFieldsFrom(vmBase); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy><START_MOD> returnValue<END_MOD>) <START_MOD>{ migrationPolicies = <END_MOD>returnValue; }	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy> returnValue) { migrationPolicies = returnValue; }
@java.lang.Override public void onSuccess(java.lang.Object target, <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.businessentities.Cluster<END_MOD> returnValue) { onShowBrickAdvancedDetails(volumeEntity); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.Cluster returnValue) { onShowBrickAdvancedDetails(volumeEntity); }
@java.lang.Override public java.<START_MOD>util.List<org.ovirt.engine.core.common.migration.MigrationPolicy><END_MOD> convert(java.lang.Object returnValue, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { if (returnValue == null) { return new java.util.ArrayList<<START_MOD>>(); } java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy> policies = ((java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy>) (returnValue));<END_MOD> java.util.Collections.sort(<START_MOD>policies<END_MOD>, new java.util.Comparator<org.ovirt.engine.core.common.migration.MigrationPolicy>() { @java.lang.Override public int compare(org.ovirt.engine.core.common.migration.MigrationPolicy m1, org.ovirt.engine.core.common.migration.MigrationPolicy m2) { if (NoMigrationPolicy.ID.equals(m1.getId())) { return -1; } return m1.getName().compareTo(m2.getName()); } }); return <START_MOD>policies; }<END_MOD>	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy> convert(java.lang.Object returnValue) { if (returnValue == null) { return new java.util.ArrayList<>(); } java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy> policies = ((java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy>) (returnValue)); java.util.Collections.sort(policies, new java.util.Comparator<org.ovirt.engine.core.common.migration.MigrationPolicy>() { @java.lang.Override public int compare(org.ovirt.engine.core.common.migration.MigrationPolicy m1, org.ovirt.engine.core.common.migration.MigrationPolicy m2) { if (NoMigrationPolicy.ID.equals(m1.getId())) { return -1; } return m1.getName().compareTo(m2.getName()); } }); return policies; }
public void getVnicProfilesByDcId(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>><END_MOD> aQuery, org.ovirt.engine.core.compat.Guid dcId) { if ((aQuery.converterCallback) == null) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>><END_MOD>() { @java.lang.Override public java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView><END_MOD> convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<<START_MOD>>(); } return ((java.util.List<<END_MOD>org.ovirt.engine.core.common.businessentities.network.VnicProfileView><START_MOD>) (<END_MOD>source<START_MOD>))<END_MOD>; } }; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVnicProfilesByDataCenterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dcId), aQuery); }	public void getVnicProfilesByDcId(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>> aQuery, org.ovirt.engine.core.compat.Guid dcId) { if ((aQuery.converterCallback) == null) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter(); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVnicProfilesByDataCenterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dcId), aQuery); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.util.Map<java.lang.String, java.lang.String> serverMap) <START_MOD>{<END_MOD> if (!(serverMap.isEmpty())) { setHasNewGlusterHostsAlert(true); setHasAnyAlert(true); } else { setHasNewGlusterHostsAlert(false); setHasAnyAlert(false); } }	@java.lang.Override public void onSuccess(java.util.Map<java.lang.String, java.lang.String> serverMap) { if (!(serverMap.isEmpty())) { setHasNewGlusterHostsAlert(true); setHasAnyAlert(true); } else { setHasNewGlusterHostsAlert(false); setHasAnyAlert(false); } }
public void getClustersHavingHosts(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>><END_MOD> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>><END_MOD>() { @java.lang.Override public java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.Cluster><END_MOD> convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster> list = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>) (source)); java.util.Collections.sort(list, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); return list; } return new java.util.ArrayList<>(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllClustersHavingHosts, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }	public void getClustersHavingHosts(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.SortListByNameConverter(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllClustersHavingHosts, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }
@java.lang.Override public void onSuccess(java.lang.Object model, org.ovirt.engine.core.common.businessentities.gluster.GlusterClusterService swiftService) <START_MOD>{<END_MOD> if (swiftService != null) { setGlusterSwiftStatus(swiftService.getStatus()); } else { setGlusterSwiftStatus(GlusterServiceStatus.UNKNOWN); } }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.gluster.GlusterClusterService swiftService) { if (swiftService != null) { setGlusterSwiftStatus(swiftService.getStatus()); } else { setGlusterSwiftStatus(GlusterServiceStatus.UNKNOWN); } }
@java.lang.Override public void onSuccess(java.lang.Object target, org.ovirt.engine.core.common.queries.VdcQueryReturnValue<START_MOD> returnValue<END_MOD>) <START_MOD>{ boolean isConsistent = <END_MOD>returnValue.getReturnValue(); setConsoleAddressPartiallyOverridden((!isConsistent)); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { boolean isConsistent = returnValue.getReturnValue(); setConsoleAddressPartiallyOverridden((!isConsistent)); }
@java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { setNumberOfVms(((java.lang.Integer) (returnValue.getReturnValue()))); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { setNumberOfVms(((java.lang.Integer) (returnValue.getReturnValue()))); }
private void updateProperties() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getEntity(); setName(cluster.getName()); setDescription(cluster.getDescription()); setCpuType(cluster.getCpuName()); setDataCenterName(cluster.getStoragePoolName()); setMemoryOverCommit(cluster.getMaxVdsMemoryOverCommit()); setCpuThreads(cluster.getCountThreadsAsCores()); setResiliencePolicy(cluster.getMigrateOnError()); setEmulatedMachine(cluster.getEmulatedMachine()); setCompatibilityVersion(cluster.getCompatibilityVersion().getValue()); generateClusterType(cluster.supportsGlusterService(), cluster.supportsVirtService()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getNumberOfVmsInCluster(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { setNumberOfVms(((<END_MOD>java.lang.<START_MOD>Integer) (<END_MOD>returnValue.getReturnValue()))); } }), cluster.getId()); }	private void updateProperties() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getEntity(); setName(cluster.getName()); setDescription(cluster.getDescription()); setCpuType(cluster.getCpuName()); setDataCenterName(cluster.getStoragePoolName()); setMemoryOverCommit(cluster.getMaxVdsMemoryOverCommit()); setCpuThreads(cluster.getCountThreadsAsCores()); setResiliencePolicy(cluster.getMigrateOnError()); setEmulatedMachine(cluster.getEmulatedMachine()); setCompatibilityVersion(cluster.getCompatibilityVersion().getValue()); generateClusterType(cluster.supportsGlusterService(), cluster.supportsVirtService()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getNumberOfVmsInCluster(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { setNumberOfVms(((java.lang.Integer) (returnValue.getReturnValue()))); } }), cluster.getId()); }
private void updateConsoleAddressPartiallyOverridden(org.ovirt.engine.core.common.businessentities.Cluster cluster) { org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { boolean isConsistent = returnValue.getReturnValue(); setConsoleAddressPartiallyOverridden((!isConsistent)); } }); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.IsDisplayAddressConsistentInCluster, new org.ovirt.engine.core.common.queries.IdQueryParameters(cluster.getId()), query); }	private void updateConsoleAddressPartiallyOverridden(org.ovirt.engine.core.common.businessentities.Cluster cluster) { org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery query = new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { boolean isConsistent = returnValue.getReturnValue(); setConsoleAddressPartiallyOverridden((!isConsistent)); } }); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.IsDisplayAddressConsistentInCluster, new org.ovirt.engine.core.common.queries.IdQueryParameters(cluster.getId()), query); }
private void updateAlerts() { if (getEntity().supportsGlusterService()) { org.ovirt.engine.ui.<START_MOD>uicommonweb.dataprovider.AsyncDataProvider.getInstance().getGlusterHostsNewlyAdded(new org.ovirt.engine.ui.<END_MOD>frontend.AsyncQuery<START_MOD>(<END_MOD>new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><<END_MOD>java.util.Map<java.lang.String, java.lang.String><START_MOD>>() { @java.lang.Override public void onSuccess(java.lang.Object model, <END_MOD>java.util.Map<java.lang.String, java.lang.String><START_MOD> serverMap) {<END_MOD> if (!(serverMap.isEmpty())) { setHasNewGlusterHostsAlert(true); setHasAnyAlert(true); } else { setHasNewGlusterHostsAlert(false); setHasAnyAlert(false); } } }<START_MOD>)<END_MOD>, getEntity().getId(), false); } else { setHasNewGlusterHostsAlert(false); setHasAnyAlert(false); } }	private void updateAlerts() { if (getEntity().supportsGlusterService()) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getGlusterHostsNewlyAdded(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.Map<java.lang.String, java.lang.String>>() { @java.lang.Override public void onSuccess(java.util.Map<java.lang.String, java.lang.String> serverMap) { if (!(serverMap.isEmpty())) { setHasNewGlusterHostsAlert(true); setHasAnyAlert(true); } else { setHasNewGlusterHostsAlert(false); setHasAnyAlert(false); } } }), getEntity().getId(), false); } else { setHasNewGlusterHostsAlert(false); setHasAnyAlert(false); } }
private void verifyLocalDataCenterNoCluster(final java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.StoragePool>> filteredDataCenters, final java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenters) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterList(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>Cluster> clusters) { java.util.List<org.ovirt.engine.core.common.businessentities.<END_MOD>StoragePool> localDataCenterWithCluster = new java.util.ArrayList<>(); <START_MOD>for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { for (<END_MOD>org.ovirt.engine.core.common.businessentities.Cluster<START_MOD> cluster :<END_MOD> clusters<START_MOD>) { if (((cluster.getStoragePoolId()) != null) && (cluster.getStoragePoolId().equals(dataCenter.getId()))) { localDataCenterWithCluster.add(dataCenter); break; } } } localDataCenters.removeAll(localDataCenterWithCluster<END_MOD>); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { <START_MOD>filteredDataCenters.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel<END_MOD>(dataCenter<START_MOD>)); } displayAddDataCenter(<END_MOD>filteredDataCenters<START_MOD>); } })); }<END_MOD>	private void verifyLocalDataCenterNoCluster(final java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.StoragePool>> filteredDataCenters, final java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenters) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterList(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>>() { @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters) { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenterWithCluster = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if (((cluster.getStoragePoolId()) != null) && (cluster.getStoragePoolId().equals(dataCenter.getId()))) { localDataCenterWithCluster.add(dataCenter); break; } } } localDataCenters.removeAll(localDataCenterWithCluster); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { filteredDataCenters.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(dataCenter)); } displayAddDataCenter(filteredDataCenters); } })); }
public void getClusterListByService(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>><END_MOD> aQuery, final boolean supportsVirtService, final boolean supportsGlusterService) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>><END_MOD>() { @java.lang.Override public java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.Cluster> convert(java.<END_MOD>lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>><END_MOD> _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster> list = getClusterByServiceList(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>) (source)), supportsVirtService, supportsGlusterService); java.util.Collections.sort(list, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); return list; } return new java.util.ArrayList<>(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllClusters, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }	public void getClusterListByService(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>> aQuery, final boolean supportsVirtService, final boolean supportsGlusterService) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.Converter<java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>>() { @java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> convert(java.lang.Object source) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster> list = getClusterByServiceList(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>) (source)), supportsVirtService, supportsGlusterService); java.util.Collections.sort(list, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); return list; } return new java.util.ArrayList<>(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllClusters, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }
public void getClusterList(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>><END_MOD> aQuery, org.ovirt.engine.core.compat.Guid dataCenterId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>><END_MOD>() { @java.lang.Override public java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.Cluster> convert(java.<END_MOD>lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster> list = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>) (source)); java.util.Collections.sort(list, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); return list; } return new java.util.ArrayList<>(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetClustersByStoragePoolId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId), aQuery); }	public void getClusterList(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>> aQuery, org.ovirt.engine.core.compat.Guid dataCenterId) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.SortListByNameConverter(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetClustersByStoragePoolId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId), aQuery); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.util.List<org.ovirt.engine.<START_MOD>core.common.businessentities.gluster.GlusterServerService> returnValue) { java.util.List<org.ovirt.engine.<END_MOD>ui.uicommonweb.models.clusters.GlusterSwiftServiceModel> serviceList = getGroupedGlusterSwiftServices(returnValue)<START_MOD>; glusterSwiftModel<END_MOD>.getHostServicesList().setItems(serviceList); <START_MOD>glusterSwiftModel<END_MOD>.stopProgress(); org.ovirt.engine.ui.uicommonweb.UICommand command = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnManageGlusterSwift", this); <START_MOD>glusterSwiftModel<END_MOD>.getCommands().add(command); command = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); command.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().close()); command.setIsCancel(true); <START_MOD>glusterSwiftModel<END_MOD>.getCommands().add(command); }	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService> returnValue) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.clusters.GlusterSwiftServiceModel> serviceList = getGroupedGlusterSwiftServices(returnValue); glusterSwiftModel.getHostServicesList().setItems(serviceList); glusterSwiftModel.stopProgress(); org.ovirt.engine.ui.uicommonweb.UICommand command = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnManageGlusterSwift", this); glusterSwiftModel.getCommands().add(command); command = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); command.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().close()); command.setIsCancel(true); glusterSwiftModel.getCommands().add(command); }
@java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { deactivate(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); getModel().setRngDevice(rngDevice); } activate(); updateVirtioScsi(vmBase); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { deactivate(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); getModel().setRngDevice(rngDevice); } activate(); updateVirtioScsi(vmBase); }
private void showBrickAdvancedDetails() { final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getEntity(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterById(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.businessentities.Cluster><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.businessentities.Cluster<END_MOD> returnValue) { onShowBrickAdvancedDetails(volumeEntity); } }), volumeEntity.getClusterId()); }	private void showBrickAdvancedDetails() { final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getEntity(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterById(new org.ovirt.engine.ui.uicommonweb.models.gluster.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.businessentities.Cluster>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.Cluster returnValue) { onShowBrickAdvancedDetails(volumeEntity); } }), volumeEntity.getClusterId()); }
public void getWANColorDepth(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth><END_MOD> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth><END_MOD>() { @java.lang.Override public <START_MOD>org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth<END_MOD> convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth><END_MOD> _asyncQuery) { return source != null ? org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth.fromInt(((java.lang.Integer) (source))) : org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth.depth16; } }; getConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.WANColorDepth, getDefaultConfigurationVersion()), aQuery); }	public void getWANColorDepth(org.ovirt.engine.ui.frontend.AsyncQuery<org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.Converter<org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth>() { @java.lang.Override public org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth convert(java.lang.Object source) { return source != null ? org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth.fromInt(((java.lang.Integer) (source))) : org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth.depth16; } }; getConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.WANColorDepth, getDefaultConfigurationVersion()), aQuery); }
public void getVmListByClusterName(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.VM>><END_MOD> aQuery, java.lang.String clusterName) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.VM>><END_MOD>() { @java.lang.Override public java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.VM> convert(java.<END_MOD>lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { <START_MOD>return org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.VM>cast(((<END_MOD>java.util.ArrayList<org.ovirt.engine.core.common.businessentities.IVdcQueryable>) (source))); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.Search, new org.ovirt.engine.core.common.queries.SearchParameters(( cluster= + clusterName), org.ovirt.engine.core.common.interfaces.SearchType.VM), aQuery); }	public void getVmListByClusterName(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<org.ovirt.engine.core.common.businessentities.VM>> aQuery, java.lang.String clusterName) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.Search, new org.ovirt.engine.core.common.queries.SearchParameters(("Vms: cluster=" + clusterName), org.ovirt.engine.core.common.interfaces.SearchType.VM), aQuery); }
public void isVirtioScsiEnabledForVm(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.lang.Boolean><END_MOD> aQuery, org.ovirt.engine.core.compat.Guid vmId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.lang.Boolean><END_MOD>() { @java.lang.Override public java.lang.<START_MOD>Boolean convert(java.lang.<END_MOD>Object source, org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.lang.Boolean><END_MOD> _asyncQuery) { if (source != null) { return !(((java.util.List<?>) (source)).isEmpty()); } return false; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVirtioScsiControllers, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmId), aQuery); }	public void isVirtioScsiEnabledForVm(org.ovirt.engine.ui.frontend.AsyncQuery<java.lang.Boolean> aQuery, org.ovirt.engine.core.compat.Guid vmId) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsNonEmptyCollectionConverter(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVirtioScsiControllers, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmId), aQuery); }
public void isTemplateNameUnique(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.lang.Boolean><END_MOD> aQuery, java.lang.String templateName, org.ovirt.engine.core.compat.Guid datacenterId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.lang.Boolean><END_MOD>() { @java.lang.Override public java.lang.<START_MOD>Boolean convert(java.lang.<END_MOD>Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return (source != null) && (!((java.lang.Boolean) (source))); } }; org.ovirt.engine.core.common.queries.NameQueryParameters params = new org.ovirt.engine.core.common.queries.NameQueryParameters(templateName); params.setDatacenterId(datacenterId); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.IsVmTemlateWithSameNameExist, params, aQuery); }	public void isTemplateNameUnique(org.ovirt.engine.ui.frontend.AsyncQuery<java.lang.Boolean> aQuery, java.lang.String templateName, org.ovirt.engine.core.compat.Guid datacenterId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.Converter<java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean convert(java.lang.Object source) { return (source != null) && (!((java.lang.Boolean) (source))); } }; org.ovirt.engine.core.common.queries.NameQueryParameters params = new org.ovirt.engine.core.common.queries.NameQueryParameters(templateName); params.setDatacenterId(datacenterId); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.IsVmTemlateWithSameNameExist, params, aQuery); }
public void initCache(<START_MOD>final <END_MOD>org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel) { cacheConfigValues(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { getDefaultConfigurationVersion(<START_MOD>loginModel<END_MOD>); } })); initOsNames(); initOsDefaultIconIds(); initUniqueOsNames(); initLinuxOsTypes(); initWindowsOsTypes(); initDisplayTypes(); initBalloonSupportMap(); initNicHotplugSupportMap(); initDiskHotpluggableInterfacesMap(); initOsArchitecture(); initDefaultOSes(); initMigrationSupportMap(); initMemorySnapshotSupportMap(); initSuspendSupportMap(); initMemoryHotUnplugSupportMap(); initCustomPropertiesList(); initSoundDeviceSupportMap(); initMigrationPolicies(); initCpuMap(); }	public void initCache(final org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel) { cacheConfigValues(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.Map<org.ovirt.engine.core.compat.KeyValuePairCompat<org.ovirt.engine.core.common.queries.ConfigurationValues, java.lang.String>, java.lang.Object>>() { @java.lang.Override public void onSuccess(java.util.Map<org.ovirt.engine.core.compat.KeyValuePairCompat<org.ovirt.engine.core.common.queries.ConfigurationValues, java.lang.String>, java.lang.Object> returnValue) { getDefaultConfigurationVersion(loginModel); } })); initOsNames(); initOsDefaultIconIds(); initUniqueOsNames(); initLinuxOsTypes(); initWindowsOsTypes(); initDisplayTypes(); initBalloonSupportMap(); initNicHotplugSupportMap(); initDiskHotpluggableInterfacesMap(); initOsArchitecture(); initDefaultOSes(); initMigrationSupportMap(); initMemorySnapshotSupportMap(); initSuspendSupportMap(); initMemoryHotUnplugSupportMap(); initCustomPropertiesList(); initSoundDeviceSupportMap(); initMigrationPolicies(); initCpuMap(); }
public void getWANDisableEffects(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects>><END_MOD> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects>><END_MOD>() { @java.lang.Override public java.<START_MOD>util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects><END_MOD> convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<>(); } java.util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects> res = new java.util.ArrayList<>(); java.lang.String fromDb = ((java.lang.String) (source)); for (java.lang.String value : fromDb.split(",")) { if (value == null) { continue; } java.lang.String trimmedValue = value.trim(); if ("".equals(trimmedValue)) { continue; } res.add(org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects.fromString(trimmedValue)); } return res; } }; getConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.WANDisableEffects, getDefaultConfigurationVersion()), aQuery); }	public void getWANDisableEffects(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects>> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.Converter<java.util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects>>() { @java.lang.Override public java.util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects> convert(java.lang.Object source) { if (source == null) { return new java.util.ArrayList<>(); } java.util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects> res = new java.util.ArrayList<>(); java.lang.String fromDb = ((java.lang.String) (source)); for (java.lang.String value : fromDb.split(",")) { if (value == null) { continue; } java.lang.String trimmedValue = value.trim(); if ("".equals(trimmedValue)) { continue; } res.add(org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects.fromString(trimmedValue)); } return res; } }; getConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.WANDisableEffects, getDefaultConfigurationVersion()), aQuery); }
@java.lang.Override public <START_MOD>org.ovirt.engine.core.common.businessentities.Tags convert(<END_MOD>java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><org.ovirt.engine.core.common.businessentities.Tags><END_MOD> _asyncQuery) { if (source != null) { org.ovirt.engine.core.common.businessentities.Tags tag = ((org.ovirt.engine.core.common.businessentities.Tags) (source)); org.ovirt.engine.core.common.businessentities.Tags root = new org.ovirt.engine.core.common.businessentities.Tags(tag.getDescription(), tag.getParentId(), tag.getIsReadonly(), tag.getTagId(), tag.getTagName()); if ((tag.getChildren()) != null) { fillTagsRecursive(root, tag.getChildren()); } return root; } return new org.ovirt.engine.core.common.businessentities.Tags(); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.Tags convert(java.lang.Object source) { if (source != null) { org.ovirt.engine.core.common.businessentities.Tags tag = ((org.ovirt.engine.core.common.businessentities.Tags) (source)); org.ovirt.engine.core.common.businessentities.Tags root = new org.ovirt.engine.core.common.businessentities.Tags(tag.getDescription(), tag.getParentId(), tag.getIsReadonly(), tag.getTagId(), tag.getTagName()); if ((tag.getChildren()) != null) { fillTagsRecursive(root, tag.getChildren()); } return root; } return new org.ovirt.engine.core.common.businessentities.Tags(); }
public void getSpiceUsbAutoShare(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.lang.Boolean><END_MOD> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.lang.Boolean><END_MOD>() { @java.lang.Override public java.lang.<START_MOD>Boolean<END_MOD> convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return (source == null) || ((java.lang.Boolean) (source)); } }; getConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.SpiceUsbAutoShare, getDefaultConfigurationVersion()), aQuery); }	public void getSpiceUsbAutoShare(org.ovirt.engine.ui.frontend.AsyncQuery<java.lang.Boolean> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DefaultValueConverter(java.lang.Boolean.TRUE); getConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.SpiceUsbAutoShare, getDefaultConfigurationVersion()), aQuery); }
public void isAnyHostUpInCluster(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.lang.Boolean><END_MOD> aQuery, java.lang.String clusterName) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.lang.Boolean><END_MOD>() { @java.lang.Override public java.lang.<START_MOD>Boolean<END_MOD> convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.lang.Boolean><END_MOD> _asyncQuery) { if ((source != null) && (!(((java.util.List<?>) (source)).isEmpty()))) { return true; } return false; } }; getUpHostListByCluster(aQuery, clusterName, 1); }	public void isAnyHostUpInCluster(org.ovirt.engine.ui.frontend.AsyncQuery<java.lang.Boolean> aQuery, java.lang.String clusterName) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsNonEmptyCollectionConverter(); getUpHostListByCluster(aQuery, clusterName, 1); }
public void getAAAProfilesEntriesList(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.aaa.ProfileEntry>><END_MOD> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.util.List<org.ovirt.engine.core.aaa.ProfileEntry>><END_MOD>() { @java.lang.Override public java.<START_MOD>util.List<org.ovirt.engine.core.aaa.ProfileEntry><END_MOD> convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.<START_MOD>List<END_MOD><org.ovirt.engine.core.aaa.ProfileEntry>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.aaa.ProfileEntry>(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAAAProfileList, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }	public void getAAAProfilesEntriesList(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<org.ovirt.engine.core.aaa.ProfileEntry>> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAAAProfileList, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }
public void getRootTag(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><org.ovirt.engine.core.common.businessentities.Tags><END_MOD> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><org.ovirt.engine.core.common.businessentities.Tags><END_MOD>() { @java.lang.Override public <START_MOD>org.ovirt.engine.core.common.businessentities.Tags convert(<END_MOD>java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><org.ovirt.engine.core.common.businessentities.Tags><END_MOD> _asyncQuery) { if (source != null) { org.ovirt.engine.core.common.businessentities.Tags tag = ((org.ovirt.engine.core.common.businessentities.Tags) (source)); org.ovirt.engine.core.common.businessentities.Tags root = new org.ovirt.engine.core.common.businessentities.Tags(tag.getDescription(), tag.getParentId(), tag.getIsReadonly(), tag.getTagId(), tag.getTagName()); if ((tag.getChildren()) != null) { fillTagsRecursive(root, tag.getChildren()); } return root; } return new org.ovirt.engine.core.common.businessentities.Tags(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetRootTag, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }	public void getRootTag(org.ovirt.engine.ui.frontend.AsyncQuery<org.ovirt.engine.core.common.businessentities.Tags> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.Converter<org.ovirt.engine.core.common.businessentities.Tags>() { @java.lang.Override public org.ovirt.engine.core.common.businessentities.Tags convert(java.lang.Object source) { if (source != null) { org.ovirt.engine.core.common.businessentities.Tags tag = ((org.ovirt.engine.core.common.businessentities.Tags) (source)); org.ovirt.engine.core.common.businessentities.Tags root = new org.ovirt.engine.core.common.businessentities.Tags(tag.getDescription(), tag.getParentId(), tag.getIsReadonly(), tag.getTagId(), tag.getTagName()); if ((tag.getChildren()) != null) { fillTagsRecursive(root, tag.getChildren()); } return root; } return new org.ovirt.engine.core.common.businessentities.Tags(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetRootTag, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }
public void getClusterNetworkList(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>><END_MOD> aQuery, org.ovirt.engine.core.compat.Guid clusterId) { if ((aQuery.converterCallback) == null) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>><END_MOD>() { @java.lang.Override public java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.network.Network><END_MOD> convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<<START_MOD>>(); } return ((java.util.List<<END_MOD>org.ovirt.engine.core.common.businessentities.network.Network><START_MOD>) (<END_MOD>source<START_MOD>))<END_MOD>; } }; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllNetworksByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), aQuery); }	public void getClusterNetworkList(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>> aQuery, org.ovirt.engine.core.compat.Guid clusterId) { if ((aQuery.converterCallback) == null) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter(); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllNetworksByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), aQuery); }
@java.lang.Override public java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.Cluster> convert(java.<END_MOD>lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>><END_MOD> _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster> list = getClusterByServiceList(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>) (source)), supportsVirtService, supportsGlusterService); java.util.Collections.sort(list, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); return list; } return new java.util.ArrayList<>(); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> convert(java.lang.Object source) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster> list = getClusterByServiceList(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>) (source)), supportsVirtService, supportsGlusterService); java.util.Collections.sort(list, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); return list; } return new java.util.ArrayList<>(); }
public void getDataCenterByClusterServiceList(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>><END_MOD> aQuery, boolean supportsVirtService, boolean supportsGlusterService) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>><END_MOD>() { @java.lang.Override public java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.StoragePool> convert(java.<END_MOD>lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<>(); } final java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> storagePoolList = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool>) (source)); java.util.Collections.sort(storagePoolList, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); return <START_MOD>storagePoolList<END_MOD>; } }; final org.ovirt.engine.core.common.queries.GetStoragePoolsByClusterServiceParameters parameters = new org.ovirt.engine.core.common.queries.GetStoragePoolsByClusterServiceParameters(); parameters.setSupportsVirtService(supportsVirtService); parameters.setSupportsGlusterService(supportsGlusterService); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolsByClusterService, parameters, aQuery); }	public void getDataCenterByClusterServiceList(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>> aQuery, boolean supportsVirtService, boolean supportsGlusterService) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.SortListByNameConverter(); final org.ovirt.engine.core.common.queries.GetStoragePoolsByClusterServiceParameters parameters = new org.ovirt.engine.core.common.queries.GetStoragePoolsByClusterServiceParameters(); parameters.setSupportsVirtService(supportsVirtService); parameters.setSupportsGlusterService(supportsGlusterService); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolsByClusterService, parameters, aQuery); }
public void getGlusterSwiftServerServices(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService>><END_MOD> aQuery, org.ovirt.engine.core.compat.Guid clusterId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? source : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService>(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetGlusterServerServicesByClusterId, new org.ovirt.engine.core.common.queries.gluster.GlusterServiceQueryParameters(clusterId, org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT), aQuery); }	public void getGlusterSwiftServerServices(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService>> aQuery, org.ovirt.engine.core.compat.Guid clusterId) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetGlusterServerServicesByClusterId, new org.ovirt.engine.core.common.queries.gluster.GlusterServiceQueryParameters(clusterId, org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT), aQuery); }
public void getGlusterHooks(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity>><END_MOD> aQuery, org.ovirt.engine.core.compat.Guid clusterId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? source : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity>(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHooks, new org.ovirt.engine.core.common.queries.gluster.GlusterParameters(clusterId), aQuery); }	public void getGlusterHooks(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity>> aQuery, org.ovirt.engine.core.compat.Guid clusterId) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHooks, new org.ovirt.engine.core.common.queries.gluster.GlusterParameters(clusterId), aQuery); }
public void getAAANamespaces(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>><END_MOD> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>><END_MOD>() { @java.lang.Override public java.<START_MOD>util.HashMap<java.lang.String, java.util.List<java.lang.String>><END_MOD> convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>) (source)) : new java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAvailableNamespaces, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }	public void getAAANamespaces(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.Map<java.lang.String, java.util.List<java.lang.String>>> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.MapConverter(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAvailableNamespaces, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }
public void getDataCenterById(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><org.ovirt.engine.core.common.businessentities.StoragePool><END_MOD> aQuery, org.ovirt.engine.core.compat.Guid dataCenterId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolById, new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId).withoutRefresh(), aQuery); }	public void getDataCenterById(org.ovirt.engine.ui.frontend.AsyncQuery<org.ovirt.engine.core.common.businessentities.StoragePool> aQuery, org.ovirt.engine.core.compat.Guid dataCenterId) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolById, new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId).withoutRefresh(), aQuery); }
public void getRoleList(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.Role>><END_MOD> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.Role>><END_MOD>() { @java.lang.Override public java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.Role><END_MOD> convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Role>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Role>(); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllRoles, new org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters(), aQuery); }	public void getRoleList(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<org.ovirt.engine.core.common.businessentities.Role>> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllRoles, new org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters(), aQuery); }
private void getDefaultConfigurationVersion(<START_MOD>final org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel<END_MOD>) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { if (returnValue != null) { _defaultConfigurationVersion = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); } else { _defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; } loginModel<START_MOD>.getLoggedInEvent().raise(<END_MOD>loginModel, EventArgs.EMPTY); } }); callback.setHandleFailure(true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetDefaultConfigurationVersion, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), callback); }	private void getDefaultConfigurationVersion(final org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (returnValue != null) { _defaultConfigurationVersion = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); } else { _defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; } loginModel.getLoggedInEvent().raise(loginModel, EventArgs.EMPTY); } }); callback.setHandleFailure(true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetDefaultConfigurationVersion, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), callback); }
@java.lang.Override public java.<START_MOD>util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects><END_MOD> convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<<START_MOD>>(); } java.util.List<<END_MOD>org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects><START_MOD> res = new java.util.ArrayList<>(); java.lang.String fromDb = ((java.lang.String) (source)); for (java.lang.String value : fromDb.split(",")) { if (value == null) { continue; } java.lang.String trimmedValue = value.trim(); if ("".equals(trimmedValue)) { continue; } res.add(<END_MOD>org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects<START_MOD>.fromString(trimmedValue)); } return<END_MOD> res<START_MOD>; }<END_MOD>	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects> convert(java.lang.Object source) { if (source == null) { return new java.util.ArrayList<>(); } java.util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects> res = new java.util.ArrayList<>(); java.lang.String fromDb = ((java.lang.String) (source)); for (java.lang.String value : fromDb.split(",")) { if (value == null) { continue; } java.lang.String trimmedValue = value.trim(); if ("".equals(trimmedValue)) { continue; } res.add(org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects.fromString(trimmedValue)); } return res; }
@java.lang.Override public void onSuccess(java.lang.Object target, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = returnValue.getReturnValue(); boolean succeeded = true; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (!(host.getClusterId().equals(hostClusterIdMap.get(host.getId())))) { succeeded = false; } } if (!succeeded) { guideModel.getWindow().stopProgress(); guideModel.cancel(); errorPopupManager.show(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().hostChangeClusterTimeOut()); } else { activateHostsAfterClusterChange(guideModel, searchStr, activateVdsParameterList); } }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = returnValue.getReturnValue(); boolean succeeded = true; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (!(host.getClusterId().equals(hostClusterIdMap.get(host.getId())))) { succeeded = false; } } if (!succeeded) { getWindow().stopProgress(); cancel(); errorPopupManager.show(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().hostChangeClusterTimeOut()); } else { activateHostsAfterClusterChange(searchStr, activateVdsParameterList); } }
public void getDataCenterList(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>><END_MOD> aQuery, boolean doRefresh) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>><END_MOD>() { @java.lang.Override public java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.StoragePool><END_MOD> convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<<START_MOD>>(); } return ((java.util.List<<END_MOD>org.ovirt.engine.core.common.businessentities.StoragePool><START_MOD>) (<END_MOD>source<START_MOD>))<END_MOD>; } }; org.ovirt.engine.core.common.queries.SearchParameters params = new org.ovirt.engine.core.common.queries.SearchParameters( sortby name org.ovirt.engine.core.common.interfaces.SearchType.StoragePool); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.Search, (doRefresh ? params : params.withoutRefresh()), aQuery); }	public void getDataCenterList(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>> aQuery, boolean doRefresh) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter(); org.ovirt.engine.core.common.queries.SearchParameters params = new org.ovirt.engine.core.common.queries.SearchParameters("DataCenter: sortby name", org.ovirt.engine.core.common.interfaces.SearchType.StoragePool); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.Search, (doRefresh ? params : params.withoutRefresh()), aQuery); }
public void getGlusterHostsNewlyAdded(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.Map<java.lang.String, java.lang.String>><END_MOD> aQuery, org.ovirt.engine.core.compat.Guid clusterId, boolean isFingerprintRequired) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAddedGlusterServers, new org.ovirt.engine.core.common.queries.gluster.AddedGlusterServersParameters(clusterId, isFingerprintRequired), aQuery); }	public void getGlusterHostsNewlyAdded(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.Map<java.lang.String, java.lang.String>> aQuery, org.ovirt.engine.core.compat.Guid clusterId, boolean isFingerprintRequired) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAddedGlusterServers, new org.ovirt.engine.core.common.queries.gluster.AddedGlusterServersParameters(clusterId, isFingerprintRequired), aQuery); }
@java.lang.Override public void onSuccess(java.lang.Object target, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = returnValue.getReturnValue(); boolean succeeded = true; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if ((host.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { succeeded = false; } } guideModel.getWindow().stopProgress(); guideModel.cancel(); if (succeeded) { guideModel.postAction(); } else { errorPopupManager.show(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().hostActivationTimeOut()); } }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = returnValue.getReturnValue(); boolean succeeded = true; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if ((host.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { succeeded = false; } } getWindow().stopProgress(); cancel(); if (succeeded) { postAction(); } else { errorPopupManager.show(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().hostActivationTimeOut()); } }
public void getConfigurationValueBoolean(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.lang.Boolean><END_MOD> aQuery, org.ovirt.engine.core.common.queries.ConfigurationValues configVal) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.lang.Boolean><END_MOD>() { @java.lang.Override public java.lang.<START_MOD>Boolean<END_MOD> convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.lang.Boolean><END_MOD> _asyncQuery) { return source != null ? ((java.lang.Boolean) (source)).booleanValue() : true; } }; getConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(configVal, getDefaultConfigurationVersion()), aQuery); }	public void getConfigurationValueBoolean(org.ovirt.engine.ui.frontend.AsyncQuery<java.lang.Boolean> aQuery, org.ovirt.engine.core.common.queries.ConfigurationValues configVal) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DefaultValueConverter(java.lang.Boolean.TRUE); getConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(configVal, getDefaultConfigurationVersion()), aQuery); }
@java.lang.Override public <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.console.ConsoleOptions.WanColorDepth<END_MOD> convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth><END_MOD> _asyncQuery) { return source != null ? org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth.fromInt(((java.lang.Integer) (source))) : org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth.depth16; }	@java.lang.Override public org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth convert(java.lang.Object source) { return source != null ? org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth.fromInt(((java.lang.Integer) (source))) : org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth.depth16; }
public void getGlusterHook(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity><END_MOD> aQuery, org.ovirt.engine.core.compat.Guid hookId, boolean includeServerHooks) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHookById, new org.ovirt.engine.core.common.queries.gluster.GlusterHookQueryParameters(hookId, includeServerHooks), aQuery); }	public void getGlusterHook(org.ovirt.engine.ui.frontend.AsyncQuery<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity> aQuery, org.ovirt.engine.core.compat.Guid hookId, boolean includeServerHooks) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHookById, new org.ovirt.engine.core.common.queries.gluster.GlusterHookQueryParameters(hookId, includeServerHooks), aQuery); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.<START_MOD>Boolean<END_MOD> returnValue) { spice.getOptions().setFullScreen(returnValue); }	@java.lang.Override public void onSuccess(java.lang.Boolean returnValue) { spice.getOptions().setFullScreen(returnValue); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.<START_MOD>Boolean<END_MOD> returnValue) { spice.getOptions().setUsbAutoShare(returnValue); }	@java.lang.Override public void onSuccess(java.lang.Boolean returnValue) { spice.getOptions().setUsbAutoShare(returnValue); }
private void updateSpiceFullScreenDefault(final org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigurationValueBoolean(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.lang.Boolean><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.<START_MOD>Boolean<END_MOD> returnValue) { spice.getOptions().setFullScreen(returnValue); } }), spiceFullScreenConfigKey()); }	private void updateSpiceFullScreenDefault(final org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigurationValueBoolean(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.lang.Boolean>() { @java.lang.Override public void onSuccess(java.lang.Boolean returnValue) { spice.getOptions().setFullScreen(returnValue); } }), spiceFullScreenConfigKey()); }
private void updateSpiceUsbAutoShare(final org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getSpiceUsbAutoShare(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.lang.Boolean><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.<START_MOD>Boolean<END_MOD> returnValue) { spice.getOptions().setUsbAutoShare(returnValue); } })); }	private void updateSpiceUsbAutoShare(final org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getSpiceUsbAutoShare(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.lang.Boolean>() { @java.lang.Override public void onSuccess(java.lang.Boolean returnValue) { spice.getOptions().setUsbAutoShare(returnValue); } })); }
protected void checkVdsActivateSucceeded(final org.ovirt.engine.ui.uicommonweb.models.GuideModel guideModel, final java.lang.String searchStr) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.Search, new org.ovirt.engine.core.common.queries.SearchParameters(searchStr, org.ovirt.engine.core.common.interfaces.SearchType.VDS), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = returnValue.getReturnValue(); boolean succeeded = true; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if ((host.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { succeeded = false; } } guideModel.getWindow().stopProgress(); guideModel.cancel(); if (succeeded) { guideModel.postAction(); } else { errorPopupManager.show(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().hostActivationTimeOut()); } } })); }	protected void checkVdsActivateSucceeded(final java.lang.String searchStr) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.Search, new org.ovirt.engine.core.common.queries.SearchParameters(searchStr, org.ovirt.engine.core.common.interfaces.SearchType.VDS), new org.ovirt.engine.ui.uicommonweb.models.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = returnValue.getReturnValue(); boolean succeeded = true; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if ((host.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { succeeded = false; } } getWindow().stopProgress(); cancel(); if (succeeded) { postAction(); } else { errorPopupManager.show(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().hostActivationTimeOut()); } } })); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.util.List<java.lang.String> images) <START_MOD>{<END_MOD> final java.lang.String lastSelectedIso = getIsoImage().getSelectedItem(); getIsoImage().setItems(images); if (getIsoImage().getIsChangable()) { if ((lastSelectedIso != null) && (images.contains(lastSelectedIso))) { getIsoImage().setSelectedItem(lastSelectedIso); } else { getIsoImage().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(images)); } } }	@java.lang.Override public void onSuccess(java.util.List<java.lang.String> images) { final java.lang.String lastSelectedIso = getIsoImage().getSelectedItem(); getIsoImage().setItems(images); if (getIsoImage().getIsChangable()) { if ((lastSelectedIso != null) && (images.contains(lastSelectedIso))) { getIsoImage().setSelectedItem(lastSelectedIso); } else { getIsoImage().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(images)); } } }
@java.lang.Override public void onSuccess(java.lang.Object model, java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity> glusterHooks) <START_MOD>{<END_MOD> setItems(glusterHooks); }	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity> glusterHooks) { setItems(glusterHooks); }
@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getGlusterHooks(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity>><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity> glusterHooks) <START_MOD>{<END_MOD> setItems(glusterHooks); } }), getEntity().getId()); }	@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getGlusterHooks(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity>>() { @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity> glusterHooks) { setItems(glusterHooks); } }), getEntity().getId()); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.<START_MOD>String<END_MOD> <START_MOD>content<END_MOD>) { <START_MOD>contentModel<END_MOD>.getContent().setEntity(content); if (content == null) { <START_MOD>contentModel<END_MOD>.getContent().setIsAvailable(false); <START_MOD>contentModel<END_MOD>.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().viewContentErrorGlusterHook()); } else if ((content.length()) == 0) { <START_MOD>contentModel<END_MOD>.getContent().setIsAvailable(false); <START_MOD>contentModel<END_MOD>.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().viewContentEmptyGlusterHook()); } <START_MOD>contentModel<END_MOD>.stopProgress(); }	@java.lang.Override public void onSuccess(java.lang.String content) { contentModel.getContent().setEntity(content); if (content == null) { contentModel.getContent().setIsAvailable(false); contentModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().viewContentErrorGlusterHook()); } else if ((content.length()) == 0) { contentModel.getContent().setIsAvailable(false); contentModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().viewContentEmptyGlusterHook()); } contentModel.stopProgress(); }
private void viewHook() { if ((getWindow()) != null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hookEntity = getSelectedItem(); if (hookEntity == null) { return; } <START_MOD>final <END_MOD>org.ovirt.engine.ui.uicommonweb.models.clusters.GlusterHookContentModel contentModel = new org.ovirt.engine.ui.uicommonweb.models.clusters.GlusterHookContentModel(); contentModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().viewContentGlusterHookTitle()); contentModel.setHelpTag(HelpTag.view_gluster_hook); contentModel.setHashName("view_gluster_hook"); setWindow(contentModel); contentModel.startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getGlusterHookContent(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.lang.String><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.String content<START_MOD>) { contentModel<END_MOD>.getContent().setEntity(content); if (content == null) { <START_MOD>contentModel<END_MOD>.getContent().setIsAvailable(false); <START_MOD>contentModel<END_MOD>.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().viewContentErrorGlusterHook()); } else if ((content.length()) == 0) { <START_MOD>contentModel<END_MOD>.getContent().setIsAvailable(false); <START_MOD>contentModel<END_MOD>.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().viewContentEmptyGlusterHook()); } <START_MOD>contentModel<END_MOD>.stopProgress(); } }), hookEntity.getId(), null); org.ovirt.engine.ui.uicommonweb.UICommand command = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); command.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().close()); command.setIsCancel(true); contentModel.getCommands().add(command); }	private void viewHook() { if ((getWindow()) != null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hookEntity = getSelectedItem(); if (hookEntity == null) { return; } final org.ovirt.engine.ui.uicommonweb.models.clusters.GlusterHookContentModel contentModel = new org.ovirt.engine.ui.uicommonweb.models.clusters.GlusterHookContentModel(); contentModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().viewContentGlusterHookTitle()); contentModel.setHelpTag(HelpTag.view_gluster_hook); contentModel.setHashName("view_gluster_hook"); setWindow(contentModel); contentModel.startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getGlusterHookContent(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.lang.String>() { @java.lang.Override public void onSuccess(java.lang.String content) { contentModel.getContent().setEntity(content); if (content == null) { contentModel.getContent().setIsAvailable(false); contentModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().viewContentErrorGlusterHook()); } else if ((content.length()) == 0) { contentModel.getContent().setIsAvailable(false); contentModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().viewContentEmptyGlusterHook()); } contentModel.stopProgress(); } }), hookEntity.getId(), null); org.ovirt.engine.ui.uicommonweb.UICommand command = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); command.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().close()); command.setIsCancel(true); contentModel.getCommands().add(command); }
public void setDel(org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><T><END_MOD> asyncCallback) { this.asyncCallback = asyncCallback; }	public void setDel(org.ovirt.engine.ui.frontend.AsyncCallback<T> asyncCallback) { this.asyncCallback = asyncCallback; }
public org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><T><END_MOD> getDel() { return asyncCallback; }	public org.ovirt.engine.ui.frontend.AsyncCallback<T> getDel() { return asyncCallback; }
@java.lang.Override public void onSuccess(java.lang.Object model, org.ovirt.engine.core.common.businessentities.Cluster<START_MOD> cluster<END_MOD>) <START_MOD>{ volumeSnapshotConfigModel.getClusterName<END_MOD>()<START_MOD>.setEntity(cluster<END_MOD>.getName()); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.Cluster cluster) { volumeSnapshotConfigModel.getClusterName().setEntity(cluster.getName()); }
@java.lang.Override public void onSuccess(java.lang.Object model, final java.util.List<org.ovirt.engine.core.common.businessentities.Cluster><START_MOD> <END_MOD>returnValue)<START_MOD> { if ((getSystemTreeSelectedItem()) != null) { org.ovirt.engine.core.common.businessentities.Cluster<END_MOD> selectedCluster<START_MOD> = ((org.ovirt.engine.core.common.businessentities.Cluster) (getSystemTreeSelectedItem().getEntity())); clusterSnapshotConfigModel.getClusters().setItems(returnValue, selectedCluster<END_MOD>); } else { if ((getSelectedItems()) != null) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getSelectedItems().get(0); if (volumeEntity != null) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterById(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.businessentities.Cluster><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org.ovirt.engine.core.common.businessentities.Cluster cluster) { clusterSnapshotConfigModel.getClusters().setItems(returnValue, cluster); } }), volumeEntity.getClusterId()); } } else<END_MOD> { clusterSnapshotConfigModel.getClusters().setItems(((java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>) (returnValue))<START_MOD>); } } }<END_MOD>	@java.lang.Override public void onSuccess(final java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> returnValue) { if ((getSystemTreeSelectedItem()) != null) { org.ovirt.engine.core.common.businessentities.Cluster selectedCluster = ((org.ovirt.engine.core.common.businessentities.Cluster) (getSystemTreeSelectedItem().getEntity())); clusterSnapshotConfigModel.getClusters().setItems(returnValue, selectedCluster); } else { if ((getSelectedItems()) != null) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getSelectedItems().get(0); if (volumeEntity != null) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterById(new org.ovirt.engine.ui.uicommonweb.models.volumes.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.businessentities.Cluster>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.Cluster cluster) { clusterSnapshotConfigModel.getClusters().setItems(returnValue, cluster); } }), volumeEntity.getClusterId()); } } else { clusterSnapshotConfigModel.getClusters().setItems(((java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>) (returnValue))); } } }
public void updateIsoList(boolean forceRefresh) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getIrsImageList(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.util.List<java.lang.String>><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, java.util.List<java.lang.String> images<START_MOD>) { final java.lang.String lastSelectedIso<END_MOD> = getIsoImage().getSelectedItem(); getIsoImage().setItems(images); if (getIsoImage().getIsChangable()) { if ((lastSelectedIso != null) && (images.contains(lastSelectedIso))) { getIsoImage().setSelectedItem(lastSelectedIso); } else { getIsoImage().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(images)); } } } }), vm.getStoragePoolId(), forceRefresh); }	public void updateIsoList(boolean forceRefresh) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getIrsImageList(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<java.lang.String>>() { @java.lang.Override public void onSuccess(java.util.List<java.lang.String> images) { final java.lang.String lastSelectedIso = getIsoImage().getSelectedItem(); getIsoImage().setItems(images); if (getIsoImage().getIsChangable()) { if ((lastSelectedIso != null) && (images.contains(lastSelectedIso))) { getIsoImage().setSelectedItem(lastSelectedIso); } else { getIsoImage().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(images)); } } } }), vm.getStoragePoolId(), forceRefresh); }
@java.lang.Override public void onSuccess(java.lang.Object outerObject, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog> newEvents = returnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog> currentEvents = ((java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog>) (getItems())); if (isDisplayEventsOnly()) { newEvents = new java.util.ArrayList(org.ovirt.engine.ui.uicommonweb.Linq.filterAudidLogsByExcludingSeverity(newEvents, AuditLogSeverity.ALERT)); } if (((!(newEvents.isEmpty())) && (currentEvents != null)) && ((currentEvents.isEmpty()) || (!(currentEvents.get(0).equals(newEvents.get(0)))))) { org.ovirt.engine.ui.frontend.communication.RefreshActiveModelEvent.fire(this, false); } this.setItems(newEvents); this.setLastEvent(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(newEvents)); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog> newEvents = returnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog> currentEvents = ((java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog>) (getItems())); if (isDisplayEventsOnly()) { newEvents = new java.util.ArrayList(org.ovirt.engine.ui.uicommonweb.Linq.filterAudidLogsByExcludingSeverity(newEvents, AuditLogSeverity.ALERT)); } if (((!(newEvents.isEmpty())) && (currentEvents != null)) && ((currentEvents.isEmpty()) || (!(currentEvents.get(0).equals(newEvents.get(0)))))) { org.ovirt.engine.ui.frontend.communication.RefreshActiveModelEvent.fire(this, false); } this.setItems(newEvents); this.setLastEvent(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(newEvents)); }
private void discoverTargets() { if (!(validateDiscoverTargetFields())) { return; } org.ovirt.engine.core.common.businessentities.VDS host = getContainer().getHost().getSelectedItem(); org.ovirt.engine.core.common.businessentities.StorageServerConnections tempVar = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); tempVar.setConnection(getAddress().getEntity().trim()); tempVar.setPort(getPort().getEntity().trim()); tempVar.setStorageType(StorageType.ISCSI); tempVar.setUserName((getUseUserAuth().getEntity() ? getUserName().getEntity() : "")); tempVar.setPassword((getUseUserAuth().getEntity() ? getPassword().getEntity() : "")); org.ovirt.engine.core.common.queries.DiscoverSendTargetsQueryParameters parameters = new org.ovirt.engine.core.common.queries.DiscoverSendTargetsQueryParameters(host.getId(), tempVar); setMessage(null); final org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase model = this; <START_MOD>org.ovirt.engine.ui.frontend.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @<END_MOD>java.lang.<START_MOD>Override public void onSuccess(java.lang.<END_MOD>Object target, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue<END_MOD>) { java.lang.Object <START_MOD>result =<END_MOD> returnValue.getReturnValue(); model.postDiscoverTargetsInternal((result != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>) (result)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>())); } }, true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.DiscoverSendTargets, parameters, asyncQuery); }	private void discoverTargets() { if (!(validateDiscoverTargetFields())) { return; } org.ovirt.engine.core.common.businessentities.VDS host = getContainer().getHost().getSelectedItem(); org.ovirt.engine.core.common.businessentities.StorageServerConnections tempVar = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); tempVar.setConnection(getAddress().getEntity().trim()); tempVar.setPort(getPort().getEntity().trim()); tempVar.setStorageType(StorageType.ISCSI); tempVar.setUserName((getUseUserAuth().getEntity() ? getUserName().getEntity() : "")); tempVar.setPassword((getUseUserAuth().getEntity() ? getPassword().getEntity() : "")); org.ovirt.engine.core.common.queries.DiscoverSendTargetsQueryParameters parameters = new org.ovirt.engine.core.common.queries.DiscoverSendTargetsQueryParameters(host.getId(), tempVar); setMessage(null); final org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase model = this; org.ovirt.engine.ui.uicommonweb.models.storage.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncQuery = new org.ovirt.engine.ui.uicommonweb.models.storage.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.lang.Object result = returnValue.getReturnValue(); model.postDiscoverTargetsInternal((result != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>) (result)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>())); } }, true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.DiscoverSendTargets, parameters, asyncQuery); }
@java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { if (returnValue != null) { _defaultConfigurationVersion = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); } else { _defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; } loginModel.getLoggedInEvent().raise(loginModel, EventArgs.EMPTY); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (returnValue != null) { _defaultConfigurationVersion = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); } else { _defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; } loginModel.getLoggedInEvent().raise(loginModel, EventArgs.EMPTY); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.util.List<org.ovirt.engine.core.common.businessentities.Role><START_MOD> result<END_MOD>) <START_MOD>{ populateRoles<END_MOD>(result); }	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.Role> result) { populateRoles(result); }
public void getLocalStorageHost(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><org.ovirt.engine.core.common.businessentities.VDS><END_MOD> aQuery, java.lang.String dataCenterName) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><org.ovirt.engine.core.common.businessentities.VDS><END_MOD>() { @java.lang.Override public <START_MOD>org.ovirt.engine.core.common.businessentities.VDS convert(<END_MOD>java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><org.ovirt.engine.core.common.businessentities.VDS><END_MOD> _asyncQuery) { if (source != null) { for (org.ovirt.engine.core.common.businessentities.IVdcQueryable item : ((java.util.List<org.ovirt.engine.core.common.businessentities.IVdcQueryable>) (source))) { return <START_MOD>((org.ovirt.engine.core.common.businessentities.VDS) (<END_MOD>item<START_MOD>))<END_MOD>; } } return null; } }; org.ovirt.engine.core.common.queries.SearchParameters sp = new org.ovirt.engine.core.common.queries.SearchParameters(( datacenter= + dataCenterName), org.ovirt.engine.core.common.interfaces.SearchType.VDS); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.Search, sp, aQuery); }	public void getLocalStorageHost(org.ovirt.engine.ui.frontend.AsyncQuery<org.ovirt.engine.core.common.businessentities.VDS> aQuery, java.lang.String dataCenterName) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetFirstConverter(); org.ovirt.engine.core.common.queries.SearchParameters sp = new org.ovirt.engine.core.common.queries.SearchParameters(("hosts: datacenter=" + dataCenterName), org.ovirt.engine.core.common.interfaces.SearchType.VDS); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.Search, sp, aQuery); }
public void getUserProfile(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD> aQuery) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetUserProfile, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }	public void getUserProfile(org.ovirt.engine.ui.frontend.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> aQuery) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetUserProfile, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase().withoutRefresh(), aQuery); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.util.HashMap<java.lang.String, java.util.List<java.lang.String>><START_MOD> result<END_MOD>) <START_MOD>{ namespacesMap = <END_MOD>result; populateProfiles(getProfileEntries()); }	@java.lang.Override public void onSuccess(java.util.Map<java.lang.String, java.util.List<java.lang.String>> result) { namespacesMap = result; populateProfiles(getProfileEntries()); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.<START_MOD>util.List<org.ovirt.engine.core.aaa.ProfileEntry> result) { setProfileEntries(result); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getAAANamespaces(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>>() { @java.lang.Override public void onSuccess(java.<END_MOD>lang.Object <START_MOD>model, java.util.HashMap<java.lang.String, java.util.List<java.lang.String>> <END_MOD>result) { namespacesMap = <START_MOD>result<END_MOD>; populateProfiles(getProfileEntries()); } })); }	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.aaa.ProfileEntry> result) { setProfileEntries(result); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getAAANamespaces(new org.ovirt.engine.ui.uicommonweb.models.users.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.Map<java.lang.String, java.util.List<java.lang.String>>>() { @java.lang.Override public void onSuccess(java.util.Map<java.lang.String, java.util.List<java.lang.String>> result) { namespacesMap = result; populateProfiles(getProfileEntries()); } })); }
private void doVolumeSearch() { org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>><END_MOD> volumeQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>><END_MOD>() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes<END_MOD>) { setVolumeMap(new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>>()); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume : volumes) { org.ovirt.engine.core.compat.Guid key = volume.getClusterId(); if (!(getVolumeMap().containsKey(key))) { getVolumeMap().put(key, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>()); } java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> list = getVolumeMap().get(key); list.add(volume); } } }<START_MOD>)<END_MOD>; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVolumeList(volumeQuery, null, false); }	private void doVolumeSearch() { org.ovirt.engine.ui.uicommonweb.models.AsyncQuery<java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>> volumeQuery = new org.ovirt.engine.ui.uicommonweb.models.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>>() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes) { setVolumeMap(new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>>()); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume : volumes) { org.ovirt.engine.core.compat.Guid key = volume.getClusterId(); if (!(getVolumeMap().containsKey(key))) { getVolumeMap().put(key, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>()); } java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> list = getVolumeMap().get(key); list.add(volume); } } }); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVolumeList(volumeQuery, null, false); }
private void doDataCenterSearch() { final org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>><END_MOD> dcQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); dcQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>><END_MOD>() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.StoragePool><END_MOD> result) { setDataCenters(result); doNetworksSearch(); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterList(dcQuery, false); }	private void doDataCenterSearch() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterList(new org.ovirt.engine.ui.uicommonweb.models.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>>() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> result) { setDataCenters(result); doNetworksSearch(); } }), false); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts<END_MOD>) { setHostMap(new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>>()); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { org.ovirt.engine.core.compat.Guid key = host.getClusterId(); if (!(getHostMap().containsKey(key))) { getHostMap().put(key, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); } java.util.List<org.ovirt.engine.core.common.businessentities.VDS> list = getHostMap().get(key); list.add(host); } }	@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts) { setHostMap(new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>>()); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { org.ovirt.engine.core.compat.Guid key = host.getClusterId(); if (!(getHostMap().containsKey(key))) { getHostMap().put(key, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); } java.util.List<org.ovirt.engine.core.common.businessentities.VDS> list = getHostMap().get(key); list.add(host); } }
private void doHostSearch() { org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.VDS>><END_MOD> hostQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.VDS>><END_MOD>() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts<START_MOD>) { <END_MOD>setHostMap(new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>>()); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { org.ovirt.engine.core.compat.Guid key = host.getClusterId(); if (!(getHostMap().containsKey(key))) { getHostMap().put(key, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); } java.util.List<org.ovirt.engine.core.common.businessentities.VDS> list = getHostMap().get(key); list.add(host); } } }<START_MOD>); hostQuery.asyncCallback =<END_MOD> org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostList(hostQuery, false); }	private void doHostSearch() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostList(new org.ovirt.engine.ui.uicommonweb.models.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.VDS>>() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts) { setHostMap(new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>>()); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { org.ovirt.engine.core.compat.Guid key = host.getClusterId(); if (!(getHostMap().containsKey(key))) { getHostMap().put(key, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); } java.util.List<org.ovirt.engine.core.common.businessentities.VDS> list = getHostMap().get(key); list.add(host); } } }), false); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool><START_MOD> result<END_MOD>) <START_MOD>{ setDataCenters<END_MOD>(result); doNetworksSearch(); }	@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> result) { setDataCenters(result); doNetworksSearch(); }
private void doClusterSearch() { org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>><END_MOD> clusterQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); clusterQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>><END_MOD>() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters<START_MOD>) { <END_MOD>setClusterMap(new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>>()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if ((cluster.getStoragePoolId()) != null) { org.ovirt.engine.core.compat.Guid key = cluster.getStoragePoolId(); if (!(getClusterMap().containsKey(key))) { getClusterMap().put(key, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>()); } java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> list = getClusterMap().get(key); list.add(cluster); } } } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterList(clusterQuery, false); }	private void doClusterSearch() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterList(new org.ovirt.engine.ui.uicommonweb.models.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>>() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters) { setClusterMap(new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>>()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if ((cluster.getStoragePoolId()) != null) { org.ovirt.engine.core.compat.Guid key = cluster.getStoragePoolId(); if (!(getClusterMap().containsKey(key))) { getClusterMap().put(key, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>()); } java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> list = getClusterMap().get(key); list.add(cluster); } } } }), false); }
@java.lang.Override protected void syncSearch() { super.syncSearch(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getRootTag(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.businessentities.Tags><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, <START_MOD>org.ovirt.engine.core.common.businessentities.Tags<END_MOD> returnValue) { org.ovirt.engine.ui.uicommonweb.models.tags.<START_MOD>TagModel rootTag<END_MOD> = tagToModel(returnValue); rootTag.getName().setEntity(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().rootTag()); rootTag.setType(TagModelType.Root); rootTag.setIsChangeable(false); setItems(new java.util.ArrayList(java.util.Arrays.asList(new org.ovirt.engine.ui.uicommonweb.models.tags.TagModel[]{ rootTag }))); } })); }	@java.lang.Override protected void syncSearch() { super.syncSearch(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getRootTag(new org.ovirt.engine.ui.uicommonweb.models.tags.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.businessentities.Tags>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.Tags returnValue) { org.ovirt.engine.ui.uicommonweb.models.tags.TagModel rootTag = tagToModel(returnValue); rootTag.getName().setEntity(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().rootTag()); rootTag.setType(TagModelType.Root); rootTag.setIsChangeable(false); setItems(new java.util.ArrayList(java.util.Arrays.asList(new org.ovirt.engine.ui.uicommonweb.models.tags.TagModel[]{ rootTag }))); } })); }
@java.lang.Override public void onSuccess(java.lang.Object target, <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { java.lang.Object result = returnValue.getReturnValue(); model.postDiscoverTargetsInternal((result != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>) (result)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>())); }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.lang.Object result = returnValue.getReturnValue(); model.postDiscoverTargetsInternal((result != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>) (result)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>())); }
public void getGlusterHookContent(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.lang.String><END_MOD> aQuery, org.ovirt.engine.core.compat.Guid hookId, org.ovirt.engine.core.compat.Guid serverId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? source : ""; } }; org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters(hookId); parameters.setGlusterServerId(serverId); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHookContent, parameters, aQuery); }	public void getGlusterHookContent(org.ovirt.engine.ui.frontend.AsyncQuery<java.lang.String> aQuery, org.ovirt.engine.core.compat.Guid hookId, org.ovirt.engine.core.compat.Guid serverId) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.StringConverter(); org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters(hookId); parameters.setGlusterServerId(serverId); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHookContent, parameters, aQuery); }
public void isSoundcardEnabled(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.lang.Boolean><END_MOD> aQuery, org.ovirt.engine.core.compat.Guid vmId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.lang.Boolean><END_MOD>() { @java.lang.Override public java.lang.<START_MOD>Boolean convert(java.lang.<END_MOD>Object source, org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.lang.Boolean><END_MOD> _asyncQuery) { if (source != null) { return !(((java.util.List<?>) (source)).isEmpty()); } return false; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetSoundDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmId), aQuery); }	public void isSoundcardEnabled(org.ovirt.engine.ui.frontend.AsyncQuery<java.lang.Boolean> aQuery, org.ovirt.engine.core.compat.Guid vmId) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsNonEmptyCollectionConverter(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetSoundDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmId), aQuery); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes<END_MOD>) { setVolumeMap(new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>>()); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume : volumes) { org.ovirt.engine.core.compat.Guid key = volume.getClusterId(); if (!(getVolumeMap().containsKey(key))) { getVolumeMap().put(key, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>()); } java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> list = getVolumeMap().get(key); list.add(volume); } }	@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes) { setVolumeMap(new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>>()); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume : volumes) { org.ovirt.engine.core.compat.Guid key = volume.getClusterId(); if (!(getVolumeMap().containsKey(key))) { getVolumeMap().put(key, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>()); } java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> list = getVolumeMap().get(key); list.add(volume); } }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters<START_MOD>) { <END_MOD>setClusterMap(new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>>()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if ((cluster.getStoragePoolId()) != null) { org.ovirt.engine.core.compat.Guid key = cluster.getStoragePoolId(); if (!(getClusterMap().containsKey(key))) { getClusterMap().put(key, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>()); } java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> list = getClusterMap().get(key); list.add(cluster); } } }	@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters) { setClusterMap(new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>>()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if ((cluster.getStoragePoolId()) != null) { org.ovirt.engine.core.compat.Guid key = cluster.getStoragePoolId(); if (!(getClusterMap().containsKey(key))) { getClusterMap().put(key, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>()); } java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> list = getClusterMap().get(key); list.add(cluster); } } }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { getDefaultConfigurationVersion(<START_MOD>loginModel<END_MOD>); }	@java.lang.Override public void onSuccess(java.util.Map<org.ovirt.engine.core.compat.KeyValuePairCompat<org.ovirt.engine.core.common.queries.ConfigurationValues, java.lang.String>, java.lang.Object> returnValue) { getDefaultConfigurationVersion(loginModel); }
public void getAllowClusterWithVirtGlusterEnabled(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.lang.Boolean><END_MOD> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.lang.Boolean><END_MOD>() { @java.lang.Override public java.lang.<START_MOD>Boolean<END_MOD> convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? <START_MOD>((java.lang.Boolean) (<END_MOD>source<START_MOD>))<END_MOD> : java.lang.Boolean.TRUE; } }; getConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.AllowClusterWithVirtGlusterEnabled, getDefaultConfigurationVersion()), aQuery); }	public void getAllowClusterWithVirtGlusterEnabled(org.ovirt.engine.ui.frontend.AsyncQuery<java.lang.Boolean> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DefaultValueConverter(java.lang.Boolean.TRUE); getConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.AllowClusterWithVirtGlusterEnabled, getDefaultConfigurationVersion()), aQuery); }
private void initMigrationPolicies() { org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy>><END_MOD> aQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy>><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, java.<START_MOD>util.List<org.ovirt.engine.core.common.migration.MigrationPolicy> returnValue) { migrationPolicies = returnValue; } }); aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy>>() { @java.<END_MOD>lang.Override public java.<START_MOD>util.List<org.ovirt.engine.core.common.migration.MigrationPolicy><END_MOD> convert(java.lang.Object returnValue, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { if (returnValue == null) { return new java.util.ArrayList<<START_MOD>>(); } java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy> policies = ((java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy>) (returnValue));<END_MOD> java.util.Collections.sort(<START_MOD>policies<END_MOD>, new java.util.Comparator<org.ovirt.engine.core.common.migration.MigrationPolicy>() { @java.lang.Override public int compare(org.ovirt.engine.core.common.migration.MigrationPolicy m1, org.ovirt.engine.core.common.migration.MigrationPolicy m2) { if (NoMigrationPolicy.ID.equals(m1.getId())) { return -1; } return m1.getName().compareTo(m2.getName()); } }); return <START_MOD>policies<END_MOD>; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllMigrationPolicies, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }	private void initMigrationPolicies() { org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy>> aQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy>>() { @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy> returnValue) { migrationPolicies = returnValue; } }); aQuery.converterCallback = new org.ovirt.engine.ui.frontend.Converter<java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy>>() { @java.lang.Override public java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy> convert(java.lang.Object returnValue) { if (returnValue == null) { return new java.util.ArrayList<>(); } java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy> policies = ((java.util.List<org.ovirt.engine.core.common.migration.MigrationPolicy>) (returnValue)); java.util.Collections.sort(policies, new java.util.Comparator<org.ovirt.engine.core.common.migration.MigrationPolicy>() { @java.lang.Override public int compare(org.ovirt.engine.core.common.migration.MigrationPolicy m1, org.ovirt.engine.core.common.migration.MigrationPolicy m2) { if (NoMigrationPolicy.ID.equals(m1.getId())) { return -1; } return m1.getName().compareTo(m2.getName()); } }); return policies; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllMigrationPolicies, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }
public void selectHost() { final java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster> clusters = new java.util.ArrayList<>(); clusters.add(getEntity()); final org.ovirt.engine.ui.uicommonweb.models.hosts.MoveHost model = new org.ovirt.engine.ui.uicommonweb.models.hosts.MoveHost(); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().selectHostTitle()); model.setHelpTag(HelpTag.select_host); model.setHashName("select_host"); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterById(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.businessentities.StoragePool><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, <START_MOD>org.ovirt.engine.core.common.businessentities.StoragePool dataCenter<END_MOD>) { boolean isMultiHostDC = dataCenter.isLocal(); if (isMultiHostDC) { model.setMultiSelection(false); } setWindow(model); model.getCluster().setItems(clusters); model.getCluster().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(clusters)); model.getCluster().setIsAvailable(false); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSelectHost", org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel.this); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel.this); model.getCommands().add(tempVar2); } }), getEntity().getStoragePoolId()); }	public void selectHost() { final java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster> clusters = new java.util.ArrayList<>(); clusters.add(getEntity()); final org.ovirt.engine.ui.uicommonweb.models.hosts.MoveHost model = new org.ovirt.engine.ui.uicommonweb.models.hosts.MoveHost(); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().selectHostTitle()); model.setHelpTag(HelpTag.select_host); model.setHashName("select_host"); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterById(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.businessentities.StoragePool>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.StoragePool dataCenter) { boolean isMultiHostDC = dataCenter.isLocal(); if (isMultiHostDC) { model.setMultiSelection(false); } setWindow(model); model.getCluster().setItems(clusters); model.getCluster().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(clusters)); model.getCluster().setIsAvailable(false); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSelectHost", org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel.this); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel.this); model.getCommands().add(tempVar2); } }), getEntity().getStoragePoolId()); }
@java.lang.Override public void onSuccess(java.lang.Object parenModel, <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { deactivate(); getModel().getMemoryBalloonDeviceEnabled().setEntity(((java.lang.Boolean) (returnValue.getReturnValue()))); activate(); if (continueWithNext) { updateRngDevice(vmBase); } }	@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { deactivate(); getModel().getMemoryBalloonDeviceEnabled().setEntity(((java.lang.Boolean) (returnValue.getReturnValue()))); activate(); if (continueWithNext) { updateRngDevice(vmBase); } }
public static void fixDiskLinks(java.lang.String templateId, org.ovirt.engine.api.v3.types.V3Disk disk) { disk.setHref(org.ovirt.engine.api.v3.helpers.V3LinkHelper.linkHref("templates", templateId, "disks", disk.getId())); org.ovirt.engine.api.v3.types.V3Actions actions = disk.getActions(); if (actions != null) { java.util.List<org.ovirt.engine.api.v3.types.V3Link> links = actions.getLinks(); links.clear(); org.ovirt.engine.api.v3.helpers.V3LinkHelper.addLink(links, "templates", templateId, "disks", disk.getId(), "copy"); org.ovirt.engine.api.v3.helpers.V3LinkHelper.addLink(links, "templates", templateId, "disks", disk.getId(), "export"); } }	public static void fixDiskLinks(java.lang.String templateId, org.ovirt.engine.api.v3.types.V3Disk disk) { disk.setHref(org.ovirt.engine.api.v3.helpers.V3LinkHelper.linkHref("templates", templateId, "disks", disk.getId())); org.ovirt.engine.api.v3.types.V3Actions actions = disk.getActions(); if (actions != null) { java.util.List<org.ovirt.engine.api.v3.types.V3Link> links = actions.getLinks(); links.clear(); org.ovirt.engine.api.v3.helpers.V3LinkHelper.addLink(links, "copy", "templates", templateId, "disks", disk.getId(), "copy"); org.ovirt.engine.api.v3.helpers.V3LinkHelper.addLink(links, "export", "templates", templateId, "disks", disk.getId(), "export"); } }
public static org.ovirt.engine.api.v3.types.V3VM addDisksLink(org.ovirt.engine.api.v3.types.V3VM vm) { if (vm == null) { return null; } <START_MOD>java.lang.StringBuilder href = org.ovirt.engine.api.v3.helpers.V3LinkHelper.linkBuffer(); <END_MOD>org.ovirt.engine.api.restapi.invocation.Current current = org.ovirt.engine.api.restapi.invocation.CurrentManager.get(); <START_MOD>href.append(current.getPath()); if (!(current.getPath().contains(vm.getId()))) { href.append(vm.getId()); } href.append("/disks"); org.ovirt.engine.api.v3.types.V3Link link<END_MOD> = new <START_MOD>org.ovirt.engine.api.v3.types.V3Link(); link.setRel("disks"); link.setHref(href.toString()); vm.getLinks().add(link); return vm<END_MOD>; }	public static void addDisksLink(org.ovirt.engine.api.v3.types.V3VM vm) { if (vm != null) { org.ovirt.engine.api.v3.helpers.V3LinkHelper.addLink(vm.getLinks(), "disks", "vms", vm.getId(), "disks"); } }
public static void fixDiskLinks(java.lang.String vmId, org.ovirt.engine.api.v3.types.V3Disk disk) { disk.setHref(org.ovirt.engine.api.v3.helpers.V3LinkHelper.linkHref("vms", vmId, "disks", disk.getId())); org.ovirt.engine.api.v3.types.V3Actions actions = disk.getActions(); if (actions != null) { java.util.List<org.ovirt.engine.api.v3.types.V3Link> links = actions.getLinks(); links.clear(); org.ovirt.engine.api.v3.helpers.V3LinkHelper.addLink(links, "vms", vmId, "disks", disk.getId(), "acivate"); org.ovirt.engine.api.v3.helpers.V3LinkHelper.addLink(links, "vms", vmId, "disks", disk.getId(), "deactivate"); org.ovirt.engine.api.v3.helpers.V3LinkHelper.addLink(links, "vms", vmId, "disks", disk.getId(), "export"); org.ovirt.engine.api.v3.helpers.V3LinkHelper.addLink(links, "vms", vmId, "disks", disk.getId(), "move"); } java.util.List<org.ovirt.engine.api.v3.types.V3Link> links = disk.getLinks(); links.clear(); org.ovirt.engine.api.v3.helpers.V3LinkHelper.addLink(links, "vms", vmId, "disks", disk.getId(), "permissions"); org.ovirt.engine.api.v3.helpers.V3LinkHelper.addLink(links, "vms", vmId, "disks", disk.getId(), "statistics"); }	public static void fixDiskLinks(java.lang.String vmId, org.ovirt.engine.api.v3.types.V3Disk disk) { disk.setHref(org.ovirt.engine.api.v3.helpers.V3LinkHelper.linkHref("vms", vmId, "disks", disk.getId())); org.ovirt.engine.api.v3.types.V3Actions actions = disk.getActions(); if (actions != null) { java.util.List<org.ovirt.engine.api.v3.types.V3Link> links = actions.getLinks(); links.clear(); org.ovirt.engine.api.v3.helpers.V3LinkHelper.addLink(links, "activate", "vms", vmId, "disks", disk.getId(), "acivate"); org.ovirt.engine.api.v3.helpers.V3LinkHelper.addLink(links, "deactivate", "vms", vmId, "disks", disk.getId(), "deactivate"); org.ovirt.engine.api.v3.helpers.V3LinkHelper.addLink(links, "export", "vms", vmId, "disks", disk.getId(), "export"); org.ovirt.engine.api.v3.helpers.V3LinkHelper.addLink(links, "move", "vms", vmId, "disks", disk.getId(), "move"); } java.util.List<org.ovirt.engine.api.v3.types.V3Link> links = disk.getLinks(); links.clear(); org.ovirt.engine.api.v3.helpers.V3LinkHelper.addLink(links, "permissions", "vms", vmId, "disks", disk.getId(), "permissions"); org.ovirt.engine.api.v3.helpers.V3LinkHelper.addLink(links, "statistics", "vms", vmId, "disks", disk.getId(), "statistics"); }
public static org.ovirt.engine.api.v3.types.V3Template addDisksLink(org.ovirt.engine.api.v3.types.V3Template template) { if (template == null) { return null; } <START_MOD>java.lang.StringBuilder href = org.ovirt.engine.api.v3.helpers.V3LinkHelper.linkBuffer(); <END_MOD>org.ovirt.engine.api.restapi.invocation.Current current = org.ovirt.engine.api.restapi.invocation.CurrentManager.get(); <START_MOD>if (!(current.getPath().contains(template.getId()))) { href.append("/"); href.append(template.getId()); } href.append("/disks"); org.ovirt.engine.api.v3.types.V3Link link<END_MOD> = new <START_MOD>org.ovirt.engine.api.v3.types.V3Link(); link.setRel("disks"); link.setHref(href.toString()); template.getLinks().add(link); return template<END_MOD>; }	public static void addDisksLink(org.ovirt.engine.api.v3.types.V3Template template) { if (template != null) { org.ovirt.engine.api.v3.helpers.V3LinkHelper.addLink(template.getLinks(), "disks", "templates", template.getId(), "disks"); } }
protected boolean <START_MOD>isDataOperationsByHSM<END_MOD>(org.ovirt.engine.core.common.businessentities.<START_MOD>StorageDomainStatic<END_MOD> <START_MOD>targetSd<END_MOD>) { return <START_MOD>(<END_MOD>(org.ovirt.engine.core.common.FeatureSupported.dataOperationsByHSM(<START_MOD>org.ovirt.engine.core.bll.storage.disk.image.BaseImagesCommand.getStoragePool()<END_MOD>.getCompatibilityVersion()))<START_MOD> && (!(org.ovirt.engine.core.bll.storage.disk.image.BaseImagesCommand.getStoragePool().isLocal()))) && (targetSd.getStorageDomainType().isDataDomain())<END_MOD>; }	protected boolean isDataOperationsByHSM(org.ovirt.engine.core.common.businessentities.StorageDomainStatic targetSd) { return ((org.ovirt.engine.core.common.FeatureSupported.dataOperationsByHSM(org.ovirt.engine.core.bll.storage.disk.image.BaseImagesCommand.getStoragePool().getCompatibilityVersion())) && (!(targetSd.getStorageType().isLocal()))) && (targetSd.getStorageDomainType().isDataDomain()); }
@java.lang.Override protected void executeIrsBrokerCommand() { <START_MOD>org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters p<END_MOD> = <START_MOD>new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(org.ovirt.engine.core.vdsbroker.irsbroker.GetImageInfoVDSCommand.getCurrentIrsProxyData().getCurrentVdsId(), org.ovirt.engine.core.vdsbroker.irsbroker.GetImageInfoVDSCommand.getParameters().getStoragePoolId(), <END_MOD>org.ovirt.engine.core.vdsbroker.irsbroker.GetImageInfoVDSCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.vdsbroker.irsbroker.GetImageInfoVDSCommand.getParameters().getImageGroupId(), org.ovirt.engine.core.vdsbroker.irsbroker.GetImageInfoVDSCommand.getParameters().getImageId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage di = null; try { di = <START_MOD>((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (resourceManager.runVdsCommand(VDSCommandType.GetVolumeInfo, p).getReturnValue()<END_MOD>)); } <START_MOD>finally<END_MOD> { org.ovirt.engine.core.vdsbroker.irsbroker.GetImageInfoVDSCommand.<START_MOD>getVDSReturnValue().setSucceeded((di != null)); setReturnValue(di<END_MOD>); } }	@java.lang.Override protected void executeIrsBrokerCommand() { org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters p = new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(org.ovirt.engine.core.vdsbroker.irsbroker.GetImageInfoVDSCommand.getCurrentIrsProxyData().getCurrentVdsId(), org.ovirt.engine.core.vdsbroker.irsbroker.GetImageInfoVDSCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.vdsbroker.irsbroker.GetImageInfoVDSCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.vdsbroker.irsbroker.GetImageInfoVDSCommand.getParameters().getImageGroupId(), org.ovirt.engine.core.vdsbroker.irsbroker.GetImageInfoVDSCommand.getParameters().getImageId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage di = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (resourceManager.runVdsCommand(VDSCommandType.GetVolumeInfo, p).getReturnValue())); org.ovirt.engine.core.vdsbroker.irsbroker.GetImageInfoVDSCommand.getVDSReturnValue().setSucceeded((di != null)); if (!(org.ovirt.engine.core.vdsbroker.irsbroker.GetImageInfoVDSCommand.getVDSReturnValue().getSucceeded())) { org.ovirt.engine.core.vdsbroker.irsbroker.GetImageInfoVDSCommand.log.error("Failed to get the volume information, marking as FAILED"); } setReturnValue(di); }
public void init() { org.ovirt.engine.ui.uicommonweb.ICommandTarget target = ((org.ovirt.engine.ui.uicommonweb.ICommandTarget) (getEntity())); org.ovirt.engine.ui.uicommonweb.UICommand actionCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("OnExecute", this); actionCommand.setTitle(constants.ok()); actionCommand.setIsDefault(true); getCommands().add(actionCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", target); cancelCommand.setTitle(constants.cancel()); cancelCommand.setIsCancel(true); getCommands().add(cancelCommand); <START_MOD>setSourceAvailable(true); <END_MOD>}	public void init() { org.ovirt.engine.ui.uicommonweb.ICommandTarget target = ((org.ovirt.engine.ui.uicommonweb.ICommandTarget) (getEntity())); org.ovirt.engine.ui.uicommonweb.UICommand actionCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("OnExecute", this); actionCommand.setTitle(constants.ok()); actionCommand.setIsDefault(true); getCommands().add(actionCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", target); cancelCommand.setTitle(constants.cancel()); cancelCommand.setIsCancel(true); getCommands().add(cancelCommand); }
protected void unlockVm() { org.ovirt.engine.core.bll.VmCommand.setVm(null); if ((org.ovirt.engine.core.bll.VmCommand.getVm()) != null) { if ((org.ovirt.engine.core.bll.VmCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked)) { org.ovirt.engine.core.bll.VmHandler.unlockVm(org.ovirt.engine.core.bll.VmCommand.getVm(), org.ovirt.engine.core.bll.VmCommand.getCompensationContext()); } } else { setLoggingForCommand(); log.warn( is null - not performing endAction on Vm } }	protected void unlockVm() { org.ovirt.engine.core.bll.VmCommand.setVm(null); if ((org.ovirt.engine.core.bll.VmCommand.getVm()) != null) { if ((org.ovirt.engine.core.bll.VmCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked)) { org.ovirt.engine.core.bll.VmHandler.unlockVm(org.ovirt.engine.core.bll.VmCommand.getVm(), org.ovirt.engine.core.bll.VmCommand.getCompensationContext()); } } else { setLoggingForCommand(); log.warn("VM is null - no unlocking"); } }
public void postUpdateHost(java.util.Collection<org.ovirt.engine.core.common.businessentities.VDS> hosts) { hosts = org.ovirt.engine.ui.uicommonweb.Linq.where(hosts, new org.ovirt.engine.ui.uicommonweb.Linq.HostStatusPredicate(org.ovirt.engine.core.common.businessentities.VDSStatus.Up)); org.ovirt.engine.core.common.businessentities.VDS oldSelectedItem = getHost().getSelectedItem(); org.ovirt.engine.core.common.businessentities.VDS selectedItem = null; if (((getStorage()) != null) && ((getStorage().getStatus()) != (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Maintenance))) { org.ovirt.engine.core.common.businessentities.VDS spm = getSPM(hosts); hosts = (spm != null) ? java.util.Collections.singletonList(spm) : java.util.Collections.<org.ovirt.engine.core.common.businessentities.VDS>emptyList(); } if (oldSelectedItem != null) { selectedItem = org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(hosts, new org.ovirt.engine.ui.uicommonweb.Linq.IdPredicate<>(oldSelectedItem.getId())); } if (selectedItem == null) { org.ovirt.engine.core.common.businessentities.VDS spm = getSPM(hosts); selectedItem = (spm == null) ? org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(hosts) : spm; } <START_MOD>if (((!(java.util.Objects.equals(<END_MOD>getHost().<START_MOD>getSelectedItem(), selectedItem))) || (!(java.util.Objects.equals(getHost().getItems(), hosts)))) || (storageTypeChanged)) { if (storageTypeChanged) { storageTypeChanged = false; } getHost().<END_MOD>setItems(hosts, selectedItem); }<START_MOD> }<END_MOD>	public void postUpdateHost(java.util.Collection<org.ovirt.engine.core.common.businessentities.VDS> hosts) { hosts = org.ovirt.engine.ui.uicommonweb.Linq.where(hosts, new org.ovirt.engine.ui.uicommonweb.Linq.HostStatusPredicate(org.ovirt.engine.core.common.businessentities.VDSStatus.Up)); org.ovirt.engine.core.common.businessentities.VDS oldSelectedItem = getHost().getSelectedItem(); org.ovirt.engine.core.common.businessentities.VDS selectedItem = null; if (((getStorage()) != null) && ((getStorage().getStatus()) != (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Maintenance))) { org.ovirt.engine.core.common.businessentities.VDS spm = getSPM(hosts); hosts = (spm != null) ? java.util.Collections.singletonList(spm) : java.util.Collections.<org.ovirt.engine.core.common.businessentities.VDS>emptyList(); } if (oldSelectedItem != null) { selectedItem = org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(hosts, new org.ovirt.engine.ui.uicommonweb.Linq.IdPredicate<>(oldSelectedItem.getId())); } if (selectedItem == null) { org.ovirt.engine.core.common.businessentities.VDS spm = getSPM(hosts); selectedItem = (spm == null) ? org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(hosts) : spm; } getHost().setItems(hosts, selectedItem); }
protected void storageType_SelectedItemChanged() { updateCurrentStorageItem(); if ((getCurrentStorageItem()) != null) { <START_MOD>storageTypeChanged = true; <END_MOD>updateFormat(); updateHost(); } updateWipeAfterDelete(); }	protected void storageType_SelectedItemChanged() { updateCurrentStorageItem(); if ((getCurrentStorageItem()) != null) { updateFormat(); updateHost(); } updateWipeAfterDelete(); }
public org.ovirt.engine.core.common.businessentities.storage.VolumeType <START_MOD>getVolumeTypeByFormatAndStorage<END_MOD>(org.ovirt.engine.core.common.businessentities.storage.VolumeFormat volumeFormat, org.ovirt.engine.core.common.businessentities.storage.StorageType storageType) { switch (volumeFormat) { case COW : return org.ovirt.engine.core.common.businessentities.storage.VolumeType.Sparse; case RAW : default : return storageType.isFileDomain() ? org.ovirt.engine.core.common.businessentities.storage.VolumeType.Sparse : org.ovirt.engine.core.common.businessentities.storage.VolumeType.Preallocated; } }	public org.ovirt.engine.core.common.businessentities.storage.VolumeType getVolumeType(org.ovirt.engine.core.common.businessentities.storage.VolumeFormat volumeFormat, org.ovirt.engine.core.common.businessentities.storage.StorageType storageType) { switch (volumeFormat) { case COW : return org.ovirt.engine.core.common.businessentities.storage.VolumeType.Sparse; case RAW : default : return storageType.isFileDomain() ? org.ovirt.engine.core.common.businessentities.storage.VolumeType.Sparse : org.ovirt.engine.core.common.businessentities.storage.VolumeType.Preallocated; } }
private void updateImageToDestinationDomainMap() { if ((disks) == null) { return; } for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : disks) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = diskModel.getStorageDomain().getSelectedItem(); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskModel.getDisk())); diskImage.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(storageDomain.getId()))); diskImage.setDiskAlias(diskModel.getAlias().getEntity()); org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile = diskModel.getDiskProfile().getSelectedItem(); diskImage.setDiskProfileId((diskProfile != null ? diskProfile.getId() : null)); if ((diskModel.getQuota().getSelectedItem()) != null) { diskImage.setQuotaId(diskModel.getQuota().getSelectedItem().getId()); } if (diskModel.getVolumeFormat().getIsAvailable()) { org.ovirt.engine.core.common.businessentities.storage.VolumeFormat volumeFormat = diskModel.getVolumeFormat().getSelectedItem(); diskImage.setVolumeFormat(volumeFormat); diskImage.setVolumeType(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().<START_MOD>getVolumeTypeByFormatAndStorage<END_MOD>(volumeFormat, storageDomain.getStorageType())); } else if (diskModel.getVolumeType().getIsAvailable()) { org.ovirt.engine.core.common.businessentities.storage.VolumeType volumeType = diskModel.getVolumeType().getSelectedItem(); diskImage.setVolumeType(volumeType); diskImage.setVolumeFormat(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDiskVolumeFormat(volumeType, storageDomain.getStorageType())); } imageToDestinationDomainMap.put(diskImage.getId(), diskImage); } }	private void updateImageToDestinationDomainMap() { if ((disks) == null) { return; } for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : disks) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = diskModel.getStorageDomain().getSelectedItem(); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskModel.getDisk())); diskImage.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(storageDomain.getId()))); diskImage.setDiskAlias(diskModel.getAlias().getEntity()); org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile = diskModel.getDiskProfile().getSelectedItem(); diskImage.setDiskProfileId((diskProfile != null ? diskProfile.getId() : null)); if ((diskModel.getQuota().getSelectedItem()) != null) { diskImage.setQuotaId(diskModel.getQuota().getSelectedItem().getId()); } if (diskModel.getVolumeFormat().getIsAvailable()) { org.ovirt.engine.core.common.businessentities.storage.VolumeFormat volumeFormat = diskModel.getVolumeFormat().getSelectedItem(); diskImage.setVolumeFormat(volumeFormat); diskImage.setVolumeType(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVolumeType(volumeFormat, storageDomain.getStorageType())); } else if (diskModel.getVolumeType().getIsAvailable()) { org.ovirt.engine.core.common.businessentities.storage.VolumeType volumeType = diskModel.getVolumeType().getSelectedItem(); diskImage.setVolumeType(volumeType); diskImage.setVolumeFormat(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDiskVolumeFormat(volumeType, storageDomain.getStorageType())); } imageToDestinationDomainMap.put(diskImage.getId(), diskImage); } }
public boolean flush() { if (validate()) { diskModel.flush(); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDiskModel().getDisk())); diskImage.setVolumeFormat(getVolumeFormat().getSelectedItem()); diskImage.setActualSizeInBytes(getImageSize()); diskImage.setVolumeType(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().<START_MOD>getVolumeTypeByFormatAndStorage<END_MOD>(getVolumeFormat().getSelectedItem(), getDiskModel().getStorageDomain().getSelectedItem().getStorageType())); return true; } else { setIsValid(false); } return false; }	public boolean flush() { if (validate()) { diskModel.flush(); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDiskModel().getDisk())); diskImage.setVolumeFormat(getVolumeFormat().getSelectedItem()); diskImage.setActualSizeInBytes(getImageSize()); diskImage.setVolumeType(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVolumeType(getVolumeFormat().getSelectedItem(), getDiskModel().getStorageDomain().getSelectedItem().getStorageType())); return true; } else { setIsValid(false); } return false; }
java.lang.String AFFINITY_GROUP_NAME_SIZE_INVALID();	java.lang.String AFFINITY_GROUP_NAME_TOO_LONG();
java.lang.String <START_MOD>AFFINITY_LABEL_NAME_TOO_LONG<END_MOD>();	java.lang.String AFFINITY_LABEL_NAME_SIZE_INVALID();
public org.ovirt.engine.api.v3.types.V3Creation get() { return adaptGet(getDelegate()::get); }	@javax.ws.rs.GET public org.ovirt.engine.api.v3.types.V3Creation get() { return adaptGet(getDelegate()::get); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { importGlusterExplanationLabel.setVisible(((object.getEnableGlusterService().getEntity()) && (object.getIsNew()))); <START_MOD>updateGlusterFencingPolicyVisibility(object.getEnableGlusterService().getEntity()); <END_MOD>}	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { updateGlusterFencingPolicyVisibility(object); }
private void updateGlusterFencingPolicyVisibility(boolean glusterEnabled) { skipFencingIfGlusterBricksUpInfo.setVisible(glusterEnabled); skipFencingIfGlusterQuorumNotMetInfo.setVisible(glusterEnabled); }	private void updateGlusterFencingPolicyVisibility(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel object) { skipFencingIfGlusterBricksUpInfo.setVisible(((object.getEnableGlusterService().getEntity()) && (object.getEnableOvirtService().getEntity()))); skipFencingIfGlusterQuorumNotMetInfo.setVisible(((object.getEnableGlusterService().getEntity()) && (object.getEnableOvirtService().getEntity()))); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { refreshAdditionalClusterFeaturesList(); if ((!(getAllowClusterWithVirtGlusterEnabled())) && (getEnableGlusterService().getEntity())) { getEnableOvirtService().setEntity(java.lang.Boolean.FALSE); } if (((!isEdit) && ((getEnableGlusterService().getEntity()) != null)) && (getEnableGlusterService().getEntity())) { getIsImportGlusterConfiguration().setIsAvailable(true); getGlusterHostAddress().setIsAvailable(true); getGlusterHostFingerprint().setIsAvailable(true); getGlusterHostPassword().setIsAvailable(true); } else { getIsImportGlusterConfiguration().setIsAvailable(false); getIsImportGlusterConfiguration().setEntity(false); getGlusterHostAddress().setIsAvailable(false); getGlusterHostFingerprint().setIsAvailable(false); getGlusterHostPassword().setIsAvailable(false); } if (((getEnableGlusterService().getEntity()) != null) && (getEnableGlusterService().getEntity())) { getEnableTrustedService().setEntity(false); getEnableTrustedService().setIsChangeable(false); } else { if (((getEnableOvirtService().getEntity()) != null) && (getEnableOvirtService().getEntity())) { getEnableTrustedService().setIsChangeable(true); } else { getEnableTrustedService().setIsChangeable(false); } } getGlusterTunedProfile().setIsAvailable(getEnableGlusterService().getEntity()); <START_MOD>getSkipFencingIfGlusterBricksUp().setIsAvailable(getEnableGlusterService().getEntity()); getSkipFencingIfGlusterQuorumNotMet().setIsAvailable(getEnableGlusterService().getEntity()); <END_MOD>if (getEnableGlusterService().getEntity()) { initTunedProfiles(); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { refreshAdditionalClusterFeaturesList(); if ((!(getAllowClusterWithVirtGlusterEnabled())) && (getEnableGlusterService().getEntity())) { getEnableOvirtService().setEntity(java.lang.Boolean.FALSE); } if (((!isEdit) && ((getEnableGlusterService().getEntity()) != null)) && (getEnableGlusterService().getEntity())) { getIsImportGlusterConfiguration().setIsAvailable(true); getGlusterHostAddress().setIsAvailable(true); getGlusterHostFingerprint().setIsAvailable(true); getGlusterHostPassword().setIsAvailable(true); } else { getIsImportGlusterConfiguration().setIsAvailable(false); getIsImportGlusterConfiguration().setEntity(false); getGlusterHostAddress().setIsAvailable(false); getGlusterHostFingerprint().setIsAvailable(false); getGlusterHostPassword().setIsAvailable(false); } if (((getEnableGlusterService().getEntity()) != null) && (getEnableGlusterService().getEntity())) { getEnableTrustedService().setEntity(false); getEnableTrustedService().setIsChangeable(false); } else { if (((getEnableOvirtService().getEntity()) != null) && (getEnableOvirtService().getEntity())) { getEnableTrustedService().setIsChangeable(true); } else { getEnableTrustedService().setIsChangeable(false); } } getGlusterTunedProfile().setIsAvailable(getEnableGlusterService().getEntity()); updateGlusterFencingPolicyAvailability(); if (getEnableGlusterService().getEntity()) { initTunedProfiles(); } }
public static org.ovirt.engine.sdk4.ConnectionBuilder connection() { java.lang.Class<? extends org.ovirt.engine.sdk4.ConnectionBuilder> clazz = null; try { clazz = ((java.lang.Class<org.ovirt.engine.sdk4.ConnectionBuilder>) (java.lang.Class.forName("org.ovirt.engine.sdk4.internal.ConnectionBuilder45"))); } catch (java.lang.ClassNotFoundException <START_MOD>| java.lang.LinkageError <END_MOD>ex) { try { clazz = ((java.lang.Class<org.ovirt.engine.sdk4.ConnectionBuilder>) (java.lang.Class.forName("org.ovirt.engine.sdk4.internal.ConnectionBuilder42"))); } catch (java.lang.ClassNotFoundException <START_MOD>| java.lang.LinkageError <END_MOD>e) { throw new java.lang.Error( connection implementation found e); } } try { return clazz.newInstance(); } catch (java.lang.Exception e) { throw new java.lang.Error( to initialize connection implementation e); } }	public static org.ovirt.engine.sdk4.ConnectionBuilder connection() { java.lang.Class<? extends org.ovirt.engine.sdk4.ConnectionBuilder> clazz = null; try { clazz = ((java.lang.Class<org.ovirt.engine.sdk4.ConnectionBuilder>) (java.lang.Class.forName("org.ovirt.engine.sdk4.internal.ConnectionBuilder45"))); } catch (java.lang.Throwable ex) { try { clazz = ((java.lang.Class<org.ovirt.engine.sdk4.ConnectionBuilder>) (java.lang.Class.forName("org.ovirt.engine.sdk4.internal.ConnectionBuilder42"))); } catch (java.lang.Throwable e) { throw new java.lang.Error("No connection implementation found", e); } } try { return clazz.newInstance(); } catch (java.lang.Exception e) { throw new java.lang.Error("Failed to initialize connection implementation", e); } }
boolean validatePluginAction(java.lang.String pluginName<START_MOD>, boolean allowWhileLoading<END_MOD>) { org.ovirt.engine.ui.webadmin.plugin.Plugin plugin = getPlugin(pluginName); <START_MOD>if<END_MOD> (plugin <START_MOD>==<END_MOD> null) <START_MOD>{<END_MOD> <START_MOD>return false; } boolean isInitializingOrInUse = <END_MOD>(plugin.isInState(PluginState.INITIALIZING)) || (plugin.isInState(PluginState.IN_USE))<START_MOD>; boolean isLoading = plugin.isInState(PluginState.LOADING<END_MOD>); <START_MOD>return allowWhileLoading ? isLoading || isInitializingOrInUse : isInitializingOrInUse; <END_MOD>}	boolean validatePluginAction(java.lang.String pluginName, boolean allowWhileLoading) { org.ovirt.engine.ui.webadmin.plugin.Plugin plugin = getPlugin(pluginName); if (plugin == null) { return false; } boolean isInitializingOrInUse = (plugin.isInState(PluginState.INITIALIZING)) || (plugin.isInState(PluginState.IN_USE)); boolean isLoading = plugin.isInState(PluginState.LOADING); return isInitializingOrInUse || (allowWhileLoading && isLoading); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.StoragePool pool) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("description", pool.getdescription()).addValue("free_text_comment", pool.getComment()).addValue("id", pool.getId()).addValue("name", pool.getName()).addValue("is_local", pool.isLocal()).addValue("status", pool.getStatus()).addValue("master_domain_version", pool.getMasterDomainVersion()).addValue("spm_vds_id", pool.getSpmVdsId()).addValue("quota_enforcement_type", pool.getQuotaEnforcementType()).addValue("compatibility_version", pool.getCompatibilityVersion())<START_MOD>.addValue("default_quota_id", pool.getDefaultQuotaId())<END_MOD>; getCallsHandler().executeModification("Insertstorage_pool", parameterSource); }	@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.StoragePool pool) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("description", pool.getdescription()).addValue("free_text_comment", pool.getComment()).addValue("id", pool.getId()).addValue("name", pool.getName()).addValue("is_local", pool.isLocal()).addValue("status", pool.getStatus()).addValue("master_domain_version", pool.getMasterDomainVersion()).addValue("spm_vds_id", pool.getSpmVdsId()).addValue("quota_enforcement_type", pool.getQuotaEnforcementType()).addValue("compatibility_version", pool.getCompatibilityVersion()); getCallsHandler().executeModification("Insertstorage_pool", parameterSource); }
public boolean isDefaultForStoragePool() { return defaultForStoragePool; }	public boolean isDefault() { return isDefault; }
public void setDefaultForStoragePool(boolean defaultForStoragePool) { this.defaultForStoragePool = defaultForStoragePool; }	public void setDefault(boolean value) { this.isDefault = value; }
public boolean isQuotaDefault(org.ovirt.engine.core.compat.Guid id);	public org.ovirt.engine.core.common.businessentities.Quota getDefaultQuotaForStoragePool(org.ovirt.engine.core.compat.Guid storagePoolId);
@java.lang.Override public boolean isQuotaDefault(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("quota_id", id); return getCallsHandler().executeRead("IsQuotaDefault", ( rs, rowNum) -> rs.getBoolean(1), parameterSource); }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.Quota getDefaultQuotaForStoragePool(org.ovirt.engine.core.compat.Guid storagePoolId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("storage_pool_id", storagePoolId); org.ovirt.engine.core.common.businessentities.Quota quota = getCallsHandler().executeRead("GetDefaultQuotaForStoragePool", getQuotaFromResultSet(), parameterSource); return quota; }
private org.ovirt.engine.core.common.businessentities.Quota getQuotaMetaDataFromResultSet(java.sql.ResultSet rs) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.Quota entity = new org.ovirt.engine.core.common.businessentities.Quota(); entity.setId(getGuidDefaultEmpty(rs, "quota_id")); entity.setStoragePoolId(getGuidDefaultEmpty(rs, "storage_pool_id")); entity.setStoragePoolName(rs.getString("storage_pool_name")); entity.setQuotaName(((java.lang.String) (rs.getObject("quota_name")))); entity.setDescription(((java.lang.String) (rs.getObject("description")))); entity.setThresholdClusterPercentage(((java.lang.Integer) (rs.getObject("threshold_cluster_percentage")))); entity.setThresholdStoragePercentage(((java.lang.Integer) (rs.getObject("threshold_storage_percentage")))); entity.setGraceClusterPercentage(((java.lang.Integer) (rs.getObject("grace_cluster_percentage")))); entity.setGraceStoragePercentage(((java.lang.Integer) (rs.getObject("grace_storage_percentage")))); entity.setQuotaEnforcementType(org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type"))); <START_MOD>entity.setDefaultForStoragePool(rs.getBoolean("is_default")); <END_MOD>return entity; }	private org.ovirt.engine.core.common.businessentities.Quota getQuotaMetaDataFromResultSet(java.sql.ResultSet rs) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.Quota entity = new org.ovirt.engine.core.common.businessentities.Quota(); entity.setId(getGuidDefaultEmpty(rs, "quota_id")); entity.setStoragePoolId(getGuidDefaultEmpty(rs, "storage_pool_id")); entity.setStoragePoolName(rs.getString("storage_pool_name")); entity.setQuotaName(((java.lang.String) (rs.getObject("quota_name")))); entity.setDescription(((java.lang.String) (rs.getObject("description")))); entity.setThresholdClusterPercentage(((java.lang.Integer) (rs.getObject("threshold_cluster_percentage")))); entity.setThresholdStoragePercentage(((java.lang.Integer) (rs.getObject("threshold_storage_percentage")))); entity.setGraceClusterPercentage(((java.lang.Integer) (rs.getObject("grace_cluster_percentage")))); entity.setGraceStoragePercentage(((java.lang.Integer) (rs.getObject("grace_storage_percentage")))); entity.setQuotaEnforcementType(org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type"))); entity.setDefault(rs.getBoolean("is_default")); return entity; }
@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.StoragePool pool) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("description", pool.getdescription()).addValue("free_text_comment", pool.getComment()).addValue("id", pool.getId()).addValue("name", pool.getName()).addValue("status", pool.getStatus()).addValue("is_local", pool.isLocal()).addValue("storage_pool_format_type", pool.getStoragePoolFormatType()).addValue("master_domain_version", pool.getMasterDomainVersion()).addValue("spm_vds_id", pool.getSpmVdsId()).addValue("compatibility_version", pool.getCompatibilityVersion()).addValue("quota_enforcement_type", pool.getQuotaEnforcementType().getValue())<START_MOD>.addValue("default_quota_id", pool.getDefaultQuotaId())<END_MOD>; getCallsHandler().executeModification("Updatestorage_pool", parameterSource); }	@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.StoragePool pool) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("description", pool.getdescription()).addValue("free_text_comment", pool.getComment()).addValue("id", pool.getId()).addValue("name", pool.getName()).addValue("status", pool.getStatus()).addValue("is_local", pool.isLocal()).addValue("storage_pool_format_type", pool.getStoragePoolFormatType()).addValue("master_domain_version", pool.getMasterDomainVersion()).addValue("spm_vds_id", pool.getSpmVdsId()).addValue("compatibility_version", pool.getCompatibilityVersion()).addValue("quota_enforcement_type", pool.getQuotaEnforcementType().getValue()); getCallsHandler().executeModification("Updatestorage_pool", parameterSource); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.StoragePool mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.StoragePool entity = new org.ovirt.engine.core.common.businessentities.StoragePool(); entity.setdescription(rs.getString("description")); entity.setComment(rs.getString("free_text_comment")); entity.setId(getGuidDefaultEmpty(rs, "id")); entity.setName(rs.getString("name")); entity.setIsLocal(rs.getBoolean("is_local")); entity.setStatus(org.ovirt.engine.core.common.businessentities.StoragePoolStatus.forValue(rs.getInt("status"))); entity.setMasterDomainVersion(rs.getInt("master_domain_version")); entity.setSpmVdsId(getGuid(rs, "spm_vds_id")); entity.setCompatibilityVersion(new org.ovirt.engine.core.compat.Version(rs.getString("compatibility_version"))); entity.setQuotaEnforcementType(org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type"))); entity.setStoragePoolFormatType(org.ovirt.engine.core.common.businessentities.StorageFormatType.forValue(rs.getString("storage_pool_format_type"))); <START_MOD>entity.setDefaultQuotaId(getGuid(rs, "default_quota_id")); <END_MOD>return entity; }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.StoragePool mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.StoragePool entity = new org.ovirt.engine.core.common.businessentities.StoragePool(); entity.setdescription(rs.getString("description")); entity.setComment(rs.getString("free_text_comment")); entity.setId(getGuidDefaultEmpty(rs, "id")); entity.setName(rs.getString("name")); entity.setIsLocal(rs.getBoolean("is_local")); entity.setStatus(org.ovirt.engine.core.common.businessentities.StoragePoolStatus.forValue(rs.getInt("status"))); entity.setMasterDomainVersion(rs.getInt("master_domain_version")); entity.setSpmVdsId(getGuid(rs, "spm_vds_id")); entity.setCompatibilityVersion(new org.ovirt.engine.core.compat.Version(rs.getString("compatibility_version"))); entity.setQuotaEnforcementType(org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type"))); entity.setStoragePoolFormatType(org.ovirt.engine.core.common.businessentities.StorageFormatType.forValue(rs.getString("storage_pool_format_type"))); return entity; }
@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters<START_MOD>) { for (org.ovirt.engine.core.common.businessentities.StoragePool a : dataCenters) { if ((a.getStatus()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Up)) { dataCenters.add(a); } } if (dataCenters.isEmpty()) { getDataCenters().setIsChangeable(false); getImportSources().setIsChangeable(false); setError(constants.notAvailableWithNoUpDC()); stopProgress(); return; } java.util.Collections.sort(dataCenters,<END_MOD> new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); this.dataCenters.setItems(dataCenters); }	@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StoragePool a : returnValue) { if ((a.getStatus()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Up)) { dataCenters.add(a); } } if (dataCenters.isEmpty()) { getDataCenters().setIsChangeable(false); getImportSources().setIsChangeable(false); setError(constants.notAvailableWithNoUpDC()); stopProgress(); return; } java.util.Collections.sort(dataCenters, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); this.dataCenters.setItems(dataCenters); }
public void getVolumeList(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>> aQuery, java.lang.String clusterName, boolean doRefresh) { if (((org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper.getUiMode().getValue()) & (ApplicationMode.GlusterOnly.getValue())) == 0) { aQuery.<START_MOD>getDel()<END_MOD>.onSuccess(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>()); return; } aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter(); org.ovirt.engine.core.common.queries.SearchParameters searchParameters; searchParameters = (clusterName == null) ? new org.ovirt.engine.core.common.queries.SearchParameters("Volumes:", org.ovirt.engine.core.common.interfaces.SearchType.GlusterVolume) : new org.ovirt.engine.core.common.queries.SearchParameters(( cluster.name= + clusterName), org.ovirt.engine.core.common.interfaces.SearchType.GlusterVolume); searchParameters.setMaxCount(9999); if (!doRefresh) { searchParameters.withoutRefresh(); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.Search, searchParameters, aQuery); }	public void getVolumeList(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>> aQuery, java.lang.String clusterName, boolean doRefresh) { if (((org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper.getUiMode().getValue()) & (ApplicationMode.GlusterOnly.getValue())) == 0) { aQuery.getAsyncCallback().onSuccess(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>()); return; } aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter(); org.ovirt.engine.core.common.queries.SearchParameters searchParameters; searchParameters = (clusterName == null) ? new org.ovirt.engine.core.common.queries.SearchParameters("Volumes:", org.ovirt.engine.core.common.interfaces.SearchType.GlusterVolume) : new org.ovirt.engine.core.common.queries.SearchParameters(("Volumes: cluster.name=" + clusterName), org.ovirt.engine.core.common.interfaces.SearchType.GlusterVolume); searchParameters.setMaxCount(9999); if (!doRefresh) { searchParameters.withoutRefresh(); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.Search, searchParameters, aQuery); }
public void getMaxSpmPriority(<START_MOD>org.ovirt.engine.ui.frontend.<END_MOD>AsyncQuery<java.lang.Integer> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DefaultValueConverter(0); aQuery.<START_MOD>getDel()<END_MOD>.onSuccess(10); }	public void getMaxSpmPriority(org.ovirt.engine.ui.frontend.AsyncQuery<java.lang.Integer> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DefaultValueConverter(0); aQuery.getAsyncCallback().onSuccess(10); }
public <T> void getConfigFromCache(org.ovirt.engine.core.common.queries.GetConfigurationValueParameters parameters, <START_MOD>org.ovirt.engine.ui.frontend.<END_MOD>AsyncQuery<T> aQuery) { final org.ovirt.engine.core.compat.KeyValuePairCompat<org.ovirt.engine.core.common.queries.ConfigurationValues, java.lang.String> config_key = new org.ovirt.engine.core.compat.KeyValuePairCompat(parameters.getConfigValue(), parameters.getVersion()); T returnValue = null; if (cachedConfigValues.containsKey(config_key)) { returnValue = ((T) (cachedConfigValues.get(config_key))); } else if (cachedConfigValuesPreConvert.containsKey(config_key)) { returnValue = ((T) (cachedConfigValuesPreConvert.get(config_key))); if ((aQuery.converterCallback) != null) { returnValue = aQuery.converterCallback.convert(returnValue); } if (returnValue != null) { cachedConfigValues.put(config_key, returnValue); } } aQuery.<START_MOD>getDel()<END_MOD>.onSuccess(returnValue); }	public <T> void getConfigFromCache(org.ovirt.engine.core.common.queries.GetConfigurationValueParameters parameters, org.ovirt.engine.ui.frontend.AsyncQuery<T> aQuery) { final org.ovirt.engine.core.compat.KeyValuePairCompat<org.ovirt.engine.core.common.queries.ConfigurationValues, java.lang.String> config_key = new org.ovirt.engine.core.compat.KeyValuePairCompat(parameters.getConfigValue(), parameters.getVersion()); T returnValue = null; if (cachedConfigValues.containsKey(config_key)) { returnValue = ((T) (cachedConfigValues.get(config_key))); } else if (cachedConfigValuesPreConvert.containsKey(config_key)) { returnValue = ((T) (cachedConfigValuesPreConvert.get(config_key))); if ((aQuery.converterCallback) != null) { returnValue = aQuery.converterCallback.convert(returnValue); } if (returnValue != null) { cachedConfigValues.put(config_key, returnValue); } } aQuery.getAsyncCallback().onSuccess(returnValue); }
public void getDefaultSpmPriority(<START_MOD>org.ovirt.engine.ui.frontend.<END_MOD>AsyncQuery<java.lang.Integer> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DefaultValueConverter(0); aQuery.<START_MOD>getDel()<END_MOD>.onSuccess(5); }	public void getDefaultSpmPriority(org.ovirt.engine.ui.frontend.AsyncQuery<java.lang.Integer> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DefaultValueConverter(0); aQuery.getAsyncCallback().onSuccess(5); }
private void testValidateQosNotPartiallyConfigured(boolean networkAttachment1HasQos, boolean networkAttachment2HasQos, org.hamcrest.Matcher<org.ovirt.engine.core.bll.ValidationResult> matcher) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface baseNic = createNic("baseNic"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanNic1 = createVlanNic(baseNic, "vlanNic1", 10); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanNic2 = createVlanNic(baseNic, "vlanNic2", 11); org.ovirt.engine.core.common.businessentities.network.Network network1 = createNetworkWithName("network1"); org.ovirt.engine.core.common.businessentities.network.Network network2 = createNetworkWithName("network2"); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment1 = createNetworkAttachment(network1, baseNic); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment2 = createNetworkAttachment(network2, baseNic); org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos = createHostNetworkQos(10, 10, 10); if (networkAttachment1HasQos) { networkAttachment1.setHostNetworkQos(qos); } if (networkAttachment2HasQos) { networkAttachment2.setHostNetworkQos(qos); } java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> networkAttachments = java.util.Arrays.asList(networkAttachment1, networkAttachment2); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().addNetworks(network1, network2).addExistingInterfaces(baseNic, vlanNic1, vlanNic2).build(); assertThat(validator.validateQosNotPartiallyConfigured(networkAttachments), matcher); }	private void testValidateQosNotPartiallyConfigured(boolean networkAttachment1HasQos, boolean networkAttachment2HasQos, org.hamcrest.Matcher<org.ovirt.engine.core.bll.ValidationResult> matcher) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface baseNic = createNic("baseNic"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanNic1 = createVlanNic(baseNic, "vlanNic1", 10); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanNic2 = createVlanNic(baseNic, "vlanNic2", 11); org.ovirt.engine.core.common.businessentities.network.Network network1 = createNetworkWithName("network1"); org.ovirt.engine.core.common.businessentities.network.Network network2 = createNetworkWithName("network2"); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment1 = createNetworkAttachment(network1, baseNic); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment2 = createNetworkAttachment(network2, baseNic); org.ovirt.engine.core.common.businessentities.network.AnonymousHostNetworkQos qos = createHostNetworkQos(10, 10, 10); if (networkAttachment1HasQos) { networkAttachment1.setHostNetworkQos(qos); } if (networkAttachment2HasQos) { networkAttachment2.setHostNetworkQos(qos); } java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> networkAttachments = java.util.Arrays.asList(networkAttachment1, networkAttachment2); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().addNetworks(network1, network2).addExistingInterfaces(baseNic, vlanNic1, vlanNic2).build(); assertThat(validator.validateQosNotPartiallyConfigured(networkAttachments), matcher); }
private void liveUpdateCpuProfile() { if (!(oldVm.getCpuProfileId().equals(newVmStatic.getCpuProfileId()))) { vmSlaPolicyUtils.refreshRunningVmsWithCpuProfile(newVmStatic.getCpuProfileId()); } }	private void liveUpdateCpuProfile() { if ((org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus().isQualifiedForQosChange()) && (!(oldVm.getCpuProfileId().equals(newVmStatic.getCpuProfileId())))) { vmSlaPolicyUtils.refreshCpuQosOfRunningVm(org.ovirt.engine.core.bll.UpdateVmCommand.getVm()); } }
public void refresVm(final org.ovirt.engine.core.common.businessentities.VM vm) { refreshRunningVmsWithCpuProfile(vm.getCpuProfileId(), $missing$); }	public void refreshCpuQosOfRunningVm(org.ovirt.engine.core.common.businessentities.VM vm) { if (!(vm.getStatus().isQualifiedForQosChange())) { throw new java.lang.IllegalArgumentException(java.lang.String.format("VM %s is not running. Can't perform a live QoS upgrade", vm.getId())); } org.ovirt.engine.core.compat.Guid vmId = vm.getId(); java.util.List<org.ovirt.engine.core.compat.Guid> vmIds = java.util.Arrays.asList(vmId); org.ovirt.engine.core.common.businessentities.qos.CpuQos cpuQos = cpuQosDao.getCpuQosByVmIds(vmIds).get(vmId); if (cpuQos == null) { refreshVmsCpuQos(java.util.Arrays.asList(vmId), new org.ovirt.engine.core.common.businessentities.qos.CpuQos()); } else { refreshVmsCpuQos(java.util.Arrays.asList(vmId), cpuQos); } }
private org.ovirt.engine.core.common.action.VdcActionParametersBase getAddParameters(org.ovirt.engine.api.model.DiskAttachment attachment, org.ovirt.engine.core.common.businessentities.storage.Disk entity, org.ovirt.engine.api.model.Disk disk) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = map(attachment); dve.getId().setVmId(vmId); org.ovirt.engine.core.common.action.AddDiskParameters parameters = new org.ovirt.engine.core.common.action.AddDiskParameters(dve, entity); org.ovirt.engine.core.compat.Guid storageDomainId = getStorageDomainId(disk); if (storageDomainId != null) { parameters.setStorageDomainId(storageDomainId); } if (<START_MOD>isDiskActive(attachment, disk<END_MOD>)) { parameters.setPlugDiskToVm(attachment.isActive()); } if ((disk.isSetLunStorage()) && (disk.getLunStorage().isSetHost())) { parameters.setVdsId(getHostId(disk.getLunStorage().getHost())); } return parameters; }	private org.ovirt.engine.core.common.action.VdcActionParametersBase getAddParameters(org.ovirt.engine.api.model.DiskAttachment attachment, org.ovirt.engine.core.common.businessentities.storage.Disk entity, org.ovirt.engine.api.model.Disk disk) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = map(attachment); dve.getId().setVmId(vmId); org.ovirt.engine.core.common.action.AddDiskParameters parameters = new org.ovirt.engine.core.common.action.AddDiskParameters(dve, entity); org.ovirt.engine.core.compat.Guid storageDomainId = getStorageDomainId(disk); if (storageDomainId != null) { parameters.setStorageDomainId(storageDomainId); } if (attachment.isSetActive()) { parameters.setPlugDiskToVm(attachment.isActive()); } if ((disk.isSetLunStorage()) && (disk.getLunStorage().isSetHost())) { parameters.setVdsId(getHostId(disk.getLunStorage().getHost())); } return parameters; }
protected javax.ws.rs.core.Response attachDiskToVm(org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource resource, org.ovirt.engine.api.model.DiskAttachment attachment, org.ovirt.engine.api.restapi.resource.IResolver entityResolver) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(attachment.getDisk().getId()); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = map(attachment); dve.getId().setVmId(vmId); dve.getId().setDeviceId(diskId); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(dve); org.ovirt.engine.api.model.Disk disk = attachment.getDisk(); boolean <START_MOD>diskActive = <END_MOD>isDiskActive<START_MOD>(attachment, disk); params.setPlugUnPlug(diskActive); boolean isDiskReadOnly<END_MOD> = false; if (<START_MOD>disk.isSetReadOnly<END_MOD>()) { <START_MOD>isDiskReadOnly<END_MOD> = org.apache.commons.lang.BooleanUtils.toBoolean(<START_MOD>disk.isReadOnly<END_MOD>()); } params.<START_MOD>setReadOnly(<END_MOD>isDiskReadOnly<START_MOD>)<END_MOD>; if (disk.<START_MOD>isSetSnapshot<END_MOD>()) { <START_MOD>validateParameters(disk, "snapshot.id"); params.setSnapshotId(asGuid(disk.getSnapshot().getId()<END_MOD>)); } <START_MOD>return resource.performCreate(VdcActionType.AttachDiskToVm, params, entityResolver<END_MOD>); }	protected javax.ws.rs.core.Response attachDiskToVm(org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource resource, org.ovirt.engine.api.model.DiskAttachment attachment, org.ovirt.engine.api.restapi.resource.IResolver entityResolver) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(attachment.getDisk().getId()); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = map(attachment); dve.getId().setVmId(vmId); dve.getId().setDeviceId(diskId); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(dve); org.ovirt.engine.api.model.Disk disk = attachment.getDisk(); boolean isDiskActive = false; if (attachment.isSetActive()) { isDiskActive = org.apache.commons.lang.BooleanUtils.toBoolean(attachment.isActive()); } params.setPlugUnPlug(isDiskActive); boolean isDiskReadOnly = false; if (disk.isSetReadOnly()) { isDiskReadOnly = org.apache.commons.lang.BooleanUtils.toBoolean(disk.isReadOnly()); } params.setReadOnly(isDiskReadOnly); if (disk.isSetSnapshot()) { validateParameters(disk, "snapshot.id"); params.setSnapshotId(asGuid(disk.getSnapshot().getId())); } return resource.performCreate(VdcActionType.AttachDiskToVm, params, entityResolver); }
@java.lang.Override protected void selectedItemsChanged() { super.selectedItemsChanged(); }	@java.lang.Override public void onSuccess(java.lang.Integer result) { ApplySearchPageSize(result); }
public void syncSearch(org.ovirt.engine.core.common.queries.VdcQueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase) { org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() {<START_MOD> @java.lang.SuppressWarnings("unchecked")<END_MOD> @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { setItems(((java.util.Collection<T>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue()))); } }; vdcQueryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, vdcQueryParametersBase, _asyncQuery); setIsQueryFirstTime(false); }	public void syncSearch(org.ovirt.engine.core.common.queries.VdcQueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase) { vdcQueryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, vdcQueryParametersBase, new SetItemsAsyncQuery()); setIsQueryFirstTime(false); }
protected void createJob(org.ovirt.engine.core.common.action.VdcActionType actionType, boolean isExternal) { org.ovirt.engine.core.common.job.Job job = org.ovirt.engine.core.bll.job.ExecutionHandler.createJob(actionType, this); job.setDescription(org.ovirt.engine.core.bll.AddJobCommand.getParameters().getDescription()); job.setAutoCleared(org.ovirt.engine.core.bll.AddJobCommand.getParameters().isAutoCleared()); org.ovirt.engine.core.compat.Guid id = job.getId(); job.setExternal(isExternal); <START_MOD>jobRepository<END_MOD>.saveJob(job); if ((getJobDao().get(id)) != null) { setActionReturnValue(id); org.ovirt.engine.core.bll.AddJobCommand.setSucceeded(true); } else { org.ovirt.engine.core.bll.AddJobCommand.setSucceeded(false); } }	protected void createJob(org.ovirt.engine.core.common.action.VdcActionType actionType, boolean isExternal) { org.ovirt.engine.core.common.job.Job job = org.ovirt.engine.core.bll.job.ExecutionHandler.createJob(actionType, this); job.setDescription(org.ovirt.engine.core.bll.AddJobCommand.getParameters().getDescription()); job.setAutoCleared(org.ovirt.engine.core.bll.AddJobCommand.getParameters().isAutoCleared()); org.ovirt.engine.core.compat.Guid id = job.getId(); job.setExternal(isExternal); jobRepository.saveJob(job); if ((jobDao.get(id)) != null) { setActionReturnValue(id); org.ovirt.engine.core.bll.AddJobCommand.setSucceeded(true); } else { org.ovirt.engine.core.bll.AddJobCommand.setSucceeded(false); } }
public static org.ovirt.engine.core.common.action.VdcReturnValueBase evaluateCorrelationId(org.ovirt.engine.core.common.action.VdcActionParametersBase parameters) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = null; java.lang.String correlationId = parameters.getCorrelationId(); if (org.apache.commons.lang.StringUtils.isEmpty(correlationId)) { correlationId = org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId(); if (org.apache.commons.lang.StringUtils.isEmpty(correlationId)) { correlationId = org.ovirt.engine.core.utils.log.LoggedUtils.getObjectId(parameters); } parameters.setCorrelationId(correlationId); } else { java.util.List<java.lang.<START_MOD>Class<?>> validationGroups = java.util.Arrays.asList(new java.lang.Class<?>[]{ org.ovirt.engine.core.common.validation.group.PreRun.class }); java.util.List<java.lang.<END_MOD>String> messages = org.ovirt.engine.core.common.utils.ValidationUtils.validateInputs(validationGroups, parameters); if (!(messages.isEmpty())) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnErrorValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); returnErrorValue.setValid(false); returnErrorValue.getValidationMessages().addAll(messages); return returnErrorValue; } } return returnValue; }	public static org.ovirt.engine.core.common.action.VdcReturnValueBase evaluateCorrelationId(org.ovirt.engine.core.common.action.VdcActionParametersBase parameters) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = null; java.lang.String correlationId = parameters.getCorrelationId(); if (org.apache.commons.lang.StringUtils.isEmpty(correlationId)) { correlationId = org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId(); if (org.apache.commons.lang.StringUtils.isEmpty(correlationId)) { correlationId = org.ovirt.engine.core.utils.log.LoggedUtils.getObjectId(parameters); } parameters.setCorrelationId(correlationId); } else { java.util.List<java.lang.String> messages = org.ovirt.engine.core.common.utils.ValidationUtils.validateInputs(org.ovirt.engine.core.bll.job.ExecutionHandler.validationGroups, parameters); if (!(messages.isEmpty())) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnErrorValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); returnErrorValue.setValid(false); returnErrorValue.getValidationMessages().addAll(messages); return returnErrorValue; } } return returnValue; }
java.lang.String invalidVolumeFormat(java.lang.String uploadedFormat, java.lang.String selectedFormat);	java.lang.String uploadImageQemuCompatUnsupported(java.lang.String compat, java.lang.String storageFormatType);
private void onValidate(boolean isValid) { if (isValid) { flush(); onUpload(); } else { setIsValid(false); } }	public org.ovirt.engine.ui.uicommonweb.models.storage.ImageInfoModel getImageInfoModel() { return imageInfoModel; }
@java.lang.Override protected void onValidation(org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result) { if (!(result.getSuccess())) { getInvalidityReasons().addAll(result.getReasons()); } stopProgress(); onValidate(result.getSuccess()); }	@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); org.ovirt.engine.ui.uicommonweb.models.storage.ImageInfoModel.QemuCompat qcowCompat = getImageInfoModel().getQcowCompat(); if ((qcowCompat != null) && (qcowCompat != (ImageInfoModel.QemuCompat.V2))) { org.ovirt.engine.core.common.businessentities.StorageFormatType storageFormatType = getDiskModel().getStorageDomain().getSelectedItem().getStorageFormat(); switch (storageFormatType) { case V1 : case V2 : case V3 : result.setSuccess(false); result.getReasons().add(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageQemuCompatUnsupported(qcowCompat.getValue(), storageFormatType.name())); break; } } return result; }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (getOkCommand().equals(command)) { <START_MOD>validate<END_MOD>(); } }	@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (getOkCommand().equals(command)) { onUpload(); } }
<START_MOD>private<END_MOD> void onUpload() { if ((getProgress()) != null) { return; } if (!(isResumeUpload)) { initiateNewUpload(); } else { initiateResumeUpload(); } }	public void onUpload() { if (flush()) { if ((getProgress()) != null) { return; } if (!(isResumeUpload)) { initiateNewUpload(); } else { initiateResumeUpload(); } } }
public <START_MOD>void<END_MOD> flush() { diskModel.flush(); ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDiskModel().getDisk())).setVolumeFormat(getVolumeFormat().getSelectedItem()); ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDiskModel().getDisk())).setActualSizeInBytes(getImageSize()); }	public boolean flush() { if (validate()) { diskModel.flush(); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDiskModel().getDisk())); diskImage.setActualSizeInBytes(getImageSize()); diskImage.setVolumeFormat(getImageInfoModel().getFormat()); diskImage.setVolumeType(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVolumeType(diskImage.getVolumeFormat(), getDiskModel().getStorageDomain().getSelectedItem().getStorageType())); return true; } else { setIsValid(false); } return false; }
private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus pollStorageJob(org.ovirt.engine.core.<START_MOD>common.action.StorageJobCommandParameters cmdParams) { if ((cmdParams.getStorageJobId()) == null) { return null; } org.ovirt.engine.core.common.vdscommands.GetHostJobsVDSCommandParameters p = new org.ovirt.engine.core.common.vdscommands.GetHostJobsVDSCommandParameters(cmdParams.getVdsRunningOn(), java.util.Arrays.asList(cmdParams.getStorageJobId()), org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobType.storage); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().runVdsCommand(VDSCommandType.GetHostJobs, p); org.ovirt.engine.core.common.businessentities.HostJobInfo jobInfo = ((java.util.Map<org.ovirt.engine.core.<END_MOD>compat.Guid<START_MOD>, org.ovirt.engine.core.common.businessentities.HostJobInfo>) (returnValue.getReturnValue())).get(cmdParams.getStorageJobId());<END_MOD> return <START_MOD>jobInfo != null ? jobInfo.getStatus() : null<END_MOD>; }	private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus pollStorageJob(org.ovirt.engine.core.compat.Guid jobId, org.ovirt.engine.core.compat.Guid vdsId) { if (jobId == null) { return null; } org.ovirt.engine.core.common.vdscommands.GetHostJobsVDSCommandParameters p = new org.ovirt.engine.core.common.vdscommands.GetHostJobsVDSCommandParameters(vdsId, java.util.Collections.singletonList(jobId), org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobType.storage); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().runVdsCommand(VDSCommandType.GetHostJobs, p); org.ovirt.engine.core.common.businessentities.HostJobInfo jobInfo = ((java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.HostJobInfo>) (returnValue.getReturnValue())).get(jobId); return jobInfo != null ? jobInfo.getStatus() : null; }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return pairOf(null, createVmInternalData()); }	@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return pairOf(null, createVmInternalData()); }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return pairOf(createDbVm(), null); }	@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return pairOf(createDbVm(), null); }
org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createHAThatShutdownAbnormally() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = createPair(); setPairStatuses(pair, VMStatus.Up, VMStatus.Down); pair.getSecond().getVmDynamic().setExitStatus(VmExitStatus.Error); return pair; }	org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createHAThatShutdownAbnormally() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = createPair(); pair.getFirst().setAutoStartup(true); setPairStatuses(pair, VMStatus.Up, VMStatus.Down); pair.getSecond().getVmDynamic().setExitStatus(VmExitStatus.Error); return pair; }
private void addClientIpChanged(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair) { pair.getFirst().setClientIp("1.1.1.1"); pair.getSecond().getVmDynamic().setClientIp("2.2.2.2"); }	private void addClientIpChanged(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair) { pair.getFirst().setClientIp("1.1.1.1"); pair.getSecond().getVmDynamic().setClientIp("2.2.2.2"); }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createStatusChangedToUp(); }	@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createStatusChangedToUp(); }
org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createHANotRunningAndUknown() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = pairOf(createDbVm(), null); pair.getFirst().setStatus(VMStatus.Unknown); return pair; }	org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createHANotRunningAndUknown() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = pairOf(createDbVm(), null); pair.getFirst().setAutoStartup(true); pair.getFirst().setStatus(VMStatus.Unknown); return pair; }
private void addWatchDogEvents(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair) { pair.getFirst().setLastWatchdogEvent(java.lang.Long.MIN_VALUE); pair.getSecond().getVmDynamic().setLastWatchdogEvent(java.lang.Long.MAX_VALUE); }	private void addWatchDogEvents(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair) { pair.getFirst().getDynamicData().setLastWatchdogEvent(java.lang.Long.MIN_VALUE); pair.getSecond().getVmDynamic().setLastWatchdogEvent(java.lang.Long.MAX_VALUE); }
private void setDstHost(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair) { pair.getFirst().setMigratingToVds(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs.DST_HOST_ID); }	private void setDstHost(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair) { pair.getFirst().setMigratingToVds(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs.DST_HOST_ID); }
org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createPair() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = pairOf(createDbVm(), createVmInternalData()); addWatchDogEvents(pair); addClientIpChanged(pair); return pair; }	org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createPair() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = pairOf(createDbVm(), createVmInternalData()); addWatchDogEvents(pair); addClientIpChanged(pair); return pair; }
org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createStatusChangedToDown() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = createPair(); setPairStatuses(pair, VMStatus.Up, VMStatus.Down); pair.getSecond().getVmDynamic().setExitStatus(VmExitStatus.Normal); return pair; }	org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createStatusChangedToDown() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = createPair(); setPairStatuses(pair, VMStatus.Up, VMStatus.Down); pair.getSecond().getVmDynamic().setExitStatus(VmExitStatus.Normal); return pair; }
@org.junit.experimental.theories.Theory public void updateRepository_HA_VM_DOWN(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, false); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up))); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); vmAnalyzer.analyze(); assertEquals(data.dbVm(), vmAnalyzer.getVmDynamicToSave()); assertNotNull(vmAnalyzer.getVmStatisticsToSave()); assertFalse(vmAnalyzer.isRerun()); assertTrue(vmAnalyzer.isAutoVmToRun()); assertNull(data.dbVm().getMigratingToVds()); }	@org.junit.experimental.theories.Theory public void updateRepository_HA_VM_DOWN(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, false); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up))); assumeTrue(data.dbVm().isAutoStartup()); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); vmAnalyzer.analyze(); assertEquals(data.dbVm().getDynamicData(), vmAnalyzer.getVmDynamicToSave()); assertNotNull(vmAnalyzer.getVmStatisticsToSave()); assertFalse(vmAnalyzer.isRerun()); assertTrue(vmAnalyzer.isAutoVmToRun()); assertNull(data.dbVm().getMigratingToVds()); }
org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createMigrationDone() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = createPair(); setPairStatuses(pair, VMStatus.MigratingFrom, VMStatus.Down); pair.getSecond().getVmDynamic().setExitStatus(VmExitStatus.Normal); setDstHost(pair); return pair; }	org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createMigrationDone() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = createPair(); setPairStatuses(pair, VMStatus.MigratingFrom, VMStatus.Down); pair.getSecond().getVmDynamic().setExitStatus(VmExitStatus.Normal); setDstHost(pair); return pair; }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createMigratingFrom(); }	@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createMigratingFrom(); }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = pairOf(createDbVm(), createVmInternalData()); pair.getSecond().getVmDynamic().setStatus(VMStatus.Up); pair.getSecond().getVmDynamic().setRunOnVds(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs.DST_HOST_ID); return pair; }	@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = pairOf(createDbVm(), createVmInternalData()); pair.getSecond().getVmDynamic().setStatus(VMStatus.Up); pair.getSecond().getVmDynamic().setRunOnVds(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs.DST_HOST_ID); return pair; }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createMigrationDone(); }	@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createMigrationDone(); }
org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD> dbVm() { return pair.getFirst(); }	org.ovirt.engine.core.common.businessentities.VM dbVm() { return pair.getFirst(); }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createHAThatShutdownAbnormally(); }	@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createHAThatShutdownAbnormally(); }
org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createStatusChangedToUp() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = createPair(); setPairStatuses(pair, VMStatus.Down, VMStatus.Up); return pair; }	org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createStatusChangedToUp() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = createPair(); setPairStatuses(pair, VMStatus.Down, VMStatus.Up); return pair; }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createStatusChangedToDown(); }	@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createStatusChangedToDown(); }
abstract org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build();	abstract org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build();
org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createMigrationFailed() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = createPair(); setPairStatuses(pair, VMStatus.MigratingFrom, VMStatus.Up); setDstHost(pair); return pair; }	org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createMigrationFailed() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = createPair(); setPairStatuses(pair, VMStatus.MigratingFrom, VMStatus.Up); setDstHost(pair); return pair; }
org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createMigratingFrom() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = createPair(); setPairStatuses(pair, VMStatus.MigratingFrom, VMStatus.MigratingFrom); setDstHost(pair); return pair; }	org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createMigratingFrom() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = createPair(); setPairStatuses(pair, VMStatus.MigratingFrom, VMStatus.MigratingFrom); setDstHost(pair); return pair; }
private void stubCalls(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { when(resourceManager.runVdsCommand(eq(VDSCommandType.List), any(org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase.class))).thenReturn(getVdsReturnValue(data.vdsmVm())); if ((data.dbVm()) != null) { when(<START_MOD>vmDynamicDao<END_MOD>.<START_MOD>getAllRunningForVds<END_MOD>(VmTestPairs.SRC_HOST_ID)).thenReturn(java.util.Collections.<START_MOD>singletonList<END_MOD>(data.dbVm())); } if ((data.vdsmVm()) != null) { when(resourceManager.runVdsCommand(eq(VDSCommandType.GetVmStats), any(org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase.class))).thenReturn(getStatsReturnValue(data.vdsmVm())); } }	private void stubCalls(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { when(resourceManager.runVdsCommand(eq(VDSCommandType.List), any(org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase.class))).thenReturn(getVdsReturnValue(data.vdsmVm())); if ((data.dbVm()) != null) { when(vmDynamicDao.getAllRunningForVds(VmTestPairs.SRC_HOST_ID)).thenReturn(java.util.Collections.singletonList(data.dbVm().getDynamicData())); } if ((data.vdsmVm()) != null) { when(resourceManager.runVdsCommand(eq(VDSCommandType.GetVmStats), any(org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase.class))).thenReturn(getStatsReturnValue(data.vdsmVm())); } }
@org.junit.experimental.theories.Theory public void updateRepository_MIGRATION_FROM_TO_UP(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, false); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up))); vmAnalyzer.analyze(); verify(resourceManager, times(1)).removeVmFromDownVms(VmTestPairs.SRC_HOST_ID, data.vdsmVm().getVmDynamic().getId()); assertEquals(data.dbVm(), vmAnalyzer.getVmDynamicToSave()); assertEquals(VmTestPairs.SRC_HOST_ID, data.dbVm().getRunOnVds()); assertTrue(vmAnalyzer.isRerun()); assertNull(data.dbVm().getMigratingToVds()); }	@org.junit.experimental.theories.Theory public void updateRepository_MIGRATION_FROM_TO_UP(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, false); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up))); vmAnalyzer.analyze(); verify(resourceManager, times(1)).removeVmFromDownVms(VmTestPairs.SRC_HOST_ID, data.vdsmVm().getVmDynamic().getId()); assertEquals(data.dbVm().getDynamicData(), vmAnalyzer.getVmDynamicToSave()); assertEquals(VmTestPairs.SRC_HOST_ID, data.dbVm().getRunOnVds()); assertTrue(vmAnalyzer.isRerun()); assertNull(data.dbVm().getMigratingToVds()); }
@org.junit.experimental.theories.Theory public void updateRepository_MIGRATION_FROM(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, true); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))); verify(resourceManager, never()).internalSetVmStatus(data.dbVm(), VMStatus.MigratingTo); }	@org.junit.experimental.theories.Theory public void updateRepository_MIGRATION_FROM(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, true); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))); verify(resourceManager, never()).internalSetVmStatus(data.dbVm().getDynamicData(), VMStatus.MigratingTo); }
@org.junit.experimental.theories.Theory public void proceedDownVmsNormalExistReason(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, false); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); assumeTrue(((data.vdsmVm().getVmDynamic().getExitStatus()) == (org.ovirt.engine.core.common.businessentities.VmExitStatus.Normal))); vmAnalyzer.analyze(); verify(auditLogDirector, atLeastOnce()).log(loggableCaptor.capture(), logTypeCaptor.capture()); verify(resourceManager).removeAsyncRunningVm(data.dbVm().getId()); verify(vmAnalyzer).runVdsCommand(vdsCommandTypeCaptor.capture(), vdsParamsCaptor.capture()); assertEquals(data.dbVm(), vmAnalyzer.getVmDynamicToSave()); assertTrue(logTypeCaptor.getAllValues().contains(AuditLogType.VM_DOWN)); assertEquals(VDSCommandType.Destroy, vdsCommandTypeCaptor.getValue()); assertEquals(vdsParamsCaptor.getValue().getClass(), org.ovirt.engine.core.common.vdscommands.DestroyVmVDSCommandParameters.class); }	@org.junit.experimental.theories.Theory public void proceedDownVmsNormalExistReason(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, false); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); assumeTrue(((data.vdsmVm().getVmDynamic().getExitStatus()) == (org.ovirt.engine.core.common.businessentities.VmExitStatus.Normal))); vmAnalyzer.analyze(); verify(auditLogDirector, atLeastOnce()).log(loggableCaptor.capture(), logTypeCaptor.capture()); verify(resourceManager).removeAsyncRunningVm(data.dbVm().getId()); verify(vmAnalyzer).runVdsCommand(vdsCommandTypeCaptor.capture(), vdsParamsCaptor.capture()); assertEquals(data.dbVm().getDynamicData(), vmAnalyzer.getVmDynamicToSave()); assertTrue(logTypeCaptor.getAllValues().contains(AuditLogType.VM_DOWN)); assertEquals(VDSCommandType.Destroy, vdsCommandTypeCaptor.getValue()); assertEquals(vdsParamsCaptor.getValue().getClass(), org.ovirt.engine.core.common.vdscommands.DestroyVmVDSCommandParameters.class); }
@org.junit.experimental.theories.Theory public void proceedDownVmsErrorExitReason(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, false); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); assumeTrue(((data.vdsmVm().getVmDynamic().getExitStatus()) != (org.ovirt.engine.core.common.businessentities.VmExitStatus.Normal))); vmAnalyzer.analyze(); verify(auditLogDirector, atLeastOnce()).log(loggableCaptor.capture(), logTypeCaptor.capture()); assertEquals(data.dbVm(), vmAnalyzer.getVmDynamicToSave()); }	@org.junit.experimental.theories.Theory public void proceedDownVmsErrorExitReason(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, false); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); assumeTrue(((data.vdsmVm().getVmDynamic().getExitStatus()) != (org.ovirt.engine.core.common.businessentities.VmExitStatus.Normal))); vmAnalyzer.analyze(); verify(auditLogDirector, atLeastOnce()).log(loggableCaptor.capture(), logTypeCaptor.capture()); assertEquals(data.dbVm().getDynamicData(), vmAnalyzer.getVmDynamicToSave()); }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createMigratingTo(); }	@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createMigratingTo(); }
org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createMigratingTo() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = createPair(); setPairStatuses(pair, VMStatus.MigratingFrom, VMStatus.MigratingTo); setDstHost(pair); return pair; }	org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createMigratingTo() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = createPair(); setPairStatuses(pair, VMStatus.MigratingFrom, VMStatus.MigratingTo); setDstHost(pair); return pair; }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createMigrationFailed(); }	@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createMigrationFailed(); }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = pairOf(createDbVm(), createVmInternalData()); pair.getSecond().getVmDynamic().setStatus(VMStatus.MigratingTo); pair.getSecond().getVmDynamic().setRunOnVds(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs.DST_HOST_ID); return pair; }	@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = pairOf(createDbVm(), createVmInternalData()); pair.getSecond().getVmDynamic().setStatus(VMStatus.MigratingTo); pair.getSecond().getVmDynamic().setRunOnVds(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs.DST_HOST_ID); return pair; }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createHANotRunningAndUknown(); }	@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createHANotRunningAndUknown(); }
org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD> createDbVm() { org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD> vm = new org.ovirt.engine.core.common.businessentities.VmDynamic(); vm.setId(id); vm.setRunOnVds(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs.SRC_HOST_ID); return vm; }	org.ovirt.engine.core.common.businessentities.VM createDbVm() { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setDynamicData(new org.ovirt.engine.core.common.businessentities.VmDynamic()); vm.setId(id); vm.setName(name()); vm.setRunOnVds(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs.SRC_HOST_ID); return vm; }
org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pairOf(org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD> vm, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vit) { return new org.ovirt.engine.core.common.utils.Pair(vm, vit); }	org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pairOf(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vit) { return new org.ovirt.engine.core.common.utils.Pair(vm, vit); }
@org.junit.experimental.theories.Theory public void proceedDownVmsNormalExistReason_MIGRATION_HANDOVER(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, false); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); assumeTrue(((data.vdsmVm().getVmDynamic().getExitStatus()) == (org.ovirt.engine.core.common.businessentities.VmExitStatus.Normal))); vmAnalyzer.analyze(); verify(resourceManager, never()).removeAsyncRunningVm(data.dbVm().getId()); verify(vmAnalyzer).runVdsCommand(vdsCommandTypeCaptor.capture(), vdsParamsCaptor.capture()); assertEquals(data.dbVm(), vmAnalyzer.getVmDynamicToSave()); assertEquals(VDSCommandType.Destroy, vdsCommandTypeCaptor.getValue()); assertEquals(org.ovirt.engine.core.common.vdscommands.DestroyVmVDSCommandParameters.class, vdsParamsCaptor.getValue().getClass()); }	@org.junit.experimental.theories.Theory public void proceedDownVmsNormalExistReason_MIGRATION_HANDOVER(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, false); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); assumeTrue(((data.vdsmVm().getVmDynamic().getExitStatus()) == (org.ovirt.engine.core.common.businessentities.VmExitStatus.Normal))); vmAnalyzer.analyze(); verify(resourceManager, never()).removeAsyncRunningVm(data.dbVm().getId()); verify(vmAnalyzer).runVdsCommand(vdsCommandTypeCaptor.capture(), vdsParamsCaptor.capture()); assertEquals(data.dbVm().getDynamicData(), vmAnalyzer.getVmDynamicToSave()); assertEquals(VDSCommandType.Destroy, vdsCommandTypeCaptor.getValue()); assertEquals(org.ovirt.engine.core.common.vdscommands.DestroyVmVDSCommandParameters.class, vdsParamsCaptor.getValue().getClass()); }
private void afterMigrationFrom(org.ovirt.engine.core.common.businessentities.VmDynamic runningVm, org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD> vmToUpdate) { org.ovirt.engine.core.common.businessentities.VMStatus oldVmStatus = vmToUpdate.getStatus(); org.ovirt.engine.core.common.businessentities.VMStatus currentVmStatus = runningVm.getStatus(); if (((oldVmStatus == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom)) && (currentVmStatus != (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))) && (currentVmStatus.isRunning())) { rerun = true; org.ovirt.engine.core.vdsbroker.monitoring.VmAnalyzer.log.info( VM '{}'({}) to re-run list vmToUpdate.getId(), <START_MOD>getVmManager()<END_MOD>.getName()); vmToUpdate.setMigratingToVds(null); } }	private void afterMigrationFrom(org.ovirt.engine.core.common.businessentities.VmDynamic runningVm, org.ovirt.engine.core.common.businessentities.VmDynamic vmToUpdate) { org.ovirt.engine.core.common.businessentities.VMStatus oldVmStatus = vmToUpdate.getStatus(); org.ovirt.engine.core.common.businessentities.VMStatus currentVmStatus = runningVm.getStatus(); if (((oldVmStatus == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom)) && (currentVmStatus != (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))) && (currentVmStatus.isRunning())) { rerun = true; org.ovirt.engine.core.vdsbroker.monitoring.VmAnalyzer.log.info("Adding VM '{}'({}) to re-run list", vmToUpdate.getId(), getVmManager().getName()); vmToUpdate.setMigratingToVds(null); getVmManager().getStatistics().setMigrationProgressPercent(0); } }
@org.junit.experimental.theories.Theory public void updateRepository_MIGRATION_FROM_TO_DOWN(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, true); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); verify(resourceManager, times(1)).internalSetVmStatus(data.dbVm(), VMStatus.MigratingTo); assertEquals(data.dbVm(), vmAnalyzer.getVmDynamicToSave()); assertEquals(VmTestPairs.DST_HOST_ID, data.dbVm().getRunOnVds()); }	@org.junit.experimental.theories.Theory public void updateRepository_MIGRATION_FROM_TO_DOWN(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, true); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); verify(resourceManager, times(1)).internalSetVmStatus(data.dbVm().getDynamicData(), VMStatus.MigratingTo); assertEquals(data.dbVm().getDynamicData(), vmAnalyzer.getVmDynamicToSave()); assertEquals(VmTestPairs.DST_HOST_ID, data.dbVm().getRunOnVds()); }
private void setPairStatuses(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair, org.ovirt.engine.core.common.businessentities.VMStatus dbStatus, org.ovirt.engine.core.common.businessentities.VMStatus vdsmStatus) { pair.getFirst().setStatus(dbStatus); pair.getSecond().getVmDynamic().setStatus(vdsmStatus); }	private void setPairStatuses(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair, org.ovirt.engine.core.common.businessentities.VMStatus dbStatus, org.ovirt.engine.core.common.businessentities.VMStatus vdsmStatus) { pair.getFirst().setStatus(dbStatus); pair.getSecond().getVmDynamic().setStatus(vdsmStatus); }
private void loadVMsFromExternalProvider(final org.ovirt.engine.core.common.businessentities.OriginType type, java.lang.String uri, java.lang.String username, java.lang.String password, org.ovirt.engine.core.compat.Guid proxyId) { startProgress(); org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { if (returnValue instanceof org.ovirt.engine.core.common.queries.VdcQueryReturnValue) { setError(messages.providerFailure()); stopProgress(); } else { java.util.List<org.ovirt.engine.core.common.businessentities.VM> remoteVms = ((java.util.List<org.ovirt.engine.core.common.businessentities.VM>) (returnValue)); java.util.List<org.ovirt.engine.core.common.businessentities.VM> remoteDownVms = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : remoteVms) { if (vm.isDown()) { remoteDownVms.add(vm); } } if ((remoteVms.size()) != (remoteDownVms.size())) { setWarning(constants.runningVmsWereFilteredOnImportVm()); } updateVms(remoteDownVms); } } }); <START_MOD>boolean dcSupportsApiForLoadingExternalVmsNamesOnly = getDataCenters().getSelectedItem().getCompatibilityVersion().greaterOrEquals(Version.v4_1); <END_MOD>query.setHandleFailure(true); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().<START_MOD>getVmsForDisplayingFromExternalServer<END_MOD>(query, getDataCenters().getSelectedItem().getId(), proxyId, uri, username, password, type<START_MOD>, dcSupportsApiForLoadingExternalVmsNamesOnly); }<END_MOD>	private void loadVMsFromExternalProvider(final org.ovirt.engine.core.common.businessentities.OriginType type, java.lang.String uri, java.lang.String username, java.lang.String password, org.ovirt.engine.core.compat.Guid proxyId) { startProgress(); org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery query = new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object returnValue) { if (returnValue instanceof org.ovirt.engine.core.common.queries.VdcQueryReturnValue) { setError(messages.providerFailure()); stopProgress(); } else { java.util.List<org.ovirt.engine.core.common.businessentities.VM> remoteVms = ((java.util.List<org.ovirt.engine.core.common.businessentities.VM>) (returnValue)); java.util.List<org.ovirt.engine.core.common.businessentities.VM> remoteDownVms = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : remoteVms) { if (vm.isDown()) { remoteDownVms.add(vm); } } if ((remoteVms.size()) != (remoteDownVms.size())) { setWarning(constants.runningVmsWereFilteredOnImportVm()); } updateVms(remoteDownVms); } } }); query.setHandleFailure(true); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmsFromExternalServer(query, getDataCenters().getSelectedItem().getId(), proxyId, uri, username, password, type, null); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc getExternalVmList(java.lang.String uri, java.lang.String username, java.lang.String password<START_MOD>, java.util.List<java.lang.String> vmsNames<END_MOD>) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request<START_MOD>; if (vmsNames == null) { request<END_MOD> = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.getExternalVMs").withParameter("uri", uri).withParameter("username", username).withParameter("password", password).build();<START_MOD> } else { request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.getExternalVMs").withParameter("uri", uri).withParameter("username", username).withParameter("password", password).withParameter("vm_names", vmsNames).build(); }<END_MOD> java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("vmList").withResponseType(java.lang.Object[].class); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc(response); }	@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc getExternalVmList(java.lang.String uri, java.lang.String username, java.lang.String password, java.util.List<java.lang.String> vmsNames) { org.ovirt.vdsm.jsonrpc.client.RequestBuilder requestBuilder = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.getExternalVMs").withParameter("uri", uri).withParameter("username", username).withParameter("password", password).withOptionalParameterAsList("vm_names", vmsNames); org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = requestBuilder.build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("vmList").withResponseType(java.lang.Object[].class); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc(response); }
private void onConfigureVmsToImport() { final org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel importVmsModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel) (org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getWindow())); if (importVmsModel == null) { return; } if (<START_MOD>(importVmsModel.vmsToImportHaveFullInfo()) && (<END_MOD>!(importVmsModel.validateArchitectures(<START_MOD>importVmsModel.getVmsToImport())<END_MOD>))) { return; } final org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmModel model = importVmsModel.getSpecificImportModel(); <START_MOD>if (importVmsModel.vmsToImportHaveFullInfo()) { <END_MOD>org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.setWindow(null); setWindow(model); }<START_MOD> else { initImportModelforVmsToImportNamesOnly(importVmsModel, model); } }<END_MOD>	private void onConfigureVmsToImport() { final org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel importVmsModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel) (org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getWindow())); if (importVmsModel == null) { return; } boolean vmsToImportHaveFullInfo = importVmsModel.vmsToImportHaveFullInfo(); if (vmsToImportHaveFullInfo && (!(importVmsModel.validateArchitectures(importVmsModel.getVmsToImport())))) { return; } final org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmModel model = importVmsModel.getSpecificImportModel(vmsToImportHaveFullInfo); if (vmsToImportHaveFullInfo) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.setWindow(null); setWindow(model); } else { initImportModelForVmsToImportNamesOnly(importVmsModel, model); } }
public void <START_MOD>getVmsForDisplayingFromExternalServer<END_MOD>(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid dataCenterId, org.ovirt.engine.core.compat.Guid vdsId, java.lang.String url, java.lang.String username, java.lang.String password, org.ovirt.engine.core.common.businessentities.OriginType originType<START_MOD>, boolean dcSupportsApiForLoadingExternalVmsNamesOnly<END_MOD>) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>(); } return source; } }; <START_MOD>if (dcSupportsApiForLoadingExternalVmsNamesOnly) { <END_MOD>org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.<START_MOD>GetVmsNamesFromExternalProvider<END_MOD>, new org.ovirt.engine.core.common.queries.GetVmsFromExternalProviderQueryParameters(url, username, password, originType, vdsId, dataCenterId), aQuery); }<START_MOD> else { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVmsFullInfoFromExternalProvider, new org.ovirt.engine.core.common.queries.GetVmsFromExternalProviderQueryParameters(url, username, password, originType, vdsId, dataCenterId), aQuery); } }<END_MOD>	public void getVmsFromExternalServer(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid dataCenterId, org.ovirt.engine.core.compat.Guid vdsId, java.lang.String url, java.lang.String username, java.lang.String password, org.ovirt.engine.core.common.businessentities.OriginType originType, java.util.List<java.lang.String> vmsToImport) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVmsFromExternalProvider, new org.ovirt.engine.core.common.queries.GetVmsFromExternalProviderQueryParameters(url, username, password, originType, vdsId, dataCenterId, vmsToImport), aQuery); }
public boolean vmsToImportHaveFullInfo() { switch (importSources.getSelectedItem()) { case VMWARE : case KVM : case XEN : if (getDataCenters().getSelectedItem().getCompatibilityVersion().greaterOrEquals(Version.v4_1)) { return false; } break; default : } return true; }	public boolean vmsToImportHaveFullInfo() { switch (importSources.getSelectedItem()) { case VMWARE : case KVM : case XEN : if (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isGetNamesOfVmsFromExternalProviderSupported(getDataCenters().getSelectedItem().getCompatibilityVersion())) { return false; } break; default : } return true; }
<START_MOD>protected<END_MOD> org.ovirt.engine.core.common.vdscommands.GetVmsFromExternalProviderParameters buildGetRemoteVmsInfoParameters() { return new org.ovirt.engine.core.common.vdscommands.GetVmsFromExternalProviderParameters(getProxyHostId(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getUrl(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getUsername(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getPassword(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getOriginType()<START_MOD>, org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getVmsNames()<END_MOD>); }	private org.ovirt.engine.core.common.vdscommands.GetVmsFromExternalProviderParameters buildGetRemoteVmsInfoParameters() { return new org.ovirt.engine.core.common.vdscommands.GetVmsFromExternalProviderParameters(getProxyHostId(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getUrl(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getUsername(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getPassword(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getOriginType(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getNamesOfVms()); }
<START_MOD>protected<END_MOD> void logFailureToGetVms() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("URL", org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getUrl()); auditLogDirector.log(logable, AuditLogType.IMPORTEXPORT_GET_EXTERNAL_VMS_INFO_FAILED); }	private void logFailureToGetVms() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("URL", org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getUrl()); auditLogDirector.log(logable, AuditLogType.IMPORTEXPORT_GET_EXTERNAL_VMS_INFO_FAILED); }
@java.lang.Override public org.ovirt.engine.core.compat.Guid getProxyHostId() { return this.proxyHostId; }	public org.ovirt.engine.core.compat.Guid getProxyHostId() { return proxyHostId; }
@java.lang.Override public java.lang.String getUsername() { return this.username; }	public java.lang.String getUsername() { return username; }
@java.lang.Override public java.lang.String getPassword() { return this.password; }	public java.lang.String getPassword() { return password; }
public void setVmsNames(java.util.List<java.lang.String> vmsNames) { this.vmsNames = vmsNames; }	public void setNamesOfVms(java.util.List<java.lang.String> namesOfVms) { this.namesOfVms = namesOfVms; }
@java.lang.Override protected void executeVdsBrokerCommand() { vmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFullInfoFromExternalProviderVDSCommand.getBroker().getExternalVmList(org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFullInfoFromExternalProviderVDSCommand.getParameters().getUrl(), org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFullInfoFromExternalProviderVDSCommand.getParameters().getUsername(), org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFullInfoFromExternalProviderVDSCommand.getParameters().getPassword(), org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFullInfoFromExternalProviderVDSCommand.getParameters().getVmsNames()); org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFullInfoFromExternalProviderVDSCommand.proceedProxyReturnValue(); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.VM> notDownVms = new java.util.ArrayList<>(); for (java.util.Map<java.lang.String, java.lang.Object> map : vmListReturn.vmList) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVmsDataFromExternalProvider(map); if (vm != null) { vm.setOrigin(org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFullInfoFromExternalProviderVDSCommand.getParameters().getOriginType()); vms.add(vm); if (!(vm.isDown())) { notDownVms.add(vm); } } } logNonDownVms(notDownVms); setReturnValue(vms); }	@java.lang.Override protected void executeVdsBrokerCommand() { vmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFullInfoFromExternalProviderVDSCommand.getBroker().getExternalVmList(org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFullInfoFromExternalProviderVDSCommand.getParameters().getUrl(), org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFullInfoFromExternalProviderVDSCommand.getParameters().getUsername(), org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFullInfoFromExternalProviderVDSCommand.getParameters().getPassword(), org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFullInfoFromExternalProviderVDSCommand.getParameters().getNamesOfVms()); org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFullInfoFromExternalProviderVDSCommand.proceedProxyReturnValue(); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.VM> notDownVms = new java.util.ArrayList<>(); for (java.util.Map<java.lang.String, java.lang.Object> map : vmListReturn.vmList) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVmsDataFromExternalProvider(map); if (vm != null) { vm.setOrigin(org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFullInfoFromExternalProviderVDSCommand.getParameters().getOriginType()); vms.add(vm); if (!(vm.isDown())) { notDownVms.add(vm); } } } logNonDownVms(notDownVms); setReturnValue(vms); }
@java.lang.Override public java.lang.String getUrl() { return this.url; }	public java.lang.String getUrl() { return url; }
@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("url", url).append("username", username).append("originType", originType)<START_MOD>.append("vmsNames", vmsNames)<END_MOD>; }	@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("url", url).append("username", username).append("originType", originType).append("namesOfVms", namesOfVms); }
public java.util.List<java.lang.String> getVmsNames() { return vmsNames; }	public java.util.List<java.lang.String> getNamesOfVms() { return namesOfVms; }
java.lang.String invalidVmsWereAllFilteredOnImportVm();	java.lang.String nonRetrievedVmsWereAllFilteredOnImportVm();
java.lang.String invalidAndRunningVmsWereAllFilteredOnImportVm();	java.lang.String nonRetrievedAndRunningVmsWereAllFilteredOnImportVm();
java.lang.String invalidAndRunningVmsWereFilteredOnImportVm();	java.lang.String nonRetrievedAndRunningVmsWereFilteredOnImportVm();
java.lang.String invalidVmsWereFilteredOnImportVm();	java.lang.String nonRetrievedVmsWereFilteredOnImportVm();
public java.util.List<java.lang.String> getVmsNames() { return this.vmsNames; }	public java.util.List<java.lang.String> getNamesOfVms() { return namesOfVms; }
@java.lang.Override protected void executeVdsBrokerCommand() { vmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.<START_MOD>GetVmsNamesFromExternalProviderVDSCommand<END_MOD>.getBroker().<START_MOD>getExternalVmNamesList(org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsNamesFromExternalProviderVDSCommand<END_MOD>.getParameters().getUrl(), org.ovirt.engine.core.vdsbroker.vdsbroker.<START_MOD>GetVmsNamesFromExternalProviderVDSCommand<END_MOD>.getParameters().getUsername(), org.ovirt.engine.core.vdsbroker.vdsbroker.<START_MOD>GetVmsNamesFromExternalProviderVDSCommand<END_MOD>.getParameters().getPassword()); org.ovirt.engine.core.vdsbroker.vdsbroker.<START_MOD>GetVmsNamesFromExternalProviderVDSCommand<END_MOD>.proceedProxyReturnValue(); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.ArrayList<>(); for (java.util.Map<java.lang.String, java.lang.Object> map : vmListReturn.<START_MOD>vmNamesList<END_MOD>) { org.ovirt.engine.core.common.businessentities.VM vm = <START_MOD>new org.ovirt.engine.core.common.businessentities.VM(); if (vm != null) { vm.setName(((java.lang.String) <END_MOD>(map<START_MOD>.get(VdsProperties.vm_name))));<END_MOD> vm.setOrigin(org.ovirt.engine.core.vdsbroker.vdsbroker.<START_MOD>GetVmsNamesFromExternalProviderVDSCommand<END_MOD>.getParameters().getOriginType()); vms.add(vm); } } setReturnValue(vms); }	@java.lang.Override protected void executeVdsBrokerCommand() { vmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsNamesFromExternalProviderVDSCommand.getBroker().getExternalVmNamesList(org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsNamesFromExternalProviderVDSCommand.getParameters().getUrl(), org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsNamesFromExternalProviderVDSCommand.getParameters().getUsername(), org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsNamesFromExternalProviderVDSCommand.getParameters().getPassword()); org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsNamesFromExternalProviderVDSCommand.proceedProxyReturnValue(); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.ArrayList<>(); for (java.lang.String vmName : vmListReturn.getNamesList()) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); if (vmName != null) { vm.setName(vmName); vm.setOrigin(org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsNamesFromExternalProviderVDSCommand.getParameters().getOriginType()); vms.add(vm); } } setReturnValue(vms); }
private void logNonDownVms(java.util.List<org.ovirt.engine.core.common.businessentities.VM> notDownVms) { if (!(notDownVms.isEmpty())) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("URL", org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFullInfoFromExternalProviderVDSCommand.getParameters().getUrl()); logable.addCustomValue("Vms", org.apache.commons.lang.StringUtils.join(notDownVms, ",")); auditLogDirector.log(logable, AuditLogType.IMPORTEXPORT_GET_EXTERNAL_VMS_NOT_IN_DOWN_STATUS); } }	private void logNonDownVms(java.util.List<org.ovirt.engine.core.common.businessentities.VM> notDownVms) { if (!(notDownVms.isEmpty())) { if (shouldLogToAuditLog()) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("URL", org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFullInfoFromExternalProviderVDSCommand.getParameters().getUrl()); logable.addCustomValue("Vms", org.apache.commons.lang.StringUtils.join(notDownVms, ",")); auditLogDirector.log(logable, AuditLogType.IMPORTEXPORT_GET_EXTERNAL_VMS_NOT_IN_DOWN_STATUS); } else { log.warn("The following VMs retrieved from external server '{}' are not in down status and therefore can't be imported: '{}'.", org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmsFullInfoFromExternalProviderVDSCommand.getParameters().getUrl(), org.apache.commons.lang.StringUtils.join(notDownVms, ",")); } } }
private void <START_MOD>handleAsyncTasksWithOutVdsmId<END_MOD>() { if (!(getReturnValue().getTaskPlaceHolderIdList().isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { for (org.ovirt.engine.core.compat.Guid asyncTaskId : getReturnValue().getTaskPlaceHolderIdList()) { org.ovirt.engine.core.common.businessentities.AsyncTask task = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getAsyncTaskFromDb(asyncTaskId); if ((task != null) && (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(task.getVdsmTaskId()))) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.<START_MOD>markRootCommandAsPartiallySubmitted(task.getRootCommandId()); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.<END_MOD>removeTaskFromDbByTaskId(task.getTaskId()); } } return null; }); } }	private void clearAsyncTasksWithOutVdsmId() { if (!(getReturnValue().getTaskPlaceHolderIdList().isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { for (org.ovirt.engine.core.compat.Guid asyncTaskId : getReturnValue().getTaskPlaceHolderIdList()) { org.ovirt.engine.core.common.businessentities.AsyncTask task = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getAsyncTaskFromDb(asyncTaskId); if ((task != null) && (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(task.getVdsmTaskId()))) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.removeTaskFromDbByTaskId(task.getTaskId()); } } return null; }); } }
public org.ovirt.engine.core.common.action.VdcReturnValueBase executeAction() { getSessionDataContainer().updateSessionLastActiveTime(getParameters().getSessionId()); determineExecutionReason(); actionState = CommandActionState.EXECUTE; java.lang.String tempVar = getDescription(); getReturnValue().setDescription((tempVar != null ? tempVar : getReturnValue().getDescription())); setActionMessageParameters(); org.ovirt.engine.core.common.job.Step validatingStep = null; boolean actionAllowed; boolean isExternal = ((this.getParameters().getJobId()) != null) || ((this.getParameters().getStepId()) != null); if (!isExternal) { validatingStep = org.ovirt.engine.core.bll.job.ExecutionHandler.addStep(getExecutionContext(), StepEnum.VALIDATING, null); } try { if (parentHasCallback()) { persistCommand(getParameters().getParentCommand()); } actionAllowed = (getReturnValue().isValid()) || (internalValidate()); if (!isExternal) { org.ovirt.engine.core.bll.job.ExecutionHandler.endStep(getExecutionContext(), validatingStep, actionAllowed); } if (actionAllowed) { execute(); } else { getReturnValue().setValid(false); } } finally { updateCommandIfNeeded(); freeLockExecute(); <START_MOD>handleAsyncTasksWithOutVdsmId<END_MOD>(); } return getReturnValue(); }	public org.ovirt.engine.core.common.action.VdcReturnValueBase executeAction() { getSessionDataContainer().updateSessionLastActiveTime(getParameters().getSessionId()); determineExecutionReason(); actionState = CommandActionState.EXECUTE; java.lang.String tempVar = getDescription(); getReturnValue().setDescription((tempVar != null ? tempVar : getReturnValue().getDescription())); setActionMessageParameters(); org.ovirt.engine.core.common.job.Step validatingStep = null; boolean actionAllowed; boolean isExternal = ((this.getParameters().getJobId()) != null) || ((this.getParameters().getStepId()) != null); if (!isExternal) { validatingStep = executionHandler.addStep(getExecutionContext(), StepEnum.VALIDATING, null); } try { if (parentHasCallback()) { persistCommand(getParameters().getParentCommand()); } actionAllowed = (getReturnValue().isValid()) || (internalValidate()); if (!isExternal) { executionHandler.endStep(getExecutionContext(), validatingStep, actionAllowed); } if (actionAllowed) { execute(); } else { getReturnValue().setValid(false); } } finally { updateCommandIfNeeded(); freeLockExecute(); clearAsyncTasksWithOutVdsmId(); } return getReturnValue(); }
private void updateTaskStatuses(java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.AsyncTaskStatus>> poolsAllTasksMap) { for (org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task : _tasks.values()) { if (task.getShouldPoll()) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.AsyncTaskStatus> asyncTasksForPoolMap = poolsAllTasksMap.get(task.getStoragePoolID()); if (asyncTasksForPoolMap != null) { org.ovirt.engine.core.common.businessentities.AsyncTaskStatus cachedAsyncTaskStatus = asyncTasksForPoolMap.get(task.getVdsmTaskId()); task.updateTask(cachedAsyncTaskStatus); <START_MOD>if (hasPartiallySubmittedRootCommand(task)) { task.setPartiallyCompletedCommandTask(true); } } } } }<END_MOD>	private void updateTaskStatuses(java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.AsyncTaskStatus>> poolsAllTasksMap) { for (org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task : _tasks.values()) { if (task.getShouldPoll()) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.AsyncTaskStatus> asyncTasksForPoolMap = poolsAllTasksMap.get(task.getStoragePoolID()); if (asyncTasksForPoolMap != null) { org.ovirt.engine.core.common.businessentities.AsyncTaskStatus cachedAsyncTaskStatus = asyncTasksForPoolMap.get(task.getVdsmTaskId()); task.updateTask(cachedAsyncTaskStatus); } } } }
private void autoSelectStorage() { diskInfoDestinationMap = new java.util.HashMap(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = diskDao.getAllForVm(org.ovirt.engine.core.bll.CommonVmPoolCommand.getParameters().getVmStaticData().getVmtGuid()); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domains = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { for (org.ovirt.engine.core.compat.Guid id : ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)).getStorageIds()) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = domainDao.get(id); if (!(domains.contains(domain))) { domains.add(domain); } } } for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { java.util.ArrayList<org.ovirt.engine.core.compat.Guid> storageIds = new java.util.ArrayList<>(); storageIds.add(findAvailableStorageDomain(domains)); ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)).setStorageIds(storageIds); diskInfoDestinationMap.put(disk.getId(), ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))); } }	private java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImage> autoSelectTargetDomain() { java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImage> destinationMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : templateDisks) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> storageIds = new java.util.ArrayList<>(); org.ovirt.engine.core.compat.Guid storageId = findAvailableStorageDomain(disk.getSize(), diskToStorageIds.get(disk.getId())); storageIds.add(storageId); java.util.List<org.ovirt.engine.core.compat.Guid> profileIds = diskToProfileMap.get(disk.getId()); for (org.ovirt.engine.core.compat.Guid profileId : profileIds) { org.ovirt.engine.core.common.businessentities.profiles.DiskProfile profile = diskProfileDao.get(profileId); if (profile.getStorageDomainId().equals(storageId)) { diskImage.setDiskProfileId(profile.getId()); break; } } diskImage.setStorageIds(storageIds); destinationMap.put(disk.getId(), diskImage); } return destinationMap; }
private org.ovirt.engine.core.compat.Guid findAvailableStorageDomain(java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domains) { org.ovirt.engine.core.common.businessentities.StorageDomain dest = domains.get(0); for (org.ovirt.engine.core.common.businessentities.StorageDomain domain : domains) { if ((((domain.getAvailableDiskSizeInBytes()) != null) && ((dest.getAvailableDiskSizeInBytes()) != null)) && ((domain.getAvailableDiskSizeInBytes()) > (dest.getAvailableDiskSizeInBytes()))) { dest = domain; } } return dest.getId(); }	private org.ovirt.engine.core.compat.Guid findAvailableStorageDomain(long diskSize, java.util.List<org.ovirt.engine.core.compat.Guid> storageIds) { org.ovirt.engine.core.compat.Guid dest = storageIds.get(0); for (org.ovirt.engine.core.compat.Guid storageId : storageIds) { if ((targetDomainsSize.get(storageId)) > (targetDomainsSize.get(dest))) { dest = storageId; } } long destSize = targetDomainsSize.get(dest); targetDomainsSize.put(dest, (destSize - diskSize)); return dest; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmPool mapRow(final java.sql.ResultSet rs, final int rowNum) throws java.sql.SQLException { final org.ovirt.engine.core.common.businessentities.VmPool entity = new org.ovirt.engine.core.common.businessentities.VmPool(); entity.setVmPoolDescription(rs.getString("vm_pool_description")); entity.setVmPoolId(getGuidDefaultEmpty(rs, "vm_pool_id")); entity.setComment(rs.getString("vm_pool_comment")); entity.setName(rs.getString("vm_pool_name")); entity.setVmPoolType(org.ovirt.engine.core.common.businessentities.VmPoolType.forValue(rs.getInt("vm_pool_type"))); entity.setStateful(rs.getBoolean("stateful")); entity.setParameters(rs.getString("parameters")); entity.setPrestartedVms(rs.getInt("prestarted_vms")); entity.setClusterId(getGuidDefaultEmpty(rs, "cluster_id")); entity.setClusterName(rs.getString("cluster_name")); entity.setMaxAssignedVmsPerUser(rs.getInt("max_assigned_vms_per_user")); entity.setSpiceProxy(rs.getString("spice_proxy")); entity.setBeingDestroyed(rs.getBoolean("is_being_destroyed")); <START_MOD>entity.setAutoStorageSelect(rs.getBoolean("auto_storage_select")); <END_MOD>return entity; }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmPool mapRow(final java.sql.ResultSet rs, final int rowNum) throws java.sql.SQLException { final org.ovirt.engine.core.common.businessentities.VmPool entity = new org.ovirt.engine.core.common.businessentities.VmPool(); entity.setVmPoolDescription(rs.getString("vm_pool_description")); entity.setVmPoolId(getGuidDefaultEmpty(rs, "vm_pool_id")); entity.setComment(rs.getString("vm_pool_comment")); entity.setName(rs.getString("vm_pool_name")); entity.setVmPoolType(org.ovirt.engine.core.common.businessentities.VmPoolType.forValue(rs.getInt("vm_pool_type"))); entity.setStateful(rs.getBoolean("stateful")); entity.setParameters(rs.getString("parameters")); entity.setPrestartedVms(rs.getInt("prestarted_vms")); entity.setClusterId(getGuidDefaultEmpty(rs, "cluster_id")); entity.setClusterName(rs.getString("cluster_name")); entity.setMaxAssignedVmsPerUser(rs.getInt("max_assigned_vms_per_user")); entity.setSpiceProxy(rs.getString("spice_proxy")); entity.setBeingDestroyed(rs.getBoolean("is_being_destroyed")); entity.setAutoStorageSelect(rs.getBoolean("is_auto_storage_select")); return entity; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmPool mapRow(final java.sql.ResultSet rs, final int rowNum) throws java.sql.SQLException { final org.ovirt.engine.core.common.businessentities.VmPool entity = new org.ovirt.engine.core.common.businessentities.VmPool(); entity.setVmPoolDescription(rs.getString("vm_pool_description")); entity.setVmPoolId(getGuidDefaultEmpty(rs, "vm_pool_id")); entity.setComment(rs.getString("vm_pool_comment")); entity.setName(rs.getString("vm_pool_name")); entity.setVmPoolType(org.ovirt.engine.core.common.businessentities.VmPoolType.forValue(rs.getInt("vm_pool_type"))); entity.setStateful(rs.getBoolean("stateful")); entity.setParameters(rs.getString("parameters")); entity.setPrestartedVms(rs.getInt("prestarted_vms")); entity.setClusterId(getGuidDefaultEmpty(rs, "cluster_id")); entity.setClusterName(rs.getString("cluster_name")); entity.setAssignedVmsCount(rs.getInt("assigned_vm_count")); entity.setRunningVmsCount(rs.getInt("vm_running_count")); entity.setMaxAssignedVmsPerUser(rs.getInt("max_assigned_vms_per_user")); entity.setSpiceProxy(rs.getString("spice_proxy")); entity.setBeingDestroyed(rs.getBoolean("is_being_destroyed")); <START_MOD>entity.setAutoStorageSelect(rs.getBoolean("auto_storage_select")); <END_MOD>return entity; }	@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmPool mapRow(final java.sql.ResultSet rs, final int rowNum) throws java.sql.SQLException { final org.ovirt.engine.core.common.businessentities.VmPool entity = new org.ovirt.engine.core.common.businessentities.VmPool(); entity.setVmPoolDescription(rs.getString("vm_pool_description")); entity.setVmPoolId(getGuidDefaultEmpty(rs, "vm_pool_id")); entity.setComment(rs.getString("vm_pool_comment")); entity.setName(rs.getString("vm_pool_name")); entity.setVmPoolType(org.ovirt.engine.core.common.businessentities.VmPoolType.forValue(rs.getInt("vm_pool_type"))); entity.setStateful(rs.getBoolean("stateful")); entity.setParameters(rs.getString("parameters")); entity.setPrestartedVms(rs.getInt("prestarted_vms")); entity.setClusterId(getGuidDefaultEmpty(rs, "cluster_id")); entity.setClusterName(rs.getString("cluster_name")); entity.setAssignedVmsCount(rs.getInt("assigned_vm_count")); entity.setRunningVmsCount(rs.getInt("vm_running_count")); entity.setMaxAssignedVmsPerUser(rs.getInt("max_assigned_vms_per_user")); entity.setSpiceProxy(rs.getString("spice_proxy")); entity.setBeingDestroyed(rs.getBoolean("is_being_destroyed")); entity.setAutoStorageSelect(rs.getBoolean("is_auto_storage_select")); return entity; }
public void updateTargetChangeable(boolean enabled) { if ((disks) != null) { for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : disks) { diskModel.getStorageDomain().setIsChangeable(enabled); } } }	public void updateTargetChangeable(boolean enabled) { if ((disks) != null) { for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : disks) { diskModel.getStorageDomain().setIsChangeable(enabled); diskModel.getDiskProfile().setIsChangeable(enabled); } } }
@java.lang.Override public void initialize(org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel systemTreeSelectedItem) { super.initialize(systemTreeSelectedItem); if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(pool.getVmPoolSpiceProxy()))) { getModel().getSpiceProxyEnabled().setEntity(true); getModel().getSpiceProxy().setEntity(pool.getVmPoolSpiceProxy()); getModel().getSpiceProxy().setIsChangeable(true); } instanceTypeManager = new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.ExistingPoolInstanceTypeManager(getModel(), pool); instanceTypeManager.setAlwaysEnabledFieldUpdate(true); getModel().getCustomProperties().setIsChangeable(false); getModel().getCustomPropertySheet().setIsChangeable(false); <START_MOD>getModel().getDiskAllocationTargetEnabled().setIsAvailable(java.lang.Boolean.TRUE); getModel().getDiskAllocationTargetEnabled().setIsChangeable(java.lang.Boolean.FALSE); getModel().getDiskAllocationTargetEnabled().setEntity(actualPool.isAutoStorageSelect()); <END_MOD>}	@java.lang.Override public void initialize(org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel systemTreeSelectedItem) { super.initialize(systemTreeSelectedItem); if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(pool.getVmPoolSpiceProxy()))) { getModel().getSpiceProxyEnabled().setEntity(true); getModel().getSpiceProxy().setEntity(pool.getVmPoolSpiceProxy()); getModel().getSpiceProxy().setIsChangeable(true); } instanceTypeManager = new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.ExistingPoolInstanceTypeManager(getModel(), pool); instanceTypeManager.setAlwaysEnabledFieldUpdate(true); getModel().getCustomProperties().setIsChangeable(false); getModel().getCustomPropertySheet().setIsChangeable(false); }
@java.lang.Override public void initialize(org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel systemTreeSelectedItem) { super.initialize(systemTreeSelectedItem); getModel().getVmType().setIsChangeable(true); getModel().getPoolStateful().setIsChangeable(true); templateValidate(); instanceTypeManager = new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.NewPoolInstanceTypeManager(getModel()); getModel().getVmInitModel().init(null); <START_MOD>getModel().getDiskAllocationTargetEnabled().setIsAvailable(java.lang.Boolean.TRUE); getModel().getDiskAllocationTargetEnabled().setIsChangeable(java.lang.Boolean.TRUE); getModel().getDiskAllocationTargetEnabled().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { getModel().getDisksAllocationModel().updateTargetChangeable((!(getModel().getDiskAllocationTargetEnabled().getEntity()))); <END_MOD>}<START_MOD> }); }<END_MOD>	@java.lang.Override public void initialize(org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel systemTreeSelectedItem) { super.initialize(systemTreeSelectedItem); getModel().getVmType().setIsChangeable(true); getModel().getPoolStateful().setIsChangeable(true); templateValidate(); instanceTypeManager = new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.NewPoolInstanceTypeManager(getModel()); getModel().getVmInitModel().init(null); getModel().getDisksAllocationModel().initializeAutoSelectTarget(true, false); }
private void initEditors() { pmTypeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.StringRenderer<java.lang.String>()); pmEncryptOptionsEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor(org.ovirt.engine.ui.common.widget.Align.RIGHT); pmEncryptOptionsEditor.setUsePatternFly(true); pmSecureEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor(org.ovirt.engine.ui.common.widget.Align.RIGHT); pmSecureEditor.setUsePatternFly(true); <START_MOD>fencingOptionsUrl = new com.google.gwt.user.client.ui.Anchor(dynamicMessages.fencingOptions()); fencingOptionsUrl.asWidget().addStyleName(style.fencingOptionsLink()); asWidget().addStatusWidget(fencingOptionsUrl); <END_MOD>}	private void initEditors() { pmTypeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.StringRenderer<java.lang.String>()); pmEncryptOptionsEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor(org.ovirt.engine.ui.common.widget.Align.RIGHT); pmEncryptOptionsEditor.setUsePatternFly(true); pmSecureEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor(org.ovirt.engine.ui.common.widget.Align.RIGHT); pmSecureEditor.setUsePatternFly(true); fencingOptionsUrl = new com.google.gwt.user.client.ui.Anchor(dynamicMessages.fencingOptions()); fencingOptionsUrl.asWidget().addStyleName(style.fencingOptionsLink()); }
@javax.annotation.PostConstruct private void handleUnmanagedCommands() { java.util.List<org.ovirt.engine.core.common.businessentities.AsyncTask> asyncTasks = asyncTaskDao.getAll(); java.util.Set<org.ovirt.engine.core.compat.Guid> asyncTaskManagerManagedCommands = asyncTasks.stream().filter(( x) -> (x.getVdsmTaskId()) != null).map(( x) -> x.getRootCommandId()).collect(java.util.stream.Collectors.toSet()); asyncTaskManagerManagedCommands.addAll(asyncTasks.stream().filter(( x) -> (x.getVdsmTaskId()) != null).map(( x) -> x.getCommandId()).collect(java.util.stream.Collectors.toSet())); getCommands(false).stream().filter(( x) -> !(x.isCallbackEnabled())).filter(( x) -> (x.getCommandStatus()) == CommandStatus.ACTIVE).filter(( x) -> !(asyncTaskManagerManagedCommands.contains(x.getId()))).forEach(( x) -> commandsCache.updateCommandStatus(x.getId(), CommandStatus.ENDED_WITH_FAILURE)); getCommands(false).stream().filter(( x) -> x.isCallbackEnabled()).filter(( x) -> !(x.isCallbackNotified())).filter(( x) -> x.getCommandStatus().isDuringExecution()).filter(( x) -> !(asyncTaskManagerManagedCommands.contains(x.getId()))).forEach(( x) -> <START_MOD>{ CommandBase<?> cmd = <END_MOD>retrieveCommand(x.getId())<START_MOD>; if (cmd != null) { cmd<END_MOD>.reacquireLocks(); }<START_MOD> }); }<END_MOD>	@javax.annotation.PostConstruct private void handleUnmanagedCommands() { java.util.List<org.ovirt.engine.core.common.businessentities.AsyncTask> asyncTasks = asyncTaskDao.getAll(); java.util.Set<org.ovirt.engine.core.compat.Guid> asyncTaskManagerManagedCommands = asyncTasks.stream().filter(( x) -> (x.getVdsmTaskId()) != null).map(( x) -> x.getRootCommandId()).collect(java.util.stream.Collectors.toSet()); asyncTaskManagerManagedCommands.addAll(asyncTasks.stream().filter(( x) -> (x.getVdsmTaskId()) != null).map(( x) -> x.getCommandId()).collect(java.util.stream.Collectors.toSet())); getCommands(false).stream().filter(( x) -> !(x.isCallbackEnabled())).filter(( x) -> (x.getCommandStatus()) == CommandStatus.ACTIVE).filter(( x) -> !(asyncTaskManagerManagedCommands.contains(x.getId()))).forEach(( x) -> commandsCache.updateCommandStatus(x.getId(), CommandStatus.ENDED_WITH_FAILURE)); getCommands(false).stream().filter(( x) -> x.isCallbackEnabled()).filter(( x) -> !(x.isCallbackNotified())).filter(( x) -> x.getCommandStatus().isDuringExecution()).filter(( x) -> !(asyncTaskManagerManagedCommands.contains(x.getId()))).map(( x) -> retrieveCommand(x.getId())).filter(java.util.Objects::nonNull).forEach(CommandBase::reacquireLocks); }
@org.ovirt.engine.ui.common.Template("<i>Any valid libvirt URI format is allowed for KVM URI. <br />" + (((("Examples: <br />" + "qemu+tcp://&lthostname&gt/system <br />") + "qemu+ssh://root@&lthostname&gt/path <br />") + "Where '&lthostname&gt' is the remote host hypervisor. <br /> <br />") + "Please see libvirt documentation for more information on libvirt URI formats and authentication.</i>")) com.google.gwt.safehtml.shared.SafeHtml kvmUriInfo();	@org.ovirt.engine.ui.common.Template("<i>Any valid libvirt URI format is allowed for KVM URI. <br />" + (((("Examples: <br />" + "qemu+tcp://&lthostname&gt/system <br />") + "qemu+ssh://root@&lthostname&gt/path <br />") + "Where '&lthostname&gt' is the host of the hypervisor. <br /> <br />") + "Please see libvirt documentation for more information on libvirt URI formats and authentication.</i>")) com.google.gwt.safehtml.shared.SafeHtml kvmUriInfo();
@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.webadmin.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> valueUpdater) { org.ovirt.engine.ui.frontend.utils.GlusterVolumeUtils.VolumeStatus status = org.ovirt.engine.ui.frontend.utils.GlusterVolumeUtils.getVolumeStatus(volume); if (((BrowserEvents.CLICK.equals(event.getType())) && ((onClickCommand) != null)) && ((status == (org.ovirt.engine.ui.frontend.utils.GlusterVolumeUtils.VolumeStatus.ALL_BRICKS_DOWN)) || (status == (org.ovirt.engine.ui.frontend.utils.GlusterVolumeUtils.VolumeStatus.SOME_BRICKS_DOWN)))) { onClickCommand.execute(); } <START_MOD>else { super.onBrowserEvent(context, parent, volume, tooltipContent, event, valueUpdater); <END_MOD>}<START_MOD> }<END_MOD>	@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.webadmin.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> valueUpdater) { super.onBrowserEvent(context, parent, volume, tooltipContent, event, valueUpdater); org.ovirt.engine.ui.frontend.utils.GlusterVolumeUtils.VolumeStatus status = org.ovirt.engine.ui.frontend.utils.GlusterVolumeUtils.getVolumeStatus(volume); if (((BrowserEvents.CLICK.equals(event.getType())) && ((onClickCommand) != null)) && ((status == (org.ovirt.engine.ui.frontend.utils.GlusterVolumeUtils.VolumeStatus.ALL_BRICKS_DOWN)) || (status == (org.ovirt.engine.ui.frontend.utils.GlusterVolumeUtils.VolumeStatus.SOME_BRICKS_DOWN)))) { onClickCommand.execute(); } }
public static void handleCredentials(org.ovirt.engine.core.sso.utils.SsoContext ssoContext, javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.Credentials credentials, boolean isInteractive) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug("Entered AuthenticationUtils.handleCredentials"); if ((org.apache.commons.lang.StringUtils.isEmpty(credentials.getUsername())) || (org.apache.commons.lang.StringUtils.isEmpty(credentials.getProfile()))) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_PROVIDE_USERNAME_PASSWORD_AND_PROFILE, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } org.ovirt.engine.core.sso.utils.SsoSession ssoSession = org.ovirt.engine.core.sso.utils.AuthenticationUtils.login(ssoContext, request, credentials, null, isInteractive); org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.info("User {}@{} successfully logged in with scopes: {}", credentials.getUsername(), credentials.getProfile(), ssoSession.getScope()); }	public static void handleCredentials(org.ovirt.engine.core.sso.utils.SsoContext ssoContext, javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.Credentials credentials, boolean interactive) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.debug("Entered AuthenticationUtils.handleCredentials"); if ((org.apache.commons.lang.StringUtils.isEmpty(credentials.getUsername())) || (org.apache.commons.lang.StringUtils.isEmpty(credentials.getProfile()))) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_PROVIDE_USERNAME_PASSWORD_AND_PROFILE, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } org.ovirt.engine.core.sso.utils.SsoSession ssoSession = org.ovirt.engine.core.sso.utils.AuthenticationUtils.login(ssoContext, request, credentials, null, interactive); org.ovirt.engine.core.sso.utils.AuthenticationUtils.log.info("User {}@{} successfully logged in with scopes: {}", credentials.getUsername(), credentials.getProfile(), ssoSession.getScope()); }
private void endAction(org.ovirt.engine.core.bll.CommandBase<?> commandBase, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, boolean succeeded) { if (shouldExecuteEndMethod(commandBase)) { commandBase.getReturnValue().setSucceeded(false); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = commandBase.endAction(); if ((!(returnVal.getSucceeded())) && (shouldRepeatEndMethodsOnFail(returnVal))) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.ENGINE, java.lang.String.format(( %1$s id: '%2$s' endAction()   +   complete successfully commandBase.getActionType(), commandBase.getCommandId())); } <START_MOD>if ((commandBase.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.VdcActionType.Unknown))<END_MOD> { <START_MOD>org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.removeAllCommandsInHierarchy(<END_MOD>commandBase.getCommandId()); } <START_MOD>org.ovirt.engine.core.bll.job.ExecutionHandler.endJob(commandBase.getExecutionContext(), succeeded); <END_MOD>} }	private void endAction(org.ovirt.engine.core.bll.CommandBase<?> commandBase, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, boolean succeeded) { if (shouldExecuteEndMethod(commandBase)) { commandBase.getReturnValue().setSucceeded(false); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = commandBase.endAction(); if (!(returnVal.getSucceeded())) { if (shouldRepeatEndMethodsOnFail(returnVal)) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.ENGINE, java.lang.String.format(("Command %1$s id: '%2$s' endAction() " + "didn't complete successfully"), commandBase.getActionType(), commandBase.getCommandId())); } else { log.warn(("Command '{}' id: '{}' end method execution failed, as the command isn't marked for " + "endAction() retries silently ignoring"), commandBase.getActionType(), commandBase.getCommandId()); } } if ((commandBase.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.VdcActionType.Unknown)) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.removeAllCommandsInHierarchy(commandBase.getCommandId()); } org.ovirt.engine.core.bll.job.ExecutionHandler.getInstance().endJob(commandBase.getExecutionContext(), succeeded); } }
private org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntity(org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates) { return org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.updateEntity(updates, org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()<START_MOD>, imageTransferDao<END_MOD>); }	private org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntity(org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates) { return imageTransferUpdater.updateEntity(updates, org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); }
public void addCluster() { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel model = new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel(); model.init(false<START_MOD>); model.setAddMacPoolCommand(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.createAddMacPoolCommand(this)<END_MOD>); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newClusterTitle()); model.setHelpTag(HelpTag.new_cluster); model.setHashName("new_cluster"); model.setIsNew(true); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = new java.util.ArrayList<>(); dataCenters.add(getEntity()); model.getDataCenter().setItems(dataCenters, getEntity()); model.getDataCenter().setIsChangeable(false); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnAddCluster", this); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); model.getCommands().add(tempVar2); }	public void addCluster() { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel model = new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel(); model.init(false); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newClusterTitle()); model.setHelpTag(HelpTag.new_cluster); model.setHashName("new_cluster"); model.setIsNew(true); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = new java.util.ArrayList<>(); dataCenters.add(getEntity()); model.getDataCenter().setItems(dataCenters, getEntity()); model.getDataCenter().setIsChangeable(false); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnAddCluster", this); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); model.getCommands().add(tempVar2); }
public static org.ovirt.engine.ui.uicommonweb.UICommand createAddMacPoolCommand(org.ovirt.engine.ui.uicommonweb.ICommandTarget target) { final org.ovirt.engine.ui.uicommonweb.UICommand addMacPoolCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("AddMacPool", target); addMacPoolCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().addMacPoolButton()); return addMacPoolCommand; }	private void checkForActiveVms(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel model, final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel) { org.ovirt.engine.core.compat.Guid clusterId = model.getEntity().getId(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetNumberOfActiveVmsInClusterByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { java.lang.Integer numOfActiveVms = returnValue.getReturnValue(); if (numOfActiveVms != 0) { confirmModel.setMessage(messages.thereAreActiveVMsRequiringRestart(numOfActiveVms)); } checkForNonResponsiveHosts(confirmModel); } })); }
java.lang.String ACTION_TYPE_FAILED_QUOTA_CANNOT_CHANGE_DEFAULT();	java.lang.String ACTION_TYPE_FAILED_QUOTA_DEFAULT_CANNOT_BE_CHANGED();
private void mockQuotaDao() { when(quotaDao.getById(<START_MOD>generalGuidQuota)).thenReturn(mockStorageQuota(generalGuidQuota)); when(quotaDao.getById(defaultQuotaGuid)).thenReturn(mockStorageQuota(defaultQuotaGuid)); when(quotaDao.isQuotaDefault(generalGuidQuota)).thenReturn(false); when(quotaDao.isQuotaDefault(defaultQuotaGuid)).thenReturn(true<END_MOD>); java.util.List<org.ovirt.engine.core.common.businessentities.Quota> quotaList = new java.util.ArrayList<>(); quotaList.add(new org.ovirt.engine.core.common.businessentities.Quota()); quotaList.add(new org.ovirt.engine.core.common.businessentities.Quota()); when(quotaDao.getQuotaByStoragePoolGuid(storagePoolUUID)).thenReturn(quotaList); when(quotaDao.isQuotaInUse(any(org.ovirt.engine.core.common.businessentities.Quota.class))).thenReturn(false); }	private void mockQuotaDao() { when(quotaDao.getById(generalGuidQuota)).thenReturn(mockStorageQuota(generalGuidQuota)); org.ovirt.engine.core.common.businessentities.Quota defaultQuota = mockStorageQuota(defaultQuotaGuid); defaultQuota.setDefault(true); when(quotaDao.getById(defaultQuotaGuid)).thenReturn(defaultQuota); java.util.List<org.ovirt.engine.core.common.businessentities.Quota> quotaList = new java.util.ArrayList<>(); quotaList.add(new org.ovirt.engine.core.common.businessentities.Quota()); quotaList.add(new org.ovirt.engine.core.common.businessentities.Quota()); when(quotaDao.getQuotaByStoragePoolGuid(storagePoolUUID)).thenReturn(quotaList); when(quotaDao.isQuotaInUse(any(org.ovirt.engine.core.common.businessentities.Quota.class))).thenReturn(false); }
public boolean validateQuotaNotDefault(org.ovirt.engine.core.compat.Guid quotaId) { if (getQuotaDao().isQuotaDefault(quotaId)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_CANNOT_CHANGE_DEFAULT); return false; } return true; }	@java.lang.Override protected boolean validate() { org.ovirt.engine.core.common.businessentities.Quota quota = getParameters().getQuota(); if (quota.isDefault()) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID); return false; } return ((validateQuotaNameIsUnique(quota)) && (validateQuotaStorageLimitation(quota))) && (validateQuotaClusterLimitation(quota)); }
@org.junit.Test public void testFailToRemoveDefaultQuota() { org.ovirt.engine.core.bll.RemoveQuotaCommand removeQuotaCommand = createCommand(defaultQuotaGuid); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(removeQuotaCommand, EngineMessage.ACTION_TYPE_FAILED_QUOTA_CANNOT_CHANGE_DEFAULT); }	@org.junit.Test public void testFailToRemoveDefaultQuota() { org.ovirt.engine.core.bll.RemoveQuotaCommand removeQuotaCommand = createCommand(defaultQuotaGuid); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(removeQuotaCommand, EngineMessage.ACTION_TYPE_FAILED_QUOTA_DEFAULT_CANNOT_BE_CHANGED); }
private org.ovirt.engine.core.bll.RemoveQuotaCommand createCommand(<START_MOD>org.ovirt.engine.core.compat.Guid guid<END_MOD>) { org.ovirt.engine.core.common.action.QuotaCRUDParameters param = new org.ovirt.engine.core.common.action.QuotaCRUDParameters(); param.setQuotaId(<START_MOD>guid<END_MOD>); command = spy(new org.ovirt.engine.core.bll.RemoveQuotaCommand(param, null)); doReturn(storagePoolDao).when(command).getStoragePoolDao(); doReturn(quotaDao).when(command).getQuotaDao(); doReturn(vmDao).when(command).getVmDao(); doReturn(quotaManager).when(command).getQuotaManager(); return command; }	private org.ovirt.engine.core.bll.RemoveQuotaCommand createCommand(org.ovirt.engine.core.compat.Guid guid) { org.ovirt.engine.core.common.action.IdParameters param = new org.ovirt.engine.core.common.action.IdParameters(guid); command = spy(new org.ovirt.engine.core.bll.RemoveQuotaCommand(param, null)); doReturn(storagePoolDao).when(command).getStoragePoolDao(); doReturn(quotaDao).when(command).getQuotaDao(); doReturn(vmDao).when(command).getVmDao(); doReturn(quotaManager).when(command).getQuotaManager(); return command; }
private org.ovirt.engine.core.common.businessentities.StoragePool mockStoragePool() { org.ovirt.engine.core.common.businessentities.StoragePool storagePool = new org.ovirt.engine.core.common.businessentities.StoragePool(); storagePool.setId(storagePoolUUID); storagePool.setQuotaEnforcementType(QuotaEnforcementTypeEnum.DISABLED); <START_MOD>storagePool.setDefaultQuotaId(defaultQuotaGuid); <END_MOD>return storagePool; }	private org.ovirt.engine.core.common.businessentities.StoragePool mockStoragePool() { org.ovirt.engine.core.common.businessentities.StoragePool storagePool = new org.ovirt.engine.core.common.businessentities.StoragePool(); storagePool.setId(storagePoolUUID); storagePool.setQuotaEnforcementType(QuotaEnforcementTypeEnum.DISABLED); return storagePool; }
public boolean consume(org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters) throws org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.AuditLogType, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase> auditLogPair = new org.ovirt.engine.core.common.utils.Pair(); auditLogPair.setSecond(parameters.getAuditLogable()); org.ovirt.engine.core.common.businessentities.StoragePool storagePool = parameters.getAuditLogable().getStoragePool(); if (storagePool == null) { throw new org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException( storage pool passed to QuotaManager } lock.writeLock().lock(); try { if (!(storagePoolQuotaMap.containsKey(storagePool.getId()))) { storagePoolQuotaMap.put(storagePool.getId(), new java.util.HashMap()); } } finally { lock.writeLock().unlock(); } <START_MOD>boolean isQuotaEnabled = (parameters.getStoragePool().getQuotaEnforcementType()) != (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED); boolean result = true; <END_MOD>lock.readLock().lock(); try { <START_MOD>if (isQuotaEnabled) { <END_MOD>synchronized(storagePoolQuotaMap.get(storagePool.getId())) { <START_MOD>result = (validateAndCompleteParameters(parameters, auditLogPair)) && (internalConsumeAndReleaseHandler(parameters, auditLogPair)); } } } finally { lock.readLock().unlock(); getQuotaManagerAuditLogger().auditLog(auditLogPair.getFirst(), auditLogPair.getSecond()); } <END_MOD>return <START_MOD>result; }<END_MOD>	public boolean consume(org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters) throws org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.AuditLogType, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase> auditLogPair = new org.ovirt.engine.core.common.utils.Pair(); auditLogPair.setSecond(parameters.getAuditLogable()); org.ovirt.engine.core.common.businessentities.StoragePool storagePool = parameters.getAuditLogable().getStoragePool(); if (storagePool == null) { throw new org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException("Null storage pool passed to QuotaManager"); } lock.writeLock().lock(); try { if (!(storagePoolQuotaMap.containsKey(storagePool.getId()))) { storagePoolQuotaMap.put(storagePool.getId(), new java.util.HashMap()); } } finally { lock.writeLock().unlock(); } lock.readLock().lock(); try { synchronized(storagePoolQuotaMap.get(storagePool.getId())) { return (validateAndCompleteParameters(parameters, auditLogPair)) && (((parameters.getStoragePool().getQuotaEnforcementType()) == (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED)) || (internalConsumeAndReleaseHandler(parameters, auditLogPair))); } } finally { lock.readLock().unlock(); getQuotaManagerAuditLogger().auditLog(auditLogPair.getFirst(), auditLogPair.getSecond()); } }
private boolean validateAndCompleteParameters(org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters, org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.AuditLogType, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase> auditLogPair) throws org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException { <START_MOD>boolean hardEnforcement = (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.HARD_ENFORCEMENT) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType()); for (org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter param : parameters.getParameters()) { boolean validQuotaId = checkAndFetchQuota(parameters, param, auditLogPair); boolean validCluster = true; boolean validStorageDomain = true; <END_MOD>if (validQuotaId<START_MOD>) { if (param instanceof org.ovirt.engine.core.bll.quota.QuotaClusterConsumptionParameter) {<END_MOD> validCluster = <START_MOD>checkClusterMatchQuota(parameters, ((org.ovirt.engine.core.bll.quota.QuotaClusterConsumptionParameter) (param))); } if (param instanceof org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter) {<END_MOD> validStorageDomain = <START_MOD>checkStoragePoolMatchQuota(parameters, ((<END_MOD>org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter) <START_MOD>(param))<END_MOD>); } } if (((!validQuotaId) || (!validCluster)) || (!validStorageDomain)) { if (hardEnforcement) { return false; } else { parameters.getValidationMessages().clear(); } } } parameters.getParameters().removeAll(corruptedParameters); corruptedParameters.clear(); return true; }	private boolean validateAndCompleteParameters(org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters, org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.AuditLogType, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase> auditLogPair) throws org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException { if ((org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType())) { return true; } boolean hardEnforcement = (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.HARD_ENFORCEMENT) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType()); for (org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter param : parameters.getParameters()) { boolean validQuotaId = checkAndFetchQuota(parameters, param, auditLogPair); boolean validCluster = true; boolean validStorageDomain = true; if (validQuotaId) { if (param instanceof org.ovirt.engine.core.bll.quota.QuotaClusterConsumptionParameter) { validCluster = checkClusterMatchQuota(parameters, param); } if (param instanceof org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter) { validStorageDomain = checkStoragePoolMatchQuota(parameters, param); } } if (((!validQuotaId) || (!validCluster)) || (!validStorageDomain)) { if (hardEnforcement) { return false; } else { parameters.getValidationMessages().clear(); if ((org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType())) { auditLogPair.setFirst(null); } } } } parameters.getParameters().removeAll(corruptedParameters); corruptedParameters.clear(); return true; }
private boolean checkStoragePoolMatchQuota(org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters, org.ovirt.engine.core.bll.quota.<START_MOD>QuotaStorageConsumptionParameter<END_MOD> param) { org.ovirt.engine.core.common.businessentities.Quota quota = param.getQuota(); <START_MOD>if ((param.getStorageDomainId()) == null) { parameters.getValidationMessages().add(EngineMessage.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID.toString()); log.error( storage parameters from command '{}' are missing storage domain id parameters.getAuditLogable().getClass().getName()); return false; } boolean storageDomainInQuota = false; if ((quota.getGlobalQuotaStorage()) != null) { storageDomainInQuota = true; } else { for (<END_MOD>org.ovirt.engine.core.<START_MOD>common.businessentities.QuotaStorage quotaStorage : quota.getQuotaStorages()) { if (quotaStorage.getStorageId().equals<END_MOD>(param.getStorageDomainId())) { storageDomainInQuota = true; break; } } } if (!storageDomainInQuota) { parameters.getValidationMessages().add(EngineMessage.ACTION_TYPE_FAILED_NO_QUOTA_SET_FOR_DOMAIN.toString()); log.error( storage parameters from command '{}'. Storage domain does not match quota parameters.getAuditLogable().getClass().getName()); return false; } return true; }	private boolean checkStoragePoolMatchQuota(org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters, org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter param) { org.ovirt.engine.core.common.businessentities.Quota quota = param.getQuota(); org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter paramStorage = ((org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter) (param)); if ((paramStorage.getStorageDomainId()) == null) { parameters.getValidationMessages().add(EngineMessage.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID.toString()); log.error("Quota storage parameters from command '{}' are missing storage domain id", parameters.getAuditLogable().getClass().getName()); return false; } boolean storageDomainInQuota = false; if ((quota.getGlobalQuotaStorage()) != null) { storageDomainInQuota = true; } else { for (org.ovirt.engine.core.common.businessentities.QuotaStorage quotaStorage : quota.getQuotaStorages()) { if (quotaStorage.getStorageId().equals(paramStorage.getStorageDomainId())) { storageDomainInQuota = true; break; } } } if (!storageDomainInQuota) { parameters.getValidationMessages().add(EngineMessage.ACTION_TYPE_FAILED_NO_QUOTA_SET_FOR_DOMAIN.toString()); log.error("Quota storage parameters from command '{}'. Storage domain does not match quota", parameters.getAuditLogable().getClass().getName()); return false; } return true; }
@java.lang.Override protected boolean validate() { if (((getParameters()) == null) || ((getParameters().getQuotaId()) == null)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } org.ovirt.engine.core.common.businessentities.Quota quota = getQuota(); if (quota == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } if (!(<START_MOD>validateQuotaNotDefault(quota.getId()))) { return false; } if ((!(<END_MOD>QuotaEnforcementTypeEnum.DISABLED.equals(quota.getQuotaEnforcementType()))) && (getQuotaDao().isQuotaInUse(quota))) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_IN_USE_BY_VM_OR_DISK); return false; } return true; }	@java.lang.Override protected boolean validate() { if (((getParameters()) == null) || ((getParameters().getId()) == null)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } org.ovirt.engine.core.common.businessentities.Quota quota = getQuota(); if (quota == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } if (quota.isDefault()) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_DEFAULT_CANNOT_BE_CHANGED); return false; } if ((!(QuotaEnforcementTypeEnum.DISABLED.equals(quota.getQuotaEnforcementType()))) && (getQuotaDao().isQuotaInUse(quota))) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_IN_USE_BY_VM_OR_DISK); return false; } return true; }
private org.ovirt.engine.core.common.businessentities.Quota fetchQuotaFromCache(org.ovirt.engine.core.compat.Guid quotaId, org.ovirt.engine.core.compat.Guid storagePoolId) throws org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.Quota> quotaMap = storagePoolQuotaMap.get(storagePoolId); <START_MOD>org.ovirt.engine.core.common.businessentities.Quota <END_MOD>quota = quotaMap.get(quotaId); if (quota == null) { quota = getQuotaDao().getById(quotaId); if (quota != null) { if (storagePoolId.equals(quota.getStoragePoolId())) { quotaMap.put(quotaId, quota); } else { throw new org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException(java.lang.String.format( %s does not match storage pool %s quotaId.toString(), storagePoolId.toString())); } } } return quota; }	private org.ovirt.engine.core.common.businessentities.Quota fetchQuotaFromCache(org.ovirt.engine.core.compat.Guid quotaId, org.ovirt.engine.core.compat.Guid storagePoolId) throws org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException { org.ovirt.engine.core.common.businessentities.Quota quota; java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.Quota> quotaMap = storagePoolQuotaMap.get(storagePoolId); quota = quotaMap.get(quotaId); if (quota == null) { quota = getQuotaDao().getById(quotaId); if (quota != null) { if (storagePoolId.equals(quota.getStoragePoolId())) { quotaMap.put(quotaId, quota); } else { throw new org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException(java.lang.String.format("Quota %s does not match storage pool %s", quotaId.toString(), storagePoolId.toString())); } } } return quota; }
@org.junit.Test public void testFailToUpdateDefaultQuota() { quota.setId(defaultQuotaId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_QUOTA_CANNOT_CHANGE_DEFAULT); }	@org.junit.Test public void testFailToUpdateDefaultQuota() { quota.setDefault(true); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_QUOTA_DEFAULT_CANNOT_BE_CHANGED); }
@org.junit.Before public void setUp() { setUpQuota(); params = new org.ovirt.engine.core.common.action.QuotaCRUDParameters(quota); command = spy(new org.ovirt.engine.core.bll.UpdateQuotaCommand(params, null)); doReturn(quotaDao).when(command).getQuotaDao(); doNothing().when(command).removeQuotaFromCache(); doNothing().when(command).afterUpdate(); <START_MOD>when(quotaDao.isQuotaDefault(quotaId)).thenReturn(false); when(quotaDao.isQuotaDefault(defaultQuotaId)).thenReturn(true); when(quotaDao.getById(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(quota); <END_MOD>}	@org.junit.Before public void setUp() { quota = setUpQuota(org.ovirt.engine.core.compat.Guid.newGuid()); when(quotaDao.getById(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(quota); params = new org.ovirt.engine.core.common.action.QuotaCRUDParameters(setUpQuota(quota.getId())); command = spy(new org.ovirt.engine.core.bll.UpdateQuotaCommand(params, null)); doReturn(quotaDao).when(command).getQuotaDao(); doNothing().when(command).removeQuotaFromCache(); doNothing().when(command).afterUpdate(); }
private void setUpQuota() { quota = new org.ovirt.engine.core.common.businessentities.Quota(); quota.setId(<START_MOD>quotaId<END_MOD>); int numQutoaClusters = org.ovirt.engine.core.utils.RandomUtils.instance().nextInt(10); java.util.List<org.ovirt.engine.core.common.businessentities.QuotaCluster> quotaClusters = new java.util.ArrayList<>(numQutoaClusters); for (int i = 0; i < numQutoaClusters; ++i) { quotaClusters.add(new org.ovirt.engine.core.common.businessentities.QuotaCluster()); } quota.setQuotaClusters(quotaClusters); int numQutoaStorages = org.ovirt.engine.core.utils.RandomUtils.instance().nextInt(10); java.util.List<org.ovirt.engine.core.common.businessentities.QuotaStorage> quotaStorages = new java.util.ArrayList<>(numQutoaStorages); for (int i = 0; i < numQutoaClusters; ++i) { quotaStorages.add(new org.ovirt.engine.core.common.businessentities.QuotaStorage()); } quota.setQuotaStorages(quotaStorages); }	private org.ovirt.engine.core.common.businessentities.Quota setUpQuota(org.ovirt.engine.core.compat.Guid guid) { org.ovirt.engine.core.common.businessentities.Quota quota = new org.ovirt.engine.core.common.businessentities.Quota(); quota.setId(guid); int numQutoaClusters = org.ovirt.engine.core.utils.RandomUtils.instance().nextInt(10); java.util.List<org.ovirt.engine.core.common.businessentities.QuotaCluster> quotaClusters = new java.util.ArrayList<>(numQutoaClusters); for (int i = 0; i < numQutoaClusters; ++i) { quotaClusters.add(new org.ovirt.engine.core.common.businessentities.QuotaCluster()); } quota.setQuotaClusters(quotaClusters); int numQutoaStorages = org.ovirt.engine.core.utils.RandomUtils.instance().nextInt(10); java.util.List<org.ovirt.engine.core.common.businessentities.QuotaStorage> quotaStorages = new java.util.ArrayList<>(numQutoaStorages); for (int i = 0; i < numQutoaClusters; ++i) { quotaStorages.add(new org.ovirt.engine.core.common.businessentities.QuotaStorage()); } quota.setQuotaStorages(quotaStorages); return quota; }
private boolean checkClusterMatchQuota(org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters, org.ovirt.engine.core.bll.quota.<START_MOD>QuotaClusterConsumptionParameter<END_MOD> param) { org.ovirt.engine.core.common.businessentities.Quota quota = param.getQuota(); <START_MOD>if ((param.getClusterId()) == null) { parameters.getValidationMessages().add(EngineMessage.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID.toString()); log.error( Vds parameters from command '{}' are missing vds group id parameters.getAuditLogable().getClass().getName()); return false; } boolean clusterInQuota = false; if ((quota.getGlobalQuotaCluster()) != null) { clusterInQuota = true; } else { for (<END_MOD>org.ovirt.engine.core.<START_MOD>common.businessentities.QuotaCluster cluster : quota.getQuotaClusters()) { if (cluster.getClusterId().equals<END_MOD>(param.getClusterId())) { clusterInQuota = true; break; } } } if (!clusterInQuota) { parameters.getValidationMessages().add(EngineMessage.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID.toString()); log.error( Vds parameters from command '{}'. Vds group does not match quota parameters.getAuditLogable().getClass().getName()); return false; } return true; }	private boolean checkClusterMatchQuota(org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters, org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter param) { org.ovirt.engine.core.common.businessentities.Quota quota = param.getQuota(); org.ovirt.engine.core.bll.quota.QuotaClusterConsumptionParameter paramVds = ((org.ovirt.engine.core.bll.quota.QuotaClusterConsumptionParameter) (param)); if ((paramVds.getClusterId()) == null) { parameters.getValidationMessages().add(EngineMessage.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID.toString()); log.error("Quota Vds parameters from command '{}' are missing vds group id", parameters.getAuditLogable().getClass().getName()); return false; } boolean clusterInQuota = false; if ((quota.getGlobalQuotaCluster()) != null) { clusterInQuota = true; } else { for (org.ovirt.engine.core.common.businessentities.QuotaCluster cluster : quota.getQuotaClusters()) { if (cluster.getClusterId().equals(paramVds.getClusterId())) { clusterInQuota = true; break; } } } if (!clusterInQuota) { parameters.getValidationMessages().add(EngineMessage.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID.toString()); log.error("Quota Vds parameters from command '{}'. Vds group does not match quota", parameters.getAuditLogable().getClass().getName()); return false; } return true; }
@java.lang.Override protected boolean validate() { if (!(checkQuotaValidationCommon(getParameters().getQuota()))) { return false; } if ((getQuotaDao().getById(getParameters().getQuota().getId())) == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } return <START_MOD>validateQuotaNotDefault(getParameters().getQuota().getId())<END_MOD>; }	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if ((getQuota()) == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } if (getQuota().isDefault()) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_DEFAULT_CANNOT_BE_CHANGED); return false; } return true; }
public void setAuditLogMessage(org.ovirt.engine.core.common.AuditLogType auditLogType) { auditLogMessage = auditLogType; }	public void setAuditLogType(org.ovirt.engine.core.common.AuditLogType auditLogType) { this.auditLogType = auditLogType; }
@java.lang.SuppressWarnings("unchecked") org.ovirt.engine.core.bll.ValidationResult validateNotRemovingUsedNetworkByVms() { java.util.Collection<java.lang.String> removedNetworks = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment removedAttachment : removedNetworkAttachments) { removedNetworks.add(existingNetworkRelatedToAttachment(removedAttachment).getName()); } final java.util.List<java.lang.String> <START_MOD>vmNames<END_MOD> = getVmInterfaceManager().findActiveVmsUsingNetworks(host.getId(), removedNetworks)<START_MOD>; if (vmNames.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { final int MAX_NUMBER_OF_PRINTED_ITEMS = 5; final java.lang.String SEPARATOR = ","<END_MOD>; final java.util.List<java.lang.String> <START_MOD>sortedRemovedNetworks<END_MOD> = new java.util.ArrayList<>(removedNetworks); <START_MOD>java.util.Collections.sort(sortedRemovedNetworks); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS; return new <END_MOD>org.ovirt.engine.core.bll.<START_MOD>ValidationResult(engineMessage, java.util.stream.Stream.concat(org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(org.ovirt.engine.core.bll<END_MOD>.network.<START_MOD>host.HostSetupNetworksValidator.VAR_NETWORK_NAMES, sortedRemovedNetworks, SEPARATOR, MAX_NUMBER_OF_PRINTED_ITEMS).stream(), org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(<END_MOD>org.ovirt.engine.core.bll.network.<START_MOD>host.HostSetupNetworksValidator.VAR_VM_NAMES, vmNames, SEPARATOR, MAX_NUMBER_OF_PRINTED_ITEMS).stream()).collect(java.util.stream.Collectors.toList())<END_MOD>); }<START_MOD> }<END_MOD>	@java.lang.SuppressWarnings("unchecked") org.ovirt.engine.core.bll.ValidationResult validateNotRemovingUsedNetworkByVms(java.lang.String removedNetworkName) { final java.util.List<java.lang.String> removedNetworkNames = java.util.Collections.singletonList(removedNetworkName); final java.util.List<java.lang.String> vmsNames = findActiveVmsUsingNetwork.findNamesOfActiveVmsUsingNetworks(host.getId(), removedNetworkNames); if (vmsNames.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS; return new org.ovirt.engine.core.bll.ValidationResult(engineMessage, java.util.stream.Stream.concat(org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.VAR_NETWORK_NAME, removedNetworkNames, org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.SEPARATOR).stream(), org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.VAR_VM_NAMES, vmsNames, org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.SEPARATOR).stream()).collect(java.util.stream.Collectors.toList())); }
public static java.util.Collection<java.lang.String> replaceWith(java.lang.String propertyName, java.util.Collection<?> items, java.lang.String separator, int maxNumberOfPrintedItems) { org.apache.commons.lang.Validate.isTrue((maxNumberOfPrintedItems >= 1)); org.apache.commons.lang.Validate.isTrue(org.apache.commons.lang.StringUtils.isNotEmpty(separator)); int maxNumOfItems = java.lang.Math.min(maxNumberOfPrintedItems, items.size()); java.util.List<java.lang.String> printedItems = new java.util.ArrayList<>(maxNumOfItems);<START_MOD> java.lang.String itemPrefix = (separator == (org.ovirt.engine.core.utils.ReplacementUtils.DEFAULT_SEPARATOR)) ? "\t" :    <END_MOD> for (java.lang.Object item : items) { if ((--maxNumOfItems) < 0) { break; } printedItems.add(java.lang.String.format(<START_MOD>"%s%s", itemPrefix<END_MOD>, java.lang.String.valueOf(item))); } if ((items.size()) > maxNumberOfPrintedItems) { printedItems.add(<START_MOD>java.lang.String.format("%s...", itemPrefix)<END_MOD>); } java.util.ArrayList<java.lang.String> replacements = new java.util.ArrayList<>(); replacements.add(org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(propertyName, org.apache.commons.lang.StringUtils.join(printedItems, separator))); replacements.add(org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString((propertyName + (org.ovirt.engine.core.utils.ReplacementUtils.COUNTER_SUFFIX)), items.size())); return replacements; }	public static java.util.Collection<java.lang.String> replaceWith(java.lang.String propertyName, java.util.Collection<?> items, java.lang.String separator, int maxNumberOfPrintedItems) { org.apache.commons.lang.Validate.isTrue((maxNumberOfPrintedItems >= 1)); org.apache.commons.lang.Validate.isTrue(org.apache.commons.lang.StringUtils.isNotEmpty(separator)); int maxNumOfItems = java.lang.Math.min(maxNumberOfPrintedItems, items.size()); java.util.List<java.lang.String> printedItems = new java.util.ArrayList<>(maxNumOfItems); java.lang.String itemPrefix = (separator.equals(org.ovirt.engine.core.utils.ReplacementUtils.DEFAULT_SEPARATOR)) ? "\t" : " "; for (java.lang.Object item : items) { if ((--maxNumOfItems) < 0) { break; } printedItems.add(java.lang.String.format("%s%s", itemPrefix, java.lang.String.valueOf(item))); } if ((items.size()) > maxNumberOfPrintedItems) { printedItems.add(java.lang.String.format("%s...", itemPrefix)); } java.util.ArrayList<java.lang.String> replacements = new java.util.ArrayList<>(); replacements.add(org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(propertyName, org.apache.commons.lang.StringUtils.join(printedItems, separator))); replacements.add(org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString((propertyName + (org.ovirt.engine.core.utils.ReplacementUtils.COUNTER_SUFFIX)), items.size())); return replacements; }
default org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus poll() { return null; }	org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus poll();
private org.ovirt.engine.core.common.businessentities.StoragePool fetchStoragePool(org.ovirt.engine.core.compat.Guid storagePoolId) { return getStoragePoolDao().get(storagePoolId); }	private org.ovirt.engine.core.common.businessentities.StoragePool fetchStoragePool(org.ovirt.engine.core.compat.Guid storagePoolId) { return storagePoolDao.get(storagePoolId); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("managePrestartedVmsInAllVmPools") public void managePrestartedVmsInAllVmPools() { <START_MOD>getVmPoolDao().getAll<END_MOD>().stream().filter(( pool) -> (pool.getPrestartedVms()) > 0).forEach(this::managePrestartedVmsInPool); }	@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("managePrestartedVmsInAllVmPools") public void managePrestartedVmsInAllVmPools() { vmPoolDao.getAll().stream().filter(( pool) -> (pool.getPrestartedVms()) > 0).forEach(this::managePrestartedVmsInPool); }
private void prestartVms(org.ovirt.engine.core.common.businessentities.VmPool vmPool, int numOfVmsToPrestart) { java.util.<START_MOD>concurrent.atomic.AtomicInteger<END_MOD> failedAttempts = <START_MOD>new java.util.concurrent.atomic.AtomicInteger(<END_MOD>0<START_MOD>); java.util.concurrent.atomic.AtomicInteger<END_MOD> prestartedVmsCounter = <START_MOD>new java.util.concurrent.atomic.AtomicInteger(<END_MOD>0<START_MOD>);<END_MOD> int maxFailedAttempts = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VmPoolMonitorMaxAttempts); java.util.Map<java.lang.String, java.util.Set<org.ovirt.engine.core.compat.Guid>> <START_MOD>failureReasons<END_MOD> = new java.util.HashMap<>(); <START_MOD>java.util.Iterator<org.ovirt.engine.core.compat.Guid> iterator = vmPoolHandler.selectNonPrestartedVms(vmPool.getVmPoolId(), ( vmId, messages) -> collectVmPrestartFailureReasons(vmId, failureReasons, messages)).iterator(); while ((((failedAttempts.intValue()) < maxFailedAttempts) && ((prestartedVmsCounter.intValue()) < numOfVmsToPrestart)) && (iterator.hasNext())) { org.ovirt.engine.core.compat.Guid vmId = iterator.next(); <END_MOD>if (<START_MOD>prestartVm(vmId, (!(vmPool.isStateful())), vmPool.getName())) { prestartedVmsCounter.incrementAndGet(); failedAttempts.set(<END_MOD>0)<START_MOD>; } else<END_MOD> { <START_MOD>failedAttempts.incrementAndGet(); } } logResultOfPrestartVms(prestartedVmsCounter.intValue(), numOfVmsToPrestart, vmPool.getVmPoolId(), failureReasons); if ((prestartedVmsCounter.intValue()) == 0) { org.ovirt.engine.core.bll.VmPoolMonitor.log.info( VMs available <END_MOD>for <START_MOD>prestarting<END_MOD> } }	private void prestartVms(org.ovirt.engine.core.common.businessentities.VmPool vmPool, int numOfVmsToPrestart) { int failedAttempts = 0; int prestartedVms = 0; int maxFailedAttempts = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VmPoolMonitorMaxAttempts); java.util.Map<java.lang.String, java.util.Set<org.ovirt.engine.core.compat.Guid>> failureReasons = new java.util.HashMap<>(); java.util.Iterator<org.ovirt.engine.core.compat.Guid> iterator = vmPoolHandler.selectNonPrestartedVms(vmPool.getVmPoolId(), ( vmId, messages) -> collectVmPrestartFailureReasons(vmId, failureReasons, messages)).iterator(); while (((failedAttempts < maxFailedAttempts) && (prestartedVms < numOfVmsToPrestart)) && (iterator.hasNext())) { org.ovirt.engine.core.compat.Guid vmId = iterator.next(); if (prestartVm(vmId, (!(vmPool.isStateful())), vmPool.getName())) { prestartedVms++; failedAttempts = 0; } else { failedAttempts++; } } logResultOfPrestartVms(prestartedVms, numOfVmsToPrestart, vmPool.getVmPoolId(), failureReasons); if (prestartedVms == 0) { org.ovirt.engine.core.bll.VmPoolMonitor.log.info("No VMs available for prestarting"); } }
private<START_MOD> int getNumOfPrestartedVmsInPool(org.ovirt.engine.core.common.businessentities.VmPool pool) {<END_MOD> java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>VM<END_MOD>> <START_MOD>vmsInPool = getVmDao<END_MOD>()<START_MOD>.getAllForVmPool(pool.getVmPoolId());<END_MOD> return <START_MOD>vmsInPool == null ?   : vmsInPool<END_MOD>.<START_MOD>stream().filter(( vm) -> (vm.isStartingOrUp()) && (vmPoolHandler.isPrestartedVmFree(vm.getId(), pool.isStateful(), null))).collect(java.util.stream.Collectors.counting()).intValue<END_MOD>(); }	private int getNumOfPrestartedVmsInPool(org.ovirt.engine.core.common.businessentities.VmPool pool) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsInPool = vmDao.getAllForVmPool(pool.getVmPoolId()); return vmsInPool == null ? 0 : vmsInPool.stream().filter(( vm) -> (vm.isStartingOrUp()) && (vmPoolHandler.isPrestartedVmFree(vm.getId(), pool.isStateful(), null))).collect(java.util.stream.Collectors.counting()).intValue(); }
private boolean vmIsStartedByRunOnce(org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = getVmDynamicDao().get(vmId); return (vmDynamic != null) && (vmDynamic.isRunOnce()); }	private boolean vmIsStartedByRunOnce(org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = vmDynamicDao.get(vmId); return (vmDynamic != null) && (vmDynamic.isRunOnce()); }
private boolean prestartVm(org.ovirt.engine.core.compat.Guid vmGuid, boolean runAsStateless, java.lang.String poolName) { org.ovirt.engine.core.common.businessentities.VmStatic vmToPrestart = <START_MOD>getVmStaticDao()<END_MOD>.get(vmGuid); return runVmFromPool(vmToPrestart, runAsStateless, poolName); }	private boolean prestartVm(org.ovirt.engine.core.compat.Guid vmGuid, boolean runAsStateless, java.lang.String poolName) { org.ovirt.engine.core.common.businessentities.VmStatic vmToPrestart = vmStaticDao.get(vmGuid); return runVmFromPool(vmToPrestart, runAsStateless, poolName); }
private boolean vmAssignedToUser(org.ovirt.engine.core.compat.Guid vmId, java.util.List<java.lang.String> messages) { if ((getDbUserDao().getAllForVm(vmId).size()) > 0) { messages.add(EngineMessage.VM_POOL_CANNOT_ADD_VM_WITH_USERS_ATTACHED_TO_POOL.toString()); return true; } return false; }	private boolean vmAssignedToUser(org.ovirt.engine.core.compat.Guid vmId, java.util.List<java.lang.String> messages) { if ((dbUserDao.getAllForVm(vmId).size()) > 0) { messages.add(EngineMessage.VM_POOL_CANNOT_ADD_VM_WITH_USERS_ATTACHED_TO_POOL.toString()); return true; } return false; }
private boolean canRemoveVmPool(org.ovirt.engine.core.compat.Guid vmPoolId) { return (<START_MOD>org.ovirt.engine.core.bll.RemoveVmPoolCommand.getVmPoolDao().getVmPoolsMapByVmPoolId<END_MOD>(vmPoolId).size()) == 0; }	private boolean canRemoveVmPool(org.ovirt.engine.core.compat.Guid vmPoolId) { return org.ovirt.engine.core.bll.RemoveVmPoolCommand.getVmPoolDao().getVmPoolsMapByVmPoolId(vmPoolId).isEmpty(); }
@java.lang.Override protected void init() { super.init(); if (Guid.Empty.equals(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters().getVmId())) { boolean vmPrestarted = true; org.ovirt.engine.core.compat.Guid vmToAttach = vmPoolHandler.selectPrestartedVm(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPoolId(), org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPool().isStateful(), ( vmId, errors) -> getReturnValue().getValidationMessages().addAll(errors)); if (Guid.Empty.equals(vmToAttach)) { vmPrestarted = false; vmToAttach = vmPoolHandler.selectNonPrestartedVm(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPoolId(), ( vmId, errors) -> getReturnValue().getValidationMessages().addAll(errors)); } org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters().setVmId(vmToAttach); org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters().setVmPrestarted(vmPrestarted); } setVmId(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters().getVmId()); }	@java.lang.Override protected void init() { super.init(); if ((Guid.Empty.equals(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters().getVmId())) && ((org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPool()) != null)) { boolean vmPrestarted = true; org.ovirt.engine.core.compat.Guid vmToAttach = vmPoolHandler.selectPrestartedVm(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPoolId(), org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPool().isStateful(), ( vmId, errors) -> getReturnValue().getValidationMessages().addAll(errors)); if (Guid.Empty.equals(vmToAttach)) { vmPrestarted = false; vmToAttach = vmPoolHandler.selectNonPrestartedVm(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPoolId(), ( vmId, errors) -> getReturnValue().getValidationMessages().addAll(errors)); } org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters().setVmId(vmToAttach); org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.VM, vmToAttach)); org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters().setVmPrestarted(vmPrestarted); } setVmId(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters().getVmId()); }
private boolean canRunPoolVm(org.ovirt.engine.core.compat.Guid vmId, java.util.List<java.lang.String> messages) { org.ovirt.engine.core.common.businessentities.VM vm = getVmDao().get(vmId); if (vm == null) { messages.add(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND.name()); return false; } org.ovirt.engine.core.bll.VmHandler.updateNetworkInterfacesFromDb(vm); org.ovirt.engine.core.common.action.RunVmParams runVmParams = new org.ovirt.engine.core.common.action.RunVmParams(vmId); return new org.ovirt.engine.core.bll.validator.RunVmValidator(vm, runVmParams, false, findActiveISODomain(vm.getStoragePoolId())).canRunVm(messages, fetchStoragePool(vm.getStoragePoolId()), java.util.Collections.<org.ovirt.engine.core.compat.Guid>emptyList(), null, null, getClusterDao().get(vm.getClusterId())); }	private boolean canRunPoolVm(org.ovirt.engine.core.compat.Guid vmId, java.util.List<java.lang.String> messages) { org.ovirt.engine.core.common.businessentities.VM vm = vmDao.get(vmId); if (vm == null) { messages.add(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND.name()); return false; } org.ovirt.engine.core.bll.VmHandler.updateNetworkInterfacesFromDb(vm); org.ovirt.engine.core.common.action.RunVmParams runVmParams = new org.ovirt.engine.core.common.action.RunVmParams(vmId); return new org.ovirt.engine.core.bll.validator.RunVmValidator(vm, runVmParams, false, findActiveISODomain(vm.getStoragePoolId())).canRunVm(messages, fetchStoragePool(vm.getStoragePoolId()), java.util.Collections.<org.ovirt.engine.core.compat.Guid>emptyList(), null, null, clusterDao.get(vm.getClusterId())); }
@java.lang.Override protected void executeCommand() { initPoolUser(); org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.VM, <START_MOD>getVmId())<END_MOD>); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = attachUserToVm(); if (!(vdcReturnValue.getSucceeded())) { log.info( to give user '{}' permission to Vm '{}' getAdUserId(), <START_MOD>getVmId()<END_MOD>); setActionReturnValue(vdcReturnValue); <START_MOD>vmPoolHandler.releaseVm(getVmId(), (!(isVmPrestarted()))<END_MOD>); return; } else { log.info( giving user '{}' permission to Vm '{}' getAdUserId(), <START_MOD>getVmId());<END_MOD> } if (!<START_MOD>(isVmPrestarted())) { vdcReturnValue = runVm(); setSucceeded(vdcReturnValue.getSucceeded()); <END_MOD>org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.<START_MOD>getReturnValue().getVdsmTaskIdList().addAll(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getReturnValue().getInternalVdsmTaskIdList()); } else { org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.<END_MOD>setSucceeded(<START_MOD>true); }<END_MOD> setActionReturnValue(<START_MOD>getVmId()); }<END_MOD>	@java.lang.Override protected void executeCommand() { initPoolUser(); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = attachUserToVm(); if (!(vdcReturnValue.getSucceeded())) { log.info("Failed to give user '{}' permission to Vm '{}'", getAdUserId(), getVmId()); setActionReturnValue(vdcReturnValue); return; } else { log.info("Succeeded giving user '{}' permission to Vm '{}'", getAdUserId(), getVmId()); } if (!(isVmPrestarted())) { vdcReturnValue = runVm(); setSucceeded(vdcReturnValue.getSucceeded()); org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getReturnValue().getVdsmTaskIdList().addAll(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getReturnValue().getInternalVdsmTaskIdList()); } else { org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.setSucceeded(true); } setActionReturnValue(getVmId()); }
private java.util.stream.Stream<org.ovirt.engine.core.compat.Guid> selectVms(org.ovirt.engine.core.compat.Guid vmPoolId, org.ovirt.engine.core.common.businessentities.VMStatus vmStatus, java.util.function.Predicate<org.ovirt.engine.core.compat.Guid> vmIdFilter, boolean leaveLocked) { java.util.List<org.ovirt.engine.core.common.businessentities.VmPoolMap> vmPoolMaps = getVmPoolDao().getVmMapsInVmPoolByVmPoolIdAndStatus(vmPoolId, vmStatus); if (vmPoolMaps == null) { return java.util.stream.Stream.empty(); } return vmPoolMaps.stream().map(VmPoolMap::getVmId).filter(vmIdFilter).map(( vmId) -> acquireVm(vmId, leaveLocked)).filter(( vmId) -> !(Guid.Empty.equals(vmId))); }	private java.util.stream.Stream<org.ovirt.engine.core.compat.Guid> selectVms(org.ovirt.engine.core.compat.Guid vmPoolId, org.ovirt.engine.core.common.businessentities.VMStatus vmStatus, java.util.function.Predicate<org.ovirt.engine.core.compat.Guid> vmIdFilter, boolean leaveLocked) { java.util.List<org.ovirt.engine.core.common.businessentities.VmPoolMap> vmPoolMaps = vmPoolDao.getVmMapsInVmPoolByVmPoolIdAndStatus(vmPoolId, vmStatus); if (vmPoolMaps == null) { return java.util.stream.Stream.empty(); } return vmPoolMaps.stream().map(VmPoolMap::getVmId).filter(vmIdFilter).map(( vmId) -> acquireVm(vmId, leaveLocked)).filter(( vmId) -> !(Guid.Empty.equals(vmId))); }
private org.ovirt.engine.core.common.action.VdcReturnValueBase runVm() { org.ovirt.engine.core.common.action.RunVmParams runVmParams = new org.ovirt.engine.core.common.action.RunVmParams(<START_MOD>getVmId()<END_MOD>); runVmParams.setSessionId(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters().getSessionId()); runVmParams.setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.VM, <START_MOD>getVmId()<END_MOD>)); runVmParams.setParentCommand(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getActionType()); runVmParams.setParentParameters(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters()); runVmParams.setEndProcedure(EndProcedure.COMMAND_MANAGED); runVmParams.setRunAsStateless((!(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPool().isStateful()))); org.ovirt.engine.core.bll.job.ExecutionContext runVmContext = createRunVmContext(); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = runInternalAction(VdcActionType.RunVm, runVmParams, org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.cloneContext().withExecutionContext(runVmContext).withLock(<START_MOD>vmPoolHandler.createLock(getVmId())<END_MOD>).withCompensationContext(null)); org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getTaskIdList().addAll(vdcReturnValue.getInternalVdsmTaskIdList()); return vdcReturnValue; }	private org.ovirt.engine.core.common.action.VdcReturnValueBase runVm() { org.ovirt.engine.core.common.action.RunVmParams runVmParams = new org.ovirt.engine.core.common.action.RunVmParams(getVmId()); runVmParams.setSessionId(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters().getSessionId()); runVmParams.setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.VM, getVmId())); runVmParams.setParentCommand(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getActionType()); runVmParams.setParentParameters(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters()); runVmParams.setEndProcedure(EndProcedure.COMMAND_MANAGED); runVmParams.setRunAsStateless((!(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPool().isStateful()))); org.ovirt.engine.core.bll.job.ExecutionContext runVmContext = createRunVmContext(); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = runInternalAction(VdcActionType.RunVm, runVmParams, org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.cloneContext().withExecutionContext(runVmContext).withCompensationContext(null)); org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getTaskIdList().addAll(vdcReturnValue.getInternalVdsmTaskIdList()); return vdcReturnValue; }
private boolean vmIsRunningStateless(org.ovirt.engine.core.compat.Guid vmId) { return getSnapshotDao().exists(vmId, Snapshot.SnapshotType.STATELESS); }	private boolean vmIsRunningStateless(org.ovirt.engine.core.compat.Guid vmId) { return snapshotDao.exists(vmId, Snapshot.SnapshotType.STATELESS); }
@java.lang.Override protected boolean validate() { boolean returnValue = true; if (Guid.Empty.equals(<START_MOD>getVmId<END_MOD>())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_NO_AVAILABLE_POOL_VMS); returnValue = false; } if (returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsForUser = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmDao().getAllForUser(getAdUserId()); int vmCount = 0; for (org.ovirt.engine.core.common.businessentities.VM vm : vmsForUser) { if (((vm.getVmPoolId()) != null) && (org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPoolId().equals(vm.getVmPoolId()))) { vmCount++; } } int limit = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPool().getMaxAssignedVmsPerUser(); if (vmCount >= limit) { addValidationMessage(EngineMessage.VM_POOL_CANNOT_ATTACH_TO_MORE_VMS_FROM_POOL); returnValue = false; } } if (!returnValue) { setActionMessageParameters(); <START_MOD>vmPoolHandler.releaseVm(getVmId(), (!(isVmPrestarted()))); <END_MOD>} return returnValue; }	@java.lang.Override protected boolean validate() { boolean returnValue = true; if ((org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPool()) == null) { addValidationMessage(EngineMessage.VM_POOL_NOT_FOUND); returnValue = false; } if (returnValue && (Guid.Empty.equals(getVmId()))) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_NO_AVAILABLE_POOL_VMS); returnValue = false; } if (returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsForUser = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmDao().getAllForUser(getAdUserId()); int vmCount = 0; for (org.ovirt.engine.core.common.businessentities.VM vm : vmsForUser) { if (((vm.getVmPoolId()) != null) && (org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPoolId().equals(vm.getVmPoolId()))) { vmCount++; } } int limit = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPool().getMaxAssignedVmsPerUser(); if (vmCount >= limit) { addValidationMessage(EngineMessage.VM_POOL_CANNOT_ATTACH_TO_MORE_VMS_FROM_POOL); returnValue = false; } } if (!returnValue) { setActionMessageParameters(); } return returnValue; }
@java.lang.Override public void handleRequest(io.undertow.server.HttpServerExchange exchange) throws java.lang.Exception { if (!(exchange.getRequestHeaders().getFirst("Authorization").equals((   + (org.ovirt.engine.sdk4.ServerTest.TOKEN))))) { exchange.setStatusCode(401); exchange.getResponseSender().send(""); } else { java.lang.Thread.sleep(delay); exchange.setStatusCode(code); exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/xml"); exchange.getResponseSender().send(body); <START_MOD>lastRequestQuery = exchange.getQueryString(); <END_MOD>} }	@java.lang.Override public void handleRequest(io.undertow.server.HttpServerExchange exchange) throws java.lang.Exception { lastRequestQuery = exchange.getQueryString(); if (!(exchange.getRequestHeaders().getFirst("Authorization").equals(("Bearer " + (org.ovirt.engine.sdk4.ServerTest.TOKEN))))) { exchange.setStatusCode(401); exchange.getResponseSender().send(""); } else { java.lang.Thread.sleep(delay); exchange.setStatusCode(code); exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/xml"); exchange.getResponseSender().send(body); } }
protected void setXmlResponse(java.lang.String path, final int code, final java.lang.String body, final int delay) { io.undertow.server.HttpHandler xmlResponseHandler = new io.undertow.server.HttpHandler() { @java.lang.Override public void handleRequest(io.undertow.server.HttpServerExchange exchange) throws java.lang.Exception { if (!(exchange.getRequestHeaders().getFirst("Authorization").equals((   + (org.ovirt.engine.sdk4.ServerTest.TOKEN))))) { exchange.setStatusCode(401); exchange.getResponseSender().send(""); } else { java.lang.Thread.sleep(delay); exchange.setStatusCode(code); exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/xml"); exchange.getResponseSender().send(body); <START_MOD>lastRequestQuery = exchange.getQueryString(); <END_MOD>} } }; testHandler().addPrefixPath((((testPrefix()) + "/api/") + path), xmlResponseHandler); }	protected void setXmlResponse(java.lang.String path, final int code, final java.lang.String body, final int delay) { io.undertow.server.HttpHandler xmlResponseHandler = new io.undertow.server.HttpHandler() { @java.lang.Override public void handleRequest(io.undertow.server.HttpServerExchange exchange) throws java.lang.Exception { lastRequestQuery = exchange.getQueryString(); if (!(exchange.getRequestHeaders().getFirst("Authorization").equals(("Bearer " + (org.ovirt.engine.sdk4.ServerTest.TOKEN))))) { exchange.setStatusCode(401); exchange.getResponseSender().send(""); } else { java.lang.Thread.sleep(delay); exchange.setStatusCode(code); exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/xml"); exchange.getResponseSender().send(body); } } }; testHandler().addPrefixPath((((testPrefix()) + "/api/") + path), xmlResponseHandler); }
private void generateAddHttpPost(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter parameter = method.parameters().filter(( x) -> (x.isIn()) && (x.isOut())).findFirst().orElse(null); org.ovirt.api.metamodel.concepts.Name methodName = method.getName(); org.ovirt.api.metamodel.concepts.Type parameterType = parameter.getType(); org.ovirt.api.metamodel.concepts.Name parameterName = parameter.getName(); java.lang.String arg = rubyNames.getMemberStyleName(parameterName); java.lang.String doc = method.getDoc(); if (doc == null) { doc = java.lang.String.format( a new   arg); } buffer.addComment(); buffer.addComment(doc); buffer.addComment(); buffer.<START_MOD>addYardTag("param",  <END_MOD> [%2$s] arg, yardDoc.getType(parameterType)); buffer.addComment(); buffer.<START_MOD>addYardTag("return", "[%1$s]", yardDoc.getType(parameterType)); buffer.<END_MOD>addComment(<START_MOD>); buffer.addLine( <END_MOD>%1$s(%2$s, opts = {}) rubyNames.getMemberStyleName(methodName), arg); generateConvertLiteral(parameterType, arg); buffer.addLine( = Request.new(:method => :POST, :path => @path) generateWriteRequestBody(parameter, arg); buffer.addLine( = @connection.send(request) buffer.addLine( response.code buffer.addLine( 201, 202 generateReturnResponseBody(parameter); buffer.addLine("else"); buffer.addLine("check_fault(response)"); buffer.addLine("end"); buffer.addLine("end"); buffer.addLine(); }	private void generateAddHttpPost(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter parameter = method.parameters().filter(( x) -> (x.isIn()) && (x.isOut())).findFirst().orElse(null); org.ovirt.api.metamodel.concepts.Name methodName = method.getName(); org.ovirt.api.metamodel.concepts.Type parameterType = parameter.getType(); org.ovirt.api.metamodel.concepts.Name parameterName = parameter.getName(); java.lang.String arg = rubyNames.getMemberStyleName(parameterName); java.lang.String doc = method.getDoc(); if (doc == null) { doc = java.lang.String.format("Adds a new `%1$s`.", arg); } buffer.addComment(); buffer.addComment(doc); buffer.addComment(); buffer.addYardParam(parameter); buffer.addComment(); buffer.addYardReturn(parameter); buffer.addComment(); buffer.addLine("def %1$s(%2$s, opts = {})", rubyNames.getMemberStyleName(methodName), arg); generateConvertLiteral(parameterType, arg); buffer.addLine("request = Request.new(:method => :POST, :path => @path)"); generateWriteRequestBody(parameter, arg); buffer.addLine("response = @connection.send(request)"); buffer.addLine("case response.code"); buffer.addLine("when 201, 202"); generateReturnResponseBody(parameter); buffer.addLine("else"); buffer.addLine("check_fault(response)"); buffer.addLine("end"); buffer.addLine("end"); buffer.addLine(); }
private void generateHttpGet(org.ovirt.api.metamodel.concepts.Method method) { java.util.List<org.ovirt.api.metamodel.concepts.Parameter> inParameters = method.parameters().filter(Parameter::isIn).sorted().collect(java.util.stream.Collectors.toList()); java.util.List<org.ovirt.api.metamodel.concepts.Parameter> outParameters = method.parameters().filter(Parameter::isOut).sorted().collect(java.util.stream.Collectors.toList()); org.ovirt.api.metamodel.concepts.Parameter mainParameter = outParameters.stream().findFirst().orElse(null); buffer.addComment(); java.lang.String doc = method.getDoc(); if (doc == null) { doc =   the representation of the object managed by this service. } buffer.addComment(doc); buffer.addComment(); buffer.<START_MOD>addYardTag("param",  <END_MOD> [Hash] Additional options. buffer.addComment(); if (!(inParameters.isEmpty())) { inParameters.forEach(( parameter) -> { generateParameterDocumentation(parameter); buffer.addComment(); }); } buffer.<START_MOD>addYardTag("return", "[%1$s]", yardDoc.getType(mainParameter.getType())); buffer.<END_MOD>addComment(<START_MOD>); org.ovirt.api.metamodel.concepts.Name methodName = method.getName(); buffer.addLine( <END_MOD>%1$s(opts = {}) rubyNames.getMemberStyleName(methodName)); buffer.addLine( = {} inParameters.forEach(this::generateUrlParameter); buffer.addLine( = Request.new(:method => :GET, :path => @path, :query => query) buffer.addLine( = @connection.send(request) buffer.addLine( response.code buffer.addLine( 200 generateReturnResponseBody(mainParameter); buffer.addLine("else"); buffer.addLine("check_fault(response)"); buffer.addLine("end"); buffer.addLine("end"); buffer.addLine(); }	private void generateHttpGet(org.ovirt.api.metamodel.concepts.Method method) { java.util.List<org.ovirt.api.metamodel.concepts.Parameter> inParameters = method.parameters().filter(Parameter::isIn).sorted().collect(java.util.stream.Collectors.toList()); java.util.List<org.ovirt.api.metamodel.concepts.Parameter> outParameters = method.parameters().filter(Parameter::isOut).sorted().collect(java.util.stream.Collectors.toList()); org.ovirt.api.metamodel.concepts.Parameter mainParameter = outParameters.stream().findFirst().orElse(null); buffer.addComment(); java.lang.String doc = method.getDoc(); if (doc == null) { doc = "Returns the representation of the object managed by this service."; } buffer.addComment(doc); buffer.addComment(); buffer.addYardTag("param", "opts [Hash] Additional options."); buffer.addComment(); inParameters.forEach(buffer::addYardOption); buffer.addYardReturn(mainParameter); buffer.addComment(); org.ovirt.api.metamodel.concepts.Name methodName = method.getName(); buffer.addLine("def %1$s(opts = {})", rubyNames.getMemberStyleName(methodName)); buffer.addLine("query = {}"); inParameters.forEach(this::generateUrlParameter); buffer.addLine("request = Request.new(:method => :GET, :path => @path, :query => query)"); buffer.addLine("response = @connection.send(request)"); buffer.addLine("case response.code"); buffer.addLine("when 200"); generateReturnResponseBody(mainParameter); buffer.addLine("else"); buffer.addLine("check_fault(response)"); buffer.addLine("end"); buffer.addLine("end"); buffer.addLine(); }
private void generateHttpDelete(org.ovirt.api.metamodel.concepts.Method method) { java.util.List<org.ovirt.api.metamodel.concepts.Parameter> inParameters = method.parameters().filter(Parameter::isIn).sorted().collect(java.util.stream.Collectors.toList()); org.ovirt.api.metamodel.concepts.Name name = method.getName(); java.lang.String doc = method.getDoc(); if (doc == null) { doc =   the object managed by this service. } buffer.addComment(); buffer.addComment(doc); buffer.addComment(); buffer.<START_MOD>addYardTag("param",  <END_MOD> [Hash] Additional options. buffer.addComment(); if (!(inParameters.isEmpty())) { inParameters.forEach(( parameter) -> { generateParameterDocumentation(parameter); buffer.addComment(); }); } buffer.addLine( %1$s(opts = {}) rubyNames.getMemberStyleName(name)); buffer.addLine( = {} inParameters.forEach(this::generateUrlParameter); buffer.addLine( = Request.new(:method => :DELETE, :path => @path, :query => query) buffer.addLine( = @connection.send(request) buffer.addLine( response.code == 200 buffer.addLine("check_fault(response)"); buffer.addLine("end"); buffer.addLine("end"); buffer.addLine(); }	private void generateHttpDelete(org.ovirt.api.metamodel.concepts.Method method) { java.util.List<org.ovirt.api.metamodel.concepts.Parameter> inParameters = method.parameters().filter(Parameter::isIn).sorted().collect(java.util.stream.Collectors.toList()); org.ovirt.api.metamodel.concepts.Name name = method.getName(); java.lang.String doc = method.getDoc(); if (doc == null) { doc = "Deletes the object managed by this service."; } buffer.addComment(); buffer.addComment(doc); buffer.addComment(); buffer.addYardTag("param", "opts [Hash] Additional options."); buffer.addComment(); inParameters.forEach(buffer::addYardOption); buffer.addLine("def %1$s(opts = {})", rubyNames.getMemberStyleName(name)); buffer.addLine("query = {}"); inParameters.forEach(this::generateUrlParameter); buffer.addLine("request = Request.new(:method => :DELETE, :path => @path, :query => query)"); buffer.addLine("response = @connection.send(request)"); buffer.addLine("unless response.code == 200"); buffer.addLine("check_fault(response)"); buffer.addLine("end"); buffer.addLine("end"); buffer.addLine(); }
private void assertSubjectEntityPresence(org.ovirt.engine.core.common.job.StepSubjectEntity stepSubjectEntity, java.util.List<org.ovirt.engine.core.common.job.StepSubjectEntity> entities, boolean shouldBePresent) { boolean isPresent = entities.stream().anyMatch(( p) -> (p.equals(stepSubjectEntity)) && (p.getStepEntityWeight().equals(stepSubjectEntity.getStepEntityWeight()))); if (shouldBePresent == isPresent) { return; } fail(java.lang.String.format(((("StepSubjectEntity was " + (shouldBePresent ? "not " : "")) + "found in the entities list ") + "although wasn't expected to"))); }	private void assertSubjectEntityPresence(org.ovirt.engine.core.common.job.StepSubjectEntity stepSubjectEntity, java.util.List<org.ovirt.engine.core.common.job.StepSubjectEntity> entities, boolean shouldBePresent) { boolean isPresent = entities.stream().anyMatch(( p) -> (p.equals(stepSubjectEntity)) && (p.getStepEntityWeight().equals(stepSubjectEntity.getStepEntityWeight()))); assertEquals(java.lang.String.format((("StepSubjectEntity was " + (shouldBePresent ? "not " : "")) + "found in the entities list although wasn't expected to")), shouldBePresent, isPresent); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(correlationId, description, endTime, externalSystem, id, jobId, <START_MOD>progress, <END_MOD>parentStepId, startTime, status, stepNumber, stepType, steps, external); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(correlationId, description, endTime, externalSystem, id, jobId, parentStepId, startTime, status, stepNumber, stepType, steps, external); }
@org.junit.Test public void saveStepSubjectEntity() { org.ovirt.engine.core.common.VdcObjectType type = org.ovirt.engine.core.common.VdcObjectType.VmPool; org.ovirt.engine.core.compat.Guid entityId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.job.StepSubjectEntity stepSubjectEntity = new org.ovirt.engine.core.common.job.StepSubjectEntity(FixturesTool.STEP_ID, type, entityId, 50); dao.save(stepSubjectEntity); java.util.List<org.ovirt.engine.core.common.job.StepSubjectEntity> entities = dao.getStepSubjectEntitiesByStepId(FixturesTool.STEP_ID); assertEquals("Step subject entities aren't on expected size", 2, entities.size()); assertSubjectEntityPresence(stepSubjectEntity, entities, true); }	@org.junit.Test public void saveStepSubjectEntities() { org.ovirt.engine.core.common.VdcObjectType type = org.ovirt.engine.core.common.VdcObjectType.VmPool; org.ovirt.engine.core.compat.Guid entityId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.job.StepSubjectEntity stepSubjectEntity = new org.ovirt.engine.core.common.job.StepSubjectEntity(FixturesTool.STEP_ID, type, entityId, 50); org.ovirt.engine.core.compat.Guid entityId2 = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.job.StepSubjectEntity stepSubjectEntity2 = new org.ovirt.engine.core.common.job.StepSubjectEntity(FixturesTool.STEP_ID, type, entityId2, 50); dao.saveAll(java.util.Arrays.asList(stepSubjectEntity, stepSubjectEntity2)); java.util.List<org.ovirt.engine.core.common.job.StepSubjectEntity> entities = dao.getStepSubjectEntitiesByStepId(FixturesTool.STEP_ID); assertEquals("StepSubjectEntity list not in the expected size", 3, entities.size()); assertSubjectEntityPresence(stepSubjectEntity, entities, true); assertSubjectEntityPresence(stepSubjectEntity2, entities, true); }
@org.junit.Test public void getStepSubjectEntityByStepId() { java.util.List<org.ovirt.engine.core.common.job.StepSubjectEntity> entities = dao.getStepSubjectEntitiesByStepId(FixturesTool.STEP_ID); assertEquals("Step subject entities aren't on expected size", 1, entities.size()); org.ovirt.engine.core.common.job.StepSubjectEntity stepSubjectEntity = new org.ovirt.engine.core.common.job.StepSubjectEntity(FixturesTool.STEP_ID, org.ovirt.engine.core.common.VdcObjectType.Storage, FixturesTool.IMAGE_GROUP_ID, 50); assertSubjectEntityPresence(stepSubjectEntity, entities, true); stepSubjectEntity.setStepEntityWeight(30); assertSubjectEntityPresence(stepSubjectEntity, entities, false); }	@org.junit.Test public void getStepSubjectEntityByStepId() { java.util.List<org.ovirt.engine.core.common.job.StepSubjectEntity> entities = dao.getStepSubjectEntitiesByStepId(FixturesTool.STEP_ID); assertEquals("StepSubjectEntity list not in the expected size", 1, entities.size()); org.ovirt.engine.core.common.job.StepSubjectEntity stepSubjectEntity = new org.ovirt.engine.core.common.job.StepSubjectEntity(FixturesTool.STEP_ID, org.ovirt.engine.core.common.VdcObjectType.Storage, FixturesTool.IMAGE_GROUP_ID, 50); assertSubjectEntityPresence(stepSubjectEntity, entities, true); }
@java.lang.Override public void save(org.ovirt.engine.core.common.job.StepSubjectEntity stepSubjectEntity) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("step_id", stepSubjectEntity.getStepId()).addValue("entity_id", stepSubjectEntity.getEntityId()).addValue("step_entity_weight", stepSubjectEntity.getStepEntityWeight()).addValue("entity_type", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(stepSubjectEntity.getEntityType())); getCallsHandler().executeModification("InsertStepSubjectEntity", parameterSource); }	public void saveAll(java.util.Collection<org.ovirt.engine.core.common.job.StepSubjectEntity> entities) { if (entities.isEmpty()) { return; } getCallsHandler().executeStoredProcAsBatch("InsertStepSubjectEntity", entities, getMapper()); }
@java.lang.Override public java.lang.String toString() { return (((("StepSubjectEntity{" + "stepEntityWeight=") + (stepEntityWeight)) + ", stepId=") + (stepId)) + '}'; }	@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendProperties(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendProperties(tsb).append("stepEntityWeight", stepEntityWeight).append("stepId", stepId); }
protected final void execute() { setCommandStatus(CommandStatus.ACTIVE); getReturnValue().setValid(true); getReturnValue().setIsSyncronious(true); if (shouldPersistCommand()) { persistCommandIfNeeded(); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.persistCommandAssociatedEntities(getCommandId(), getSubjectEntities()); } if ((!(hasTaskHandlers())) || ((getExecutionIndex()) == 0)) { org.ovirt.engine.core.bll.job.ExecutionHandler.addStep(getExecutionContext(), StepEnum.EXECUTING, null); } <START_MOD>persistCommandStep(); try { handleTransactivity(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(scope, this); } catch (javax.ejb.TransactionRolledbackLocalException e) { log.info( was aborted in '{}' this.getClass().getName()); compensate(); } finally { try { if (getCommandShouldBeLogged()) { logCommand(); } if (getSucceeded()) { if (getCommandShouldBeLogged()) { logRenamedEntity(); } startPollingAsyncTasks(); } } finally { if ((noAsyncOperations()) && (!(org.ovirt.engine.core.bll<END_MOD>.job.<START_MOD>ExecutionHandler.checkIfJobHasTasks(getExecutionContext())))) {<END_MOD> org.ovirt.engine.core.bll.job.ExecutionHandler.<START_MOD>endJob<END_MOD>(getExecutionContext(), getSucceeded())<START_MOD>; } } } }<END_MOD>	protected final void execute() { setCommandStatus(CommandStatus.ACTIVE); getReturnValue().setValid(true); getReturnValue().setIsSyncronious(true); if (shouldPersistCommand()) { persistCommandIfNeeded(); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.persistCommandAssociatedEntities(getCommandId(), getSubjectEntities()); } if ((!(hasTaskHandlers())) || ((getExecutionIndex()) == 0)) { executionHandler.addStep(getExecutionContext(), StepEnum.EXECUTING, null); } handleCommandStepAndEntities(); try { handleTransactivity(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(scope, this); } catch (javax.ejb.TransactionRolledbackLocalException e) { log.info("Transaction was aborted in '{}'", this.getClass().getName()); compensate(); } finally { try { if (getCommandShouldBeLogged()) { logCommand(); } if (getSucceeded()) { if (getCommandShouldBeLogged()) { logRenamedEntity(); } startPollingAsyncTasks(); } } finally { if ((noAsyncOperations()) && (!(executionHandler.checkIfJobHasTasks(getExecutionContext())))) { executionHandler.endJob(getExecutionContext(), getSucceeded()); } } } }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.job.Step)) { return false; } org.ovirt.engine.core.common.job.Step other = ((org.ovirt.engine.core.common.job.Step) (obj)); return ((((((((((((<START_MOD>(<END_MOD>java.util.Objects.equals(correlationId, other.correlationId)) && (java.util.Objects.equals(description, other.description))) && (java.util.Objects.equals(endTime, other.endTime))) && (java.util.Objects.equals(externalSystem, other.externalSystem))) && (java.util.Objects.equals(id, other.id))) && (java.util.Objects.equals(jobId, other.jobId))) && (java.util.Objects.equals(<START_MOD>progress, other.progress))) && (java.util.Objects.equals(<END_MOD>parentStepId, other.parentStepId))) && (java.util.Objects.equals(startTime, other.startTime))) && ((status) == (other.status))) && ((stepNumber) == (other.stepNumber))) && ((stepType) == (other.stepType))) && (java.util.Objects.equals(steps, other.steps))) && ((external) == (other.external)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.job.Step)) { return false; } org.ovirt.engine.core.common.job.Step other = ((org.ovirt.engine.core.common.job.Step) (obj)); return ((((((((((((java.util.Objects.equals(correlationId, other.correlationId)) && (java.util.Objects.equals(description, other.description))) && (java.util.Objects.equals(endTime, other.endTime))) && (java.util.Objects.equals(externalSystem, other.externalSystem))) && (java.util.Objects.equals(id, other.id))) && (java.util.Objects.equals(jobId, other.jobId))) && (java.util.Objects.equals(parentStepId, other.parentStepId))) && (java.util.Objects.equals(startTime, other.startTime))) && ((status) == (other.status))) && ((stepNumber) == (other.stepNumber))) && ((stepType) == (other.stepType))) && (java.util.Objects.equals(steps, other.steps))) && ((external) == (other.external)); }
void save(org.ovirt.engine.core.common.job.StepSubjectEntity stepSubjectEntity);	void saveAll(java.util.Collection<org.ovirt.engine.core.common.job.StepSubjectEntity> entities);
private void persistCommandStep() { if ((getCommandStep()) != null) { org.ovirt.engine.core.common.job.Step taskStep = org.ovirt.engine.core.bll.job.ExecutionHandler.addTaskStep(getExecutionContext(), getCommandStep(), null); if (taskStep != null) { getExecutionContext().setStep(taskStep); for (org.ovirt.engine.core.common.job.StepSubjectEntity subjectEntity : getCommandStepSubjectEntities()) { org.ovirt.engine.core.bll.CommandBase.getStepSubjectEntityDao().save(subjectEntity); } persistCommandIfNeeded(); } } }	private void handleCommandStepAndEntities() { if ((getCommandStep()) != null) { org.ovirt.engine.core.common.job.Step taskStep = executionHandler.addTaskStep(getExecutionContext(), getCommandStep(), null); if (taskStep != null) { getExecutionContext().setStep(taskStep); persistCommandIfNeeded(); org.ovirt.engine.core.bll.CommandBase.getStepSubjectEntityDao().saveAll(getCommandStepSubjectEntities()); } } }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { final boolean versionChanged = !(java.util.Objects.equals(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion())); if (!versionChanged) { return null; } final org.ovirt.engine.core.bll.LockMessage lockMessage = new org.ovirt.engine.core.bll.LockMessage(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_BEING_UPDATED).with("clusterName", oldCluster.getName()); vmsLockedForUpdate = org.ovirt.engine.core.bll.UpdateClusterCommand.getVmStaticDao().getAllByCluster(oldGroup.getId()).stream().filter(( vm) -> ((vm.getOrigin()) != OriginType.EXTERNAL) && (!(vm.isHostedEngine()))).filter(( vm) -> (vm.getCustomCompatibilityVersion()) == null).<START_MOD>sorted().<END_MOD>collect(java.util.stream.Collectors.toList()); return vmsLockedForUpdate.stream().collect(java.util.stream.Collectors.toMap(( vm) -> vm.getId().toString(), ( vm) -> org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, lockMessage))); }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { final org.ovirt.engine.core.bll.LockMessage lockMessage = new org.ovirt.engine.core.bll.LockMessage(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_BEING_UPDATED).with("clusterName", oldCluster.getName()); return vmsLockedForUpdate.stream().collect(java.util.stream.Collectors.toMap(( vm) -> vm.getId().toString(), ( vm) -> org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, lockMessage))); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { final boolean versionChanged = !(java.util.Objects.equals(oldGroup.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion())); if (!versionChanged) { return null; } final java.lang.String lockMessage = (EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_BEING_UPDATED.name()) + (org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("clusterName", oldGroup.getName())); vmsLockedForUpdate = org.ovirt.engine.core.bll.UpdateClusterCommand.getVmStaticDao().getAllByCluster(oldGroup.getId()).stream().filter(( vm) -> ((vm.getOrigin()) != OriginType.EXTERNAL) && (!(vm.isHostedEngine()))).filter(( vm) -> (vm.getCustomCompatibilityVersion()) == null).<START_MOD>sorted().<END_MOD>collect(java.util.stream.Collectors.toList()); return vmsLockedForUpdate.stream().collect(java.util.stream.Collectors.toMap(( vm) -> vm.getId().toString(), ( vm) -> org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, lockMessage))); }	@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { final java.lang.String lockMessage = (EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_BEING_UPDATED.name()) + (org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("clusterName", oldGroup.getName())); return vmsLockedForUpdate.stream().collect(java.util.stream.Collectors.toMap(( vm) -> vm.getId().toString(), ( vm) -> org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, lockMessage))); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (((getParameters().getBricks()) == null) || ((getParameters().getBricks().size()) == 0)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_BRICKS_REQUIRED); return false; } if (getGlusterVolume().getVolumeType().isReplicatedType()) { if ((getParameters().getReplicaCount()) > ((getGlusterVolume().getReplicaCount()) + 1)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT_MORE_THAN_ONE); } else if ((getParameters().getReplicaCount()) < (getGlusterVolume().getReplicaCount())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT); } } if (getGlusterVolume().getVolumeType().isStripedType()) { if ((getParameters().getStripeCount()) > ((getGlusterVolume().getStripeCount()) + 1)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_STRIPE_COUNT_MORE_THAN_ONE); } else if ((getParameters().getStripeCount()) < (getGlusterVolume().getStripeCount())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_STRIPE_COUNT); } } if (getGlusterVolume().getVolumeType().isDispersedType()) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_ADD_BRICK_TO_DISPERSE_VOLUME_NOT_SUPPORTED); return false; } <START_MOD>boolean ret = (updateBrickServerAndInterfaceNames(getParameters().getBricks(), true)) && (validateDuplicateBricks(getParameters().getBricks())); if ((getCluster().supportsGlusterService()) && (getCluster().supportsVirtService())) { ret = ret && (validateNotSameServer(getParameters().getBricks(), getParameters().getReplicaCount())); } <END_MOD>return <START_MOD>ret; }<END_MOD>	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (((getParameters().getBricks()) == null) || ((getParameters().getBricks().size()) == 0)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_BRICKS_REQUIRED); } if (getGlusterVolume().getVolumeType().isReplicatedType()) { if ((getParameters().getReplicaCount()) > ((getGlusterVolume().getReplicaCount()) + 1)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT_MORE_THAN_ONE); } else if ((getParameters().getReplicaCount()) < (getGlusterVolume().getReplicaCount())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT); } } if (getGlusterVolume().getVolumeType().isStripedType()) { if ((getParameters().getStripeCount()) > ((getGlusterVolume().getStripeCount()) + 1)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_STRIPE_COUNT_MORE_THAN_ONE); } else if ((getParameters().getStripeCount()) < (getGlusterVolume().getStripeCount())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_STRIPE_COUNT); } } if (getGlusterVolume().getVolumeType().isDispersedType()) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_ADD_BRICK_TO_DISPERSE_VOLUME_NOT_SUPPORTED); } boolean ret = (updateBrickServerAndInterfaceNames(getParameters().getBricks(), true)) && (validateDuplicateBricks(getParameters().getBricks())); if (((getCluster().supportsGlusterService()) && (getCluster().supportsVirtService())) && (getGlusterVolume().getVolumeType().isReplicatedType())) { ret = ret && (validateNotSameServer(getParameters().getBricks(), getGlusterVolume(), getParameters().getReplicaCount())); } return ret; }
protected boolean validateNotSameServer(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> newBricks, int replicaCount) { java.util.Set<org.ovirt.engine.core.compat.Guid> brickServers = new java.util.HashSet<>(); int count = 0; for (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : newBricks) { count++; if (brickServers.contains(brick.getServerId())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_REPLICASET_SAME_SERVER); addValidationMessageVariable("brick", brick.getQualifiedName()); return false; } brickServers.add(brick.getServerId()); if (count == replicaCount) { count = 0; brickServers.clear(); } } return true; }	protected boolean validateNotSameServer(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> newBricks, int replicaCount) { if (replicaCount <= 1) { return true; } for (int count = 0; count <= ((newBricks.size()) - replicaCount); count += replicaCount) { java.util.Set<org.ovirt.engine.core.compat.Guid> brickServers = newBricks.subList(count, (count + replicaCount)).stream().map(GlusterBrickEntity::getServerId).collect(java.util.stream.Collectors.toSet()); if ((brickServers.size()) < replicaCount) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_REPLICASET_SAME_SERVER); return false; } } return true; }
private org.ovirt.engine.core.dao.JobSubjectEntityDao getJobSubjectEntityDao() { return dbFacade.getJobSubjectEntityDao(); }	private void updateStepProgress(org.ovirt.engine.core.compat.Guid stepId, java.lang.Integer progress) { org.ovirt.engine.core.common.job.Step s = dao.get(stepId); s.setProgress(progress); dao.update(s); }
private void updateStepProgress(org.ovirt.engine.core.compat.Guid stepId, java.lang.Integer progress, java.lang.Integer entityWeight, java.lang.Integer jobWeight) { org.ovirt.engine.core.common.job.Step s = dao.get(stepId); s.setJobWeight(jobWeight); s.setEntityWeight(entityWeight); s.setProgress(progress); dao.update(s); }	protected void verifyUpdate(org.ovirt.engine.core.common.job.Step existingEntity, org.ovirt.engine.core.common.job.Step result) { assertEquals("Progress should be equal", existingEntity.getProgress(), result.getProgress()); }
public void assertProgress(java.lang.Integer expectedProgress, org.ovirt.engine.core.common.businessentities.storage.BaseDisk disk) { assertEquals("disk progress isn't as expected", expectedProgress, disk.getProgress()); }	@org.junit.Test public void diskStepProgress() { org.ovirt.engine.core.common.VdcObjectType type = org.ovirt.engine.core.common.VdcObjectType.Disk; org.ovirt.engine.core.compat.Guid entityId = FixturesTool.FLOATING_DISK_ID; org.ovirt.engine.core.common.businessentities.storage.BaseDisk diskImage = getDiskDao().get(entityId); assertProgress(null, diskImage); getStepSubjectEntityDao().saveAll(java.util.Arrays.asList(new org.ovirt.engine.core.common.job.StepSubjectEntity(FixturesTool.STEP_ID, type, entityId, 30), new org.ovirt.engine.core.common.job.StepSubjectEntity(FixturesTool.STEP_ID_2, type, entityId, 50))); updateStepProgress(FixturesTool.STEP_ID, 10); updateStepProgress(FixturesTool.STEP_ID_2, 80); diskImage = getDiskDao().get(entityId); assertProgress(43, diskImage); }
@org.junit.Test public void diskJobProgress() { org.ovirt.engine.core.common.VdcObjectType type = org.ovirt.engine.core.common.VdcObjectType.Disk; org.ovirt.engine.core.compat.Guid entityId = FixturesTool.FLOATING_DISK_ID; org.ovirt.engine.core.common.businessentities.storage.BaseDisk diskImage = getDiskDao().get(entityId); assertProgress(null, diskImage); getJobSubjectEntityDao().save(FixturesTool.JOB_ID, entityId, type); updateStepProgress(FixturesTool.STEP_ID, 50, null, 80); updateStepProgress(FixturesTool.STEP_ID_2, 60, null, 50); diskImage = getDiskDao().get(entityId); assertProgress(70, diskImage); }	private void assertProgress(java.lang.Integer expectedProgress, org.ovirt.engine.core.common.businessentities.storage.BaseDisk disk) { assertEquals("disk progress isn't as expected", expectedProgress, disk.getProgress()); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { <START_MOD>org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLogableBase.addCustomValue("StorageDomainName", org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getStorageDomain().getName()); auditLogableBase.setUserName(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getUserName()); <END_MOD>if (((org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getActionState()) == (org.ovirt.engine.core.bll.CommandActionState.EXECUTE)) && (!(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getSucceeded()))) { return org.ovirt.engine.core.common.AuditLogType.UPDATE_OVF_FOR_STORAGE_DOMAIN_FAILED; } <START_MOD>if ("SYSTEM".equals(auditLogableBase.getUserName())) { <END_MOD>return <START_MOD>org.ovirt.engine.core.common.AuditLogType.SYSTEM_UPDATE_OVF_STORE<END_MOD>; }<START_MOD> return org.ovirt.engine.core.common.AuditLogType.USER_UPDATE_OVF_STORE; }<END_MOD>	@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLogableBase.addCustomValue("StorageDomainName", org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getStorageDomain().getName()); auditLogableBase.setUserName(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getUserName()); if ((org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getActionState()) == (org.ovirt.engine.core.bll.CommandActionState.EXECUTE)) { if (!(org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getSucceeded())) { return org.ovirt.engine.core.common.AuditLogType.UPDATE_OVF_FOR_STORAGE_DOMAIN_FAILED; } if (!(org.ovirt.engine.core.bll.storage.ovfstore.SYSTEM_USER_NAME.equals(auditLogableBase.getUserName()))) { return org.ovirt.engine.core.common.AuditLogType.USER_UPDATE_OVF_STORE; } } return super.getAuditLogTypeValue(); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getNewDomainCommand())) { newDomain(); } else if (command == (getImportDomainCommand())) { importDomain(); } else if (command == (getEditCommand())) { edit(); } else if (command == (getRemoveCommand())) { remove(); } else if (command == (<START_MOD>getUpdateOvfsCommand())) { updateOvfs(); } else if (command == (<END_MOD>getDestroyCommand())) { destroy(); } else if ("OnSave".equals(command.getName())) { onSave(); } else if ("Cancel".equals(command.getName())) { cancel(); } else if ("CancelConfirm".equals(command.getName())) { cancelConfirm(); } else if ("CancelImportConfirm".equals(command.getName())) { cancelImportConfirm(); } else if ("OnImport".equals(command.getName())) { onImport(); } else if ("OnImportFile".equals(command.getName())) { if (((getConfirmWindow()) != null) && (!(((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getConfirmWindow())).validate()))) { return; } cancelConfirm(); getExistingStorageDomainList(); } else if ("OnImportSan".equals(command.getName())) { if (((getConfirmWindow()) != null) && (!(((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getConfirmWindow())).validate()))) { return; } cancelConfirm(); onImportSanDomainApprove(); } else if ("OnRemove".equals(command.getName())) { onRemove(); } else if ("OnDestroy".equals(command.getName())) { onDestroy(); } else if ("OnSaveSanStorage".equals(command.getName())) { onSaveSanStorage(); } }	@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getNewDomainCommand())) { newDomain(); } else if (command == (getImportDomainCommand())) { importDomain(); } else if (command == (getEditCommand())) { edit(); } else if (command == (getRemoveCommand())) { remove(); } else if (command == (getUpdateOvfsCommand())) { updateOvfs(); } else if (command == (getDestroyCommand())) { destroy(); } else if (command == (getScanDisksCommand())) { scanDisks(); } else if ("OnSave".equals(command.getName())) { onSave(); } else if ("Cancel".equals(command.getName())) { cancel(); } else if ("CancelConfirm".equals(command.getName())) { cancelConfirm(); } else if ("CancelImportConfirm".equals(command.getName())) { cancelImportConfirm(); } else if ("OnImport".equals(command.getName())) { onImport(); } else if ("OnImportFile".equals(command.getName())) { if (((getConfirmWindow()) != null) && (!(((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getConfirmWindow())).validate()))) { return; } cancelConfirm(); getExistingStorageDomainList(); } else if ("OnImportSan".equals(command.getName())) { if (((getConfirmWindow()) != null) && (!(((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getConfirmWindow())).validate()))) { return; } cancelConfirm(); onImportSanDomainApprove(); } else if ("OnRemove".equals(command.getName())) { onRemove(); } else if ("OnDestroy".equals(command.getName())) { onDestroy(); } else if ("OnSaveSanStorage".equals(command.getName())) { onSaveSanStorage(); } }
@java.lang.Override public javax.ws.rs.core.Response backup(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters params = new org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters(); params.setStorageDomainId(guid); return performAction(VdcActionType.ProcessOvfUpdateForStorageDomain, params); }	@java.lang.Override public javax.ws.rs.core.Response updateOvfStore(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters params = new org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters(); params.setStorageDomainId(guid); return performAction(VdcActionType.ProcessOvfUpdateForStorageDomain, params); }
private org.ovirt.engine.core.compat.Guid getQuotaId() { <START_MOD>if<END_MOD> <START_MOD>((quotaId) == null) { quotaId = defaultQuotaIfNull(<END_MOD>AddVmCommand.getParameters().getVmStaticData().getQuotaId()<START_MOD>)<END_MOD>; }<START_MOD> return quotaId; }<END_MOD>	private org.ovirt.engine.core.compat.Guid getQuotaId() { return AddVmCommand.getQuotaManager().getDefaultQuotaIfNull(AddVmCommand.getParameters().getVmStaticData().getQuotaId(), AddVmCommand.getStoragePoolId()); }
protected org.ovirt.engine.core.compat.Guid defaultQuotaIfNull(org.ovirt.engine.core.compat.Guid quotaId) { if ((quotaId == null) || (Guid.Empty.equals(quotaId))) { quotaId = org.ovirt.engine.core.bll.CommandBase.getStoragePool().getDefaultQuotaId(); } return quotaId; }	protected void addValidationMessages(java.util.List<org.ovirt.engine.core.common.errors.EngineMessage> messages) { getReturnValue().getValidationMessages().addAll(messages.stream().map(( m) -> m.name()).collect(java.util.stream.Collectors.toList())); }
protected org.ovirt.engine.core.compat.Guid getQuotaId() { if (((getNewDisk()) != null) && (isInternalManagedDisk())) { <START_MOD>if<END_MOD> <START_MOD>((quotaId) == null) { quotaId = defaultQuotaIfNull(<END_MOD>((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getNewDisk())).getQuotaId()<START_MOD>); } return quotaId<END_MOD>; } return null; }	protected org.ovirt.engine.core.compat.Guid getQuotaId() { if (((getNewDisk()) != null) && (isInternalManagedDisk())) { org.ovirt.engine.core.compat.Guid quotaId = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getNewDisk())).getQuotaId(); return org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getQuotaManager().getDefaultQuotaIfNull(quotaId, org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getStoragePoolId()); } return null; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> getQuotaVdsConsumptionParameters() {<START_MOD> org.ovirt.engine.core.compat.Guid quotaId = defaultQuotaIfNull(org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand.getParameters().getVmStaticData().getQuotaId());<END_MOD> return java.util.Arrays.<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter>asList(new org.ovirt.engine.core.bll.quota.QuotaSanityParameter(<START_MOD>quotaId<END_MOD>, null)); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> getQuotaVdsConsumptionParameters() { org.ovirt.engine.core.compat.Guid quotaId = org.ovirt.engine.core.bll.AddVmPoolCommand.getQuotaManager().getDefaultQuotaIfNull(org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmStaticData().getQuotaId(), org.ovirt.engine.core.bll.AddVmPoolCommand.getStoragePoolId()); return java.util.Collections.singletonList(new org.ovirt.engine.core.bll.quota.QuotaSanityParameter(quotaId, null)); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> getQuotaVdsConsumptionParameters() {<START_MOD> org.ovirt.engine.core.compat.Guid quotaId = defaultQuotaIfNull(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getMasterVm().getQuotaId());<END_MOD> java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> list = new java.util.ArrayList<>(); list.add(new org.ovirt.engine.core.bll.quota.QuotaSanityParameter(<START_MOD>quotaId<END_MOD>, null)); return list; }	@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> getQuotaVdsConsumptionParameters() { org.ovirt.engine.core.compat.Guid quotaId = org.ovirt.engine.core.bll.AddVmTemplateCommand.getQuotaManager().getDefaultQuotaIfNull(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getMasterVm().getQuotaId(), org.ovirt.engine.core.bll.AddVmTemplateCommand.getStoragePoolId()); java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> list = new java.util.ArrayList<>(); list.add(new org.ovirt.engine.core.bll.quota.QuotaSanityParameter(quotaId, null)); return list; }
private org.ovirt.engine.core.compat.Guid getQuotaId() { if ((quotaId) == null) { quotaId = defaultQuotaIfNull(UpdateVmCommand.getParameters().getVmStaticData().getQuotaId()); } return quotaId; }	private org.ovirt.engine.core.compat.Guid getQuotaId() { return UpdateVmCommand.getQuotaManager().getDefaultQuotaIfNull(UpdateVmCommand.getParameters().getVmStaticData().getQuotaId(), UpdateVmCommand.getStoragePoolId()); }
private org.ovirt.engine.core.compat.Guid getQuotaId() { if (((org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getDiskInfo()) != null) && (org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getDiskInfo().getDiskStorageType().isInternal())) { <START_MOD>if ((quotaId) == null) {<END_MOD> quotaId = <START_MOD>defaultQuotaIfNull(<END_MOD>((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getDiskInfo())).getQuotaId()<START_MOD>)<END_MOD>; <START_MOD>}<END_MOD> return quotaId; } return null; }	private org.ovirt.engine.core.compat.Guid getQuotaId() { if (((org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getDiskInfo()) != null) && (org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getDiskInfo().getDiskStorageType().isInternal())) { org.ovirt.engine.core.compat.Guid quotaId = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().getDiskInfo())).getQuotaId(); return org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getQuotaManager().getDefaultQuotaIfNull(quotaId, org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getStoragePoolId()); } return null; }
private static org.ovirt.engine.api.model.OperatingSystem mapOperatingSystem(org.ovirt.engine.core.common.businessentities.VDS entity) { final org.ovirt.engine.api.model.OperatingSystem model = new org.ovirt.engine.api.model.OperatingSystem(); <START_MOD>if (org.apache.commons.lang.StringUtils.isNotBlank(entity.getHostOs())) { org.ovirt.engine.core.utils.OS hostOs = org.ovirt.engine.core.utils.OS.fromPackageVersionString(entity.getHostOs()); org.ovirt.engine.api.model.Version version = new org.ovirt.engine.api.model.Version(); version.setMajor(hostOs.getVersion().getMajor()); if ((hostOs.getVersion().getMinor()) != (org.ovirt.engine.api.model.Version.VERSION_NOT_SET)) { version.setMinor(hostOs.getVersion().getMinor()); } if ((hostOs.getVersion().getBuild()) != (org.ovirt.engine.api.model.Version.VERSION_NOT_SET)) { version.setBuild(hostOs.getVersion().getBuild()); } version.setFullVersion(hostOs.getFullVersion()); model.setVersion(version); model.setType(hostOs.getName()); } model.setCustomKernelCmdline(<END_MOD>java.<START_MOD>util.Objects.toString(entity.getCurrentKernelCmdline()<END_MOD>, <START_MOD>"")); model.setReportedKernelCmdline(entity.getKernelArgs()); return model<END_MOD>; }	private static org.ovirt.engine.api.model.OperatingSystem mapOperatingSystem(org.ovirt.engine.core.common.businessentities.VDS entity) { final org.ovirt.engine.api.model.OperatingSystem model = new org.ovirt.engine.api.model.OperatingSystem(); if (org.apache.commons.lang.StringUtils.isNotBlank(entity.getHostOs())) { org.ovirt.engine.core.utils.OS hostOs = org.ovirt.engine.core.utils.OS.fromPackageVersionString(entity.getHostOs()); org.ovirt.engine.api.model.Version version = new org.ovirt.engine.api.model.Version(); if ((hostOs.getVersion().getMajor()) != (org.ovirt.engine.core.compat.Version.VERSION_NOT_SET)) { version.setMajor(hostOs.getVersion().getMajor()); } if ((hostOs.getVersion().getMinor()) != (org.ovirt.engine.core.compat.Version.VERSION_NOT_SET)) { version.setMinor(hostOs.getVersion().getMinor()); } if ((hostOs.getVersion().getBuild()) != (org.ovirt.engine.core.compat.Version.VERSION_NOT_SET)) { version.setBuild(hostOs.getVersion().getBuild()); } version.setFullVersion(hostOs.getFullVersion()); model.setVersion(version); model.setType(hostOs.getName()); } model.setCustomKernelCmdline(java.util.Objects.toString(entity.getCurrentKernelCmdline(), "")); model.setReportedKernelCmdline(entity.getKernelArgs()); return model; }
@org.junit.Test public void testHostOs() { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(Guid.Empty); vds.setHostOs( - <START_MOD>17.2.5 - 1 org.ovirt.engine.api.model.Host host = org.ovirt.engine.api.restapi.types.HostMapper.map(vds, ((org.ovirt.engine.api.model.Host) (null))); assertNotNull(host.getOs()); assertTrue(host.getOs().isSetVersion()); assertEquals(host.getOs().getType(), "Fedora"); assertEquals(host.getOs().getVersion().getFullVersion(),   - 1 assertEquals(java.lang.Long.valueOf(host.getOs().getVersion().getMajor()), java.lang.Long.valueOf(<END_MOD>17<START_MOD>)); assertEquals(java.lang.Long.valueOf<END_MOD>(host.getOs().getVersion().<START_MOD>getMinor()), java.lang.Long.valueOf(2));<END_MOD> assertEquals(java.lang.Long.valueOf(host.getOs().getVersion().<START_MOD>getBuild()), java.lang.Long.valueOf(5<END_MOD>)); }	@org.junit.Test public void testHostOs() { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(Guid.Empty); vds.setHostOs("Fedora - 17 - 1"); org.ovirt.engine.api.model.Host host = org.ovirt.engine.api.restapi.types.HostMapper.map(vds, ((org.ovirt.engine.api.model.Host) (null))); assertNotNull(host.getOs()); assertTrue(host.getOs().isSetVersion()); assertEquals(host.getOs().getType(), "Fedora"); assertEquals(host.getOs().getVersion().getFullVersion(), "17 - 1"); assertEquals(java.lang.Long.valueOf(host.getOs().getVersion().getMajor()), java.lang.Long.valueOf(17)); assertEquals(java.lang.Long.valueOf(host.getOs().getVersion().getMinor()), java.lang.Long.valueOf(1)); }
public static org.ovirt.engine.core.utils.OS fromPackageVersionString(java.lang.String packageVersionString) { if (packageVersionString == null) { return new org.ovirt.engine.core.utils.OS(); } java.lang.String[] os = packageVersionString.split(<START_MOD>org.ovirt.engine.core.utils.OS.OS_DELIMITER,<END_MOD> 3); if ((os.length) < 2) { return new org.ovirt.engine.core.utils.OS(); } final java.lang.String name = os[0].trim(); final java.util.regex.Matcher versionMatcher = org.ovirt.engine.core.utils.OS.versionPattern.matcher(os[1].trim()); final org.ovirt.engine.core.compat.Version version; if (versionMatcher.find()) { version = new org.ovirt.engine.core.compat.Version(versionMatcher.group()); } else if (((os.length) == 3) && (os[2].contains("el6"))) { version = new org.ovirt.engine.core.compat.Version(6, (-1)); } else if (((os.length) == 3) && (os[2].contains("el7"))) { version = new org.ovirt.engine.core.compat.Version(7, (-1)); } else { version = new org.ovirt.engine.core.compat.Version(); } <START_MOD>final java.lang.String fullVersion = org.apache.commons.lang.StringUtils.join(java.util.Arrays.copyOfRange(os, 1, os.length), org.ovirt.engine.core.utils.OS.OS_DELIMITER); <END_MOD>return new org.ovirt.engine.core.utils.OS(name, version<START_MOD>, fullVersion); }<END_MOD>	public static org.ovirt.engine.core.utils.OS fromPackageVersionString(java.lang.String packageVersionString) { if (packageVersionString == null) { return new org.ovirt.engine.core.utils.OS(); } java.lang.String[] os = packageVersionString.split(org.ovirt.engine.core.utils.OS.OS_DELIMITER, 3); if ((os.length) < 2) { return new org.ovirt.engine.core.utils.OS(); } final java.lang.String name = os[0].trim(); final java.util.regex.Matcher versionMatcher = org.ovirt.engine.core.utils.OS.versionPattern.matcher(os[1].trim()); final org.ovirt.engine.core.compat.Version version; if (versionMatcher.find()) { if ((name != null) && (name.toLowerCase().startsWith("fedora"))) { int major = org.ovirt.engine.core.utils.OS.extractVersionPart(versionMatcher.group()); int minor = org.ovirt.engine.core.utils.OS.extractVersionPart(os[2].trim()); version = new org.ovirt.engine.core.compat.Version(major, minor); } else { version = new org.ovirt.engine.core.compat.Version(versionMatcher.group()); } } else if (((os.length) == 3) && (os[2].contains("el6"))) { version = new org.ovirt.engine.core.compat.Version(6, (-1)); } else if (((os.length) == 3) && (os[2].contains("el7"))) { version = new org.ovirt.engine.core.compat.Version(7, (-1)); } else { version = new org.ovirt.engine.core.compat.Version(); } final java.lang.String fullVersion = org.apache.commons.lang.StringUtils.join(java.util.Arrays.copyOfRange(os, 1, os.length), org.ovirt.engine.core.utils.OS.OS_DELIMITER); return new org.ovirt.engine.core.utils.OS(name, version, fullVersion); }
@org.junit.runners.Parameterized.Parameters public static java.util.Collection<java.lang.Object[]> namesParams() { return java.util.Arrays.asList(new java.lang.Object[][]{ new java.lang.Object[]{   - 7.2 - 9.el7 7, 2, -1, -1<START_MOD>,   - 9.el7<END_MOD> }, new java.lang.Object[]{   - 7 - 1.1503.el7.centos.2.8 7, -1, -1, -1<START_MOD>,   - 1.1503.el7.centos.2.8<END_MOD> }, new java.lang.Object[]{   Node - 3.6 - 0.999.201608161021.el7.centos 3, 6, -1, -1<START_MOD>,   - 0.999.201608161021.el7.centos<END_MOD> }, new java.lang.Object[]{   Hypervisor - 7.2 - 20160711.0.el7ev 7, 2, -1, -1<START_MOD>,   - 20160711.0.el7ev<END_MOD> } }); }	@org.junit.runners.Parameterized.Parameters public static java.util.Collection<java.lang.Object[]> namesParams() { return java.util.Arrays.asList(new java.lang.Object[][]{ new java.lang.Object[]{ "RHEL - 7.2 - 9.el7", 7, 2, -1, -1, "7.2 - 9.el7" }, new java.lang.Object[]{ "RHEL - 7 - 1.1503.el7.centos.2.8", 7, -1, -1, -1, "7 - 1.1503.el7.centos.2.8" }, new java.lang.Object[]{ "oVirt Node - 3.6 - 0.999.201608161021.el7.centos", 3, 6, -1, -1, "3.6 - 0.999.201608161021.el7.centos" }, new java.lang.Object[]{ "RHEV Hypervisor - 7.2 - 20160711.0.el7ev", 7, 2, -1, -1, "7.2 - 20160711.0.el7ev" }, new java.lang.Object[]{ "Fedora - 19 - 1", 19, 1, -1, -1, "19 - 1" } }); }
private void freeLockForValidationPassedCommands() { for (org.ovirt.engine.core.bll.CommandBase<?> command : getCommands()) { if (command.getReturnValue().isValid()) { command.freeLock(); } } }	private void freeLockForValidationPassedCommands() { getCommands().stream().filter(( command) -> command.getReturnValue().isValid()).forEach(( command) -> command.freeLock()); }
private java.util.List<org.ovirt.engine.core.common.businessentities.VDS> runExternalFilters(java.util.ArrayList<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl> filters, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, java.util.List<java.lang.String> messages, java.lang.String correlationId, org.ovirt.engine.core.bll.scheduling.SchedulingManager.SchedulingResult result) { java.util.List<org.ovirt.engine.core.compat.Guid> filteredIDs = null; if (filters != null) { java.util.List<<START_MOD>org.ovirt.engine.core.compat.Guid> hostIDs = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hostList) { hostIDs.add(host.getId()); } for (final org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBroker broker : externalBrokers) { java.util.List<<END_MOD>java.lang.String> filterNames = <START_MOD>filters.stream().filter(( f) -> f.getPolicyUnit().getBroker().equals(broker.getId())).map(( f) -> f.getPolicyUnit().getName()).collect(java.util.stream.Collectors.toList()); filteredIDs = broker.runFilters(filterNames, hostIDs, vm.getId(), parameters); if (filteredIDs != null) { logFilterActions(hostList, <END_MOD>new java.util.<START_MOD>HashSet(filteredIDs), EngineMessage.VAR__FILTERTYPE__EXTERNAL, java.util.Arrays.toString(<END_MOD>filterNames.<START_MOD>toArray()), result, correlationId<END_MOD>); } <START_MOD>} } return intersectHosts(<END_MOD>hostList<START_MOD>, filteredIDs<END_MOD>); }	private java.util.List<org.ovirt.engine.core.common.businessentities.VDS> runExternalFilters(java.util.ArrayList<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl> filters, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, java.util.List<java.lang.String> messages, java.lang.String correlationId, org.ovirt.engine.core.bll.scheduling.SchedulingManager.SchedulingResult result) { if (filters != null) { java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hostList) { hostIDs.add(host.getId()); } java.util.List<java.lang.String> filterNames = filters.stream().map(( f) -> f.getPolicyUnit().getName()).collect(java.util.stream.Collectors.toList()); java.util.List<org.ovirt.engine.core.compat.Guid> filteredIDs = externalBroker.runFilters(filterNames, hostIDs, vm.getId(), parameters); if (filteredIDs != null) { logFilterActions(hostList, new java.util.HashSet(filteredIDs), EngineMessage.VAR__FILTERTYPE__EXTERNAL, java.util.Arrays.toString(filterNames.toArray()), result, correlationId); hostList = intersectHosts(hostList, filteredIDs); } } return hostList; }
private org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> externalRunBalance(org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl policyUnit, org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts) { java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { hostIDs.add(vds.getId()); } <START_MOD>for (org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBroker broker : externalBrokers) { org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> balanceResult = broker.runBalance(policyUnit.getPolicyUnit().getName(), hostIDs, cluster.getClusterPolicyProperties()); if (balanceResult != null) { <END_MOD>return <START_MOD>balanceResult; } } <END_MOD>org.ovirt.engine.core.bll.scheduling.<START_MOD>SchedulingManager.log.warn( scheduler returned empty balancing result. return null<END_MOD>; }	private org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> externalRunBalance(org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl policyUnit, org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts) { java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { hostIDs.add(vds.getId()); } org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> balanceResult = externalBroker.runBalance(policyUnit.getPolicyUnit().getName(), hostIDs, cluster.getClusterPolicyProperties()); if (balanceResult != null) { return balanceResult; } org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.warn("External scheduler returned empty balancing result."); return null; }
public boolean discover() { <START_MOD>boolean dbUpdated = false; for (org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBroker broker : externalBrokers) { <END_MOD>org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult discoveryResult = <START_MOD>broker<END_MOD>.runDiscover(); if (discoveryResult != null) { updateDB(discoveryResult); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.info( updated dbUpdated = true; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); markAllExternalPoliciesAsDisabled(); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn( returned empty result, disabled external policy units } <START_MOD>} <END_MOD>return dbUpdated; }	public boolean discover() { boolean dbUpdated = false; org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult discoveryResult = broker.runDiscover(); if (discoveryResult != null) { updateDB(discoveryResult); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug("PolicyUnits updated for external broker."); dbUpdated = true; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn("Discovery returned empty result when talking to broker. Disabling external units"); java.util.List<org.ovirt.engine.core.common.scheduling.PolicyUnit> failingPolicyUnits = policyUnitDao.getAll().stream().collect(java.util.stream.Collectors.toList()); markExternalPoliciesAsDisabled(failingPolicyUnits); dbUpdated = true; } return dbUpdated; }
@javax.annotation.PostConstruct public void init() { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info( Scheduling manager initializePendingResourceManager<START_MOD>(); loadExternalBrokers<END_MOD>(); loadPolicyUnits(); loadClusterPolicies(); loadExternalScheduler(); enableLoadBalancer(); enableHaReservationCheck(); org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info( Scheduling manager }	@javax.annotation.PostConstruct public void init() { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info("Initializing Scheduling manager"); initializePendingResourceManager(); loadPolicyUnits(); loadClusterPolicies(); loadExternalScheduler(); enableLoadBalancer(); enableHaReservationCheck(); org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info("Initialized Scheduling manager"); }
private static org.ovirt.engine.api.model.OperatingSystem <START_MOD>mapOperatingSystem<END_MOD>(java.lang.String <START_MOD>hostOsStr) { final org.ovirt.engine.api.model.OperatingSystem model = new org.ovirt.engine.api.model.OperatingSystem();<END_MOD> if (<START_MOD>org.apache.commons.lang.StringUtils.isNotBlank(hostOsStr)) { org.ovirt.engine.core.utils.OS hostOs = org.ovirt.engine.core.utils.OS.fromPackageVersionString(hostOsStr); org.ovirt.engine.api.model.Version version = new org.ovirt.engine.api.model.Version(); if ((hostOs.getVersion().getMajor()) != (org.ovirt.engine.core.compat.Version.VERSION_NOT_SET)) { version.setMajor(hostOs.getVersion().getMajor()); } if ((hostOs.getVersion().getMinor()) != (org.ovirt.engine.core.compat.Version.VERSION_NOT_SET)) { version.setMinor(hostOs.getVersion().getMinor()); } if ((hostOs.getVersion().getBuild()) != (org.ovirt.engine.core.compat.Version.VERSION_NOT_SET)) { version.setBuild(hostOs.getVersion().getBuild()); } version.setFullVersion(hostOs.getFullVersion()); model.setVersion(version); model.setType(hostOs.getName()); }<END_MOD> return <START_MOD>model; }<END_MOD>	public static org.ovirt.engine.core.common.businessentities.VdsStatic mapOperatingSystem(org.ovirt.engine.api.model.OperatingSystem model, org.ovirt.engine.core.common.businessentities.VdsStatic template) { final org.ovirt.engine.core.common.businessentities.VdsStatic entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.VdsStatic(); if (model.isSetCustomKernelCmdline()) { entity.setCurrentKernelCmdline(model.getCustomKernelCmdline()); entity.setKernelCmdlineParsable(false); } return entity; }
private boolean isRemoveAutoGeneratedSnapshotRequired() { <START_MOD>boolean removeSnapshotRequired = ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getStage()) != (org.ovirt.engine.core.common.action.LiveMigrateVmDisksParameters.LiveMigrateStage.CREATE_SNAPSHOT)) && ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getStage()) != (org.ovirt.engine.core.common.action.LiveMigrateVmDisksParameters.LiveMigrateStage.AUTO_GENERATED_SNAPSHOT_REMOVE_END)); if (removeSnapshotRequired) { if (!(getVm().getStatus().isQualifiedForLiveSnapshotMerge())) { log.warn( snapshot cannot be removed because VM isn qualified for live merge. VM status is '{}' getVm().getStatus()); <END_MOD>return <START_MOD>false<END_MOD>; }<START_MOD> } return removeSnapshotRequired; }<END_MOD>	private boolean isRemoveAutoGeneratedSnapshotRequired() { boolean removeSnapshotRequired = ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getStage()) != (org.ovirt.engine.core.common.action.LiveMigrateVmDisksParameters.LiveMigrateStage.CREATE_SNAPSHOT)) && ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getStage()) != (org.ovirt.engine.core.common.action.LiveMigrateVmDisksParameters.LiveMigrateStage.AUTO_GENERATED_SNAPSHOT_REMOVE_END)); if (removeSnapshotRequired) { if (!(getVm().getStatus().isQualifiedForLiveSnapshotMerge())) { log.warn("Auto-generated snapshot cannot be removed because VM isn't qualified for live merge. VM status is '{}'", getVm().getStatus()); removeSnapshotRequired = false; } } return removeSnapshotRequired; }
private java.util.stream.Stream<? extends org.ovirt.engine.core.bll.CommandBase> findFailedChildCommands(org.ovirt.engine.core.bll.CommandBase command) { final java.util.List<? extends org.ovirt.engine.core.bll.CommandBase> childCommands = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.findChildCommands(command.getCommandId()); return childCommands.stream().filter(( childCommand) -> !(childCommand.getReturnValue().getSucceeded())); }	private java.util.stream.Stream<org.ovirt.engine.core.common.businessentities.CommandEntity> findFailedChildCommandEntities(org.ovirt.engine.core.bll.CommandBase command) { final java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> childCommandEntities = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.findChildCommands(command.getCommandId()); return childCommandEntities.stream().filter(( childCommand) -> !(childCommand.getReturnValue().getSucceeded())); }
@java.lang.Override public java.lang.String apply(org.ovirt.engine.core.compat.Guid hostId) { final org.ovirt.engine.core.common.businessentities.VDS host = vdsDao.get(hostId); final java.lang.Object result; if (host != null) { if (org.apache.commons.lang.StringUtils.isEmpty(host.getName())) { result = hostId; } else { result = host.getName(); } } else { result = hostId; } return java.lang.String.valueOf(result); }	@java.lang.Override public java.lang.String apply(org.ovirt.engine.core.compat.Guid hostId) { final java.util.Optional<org.ovirt.engine.core.common.businessentities.VdsStatic> nullableHost = java.util.Optional.ofNullable(vdsStaticDao.get(hostId)); final java.util.Optional<java.lang.String> nullableHostName = nullableHost.map(VdsStatic::getName); return nullableHostName.orElseGet(() -> java.lang.String.valueOf(hostId)); }
@java.lang.Override protected void endSuccessfully() { org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getAuditLogDirector().log(this); org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.setSucceeded(true); }	private boolean hasChildCommands() { return !(org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getCommandId()).isEmpty()); }
public static java.util.List<? extends org.ovirt.engine.core.bll.CommandBase> findChildCommands(org.ovirt.engine.core.compat.Guid commandId) { final java.util.List<org.ovirt.engine.core.bll.CommandBase> childCommands = new java.util.ArrayList<>(); final java.util.List<org.ovirt.engine.core.compat.Guid> childCommandIds = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(commandId); for (org.ovirt.engine.core.compat.Guid childCommandId : childCommandIds) { final org.ovirt.engine.core.bll.CommandBase<?> childCommand = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.retrieveCommand(childCommandId); childCommands.add(childCommand); } return childCommands; }	public static java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> findChildCommands(org.ovirt.engine.core.compat.Guid commandId) { final java.util.List<org.ovirt.engine.core.compat.Guid> childCommandIds = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(commandId); final java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> childCommands = childCommandIds.stream().map(org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil::getCommandEntity).collect(java.util.stream.Collectors.toList()); return childCommands; }
private org.ovirt.engine.core.common.businessentities.VDS createHost() { final org.ovirt.engine.core.common.businessentities.VDS host = new org.ovirt.engine.core.common.businessentities.VDS(); host.setVdsName(org.ovirt.engine.core.bll.host.util.HostIdToLoggableNameFunctionTest.HOST_NAME); return host; }	private org.ovirt.engine.core.common.businessentities.VdsStatic createHost() { final org.ovirt.engine.core.common.businessentities.VdsStatic host = new org.ovirt.engine.core.common.businessentities.VdsStatic(); host.setName(org.ovirt.engine.core.bll.host.util.HostIdToLoggableNameFunctionTest.HOST_NAME); return host; }
@org.junit.Test public void testApplyHostNotFound() { org.mockito.Mockito.when(vdsDao.get(org.ovirt.engine.core.bll.host.util.HostIdToLoggableNameFunctionTest.hostId)).thenReturn(null); final java.lang.String actual = underTest.apply(org.ovirt.engine.core.bll.host.util.HostIdToLoggableNameFunctionTest.hostId); assertThat(actual, is(org.ovirt.engine.core.bll.host.util.HostIdToLoggableNameFunctionTest.hostId.toString())); }	@org.junit.Test public void testApplyHostNotFound() { org.mockito.Mockito.when(vdsStaticDao.get(org.ovirt.engine.core.bll.host.util.HostIdToLoggableNameFunctionTest.hostId)).thenReturn(null); final java.lang.String actual = underTest.apply(org.ovirt.engine.core.bll.host.util.HostIdToLoggableNameFunctionTest.hostId); assertThat(actual, is(org.ovirt.engine.core.bll.host.util.HostIdToLoggableNameFunctionTest.hostId.toString())); }
@org.junit.Before public void setUp() { host = createHost(); org.mockito.Mockito.when(vdsDao.get(org.ovirt.engine.core.bll.host.util.HostIdToLoggableNameFunctionTest.hostId)).thenReturn(host); }	@org.junit.Before public void setUp() { host = createHost(); org.mockito.Mockito.when(vdsStaticDao.get(org.ovirt.engine.core.bll.host.util.HostIdToLoggableNameFunctionTest.hostId)).thenReturn(host); }
@org.junit.Test public void testApplyNullName() { host.setVdsName(null); final java.lang.String actual = underTest.apply(org.ovirt.engine.core.bll.host.util.HostIdToLoggableNameFunctionTest.hostId); assertThat(actual, is(org.ovirt.engine.core.bll.host.util.HostIdToLoggableNameFunctionTest.hostId.toString())); }	@org.junit.Test public void testApplyNullName() { host.setName(null); final java.lang.String actual = underTest.apply(org.ovirt.engine.core.bll.host.util.HostIdToLoggableNameFunctionTest.hostId); assertThat(actual, is(org.ovirt.engine.core.bll.host.util.HostIdToLoggableNameFunctionTest.hostId.toString())); }
@java.lang.Override protected void endSuccessfully() { getAuditLogDirector().log(this); setSucceeded(true); }	@java.lang.Override protected void endSuccessfully() { super.endSuccessfully(); log(); }
public void reportFailedHosts(org.ovirt.engine.core.bll.CommandBase command) { final java.util.List<java.lang.String> failedHostNames = findFailedChildCommands(command).map(( vdsCommand) -> ((VdsCommand<? extends org.ovirt.engine.core.common.action.VdsActionParameters>) (vdsCommand)).getParameters().getVdsId()).map(hostIdToLoggableNameFunction).collect(java.util.stream.Collectors.toList()); command.setCustomCommaSeparatedValues(org.ovirt.engine.core.bll.host.util.ReportFailedChildHostOperationsUtil.FAILED_HOSTS_VAR, failedHostNames); auditLogDirector.log(command); }	public void setFailedHosts(org.ovirt.engine.core.bll.CommandBase command) { final java.util.List<java.lang.String> failedHostNames = findFailedChildCommandEntities(command).map(( vdsCommand) -> ((org.ovirt.engine.core.common.action.VdsActionParameters) (vdsCommand.getCommandParameters())).getVdsId()).map(hostIdToLoggableNameFunction).collect(java.util.stream.Collectors.toList()); command.setCustomCommaSeparatedValues(org.ovirt.engine.core.bll.host.util.ReportFailedChildHostOperationsUtil.FAILED_HOSTS_VAR, failedHostNames); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.PROPAGATE_NETWORK_CHANGE_FINISHED : org.ovirt.engine.core.common.AuditLogType.PROPAGATE_NETWORK_CHANGE_FAILED; }	@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { switch (getActionState()) { case EXECUTE : return org.ovirt.engine.core.common.AuditLogType.PROPAGATE_NETWORK_CHANGES_STARTED; case END_FAILURE : return org.ovirt.engine.core.common.AuditLogType.PROPAGATE_NETWORK_CHANGE_FAILED; case END_SUCCESS : return org.ovirt.engine.core.common.AuditLogType.PROPAGATE_NETWORK_CHANGE_FINISHED; } return super.getAuditLogTypeValue(); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.StorageDomain> list = ((org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.StorageDomain>) (sender)); org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData importVmData = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (getItems().toArray()[0])); if ((list.getSelectedItem().getStorageType().isBlockDomain()) && ((importVmData.getVm().getOrigin()) == (org.ovirt.engine.core.common.businessentities.OriginType.KVM))) { setMessage(org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmFromExternalSourceModel.constants.kvmBlockDomainWraning()); } else { setMessage(""); } }	@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.StorageDomain> list = ((org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.StorageDomain>) (sender)); if ((list.getSelectedItem().getStorageType().isBlockDomain()) && (containsKvmOrigin())) { setMessage(org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmFromExternalSourceModel.constants.kvmBlockDomainWraning()); } else { setMessage(""); } }
@java.lang.Override protected void endSuccessfully() { getAuditLogDirector().log(this); }	@java.lang.Override protected void endSuccessfully() { super.endSuccessfully(); log(); }
@java.lang.Override protected void endSuccessfully() { org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getAuditLogDirector().log(this); }	private boolean hasChildCommands() { return !(org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getCommandId()).isEmpty()); }
public static java.util.List<? extends org.ovirt.engine.core.bll.CommandBase> findChildCommands(org.ovirt.engine.core.compat.Guid commandId) { final java.util.List<org.ovirt.engine.core.bll.CommandBase> failedCommands = new java.util.ArrayList<>(); final java.util.List<org.ovirt.engine.core.compat.Guid> childCommandIds = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(commandId); for (org.ovirt.engine.core.compat.Guid childCommandId : childCommandIds) { final org.ovirt.engine.core.bll.CommandBase<?> childCommand = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.retrieveCommand(childCommandId); failedCommands.add(childCommand); } return failedCommands; }	public static java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> findChildCommands(org.ovirt.engine.core.compat.Guid commandId) { final java.util.List<org.ovirt.engine.core.compat.Guid> childCommandIds = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(commandId); final java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> childCommands = org.ovirt.engine.core.utils.linq.LinqUtils.transformToList(childCommandIds, new org.ovirt.engine.core.utils.linq.Function<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.CommandEntity>() { @java.lang.Override public org.ovirt.engine.core.common.businessentities.CommandEntity eval(org.ovirt.engine.core.compat.Guid guid) { return org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandEntity(guid); } }); return childCommands; }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { if (org.ovirt.engine.core.bll.ShutdownVmCommand.shouldSkipCommandExecutionCached()) { return org.ovirt.engine.core.bll.ShutdownVmCommand.logCommandExecutionSkipped( VM } if (org.ovirt.engine.core.bll.ShutdownVmCommand.getSuspendedVm()) { <START_MOD>if (!(<END_MOD>org.ovirt.engine.core.bll.ShutdownVmCommand.getSucceeded()<START_MOD>)) { return org.ovirt.engine.core.common.AuditLogType.USER_STOP_SUSPENDED_VM_FAILED; } return (org.ovirt.engine.core.bll.ShutdownVmCommand.getReason()) == null<END_MOD> ? org.ovirt.engine.core.common.AuditLogType.USER_STOP_SUSPENDED_VM : org.ovirt.engine.core.common.AuditLogType.<START_MOD>USER_STOP_SUSPENDED_VM_WITH_REASON; } if (!(<END_MOD>org.ovirt.engine.core.bll.ShutdownVmCommand.getSucceeded()<START_MOD>)) { return org.ovirt.engine.core.common.AuditLogType.USER_FAILED_SHUTDOWN_VM; } return (org.ovirt.engine.core.bll.ShutdownVmCommand.getReason()) == null<END_MOD> ? org.ovirt.engine.core.common.AuditLogType.USER_INITIATED_SHUTDOWN_VM : org.ovirt.engine.core.common.AuditLogType.<START_MOD>USER_INITIATED_SHUTDOWN_VM_WITH_REASON; }<END_MOD>	@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { if (org.ovirt.engine.core.bll.ShutdownVmCommand.shouldSkipCommandExecutionCached()) { return org.ovirt.engine.core.bll.ShutdownVmCommand.logCommandExecutionSkipped("Shutdown VM"); } if (org.ovirt.engine.core.bll.ShutdownVmCommand.getSuspendedVm()) { return org.ovirt.engine.core.bll.ShutdownVmCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_STOP_SUSPENDED_VM : org.ovirt.engine.core.common.AuditLogType.USER_STOP_SUSPENDED_VM_FAILED; } else { return org.ovirt.engine.core.bll.ShutdownVmCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_INITIATED_SHUTDOWN_VM : org.ovirt.engine.core.common.AuditLogType.USER_FAILED_SHUTDOWN_VM; } }
protected int getMaxVolumeChain() { return org.ovirt.engine.core.<START_MOD>common<END_MOD>.<START_MOD>config<END_MOD>.<START_MOD>Config<END_MOD>.<START_MOD><java<END_MOD>.<START_MOD>lang.Integer>getValue(ConfigValues.MaxImagesInChain)<END_MOD>; }	protected int getMaxVolumeChain() { return org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.MaxImagesInChain); }
protected void refreshLunsInfo(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb) { for (org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromVgInfo : lunsFromVgInfo) { <START_MOD>updateLunInDb<END_MOD>(lunFromVgInfo<START_MOD>);<END_MOD> for (org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : lunFromVgInfo.getLunConnections()) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connectionFromDb = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageServerConnectionDao().getForIqn(connection.getIqn()); if (connectionFromDb == null) { continue; } org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap lunConnection = new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap(lunFromVgInfo.getLUNId(), connectionFromDb.getId()); if ((getStorageServerConnectionLunMapDao().get(lunConnection.getId())) == null) { getStorageServerConnectionLunMapDao().save(lunConnection); } } } for (org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDb : lunsFromDb) { if ((!(isDummyLun(lunFromDb))) && (!(containsLun(lunsFromVgInfo, lunFromDb)))) { org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getLunDao().remove(lunFromDb.getLUNId()); log.info( LUN ID '{}' lunFromDb.getLUNId()); } } }	protected void refreshLunsConnections(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo) { for (org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromVgInfo : lunsFromVgInfo) { for (org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : lunFromVgInfo.getLunConnections()) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connectionFromDb = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageServerConnectionDao().getForIqn(connection.getIqn()); if (connectionFromDb == null) { continue; } org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap lunConnection = new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap(lunFromVgInfo.getLUNId(), connectionFromDb.getId()); if ((getStorageServerConnectionLunMapDao().get(lunConnection.getId())) == null) { getStorageServerConnectionLunMapDao().save(lunConnection); } } } }
@org.junit.Test public void lunsWithSameIdMismatch() { org.ovirt.engine.core.dao.LunDao lunDao = mock(org.ovirt.engine.core.dao.LunDao.class); doReturn(lunDao).when(command).getLunDao(); org.ovirt.engine.core.common.businessentities.storage.LUNs luns = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); doReturn(luns).when(lunDao).get(anyString()); command.updateLunInDb(luns); verify(lunDao, times(1)).update(any(org.ovirt.engine.core.common.businessentities.storage.LUNs.class)); }	@org.junit.Test public void lunsWithSameIdMismatch() { org.ovirt.engine.core.dao.LunDao lunDao = mock(org.ovirt.engine.core.dao.LunDao.class); doReturn(lunDao).when(command).getLunDao(); org.ovirt.engine.core.common.businessentities.storage.LUNs luns = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); doReturn(luns).when(lunDao).get(anyString()); command.updateLunsInDb(java.util.Collections.singletonList(luns)); verify(lunDao, times(1)).update(any(org.ovirt.engine.core.common.businessentities.storage.LUNs.class)); }
protected void updateLunInDb(org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromVgInfo) { org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDB = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getLunDao().get(lunFromVgInfo.getLUNId()); if (lunFromDB == null) { org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getLunDao().save(lunFromVgInfo); log.info("New LUN discovered, ID '{}'", lunFromVgInfo.getLUNId()); } else { if ((lunFromDB.getDeviceSize()) != (lunFromVgInfo.getDeviceSize())) { log.info("Updated LUN device size - ID '{}', previous size {}, new size {}.", lunFromVgInfo.getLUNId(), lunFromDB.getDeviceSize(), lunFromVgInfo.getDeviceSize()); } else { log.info("Updated LUN information, ID '{}'.", lunFromVgInfo.getLUNId()); } org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getLunDao().update(lunFromVgInfo); } }	protected void updateLunsInDb(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToUpdateInDb) { for (org.ovirt.engine.core.common.businessentities.storage.LUNs lunToUpdateInDb : lunsToUpdateInDb) { org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDB = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getLunDao().get(lunToUpdateInDb.getLUNId()); if (lunFromDB == null) { org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getLunDao().save(lunToUpdateInDb); log.info("New LUN discovered, ID '{}'", lunToUpdateInDb.getLUNId()); } else { if ((lunFromDB.getDeviceSize()) != (lunToUpdateInDb.getDeviceSize())) { log.info("Updated LUN device size - ID '{}', previous size {}, new size {}.", lunToUpdateInDb.getLUNId(), lunFromDB.getDeviceSize(), lunToUpdateInDb.getDeviceSize()); } else { log.info("Updated LUN information, ID '{}'.", lunToUpdateInDb.getLUNId()); } org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getLunDao().update(lunToUpdateInDb); } } }
private void saveVmStatistics(java.util.List<org.ovirt.engine.core.vdsbroker.monitoring.VmAnalyzer> vmAnalyzers) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmStatistics> vmIdToStatistics = vmAnalyzers.stream().filter(( analyzer) -> (analyzer.getVmStatisticsToSave()) != null).collect(java.util.stream.Collectors.toMap(VmAnalyzer::getVmId, VmAnalyzer::getVmStatisticsToSave)); vmIdToStatistics.forEach(( vmId, stats) -> resourceManager.getVmManager(vmId).setStatistics(stats)); }	private void saveVmStatistics(java.util.List<org.ovirt.engine.core.vdsbroker.monitoring.VmAnalyzer> vmAnalyzers) { java.util.List<org.ovirt.engine.core.common.businessentities.VmStatistics> statistics = vmAnalyzers.stream().map(VmAnalyzer::getVmStatisticsToSave).filter(java.util.Objects::nonNull).collect(java.util.stream.Collectors.toList()); vmStatisticsDao.updateAllInBatch(statistics); statistics.forEach(( stats) -> resourceManager.getVmManager(stats.getId()).setStatistics(stats)); }
protected void addVmToDb() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmInterfaces(); getCompensationContext().stateChanged(); return null; }); }	protected void addVmToDb() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmStatistics(); addVmInterfaces(); getCompensationContext().stateChanged(); return null; }); }
@org.junit.experimental.theories.Theory public void updateRepository_HA_VM_DOWN(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, false); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up))); assumeTrue(data.dbVm().isAutoStartup()); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); vmAnalyzer.analyze(); assertEquals(data.dbVm().getDynamicData(), vmAnalyzer.getVmDynamicToSave()); assertNotNull(vmAnalyzer.getVmStatisticsToSave()); assertFalse(vmAnalyzer.isRerun()); assertNull(data.dbVm().getMigratingToVds()); }	@org.junit.experimental.theories.Theory public void updateRepository_HA_VM_DOWN(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, false); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.dbVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up))); assumeTrue(data.dbVm().isAutoStartup()); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down))); vmAnalyzer.analyze(); assertEquals(data.dbVm().getDynamicData(), vmAnalyzer.getVmDynamicToSave()); assertNotNull(vmAnalyzer.getVmStatisticsToSave()); assertFalse(vmAnalyzer.isRerun()); assertTrue(vmAnalyzer.isAutoVmToRun()); assertNull(data.dbVm().getMigratingToVds()); }
private void createHostedEngineVm(org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic(); vmStatic.setId(id); vmStatic.setClusterId(FixturesTool.CLUSTER_RHEL6_ISCSI); vmStatic.setName("HostedEngine"); vmStatic.setOrigin(OriginType.HOSTED_ENGINE); getDbFacade().getVmStaticDao().save(vmStatic); org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic(); vmDynamic.setId(id); getDbFacade().getVmDynamicDao().save(vmDynamic); org.ovirt.engine.core.common.businessentities.VmStatistics vmStatistics = new org.ovirt.engine.core.common.businessentities.VmStatistics(); vmStatistics.setId(id); }	private void createHostedEngineVm(org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic(); vmStatic.setId(id); vmStatic.setClusterId(FixturesTool.CLUSTER_RHEL6_ISCSI); vmStatic.setName("HostedEngine"); vmStatic.setOrigin(OriginType.HOSTED_ENGINE); vmStatic.setCpuProfileId(FixturesTool.CPU_PROFILE_1); getDbFacade().getVmStaticDao().save(vmStatic); org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic(); vmDynamic.setId(id); getDbFacade().getVmDynamicDao().save(vmDynamic); org.ovirt.engine.core.common.businessentities.VmStatistics vmStatistics = new org.ovirt.engine.core.common.businessentities.VmStatistics(); vmStatistics.setId(id); getDbFacade().getVmStatisticsDao().save(vmStatistics); }
@java.lang.Override protected void executeVmCommand() { org.ovirt.engine.core.bll.VmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error( to add VM. The reasons are: {} java.lang.String.join(",", errorMessages)); return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyDiskVmElements(); copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId()) != null) { addVmToPool(); } }	@java.lang.Override protected void executeVmCommand() { org.ovirt.engine.core.bll.VmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error("Failed to add VM. The reasons are: {}", java.lang.String.join(",", errorMessages)); return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyDiskVmElements(); copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId()) != null) { addVmToPool(); } }
public void update(org.ovirt.engine.core.common.businessentities.VmStatistics statistics) { setStatistics(statistics); }	public void update(org.ovirt.engine.core.common.businessentities.VmStatistics statistics) { vmStatisticsDao.update(statistics); setStatistics(statistics); }
@java.lang.Override protected void endWithFailure() { org.ovirt.engine.core.bll.exportimport.ImportVmCommand.setVm(null); if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm()) != null) { removeVmSnapshots(); endActionOnAllImageGroups(); removeVmNetworkInterfaces(); org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVmDynamicDao().remove(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVmId()); org.ovirt.engine.core.bll.exportimport.ImportVmCommand.<START_MOD>getVmStaticDao<END_MOD>().remove(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVmId()); org.ovirt.engine.core.bll.exportimport.ImportVmCommand.setSucceeded(true); } else { setVm(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getVm()); org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getReturnValue().setEndActionTryAgain(false); } }	@java.lang.Override protected void endWithFailure() { org.ovirt.engine.core.bll.exportimport.ImportVmCommand.setVm(null); if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm()) != null) { removeVmSnapshots(); endActionOnAllImageGroups(); removeVmNetworkInterfaces(); org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVmDynamicDao().remove(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVmId()); org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVmStatisticsDao().remove(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVmId()); org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVmStaticDao().remove(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVmId()); org.ovirt.engine.core.bll.exportimport.ImportVmCommand.setSucceeded(true); } else { setVm(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getVm()); org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getReturnValue().setEndActionTryAgain(false); } }
@java.lang.Override protected org.ovirt.engine.core.common.businessentities.VM doPersist() { vmStaticDao.save(object.getStaticData()); vmDynamicDao.save(object.getDynamicData()); return vmDao.get(object.getId()); }	@java.lang.Override protected org.ovirt.engine.core.common.businessentities.VM doPersist() { vmStaticDao.save(object.getStaticData()); vmDynamicDao.save(object.getDynamicData()); vmStatisticsDao.save(object.getStatisticsData()); return vmDao.get(object.getId()); }
public static org.ovirt.engine.core.vdsbroker.VdsManager forVds(org.ovirt.engine.core.common.businessentities.VDS vds) { return org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.vdsbroker.VdsManager(vds)); }	@javax.annotation.PostConstruct private void init() { monitoringStrategy = monitoringStrategyFactory.getMonitoringStrategyForVds(cachedVds); monitoringLock = new org.ovirt.engine.core.utils.lock.EngineLock(java.util.Collections.singletonMap(vdsId.toString(), new org.ovirt.engine.core.common.utils.Pair(LockingGroup.VDS_INIT.name(), "")), null); registeredJobs = new java.util.ArrayList<>(); handlePreviousStatus(); handleSecureSetup(); initVdsBroker(); }
public void addVds(org.ovirt.engine.core.common.businessentities.VDS vds, boolean isInternal) { org.ovirt.engine.core.vdsbroker.VdsManager vdsManager = org.ovirt.engine.core.vdsbroker.VdsManager<START_MOD>.forVds(vds); if (isInternal) { org.ovirt.engine.core.common.businessentities.VDSStatus status = vds.getStatus(); switch (vds.getStatus()) { case Error : status = org.ovirt.engine.core.common.businessentities.VDSStatus.Up; break; case Reboot : case NonResponsive : case Connecting : case Installing : status = org.ovirt.engine.core.common.businessentities.VDSStatus.Unassigned; break; } if (status != (vds.getStatus())) { vdsManager.setStatus(status<END_MOD>, <START_MOD>vds); vdsManager.updateStatisticsData(vds.getStatisticsData()); } vds.setPendingVcpusCount(0); vdsManager.updateDynamicData(vds.getDynamicData()); } vdsManager.scheduleJobs(); vdsManagersDict.put(vds.getId()<END_MOD>, <START_MOD>vdsManager); org.ovirt.engine.core.vdsbroker.ResourceManager.log.info( '{}' was added to the Resource Manager vds.getId())<END_MOD>; }	public void addVds(org.ovirt.engine.core.common.businessentities.VDS vds, boolean isInternal) { org.ovirt.engine.core.vdsbroker.VdsManager vdsManager = vdsManagerFactory.create(vds, this); if (isInternal) { org.ovirt.engine.core.common.businessentities.VDSStatus status = vds.getStatus(); switch (vds.getStatus()) { case Error : status = org.ovirt.engine.core.common.businessentities.VDSStatus.Up; break; case Reboot : case NonResponsive : case Connecting : case Installing : status = org.ovirt.engine.core.common.businessentities.VDSStatus.Unassigned; break; } if (status != (vds.getStatus())) { vdsManager.setStatus(status, vds); vdsManager.updateStatisticsData(vds.getStatisticsData()); } vds.setPendingVcpusCount(0); vdsManager.updateDynamicData(vds.getDynamicData()); } vdsManager.scheduleJobs(); vdsManagersDict.put(vds.getId(), vdsManager); org.ovirt.engine.core.vdsbroker.ResourceManager.log.info("VDS '{}' was added to the Resource Manager", vds.getId()); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.ExternalVmImport externalVmImport) { return new org.ovirt.engine.api.restapi.resource.BackendExternalVmImportsResource.ExternalVmImporter(externalVmImport).performImport(); }	@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.ExternalVmImport externalVmImport) { validateParameters(externalVmImport, "provider", "url", "name", "sparse", "cluster.id|name", "storageDomain.id|name"); org.ovirt.engine.core.common.action.ImportVmFromExternalUrlParameters parameters = buildImportParameters(externalVmImport); org.ovirt.engine.core.common.businessentities.VM createdVm = performAction(VdcActionType.ImportVmFromExternalUrl, parameters, org.ovirt.engine.core.common.businessentities.VM.class); externalVmImport.setPassword(null); externalVmImport.setVm(org.ovirt.engine.api.restapi.resource.BackendExternalVmImportsResource.withIdLink(new org.ovirt.engine.api.model.Vm(), createdVm.getId())); externalVmImport.setCluster(org.ovirt.engine.api.restapi.resource.BackendExternalVmImportsResource.withIdLink(new org.ovirt.engine.api.model.Cluster(), parameters.getClusterId())); externalVmImport.setStorageDomain(org.ovirt.engine.api.restapi.resource.BackendExternalVmImportsResource.withIdLink(new org.ovirt.engine.api.model.StorageDomain(), parameters.getStorageDomainId())); if (externalVmImport.isSetHost()) { externalVmImport.setHost(org.ovirt.engine.api.restapi.resource.BackendExternalVmImportsResource.withIdLink(new org.ovirt.engine.api.model.Host(), parameters.getProxyHostId())); } return javax.ws.rs.core.Response.ok(externalVmImport).status(Response.Status.CREATED).build(); }
public javax.ws.rs.core.Response performImport() { org.ovirt.engine.core.common.businessentities.VM vm = loadExternalVm(); return performAction(VdcActionType.ImportVmFromExternalProvider, buildImportVmFromExternalProviderParameters(vm)); }	private static org.ovirt.engine.core.common.businessentities.storage.VolumeType getVolumeType(org.ovirt.engine.api.model.ExternalVmImport vmImport) { return java.lang.Boolean.TRUE.equals(vmImport.isSparse()) ? org.ovirt.engine.core.common.businessentities.storage.VolumeType.Sparse : org.ovirt.engine.core.common.businessentities.storage.VolumeType.Preallocated; }
private java.lang.String formProfileUrl(java.lang.String clusterId, java.lang.String volumeId, boolean isBrickProfileSelected) { java.lang.String apiMatrixParam = (!isBrickProfileSelected) ? ";nfsStatistics=true" : ""; return org.ovirt.engine.core.compat.StringFormat.format(<START_MOD>"/ovirt-engine/api/clusters/%s/glustervolumes/%s/profilestatistics%s?accept=text/plain"<END_MOD>, clusterId, volumeId, apiMatrixParam); }	private java.lang.String formProfileUrl(java.lang.String clusterId, java.lang.String volumeId, boolean isBrickProfileSelected) { java.lang.String apiMatrixParam = (!isBrickProfileSelected) ? ";nfsStatistics=true" : ""; return org.ovirt.engine.core.compat.StringFormat.format("/ovirt-engine/api/clusters/%s/glustervolumes/%s/profilestatistics%s?accept=application/json", clusterId, volumeId, apiMatrixParam); }
@org.junit.Test public void updateStatusOfImagesByImageGroupId() { org.ovirt.engine.core.common.businessentities.storage.Image image = dao.get(org.ovirt.engine.core.dao.ImageDaoTest.EXISTING_IMAGE_ID); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> snapshots = dbFacade.getDiskImageDao().getAllSnapshotsForImageGroup(image.getDiskId()); assertFalse(((snapshots.size()) == 1)); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : snapshots) { <START_MOD>assertNotSame<END_MOD>(ImageStatus.LOCKED, diskImage.getImageStatus()); } <START_MOD>dao.updateStatusOfImagesByImageGroupId(image.getDiskId(), ImageStatus.LOCKED); snapshots = dbFacade.getDiskImageDao().getAllSnapshotsForImageGroup(image.getDiskId()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : snapshots) { assertEquals(ImageStatus.LOCKED, diskImage.getImageStatus()); <END_MOD>}<START_MOD> }<END_MOD>	@org.junit.Test public void updateStatusOfImagesByImageGroupId() { org.ovirt.engine.core.common.businessentities.storage.Image image = dao.get(org.ovirt.engine.core.dao.ImageDaoTest.EXISTING_IMAGE_ID); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> snapshots = dbFacade.getDiskImageDao().getAllSnapshotsForImageGroup(image.getDiskId()); assertNotEquals(1, snapshots.size()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : snapshots) { assertNotSame(ImageStatus.LOCKED, diskImage.getImageStatus()); } dao.updateStatusOfImagesByImageGroupId(image.getDiskId(), ImageStatus.LOCKED); snapshots = dbFacade.getDiskImageDao().getAllSnapshotsForImageGroup(image.getDiskId()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : snapshots) { assertEquals(ImageStatus.LOCKED, diskImage.getImageStatus()); } }
@org.junit.Test public void testUpdateQuota() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.Quota quotaGeneralToSpecific = dao.getById(FixturesTool.QUOTA_GENERAL); java.lang.String quotaName =   Temporary name java.util.List<org.ovirt.engine.core.common.businessentities.QuotaCluster> quotaClusterList = org.ovirt.engine.core.dao.QuotaDaoTest.getQuotaCluster(org.ovirt.engine.core.dao.QuotaDaoTest.getSpecificQuotaCluster(quotaGeneralToSpecific.getId())); java.lang.Long newStorageLimit = 2345L; <START_MOD>assertFalse(quotaName.equals(quotaGeneralToSpecific.getQuotaName())); assertFalse(((quotaClusterList.size()) == (quotaGeneralToSpecific.getQuotaClusters().size()))); assertFalse(quotaGeneralToSpecific.getGlobalQuotaStorage().getStorageSizeGB().equals(newStorageLimit)); quotaGeneralToSpecific.setQuotaName(quotaName); quotaGeneralToSpecific.getGlobalQuotaStorage().setStorageSizeGB(newStorageLimit); quotaGeneralToSpecific.setQuotaClusters(quotaClusterList); dao.update(quotaGeneralToSpecific); quotaGeneralToSpecific = dao.getById(FixturesTool.QUOTA_GENERAL); <END_MOD>assertEquals(quotaName<START_MOD>, <END_MOD>quotaGeneralToSpecific.getQuotaName())<START_MOD>; assertEquals(quotaClusterList.size()<END_MOD>, <START_MOD>quotaGeneralToSpecific.getQuotaClusters().size()<END_MOD>); assertEquals(<START_MOD>newStorageLimit<END_MOD>, quotaGeneralToSpecific.getGlobalQuotaStorage().getStorageSizeGB()); }	@org.junit.Test public void testUpdateQuota() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.Quota quotaGeneralToSpecific = dao.getById(FixturesTool.QUOTA_GENERAL); java.lang.String quotaName = "New Temporary name"; java.util.List<org.ovirt.engine.core.common.businessentities.QuotaCluster> quotaClusterList = org.ovirt.engine.core.dao.QuotaDaoTest.getQuotaCluster(org.ovirt.engine.core.dao.QuotaDaoTest.getSpecificQuotaCluster(quotaGeneralToSpecific.getId())); java.lang.Long newStorageLimit = 2345L; assertFalse(quotaName.equals(quotaGeneralToSpecific.getQuotaName())); assertNotEquals(quotaClusterList.size(), quotaGeneralToSpecific.getQuotaClusters().size()); assertFalse(quotaGeneralToSpecific.getGlobalQuotaStorage().getStorageSizeGB().equals(newStorageLimit)); quotaGeneralToSpecific.setQuotaName(quotaName); quotaGeneralToSpecific.getGlobalQuotaStorage().setStorageSizeGB(newStorageLimit); quotaGeneralToSpecific.setQuotaClusters(quotaClusterList); dao.update(quotaGeneralToSpecific); quotaGeneralToSpecific = dao.getById(FixturesTool.QUOTA_GENERAL); assertEquals(quotaName, quotaGeneralToSpecific.getQuotaName()); assertEquals(quotaClusterList.size(), quotaGeneralToSpecific.getQuotaClusters().size()); assertEquals(newStorageLimit, quotaGeneralToSpecific.getGlobalQuotaStorage().getStorageSizeGB()); }
@org.junit.Test public void testGetByClusterIdAndServiceType() { org.ovirt.engine.core.common.businessentities.gluster.GlusterClusterService service = dao.getByClusterIdAndServiceType(org.ovirt.engine.core.dao.gluster.GlusterClusterServiceDaoTest.CLUSTER_ID, ServiceType.GLUSTER); assertNotNull(service); <START_MOD>assertSame<END_MOD>(<START_MOD>GlusterServiceStatus.RUNNING, <END_MOD>service.getStatus()); }	@org.junit.Test public void testGetByClusterIdAndServiceType() { org.ovirt.engine.core.common.businessentities.gluster.GlusterClusterService service = dao.getByClusterIdAndServiceType(org.ovirt.engine.core.dao.gluster.GlusterClusterServiceDaoTest.CLUSTER_ID, ServiceType.GLUSTER); assertNotNull(service); assertEquals(GlusterServiceStatus.RUNNING, service.getStatus()); }
@org.junit.Test public void updateOvfUpdatedInfoWithRelevantExceptStatus() { org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo ovfInfo = dao.get(getExistingEntityId()); ovfInfo.setStatus(StorageDomainOvfInfoStatus.DISABLED); dao.update(ovfInfo); org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo ovfInfo1 = dao.getAllForDomain(FixturesTool.STORAGE_DOAMIN_NFS2_2).get(0); <START_MOD>assertNotSame<END_MOD>( shouldn be ovf updated prior to test <START_MOD>StorageDomainOvfInfoStatus.UPDATED, <END_MOD>ovfInfo1.getStatus())<START_MOD>; dao.updateOvfUpdatedInfo(java.util.Arrays.asList(ovfInfo.getStorageDomainId(), ovfInfo1.getStorageDomainId()), <END_MOD>StorageDomainOvfInfoStatus.UPDATED<START_MOD>, StorageDomainOvfInfoStatus.DISABLED); ovfInfo = dao.get(ovfInfo.getOvfDiskId()); ovfInfo1 = dao.get(ovfInfo1.getOvfDiskId()); assertSame(StorageDomainOvfInfoStatus.DISABLED, ovfInfo.getStatus()); assertSame(<END_MOD>StorageDomainOvfInfoStatus.UPDATED, <START_MOD>ovfInfo1<END_MOD>.getStatus()); }	@org.junit.Test public void updateOvfUpdatedInfoWithRelevantExceptStatus() { org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo ovfInfo = dao.get(getExistingEntityId()); ovfInfo.setStatus(StorageDomainOvfInfoStatus.DISABLED); dao.update(ovfInfo); org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo ovfInfo1 = dao.getAllForDomain(FixturesTool.STORAGE_DOAMIN_NFS2_2).get(0); assertNotSame("domain shouldn't be ovf updated prior to test", StorageDomainOvfInfoStatus.UPDATED, ovfInfo1.getStatus()); dao.updateOvfUpdatedInfo(java.util.Arrays.asList(ovfInfo.getStorageDomainId(), ovfInfo1.getStorageDomainId()), StorageDomainOvfInfoStatus.UPDATED, StorageDomainOvfInfoStatus.DISABLED); ovfInfo = dao.get(ovfInfo.getOvfDiskId()); ovfInfo1 = dao.get(ovfInfo1.getOvfDiskId()); assertEquals(StorageDomainOvfInfoStatus.DISABLED, ovfInfo.getStatus()); assertEquals(StorageDomainOvfInfoStatus.UPDATED, ovfInfo1.getStatus()); }
@org.junit.Test public void updateOvfUpdatedInfoFewDomains() { org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo ovfInfo = dao.get(getExistingEntityId()); org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo ovfInfo1 = dao.getAllForDomain(FixturesTool.STORAGE_DOAMIN_NFS2_2).get(0); <START_MOD>assertNotSame<END_MOD>( shouldn be ovf updated prior to test <START_MOD>StorageDomainOvfInfoStatus.UPDATED, ovfInfo1.getStatus()); assertNotSame<END_MOD>( shouldn be ovf updated prior to test <START_MOD>StorageDomainOvfInfoStatus.UPDATED, ovfInfo.getStatus(<END_MOD>)); dao.updateOvfUpdatedInfo(java.util.Arrays.asList(ovfInfo.getStorageDomainId(), ovfInfo1.getStorageDomainId()), StorageDomainOvfInfoStatus.UPDATED, StorageDomainOvfInfoStatus.DISABLED); ovfInfo = dao.get(ovfInfo.getOvfDiskId()); ovfInfo1 = dao.get(ovfInfo1.getOvfDiskId()); <START_MOD>assertSame(StorageDomainOvfInfoStatus.UPDATED, ovfInfo.getStatus()); assertSame(StorageDomainOvfInfoStatus.UPDATED, ovfInfo1.getStatus(<END_MOD>)); }	@org.junit.Test public void updateOvfUpdatedInfoFewDomains() { org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo ovfInfo = dao.get(getExistingEntityId()); org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo ovfInfo1 = dao.getAllForDomain(FixturesTool.STORAGE_DOAMIN_NFS2_2).get(0); assertNotSame("domain shouldn't be ovf updated prior to test", StorageDomainOvfInfoStatus.UPDATED, ovfInfo1.getStatus()); assertNotSame("domain shouldn't be ovf updated prior to test", StorageDomainOvfInfoStatus.UPDATED, ovfInfo.getStatus()); dao.updateOvfUpdatedInfo(java.util.Arrays.asList(ovfInfo.getStorageDomainId(), ovfInfo1.getStorageDomainId()), StorageDomainOvfInfoStatus.UPDATED, StorageDomainOvfInfoStatus.DISABLED); ovfInfo = dao.get(ovfInfo.getOvfDiskId()); ovfInfo1 = dao.get(ovfInfo1.getOvfDiskId()); assertEquals(StorageDomainOvfInfoStatus.UPDATED, ovfInfo.getStatus()); assertEquals(StorageDomainOvfInfoStatus.UPDATED, ovfInfo1.getStatus()); }
@org.junit.Test public void testGetCapacityInfo() throws java.text.ParseException { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = dao.getById(org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.EXISTING_VOL_DIST_ID); assertNotNull( capacity info is not available volume.getAdvancedDetails()); assertTrue(((volume.getAdvancedDetails().getCapacityInfo().getTotalSize()) == 100000)); assertTrue(((volume.getAdvancedDetails().getCapacityInfo().getUsedSize()) == 60000)); assertTrue(((volume.getAdvancedDetails().getCapacityInfo().getFreeSize()) == 40000)); <START_MOD>assertEquals<END_MOD>(EXPECTED_DATE_FORMAT.parse(volume.getAdvancedDetails().getUpdatedAt().toString())<START_MOD>, <END_MOD>EXPECTED_DATE_FORMAT.parse( 18:12:33 }	@org.junit.Test public void testGetCapacityInfo() throws java.text.ParseException { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = dao.getById(org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.EXISTING_VOL_DIST_ID); assertNotNull("volume capacity info is not available", volume.getAdvancedDetails()); assertEquals(100000L, volume.getAdvancedDetails().getCapacityInfo().getTotalSize().longValue()); assertEquals(60000L, volume.getAdvancedDetails().getCapacityInfo().getUsedSize().longValue()); assertEquals(40000L, volume.getAdvancedDetails().getCapacityInfo().getFreeSize().longValue()); assertEquals(EXPECTED_DATE_FORMAT.parse(volume.getAdvancedDetails().getUpdatedAt().toString()), EXPECTED_DATE_FORMAT.parse("2014-01-21 18:12:33")); }
@org.junit.Test public void testUpdateAsyncTaskId() { assertNotNull(existingDistVol.getAsyncTask()); assertNull(existingDistVol.getAsyncTask().getTaskId()); dao.updateVolumeTask(existingDistVol.getId(), org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.REBALANCING_VOLUME_TASKID); org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = dao.getAllWithQuery((( * from gluster_volumes_view where id =   + (existingDistVol.getId())) + "'")).get(0); assertNotNull((( :   + (existingDistVol.getId())) +   doesn exists volume); <START_MOD>assertEquals<END_MOD>( ID is not getting updated <START_MOD>org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.REBALANCING_VOLUME_TASKID, <END_MOD>volume.getAsyncTask().getTaskId()<START_MOD>); assertSame<END_MOD>( Task status JobExecutionStatus.STARTED<START_MOD>, <END_MOD>volume.getAsyncTask().getStatus())<START_MOD>; assertSame<END_MOD>( Task type GlusterTaskType.REBALANCE<START_MOD>, <END_MOD>volume.getAsyncTask().getType()); }	@org.junit.Test public void testUpdateAsyncTaskId() { assertNotNull(existingDistVol.getAsyncTask()); assertNull(existingDistVol.getAsyncTask().getTaskId()); dao.updateVolumeTask(existingDistVol.getId(), org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.REBALANCING_VOLUME_TASKID); org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = dao.getAllWithQuery((("select * from gluster_volumes_view where id = '" + (existingDistVol.getId())) + "'")).get(0); assertNotNull((("Volume : " + (existingDistVol.getId())) + " doesn't exists"), volume); assertEquals("Task ID is not getting updated", org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.REBALANCING_VOLUME_TASKID, volume.getAsyncTask().getTaskId()); assertEquals("Invalid Task status", JobExecutionStatus.STARTED, volume.getAsyncTask().getStatus()); assertEquals("Invalid Task type", GlusterTaskType.REBALANCE, volume.getAsyncTask().getType()); }
@org.junit.Test public void testSetDetectEmulatedMachine() { boolean preUpdate = existingCluster.isDetectEmulatedMachine(); boolean updateValue = false; assertNotSame(<START_MOD>updateValue<END_MOD>, <START_MOD>preUpdate<END_MOD>); dao.setEmulatedMachine(existingCluster.getId(), existingCluster.getEmulatedMachine(), updateValue); assertEquals(updateValue, dao.get(existingCluster.getId()).isDetectEmulatedMachine()); }	@org.junit.Test public void testSetDetectEmulatedMachine() { boolean preUpdate = existingCluster.isDetectEmulatedMachine(); boolean updateValue = false; assertNotEquals(updateValue, preUpdate); dao.setEmulatedMachine(existingCluster.getId(), existingCluster.getEmulatedMachine(), updateValue); assertEquals(updateValue, dao.get(existingCluster.getId()).isDetectEmulatedMachine()); }
@org.junit.Test public void testGetVolumesByStatusAndTypes() { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes = dao.getVolumesByStatusAndTypes(org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.CLUSTER_ID, GlusterStatus.UP, java.util.Collections.singletonList(GlusterVolumeType.DISTRIBUTE)); <START_MOD>assertNotNull<END_MOD>(volumes); assertTrue(volumes.contains(existingDistVol)); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume : volumes) { <START_MOD>assertSame<END_MOD>(<START_MOD>GlusterVolumeType.DISTRIBUTE, <END_MOD>volume.getVolumeType()); } }	@org.junit.Test public void testGetVolumesByStatusAndTypes() { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes = dao.getVolumesByStatusAndTypes(org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.CLUSTER_ID, GlusterStatus.UP, java.util.Collections.singletonList(GlusterVolumeType.DISTRIBUTE)); assertNotNull(volumes); assertTrue(volumes.contains(existingDistVol)); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume : volumes) { assertEquals(GlusterVolumeType.DISTRIBUTE, volume.getVolumeType()); } }
@org.junit.Test public void getStepsByExternalId() { java.util.List<org.ovirt.engine.core.common.job.Step> steps = dao.getStepsByExternalId(org.ovirt.engine.core.dao.StepDaoTest.IN_PROGRESS_REBALANCING_GLUSTER_VOLUME_TASK_ID); assertEquals( Rebalancing Gluster Volume Job has steps org.ovirt.engine.core.dao.StepDaoTest.TOTAL_STEPS_OF_REBALANCING_GLUSTER_VOLUME, steps.size()); org.ovirt.engine.core.common.job.Step step = steps.get(0); <START_MOD>assertSame<END_MOD>( the Step Type status StepEnum.REBALANCING_VOLUME<START_MOD>, <END_MOD>step.getStepType())<START_MOD>; assertSame<END_MOD>( the Step status JobExecutionStatus.STARTED<START_MOD>, <END_MOD>step.getStatus()); assertEquals( Step org.ovirt.engine.core.dao.StepDaoTest.REBALANCING_GLUSTER_VOLUME_STEP_ID, step.getId()); }	@org.junit.Test public void getStepsByExternalId() { java.util.List<org.ovirt.engine.core.common.job.Step> steps = dao.getStepsByExternalId(org.ovirt.engine.core.dao.StepDaoTest.IN_PROGRESS_REBALANCING_GLUSTER_VOLUME_TASK_ID); assertEquals("Verify Rebalancing Gluster Volume Job has steps", org.ovirt.engine.core.dao.StepDaoTest.TOTAL_STEPS_OF_REBALANCING_GLUSTER_VOLUME, steps.size()); org.ovirt.engine.core.common.job.Step step = steps.get(0); assertEquals("Verify the Step Type status", StepEnum.REBALANCING_VOLUME, step.getStepType()); assertEquals("Verify the Step status", JobExecutionStatus.STARTED, step.getStatus()); assertEquals("Invalid Step", org.ovirt.engine.core.dao.StepDaoTest.REBALANCING_GLUSTER_VOLUME_STEP_ID, step.getId()); }
@org.junit.Test public void testNfsOptions() { newServerConnection.setNfsVersion(NfsVersion.V4); newServerConnection.setNfsRetrans(((short) (5))); dao.save(newServerConnection); org.ovirt.engine.core.common.businessentities.StorageServerConnections result = dao.get(newServerConnection.getId()); assertEquals(<START_MOD>NfsVersion.V4, <END_MOD>result.getNfsVersion()<START_MOD>); assertTrue(((result.getNfsRetrans()) == 5)); assertNull(result.getNfsTimeo()); result = dao.get(existingNfsAutoConnection.getId()); assertEquals(NfsVersion.AUTO<END_MOD>, <START_MOD>result.getNfsVersion()<END_MOD>); assertTrue(((result.getNfsRetrans()) == <START_MOD>7)); assertTrue((<END_MOD>(result.getNfsTimeo())<START_MOD> == 42))<END_MOD>; result = dao.get(<START_MOD>existingConnection<END_MOD>.getId()); <START_MOD>assertNull<END_MOD>(result.getNfsVersion()<START_MOD>); assertNull<END_MOD>(result.getNfsRetrans())<START_MOD>; assertNull<END_MOD>(result.getNfsTimeo()); }	@org.junit.Test public void testNfsOptions() { newServerConnection.setNfsVersion(NfsVersion.V4); newServerConnection.setNfsRetrans(((short) (5))); dao.save(newServerConnection); org.ovirt.engine.core.common.businessentities.StorageServerConnections result = dao.get(newServerConnection.getId()); assertEquals(NfsVersion.V4, result.getNfsVersion()); assertEquals(java.lang.Short.valueOf(((short) (5))), result.getNfsRetrans()); assertNull(result.getNfsTimeo()); result = dao.get(existingNfsAutoConnection.getId()); assertEquals(NfsVersion.AUTO, result.getNfsVersion()); assertEquals(java.lang.Short.valueOf(((short) (7))), result.getNfsRetrans()); assertEquals(java.lang.Short.valueOf(((short) (42))), result.getNfsTimeo()); result = dao.get(existingConnection.getId()); assertNull(result.getNfsVersion()); assertNull(result.getNfsRetrans()); assertNull(result.getNfsTimeo()); }
public boolean discover() { boolean dbUpdated = false; for (org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBroker broker : externalBrokers) { <START_MOD>java.util.Optional<<END_MOD>org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult<START_MOD>><END_MOD> discoveryResult = broker.runDiscover(); if (discoveryResult<START_MOD>.isPresent()<END_MOD>) { updateDB(broker, discoveryResult<START_MOD>.get()<END_MOD>); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.info( updated for broker {} broker.getId()); dbUpdated = true; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn( returned empty result when talking to broker {} disabling its units broker.getId()); java.util.List<org.ovirt.engine.core.common.scheduling.PolicyUnit> failingPolicyUnits = policyUnitDao.getAll().stream().filter(( unit) -> broker.getId().equals(unit.getBroker())).collect(java.util.stream.Collectors.toList()); markExternalPoliciesAsDisabled(failingPolicyUnits); dbUpdated = true; } } return dbUpdated; }	public boolean discover() { boolean dbUpdated = false; java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult> discoveryResult = broker.runDiscover(); if (discoveryResult.isPresent()) { updateDB(discoveryResult.get()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug("PolicyUnits updated for external broker."); dbUpdated = true; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn("Discovery returned empty result when talking to broker. Disabling external units"); java.util.List<org.ovirt.engine.core.common.scheduling.PolicyUnit> failingPolicyUnits = policyUnitDao.getAll().stream().collect(java.util.stream.Collectors.toList()); markExternalPoliciesAsDisabled(failingPolicyUnits); dbUpdated = true; } return dbUpdated; }
private void sortFilters(<START_MOD>@javax.validation.constraints.NotNull <END_MOD>java.util.ArrayList<org.ovirt.engine.core.compat.Guid> filters, <START_MOD>@javax.validation.constraints.NotNull <END_MOD>final java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> filterPositionMap) { java.util.Collections.sort(filters, new java.util.Comparator<org.ovirt.engine.core.compat.Guid>() { @java.lang.Override public int compare(<START_MOD>@javax.validation.constraints.NotNull <END_MOD>org.ovirt.engine.core.compat.Guid filter1, <START_MOD>@javax.validation.constraints.NotNull <END_MOD>org.ovirt.engine.core.compat.Guid filter2) { java.lang.Integer position1 = getPosition(filterPositionMap.get(filter1)); java.lang.Integer position2 = getPosition(filterPositionMap.get(filter2)); return position1 - position2; } private java.lang.Integer getPosition(java.lang.Integer position) { if (position == null) { position = 0; } return position; } }); }	private void sortFilters(@javax.validation.constraints.NotNull java.util.ArrayList<org.ovirt.engine.core.compat.Guid> filters, @javax.validation.constraints.NotNull final java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> filterPositionMap) { java.util.Collections.sort(filters, new java.util.Comparator<org.ovirt.engine.core.compat.Guid>() { @java.lang.Override public int compare(org.ovirt.engine.core.compat.Guid filter1, org.ovirt.engine.core.compat.Guid filter2) { java.lang.Integer position1 = getPosition(filterPositionMap.get(filter1)); java.lang.Integer position2 = getPosition(filterPositionMap.get(filter2)); return position1 - position2; } private java.lang.Integer getPosition(java.lang.Integer position) { if (position == null) { position = 0; } return position; } }); }
private void sendToDb(org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBroker broker, org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryUnit discovery, org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit, org.ovirt.engine.core.common.scheduling.PolicyUnitType type) { org.ovirt.engine.core.common.scheduling.PolicyUnit policy = createFromDiscoveryUnit(discovery, type); if ((policyUnit != null) && ((policyUnit.getBroker()) != null)) { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn( unit {} already reported by broker {} policyUnit.getName(), broker.getId()); } policy.setBroker(broker.getId()); if ((policyUnit != null) && ((policyUnit.getId()) != null)) { policy.setId(policyUnit.getId()); policyUnitDao.update(policy); } else { policy.setId(org.ovirt.engine.core.compat.Guid.newGuid()); policyUnitDao.save(policy); } }	@javax.validation.constraints.NotNull private org.ovirt.engine.core.common.scheduling.PolicyUnit sendToDb(org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryUnit discovery, org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit, org.ovirt.engine.core.common.scheduling.PolicyUnitType type) { org.ovirt.engine.core.common.scheduling.PolicyUnit policy = createFromDiscoveryUnit(discovery, type); if (policyUnit != null) { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn("Policy unit {} already reported by broker.", policyUnit.getName()); } if ((policyUnit != null) && ((policyUnit.getId()) != null)) { policy.setId(policyUnit.getId()); policyUnitDao.update(policy); } else { policy.setId(org.ovirt.engine.core.compat.Guid.newGuid()); policyUnitDao.save(policy); } return policy; }
@java.lang.Override public int compare(<START_MOD>@javax.validation.constraints.NotNull <END_MOD>org.ovirt.engine.core.compat.Guid filter1,<START_MOD> @javax.validation.constraints.NotNull<END_MOD> org.ovirt.engine.core.compat.Guid filter2) { java.lang.Integer position1 = getPosition(filterPositionMap.get(filter1)); java.lang.Integer position2 = getPosition(filterPositionMap.get(filter2)); return position1 - position2; }	@java.lang.Override public int compare(org.ovirt.engine.core.compat.Guid filter1, org.ovirt.engine.core.compat.Guid filter2) { java.lang.Integer position1 = getPosition(filterPositionMap.get(filter1)); java.lang.Integer position2 = getPosition(filterPositionMap.get(filter2)); return position1 - position2; }
private <START_MOD>java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.BalanceResult<END_MOD>> externalRunBalance(org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl policyUnit, org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts) { java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { hostIDs.add(vds.getId()); } for (org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBroker broker : externalBrokers) { <START_MOD>java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.BalanceResult<END_MOD>> balanceResult = broker.runBalance(policyUnit.getPolicyUnit().getName(), hostIDs, cluster.getClusterPolicyProperties()); if (balanceResult<START_MOD>.isPresent()<END_MOD>) { return balanceResult; } } org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.warn( <START_MOD>external schedulers<END_MOD> returned empty balancing result. return <START_MOD>java.util.Optional.empty()<END_MOD>; }	private java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.BalanceResult> externalRunBalance(org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl policyUnit, org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts) { java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { hostIDs.add(vds.getId()); } java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.BalanceResult> balanceResult = externalBroker.runBalance(policyUnit.getPolicyUnit().getName(), hostIDs, cluster.getClusterPolicyProperties()); if (balanceResult.isPresent()) { return balanceResult; } org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.warn("All external schedulers returned empty balancing result."); return java.util.Optional.empty(); }
<START_MOD>@javax.validation.constraints.NotNull <END_MOD>private java.util.List<org.ovirt.engine.core.common.businessentities.VDS> runExternalFilters(<START_MOD>@javax.validation.constraints.NotNull <END_MOD>java.util.ArrayList<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl> filters, <START_MOD>@javax.validation.constraints.NotNull <END_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList, <START_MOD>@javax.validation.constraints.NotNull <END_MOD>org.ovirt.engine.core.common.businessentities.VM vm, <START_MOD>@javax.validation.constraints.NotNull <END_MOD>java.util.Map<java.lang.String, java.lang.String> parameters, <START_MOD>@javax.validation.constraints.NotNull <END_MOD>java.util.List<java.lang.String> messages, <START_MOD>@javax.validation.constraints.NotNull <END_MOD>java.lang.String correlationId, <START_MOD>@javax.validation.constraints.NotNull <END_MOD>org.ovirt.engine.core.bll.scheduling.SchedulingManager.SchedulingResult result) { <START_MOD>java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs = hostList.stream().map(VDS::getId).collect(java.util.stream.Collectors.toList()); for (final org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBroker broker : externalBrokers) { java.util.List<java.lang.String> filterNames = <END_MOD>filters<START_MOD>.stream().filter(( f) -> f.getPolicyUnit().getBroker().equals(broker.getId())).map(( f) -> f.getPolicyUnit().getName()).collect(java.util.stream.Collectors.toList());<END_MOD> java.util.List<org.ovirt.engine.core.compat.Guid> <START_MOD>filteredIDs = broker.runFilters(filterNames, <END_MOD>hostIDs<START_MOD>, vm.getId(), parameters); logFilterActions(hostList, new java.util.HashSet(filteredIDs), EngineMessage.VAR__FILTERTYPE__EXTERNAL, java.util.Arrays.toString(filterNames.toArray()), result, correlationId); hostList<END_MOD> = <START_MOD>intersectHosts(hostList, filteredIDs<END_MOD>); } return hostList; }	@javax.validation.constraints.NotNull private java.util.List<org.ovirt.engine.core.common.businessentities.VDS> runExternalFilters(@javax.validation.constraints.NotNull java.util.ArrayList<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl> filters, @javax.validation.constraints.NotNull java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList, @javax.validation.constraints.NotNull org.ovirt.engine.core.common.businessentities.VM vm, @javax.validation.constraints.NotNull java.util.Map<java.lang.String, java.lang.String> parameters, @javax.validation.constraints.NotNull java.util.List<java.lang.String> messages, @javax.validation.constraints.NotNull java.lang.String correlationId, @javax.validation.constraints.NotNull org.ovirt.engine.core.bll.scheduling.SchedulingManager.SchedulingResult result) { java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs = hostList.stream().map(VDS::getId).collect(java.util.stream.Collectors.toList()); java.util.List<java.lang.String> filterNames = filters.stream().filter(( f) -> !(f.getPolicyUnit().isInternal())).map(( f) -> f.getPolicyUnit().getName()).collect(java.util.stream.Collectors.toList()); java.util.List<org.ovirt.engine.core.compat.Guid> filteredIDs = externalBroker.runFilters(filterNames, hostIDs, vm.getId(), parameters); logFilterActions(hostList, new java.util.HashSet(filteredIDs), EngineMessage.VAR__FILTERTYPE__EXTERNAL, java.util.Arrays.toString(filterNames.toArray()), result, correlationId); hostList = intersectHosts(hostList, filteredIDs); return hostList; }
@org.junit.Test public void canRunForHostedEngine() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VM hostedEngine = new org.ovirt.engine.core.common.businessentities.VM(); hostedEngine.setOrigin(OriginType.MANAGED_HOSTED_ENGINE); when(underTest.getVm()).thenReturn(hostedEngine); assertThat(underTest.canRunActionOnNonManagedVm()).isTrue(); }	@org.junit.Test public void canRunForHostedEngine() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VM hostedEngine = new org.ovirt.engine.core.common.businessentities.VM(); hostedEngine.setOrigin(OriginType.MANAGED_HOSTED_ENGINE); when(underTest.getVm()).thenReturn(hostedEngine); org.junit.Assert.assertTrue(underTest.canRunActionOnNonManagedVm()); }
public void loadService(java.lang.Class<? extends org.ovirt.engine.core.common.BackendService> service) { org.ovirt.engine.core.common.BackendService backendService = services.select(service).get(); org.ovirt.engine.core.bll.ServiceLoader.log.info("Start {} ", backendService); backendService.onServiceLoad(); }	public void loadService(java.lang.Class<? extends org.ovirt.engine.core.common.BackendService> service) { org.ovirt.engine.core.common.BackendService backendService = services.select(service).get(); org.ovirt.engine.core.bll.ServiceLoader.log.info("Start {} ", backendService); }
boolean delayNextTimeToRun(java.util.Date timeToRunTheVm) { this.timeToRunTheVm = timeToRunTheVm; return (++(numOfSkips)) < (org.ovirt.engine.core.bll.AutoStartVmsRunner.AutoStartVmToRestart.MAXIMUM_NUM_OF_SKIPS_BEFORE_AUTO_START_VM); }	boolean delayNextTimeToRun(java.util.Date timeToRunTheVm) { this.timeToRunTheVm = timeToRunTheVm; (numOfSkips)++; numOfSkips %= org.ovirt.engine.core.bll.AutoStartVmsRunner.AutoStartVmToRestart.MAXIMUM_NUM_OF_SKIPS_BEFORE_AUTO_START_VM; return (numOfSkips) != 0; }
<START_MOD>private<END_MOD> static <START_MOD>boolean<END_MOD> <START_MOD>checkPermissions<END_MOD>(org.ovirt.engine.core.<START_MOD>compat<END_MOD>.<START_MOD>Guid<END_MOD> <START_MOD>cpuProfileId<END_MOD>, org.ovirt.engine.core.compat.Guid userId) { <START_MOD>return<END_MOD> (<START_MOD>userId<END_MOD> == null) <START_MOD>||<END_MOD> <START_MOD>((<END_MOD>org.ovirt.engine.core.bll.profiles.CpuProfileHelper.<START_MOD>getPermissionDao<END_MOD>().<START_MOD>getEntityPermissions<END_MOD>(userId, ActionGroup.ASSIGN_CPU_PROFILE<START_MOD>, cpuProfileId, VdcObjectType<END_MOD>.<START_MOD>CpuProfile<END_MOD>)) <START_MOD>!=<END_MOD> null); }	private static boolean isProfilePermitted(org.ovirt.engine.core.compat.Guid cpuProfileId, org.ovirt.engine.core.compat.Guid userId) { return (userId == null) || ((org.ovirt.engine.core.bll.profiles.CpuProfileHelper.getPermissionDao().getEntityPermissions(userId, ActionGroup.ASSIGN_CPU_PROFILE, cpuProfileId, VdcObjectType.CpuProfile)) != null); }
public org.ovirt.engine.core.bll.ValidationResult setAndValidateCpuProfile(org.ovirt.engine.core.common.businessentities.VmBase vmBase, org.ovirt.engine.core.compat.Guid userId) { if ((vmBase.getCpuProfileId()) == null) { return <START_MOD>assignFirstCpuProfile(vmBase, userId); } org.ovirt.engine.core.compat.Guid clusterId = vmBase.getClusterId(); if (clusterId == null) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_CPU_PROFILE_CLUSTER_NOT_PROVIDED); } org.ovirt.engine.core.common.businessentities<END_MOD>.profiles.<START_MOD>CpuProfile fetchedCpuProfile<END_MOD> = <START_MOD>cpuProfileDao.get(vmBase.getCpuProfileId()); if (fetchedCpuProfile == null) { return <END_MOD>new org.ovirt.engine.core.bll.<START_MOD>ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CPU_PROFILE_NOT_FOUND); } if (!(clusterId.equals(fetchedCpuProfile<END_MOD>.getClusterId())<START_MOD>)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_CPU_PROFILE_NOT_MATCH_CLUSTER); }<END_MOD> if (!(checkPermissions(vmBase.getCpuProfileId(), userId))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_NO_PERMISSION_TO_ASSIGN_CPU_PROFILE, java.lang.String.format( %s vmBase.getCpuProfileId()), java.lang.String.format( %s <START_MOD>fetchedCpuProfile<END_MOD>.getName())); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult setAndValidateCpuProfile(org.ovirt.engine.core.common.businessentities.VmBase vmBase, org.ovirt.engine.core.compat.Guid userId) { if ((vmBase.getCpuProfileId()) == null) { return assignFirstCpuProfile(vmBase, userId); } org.ovirt.engine.core.compat.Guid clusterId = vmBase.getClusterId(); if (clusterId == null) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_CPU_PROFILE_CLUSTER_NOT_PROVIDED); } org.ovirt.engine.core.common.businessentities.profiles.CpuProfile fetchedCpuProfile = cpuProfileDao.get(vmBase.getCpuProfileId()); if (fetchedCpuProfile == null) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CPU_PROFILE_NOT_FOUND); } if (!(clusterId.equals(fetchedCpuProfile.getClusterId()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_CPU_PROFILE_NOT_MATCH_CLUSTER); } if (!(isProfilePermitted(vmBase.getCpuProfileId(), userId))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_NO_PERMISSION_TO_ASSIGN_CPU_PROFILE, java.lang.String.format("$cpuProfileId %s", vmBase.getCpuProfileId()), java.lang.String.format("$cpuProfileName %s", fetchedCpuProfile.getName())); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public static org.ovirt.engine.core.bll.ValidationResult setAndValidateCpuProfile(org.ovirt.engine.core.common.businessentities.VmBase vmBase<START_MOD>, org.ovirt.engine.core.compat.Guid userId<END_MOD>) { if ((vmBase.getCpuProfileId()) == null) { return org.ovirt.engine.core.bll.profiles.CpuProfileHelper.assignFirstCpuProfile(vmBase, <START_MOD>userId<END_MOD>); } <START_MOD>org.ovirt.engine.core.bll.profiles.CpuProfileValidator validator = new org.ovirt.engine.core.bll.profiles.CpuProfileValidator(vmBase.getCpuProfileId()); org.ovirt.engine.core.bll.ValidationResult result = validator.isParentEntityValid(vmBase.getClusterId()); if (!(result.isValid()))<END_MOD> { return <START_MOD>result; } if (!(org.ovirt.engine.core.bll.profiles.CpuProfileHelper.checkPermissions(vmBase.getCpuProfileId(), userId))) { return <END_MOD>new org.ovirt.engine.core.bll.<START_MOD>ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_NO_PERMISSION_TO_ASSIGN_CPU_PROFILE, java.lang.String.format( %s <END_MOD>vmBase.getCpuProfileId())<START_MOD>, java.lang.String.format( %s validator.getProfile().getName()<END_MOD>)); } <START_MOD>return org.ovirt.engine.core.bll.ValidationResult.VALID; <END_MOD>}	public static org.ovirt.engine.core.bll.ValidationResult setAndValidateCpuProfile(org.ovirt.engine.core.common.businessentities.VmBase vmBase, org.ovirt.engine.core.compat.Guid userId) { if ((vmBase.getCpuProfileId()) == null) { return org.ovirt.engine.core.bll.profiles.CpuProfileHelper.assignFirstCpuProfile(vmBase, userId); } org.ovirt.engine.core.bll.profiles.CpuProfileValidator validator = new org.ovirt.engine.core.bll.profiles.CpuProfileValidator(vmBase.getCpuProfileId()); org.ovirt.engine.core.bll.ValidationResult result = validator.isParentEntityValid(vmBase.getClusterId()); if (!(result.isValid())) { return result; } if (!(org.ovirt.engine.core.bll.profiles.CpuProfileHelper.isProfilePermitted(vmBase.getCpuProfileId(), userId))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_NO_PERMISSION_TO_ASSIGN_CPU_PROFILE, java.lang.String.format("$cpuProfileId %s", vmBase.getCpuProfileId()), java.lang.String.format("$cpuProfileName %s", validator.getProfile().getName())); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private boolean checkPermissions(org.ovirt.engine.core.compat.Guid cpuProfileId, org.ovirt.engine.core.compat.Guid userId) { return (userId == null) || ((<START_MOD>permissionDao<END_MOD>.getEntityPermissions(userId, ActionGroup.ASSIGN_CPU_PROFILE, cpuProfileId, VdcObjectType.CpuProfile)) != null); }	private boolean isProfilePermitted(org.ovirt.engine.core.compat.Guid cpuProfileId, org.ovirt.engine.core.compat.Guid userId) { return (userId == null) || ((permissionDao.getEntityPermissions(userId, ActionGroup.ASSIGN_CPU_PROFILE, cpuProfileId, VdcObjectType.CpuProfile)) != null); }
private static org.ovirt.engine.core.common.businessentities.profiles.DiskProfile getDiskProfileByStorageDomainAndImage(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage, org.ovirt.engine.core.compat.Guid storageDomainId) { if ((diskImage.getDiskProfileIds().size()) > 1) { java.util.List<org.ovirt.engine.core.compat.Guid> diskProfileIds = diskImage.getDiskProfileIds(); java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> diskProfilesListByStorageDomain = org.ovirt.engine.core.bll.profiles.DiskProfileHelper.getDiskProfileDao().getAllForStorageDomain(storageDomainId); java.util.List<org.ovirt.engine.core.compat.Guid> filteredDiskProfileIdsList = diskProfileIds.stream().filter(( id) -> diskProfilesListByStorageDomain.stream().map(( diskProfile) -> diskProfile.getId()).collect(java.util.stream.Collectors.toList()).contains(id)).collect(java.util.stream.Collectors.toList()); diskImage.setDiskProfileIds(new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(filteredDiskProfileIdsList)); } return org.ovirt.engine.core.bll.profiles.DiskProfileHelper.getDiskProfileDao().get(diskImage.getDiskProfileId()); }	public org.ovirt.engine.core.bll.ValidationResult isDiskProfileParentEntityValid(org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile, org.ovirt.engine.core.compat.Guid storageDomainId) { return new org.ovirt.engine.core.bll.profiles.DiskProfileValidator(diskProfile).isParentEntityValid(storageDomainId); }
@org.junit.Test public void setAndValidateWithoutDiskProfilesTest() { diskImage = createDisk(); map.clear(); map.put(diskImage, org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_1); assertEquals(diskProfileHelper.setAndValidateDiskProfiles(map, null), ValidationResult.VALID); }	@org.junit.Test public void setAndValidateWithoutDiskProfilesTest() { map.put(diskImage, org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_1); assertEquals(diskProfileHelper.setAndValidateDiskProfiles(map, dbUser), ValidationResult.VALID); }
private <START_MOD>void updateDiskImageProfilesList(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage, org.ovirt.engine.core.compat.Guid storageDomainId<END_MOD>) { <START_MOD>java.util.List<org.ovirt.engine.core.compat.Guid> diskProfileIds = diskImage.getDiskProfileIds(); java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> diskProfilesListByStorageDomain = diskProfileDao.getAllForStorageDomain(storageDomainId); java.util.Optional<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> match = diskProfilesListByStorageDomain.stream().filter(( profile) -> diskProfileIds.contains(profile.getId())).findFirst(); if (match.isPresent()) { diskImage.setDiskProfileIds(new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(java.util.Arrays.asList(match.get().getId()))<END_MOD>); }<START_MOD> }<END_MOD>	private org.ovirt.engine.core.common.businessentities.profiles.DiskProfile updateDiskImageProfilesList(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage, org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.aaa.DbUser user) { org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile = null; if (storageDomainId != null) { java.util.List<org.ovirt.engine.core.compat.Guid> diskProfileIds = diskImage.getDiskProfileIds(); java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> diskProfilesListByStorageDomain = diskProfileDao.getAllForStorageDomain(storageDomainId, user.getId(), true); java.util.Optional<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> match = diskProfilesListByStorageDomain.stream().filter(( profile) -> diskProfileIds.contains(profile.getId())).findFirst(); if (match.isPresent()) { diskProfile = match.get(); diskImage.setDiskProfileIds(new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(java.util.Arrays.asList(diskProfile.getId()))); } } return diskProfile; }
@org.junit.Test public void setAndValidateMultipleStorageDomainsAndDiskProfilesTest() { diskImage = createDisk(); diskImage.setDiskProfileIds(new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(java.util.Arrays.asList(diskProfile_a.getId(), diskProfile_b.getId()))); map.clear(); map.put(diskImage, org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_1); assertEquals(diskProfileHelper.setAndValidateDiskProfiles(map, null), ValidationResult.VALID); map.clear(); map.put(diskImage, org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_2); assertEquals(diskProfileHelper.setAndValidateDiskProfiles(map, null), ValidationResult.VALID); }	@org.junit.Test public void setAndValidateMultipleStorageDomainsAndDiskProfilesTest() { diskImage.setDiskProfileIds(new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(java.util.Arrays.asList(diskProfile_a.getId(), diskProfile_b.getId()))); map.put(diskImage, org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_1); assertEquals(diskProfileHelper.setAndValidateDiskProfiles(map, dbUser), ValidationResult.VALID); diskImage.setDiskProfileIds(new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(java.util.Arrays.asList(diskProfile_a.getId(), diskProfile_b.getId()))); map.clear(); map.put(diskImage, org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_2); assertEquals(diskProfileHelper.setAndValidateDiskProfiles(map, dbUser), ValidationResult.VALID); map.clear(); }
@org.junit.Before public void setUp() { diskProfile_a = diskProfileHelper.createDiskProfile(org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_1, "disk_profile_A"); diskProfile_b = diskProfileHelper.createDiskProfile(org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_2, "disk_profile_B"); diskProfileDao.save(diskProfile_a); diskProfileDao.save(diskProfile_b); when(diskProfileHelper.isDiskProfileParentEntityValid(anyObject(), anyObject())).thenReturn(ValidationResult.VALID); doReturn(org.ovirt.engine.core.compat.Guid.newGuid()).when(permissionDao).getEntityPermissions(anyObject(), anyObject(), anyObject(), anyObject()); doReturn(java.util.Arrays.asList(diskProfile_a)).when(diskProfileDao).getAllForStorageDomain(org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_1); doReturn(java.util.Arrays.asList(diskProfile_b)).when(diskProfileDao).getAllForStorageDomain(org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_2); }	@org.junit.Before public void setUp() { dbUser = new org.ovirt.engine.core.common.businessentities.aaa.DbUser(); dbUser.setId(org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.USER_ENTITY_ID); diskProfile_a = diskProfileHelper.createDiskProfile(org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_1, "disk_profile_A"); diskProfile_b = diskProfileHelper.createDiskProfile(org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_2, "disk_profile_B"); diskImage = createDisk(); map.clear(); when(diskProfileHelper.isDiskProfileParentEntityValid(anyObject(), anyObject())).thenReturn(ValidationResult.VALID); doReturn(org.ovirt.engine.core.compat.Guid.newGuid()).when(permissionDao).getEntityPermissions(anyObject(), anyObject(), anyObject(), anyObject()); doReturn(java.util.Arrays.asList(diskProfile_a)).when(diskProfileDao).getAllForStorageDomain(org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_1); doReturn(java.util.Arrays.asList(diskProfile_b)).when(diskProfileDao).getAllForStorageDomain(org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_2); doReturn(java.util.Arrays.asList(diskProfile_a)).when(diskProfileDao).getAllForStorageDomain(org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_1, org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.USER_ENTITY_ID, true); doReturn(java.util.Arrays.asList(diskProfile_b)).when(diskProfileDao).getAllForStorageDomain(org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_2, org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.USER_ENTITY_ID, true); }
@org.junit.Test public void setAndValidateSingleProfileTest() { diskImage = createDisk(); diskImage.setDiskProfileId(diskProfile_a.getId()); map.clear(); map.put(diskImage, org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_1); assertEquals(diskProfileHelper.setAndValidateDiskProfiles(map, null), ValidationResult.VALID); }	@org.junit.Test public void setAndValidateSingleProfileTest() { diskImage.setDiskProfileId(diskProfile_a.getId()); map.put(diskImage, org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_1); assertEquals(diskProfileHelper.setAndValidateDiskProfiles(map, dbUser), ValidationResult.VALID); }
@java.lang.Override public java.lang.String getMessage() { return java.lang.String.format( (Failed with error %1$s and code %2$s) <START_MOD>super.getMessage(), <END_MOD>privateVdsError.getCode(), privateVdsError.getCode().getValue()); }	@java.lang.Override public java.lang.String getMessage() { return java.lang.String.format("%1$s (Failed with error %2$s and code %3$s)", super.getMessage(), privateVdsError.getCode(), privateVdsError.getCode().getValue()); }
<START_MOD>private<END_MOD> java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> <START_MOD>getLunsToUpdateInDb(org.ovirt.engine.core.compat.Guid lunFromVgLunId, org.ovirt.engine.core.compat.Guid lunFromDbLunId, org.ovirt.engine.core.compat.Guid lunFromVgPvId, org.ovirt.engine.core.compat.Guid lunFromDbPvId) { org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromVG<END_MOD> = <START_MOD>new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lunFromVG.setLUNId(lunFromVgLunId.toString()); lunFromVG.setPhysicalVolumeId(lunFromVgPvId.toString()); org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDB<END_MOD> = <START_MOD>new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lunFromDB.setLUNId(lunFromDbLunId.toString()); lunFromDB.setPhysicalVolumeId(lunFromDbPvId.toString()); return <END_MOD>getLunsToUpdateInDb(<START_MOD>lunFromVG, lunFromDB<END_MOD>); }	private java.util.Map<java.util.function.Consumer<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>>, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb(org.ovirt.engine.core.compat.Guid lunFromVgLunId, org.ovirt.engine.core.compat.Guid lunFromDbLunId, org.ovirt.engine.core.compat.Guid lunFromVgPvId, org.ovirt.engine.core.compat.Guid lunFromDbPvId) { org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromVG = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lunFromVG.setLUNId(lunFromVgLunId.toString()); lunFromVG.setPhysicalVolumeId(lunFromVgPvId.toString()); org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDB = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lunFromDB.setLUNId(lunFromDbLunId.toString()); lunFromDB.setPhysicalVolumeId(lunFromDbPvId.toString()); return getLunsToUpdateInDb(lunFromVG, lunFromDB); }
@org.junit.Test public void testGetLunsToUpdateInDbSameLunIdDiffPvId() { org.ovirt.engine.core.compat.Guid lunId = org.ovirt.engine.core.compat.Guid.newGuid(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToUpdateInDb = getLunsToUpdateInDb(lunId, lunId, org.ovirt.engine.core.compat.Guid.newGuid(), org.ovirt.engine.core.compat.Guid.newGuid()); assertTrue(java.util.Objects.equals(lunsToUpdateInDb.stream().map(LUNs::getLUNId).findFirst().orElse(null), lunId.toString())); }	@org.junit.Test public void testGetLunsToUpdateInDbSameLunIdDiffPvId() { org.ovirt.engine.core.compat.Guid lunId = org.ovirt.engine.core.compat.Guid.newGuid(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> existingLunsToUpdateInDb = getLunsToUpdateInDb(lunId, lunId, org.ovirt.engine.core.compat.Guid.newGuid(), org.ovirt.engine.core.compat.Guid.newGuid()).get(command.updateExistingLuns); assertLunIdInList(existingLunsToUpdateInDb, lunId); }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsToUpdateInDb(org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromVG, org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDB) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = java.util.Collections.singletonList(lunFromVG); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = java.util.Collections.singletonList(lunFromDB); return command.getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); }	private void assertLunIdInList(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns, org.ovirt.engine.core.compat.Guid requestedLunId) { assertEquals(luns.stream().map(LUNs::getLUNId).findAny().orElse(null), requestedLunId.toString()); }
@org.junit.Test public void <START_MOD>testGetLunsToUpdateInDbDiffDeviceSize<END_MOD>() { org.ovirt.engine.core.compat.Guid pvID = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.compat.Guid lunID = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromVG = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lunFromVG.setLUNId(lunID.toString()); lunFromVG.setPhysicalVolumeId(pvID.toString()); lunFromVG.setDeviceSize(20); org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDB = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lunFromDB.setLUNId(lunID.toString()); lunFromDB.setPhysicalVolumeId(pvID.toString()); lunFromDB.setDeviceSize(10); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> <START_MOD>lunsToUpdateInDb = getLunsToUpdateInDb(lunFromVG, lunFromDB); assertTrue(<END_MOD>java.util.<START_MOD>Objects.equals(lunsToUpdateInDb.stream().map(LUNs::getLUNId).findFirst().orElse(null)<END_MOD>, <START_MOD>lunID.toString()<END_MOD>)); }	@org.junit.Test public void testGetLunsToUpdateInDbDiffDeviceSize() { org.ovirt.engine.core.compat.Guid pvID = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.compat.Guid lunID = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromVG = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lunFromVG.setLUNId(lunID.toString()); lunFromVG.setPhysicalVolumeId(pvID.toString()); lunFromVG.setDeviceSize(20); org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDB = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lunFromDB.setLUNId(lunID.toString()); lunFromDB.setPhysicalVolumeId(pvID.toString()); lunFromDB.setDeviceSize(10); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> existingLunsToUpdateInDb = getLunsToUpdateInDb(lunFromVG, lunFromDB).get(command.updateExistingLuns); assertLunIdInList(existingLunsToUpdateInDb, lunID); }
@org.junit.Test public void testGetLunsToUpdateInDbDiffLunIdSamePvId() { org.ovirt.engine.core.compat.Guid pvID = org.ovirt.engine.core.compat.Guid.newGuid(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToUpdateInDb = getLunsToUpdateInDb(org.ovirt.engine.core.compat.Guid.newGuid(), org.ovirt.engine.core.compat.Guid.newGuid(), pvID, pvID); assertTrue(java.util.Objects.equals(lunsToUpdateInDb.stream().map(LUNs::getPhysicalVolumeId).findFirst().orElse(null), pvID.toString())); }	@org.junit.Test public void testGetLunsToUpdateInDbDiffLunIdSamePvId() { org.ovirt.engine.core.compat.Guid pvID = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.compat.Guid lunFromVgLunId = org.ovirt.engine.core.compat.Guid.newGuid(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> newLunsToSaveInDb = getLunsToUpdateInDb(lunFromVgLunId, org.ovirt.engine.core.compat.Guid.newGuid(), pvID, pvID).get(command.saveNewLuns); assertLunIdInList(newLunsToSaveInDb, lunFromVgLunId); }
@org.junit.Test public void <START_MOD>testGetLunsToUpdateInDbDiffLunIdDiffPvId<END_MOD>() { org.ovirt.engine.core.compat.Guid <START_MOD>lunFromVgLunId<END_MOD> = org.ovirt.engine.core.compat.Guid.newGuid(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> <START_MOD>lunsToUpdateInDb<END_MOD> = <START_MOD>getLunsToUpdateInDb<END_MOD>(<START_MOD>lunFromVgLunId,<END_MOD> org.ovirt.engine.core.<START_MOD>compat<END_MOD>.<START_MOD>Guid<END_MOD>.<START_MOD>newGuid(), org<END_MOD>.<START_MOD>ovirt.engine.core.compat.Guid.newGuid(),<END_MOD> <START_MOD>org.ovirt.engine.core.compat.Guid.newGuid());<END_MOD> <START_MOD>assertTrue(<END_MOD>java.util.<START_MOD>Objects<END_MOD>.<START_MOD>equals<END_MOD>(<START_MOD>lunsToUpdateInDb.stream(<END_MOD>).<START_MOD>map<END_MOD>(<START_MOD>LUNs::getLUNId).findFirst().orElse(null)<END_MOD>, <START_MOD>lunFromVgLunId<END_MOD>.<START_MOD>toString<END_MOD>()<START_MOD>)<END_MOD>); }	@org.junit.Test public void testGetLunsToUpdateInDbDiffLunIdDiffPvId() { org.ovirt.engine.core.compat.Guid lunFromVgLunId = org.ovirt.engine.core.compat.Guid.newGuid(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> newLunsToSaveInDb = getLunsToUpdateInDb(lunFromVgLunId, org.ovirt.engine.core.compat.Guid.newGuid(), org.ovirt.engine.core.compat.Guid.newGuid(), org.ovirt.engine.core.compat.Guid.newGuid()).get(command.saveNewLuns); assertLunIdInList(newLunsToSaveInDb, lunFromVgLunId); }
@org.junit.Test public void testGetLunsToUpdateInDbForSameLun() { org.ovirt.engine.core.common.businessentities.storage.LUNs lun = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun.setLUNId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); lun.setPhysicalVolumeId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToUpdateInDb = getLunsToUpdateInDb(lun, lun); assertTrue(lunsToUpdateInDb.isEmpty()); }	@org.junit.Test public void testGetLunsToUpdateInDbForSameLun() { org.ovirt.engine.core.common.businessentities.storage.LUNs lun = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); org.ovirt.engine.core.compat.Guid lunId = org.ovirt.engine.core.compat.Guid.newGuid(); lun.setLUNId(lunId.toString()); lun.setPhysicalVolumeId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> upToDateLuns = getLunsToUpdateInDb(lun, lun).get(command.noOp); assertLunIdInList(upToDateLuns, lunId); }
public void updateHostStatusAfterSuccessfulUpgrade() { org.ovirt.engine.core.common.businessentities.VdsDynamic dynamicHostData = hostDao.get(org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVdsId()); dynamicHostData.setUpdateAvailable(false); hostDao.update(dynamicHostData); if ((org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds().getVdsType()) == (org.ovirt.engine.core.common.businessentities.VDSType.VDS)) { org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.reestablishConnectionIfNeeded(); if ((org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getParameters().getInitialStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance)) { setVdsStatus(VDSStatus.Maintenance); } else { <START_MOD>if (org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds().getHighlyAvailableIsConfigured()) { org.ovirt.engine.core.common.vdscommands.SetHaMaintenanceModeVDSCommandParameters param = new org.ovirt.engine.core.common.vdscommands.SetHaMaintenanceModeVDSCommandParameters(org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds(), org.ovirt.engine.core.common.businessentities.HaMaintenanceMode.LOCAL, false); if (!(runVdsCommand(VDSCommandType.SetHaMaintenanceMode, param).getSucceeded())) { log.error( to set local maintenance mode to none for host '{}' after upgrade has ended. org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVdsName()); } } <END_MOD>setVdsStatus(VDSStatus.Initializing); } } }	public void updateHostStatusAfterSuccessfulUpgrade() { org.ovirt.engine.core.common.businessentities.VdsDynamic dynamicHostData = hostDao.get(org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVdsId()); dynamicHostData.setUpdateAvailable(false); hostDao.update(dynamicHostData); if ((org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds().getVdsType()) == (org.ovirt.engine.core.common.businessentities.VDSType.VDS)) { org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.reestablishConnectionIfNeeded(); if ((org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getParameters().getInitialStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance)) { setVdsStatus(VDSStatus.Maintenance); } else { if (org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds().getHighlyAvailableIsConfigured()) { haMaintenanceFailed = !(hostedEngineHelper.updateHaLocalMaintenanceMode(org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds(), false)); } setVdsStatus(VDSStatus.Initializing); } } }
private void updateStaticFields(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) {<START_MOD> if (vmStatic == null) { return; }<END_MOD> name = vmStatic.getName(); origin = vmStatic.getOrigin(); autoStart = vmStatic.isAutoStartup(); memSizeMb = vmStatic.getMemSizeMb(); minAllocatedMem = vmStatic.getMinAllocatedMem(); numOfCpus = vmStatic.getNumOfCpus(); }	private void updateStaticFields(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { name = vmStatic.getName(); origin = vmStatic.getOrigin(); autoStart = vmStatic.isAutoStartup(); memSizeMb = vmStatic.getMemSizeMb(); minAllocatedMem = vmStatic.getMinAllocatedMem(); numOfCpus = vmStatic.getNumOfCpus(); }
private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.RemoveGlusterHook), <START_MOD>any<END_MOD>(<START_MOD>org.ovirt.engine.core.common.vdscommands.gluster.GlusterHookVDSParameters.class<END_MOD>))).thenReturn(vdsReturnValue); }	private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.RemoveGlusterHook), argThat(anyHookVDS()))).thenReturn(vdsReturnValue); }
private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); doNothing().when(cmd).endStepJobAborted(any(java.lang.String.class)); doNothing().when(cmd).releaseVolumeLock(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } else { vdsReturnValue.setReturnValue(new org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity()); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.StopRemoveGlusterVolumeBricks), <START_MOD>any(org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeVDSParameters.class<END_MOD>))).thenReturn(vdsReturnValue); }	private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); doNothing().when(cmd).endStepJobAborted(any(java.lang.String.class)); doNothing().when(cmd).releaseVolumeLock(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } else { vdsReturnValue.setReturnValue(new org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity()); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.StopRemoveGlusterVolumeBricks), argThat(anyGlusterVolumeVDS()))).thenReturn(vdsReturnValue); }
@java.lang.SuppressWarnings("unchecked") private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); doNothing().when(cmd).endStepJobCommitted(); doNothing().when(cmd).releaseVolumeLock(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.CommitRemoveGlusterVolumeBricks), <START_MOD>any(org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeVDSParameters.class<END_MOD>))).thenReturn(vdsReturnValue); }	@java.lang.SuppressWarnings("unchecked") private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); doNothing().when(cmd).endStepJobCommitted(); doNothing().when(cmd).releaseVolumeLock(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.CommitRemoveGlusterVolumeBricks), argThat(anyGlusterVolumeVDS()))).thenReturn(vdsReturnValue); }
private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); doNothing().when(cmd).startSubStep(); doReturn(asyncTaskToBeReturned).when(cmd).handleTaskReturn(asyncTaskToBeReturned); doNothing().when(cmd).updateBricksWithTaskID(asyncTaskToBeReturned); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setReturnValue(asyncTaskToBeReturned); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.StartRemoveGlusterVolumeBricks), <START_MOD>any(org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeRemoveBricksVDSParameters.class<END_MOD>))).thenReturn(vdsReturnValue); }	private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); doNothing().when(cmd).startSubStep(); doReturn(asyncTaskToBeReturned).when(cmd).handleTaskReturn(asyncTaskToBeReturned); doNothing().when(cmd).updateBricksWithTaskID(asyncTaskToBeReturned); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setReturnValue(asyncTaskToBeReturned); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.StartRemoveGlusterVolumeBricks), argThat(anyGlusterVolumeRemoveBricksVDSParameters()))).thenReturn(vdsReturnValue); }
private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.job.JobExecutionStatus rebalanceStopStatus, boolean isRebalancegTaskCompleted, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); doReturn("TestVDS").when(cmd).getClusterName(); doReturn("TestVolume").when(cmd).getGlusterVolumeName(); doNothing().when(cmd).endStepJob(argThat(jobExecutionStatus(rebalanceStopStatus)), <START_MOD>anyMapOf(java.lang.String.class, java.lang.String.class), eq<END_MOD>(isRebalancegTaskCompleted)); doNothing().when(cmd).releaseVolumeLock(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity rebalanceStatusEntity = new org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity(); rebalanceStatusEntity.getStatusSummary().setStatus(rebalanceStopStatus); vdsReturnValue.setReturnValue(rebalanceStatusEntity); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.StopRebalanceGlusterVolume), <START_MOD>any(org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeVDSParameters.class<END_MOD>))).thenReturn(vdsReturnValue); }	private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.job.JobExecutionStatus rebalanceStopStatus, boolean isRebalancegTaskCompleted, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); doReturn("TestVDS").when(cmd).getClusterName(); doReturn("TestVolume").when(cmd).getGlusterVolumeName(); doNothing().when(cmd).endStepJob(argThat(jobExecutionStatus(rebalanceStopStatus)), argThat(anyMap()), booleanThat(booleanMatcher(isRebalancegTaskCompleted))); doNothing().when(cmd).releaseVolumeLock(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity rebalanceStatusEntity = new org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity(); rebalanceStatusEntity.getStatusSummary().setStatus(rebalanceStopStatus); vdsReturnValue.setReturnValue(rebalanceStatusEntity); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.StopRebalanceGlusterVolume), argThat(anyHookVDS()))).thenReturn(vdsReturnValue); }
@org.junit.runners.Parameterized.Parameters public static java.util.Collection<java.lang.Object[]> ipAddressParams() { return java.util.Arrays.asList(new java.lang.Object[][]{ new java.lang.Object[]{ new java.util.HashSet<java.lang.String>(), true }, new java.lang.Object[]{ null, true }, new java.lang.Object[]{ new java.util.HashSet<>(java.util.<START_MOD>Collections.singletonList("abc")), true }, new java.lang.Object[]{ new java.util.HashSet<>(java.util.<END_MOD>Arrays.asList("abc"<START_MOD>, "xyz")), true }, new java.lang.Object[]{ new java.util.HashSet<>(java.util.Collections.singletonList("abc-_sc")), true }, new java.lang.Object[]{ new java.util.HashSet<>(java.util.Collections.singletonList("")), false }, new java.lang.Object[]{ new java.util.HashSet<>(java.util.Collections.singletonList(   false }, new java.lang.Object[]{ new java.util.HashSet<>(java.util.Collections.singletonList("abc*")), false<END_MOD> }, new java.lang.Object[]{ new java.util.HashSet<>(java.util.Arrays.asList(<START_MOD>"aaa", "abc*"<END_MOD>)), false } }); }	@org.junit.runners.Parameterized.Parameters public static java.util.Collection<java.lang.Object[]> ipAddressParams() { return java.util.Arrays.asList(new java.lang.Object[][]{ new java.lang.Object[]{ java.util.Collections.emptySet(), true }, new java.lang.Object[]{ null, true }, new java.lang.Object[]{ java.util.Collections.singleton("abc"), true }, new java.lang.Object[]{ new java.util.HashSet<>(java.util.Arrays.asList("abc", "xyz")), true }, new java.lang.Object[]{ java.util.Collections.singleton("abc-_sc"), true }, new java.lang.Object[]{ java.util.Collections.singleton(""), false }, new java.lang.Object[]{ java.util.Collections.singleton(" "), false }, new java.lang.Object[]{ java.util.Collections.singleton("abc*"), false }, new java.lang.Object[]{ new java.util.HashSet<>(java.util.Arrays.asList("aaa", "abc*")), false } }); }
private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.UpdateGlusterHook), <START_MOD>any<END_MOD>(<START_MOD>org.ovirt.engine.core.common.vdscommands.gluster.GlusterHookVDSParameters.class<END_MOD>))).thenReturn(vdsReturnValue); }	private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.UpdateGlusterHook), argThat(anyHookVDS()))).thenReturn(vdsReturnValue); }
private void mockDiskImageDao() { when(diskImageDao.getSnapshotById(org.mockito.Matchers.any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(org.ovirt.engine.core.bll.CommonVmPoolCommandTestAbstract.getDiskImageList().get(0)); }	private void mockDiskImageDao() { when(diskImageDao.getSnapshotById(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(org.ovirt.engine.core.bll.CommonVmPoolCommandTestAbstract.getDiskImageList().get(0)); }
@org.junit.Test public void testGetAvailableValues() { setSomeValue("Anakin"); java.util.Map<java.lang.String, java.lang.String> values = new java.util.HashMap<>(); java.util.Set<java.lang.String> properties = new java.util.HashSet<>(java.util.<START_MOD>Collections<END_MOD>.<START_MOD>singletonList<END_MOD>("somevalue")); org.ovirt.engine.core.compat.backendcompat.TypeCompat.getPropertyValues(this, properties, values); assertFalse(properties.isEmpty()); assertEquals("Standard", "Anakin", values.get("somevalue")); }	@org.junit.Test public void testGetAvailableValues() { setSomeValue("Anakin"); java.util.Map<java.lang.String, java.lang.String> values = new java.util.HashMap<>(); java.util.Set<java.lang.String> properties = java.util.Collections.singleton("somevalue"); org.ovirt.engine.core.compat.backendcompat.TypeCompat.getPropertyValues(this, properties, values); assertFalse(properties.isEmpty()); assertEquals("Standard", "Anakin", values.get("somevalue")); }
private void mockGetImagesList() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); returnValue.setReturnValue(new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>()); when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.GetImagesList), org.mockito.Matchers.any(org.ovirt.engine.core.common.vdscommands.VDSParametersBase.class))).thenReturn(returnValue); }	private void mockGetImagesList() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); returnValue.setReturnValue(new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>()); when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.GetImagesList), any(org.ovirt.engine.core.common.vdscommands.VDSParametersBase.class))).thenReturn(returnValue); }
@org.junit.Test public void executeCommand() { cmd = spy(createTestCommand(volumeWithRebalanceTask)); prepareMocks(cmd); mockBackend(true, JobExecutionStatus.ABORTED, false, null); assertTrue(cmd.validate()); cmd.executeCommand(); verify(cmd).endStepJob(argThat(jobExecutionStatus(JobExecutionStatus.ABORTED)), <START_MOD>anyMapOf<END_MOD>(<START_MOD>java.lang.String.class, java.lang.String.class<END_MOD>), <START_MOD>eq<END_MOD>(false)); verify(cmd).releaseVolumeLock(); assertEquals(AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP, cmd.getAuditLogTypeValue()); }	@org.junit.Test public void executeCommand() { cmd = spy(createTestCommand(volumeWithRebalanceTask)); prepareMocks(cmd); mockBackend(true, JobExecutionStatus.ABORTED, false, null); assertTrue(cmd.validate()); cmd.executeCommand(); verify(cmd).endStepJob(argThat(jobExecutionStatus(JobExecutionStatus.ABORTED)), argThat(anyMap()), booleanThat(booleanMatcher(false))); verify(cmd).releaseVolumeLock(); assertEquals(AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP, cmd.getAuditLogTypeValue()); }
@org.junit.Test public void doParse_handledFieldTypeRecursion() throws com.google.gwt.core.ext.UnableToCompleteException { java.util.Set<? extends com.google.gwt.core.ext.typeinfo.JClassType> ownerTypeParentFieldTypeSubField1TypeFlattenedSupertypeHierarchy = new java.util.HashSet(java.util.<START_MOD>Collections.singletonList<END_MOD>(ownerTypeParentFieldTypeSubField1Type)); doReturn(ownerTypeParentFieldTypeSubField1TypeFlattenedSupertypeHierarchy).when(ownerTypeParentFieldTypeSubField1Type).getFlattenedSupertypeHierarchy(); when(ownerTypeParentFieldTypeSubField1Type.getFields()).thenReturn(new com.google.gwt.core.ext.typeinfo.JField[]{ ownerTypeParentField }); stubFieldIdAnnotation(ownerTypeParentField, "", false); tested.doParse(ownerType, new java.util.ArrayList<com.google.gwt.core.ext.typeinfo.JClassType>(), ".", "IdPrefix"); java.util.List<org.ovirt.engine.ui.common.binding.ElementIdStatement> expected = java.util.Arrays.asList(getExpectedStatement("ownerTypeParentField", "IdPrefix_ownerTypeParentField"), getExpectedStatement("ownerTypeField1", "IdPrefix_ownerTypeField1"), getExpectedStatement("ownerTypeField2", "IdPrefix_ownerTypeField2")); assertThat(tested.statements.size(), is(equalTo(expected.size()))); assertThat(tested.statements.containsAll(expected), is(equalTo(true))); }	@org.junit.Test public void doParse_handledFieldTypeRecursion() throws com.google.gwt.core.ext.UnableToCompleteException { java.util.Set<? extends com.google.gwt.core.ext.typeinfo.JClassType> ownerTypeParentFieldTypeSubField1TypeFlattenedSupertypeHierarchy = java.util.Collections.singleton(ownerTypeParentFieldTypeSubField1Type); doReturn(ownerTypeParentFieldTypeSubField1TypeFlattenedSupertypeHierarchy).when(ownerTypeParentFieldTypeSubField1Type).getFlattenedSupertypeHierarchy(); when(ownerTypeParentFieldTypeSubField1Type.getFields()).thenReturn(new com.google.gwt.core.ext.typeinfo.JField[]{ ownerTypeParentField }); stubFieldIdAnnotation(ownerTypeParentField, "", false); tested.doParse(ownerType, new java.util.ArrayList<com.google.gwt.core.ext.typeinfo.JClassType>(), ".", "IdPrefix"); java.util.List<org.ovirt.engine.ui.common.binding.ElementIdStatement> expected = java.util.Arrays.asList(getExpectedStatement("ownerTypeParentField", "IdPrefix_ownerTypeParentField"), getExpectedStatement("ownerTypeField1", "IdPrefix_ownerTypeField1"), getExpectedStatement("ownerTypeField2", "IdPrefix_ownerTypeField2")); assertThat(tested.statements.size(), is(equalTo(expected.size()))); assertThat(tested.statements.containsAll(expected), is(equalTo(true))); }
@org.junit.Test public void testGetBaseNicVerifyDelegation() throws java.lang.Exception { org.ovirt.engine.core.vdsbroker.CalculateBaseNic spy = spy(calculateBaseNic); spy.getBaseNic(baseNic); verify(spy).getBaseNic(org.mockito.Matchers.any(), org.mockito.Matchers.any()); }	@org.junit.Test public void testGetBaseNicVerifyDelegation() throws java.lang.Exception { org.ovirt.engine.core.vdsbroker.CalculateBaseNic spy = spy(calculateBaseNic); spy.getBaseNic(baseNic); verify(spy).getBaseNic(any(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.class), anyMapOf(java.lang.String.class, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.class)); }
@org.junit.Test(expected = com.google.gwt.core.ext.UnableToCompleteException.class) public void doParse_unhandledFieldTypeRecursion() throws com.google.gwt.core.ext.UnableToCompleteException { java.util.Set<? extends com.google.gwt.core.ext.typeinfo.JClassType> ownerTypeParentFieldTypeSubField1TypeFlattenedSupertypeHierarchy = new java.util.HashSet(java.util.<START_MOD>Collections<END_MOD>.<START_MOD>singletonList<END_MOD>(ownerTypeParentFieldTypeSubField1Type)); doReturn(ownerTypeParentFieldTypeSubField1TypeFlattenedSupertypeHierarchy).when(ownerTypeParentFieldTypeSubField1Type).getFlattenedSupertypeHierarchy(); when(ownerTypeParentFieldTypeSubField1Type.getFields()).thenReturn(new com.google.gwt.core.ext.typeinfo.JField[]{ ownerTypeParentField }); tested.doParse(ownerType, new java.util.ArrayList<com.google.gwt.core.ext.typeinfo.JClassType>(), ".", "IdPrefix"); }	@org.junit.Test(expected = com.google.gwt.core.ext.UnableToCompleteException.class) public void doParse_unhandledFieldTypeRecursion() throws com.google.gwt.core.ext.UnableToCompleteException { java.util.Set<? extends com.google.gwt.core.ext.typeinfo.JClassType> ownerTypeParentFieldTypeSubField1TypeFlattenedSupertypeHierarchy = java.util.Collections.singleton(ownerTypeParentFieldTypeSubField1Type); doReturn(ownerTypeParentFieldTypeSubField1TypeFlattenedSupertypeHierarchy).when(ownerTypeParentFieldTypeSubField1Type).getFlattenedSupertypeHierarchy(); when(ownerTypeParentFieldTypeSubField1Type.getFields()).thenReturn(new com.google.gwt.core.ext.typeinfo.JField[]{ ownerTypeParentField }); tested.doParse(ownerType, new java.util.ArrayList<com.google.gwt.core.ext.typeinfo.JClassType>(), ".", "IdPrefix"); }
private void setupDedicatedHostForVmAndTemplate(boolean setDefaultHostForTemplate) { org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.compat.Guid.newGuid(); vm.setDedicatedVmForVdsList(java.util.<START_MOD>Collections.singletonList<END_MOD>(hostId)); org.ovirt.engine.core.common.action.AddVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.AddVmTemplateParameters(); org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic(); vmStatic.setDedicatedVmForVdsList((setDefaultHostForTemplate ? java.util.<START_MOD>Collections.singletonList<END_MOD>(hostId) : new java.util.ArrayList())); parameters.setMasterVm(vmStatic); parameters.setTemplateType(VmEntityType.TEMPLATE); doReturn(parameters).when(cmd).getParameters(); }	private void setupDedicatedHostForVmAndTemplate(boolean setDefaultHostForTemplate) { org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.compat.Guid.newGuid(); vm.setDedicatedVmForVdsList(java.util.Collections.singletonList(hostId)); org.ovirt.engine.core.common.action.AddVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.AddVmTemplateParameters(); org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic(); vmStatic.setDedicatedVmForVdsList((setDefaultHostForTemplate ? java.util.Collections.singletonList(hostId) : java.util.Collections.emptyList())); parameters.setMasterVm(vmStatic); parameters.setTemplateType(VmEntityType.TEMPLATE); doReturn(parameters).when(cmd).getParameters(); }
private void mockForReadContent(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { when(hooksDao.getGlusterServerHook(org.ovirt.engine.core.bll.gluster.HOOK_ID, org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommandTest.SERVER_ID)).thenReturn(getGlusterServerHook(0, GlusterHookStatus.ENABLED)); mockBackend(succeeded, errorCode); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setReturnValue(org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommandTest.CONTENT); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.GetGlusterHookContent), <START_MOD>any(org.ovirt.engine.core.common.vdscommands.gluster.GlusterHookVDSParameters.class<END_MOD>))).thenReturn(vdsReturnValue); }	private void mockForReadContent(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { when(hooksDao.getGlusterServerHook(org.ovirt.engine.core.bll.gluster.HOOK_ID, org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommandTest.SERVER_ID)).thenReturn(getGlusterServerHook(0, GlusterHookStatus.ENABLED)); mockBackend(succeeded, errorCode); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setReturnValue(org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommandTest.CONTENT); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.GetGlusterHookContent), argThat(anyHookVDS()))).thenReturn(vdsReturnValue); }
@org.junit.Test public void executeCommandWithRebalanceCompleteInNode() { cmd = spy(createTestCommand(volumeWithRebalanceTask)); prepareMocks(cmd); mockBackend(true, JobExecutionStatus.FINISHED, true, null); assertTrue(cmd.validate()); cmd.executeCommand(); verify(cmd).endStepJob(argThat(jobExecutionStatus(JobExecutionStatus.FINISHED)), <START_MOD>anyMapOf<END_MOD>(<START_MOD>java.lang.String.class, java.lang.String.class<END_MOD>), <START_MOD>eq<END_MOD>(true)); verify(cmd).releaseVolumeLock(); assertEquals(AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP, cmd.getAuditLogTypeValue()); }	@org.junit.Test public void executeCommandWithRebalanceCompleteInNode() { cmd = spy(createTestCommand(volumeWithRebalanceTask)); prepareMocks(cmd); mockBackend(true, JobExecutionStatus.FINISHED, true, null); assertTrue(cmd.validate()); cmd.executeCommand(); verify(cmd).endStepJob(argThat(jobExecutionStatus(JobExecutionStatus.FINISHED)), argThat(anyMap()), booleanThat(booleanMatcher(true))); verify(cmd).releaseVolumeLock(); assertEquals(AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP, cmd.getAuditLogTypeValue()); }
private void mockJobSubjectEntityDao(org.ovirt.engine.core.compat.Guid jobId) { when(jobSubjectEntityDao.getJobSubjectEntityByJobId(eq(jobId))).thenReturn(org.ovirt.engine.core.bll.job.JobRepositoryTest.JOB_SUBJECT_ENTITIES_MAP); when(jobSubjectEntityDao.getJobIdByEntityId(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.<START_MOD>Collections<END_MOD>.<org.ovirt.engine.core.compat.Guid><START_MOD>singletonList<END_MOD>(jobId)); }	private void mockJobSubjectEntityDao(org.ovirt.engine.core.compat.Guid jobId) { when(jobSubjectEntityDao.getJobSubjectEntityByJobId(eq(jobId))).thenReturn(org.ovirt.engine.core.bll.job.JobRepositoryTest.JOB_SUBJECT_ENTITIES_MAP); when(jobSubjectEntityDao.getJobIdByEntityId(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Collections.singletonList(jobId)); }
public void testCannotUpdateOSNotSupportVirtioScsi() { prepareVmToPassValidate(); group.setCompatibilityVersion(Version.v4_0); when(command.isVirtioScsiEnabledForVm(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(true); when(osRepository.getDiskInterfaces(any(java.lang.Integer.class), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(new java.util.ArrayList(java.util.<START_MOD>Collections<END_MOD>.<START_MOD>singletonList<END_MOD>("VirtIO"))); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_DOES_NOT_SUPPORT_VIRTIO_SCSI); }	public void testCannotUpdateOSNotSupportVirtioScsi() { prepareVmToPassValidate(); group.setCompatibilityVersion(Version.v4_0); when(command.isVirtioScsiEnabledForVm(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(true); when(osRepository.getDiskInterfaces(any(java.lang.Integer.class), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(java.util.Collections.singletonList("VirtIO")); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_DOES_NOT_SUPPORT_VIRTIO_SCSI); }
@org.junit.Test public void testGetBaseNicVerifyDelegation() throws java.lang.Exception { org.ovirt.engine.core.vdsbroker.CalculateBaseNic spy = spy(calculateBaseNic); spy.getBaseNic(baseNic); verify(spy).getBaseNic(org.mockito.Matchers.<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>any(), org.mockito.Matchers.<java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>>any()); }	@org.junit.Test public void testGetBaseNicVerifyDelegation() throws java.lang.Exception { org.ovirt.engine.core.vdsbroker.CalculateBaseNic spy = spy(calculateBaseNic); spy.getBaseNic(baseNic); verify(spy).getBaseNic(any(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.class), anyMapOf(java.lang.String.class, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.class)); }
@org.junit.Test public void validateFailsIHostDoesNotExists() { when(vdsDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters param = org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommandTest.createParameters(); org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommand<org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters> command = createCommand(param); assertFailsWithValidateMessage(command, EngineMessage.ACTION_TYPE_FAILED_HOST_NOT_EXIST); }	@org.junit.Test public void validateFailsIfHostDoesNotExists() { when(vdsDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters param = org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommandTest.createParameters(); org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommand<org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters> command = createCommand(param); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_HOST_NOT_EXIST); }
@org.junit.Test public void validateFailsIHostDoesNotExists() { when(vdsDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters param = org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.createParameters(); org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand<org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters> command = createCommand(param); assertFailsWithValidateMessage(command, EngineMessage.ACTION_TYPE_FAILED_HOST_NOT_EXIST); }	@org.junit.Test public void validateFailsIfHostDoesNotExists() { when(vdsDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters param = org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.createParameters(); org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand<org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters> command = createCommand(param); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_HOST_NOT_EXIST); }
@org.junit.Test public void validateFailsIsoVersionNotCompatible() { mockVdsWithOsVersion(org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.INVALID_OVIRT_VERSION); org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters param = org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.createParameters(); param.setoVirtIsoFile(org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.VALID_VERSION_OVIRT_ISO_FILENAME); org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand<org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters> command = createCommand(param); assertFailsWithValidateMessage(command, EngineMessage.VDS_CANNOT_UPGRADE_BETWEEN_MAJOR_VERSION); }	@org.junit.Test public void validateFailsIsoVersionNotCompatible() { mockVdsWithOsVersion(org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.INVALID_OVIRT_VERSION); org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters param = org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.createParameters(); param.setoVirtIsoFile(org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.VALID_VERSION_OVIRT_ISO_FILENAME); org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand<org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters> command = createCommand(param); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.VDS_CANNOT_UPGRADE_BETWEEN_MAJOR_VERSION); }
@org.junit.Test public void validateFailsMissingIsoFile() { mockVdsWithOsVersion(org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.VALID_OVIRT_VERSION); org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters param = org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.createParameters(); param.setoVirtIsoFile(org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.INVALID_VERSION_OVIRT_ISO_FILENAME); org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand<org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters> command = createCommand(param); assertFailsWithValidateMessage(command, EngineMessage.VDS_CANNOT_INSTALL_MISSING_IMAGE_FILE); }	@org.junit.Test public void validateFailsMissingIsoFile() { mockVdsWithOsVersion(org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.VALID_OVIRT_VERSION); org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters param = org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.createParameters(); param.setoVirtIsoFile(org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.INVALID_VERSION_OVIRT_ISO_FILENAME); org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand<org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters> command = createCommand(param); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.VDS_CANNOT_INSTALL_MISSING_IMAGE_FILE); }
@org.junit.Test public void validateFailsNullParameterForIsoFile() { mockVdsWithOsVersion(org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.VALID_OVIRT_VERSION); org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters param = org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.createParameters(); param.setoVirtIsoFile(null); org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand<org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters> command = createCommand(param); assertFailsWithValidateMessage(command, EngineMessage.VDS_CANNOT_INSTALL_MISSING_IMAGE_FILE); }	@org.junit.Test public void validateFailsNullParameterForIsoFile() { mockVdsWithOsVersion(org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.VALID_OVIRT_VERSION); org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters param = org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.createParameters(); param.setoVirtIsoFile(null); org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand<org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters> command = createCommand(param); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.VDS_CANNOT_INSTALL_MISSING_IMAGE_FILE); }
@java.lang.Override public void invoke(org.ovirt.engine.api.extensions.ExtMap context, java.util.Map<java.lang.String, java.lang.Object> args) { java.util.Properties templates = org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.loadPropertiesFromJar("entity-templates.properties"); java.lang.String providedTemplate = null; if (context.containsKey(ContextKeys.SHOW_TEMPLATE)) { providedTemplate = templates.get(context.get(ContextKeys.SHOW_TEMPLATE)).toString(); } @java.lang.SuppressWarnings("unchecked") java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> results = context.get(ContextKeys.SEARCH_RESULT, java.util.Collection.class, java.util.Collections.emptyList()); for (org.ovirt.engine.api.extensions.ExtMap result : results) { java.lang.String out = (providedTemplate == null) ? result.containsKey(Authz.PrincipalRecord.ID) ? templates.get("user").toString() : templates.get("group").toString() : providedTemplate; for (java.util.Map.Entry<org.ovirt.engine.api.extensions.ExtKey, java.lang.Object> entry : result.entrySet()) { java.util.regex.Matcher m = java.util.regex.Pattern.compile(java.lang.String.format("@%s@", entry.getKey().getUuid().getUuid())).matcher(out); out = m.replaceAll(java.util.regex.Matcher.quoteReplacement(formatValue(entry))); } <START_MOD>out = out.replace("@IS_LOCKED@", java.lang.String.valueOf((((java.lang.Long) (result.get(Schema.UserKeys.UNLOCK_TIME))) > (java.lang.System.currentTimeMillis())))); <END_MOD>org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.addContextMessage(context, false, out); } context.put(ContextKeys.EXIT_STATUS, org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.SUCCESS); }	@java.lang.Override public void invoke(org.ovirt.engine.api.extensions.ExtMap context, java.util.Map<java.lang.String, java.lang.Object> args) { java.util.Properties templates = org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.loadPropertiesFromJar("entity-templates.properties"); java.lang.String providedTemplate = null; if (context.containsKey(ContextKeys.SHOW_TEMPLATE)) { providedTemplate = templates.get(context.get(ContextKeys.SHOW_TEMPLATE)).toString(); } @java.lang.SuppressWarnings("unchecked") java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> results = context.get(ContextKeys.SEARCH_RESULT, java.util.Collection.class, java.util.Collections.emptyList()); for (org.ovirt.engine.api.extensions.ExtMap result : results) { java.lang.String out = (providedTemplate == null) ? result.containsKey(Authz.PrincipalRecord.ID) ? templates.get("user").toString() : templates.get("group").toString() : providedTemplate; for (java.util.Map.Entry<org.ovirt.engine.api.extensions.ExtKey, java.lang.Object> entry : result.entrySet()) { java.util.regex.Matcher m = java.util.regex.Pattern.compile(java.lang.String.format("@%s@", entry.getKey().getUuid().getUuid())).matcher(out); out = m.replaceAll(java.util.regex.Matcher.quoteReplacement(formatValue(entry))); } org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.addContextMessage(context, false, out); } context.put(ContextKeys.EXIT_STATUS, org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.SUCCESS); }
private boolean runQuery(java.io.PrintWriter out) { boolean fReturn = false; org.ovirt.engine.core.bll.interfaces.BackendInternal backend = null; try { org.ovirt.engine.core.services.HealthStatus.log.debug( CheckDBConnection query org.ovirt.engine.core.common.queries.VdcQueryParametersBase params = new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(); org.ovirt.engine.core.common.queries.VdcQueryReturnValue v = backend.runInternalQuery(VdcQueryType.CheckDBConnection, params); if (v != null) { fReturn = v.getSucceeded(); out.print((fReturn ?   Up! :   Down! } else { org.ovirt.engine.core.services.HealthStatus.log.error( NULL from backend.RunQuery! } } catch (java.lang.Throwable t) { java.lang.String msg =   to contact Database! if (backend == null) { msg =   to contact Backend! } out.print(msg); org.ovirt.engine.core.services.HealthStatus.log.error(msg, t); fReturn = false; } return fReturn; }	private boolean runQuery(java.io.PrintWriter out) { boolean fReturn = false; try { org.ovirt.engine.core.services.HealthStatus.log.debug("Calling CheckDBConnection query"); org.ovirt.engine.core.common.queries.VdcQueryParametersBase params = new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(); org.ovirt.engine.core.common.queries.VdcQueryReturnValue v = backend.runInternalQuery(VdcQueryType.CheckDBConnection, params); if (v != null) { fReturn = v.getSucceeded(); out.print((fReturn ? "DB Up!" : "DB Down!")); } else { org.ovirt.engine.core.services.HealthStatus.log.error("Got NULL from backend.RunQuery!"); } } catch (java.lang.Throwable t) { java.lang.String msg = "Unable to contact Database!"; if ((backend) == null) { msg = "Unable to contact Backend!"; } out.print(msg); org.ovirt.engine.core.services.HealthStatus.log.error(msg, t); fReturn = false; } return fReturn; }
private void pinToIoThreads(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.lang.Integer pinnedDriveIndex) { if ((vm.getNumOfIoThreads()) != 0) { int pinTo = (pinnedDriveIndex % (vm.getNumOfIoThreads())) + 1; pinnedDriveIndex++; vmDevice.getSpecParams().put(VdsProperties.pinToIoThread, pinTo); } }	private int pinToIoThreads(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, int pinnedDriveIndex) { if ((vm.getNumOfIoThreads()) != 0) { int pinTo = (pinnedDriveIndex % (vm.getNumOfIoThreads())) + 1; pinnedDriveIndex++; vmDevice.getSpecParams().put(VdsProperties.pinToIoThread, pinTo); } return pinnedDriveIndex; }
@java.lang.Override protected void executeVdsBrokerCommand() { vmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getBroker().list(); org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.proceedProxyReturnValue(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> returnVMs = new java.util.HashMap<>(); for (int idx = 0; idx < (vmListReturn.vmList.length); ++idx) { java.util.Map<java.lang.String, java.lang.Object> vm = vmListReturn.vmList[idx]; org.ovirt.engine.core.compat.Guid vmId = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getVmId(vm); org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vdsmVm = new org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm(vmId, org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getVdsmCallTimestamp(vm)).setVmDynamic(org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.buildVMDynamicDataFromList(vm))<START_MOD>.setDevicesHash(org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getVmDevicesHash(vm))<END_MOD>; returnVMs.put(vmId, vdsmVm); } setReturnValue(returnVMs); }	@java.lang.Override protected void executeVdsBrokerCommand() { vmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getBroker().list(); org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.proceedProxyReturnValue(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> returnVMs = new java.util.HashMap<>(); for (int idx = 0; idx < (vmListReturn.vmList.length); ++idx) { java.util.Map<java.lang.String, java.lang.Object> vm = vmListReturn.vmList[idx]; org.ovirt.engine.core.common.businessentities.VmDynamic dynamicData = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.buildVMDynamicDataFromList(vm); org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vdsmVm = new org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm(org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getVdsmCallTimestamp(vm)).setVmDynamic(dynamicData).setDevicesHash(org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getVmDevicesHash(vm)); returnVMs.put(dynamicData.getId(), vdsmVm); } setReturnValue(returnVMs); }
private org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm createVdsmVm(org.ovirt.engine.core.common.businessentities.VmDynamic dbVmDyanmic, java.util.Map<java.lang.String, java.lang.Object> xmlRpcStruct, java.lang.Double notifyTime) { org.ovirt.engine.core.compat.Guid vmId = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.getVmId(xmlRpcStruct); org.ovirt.engine.core.common.businessentities.VmDynamic clonedVmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic(dbVmDyanmic); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData(clonedVmDynamic, xmlRpcStruct, vdsManager.getCopyVds()); return new org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm(vmId, notifyTime).setVmDynamic(clonedVmDynamic)<START_MOD>.setDevicesHash(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.getVmDevicesHash(xmlRpcStruct))<END_MOD>; }	private org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm createVdsmVm(org.ovirt.engine.core.common.businessentities.VmDynamic dbVmDynamic, java.util.Map<java.lang.String, java.lang.Object> xmlRpcStruct, java.lang.Double notifyTime) { org.ovirt.engine.core.common.businessentities.VmDynamic clonedVmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic(dbVmDynamic); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData(clonedVmDynamic, xmlRpcStruct, vdsManager.getCopyVds()); return new org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm(notifyTime).setVmDynamic(clonedVmDynamic).setDevicesHash(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.getVmDevicesHash(xmlRpcStruct)); }
private boolean canRemoveVmImageDisk() { if (!(listVms.isEmpty())) { org.ovirt.engine.core.compat.Guid storagePoolId = listVms.get(0).getStoragePoolId(); org.ovirt.engine.core.common.businessentities.StoragePool sp = org.ovirt.engine.core.bll.storage.disk.RemoveDiskCommand.getStoragePoolDao().get(storagePoolId); if (!(validate(new org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator(sp).isUp()))) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskList = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(java.util.Collections.singletonList(getDisk()), <START_MOD>org.ovirt.engine.core.bll.storage.disk.NOT_SHAREABLE_DISKS_ONLY, org.ovirt.engine.core.bll.storage.disk.ACTIVE_DISKS_ONLY); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(diskList); if (!(validate(diskImagesValidator.diskImagesNotLocked()))) { return false; } } org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = new org.ovirt.engine.core.bll.snapshots.SnapshotsValidator(); for (org.ovirt.engine.core.common.businessentities.VM vm : listVms) { if ((!(validate(snapshotsValidator.vmNotDuringSnapshot(vm.getId())))) || (!(validate(snapshotsValidator.vmNotInPreview(vm.getId()))))) { return false; } } return <END_MOD>true<START_MOD>; }<END_MOD>	private boolean canRemoveVmImageDisk() { if (!(listVms.isEmpty())) { org.ovirt.engine.core.compat.Guid storagePoolId = listVms.get(0).getStoragePoolId(); org.ovirt.engine.core.common.businessentities.StoragePool sp = org.ovirt.engine.core.bll.storage.disk.RemoveDiskCommand.getStoragePoolDao().get(storagePoolId); if (!(validate(new org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator(sp).isUp()))) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskList = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(java.util.Collections.singletonList(getDisk()), org.ovirt.engine.core.bll.storage.disk.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.storage.disk.ONLY_ACTIVE); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(diskList); if (!(validate(diskImagesValidator.diskImagesNotLocked()))) { return false; } } org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = new org.ovirt.engine.core.bll.snapshots.SnapshotsValidator(); for (org.ovirt.engine.core.common.businessentities.VM vm : listVms) { if ((!(validate(snapshotsValidator.vmNotDuringSnapshot(vm.getId())))) || (!(validate(snapshotsValidator.vmNotInPreview(vm.getId()))))) { return false; } } return true; }
public static java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getPluggedActiveImagesForVm(org.ovirt.engine.core.compat.Guid vmId) { return org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(vmId, true), <START_MOD>org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.NOT_SHAREABLE_DISKS_ONLY<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.ACTIVE_DISKS_ONLY<END_MOD>); }	public static java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getPluggedActiveImagesForVm(org.ovirt.engine.core.compat.Guid vmId) { return org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(vmId, true), org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.ONLY_ACTIVE); }
@java.lang.Override protected void chooseDisksSourceDomains() { diskInfoSourceMap = new java.util.HashMap(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDiskImages = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(getImagesToCheckDestinationStorageDomains(), <START_MOD>org.ovirt.engine.core.bll.NOT_SHAREABLE_DISKS_ONLY<END_MOD>); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : templateDiskImages) { org.ovirt.engine.core.compat.Guid diskId = disk.getId(); java.util.Set<org.ovirt.engine.core.compat.Guid> validDomainsForDisk = validDisksDomains.get(diskId); org.ovirt.engine.core.compat.Guid destinationDomain = retrieveDestinationDomainForDisk(diskId); if (validDomainsForDisk.contains(destinationDomain)) { diskInfoSourceMap.put(diskId, destinationDomain); } else { diskInfoSourceMap.put(diskId, validDomainsForDisk.iterator().next()); } } }	@java.lang.Override protected void chooseDisksSourceDomains() { diskInfoSourceMap = new java.util.HashMap(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDiskImages = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(getImagesToCheckDestinationStorageDomains(), org.ovirt.engine.core.bll.ONLY_NOT_SHAREABLE); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : templateDiskImages) { org.ovirt.engine.core.compat.Guid diskId = disk.getId(); java.util.Set<org.ovirt.engine.core.compat.Guid> validDomainsForDisk = validDisksDomains.get(diskId); org.ovirt.engine.core.compat.Guid destinationDomain = retrieveDestinationDomainForDisk(diskId); if (validDomainsForDisk.contains(destinationDomain)) { diskInfoSourceMap.put(diskId, destinationDomain); } else { diskInfoSourceMap.put(diskId, validDomainsForDisk.iterator().next()); } } }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDiskImages = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getVmTemplate().getDiskTemplateMap().values(), <START_MOD>org.ovirt.engine.core.bll.NOT_SHAREABLE_DISKS_ONLY<END_MOD>); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage dit : templateDiskImages) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = diskInfoDestinationMap.get(dit.getId()); if (!(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.checkImageConfiguration(destStorages.get(diskImage.getStorageIds().get(0)).getStorageStaticData(), diskImage, org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getReturnValue().getValidationMessages()))) { return false; } } return true; }	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDiskImages = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getVmTemplate().getDiskTemplateMap().values(), org.ovirt.engine.core.bll.ONLY_NOT_SHAREABLE); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage dit : templateDiskImages) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = diskInfoDestinationMap.get(dit.getId()); if (!(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.checkImageConfiguration(destStorages.get(diskImage.getStorageIds().get(0)).getStorageStaticData(), diskImage, org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getReturnValue().getValidationMessages()))) { return false; } } return true; }
@java.lang.Override protected boolean verifySourceDomains() { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> poolDomainsMap = org.ovirt.engine.core.common.businessentities.Entities.businessEntitiesById(org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getPoolDomains()); java.util.EnumSet<org.ovirt.engine.core.common.businessentities.StorageDomainStatus> validDomainStatuses = java.util.EnumSet.of(StorageDomainStatus.Active); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDiskImages = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter.filterImageDisks(getImagesToCheckDestinationStorageDomains(), org.ovirt.engine.core.bll.NOT_SHAREABLE_DISKS_ONLY); validDisksDomains = org.ovirt.engine.core.bll.storage.disk.image.<END_MOD>ImagesHandler.<START_MOD>findDomainsInApplicableStatusForDisks(templateDiskImages, poolDomainsMap, validDomainStatuses); return validate(new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(templateDiskImages).diskImagesOnAnyApplicableDomains(<END_MOD>validDisksDomains, poolDomainsMap, <START_MOD>EngineMessage.ACTION_TYPE_FAILED_NO_VALID_DOMAINS_STATUS_FOR_TEMPLATE_DISKS, <END_MOD>validDomainStatuses)); }	@java.lang.Override protected boolean verifySourceDomains() { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> poolDomainsMap = org.ovirt.engine.core.common.businessentities.Entities.businessEntitiesById(org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getPoolDomains()); java.util.EnumSet<org.ovirt.engine.core.common.businessentities.StorageDomainStatus> validDomainStatuses = java.util.EnumSet.of(StorageDomainStatus.Active); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDiskImages = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(getImagesToCheckDestinationStorageDomains(), org.ovirt.engine.core.bll.ONLY_NOT_SHAREABLE); validDisksDomains = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.findDomainsInApplicableStatusForDisks(templateDiskImages, poolDomainsMap, validDomainStatuses); return validate(new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(templateDiskImages).diskImagesOnAnyApplicableDomains(validDisksDomains, poolDomainsMap, EngineMessage.ACTION_TYPE_FAILED_NO_VALID_DOMAINS_STATUS_FOR_TEMPLATE_DISKS, validDomainStatuses)); }
protected void moveOrCopyAllImageGroups() { moveOrCopyAllImageGroups(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getId(), org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap().values(), <START_MOD>org.ovirt.engine.core.bll.exportimport.ACTIVE_DISKS_ONLY<END_MOD>)); copyAllMemoryImages(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getId()); }	protected void moveOrCopyAllImageGroups() { moveOrCopyAllImageGroups(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getId(), org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.exportimport.ONLY_ACTIVE)); copyAllMemoryImages(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getId()); }
public static void filterImageDisksForVM(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredDisks = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(vm.getDiskMap().values(), <START_MOD>org.ovirt.engine.core.bll.ACTIVE_DISKS_ONLY<END_MOD>); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> filteredCinderDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(vm.getDiskMap().values()); filteredDisks.addAll(filteredCinderDisks); @java.lang.SuppressWarnings("unchecked") java.util.Collection<? extends org.ovirt.engine.core.common.businessentities.storage.Disk> vmDisksToRemove = org.apache.commons.collections.CollectionUtils.subtract(vm.getDiskMap().values(), filteredDisks); vm.clearDisks(); org.ovirt.engine.core.bll.VmHandler.updateDisksForVm(vm, filteredDisks); for (org.ovirt.engine.core.common.businessentities.storage.Disk diskToRemove : vmDisksToRemove) { vm.getManagedVmDeviceMap().remove(diskToRemove.getId()); } }	public static void filterImageDisksForVM(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(vm.getDiskMap().values(), org.ovirt.engine.core.bll.ONLY_ACTIVE); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> filteredCinderDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(vm.getDiskMap().values()); filteredDisks.addAll(filteredCinderDisks); @java.lang.SuppressWarnings("unchecked") java.util.Collection<? extends org.ovirt.engine.core.common.businessentities.storage.Disk> vmDisksToRemove = org.apache.commons.collections.CollectionUtils.subtract(vm.getDiskMap().values(), filteredDisks); vm.clearDisks(); org.ovirt.engine.core.bll.VmHandler.updateDisksForVm(vm, filteredDisks); for (org.ovirt.engine.core.common.businessentities.storage.Disk diskToRemove : vmDisksToRemove) { vm.getManagedVmDeviceMap().remove(diskToRemove.getId()); } }
@java.lang.Override protected java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAdjustedDiskImagesFromConfiguration() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue vdcReturnValue = runInternalQuery(VdcQueryType.GetAllDisksByVmId, new org.ovirt.engine.core.common.queries.IdQueryParameters(oldVmId)); java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> loadedImages = ((vdcReturnValue.getReturnValue()) != null) ? ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk>) (vdcReturnValue.getReturnValue())) : new java.util.ArrayList<>(); if ((diskImagesFromConfiguration) == null) { diskImagesFromConfiguration = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter.filterImageDisks(loadedImages, org.ovirt.engine.core.bll.SNAPABLE_DISKS_ONLY, org.ovirt.engine.core.bll.ACTIVE_DISKS_ONLY); diskImagesFromConfiguration.addAll(org.ovirt.engine.core.bll.storage.disk.image.<END_MOD>ImagesHandler.<START_MOD>filterDisksBasedOnCinder<END_MOD>(loadedImages, true)); } return diskImagesFromConfiguration; }	@java.lang.Override protected java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAdjustedDiskImagesFromConfiguration() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue vdcReturnValue = runInternalQuery(VdcQueryType.GetAllDisksByVmId, new org.ovirt.engine.core.common.queries.IdQueryParameters(oldVmId)); java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> loadedImages = ((vdcReturnValue.getReturnValue()) != null) ? ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk>) (vdcReturnValue.getReturnValue())) : new java.util.ArrayList<>(); if ((diskImagesFromConfiguration) == null) { diskImagesFromConfiguration = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(loadedImages, org.ovirt.engine.core.bll.ONLY_SNAPABLE, org.ovirt.engine.core.bll.ONLY_ACTIVE); diskImagesFromConfiguration.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(loadedImages, true)); } return diskImagesFromConfiguration; }
public org.ovirt.engine.core.bll.ValidationResult vmNotHavingDeviceSnapshotsAttachedToOtherVms(boolean onlyPlugged) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> vmDisks = getDbFacade().getDiskDao().getAllForVm(vm.getId()); org.ovirt.engine.core.bll.ValidationResult result = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(vmDisks, <START_MOD>org.ovirt.engine.core.bll.validator.NOT_SHAREABLE_DISKS_ONLY<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.validator.ACTIVE_DISKS_ONLY<END_MOD>)).diskImagesSnapshotsNotAttachedToOtherVms(onlyPlugged); if (result != (org.ovirt.engine.core.bll.ValidationResult.VALID)) { return result; } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult vmNotHavingDeviceSnapshotsAttachedToOtherVms(boolean onlyPlugged) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> vmDisks = getDbFacade().getDiskDao().getAllForVm(vm.getId()); org.ovirt.engine.core.bll.ValidationResult result = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(vmDisks, org.ovirt.engine.core.bll.validator.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.validator.ONLY_ACTIVE)).diskImagesSnapshotsNotAttachedToOtherVms(onlyPlugged); if (result != (org.ovirt.engine.core.bll.ValidationResult.VALID)) { return result; } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private org.ovirt.engine.core.common.vdscommands.SnapshotVDSCommandParameters buildLiveSnapshotParameters(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> pluggedDisksForVm = org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm().getId(), true); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredPluggedDisksForVm = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(pluggedDisksForVm, <START_MOD>org.ovirt.engine.core.bll.snapshots.SNAPABLE_DISKS_ONLY, org.ovirt.engine.core.bll.snapshots.ACTIVE_DISKS_ONLY<END_MOD>); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredPluggedDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.imagesIntersection(filteredPluggedDisksForVm, getDisksList()); org.ovirt.engine.core.common.vdscommands.SnapshotVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.SnapshotVDSCommandParameters(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm().getId(), filteredPluggedDisks); if (isMemorySnapshotSupported()) { parameters.setMemoryVolume(snapshot.getMemoryVolume()); } parameters.setVmFrozen(shouldFreezeOrThawVm()); return parameters; }	private org.ovirt.engine.core.common.vdscommands.SnapshotVDSCommandParameters buildLiveSnapshotParameters(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> pluggedDisksForVm = org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm().getId(), true); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredPluggedDisksForVm = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(pluggedDisksForVm, org.ovirt.engine.core.bll.snapshots.ONLY_SNAPABLE, org.ovirt.engine.core.bll.snapshots.ONLY_ACTIVE); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredPluggedDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.imagesIntersection(filteredPluggedDisksForVm, getDisksList()); org.ovirt.engine.core.common.vdscommands.SnapshotVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.SnapshotVDSCommandParameters(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm().getId(), filteredPluggedDisks); if (isMemorySnapshotSupported()) { parameters.setMemoryVolume(snapshot.getMemoryVolume()); } parameters.setVmFrozen(shouldFreezeOrThawVm()); return parameters; }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDiskImages(java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks) { if ((cachedImagesDisks) == null) { cachedImagesDisks = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(disks, <START_MOD>org.ovirt.engine.core.bll.snapshots.NOT_SHAREABLE_DISKS_ONLY<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.snapshots.SNAPABLE_DISKS_ONLY<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.snapshots.ACTIVE_DISKS_ONLY<END_MOD>); } return cachedImagesDisks; }	private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDiskImages(java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks) { if ((cachedImagesDisks) == null) { cachedImagesDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(disks, org.ovirt.engine.core.bll.snapshots.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.snapshots.ONLY_SNAPABLE, org.ovirt.engine.core.bll.snapshots.ONLY_ACTIVE); } return cachedImagesDisks; }
protected boolean setAndValidateDiskProfiles() { if (((diskInfoDestinationMap) != null) && (!(diskInfoDestinationMap.isEmpty()))) { java.util.Map<org.ovirt.engine.core.common.businessentities.storage.DiskImage, org.ovirt.engine.core.compat.Guid> map = new java.util.HashMap<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(diskInfoDestinationMap.values(), <START_MOD>org.ovirt.engine.core.bll.NOT_SHAREABLE_DISKS_ONLY, org.ovirt.engine.core.bll.ACTIVE_DISKS_ONLY); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImages) { map.put(diskImage, diskImage.getStorageIds().get(0)); } return validate(org.ovirt.engine.core.bll.profiles.DiskProfileHelper.setAndValidateDiskProfiles(map, org.ovirt.engine.core.bll.AddVmCommand.getCurrentUser())); } return <END_MOD>true; }	protected boolean setAndValidateDiskProfiles() { if (((diskInfoDestinationMap) != null) && (!(diskInfoDestinationMap.isEmpty()))) { java.util.Map<org.ovirt.engine.core.common.businessentities.storage.DiskImage, org.ovirt.engine.core.compat.Guid> map = new java.util.HashMap<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(diskInfoDestinationMap.values(), org.ovirt.engine.core.bll.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.ONLY_ACTIVE); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImages) { map.put(diskImage, diskImage.getStorageIds().get(0)); } return validate(diskProfileHelper.setAndValidateDiskProfiles(map, org.ovirt.engine.core.bll.AddVmCommand.getCurrentUser())); } return true; }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDiskImagesToValidate() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVmId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allDisks = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(disks, <START_MOD>org.ovirt.engine.core.bll.snapshots.NOT_SHAREABLE_DISKS_ONLY<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.snapshots.ACTIVE_DISKS_ONLY<END_MOD>); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(disks); allDisks.addAll(cinderDisks); return allDisks; }	private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDiskImagesToValidate() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVmId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(disks, org.ovirt.engine.core.bll.snapshots.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.snapshots.ONLY_ACTIVE); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(disks); allDisks.addAll(cinderDisks); return allDisks; }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDiskImagesToValidate() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getDiskDao().getAllForVm(getSourceVmFromDb().getId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allDisks = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(disks, <START_MOD>org.ovirt.engine.core.bll.NOT_SHAREABLE_DISKS_ONLY<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.ACTIVE_DISKS_ONLY<END_MOD>); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(disks, true); allDisks.addAll(cinderDisks); return allDisks; }	private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDiskImagesToValidate() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getDiskDao().getAllForVm(getSourceVmFromDb().getId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(disks, org.ovirt.engine.core.bll.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.ONLY_ACTIVE); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(disks, true); allDisks.addAll(cinderDisks); return allDisks; }
protected boolean checkImagesStatus() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksToCheck = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getVmId()), <START_MOD>org.ovirt.engine.core.bll.storage.lsm.NOT_SHAREABLE_DISKS_ONLY<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.storage.lsm.ACTIVE_DISKS_ONLY<END_MOD>); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(disksToCheck); return (validate(diskImagesValidator.diskImagesNotLocked())) && (validate(diskImagesValidator.diskImagesHaveNotExceededMaxNumberOfVolumesInImageChain())); }	protected boolean checkImagesStatus() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksToCheck = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getVmId()), org.ovirt.engine.core.bll.storage.lsm.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.storage.lsm.ONLY_ACTIVE); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(disksToCheck); return (validate(diskImagesValidator.diskImagesNotLocked())) && (validate(diskImagesValidator.diskImagesHaveNotExceededMaxNumberOfVolumesInImageChain())); }
protected boolean performImagesChecks() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImagesToCheck = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(getImagesList(), <START_MOD>org.ovirt.engine.core.bll.snapshots.NOT_SHAREABLE_DISKS_ONLY<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.snapshots.ACTIVE_DISKS_ONLY<END_MOD>); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(diskImagesToCheck); return validate(diskImagesValidator.diskImagesNotLocked()); }	protected boolean performImagesChecks() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImagesToCheck = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(getImagesList(), org.ovirt.engine.core.bll.snapshots.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.snapshots.ONLY_ACTIVE); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(diskImagesToCheck); return validate(diskImagesValidator.diskImagesNotLocked()); }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDisksBasedOnImage() { if ((disksImages) == null) { disksImages = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm().getDiskMap().values(), <START_MOD>org.ovirt.engine.core.bll.exportimport.SNAPABLE_DISKS_ONLY<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.exportimport.ACTIVE_DISKS_ONLY<END_MOD>); } return disksImages; }	private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDisksBasedOnImage() { if ((disksImages) == null) { disksImages = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.exportimport.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.exportimport.ONLY_ACTIVE); } return disksImages; }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getImagesToPreview() { if ((imagesToPreview) == null) { imagesToPreview = ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks()) != null) ? org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks() : org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getDbFacade().getDiskImageDao().getAllSnapshotsForVmSnapshot(getDstSnapshot().getId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> CinderImagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(imagesToPreview); imagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(imagesToPreview, <START_MOD>org.ovirt.engine.core.bll.snapshots.NOT_SHAREABLE_DISKS_ONLY<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.snapshots.SNAPABLE_DISKS_ONLY<END_MOD>); imagesToPreview.addAll(CinderImagesToPreview); } return imagesToPreview; }	private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getImagesToPreview() { if ((imagesToPreview) == null) { imagesToPreview = ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks()) != null) ? org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks() : org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getDbFacade().getDiskImageDao().getAllSnapshotsForVmSnapshot(getDstSnapshot().getId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> CinderImagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(imagesToPreview); imagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(imagesToPreview, org.ovirt.engine.core.bll.snapshots.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.snapshots.ONLY_SNAPABLE); imagesToPreview.addAll(CinderImagesToPreview); } return imagesToPreview; }
protected java.lang.String generateVmConfiguration(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices) { if (((vm.getInterfaces()) == null) || (vm.getInterfaces().isEmpty())) { vm.setInterfaces(getVmNetworkInterfaceDao().getAllForVm(vm.getId())); } if (org.apache.commons.lang.StringUtils.isEmpty(vm.getVmtName())) { org.ovirt.engine.core.common.businessentities.VmTemplate t = getVmTemplateDao().get(vm.getVmtGuid()); vm.setVmtName(t.getName()); } if (vmDevices == null) { vmDeviceUtils.setVmDevices(vm.getStaticData()); } else { vm.getStaticData().setManagedDeviceMap(vmDevices); } if (disks == null) { disks = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter.filterImageDisks(getDiskDao().getAllForVm(vm.getId()), org.ovirt.engine.core.bll.snapshots.SNAPABLE_DISKS_ONLY, org.ovirt.engine.core.bll.snapshots.ACTIVE_DISKS_ONLY); disks.addAll(org.ovirt.engine.core.bll.storage.disk.image.<END_MOD>ImagesHandler.<START_MOD>getCinderLeafImages<END_MOD>(getDiskDao().getAllForVm(vm.getId()), false<START_MOD>)); } populateDisksWithVmData(disks, vm.getId()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : disks) { image.setStorageIds(null); } return new org.ovirt.engine.core.utils.ovf.OvfManager().exportVm(vm, new java.util.ArrayList(disks), <END_MOD>org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion(vm)); }	protected java.lang.String generateVmConfiguration(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices) { if (((vm.getInterfaces()) == null) || (vm.getInterfaces().isEmpty())) { vm.setInterfaces(getVmNetworkInterfaceDao().getAllForVm(vm.getId())); } if (org.apache.commons.lang.StringUtils.isEmpty(vm.getVmtName())) { org.ovirt.engine.core.common.businessentities.VmTemplate t = getVmTemplateDao().get(vm.getVmtGuid()); vm.setVmtName(t.getName()); } if (vmDevices == null) { vmDeviceUtils.setVmDevices(vm.getStaticData()); } else { vm.getStaticData().setManagedDeviceMap(vmDevices); } if (disks == null) { disks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(getDiskDao().getAllForVm(vm.getId()), org.ovirt.engine.core.bll.snapshots.ONLY_SNAPABLE, org.ovirt.engine.core.bll.snapshots.ONLY_ACTIVE); disks.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getCinderLeafImages(getDiskDao().getAllForVm(vm.getId()), false)); } populateDisksWithVmData(disks, vm.getId()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : disks) { image.setStorageIds(null); } return new org.ovirt.engine.core.utils.ovf.OvfManager().exportVm(vm, new java.util.ArrayList(disks), org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion(vm)); }
private java.lang.String buildMetadataDictionaryForVm(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allVmImages = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredDisks = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(vm.getDiskList(), <START_MOD>org.ovirt.engine.core.bll.storage.ovfstore.SNAPABLE_DISKS_ONLY<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.storage.ovfstore.ACTIVE_DISKS_ONLY<END_MOD>); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : filteredDisks) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getAllImageSnapshots(diskImage.getImageId()); images.stream().forEach(( d) -> d.setDiskVmElements(java.util.Collections.singletonList(diskImage.getDiskVmElementForVm(vm.getId())))); allVmImages.addAll(images); } return ovfManager.exportVm(vm, allVmImages, org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion(vm)); }	private java.lang.String buildMetadataDictionaryForVm(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allVmImages = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(vm.getDiskList(), org.ovirt.engine.core.bll.storage.ovfstore.ONLY_SNAPABLE, org.ovirt.engine.core.bll.storage.ovfstore.ONLY_ACTIVE); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : filteredDisks) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getAllImageSnapshots(diskImage.getImageId()); images.stream().forEach(( d) -> d.setDiskVmElements(java.util.Collections.singletonList(diskImage.getDiskVmElementForVm(vm.getId())))); allVmImages.addAll(images); } return ovfManager.exportVm(vm, allVmImages, org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion(vm)); }
protected org.ovirt.engine.core.bll.ValidationResult isImagesExceededVolumesInImageChain() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allImageDisks = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(getDiskDao().getAllForVm(vm.getId()), <START_MOD>org.ovirt.engine.core.bll.validator.SNAPABLE_DISKS_ONLY<END_MOD>); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidatorForChain = createDiskImageValidator(allImageDisks); return diskImagesValidatorForChain.diskImagesHaveNotExceededMaxNumberOfVolumesInImageChain(); }	protected org.ovirt.engine.core.bll.ValidationResult isImagesExceededVolumesInImageChain() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allImageDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(getDiskDao().getAllForVm(vm.getId()), org.ovirt.engine.core.bll.validator.ONLY_SNAPABLE); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidatorForChain = createDiskImageValidator(allImageDisks); return diskImagesValidatorForChain.diskImagesHaveNotExceededMaxNumberOfVolumesInImageChain(); }
protected org.ovirt.engine.core.bll.ValidationResult hasSpaceForSnapshots() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(vm.getId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allDisks = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(disks, <START_MOD>org.ovirt.engine.core.bll.validator.SNAPABLE_DISKS_ONLY<END_MOD>); java.util.Set<org.ovirt.engine.core.compat.Guid> sdIds = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getAllStorageIdsForImageIds(allDisks); org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator msdValidator = getStorageDomainsValidator(sdIds); org.ovirt.engine.core.bll.ValidationResult retVal = msdValidator.allDomainsWithinThresholds(); if (retVal == (org.ovirt.engine.core.bll.ValidationResult.VALID)) { return msdValidator.allDomainsHaveSpaceForNewDisks(allDisks); } return retVal; }	protected org.ovirt.engine.core.bll.ValidationResult hasSpaceForSnapshots() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(vm.getId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(disks, org.ovirt.engine.core.bll.validator.ONLY_SNAPABLE); java.util.Set<org.ovirt.engine.core.compat.Guid> sdIds = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getAllStorageIdsForImageIds(allDisks); org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator msdValidator = getStorageDomainsValidator(sdIds); org.ovirt.engine.core.bll.ValidationResult retVal = msdValidator.allDomainsWithinThresholds(); if (retVal == (org.ovirt.engine.core.bll.ValidationResult.VALID)) { return msdValidator.allDomainsHaveSpaceForNewDisks(allDisks); } return retVal; }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmImageDisks() { if ((cachedVmImageDisks) == null) { cachedVmImageDisks = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(getVmDisks(), <START_MOD>org.ovirt.engine.core.bll.validator.NOT_SHAREABLE_DISKS_ONLY<END_MOD>); cachedVmImageDisks.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(getVmDisks(), true)); } return cachedVmImageDisks; }	private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmImageDisks() { if ((cachedVmImageDisks) == null) { cachedVmImageDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(getVmDisks(), org.ovirt.engine.core.bll.validator.ONLY_NOT_SHAREABLE); cachedVmImageDisks.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(getVmDisks(), true)); } return cachedVmImageDisks; }
protected boolean validateSpaceRequirements() { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.fillImagesBySnapshots(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksList = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm().getDiskMap().values(), <START_MOD>org.ovirt.engine.core.bll.NOT_SHAREABLE_DISKS_ONLY<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.ACTIVE_DISKS_ONLY<END_MOD>); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksListForStorageChecks = createDiskDummiesForSpaceValidations(disksList); org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator multipleSdValidator = getStorageDomainsValidator(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm().getStoragePoolId(), getStorageGuidSet()); return (validate(multipleSdValidator.allDomainsWithinThresholds())) && (validate(multipleSdValidator.allDomainsHaveSpaceForClonedDisks(disksListForStorageChecks))); }	protected boolean validateSpaceRequirements() { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.fillImagesBySnapshots(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksList = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.ONLY_ACTIVE); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksListForStorageChecks = createDiskDummiesForSpaceValidations(disksList); org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator multipleSdValidator = getStorageDomainsValidator(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm().getStoragePoolId(), getStorageGuidSet()); return (validate(multipleSdValidator.allDomainsWithinThresholds())) && (validate(multipleSdValidator.allDomainsHaveSpaceForClonedDisks(disksListForStorageChecks))); }
protected void addVmTemplateImages(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> srcDeviceIdToTargetDeviceIdMapping) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(images, <START_MOD>org.ovirt.engine.core.bll.NOT_SHAREABLE_DISKS_ONLY<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.ACTIVE_DISKS_ONLY<END_MOD>); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImages) { addVmTemplateImage(srcDeviceIdToTargetDeviceIdMapping, diskImage); } }	protected void addVmTemplateImages(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> srcDeviceIdToTargetDeviceIdMapping) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(images, org.ovirt.engine.core.bll.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.ONLY_ACTIVE); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImages) { addVmTemplateImage(srcDeviceIdToTargetDeviceIdMapping, diskImage); } }
protected boolean addVmImages() { if (!(vmDisksSource.getDiskTemplateMap().isEmpty())) { if ((org.ovirt.engine.core.bll.AddVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { log.error( add images. VM is not Down throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IRS_IMAGE_STATUS_ILLEGAL); } lockVM(); java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDisks = getImagesToCheckDestinationStorageDomains(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(templateDisks, <START_MOD>org.ovirt.engine.core.bll.NOT_SHAREABLE_DISKS_ONLY, org.ovirt.engine.core.bll.ACTIVE_DISKS_ONLY); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : diskImages) { org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalActionWithTasksContext(getDiskCreationCommandType(), buildDiskCreationParameters(image)); if (!(result.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(result.getFault().getError()); } else { org.ovirt.engine.core.bll.AddVmCommand.getTaskIdList().addAll(result.getInternalVdsmTaskIdList()); org.ovirt.engine.core.common.businessentities.storage.DiskImage newImage = result.getActionReturnValue(); srcDiskIdToTargetDiskIdMapping.put(image.getId(), newImage.getId()); } } addVmCinderDisks(templateDisks); } return <END_MOD>true<START_MOD>; }<END_MOD>	protected boolean addVmImages() { if (!(vmDisksSource.getDiskTemplateMap().isEmpty())) { if ((org.ovirt.engine.core.bll.AddVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { log.error("Cannot add images. VM is not Down"); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IRS_IMAGE_STATUS_ILLEGAL); } lockVM(); java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDisks = getImagesToCheckDestinationStorageDomains(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(templateDisks, org.ovirt.engine.core.bll.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.ONLY_ACTIVE); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : diskImages) { org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalActionWithTasksContext(getDiskCreationCommandType(), buildDiskCreationParameters(image)); if (!(result.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(result.getFault().getError()); } else { org.ovirt.engine.core.bll.AddVmCommand.getTaskIdList().addAll(result.getInternalVdsmTaskIdList()); org.ovirt.engine.core.common.businessentities.storage.DiskImage newImage = result.getActionReturnValue(); srcDiskIdToTargetDiskIdMapping.put(image.getId(), newImage.getId()); } } addVmCinderDisks(templateDisks); } return true; }
private void removeDiskImages() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(getVm().getDiskMap().values(), <START_MOD>org.ovirt.engine.core.bll.exportimport.NOT_SHAREABLE_DISKS_ONLY<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.exportimport.ACTIVE_DISKS_ONLY<END_MOD>); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images) { image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))); image.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStoragePoolId()); } removeVmImages(images); }	private void removeDiskImages() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(getVm().getDiskMap().values(), org.ovirt.engine.core.bll.exportimport.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.exportimport.ONLY_ACTIVE); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images) { image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))); image.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStoragePoolId()); } removeVmImages(images); }
@java.lang.Override protected java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAdjustedDiskImagesFromConfiguration() { if ((diskImagesFromConfiguration) == null) { diskImagesFromConfiguration = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(vmFromConfiguration.getDiskMap().values(), <START_MOD>org.ovirt.engine.core.bll.SNAPABLE_DISKS_ONLY<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.ACTIVE_DISKS_ONLY<END_MOD>); diskImagesFromConfiguration.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(vmFromConfiguration.getDiskMap().values(), true)); adjustDisksImageConfiguration(diskImagesFromConfiguration); } return diskImagesFromConfiguration; }	@java.lang.Override protected java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAdjustedDiskImagesFromConfiguration() { if ((diskImagesFromConfiguration) == null) { diskImagesFromConfiguration = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(vmFromConfiguration.getDiskMap().values(), org.ovirt.engine.core.bll.ONLY_SNAPABLE, org.ovirt.engine.core.bll.ONLY_ACTIVE); diskImagesFromConfiguration.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(vmFromConfiguration.getDiskMap().values(), true)); adjustDisksImageConfiguration(diskImagesFromConfiguration); } return diskImagesFromConfiguration; }
@java.lang.Override protected void executeCommand() { if (org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplate().isBaseTemplate()) { shiftBaseTemplateToSuccessor(); } java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> templateImages = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId()); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(templateImages); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(templateImages, <START_MOD>org.ovirt.engine.core.bll.ACTIVE_DISKS_ONLY); org.ovirt.engine.core.bll.VmTemplateHandler.lockVmTemplateInTransaction(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId()<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getCompensationContext()); if ((!(diskImages.isEmpty())) || (!(cinderDisks.isEmpty()))) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { if ((!(diskImages.isEmpty())) && (removeVmTemplateImages())) { org.ovirt.engine.core.bll.VmHandler.removeVmInitFromDB(getVmTemplate()); setSucceeded(<END_MOD>true); <START_MOD>} if (!(cinderDisks.isEmpty())) { removeCinderDisks(cinderDisks); setSucceeded(true); } return null; }); } if <END_MOD>(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.noAsyncOperations()) { handleEndAction(); } }	@java.lang.Override protected void executeCommand() { if (org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplate().isBaseTemplate()) { shiftBaseTemplateToSuccessor(); } java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> templateImages = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId()); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(templateImages); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(templateImages, org.ovirt.engine.core.bll.ONLY_ACTIVE); org.ovirt.engine.core.bll.VmTemplateHandler.lockVmTemplateInTransaction(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId(), org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getCompensationContext()); if ((!(diskImages.isEmpty())) || (!(cinderDisks.isEmpty()))) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { if ((!(diskImages.isEmpty())) && (removeVmTemplateImages())) { org.ovirt.engine.core.bll.VmHandler.removeVmInitFromDB(getVmTemplate()); setSucceeded(true); } if (!(cinderDisks.isEmpty())) { removeCinderDisks(cinderDisks); setSucceeded(true); } return null; }); } if (org.ovirt.engine.core.bll.RemoveVmTemplateCommand.noAsyncOperations()) { handleEndAction(); } }
public java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmImagesFromDb(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allVmImages = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredDisks = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(vm.getDiskList(), <START_MOD>org.ovirt.engine.core.bll.storage.ovfstore.SNAPABLE_DISKS_ONLY<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.storage.ovfstore.ACTIVE_DISKS_ONLY); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : filteredDisks) { allVmImages.addAll(getAllImageSnapshots(diskImage)); } for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : allVmImages) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskVmElementDao().get(new org.ovirt.engine.core.common.businessentities.VmDeviceId(disk.getId()<END_MOD>, <START_MOD>vm.getId())); disk.setDiskVmElements(java.util.Collections.singletonList(dve)); } return<END_MOD> allVmImages; }	public java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmImagesFromDb(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allVmImages = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(vm.getDiskList(), org.ovirt.engine.core.bll.storage.ovfstore.ONLY_SNAPABLE, org.ovirt.engine.core.bll.storage.ovfstore.ONLY_ACTIVE); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : filteredDisks) { allVmImages.addAll(getAllImageSnapshots(diskImage)); } for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : allVmImages) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskVmElementDao().get(new org.ovirt.engine.core.common.businessentities.VmDeviceId(disk.getId(), vm.getId())); disk.setDiskVmElements(java.util.Collections.singletonList(dve)); } return allVmImages; }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmDisksFromDB() { if ((cachedDisksFromDb) == null) { cachedDisksFromDb = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getVm().getDiskMap().values(), <START_MOD>org.ovirt.engine.core.bll.SNAPABLE_DISKS_ONLY<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.ACTIVE_DISKS_ONLY<END_MOD>); cachedDisksFromDb.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getVm().getDiskMap().values(), true)); } return cachedDisksFromDb; }	@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmDisksFromDB() { if ((cachedDisksFromDb) == null) { cachedDisksFromDb = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.ONLY_SNAPABLE, org.ovirt.engine.core.bll.ONLY_ACTIVE); cachedDisksFromDb.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getVm().getDiskMap().values(), true)); } return cachedDisksFromDb; }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getImageTemplates() { if ((imageTemplates) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> allImages = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId()); imageTemplates = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(allImages, <START_MOD>org.ovirt.engine.core.bll.ACTIVE_DISKS_ONLY<END_MOD>); imageTemplates.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(allImages, true)); } return imageTemplates; }	private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getImageTemplates() { if ((imageTemplates) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> allImages = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId()); imageTemplates = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(allImages, org.ovirt.engine.core.bll.ONLY_ACTIVE); imageTemplates.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(allImages, true)); } return imageTemplates; }
private void buildVmGraphicsDevicesFromDb(java.util.Map<java.lang.String, java.lang.Object> extraSpecParams) { <START_MOD>java.util.Comparator<org.ovirt.engine.core.common.businessentities.VmDevice> spiceLastDeviceComparator = java.util.Comparator.comparing(VmDevice::getDevice, getSpiceLastStringComparator()); <END_MOD>buildVmDevicesFromDb(VmDeviceGeneralType.GRAPHICS, false, extraSpecParams<START_MOD>, spiceLastDeviceComparator<END_MOD>); java.lang.String legacyDisplay = deriveDisplayTypeLegacy(); if (legacyDisplay != null) { createInfo.put(VdsProperties.display, legacyDisplay); } }	private void buildVmGraphicsDevicesFromDb(java.util.Map<java.lang.String, java.lang.Object> extraSpecParams) { java.util.Comparator<org.ovirt.engine.core.common.businessentities.VmDevice> spiceLastDeviceComparator = java.util.Comparator.comparing(VmDevice::getDevice, org.ovirt.engine.core.utils.collections.ComparatorUtils.sortLast(VmDeviceType.SPICE.getName())); buildVmDevicesFromDb(VmDeviceGeneralType.GRAPHICS, false, extraSpecParams, spiceLastDeviceComparator); java.lang.String legacyDisplay = deriveDisplayTypeLegacy(); if (legacyDisplay != null) { createInfo.put(VdsProperties.display, legacyDisplay); } }
private java.util.Comparator<java.lang.String> getSpiceLastStringComparator() { return ( a, b) -> { if (java.util.Objects.equals(a, b)) { return 0; } final java.lang.String spice = "spice"; if (spice.equals(a)) { return 1; } if (spice.equals(b)) { return -1; } return java.util.Comparator.<java.lang.String>naturalOrder().compare(a, b); }; }	private int pinToIoThreads(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, int pinnedDriveIndex) { if ((vm.getNumOfIoThreads()) != 0) { int pinTo = (pinnedDriveIndex % (vm.getNumOfIoThreads())) + 1; pinnedDriveIndex++; vmDevice.getSpecParams().put(VdsProperties.pinToIoThread, pinTo); } return pinnedDriveIndex; }
public org.ovirt.engine.core.bll.CommandMultiAsyncTasks getCommandMultiAsyncTasks() { org.ovirt.engine.core.bll.CommandMultiAsyncTasks entityInfo = null; synchronized(org.ovirt.engine.core.bll.tasks.CommandAsyncTask.<START_MOD>class<END_MOD>) { entityInfo = org.ovirt.engine.core.bll.tasks.CommandAsyncTask._multiTasksByCommandIds.get(getCommandId()); } return entityInfo; }	public org.ovirt.engine.core.bll.CommandMultiAsyncTasks getCommandMultiAsyncTasks() { org.ovirt.engine.core.bll.CommandMultiAsyncTasks entityInfo = null; synchronized(org.ovirt.engine.core.bll.tasks.CommandAsyncTask._lockObject) { entityInfo = org.ovirt.engine.core.bll.tasks.CommandAsyncTask._multiTasksByCommandIds.get(getCommandId()); } return entityInfo; }
private void handleEndActionRuntimeException(org.ovirt.engine.core.bll.CommandMultiAsyncTasks commandInfo, org.ovirt.engine.core.common.businessentities.AsyncTask dbAsyncTask) { try { org.ovirt.engine.core.common.action.VdcActionType actionType = getParameters().getDbAsyncTask().getActionType(); org.ovirt.engine.core.bll.tasks.CommandAsyncTask.log.info(( endAction for action type '{}' threw an +   unrecoverable RuntimeException the task will be cleared. actionType); commandInfo.clearTaskByVdsmTaskId(dbAsyncTask.getVdsmTaskId()); removeTaskFromDB(); if (commandInfo.getAllCleared()) { org.ovirt.engine.core.bll.tasks.CommandAsyncTask.log.info(( Removing CommandMultiAsyncTasks +   object for entity '{}' commandInfo.getCommandId()); synchronized(org.ovirt.engine.core.bll.tasks.CommandAsyncTask.<START_MOD>class<END_MOD>) { org.ovirt.engine.core.bll.tasks.CommandAsyncTask._multiTasksByCommandIds.remove(commandInfo.getCommandId()); } } } catch (java.lang.RuntimeException ex) { org.ovirt.engine.core.bll.tasks.CommandAsyncTask.log.error( [within thread]: an exception has been thrown ex); } }	private void handleEndActionRuntimeException(org.ovirt.engine.core.bll.CommandMultiAsyncTasks commandInfo, org.ovirt.engine.core.common.businessentities.AsyncTask dbAsyncTask) { try { org.ovirt.engine.core.common.action.VdcActionType actionType = getParameters().getDbAsyncTask().getActionType(); org.ovirt.engine.core.bll.tasks.CommandAsyncTask.log.info(("CommandAsyncTask::HandleEndActionResult: endAction for action type '{}' threw an" + " unrecoverable RuntimeException the task will be cleared."), actionType); commandInfo.clearTaskByVdsmTaskId(dbAsyncTask.getVdsmTaskId()); removeTaskFromDB(); if (commandInfo.getAllCleared()) { org.ovirt.engine.core.bll.tasks.CommandAsyncTask.log.info(("CommandAsyncTask::HandleEndActionRuntimeException: Removing CommandMultiAsyncTasks" + " object for entity '{}'"), commandInfo.getCommandId()); synchronized(org.ovirt.engine.core.bll.tasks.CommandAsyncTask._lockObject) { org.ovirt.engine.core.bll.tasks.CommandAsyncTask._multiTasksByCommandIds.remove(commandInfo.getCommandId()); } } } catch (java.lang.RuntimeException ex) { org.ovirt.engine.core.bll.tasks.CommandAsyncTask.log.error("CommandAsyncTask::HandleEndActionResult [within thread]: an exception has been thrown", ex); } }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("availableUpdates") public void availableUpdates() { if (((cachedVds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) && ((cachedVds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.NonOperational))) { org.ovirt.engine.core.vdsbroker.VdsManager.log.warn( for available updates is skipped for host '{}' due to unsupported host status '{}'   cachedVds.getName(), cachedVds.getStatus()); return; } boolean updateAvailable; try { updateAvailable = resourceManager.isUpdateAvailable(cachedVds); } catch (java.lang.Exception e) { org.ovirt.engine.core.vdsbroker.VdsManager.log.error( to check if updates are available for host '{}' cachedVds.getName()); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLog = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLog.setVds(cachedVds); auditLog.addCustomValue("Message", org.apache.commons.lang.StringUtils.defaultString(e.getMessage(), e.getCause().toString())); auditLogDirector.log(auditLog, AuditLogType.HOST_AVAILABLE_UPDATES_FAILED); return; } synchronized(<START_MOD>this<END_MOD>) { if (updateAvailable != (cachedVds.isUpdateAvailable())) { cachedVds.getDynamicData().setUpdateAvailable(updateAvailable); vdsDynamicDao.updateUpdateAvailable(cachedVds.getId(), updateAvailable); } } }	@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("availableUpdates") public void availableUpdates() { if (((cachedVds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) && ((cachedVds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.NonOperational))) { org.ovirt.engine.core.vdsbroker.VdsManager.log.warn("Check for available updates is skipped for host '{}' due to unsupported host status '{}' ", cachedVds.getName(), cachedVds.getStatus()); return; } boolean updateAvailable; try { updateAvailable = resourceManager.isUpdateAvailable(cachedVds); } catch (java.lang.Exception e) { org.ovirt.engine.core.vdsbroker.VdsManager.log.error("Failed to check if updates are available for host '{}' with exception '{}'", cachedVds.getName(), org.apache.commons.lang.StringUtils.defaultString(e.getMessage(), e.getCause().toString())); org.ovirt.engine.core.vdsbroker.VdsManager.log.debug("Exception", e); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLog = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLog.setVds(cachedVds); auditLog.addCustomValue("Message", org.apache.commons.lang.StringUtils.defaultString(e.getMessage(), e.getCause().toString())); auditLogDirector.log(auditLog, AuditLogType.HOST_AVAILABLE_UPDATES_FAILED); return; } synchronized(this) { if (updateAvailable != (cachedVds.isUpdateAvailable())) { cachedVds.getDynamicData().setUpdateAvailable(updateAvailable); vdsDynamicDao.updateUpdateAvailable(cachedVds.getId(), updateAvailable); } } }
public void syncSearch(org.ovirt.engine.core.common.queries.VdcQueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase) { vdcQueryParametersBase.setRefresh(getIsQueryFirstTime()); <START_MOD>if (vdcQueryParametersBase instanceof org.ovirt.engine.core.common.queries.SearchParameters) { org.ovirt.engine.core.common.queries.SearchParameters sp = ((org.ovirt.engine.core.common.queries.SearchParameters) (vdcQueryParametersBase)); int searchPage; com.google.gwt.regexp.shared.MatchResult m = checkForSearchPageRegExp.exec(sp.getSearchPattern()); if (m != null) { searchPage = java.lang.Integer.parseInt(m.getGroup(1), 10); } else { searchPage = 1; } setSearchStringPage(searchPage); } <END_MOD>org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, vdcQueryParametersBase, new SetItemsAsyncQuery()); setIsQueryFirstTime(false); }	protected void syncSearch(org.ovirt.engine.core.common.queries.VdcQueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase) { vdcQueryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, vdcQueryParametersBase, new SetItemsAsyncQuery()); setIsQueryFirstTime(false); }
public void documentModel(org.ovirt.api.metamodel.concepts.Model model) { docBuffer.addLine( Model docBuffer.addLine(); <START_MOD>configuration.getAttributes().map().forEach(( name, value) -> { if (value != null) { docBuffer.addLine( %2$s name, value); } else { docBuffer.addLine(":%1$S:", name); } }); <END_MOD>docBuffer.addLine( 1 model.documents().sorted().forEach(this::addDocument); docBuffer.addLine( 0 docBuffer.addId("requests"); docBuffer.addLine( Requests docBuffer.addLine(); docBuffer.addLine( section enumerates all the requests that are available in the API. docBuffer.addLine(); model.points().sorted(java.util.Comparator.comparing(this::getSortKey)).forEach(this::documentRequest); docBuffer.addLine(); docBuffer.addId("services"); docBuffer.addLine( Services docBuffer.addLine(); docBuffer.addLine( section enumerates all the services that are available in the API. docBuffer.addLine(); docBuffer.addLine(); model.services().sorted().forEach(this::documentService); docBuffer.addId("types"); docBuffer.addLine( Types docBuffer.addLine(); docBuffer.addLine( section enumerates all the data types that are available in the API. docBuffer.addLine(); model.types().sorted().forEach(this::documentType); }	public void documentModel(org.ovirt.api.metamodel.concepts.Model model) { docBuffer.addLine("= Model"); docBuffer.addLine(); configuration.getAttributes().map().forEach(( name, value) -> { if (value != null) { docBuffer.addLine(":%1$s: %2$s", name, value); } else { docBuffer.addLine(":%1$s:", name); } }); docBuffer.addLine(":leveloffset: 1"); model.documents().sorted().forEach(this::addDocument); docBuffer.addLine(":leveloffset: 0"); docBuffer.addId("requests"); docBuffer.addLine("== Requests"); docBuffer.addLine(); docBuffer.addLine("This section enumerates all the requests that are available in the API."); docBuffer.addLine(); model.points().sorted(java.util.Comparator.comparing(this::getSortKey)).forEach(this::documentRequest); docBuffer.addLine(); docBuffer.addId("services"); docBuffer.addLine("== Services"); docBuffer.addLine(); docBuffer.addLine("This section enumerates all the services that are available in the API."); docBuffer.addLine(); docBuffer.addLine(); model.services().sorted().forEach(this::documentService); docBuffer.addId("types"); docBuffer.addLine("== Types"); docBuffer.addLine(); docBuffer.addLine("This section enumerates all the data types that are available in the API."); docBuffer.addLine(); model.types().sorted().forEach(this::documentType); }
public org.ovirt.engine.core.bll.ValidationResult isStorageFormatCompatibleWithDomain() { org.ovirt.engine.core.common.businessentities.StorageFormatType storageFormat = storageDomain.getStorageFormat(); org.ovirt.engine.core.common.businessentities.storage.StorageType storageType = storageDomain.getStorageType(); org.ovirt.engine.core.common.businessentities.StorageDomainType storageDomainFunction = storageDomain.getStorageDomainType(); boolean validationSucceeded = true; if (storageFormat == (org.ovirt.engine.core.common.businessentities.StorageFormatType.V2)) { if (!((storageDomainFunction.isDataDomain()) && (storageType.isBlockDomain()))) { validationSucceeded = false; } } if (<START_MOD>(<END_MOD>storageFormat == (org.ovirt.engine.core.common.businessentities.StorageFormatType.V3<START_MOD>)) || (storageFormat == (org.ovirt.engine.core.common.businessentities.StorageFormatType.V4)<END_MOD>)) { if (!(storageDomainFunction.isDataDomain())) { validationSucceeded = false; } } return validationSucceeded ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_FORMAT_ILLEGAL_HOST, java.lang.String.format( %1$s storageDomain.getStorageFormat())); }	public org.ovirt.engine.core.bll.ValidationResult isStorageFormatCompatibleWithDomain() { org.ovirt.engine.core.common.businessentities.StorageFormatType storageFormat = storageDomain.getStorageFormat(); org.ovirt.engine.core.common.businessentities.storage.StorageType storageType = storageDomain.getStorageType(); org.ovirt.engine.core.common.businessentities.StorageDomainType storageDomainFunction = storageDomain.getStorageDomainType(); boolean validationSucceeded = true; if (storageFormat == (org.ovirt.engine.core.common.businessentities.StorageFormatType.V2)) { if (!((storageDomainFunction.isDataDomain()) && (storageType.isBlockDomain()))) { validationSucceeded = false; } } if ((storageFormat.compareTo(StorageFormatType.V3)) >= 0) { if (!(storageDomainFunction.isDataDomain())) { validationSucceeded = false; } } return validationSucceeded ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_FORMAT_ILLEGAL_HOST, java.lang.String.format("$storageFormat %1$s", storageDomain.getStorageFormat())); }
private static void setRngSupportedSourcesToVds(org.ovirt.engine.core.common.businessentities.VDS vds, java.util.Map<java.lang.String, java.lang.Object> xmlRpcStruct) { vds.getSupportedRngSources().clear(); java.lang.String rngSourcesFromStruct = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignStringValueFromArray(xmlRpcStruct, VdsProperties.rngSources); if (rngSourcesFromStruct != null) { vds.getSupportedRngSources().addAll(org.ovirt.engine.core.<START_MOD>vdsbroker<END_MOD>.<START_MOD>vdsbroker<END_MOD>.<START_MOD>VdsBrokerObjectsBuilder<END_MOD>.csvToSourcesSet(<START_MOD>vds, <END_MOD>rngSourcesFromStruct.toUpperCase())); } }	private static void setRngSupportedSourcesToVds(org.ovirt.engine.core.common.businessentities.VDS vds, java.util.Map<java.lang.String, java.lang.Object> xmlRpcStruct) { vds.getSupportedRngSources().clear(); java.lang.String rngSourcesFromStruct = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignStringValueFromArray(xmlRpcStruct, VdsProperties.rngSources); if (rngSourcesFromStruct != null) { vds.getSupportedRngSources().addAll(org.ovirt.engine.core.common.businessentities.VmRngDevice.csvToSourcesSet(rngSourcesFromStruct.toUpperCase())); } }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(vmDynamic, vmGuestAgentInterfaces, vmStatistics, lunsMap, interfaceStatistics, vNumaNodeStatisticsList<START_MOD>, diskStatistics<END_MOD>); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(vmDynamic, vmGuestAgentInterfaces, vmStatistics, lunsMap, interfaceStatistics, diskStatistics); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm)) { return false; } org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm other = ((org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm) (obj)); return (((((<START_MOD>(<END_MOD>java.util.Objects.equals(vmDynamic, other.vmDynamic)) && (java.util.Objects.equals(vmGuestAgentInterfaces, other.vmGuestAgentInterfaces))) && (java.util.Objects.equals(vmStatistics, other.vmStatistics))) && (java.util.Objects.equals(vNumaNodeStatisticsList, other.vNumaNodeStatisticsList))) && (java.util.Objects.equals(lunsMap, other.lunsMap))) && (java.util.Objects.equals(<START_MOD>diskStatistics, other.diskStatistics))) && (java.util.Objects.equals(<END_MOD>interfaceStatistics, other.interfaceStatistics)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm)) { return false; } org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm other = ((org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm) (obj)); return (((((java.util.Objects.equals(vmDynamic, other.vmDynamic)) && (java.util.Objects.equals(vmGuestAgentInterfaces, other.vmGuestAgentInterfaces))) && (java.util.Objects.equals(vmStatistics, other.vmStatistics))) && (java.util.Objects.equals(lunsMap, other.lunsMap))) && (java.util.Objects.equals(diskStatistics, other.diskStatistics))) && (java.util.Objects.equals(interfaceStatistics, other.interfaceStatistics)); }
private void initHandlers() { org.ovirt.engine.core.searchbackend.BaseConditionFieldAutoCompleter.tagsHandler = <START_MOD>handlersFactory.createTagsHandler()<END_MOD>; org.ovirt.engine.core.bll.VmHandler.init(); org.ovirt.engine.core.bll.VdsHandler.init(); org.ovirt.engine.core.bll.VmTemplateHandler.init(); org.ovirt.engine.core.bll.Backend.log.info( initializing handlers }	private void initHandlers() { org.ovirt.engine.core.searchbackend.BaseConditionFieldAutoCompleter.tagsHandler = tagsDirector; org.ovirt.engine.core.bll.VmHandler.init(); org.ovirt.engine.core.bll.VdsHandler.init(); org.ovirt.engine.core.bll.VmTemplateHandler.init(); org.ovirt.engine.core.bll.Backend.log.info("Completed initializing handlers"); }
java.util.Map getNumaNodeMemFreeMap() { java.util.Map numaNodeMemFreeMap = map(); java.util.Map nodeZeroNumaFreeMemMap = map(); nodeZeroNumaFreeMemMap.put("memFree", java.lang.Integer.valueOf(13968)); nodeZeroNumaFreeMemMap.put("memPercent", "15"); numaNodeMemFreeMap.put("0", nodeZeroNumaFreeMemMap); java.util.Map nodeOneNumaFreeMemMap = map(); nodeOneNumaFreeMemMap.put("memFree", java.lang.Integer.valueOf(14244)); nodeOneNumaFreeMemMap.put("memPercent", "14"); numaNodeMemFreeMap.put("1", nodeOneNumaFreeMemMap); return numaNodeMemFreeMap; }	java.util.Map getNumaNodeMemFreeMap(int memFree, java.lang.String memUsed) { double memFreePerNode = ((double) (memFree)) / (org.ovirt.vdsmfake.service.HostService.NUMBER_OF_NUMA_NODES); int nodeZeroMemFree = ((int) (java.lang.Math.floor(memFreePerNode))); int nodeOneMemFree = ((int) (java.lang.Math.ceil(memFreePerNode))); java.util.Map nodeZeroNumaFreeMemMap = map(); nodeZeroNumaFreeMemMap.put("memFree", java.lang.Integer.valueOf(nodeZeroMemFree)); nodeZeroNumaFreeMemMap.put("memPercent", memUsed); java.util.Map nodeOneNumaFreeMemMap = map(); nodeOneNumaFreeMemMap.put("memFree", java.lang.Integer.valueOf(nodeOneMemFree)); nodeOneNumaFreeMemMap.put("memPercent", memUsed); java.util.Map numaNodeMemFreeMap = map(); numaNodeMemFreeMap.put("0", nodeZeroNumaFreeMemMap); numaNodeMemFreeMap.put("1", nodeOneNumaFreeMemMap); return numaNodeMemFreeMap; }
java.util.Map getNumaNodesMap() { java.util.Map numaNodesMap = map(); java.util.Map nodeZeroMap = map(); java.util.List nodeZeroCpuList = lst(); nodeZeroCpuList.add(java.lang.Integer.valueOf(1)); nodeZeroCpuList.add(java.lang.Integer.valueOf(3)); nodeZeroCpuList.add(java.lang.Integer.valueOf(5)); nodeZeroCpuList.add(java.lang.Integer.valueOf(7)); nodeZeroCpuList.add(java.lang.Integer.valueOf(9)); nodeZeroCpuList.add(java.lang.Integer.valueOf(11)); nodeZeroCpuList.add(java.lang.Integer.valueOf(13)); nodeZeroCpuList.add(java.lang.Integer.valueOf(15)); nodeZeroMap.put("cpus", nodeZeroCpuList); nodeZeroMap.put("totalMemory", java.lang.Integer.valueOf(16373)); numaNodesMap.put("0", nodeZeroMap); java.util.Map nodeOneMap = map(); java.util.List nodeOneCpuList = lst(); nodeOneCpuList.add(java.lang.Integer.valueOf(0)); nodeOneCpuList.add(java.lang.Integer.valueOf(2)); nodeOneCpuList.add(java.lang.Integer.valueOf(4)); nodeOneCpuList.add(java.lang.Integer.valueOf(6)); nodeOneCpuList.add(java.lang.Integer.valueOf(8)); nodeOneCpuList.add(java.lang.Integer.valueOf(10)); nodeOneCpuList.add(java.lang.Integer.valueOf(12)); nodeOneCpuList.add(java.lang.Integer.valueOf(14)); nodeOneMap.put("cpus", nodeOneCpuList); nodeOneMap.put("totalMemory", java.lang.Integer.valueOf(16383)); numaNodesMap.put("1", nodeOneMap); return numaNodesMap; }	java.util.Map getNumaNodesMap() { java.util.Map numaNodesMap = map(); int totalMemPerNode = (org.ovirt.vdsmfake.service.HostService.TOTAL_MEMORY_SIZE) / (org.ovirt.vdsmfake.service.HostService.NUMBER_OF_NUMA_NODES); java.util.Map nodeZeroMap = map(); java.util.List nodeZeroCpuList = lst(); nodeZeroCpuList.add(java.lang.Integer.valueOf(1)); nodeZeroCpuList.add(java.lang.Integer.valueOf(3)); nodeZeroCpuList.add(java.lang.Integer.valueOf(5)); nodeZeroCpuList.add(java.lang.Integer.valueOf(7)); nodeZeroCpuList.add(java.lang.Integer.valueOf(9)); nodeZeroCpuList.add(java.lang.Integer.valueOf(11)); nodeZeroCpuList.add(java.lang.Integer.valueOf(13)); nodeZeroCpuList.add(java.lang.Integer.valueOf(15)); nodeZeroMap.put("cpus", nodeZeroCpuList); nodeZeroMap.put("totalMemory", java.lang.Integer.valueOf(totalMemPerNode)); numaNodesMap.put("0", nodeZeroMap); java.util.Map nodeOneMap = map(); java.util.List nodeOneCpuList = lst(); nodeOneCpuList.add(java.lang.Integer.valueOf(0)); nodeOneCpuList.add(java.lang.Integer.valueOf(2)); nodeOneCpuList.add(java.lang.Integer.valueOf(4)); nodeOneCpuList.add(java.lang.Integer.valueOf(6)); nodeOneCpuList.add(java.lang.Integer.valueOf(8)); nodeOneCpuList.add(java.lang.Integer.valueOf(10)); nodeOneCpuList.add(java.lang.Integer.valueOf(12)); nodeOneCpuList.add(java.lang.Integer.valueOf(14)); nodeOneMap.put("cpus", nodeOneCpuList); nodeOneMap.put("totalMemory", java.lang.Integer.valueOf(totalMemPerNode)); numaNodesMap.put("1", nodeOneMap); return numaNodesMap; }
@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException {<START_MOD> org.ovirt.engine.core.aaa.servlet.SsoLoginServlet.log.debug( SsoLoginServlet<END_MOD> java.lang.String scope = java.lang.String.format( ovirt-app-portal ovirt-ext=auth:sequence-priority=%s org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty(authSequencePriorityPropertyName)); <START_MOD>java.lang.String redirectUri = java.lang.String.format("%s://%s:%s%s", request.getScheme(), org.ovirt.engine.core.aaa.filters.FiltersHelper.getRedirectUriServerName(request.getServerName()), request.getServerPort(), postActionUrl); java.lang.String url = new org.ovirt.engine.core.uutils.net.URLBuilder(org.ovirt.engine.core.aaa.filters.FiltersHelper.getEngineSsoUrl(request), "/oauth/authorize").addParameter("client_id", org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_SSO_CLIENT_ID")).addParameter("response_type", "code").addParameter<END_MOD>("app_url", request.getParameter("app_url"))<START_MOD>.addParameter("engine_url", org.ovirt.engine.core.aaa.filters.FiltersHelper.getEngineUrl(request)).addParameter("redirect_uri",<END_MOD> redirectUri<START_MOD>).addParameter("scope", scope).build(); org.ovirt.engine.core.aaa.servlet.SsoLoginServlet.log.debug( to url: {} url<END_MOD>); response.sendRedirect(<START_MOD>url<END_MOD>); }	@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { org.ovirt.engine.core.aaa.servlet.SsoLoginServlet.log.debug("Entered SsoLoginServlet"); java.lang.String scope = java.lang.String.format("ovirt-app-admin ovirt-app-portal ovirt-ext=auth:sequence-priority=%s", org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty(authSequencePriorityPropertyName)); java.lang.String redirectUri = java.lang.String.format("%s://%s:%s%s", request.getScheme(), org.ovirt.engine.core.aaa.filters.FiltersHelper.getRedirectUriServerName(request.getServerName()), request.getServerPort(), postActionUrl); java.lang.String url = new org.ovirt.engine.core.uutils.net.URLBuilder(org.ovirt.engine.core.aaa.filters.FiltersHelper.getEngineSsoUrl(request), "/oauth/authorize").addParameter("client_id", org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_SSO_CLIENT_ID")).addParameter("response_type", "code").addParameter("app_url", request.getParameter("app_url")).addParameter("engine_url", org.ovirt.engine.core.aaa.filters.FiltersHelper.getEngineUrl(request)).addParameter("redirect_uri", redirectUri).addParameter("scope", scope).build(); org.ovirt.engine.core.aaa.servlet.SsoLoginServlet.log.debug("Redirecting to '{}'", url); response.sendRedirect(url); }
protected void closeChannel(<START_MOD>) { try (org.ovirt.vdsm.jsonrpc.client.utils.LockWrapper wrapper = new org.ovirt.vdsm.jsonrpc.client.utils.LockWrapper(this.lock)<END_MOD>) { try { if ((this.channel) != null) { this.channel.close(); } } catch (java.io.IOException e) { } finally { this.channel = null; } }<START_MOD> }<END_MOD>	protected void closeChannel() { final java.util.concurrent.Callable<java.lang.Void> callable = new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { if (lock.tryLock()) { try { if ((channel) != null) { channel.close(); } } catch (java.io.IOException e) { } finally { channel = null; lock.unlock(); } } else { scheduleTask(this); } return null; } }; try { callable.call(); } catch (java.lang.Exception e) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.warn("Closing channel failed", e); } }
public void clearPropertyChangedEvent() { propertyChangedEvent = null; }	protected void cleanupEvents(org.ovirt.engine.ui.uicompat.Event<?>... events) { for (org.ovirt.engine.ui.uicompat.Event<?> event : events) { if (event != null) { event.clearListeners(); } } }
@java.lang.Override public void hideAndUnbind() { super.hideAndUnbind(); model.clearPropertyChangedEvent(); if (model.hasEventBusSet()) { model.unsetEventBus(); } model = null; }	@java.lang.Override public void hideAndUnbind() { super.hideAndUnbind(); org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget.getView().cleanup(); this.model.cleanup(); this.model = null; }
public java.util.Map activateStorageDomain(java.lang.String sdUUID, java.lang.String spUUID) { try { log.info( storage domain, spUUID: {} sdUUID: {} new java.lang.Object[]{ spUUID, sdUUID }); final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); org.ovirt.vdsmfake.domain.StorageDomain storageDomain = dataCenter.getStorageDomainMap().get(sdUUID); if (storageDomain != null) { <START_MOD>activateClearance(storageDomain); } else { storageDomain = getActiveDomain(sdUUID, spUUID); activateClearance<END_MOD>(storageDomain); } return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }	public java.util.Map activateStorageDomain(java.lang.String sdUUID, java.lang.String spUUID) { try { log.info("Activating storage domain, spUUID: {} sdUUID: {}", new java.lang.Object[]{ spUUID, sdUUID }); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = getDataCenterById(spUUID).getStorageDomainMap().get(sdUUID); if (storageDomain != null) { activateClearance(storageDomain); log.info("storage were activated {} {}", storageDomain.getName(), sdUUID); } else { log.warn("No storage domains were activated for storage domain '{}' and storage pool '{}'", sdUUID, spUUID); } return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }
public void activateClearance(org.ovirt.vdsmfake.domain.StorageDomain storageDomain) { storageDomain.setDomainStatus(StorageDomain.DomainStatus.ACTIVE); updateStorageDomain(storageDomain); }	private void activateClearance(org.ovirt.vdsmfake.domain.StorageDomain storageDomain) { storageDomain.setDomainStatus(StorageDomain.DomainStatus.ACTIVE); updateStorageDomain(storageDomain); }
public static org.ovirt.engine.core.common.action.VdcReturnValueBase canDoAction(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, org.ovirt.engine.core.bll.<START_MOD>context<END_MOD>.<START_MOD>CommandContext<END_MOD> <START_MOD>commandContext<END_MOD>, boolean isInternal) {<START_MOD> parameters.setSessionId(commandContext.getEngineContext().getSessionId());<END_MOD> org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.tasks.CommandHelper.buildCommand(actionType, parameters, <START_MOD>commandContext.getExecutionContext()<END_MOD>, CommandStatus.NOT_STARTED); command.setInternalExecution(isInternal); return command.validateOnly(); }	public static org.ovirt.engine.core.common.action.VdcReturnValueBase canDoAction(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, org.ovirt.engine.core.bll.context.CommandContext commandContext) { return org.ovirt.engine.core.bll.CommandsFactory.createCommand(actionType, parameters, commandContext).validateOnly(); }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = org.ovirt.engine.core.bll.tasks.CommandHelper.canDoAction(VdcActionType.AddDisk, getAddDiskParameters(), org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand.getContext().clone(), true); org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand.getReturnValue().setValidationMessages(returnValue.getValidationMessages()); return returnValue.isValid(); }	@java.lang.Override protected boolean validate() { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = org.ovirt.engine.core.bll.tasks.CommandHelper.canDoAction(VdcActionType.AddDisk, getAddDiskParameters(), org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand.getContext().clone()); org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand.getReturnValue().setValidationMessages(returnValue.getValidationMessages()); return returnValue.isValid(); }
@java.lang.Override public void invoke(org.ovirt.engine.api.extensions.ExtMap context, java.util.Map<java.lang.String, java.lang.Object> args) { context.mput(Schema.InvokeKeys.MODIFICATION_TYPE, Sql.ModificationTypes.INSERT); context.put(Schema.InvokeKeys.ENTITY_KEYS, org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.getGroupKeys(args, context.get(ContextKeys.POSITIONAL, java.lang.String.class))); if (!(context.containsKey(ContextKeys.EXIT_STATUS))) { org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.commands.get("_schema-modify").invoke(context); <START_MOD>} if (!(context.containsKey(ContextKeys.EXIT_STATUS))) { <END_MOD>context.put(ContextKeys.EXIT_STATUS, org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.SUCCESS); } }	@java.lang.Override public void invoke(org.ovirt.engine.api.extensions.ExtMap context, java.util.Map<java.lang.String, java.lang.Object> args) { context.mput(Schema.InvokeKeys.MODIFICATION_TYPE, Sql.ModificationTypes.INSERT); context.put(Schema.InvokeKeys.ENTITY_KEYS, org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.getGroupKeys(args, context.get(ContextKeys.POSITIONAL, java.lang.String.class))); if (!(context.containsKey(ContextKeys.EXIT_STATUS))) { org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.commands.get("_schema-modify").invoke(context); context.putIfAbsent(ContextKeys.EXIT_STATUS, org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.SUCCESS); } }
public void onMaintenance() { org.ovirt.engine.ui.uicommonweb.models.<START_MOD>HostMaintenanceConfirmationModel<END_MOD> model = ((org.ovirt.engine.ui.uicommonweb.models.<START_MOD>HostMaintenanceConfirmationModel<END_MOD>) (org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getConfirmWindow())); if ((model.getProgress()) != null) { return; } java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> list = new java.util.ArrayList<>(); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> vdss = new java.util.ArrayList<>(); for (java.lang.Object item : org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getSelectedItems()) { org.ovirt.engine.core.common.businessentities.VDS vds = ((org.ovirt.engine.core.common.businessentities.VDS) (item)); vdss.add(vds.getId()); } list.add(new org.ovirt.engine.core.common.action.MaintenanceNumberOfVdssParameters(vdss, false, model.getReason().getEntity(), model.<START_MOD>getStopGlusterServices().getEntity(), model.<END_MOD>getForce().getEntity())); model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.MaintenanceNumberOfVdss, list, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (result.getState())); localModel.stopProgress(); cancelConfirm(); } }, model); }	public void onMaintenance() { org.ovirt.engine.ui.uicommonweb.models.HostMaintenanceConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.HostMaintenanceConfirmationModel) (org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getConfirmWindow())); if ((model.getProgress()) != null) { return; } java.util.ArrayList<org.ovirt.engine.core.compat.Guid> vdss = new java.util.ArrayList<>(); for (java.lang.Object item : org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getSelectedItems()) { org.ovirt.engine.core.common.businessentities.VDS vds = ((org.ovirt.engine.core.common.businessentities.VDS) (item)); vdss.add(vds.getId()); } org.ovirt.engine.core.common.action.MaintenanceNumberOfVdssParameters params = new org.ovirt.engine.core.common.action.MaintenanceNumberOfVdssParameters(vdss, false, model.getReason().getEntity(), model.getStopGlusterServices().getEntity(), model.getForce().getEntity()); model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.MaintenanceNumberOfVdss, params, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (result.getState())); localModel.stopProgress(); if (((result.getReturnValue()) != null) && (result.getReturnValue().getSucceeded())) { cancelConfirm(); } } }, model); }
@org.junit.Test public void setAndValidateWithoutDiskProfilesTest() { diskImage = createDisk(); map.clear(); map.put(diskImage, org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_1); assertEquals(diskProfileHelper.setAndValidateDiskProfiles(map, org.ovirt.engine.core.compat.Version.getLast(), null), ValidationResult.VALID); }	@org.junit.Test public void setAndValidateWithoutDiskProfilesTest() { map.put(diskImage, org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_1); assertEquals(diskProfileHelper.setAndValidateDiskProfiles(map, org.ovirt.engine.core.compat.Version.getLast(), dbUser), ValidationResult.VALID); }
@org.junit.Before public void setUp() { diskProfile_a = diskProfileHelper.createDiskProfile(org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_1, "disk_profile_A"); diskProfile_b = diskProfileHelper.createDiskProfile(org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_2, "disk_profile_B"); diskProfileDao.save(diskProfile_a); diskProfileDao.save(diskProfile_b); when(diskProfileHelper.isDiskProfileParentEntityValid(any(org.ovirt.engine.core.common.businessentities.profiles.DiskProfile.class), any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(ValidationResult.VALID); doReturn(org.ovirt.engine.core.compat.Guid.newGuid()).when(permissionDao).getEntityPermissions(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.common.businessentities.ActionGroup.class), any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.common.VdcObjectType.class)); doReturn(java.util.Arrays.asList(diskProfile_a)).when(diskProfileDao).getAllForStorageDomain(org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_1); doReturn(java.util.Arrays.asList(diskProfile_b)).when(diskProfileDao).getAllForStorageDomain(org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_2); }	@org.junit.Before public void setUp() { dbUser = new org.ovirt.engine.core.common.businessentities.aaa.DbUser(); dbUser.setId(org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.USER_ENTITY_ID); diskProfile_a = diskProfileHelper.createDiskProfile(org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_1, "disk_profile_A"); diskProfile_b = diskProfileHelper.createDiskProfile(org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_2, "disk_profile_B"); diskImage = createDisk(); map.clear(); when(diskProfileHelper.isDiskProfileParentEntityValid(any(org.ovirt.engine.core.common.businessentities.profiles.DiskProfile.class), any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(ValidationResult.VALID); doReturn(org.ovirt.engine.core.compat.Guid.newGuid()).when(permissionDao).getEntityPermissions(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.common.businessentities.ActionGroup.class), any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.common.VdcObjectType.class)); doReturn(java.util.Arrays.asList(diskProfile_a)).when(diskProfileDao).getAllForStorageDomain(org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_1); doReturn(java.util.Arrays.asList(diskProfile_b)).when(diskProfileDao).getAllForStorageDomain(org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_2); }
private <START_MOD>void updateDiskImageProfilesList(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage, org.ovirt.engine.core.compat.Guid storageDomainId<END_MOD>) { <START_MOD>java.util.List<org.ovirt.engine.core.compat.Guid> diskProfileIds = diskImage.getDiskProfileIds<END_MOD>(); <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> diskProfilesListByStorageDomain = diskProfileDao.getAllForStorageDomain(storageDomainId); for (org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile : diskProfilesListByStorageDomain) { if (diskProfileIds.contains(diskProfile.getId())) { diskImage.setDiskProfileIds(new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(java.util.Arrays.asList(diskProfile.getId()))); <END_MOD>}<START_MOD> } }<END_MOD>	private org.ovirt.engine.core.common.businessentities.profiles.DiskProfile updateDiskImageProfilesList(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage, org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.common.businessentities.profiles.DiskProfile currentDiskProfile = null; if (storageDomainId != null) { java.util.List<org.ovirt.engine.core.compat.Guid> diskProfileIds = diskImage.getDiskProfileIds(); java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> diskProfilesListByStorageDomain = diskProfileDao.getAllForStorageDomain(storageDomainId); for (org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile : diskProfilesListByStorageDomain) { if (diskProfileIds.contains(diskProfile.getId())) { currentDiskProfile = diskProfile; diskImage.setDiskProfileIds(new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(java.util.Arrays.asList(diskProfile.getId()))); break; } } } return currentDiskProfile; }
@org.junit.Test public void setAndValidateSingleProfileTest() { diskImage = createDisk(); diskImage.setDiskProfileId(diskProfile_a.getId()); map.clear(); map.put(diskImage, org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_1); assertEquals(diskProfileHelper.setAndValidateDiskProfiles(map, org.ovirt.engine.core.compat.Version.getLast(), null), ValidationResult.VALID); }	@org.junit.Test public void setAndValidateSingleProfileTest() { diskImage.setDiskProfileId(diskProfile_a.getId()); map.put(diskImage, org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_1); assertEquals(diskProfileHelper.setAndValidateDiskProfiles(map, org.ovirt.engine.core.compat.Version.getLast(), dbUser), ValidationResult.VALID); }
@org.junit.Test public void setAndValidateMultipleStorageDomainsAndDiskProfilesTest() { diskImage = createDisk(); diskImage.setDiskProfileIds(new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(java.util.Arrays.asList(diskProfile_a.getId(), diskProfile_b.getId()))); map.clear(); map.put(diskImage, org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_1); assertEquals(diskProfileHelper.setAndValidateDiskProfiles(map, org.ovirt.engine.core.compat.Version.getLast(), null), ValidationResult.VALID); map.clear(); map.put(diskImage, org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_2); assertEquals(diskProfileHelper.setAndValidateDiskProfiles(map, org.ovirt.engine.core.compat.Version.getLast(), null), ValidationResult.VALID); }	@org.junit.Test public void setAndValidateMultipleStorageDomainsAndDiskProfilesTest() { diskImage.setDiskProfileIds(new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(java.util.Arrays.asList(diskProfile_a.getId(), diskProfile_b.getId()))); map.put(diskImage, org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_1); assertEquals(diskProfileHelper.setAndValidateDiskProfiles(map, org.ovirt.engine.core.compat.Version.getLast(), dbUser), ValidationResult.VALID); diskImage.setDiskProfileIds(new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(java.util.Arrays.asList(diskProfile_a.getId(), diskProfile_b.getId()))); map.clear(); map.put(diskImage, org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_2); assertEquals(diskProfileHelper.setAndValidateDiskProfiles(map, org.ovirt.engine.core.compat.Version.getLast(), dbUser), ValidationResult.VALID); }
private static void addToAuditLogErrorMessage(java.lang.String problematicRepoFilesList) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("imageDomains", problematicRepoFilesList); org.ovirt.engine.core.bll.storage.domain.<START_MOD>IsoDomainListSynchronizer<END_MOD>.auditLogDirector.log(logable, AuditLogType.REFRESH_REPOSITORY_IMAGE_LIST_FAILED); }	private void addToAuditLogErrorMessage(java.lang.String problematicRepoFilesList) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("imageDomains", problematicRepoFilesList); auditLogDirector.log(logable, AuditLogType.REFRESH_REPOSITORY_IMAGE_LIST_FAILED); }
private boolean refreshRepos(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType) { boolean refreshResult; java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> tempProblematicRepoFileList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = <START_MOD>storageDomainDao<END_MOD>.get(storageDomainId); if ((storageDomain.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO)) { refreshResult = refreshIsoDomain(storageDomainId, tempProblematicRepoFileList, imageType); } else if (((storageDomain.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Image)) && ((storageDomain.getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLANCE))) { refreshResult = refreshImageDomain(storageDomain, imageType); } else { org.ovirt.engine.core.bll.storage.domain.<START_MOD>IsoDomainListSynchronizer<END_MOD>.log.error( to refresh the storage domain '{}', Storage Domain Type '{}' not supported storageDomainId, storageDomain.getStorageDomainType()); return false; } <START_MOD>handleErrorLog(tempProblematicRepoFileList); if (refreshResult) { <END_MOD>org.ovirt.engine.core.bll.storage.domain.<START_MOD>IsoDomainListSynchronizer<END_MOD>.addToAuditLogSuccessMessage(storageDomain.getStorageName(), imageType.name()); } return refreshResult; }	private boolean refreshRepos(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType) { boolean refreshResult; java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> tempProblematicRepoFileList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = storageDomainDao.get(storageDomainId); if ((storageDomain.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO)) { refreshResult = refreshIsoDomain(storageDomainId, tempProblematicRepoFileList, imageType); } else if (((storageDomain.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Image)) && ((storageDomain.getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLANCE))) { refreshResult = refreshImageDomain(storageDomain, imageType); } else { org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.error("Unable to refresh the storage domain '{}', Storage Domain Type '{}' not supported", storageDomainId, storageDomain.getStorageDomainType()); return false; } handleErrorLog(tempProblematicRepoFileList); if (refreshResult) { addToAuditLogSuccessMessage(storageDomain.getStorageName(), imageType.name()); } return refreshResult; }
private static java.util.concurrent.locks.Lock getSyncObject(org.ovirt.engine.core.compat.Guid domainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType) { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.ImageFileType> domainPerFileType = new org.ovirt.engine.core.common.utils.Pair(domainId, imageType); org.ovirt.engine.core.bll.storage.domain.<START_MOD>IsoDomainListSynchronizer<END_MOD>.syncDomainForFileTypeMap.putIfAbsent(domainPerFileType, new java.util.concurrent.locks.ReentrantLock()); return org.ovirt.engine.core.bll.storage.domain.<START_MOD>IsoDomainListSynchronizer<END_MOD>.syncDomainForFileTypeMap.get(domainPerFileType); }	private java.util.concurrent.locks.Lock getSyncObject(org.ovirt.engine.core.compat.Guid domainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType) { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.ImageFileType> domainPerFileType = new org.ovirt.engine.core.common.utils.Pair(domainId, imageType); syncDomainForFileTypeMap.putIfAbsent(domainPerFileType, new java.util.concurrent.locks.ReentrantLock()); return syncDomainForFileTypeMap.get(domainPerFileType); }
private boolean handleErrorLog(java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> problematicFileListForHandleError) { boolean hasProblematic = false; if ((problematicFileListForHandleError != null) && (!(problematicFileListForHandleError.isEmpty()))) { java.lang.StringBuilder problematicStorages = new java.lang.StringBuilder(); java.lang.StringBuilder problematicIsoDomainsForAuditLog = new java.lang.StringBuilder(); java.util.Set<java.lang.String> storageDomainNames = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.storage.RepoImage repoMap : problematicFileListForHandleError) { problematicStorages.append(org.ovirt.engine.core.bll.storage.domain.<START_MOD>IsoDomainListSynchronizer<END_MOD>.buildDetailedProblematicMapMsg(repoMap)); storageDomainNames.add(<START_MOD>buildDetailedAuditLogMessage(repoMap)); } for (java.lang.String domainName : storageDomainNames) { problematicIsoDomainsForAuditLog.append(   } hasProblematic = true; <END_MOD>org.ovirt.engine.core.bll.storage.domain.<START_MOD>IsoDomainListSynchronizer<END_MOD>.log.error( following storage domains had a problem retrieving data from VDSM: {} problematicStorages); org.ovirt.engine.core.bll.storage.domain.<START_MOD>IsoDomainListSynchronizer<END_MOD>.addToAuditLogErrorMessage(problematicIsoDomainsForAuditLog.toString()); } return hasProblematic; }	private boolean handleErrorLog(java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> problematicFileListForHandleError) { boolean hasProblematic = false; if ((problematicFileListForHandleError != null) && (!(problematicFileListForHandleError.isEmpty()))) { java.lang.StringBuilder problematicStorages = new java.lang.StringBuilder(); java.lang.StringBuilder problematicIsoDomainsForAuditLog = new java.lang.StringBuilder(); java.util.Set<java.lang.String> storageDomainNames = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.storage.RepoImage repoMap : problematicFileListForHandleError) { problematicStorages.append(org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.buildDetailedProblematicMapMsg(repoMap)); storageDomainNames.add(buildDetailedAuditLogMessage(repoMap)); } for (java.lang.String domainName : storageDomainNames) { problematicIsoDomainsForAuditLog.append(" ").append(domainName); } hasProblematic = true; org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.error("The following storage domains had a problem retrieving data from VDSM: {}", problematicStorages); addToAuditLogErrorMessage(problematicIsoDomainsForAuditLog.toString()); } return hasProblematic; }
private boolean refreshVdsmFileList(org.ovirt.engine.core.compat.Guid repoStoragePoolId, org.ovirt.engine.core.compat.Guid repoStorageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageFileType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> fileStats, org.ovirt.engine.core.bll.storage.domain.<START_MOD>IsoDomainListSynchronizer<END_MOD>.FileListRefreshed fileListRefreshed) { if (repoStorageDomainId == null) { return false; } boolean vdsmRefreshOk = fileStats != null; org.ovirt.engine.core.bll.storage.domain.<START_MOD>IsoDomainListSynchronizer<END_MOD>.log.debug( refresh process from VDSM, for {}, {}. imageFileType, succeededOrFailed(vdsmRefreshOk)); if (!vdsmRefreshOk) { return false; } boolean refreshSucceeded = org.ovirt.engine.core.bll.storage.domain.<START_MOD>IsoDomainListSynchronizer<END_MOD>.refreshIsoFileListMetaData(repoStorageDomainId, repoStorageDom, fileStats, imageFileType); if (refreshSucceeded && (fileListRefreshed != null)) { fileListRefreshed.onFileListRefreshed(repoStoragePoolId, fileStats.keySet()); } return refreshSucceeded; }	private boolean refreshVdsmFileList(org.ovirt.engine.core.compat.Guid repoStoragePoolId, org.ovirt.engine.core.compat.Guid repoStorageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageFileType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> fileStats, org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.FileListRefreshed fileListRefreshed) { if (repoStorageDomainId == null) { return false; } boolean vdsmRefreshOk = fileStats != null; org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.debug("The refresh process from VDSM, for {}, {}.", imageFileType, succeededOrFailed(vdsmRefreshOk)); if (!vdsmRefreshOk) { return false; } boolean refreshSucceeded = refreshIsoFileListMetaData(repoStorageDomainId, fileStats, imageFileType); if (refreshSucceeded && (fileListRefreshed != null)) { fileListRefreshed.onFileListRefreshed(repoStoragePoolId, fileStats.keySet()); } return refreshSucceeded; }
private static void addToAuditLogSuccessMessage(java.lang.String IsoDomain, java.lang.String imageType) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("imageDomains", java.lang.String.format( (%s file type) IsoDomain, imageType)); org.ovirt.engine.core.bll.storage.domain.<START_MOD>IsoDomainListSynchronizer<END_MOD>.auditLogDirector.log(logable, AuditLogType.REFRESH_REPOSITORY_IMAGE_LIST_SUCCEEDED); }	private void addToAuditLogSuccessMessage(java.lang.String IsoDomain, java.lang.String imageType) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("imageDomains", java.lang.String.format("%s (%s file type)", IsoDomain, imageType)); auditLogDirector.log(logable, AuditLogType.REFRESH_REPOSITORY_IMAGE_LIST_SUCCEEDED); }
private void mockIsoDomainListSyncronizer() { doReturn(<START_MOD>isoDomainListSynchronizer<END_MOD>).when(command).<START_MOD>getIsoDomainListSynchronizer<END_MOD>(); }	private void mockIsoDomainListSynchronizer() { doReturn(isoDomainListSynchronizer).when(command).getIsoDomainListSynchronizer(); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("fetchIsoDomains") public synchronized void fetchIsoDomains() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> repofileList = <START_MOD>repoStorageDom<END_MOD>.getAllRepoFilesForAllStoragePools(StorageDomainType.ISO, StoragePoolStatus.Up, StorageDomainStatus.Active, VDSStatus.Up); resetProblematicList(); java.util.List<java.util.concurrent.Callable<java.lang.Void>> tasks = new java.util.ArrayList<>(); for (final org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage : repofileList) { if (shouldRefreshIsoDomain(repoImage.getLastRefreshed())) { tasks.add(() -> { updateCachedIsoFileListFromVdsm(repoImage); return null; }); } else { org.ovirt.engine.core.bll.storage.domain.<START_MOD>IsoDomainListSynchronizer<END_MOD>.log.debug(( refresh process for '{}' file type in storage domain id '{}' was not performed +   since refresh time out did not passed yet. repoImage.getFileType(), repoImage.getRepoDomainId()); } } org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.invokeAll(tasks); handleErrorLog(new java.util.ArrayList(problematicRepoFileList)); }	@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("fetchIsoDomains") public synchronized void fetchIsoDomains() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> repofileList = repoFileMetaDataDao.getAllRepoFilesForAllStoragePools(StorageDomainType.ISO, StoragePoolStatus.Up, StorageDomainStatus.Active, VDSStatus.Up); resetProblematicList(); java.util.List<java.util.concurrent.Callable<java.lang.Void>> tasks = new java.util.ArrayList<>(); for (final org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage : repofileList) { if (shouldRefreshIsoDomain(repoImage.getLastRefreshed())) { tasks.add(() -> { updateCachedIsoFileListFromVdsm(repoImage); return null; }); } else { org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.debug(("Automatic refresh process for '{}' file type in storage domain id '{}' was not performed" + " since refresh time out did not passed yet."), repoImage.getFileType(), repoImage.getRepoDomainId()); } } org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.invokeAll(tasks); handleErrorLog(new java.util.ArrayList(problematicRepoFileList)); }
private void setJobStatusExpectations(org.ovirt.engine.core.compat.Guid jobId, org.ovirt.engine.core.common.job.JobExecutionStatus jobStatus, org.ovirt.engine.core.common.queries.VdcQueryReturnValue monitorResult, org.ovirt.engine.core.common.action.VdcReturnValueBase result) { <START_MOD>when<END_MOD>(result.getJobId()).<START_MOD>thenReturn(jobId<END_MOD>); if (jobId != null) { org.ovirt.engine.core.common.job.Job jobMock = <START_MOD>mock<END_MOD>(org.ovirt.engine.core.common.job.Job.class); <START_MOD>when<END_MOD>(jobMock.getStatus()).<START_MOD>thenReturn<END_MOD>(jobStatus); <START_MOD>when<END_MOD>(monitorResult.getReturnValue()).<START_MOD>thenReturn<END_MOD>(jobMock)<START_MOD>; when<END_MOD>(backend.runQuery(eq(VdcQueryType.GetJobByJobId), eqQueryParams(org.ovirt.engine.core.common.queries.IdQueryParameters.class, addSession("Id"), addSession(jobId)))).<START_MOD>thenReturn<END_MOD>(monitorResult); } }	private void setJobStatusExpectations(org.ovirt.engine.core.compat.Guid jobId, org.ovirt.engine.core.common.job.JobExecutionStatus jobStatus, org.ovirt.engine.core.common.queries.VdcQueryReturnValue monitorResult, org.ovirt.engine.core.common.action.VdcReturnValueBase result) { when(result.getJobId()).thenReturn(jobId); if (jobId != null) { org.ovirt.engine.core.common.job.Job jobMock = mock(org.ovirt.engine.core.common.job.Job.class); when(jobMock.getStatus()).thenReturn(jobStatus); when(monitorResult.getReturnValue()).thenReturn(jobMock); when(backend.runQuery(eq(VdcQueryType.GetJobByJobId), eqQueryParams(org.ovirt.engine.core.common.queries.IdQueryParameters.class, addSession("Id"), addSession(jobId)))).thenReturn(monitorResult); enqueueInteraction(() -> verify(backend, atLeastOnce()).runQuery(eq(VdcQueryType.GetJobByJobId), eqQueryParams(org.ovirt.engine.core.common.queries.IdQueryParameters.class, addSession("Id"), addSession(jobId)))); } }
@org.junit.After public void tearDown() { java.util.Locale.setDefault(locale); org.ovirt.engine.api.restapi.invocation.CurrentManager.remove(); }	@org.junit.After public void tearDown() { java.util.Locale.setDefault(locale); interactions.forEach(java.lang.Runnable::run); org.ovirt.engine.api.restapi.invocation.CurrentManager.remove(); }
protected <E> void setUpGetEntityExpectations(org.ovirt.engine.core.common.queries.VdcQueryType query, java.lang.Class<? extends org.ovirt.engine.core.common.queries.VdcQueryParametersBase> clz, java.lang.String[] names, java.lang.Object[] values, E entity) throws java.lang.Exception { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryResult = <START_MOD>mock<END_MOD>(org.ovirt.engine.core.common.queries.VdcQueryReturnValue.class); <START_MOD>when<END_MOD>(backend.runQuery(eq(query), eqQueryParams(clz, addSession(names), addSession(values)))).<START_MOD>thenReturn<END_MOD>(queryResult); <START_MOD>when<END_MOD>(queryResult.getSucceeded()).<START_MOD>thenReturn<END_MOD>(true); <START_MOD>when<END_MOD>(queryResult.getReturnValue()).<START_MOD>thenReturn<END_MOD>(entity); }	protected <E> void setUpGetEntityExpectations(org.ovirt.engine.core.common.queries.VdcQueryType query, java.lang.Class<? extends org.ovirt.engine.core.common.queries.VdcQueryParametersBase> clz, java.lang.String[] names, java.lang.Object[] values, E entity) throws java.lang.Exception { setUpGetEntityExpectations(query, clz, names, values, entity, false); }
protected void setUpQueryExpectations(java.lang.String query, java.lang.Object failure) throws java.lang.Exception { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryResult = <START_MOD>org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResourceTest.mock<END_MOD>(org.ovirt.engine.core.common.queries.VdcQueryReturnValue.class); org.ovirt.engine.core.common.queries.SearchParameters params = new org.ovirt.engine.core.common.queries.SearchParameters(((prefix) + query), searchType); <START_MOD>when<END_MOD>(queryResult.getSucceeded()).<START_MOD>thenReturn<END_MOD>((failure == null)); if (failure == null) { java.util.List<Q> entities = new java.util.ArrayList<>(); for (int i = 0; i < (NAMES.length); i++) { entities.add(org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResourceTest.getEntity(i)); } <START_MOD>when<END_MOD>(queryResult.getReturnValue()).<START_MOD>thenReturn<END_MOD>(entities); } else { if (failure instanceof java.lang.String) { <START_MOD>when<END_MOD>(queryResult.getExceptionString()).<START_MOD>thenReturn<END_MOD>(((java.lang.String) (failure))); org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResourceTest.setUpL10nExpectations(((java.lang.String) (failure))); } else if (failure instanceof java.lang.Exception) { <START_MOD>when<END_MOD>(queryResult.getExceptionString()).<START_MOD>thenThrow<END_MOD>(((java.lang.Exception) (failure)))<START_MOD>; } } when<END_MOD>(backend.runQuery(eq(VdcQueryType.Search), eqSearchParams(params))).<START_MOD>thenReturn(queryResult); }<END_MOD>	protected void setUpQueryExpectations(java.lang.String query, java.lang.Object failure) throws java.lang.Exception { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryResult = org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResourceTest.mock(org.ovirt.engine.core.common.queries.VdcQueryReturnValue.class); org.ovirt.engine.core.common.queries.SearchParameters params = new org.ovirt.engine.core.common.queries.SearchParameters(((prefix) + query), searchType); when(queryResult.getSucceeded()).thenReturn((failure == null)); if (failure == null) { java.util.List<Q> entities = new java.util.ArrayList<>(); for (int i = 0; i < (NAMES.length); i++) { entities.add(org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResourceTest.getEntity(i)); } when(queryResult.getReturnValue()).thenReturn(entities); } else { if (failure instanceof java.lang.String) { when(queryResult.getExceptionString()).thenReturn(((java.lang.String) (failure))); org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResourceTest.setUpL10nExpectations(((java.lang.String) (failure))); } else if (failure instanceof java.lang.Exception) { when(queryResult.getExceptionString()).thenThrow(((java.lang.Exception) (failure))); } } when(backend.runQuery(eq(VdcQueryType.Search), eqSearchParams(params))).thenReturn(queryResult); org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResourceTest.enqueueInteraction(() -> verify(org.ovirt.engine.api.restapi.resource.backend, atLeastOnce()).runQuery(eq(VdcQueryType.Search), eqSearchParams(params))); }
protected <E> void setUpGetEntityExpectations(java.lang.String query, org.ovirt.engine.core.common.interfaces.SearchType type, E entity) throws java.lang.Exception { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryResult = <START_MOD>mock<END_MOD>(org.ovirt.engine.core.common.queries.VdcQueryReturnValue.class); org.ovirt.engine.core.common.queries.SearchParameters params = new org.ovirt.engine.core.common.queries.SearchParameters(query, type); <START_MOD>when<END_MOD>(backend.runQuery(eq(VdcQueryType.Search), eqSearchParams(params))).<START_MOD>thenReturn(queryResult); when<END_MOD>(queryResult.getSucceeded()).<START_MOD>thenReturn<END_MOD>(true); java.util.List<E> entities = new java.util.ArrayList<>(); entities.add(entity); <START_MOD>when<END_MOD>(queryResult.getReturnValue()).<START_MOD>thenReturn<END_MOD>(entities); }	protected <E> void setUpGetEntityExpectations(java.lang.String query, org.ovirt.engine.core.common.interfaces.SearchType type, E entity) throws java.lang.Exception { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryResult = mock(org.ovirt.engine.core.common.queries.VdcQueryReturnValue.class); org.ovirt.engine.core.common.queries.SearchParameters params = new org.ovirt.engine.core.common.queries.SearchParameters(query, type); when(backend.runQuery(eq(VdcQueryType.Search), eqSearchParams(params))).thenReturn(queryResult); enqueueInteraction(() -> verify(backend, atLeastOnce()).runQuery(eq(VdcQueryType.Search), eqSearchParams(params))); when(queryResult.getSucceeded()).thenReturn(true); java.util.List<E> entities = new java.util.ArrayList<>(); entities.add(entity); when(queryResult.getReturnValue()).thenReturn(entities); }
protected void setUpL10nExpectations(java.util.ArrayList<java.lang.String> errors) { org.ovirt.engine.core.common.interfaces.ErrorTranslator errorTranslator = <START_MOD>mock<END_MOD>(org.ovirt.engine.core.common.interfaces.ErrorTranslator.class); if (!(locales.isEmpty())) { <START_MOD>when<END_MOD>(errorTranslator.translateErrorText(eq(errors), eq(locales.get(0)))).<START_MOD>thenReturn<END_MOD>(mockl10n(errors)); } else { <START_MOD>when<END_MOD>(errorTranslator.translateErrorText(eq(errors))).<START_MOD>thenReturn<END_MOD>(mockl10n(errors)); } <START_MOD>when<END_MOD>(backend.getErrorsTranslator()).<START_MOD>thenReturn<END_MOD>(errorTranslator); }	protected void setUpL10nExpectations(java.util.ArrayList<java.lang.String> errors) { org.ovirt.engine.core.common.interfaces.ErrorTranslator errorTranslator = mock(org.ovirt.engine.core.common.interfaces.ErrorTranslator.class); if (!(locales.isEmpty())) { when(errorTranslator.translateErrorText(eq(errors), eq(locales.get(0)))).thenReturn(mockl10n(errors)); } else { when(errorTranslator.translateErrorText(eq(errors))).thenReturn(mockl10n(errors)); } when(backend.getErrorsTranslator()).thenReturn(errorTranslator); enqueueInteraction(() -> verify(backend, atLeastOnce()).getErrorsTranslator()); }
protected void setUpEntityQueryExpectations(org.ovirt.engine.core.common.queries.VdcQueryType query, java.lang.Class<? extends org.ovirt.engine.core.common.queries.VdcQueryParametersBase> queryClass, java.lang.String[] queryNames, java.lang.Object[] queryValues, java.lang.Object queryReturn, java.lang.Object failure) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryResult = <START_MOD>mock<END_MOD>(org.ovirt.engine.core.common.queries.VdcQueryReturnValue.class); <START_MOD>when<END_MOD>(queryResult.getSucceeded()).<START_MOD>thenReturn<END_MOD>((failure == null)); if (failure == null) { <START_MOD>when<END_MOD>(queryResult.getReturnValue()).<START_MOD>thenReturn<END_MOD>(queryReturn); } else { if (failure instanceof java.lang.String) { <START_MOD>when<END_MOD>(queryResult.getExceptionString()).<START_MOD>thenReturn<END_MOD>(((java.lang.String) (failure))); setUpL10nExpectations(((java.lang.String) (failure))); } else if (failure instanceof java.lang.Exception) { <START_MOD>when<END_MOD>(queryResult.getExceptionString()).<START_MOD>thenThrow<END_MOD>(((java.lang.Exception) (failure))); } } if (queryClass == (org.ovirt.engine.core.common.queries.GetPermissionsForObjectParameters.class)) { <START_MOD>when<END_MOD>(backend.runQuery(eq(query), eqQueryParams(queryClass, addSession(queryNames), addSession(queryValues)))).<START_MOD>thenReturn(queryResult<END_MOD>); } else { <START_MOD>when<END_MOD>(backend.runQuery(eq(query), eqQueryParams(queryClass, addSession(queryNames), addSession(queryValues)))).<START_MOD>thenReturn(queryResult); } }<END_MOD>	protected void setUpEntityQueryExpectations(org.ovirt.engine.core.common.queries.VdcQueryType query, java.lang.Class<? extends org.ovirt.engine.core.common.queries.VdcQueryParametersBase> queryClass, java.lang.String[] queryNames, java.lang.Object[] queryValues, java.lang.Object queryReturn, java.lang.Object failure) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryResult = mock(org.ovirt.engine.core.common.queries.VdcQueryReturnValue.class); when(queryResult.getSucceeded()).thenReturn((failure == null)); if (failure == null) { when(queryResult.getReturnValue()).thenReturn(queryReturn); } else { if (failure instanceof java.lang.String) { when(queryResult.getExceptionString()).thenReturn(((java.lang.String) (failure))); setUpL10nExpectations(((java.lang.String) (failure))); } else if (failure instanceof java.lang.Exception) { when(queryResult.getExceptionString()).thenThrow(((java.lang.Exception) (failure))); } } if (queryClass == (org.ovirt.engine.core.common.queries.GetPermissionsForObjectParameters.class)) { when(backend.runQuery(eq(query), eqQueryParams(queryClass, addSession(queryNames), addSession(queryValues)))).thenReturn(queryResult); } else { when(backend.runQuery(eq(query), eqQueryParams(queryClass, addSession(queryNames), addSession(queryValues)))).thenReturn(queryResult); enqueueInteraction(() -> verify(backend, atLeastOnce()).runQuery(eq(query), eqQueryParams(queryClass, addSession(queryNames), addSession(queryValues)))); } }
@org.junit.Test public void storageDomainWithId() { b.setStorageDomainId(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID); b.setStoragePoolId(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID); final org.ovirt.engine.core.common.businessentities.StorageDomain s = b.getStorageDomain(); assertEquals(<START_MOD>StorageDomainStatus<END_MOD>.<START_MOD>Active<END_MOD>, s<START_MOD>.getStatus()<END_MOD>); }	@org.junit.Test public void storageDomainWithId() { b.setStorageDomainId(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID); b.setStoragePoolId(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID); final org.ovirt.engine.core.common.businessentities.StorageDomain s = b.getStorageDomain(); assertEquals(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.STORAGE_DOMAIN, s); }
@org.junit.Test public void storageDomainWithNullId() { b.setStorageDomainId(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID2); final org.ovirt.engine.core.common.businessentities.StorageDomain s = b.getStorageDomain(); assertEquals(<START_MOD>StorageDomainStatus<END_MOD>.<START_MOD>Active<END_MOD>, s<START_MOD>.getStatus()<END_MOD>); }	@org.junit.Test public void storageDomainWithNullId() { b.setStorageDomainId(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID2); final org.ovirt.engine.core.common.businessentities.StorageDomain s = b.getStorageDomain(); assertEquals(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.STORAGE_DOMAIN, s); }
public java.util.Map getGuestOsInto() { java.util.Map resultMap = map(); resultMap.put("kernel", "2.6.32-642.el6.x86_64"); resultMap.put("type", "linux"); resultMap.put("version", "6.7"); resultMap.put("arch", "x86_64"); resultMap.put("codename", "Santiago"); resultMap.put("distribution", "Red Hat Enterprise Linux Server"); return resultMap; }	private java.util.Map<java.lang.String, java.lang.String> getGuestOsInto() { java.util.Map<java.lang.String, java.lang.String> resultMap = map(); resultMap.put("kernel", "2.6.32-642.el6.x86_64"); resultMap.put("type", "linux"); resultMap.put("version", "6.7"); resultMap.put("arch", "x86_64"); resultMap.put("codename", "Santiago"); resultMap.put("distribution", "Red Hat Enterprise Linux Server"); return resultMap; }
public java.util.Map getGuestTimeZone() { java.util.Map resultMap = map(); resultMap.put("zone", "Israel"); resultMap.put("offset", "120"); return resultMap; }	private java.util.Map<java.lang.String, java.lang.String> getGuestTimeZone() { java.util.Map<java.lang.String, java.lang.String> resultMap = map(); resultMap.put("zone", "Israel"); resultMap.put("offset", "120"); return resultMap; }
public org.ovirt.engine.core.bll.ValidationResult isOsSupportedForVirtIoScsi(org.ovirt.engine.core.common.businessentities.VM vm) { if (!(org.ovirt.engine.core.bll.validator.VmValidationUtils.isDiskInterfaceSupportedByOs(vm.getOs(), vm.getCompatibilityVersion(), DiskInterface.VirtIO_SCSI))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	private org.ovirt.engine.core.bll.ValidationResult isOsSupportedForVirtIoScsi(org.ovirt.engine.core.common.businessentities.VM vm) { if (!(org.ovirt.engine.core.bll.validator.VmValidationUtils.isDiskInterfaceSupportedByOs(vm.getOs(), vm.getCompatibilityVersion(), DiskInterface.VirtIO_SCSI))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
protected void handleStepsOnEnd() { if (((getCommandStep()) != null) && ((getExecutionContext().getStep()) != null)) { executionHandler.endTaskStep(getExecutionContext().getStep().getId(), (isEndSuccessfully() ? org.ovirt.engine.core.common.job.JobExecutionStatus.FINISHED : org.ovirt.engine.core.common.job.JobExecutionStatus.FAILED)); } executionHandler.startFinalizingStep(getExecutionContext()); }	protected void handleStepsOnEnd() { if (((getCommandStep()) != null) && ((getExecutionContext().getStep()) != null)) { executionHandler.endTaskStep(getExecutionContext().getStep().getId(), (isEndSuccessfully() ? org.ovirt.engine.core.common.job.JobExecutionStatus.FINISHED : org.ovirt.engine.core.common.job.JobExecutionStatus.FAILED)); } if ((getCommandStep()) == null) { executionHandler.startFinalizingStep(getExecutionContext()); } }
public static void checkForceShow(final com.google.gwt.dom.client.NativeEvent event) { }	public static void checkForceShow(final com.google.gwt.dom.client.NativeEvent event) { com.google.gwt.user.client.Timer timer = new com.google.gwt.user.client.Timer() { @java.lang.Override public void run() { java.lang.String[] pos = org.ovirt.engine.ui.common.utils.JqueryUtils.getMousePosition().split(","); int x = java.lang.Integer.parseInt(pos[0]); int y = java.lang.Integer.parseInt(pos[1]); org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.logger.finer(("checking for force show. any tooltip visible? " + (org.ovirt.engine.ui.common.utils.JqueryUtils.anyTooltipVisible()))); if (!(org.ovirt.engine.ui.common.utils.JqueryUtils.anyTooltipVisible())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.logger.finer("force showing closed tooltip"); org.ovirt.engine.ui.common.utils.JqueryUtils.fireMouseEnter(x, y); } } }; timer.schedule(50); }
public static void addTooltipsEvents(java.util.Set<java.lang.String> set) { }	public static void addTooltipsEvents(java.util.Set<java.lang.String> set) { set.add(BrowserEvents.MOUSEOVER); set.add(BrowserEvents.MOUSEOUT); set.add(BrowserEvents.MOUSEDOWN); }
public static boolean isTooltipConfigured(com.google.gwt.dom.client.Element parent) { return <START_MOD>true<END_MOD>; }	public static boolean isTooltipConfigured(com.google.gwt.dom.client.Element parent) { return org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip.isTooltipConfigured(parent.getId()); }
public static void updateTooltipContent(com.google.gwt.safehtml.shared.SafeHtml newContent, com.google.gwt.dom.client.Element element) { }	public static void updateTooltipContent(com.google.gwt.safehtml.shared.SafeHtml newContent, com.google.gwt.dom.client.Element element) { org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip toolTip = org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip.getTooltip(element.getId()); toolTip.setContent(newContent); toolTip.reconfigure(); }
public static org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip addTooltipToElement(com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.Element element, org.gwtbootstrap3.client.ui.constants.Placement placement) { <START_MOD>return<END_MOD> null; }	public static org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip addTooltipToElement(com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.Element element, org.gwtbootstrap3.client.ui.constants.Placement placement) { org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip tooltip = new org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip(element); tooltip.setContent(tooltipContent); tooltip.setPlacement(placement); tooltip.reconfigure(); java.lang.String cellId = element.getId(); if ((cellId == null) || (cellId.isEmpty())) { cellId = com.google.gwt.user.client.DOM.createUniqueId(); element.setId(cellId); } org.ovirt.engine.ui.common.widget.tooltip.ElementTooltipDetails details = new org.ovirt.engine.ui.common.widget.tooltip.ElementTooltipDetails(); details.setTooltip(tooltip); details.setInnerHTML(element.getInnerHTML()); org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip.getRegistry().put(cellId, details); return tooltip; }
public static void reapAllTooltips() { }	public static void reapAllTooltips() { org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip.reapAll(); }
public static void handleTooltipEvent(com.google.gwt.dom.client.Element parent, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event) { }	public static void handleTooltipEvent(com.google.gwt.dom.client.Element parent, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event) { if (BrowserEvents.MOUSEOVER.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.configureTooltip(parent, tooltipContent, event); } if (BrowserEvents.MOUSEOUT.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.reapAllTooltips(); } if (BrowserEvents.MOUSEDOWN.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.hideAllTooltips(); } }
public static void configureTooltip(final com.google.gwt.dom.client.Element parent, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, final com.google.gwt.dom.client.NativeEvent event) { }	public static void configureTooltip(final com.google.gwt.dom.client.Element parent, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, final com.google.gwt.dom.client.NativeEvent event) { if ((tooltipContent == null) || (tooltipContent.asString().trim().isEmpty())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.logger.finer("null or empty tooltip content"); } else if (org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.isTooltipConfigured(parent)) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.logger.finer("tooltip already configured"); org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.checkForceShow(event); } else { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.logger.finer("tooltip not configured yet -- adding"); org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltipContent, parent); org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.logger.finer("firing native event to jquery tooltip"); event.stopPropagation(); event.preventDefault(); com.google.gwt.dom.client.Node node = parent.getChild(0); if (node instanceof com.google.gwt.dom.client.Element) { com.google.gwt.dom.client.Element e = ((com.google.gwt.dom.client.Element) (node)); com.google.gwt.dom.client.NativeEvent newEvent = com.google.gwt.dom.client.Document.get().createMouseOverEvent(0, event.getScreenX(), event.getScreenY(), event.getClientX(), event.getClientY(), event.getCtrlKey(), event.getAltKey(), event.getShiftKey(), event.getMetaKey(), event.getButton(), e); e.dispatchEvent(newEvent); } } }
public void toggle() { }	public void toggle() { call(widget.getElement(), org.ovirt.engine.ui.common.widget.tooltip.Tooltip.TOGGLE); }
public void hide() { }	public void hide() { call(widget.getElement(), org.ovirt.engine.ui.common.widget.tooltip.Tooltip.HIDE); }
@java.lang.Override public void cleanup() { driver.cleanup(); <START_MOD>unitVmModel.cleanup(); unitVmModel = null; <END_MOD>}	@java.lang.Override public void cleanup() { driver.cleanup(); if ((unitVmModel) != null) { unitVmModel.cleanup(); unitVmModel = null; } }
public void destroy() { if ((clickHandler) != null) { clickHandler.removeHandler(); clickHandler = null; } }	public void destroy() { call(widget.getElement(), org.ovirt.engine.ui.common.widget.tooltip.Tooltip.DESTROY); if ((clickHandler) != null) { clickHandler.removeHandler(); clickHandler = null; } }
@java.lang.Override public void setWidget(final com.google.gwt.user.client.ui.Widget w) { if (w == (widget)) { return; } if (w != null) { w.removeFromParent(); } if ((widget) != null) { remove(widget); } widget = w; if ((widget) == null) { return; } widget.addAttachHandler(new com.google.gwt.event.logical.shared.AttachEvent.Handler() { @java.lang.Override public void onAttachOrDetach(final com.google.gwt.event.logical.shared.AttachEvent event) { reconfigure(); } }); }	@java.lang.Override public void setWidget(final com.google.gwt.user.client.ui.Widget w) { if (w == (widget)) { return; } if (w != null) { w.removeFromParent(); } if ((widget) != null) { remove(widget); } widget = w; if ((widget) == null) { return; } bindJavaScriptEvents(widget.getElement()); widget.addAttachHandler(new com.google.gwt.event.logical.shared.AttachEvent.Handler() { @java.lang.Override public void onAttachOrDetach(final com.google.gwt.event.logical.shared.AttachEvent event) { reconfigure(); } }); }
public void show() { }	public void show() { call(widget.getElement(), org.ovirt.engine.ui.common.widget.tooltip.Tooltip.SHOW); }
public static void hideAllTooltips() { }	public static void hideAllTooltips() { org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip.hideAll(); }
@java.lang.Override public void cleanup() { driver.cleanup(); <START_MOD>listHeader.cleanup(); <END_MOD>}	@java.lang.Override public void cleanup() { driver.cleanup(); }
public void reconfigure() { destroy(); clickHandler = com.google.gwt.user.client.ui.RootPanel.get().addDomHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { org.ovirt.engine.ui.common.widget.tooltip.Tooltip.this.hide(); } }, com.google.gwt.event.dom.client.ClickEvent.getType()); java.lang.String template = null; if ((alternateTemplate) == null) { template = org.ovirt.engine.ui.common.widget.tooltip.Tooltip.DEFAULT_TEMPLATE.replace("{0}", getTooltipClassNames()); template = template.replace("{1}", getTooltipArrowClassNames()); template = template.replace("{2}", getTooltipInnerClassNames()); } else { template = alternateTemplate; } <START_MOD>}<END_MOD>	public void reconfigure() { destroy(); clickHandler = com.google.gwt.user.client.ui.RootPanel.get().addDomHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { org.ovirt.engine.ui.common.widget.tooltip.Tooltip.this.hide(); } }, com.google.gwt.event.dom.client.ClickEvent.getType()); java.lang.String template = null; if ((alternateTemplate) == null) { template = org.ovirt.engine.ui.common.widget.tooltip.Tooltip.DEFAULT_TEMPLATE.replace("{0}", getTooltipClassNames()); template = template.replace("{1}", getTooltipArrowClassNames()); template = template.replace("{2}", getTooltipInnerClassNames()); } else { template = alternateTemplate; } if (((container) != null) && ((selector) != null)) { tooltip(widget.getElement(), isAnimated, isHTML, placement.getCssName(), selector, title, trigger.getCssName(), showDelayMs, hideDelayMs, container, template); } else if ((container) != null) { tooltip(widget.getElement(), isAnimated, isHTML, placement.getCssName(), title, trigger.getCssName(), showDelayMs, hideDelayMs, container, template); } else if ((selector) != null) { tooltip(widget.getElement(), isAnimated, isHTML, placement.getCssName(), selector, title, trigger.getCssName(), showDelayMs, hideDelayMs, template); } else { tooltip(widget.getElement(), isAnimated, isHTML, placement.getCssName(), title, trigger.getCssName(), showDelayMs, hideDelayMs, template); } }
@java.lang.Override public void cleanup() { if ((disks) != null) { for (final org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : disks) { diskModel.cleanup(); } } super.cleanup(); }	@java.lang.Override public void cleanup() { if ((disks) != null) { for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : disks) { diskModel.cleanup(); } } super.cleanup(); }
public java.lang.Object execute(org.ovirt.engine.core.sso.utils.SsoContext ssoContext, javax.servlet.http.HttpServletRequest request) throws java.lang.Exception { java.util.Map<java.lang.String, java.lang.Object> params = org.ovirt.engine.core.sso.search.DirectorySearch.readParams(request); java.util.Set<java.lang.String> tokens = ((java.util.Set<java.lang.String>) (params.get(SsoConstants.HTTP_PARAM_TOKENS))); return tokens.stream().filter(( token) -> (ssoContext.getSsoSession(token)) != null).collect(java.util.stream.Collectors.toMap(( t) -> t, ( t) -> java.lang.Boolean.TRUE)); }	public java.lang.Object execute(org.ovirt.engine.core.sso.utils.SsoContext ssoContext, javax.servlet.http.HttpServletRequest request) throws java.lang.Exception { return ((java.util.Set<java.lang.String>) (org.ovirt.engine.core.sso.search.DirectorySearch.readParams(request).get(SsoConstants.HTTP_PARAM_TOKENS))).stream().filter(( token) -> org.apache.commons.lang.StringUtils.isNotEmpty(token)).collect(java.util.stream.Collectors.toMap(( token) -> token, ( token) -> (ssoContext.getSsoSession(token)) != null)); }
public static java.util.Map<java.lang.String, java.lang.Object> getSessionStatues(java.util.Set<java.lang.String> entries) { <START_MOD>java.util.Map<java.lang.String, java.lang.Object> params = java.util.Collections.singletonMap("tokens", entries); <END_MOD>return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.search(null, <START_MOD>params<END_MOD>, <START_MOD>"session-statuses"<END_MOD>, org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.publicAuthzSearchScope); }	public static java.util.Map<java.lang.String, java.lang.Object> getSessionStatues(java.util.Set<java.lang.String> entries) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.search(null, java.util.Collections.singletonMap("tokens", entries), "session-statuses", org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.publicAuthzSearchScope); }
private void generateXmlRegisterClass(org.ovirt.api.metamodel.concepts.Model model) { javaBuffer = new org.ovirt.api.metamodel.tool.JavaClassBuffer(); org.ovirt.api.metamodel.tool.JavaClassName xmlRegister = new org.ovirt.api.metamodel.tool.JavaClassName(); xmlRegister.setPackageName(org.ovirt.api.metamodel.runtime.xml.XmlReader.class.getPackage().getName()); xmlRegister.setSimpleName(XmlReader.XML_TYPE_REGISTER); javaBuffer.setClassName(xmlRegister); javaBuffer.addLine("public class %1$s {", xmlRegister.getSimpleName()); javaBuffer.addLine("public static void init() throws Exception {"); model.types().filter(org.ovirt.api.metamodel.concepts.StructType.class::isInstance).map(org.ovirt.api.metamodel.concepts.StructType.class::cast).sorted().forEach(( type) -> { org.ovirt.api.metamodel.concepts.Name typeName = type.getName(); java.lang.String singularTag = schemaNames.getSchemaTagName(typeName); java.lang.String pluralTag = schemaNames.getSchemaTagName(names.getPlural(typeName)); java.lang.String className = javaTypes.getXmlReaderName(type).getSimpleName(); org.ovirt.api.metamodel.tool.javaBuffer.addImport(javaTypes.getXmlReaderName(type)); org.ovirt.api.metamodel.tool.javaBuffer.addLine("XmlReader.register(\"%1$s\", %2$s.class.getMethod(\"readOne\", XmlReader.class));", singularTag, className); org.ovirt.api.metamodel.tool.javaBuffer.addLine("XmlReader.register(\"%1$s\", %2$s.class.getMethod(\"readMany\", XmlReader.class));", pluralTag, className); }); javaBuffer.addLine("}"); javaBuffer.addLine("}"); try { javaBuffer.write(outDir); } catch (java.io.IOException exception) { throw new java.lang.RuntimeException((("Can\'t write file for XML reader \"" + xmlRegister) + "\""), exception); } }	private void generateXmlTagsPropertiesFile(org.ovirt.api.metamodel.concepts.Model model) { org.ovirt.api.metamodel.tool.PropertiesBuffer propertiesBuffer = new org.ovirt.api.metamodel.tool.PropertiesBuffer(); java.lang.String methods = ((org.ovirt.api.metamodel.runtime.xml.XmlReader.class.getPackage().getName().replaceAll("\\.", "/")) + "/") + (org.ovirt.api.metamodel.runtime.xml.XmlReader.METHODS_FILE); model.types().filter(org.ovirt.api.metamodel.concepts.StructType.class::isInstance).map(org.ovirt.api.metamodel.concepts.StructType.class::cast).sorted().forEach(( type) -> { org.ovirt.api.metamodel.concepts.Name typeName = type.getName(); java.lang.String singularTag = schemaNames.getSchemaTagName(typeName); java.lang.String pluralTag = schemaNames.getSchemaTagName(names.getPlural(typeName)); org.ovirt.api.metamodel.tool.JavaClassName className = javaTypes.getXmlReaderName(type); propertiesBuffer.addProperty(singularTag, java.lang.String.format("%1$s.readOne", className)); propertiesBuffer.addProperty(pluralTag, java.lang.String.format("%1$s.readMany", className)); }); try { propertiesBuffer.write(new java.io.File(resourcesDir, methods)); } catch (java.io.IOException exception) { throw new java.lang.RuntimeException("Can't write file for XML generic methods reader.", exception); } }
public void generate(org.ovirt.api.metamodel.concepts.Model model) { model.types().filter(org.ovirt.api.metamodel.concepts.StructType.class::isInstance).map(org.ovirt.api.metamodel.concepts.StructType.class::cast).forEach(this::generateStructSupportClasses); model.types().filter(org.ovirt.api.metamodel.concepts.EnumType.class::isInstance).map(org.ovirt.api.metamodel.concepts.EnumType.class::cast).forEach(this::generateEnumSupportClasses); <START_MOD>generateXmlRegisterClass(model); <END_MOD>}	public void generate(org.ovirt.api.metamodel.concepts.Model model) { model.types().filter(org.ovirt.api.metamodel.concepts.StructType.class::isInstance).map(org.ovirt.api.metamodel.concepts.StructType.class::cast).forEach(this::generateStructSupportClasses); model.types().filter(org.ovirt.api.metamodel.concepts.EnumType.class::isInstance).map(org.ovirt.api.metamodel.concepts.EnumType.class::cast).forEach(this::generateEnumSupportClasses); generateXmlTagsPropertiesFile(model); }
public java.lang.Object read() { try { if (!(forward())) { return null; } java.lang.String tag = getLocalName(); java.lang.reflect.Method m = org.ovirt.api.metamodel.runtime.xml.XmlReader.readers.get(tag); if (m == null) { throw new java.lang.RuntimeException(java.lang.String.format("Can't find a reader for tag '%s'", tag)); } return m.invoke(null, this); } catch (java.lang.IllegalAccessException | java.lang.reflect.InvocationTargetException e) { throw new java.lang.RuntimeException("Failed to invoke read method."); } finally { close(); } }	public java.lang.Object read() { java.lang.String tag = null; java.lang.reflect.Method method = null; try { if (!(forward())) { return null; } tag = getLocalName(); method = org.ovirt.api.metamodel.runtime.xml.XmlReader.readers.get(tag); if (method == null) { throw new java.lang.RuntimeException(java.lang.String.format("Can't find a reader for tag '%s'", tag)); } return method.invoke(null, this); } catch (java.lang.IllegalAccessException | java.lang.reflect.InvocationTargetException exception) { throw new java.lang.RuntimeException(java.lang.String.format("Failed to invoke method '%1$s' to read element for tag '%2$s'", method, tag), exception); } finally { close(); } }
private void updateTaskStatuses(java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.AsyncTaskStatus>> poolsAllTasksMap) { for (org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task : _tasks.values()) { if (task.getShouldPoll()) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.AsyncTaskStatus> asyncTasksForPoolMap = poolsAllTasksMap.get(task.getStoragePoolID()); if (asyncTasksForPoolMap != null) { org.ovirt.engine.core.common.businessentities.AsyncTaskStatus cachedAsyncTaskStatus = asyncTasksForPoolMap.get(task.getVdsmTaskId()); <START_MOD>org.ovirt.engine.core.bll.tasks.AsyncTaskManager.log.debug( task of command: {} with id: {} to status: {}. task.getParameters().getDbAsyncTask().getActionType(), task.getCommandId(), cachedAsyncTaskStatus); <END_MOD>task.updateTask(cachedAsyncTaskStatus); } } <START_MOD>else { org.ovirt.engine.core.bll.tasks.AsyncTaskManager.log.debug( updating task of command: {} with id: {} and status: {}. task.getParameters().getDbAsyncTask().getActionType(), task.getCommandId(), task.getLastTaskStatus()); } } }<END_MOD>	private void updateTaskStatuses(java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.AsyncTaskStatus>> poolsAllTasksMap) { for (org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task : _tasks.values()) { if (task.getShouldPoll()) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.AsyncTaskStatus> asyncTasksForPoolMap = poolsAllTasksMap.get(task.getStoragePoolID()); if (asyncTasksForPoolMap != null) { org.ovirt.engine.core.common.businessentities.AsyncTaskStatus cachedAsyncTaskStatus = asyncTasksForPoolMap.get(task.getVdsmTaskId()); org.ovirt.engine.core.bll.tasks.AsyncTaskManager.log.debug("Updating task of command {} with id '{}' to status '{}'.", task.getParameters().getDbAsyncTask().getActionType(), task.getCommandId(), cachedAsyncTaskStatus); task.updateTask(cachedAsyncTaskStatus); } } else { org.ovirt.engine.core.bll.tasks.AsyncTaskManager.log.debug("Not updating task of command {} with id '{}' and status '{}'.", task.getParameters().getDbAsyncTask().getActionType(), task.getCommandId(), task.getLastTaskStatus()); } } }
public void update() { title.setText(controller.getColumnContextMenuTitle(column)); checkBox.setValue(controller.isColumnVisible(column)); container.removeStyleName(style.dragOver()); }	public void update() { title.setText(controller.getColumnContextMenuTitle(column)); checkBox.setValue(controller.isColumnVisible(column)); container.setStyleName(style.highlightable(), true); container.setStyleName(style.dragSource(), false); container.setStyleName(style.validDropTarget(), false); }
@com.google.gwt.uibinder.client.UiHandler("container") void onDragOver(com.google.gwt.event.dom.client.DragOverEvent event) { container.addStyleName(style.dragOver()); }	@com.google.gwt.uibinder.client.UiHandler("container") void onDragOver(com.google.gwt.event.dom.client.DragOverEvent event) { event.preventDefault(); int draggedColumnIndex = controller.getDragIndex(); int itemColumnIndex = controller.getColumnIndex(column); container.setStyleName(style.validDropTarget(), (draggedColumnIndex != itemColumnIndex)); }
java.lang.String dragOver();	java.lang.String highlightable();
com.google.gwt.user.cellview.client.Column<T, ?> getColumn() { return column; }	@com.google.gwt.uibinder.client.UiHandler("container") void onDrop(com.google.gwt.event.dom.client.DropEvent event) { event.preventDefault(); int draggedColumnIndex = controller.getDragIndex(); int itemColumnIndex = controller.getColumnIndex(column); if (draggedColumnIndex != itemColumnIndex) { controller.swapColumns(controller.getColumn(draggedColumnIndex), column); } controller.setDragIndex(ColumnController.NO_DRAG); }
@com.google.gwt.uibinder.client.UiHandler("container") void onDrop(com.google.gwt.event.dom.client.DropEvent event) { event.preventDefault(); int sourceIndex = java.lang.Integer.valueOf(event.getData(org.ovirt.engine.ui.common.widget.table.ColumnContextMenuItem.DRAG_INDEX)); com.google.gwt.user.cellview.client.Column<T, ?> sourceColumn = controller.getColumn(sourceIndex); if (sourceIndex != (controller.getColumnIndex(column))) { controller.swapColumns(sourceColumn, column); } }	@com.google.gwt.uibinder.client.UiHandler("container") void onDragEnd(com.google.gwt.event.dom.client.DragEndEvent event) { controller.updateColumnContextMenu(); }
@com.google.gwt.uibinder.client.UiHandler("container") void onDragLeave(com.google.gwt.event.dom.client.DragLeaveEvent event) { container.removeStyleName(style.dragOver()); }	@com.google.gwt.uibinder.client.UiHandler("container") void onDragLeave(com.google.gwt.event.dom.client.DragLeaveEvent event) { container.setStyleName(style.validDropTarget(), false); }
@com.google.gwt.uibinder.client.UiHandler("container") void onDragStart(com.google.gwt.event.dom.client.DragStartEvent event) { event.setData(org.ovirt.engine.ui.common.widget.table.ColumnContextMenuItem.DRAG_INDEX, java.lang.String.valueOf(controller.getColumnIndex(column))); event.getDataTransfer().setDragImage(org.ovirt.engine.ui.common.widget.table.ColumnContextMenuItem.getElement(), ((event.getNativeEvent().getClientX()) - (org.ovirt.engine.ui.common.widget.table.ColumnContextMenuItem.getAbsoluteLeft())), ((event.getNativeEvent().getClientY()) - (org.ovirt.engine.ui.common.widget.table.ColumnContextMenuItem.getAbsoluteTop()))); }	@com.google.gwt.uibinder.client.UiHandler("container") void onDragStart(com.google.gwt.event.dom.client.DragStartEvent event) { int itemColumnIndex = controller.getColumnIndex(column); controller.setDragIndex(itemColumnIndex); event.getDataTransfer().setData("text", java.lang.String.valueOf(itemColumnIndex)); event.getDataTransfer().setDragImage(org.ovirt.engine.ui.common.widget.table.ColumnContextMenuItem.getElement(), ((event.getNativeEvent().getClientX()) - (org.ovirt.engine.ui.common.widget.table.ColumnContextMenuItem.getAbsoluteLeft())), ((event.getNativeEvent().getClientY()) - (org.ovirt.engine.ui.common.widget.table.ColumnContextMenuItem.getAbsoluteTop()))); }
public void removeItem(com.google.gwt.user.cellview.client.Column<T, ?> column)<START_MOD> { org.ovirt.engine.ui.common.widget.table.ColumnContextMenuItem<T> item = items.get(column)<END_MOD>;<START_MOD> if (item != null) { items.remove(column); container.remove(item); } }<END_MOD>	public void removeItem(com.google.gwt.user.cellview.client.Column<T, ?> column) { org.ovirt.engine.ui.common.widget.table.ColumnContextMenuItem<T> removedItem = items.remove(column); if (removedItem != null) { container.remove(removedItem); } }
public void addItem(com.google.gwt.user.cellview.client.Column<T, ?> column)<START_MOD> { if (containsItem(column)) { return<END_MOD>;<START_MOD> } org.ovirt.engine.ui.common.widget.table.ColumnContextMenuItem<T> item = new org.ovirt.engine.ui.common.widget.table.ColumnContextMenuItem(controller, column); items.put(column, item); container.add(item); }<END_MOD>	public void addItem(com.google.gwt.user.cellview.client.Column<T, ?> column) { if (containsItem(column)) { return; } org.ovirt.engine.ui.common.widget.table.ColumnContextMenuItem<T> newItem = new org.ovirt.engine.ui.common.widget.table.ColumnContextMenuItem(controller, column); items.put(column, newItem); container.add(newItem); }
private static org.ovirt.engine.<START_MOD>core<END_MOD>.<START_MOD>common.businessentities.network<END_MOD>.NetworkStatus mapNetworkStatus(org.ovirt.engine.core.common.businessentities.network.NetworkStatus status) { switch (status) { case NON_OPERATIONAL : return org.ovirt.engine.<START_MOD>core<END_MOD>.<START_MOD>common.businessentities.network<END_MOD>.NetworkStatus.NON_OPERATIONAL; case OPERATIONAL : return org.ovirt.engine.<START_MOD>core<END_MOD>.<START_MOD>common.businessentities.network<END_MOD>.NetworkStatus.OPERATIONAL; default : return null; } }	private static org.ovirt.engine.api.model.NetworkStatus mapNetworkStatus(org.ovirt.engine.core.common.businessentities.network.NetworkStatus status) { switch (status) { case NON_OPERATIONAL : return org.ovirt.engine.api.model.NetworkStatus.NON_OPERATIONAL; case OPERATIONAL : return org.ovirt.engine.api.model.NetworkStatus.OPERATIONAL; default : return null; } }
@java.lang.Override protected void perform() { final org.ovirt.engine.core.common.businessentities.aaa.DbUser currentUser = org.ovirt.engine.core.bll.VmLogonCommand.getCurrentUser(); final java.lang.String password<START_MOD>; try { final java.lang.String token<END_MOD> = sessionDataContainer.<START_MOD>getSsoAccessToken(org.ovirt.engine.core.bll.VmLogonCommand.getParameters().getSessionId()); if (org.apache.commons.lang.StringUtils.isEmpty(token)) { throw new java.lang.RuntimeException( to get sso access token for session. } password = org.ovirt.engine.core.aaa.filters.FiltersHelper.<END_MOD>getPassword(<START_MOD>token<END_MOD>); final java.lang.String domainController = (currentUser != null) ? currentUser.getDomain() : ""; final boolean sentToVM = runVdsCommand(VDSCommandType.VmLogon, new org.ovirt.engine.core.common.vdscommands.VmLogonVDSCommandParameters(org.ovirt.engine.core.bll.VmLogonCommand.getVdsId(), org.ovirt.engine.core.bll.VmLogonCommand.getVm().getId(), domainController, org.ovirt.engine.core.bll.VmLogonCommand.getUserName(), password)).getSucceeded(); org.ovirt.engine.core.bll.VmLogonCommand.setSucceeded(sentToVM); }<START_MOD> catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.VmLogonCommand.log.error( to execute VmLogon with message {} ex.getMessage()); org.ovirt.engine.core.bll.VmLogonCommand.log.debug("Exception", ex); } }<END_MOD>	@java.lang.Override protected void perform() { try { final org.ovirt.engine.core.common.businessentities.aaa.DbUser currentUser = org.ovirt.engine.core.bll.VmLogonCommand.getCurrentUser(); final java.lang.String password = org.ovirt.engine.core.aaa.SsoUtils.getPassword(sessionDataContainer.getSsoAccessToken(org.ovirt.engine.core.bll.VmLogonCommand.getParameters().getSessionId())); final java.lang.String domainController = (currentUser != null) ? currentUser.getDomain() : ""; final boolean sentToVM = runVdsCommand(VDSCommandType.VmLogon, new org.ovirt.engine.core.common.vdscommands.VmLogonVDSCommandParameters(org.ovirt.engine.core.bll.VmLogonCommand.getVdsId(), org.ovirt.engine.core.bll.VmLogonCommand.getVm().getId(), domainController, org.ovirt.engine.core.bll.VmLogonCommand.getUserName(), password)).getSucceeded(); org.ovirt.engine.core.bll.VmLogonCommand.setSucceeded(sentToVM); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.VmLogonCommand.log.error("Unable to execute VmLogon with message {}", ex.getMessage()); org.ovirt.engine.core.bll.VmLogonCommand.log.debug("Exception", ex); } }
@java.lang.Override protected void executeQueryCommand() { <START_MOD>java.lang.String password = null; try { final java.lang.String token = sessionDataContainer.getSsoAccessToken(<END_MOD>org.ovirt.engine.core.bll.aaa.IsPasswordDelegationPossibleQuery.<START_MOD>getParameters().getSessionId()); if (org.apache.commons.lang.StringUtils.isEmpty(token)) { throw new java.lang.RuntimeException( to get sso access token for session. } password = org.ovirt.engine.core.aaa.filters.FiltersHelper.getPassword(token); } catch (java.lang.Exception ex) { log.error( to execute IsPasswordDelegationPossibleQuery with message {} ex.getMessage()); log.debug("Exception", ex); } org.ovirt.engine.core.bll.aaa.IsPasswordDelegationPossibleQuery.<END_MOD>getQueryReturnValue().setReturnValue((<START_MOD>password != null)); <END_MOD>org.ovirt.engine.core.bll.aaa.IsPasswordDelegationPossibleQuery.getQueryReturnValue().setSucceeded(true); }	@java.lang.Override protected void executeQueryCommand() { java.lang.String password = null; try { password = org.ovirt.engine.core.aaa.SsoUtils.getPassword(sessionDataContainer.getSsoAccessToken(org.ovirt.engine.core.bll.aaa.IsPasswordDelegationPossibleQuery.getParameters().getSessionId())); } catch (java.lang.Exception ex) { log.error("Unable to execute IsPasswordDelegationPossibleQuery with message {}", ex.getMessage()); log.debug("Exception", ex); } org.ovirt.engine.core.bll.aaa.IsPasswordDelegationPossibleQuery.getQueryReturnValue().setReturnValue((password != null)); org.ovirt.engine.core.bll.aaa.IsPasswordDelegationPossibleQuery.getQueryReturnValue().setSucceeded(true); }
public static java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> buildStorageToDiskMap(java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskInfoDestinationMap) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> storageToDisksMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : images) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = diskInfoDestinationMap.get(disk.getId()); <START_MOD>if ((diskImage == null) || (diskImage.getStorageIds().isEmpty())) { continue; } <END_MOD>org.ovirt.engine.core.compat.Guid storageDomainId = diskImage.getStorageIds().get(0); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskList = storageToDisksMap.get(storageDomainId); if (diskList == null) { diskList = new java.util.ArrayList(); storageToDisksMap.put(storageDomainId, diskList); } diskList.add(disk); } return storageToDisksMap; }	public static java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> buildStorageToDiskMap(java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskInfoDestinationMap) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> storageToDisksMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : images) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = diskInfoDestinationMap.get(disk.getId()); org.ovirt.engine.core.compat.Guid storageDomainId = diskImage.getStorageIds().get(0); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskList = storageToDisksMap.get(storageDomainId); if (diskList == null) { diskList = new java.util.ArrayList(); storageToDisksMap.put(storageDomainId, diskList); } diskList.add(disk); } return storageToDisksMap; }
private void createCommand() { doReturn(org.ovirt.engine.core.bll.AddClusterCommandTest.ARCHITECTURE_TYPE).when(addClusterCommand).getArchitecture(); doReturn(backend).when(addClusterCommand).getBackend(); doReturn(clusterDao).when(addClusterCommand).getClusterDao(); doReturn(managementNetwork).when(addClusterCommand).getManagementNetwork(); when(macPoolDao.getDefaultPool()).thenReturn(new org.ovirt.engine.core.common.businessentities.MacPool()); }	private void mockDao() { doReturn(clusterDao).when(addClusterCommand).getClusterDao(); when(macPoolDao.getDefaultPool()).thenReturn(new org.ovirt.engine.core.common.businessentities.MacPool()); }
@org.junit.Before public void setUp() { createCommand(); mockBackend(); }	@org.junit.Before public void setUp() { mockDao(); mockBackend(); }
@java.lang.Override protected java.lang.String <START_MOD>composeRegex<END_MOD>() { return <START_MOD>"^[ -" + "]*$"<END_MOD>; }	@java.lang.Override protected java.lang.String composeRegex() { return "^[\u0000-\u007f]*$"; }
java.lang.String thisFieldMustContainIpv4OrIpv6AddressMsg();	java.lang.String ignoreGlusterQuorumChecks();
public static <E extends java.lang.Enum<E>> E valueOf(java.lang.Class<E> c, java.lang.String name, boolean ignorecase) { if (!ignorecase) { return java.lang.Enum.<E>valueOf(c, name); } E[] universe = c.getEnumConstants(); if (universe == null) { throw new java.lang.IllegalArgumentException((name +   is not an enum type } java.util.Map<java.lang.String, E> map = org.ovirt.engine.core.common.utils.EnumUtils.cacheEnumValuesInCapitalLetters.get(c); if (map == null) { map = new java.util.HashMap<>((2 * (universe.length))); for (E e : universe) { map.put(e.name().toUpperCase(), e); } org.ovirt.engine.core.common.utils.EnumUtils.cacheEnumValuesInCapitalLetters.put(c, map); } E result = map.get(name.toUpperCase()); if (result == null) { throw new java.lang.IllegalArgumentException(((( enum const   + (c.getName())) + ".") + name)); } return result; }	public static <E extends java.lang.Enum<E>> E valueOf(java.lang.Class<E> c, java.lang.String name, boolean ignorecase) { if (!ignorecase) { { return java.lang.Enum.<E>valueOf(c, name); } } E[] universe = c.getEnumConstants(); if (universe == null) { throw new java.lang.IllegalArgumentException((name + " is not an enum type")); } java.util.Map<java.lang.String, E> map = org.ovirt.engine.core.common.utils.EnumUtils.cacheEnumValuesInCapitalLetters.get(c); if (map == null) { map = new java.util.HashMap<>((2 * (universe.length))); for (E e : universe) { map.put(e.name().toUpperCase(), e); } org.ovirt.engine.core.common.utils.EnumUtils.cacheEnumValuesInCapitalLetters.put(c, map); } E result = map.get(name.toUpperCase()); if (result == null) { throw new java.lang.IllegalArgumentException(((("No enum const " + (c.getName())) + ".") + name)); } return result; }
@org.junit.Before public void setUp() { initVmTemplate(); cmd.setVmTemplate(vmTemplate); cmd.setVmTemplateId(vmTemplate.getId()); initCluster(); cmd.setClusterId(cluster.getId()); cmd.setCluster(cluster); initStoragePool(); cmd.setStoragePoolId(org.ovirt.engine.core.bll.AddVmCommandTestBase.STORAGE_POOL_ID); cmd.setStoragePool(storagePool); mockDaos(); mockOtherDependencies(); org.ovirt.engine.core.bll.AddVmCommandTestBase.doNothing().when(cmd).initTemplateDisks(); org.ovirt.engine.core.bll.AddVmCommandTestBase.doNothing().when(cmd).initCommandBase(); org.ovirt.engine.core.bll.AddVmCommandTestBase.doNothing().when(cmd).initUser(); }	@org.junit.Before public void setUp() { initVmTemplate(); cmd.setVmTemplate(vmTemplate); cmd.setVmTemplateId(vmTemplate.getId()); initCluster(); cmd.setClusterId(cluster.getId()); cmd.setCluster(cluster); initStoragePool(); cmd.setStoragePoolId(org.ovirt.engine.core.bll.AddVmCommandTestBase.STORAGE_POOL_ID); cmd.setStoragePool(storagePool); mockDaos(); mockOtherDependencies(); org.ovirt.engine.core.bll.AddVmCommandTestBase.doNothing().when(cmd).initTemplateDisks(); }
<START_MOD>@java.lang.Override <END_MOD>protected org.ovirt.engine.core.bll.<START_MOD>AddVmCommand<<END_MOD>org.ovirt.engine.core.<START_MOD>common<END_MOD>.<START_MOD>action<END_MOD>.<START_MOD>AddVmParameters> createCommand(<END_MOD>)<START_MOD> { initVM(<END_MOD>)<START_MOD>; org.ovirt.engine.core.common.action.AddVmParameters param = new org.ovirt.engine.core.common.action.AddVmParameters(vm<END_MOD>)<START_MOD>; return new <END_MOD>org.ovirt.engine.core.bll.<START_MOD>AddVmCommand(param, null<END_MOD>); }	@java.lang.Override protected org.ovirt.engine.core.bll.AddVmCommand<org.ovirt.engine.core.common.action.AddVmParameters> createCommand() { initVM(); return new org.ovirt.engine.core.bll.AddVmCommand(new org.ovirt.engine.core.common.action.AddVmParameters(vm), null); }
@java.lang.Override protected <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.bll.AddVmFromTemplateCommand<END_MOD><org.ovirt.engine.core.common.<START_MOD>action<END_MOD>.<START_MOD>AddVmParameters<END_MOD>> <START_MOD>createCommand<END_MOD>() { <START_MOD>initVM<END_MOD>(); org.ovirt.engine.core.common.<START_MOD>action<END_MOD>.<START_MOD>AddVmParameters<END_MOD> <START_MOD>param<END_MOD> = new org.ovirt.engine.core.common.<START_MOD>action<END_MOD>.<START_MOD>AddVmParameters<END_MOD>(<START_MOD>vm<END_MOD>); <START_MOD>return<END_MOD> <START_MOD>new<END_MOD> org.ovirt.engine.core.<START_MOD>bll<END_MOD>.<START_MOD>AddVmFromTemplateCommand<END_MOD>(<START_MOD>param,<END_MOD> <START_MOD>null<END_MOD>); }	@java.lang.Override protected org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters> createCommand() { initVM(); return new org.ovirt.engine.core.bll.AddVmFromTemplateCommand(new org.ovirt.engine.core.common.action.AddVmParameters(vm), null); }
@org.junit.Before public void setUp() { sdId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdStatic = createStorageDomain(); spId = org.ovirt.engine.core.compat.Guid.newGuid(); sd = new org.ovirt.engine.core.common.businessentities.StorageDomain(); sd.setStorageStaticData(sdStatic); sd.setStatus(StorageDomainStatus.Active); sd.setStoragePoolId(spId); org.ovirt.engine.core.common.businessentities.StoragePool sp = new org.ovirt.engine.core.common.businessentities.StoragePool(); sp.setId(spId); sp.setStatus(StoragePoolStatus.Up); sp.setIsLocal(false); sp.setCompatibilityVersion(Version.v3_6); doReturn(sd).when(cmd).getStorageDomain(); doReturn(sp).when(cmd).getStoragePool(); doReturn(sdsDao).when(cmd).getStorageDomainStaticDao(); when(sdsDao.get(sdId)).thenReturn(sdStatic); doReturn(lunsDao).when(cmd).getLunDao(); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUNId("1"); lun1.setStorageDomainId(sdId); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUNId("2"); lun2.setStorageDomainId(sdId); when(lunsDao.getAll()).thenReturn(java.util.Arrays.asList(lun1, lun2)); }	@org.junit.Before public void setUp() { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdStatic = createStorageDomain(); spId = org.ovirt.engine.core.compat.Guid.newGuid(); sd = new org.ovirt.engine.core.common.businessentities.StorageDomain(); sd.setStorageStaticData(sdStatic); sd.setStatus(StorageDomainStatus.Active); sd.setStoragePoolId(spId); org.ovirt.engine.core.common.businessentities.StoragePool sp = new org.ovirt.engine.core.common.businessentities.StoragePool(); sp.setId(spId); sp.setStatus(StoragePoolStatus.Up); sp.setIsLocal(false); sp.setCompatibilityVersion(Version.v3_6); doReturn(sd).when(cmd).getStorageDomain(); doReturn(sp).when(cmd).getStoragePool(); doReturn(sdsDao).when(cmd).getStorageDomainStaticDao(); when(sdsDao.get(sdId)).thenReturn(sdStatic); doReturn(lunsDao).when(cmd).getLunDao(); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUNId("1"); lun1.setStorageDomainId(sdId); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUNId("2"); lun2.setStorageDomainId(sdId); when(lunsDao.getAll()).thenReturn(java.util.Arrays.asList(lun1, lun2)); }
@org.junit.Before public void setup() { map = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap(); cmd.init(); doReturn(storagePoolDao).when(cmd).getStoragePoolDao(); doReturn(storageDomainDao).when(cmd).getStorageDomainDao(); doReturn(eventQueue).when(cmd).getEventQueue(); }	@org.junit.Before public void setup() { map = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap(); cmd.init(); doReturn(storagePoolDao).when(cmd).getStoragePoolDao(); doReturn(storageDomainDao).when(cmd).getStorageDomainDao(); }
@java.lang.Override @org.junit.Before public void setUp() { super.setUp(); vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setStatus(VMStatus.Down); when(vmDao.getVmsListForDisk(getDiskImageId(), java.lang.Boolean.FALSE)).thenReturn(java.util.Collections.singletonList(vm)); doReturn(vmDao).when(cmd).getVmDao(); doReturn(getStorageDomainDao()).when(cmd).getStorageDomainDao(); doReturn(getStoragePoolDao()).when(cmd).getStoragePoolDao(); doReturn(getDiskDao()).when(cmd).getDiskDao(); doReturn(getProviderProxy()).when(cmd).getProviderProxy(); }	@java.lang.Override @org.junit.Before public void setUp() { super.setUp(); vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setStatus(VMStatus.Down); when(vmDao.getVmsListForDisk(getDiskImageId(), java.lang.Boolean.FALSE)).thenReturn(java.util.Collections.singletonList(vm)); doReturn(vmDao).when(cmd).getVmDao(); doReturn(getStorageDomainDao()).when(cmd).getStorageDomainDao(); doReturn(getStoragePoolDao()).when(cmd).getStoragePoolDao(); doReturn(getDiskDao()).when(cmd).getDiskDao(); }
@java.lang.Override @org.junit.Before public void setUp() { super.setUp(); injectorRule.bind(org.ovirt.engine.core.bll.utils.VmDeviceUtils.class, vmDeviceUtils); <START_MOD>cmd<END_MOD>.<START_MOD>getParameters<END_MOD>().setSourceRepoImageId(getRepoImageId()); <START_MOD>cmd.getParameters()<END_MOD>.setSourceStorageDomainId(getRepoStorageDomainId()); <START_MOD>cmd.getParameters()<END_MOD>.setStoragePoolId(getStoragePoolId()); <START_MOD>cmd.getParameters()<END_MOD>.setStorageDomainId(getStorageDomainId()); doReturn(getStorageDomainDao()).when(cmd).getStorageDomainDao(); doReturn(getStoragePoolDao()).when(cmd).getStoragePoolDao(); doReturn(getProviderProxy()).when(cmd).getProviderProxy(); doReturn(true).when(cmd).validateSpaceRequirements(any(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class)); }	@java.lang.Override @org.junit.Before public void setUp() { super.setUp(); cmd.getParameters().setSourceRepoImageId(getRepoImageId()); cmd.getParameters().setSourceStorageDomainId(getRepoStorageDomainId()); cmd.getParameters().setStoragePoolId(getStoragePoolId()); cmd.getParameters().setStorageDomainId(getStorageDomainId()); doReturn(getStorageDomainDao()).when(cmd).getStorageDomainDao(); doReturn(getStoragePoolDao()).when(cmd).getStoragePoolDao(); doReturn(true).when(cmd).validateSpaceRequirements(any(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class)); }
private static org.ovirt.engine.api.model.IpVersion getIpVersion(org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment) { <START_MOD>org.ovirt.engine.api.model.Ip<END_MOD> <START_MOD>ip<END_MOD> <START_MOD>=<END_MOD> ipAddressAssignment.getIp()<START_MOD>; if (ip == null) { return null; } if (ip<END_MOD>.isSetVersion())<START_MOD> { return ip.getVersion(<END_MOD>)<START_MOD>; } java.lang.String address = ip.getAddress(); if (address == null<END_MOD>) { return null; } return <START_MOD>(address<END_MOD>.<START_MOD>indexOf<END_MOD>(<START_MOD>':'<END_MOD>)<START_MOD>) == (-1) ? org<END_MOD>.<START_MOD>ovirt.engine.api.model.IpVersion.V4 : org.ovirt.engine.api.model.IpVersion.V6<END_MOD>; }	private static org.ovirt.engine.api.model.IpVersion getIpVersion(org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment) { return org.ovirt.engine.api.restapi.types.IpHelper.getVersion(ipAddressAssignment.getIp()); }
java.util.Map getNetworkStatsMap(org.ovirt.vdsmfake.domain.VM vm) { java.util.List<org.ovirt.vdsmfake.domain.Device> nicDevices = vm.getDevicesByType(Device.DeviceType.NIC); java.lang.String macAddress = vm.getMacAddress(); if (macAddress.equals(VM.NONE_STRING)) { log.debug( mac address for vm {} vm.getId()); return map(); } java.util.Map resultMap = map(); int count = 0; for (org.ovirt.vdsmfake.domain.Device device : nicDevices) { java.util.Map netStats = map(); java.lang.String dName = "vnet" + count; netStats.put("txErrors", "0"); netStats.put("state", "unknown"); netStats.put("macAddr", <START_MOD>device.getMacAddr<END_MOD>()); netStats.put("name", dName); netStats.put("txDropped", "0"); netStats.put("txRate", <START_MOD>org.ovirt.vdsmfake.Utils.rangeParsser(org.ovirt.vdsmfake.AppConfig.getInstance().getNetworkLoadValues())<END_MOD>); netStats.put("rxErrors", "0"); netStats.put("rxRate", <START_MOD>org.ovirt.vdsmfake.Utils.rangeParsser(org.ovirt.vdsmfake.AppConfig.getInstance().getNetworkLoadValues())); netStats.put("tx", org.ovirt.vdsmfake.Utils.rangeParsser(org.ovirt.vdsmfake.AppConfig.getInstance().getNetworkLoadValues())); netStats.put("rx", org.ovirt.vdsmfake.Utils.rangeParsser(org.ovirt.vdsmfake.AppConfig.getInstance().getNetworkLoadValues())<END_MOD>); netStats.put("rxDropped", "0"); netStats.put("speed", <START_MOD>"1000"); netStats.put("sampleTime", "4318787.08"<END_MOD>); resultMap.put(dName, netStats); ++count; } return resultMap; }	java.util.Map getNetworkStatsMap(org.ovirt.vdsmfake.domain.VM vm) { java.util.List<org.ovirt.vdsmfake.domain.Device> nicDevices = vm.getDevicesByType(Device.DeviceType.NIC); java.lang.String macAddress = vm.getMacAddress(); if (macAddress.equals(VM.NONE_STRING)) { log.debug("no mac address for vm {}", vm.getId()); return map(); } java.util.Map resultMap = map(); int count = 0; for (org.ovirt.vdsmfake.domain.Device device : nicDevices) { java.util.ArrayList loadValues = org.ovirt.vdsmfake.AppConfig.getInstance().getNetworkLoadValues(); java.util.Map netStats = map(); java.lang.String dName = "vnet" + count; netStats.put("txErrors", "0"); netStats.put("state", "unknown"); netStats.put("macAddr", device.getMacAddr()); netStats.put("name", dName); netStats.put("txDropped", "0"); netStats.put("txRate", org.ovirt.vdsmfake.Utils.rangeParsser(loadValues)); netStats.put("rxErrors", "0"); netStats.put("rxRate", org.ovirt.vdsmfake.Utils.rangeParsser(loadValues)); netStats.put("tx", org.ovirt.vdsmfake.Utils.rangeParsser(loadValues)); netStats.put("rx", org.ovirt.vdsmfake.Utils.rangeParsser(loadValues)); netStats.put("rxDropped", "0"); netStats.put("speed", "1000"); netStats.put("sampleTime", "4318787.08"); resultMap.put(dName, netStats); ++count; } return resultMap; }
java.util.List getNetworkInterfaces(org.ovirt.vdsmfake.domain.VM vm) { java.util.List net = new java.util.ArrayList(); java.util.List<org.ovirt.vdsmfake.domain.Device> nicDevices = vm.getDevicesByType(Device.DeviceType.NIC); for (org.ovirt.vdsmfake.domain.Device device : nicDevices) { java.util.<START_MOD>Map resultMap = new java.util.HashMap(); java.util.<END_MOD>List templist = new java.util.ArrayList(); java.util.List templist2 = new java.util.ArrayList(); <START_MOD>resultMap.put("name", "eth0"); templist.add("fe80::21a:4aff:fe16:2016"); templist.add("2620:52:0:2380:21a:4aff:fe16:2016"<END_MOD>); resultMap.put("inet6", templist); <START_MOD>templist2.add(vm.getIp()); resultMap.put("inet", templist2); <END_MOD>resultMap.put("hw", <START_MOD>vm.getMacAddress()); net.add(resultMap); break<END_MOD>; } log.debug( list is {} net.toString()); return net; }	java.util.List<java.util.Map<java.lang.String, java.lang.Object>> getNetworkInterfaces(org.ovirt.vdsmfake.domain.VM vm) { java.util.Map<java.lang.String, java.lang.Object> resultMap = new java.util.HashMap(); java.util.List<java.lang.String> inet6Addresses = new java.util.ArrayList<>(); java.util.List<java.lang.String> inet4Addresses = new java.util.ArrayList<>(); java.util.List<java.util.Map<java.lang.String, java.lang.Object>> nets = new java.util.ArrayList<>(); resultMap.put("name", "eth0"); inet6Addresses.add("fe80::21a:4aff:fe16:2016"); inet6Addresses.add("2620:52:0:2380:21a:4aff:fe16:2016"); resultMap.put("inet6", inet6Addresses); inet4Addresses.add(vm.getIp()); resultMap.put("inet", inet4Addresses); resultMap.put("hw", vm.getMacAddress()); nets.add(resultMap); log.debug("network list is {}", nets.toString()); return nets; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.core.bll.AddClusterCommand.getCluster(); cluster.setArchitecture(org.ovirt.engine.core.bll.AddClusterCommand.getArchitecture()); org.ovirt.engine.core.bll.AddClusterCommand.setDefaultSwitchTypeIfNeeded(); org.ovirt.engine.core.bll.AddClusterCommand.checkMaxMemoryOverCommitValue(); cluster.setDetectEmulatedMachine(true); cluster.setMacPoolId(calculateMacPoolIdToUse()); <START_MOD>cluster.getAdditionalRngSources().remove(VmRngDevice.Source.RANDOM); <END_MOD>org.ovirt.engine.core.bll.AddClusterCommand.getClusterDao().save(cluster); org.ovirt.engine.core.bll.AddClusterCommand.alertIfFencingDisabled(); if ((org.ovirt.engine.core.bll.AddClusterCommand.getParameters().getCluster().getStoragePoolId()) != null) { attachManagementNetwork(); } addDefaultCpuProfile(); if (org.apache.commons.collections.CollectionUtils.isNotEmpty(cluster.getAddtionalFeaturesSupported())) { for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature feature : cluster.getAddtionalFeaturesSupported()) { feature.setClusterId(cluster.getId()); } clusterFeatureDao.addAllSupportedClusterFeature(cluster.getAddtionalFeaturesSupported()); } setActionReturnValue(cluster.getId()); org.ovirt.engine.core.bll.AddClusterCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.core.bll.AddClusterCommand.getCluster(); cluster.setArchitecture(org.ovirt.engine.core.bll.AddClusterCommand.getArchitecture()); org.ovirt.engine.core.bll.AddClusterCommand.setDefaultSwitchTypeIfNeeded(); org.ovirt.engine.core.bll.AddClusterCommand.checkMaxMemoryOverCommitValue(); cluster.setDetectEmulatedMachine(true); cluster.setMacPoolId(calculateMacPoolIdToUse()); org.ovirt.engine.core.bll.AddClusterCommand.getClusterDao().save(cluster); org.ovirt.engine.core.bll.AddClusterCommand.alertIfFencingDisabled(); if ((org.ovirt.engine.core.bll.AddClusterCommand.getParameters().getCluster().getStoragePoolId()) != null) { attachManagementNetwork(); } addDefaultCpuProfile(); if (org.apache.commons.collections.CollectionUtils.isNotEmpty(cluster.getAddtionalFeaturesSupported())) { for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature feature : cluster.getAddtionalFeaturesSupported()) { feature.setClusterId(cluster.getId()); } clusterFeatureDao.addAllSupportedClusterFeature(cluster.getAddtionalFeaturesSupported()); } setActionReturnValue(cluster.getId()); org.ovirt.engine.core.bll.AddClusterCommand.setSucceeded(true); }
@java.lang.Override @org.junit.Before public void setUp() { super.setUp(); vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setStatus(VMStatus.Down); when(vmDao.getVmsListForDisk(getDiskImageId(), java.lang.Boolean.FALSE)).thenReturn(java.util.Collections.singletonList(vm)); doReturn(getProviderProxy()).when(cmd).getProviderProxy(); }	@java.lang.Override @org.junit.Before public void setUp() { super.setUp(); vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setStatus(VMStatus.Down); when(vmDao.getVmsListForDisk(getDiskImageId(), java.lang.Boolean.FALSE)).thenReturn(java.util.Collections.singletonList(vm)); }
protected void updateSnapshotVmConfiguration() { org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getImageIds().get(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getExecutionIndex()); org.ovirt.engine.core.common.businessentities.Snapshot snapshot = <START_MOD>snapshotDao<END_MOD>.get(getSnapshotId()); org.ovirt.engine.core.common.businessentities.Snapshot snapshotWithoutImage = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.prepareSnapshotConfigWithoutImageSingleImage(snapshot, imageId); <START_MOD>snapshotDao<END_MOD>.update(snapshotWithoutImage); }	private boolean performNextOperationColdMerge(int completedChildren) { org.ovirt.engine.core.compat.Guid nextImageId = org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getImageIds().get(completedChildren); org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.log.info("Starting child command {} of {}, image '{}'", (completedChildren + 1), org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getImageIds().size(), nextImageId); org.ovirt.engine.core.common.action.ImagesContainterParametersBase parameters = buildRemoveSnapshotSingleDiskParameters(nextImageId); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveSnapshotSingleDisk, parameters, org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.cloneContextAndDetachFromParent()); return true; }
private org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters buildRemoveSnapshotSingleDiskLiveParameters(org.ovirt.engine.core.compat.Guid imageId) { org.ovirt.engine.core.common.businessentities.storage.DiskImage dest = <START_MOD>diskImageDao<END_MOD>.getAllSnapshotsForParent(imageId).get(0); org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters parameters = new org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters(imageId, org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getVmId()); parameters.setDestinationImageId(dest.getImageId()); parameters.setEntityInfo(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getEntityInfo()); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters()); parameters.setParentCommand(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getActionType()); parameters.setCommandType(VdcActionType.RemoveSnapshotSingleDiskLive); parameters.setVdsId(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getVm().getRunOnVds()); parameters.setSessionId(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getSessionId()); return parameters; }	private boolean performNextOperationLiveMerge(int completedChildren) { if (completedChildren != 0) { checkImageIdConsistency((completedChildren - 1)); } org.ovirt.engine.core.compat.Guid nextImageId = org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getImageIds().get(completedChildren); org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.log.info("Starting child command {} of {}, image '{}'", (completedChildren + 1), org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getImageIds().size(), nextImageId); org.ovirt.engine.core.common.action.ImagesContainterParametersBase parameters = buildRemoveSnapshotSingleDiskLiveParameters(nextImageId, completedChildren); updateParameters(completedChildren, parameters.getDestinationImageId()); org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.persistCommandIfNeeded(); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveSnapshotSingleDiskLive, parameters, org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.cloneContextAndDetachFromParent()); return true; }
@java.lang.Override protected void executeVmCommand() { if (!(isOperationPerformedOnDiskSnapshot())) { <START_MOD>this.vmStaticDao<END_MOD>.incrementDbGeneration(org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getVm().getId()); } final org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = createVmDevice(); org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getVmDeviceDao().save(vmDevice); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement diskVmElement = org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getDiskVmElement(); diskVmElement.getId().setDeviceId(disk.getId()); diskVmElementDao.save(diskVmElement); disk.setDiskVmElements(java.util.Collections.singletonList(diskVmElement)); java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> imageList = new java.util.ArrayList<>(); imageList.add(disk); org.ovirt.engine.core.bll.VmHandler.updateDisksForVm(org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getVm(), imageList); if (!(isOperationPerformedOnDiskSnapshot())) { if (disk.isAllowSnapshot()) { updateDiskVmSnapshotId(); } } updateBootOrderInVmDevice(); if ((org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getParameters().isPlugUnPlug()) && ((org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) { performPlugCommand(VDSCommandType.HotPlugDisk, disk, vmDevice); } org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.setSucceeded(true); }	@java.lang.Override protected void executeVmCommand() { if (!(isOperationPerformedOnDiskSnapshot())) { vmStaticDao.incrementDbGeneration(org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getVm().getId()); } final org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = createVmDevice(); org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getVmDeviceDao().save(vmDevice); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement diskVmElement = org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getDiskVmElement(); diskVmElement.getId().setDeviceId(disk.getId()); diskVmElementDao.save(diskVmElement); disk.setDiskVmElements(java.util.Collections.singletonList(diskVmElement)); java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> imageList = new java.util.ArrayList<>(); imageList.add(disk); org.ovirt.engine.core.bll.VmHandler.updateDisksForVm(org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getVm(), imageList); if (!(isOperationPerformedOnDiskSnapshot())) { if (disk.isAllowSnapshot()) { updateDiskVmSnapshotId(); } } updateBootOrderInVmDevice(); if ((org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getParameters().isPlugUnPlug()) && ((org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) { performPlugCommand(VDSCommandType.HotPlugDisk, disk, vmDevice); } org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.setSucceeded(true); }
@java.lang.Override protected void executeVmCommand() { if (diskShouldBeUnPlugged()) { performPlugCommand(VDSCommandType.HotUnPlugDisk, disk, vmDevice); } org.ovirt.engine.core.bll.storage.disk.DetachDiskFromVmCommand.getVmDeviceDao().remove(vmDevice.getId()); diskVmElementDao.remove(vmDevice.getId()); if ((!(disk.isDiskSnapshot())) && (disk.getDiskStorageType().isInternal())) { imageDao.updateImageVmSnapshotId(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)).getImageId(), null); } org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(org.ovirt.engine.core.bll.storage.disk.DetachDiskFromVmCommand.getVm()); org.ovirt.engine.core.bll.storage.disk.DetachDiskFromVmCommand.getVmDeviceUtils().updateBootOrder(org.ovirt.engine.core.bll.storage.disk.DetachDiskFromVmCommand.getVm().getId()); <START_MOD>this.vmStaticDao<END_MOD>.incrementDbGeneration(org.ovirt.engine.core.bll.storage.disk.DetachDiskFromVmCommand.getVm().getId()); org.ovirt.engine.core.bll.storage.disk.DetachDiskFromVmCommand.setSucceeded(true); }	@java.lang.Override protected void executeVmCommand() { if (diskShouldBeUnPlugged()) { performPlugCommand(VDSCommandType.HotUnPlugDisk, disk, vmDevice); } org.ovirt.engine.core.bll.storage.disk.DetachDiskFromVmCommand.getVmDeviceDao().remove(vmDevice.getId()); diskVmElementDao.remove(vmDevice.getId()); if ((!(disk.isDiskSnapshot())) && (disk.getDiskStorageType().isInternal())) { imageDao.updateImageVmSnapshotId(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)).getImageId(), null); } org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(org.ovirt.engine.core.bll.storage.disk.DetachDiskFromVmCommand.getVm()); org.ovirt.engine.core.bll.storage.disk.DetachDiskFromVmCommand.getVmDeviceUtils().updateBootOrder(org.ovirt.engine.core.bll.storage.disk.DetachDiskFromVmCommand.getVm().getId()); vmStaticDao.incrementDbGeneration(org.ovirt.engine.core.bll.storage.disk.DetachDiskFromVmCommand.getVm().getId()); org.ovirt.engine.core.bll.storage.disk.DetachDiskFromVmCommand.setSucceeded(true); }
protected void endVmCommand() { if ((org.ovirt.engine.core.bll.VmCommand.getVm()) != null) { <START_MOD>this<END_MOD>.<START_MOD>vmStaticDao<END_MOD>.incrementDbGeneration(org.ovirt.engine.core.bll.VmCommand.getVm().getId()); } endActionOnDisks(); unlockVm(); org.ovirt.engine.core.bll.VmCommand.setSucceeded(true); }	protected void endVmCommand() { if ((org.ovirt.engine.core.bll.VmCommand.getVm()) != null) { vmStaticDao.incrementDbGeneration(org.ovirt.engine.core.bll.VmCommand.getVm().getId()); } endActionOnDisks(); unlockVm(); org.ovirt.engine.core.bll.VmCommand.setSucceeded(true); }
@java.lang.Override protected void executeVmCommand() { if (org.ovirt.engine.core.bll.storage.disk.HotPlugDiskToVmCommand.getVm().getStatus().isUpOrPaused()) { org.ovirt.engine.core.bll.storage.disk.HotPlugDiskToVmCommand.updateDisksFromDb(); performPlugCommand(getPlugAction(), getDisk(), oldVmDevice); } updateDeviceProperties(); if (getDiskVmElement().isBoot()) { updateBootOrder(); } <START_MOD>this<END_MOD>.<START_MOD>vmStaticDao<END_MOD>.incrementDbGeneration(org.ovirt.engine.core.bll.storage.disk.HotPlugDiskToVmCommand.getVm().getId()); org.ovirt.engine.core.bll.storage.disk.HotPlugDiskToVmCommand.setSucceeded(true); }	@java.lang.Override protected void executeVmCommand() { if (org.ovirt.engine.core.bll.storage.disk.HotPlugDiskToVmCommand.getVm().getStatus().isUpOrPaused()) { org.ovirt.engine.core.bll.storage.disk.HotPlugDiskToVmCommand.updateDisksFromDb(); performPlugCommand(getPlugAction(), getDisk(), oldVmDevice); } updateDeviceProperties(); if (getDiskVmElement().isBoot()) { updateBootOrder(); } vmStaticDao.incrementDbGeneration(org.ovirt.engine.core.bll.storage.disk.HotPlugDiskToVmCommand.getVm().getId()); org.ovirt.engine.core.bll.storage.disk.HotPlugDiskToVmCommand.setSucceeded(true); }
@java.lang.Override protected void executeVmCommand() { super.executeVmCommand(); org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.setVm(null); org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getVm().setVmtGuid(VmTemplateHandler.BLANK_VM_TEMPLATE_ID); <START_MOD>this<END_MOD>.<START_MOD>vmStaticDao<END_MOD>.update(org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getVm().getStaticData()); }	@java.lang.Override protected void executeVmCommand() { super.executeVmCommand(); org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.setVm(null); org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getVm().setVmtGuid(VmTemplateHandler.BLANK_VM_TEMPLATE_ID); vmStaticDao.update(org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getVm().getStaticData()); }
protected void removeVmStatic(boolean removePermissions) { <START_MOD>this<END_MOD>.<START_MOD>vmStaticDao<END_MOD>.remove(org.ovirt.engine.core.bll.VmCommand.getVmId(), removePermissions); }	protected void removeVmStatic(boolean removePermissions) { vmStaticDao.remove(org.ovirt.engine.core.bll.VmCommand.getVmId(), removePermissions); }
protected boolean validateNoDuplicateVm() { org.ovirt.engine.core.common.businessentities.VmStatic duplicateVm = <START_MOD>this<END_MOD>.<START_MOD>vmStaticDao<END_MOD>.get(getVm().getId()); return duplicateVm == null ? true : failValidation(EngineMessage.VM_CANNOT_IMPORT_VM_EXISTS, java.lang.String.format( %1$s duplicateVm.getName())); }	protected boolean validateNoDuplicateVm() { org.ovirt.engine.core.common.businessentities.VmStatic duplicateVm = vmStaticDao.get(getVm().getId()); return duplicateVm == null ? true : failValidation(EngineMessage.VM_CANNOT_IMPORT_VM_EXISTS, java.lang.String.format("$VmName %1$s", duplicateVm.getName())); }
@java.lang.Override protected void executeVmCommand() { this.setVmName(<START_MOD>this.vmStaticDao<END_MOD>.get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getVmId()).getName()); org.ovirt.engine.core.common.businessentities.network.VmNic iface = org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getVmNicDao().get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getInterfaceId()); if (iface != null) { interfaceName = iface.getName(); java.lang.String interType = org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(iface.getType()).getDescription(); if (interType != null) { org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.addCustomValue("InterfaceType", interType); } new org.ovirt.engine.core.bll.network.ExternalNetworkManager(iface).deallocateIfExternal(); org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getMacPool().freeMac(iface.getMacAddress()); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.bll.network.vm.vmStaticDao.incrementDbGeneration(getParameters().getVmId()); getVmNicDao().remove(getParameters().getInterfaceId()); getDbFacade().getVmNetworkStatisticsDao().remove(getParameters().getInterfaceId()); getDbFacade().getVmDeviceDao().remove(new org.ovirt.engine.core.common.businessentities.VmDeviceId(getParameters().getInterfaceId(), getParameters().getVmId())); setSucceeded(true); return null; }); }	@java.lang.Override protected void executeVmCommand() { this.setVmName(vmStaticDao.get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getVmId()).getName()); org.ovirt.engine.core.common.businessentities.network.VmNic iface = org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getVmNicDao().get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getInterfaceId()); if (iface != null) { interfaceName = iface.getName(); java.lang.String interType = org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(iface.getType()).getDescription(); if (interType != null) { org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.addCustomValue("InterfaceType", interType); } new org.ovirt.engine.core.bll.network.ExternalNetworkManager(iface).deallocateIfExternal(); org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getMacPool().freeMac(iface.getMacAddress()); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.bll.network.vm.vmStaticDao.incrementDbGeneration(getParameters().getVmId()); getVmNicDao().remove(getParameters().getInterfaceId()); getDbFacade().getVmNetworkStatisticsDao().remove(getParameters().getInterfaceId()); getDbFacade().getVmDeviceDao().remove(new org.ovirt.engine.core.common.businessentities.VmDeviceId(getParameters().getInterfaceId(), getParameters().getVmId())); setSucceeded(true); return null; }); }
@java.lang.Override protected void endSuccessfully() { <START_MOD>this.vmStaticDao<END_MOD>.incrementDbGeneration(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getId()); org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.endActionOnDisks(); if ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm()) != null) { org.ovirt.engine.core.bll.VmHandler.unlockVm(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm(), org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getCompensationContext()); restoreVmConfigFromSnapshot(); } else { org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.setCommandShouldBeLogged(false); log.warn( Vm is null - not performing endAction on Vm } org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.setSucceeded(true); }	@java.lang.Override protected void endSuccessfully() { vmStaticDao.incrementDbGeneration(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getId()); org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.endActionOnDisks(); if ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm()) != null) { org.ovirt.engine.core.bll.VmHandler.unlockVm(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm(), org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getCompensationContext()); restoreVmConfigFromSnapshot(); } else { org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.setCommandShouldBeLogged(false); log.warn("VmCommand::EndVmCommand: Vm is null - not performing endAction on Vm"); } org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.setSucceeded(true); }
private void incrementVmGeneration() { <START_MOD>this<END_MOD>.<START_MOD>vmStaticDao<END_MOD>.incrementDbGeneration(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm().getId()); }	private void incrementVmGeneration() { vmStaticDao.incrementDbGeneration(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm().getId()); }
@java.lang.Override public void onPowerringUp() { decreasePendingVm(<START_MOD>this<END_MOD>.<START_MOD>vmStaticDao<END_MOD>.get(org.ovirt.engine.core.bll.RunVmCommand.getVmId())); }	@java.lang.Override public void onPowerringUp() { decreasePendingVm(vmStaticDao.get(org.ovirt.engine.core.bll.RunVmCommand.getVmId())); }
protected void addVmStatic() { logImportEvents(); getVm().getStaticData().setId(getVmId()); getVm().getStaticData().setCreationDate(new java.util.Date()); getVm().getStaticData().setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getClusterId()); getVm().getStaticData().setMinAllocatedMem(computeMinAllocatedMem()); getVm().getStaticData().setQuotaId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getQuotaId()); if (!(org.ovirt.engine.core.bll.VmHandler.validateDedicatedVdsExistOnSameCluster(getVm().getStaticData(), null))) { getVm().setDedicatedVmForVdsList(java.util.Collections.emptyList()); } if (((getVm().getOriginalTemplateGuid()) != null) && (!(VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(getVm().getOriginalTemplateGuid())))) { org.ovirt.engine.core.common.businessentities.VmTemplate originalTemplate = org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getVmTemplateDao().get(getVm().getOriginalTemplateGuid()); if (originalTemplate != null) { getVm().getStaticData().setOriginalTemplateName(originalTemplate.getName()); } } if (org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getCopyCollapse()) { getVm().setVmtGuid(VmTemplateHandler.BLANK_VM_TEMPLATE_ID); } <START_MOD>this.vmStaticDao.save(getVm().getStaticData()); <END_MOD>org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCompensationContext().snapshotNewEntity(getVm().getStaticData()); }	protected void addVmStatic() { logImportEvents(); getVm().getStaticData().setId(getVmId()); getVm().getStaticData().setCreationDate(new java.util.Date()); getVm().getStaticData().setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getClusterId()); getVm().getStaticData().setMinAllocatedMem(computeMinAllocatedMem()); getVm().getStaticData().setQuotaId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getQuotaId()); if (!(org.ovirt.engine.core.bll.VmHandler.validateDedicatedVdsExistOnSameCluster(getVm().getStaticData(), null))) { getVm().setDedicatedVmForVdsList(java.util.Collections.emptyList()); } if (((getVm().getOriginalTemplateGuid()) != null) && (!(VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(getVm().getOriginalTemplateGuid())))) { org.ovirt.engine.core.common.businessentities.VmTemplate originalTemplate = org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getVmTemplateDao().get(getVm().getOriginalTemplateGuid()); if (originalTemplate != null) { getVm().getStaticData().setOriginalTemplateName(originalTemplate.getName()); } } if (org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getCopyCollapse()) { getVm().setVmtGuid(VmTemplateHandler.BLANK_VM_TEMPLATE_ID); } vmStaticDao.save(getVm().getStaticData()); org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCompensationContext().snapshotNewEntity(getVm().getStaticData()); }
protected void addVmStatic() { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData(); if ((vmStatic.getOrigin()) == null) { vmStatic.setOrigin(org.ovirt.engine.core.common.businessentities.OriginType.valueOf(org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.OriginType))); } vmStatic.setId(org.ovirt.engine.core.bll.AddVmCommand.getVmId()); vmStatic.setQuotaId(getQuotaId()); vmStatic.setCreationDate(new java.util.Date()); vmStatic.setCreatedByUserId(org.ovirt.engine.core.bll.AddVmCommand.getUserId()); setIconIds(vmStatic); org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils.getInstance().separateCustomPropertiesToUserAndPredefined(org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion(), vmStatic); updateOriginalTemplate(vmStatic); <START_MOD>this.vmStaticDao<END_MOD>.save(vmStatic); org.ovirt.engine.core.bll.AddVmCommand.getCompensationContext().snapshotNewEntity(vmStatic); }	protected void addVmStatic() { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData(); if ((vmStatic.getOrigin()) == null) { vmStatic.setOrigin(org.ovirt.engine.core.common.businessentities.OriginType.valueOf(org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.OriginType))); } vmStatic.setId(org.ovirt.engine.core.bll.AddVmCommand.getVmId()); vmStatic.setQuotaId(getQuotaId()); vmStatic.setCreationDate(new java.util.Date()); vmStatic.setCreatedByUserId(org.ovirt.engine.core.bll.AddVmCommand.getUserId()); setIconIds(vmStatic); org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils.getInstance().separateCustomPropertiesToUserAndPredefined(org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion(), vmStatic); updateOriginalTemplate(vmStatic); vmStaticDao.save(vmStatic); org.ovirt.engine.core.bll.AddVmCommand.getCompensationContext().snapshotNewEntity(vmStatic); }
private void createCommand() { doReturn(org.ovirt.engine.core.bll.AddClusterCommandTest.ARCHITECTURE_TYPE).when(addClusterCommand).getArchitecture(); doReturn(backend).when(addClusterCommand).getBackend(); doReturn(managementNetwork).when(addClusterCommand).getManagementNetwork(); when(macPoolDao.getDefaultPool()).thenReturn(new org.ovirt.engine.core.common.businessentities.MacPool()); }	private void mockDao() { when(macPoolDao.getDefaultPool()).thenReturn(new org.ovirt.engine.core.common.businessentities.MacPool()); }
@org.junit.Test public void validateWrongStorage() { org.ovirt.engine.core.common.businessentities.StorageDomainStatic nfsStatic = createStorageDomain(); nfsStatic.setStorageType(StorageType.NFS); org.ovirt.engine.core.common.businessentities.StorageDomain sd = new org.ovirt.engine.core.common.businessentities.StorageDomain(); sd.setStorageStaticData(nfsStatic); sd.setStatus(StorageDomainStatus.Active); sd.setStoragePoolId(spId); <START_MOD>cmd.setStorageDomain<END_MOD>(sd); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); }	@org.junit.Test public void validateWrongStorage() { org.ovirt.engine.core.common.businessentities.StorageDomainStatic nfsStatic = createStorageDomain(); nfsStatic.setStorageType(StorageType.NFS); org.ovirt.engine.core.common.businessentities.StorageDomain sd = new org.ovirt.engine.core.common.businessentities.StorageDomain(); sd.setStorageStaticData(nfsStatic); sd.setStatus(StorageDomainStatus.Active); sd.setStoragePoolId(spId); doReturn(sd).when(cmd).getStorageDomain(); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); }
@org.junit.Test public void validateNoDomain() { <START_MOD>cmd.setStorageDomain<END_MOD>(null); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST); }	@org.junit.Test public void validateNoDomain() { doReturn(null).when(cmd).getStorageDomain(); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST); }
@org.junit.Before public void setUp() { sdId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdStatic = createStorageDomain(); spId = org.ovirt.engine.core.compat.Guid.newGuid(); sd = new org.ovirt.engine.core.common.businessentities.StorageDomain(); sd.setStorageStaticData(sdStatic); sd.setStatus(StorageDomainStatus.Active); sd.setStoragePoolId(spId); org.ovirt.engine.core.common.businessentities.StoragePool sp = new org.ovirt.engine.core.common.businessentities.StoragePool(); sp.setId(spId); sp.setStatus(StoragePoolStatus.Up); sp.setIsLocal(false); sp.setCompatibilityVersion(Version.v3_6); cmd<START_MOD>.setStorageDomain(sd); <END_MOD>cmd<START_MOD>.setStoragePool(sp<END_MOD>); when(sdsDao.get(sdId)).thenReturn(sdStatic); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUNId("1"); lun1.setStorageDomainId(sdId); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUNId("2"); lun2.setStorageDomainId(sdId); when(lunsDao.getAll()).thenReturn(java.util.Arrays.asList(lun1, lun2)); }	@org.junit.Before public void setUp() { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdStatic = createStorageDomain(); spId = org.ovirt.engine.core.compat.Guid.newGuid(); sd = new org.ovirt.engine.core.common.businessentities.StorageDomain(); sd.setStorageStaticData(sdStatic); sd.setStatus(StorageDomainStatus.Active); sd.setStoragePoolId(spId); org.ovirt.engine.core.common.businessentities.StoragePool sp = new org.ovirt.engine.core.common.businessentities.StoragePool(); sp.setId(spId); sp.setStatus(StoragePoolStatus.Up); sp.setIsLocal(false); sp.setCompatibilityVersion(Version.v3_6); doReturn(sd).when(cmd).getStorageDomain(); doReturn(sp).when(cmd).getStoragePool(); when(sdsDao.get(sdId)).thenReturn(sdStatic); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUNId("1"); lun1.setStorageDomainId(sdId); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUNId("2"); lun2.setStorageDomainId(sdId); when(lunsDao.getAll()).thenReturn(java.util.Arrays.asList(lun1, lun2)); }
@java.lang.Override protected void executeVDSCommand() { try { org.ovirt.engine.core.vdsbroker.irsbroker.<START_MOD>IrsProxy<END_MOD> proxyData = org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.<START_MOD>getCurrentIrsProxy<END_MOD>(); proxyData.clearPoolTimers(); proxyData.clearCache(); } catch (java.lang.Exception e) { org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.log.error( not change timers for pool '{}': {} org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.getParameters().getStoragePoolId(), e.getMessage()); org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.log.debug("Exception", e); } org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.getVDSReturnValue().setSucceeded(true); }	@java.lang.Override protected void executeVDSCommand() { try { org.ovirt.engine.core.vdsbroker.irsbroker.IrsProxy proxy = org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.getCurrentIrsProxy(); proxy.clearPoolTimers(); proxy.clearCache(); } catch (java.lang.Exception e) { org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.log.error("Could not change timers for pool '{}': {}", org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.getParameters().getStoragePoolId(), e.getMessage()); org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.log.debug("Exception", e); } org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.getVDSReturnValue().setSucceeded(true); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("performLoadBalancing") public void performLoadBalancing() { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.debug( Balancer timer entered. java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = getClusterDao().getAll(); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { org.ovirt.engine.core.common.scheduling.ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId()); org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl policyUnit = policyUnits.get(policy.getBalance()); java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.BalanceResult> balanceResult = java.util.Optional.empty(); if (policyUnit.getPolicyUnit().isEnabled()) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = getVdsDao().getAllForClusterWithoutMigrating(cluster.getId()); if (policyUnit.getPolicyUnit().isInternal()) { balanceResult = internalRunBalance(policyUnit, cluster, hosts); } else if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.ExternalSchedulerEnabled)) { balanceResult = externalRunBalance(policyUnit, cluster, hosts); } } if ((balanceResult.isPresent()) && (balanceResult.get().isValid())) { migrationHandler.migrateVM(balanceResult.get().getCandidateHosts(), balanceResult.get().getVmToMigrate()<START_MOD>, MigrationReason.LOAD_BALANCING); } } }<END_MOD>	@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("performLoadBalancing") public void performLoadBalancing() { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.debug("Load Balancer timer entered."); java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = getClusterDao().getAll(); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { org.ovirt.engine.core.common.scheduling.ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId()); org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl policyUnit = policyUnits.get(policy.getBalance()); java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.BalanceResult> balanceResult = java.util.Optional.empty(); if (policyUnit.getPolicyUnit().isEnabled()) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = getVdsDao().getAllForClusterWithoutMigrating(cluster.getId()); if (policyUnit.getPolicyUnit().isInternal()) { balanceResult = internalRunBalance(policyUnit, cluster, hosts); } else if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.ExternalSchedulerEnabled)) { balanceResult = externalRunBalance(policyUnit, cluster, hosts); } } if ((balanceResult.isPresent()) && (balanceResult.get().isValid())) { migrationHandler.migrateVM(balanceResult.get().getCandidateHosts(), balanceResult.get().getVmToMigrate(), org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getMessage(AuditLogType.MIGRATION_REASON_LOAD_BALANCING)); } } }
protected boolean migrateVm(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.job.ExecutionContext parentContext) { return runInternalAction(VdcActionType.InternalMigrateVm, new org.ovirt.engine.core.common.action.InternalMigrateVmParameters(vm.getId(), org.ovirt.engine.core.bll.MaintenanceVdsCommand.getActionType()<START_MOD>, org.ovirt.engine.core.common.migration.MigrationReason.HOST_IN_MAINTENANCE<END_MOD>), createMigrateVmContext(parentContext, vm)).getSucceeded(); }	protected boolean migrateVm(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.job.ExecutionContext parentContext) { org.ovirt.engine.core.common.action.InternalMigrateVmParameters parameters = new org.ovirt.engine.core.common.action.InternalMigrateVmParameters(vm.getId(), org.ovirt.engine.core.bll.MaintenanceVdsCommand.getActionType()); parameters.setReason(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getMessage(AuditLogType.MIGRATION_REASON_HOST_IN_MAINTENANCE)); return runInternalAction(VdcActionType.InternalMigrateVm, parameters, createMigrateVmContext(parentContext, vm)).getSucceeded(); }
private java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> createMigrateVmToServerParametersList(java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> vmsToMigrate, final org.ovirt.engine.core.common.businessentities.VDS vds) { return vmsToMigrate.stream().map(( vm) -> { org.ovirt.engine.core.common.action.MigrateVmToServerParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmToServerParameters(false, vm.getId(), vds.getId()<START_MOD>, MigrationReason.PREFERRED_HOST_UP<END_MOD>); parameters.setShouldBeLogged(false); return parameters; }).collect(java.util.stream.Collectors.toList()); }	private java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> createMigrateVmToServerParametersList(java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> vmsToMigrate, final org.ovirt.engine.core.common.businessentities.VDS vds, java.lang.String reason) { return vmsToMigrate.stream().map(( vm) -> { org.ovirt.engine.core.common.action.MigrateVmToServerParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmToServerParameters(false, vm.getId(), vds.getId()); parameters.setReason(reason); parameters.setShouldBeLogged(false); return parameters; }).collect(java.util.stream.Collectors.toList()); }
@java.lang.Override public void migrateVM(java.util.List<org.ovirt.engine.core.compat.Guid> initialHosts, org.ovirt.engine.core.compat.Guid vmToMigrate<START_MOD>, org.ovirt.engine.core.common.migration.MigrationReason reason<END_MOD>) { org.ovirt.engine.core.common.action.MigrateVmParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmParameters(false, vmToMigrate<START_MOD>, reason<END_MOD>); parameters.setInitialHosts(new java.util.ArrayList(initialHosts)); backendInternal.runInternalAction(VdcActionType.MigrateVm, parameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); }	@java.lang.Override public void migrateVM(java.util.List<org.ovirt.engine.core.compat.Guid> initialHosts, org.ovirt.engine.core.compat.Guid vmToMigrate, java.lang.String reason) { org.ovirt.engine.core.common.action.MigrateVmParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmParameters(false, vmToMigrate); parameters.setInitialHosts(new java.util.ArrayList(initialHosts)); parameters.setReason(reason); backendInternal.runInternalAction(VdcActionType.MigrateVm, parameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); }
@java.lang.Override public javax.ws.rs.core.Response migrate(org.ovirt.engine.api.model.Action action) { boolean forceMigration = (action.isSetForce()) ? action.isForce() : false; if (!(action.isSetHost())) { return doAction(VdcActionType.MigrateVm, new org.ovirt.engine.core.common.action.MigrateVmParameters(forceMigration, guid, <START_MOD>org.ovirt.engine.core.common.migration.MigrationReason.USER, <END_MOD>getTargetClusterId(action)), action); } else { return doAction(VdcActionType.MigrateVmToServer, new org.ovirt.engine.core.common.action.MigrateVmToServerParameters(forceMigration, guid, getHostId(action), <START_MOD>org.ovirt.engine.core.common.migration.MigrationReason.USER, <END_MOD>getTargetClusterId(action)), action); } }	@java.lang.Override public javax.ws.rs.core.Response migrate(org.ovirt.engine.api.model.Action action) { boolean forceMigration = (action.isSetForce()) ? action.isForce() : false; if (!(action.isSetHost())) { return doAction(VdcActionType.MigrateVm, new org.ovirt.engine.core.common.action.MigrateVmParameters(forceMigration, guid, getTargetClusterId(action)), action); } else { return doAction(VdcActionType.MigrateVmToServer, new org.ovirt.engine.core.common.action.MigrateVmToServerParameters(forceMigration, guid, getHostId(action), getTargetClusterId(action)), action); } }
void migrateVM(java.util.List<org.ovirt.engine.core.compat.Guid> initialHosts, org.ovirt.engine.core.compat.Guid vmToMigrate<START_MOD>, org.ovirt.engine.core.common.migration.MigrationReason reason<END_MOD>);	void migrateVM(java.util.List<org.ovirt.engine.core.compat.Guid> initialHosts, org.ovirt.engine.core.compat.Guid vmToMigrate, java.lang.String reason);
@java.lang.Override public int hashCode() { return java.util.Objects.hash(getVmId(), forceMigrationForNonMigratableVm, targetClusterId<START_MOD>, migrationReason<END_MOD>); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(getVmId(), forceMigrationForNonMigratableVm, targetClusterId, reason); }
protected void migrateVM(final org.ovirt.engine.core.common.businessentities.VM vmToMigrate) { org.ovirt.engine.core.common.action.MigrateVmParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmParameters(false, vmToMigrate.getId()<START_MOD>, org.ovirt.engine.core.common.migration.MigrationReason.AFFINITY_ENFORCEMENT<END_MOD>); backend.runInternalAction(VdcActionType.MigrateVm, parameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); }	protected void migrateVM(final org.ovirt.engine.core.common.businessentities.VM vmToMigrate) { org.ovirt.engine.core.common.action.MigrateVmParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmParameters(false, vmToMigrate.getId()); parameters.setReason(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getMessage(AuditLogType.MIGRATION_REASON_AFFINITY_ENFORCEMENT)); backend.runInternalAction(VdcActionType.MigrateVm, parameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.MigrateVmParameters)) { return false; } org.ovirt.engine.core.common.action.MigrateVmParameters other = ((org.ovirt.engine.core.common.action.MigrateVmParameters) (obj)); return <START_MOD>(<END_MOD>((java.util.Objects.equals(getVmId(), other.getVmId())) && ((forceMigrationForNonMigratableVm) == (other.forceMigrationForNonMigratableVm))) && (java.util.Objects.equals(targetClusterId, other.targetClusterId))<START_MOD>) && (java.util.Objects.equals(migrationReason, other.migrationReason))<END_MOD>; }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.MigrateVmParameters)) { return false; } org.ovirt.engine.core.common.action.MigrateVmParameters other = ((org.ovirt.engine.core.common.action.MigrateVmParameters) (obj)); return (((java.util.Objects.equals(getVmId(), other.getVmId())) && ((forceMigrationForNonMigratableVm) == (other.forceMigrationForNonMigratableVm))) && (java.util.Objects.equals(targetClusterId, other.targetClusterId))) && (java.util.Objects.equals(reason, other.reason)); }
protected boolean migrateVm(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.job.ExecutionContext parentContext) { org.ovirt.engine.core.common.action.<START_MOD>MigrateVmParameters<END_MOD> parameters = new org.ovirt.engine.core.common.action.<START_MOD>MigrateVmParameters<END_MOD>(<START_MOD>false, <END_MOD>vm.getId()); parameters.<START_MOD>setReason<END_MOD>(new org.ovirt.engine.core.common.migration.MigrationReason(MigrationReason.Type.HOST_IN_MAINTENANCE)); return runInternalAction(VdcActionType.<START_MOD>MigrateVm<END_MOD>, parameters, createMigrateVmContext(parentContext, vm)).getSucceeded(); }	protected boolean migrateVm(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.job.ExecutionContext parentContext) { org.ovirt.engine.core.common.action.MigrateVmParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmParameters(false, vm.getId()); parameters.setReason(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getMessage(AuditLogType.MIGRATION_REASON_HOST_IN_MAINTENANCE)); return runInternalAction(VdcActionType.MigrateVm, parameters, createMigrateVmContext(parentContext, vm)).getSucceeded(); }
int getOverheadMb(org.ovirt.engine.core.common.businessentities.VM vm);	int getOverheadInMb(org.ovirt.engine.core.common.businessentities.VM vm);
int getEnsuredOverhead(org.ovirt.engine.core.common.businessentities.VM vm);	int getStaticOverheadInMb(org.ovirt.engine.core.common.businessentities.VM vm);
int getPossibleOverhead(org.ovirt.engine.core.common.businessentities.VM vm);	int getPossibleOverheadInMb(org.ovirt.engine.core.common.businessentities.VM vm);
@java.lang.Override public int getEnsuredOverhead(org.ovirt.engine.core.common.businessentities.VM vm) { int vmRam = vm.getVmMemSizeMb(); org.ovirt.engine.core.common.businessentities.ArchitectureType architecture = vm.getClusterArch().getFamily(); boolean onPpc = architecture == (org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc); int fixedOverhead = (onPpc) ? 100 : 64; int pageTable; if (onPpc) { int maxRam = vmRam; if (org.ovirt.engine.core.common.FeatureSupported.hotPlugMemory(vm.getCompatibilityVersion(), vm.getClusterArch())) { maxRam = org.ovirt.engine.core.common.utils.VmCommonUtils.maxMemorySizeWithHotplugInMb(vm); } int powerOf2 = java.lang.Integer.highestOneBit(maxRam); pageTable = (maxRam > powerOf2 ? powerOf2 * 2 : powerOf2) / 64; } else { pageTable = vmRam / 512; } return pageTable + fixedOverhead; }	@java.lang.Override public int getStaticOverheadInMb(org.ovirt.engine.core.common.businessentities.VM vm) { int vmRam = vm.getVmMemSizeMb(); org.ovirt.engine.core.common.businessentities.ArchitectureType architecture = vm.getClusterArch().getFamily(); boolean onPpc = architecture == (org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc); int fixedOverhead = (onPpc) ? 100 : 64; int pageTable; if (onPpc) { int maxRam = vmRam; if (org.ovirt.engine.core.common.FeatureSupported.hotPlugMemory(vm.getCompatibilityVersion(), vm.getClusterArch())) { maxRam = org.ovirt.engine.core.common.utils.VmCommonUtils.maxMemorySizeWithHotplugInMb(vm); } int powerOf2 = java.lang.Integer.highestOneBit(maxRam); pageTable = (maxRam > powerOf2 ? powerOf2 * 2 : powerOf2) / 64; } else { pageTable = vmRam / 512; } return pageTable + fixedOverhead; }
@java.lang.Override public int getPossibleOverhead(org.ovirt.engine.core.common.businessentities.VM vm) { int videoRam = org.ovirt.engine.core.bll.utils.VideoDeviceSettings.totalVideoRAMSizeMb(vm); int cpuOverhead = 8 * (vm.getNumOfCpus(true)); int iothreadsOverhead = 8 * (vm.getNumOfIoThreads()); return (videoRam + cpuOverhead) + iothreadsOverhead; }	@java.lang.Override public int getPossibleOverheadInMb(org.ovirt.engine.core.common.businessentities.VM vm) { int videoRam = org.ovirt.engine.core.bll.utils.VideoDeviceSettings.totalVideoRAMSizeMb(vm); int cpuOverhead = 8 * (vm.getNumOfCpus(true)); int iothreadsOverhead = 8 * (vm.getNumOfIoThreads()); return (videoRam + cpuOverhead) + iothreadsOverhead; }
@java.lang.Override public int getOverheadMb(org.ovirt.engine.core.common.businessentities.VM vm) { return (getEnsuredOverhead(vm)) + (getPossibleOverhead(vm)); }	@java.lang.Override public int getOverheadInMb(org.ovirt.engine.core.common.businessentities.VM vm) { return (getStaticOverheadInMb(vm)) + (getPossibleOverheadInMb(vm)); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.utils.GuidUtils.getGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelper snapshotVmConfigurationHelper = new org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelper(); org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createMemoryDisk(vm, org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getStorageDomainStaticDao().get(guids.get(0)).getStorageType()<START_MOD>, vmOverheadCalculator<END_MOD>); memoryDisk.setId(guids.get(2)); memoryDisk.setImageId(guids.get(3)); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setStoragePoolId(guids.get(1)); memoryDisk.setCreationDate(snapshot.getCreationDate()); return memoryDisk; }	private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.utils.GuidUtils.getGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createMemoryDisk(vm, storageDomainStaticDao.get(guids.get(0)).getStorageType(), vmOverheadCalculator); memoryDisk.setId(guids.get(2)); memoryDisk.setImageId(guids.get(3)); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setStoragePoolId(guids.get(1)); memoryDisk.setCreationDate(snapshot.getCreationDate()); return memoryDisk; }
@java.lang.Override public int getTotalRequiredMemoryInMb(org.ovirt.engine.core.common.businessentities.VM vm) { int vmRam = vm.getVmMemSizeMb(); return vmRam + (getOverheadMb(vm)); }	@java.lang.Override public int getTotalRequiredMemoryInMb(org.ovirt.engine.core.common.businessentities.VM vm) { int vmRam = vm.getVmMemSizeMb(); return vmRam + (getOverheadInMb(vm)); }
private void addSwitchTypeIfSpecified(java.util.Map<java.lang.String, java.lang.Object> resultMap) { if ((this.switchType) != null) { resultMap.put(VdsProperties.SWITCH_KEY, this.switchType.getOptionValue()); } }	private void addSwitchTypeIfSpecified(java.util.Map<java.lang.String, java.lang.Object> resultMap) { org.ovirt.engine.core.common.network.SwitchType switchType = org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.getParameters().getClusterSwitchType(); if (switchType != null) { resultMap.put(VdsProperties.SWITCH_KEY, switchType.getOptionValue()); } }
public org.ovirt.engine.core.common.businessentities.VmRngDevice generateRngDevice() { org.ovirt.engine.core.common.businessentities.VmRngDevice dev = new org.ovirt.engine.core.common.businessentities.VmRngDevice(); dev.setBytes(rngBytes.getEntity()); dev.setPeriod(rngPeriod.getEntity()); dev.setSource((java.lang.Boolean.TRUE.equals(<START_MOD>rngSourceUrandom<END_MOD>.getEntity()) ? VmRngDevice.Source.RANDOM : VmRngDevice.Source.HWRNG)); return dev; }	public org.ovirt.engine.core.common.businessentities.VmRngDevice generateRngDevice() { org.ovirt.engine.core.common.businessentities.VmRngDevice dev = new org.ovirt.engine.core.common.businessentities.VmRngDevice(); dev.setBytes(rngBytes.getEntity()); dev.setPeriod(rngPeriod.getEntity()); dev.setSource((java.lang.Boolean.TRUE.equals(rngSourceUrandom.getEntity()) ? getBehavior().getUrandomOrRandomRngSource() : VmRngDevice.Source.HWRNG)); return dev; }
public static final boolean checkKeyFingerprint(java.lang.String expected, final java.security.PublicKey key, java.lang.StringBuilder actual) throws java.lang.Exception { java.lang.String digest = expected.split(":", 2)[0]; try { if ((digest.length()) == 2) { digest = org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.MD5; expected = (digest + ":") + expected; } } catch (java.lang.NumberFormatException e) { } if (!(digest.startsWith("MD"))) { digest = digest.replaceFirst("([0-9])", "-$1"); } java.lang.String fingerprint = org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.getKeyFingerprint(key, digest); boolean result; if (org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.MD5.equals(digest)) { result = expected.equalsIgnoreCase(fingerprint); } else { result = expected.equals(fingerprint); } if (actual != null) { actual.setLength(0); actual.append(fingerprint); } return result; }	public static final boolean checkKeyFingerprint(java.lang.String expected, final java.security.PublicKey key, java.lang.StringBuilder actual) throws java.lang.Exception { java.lang.String digest = expected.split(":", 2)[0]; try { if ((digest.length()) == 2) { java.lang.Integer.parseInt(digest, 16); digest = org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.MD5; expected = (digest + ":") + expected; } } catch (java.lang.NumberFormatException e) { } if (!(digest.startsWith("MD"))) { digest = digest.replaceFirst("([0-9])", "-$1"); } java.lang.String fingerprint = org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.getKeyFingerprint(key, digest); boolean result; if (org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.MD5.equals(digest)) { result = expected.equalsIgnoreCase(fingerprint); } else { result = expected.equals(fingerprint); } if (actual != null) { actual.setLength(0); actual.append(fingerprint); } return result; }
@org.junit.Test public void testDifferentClusters() { org.ovirt.engine.core.common.businessentities.VmBase vmBase = createVmBase(cpuProfile1.getId()); vmBase.setClusterId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.ValidationResult res = cpuProfileHelper.setAndValidateCpuProfile(vmBase, org.ovirt.engine.core.bll.profiles.CpuProfileHelperTest.USER_1_ID); assertThat(res, failsWith(EngineMessage.ACTION_TYPE_CPU_PROFILE_NOT_MATCH_CLUSTER)); }	@org.junit.Test public void testDifferentClusters() { org.ovirt.engine.core.common.businessentities.VmBase vmBase = createVmBase(cpuProfile1.getId()); vmBase.setVdsGroupId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.ValidationResult res = cpuProfileHelper.setAndValidateCpuProfile(vmBase, org.ovirt.engine.core.compat.Version.getLast(), org.ovirt.engine.core.bll.profiles.CpuProfileHelperTest.USER_1_ID); assertThat(res, failsWith(EngineMessage.ACTION_TYPE_CPU_PROFILE_NOT_MATCH_CLUSTER)); }
private org.ovirt.engine.core.common.businessentities.VmBase createVmBase(org.ovirt.engine.core.compat.Guid cpuProfileId) { org.ovirt.engine.core.common.businessentities.VmBase vmBase = new org.ovirt.engine.core.common.businessentities.VmBase(); vmBase.setId(org.ovirt.engine.core.compat.Guid.newGuid()); vmBase.setClusterId(org.ovirt.engine.core.bll.profiles.CpuProfileHelperTest.CLUSTER_ID); vmBase.setCpuProfileId(cpuProfileId); return vmBase; }	private org.ovirt.engine.core.common.businessentities.VmBase createVmBase(org.ovirt.engine.core.compat.Guid cpuProfileId) { org.ovirt.engine.core.common.businessentities.VmBase vmBase = new org.ovirt.engine.core.common.businessentities.VmBase(); vmBase.setId(org.ovirt.engine.core.compat.Guid.newGuid()); vmBase.setVdsGroupId(org.ovirt.engine.core.bll.profiles.CpuProfileHelperTest.CLUSTER_ID); vmBase.setCpuProfileId(cpuProfileId); return vmBase; }
@org.junit.Test public void testNonExistingCpuProfile() { org.ovirt.engine.core.common.businessentities.VmBase vmBase = createVmBase(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.ValidationResult res = cpuProfileHelper.setAndValidateCpuProfile(vmBase, org.ovirt.engine.core.bll.profiles.CpuProfileHelperTest.USER_1_ID); assertThat(res, failsWith(EngineMessage.ACTION_TYPE_FAILED_CPU_PROFILE_NOT_FOUND)); }	@org.junit.Test public void testNonExistingCpuProfile() { org.ovirt.engine.core.common.businessentities.VmBase vmBase = createVmBase(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.ValidationResult res = cpuProfileHelper.setAndValidateCpuProfile(vmBase, org.ovirt.engine.core.compat.Version.getLast(), org.ovirt.engine.core.bll.profiles.CpuProfileHelperTest.USER_1_ID); assertThat(res, failsWith(EngineMessage.ACTION_TYPE_FAILED_CPU_PROFILE_NOT_FOUND)); }
@org.junit.Test public void testNullClusterId() { org.ovirt.engine.core.common.businessentities.VmBase vmBase = createVmBase(cpuProfile1.getId()); vmBase.setClusterId(null); org.ovirt.engine.core.bll.ValidationResult res = cpuProfileHelper.setAndValidateCpuProfile(vmBase, org.ovirt.engine.core.bll.profiles.CpuProfileHelperTest.USER_1_ID); assertThat(res, failsWith(EngineMessage.ACTION_TYPE_CPU_PROFILE_CLUSTER_NOT_PROVIDED)); }	@org.junit.Test public void testNullClusterId() { org.ovirt.engine.core.common.businessentities.VmBase vmBase = createVmBase(cpuProfile1.getId()); vmBase.setVdsGroupId(null); org.ovirt.engine.core.bll.ValidationResult res = cpuProfileHelper.setAndValidateCpuProfile(vmBase, org.ovirt.engine.core.compat.Version.getLast(), org.ovirt.engine.core.bll.profiles.CpuProfileHelperTest.USER_1_ID); assertThat(res, failsWith(EngineMessage.ACTION_TYPE_CPU_PROFILE_CLUSTER_NOT_PROVIDED)); }
@org.junit.Test public void testNoPermission() { org.ovirt.engine.core.common.businessentities.VmBase vmBase = createVmBase(cpuProfile2.getId()); org.ovirt.engine.core.bll.ValidationResult res = cpuProfileHelper.setAndValidateCpuProfile(vmBase, org.ovirt.engine.core.bll.profiles.CpuProfileHelperTest.USER_1_ID); assertThat(res, failsWith(EngineMessage.ACTION_TYPE_NO_PERMISSION_TO_ASSIGN_CPU_PROFILE)); }	@org.junit.Test public void testNoPermission() { org.ovirt.engine.core.common.businessentities.VmBase vmBase = createVmBase(cpuProfile2.getId()); org.ovirt.engine.core.bll.ValidationResult res = cpuProfileHelper.setAndValidateCpuProfile(vmBase, org.ovirt.engine.core.compat.Version.getLast(), org.ovirt.engine.core.bll.profiles.CpuProfileHelperTest.USER_1_ID); assertThat(res, failsWith(EngineMessage.ACTION_TYPE_NO_PERMISSION_TO_ASSIGN_CPU_PROFILE)); }
@org.junit.Test public void testBlockUseHostCpuWithPPCArch() { org.ovirt.engine.core.bll.AddVmCommand<org.ovirt.engine.core.common.action.AddVmParameters> cmd = setupCanAddPpcTest(); cmd.setEffectiveCompatibilityVersion(Version.v4_0); doReturn(java.util.Collections.emptyList()).when(cmd).getImagesToCheckDestinationStorageDomains(); org.ovirt.engine.core.common.businessentities.Cluster cluster = createPpcCluster(); when(clusterDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(cluster); doReturn(true).when(cmd).areParametersLegal(java.util.Collections.emptyList()); doReturn(true).when(cmd).validateAddVmCommand(); doReturn(true).when(cmd).isVmNameValidLength(any(org.ovirt.engine.core.common.businessentities.VM.class)); when(osRepository.getArchitectureFromOS(any(java.lang.Integer.class))).thenReturn(ArchitectureType.ppc64); cmd.getParameters().getVm().setClusterArch(ArchitectureType.ppc64); cmd.getParameters().getVm().setUseHostCpuFlags(true); cmd.getParameters().getVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST); cmd.getParameters().getVm().setClusterId(cluster.getId()); cmd.getParameters().getVm().setVmOs(OsType.Other.ordinal()); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.USE_HOST_CPU_REQUESTED_ON_UNSUPPORTED_ARCH); }	@org.junit.Test public void testBlockUseHostCpuWithPPCArch() { setupCanAddPpcTest(); cmd.setEffectiveCompatibilityVersion(Version.v4_0); doReturn(java.util.Collections.emptyList()).when(cmd).getImagesToCheckDestinationStorageDomains(); initPpcCluster(); when(clusterDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(cluster); doReturn(true).when(cmd).areParametersLegal(java.util.Collections.emptyList()); doReturn(true).when(cmd).validateAddVmCommand(); doReturn(true).when(cmd).isVmNameValidLength(any(org.ovirt.engine.core.common.businessentities.VM.class)); when(osRepository.getArchitectureFromOS(any(java.lang.Integer.class))).thenReturn(ArchitectureType.ppc64); cmd.getParameters().getVm().setClusterArch(ArchitectureType.ppc64); cmd.getParameters().getVm().setUseHostCpuFlags(true); cmd.getParameters().getVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST); cmd.getParameters().getVm().setClusterId(cluster.getId()); cmd.getParameters().getVm().setVmOs(OsType.Other.ordinal()); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.USE_HOST_CPU_REQUESTED_ON_UNSUPPORTED_ARCH); }
@org.junit.Test public void create10GBVmWith11GbAvailableAndA5GbBuffer() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.AddVmCommandTest.createVm(); org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters> cmd = createVmFromTemplateCommand(vm); mockStorageDomainDaoGetForStoragePool(); mockClusterDaoReturnCluster(); mockVmTemplateDaoReturnVmTemplate(); org.ovirt.engine.core.bll.AddVmCommandTest.mockVerifyAddVM(cmd); mockMaxPciSlots(); mockOsRepository(); mockOsRepositoryGraphics(0, Version.v4_0, new org.ovirt.engine.core.common.utils.Pair(org.ovirt.engine.core.common.businessentities.GraphicsType.SPICE, org.ovirt.engine.core.common.businessentities.DisplayType.qxl)); mockGraphicsDevices(vm.getId()); mockStorageDomainDaoGetAllStoragesForPool(org.ovirt.engine.core.bll.AddVmCommandTest.AVAILABLE_SPACE_GB); mockUninterestingMethods(cmd); mockGetAllSnapshots(cmd); doReturn(createStoragePool()).when(cmd).getStoragePool(); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN); }	@java.lang.Override protected org.ovirt.engine.core.bll.AddVmCommand<org.ovirt.engine.core.common.action.AddVmParameters> createCommand() { initVM(); return new org.ovirt.engine.core.bll.AddVmCommand(new org.ovirt.engine.core.common.action.AddVmParameters(vm), null); }
<START_MOD>public<END_MOD> void <START_MOD>refresh<END_MOD>() { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.clear(); java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> list = org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils<START_MOD>.getVdcOptionDao().getAll(); list.forEach(this<END_MOD>::updateOption); }	public void refresh() { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.clear(); java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> list = org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.getVdcOptionDao().getAll(); for (org.ovirt.engine.core.common.businessentities.VdcOption option : list) { try { if ((!(org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.containsKey(option.getOptionName()))) || (org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.isReloadable(option.getOptionName()))) { updateOption(option); } } catch (java.lang.NoSuchFieldException e) { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.log.error("Not refreshing field '{}': does not exist in class {}.", option.getOptionName(), org.ovirt.engine.core.common.config.ConfigValues.class.getSimpleName()); } } }
static java.lang.String detail(java.lang.Throwable t) { java.lang.String detail = null; if (org.ovirt.engine.api.restapi.resource.BaseBackendResource.log.isDebugEnabled()) { java.io.StringWriter sw = new java.io.StringWriter(); detail = sw.toString(<START_MOD>); org.ovirt.engine.api.restapi.resource.BaseBackendResource.log.debug("", t<END_MOD>); } else { detail = t.getMessage(); } return detail; }	static java.lang.String detail(java.lang.Throwable t) { java.lang.String detail = null; if (org.ovirt.engine.api.restapi.resource.BaseBackendResource.log.isDebugEnabled()) { java.io.StringWriter sw = new java.io.StringWriter(); t.printStackTrace(new java.io.PrintWriter(sw, true)); detail = sw.toString(); } else { detail = t.getMessage(); } return detail; }
public org.ovirt.engine.core.bll.ValidationResult isDiskAttachedToAnyVm() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = getVmDao().getVmsListForDisk(disk.getId(), true); if (!(vms.isEmpty())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_ATTACHED_TO_VMS, org.ovirt.engine.core.bll.validator.storage.DiskValidator.DISK_NAME_VARIABLE, disk.getDiskAlias()); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }	public org.ovirt.engine.core.bll.ValidationResult isDiskAttachedToAnyVm() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = getVmDao().getVmsListForDisk(disk.getId(), true); if (!(vms.isEmpty())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_ATTACHED_TO_VMS, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.storage.DiskValidator.DISK_NAME_VARIABLE, disk.getDiskAlias()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.storage.DiskValidator.VM_LIST, vms.stream().map(VM::getName).collect(java.util.stream.Collectors.joining(",")))); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
protected boolean validate() { org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getParameters().getImageId(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(imageId))) { return validateUploadToImage(imageId); } else { return validateCreateImage(); } }	@java.lang.Override protected boolean validate() { org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getParameters().getImageId(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(imageId))) { return validateUploadToImage(imageId); } else { return validateCreateImage(); } }
protected org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator getDiskImagesValidator(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImageInList = new java.util.ArrayList<>(); diskImageInList.add(diskImage); return new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(diskImageInList); }	protected org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator getDiskImagesValidator(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) { return new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(diskImage); }
@java.lang.Override protected void executeCommand() { log.info( ImageTransfer entity for command '{}' org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getParameters().getUploadSize()); <START_MOD>getImageTransferDao()<END_MOD>.save(entity); log.info( {} image getUploadType()); <START_MOD>if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getParameters().getImageId())) { <END_MOD>createImage(); <START_MOD>} else { handleImageIsReadyForUpload(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getParameters().getImageId()); } <END_MOD>setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.setSucceeded(true); }	@java.lang.Override protected void executeCommand() { log.info("Creating ImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getParameters().getUploadSize()); imageTransferDao.save(entity); log.info("Creating {} image", getUploadType()); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getParameters().getImageId())) { createImage(); } else { handleImageIsReadyForUpload(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getParameters().getImageId()); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.setSucceeded(true); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.storage.ImageTransfer.class, to = org.ovirt.engine.core.common.businessentities.storage.ImageTransfer.class) public static org.ovirt.engine.core.common.businessentities.storage.ImageTransfer map(org.ovirt.engine.api.model.ImageTransfer model, org.ovirt.engine.core.common.businessentities.storage.ImageTransfer template) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); if (model.isSetId()) { entity.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if (model.isSetHost()) { entity.setVdsId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getHost().getId())); } if (model.isSetImage()) { entity.setDiskId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getImage().getId())); } return entity; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.ImageTransfer.class, to = org.ovirt.engine.api.model.ImageTransfer.class) public static org.ovirt.engine.api.model.ImageTransfer map(org.ovirt.engine.api.model.ImageTransfer model, org.ovirt.engine.core.common.businessentities.storage.ImageTransfer template) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); if (model.isSetId()) { entity.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if ((model.isSetHost()) && (model.getHost().isSetId())) { entity.setVdsId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getHost().getId())); } if ((model.isSetImage()) && (model.getImage().isSetId())) { entity.setDiskId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getImage().getId())); } return entity; }
@org.junit.Test public void testDiskAttachedToAnyVM() { when(vmDao.getVmsListForDisk(org.mockito.Matchers.any(org.ovirt.engine.core.compat.Guid.class), anyBoolean())).thenReturn(java.util.Collections.emptyList()); assertThat(validator.isDiskAttachedToAnyVm(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }	@org.junit.Test public void testDiskAttachedToAnyVM() { when(vmDao.getVmsListForDisk(any(org.ovirt.engine.core.compat.Guid.class), anyBoolean())).thenReturn(java.util.Collections.emptyList()); assertThat(validator.isDiskAttachedToAnyVm(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.storage.ImageTransfer.class, to = org.ovirt.engine.core.common.businessentities.storage.ImageTransfer.class) public static org.ovirt.engine.core.common.businessentities.storage.ImageTransfer map(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, org.ovirt.engine.api.model.ImageTransfer template) { org.ovirt.engine.api.model.ImageTransfer model = (template != null) ? template : new org.ovirt.engine.api.model.ImageTransfer(); if ((entity.getId()) != null) { model.setId(entity.getId().toString()); } if ((entity.getVdsId()) != null) { model.setHost(new org.ovirt.engine.api.model.Host()); model.getHost().setId(entity.getVdsId().toString()); } if ((entity.getDiskId()) != null) { model.setImage(new org.ovirt.engine.api.model.Image()); model.getImage().setId(entity.getDiskId().toString()); } if (((entity.getProxyUri()) != null) && ((entity.getImagedTicketId()) != null)) { model.setProxyUrl((((entity.getProxyUri()) + "/") + (entity.getImagedTicketId()))); } if ((entity.getSignedTicket()) != null) { model.setSignedTicket(entity.getSignedTicket()); } if ((entity.getPhase()) != null) { model.setPhase(org.ovirt.engine.api.model.ImageTransferPhase.valueOf(entity.getPhase().name())); } return model; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.ImageTransfer.class, to = org.ovirt.engine.api.model.ImageTransfer.class) public static org.ovirt.engine.api.model.ImageTransfer map(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, org.ovirt.engine.api.model.ImageTransfer template) { org.ovirt.engine.api.model.ImageTransfer model = (template != null) ? template : new org.ovirt.engine.api.model.ImageTransfer(); if ((entity.getId()) != null) { model.setId(entity.getId().toString()); } if ((entity.getVdsId()) != null) { model.setHost(new org.ovirt.engine.api.model.Host()); model.getHost().setId(entity.getVdsId().toString()); } if ((entity.getDiskId()) != null) { model.setImage(new org.ovirt.engine.api.model.Image()); model.getImage().setId(entity.getDiskId().toString()); } if (((entity.getProxyUri()) != null) && ((entity.getImagedTicketId()) != null)) { model.setProxyUrl(entity.getClientURLForTransfer()); } if ((entity.getSignedTicket()) != null) { model.setSignedTicket(entity.getSignedTicket()); } if ((entity.getPhase()) != null) { model.setPhase(org.ovirt.engine.api.restapi.types.ImageTransferMapper.mapPhase(entity.getPhase())); } return model; }
private org.ovirt.engine.core.common.action.UploadImageStatusParameters prepareStatusParams(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase) { org.ovirt.engine.api.model.ImageTransfer imageTransfer = get(); org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(imageTransfer.getId())); updates.setPhase(phase); org.ovirt.engine.core.common.action.UploadImageStatusParameters params = new org.ovirt.engine.core.common.action.UploadImageStatusParameters(); params.setDiskId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(imageTransfer.getImage().getId())); params.setUpdates(updates); return params; }	private org.ovirt.engine.core.common.action.UploadImageStatusParameters prepareStatusParams(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(guid); updates.setPhase(phase); org.ovirt.engine.core.common.action.UploadImageStatusParameters params = new org.ovirt.engine.core.common.action.UploadImageStatusParameters(); params.setUploadImageCommandId(guid); params.setUpdates(updates); return params; }
@java.lang.Override public javax.ws.rs.core.Response finalize(org.ovirt.engine.api.model.Action action) { return performAction(VdcActionType.UploadImageStatus, prepareStatusParams(ImageTransferPhase.FINALIZING_SUCCESS)); }	@java.lang.Override public javax.ws.rs.core.Response doFinalize(org.ovirt.engine.api.model.Action action) { return performAction(VdcActionType.UploadImageStatus, prepareStatusParams(ImageTransferPhase.FINALIZING_SUCCESS)); }
<START_MOD>protected<END_MOD> org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntityPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase) { org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); updates.setPhase(phase); return updateEntity(updates); }	protected org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntityPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); updates.setPhase(phase); return updateEntity(updates); }
public void onFailed() { updateEntityPhase(ImageTransferPhase.FINISHED_FAILURE); log.debug( ImageUpload id {} org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); <START_MOD>getImageTransferDao()<END_MOD>.remove(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.endWithFailure(); log.error( to upload {} (command id '{}') getUploadDescription(), org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); }	public void onFailed() { updateEntityPhase(ImageTransferPhase.FINISHED_FAILURE); log.debug("Removing ImageUpload id {}", org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); imageTransferDao.remove(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.endWithFailure(); log.error("Failed to upload {} (command id '{}')", getUploadDescription(), org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.storage.ImageTransfer> getAllWithQuery(java.lang.String query) { return getJdbcTemplate().query(query, new org.ovirt.engine.core.dao.ImageTransferDaoImpl.ImageUploadRowMapper()); }	@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.storage.ImageTransfer> getAllWithQuery(java.lang.String query) { return getJdbcTemplate().query(query, createEntityRowMapper()); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.disk.GetAllImageTransfersQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getImageTransferDao().getAll()); }	@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.disk.GetAllImageTransfersQuery.getQueryReturnValue().setReturnValue(imageTransferDao.getAll()); }
@java.lang.Override public org.ovirt.engine.api.resource.ImageTransferResource getImageTransferResource(java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendImageTransferResource(id, this)); }	@java.lang.Override public org.ovirt.engine.api.resource.ImageTransferResource getImageTransferResource(java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendImageTransferResource(id)); }
@org.junit.Test public void testDiskAttachedToAnyVMFails() { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM(); when(vmDao.getVmsListForDisk(org.mockito.Matchers.any(org.ovirt.engine.core.compat.Guid.class), anyBoolean())).thenReturn(java.util.Collections.singletonList(vm)); assertThat(validator.isDiskAttachedToAnyVm(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_DISK_ATTACHED_TO_VMS)); }	@org.junit.Test public void testDiskAttachedToAnyVMFails() { org.ovirt.engine.core.common.businessentities.VM vm1 = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM(); org.ovirt.engine.core.common.businessentities.VM vm2 = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM(); vm1.setName("Vm1"); vm2.setName("Vm2"); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = java.util.Arrays.asList(vm1, vm2); when(vmDao.getVmsListForDisk(any(org.ovirt.engine.core.compat.Guid.class), anyBoolean())).thenReturn(vmList); java.lang.String[] expectedReplacements = new java.lang.String[]{ org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(DiskValidator.DISK_NAME_VARIABLE, disk.getDiskAlias()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(DiskValidator.VM_LIST, "Vm1,Vm2") }; assertThat(validator.isDiskAttachedToAnyVm(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_DISK_ATTACHED_TO_VMS, expectedReplacements)); }
@java.lang.Override protected boolean <START_MOD>validateCreateImage<END_MOD>() { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = org.ovirt.engine.core.bll.tasks.CommandHelper.canDoAction(VdcActionType.AddDisk, getAddDiskParameters(), org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand.getContext().clone().getExecutionContext(), true); org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand.getReturnValue().setValidationMessages(returnValue.getValidationMessages()); return returnValue.isValid(); }	@java.lang.Override protected boolean validateCreateImage() { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = org.ovirt.engine.core.bll.tasks.CommandHelper.validate(VdcActionType.AddDisk, getAddDiskParameters(), org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand.getContext().clone()); org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand.getReturnValue().setValidationMessages(returnValue.getValidationMessages()); return returnValue.isValid(); }
protected org.ovirt.engine.core.bll.validator.storage.DiskValidator getDiskValidator(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) { return new org.ovirt.engine.core.bll.validator.storage.DiskValidator(diskImage, org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand.getVmDeviceUtils()); }	protected org.ovirt.engine.core.bll.validator.storage.DiskValidator getDiskValidator(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) { return new org.ovirt.engine.core.bll.validator.storage.DiskValidator(diskImage); }
public void onSucceeded() { updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); log.debug( ImageUpload id {} org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); <START_MOD>getImageTransferDao()<END_MOD>.remove(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.endSuccessfully(); log.info( uploaded {} (command id '{}') getUploadDescription(), org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); }	public void onSucceeded() { updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); log.debug("Removing ImageUpload id {}", org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); imageTransferDao.remove(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.endSuccessfully(); log.info("Successfully uploaded {} (command id '{}')", getUploadDescription(), org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); }
protected java.lang.String getUploadDescription() { <START_MOD>java.lang.String imageAlias = ""; org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getDiskImage(); if ((diskImage != null) && ((diskImage.getDiskAlias()) != null)) { imageAlias = org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getDiskImage().getDiskAlias(); } else if ((org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getParameters().getDiskAlias()) != null) { imageAlias = org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getParameters().getDiskAlias(); } <END_MOD>return java.lang.String.format( '%s' (id '%s') getUploadType(), <START_MOD>imageAlias<END_MOD>, getImageIdNullSafe()); }	protected java.lang.String getUploadDescription() { return java.lang.String.format("%s '%s' (id '%s')", getUploadType(), getImageAlias(), getImageIdNullSafe()); }
<START_MOD>protected<END_MOD> org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntity(org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates) { return updateEntity(updates, <START_MOD>false<END_MOD>); }	protected org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntity(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates) { return updateEntity(updates, false); }
private boolean stopImageTransferSession(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity) { if ((entity.getImagedTicketId()) == null) { log.warn( to stop image transfer session. Ticket does not exist for image '{}' entity.getDiskId()); return false; } org.ovirt.engine.core.compat.Guid resourceId = entity.getImagedTicketId(); org.ovirt.engine.core.common.vdscommands.RemoveImageTicketVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.RemoveImageTicketVDSCommandParameters(entity.getVdsId(), resourceId); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsRetVal; try { vdsRetVal = org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getBackend().getResourceManager().runVdsCommand(VDSCommandType.RemoveImageTicket, parameters); } catch (java.lang.RuntimeException e) { log.error( to stop image transfer session for ticket '{}': {} resourceId.toString(), e); return false; } if (!(vdsRetVal.getSucceeded())) { log.warn( to stop image transfer session for ticket '{}' resourceId.toString()); return false; } log.info( stopped image transfer session for ticket '{}' resourceId.toString()); org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates(); <START_MOD>boolean clearResourceId = true; updateEntity(<END_MOD>updates<START_MOD>, clearResourceId); return <END_MOD>true<START_MOD>; }<END_MOD>	private boolean stopImageTransferSession(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity) { if ((entity.getImagedTicketId()) == null) { log.warn("Failed to stop image transfer session. Ticket does not exist for image '{}'", entity.getDiskId()); return false; } org.ovirt.engine.core.compat.Guid resourceId = entity.getImagedTicketId(); org.ovirt.engine.core.common.vdscommands.RemoveImageTicketVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.RemoveImageTicketVDSCommandParameters(entity.getVdsId(), resourceId); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsRetVal; try { vdsRetVal = org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getBackend().getResourceManager().runVdsCommand(VDSCommandType.RemoveImageTicket, parameters); } catch (java.lang.RuntimeException e) { log.error("Failed to stop image transfer session for ticket '{}': {}", resourceId.toString(), e); return false; } if (!(vdsRetVal.getSucceeded())) { log.warn("Failed to stop image transfer session for ticket '{}'", resourceId.toString()); return false; } log.info("Successfully stopped image transfer session for ticket '{}'", resourceId.toString()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); boolean clearResourceId = true; updateEntity(updates, clearResourceId); return true; }
protected org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntity(org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates, boolean clearResourceId) { return imageTransferUpdater.updateEntity(updates, org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId(), clearResourceId); }	protected org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntity(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates, boolean clearResourceId) { return imageTransferUpdater.updateEntity(updates, org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId(), clearResourceId); }
@org.junit.Test public void testCommandPersistedWithParamUpdates() { org.ovirt.engine.core.common.businessentities.storage.DiskImage readyImage = initReadyImageForUpload(); org.ovirt.engine.core.common.action.UploadDiskImageParameters params = mock(org.ovirt.engine.core.common.action.UploadDiskImageParameters.class); doNothing().when(params).setStorageDomainId(any()); doNothing().when(params).setImageId(any()); doNothing().when(params).setUploadSize(anyLong()); doReturn(params).when(uploadImageCommand).getParameters(); uploadImageCommand.handleImageIsReadyForUpload(readyImage.getImageId()); org.mockito.InOrder inOrder = inOrder(params, uploadImageCommand); inOrder.verify(params).setStorageDomainId(any()); inOrder.verify(uploadImageCommand).persistCommand(any(), anyBoolean()); inOrder = inOrder(params, uploadImageCommand); inOrder.verify(params).setImageId(any()); inOrder.verify(uploadImageCommand).persistCommand(any(), anyBoolean()); inOrder = inOrder(params, uploadImageCommand); inOrder.verify(params).setUploadSize(anyLong()); inOrder.verify(uploadImageCommand).persistCommand(any(), anyBoolean()); }	@org.junit.Test public void testCommandPersistedWithParamUpdates() { org.ovirt.engine.core.common.businessentities.storage.DiskImage readyImage = initReadyImageForUpload(); org.ovirt.engine.core.common.action.UploadDiskImageParameters params = mock(org.ovirt.engine.core.common.action.UploadDiskImageParameters.class); doReturn(params).when(uploadImageCommand).getParameters(); uploadImageCommand.handleImageIsReadyForUpload(readyImage.getImageId()); org.mockito.InOrder inOrder = inOrder(params, uploadImageCommand); inOrder.verify(params).setStorageDomainId(any()); inOrder.verify(uploadImageCommand).persistCommand(any(), anyBoolean()); inOrder = inOrder(params, uploadImageCommand); inOrder.verify(params).setImageId(any()); inOrder.verify(uploadImageCommand).persistCommand(any(), anyBoolean()); inOrder = inOrder(params, uploadImageCommand); inOrder.verify(params).setUploadSize(anyLong()); inOrder.verify(uploadImageCommand).persistCommand(any(), anyBoolean()); }
protected void initCommand() { doNothing().when(uploadImageCommand).createImage(); doNothing().when(uploadImageCommand).persistCommand(any(), anyBoolean()); doNothing().when(uploadImageCommand).lockImage(); doReturn(true).when(uploadImageCommand).startImageTransferSession(); doReturn(null).when(imageTransferUpdater).updateEntity(any(), any(), anyBoolean()); doNothing().when(imageTransferDao).save(any()); doReturn(imageTransferDao).when(uploadImageCommand).getImageTransferDao(); doReturn(diskDao).when(uploadImageCommand).getDiskDao(); doReturn(imageTransferUpdater).when(uploadImageCommand).getImageTransferUpdater(); }	protected void initCommand() { doNothing().when(uploadImageCommand).createImage(); doNothing().when(uploadImageCommand).persistCommand(any(), anyBoolean()); doNothing().when(uploadImageCommand).lockImage(); doReturn(true).when(uploadImageCommand).startImageTransferSession(); doReturn(null).when(imageTransferUpdater).updateEntity(any(), any(), anyBoolean()); }
protected void initializeSuppliedImage() { super.initSuppliedImage(uploadImageCommand); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); doReturn(diskImage).when(diskDao).get(any()); doReturn(diskDao).when(uploadImageCommand).getDiskDao(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImageList = new java.util.ArrayList<>(); diskImageList.add(diskImage); doReturn(diskValidator).when(getCommand()).getDiskValidator(any()); doReturn(diskImagesValidator).when(getCommand()).getDiskImagesValidator(any()); doReturn(ValidationResult.VALID).when(diskValidator).isDiskAttachedToAnyVm(); doReturn(ValidationResult.VALID).when(diskValidator).isDiskExists(); doReturn(ValidationResult.VALID).when(diskImagesValidator).diskImagesNotLocked(); doReturn(ValidationResult.VALID).when(diskImagesValidator).diskImagesNotIllegal(); }	protected void initializeSuppliedImage() { super.initSuppliedImage(uploadImageCommand); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); doReturn(diskImage).when(diskDao).get(any()); doReturn(diskValidator).when(getCommand()).getDiskValidator(any()); doReturn(diskImagesValidator).when(getCommand()).getDiskImagesValidator(any()); doReturn(ValidationResult.VALID).when(diskValidator).isDiskAttachedToAnyVm(); doReturn(ValidationResult.VALID).when(diskValidator).isDiskExists(); doReturn(ValidationResult.VALID).when(diskImagesValidator).diskImagesNotLocked(); doReturn(ValidationResult.VALID).when(diskImagesValidator).diskImagesNotIllegal(); }
@java.lang.Override protected boolean validateUploadToImage(org.ovirt.engine.core.compat.Guid imageId) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand.getDiskDao().get(imageId))); org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = getDiskValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = getDiskImagesValidator(diskImage); return (((validate(diskValidator.isDiskExists())) && (validate(diskValidator.isDiskAttachedToAnyVm()))) && (validate(diskImagesValidator.diskImagesNotIllegal()))) && (validate(diskImagesValidator.diskImagesNotLocked())); }	@java.lang.Override protected boolean validateUploadToImage(org.ovirt.engine.core.compat.Guid imageId) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(imageId))); org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = getDiskValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = getDiskImagesValidator(diskImage); return (((validate(diskValidator.isDiskExists())) && (validate(diskValidator.isDiskAttachedToAnyVm()))) && (validate(diskImagesValidator.diskImagesNotIllegal()))) && (validate(diskImagesValidator.diskImagesNotLocked())); }
@org.junit.Test public void validateCantUploadDiskNotExists() { initializeSuppliedImage(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_EXIST, "")).when(diskValidator).isDiskExists(); assertFailsWithValidateMessage(getCommand(), EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_EXIST); }	@org.junit.Test public void validateCantUploadDiskNotExists() { initializeSuppliedImage(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_EXIST, "")).when(diskValidator).isDiskExists(); getCommand().validate(); org.ovirt.engine.core.bll.ValidateTestUtils.assertValidationMessages("Can't start a transfer for image that doesn't exist.", getCommand(), EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_EXIST); }
@java.lang.Override protected boolean validate() { if (!(validateDiskImage())) { return false; } if (!(validate(new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.repoimage.ExportRepoImageCommand.getStorageDomain()).isDomainExistAndActive()))) { return false; } if (!(getDiskImage().getParentId().equals(Guid.Empty))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISK_CONFIGURATION_NOT_SUPPORTED); } for (org.ovirt.engine.core.common.businessentities.VM vm : org.ovirt.engine.core.bll.storage.repoimage.ExportRepoImageCommand.getVmDao().getVmsListForDisk(getDiskImage().getId(), false)) { if ((vm.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_IS_RUNNING); } } org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(getDiskImage()); if ((!(validate(diskImagesValidator.diskImagesNotIllegal()))) || (!(validate(diskImagesValidator.diskImagesNotLocked())))) { return false; } return true; }	@java.lang.Override protected boolean validate() { if (!(validateDiskImage())) { return false; } if (!(validate(new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.repoimage.ExportRepoImageCommand.getStorageDomain()).isDomainExistAndActive()))) { return false; } if (!(getDiskImage().getParentId().equals(Guid.Empty))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISK_CONFIGURATION_NOT_SUPPORTED); } for (org.ovirt.engine.core.common.businessentities.VM vm : vmDao.getVmsListForDisk(getDiskImage().getId(), false)) { if ((vm.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_IS_RUNNING); } } org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(getDiskImage()); if ((!(validate(diskImagesValidator.diskImagesNotIllegal()))) || (!(validate(diskImagesValidator.diskImagesNotLocked())))) { return false; } return true; }
protected org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntity(org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates, boolean clearResourceId) { return <START_MOD>getImageTransferUpdater()<END_MOD>.updateEntity(updates, org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId(), clearResourceId); }	protected org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntity(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates, boolean clearResourceId) { return imageTransferUpdater.updateEntity(updates, org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId(), clearResourceId); }
public void proceedCommandExecution(org.ovirt.engine.core.compat.Guid childCmdId) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = <START_MOD>getImageTransferDao()<END_MOD>.get(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); if ((entity == null) || ((entity.getPhase()) == null)) { log.error(( Upload status entity corrupt or missing from database +   for image transfer command '{}' org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); setCommandStatus(CommandStatus.FAILED); return; } if ((entity.getDiskId()) != null) { org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.setImage(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getDiskDao().get(entity.getDiskId())))); } long ts = (java.lang.System.currentTimeMillis()) / 1000; if (pauseUploadIfNecessary(entity, ts)) { return; } executeStateHandler(entity, ts, childCmdId); }	public void proceedCommandExecution(org.ovirt.engine.core.compat.Guid childCmdId) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = imageTransferDao.get(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); if ((entity == null) || ((entity.getPhase()) == null)) { log.error(("Image Upload status entity corrupt or missing from database" + " for image transfer command '{}'"), org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); setCommandStatus(CommandStatus.FAILED); return; } if ((entity.getDiskId()) != null) { org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.setImage(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(entity.getDiskId())))); } long ts = (java.lang.System.currentTimeMillis()) / 1000; if (pauseUploadIfNecessary(entity, ts)) { return; } executeStateHandler(entity, ts, childCmdId); }
@org.junit.Test public void validateCantUploadIllegalImage() { initializeSuppliedImage(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISKS_ILLEGAL, "")).when(diskImagesValidator).diskImagesNotIllegal(); assertFailsWithValidateMessage(getCommand(), EngineMessage.ACTION_TYPE_FAILED_DISKS_ILLEGAL); }	@org.junit.Test public void validateCantUploadIllegalImage() { initializeSuppliedImage(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISKS_ILLEGAL, "")).when(diskImagesValidator).diskImagesNotIllegal(); getCommand().validate(); org.ovirt.engine.core.bll.ValidateTestUtils.assertValidationMessages("Can't start a transfer for an illegal image.", getCommand(), EngineMessage.ACTION_TYPE_FAILED_DISKS_ILLEGAL); }
@org.junit.Test public void validateCantUploadLockedImage() { initializeSuppliedImage(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED, "")).when(diskImagesValidator).diskImagesNotLocked(); assertFailsWithValidateMessage(getCommand(), EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED); }	@org.junit.Test public void validateCantUploadLockedImage() { initializeSuppliedImage(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED, "")).when(diskImagesValidator).diskImagesNotLocked(); getCommand().validate(); org.ovirt.engine.core.bll.ValidateTestUtils.assertValidationMessages("Can't start a transfer for a locked image.", getCommand(), EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED); }
@org.junit.Test public void validateCantUploadDiskAttached() { initializeSuppliedImage(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_ATTACHED_TO_VMS, "")).when(diskValidator).isDiskAttachedToAnyVm(); assertFailsWithValidateMessage(getCommand(), EngineMessage.ACTION_TYPE_FAILED_DISK_ATTACHED_TO_VMS); }	@org.junit.Test public void validateCantUploadDiskAttached() { initializeSuppliedImage(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_ATTACHED_TO_VMS, "")).when(diskValidator).isDiskAttachedToAnyVm(); getCommand().validate(); org.ovirt.engine.core.bll.ValidateTestUtils.assertValidationMessages("Can't start a transfer for an image that is attached to any VMs.", getCommand(), EngineMessage.ACTION_TYPE_FAILED_DISK_ATTACHED_TO_VMS); }
@org.junit.Test public void canDisableVirtioScsiFail() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(disk.getId(), vm.getId()); dve.setDiskInterface(DiskInterface.VirtIO_SCSI); disk.setDiskVmElements(java.util.Collections.singletonList(dve)); <START_MOD>when(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDao()).thenReturn(vmNetworkInterfaceDao); <END_MOD>assertThat(validator.canDisableVirtioScsi(java.util.Collections.singletonList(disk)), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.CANNOT_DISABLE_VIRTIO_SCSI_PLUGGED_DISKS)); }	@org.junit.Test public void canDisableVirtioScsiFail() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(disk.getId(), vm.getId()); dve.setDiskInterface(DiskInterface.VirtIO_SCSI); disk.setDiskVmElements(java.util.Collections.singletonList(dve)); assertThat(validator.canDisableVirtioScsi(java.util.Collections.singletonList(disk)), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.CANNOT_DISABLE_VIRTIO_SCSI_PLUGGED_DISKS)); }
public static void addDiskAttachmentDetails(java.lang.String vmId, java.util.List<org.ovirt.engine.api.v3.types.V3Disk> disks) { if (vmId != null) { org.ovirt.engine.api.resource.SystemResource systemResource = org.ovirt.engine.api.restapi.resource.BackendApiResource.getInstance(); org.ovirt.engine.api.resource.VmsResource vmsResource = systemResource.getVmsResource(); org.ovirt.engine.api.resource.VmResource vmResource = vmsResource.getVmResource(vmId); org.ovirt.engine.api.resource.DiskAttachmentsResource attachmentsResource = vmResource.getDiskAttachmentsResource(); for (org.ovirt.engine.api.v3.types.V3Disk disk : disks) { java.lang.String diskId = disk.getId(); if (diskId != null) { org.ovirt.engine.api.resource.DiskAttachmentResource attachmentResource = attachmentsResource.getAttachmentResource(diskId); try { org.ovirt.engine.api.model.DiskAttachment attachment = attachmentResource.get(); if (attachment.isSetBootable()) { disk.setBootable(attachment.isBootable()); } if (attachment.isSetInterface()) { disk.setInterface(attachment.getInterface().toString().toLowerCase()); } if (attachment.isSetLogicalName()) { disk.setLogicalName(attachment.getLogicalName()); } if (attachment.isSetActive()) { disk.setActive(attachment.isActive()); } <START_MOD>if (attachment.isSetUsingScsiReservation()) { disk.setUsesScsiReservation(attachment.isUsingScsiReservation()); } <END_MOD>} catch (javax.ws.rs.WebApplicationException exception) { } } } } }	public static void addDiskAttachmentDetails(java.lang.String vmId, java.util.List<org.ovirt.engine.api.v3.types.V3Disk> disks) { if (vmId != null) { org.ovirt.engine.api.resource.SystemResource systemResource = org.ovirt.engine.api.restapi.resource.BackendApiResource.getInstance(); org.ovirt.engine.api.resource.VmsResource vmsResource = systemResource.getVmsResource(); org.ovirt.engine.api.resource.VmResource vmResource = vmsResource.getVmResource(vmId); org.ovirt.engine.api.resource.DiskAttachmentsResource attachmentsResource = vmResource.getDiskAttachmentsResource(); for (org.ovirt.engine.api.v3.types.V3Disk disk : disks) { java.lang.String diskId = disk.getId(); if (diskId != null) { org.ovirt.engine.api.resource.DiskAttachmentResource attachmentResource = attachmentsResource.getAttachmentResource(diskId); try { org.ovirt.engine.api.model.DiskAttachment attachment = attachmentResource.get(); if (attachment.isSetBootable()) { disk.setBootable(attachment.isBootable()); } if (attachment.isSetInterface()) { disk.setInterface(attachment.getInterface().toString().toLowerCase()); } if (attachment.isSetLogicalName()) { disk.setLogicalName(attachment.getLogicalName()); } if (attachment.isSetActive()) { disk.setActive(attachment.isActive()); } if (attachment.isSetUsesScsiReservation()) { disk.setUsesScsiReservation(attachment.isUsesScsiReservation()); } } catch (javax.ws.rs.WebApplicationException exception) { } } } } }
@org.junit.Test public void testIsUsingScsiReservationValidWhenSgioIsFiltered() { setupForLun(); org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk(ScsiGenericIO.FILTERED); assertThat(lunValidator.isUsingScsiReservationValid(org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM<START_MOD>(), createDiskVmElementUsingScsiReserevation<END_MOD>(), lunDisk1), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_SGIO_IS_FILTERED)); }	@org.junit.Test public void testIsUsingScsiReservationValidWhenSgioIsFiltered() { setupForLun(); org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk(ScsiGenericIO.FILTERED); assertThat(lunValidator.isUsingScsiReservationValid(org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM(), org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskVmElementUsingScsiReserevation(), lunDisk1), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_SGIO_IS_FILTERED)); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DiskAttachment.class, to = org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class) public static org.ovirt.engine.core.common.businessentities.storage.DiskVmElement map(org.ovirt.engine.api.model.DiskAttachment model, org.ovirt.engine.core.common.businessentities.storage.DiskVmElement template) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(); if (model.isSetId()) { entity.setId(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId()), null)); } else { entity.setId(new org.ovirt.engine.core.common.businessentities.VmDeviceId()); } if (model.isSetBootable()) { entity.setBoot(model.isBootable()); } if (model.isSetInterface()) { entity.setDiskInterface(org.ovirt.engine.api.restapi.types.DiskMapper.mapInterface(model.getInterface())); } <START_MOD>if (model.isSetUsingScsiReservation()) { entity.setUsingScsiReservation(model.isUsingScsiReservation()); } <END_MOD>return entity; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DiskAttachment.class, to = org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class) public static org.ovirt.engine.core.common.businessentities.storage.DiskVmElement map(org.ovirt.engine.api.model.DiskAttachment model, org.ovirt.engine.core.common.businessentities.storage.DiskVmElement template) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(); if (model.isSetId()) { entity.setId(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId()), null)); } else { entity.setId(new org.ovirt.engine.core.common.businessentities.VmDeviceId()); } if (model.isSetBootable()) { entity.setBoot(model.isBootable()); } if (model.isSetInterface()) { entity.setDiskInterface(org.ovirt.engine.api.restapi.types.DiskMapper.mapInterface(model.getInterface())); } if (model.isSetUsesScsiReservation()) { entity.setUsingScsiReservation(model.isUsesScsiReservation()); } return entity; }
@org.junit.Before public void setUp() { createVm(); org.ovirt.engine.core.common.action.MigrateVmParameters params = new org.ovirt.engine.core.common.action.MigrateVmParameters(false, vm.getId()); command = spy(new org.ovirt.engine.core.bll.MigrateVmCommand(params, null)); doReturn(vm).when(command).getVm(); }	@org.junit.Before public void setUp() { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setId(vmId); command.setVm(vm); }
@org.junit.Test public void testIsUsingScsiReservationValidWhenAddingFloatingDisk() { setupForLun(); org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk(ScsiGenericIO.UNFILTERED); assertThat(lunValidator.isUsingScsiReservationValid(null<START_MOD>, createDiskVmElementUsingScsiReserevation()<END_MOD>, lunDisk1), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_SCSI_RESERVATION_NOT_VALID_FOR_FLOATING_DISK)); }	@org.junit.Test public void testIsUsingScsiReservationValidWhenAddingFloatingDisk() { setupForLun(); org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk(ScsiGenericIO.UNFILTERED); assertThat(lunValidator.isUsingScsiReservationValid(null, org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskVmElementUsingScsiReserevation(), lunDisk1), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_SCSI_RESERVATION_NOT_VALID_FOR_FLOATING_DISK)); }
@org.junit.Test public void testIscsiLunCanBeAdded() { org.ovirt.engine.core.common.businessentities.storage.LunDisk disk = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createISCSILunDisk(); command.getParameters().setDiskInfo(disk); <START_MOD>org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(); command.getParameters().getDiskVmElement().setUsingScsiReservation(false); <END_MOD>assertTrue( failed for valid iscsi lun command.checkIfLunDiskCanBeAdded(spyDiskValidator(disk))); }	@org.junit.Test public void testIscsiLunCanBeAdded() { org.ovirt.engine.core.common.businessentities.storage.LunDisk disk = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createISCSILunDisk(); command.getParameters().setDiskInfo(disk); command.getParameters().getDiskVmElement().setUsingScsiReservation(false); assertTrue("checkIfLunDiskCanBeAdded() failed for valid iscsi lun", command.checkIfLunDiskCanBeAdded(spyDiskValidator(disk))); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class, to = org.ovirt.engine.api.model.DiskAttachment.class) public static org.ovirt.engine.api.model.DiskAttachment map(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement entity, org.ovirt.engine.api.model.DiskAttachment template) { org.ovirt.engine.api.model.DiskAttachment model = (template != null) ? template : new org.ovirt.engine.api.model.DiskAttachment(); org.ovirt.engine.core.compat.Guid vmId = entity.getVmId(); if (vmId != null) { org.ovirt.engine.api.model.Vm vm = new org.ovirt.engine.api.model.Vm(); vm.setId(vmId.toString()); model.setVm(vm); } org.ovirt.engine.core.compat.Guid diskId = entity.getDiskId(); if (diskId != null) { org.ovirt.engine.api.model.Disk disk = new org.ovirt.engine.api.model.Disk(); disk.setId(diskId.toString()); model.setDisk(disk); } model.setId(entity.getDiskId().toString()); model.setBootable(entity.isBoot()); model.setInterface(org.ovirt.engine.api.restapi.types.DiskMapper.mapInterface(entity.getDiskInterface())); model.setActive(entity.isPlugged()); model.setLogicalName(entity.getLogicalName()); <START_MOD>model.setUsingScsiReservation(entity.isUsingScsiReservation()); <END_MOD>return model; }	@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class, to = org.ovirt.engine.api.model.DiskAttachment.class) public static org.ovirt.engine.api.model.DiskAttachment map(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement entity, org.ovirt.engine.api.model.DiskAttachment template) { org.ovirt.engine.api.model.DiskAttachment model = (template != null) ? template : new org.ovirt.engine.api.model.DiskAttachment(); org.ovirt.engine.core.compat.Guid vmId = entity.getVmId(); if (vmId != null) { org.ovirt.engine.api.model.Vm vm = new org.ovirt.engine.api.model.Vm(); vm.setId(vmId.toString()); model.setVm(vm); } org.ovirt.engine.core.compat.Guid diskId = entity.getDiskId(); if (diskId != null) { org.ovirt.engine.api.model.Disk disk = new org.ovirt.engine.api.model.Disk(); disk.setId(diskId.toString()); model.setDisk(disk); } model.setId(entity.getDiskId().toString()); model.setBootable(entity.isBoot()); model.setInterface(org.ovirt.engine.api.restapi.types.DiskMapper.mapInterface(entity.getDiskInterface())); model.setActive(entity.isPlugged()); model.setLogicalName(entity.getLogicalName()); model.setUsesScsiReservation(entity.isUsingScsiReservation()); return model; }
private org.ovirt.engine.core.common.businessentities.storage.DiskVmElement createDiskVmElementUsingScsiReserevation() { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(); dve.setUsingScsiReservation(true); return dve; }	private static org.ovirt.engine.core.common.businessentities.storage.DiskVmElement createDiskVmElementUsingScsiReserevation() { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(); dve.setUsingScsiReservation(true); return dve; }
@org.junit.Test public void testIsUsingScsiReservationValidWhenSgioIsUnFiltered() { setupForLun(); org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk(ScsiGenericIO.UNFILTERED); assertThat(lunValidator.isUsingScsiReservationValid(org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM(), <START_MOD>createDiskVmElementUsingScsiReserevation(), <END_MOD>lunDisk1), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }	@org.junit.Test public void testIsUsingScsiReservationValidWhenSgioIsUnFiltered() { setupForLun(); org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk(ScsiGenericIO.UNFILTERED); assertThat(lunValidator.isUsingScsiReservationValid(org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM(), org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskVmElementUsingScsiReserevation(), lunDisk1), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
private static org.ovirt.engine.core.common.action.AddDiskParameters createParameters() { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(null, org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.vmId); dve.setDiskInterface(DiskInterface.IDE); <START_MOD>dve.setUsingScsiReservation(true); <END_MOD>return new org.ovirt.engine.core.common.action.AddDiskParameters(dve, image); }	private static org.ovirt.engine.core.common.action.AddDiskParameters createParameters() { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(null, org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.vmId); dve.setDiskInterface(DiskInterface.IDE); return new org.ovirt.engine.core.common.action.AddDiskParameters(dve, image); }
@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storages) { if ((storages != null) && ((storages.size()) > 0)) { java.lang.String storageName = storages.get(0).getStorageName(); onFinish(context, false, storageModel, org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().createOperationFailedDcGuideMsg(storageName)); } else { saveNewPosixStorage(); } }	@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> storages = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>) (returnValue)); if ((storages != null) && ((storages.size()) > 0)) { java.lang.String storageName = storages.get(0).getStorageName(); onFinish(context, false, storageModel, org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().createOperationFailedDcGuideMsg(storageName)); } else { saveNewPosixStorage(); } }
private void savePosixStorage(final org.ovirt.engine.ui.uicompat.TaskContext context) { this.context = context; org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (getWindow())); boolean isNew = (model.getStorage()) == null; storageModel = model.getCurrentStorageItem(); org.ovirt.engine.ui.uicommonweb.models.storage.PosixStorageModel posixModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.PosixStorageModel) (storageModel)); path = posixModel.getPath().getEntity(); storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); storageDomain.setStorageType((isNew ? storageModel.getType() : storageDomain.getStorageType())); storageDomain.setStorageDomainType((isNew ? storageModel.getRole() : storageDomain.getStorageDomainType())); storageDomain.setStorageName(model.getName().getEntity()); storageDomain.setStorageFormat(model.getFormat().getSelectedItem()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getStorageDomainsByConnection(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.uicommonweb.models.datacenters.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain>>() { @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storages) { if ((storages != null) && ((storages.size()) > 0)) { java.lang.String storageName = storages.get(0).getStorageName(); onFinish(context, false, storageModel, org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().createOperationFailedDcGuideMsg(storageName)); } else { saveNewPosixStorage(); } } }), null, path); }	private void savePosixStorage(final org.ovirt.engine.ui.uicompat.TaskContext context) { this.context = context; org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (getWindow())); boolean isNew = (model.getStorage()) == null; storageModel = model.getCurrentStorageItem(); org.ovirt.engine.ui.uicommonweb.models.storage.PosixStorageModel posixModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.PosixStorageModel) (storageModel)); path = posixModel.getPath().getEntity(); storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); storageDomain.setStorageType((isNew ? storageModel.getType() : storageDomain.getStorageType())); storageDomain.setStorageDomainType((isNew ? storageModel.getRole() : storageDomain.getStorageDomainType())); storageDomain.setStorageName(model.getName().getEntity()); storageDomain.setStorageFormat(model.getFormat().getSelectedItem()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getStorageDomainsByConnection(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> storages = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>) (returnValue)); if ((storages != null) && ((storages.size()) > 0)) { java.lang.String storageName = storages.get(0).getStorageName(); onFinish(context, false, storageModel, org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().createOperationFailedDcGuideMsg(storageName)); } else { saveNewPosixStorage(); } } }), null, path); }
private void move() { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = ((java.util.ArrayList) (getSelectedItems())); if (disks == null) { return; } if ((getWindow()) != null) { return; } org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.models.vms.MoveDiskModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.MoveDiskModel(); setWindow(model); <START_MOD>model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().moveDisksTitle()); model.setHelpTag(HelpTag.move_disk); model.setHashName("move_disk"); model.setIsSourceStorageDomainNameAvailable<END_MOD>(true); model.<START_MOD>setEntity(this); model.init(disks); model.startProgress(<END_MOD>); }	private void move() { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = ((java.util.ArrayList) (getSelectedItems())); if (disks == null) { return; } if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.MoveDiskModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.MoveDiskModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().moveDisksTitle()); model.setHelpTag(HelpTag.move_disk); model.setHashName("move_disk"); model.setIsSourceStorageDomainNameAvailable(true); model.setEntity(this); model.init(disks); model.startProgress(); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.UserProfile existingProfile = org.ovirt.engine.core.bll.AddUserProfileCommand.getUserProfile(); if (existingProfile != null) { executeCommandUpdateSSHPublicKey(existingProfile); } else { <START_MOD>if ((dbUserDao.get(org.ovirt.engine.core.bll.AddUserProfileCommand.getUserId())) == null) { dbUserDao.save(org.ovirt.engine.core.bll.AddUserProfileCommand.getCurrentUser()); } <END_MOD>org.ovirt.engine.core.common.businessentities.UserProfile profile = org.ovirt.engine.core.bll.AddUserProfileCommand.getParameters().getUserProfile(); profile.setId(org.ovirt.engine.core.compat.Guid.newGuid()); profile.setUserId(org.ovirt.engine.core.bll.AddUserProfileCommand.getUserId()); if (!(org.apache.commons.lang.StringUtils.isEmpty(profile.getSshPublicKey()))) { profile.setSshPublicKeyId(org.ovirt.engine.core.compat.Guid.newGuid()); } userProfileDao.save(profile); org.ovirt.engine.core.bll.AddUserProfileCommand.setSucceeded(true); } }	@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.UserProfile existingProfile = org.ovirt.engine.core.bll.AddUserProfileCommand.getUserProfile(); if (existingProfile != null) { executeCommandUpdateSSHPublicKey(existingProfile); } else { org.ovirt.engine.core.common.businessentities.UserProfile profile = org.ovirt.engine.core.bll.AddUserProfileCommand.getParameters().getUserProfile(); profile.setId(org.ovirt.engine.core.compat.Guid.newGuid()); profile.setUserId(org.ovirt.engine.core.bll.AddUserProfileCommand.getUserId()); if (!(org.apache.commons.lang.StringUtils.isEmpty(profile.getSshPublicKey()))) { profile.setSshPublicKeyId(org.ovirt.engine.core.compat.Guid.newGuid()); } userProfileDao.save(profile); org.ovirt.engine.core.bll.AddUserProfileCommand.setSucceeded(true); } }
private java.lang.String getConstraint() { java.lang.StringBuilder buffer = new java.lang.StringBuilder(); buffer.append( type= buffer.append(ProviderType.OPENSTACK_NETWORK<START_MOD>.name()); buffer.append( or type= buffer.append(ProviderType.EXTERNAL_NETWORK<END_MOD>.name()); java.lang.String query = org.ovirt.engine.api.common.util.QueryHelper.getConstraint(httpHeaders, uriInfo, null, modelType, false); if (org.apache.commons.lang.StringUtils.isNotBlank(query)) { buffer.append( AND ( buffer.append(query); buffer.append(")"); } return buffer.toString(); }	private java.lang.String getConstraint(java.lang.String providerType) { java.lang.StringBuilder buffer = new java.lang.StringBuilder(); buffer.append("Providers: type="); buffer.append(providerType); java.lang.String query = org.ovirt.engine.api.restapi.util.QueryHelper.getConstraint(httpHeaders, uriInfo, null, modelType, false); if (org.apache.commons.lang.StringUtils.isNotBlank(query)) { buffer.append(" AND ("); buffer.append(query); buffer.append(")"); } return buffer.toString(); }
private java.util.List<org.ovirt.engine.core.common.businessentities.Provider> getBackendCollection() { if (isFiltered()) { return getBackendCollection(VdcQueryType.GetAllProviders, new org.ovirt.engine.core.common.queries.GetAllProvidersParameters(org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_NETWORK<START_MOD>, org.ovirt.engine.core.common.businessentities.ProviderType.EXTERNAL_NETWORK<END_MOD>)); } else { return getBackendCollection(SearchType.Provider, getConstraint()); } }	private java.util.List<org.ovirt.engine.core.common.businessentities.Provider> getBackendCollection() { if (isFiltered()) { return getBackendCollection(VdcQueryType.GetAllProviders, new org.ovirt.engine.core.common.queries.GetAllProvidersParameters(org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_NETWORK, org.ovirt.engine.core.common.businessentities.ProviderType.EXTERNAL_NETWORK)); } else { java.util.List<org.ovirt.engine.core.common.businessentities.Provider> openstackCollection = getBackendCollection(SearchType.Provider, getConstraint(ProviderType.OPENSTACK_NETWORK.name())); java.util.List<org.ovirt.engine.core.common.businessentities.Provider> externalCollection = getBackendCollection(SearchType.Provider, getConstraint(ProviderType.EXTERNAL_NETWORK.name())); openstackCollection.addAll(externalCollection); return openstackCollection; } }
private void applyNextRunConfiguration() { org.ovirt.engine.core.common.businessentities.Snapshot runSnap = snapshotDao.get(org.ovirt.engine.core.bll.ProcessDownVmCommand.getVmId(), SnapshotType.NEXT_RUN); if (runSnap != null)<START_MOD> { org.ovirt.engine.core.bll.ProcessDownVmCommand.log.debug( to apply NEXT_RUN snapshot for VM '{}' org.ovirt.engine.core.bll.ProcessDownVmCommand.getVmId()); org.ovirt.engine.core.utils.lock.EngineLock updateVmLock = createUpdateVmLock(); if (lockManager.acquireLock(updateVmLock).getFirst()) { try<END_MOD> { snapshotDao.remove(runSnap.getId()); java.util.Date originalCreationDate = org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm().getVmCreationDate(); snapshotsManager.updateVmFromConfiguration(org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm(), runSnap.getVmConfiguration()); org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm().setVmCreationDate(originalCreationDate); org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, createUpdateVmParameters()<START_MOD>, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(updateVmLock)<END_MOD>); if (((result.getActionReturnValue()) != null) && (result.getActionReturnValue().equals(VdcActionType.UpdateVmVersion))) { templateVersionChanged = true; } } <START_MOD>finally { lockManager.releaseLock(updateVmLock); } } else { org.ovirt.engine.core.bll.ProcessDownVmCommand.log.warn( not acquire lock for UpdateVmCommand to apply Next Run Config of VM '{}' org.ovirt.engine.core.bll.ProcessDownVmCommand.getVmId()); } } }<END_MOD>	private void applyNextRunConfiguration() { org.ovirt.engine.core.common.businessentities.Snapshot runSnap = snapshotDao.get(org.ovirt.engine.core.bll.ProcessDownVmCommand.getVmId(), SnapshotType.NEXT_RUN); if (runSnap != null) { org.ovirt.engine.core.bll.ProcessDownVmCommand.log.debug("Attempt to apply NEXT_RUN snapshot for VM '{}'", org.ovirt.engine.core.bll.ProcessDownVmCommand.getVmId()); org.ovirt.engine.core.utils.lock.EngineLock updateVmLock = createUpdateVmLock(); if (lockManager.acquireLock(updateVmLock).getFirst()) { snapshotDao.remove(runSnap.getId()); java.util.Date originalCreationDate = org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm().getVmCreationDate(); snapshotsManager.updateVmFromConfiguration(org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm(), runSnap.getVmConfiguration()); org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm().setVmCreationDate(originalCreationDate); org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, createUpdateVmParameters(), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(updateVmLock)); if (((result.getActionReturnValue()) != null) && (result.getActionReturnValue().equals(VdcActionType.UpdateVmVersion))) { templateVersionChanged = true; } } else { org.ovirt.engine.core.bll.ProcessDownVmCommand.log.warn("Could not acquire lock for UpdateVmCommand to apply Next Run Config of VM '{}'", org.ovirt.engine.core.bll.ProcessDownVmCommand.getVmId()); } } }
private com.google.gwt.safehtml.shared.SafeHtml createBondTooltipMessage(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel, org.ovirt.engine.core.common.businessentities.network.InterfaceStatus interfaceStatus) { org.ovirt.engine.core.common.businessentities.network.Bond bond = ((org.ovirt.engine.core.common.businessentities.network.Bond) (lineModel.getInterface())); java.lang.StringBuilder bondProperties = new java.lang.StringBuilder(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondStatus(interfaceStatus.toString())); boolean isBond4 = BondMode.BOND4.equals(org.ovirt.engine.core.common.businessentities.network.BondMode.parseBondMode(bond.getBondOptions())); if ((InterfaceStatus.UP.equals(interfaceStatus)) && isBond4) { bondProperties.append("\n").append(createActiveBondTooltipMessage(bond, lineModel)); } <START_MOD>if (((bond.getActiveSlave()) != null) && ((bond.getActiveSlave().length()) > 0)) { bondProperties.append("\n"); bondProperties.append(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondActiveSlave(bond.getActiveSlave())); } <END_MOD>return new com.google.gwt.safehtml.shared.SafeHtmlBuilder().appendEscapedLines(bondProperties.toString()).toSafeHtml(); }	private com.google.gwt.safehtml.shared.SafeHtml createBondTooltipMessage(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel, org.ovirt.engine.core.common.businessentities.network.InterfaceStatus interfaceStatus) { org.ovirt.engine.core.common.businessentities.network.Bond bond = ((org.ovirt.engine.core.common.businessentities.network.Bond) (lineModel.getInterface())); java.lang.StringBuilder bondProperties = new java.lang.StringBuilder(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondStatus(interfaceStatus.toString())); boolean isBond4 = BondMode.BOND4.equals(org.ovirt.engine.core.common.businessentities.network.BondMode.parseBondMode(bond.getBondOptions())); if ((InterfaceStatus.UP.equals(interfaceStatus)) && isBond4) { bondProperties.append("\n").append(createActiveBondTooltipMessage(bond, lineModel)); } if (((bond.getActiveSlave()) != null) && ((bond.getActiveSlave().length()) > 0)) { bondProperties.append("\n").append(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondActiveSlave(bond.getActiveSlave())); } return new com.google.gwt.safehtml.shared.SafeHtmlBuilder().appendEscapedLines(bondProperties.toString()).toSafeHtml(); }
private void filter() { java.lang.String[] ids = this.getParsedId(); this.filteredId = new java.util.ArrayList<>(); java.<START_MOD>util<END_MOD>.<START_MOD>Arrays.asList(ids).stream().filter((<END_MOD> id) <START_MOD>-><END_MOD> !(org.ovirt.vdsm.jsonrpc.client.events.ALL.equals(id)))<START_MOD>.forEach((<END_MOD> <START_MOD>id) -><END_MOD> this.filteredId.add(id)<START_MOD>)<END_MOD>; }	private void filter() { java.lang.String[] ids = this.getParsedId(); this.filteredId = java.util.Arrays.asList(ids).stream().filter(( id) -> !(org.ovirt.vdsm.jsonrpc.client.events.ALL.equals(id))).collect(java.util.stream.Collectors.toList()); }
@java.lang.Override protected void executeQueryCommand() { <START_MOD>java.util.List<<END_MOD>org.ovirt.engine.core.<START_MOD>common<END_MOD>.<START_MOD>businessentities<END_MOD>.<START_MOD>VM> allRunningOnOrMigratingToVds = <END_MOD>org.ovirt.engine.core.bll.GetVmsRunningOnOrMigratingToVdsQuery.getDbFacade().getVmDao().getAllRunningOnOrMigratingToVds(org.ovirt.engine.core.bll.GetVmsRunningOnOrMigratingToVdsQuery.getParameters().getId())<START_MOD>; if (allRunningOnOrMigratingToVds != null) { allRunningOnOrMigratingToVds.forEach(VmHandler::updateVmStatistics<END_MOD>); }<START_MOD> org.ovirt.engine.core.bll.GetVmsRunningOnOrMigratingToVdsQuery.getQueryReturnValue().setReturnValue(allRunningOnOrMigratingToVds); }<END_MOD>	@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> allRunningOnOrMigratingToVds = org.ovirt.engine.core.bll.GetVmsRunningOnOrMigratingToVdsQuery.getDbFacade().getVmDao().getAllRunningOnOrMigratingToVds(org.ovirt.engine.core.bll.GetVmsRunningOnOrMigratingToVdsQuery.getParameters().getId()); updateStatistics(allRunningOnOrMigratingToVds); org.ovirt.engine.core.bll.GetVmsRunningOnOrMigratingToVdsQuery.getQueryReturnValue().setReturnValue(allRunningOnOrMigratingToVds); }
public int getRunningVmsCount() { return hostMap.values().stream().map(( host) -> host.getRunningVMs().size()).reduce(( x, y) -> x + y).get(); }	public int getRunningVmsCount() { return hostMap.values().stream().map(( host) -> host.getRunningVMs().size()).reduce(( x, y) -> x + y).orElse(0); }
private static java.lang.String readFile(java.lang.String path) throws java.io.IOException { <START_MOD>return<END_MOD> java.nio.file.Files.<START_MOD>lines<END_MOD>(java.nio.file.Paths.get(path), java.nio.charset.Charset.forName("UTF-8"))<START_MOD>.collect(java.util.stream.Collectors.joining(java.lang.System.getProperty("line.separator")))<END_MOD>; }	private static java.lang.String readFile(java.lang.String path) throws java.io.IOException { java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (java.lang.String line : java.nio.file.Files.readAllLines(java.nio.file.Paths.get(path), java.nio.charset.StandardCharsets.UTF_8)) { sb.append(line); } return sb.toString(); }
public synchronized void updateDataCenter(org.ovirt.vdsmfake.domain.DataCenter dataCenter) {<START_MOD> try { storeObject(dataCenter); } catch (java.lang.RuntimeException e) { org.ovirt.vdsmfake.domain.VdsmManager.log.error( to create new dataCenter return; }<END_MOD> if (!(dataCenterMap.containsKey(dataCenter.getId()))) { dataCenterMap.put(dataCenter.getId(), dataCenter); } org.ovirt.vdsmfake.domain.VdsmManager.log.info( center {} stored dataCenter.getId()); }	public void updateDataCenter(org.ovirt.vdsmfake.domain.DataCenter dataCenter) { try { storeObject(dataCenter); } catch (java.lang.Exception e) { org.ovirt.vdsmfake.domain.VdsmManager.log.error("failed to store object {}", e.getStackTrace()); } dataCenterMap.put(dataCenter.getId(), dataCenter); org.ovirt.vdsmfake.domain.VdsmManager.log.info("Data center {} restored", dataCenter.getId()); }
public synchronized org.ovirt.vdsmfake.domain.DataCenter getDataCenterById(java.lang.String id) { org.ovirt.vdsmfake.domain.DataCenter dataCenter = null; if (dataCenterMap.containsKey(id)) { return dataCenterMap.get(id); }<START_MOD> try {<END_MOD> dataCenter = ((org.ovirt.vdsmfake.domain.DataCenter) (loadObject(org.ovirt.vdsmfake.domain.DataCenter.class, id))); if (dataCenter == null) { dataCenter = new org.ovirt.vdsmfake.domain.DataCenter(); dataCenter.setId(id); <START_MOD>updateDataCenter(dataCenter); <END_MOD>} else { org.ovirt.vdsmfake.domain.VdsmManager.log.info( center restored from file, id: {} id); } <START_MOD>} catch (java.lang.RuntimeException e) { org.ovirt.vdsmfake.domain.VdsmManager.log.error( to load dataCenter object return dataCenter; } <END_MOD>dataCenterMap.put(id, dataCenter); return dataCenter; }	public org.ovirt.vdsmfake.domain.DataCenter getDataCenterById(java.lang.String id) { org.ovirt.vdsmfake.domain.DataCenter dataCenter = null; if (dataCenterMap.containsKey(id)) { return dataCenterMap.get(id); } dataCenter = ((org.ovirt.vdsmfake.domain.DataCenter) (loadObject(org.ovirt.vdsmfake.domain.DataCenter.class, id))); if (dataCenter == null) { dataCenter = reInitializeDataCenter(id); } else { dataCenterMap.put(id, dataCenter); } return dataCenter; }
public static void store(org.ovirt.vdsmfake.domain.BaseObject baseObject, java.io.File f) { <START_MOD>if ((baseObject.getName().contains("?")) && (baseObject instanceof org.ovirt.vdsmfake.domain.DataCenter)) { baseObject.setName(baseObject.getId()); } <END_MOD>java.io.ObjectOutputStream oos = null; try { oos = new java.io.ObjectOutputStream(new java.io.FileOutputStream(f)); oos.writeObject(baseObject); } catch (java.lang.Exception e) { org.ovirt.vdsmfake.PersistUtils.log.error( save object e); throw new java.lang.RuntimeException( save object e); } finally { org.apache.commons.io.IOUtils.closeQuietly(oos); baseObject.setLastUpdate(f.lastModified()); } }	public static void store(org.ovirt.vdsmfake.domain.BaseObject baseObject, java.io.File f) { if ((baseObject instanceof org.ovirt.vdsmfake.domain.DataCenter) && (baseObject.getName().contains("?"))) { baseObject.setName(baseObject.getId()); } java.io.ObjectOutputStream oos = null; try { oos = new java.io.ObjectOutputStream(new java.io.FileOutputStream(f)); oos.writeObject(baseObject); } catch (java.lang.Exception e) { org.ovirt.vdsmfake.PersistUtils.log.error("Cannot save object", e); throw new java.lang.RuntimeException("Cannot save object", e); } finally { org.apache.commons.io.IOUtils.closeQuietly(oos); baseObject.setLastUpdate(f.lastModified()); } }
@java.lang.<START_MOD>Override protected void initQuery(org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQuery<org.ovirt.engine.core.common.queries.IdQueryParameters> query)<END_MOD> { <START_MOD>super.initQuery(query); <END_MOD>when(<START_MOD>query.getParameters()<END_MOD>.getId()).thenReturn(org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQueryTest.<START_MOD>DC_ID<END_MOD>); when(mockNetworkPredicate.test(mockExternalNetwork)).thenReturn(false); when(mockNetworkPredicate.test(mockManagementNetworkCandidate)).thenReturn(true); when(mockNetworkDao.getAllForDataCenter(org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQueryTest.DC_ID, <START_MOD>getUser()<END_MOD>.<START_MOD>getId()<END_MOD>, true)).thenReturn(dcNetworks); }	@java.lang.Override protected void initQuery(org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQuery<org.ovirt.engine.core.common.queries.IdQueryParameters> query) { super.initQuery(query); when(query.getParameters().getId()).thenReturn(org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQueryTest.DC_ID); when(mockNetworkPredicate.test(mockExternalNetwork)).thenReturn(false); when(mockNetworkPredicate.test(mockManagementNetworkCandidate)).thenReturn(true); when(mockNetworkDao.getAllForDataCenter(org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQueryTest.DC_ID)).thenReturn(dcNetworks); }
@java.lang.Override protected void executeQueryCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> allDcNetworks = <START_MOD>networkDao<END_MOD>.getAllForDataCenter(org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQuery.getParameters().getId(), org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQuery.getUserID(), org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQuery.getParameters().isFiltered()); final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> managementNetworkCandidates = allDcNetworks.stream().filter(<START_MOD>managementNetworkCandidatePredicate<END_MOD>).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQuery.getQueryReturnValue().setReturnValue(managementNetworkCandidates); }	@java.lang.Override protected void executeQueryCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> allDcNetworks = networkDao.getAllForDataCenter(org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQuery.getParameters().getId()); final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> managementNetworkCandidates = allDcNetworks.stream().filter(managementNetworkCandidatePredicate).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQuery.getQueryReturnValue().setReturnValue(managementNetworkCandidates); }
public static <T extends java.lang.Object> T get(java.lang.Class<T> clazz) { return <START_MOD>javax<END_MOD>.<START_MOD>enterprise<END_MOD>.<START_MOD>inject<END_MOD>.<START_MOD>spi<END_MOD>.<START_MOD>CDI<END_MOD>.<START_MOD>current()<END_MOD>.<START_MOD>select<END_MOD>(clazz<START_MOD>, null).get(<END_MOD>); }	public static <T extends java.lang.Object> T get(java.lang.Class<T> clazz) { return javax.enterprise.inject.spi.CDI.current().select(clazz, org.ovirt.engine.core.di.Injector.DefaultLiteral.INSTANCE).get(); }
@java.lang.Override public <U extends T> javax.enterprise.inject.Instance<U> select(java.lang.Class<U> aClass, java.lang.annotation.Annotation... annotations) { return new org.ovirt.engine.core.bll.InjectorRule.SimpleInstanceIdGenerator<U>(((U) (org.ovirt.engine.core.bll.InjectorRule.beansCache.get(aClass.getName())))); }	@java.lang.Override public <U extends T> javax.enterprise.inject.Instance<U> select(java.lang.Class<U> aClass, java.lang.annotation.Annotation... annotations) { return new org.ovirt.engine.core.di.InjectorRule.SimpleInstanceIdGenerator<U>(((U) (org.ovirt.engine.core.di.InjectorRule.beansCache.get(aClass.getName())))); }
public <T> void bind(java.lang.Class<T> pureClsType, T instance) { <START_MOD>org<END_MOD>.<START_MOD>ovirt.engine.core.bll.InjectorRule.beansCache.put<END_MOD>(pureClsType<START_MOD>.getName(<END_MOD>)<START_MOD>, <END_MOD>instance); }	public <T> void bind(java.lang.Class<T> pureClsType, T instance) { org.ovirt.engine.core.di.InjectorRule.beansCache.put(pureClsType.getName(), instance); }
@java.lang.Override public javax.enterprise.inject.spi.BeanManager getBeanManager() { return null; }	@java.lang.Override public javax.enterprise.inject.spi.BeanManager getBeanManager() { return mock(javax.enterprise.inject.spi.BeanManager.class, org.ovirt.engine.core.di.RETURNS_DEEP_STUBS); }
public java.lang.String getMetadataDevice() { return getStorageStaticData().getMetadataDevice(); }	public java.lang.String getFirstMetadataDevice() { return getStorageStaticData().getFirstMetadataDevice(); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getStorageDomainStaticDao(); dynamicDao = dbFacade.getStorageDomainDynamicDao(); diskImageDao = dbFacade.getDiskImageDao(); imageDao = dbFacade.getImageDao(); existingDomain = dao.get(new org.ovirt.engine.core.compat.Guid("72e3a666-89e1-4005-a7ca-f7548004a9ab")); newStaticDomain = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); newStaticDomain.setStorageName("NewStorageDomain"); newStaticDomain.setStorage("fDMzhE-wx3s-zo3q-Qcxd-T0li-yoYU-QvVePl"); newStaticDomain.setStorageFormat(StorageFormatType.V1); newStaticDomain.setWipeAfterDelete(true); newStaticDomain.setWarningLowSpaceIndicator(3); newStaticDomain.setCriticalSpaceActionBlocker(9); <START_MOD>newStaticDomain.setMetadataDevice(FixturesTool.LUN_ID2); <END_MOD>}	@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getStorageDomainStaticDao(); dynamicDao = dbFacade.getStorageDomainDynamicDao(); diskImageDao = dbFacade.getDiskImageDao(); imageDao = dbFacade.getImageDao(); existingDomain = dao.get(new org.ovirt.engine.core.compat.Guid("72e3a666-89e1-4005-a7ca-f7548004a9ab")); newStaticDomain = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); newStaticDomain.setStorageName("NewStorageDomain"); newStaticDomain.setStorage("fDMzhE-wx3s-zo3q-Qcxd-T0li-yoYU-QvVePl"); newStaticDomain.setStorageFormat(StorageFormatType.V1); newStaticDomain.setWipeAfterDelete(true); newStaticDomain.setWarningLowSpaceIndicator(3); newStaticDomain.setCriticalSpaceActionBlocker(9); newStaticDomain.setFirstMetadataDevice(FixturesTool.LUN_ID2); }
public void setMetadataDevice(java.lang.String metadataDevice) { getStorageStaticData().setMetadataDevice(metadataDevice); }	public void setFirstMetadataDevice(java.lang.String firstMetadataDevice) { getStorageStaticData().setFirstMetadataDevice(firstMetadataDevice); }
@org.junit.Test public void testUpdate() { existingDomain.setStorageName("UpdatedName"); existingDomain.setWipeAfterDelete(true); existingDomain.setWarningLowSpaceIndicator(4); existingDomain.setCriticalSpaceActionBlocker(8<START_MOD>); existingDomain.setMetadataDevice(FixturesTool.LUN_ID1<END_MOD>); dao.update(existingDomain); org.ovirt.engine.core.common.businessentities.StorageDomainStatic after = dao.get(existingDomain.getId()); assertEquals(after, existingDomain); }	@org.junit.Test public void testUpdate() { existingDomain.setStorageName("UpdatedName"); existingDomain.setWipeAfterDelete(true); existingDomain.setWarningLowSpaceIndicator(4); existingDomain.setCriticalSpaceActionBlocker(8); existingDomain.setFirstMetadataDevice(FixturesTool.LUN_ID1); dao.update(existingDomain); org.ovirt.engine.core.common.businessentities.StorageDomainStatic after = dao.get(existingDomain.getId()); assertEquals(after, existingDomain); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.StorageDomainStatic)) { return false; } org.ovirt.engine.core.common.businessentities.StorageDomainStatic other = ((org.ovirt.engine.core.common.businessentities.StorageDomainStatic) (obj)); return ((((((((((((<START_MOD>(<END_MOD>java.util.Objects.equals(id, other.id)) && ((autoRecoverable) == (other.autoRecoverable))) && (java.util.Objects.equals(connection, other.connection))) && (java.util.Objects.equals(name, other.name))) && (java.util.Objects.equals(storage, other.storage))) && ((storageFormat) == (other.storageFormat))) && ((storagePoolType) == (other.storagePoolType))) && ((storageType) == (other.storageType))) && ((sanState) == (other.sanState))) && (java.util.Objects.equals(wipeAfterDelete, other.wipeAfterDelete))) && (java.util.Objects.equals(<START_MOD>metadataDevice, other.metadataDevice))) && (java.util.Objects.equals(<END_MOD>description, other.description))) && (java.util.Objects.equals(warningLowSpaceIndicator, other.warningLowSpaceIndicator))) && (java.util.Objects.equals(criticalSpaceActionBlocker, other.criticalSpaceActionBlocker)); }	@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.StorageDomainStatic)) { return false; } org.ovirt.engine.core.common.businessentities.StorageDomainStatic other = ((org.ovirt.engine.core.common.businessentities.StorageDomainStatic) (obj)); return (((((((((((((java.util.Objects.equals(id, other.id)) && ((autoRecoverable) == (other.autoRecoverable))) && (java.util.Objects.equals(connection, other.connection))) && (java.util.Objects.equals(name, other.name))) && (java.util.Objects.equals(storage, other.storage))) && ((storageFormat) == (other.storageFormat))) && ((storagePoolType) == (other.storagePoolType))) && ((storageType) == (other.storageType))) && ((sanState) == (other.sanState))) && (java.util.Objects.equals(wipeAfterDelete, other.wipeAfterDelete))) && (java.util.Objects.equals(firstMetadataDevice, other.firstMetadataDevice))) && (java.util.Objects.equals(description, other.description))) && (java.util.Objects.equals(warningLowSpaceIndicator, other.warningLowSpaceIndicator))) && (java.util.Objects.equals(criticalSpaceActionBlocker, other.criticalSpaceActionBlocker)); }
public void setMetadataDevice(java.lang.String metadataDevice) { this.metadataDevice = metadataDevice; }	public void setFirstMetadataDevice(java.lang.String firstMetadataDevice) { this.firstMetadataDevice = firstMetadataDevice; }
public java.lang.String getMetadataDevice() { return metadataDevice; }	public java.lang.String getFirstMetadataDevice() { return firstMetadataDevice; }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, autoRecoverable, connection, name, storage, storageFormat, storagePoolType, storageType, description, sanState, wipeAfterDelete, <START_MOD>metadataDevice, <END_MOD>warningLowSpaceIndicator, criticalSpaceActionBlocker); }	@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, autoRecoverable, connection, name, storage, storageFormat, storagePoolType, storageType, description, sanState, wipeAfterDelete, firstMetadataDevice, warningLowSpaceIndicator, criticalSpaceActionBlocker); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.StorageDomainStatic domain) { return getCustomMapSqlParameterSource().addValue("id", domain.getId()).addValue("storage", domain.getStorage()).addValue("storage_name", domain.getStorageName()).addValue("storage_description", domain.getDescription()).addValue("storage_comment", domain.getComment()).addValue("storage_type", domain.getStorageType()).addValue("storage_domain_type", domain.getStorageDomainType()).addValue("storage_domain_format_type", domain.getStorageFormat()).addValue("last_time_used_as_master", domain.getLastTimeUsedAsMaster()).addValue("wipe_after_delete", domain.getWipeAfterDelete()).addValue(<START_MOD>"metadata_device", domain.getMetadataDevice()).addValue(<END_MOD>"warning_low_space_indicator", domain.getWarningLowSpaceIndicator()).addValue("critical_space_action_blocker", domain.getCriticalSpaceActionBlocker()); }	@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.StorageDomainStatic domain) { return getCustomMapSqlParameterSource().addValue("id", domain.getId()).addValue("storage", domain.getStorage()).addValue("storage_name", domain.getStorageName()).addValue("storage_description", domain.getDescription()).addValue("storage_comment", domain.getComment()).addValue("storage_type", domain.getStorageType()).addValue("storage_domain_type", domain.getStorageDomainType()).addValue("storage_domain_format_type", domain.getStorageFormat()).addValue("last_time_used_as_master", domain.getLastTimeUsedAsMaster()).addValue("wipe_after_delete", domain.getWipeAfterDelete()).addValue("first_metadata_device", domain.getFirstMetadataDevice()).addValue("warning_low_space_indicator", domain.getWarningLowSpaceIndicator()).addValue("critical_space_action_blocker", domain.getCriticalSpaceActionBlocker()); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.StorageDomainStatic domain) { return getCustomMapSqlParameterSource().addValue("id", domain.getId()).addValue("storage", domain.getStorage()).addValue("storage_name", domain.getStorageName()).addValue("storage_description", domain.getDescription()).addValue("storage_comment", domain.getComment()).addValue("storage_type", domain.getStorageType()).addValue("storage_domain_type", domain.getStorageDomainType()).addValue("storage_domain_format_type", domain.getStorageFormat()).addValue("last_time_used_as_master", domain.getLastTimeUsedAsMaster()).addValue("wipe_after_delete", domain.getWipeAfterDelete()).addValue("metadata_device", domain.getMetadataDevice()).addValue(<START_MOD>"vg_metadata_device", domain.getVgMetadataDevice()).addValue(<END_MOD>"warning_low_space_indicator", domain.getWarningLowSpaceIndicator()).addValue("critical_space_action_blocker", domain.getCriticalSpaceActionBlocker()); }	@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.StorageDomainStatic domain) { return getCustomMapSqlParameterSource().addValue("id", domain.getId()).addValue("storage", domain.getStorage()).addValue("storage_name", domain.getStorageName()).addValue("storage_description", domain.getDescription()).addValue("storage_comment", domain.getComment()).addValue("storage_type", domain.getStorageType()).addValue("storage_domain_type", domain.getStorageDomainType()).addValue("storage_domain_format_type", domain.getStorageFormat()).addValue("last_time_used_as_master", domain.getLastTimeUsedAsMaster()).addValue("wipe_after_delete", domain.getWipeAfterDelete()).addValue("first_metadata_device", domain.getFirstMetadataDevice()).addValue("vg_metadata_device", domain.getVgMetadataDevice()).addValue("warning_low_space_indicator", domain.getWarningLowSpaceIndicator()).addValue("critical_space_action_blocker", domain.getCriticalSpaceActionBlocker()); }
@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { processVolumeStatus(result, rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.GlusterVolumeEngineDao.STATUS)); }	@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { processVolumeStatus(result, rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.GlusterVolumeEngineDao.STATUS), rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.GlusterVolumeEngineDao.BRICKS_NOT_UP)); }
private org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus processVolumeStatus(org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus summary, java.lang.String status) { summary.addCount(); summary.addStatus(org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.valueOf(status).name().toLowerCase()); return summary; }	private org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus processVolumeStatus(org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus summary, java.lang.String status, int bricksNotUp) { summary.addCount(); org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus volumeStatus = org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.valueOf(status); if (((org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP) == volumeStatus) && (bricksNotUp > 0)) { summary.addStatus(GlusterStatus.WARNING.name().toLowerCase()); } else { summary.addStatus(volumeStatus.name().toLowerCase()); } return summary; }
public org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getVolumeInventoryStatus() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.GlusterVolumeEngineDao.GLUSTER_VOLUME_INVENTORY, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { processVolumeStatus(result, rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.GlusterVolumeEngineDao.STATUS)); } }); return result; }	public org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getVolumeInventoryStatus() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { final org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.GlusterVolumeEngineDao.GLUSTER_VOLUME_INVENTORY, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { processVolumeStatus(result, rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.GlusterVolumeEngineDao.STATUS), rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.GlusterVolumeEngineDao.BRICKS_NOT_UP)); } }); return result; }
public static org.ovirt.engine.ui.frontend.server.dashboard.Inventory fakeInventory(java.util.Random random) { org.ovirt.engine.ui.frontend.server.dashboard.Inventory result = new org.ovirt.engine.ui.frontend.server.dashboard.Inventory(); result.setCluster(new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus()); result.getCluster().setTotalCount(25); result.setDc(new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus()); org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator.createFakeValuesUpDownError(result.getDc(), 22, random); result.setHost(new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus()); org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator.createFakeValuesUpDownError(result.getHost(), 125, random); result.setStorage(new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus()); org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator.createFakeValuesUpDownError(result.getStorage(), 10, random); result.setVm(new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus()); org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator.createFakeValuesUpDownError(result.getVm(), 253, random); result.setEvent(new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus()); org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator.createFakeValuesAlertErrorWarning(result.getEvent(), 169, random); <START_MOD>result.setGlusterVolume(new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus()); org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator.createFakeValuesUpDownError(result.getGlusterVolume(), 95, random); <END_MOD>return result; }	public static org.ovirt.engine.ui.frontend.server.dashboard.Inventory fakeInventory(java.util.Random random) { org.ovirt.engine.ui.frontend.server.dashboard.Inventory result = new org.ovirt.engine.ui.frontend.server.dashboard.Inventory(); result.setCluster(new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus()); result.getCluster().setTotalCount(25); result.setDc(new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus()); org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator.createFakeValuesUpDownError(result.getDc(), 22, random); result.setHost(new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus()); org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator.createFakeValuesUpDownError(result.getHost(), 125, random); result.setStorage(new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus()); org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator.createFakeValuesUpDownError(result.getStorage(), 10, random); result.setVm(new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus()); org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator.createFakeValuesUpDownError(result.getVm(), 253, random); result.setEvent(new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus()); org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator.createFakeValuesAlertErrorWarning(result.getEvent(), 169, random); result.setVolume(new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus()); org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator.createFakeValuesUpDownError(result.getVolume(), 95, random); return result; }
private org.ovirt.engine.ui.frontend.server.dashboard.Inventory lookupInventory() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.Inventory inventory = new org.ovirt.engine.ui.frontend.server.dashboard.Inventory(); inventory.setDc(org.ovirt.engine.ui.frontend.server.dashboard.InventoryHelper.getDcInventoryStatus(engineDataSource)); inventory.setCluster(org.ovirt.engine.ui.frontend.server.dashboard.InventoryHelper.getClusterInventoryStatus(engineDataSource)); inventory.setHost(org.ovirt.engine.ui.frontend.server.dashboard.InventoryHelper.getHostInventoryStatus(engineDataSource)); inventory.setStorage(org.ovirt.engine.ui.frontend.server.dashboard.InventoryHelper.getStorageInventoryStatus(engineDataSource)); inventory.setVm(org.ovirt.engine.ui.frontend.server.dashboard.InventoryHelper.getVmInventorySummary(engineDataSource)); inventory.<START_MOD>setGlusterVolume(org.ovirt.engine.ui.frontend.server.dashboard.InventoryHelper.getGlusterVolumeInventorySummary(engineDataSource)); inventory.<END_MOD>setEvent(org.ovirt.engine.ui.frontend.server.dashboard.EventHelper.getEventStatus(engineDataSource)); return inventory; }	private org.ovirt.engine.ui.frontend.server.dashboard.Inventory lookupInventory() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.Inventory inventory = new org.ovirt.engine.ui.frontend.server.dashboard.Inventory(); inventory.setDc(org.ovirt.engine.ui.frontend.server.dashboard.InventoryHelper.getDcInventoryStatus(engineDataSource)); inventory.setCluster(org.ovirt.engine.ui.frontend.server.dashboard.InventoryHelper.getClusterInventoryStatus(engineDataSource)); inventory.setHost(org.ovirt.engine.ui.frontend.server.dashboard.InventoryHelper.getHostInventoryStatus(engineDataSource)); inventory.setStorage(org.ovirt.engine.ui.frontend.server.dashboard.InventoryHelper.getStorageInventoryStatus(engineDataSource)); inventory.setVm(org.ovirt.engine.ui.frontend.server.dashboard.InventoryHelper.getVmInventorySummary(engineDataSource)); inventory.setVolume(org.ovirt.engine.ui.frontend.server.dashboard.InventoryHelper.getGlusterVolumeInventorySummary(engineDataSource)); inventory.setEvent(org.ovirt.engine.ui.frontend.server.dashboard.EventHelper.getEventStatus(engineDataSource)); return inventory; }
public org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getGlusterVolume() { return glusterVolume; }	public org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getVolume() { return volume; }
public void setGlusterVolume(org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus glusterVolume) { this.glusterVolume = glusterVolume; for (org.ovirt.engine.ui.frontend.server.dashboard.maps.GlusterVolumeStatusMap status : org.ovirt.engine.ui.frontend.server.dashboard.maps.GlusterVolumeStatusMap.values()) { java.util.List<java.lang.String> statusValues = java.util.Arrays.asList(status.getStringValues()); glusterVolume.setStatusValues(status.name().toLowerCase(), statusValues); } }	public void setVolume(org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus volume) { this.volume = volume; for (org.ovirt.engine.ui.frontend.server.dashboard.maps.GlusterVolumeStatusMap status : org.ovirt.engine.ui.frontend.server.dashboard.maps.GlusterVolumeStatusMap.values()) { java.util.List<java.lang.String> statusValues = java.util.Arrays.asList(status.getStringValues()); volume.setStatusValues(status.name().toLowerCase(), statusValues); } }
public boolean isType(java.lang.String value) { org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus volStatus = org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.valueOf(value); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus status : values) { if (status.equals(volStatus)) { return true; } } return false; }	public boolean isType(java.lang.String value) { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus status : values) { if (status.name().equals(value)) { return true; } } return false; }
private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus handleUndeterminedJobStatus(org.ovirt.engine.core.bll.CommandBase<?> cmd, boolean jobReportedByHost) { if (isEntityPollingSupported(cmd)) { return pollEntityIfSupported(cmd); } if (!jobReportedByHost) { log.error(("Command {} id: '{}': entity polling isn't supported and the job isn't reported by the host," + "assuming it failed so that the command execution will end."), cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } log.error("Command {} id: '{}': entity polling isn't supported, will retry to poll the job soon", cmd.getActionType(), cmd.getCommandId()); return null; }	private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus handleUndeterminedJobStatus(org.ovirt.engine.core.bll.CommandBase<?> cmd, boolean jobsReportedByHost) { if (isEntityPollingSupported(cmd)) { return pollEntity(cmd); } if (jobsReportedByHost) { log.error(("Command {} id: '{}': entity polling isn't supported and the job isn't reported by the host," + "assuming it failed so that the command execution will end."), cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } log.error("Command {} id: '{}': entity polling isn't supported, will retry to poll the job soon", cmd.getActionType(), cmd.getCommandId()); return null; }
private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus pollEntityIfSupported(org.ovirt.engine.core.bll.CommandBase<?> cmd) { try { return ((org.ovirt.engine.core.bll.storage.EntityPollingCommand) (cmd)).poll(); } catch (java.lang.Exception e) { log.error( {} id: '{}': failed to poll the command entity cmd.getActionType(), cmd.getCommandId()); } return null; }	private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus pollEntity(org.ovirt.engine.core.bll.CommandBase<?> cmd) { try { return ((org.ovirt.engine.core.bll.storage.EntityPollingCommand) (cmd)).poll(); } catch (java.lang.Exception e) { log.error("Command {} id: '{}': failed to poll the command entity", cmd.getActionType(), cmd.getCommandId()); } return null; }
@java.lang.Override public java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase> runMultipleActions(org.ovirt.engine.core.common.action.VdcActionType actionType, java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> multipleParams, boolean isRunOnlyIfAllValidationPass, boolean isWaitForResult) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug( RunMultipleAction invoked! [amount of actions: {}] multipleParams.size()); for (org.ovirt.engine.core.common.action.VdcActionParametersBase params : multipleParams) { params.setSessionId(getEngineSessionId()); <START_MOD>params.setCorrelationId(org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId()); <END_MOD>} java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase> returnValues = getBackend().runMultipleActions(actionType, multipleParams, isRunOnlyIfAllValidationPass, isWaitForResult); return returnValues; }	@java.lang.Override public java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase> runMultipleActions(org.ovirt.engine.core.common.action.VdcActionType actionType, java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> multipleParams, boolean isRunOnlyIfAllValidationPass, boolean isWaitForResult) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug("Server: RunMultipleAction invoked! [amount of actions: {}]", multipleParams.size()); java.lang.String correlationId = org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId(); for (org.ovirt.engine.core.common.action.VdcActionParametersBase params : multipleParams) { params.setSessionId(getEngineSessionId()); if ((params.getCorrelationId()) == null) { params.setCorrelationId(correlationId); } } java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase> returnValues = getBackend().runMultipleActions(actionType, multipleParams, isRunOnlyIfAllValidationPass, isWaitForResult); return returnValues; }
@java.lang.Override public org.ovirt.engine.core.common.queries.VdcQueryReturnValue runPublicQuery(org.ovirt.engine.core.common.queries.VdcQueryType queryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase params) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug( runPublicQuery invoked! '{}' queryType); <START_MOD>params.setCorrelationId(org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId()); <END_MOD>debugQuery(queryType, params); return getBackend().runPublicQuery(queryType, params); }	@java.lang.Override public org.ovirt.engine.core.common.queries.VdcQueryReturnValue runPublicQuery(org.ovirt.engine.core.common.queries.VdcQueryType queryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase params) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug("Server: runPublicQuery invoked! '{}'", queryType); if ((params.getCorrelationId()) == null) { params.setCorrelationId(org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId()); } debugQuery(queryType, params); return getBackend().runPublicQuery(queryType, params); }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase runAction(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase params) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug( RunAction invoked! debugAction(actionType, params); params.setSessionId(getEngineSessionId()); <START_MOD>params.setCorrelationId(org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId()); <END_MOD>if (noBackend) { org.ovirt.engine.core.common.action.VdcReturnValueBase rValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); rValue.setSucceeded(true); return rValue; } return getBackend().runAction(actionType, params); }	@java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase runAction(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase params) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug("Server: RunAction invoked!"); debugAction(actionType, params); params.setSessionId(getEngineSessionId()); if ((params.getCorrelationId()) == null) { params.setCorrelationId(org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId()); } return getBackend().runAction(actionType, params); }
private void setCorrelationId(org.ovirt.engine.core.common.<START_MOD>HasCorrelationId<END_MOD> params) { if ((httpHeaders) == null) { return; } java.util.List<java.lang.String> correlationIds = httpHeaders.getRequestHeader(org.ovirt.engine.api.restapi.resource.BackendResource.CORRELATION_ID); if ((correlationIds != null) && ((correlationIds.size()) > 0)) { params.setCorrelationId(correlationIds.get(0)); } }	private void setCorrelationId(org.ovirt.engine.core.common.HasCorrelationId params) { java.lang.String correlationId = getCurrent().getParameters().get(org.ovirt.engine.api.restapi.resource.BackendResource.CORRELATION_ID); if (correlationId != null) { params.setCorrelationId(correlationId); } }
@java.lang.Override protected void executeCommand() { if (getParameters().getRefresh()) { getSessionDataContainer().updateSessionLastActiveTime(getParameters().getSessionId()); } if (validatePermissions()) { if (validateInputs()) {<START_MOD> long start = java.lang.System.currentTimeMillis();<END_MOD> try { returnValue.setSucceeded(true); executeQueryCommand(); } catch (java.lang.RuntimeException ex) { returnValue.setSucceeded(false); java.lang.Throwable th = (ex instanceof org.ovirt.engine.core.common.errors.EngineException) ? ex : ex.getCause(); if (th instanceof org.ovirt.engine.core.common.errors.EngineException) { org.ovirt.engine.core.common.errors.EngineException vdcExc = ((org.ovirt.engine.core.common.errors.EngineException) (th)); if ((vdcExc.getErrorCode()) != null) { returnValue.setExceptionString(vdcExc.getErrorCode().toString()); } else { returnValue.setExceptionString(vdcExc.getMessage()); } log.error( '{}' failed: {} getClass().getSimpleName(), vdcExc.getMessage()); log.error("Exception", vdcExc); } else { returnValue.setExceptionString(ex.getMessage()); log.error( '{}' failed: {} getClass().getSimpleName(), ex.getMessage()); log.error("Exception", ex); } } <START_MOD>finally { long duration = (java.lang.System.currentTimeMillis()) - start; java.lang.String correlationId = getParameters().getCorrelationId(); if (correlationId == null) { correlationId = "N/A"; } log.info( {} took {} ms CorrelationId: {} org.ovirt.engine.core.bll.QueriesCommandBase.getCommandName(), duration, correlationId); } <END_MOD>} else { log.error( execution failed due to invalid inputs: {} returnValue.getExceptionString()); } } else { java.lang.String errMessage =   execution failed due to insufficient permissions. log.error(errMessage); returnValue.setExceptionString(errMessage); } }	@java.lang.Override protected void executeCommand() { if (getParameters().getRefresh()) { getSessionDataContainer().updateSessionLastActiveTime(getParameters().getSessionId()); } if (validatePermissions()) { if (validateInputs()) { long start = java.lang.System.currentTimeMillis(); try { returnValue.setSucceeded(true); executeQueryCommand(); } catch (java.lang.RuntimeException ex) { returnValue.setSucceeded(false); java.lang.Throwable th = (ex instanceof org.ovirt.engine.core.common.errors.EngineException) ? ex : ex.getCause(); if (th instanceof org.ovirt.engine.core.common.errors.EngineException) { org.ovirt.engine.core.common.errors.EngineException vdcExc = ((org.ovirt.engine.core.common.errors.EngineException) (th)); if ((vdcExc.getErrorCode()) != null) { returnValue.setExceptionString(vdcExc.getErrorCode().toString()); } else { returnValue.setExceptionString(vdcExc.getMessage()); } log.error("Query '{}' failed: {}", getClass().getSimpleName(), vdcExc.getMessage()); log.error("Exception", vdcExc); } else { returnValue.setExceptionString(ex.getMessage()); log.error("Query '{}' failed: {}", getClass().getSimpleName(), ex.getMessage()); log.error("Exception", ex); } } finally { log.debug("Query {} took {} ms", org.ovirt.engine.core.bll.QueriesCommandBase.getCommandName(), ((java.lang.System.currentTimeMillis()) - start)); } } else { log.error("Query execution failed due to invalid inputs: {}", returnValue.getExceptionString()); } } else { java.lang.String errMessage = "Query execution failed due to insufficient permissions."; log.error(errMessage); returnValue.setExceptionString(errMessage); } }
@java.lang.Override public java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> runMultipleQueries(java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryType> queryTypeList, java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryParametersBase> queryParamsList) { int size = (queryTypeList == null) ?   : queryTypeList.size(); org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug( RunMultipleQuery invoked! [amount of queries: {}] size); java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> ret = new java.util.ArrayList<>(); if ((queryTypeList == null) || (queryParamsList == null)) { } else if ((queryTypeList.size()) != (queryParamsList.size())) { } else { for (int i = 0; i < (queryTypeList.size()); i++) { <START_MOD>queryParamsList.get(i).setCorrelationId(org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId()); <END_MOD>debugQuery(queryTypeList.get(i), queryParamsList.get(i)); ret.add(runQuery(queryTypeList.get(i), queryParamsList.get(i))); } } for (org.ovirt.engine.core.common.queries.VdcQueryReturnValue vqrv : ret) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug( '{}' vqrv); } org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug( RunMultipleQuery result [amount of queries: {}] ret.size()); return ret; }	@java.lang.Override public java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> runMultipleQueries(java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryType> queryTypeList, java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryParametersBase> queryParamsList) { int size = (queryTypeList == null) ? 0 : queryTypeList.size(); org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug("Server: RunMultipleQuery invoked! [amount of queries: {}]", size); java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> ret = new java.util.ArrayList<>(); if ((queryTypeList == null) || (queryParamsList == null)) { } else if ((queryTypeList.size()) != (queryParamsList.size())) { } else { java.lang.String correlationId = org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId(); for (int i = 0; i < (queryTypeList.size()); i++) { if ((queryParamsList.get(i).getCorrelationId()) == null) { queryParamsList.get(i).setCorrelationId(correlationId); } debugQuery(queryTypeList.get(i), queryParamsList.get(i)); ret.add(runQuery(queryTypeList.get(i), queryParamsList.get(i))); } } for (org.ovirt.engine.core.common.queries.VdcQueryReturnValue vqrv : ret) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug("VdcQueryReturnValue '{}'", vqrv); } org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug("Server: RunMultipleQuery result [amount of queries: {}]", ret.size()); return ret; }
@java.lang.Override public org.ovirt.engine.core.common.queries.VdcQueryReturnValue runQuery(org.ovirt.engine.core.common.queries.VdcQueryType search, org.ovirt.engine.core.common.queries.VdcQueryParametersBase searchParameters) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug( RunQuery invoked! debugQuery(search, searchParameters); searchParameters.setSessionId(getEngineSessionId()); <START_MOD>searchParameters.setCorrelationId(org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId()); <END_MOD>return getBackend().runQuery(search, searchParameters); }	@java.lang.Override public org.ovirt.engine.core.common.queries.VdcQueryReturnValue runQuery(org.ovirt.engine.core.common.queries.VdcQueryType search, org.ovirt.engine.core.common.queries.VdcQueryParametersBase searchParameters) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug("Server: RunQuery invoked!"); debugQuery(search, searchParameters); searchParameters.setSessionId(getEngineSessionId()); if ((searchParameters.getCorrelationId()) == null) { searchParameters.setCorrelationId(org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId()); } return getBackend().runQuery(search, searchParameters); }
@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse resp) throws java.io.IOException, javax.servlet.ServletException { java.lang.String correlationId = req.getHeader("Correlation-Id"); if (correlationId != null) { org.ovirt.engine.core.utils.CorrelationIdTracker.setCorrelationId(correlationId); resp.setHeader("Correlation-Id", correlationId); } super.service(req, resp); }	@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { java.lang.String correlationId = org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.getCorrelationId(request); org.ovirt.engine.core.utils.CorrelationIdTracker.setCorrelationId(correlationId); response.addHeader(org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.CORRELATION_ID_HEADER, correlationId); super.service(request, response); }
private org.ovirt.engine.core.utils.lock.LockManager getLockManager() { try { return ((org.ovirt.engine.core.utils.lock.LockManager) (new javax.naming.InitialContext().lookup("java:global/engine/bll/LockManager"))); } catch (javax.naming.NamingException e) { return null; } }	private org.ovirt.engine.core.utils.lock.LockManager getLockManager() { try { return ((org.ovirt.engine.core.utils.lock.LockManager) (new javax.naming.InitialContext().lookup("java:global/engine/bll/LockManager"))); } catch (javax.naming.NamingException e) { throw new java.lang.RuntimeException("Could not find LockManager via JNDI lookup", e); } }
private java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> getVnicProfileMappings(org.ovirt.engine.api.model.Action action) { return new org.ovirt.engine.api.restapi.types.ExternalVnicProfileMappingMapper().mapFromModel(action.getVnicProfileMappings()); }	private java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> getVnicProfileMappings(org.ovirt.engine.api.model.Action action) { return org.ovirt.engine.api.restapi.types.ExternalVnicProfileMappingMapper.mapFromModel(action.getVnicProfileMappings()); }
private org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping mapSingleMappingEntry(org.ovirt.engine.api.model.VnicProfileMapping model) { return new org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping(model.getSourceNetworkName(), model.getSourceNetworkProfileName(), org.ovirt.engine.core.compat.Guid.createGuidFromString(model.getTargetVnicProfile().getId())); }	private static org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping mapSingleMappingEntry(org.ovirt.engine.api.model.VnicProfileMapping model) { return new org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping(model.getSourceNetworkName(), model.getSourceNetworkProfileName(), org.ovirt.engine.core.compat.Guid.createGuidFromString(model.getTargetVnicProfile().getId())); }
private void validateVnicMappings(org.ovirt.engine.api.model.Action action) { if (!((action.isSetVnicProfileMappings()) && (action.getVnicProfileMappings().isSetVnicProfileMappings()))) { return; } action.getVnicProfileMappings().getVnicProfileMappings().forEach(this::validateVnicProfileMapping); }	private void validateVnicMappings(org.ovirt.engine.api.model.Action action) { if ((action.isSetVnicProfileMappings()) && (action.getVnicProfileMappings().isSetVnicProfileMappings())) { action.getVnicProfileMappings().getVnicProfileMappings().forEach(this::validateVnicProfileMapping); } }
@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name", "storageDomain.id|name"); <START_MOD>validateVnicMappings(action); <END_MOD>org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), getClusterId(action)<START_MOD>, getVnicProfileMappings(action), getReassignBadMacs(action)<END_MOD>); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive() ? action.isExclusive() : false)); boolean collapseSnapshots = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmResource.COLLAPSE_SNAPSHOTS, true, false); if (collapseSnapshots) { params.setCopyCollapse(collapseSnapshots); } setVolumesTypeFormat(action); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } return doAction(VdcActionType.ImportVm, params, action); }	@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name", "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), getClusterId(action)); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive() ? action.isExclusive() : false)); boolean collapseSnapshots = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmResource.COLLAPSE_SNAPSHOTS, true, false); if (collapseSnapshots) { params.setCopyCollapse(collapseSnapshots); } setVolumesTypeFormat(action); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } return doAction(VdcActionType.ImportVm, params, action); }
public java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> mapFromModel(org.ovirt.engine.api.model.VnicProfileMappings vnicProfileMappings) { return vnicProfileMappings.isSetVnicProfileMappings() ? vnicProfileMappings.getVnicProfileMappings().stream().map(this::mapSingleMappingEntry).collect(java.util.stream.Collectors.toList()) : java.util.Collections.emptyList(); }	public static java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> mapFromModel(org.ovirt.engine.api.model.VnicProfileMappings vnicProfileMappings) { return org.ovirt.engine.api.restapi.types.ExternalVnicProfileMappingMapper.isVnicProfileMappingSupplied(vnicProfileMappings) ? org.ovirt.engine.api.restapi.types.ExternalVnicProfileMappingMapper.mapVnicProfileMappings(vnicProfileMappings) : java.util.Collections.emptyList(); }
@org.junit.Test public void testVnicProfileBelongsToClusterPositive() { when(mockVnicProfileDao.get(org.ovirt.engine.core.bll.exportimport.VnicProfileValidatorTest.VNIC_PROFILE_ID)).thenReturn(vnicProfile); when(mockNetworkClusterDao.getAllForCluster(org.ovirt.engine.core.bll.exportimport.VnicProfileValidatorTest.CLUSTER_ID)).thenReturn(targetClusterNetworks); targetClusterNetworks.addAll(java.util.Arrays.asList(networkCluster1, networkCluster2)); assertTrue(underTest.vnicProfileBelongsToCluster(org.ovirt.engine.core.bll.exportimport.VnicProfileValidatorTest.VNIC_PROFILE_ID, org.ovirt.engine.core.bll.exportimport.VnicProfileValidatorTest.CLUSTER_ID)); }	@org.junit.Test public void testVnicProfileBelongsToClusterPositive() { when(mockVnicProfileDao.get(org.ovirt.engine.core.bll.exportimport.VnicProfileValidatorTest.VNIC_PROFILE_ID)).thenReturn(vnicProfile); when(mockNetworkClusterDao.getAllForCluster(org.ovirt.engine.core.bll.exportimport.VnicProfileValidatorTest.CLUSTER_ID)).thenReturn(targetClusterNetworks); targetClusterNetworks.addAll(java.util.Arrays.asList(networkCluster1, networkCluster2)); final org.ovirt.engine.core.bll.ValidationResult actual = underTest.validateTargetVnicProfileId(org.ovirt.engine.core.bll.exportimport.VnicProfileValidatorTest.VNIC_PROFILE_ID, org.ovirt.engine.core.bll.exportimport.VnicProfileValidatorTest.CLUSTER_ID); assertThat(actual, isValid()); }
public java.util.Set<org.ovirt.engine.core.common.errors.EngineMessage> validateExternalVnicProfileMapping(java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> externalVnicProfileMappings, org.ovirt.engine.core.compat.Guid clusterId) { if (org.apache.commons.collections.CollectionUtils.isEmpty(externalVnicProfileMappings)) { return java.util.Collections.emptySet(); } return externalVnicProfileMappings.stream().map(( externalVnicProfileMapping) -> isVnicProfileValid(externalVnicProfileMapping.getVnicProfileId(), clusterId)).filter(java.util.Objects::nonNull).collect(java.util.stream.Collectors.toSet()); }	public org.ovirt.engine.core.bll.ValidationResult validateExternalVnicProfileMapping(java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> externalVnicProfileMappings, org.ovirt.engine.core.compat.Guid clusterId) { return externalVnicProfileMappings.stream().map(ExternalVnicProfileMapping::getVnicProfileId).filter(java.util.Objects::nonNull).map(( vnicProfileId) -> vnicProfileValidator.validateTargetVnicProfileId(vnicProfileId, clusterId)).filter(((java.util.function.Predicate<org.ovirt.engine.core.bll.ValidationResult>) (ValidationResult::isValid)).negate()).findFirst().orElse(ValidationResult.VALID); }
@org.junit.Test public void testVnicProfileBelongsToClusterNegative() { when(mockVnicProfileDao.get(org.ovirt.engine.core.bll.exportimport.VnicProfileValidatorTest.VNIC_PROFILE_ID)).thenReturn(vnicProfile); targetClusterNetworks.add(networkCluster1); assertFalse(underTest.vnicProfileBelongsToCluster(org.ovirt.engine.core.bll.exportimport.VnicProfileValidatorTest.VNIC_PROFILE_ID, org.ovirt.engine.core.bll.exportimport.VnicProfileValidatorTest.CLUSTER_ID)); }	@org.junit.Test public void testVnicProfileBelongsToClusterNegative() { when(mockVnicProfileDao.get(org.ovirt.engine.core.bll.exportimport.VnicProfileValidatorTest.VNIC_PROFILE_ID)).thenReturn(vnicProfile); targetClusterNetworks.add(networkCluster1); final org.ovirt.engine.core.bll.ValidationResult actual = underTest.validateTargetVnicProfileId(org.ovirt.engine.core.bll.exportimport.VnicProfileValidatorTest.VNIC_PROFILE_ID, org.ovirt.engine.core.bll.exportimport.VnicProfileValidatorTest.CLUSTER_ID); assertThat(actual, failsWith(EngineMessage.NETWORK_NOT_EXISTS_IN_CURRENT_CLUSTER)); }
public boolean vnicProfileBelongsToCluster(org.ovirt.engine.core.compat.Guid vnicProfileId, org.ovirt.engine.core.compat.Guid clusterId) { final org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = vnicProfileDao.get(vnicProfileId); if (vnicProfile == null) { return false; } final java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster> clusterNetworks = networkClusterDao.getAllForCluster(clusterId); return clusterNetworks.stream().map(NetworkCluster::getNetworkId).anyMatch(vnicProfile.getNetworkId()::equals); }	public org.ovirt.engine.core.bll.ValidationResult validateTargetVnicProfileId(org.ovirt.engine.core.compat.Guid vnicProfileId, org.ovirt.engine.core.compat.Guid clusterId) { final org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = vnicProfileDao.get(vnicProfileId); if (vnicProfile == null) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VNIC_PROFILE_NOT_EXISTS); } final java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster> clusterNetworks = networkClusterDao.getAllForCluster(clusterId); final boolean networkIsFoundInCluster = clusterNetworks.stream().map(NetworkCluster::getNetworkId).anyMatch(vnicProfile.getNetworkId()::equals); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.NETWORK_NOT_EXISTS_IN_CURRENT_CLUSTER).unless(networkIsFoundInCluster); }
@org.junit.Test public void testValidateExternalVnicProfileMappingPositive() { final java.util.List<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> vnicProfileMappings = java.util.Arrays.asList(createMapping(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.VNIC_PROFILE_ID)); when(mockVnicProfileValidator.vnicProfileBelongsToCluster(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.VNIC_PROFILE_ID, org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.CLUSTER_ID)).thenReturn(true); final java.util.Set<org.ovirt.engine.core.common.errors.EngineMessage> actual = underTest.validateExternalVnicProfileMapping(vnicProfileMappings, org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.CLUSTER_ID); assertThat(actual, empty()); }	@org.junit.Test public void testValidateExternalVnicProfileMapping() { testListOfMappings(createMappings(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.VNIC_PROFILE_ID), isValid()); }
@org.junit.Test public void testValidateExternalVnicProfileMappingNegative() { final java.util.List<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> vnicProfileMappings = java.util.Arrays.asList(createMapping(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.VNIC_PROFILE_ID), createMapping(Guid.Empty)); when(mockVnicProfileValidator.vnicProfileBelongsToCluster(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.VNIC_PROFILE_ID, org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.CLUSTER_ID)).thenReturn(true); final java.util.Set<org.ovirt.engine.core.common.errors.EngineMessage> actual = underTest.validateExternalVnicProfileMapping(vnicProfileMappings, org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.CLUSTER_ID); assertThat(actual, contains(EngineMessage.ACTION_TYPE_FAILED_VNIC_PROFILE_NOT_EXISTS)); }	@org.junit.Test public void testValidateExternalVnicProfileMappingInvalidVnicProfileId() { final org.ovirt.engine.core.compat.Guid invalidId = org.ovirt.engine.core.compat.Guid.newGuid(); when(mockVnicProfileValidator.validateTargetVnicProfileId(invalidId, org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.CLUSTER_ID)).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.CAN_DO_ACTION_GENERAL_FAILURE)); testListOfMappings(createMappings(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.VNIC_PROFILE_ID, invalidId), failsWith(EngineMessage.CAN_DO_ACTION_GENERAL_FAILURE)); }
@org.junit.Test public void testOtherFieldsNotValidatedInImport() { org.ovirt.engine.core.common.action.ImportVmParameters parameters = createParameters(); java.lang.String tooLongString = org.ovirt.engine.core.utils.RandomUtils.instance().nextPropertyString(((org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.GENERAL_MAX_SIZE) + 1)); parameters.getVm().setUserDefinedProperties(tooLongString); parameters.setImportAsNewEntity(true); org.ovirt.engine.core.bll.exportimport.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> command = new org.ovirt.engine.core.bll.exportimport.ImportVmCommandTest.ImportVmCommandStub(parameters, poolPerCluster, externalVmMacsFinder<START_MOD>, externalVnicProfileMappingValidator<END_MOD>); command.init(); java.util.Set<javax.validation.ConstraintViolation<org.ovirt.engine.core.common.action.ImportVmParameters>> validate = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, command.getValidationGroups().toArray(new java.lang.Class<?>[0])); assertTrue(validate.isEmpty()); parameters.getVm().setUserDefinedProperties(tooLongString); parameters.setImportAsNewEntity(false); command = new org.ovirt.engine.core.bll.exportimport.ImportVmCommandTest.ImportVmCommandStub(parameters, poolPerCluster, externalVmMacsFinder<START_MOD>, externalVnicProfileMappingValidator<END_MOD>); command.init(); validate = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, command.getValidationGroups().toArray(new java.lang.Class<?>[0])); assertTrue(validate.isEmpty()); }	@org.junit.Test public void testOtherFieldsNotValidatedInImport() { java.lang.String tooLongString = org.ovirt.engine.core.utils.RandomUtils.instance().nextPropertyString(((org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.GENERAL_MAX_SIZE) + 1)); cmd.getParameters().getVm().setUserDefinedProperties(tooLongString); cmd.getParameters().setImportAsNewEntity(true); cmd.init(); java.util.Set<javax.validation.ConstraintViolation<org.ovirt.engine.core.common.action.ImportVmParameters>> validate = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(cmd.getParameters(), cmd.getValidationGroups().toArray(new java.lang.Class<?>[0])); assertTrue(validate.isEmpty()); cmd.getParameters().getVm().setUserDefinedProperties(tooLongString); cmd.getParameters().setImportAsNewEntity(false); cmd.init(); validate = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(cmd.getParameters(), cmd.getValidationGroups().toArray(new java.lang.Class<?>[0])); assertTrue(validate.isEmpty()); }
@org.junit.Test public void testVnicProfileBelongsToClusterUnknownVnicProfileId() { assertFalse(underTest.vnicProfileBelongsToCluster(org.ovirt.engine.core.bll.exportimport.VnicProfileValidatorTest.VNIC_PROFILE_ID, org.ovirt.engine.core.bll.exportimport.VnicProfileValidatorTest.CLUSTER_ID)); }	@org.junit.Test public void testVnicProfileBelongsToClusterUnknownVnicProfileId() { final org.ovirt.engine.core.bll.ValidationResult actual = underTest.validateTargetVnicProfileId(org.ovirt.engine.core.bll.exportimport.VnicProfileValidatorTest.VNIC_PROFILE_ID, org.ovirt.engine.core.bll.exportimport.VnicProfileValidatorTest.CLUSTER_ID); assertThat(actual, failsWith(EngineMessage.ACTION_TYPE_FAILED_VNIC_PROFILE_NOT_EXISTS)); }
@org.junit.Test public void testValidateExternalVnicProfileMappingEmptyInputIsValid() { final java.util.List<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> vnicProfileMappings = java.util.Collections.emptyList(); final java.util.Set<org.ovirt.engine.core.common.errors.EngineMessage> actual = underTest.validateExternalVnicProfileMapping(vnicProfileMappings, org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.CLUSTER_ID); assertThat(actual, empty()); }	@org.junit.Test public void testValidateExternalVnicProfileMappingEmptyInputIsValid() { testListOfMappings(java.util.Collections.emptyList(), isValid()); }
@org.junit.Test public void testAliasGenerationByAddVmImagesAndSnapshotsWithCollapse() { org.ovirt.engine.core.common.action.ImportVmParameters params = createParameters(); params.setCopyCollapse(true); org.ovirt.engine.core.bll.exportimport.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> cmd = spy(new org.ovirt.engine.core.bll.exportimport.ImportVmCommandTest.ImportVmCommandStub(params, poolPerCluster, externalVmMacsFinder<START_MOD>, externalVnicProfileMappingValidator<END_MOD>)); cmd.init(); org.ovirt.engine.core.common.businessentities.storage.DiskImage collapsedDisk = params.getVm().getImages().get(1); doNothing().when(cmd).saveImage(collapsedDisk); doNothing().when(cmd).saveBaseDisk(collapsedDisk); doNothing().when(cmd).saveDiskImageDynamic(collapsedDisk); doNothing().when(cmd).saveDiskVmElement(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class)); doReturn(new org.ovirt.engine.core.common.businessentities.Snapshot()).when(cmd).addActiveSnapshot(any(org.ovirt.engine.core.compat.Guid.class)); cmd.addVmImagesAndSnapshots(); assertEquals( alias not generated "testVm_Disk1", collapsedDisk.getDiskAlias()); }	@org.junit.Test public void testAliasGenerationByAddVmImagesAndSnapshotsWithCollapse() { cmd.getParameters().setCopyCollapse(true); cmd.init(); org.ovirt.engine.core.common.businessentities.storage.DiskImage collapsedDisk = cmd.getParameters().getVm().getImages().get(1); doNothing().when(cmd).saveImage(collapsedDisk); doNothing().when(cmd).saveBaseDisk(collapsedDisk); doNothing().when(cmd).saveDiskImageDynamic(collapsedDisk); doNothing().when(cmd).saveDiskVmElement(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class)); doReturn(new org.ovirt.engine.core.common.businessentities.Snapshot()).when(cmd).addActiveSnapshot(any(org.ovirt.engine.core.compat.Guid.class)); cmd.addVmImagesAndSnapshots(); assertEquals("Disk alias not generated", "testVm_Disk1", collapsedDisk.getDiskAlias()); }
@org.junit.Test public void testManagedDeviceSyncWithNewDiskId() { ImportVmParameters parameters = createParameters(); org.ovirt.engine.core.bll.exportimport.ImportVmCommand<ImportVmParameters> command = new org.ovirt.engine.core.bll.exportimport.ImportVmCommandTest.ImportVmCommandStub(parameters, poolPerCluster, externalVmMacsFinder<START_MOD>, externalVnicProfileMappingValidator<END_MOD>); command.init(); java.util.List<DiskImage> diskList = new java.util.ArrayList<>(); DiskImage diskImage = new DiskImage(); diskImage.setStorageIds(new java.util.ArrayList()); DiskImage diskImage2 = new DiskImage(); diskImage2.setStorageIds(new java.util.ArrayList()); diskList.add(diskImage); diskList.add(diskImage2); DiskImage disk = command.getActiveVolumeDisk(diskList); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmDevice> managedDevices = new java.util.HashMap<>(); managedDevices.put(disk.getId(), new org.ovirt.engine.core.common.businessentities.VmDevice()); org.ovirt.engine.core.compat.Guid beforeOldDiskId = disk.getId(); command.generateNewDiskId(diskList, disk); command.updateManagedDeviceMap(disk, managedDevices); org.ovirt.engine.core.compat.Guid oldDiskId = command.newDiskIdForDisk.get(disk.getId()).getId(); assertEquals( old disk id should be similar to the value at the newDiskIdForDisk. beforeOldDiskId, oldDiskId); assertNotNull( manged device should return the disk device by the new key managedDevices.get(disk.getId())); assertNull( manged device should not return the disk device by the old key managedDevices.get(beforeOldDiskId)); }	@org.junit.Test public void testManagedDeviceSyncWithNewDiskId() { cmd.init(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); diskImage.setStorageIds(new java.util.ArrayList()); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage2 = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); diskImage2.setStorageIds(new java.util.ArrayList()); diskList.add(diskImage); diskList.add(diskImage2); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = cmd.getActiveVolumeDisk(diskList); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmDevice> managedDevices = new java.util.HashMap<>(); managedDevices.put(disk.getId(), new org.ovirt.engine.core.common.businessentities.VmDevice()); org.ovirt.engine.core.compat.Guid beforeOldDiskId = disk.getId(); cmd.generateNewDiskId(diskList, disk); cmd.updateManagedDeviceMap(disk, managedDevices); org.ovirt.engine.core.compat.Guid oldDiskId = cmd.newDiskIdForDisk.get(disk.getId()).getId(); assertEquals("The old disk id should be similar to the value at the newDiskIdForDisk.", beforeOldDiskId, oldDiskId); assertNotNull("The manged device should return the disk device by the new key", managedDevices.get(disk.getId())); assertNull("The manged device should not return the disk device by the old key", managedDevices.get(beforeOldDiskId)); }
@org.junit.Test public void testCDANoCollapseNoSnapshots() { final org.ovirt.engine.core.common.businessentities.VM v = createVmWithNoSnapshots(); v.setName("testVm"); org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(v, org.ovirt.engine.core.compat.Guid.newGuid(), org.ovirt.engine.core.compat.Guid.newGuid(), org.ovirt.engine.core.compat.Guid.newGuid(), org.ovirt.engine.core.compat.Guid.newGuid()); params.setCopyCollapse(false); org.ovirt.engine.core.bll.exportimport.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> cmd = spy(new org.ovirt.engine.core.bll.exportimport.ImportVmCommandTest.ImportVmCommandStub(params, poolPerCluster, externalVmMacsFinder<START_MOD>, externalVnicProfileMappingValidator<END_MOD>)); cmd.init(); org.ovirt.engine.core.common.businessentities.storage.DiskImage activeDisk = params.getVm().getImages().get(0); doNothing().when(cmd).saveImage(activeDisk); doNothing().when(cmd).saveDiskImageDynamic(activeDisk); doNothing().when(cmd).saveBaseDisk(activeDisk); doNothing().when(cmd).saveDiskVmElement(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class)); doReturn(new org.ovirt.engine.core.common.businessentities.Snapshot()).when(cmd).addActiveSnapshot(any(org.ovirt.engine.core.compat.Guid.class)); cmd.addVmImagesAndSnapshots(); assertEquals( alias not generated "testVm_Disk1", activeDisk.getDiskAlias()); }	@org.junit.Test public void testCDANoCollapseNoSnapshots() { final org.ovirt.engine.core.common.businessentities.VM v = createVmWithNoSnapshots(); v.setName("testVm"); cmd.getParameters().setVm(v); cmd.getParameters().setCopyCollapse(false); cmd.init(); org.ovirt.engine.core.common.businessentities.storage.DiskImage activeDisk = cmd.getParameters().getVm().getImages().get(0); doNothing().when(cmd).saveImage(activeDisk); doNothing().when(cmd).saveDiskImageDynamic(activeDisk); doNothing().when(cmd).saveBaseDisk(activeDisk); doNothing().when(cmd).saveDiskVmElement(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class)); doReturn(new org.ovirt.engine.core.common.businessentities.Snapshot()).when(cmd).addActiveSnapshot(any(org.ovirt.engine.core.compat.Guid.class)); cmd.addVmImagesAndSnapshots(); assertEquals("Disk alias not generated", "testVm_Disk1", activeDisk.getDiskAlias()); }
@org.junit.Test public void testValidateExternalVnicProfileMappingNullTargetProfileIsValid() { final java.util.List<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> vnicProfileMappings = java.util.Arrays.asList(createMapping(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.VNIC_PROFILE_ID), createMapping(null)); when(mockVnicProfileValidator.vnicProfileBelongsToCluster(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.VNIC_PROFILE_ID, org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.CLUSTER_ID)).thenReturn(true); final java.util.Set<org.ovirt.engine.core.common.errors.EngineMessage> actual = underTest.validateExternalVnicProfileMapping(vnicProfileMappings, org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.CLUSTER_ID); assertThat(actual, empty()); }	@org.junit.Test public void testValidateExternalVnicProfileMappingNullTargetProfileIsValid() { testListOfMappings(createMappings(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingValidatorTest.VNIC_PROFILE_ID, null), isValid()); }
@org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.bll.utils.VmDeviceUtils.class, vmDeviceUtils); org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepository); final int osId = 0; java.util.Map<java.lang.Integer, java.util.Map<org.ovirt.engine.core.compat.Version, java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.DisplayType>>>> displayTypeMap = new java.util.HashMap<>(); displayTypeMap.put(osId, new java.util.HashMap()); displayTypeMap.get(osId).put(null, java.util.Collections.singletonList(new org.ovirt.engine.core.common.utils.Pair(org.ovirt.engine.core.common.businessentities.GraphicsType.SPICE, org.ovirt.engine.core.common.businessentities.DisplayType.qxl))); when(osRepository.getGraphicsAndDisplays()).thenReturn(displayTypeMap); <START_MOD>when(externalVnicProfileMappingValidator.validateExternalVnicProfileMapping(any(), any())).thenReturn(java.util.Collections.emptySet()); <END_MOD>}	@org.junit.Before public void setUp() { doReturn(null).when(cmd).getCluster(); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } macPool = getMacPool(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> domainsMap = new java.util.HashMap<>(); if (!(validateBeforeCloneVm(domainsMap))) { return false; } if (org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().isImportAsNewEntity()) { initImportClonedVm(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getInterfaces().size()) > (macPool.getAvailableMacsCount())) { return failValidation(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES); } } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateBallonDevice())) { return false; } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateSoundDevice())) { return false; } <START_MOD>if (!(validateExternalVnicProfileMapping())) { return false; } <END_MOD>return validateAfterCloneVm(domainsMap); }	@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } macPool = getMacPool(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> domainsMap = new java.util.HashMap<>(); if (!(validateBeforeCloneVm(domainsMap))) { return false; } if (org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().isImportAsNewEntity()) { initImportClonedVm(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getInterfaces().size()) > (macPool.getAvailableMacsCount())) { return failValidation(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES); } } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateBallonDevice())) { return false; } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateSoundDevice())) { return false; } return validateAfterCloneVm(domainsMap); }
private void checkVmName(boolean isImportAsNewEntity, java.lang.String name) { org.ovirt.engine.core.common.action.ImportVmParameters parameters = createParameters(); parameters.getVm().setName(name); parameters.setImportAsNewEntity(isImportAsNewEntity); org.ovirt.engine.core.bll.exportimport.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> command = new org.ovirt.engine.core.bll.exportimport.ImportVmCommandTest.ImportVmCommandStub(parameters, poolPerCluster, externalVmMacsFinder<START_MOD>, externalVnicProfileMappingValidator<END_MOD>); command.init(); java.util.Set<javax.validation.ConstraintViolation<org.ovirt.engine.core.common.action.ImportVmParameters>> validate = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, command.getValidationGroups().toArray(new java.lang.Class<?>[0])); assertEquals(validate.isEmpty(), (!isImportAsNewEntity)); }	private void checkVmName(boolean isImportAsNewEntity, java.lang.String name) { cmd.getParameters().getVm().setName(name); cmd.getParameters().setImportAsNewEntity(isImportAsNewEntity); cmd.init(); java.util.Set<javax.validation.ConstraintViolation<org.ovirt.engine.core.common.action.ImportVmParameters>> validate = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(cmd.getParameters(), cmd.getValidationGroups().toArray(new java.lang.Class<?>[0])); assertEquals(validate.isEmpty(), (!isImportAsNewEntity)); }
@org.junit.Test public void testAliasGenerationByAddVmImagesAndSnapshotsWithoutCollapse() { org.ovirt.engine.core.common.action.ImportVmParameters params = createParameters(); params.setCopyCollapse(false); org.ovirt.engine.core.bll.exportimport.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> cmd = spy(new org.ovirt.engine.core.bll.exportimport.ImportVmCommandTest.ImportVmCommandStub(params, poolPerCluster, externalVmMacsFinder<START_MOD>, externalVnicProfileMappingValidator<END_MOD>)); cmd.init(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : params.getVm().getImages()) { doNothing().when(cmd).saveImage(image); doNothing().when(cmd).saveSnapshotIfNotExists(any(org.ovirt.engine.core.compat.Guid.class), eq(image)); doNothing().when(cmd).saveDiskImageDynamic(image); } org.ovirt.engine.core.common.businessentities.storage.DiskImage activeDisk = params.getVm().getImages().get(1); doNothing().when(cmd).updateImage(activeDisk); doNothing().when(cmd).saveBaseDisk(activeDisk); doNothing().when(cmd).updateActiveSnapshot(any(org.ovirt.engine.core.compat.Guid.class)); doNothing().when(cmd).saveDiskVmElement(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class)); cmd.addVmImagesAndSnapshots(); assertEquals( alias not generated "testVm_Disk1", activeDisk.getDiskAlias()); }	@org.junit.Test public void testAliasGenerationByAddVmImagesAndSnapshotsWithoutCollapse() { cmd.getParameters().setCopyCollapse(false); cmd.init(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : cmd.getParameters().getVm().getImages()) { doNothing().when(cmd).saveImage(image); doNothing().when(cmd).saveSnapshotIfNotExists(any(org.ovirt.engine.core.compat.Guid.class), eq(image)); doNothing().when(cmd).saveDiskImageDynamic(image); } org.ovirt.engine.core.common.businessentities.storage.DiskImage activeDisk = cmd.getParameters().getVm().getImages().get(1); doNothing().when(cmd).updateImage(activeDisk); doNothing().when(cmd).saveBaseDisk(activeDisk); doNothing().when(cmd).updateActiveSnapshot(any(org.ovirt.engine.core.compat.Guid.class)); doNothing().when(cmd).saveDiskVmElement(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class)); cmd.addVmImagesAndSnapshots(); assertEquals("Disk alias not generated", "testVm_Disk1", activeDisk.getDiskAlias()); }
private void validateVnicProfileMapping(org.ovirt.engine.api.model.VnicProfileMapping mapping) { if (!(mapping.isSetSourceNetworkName())) { badRequest( profile mapping is missing source network name. } if (!(mapping.isSetSourceNetworkProfileName())) { badRequest( profile mapping is missing source network profile name. } if (!(mapping.isSetTargetVnicProfile())) { badRequest( profile mapping is missing target vNic profile. } if (mapping.getTargetVnicProfile().isSetId()) { asGuid(mapping.getTargetVnicProfile().getId()); }<START_MOD> }<END_MOD>	private void validateVnicProfileMapping(org.ovirt.engine.api.model.VnicProfileMapping mapping) { if (!(mapping.isSetSourceNetworkName())) { badRequest("vNic profile mapping is missing source network name."); } if (!(mapping.isSetSourceNetworkProfileName())) { badRequest("vNic profile mapping is missing source network profile name."); } if ((mapping.isSetTargetVnicProfile()) && (mapping.getTargetVnicProfile().isSetId())) { asGuid(mapping.getTargetVnicProfile().getId()); } }
private org.ovirt.engine.core.compat.Guid getTargetVnicProfileId(org.ovirt.engine.api.model.VnicProfileMapping model) { return model.isSetTargetVnicProfile() ? org.ovirt.engine.core.compat.Guid.createGuidFromString(model.getTargetVnicProfile().getId()) : null; }	private static org.ovirt.engine.core.compat.Guid getTargetVnicProfileId(org.ovirt.engine.api.model.VnicProfileMapping model) { return model.isSetTargetVnicProfile() ? org.ovirt.engine.core.compat.Guid.createGuidFromString(model.getTargetVnicProfile().getId()) : null; }
private org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping mapSingleMappingEntry(org.ovirt.engine.api.model.VnicProfileMapping model) { return new org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping(model.getSourceNetworkName(), model.getSourceNetworkProfileName(), <START_MOD>getTargetVnicProfileId<END_MOD>(model)); }	private static org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping mapSingleMappingEntry(org.ovirt.engine.api.model.VnicProfileMapping model) { return new org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping(model.getSourceNetworkName(), model.getSourceNetworkProfileName(), org.ovirt.engine.api.restapi.types.ExternalVnicProfileMappingMapper.getTargetVnicProfileId(model)); }
public void fireEvents(org.ovirt.vdsmfake.task.TaskType taskType, long delay, java.lang.Object entity) throws java.lang.InterruptedException { final java.lang.String WaitForLaunch = "WaitForLaunch"; final java.lang.String PoweringUp = "Powering up"; final java.lang.String Up = "Up"; final java.lang.String PoweredDown = "Powering down"; final java.lang.String Down = "Down"; org.ovirt.vdsmfake.rpc.json.VM vm = ((org.ovirt.vdsmfake.rpc.json.VM) (entity)); switch (taskType) { case START_VM : vmUpdateStatus(vm, VM.VMStatus.WaitForLaunch, delay, WaitForLaunch, org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.service, false); vmUpdateStatus(vm, VM.VMStatus.PoweringUp, delay, PoweringUp, org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.service, false); break; case START_VM_AS_UP : vmUpdateStatus(vm, VM.VMStatus.Up, delay, Up, org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.service, true); break; case SHUTDOWN_VM : vmUpdateStatus(vm, VM.VMStatus.PoweredDown, delay, PoweredDown, org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.service, false); if (vm != null) { vm.getHost().getRunningVMs().remove(vm.getId()); } vmUpdateStatus(vm, VM.VMStatus.Down, 0, Down, org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.service, true); break; default : org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.log.error("Unhandled status detected."); break; } }	public void fireEvents(org.ovirt.vdsmfake.task.TaskType taskType, long delay, java.lang.Object entity) throws java.lang.InterruptedException { final java.lang.String WaitForLaunch = "WaitForLaunch"; final java.lang.String PoweringUp = "Powering up"; final java.lang.String Up = "Up"; final java.lang.String PoweredDown = "Powering down"; final java.lang.String Down = "Down"; org.ovirt.vdsmfake.domain.VM vm = ((org.ovirt.vdsmfake.domain.VM) (entity)); switch (taskType) { case START_VM : vmUpdateStatus(vm, VM.VMStatus.WaitForLaunch, delay, WaitForLaunch, org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.service, false); vmUpdateStatus(vm, VM.VMStatus.PoweringUp, delay, PoweringUp, org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.service, false); break; case START_VM_AS_UP : vmUpdateStatus(vm, VM.VMStatus.Up, delay, Up, org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.service, true); break; case SHUTDOWN_VM : vmUpdateStatus(vm, VM.VMStatus.PoweredDown, delay, PoweredDown, org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.service, false); if (vm != null) { vm.getHost().getRunningVMs().remove(vm.getId()); } vmUpdateStatus(vm, VM.VMStatus.Down, 0, Down, org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.service, true); break; default : org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.log.error("Unhandled status detected."); break; } }
public static java.util.Map<java.lang.String, org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient> getClientsMap() { return org.ovirt.vdsmfake.rpc.json.JsonRpcServer.clientsMap; }	public static org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient getClientByVmId(java.lang.String vmId) { return org.ovirt.vdsmfake.rpc.json.JsonRpcServer.clientsMap.get(vmId); }
public int getJsonThreadPool() { return this.jsonThreadPool; }	public int getJsonThreadPoolSize() { return this.jsonThreadPoolSize; }
private boolean isUpdateRequired(org.ovirt.vdsmfake.rpc.json.VM.VMStatus status) { return status == (VM.VMStatus.Up) ? true : status == (VM.VMStatus.PoweredDown) ? true : status == (VM.VMStatus.Paused) ? true : false; }	private boolean isUpdateRequired(org.ovirt.vdsmfake.domain.VM.VMStatus status) { return status == (VM.VMStatus.Up) ? true : status == (VM.VMStatus.PoweredDown) ? true : status == (VM.VMStatus.Paused) ? true : false; }
private void vmUpdateStatus(final org.ovirt.vdsmfake.rpc.json.VM vm, final org.ovirt.vdsmfake.rpc.json.VM.VMStatus status, final long delay, final java.lang.String msg, final java.util.concurrent.ExecutorService service, final boolean removeClient) throws java.lang.InterruptedException { service.submit(new org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.EventHandler(vm, status, delay, msg, removeClient)); }	private void vmUpdateStatus(final org.ovirt.vdsmfake.domain.VM vm, final org.ovirt.vdsmfake.domain.VM.VMStatus status, final long delay, final java.lang.String msg, final java.util.concurrent.ExecutorService service, final boolean removeClient) throws java.lang.InterruptedException { service.submit(new org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.EventHandler(vm, status, delay, msg, removeClient)); }
private void send(java.lang.String message, java.lang.String vmID, boolean removeClient) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient client = null; try { client = org.ovirt.vdsmfake.rpc.json.JsonRpcServer.getClientsMap().get(vmID); client.sendMessage(message.getBytes()); org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.log.debug("sending events message {}", message); } catch (org.ovirt.vdsm.jsonrpc.client.ClientConnectionException e) { org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.log.error("Host {}, failed to send event message {}", client.getHostname(), e); } if (removeClient) { org.ovirt.vdsmfake.rpc.json.JsonRpcServer.removeReactorsMap(vmID); } }	private void send(java.lang.String message, java.lang.String vmID, boolean removeClient) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient client = null; try { client = org.ovirt.vdsmfake.rpc.json.JsonRpcServer.getClientByVmId(vmID); client.sendMessage(message.getBytes()); org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.log.debug("sending events message {}", message); } catch (org.ovirt.vdsm.jsonrpc.client.ClientConnectionException e) { org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.log.error("Host {}, failed to send event message {}", client.getHostname(), e); } if (removeClient) { org.ovirt.vdsmfake.rpc.json.JsonRpcServer.removeClientByVmId(vmID); } }
public static void removeReactorsMap(java.lang.String vmId) { org.ovirt.vdsmfake.rpc.json.JsonRpcServer.clientsMap.remove(vmId); }	public static void removeClientByVmId(java.lang.String vmId) { org.ovirt.vdsmfake.rpc.json.JsonRpcServer.clientsMap.remove(vmId); }
public int getEventsThreadPool() { return this.eventsThreadPool; }	public int getEventsThreadPoolSize() { return this.eventsThreadPoolSize; }
public void run() { try { java.util.concurrent.TimeUnit.MILLISECONDS.sleep(delay); vm.setStatus(status); sendNotification(msg, vm.getId(), removeClient); org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.log.info("VM {} set to {}", vm.getId(), msg); if (isUpdateRequired(status)) { org.ovirt.vdsmfake.rpc.json.VdsmManager.getInstance().updateHost(vm.getHost()); } } catch (java.lang.Exception e) { org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.log.error(e.toString()); } }	public void run() { try { java.util.concurrent.TimeUnit.MILLISECONDS.sleep(delay); vm.setStatus(status); sendNotification(msg, vm.getId(), removeClient); org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.log.info("VM {} set to {}", vm.getId(), msg); if (isUpdateRequired(status)) { org.ovirt.vdsmfake.domain.VdsmManager.getInstance().updateHost(vm.getHost()); } } catch (java.lang.Exception e) { org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.log.error(e.toString()); } }
@org.junit.Test public void testUpdateNetworkInfoMappedToEmpty() { when(mockTargetVnicProfileFinder.findTargetVnicProfile(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.EXTERNAL_NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME, externalVnicProfileMappings)).thenReturn(java.util.Optional.empty()); underTest.updateNetworkInfo(mockVmNetworkInterface, externalVnicProfileMappings); verify(mockTargetVnicProfileFinder).findTargetVnicProfile(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.EXTERNAL_NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME, externalVnicProfileMappings); verify(mockVmNetworkInterface).setVnicProfileId(null); verify(mockVmNetworkInterface).setVnicProfileName(null); verify(mockVmNetworkInterface).setNetworkName(null); }	@org.junit.Test public void testUpdateNetworkInfoMappedToEmpty() { when(mockExternalVnicProfileMappingFinder.findMappingEntry(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.EXTERNAL_NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME, externalVnicProfileMappings)).thenReturn(java.util.Optional.of(createMappingEntry(null))); underTest.updateNetworkInfo(mockVmNetworkInterface, externalVnicProfileMappings); verify(mockExternalVnicProfileMappingFinder).findMappingEntry(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.EXTERNAL_NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME, externalVnicProfileMappings); verify(mockVmNetworkInterface).setVnicProfileId(null); verify(mockVmNetworkInterface).setVnicProfileName(null); verify(mockVmNetworkInterface).setNetworkName(null); }
public void updateNetworkInfo(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic, java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> externalVnicProfileMappings) { <START_MOD>java.util.Optional<<END_MOD>org.ovirt.engine.core.common.businessentities.network.VnicProfile<START_MOD>><END_MOD> targetVnicProfile = targetVnicProfileFinder.findTargetVnicProfile(vnic.getNetworkName(), vnic.getVnicProfileName(), externalVnicProfileMappings); if (targetVnicProfile != null) { <START_MOD>if (targetVnicProfile.isPresent()) { final org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = targetVnicProfile.get(); setTargetVnicProfile(vnic, vnicProfile<END_MOD>.getId()<START_MOD>, vnicProfile.getName(), <END_MOD>getVnicProfileNetworkName(<START_MOD>vnicProfile<END_MOD>.getNetworkId())); <START_MOD>} else { setTargetVnicProfile(vnic, null, null, null); } } }<END_MOD>	public void updateNetworkInfo(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic, java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> externalVnicProfileMappings) { final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> mappingEntry = externalVnicProfileMappingFinder.findMappingEntry(vnic.getNetworkName(), vnic.getVnicProfileName(), externalVnicProfileMappings); if (mappingEntry.isPresent()) { final org.ovirt.engine.core.compat.Guid vnicProfileId = mappingEntry.get().getVnicProfileId(); if (vnicProfileId == null) { setTargetVnicProfile(vnic, null, null, null); } else { final org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = vnicProfileDao.get(vnicProfileId); setTargetVnicProfile(vnic, vnicProfile.getId(), vnicProfile.getName(), getVnicProfileNetworkName(vnicProfile.getNetworkId())); } } }
@org.junit.Test public void testUpdateNetworkInfo() { when(mockTargetVnicProfileFinder.findTargetVnicProfile(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.EXTERNAL_NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME, externalVnicProfileMappings)).thenReturn(<START_MOD>optionalVnicProfile<END_MOD>); when(mockNetworkDao.get(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.TARGET_NETWORK_ID)).thenReturn(targetNetwork); underTest.updateNetworkInfo(mockVmNetworkInterface, externalVnicProfileMappings); verify(mockTargetVnicProfileFinder).findTargetVnicProfile(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.EXTERNAL_NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME, externalVnicProfileMappings); verify(mockVmNetworkInterface).setVnicProfileId(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_ID); verify(mockVmNetworkInterface).setVnicProfileName(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME); verify(mockVmNetworkInterface).setNetworkName(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.TARGET_NETWORK_NAME); }	@org.junit.Test public void testUpdateNetworkInfo() { when(mockExternalVnicProfileMappingFinder.findMappingEntry(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.EXTERNAL_NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME, externalVnicProfileMappings)).thenReturn(java.util.Optional.of(createMappingEntry(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_ID))); when(mockNetworkDao.get(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.TARGET_NETWORK_ID)).thenReturn(targetNetwork); underTest.updateNetworkInfo(mockVmNetworkInterface, externalVnicProfileMappings); verify(mockExternalVnicProfileMappingFinder).findMappingEntry(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.EXTERNAL_NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME, externalVnicProfileMappings); verify(mockVmNetworkInterface).setVnicProfileId(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_ID); verify(mockVmNetworkInterface).setVnicProfileName(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME); verify(mockVmNetworkInterface).setNetworkName(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.TARGET_NETWORK_NAME); }
@org.junit.Before public void setUp() { externalVnicProfileMappings = new java.util.ArrayList(); <START_MOD>org.ovirt.engine.core.common.businessentities.network.VnicProfile <END_MOD>vnicProfile = new org.ovirt.engine.core.common.businessentities.network.VnicProfile(); vnicProfile.setId(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_ID); vnicProfile.setName(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME); vnicProfile.setNetworkId(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.TARGET_NETWORK_ID); <START_MOD>optionalVnicProfile = java.util.Optional.of(vnicProfile); <END_MOD>targetNetwork = new org.ovirt.engine.core.common.businessentities.network.Network(); targetNetwork.setName(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.TARGET_NETWORK_NAME); when(mockVmNetworkInterface.getNetworkName()).thenReturn(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.EXTERNAL_NETWORK_NAME); when(mockVmNetworkInterface.getVnicProfileName()).thenReturn(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME); }	@org.junit.Before public void setUp() { externalVnicProfileMappings = new java.util.ArrayList(); org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = new org.ovirt.engine.core.common.businessentities.network.VnicProfile(); vnicProfile.setId(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_ID); vnicProfile.setName(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME); vnicProfile.setNetworkId(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.TARGET_NETWORK_ID); targetNetwork = new org.ovirt.engine.core.common.businessentities.network.Network(); targetNetwork.setName(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.TARGET_NETWORK_NAME); when(mockVmNetworkInterface.getNetworkName()).thenReturn(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.EXTERNAL_NETWORK_NAME); when(mockVmNetworkInterface.getVnicProfileName()).thenReturn(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME); when(mockVnicProfileDao.get(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_ID)).thenReturn(vnicProfile); }
@java.lang.Override public org.ovirt.engine.api.model.GraphicsConsoles list() { org.ovirt.engine.api.model.GraphicsConsoles consoles = new org.ovirt.engine.api.model.GraphicsConsoles(); java.util.Map<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.GraphicsInfo> graphicsTypeToGraphicsInfo; org.ovirt.engine.api.model.InstanceType entity = loadEntity(); java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsType> graphicsTypes = org.ovirt.engine.api.restapi.util.DisplayHelper.getGraphicsTypesForEntity(this, guid, true); graphicsTypeToGraphicsInfo = new java.util.HashMap(); for (org.ovirt.engine.core.common.businessentities.GraphicsType type : graphicsTypes) { graphicsTypeToGraphicsInfo.put(type, null); } for (java.util.Map.Entry<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.GraphicsInfo> graphicsInfo : graphicsTypeToGraphicsInfo.entrySet()) { consoles.getGraphicsConsoles().add(addLinks(populate(org.ovirt.engine.api.restapi.types.VmMapper.map(graphicsInfo, null), entity))); } return consoles; }	@java.lang.Override public org.ovirt.engine.api.model.GraphicsConsoles list() { org.ovirt.engine.api.model.GraphicsConsoles consoles = new org.ovirt.engine.api.model.GraphicsConsoles(); org.ovirt.engine.core.common.businessentities.InstanceType entity = loadEntity(); org.ovirt.engine.api.restapi.resource.BackendGraphicsConsoleHelper.list(this, guid).entrySet().forEach(( graphicsInfo) -> consoles.getGraphicsConsoles().add(addLinks(populate(org.ovirt.engine.api.restapi.types.VmMapper.map(graphicsInfo, null), entity)))); return consoles; }
@java.lang.Override <START_MOD>public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.GraphicsConsole console) { <END_MOD>org.ovirt.engine.core.common.businessentities.<START_MOD>GraphicsDevice device = getMapper(org.ovirt.engine.api.model.GraphicsConsole.class<END_MOD>, org.ovirt.engine.core.common.businessentities.<START_MOD>GraphicsDevice.class).map(console, null); device.setVmId(guid); <END_MOD>org.ovirt.engine.core.common.<START_MOD>action.VdcReturnValueBase res = doCreateEntity(VdcActionType.AddGraphicsDevice, createAddGraphicsDeviceParams(device)); if ((res != null) && (res.getSucceeded())<END_MOD>) { <START_MOD>org.ovirt.engine.api.restapi.resource.utils.GraphicsConsoleResourceHelper.find(console, this::list); } throw<END_MOD> new <START_MOD>javax.ws.rs.WebApplicationException(javax.ws.rs.core.Response.status(Response.Status.NOT_FOUND).build()<END_MOD>); }	@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.GraphicsConsole console) { org.ovirt.engine.core.common.businessentities.GraphicsDevice device = getMapper(org.ovirt.engine.api.model.GraphicsConsole.class, org.ovirt.engine.core.common.businessentities.GraphicsDevice.class).map(console, null); device.setVmId(guid); org.ovirt.engine.core.common.action.VdcReturnValueBase res = doCreateEntity(VdcActionType.AddGraphicsDevice, createAddGraphicsDeviceParams(device)); if ((res != null) && (res.getSucceeded())) { return org.ovirt.engine.api.restapi.resource.BackendGraphicsConsoleHelper.find(console, this::list); } throw new javax.ws.rs.WebApplicationException(javax.ws.rs.core.Response.status(Response.Status.NOT_FOUND).build()); }
@javax.ws.rs.GET @javax.ws.rs.Produces({ org.ovirt.engine.api.resource.ApiMediaType.APPLICATION_X_VIRT_VIEWER }) public javax.ws.rs.core.Response generateDescriptor() { org.ovirt.engine.core.common.businessentities.GraphicsType graphicsType = <START_MOD>org.ovirt.engine.api.restapi.resource.utils.GraphicsConsoleResourceHelper.<END_MOD>asGraphicsType(<START_MOD>this, consoleId<END_MOD>); org.ovirt.engine.core.common.console.ConsoleOptions consoleOptions = new org.ovirt.engine.core.common.console.ConsoleOptions(graphicsType); consoleOptions.setVmId(<START_MOD>guid<END_MOD>); org.ovirt.engine.core.common.queries.VdcQueryReturnValue configuredOptionsReturnValue = runQuery(VdcQueryType.ConfigureConsoleOptions, new org.ovirt.engine.core.common.queries.ConfigureConsoleOptionsParams(consoleOptions, true)); if (!(configuredOptionsReturnValue.getSucceeded())) { return handleConfigureConsoleError(configuredOptionsReturnValue); } org.ovirt.engine.core.common.queries.VdcQueryReturnValue consoleDescriptorReturnValue = runQuery(VdcQueryType.GetConsoleDescriptorFile, new org.ovirt.engine.core.common.queries.ConsoleOptionsParams(configuredOptionsReturnValue.getReturnValue())); javax.ws.rs.core.Response.ResponseBuilder builder; if ((consoleDescriptorReturnValue.getSucceeded()) && ((consoleDescriptorReturnValue.getReturnValue()) != null)) { builder = javax.ws.rs.core.Response.ok(((java.lang.String) (consoleDescriptorReturnValue.getReturnValue())).getBytes(java.nio.charset.StandardCharsets.UTF_8), ApiMediaType.APPLICATION_X_VIRT_VIEWER); } else { builder = javax.ws.rs.core.Response.noContent(); } return builder.build(); }	@javax.ws.rs.GET @javax.ws.rs.Produces({ org.ovirt.engine.api.resource.ApiMediaType.APPLICATION_X_VIRT_VIEWER }) public javax.ws.rs.core.Response generateDescriptor() { org.ovirt.engine.core.common.businessentities.GraphicsType graphicsType = org.ovirt.engine.api.restapi.resource.BackendGraphicsConsoleHelper.asGraphicsType(this, consoleId); org.ovirt.engine.core.common.console.ConsoleOptions consoleOptions = new org.ovirt.engine.core.common.console.ConsoleOptions(graphicsType); consoleOptions.setVmId(guid); org.ovirt.engine.core.common.queries.VdcQueryReturnValue configuredOptionsReturnValue = runQuery(VdcQueryType.ConfigureConsoleOptions, new org.ovirt.engine.core.common.queries.ConfigureConsoleOptionsParams(consoleOptions, true)); if (!(configuredOptionsReturnValue.getSucceeded())) { return handleConfigureConsoleError(configuredOptionsReturnValue); } org.ovirt.engine.core.common.queries.VdcQueryReturnValue consoleDescriptorReturnValue = runQuery(VdcQueryType.GetConsoleDescriptorFile, new org.ovirt.engine.core.common.queries.ConsoleOptionsParams(configuredOptionsReturnValue.getReturnValue())); javax.ws.rs.core.Response.ResponseBuilder builder; if ((consoleDescriptorReturnValue.getSucceeded()) && ((consoleDescriptorReturnValue.getReturnValue()) != null)) { builder = javax.ws.rs.core.Response.ok(((java.lang.String) (consoleDescriptorReturnValue.getReturnValue())).getBytes(java.nio.charset.StandardCharsets.UTF_8), ApiMediaType.APPLICATION_X_VIRT_VIEWER); } else { builder = javax.ws.rs.core.Response.noContent(); } return builder.build(); }
protected org.ovirt.engine.api.model.InstanceType loadEntity() { return getEntity(org.ovirt.engine.api.model.InstanceType.class, VdcQueryType.GetInstanceType, new org.ovirt.engine.core.common.queries.GetVmTemplateParameters(<START_MOD>guid<END_MOD>), <START_MOD>guid<END_MOD>.toString(), true); }	protected org.ovirt.engine.core.common.businessentities.InstanceType loadEntity() { return getEntity(org.ovirt.engine.core.common.businessentities.InstanceType.class, VdcQueryType.GetInstanceType, new org.ovirt.engine.core.common.queries.GetVmTemplateParameters(guid), guid.toString(), true); }