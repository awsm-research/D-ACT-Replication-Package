PR_ID,filename,codebase,codebase-hash,initial,initial-hash,approved,approved-hash,submited_date,total_patchsets
142230,java_com_google_gerrit_elasticsearch_ElasticGroupIndex.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override protected com.google.gerrit.server.group.InternalGroup fromDoc(com.google.gson.JsonObject json, java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get(""_source""); if (source == null) { source = json.getAsJsonObject().get(""fields""); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(source.getAsJsonObject().get(GroupField.UUID.getName()).getAsString()); return groupCache.get().get(uuid).orElse(null); }",74399cb57daea1fbfde165b34e8999e4287c0865,"@java.lang.Override protected com.google.gerrit.server.group.InternalGroup fromDocument(com.google.gson.JsonObject json, java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get(""_source""); if (source == null) { source = json.getAsJsonObject().get(""fields""); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(source.getAsJsonObject().get(GroupField.UUID.getName()).getAsString()); return groupCache.get().get(uuid).orElse(null); }",9195380d34c979a3dfafaa6ce82cad2e1f3a0ca0,2017-11-20 08:49:50,3
142230,java_com_google_gerrit_elasticsearch_ElasticProjectIndex.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override protected com.google.gerrit.server.project.ProjectData fromDoc(com.google.gson.JsonObject json, java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get(""_source""); if (source == null) { source = json.getAsJsonObject().get(""fields""); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(source.getAsJsonObject().get(ProjectField.NAME.getName()).getAsString()); return projectCache.get().get(nameKey).toProjectData(); }",00bba1905f0e6fa4dd2bf9efd71323163af631c0,"@java.lang.Override protected com.google.gerrit.server.project.ProjectData fromDocument(com.google.gson.JsonObject json, java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get(""_source""); if (source == null) { source = json.getAsJsonObject().get(""fields""); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(source.getAsJsonObject().get(ProjectField.NAME.getName()).getAsString()); return projectCache.get().get(nameKey).toProjectData(); }",ca7047384ba042c5c8cba477d3f4fc771d02387b,2017-11-20 08:49:50,3
142230,java_com_google_gerrit_elasticsearch_AbstractElasticIndex.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected abstract V fromDoc(com.google.gson.JsonObject doc, java.util.Set<java.lang.String> fields);",f55d925baed36051768e5b102c32fd06583d4a42,"protected abstract V fromDocument(com.google.gson.JsonObject doc, java.util.Set<java.lang.String> fields);",a646de062dbeacd8a3324a762e1e9c3f0b6b4586,2017-11-20 08:49:50,3
142230,java_com_google_gerrit_elasticsearch_ElasticAccountIndex.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override protected com.google.gerrit.server.account.AccountState fromDoc(com.google.gson.JsonObject json, java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get(""_source""); if (source == null) { source = json.getAsJsonObject().get(""fields""); } com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(source.getAsJsonObject().get(com.google.gerrit.elasticsearch.ID.getName()).getAsInt()); return accountCache.get().get(id); }",b9d91a87d8faef6efbf31245b494d93043de47ae,"@java.lang.Override protected com.google.gerrit.server.account.AccountState fromDocument(com.google.gson.JsonObject json, java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get(""_source""); if (source == null) { source = json.getAsJsonObject().get(""fields""); } com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(source.getAsJsonObject().get(com.google.gerrit.elasticsearch.ID.getName()).getAsInt()); return accountCache.get().get(id); }",5ea1b1b48370fae594fadf3bb8204cd053331860,2017-11-20 08:49:50,3
142230,java_com_google_gerrit_elasticsearch_AbstractElasticIndex.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public com.google.gwtorm.server.ResultSet<V> read() throws com.google.gwtorm.server.OrmException { return readImpl(( doc) -> this.fromDoc(doc, opts.fields())); }",916e17a8c1e0785e665a07252d0a30746936a674,"@java.lang.Override public com.google.gwtorm.server.ResultSet<V> read() throws com.google.gwtorm.server.OrmException { return readImpl(( doc) -> this.fromDocument(doc, opts.fields())); }",b39993b3b92cb20f43030175ecc727871a4659a6,2017-11-20 08:49:50,3
142611,java_com_google_gerrit_server_schema_NotesMigrationSchemaFactory.java,@java.lang.Override public com.google.gerrit.reviewdb.server.ReviewDb open() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = delegate.open(); if (migration.readChanges()) { if (migration.disableChangeReviewDb()) { db = new com.google.gerrit.server.schema.NoChangesReviewDbWrapper(db); } db = new com.google.gerrit.reviewdb.server.DisallowReadFromChangesReviewDbWrapper(db); } if (groupsMigration.readFromNoteDb()) { db = new com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper(db); } return db; },63900c1ce25281fd5da04da9db6fb60d4ea1ea65,@java.lang.Override public com.google.gerrit.reviewdb.server.ReviewDb open() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = delegate.open(); if (migration.readChanges()) { if (migration.disableChangeReviewDb()) { db = new com.google.gerrit.server.schema.NoChangesReviewDbWrapper(db); } db = new com.google.gerrit.reviewdb.server.DisallowReadFromChangesReviewDbWrapper(db); } if (groupsMigration.readFromNoteDb()) { if (groupsMigration.disableGroupReviewDb()) { db = new com.google.gerrit.server.schema.NoGroupsReviewDbWrapper(db); } db = new com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper(db); } return db; },a577fe57ed9a4097a3c7d7e78706d18e540ddd6c,@java.lang.Override public com.google.gerrit.reviewdb.server.ReviewDb open() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = delegate.open(); if ((migration.readChanges()) && (migration.disableChangeReviewDb())) { db = new com.google.gerrit.server.schema.NoChangesReviewDbWrapper(db); } if ((groupsMigration.readFromNoteDb()) && (groupsMigration.disableGroupReviewDb())) { db = new com.google.gerrit.server.schema.NoGroupsReviewDbWrapper(db); } if (migration.readChanges()) { db = new com.google.gerrit.reviewdb.server.DisallowReadFromChangesReviewDbWrapper(db); } if (groupsMigration.readFromNoteDb()) { db = new com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper(db); } return db; },b0f7e965be3f54ed886ed15a0afa5cc3ed7db9f6,2017-11-20 10:31:50,3
143110,java_com_google_gerrit_server_group_db_GroupsUpdate.java,"static java.lang.String getGroupName(com.google.gerrit.server.account.GroupCache groupCache, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { return groupCache.get(groupUuid).map(InternalGroup::getName).map(( name) -> formatNameEmail(name, groupUuid.get())).orElse(groupUuid.get()); }",0be93974c80fda09ee00f61a9697cc50421fd6a2,"static java.lang.String getGroupName(com.google.gerrit.server.account.GroupCache groupCache, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { java.lang.String uuid = groupUuid.get(); java.lang.String name = groupCache.get(groupUuid).map(InternalGroup::getName).orElse(uuid); return com.google.gerrit.server.group.db.GroupsUpdate.formatNameEmail(name, uuid); }",cbd1cb259ddd03ff99c64c3df6eed031f416aa0b,"static java.lang.String getGroupName(com.google.gerrit.server.account.GroupBackend groupBackend, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { java.lang.String uuid = groupUuid.get(); com.google.gerrit.common.data.GroupDescription.Basic desc = groupBackend.get(groupUuid); java.lang.String name = (desc != null) ? desc.getName() : uuid; return com.google.gerrit.server.group.db.GroupsUpdate.formatNameEmail(name, uuid); }",92778e6252dfb7b47d30c47739a07ea75e8b2017,2017-11-21 10:31:55,4
143110,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void includeExternalGroup() throws java.lang.Exception { java.lang.String g = createGroup(""group""); java.lang.String subgroupUuid = SystemGroupBackend.REGISTERED_USERS.get(); gApi.groups().id(g).addGroups(subgroupUuid); java.util.List<com.google.gerrit.extensions.common.GroupInfo> subgroups = gApi.groups().id(g).includedGroups(); assertThat(subgroups).hasSize(1); assertThat(subgroups.get(0).id).isEqualTo(subgroupUuid.replace("":"", ""%3A"")); assertThat(subgroups.get(0).groupId).isNull(); if (groupsMigration.writeToNoteDb()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().id(g).get().id); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = com.google.gerrit.server.group.db.testing.GroupTestUtil.log(repo, com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid)); assertThat(log).hasSize(2); assertThat(log.get(0)).message().isEqualTo(""Create group""); assertThat(log.get(1)).message().isEqualTo(""Update group\n\nAdd-group: global:Registered-Users <global:Registered-Users>""); java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> audit = groups.getSubgroupsAudit(db, repo, uuid); assertThat(audit).hasSize(1); assertThat(audit.get(0).getIncludeUUID()).isEqualTo(SystemGroupBackend.REGISTERED_USERS); } } }",8bf0a39c678d172b29ab40de27c90510ec428ce8,"@org.junit.Test public void includeExternalGroup() throws java.lang.Exception { java.lang.String g = createGroup(""group""); java.lang.String subgroupUuid = SystemGroupBackend.REGISTERED_USERS.get(); gApi.groups().id(g).addGroups(subgroupUuid); java.util.List<com.google.gerrit.extensions.common.GroupInfo> subgroups = gApi.groups().id(g).includedGroups(); assertThat(subgroups).hasSize(1); assertThat(subgroups.get(0).id).isEqualTo(subgroupUuid.replace("":"", ""%3A"")); assertThat(subgroups.get(0).name).isEqualTo(""Registered Users""); assertThat(subgroups.get(0).groupId).isNull(); java.util.List<? extends com.google.gerrit.extensions.common.GroupAuditEventInfo> auditEvents = gApi.groups().id(g).auditLog(); assertThat(auditEvents).hasSize(1); assertAuditEvent(auditEvents.get(0), Type.ADD_GROUP, admin.id, ""Registered Users""); }",21423adb8ea9da723e2d0096e1bf72b4c013bc3f,2017-11-21 10:31:55,4
143310,src_main_java_com_googlesource_gerrit_plugins_javamelody_Module.java,"@java.lang.Override protected void configure() { bind(com.google.gerrit.extensions.config.CapabilityDefinition.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(MonitoringCapability.ID)).to(com.googlesource.gerrit.plugins.javamelody.MonitoringCapability.class); if (cfg.getBoolean(""allowTopMenu"", true)) { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.TopMenu.class).to(com.googlesource.gerrit.plugins.javamelody.MonitoringTopMenu.class); } }",5a8d8351a75e9bfc8e1a6e487050110a5a34da8e,"@java.lang.Override protected void configure() { bind(com.google.gerrit.extensions.config.CapabilityDefinition.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(MonitoringCapability.ID)).to(com.googlesource.gerrit.plugins.javamelody.MonitoringCapability.class); if (cfg.getBoolean(""allowTopMenu"", true)) { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.TopMenu.class).to(com.googlesource.gerrit.plugins.javamelody.MonitoringTopMenu.class); } final java.nio.file.Path directory = TEMPORARY_DIRECTORY.resolve(pluginName); final java.nio.file.Path storage_directory; if ((java.nio.file.Files.exists(directory)) && (java.nio.file.Files.isDirectory(directory))) { storage_directory = directory; } else { storage_directory = tmpDir.resolve(pluginName); } if ((java.lang.System.getProperty(((pluginName) + "".storage-directory""))) == null) { java.lang.System.setProperty(((pluginName) + "".storage-directory""), cfg.getString(""storage_directory"", storage_directory.toString())); } }",2232bb1667828eaae93979ed3b3343d83cd470eb,"@java.lang.Override protected void configure() { bind(com.google.gerrit.extensions.config.CapabilityDefinition.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(MonitoringCapability.ID)).to(com.googlesource.gerrit.plugins.javamelody.MonitoringCapability.class); if (cfg.getBoolean(""allowTopMenu"", true)) { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.TopMenu.class).to(com.googlesource.gerrit.plugins.javamelody.MonitoringTopMenu.class); } }",5a8d8351a75e9bfc8e1a6e487050110a5a34da8e,2017-11-21 11:12:23,2
143310,src_main_java_com_googlesource_gerrit_plugins_javamelody_GerritMonitoringFilter.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String getStorageDir() { final java.nio.file.Path tmp = com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.TEMPORARY_DIRECTORY.resolve(com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.JAVAMELODY_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); } if (!(java.nio.file.Files.isDirectory(defaultDataDir))) { try { java.nio.file.Files.createDirectories(defaultDataDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.log.error(""Creation of javamelody data dir [{}] failed."", defaultDataDir, e); throw new java.lang.RuntimeException(e); } } return defaultDataDir.toString(); }",b28d8e40275c30b0738a064834c3b2a7cf8a85b9,"private java.lang.String getStorageDir() { final java.nio.file.Path tmp = java.nio.file.Paths.get(java.lang.System.getProperty(""java.io.tmpdir"")).resolve(com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.JAVAMELODY_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); } if (!(java.nio.file.Files.isDirectory(defaultDataDir))) { try { java.nio.file.Files.createDirectories(defaultDataDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.log.error(""Creation of javamelody data dir [{}] failed."", defaultDataDir, e); throw new java.lang.RuntimeException(e); } } return defaultDataDir.toString(); }",e93f8f48d2e4438e117a595ba713d2d6d64eaa5d,2017-11-21 11:12:23,2
142232,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo, java.lang.String commitMessage) throws java.io.IOException { return createCommit(repo, commitMessage, null); }",44f7b42cc2bc7fe333d6003c49e8c3b99eb2c9ed,"@org.junit.Test @com.google.gerrit.acceptance.Sandboxed public void blockReviewDbUpdatesOnGroupUpdate() throws java.lang.Exception { assume().that(groupsInNoteDb()).isFalse(); java.lang.String group1 = gApi.groups().create(name(""foo"")).get().id; java.lang.String group2 = gApi.groups().create(name(""bar"")).get().id; cfg.setBoolean(""user"", null, ""blockReviewDbGroupUpdates"", true); try { gApi.groups().id(group1).addGroups(group2); fail(""Expected RestApiException: Updates to groups in ReviewDb are blocked""); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { assertWriteGroupToReviewDbBlockedException(e); } }",ead9317fbc3d25f986c26b1679be74d09b4f90dc,2017-11-21 12:05:38,4
142232,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo, java.lang.String commitMessage, @com.google.gerrit.common.Nullable org.eclipse.jgit.lib.ObjectId treeId) throws java.io.IOException { try (org.eclipse.jgit.lib.ObjectInserter oi = repo.newObjectInserter()) { if (treeId == null) { treeId = oi.insert(Constants.OBJ_TREE, new byte[]{ }); } org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), com.google.gerrit.common.TimeUtil.nowTs()); org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(treeId); cb.setCommitter(ident); cb.setAuthor(ident); cb.setMessage(commitMessage); org.eclipse.jgit.lib.ObjectId commit = oi.insert(cb); oi.flush(); return commit; } }",119783a1a7953ca2b8227f7df5ec65de2bc30b0c,"private void assertWriteGroupToReviewDbBlockedException(java.lang.Exception e) throws java.lang.Exception { java.lang.Throwable t = com.google.common.base.Throwables.getRootCause(e); assertThat(t).isInstanceOf(com.google.gwtorm.server.OrmException.class); assertThat(t.getMessage()).isEqualTo(""Updates to groups in ReviewDb are blocked""); }",54b6df98024588e713c4924c64d536753fd402a0,2017-11-21 12:05:38,4
142232,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void pushToDeletedGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name(""fo"")).get().id)); assertPushToGroupBranch(allUsers, groupRef, true, ""group update not allowed""); }",90173fd5c8e4d8d8d8c2d03fe2cab3c3758d6b09,"@org.junit.Test public void pushToDeletedGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name(""foo"")).get().id)); assertPushToGroupBranch(allUsers, groupRef, true, ""group update not allowed""); }",f0ef712397eb5e8143b3bed52ab14835b75da32c,2017-11-21 12:05:38,4
142232,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"@org.junit.Test @com.google.gerrit.acceptance.Sandboxed public void cannotDeleteGroupBranch() throws java.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); grant(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.DELETE, true, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); com.google.gerrit.server.group.InternalGroup adminGroup = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""Administrators"")).orElse(null); assertThat(adminGroup).isNotNull(); java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroup.getGroupUUID()); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); org.eclipse.jgit.transport.PushResult r = com.google.gerrit.acceptance.GitUtil.deleteRef(allUsersRepo, groupRef); org.eclipse.jgit.transport.RemoteRefUpdate refUpdate = r.getRemoteUpdate(groupRef); assertThat(refUpdate.getStatus()).isEqualTo(RemoteRefUpdate.Status.REJECTED_OTHER_REASON); assertThat(refUpdate.getMessage()).contains(""Not allowed to delete group branch.""); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(repo.exactRef(groupRef)).isNotNull(); } }",bffbd87000f56663cccf43cb92d2625dc3e7c9bf,"@org.junit.Test @com.google.gerrit.acceptance.Sandboxed public void cannotDeleteGroupBranch() throws java.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); com.google.gerrit.server.group.InternalGroup adminGroup = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""Administrators"")).orElse(null); assertThat(adminGroup).isNotNull(); testCannotDeleteGroupBranch(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroup.getGroupUUID())); }",b8aa55371fd478d949a7a19fe24112affe507751,"@org.junit.Test @com.google.gerrit.acceptance.Sandboxed public void cannotCreateGroupNamesBranch() throws java.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(repo.exactRef(RefNames.REFS_GROUPNAMES).getObjectId()); org.eclipse.jgit.lib.RefUpdate updateRef = repo.updateRef(RefNames.REFS_GROUPNAMES); updateRef.setExpectedOldObjectId(commit.toObjectId()); updateRef.setNewObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); updateRef.setForceUpdate(true); assertThat(updateRef.delete()).isEqualTo(RefUpdate.Result.FORCED); } allowGlobalCapabilities(com.google.gerrit.acceptance.api.group.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); testCannotCreateGroupBranch(RefNames.REFS_GROUPNAMES, RefNames.REFS_GROUPNAMES); }",45c091c38f503da79f5fdc1ae605d38cedd8acac,2017-11-21 12:05:38,4
142232,java_com_google_gerrit_server_git_validators_CommitValidators.java,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { return java.util.Collections.emptyList(); } if ((receiveEvent.command.getRefName().startsWith(RefNames.REFS_GROUPS)) || (receiveEvent.command.getRefName().equals(RefNames.REFS_GROUPNAMES))) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""group update not allowed""); } return java.util.Collections.emptyList(); }",c561d44d60e5462afc337525f336e8e80c67f476,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { return java.util.Collections.emptyList(); } if (((receiveEvent.command.getRefName().startsWith(RefNames.REFS_GROUPS)) || (receiveEvent.command.getRefName().startsWith(RefNames.REFS_DELETED_GROUPS))) || (receiveEvent.command.getRefName().equals(RefNames.REFS_GROUPNAMES))) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""group update not allowed""); } return java.util.Collections.emptyList(); }",effa2b6fe396b83d823f9b9a7cfa1f68f291200a,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { return java.util.Collections.emptyList(); } if (com.google.gerrit.reviewdb.client.RefNames.isGroupRef(receiveEvent.command.getRefName())) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""group update not allowed""); } return java.util.Collections.emptyList(); }",1e8b5969ab0228fcb87f89d11992273fe50bf1c0,2017-11-21 12:05:38,4
142232,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void createBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref, java.lang.String commitMessage) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(project);org.eclipse.jgit.lib.ObjectInserter oi = r.newObjectInserter();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(r)) { org.eclipse.jgit.lib.ObjectId emptyCommit = createCommit(r, commitMessage); org.eclipse.jgit.lib.RefUpdate updateRef = r.updateRef(ref); updateRef.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); updateRef.setNewObjectId(emptyCommit); assertThat(updateRef.update(rw)).isEqualTo(RefUpdate.Result.NEW); } }",4f3865af0967447c93a755d2b6aebefc184d71f8,"private void createBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref, java.lang.String commitMessage) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(project);org.eclipse.jgit.lib.ObjectInserter oi = r.newObjectInserter();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(r)) { org.eclipse.jgit.lib.ObjectId emptyTree = oi.insert(Constants.OBJ_TREE, new byte[]{ }); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), com.google.gerrit.common.TimeUtil.nowTs()); org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(emptyTree); cb.setCommitter(ident); cb.setAuthor(ident); cb.setMessage(commitMessage); org.eclipse.jgit.lib.ObjectId emptyCommit = oi.insert(cb); oi.flush(); org.eclipse.jgit.lib.RefUpdate updateRef = r.updateRef(ref); updateRef.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); updateRef.setNewObjectId(emptyCommit); assertThat(updateRef.update(rw)).isEqualTo(RefUpdate.Result.NEW); } }",4adf3d90024a3501bd3e2921ad647a2cd9735e0e,2017-11-21 12:05:38,4
142232,java_com_google_gerrit_server_git_validators_MergeValidators.java,"@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || ((!(destBranch.get().startsWith(RefNames.REFS_GROUPS))) && (!(destBranch.get().equals(RefNames.REFS_GROUPNAMES))))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException(""group update not allowed""); }",27c92585456d9f9105fbb4da03f9004762f94fdf,"@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || (((!(destBranch.get().startsWith(RefNames.REFS_GROUPS))) && (!(destBranch.get().startsWith(RefNames.REFS_DELETED_GROUPS)))) && (!(destBranch.get().equals(RefNames.REFS_GROUPNAMES))))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException(""group update not allowed""); }",ce49a531e8199db2a52052cca7ad05be0df94976,"@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || (!(com.google.gerrit.reviewdb.client.RefNames.isGroupRef(destBranch.get())))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException(""group update not allowed""); }",74818e7177c62b55a030439e2f32610cc2b0e372,2017-11-21 12:05:38,4
142232,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void pushToDeletedGroupsBranchForNonAllUsersRepo() throws java.lang.Exception { assertCreateGroupBranch(project, null); java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name(""fo"")).get().id)); assertPushToGroupBranch(project, groupRef, true, null); }",18eeac552ee93cdf37803fa4affb3327fe96e631,"@org.junit.Test public void pushToDeletedGroupsBranchForNonAllUsersRepo() throws java.lang.Exception { assertCreateGroupBranch(project, null); java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name(""foo"")).get().id)); assertPushToGroupBranch(project, groupRef, true, null); }",e5836273c059629303119bcf572c1a170b7eb595,2017-11-21 12:05:38,4
143410,javatests_com_google_gerrit_server_git_ProjectConfigTest.java,"@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = util.commit(util.tree(util.file(""groups"", util.blob(com.google.gerrit.server.git.ProjectConfigTest.group(developers))), util.file(""project.config"", util.blob(((("""" + (""[plugin \""somePlugin\""]\n"" + ""key1 = "")) + (staff.toConfigValue())) + ""\n""))))); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationErrors()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationErrors()).getMessage()).isEqualTo((((""project.config: group \"""" + (staff.getName())) + ""\"" not in "") + (GroupList.FILE_NAME))); }",b525d0d4b4ae968d6a882f8bdaab59e8c725b98c,"@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add(""groups"", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add(""project.config"", ((("""" + (""[plugin \""somePlugin\""]\n"" + ""key1 = "")) + (staff.toConfigValue())) + ""\n"")).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationErrors()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationErrors()).getMessage()).isEqualTo((((""project.config: group \"""" + (staff.getName())) + ""\"" not in "") + (GroupList.FILE_NAME))); }",616d807e9df2bed48e7fec525c79d6e015827663,"@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add(""groups"", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add(""project.config"", (""[plugin \""somePlugin\""]\nkey1 = "" + (staff.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationErrors()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationErrors()).getMessage()).isEqualTo((((""project.config: group \"""" + (staff.getName())) + ""\"" not in "") + (GroupList.FILE_NAME))); }",ba0aab439d2ed384c5de3c50f7f6d7a2582f1b5a,2017-11-21 15:00:31,3
143410,javatests_com_google_gerrit_server_git_ProjectConfigTest.java,"@org.junit.Test public void readConfigLabelScores() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = util.commit(util.tree(util.file(""groups"", util.blob(com.google.gerrit.server.git.ProjectConfigTest.group(developers))), util.file(""project.config"", util.blob((("""" + ""[label \""CustomLabel\""]\n"") + (com.google.gerrit.server.git.ProjectConfigTest.LABEL_SCORES_CONFIG)))))); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); java.util.Map<java.lang.String, com.google.gerrit.common.data.LabelType> labels = cfg.getLabelSections(); com.google.gerrit.common.data.LabelType type = labels.entrySet().iterator().next().getValue(); assertThat(type.isCopyMinScore()).isNotEqualTo(LabelType.DEF_COPY_MIN_SCORE); assertThat(type.isCopyMaxScore()).isNotEqualTo(LabelType.DEF_COPY_MAX_SCORE); assertThat(type.isCopyAllScoresOnMergeFirstParentUpdate()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_ON_MERGE_FIRST_PARENT_UPDATE); assertThat(type.isCopyAllScoresOnTrivialRebase()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_ON_TRIVIAL_REBASE); assertThat(type.isCopyAllScoresIfNoCodeChange()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_IF_NO_CODE_CHANGE); assertThat(type.isCopyAllScoresIfNoChange()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_IF_NO_CHANGE); }",2a695f75b1aaf500c4dc9fd6e9c5d1945efeda6b,"@org.junit.Test public void readConfigLabelScores() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add(""groups"", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add(""project.config"", (("""" + ""[label \""CustomLabel\""]\n"") + (com.google.gerrit.server.git.ProjectConfigTest.LABEL_SCORES_CONFIG))).create(); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); java.util.Map<java.lang.String, com.google.gerrit.common.data.LabelType> labels = cfg.getLabelSections(); com.google.gerrit.common.data.LabelType type = labels.entrySet().iterator().next().getValue(); assertThat(type.isCopyMinScore()).isNotEqualTo(LabelType.DEF_COPY_MIN_SCORE); assertThat(type.isCopyMaxScore()).isNotEqualTo(LabelType.DEF_COPY_MAX_SCORE); assertThat(type.isCopyAllScoresOnMergeFirstParentUpdate()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_ON_MERGE_FIRST_PARENT_UPDATE); assertThat(type.isCopyAllScoresOnTrivialRebase()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_ON_TRIVIAL_REBASE); assertThat(type.isCopyAllScoresIfNoCodeChange()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_IF_NO_CODE_CHANGE); assertThat(type.isCopyAllScoresIfNoChange()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_IF_NO_CHANGE); }",38b33dedca803dc7490f3f860ebfa5a83842691f,"@org.junit.Test public void readConfigLabelScores() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add(""groups"", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add(""project.config"", (""[label \""CustomLabel\""]\n"" + (com.google.gerrit.server.git.ProjectConfigTest.LABEL_SCORES_CONFIG))).create(); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); java.util.Map<java.lang.String, com.google.gerrit.common.data.LabelType> labels = cfg.getLabelSections(); com.google.gerrit.common.data.LabelType type = labels.entrySet().iterator().next().getValue(); assertThat(type.isCopyMinScore()).isNotEqualTo(LabelType.DEF_COPY_MIN_SCORE); assertThat(type.isCopyMaxScore()).isNotEqualTo(LabelType.DEF_COPY_MAX_SCORE); assertThat(type.isCopyAllScoresOnMergeFirstParentUpdate()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_ON_MERGE_FIRST_PARENT_UPDATE); assertThat(type.isCopyAllScoresOnTrivialRebase()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_ON_TRIVIAL_REBASE); assertThat(type.isCopyAllScoresIfNoCodeChange()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_IF_NO_CODE_CHANGE); assertThat(type.isCopyAllScoresIfNoChange()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_IF_NO_CHANGE); }",9ec8665295f366679dcbe1abd77e9aa09b705cd1,2017-11-21 15:00:31,3
143410,javatests_com_google_gerrit_server_git_ProjectConfigTest.java,"@org.junit.Test public void editPluginConfigGroupReference() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = util.commit(util.tree(util.file(""groups"", util.blob(com.google.gerrit.server.git.ProjectConfigTest.group(developers))), util.file(""project.config"", util.blob(((("""" + (""[plugin \""somePlugin\""]\n"" + ""key1 = "")) + (developers.toConfigValue())) + ""\n""))))); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig pluginCfg = cfg.getPluginConfig(""somePlugin""); assertThat(pluginCfg.getNames().size()).isEqualTo(1); assertThat(pluginCfg.getGroupReference(""key1"")).isEqualTo(developers); pluginCfg.setGroupReference(""key1"", staff); rev = commit(cfg); assertThat(text(rev, ""project.config"")).isEqualTo(((("""" + (""[plugin \""somePlugin\""]\n"" + ""\tkey1 = "")) + (staff.toConfigValue())) + ""\n"")); assertThat(text(rev, ""groups"")).isEqualTo((((((""# UUID\tGroup Name\n"" + ""#\n"") + (staff.getUUID().get())) + "" \t"") + (staff.getName())) + ""\n"")); }",1e27dacf3addb289f3fbaa367ef750d8652879e3,"@org.junit.Test public void editPluginConfigGroupReference() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add(""groups"", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add(""project.config"", ((("""" + (""[plugin \""somePlugin\""]\n"" + ""key1 = "")) + (developers.toConfigValue())) + ""\n"")).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig pluginCfg = cfg.getPluginConfig(""somePlugin""); assertThat(pluginCfg.getNames().size()).isEqualTo(1); assertThat(pluginCfg.getGroupReference(""key1"")).isEqualTo(developers); pluginCfg.setGroupReference(""key1"", staff); rev = commit(cfg); assertThat(text(rev, ""project.config"")).isEqualTo(((("""" + (""[plugin \""somePlugin\""]\n"" + ""\tkey1 = "")) + (staff.toConfigValue())) + ""\n"")); assertThat(text(rev, ""groups"")).isEqualTo((((((""# UUID\tGroup Name\n"" + ""#\n"") + (staff.getUUID().get())) + "" \t"") + (staff.getName())) + ""\n"")); }",32f3f442b0dbe8a19f2248c98b9506670e0ef958,"@org.junit.Test public void editPluginConfigGroupReference() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add(""groups"", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add(""project.config"", (""[plugin \""somePlugin\""]\nkey1 = "" + (developers.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig pluginCfg = cfg.getPluginConfig(""somePlugin""); assertThat(pluginCfg.getNames().size()).isEqualTo(1); assertThat(pluginCfg.getGroupReference(""key1"")).isEqualTo(developers); pluginCfg.setGroupReference(""key1"", staff); rev = commit(cfg); assertThat(text(rev, ""project.config"")).isEqualTo(((""[plugin \""somePlugin\""]\n\tkey1 = "" + (staff.toConfigValue())) + ""\n"")); assertThat(text(rev, ""groups"")).isEqualTo((((((""# UUID\tGroup Name\n"" + ""#\n"") + (staff.getUUID().get())) + "" \t"") + (staff.getName())) + ""\n"")); }",d65319840ceaf2d4fe57563c4977341af130674f,2017-11-21 15:00:31,3
143410,javatests_com_google_gerrit_server_git_ProjectConfigTest.java,"@org.junit.Test public void readPluginConfigGroupReference() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = util.commit(util.tree(util.file(""groups"", util.blob(com.google.gerrit.server.git.ProjectConfigTest.group(developers))), util.file(""project.config"", util.blob(((("""" + (""[plugin \""somePlugin\""]\n"" + ""key1 = "")) + (developers.toConfigValue())) + ""\n""))))); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig pluginCfg = cfg.getPluginConfig(""somePlugin""); assertThat(pluginCfg.getNames().size()).isEqualTo(1); assertThat(pluginCfg.getGroupReference(""key1"")).isEqualTo(developers); }",19673037b7cf0f8375a1c6cc2c3a280cd7db8240,"@org.junit.Test public void readPluginConfigGroupReference() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add(""groups"", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add(""project.config"", ((("""" + (""[plugin \""somePlugin\""]\n"" + ""key1 = "")) + (developers.toConfigValue())) + ""\n"")).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig pluginCfg = cfg.getPluginConfig(""somePlugin""); assertThat(pluginCfg.getNames().size()).isEqualTo(1); assertThat(pluginCfg.getGroupReference(""key1"")).isEqualTo(developers); }",5671cfc48b535122261c1e252c8e8ecb7ea58717,"@org.junit.Test public void readPluginConfigGroupReference() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add(""groups"", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add(""project.config"", (""[plugin \""somePlugin\""]\nkey1 = "" + (developers.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig pluginCfg = cfg.getPluginConfig(""somePlugin""); assertThat(pluginCfg.getNames().size()).isEqualTo(1); assertThat(pluginCfg.getGroupReference(""key1"")).isEqualTo(developers); }",084d5ff5e8518eb0a3d4aa2003ccd26b2e076cc2,2017-11-21 15:00:31,3
143232,src_main_java_com_googlesource_gerrit_plugins_javamelody_GerritMonitoringFilter.java,"private java.lang.String getStorageDir() { final java.nio.file.Path tmp = java.nio.file.Paths.get(java.lang.System.getProperty(""java.io.tmpdir"")).resolve(com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.JAVAMELODY_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); } if (!(java.nio.file.Files.isDirectory(defaultDataDir))) { try { java.nio.file.Files.createDirectories(defaultDataDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.log.error(""Creation of javamelody data dir [{}] failed."", defaultDataDir, e); throw new java.lang.RuntimeException(e); } } return defaultDataDir.toString(); }",e93f8f48d2e4438e117a595ba713d2d6d64eaa5d,"private java.lang.String getStorageDir() { final java.nio.file.Path tmp = java.nio.file.Paths.get(java.lang.System.getProperty(""java.io.tmpdir"")).resolve(com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.JAVAMELODY_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); } java.nio.file.Path storageDir = java.util.Optional.ofNullable(cfg.getString(com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.STORAGE_DIR)).map(( path) -> { if (path == null) { return defaultDataDir; } return java.nio.file.Paths.get(path); }).get(); if (!(java.nio.file.Files.isDirectory(storageDir))) { try { java.nio.file.Files.createDirectories(storageDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.log.error(""Creation of javamelody data dir [{}] failed."", storageDir, e); throw new java.lang.RuntimeException(e); } } return storageDir.toString(); }",2c3c8a52edce0ebc8216a8f70af16634c6906bc4,"private java.lang.String getStorageDir() { final java.nio.file.Path tmp = java.nio.file.Paths.get(java.lang.System.getProperty(""java.io.tmpdir"")).resolve(com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.JAVAMELODY_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.log.warn(""Javamelody data exists in 'tmp' [{}]. Configuration (if any) will be ignored."", tmp); return tmp.toString(); } java.nio.file.Path storageDir = java.util.Optional.ofNullable(cfg.getString(com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.STORAGE_DIR)).map(java.nio.file.Paths::get).orElse(defaultDataDir); if (!(java.nio.file.Files.isDirectory(storageDir))) { try { java.nio.file.Files.createDirectories(storageDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.log.error(""Creation of javamelody data dir [{}] failed."", storageDir, e); throw new java.lang.RuntimeException(e); } } return storageDir.toString(); }",582ebcff01d5b3b2fc76a1f9399ea5f7783ca2a8,2017-11-21 15:21:07,6
141210,java_com_google_gerrit_server_config_CheckConsistency.java,"@java.lang.Override public com.google.gerrit.extensions.api.config.ConsistencyCheckInfo apply(com.google.gerrit.server.config.ConfigResource resource, com.google.gerrit.extensions.api.config.ConsistencyCheckInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { permissionBackend.user(user).check(GlobalPermission.ACCESS_DATABASE); if ((input == null) || (((input.checkAccounts) == null) && ((input.checkAccountExternalIds) == null))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""input required""); } com.google.gerrit.extensions.api.config.ConsistencyCheckInfo consistencyCheckInfo = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo(); if ((input.checkAccounts) != null) { consistencyCheckInfo.checkAccountsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckAccountsResultInfo(accountsConsistencyChecker.check()); } if ((input.checkAccountExternalIds) != null) { consistencyCheckInfo.checkAccountExternalIdsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckAccountExternalIdsResultInfo(externalIdsConsistencyChecker.check()); } return consistencyCheckInfo; }",e73fad3acdc2aeeaae885e07a15e445a41e53264,"@java.lang.Override public com.google.gerrit.extensions.api.config.ConsistencyCheckInfo apply(com.google.gerrit.server.config.ConfigResource resource, com.google.gerrit.extensions.api.config.ConsistencyCheckInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { permissionBackend.user(user).check(GlobalPermission.ACCESS_DATABASE); if ((input == null) || (((input.checkAccounts) == null) && ((input.checkAccountExternalIds) == null))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""input required""); } com.google.gerrit.extensions.api.config.ConsistencyCheckInfo consistencyCheckInfo = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo(); if ((input.checkAccounts) != null) { consistencyCheckInfo.checkAccountsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckAccountsResultInfo(accountsConsistencyChecker.check()); } if ((input.checkAccountExternalIds) != null) { consistencyCheckInfo.checkAccountExternalIdsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckAccountExternalIdsResultInfo(externalIdsConsistencyChecker.check()); } if ((input.checkGroups) != null) { consistencyCheckInfo.checkGroupsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckGroupsResultInfo(groupsConsistencyChecker.check()); } return consistencyCheckInfo; }",d65d6fd5a0cc8a453ec7b29292a0589a38f6148a,"@java.lang.Override public com.google.gerrit.extensions.api.config.ConsistencyCheckInfo apply(com.google.gerrit.server.config.ConfigResource resource, com.google.gerrit.extensions.api.config.ConsistencyCheckInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(user).check(GlobalPermission.ACCESS_DATABASE); if ((input == null) || ((((input.checkAccounts) == null) && ((input.checkAccountExternalIds) == null)) && ((input.checkGroups) == null))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""input required""); } com.google.gerrit.extensions.api.config.ConsistencyCheckInfo consistencyCheckInfo = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo(); if ((input.checkAccounts) != null) { consistencyCheckInfo.checkAccountsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckAccountsResultInfo(accountsConsistencyChecker.check()); } if ((input.checkAccountExternalIds) != null) { consistencyCheckInfo.checkAccountExternalIdsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckAccountExternalIdsResultInfo(externalIdsConsistencyChecker.check()); } if ((input.checkGroups) != null) { consistencyCheckInfo.checkGroupsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckGroupsResultInfo(groupsConsistencyChecker.check()); } return consistencyCheckInfo; }",76fce92df10273b7df40d68c185c80e6e8a9b068,2017-11-23 07:59:59,44
143852,java_com_google_gerrit_server_group_db_GroupConfig.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,void setAllowSaveEmptyName(boolean allowSaveEmptyName) { this.allowSaveEmptyName = allowSaveEmptyName; },ed97fd342a1d53d56fc9949c19988025b6e43da8,void setAllowSaveEmptyName() { this.allowSaveEmptyName = true; },678f4e3c48711e08f30178b2a0c2d7f036bdb1b7,2017-11-23 17:03:14,2
143853,javatests_com_google_gerrit_server_group_db_GroupBundleTest.java,,,"private GroupBundle.Builder newBundle() { java.sql.Timestamp ts = new java.sql.Timestamp(TestTimeUtil.START.toEpochMilli()); com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""group""), new com.google.gerrit.reviewdb.client.AccountGroup.Id(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""group-1""), ts); com.google.gerrit.reviewdb.client.AccountGroupMember member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.Account.Id(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.Account.Id(2000), ts); com.google.gerrit.reviewdb.client.AccountGroupById byId = new com.google.gerrit.reviewdb.client.AccountGroupById(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""subgroup""))); com.google.gerrit.reviewdb.client.AccountGroupByIdAud byIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(byId, new com.google.gerrit.reviewdb.client.Account.Id(3000), ts); return com.google.gerrit.server.group.db.GroupBundle.builder().group(group).members(member).memberAudit(memberAudit).byId(byId).byIdAudit(byIdAudit); }",f17a777d6aa487e78e139ca2faf7a966e12ee285,"private GroupBundle.Builder newBundle() { com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""group""), new com.google.gerrit.reviewdb.client.AccountGroup.Id(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""group-1""), ts); com.google.gerrit.reviewdb.client.AccountGroupMember member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.Account.Id(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.Account.Id(2000), ts); com.google.gerrit.reviewdb.client.AccountGroupById byId = new com.google.gerrit.reviewdb.client.AccountGroupById(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""subgroup""))); com.google.gerrit.reviewdb.client.AccountGroupByIdAud byIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(byId, new com.google.gerrit.reviewdb.client.Account.Id(3000), ts); return com.google.gerrit.server.group.db.GroupBundle.builder().group(group).members(member).memberAudit(memberAudit).byId(byId).byIdAudit(byIdAudit); }",0b7b3b4251ca840001c3bf9351d3fb40c1ca2f5d,2017-11-23 17:03:14,5
143930,java_com_google_gerrit_server_group_db_GroupNameNotes.java,"private static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(new java.lang.String(noteData, java.nio.charset.StandardCharsets.UTF_8)); java.lang.String uuid = config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.UUID_PARAM); java.lang.String name = config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.NAME_PARAM); if ((uuid == null) || (name == null)) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format(""UUID '%s' and name '%s' must be defined"", uuid, name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }",6d2ebde73936e47cf0f6fedd4d7992d2eeb892d9,"private static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(new java.lang.String(noteData, java.nio.charset.StandardCharsets.UTF_8)); java.lang.String uuid = config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.UUID_PARAM); java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.NAME_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format(""UUID for group '%s'"", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }",85a03c77e1a3042a8b95abb39f0aae9e522e9ad4,"private static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(new java.lang.String(noteData, java.nio.charset.StandardCharsets.UTF_8)); java.lang.String uuid = config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.UUID_PARAM); java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.NAME_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format(""UUID for group '%s' must be defined"", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }",9da06cf2153c3b4123247adc2d0857dfa382da3d,2017-11-23 17:03:14,2
143853,java_com_google_gerrit_server_group_db_GroupBundle.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public int hashCode() { return java.lang.System.identityHashCode(this); },f308f31b6a2a4b733fe2b73b733ab651d9b01b96,"@java.lang.Override public int hashCode() { throw new java.lang.UnsupportedOperationException(""hashCode is not supported because equals is not supported""); }",9e4958ff7b4e16c383f0c73f134744dbac8a334f,2017-11-23 17:03:14,5
143852,java_com_google_gerrit_server_group_db_GroupConfig.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private java.util.Optional<java.lang.String> getNewName() { if (groupUpdate.isPresent()) { return groupUpdate.get().getName().map(( n) -> com.google.common.base.Strings.nullToEmpty(n.get())); } else if (groupCreation.isPresent()) { return java.util.Optional.of(com.google.common.base.Strings.nullToEmpty(groupCreation.get().getNameKey().get())); } return java.util.Optional.empty(); },e5dc52c1a564fb2e3b2ccdbe24220e712272eaad,private java.util.Optional<java.lang.String> getNewName() { if (groupUpdate.isPresent()) { return groupUpdate.get().getName().map(( n) -> com.google.common.base.Strings.nullToEmpty(n.get())); } if (groupCreation.isPresent()) { return java.util.Optional.of(com.google.common.base.Strings.nullToEmpty(groupCreation.get().getNameKey().get())); } return java.util.Optional.empty(); },eeeb2523d1af0d439c7eaa7c4f6e0b688fbd2211,2017-11-23 17:03:14,2
142310,gerrit-server_src_main_java_com_google_gerrit_server_account_Realm.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"default boolean accBelongsToRealm(@java.lang.SuppressWarnings(""unused"") java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { return false; }",78402253524b190ab453973e8e98c55e2adc34fa,"default boolean accountBelongsToRealm(@java.lang.SuppressWarnings(""unused"") java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { return false; }",92579b4a1e2ed5c0f6110c77d35621b3fc77ad3e,2017-11-24 01:49:17,5
142310,gerrit-server_src_main_java_com_google_gerrit_server_auth_ldap_LdapRealm.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean accBelongsToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { for (com.google.gerrit.server.account.externalids.ExternalId id : externalIds) { if (id.toString().contains(com.google.gerrit.server.auth.ldap.SCHEME_GERRIT)) { return true; } } return false; },65076fb099d518d1129afdf32f766930515a879e,@java.lang.Override public boolean accountBelongsToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { for (com.google.gerrit.server.account.externalids.ExternalId id : externalIds) { if (id.toString().contains(com.google.gerrit.server.auth.ldap.SCHEME_GERRIT)) { return true; } } return false; },a6674d18aa57d2e7deeb371603d3d509eb24177b,2017-11-24 01:49:17,5
142310,gerrit-server_src_main_java_com_google_gerrit_server_auth_oauth_OAuthRealm.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean accBelongsToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { for (com.google.gerrit.server.account.externalids.ExternalId id : externalIds) { if (id.toString().contains(com.google.gerrit.server.auth.oauth.SCHEME_EXTERNAL)) { return true; } } return false; },3660b3ab7b3585236a36ae92f953b80c2baa0293,@java.lang.Override public boolean accountBelongsToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { for (com.google.gerrit.server.account.externalids.ExternalId id : externalIds) { if (id.toString().contains(com.google.gerrit.server.auth.oauth.SCHEME_EXTERNAL)) { return true; } } return false; },b1826a68f1b6925322beb966f2296a9eecb71f97,2017-11-24 01:49:17,5
142310,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountDeactivator.java,"private boolean processAccount(com.google.gerrit.server.account.AccountState account) { com.google.gerrit.server.account.AccountDeactivator.log.debug((""processing account "" + (account.getUserName()))); try { if (((account.getUserName()) != null) && (!(realm.isActive(account.getUserName())))) { sif.deactivate(account.getAccount().getId()); com.google.gerrit.server.account.AccountDeactivator.log.info((""deactivated account "" + (account.getUserName()))); return true; } } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { com.google.gerrit.server.account.AccountDeactivator.log.info(""Account {} already deactivated, continuing..."", account.getUserName()); } catch (java.lang.Exception e) { com.google.gerrit.server.account.AccountDeactivator.log.error(""Error deactivating account: {} ({}) {}"", account.getUserName(), account.getAccount().getId(), e.getMessage(), e); } return false; }",b2c7def76830d97e5b803cf9477e61b1d2901592,"private boolean processAccount(com.google.gerrit.server.account.AccountState account) { com.google.gerrit.server.account.AccountDeactivator.log.debug((""processing account "" + (account.getUserName()))); try { if (((account.getUserName()) != null) && (!(realm.isActive(account.getUserName())))) { java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> ids = externalIds.byAccount(account.getAccount().getId()); if (realm.accBelongsToRealm(ids)) { sif.deactivate(account.getAccount().getId()); com.google.gerrit.server.account.AccountDeactivator.log.info((""deactivated account "" + (account.getUserName()))); return true; } } } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { com.google.gerrit.server.account.AccountDeactivator.log.info(""Account {} already deactivated, continuing..."", account.getUserName()); } catch (java.lang.Exception e) { com.google.gerrit.server.account.AccountDeactivator.log.error(""Error deactivating account: {} ({}) {}"", account.getUserName(), account.getAccount().getId(), e.getMessage(), e); } return false; }",5172def924e86639691a7b85ac512a455f4e922a,"private boolean processAccount(com.google.gerrit.server.account.AccountState account) { com.google.gerrit.server.account.AccountDeactivator.log.debug((""processing account "" + (account.getUserName()))); try { if ((((account.getUserName()) != null) && (realm.accountBelongsToRealm(account.getExternalIds()))) && (!(realm.isActive(account.getUserName())))) { sif.deactivate(account.getAccount().getId()); com.google.gerrit.server.account.AccountDeactivator.log.info((""deactivated account "" + (account.getUserName()))); return true; } } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { com.google.gerrit.server.account.AccountDeactivator.log.info(""Account {} already deactivated, continuing..."", account.getUserName()); } catch (java.lang.Exception e) { com.google.gerrit.server.account.AccountDeactivator.log.error(""Error deactivating account: {} ({}) {}"", account.getUserName(), account.getAccount().getId(), e.getMessage(), e); } return false; }",d0bbbda18679e3245047634d3afb3666784eab1f,2017-11-24 01:49:17,5
144152,java_com_google_gerrit_server_group_db_GroupBundle.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static boolean areByIdAuditsConsideredEqual(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> reviewDbByIdAudits, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> noteDbByIdAudits) { com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbByIdAuditsById = com.google.gerrit.server.group.db.GroupBundle.toByIdAuditEntriesById(reviewDbByIdAudits); com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbByIdAuditsById = com.google.gerrit.server.group.db.GroupBundle.toByIdAuditEntriesById(noteDbByIdAudits); return com.google.gerrit.server.group.db.GroupBundle.areConsideredEqual(reviewDbByIdAuditsById, noteDbByIdAuditsById); }",73ceca1d7c4c5506f11ca290dcbedab848a2af26,"private static boolean areByIdAuditsConsideredEqual(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> reviewDbByIdAudits, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> noteDbByIdAudits) { com.google.common.collect.ListMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbByIdAuditsById = com.google.gerrit.server.group.db.GroupBundle.toByIdAuditEntriesById(reviewDbByIdAudits); com.google.common.collect.ListMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbByIdAuditsById = com.google.gerrit.server.group.db.GroupBundle.toByIdAuditEntriesById(noteDbByIdAudits); return com.google.gerrit.server.group.db.GroupBundle.areConsideredEqual(reviewDbByIdAuditsById, noteDbByIdAuditsById); }",b5fa08605e833c9b192c14396a969ce5e8b9afb8,2017-11-24 14:11:55,3
144152,java_com_google_gerrit_server_group_db_GroupBundle.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> toMemberAuditEntriesByMemberId(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> memberAudits) { return memberAudits.stream().flatMap(com.google.gerrit.server.group.db.GroupBundle::toAuditEntries).collect(com.google.common.collect.Multimaps.toMultimap(com.google.gerrit.server.group.db.GroupBundle.AuditEntry::getTarget, java.util.function.Function.identity(), com.google.common.collect.MultimapBuilder.hashKeys().treeSetValues(com.google.gerrit.server.group.db.GroupBundle.AUDIT_ENTRY_COMPARATOR)::build)); }",206667ade1dd7982f6062308855ac4d505cf73a0,"private static com.google.common.collect.ListMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> toMemberAuditEntriesByMemberId(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> memberAudits) { return memberAudits.stream().flatMap(com.google.gerrit.server.group.db.GroupBundle::toAuditEntries).collect(com.google.common.collect.Multimaps.toMultimap(com.google.gerrit.server.group.db.GroupBundle.AuditEntry::getTarget, java.util.function.Function.identity(), com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues()::build)); }",92eb670a45db931ba1e00ac9d63165315537d496,2017-11-24 14:11:55,3
144152,java_com_google_gerrit_server_group_db_GroupBundle.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static boolean areMemberAuditsConsideredEqual(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> reviewDbMemberAudits, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> noteDbMemberAudits) { com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbMemberAuditsByMemberId = com.google.gerrit.server.group.db.GroupBundle.toMemberAuditEntriesByMemberId(reviewDbMemberAudits); com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbMemberAuditsByMemberId = com.google.gerrit.server.group.db.GroupBundle.toMemberAuditEntriesByMemberId(noteDbMemberAudits); return com.google.gerrit.server.group.db.GroupBundle.areConsideredEqual(reviewDbMemberAuditsByMemberId, noteDbMemberAuditsByMemberId); }",8d85cd9a010eb33f1f790c7a246250909214f358,"private static boolean areMemberAuditsConsideredEqual(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> reviewDbMemberAudits, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> noteDbMemberAudits) { com.google.common.collect.ListMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbMemberAuditsByMemberId = com.google.gerrit.server.group.db.GroupBundle.toMemberAuditEntriesByMemberId(reviewDbMemberAudits); com.google.common.collect.ListMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbMemberAuditsByMemberId = com.google.gerrit.server.group.db.GroupBundle.toMemberAuditEntriesByMemberId(noteDbMemberAudits); return com.google.gerrit.server.group.db.GroupBundle.areConsideredEqual(reviewDbMemberAuditsByMemberId, noteDbMemberAuditsByMemberId); }",6d5e43cdc9444c58868bc8d8d58942e21537ec52,2017-11-24 14:11:55,3
144152,java_com_google_gerrit_server_group_db_GroupBundle.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static boolean areConsideredEqual(com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbMemberAuditsByMemberId, com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbMemberAuditsByMemberId) { for (java.lang.String memberId : reviewDbMemberAuditsByMemberId.keySet()) { java.util.List<com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbAuditEntries = com.google.common.collect.ImmutableList.copyOf(reviewDbMemberAuditsByMemberId.get(memberId)); java.util.SortedSet<com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbAuditEntries = noteDbMemberAuditsByMemberId.get(memberId); int reviewDbIndex = 0; for (com.google.gerrit.server.group.db.GroupBundle.AuditEntry noteDbAuditEntry : noteDbAuditEntries) { java.util.Set<com.google.gerrit.server.group.db.GroupBundle.AuditEntry> redundantReviewDbAuditEntries = new java.util.HashSet<>(); while (reviewDbIndex < (reviewDbAuditEntries.size())) { com.google.gerrit.server.group.db.GroupBundle.AuditEntry reviewDbAuditEntry = reviewDbAuditEntries.get(reviewDbIndex); if (!(reviewDbAuditEntry.getAction().equals(noteDbAuditEntry.getAction()))) { break; } redundantReviewDbAuditEntries.add(reviewDbAuditEntry); reviewDbIndex++; } if (!(redundantReviewDbAuditEntries.contains(noteDbAuditEntry))) { return false; } } if (reviewDbIndex < (reviewDbAuditEntries.size())) { return false; } } return true; }",2de7ec198699138042bfee46a25ef436dc249c0e,"private static boolean areConsideredEqual(com.google.common.collect.ListMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbMemberAuditsByTarget, com.google.common.collect.ListMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbMemberAuditsByTarget) { for (java.lang.String target : reviewDbMemberAuditsByTarget.keySet()) { com.google.common.collect.ImmutableList<com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbAuditEntries = reviewDbMemberAuditsByTarget.get(target).stream().sorted(com.google.gerrit.server.group.db.GroupBundle.AUDIT_ENTRY_COMPARATOR).collect(toImmutableList()); com.google.common.collect.ImmutableSet<com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbAuditEntries = noteDbMemberAuditsByTarget.get(target).stream().sorted(com.google.gerrit.server.group.db.GroupBundle.AUDIT_ENTRY_COMPARATOR).collect(toImmutableSet()); int reviewDbIndex = 0; for (com.google.gerrit.server.group.db.GroupBundle.AuditEntry noteDbAuditEntry : noteDbAuditEntries) { java.util.Set<com.google.gerrit.server.group.db.GroupBundle.AuditEntry> redundantReviewDbAuditEntries = new java.util.HashSet<>(); while (reviewDbIndex < (reviewDbAuditEntries.size())) { com.google.gerrit.server.group.db.GroupBundle.AuditEntry reviewDbAuditEntry = reviewDbAuditEntries.get(reviewDbIndex); if (!(reviewDbAuditEntry.getAction().equals(noteDbAuditEntry.getAction()))) { break; } redundantReviewDbAuditEntries.add(reviewDbAuditEntry); reviewDbIndex++; } if (!(redundantReviewDbAuditEntries.contains(noteDbAuditEntry))) { return false; } } if (reviewDbIndex < (reviewDbAuditEntries.size())) { return false; } } return true; }",01f230c488e12f2cf623ef5d703ed175b18d9ae0,2017-11-24 14:11:55,3
144152,java_com_google_gerrit_server_group_db_GroupBundle.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> toByIdAuditEntriesById(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> byIdAudits) { return byIdAudits.stream().flatMap(com.google.gerrit.server.group.db.GroupBundle::toAuditEntries).collect(com.google.common.collect.Multimaps.toMultimap(com.google.gerrit.server.group.db.GroupBundle.AuditEntry::getTarget, java.util.function.Function.identity(), com.google.common.collect.MultimapBuilder.hashKeys().treeSetValues(com.google.gerrit.server.group.db.GroupBundle.AUDIT_ENTRY_COMPARATOR)::build)); }",15aac262e0806939fbe897a725f28842397dfaa8,"private static com.google.common.collect.ListMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> toByIdAuditEntriesById(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> byIdAudits) { return byIdAudits.stream().flatMap(com.google.gerrit.server.group.db.GroupBundle::toAuditEntries).collect(com.google.common.collect.Multimaps.toMultimap(com.google.gerrit.server.group.db.GroupBundle.AuditEntry::getTarget, java.util.function.Function.identity(), com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues()::build)); }",daac4a9b706521e26b3ad1435b5ef4992b641e34,2017-11-24 14:11:55,3
144130,java_com_google_gerrit_reviewdb_client_Account.java,public java.lang.String getName(java.lang.String anonymousCowardName) { if ((fullName) != null) { return fullName; } if ((preferredEmail) != null) { return preferredEmail; } return getNameEmail(anonymousCowardName); },21af64077fcc24bf72d7126201a73718e44848db,"public java.lang.String getName() { if ((fullName) != null) { return fullName; } if ((preferredEmail) != null) { return preferredEmail; } return ""GerritAccount #"" + (accountId); }",184c96f149c7d922576d9ba100f6a793806e5a19,"public java.lang.String getName() { if ((fullName) != null) { return fullName; } if ((preferredEmail) != null) { return preferredEmail; } return ""GerritAccount #"" + (accountId.get()); }",fa03e372b8c352de5bc3b11f374f080bd8c56b35,2017-11-24 15:06:13,9
144130,java_com_google_gerrit_server_notedb_AbstractChangeUpdate.java,"private static org.eclipse.jgit.lib.PersonIdent ident(com.google.gerrit.server.notedb.ChangeNoteUtil noteUtil, org.eclipse.jgit.lib.PersonIdent serverIdent, java.lang.String anonymousCowardName, com.google.gerrit.server.CurrentUser u, java.util.Date when) { com.google.gerrit.server.notedb.AbstractChangeUpdate.checkUserType(u); if (u instanceof com.google.gerrit.server.IdentifiedUser) { return noteUtil.newIdent(u.asIdentifiedUser().getAccount(), when, serverIdent, anonymousCowardName); } else if (u instanceof com.google.gerrit.server.InternalUser) { return serverIdent; } throw new java.lang.IllegalStateException(); }",255564f7fa81e6ed7af85c51638a6f83b04f1767,"private static org.eclipse.jgit.lib.PersonIdent ident(com.google.gerrit.server.notedb.ChangeNoteUtil noteUtil, org.eclipse.jgit.lib.PersonIdent serverIdent, java.lang.String anonymousCowardName, com.google.gerrit.server.CurrentUser u, java.util.Date when) { com.google.gerrit.server.notedb.AbstractChangeUpdate.checkUserType(u); if (u instanceof com.google.gerrit.server.IdentifiedUser) { return noteUtil.newIdent(u.asIdentifiedUser().getAccount(), when, serverIdent); } else if (u instanceof com.google.gerrit.server.InternalUser) { return serverIdent; } throw new java.lang.IllegalStateException(); }",b81d57fae9821c3e7e2d425cb48ff736c4940ae1,"private static org.eclipse.jgit.lib.PersonIdent ident(com.google.gerrit.server.notedb.ChangeNoteUtil noteUtil, org.eclipse.jgit.lib.PersonIdent serverIdent, com.google.gerrit.server.CurrentUser u, java.util.Date when) { com.google.gerrit.server.notedb.AbstractChangeUpdate.checkUserType(u); if (u instanceof com.google.gerrit.server.IdentifiedUser) { return noteUtil.newIdent(u.asIdentifiedUser().getAccount(), when, serverIdent); } else if (u instanceof com.google.gerrit.server.InternalUser) { return serverIdent; } throw new java.lang.IllegalStateException(); }",8a40f7e46c3b2531699ec5da5e665fd62014ff72,2017-11-24 15:06:13,9
144210,java_com_google_gerrit_server_group_db_GroupsNoteDbConsistencyChecker.java,,,"public java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check(org.eclipse.jgit.lib.Repository repo, java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> byUUID) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (!(groupsMigration.writeToNoteDb())) { return new java.util.ArrayList<>(); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getAllRefs(); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = new java.util.ArrayList<>(); com.google.common.collect.BiMap<com.google.gerrit.reviewdb.client.AccountGroup.UUID, java.lang.String> nameMap = com.google.common.collect.HashBiMap.create(); readGroups(repo, refs, problems, byUUID); readGroupNames(repo, refs, problems, nameMap); if (!(problems.isEmpty())) { return problems; } problems = checkGlobalConsistency(byUUID, nameMap); return problems; }",5da0993d2cdfad5753e33d14b65c296b8a7d8c1e,@com.google.gerrit.common.Nullable public com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result check(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { if (!(groupsMigration.writeToNoteDb())) { return null; } com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result r = doCheck(repo); if (!(r.problems.isEmpty())) { r.uuidToGroupMap = null; } return r; },8ccab433663420e03e388cde283003015dd256f8,2017-11-27 13:01:08,10
144210,java_com_google_gerrit_server_group_db_GroupsConsistencyChecker.java,"public java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check() throws com.google.gwtorm.server.OrmException, java.io.IOException { if (!(groupsMigration.writeToNoteDb())) { return new java.util.ArrayList<>(); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return check(repo); } }",c116cf56b2820ddcf68a5c48c3dc958a253edec8,"public java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check() throws com.google.gwtorm.server.OrmException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> groups = new java.util.HashMap<>(); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = globalChecker.check(repo, groups); if (!(problems.isEmpty())) { return problems; } for (com.google.gerrit.server.group.InternalGroup g : groups.values()) { problems.addAll(checkGroup(g, groups)); } return problems; } }",bdfd0da6ac03846f9e39d5ff9a31badb3add66dd,"public java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check() throws java.io.IOException { if (!(groupsMigration.writeToNoteDb())) { return new java.util.ArrayList<>(); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result result = globalChecker.check(repo); if (!(result.problems.isEmpty())) { return result.problems; } for (com.google.gerrit.server.group.InternalGroup g : result.uuidToGroupMap.values()) { result.problems.addAll(checkGroup(g, result.uuidToGroupMap)); } return result.problems; } }",276b29577c77a374ad70463a3caf0f8d05c63236,2017-11-27 13:01:08,10
144690,java_com_google_gerrit_server_group_db_GroupsNoteDbConsistencyChecker.java,@com.google.gerrit.common.Nullable public com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result check(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { if (!(groupsMigration.writeToNoteDb())) { return null; } com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result r = doCheck(repo); if (!(r.problems.isEmpty())) { r.uuidToGroupMap = null; } return r; },8ccab433663420e03e388cde283003015dd256f8,@com.google.gerrit.common.Nullable public com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result check(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result r = doCheck(repo); if (!(r.problems.isEmpty())) { r.uuidToGroupMap = null; } return r; },862b230ecdace9ad9e79a8e4637c002473ce9fae,public com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result check(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result r = doCheck(repo); if (!(r.problems.isEmpty())) { r.uuidToGroupMap = null; } return r; },764c3deb9f2431fb5288423413eb68f537ec1129,2017-11-27 17:34:53,2
142471,src_main_java_com_ericsson_gerrit_plugins_highavailability_health_HealthServlet.java,,,"@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { if (healthy) { rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_OK); } else { try { rsp.sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.LOG.error(""Failed to send error response"", e); } } }",a3e7356c8fbf3374a012e2fd878ba9be22c41723,"@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { if (healthy) { rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } else { try { rsp.sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_SERVICE_UNAVAILABLE); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error(""Failed to send error response"", e); } } }",927f5e748e95ae4cd5a1d0f13bf6a20358474dd7,2017-11-30 01:01:10,8
142471,src_main_java_com_ericsson_gerrit_plugins_highavailability_health_HealthServlet.java,,,"@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { this.healthy = true; }",9551d75165e1f98ccf9bba81dff18f9bd2bf6506,"@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { this.healthy = true; rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); }",768177e48abce8fc3e6d1b8ef3a6adde0f5da46c,2017-11-30 01:01:10,8
144391,src_test_java_com_ericsson_gerrit_plugins_highavailability_health_HealthServletTest.java,@org.junit.Before public void setUp() throws java.lang.Exception { servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(tempFolder.getRoot().toPath()); },ae4b85bf1977fd1bf6b12c88e7f6545bb303fdec,"@org.junit.Before public void setUp() throws java.lang.Exception { when(currentUserProviderMock.get()).thenReturn(currentUserMock); when(currentUserMock.getCapabilities()).thenReturn(capabilityControlMock); when(capabilityControlMock.canAdministrateServer()).thenReturn(true); servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(tempFolder.getRoot().toPath(), currentUserProviderMock); }",457e2de605c3a7f5c32a8211461a6fb251b49d04,@org.junit.Before public void setUp() throws java.lang.Exception { when(currentUserProviderMock.get()).thenReturn(currentUserMock); when(currentUserMock.getCapabilities()).thenReturn(capabilityControlMock); when(capabilityControlMock.canAdministrateServer()).thenReturn(true); servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(currentUserProviderMock); },f4da1013e379bf79c09cc7af2fd28994dcedea45,2017-11-30 01:01:10,4
144391,src_main_java_com_ericsson_gerrit_plugins_highavailability_health_HealthServlet.java,"@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { try { setUnhealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error(""Failed to set unhealthy"", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }",018ac73dfafa7e33b960e87f3e4649624d3263a8,"@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.health.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_FORBIDDEN); return; } try { setUnhealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error(""Failed to set unhealthy"", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }",541b24eb00b109cd7f12b101318565b92ad3355b,"@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_FORBIDDEN); return; } this.healthy = false; rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); }",7fd95c40174b7a22948642c12d7d341757a39501,2017-11-30 01:01:10,4
144391,src_main_java_com_ericsson_gerrit_plugins_highavailability_health_HealthServlet.java,"@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { try { setHealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error(""Failed to set healthy"", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }",10dd15375d889cadcb9fb6134a40e9e9569a7a69,"@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.health.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_FORBIDDEN); return; } try { setHealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error(""Failed to set healthy"", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }",ecef305f0b64975732c709ee04a331761bf5a2a0,"@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_FORBIDDEN); return; } this.healthy = true; rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); }",e65ef0737e2277efc899511651baf25f300a798c,2017-11-30 01:01:10,4
144391,src_main_java_com_ericsson_gerrit_plugins_highavailability_health_HealthServlet.java,"private void sendError(javax.servlet.http.HttpServletResponse rsp, int statusCode) { try { rsp.sendError(statusCode); } catch (java.io.IOException e) { rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error(""Failed to send error response"", e); } }",1c2c0bdafed09985f36750891ce9cbaedba3282a,"private void sendError(com.ericsson.gerrit.plugins.highavailability.health.HttpServletResponse rsp, int statusCode) { try { rsp.sendError(statusCode); } catch (java.io.IOException e) { rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error(""Failed to send error response"", e); } }",9db3d04a2c0c2285ebe362b0addbbf7f775e039a,"private void sendError(javax.servlet.http.HttpServletResponse rsp, int statusCode) { try { rsp.sendError(statusCode); } catch (java.io.IOException e) { rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error(""Failed to send error response"", e); } }",1c2c0bdafed09985f36750891ce9cbaedba3282a,2017-11-30 01:01:10,4
144391,src_main_java_com_ericsson_gerrit_plugins_highavailability_health_HealthServlet.java,"@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { if (unhealthyFile.exists()) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_SERVICE_UNAVAILABLE); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); }",db528db2108080c10788b8e68fd813c89bdbc701,"@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.health.HttpServletResponse rsp) { if (unhealthyFile.exists()) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_SERVICE_UNAVAILABLE); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); }",b862695edc09c3722f815a6d4e0b1c8aaf801a84,"@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { if (healthy) { rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } else { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_SERVICE_UNAVAILABLE); } }",918ecd62ee7ce0620b5a7d44e126c7df8b4b76b0,2017-11-30 01:01:10,4
142471,src_main_java_com_ericsson_gerrit_plugins_highavailability_health_HealthServlet.java,,,"@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { this.healthy = false; }",5a8c3f1019f6d49cae691e5c27fe11ac9c4c236d,"@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { this.healthy = false; rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); }",d2091dd7decc9e2feb6d3c98dcc1f220b1c778d2,2017-11-30 01:01:10,8
145370,src_main_java_com_ericsson_gerrit_plugins_highavailability_Configuration.java,"private static int getInt(org.eclipse.jgit.lib.Config cfg, java.lang.String section, java.lang.String name, int defaultValue) { try { return cfg.getInt(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error(java.lang.String.format(""invalid value for %s; using default value %d"", name, defaultValue)); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug((""Failed to retrieve integer value: "" + (e.getMessage())), e); return defaultValue; } }",c5daca814e0e2860e055eaba97713725693a61fe,"private static int getInt(org.eclipse.jgit.lib.Config cfg, java.lang.String section, java.lang.String name, int defaultValue) { try { return cfg.getInt(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error(""invalid value for {}; using default value {}"", name, defaultValue); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug((""Failed to retrieve integer value: "" + (e.getMessage())), e); return defaultValue; } }",195be9ed2ab213fd07f6ce3e17e2dbbf0a36e941,"private static int getInt(org.eclipse.jgit.lib.Config cfg, java.lang.String section, java.lang.String name, int defaultValue) { try { return cfg.getInt(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error(""invalid value for {}; using default value {}"", name, defaultValue); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug(""Failed to retrieve integer value: {}"", e.getMessage(), e); return defaultValue; } }",e1646ef5e5a6c52629c6f441df07e7385647a91a,2017-11-30 07:30:30,3
145370,src_main_java_com_ericsson_gerrit_plugins_highavailability_Configuration.java,"private static boolean getBoolean(org.eclipse.jgit.lib.Config cfg, java.lang.String section, java.lang.String name, boolean defaultValue) { try { return cfg.getBoolean(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error(java.lang.String.format(""invalid value for %s; using default value %s"", name, defaultValue)); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug((""Failed to retrieve boolean value: "" + (e.getMessage())), e); return defaultValue; } }",3b039bca7f18f21feed217945ab5a5062847b781,"private static boolean getBoolean(org.eclipse.jgit.lib.Config cfg, java.lang.String section, java.lang.String name, boolean defaultValue) { try { return cfg.getBoolean(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error(""invalid value for {}; using default value {}"", name, defaultValue); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug((""Failed to retrieve boolean value: "" + (e.getMessage())), e); return defaultValue; } }",aac5443cf244cf44daa56dc2771c4acfbbb15125,"private static boolean getBoolean(org.eclipse.jgit.lib.Config cfg, java.lang.String section, java.lang.String name, boolean defaultValue) { try { return cfg.getBoolean(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error(""invalid value for {}; using default value {}"", name, defaultValue); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug(""Failed to retrieve boolean value: {}"", e.getMessage(), e); return defaultValue; } }",39d91bbef8278b1d15299397c92b4fd2c55d176f,2017-11-30 07:30:30,3
145371,src_main_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_CacheRestApiServlet.java,"private void evictCache(com.google.common.cache.Cache<?, ?> cache, java.lang.String cacheName, java.lang.Object key) { if (Constants.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); } else { cache.invalidate(key); } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug(""Invalidated {}"", cacheName); }",e6fcbac0277e12234404f7348a219e4310ab5191,"private void evictCache(com.google.common.cache.Cache<?, ?> cache, java.lang.String cacheName, java.lang.Object key) { if (Constants.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug(""Invalidated all {}"", cacheName); } else { cache.invalidate(key); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug(""Invalidated {} from {}"", key, cacheName); } }",e15cfd0a8f8d290e1221b022b2d22cb4af71fd86,"private void evictCache(com.google.common.cache.Cache<?, ?> cache, java.lang.String cacheName, java.lang.Object key) { if (Constants.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug(""Invalidated cache {}"", cacheName); } else { cache.invalidate(key); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug(""Invalidated cache {}[{}]"", cacheName, key); } }",7ebc102f2c13c4c5bb06a5ba996e180d2cee7bf3,2017-11-30 07:30:30,5
145659,src_main_java_com_googlesource_gerrit_plugins_its_base_util_IssueExtractor.java,"public java.lang.String[] getIssueIds(java.lang.String haystack) { java.util.regex.Pattern pattern = itsConfig.getIssuePattern(); if (pattern == null) return new java.lang.String[]{ }; com.googlesource.gerrit.plugins.its.base.util.IssueExtractor.log.debug((((""Matching '"" + haystack) + ""' against "") + (pattern.pattern()))); java.util.Set<java.lang.String> issues = com.google.common.collect.Sets.newHashSet(); java.util.regex.Matcher matcher = pattern.matcher(haystack); int groupIdx = itsConfig.getIssuePatternGroupIndex(); while (matcher.find()) { java.lang.String issueId = matcher.group(groupIdx); if (!(com.google.common.base.Strings.isNullOrEmpty(issueId))) { issues.add(issueId); } } return issues.toArray(new java.lang.String[issues.size()]); }",89b7cd3006adc9374fd3ef2c09ba06f8ed4259b6,"public java.lang.String[] getIssueIds(java.lang.String haystack) { java.util.regex.Pattern pattern = itsConfig.getIssuePattern(); if (pattern == null) return new java.lang.String[]{ }; com.googlesource.gerrit.plugins.its.base.util.IssueExtractor.log.debug(""Matching '{}' against '"", haystack, pattern.pattern()); java.util.Set<java.lang.String> issues = com.google.common.collect.Sets.newHashSet(); java.util.regex.Matcher matcher = pattern.matcher(haystack); int groupIdx = itsConfig.getIssuePatternGroupIndex(); while (matcher.find()) { java.lang.String issueId = matcher.group(groupIdx); if (!(com.google.common.base.Strings.isNullOrEmpty(issueId))) { issues.add(issueId); } } return issues.toArray(new java.lang.String[issues.size()]); }",149a6e0aa7a496b3a639262fc73393f52baad669,"public java.lang.String[] getIssueIds(java.lang.String haystack) { java.util.regex.Pattern pattern = itsConfig.getIssuePattern(); if (pattern == null) return new java.lang.String[]{ }; com.googlesource.gerrit.plugins.its.base.util.IssueExtractor.log.debug(""Matching '{}' against {}"", haystack, pattern.pattern()); java.util.Set<java.lang.String> issues = com.google.common.collect.Sets.newHashSet(); java.util.regex.Matcher matcher = pattern.matcher(haystack); int groupIdx = itsConfig.getIssuePatternGroupIndex(); while (matcher.find()) { java.lang.String issueId = matcher.group(groupIdx); if (!(com.google.common.base.Strings.isNullOrEmpty(issueId))) { issues.add(issueId); } } return issues.toArray(new java.lang.String[issues.size()]); }",db6ea431078b6880716a1518d707c072add049aa,2017-11-30 14:04:17,5
145659,src_main_java_com_googlesource_gerrit_plugins_its_base_its_ItsConfig.java,"public boolean isEnabled(com.google.gerrit.reviewdb.client.Project.NameKey projectNK, java.lang.String refName) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectNK); if (projectState == null) { com.googlesource.gerrit.plugins.its.base.its.ItsConfig.log.error(((((((""Failed to check if "" + (pluginName)) + "" is enabled for project "") + (projectNK.get())) + "": Project "") + (projectNK.get())) + "" not found"")); return false; } if (isEnforcedByAnyParentProject(refName, projectState)) { return true; } return (!(""false"".equals(pluginCfgFactory.getFromProjectConfigWithInheritance(projectState, pluginName).getString(""enabled"", ""false"")))) && (isEnabledForBranch(projectState, refName)); }",4764563c5774910dbc8ecea3eb1e53d0809f40e3,"public boolean isEnabled(com.google.gerrit.reviewdb.client.Project.NameKey projectNK, java.lang.String refName) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectNK); if (projectState == null) { com.googlesource.gerrit.plugins.its.base.its.ItsConfig.log.error(""Failed to check if {} is enabled for project {}: Project not found"", pluginName, projectNK.get(), projectNK.get()); return false; } if (isEnforcedByAnyParentProject(refName, projectState)) { return true; } return (!(""false"".equals(pluginCfgFactory.getFromProjectConfigWithInheritance(projectState, pluginName).getString(""enabled"", ""false"")))) && (isEnabledForBranch(projectState, refName)); }",fd5ac3fa2c2844495467dac3df8b0de36fab717f,"public boolean isEnabled(com.google.gerrit.reviewdb.client.Project.NameKey projectNK, java.lang.String refName) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectNK); if (projectState == null) { com.googlesource.gerrit.plugins.its.base.its.ItsConfig.log.error(""Failed to check if {} is enabled for project {}: Project not found"", pluginName, projectNK.get()); return false; } if (isEnforcedByAnyParentProject(refName, projectState)) { return true; } return (!(""false"".equals(pluginCfgFactory.getFromProjectConfigWithInheritance(projectState, pluginName).getString(""enabled"", ""false"")))) && (isEnabledForBranch(projectState, refName)); }",3bd4ae6ecfed1f828402b8a8404bcb2fad8b518b,2017-11-30 14:04:17,5
144610,javatests_com_google_gerrit_acceptance_rest_group_GroupsIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void rebuild() throws java.lang.Exception { assume().that(groupsMigration.writeToNoteDb()).isTrue(); assume().that(groupsMigration.readFromNoteDb()).isFalse(); com.google.gerrit.extensions.common.GroupInfo g = gApi.groups().create(name(""group"")).get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g.id); java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid); org.eclipse.jgit.lib.ObjectId oldId; com.google.gerrit.server.group.db.GroupBundle oldBundle; try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { oldId = repo.exactRef(refName).getObjectId(); oldBundle = bundleFactory.fromNoteDb(repo, uuid); new org.eclipse.jgit.junit.TestRepository(repo).delete(refName); } assertThat(adminRestSession.postOK(((""/groups/"" + uuid) + ""/rebuild""), """").getEntityContent()).isEqualTo(""No differences between ReviewDb and NoteDb""); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); assertThat(ref).isNotNull(); assertThat(ref.getObjectId()).isNotEqualTo(oldId); com.google.gerrit.server.group.db.GroupBundle newBundle = bundleFactory.fromNoteDb(repo, uuid); assertThat(newBundle.group()).isEqualTo(oldBundle.group()); assertThat(newBundle.members()).isEqualTo(oldBundle.members()); assertThat(newBundle.memberAudit()).isEqualTo(oldBundle.memberAudit()); assertThat(newBundle.byId()).isEqualTo(oldBundle.byId()); assertThat(newBundle.byIdAudit()).isEqualTo(oldBundle.byIdAudit()); } }",1cc4ee5b380d13749823d80f3bd12366a7a12619,"@org.junit.Test public void rebuild() throws java.lang.Exception { assume().that(groupsMigration.writeToNoteDb()).isTrue(); assume().that(groupsMigration.readFromNoteDb()).isFalse(); com.google.gerrit.extensions.common.GroupInfo g = gApi.groups().create(name(""group"")).get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g.id); java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid); org.eclipse.jgit.lib.ObjectId oldId; com.google.gerrit.server.group.db.GroupBundle oldBundle; try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { oldId = repo.exactRef(refName).getObjectId(); oldBundle = bundleFactory.fromNoteDb(repo, uuid); new org.eclipse.jgit.junit.TestRepository(repo).delete(refName); } assertThat(adminRestSession.postOK(((""/groups/"" + uuid) + ""/rebuild""), com.google.gerrit.acceptance.rest.group.GroupsIT.input(null)).getEntityContent()).isEqualTo(""No differences between ReviewDb and NoteDb""); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); assertThat(ref).isNotNull(); assertThat(ref.getObjectId()).isNotEqualTo(oldId); com.google.gerrit.acceptance.rest.group.GroupsIT.assertNoDifferences(oldBundle, bundleFactory.fromNoteDb(repo, uuid)); } }",3afae72213c5917e137d5f878e3fdfd4455eaf64,2017-11-30 15:11:09,9
145662,src_main_java_com_googlesource_gerrit_plugins_its_base_workflow_action_AddStandardComment.java,"private java.lang.String getCommentChangeEvent(java.lang.String action, java.lang.String prefix, java.util.Map<java.lang.String, java.lang.String> map) { java.lang.String ret = """"; java.lang.String changeNumber = com.google.common.base.Strings.nullToEmpty(map.get(""change-number"")); changeNumber = com.google.common.base.Strings.nullToEmpty(map.get(""changeNumber"")); if (!(changeNumber.isEmpty())) { changeNumber += "" ""; } ret += (""Change "" + changeNumber) + action; java.lang.String submitter = formatPerson(prefix, map); if (!(submitter.isEmpty())) { ret += "" by "" + submitter; } java.lang.String subject = com.google.common.base.Strings.nullToEmpty(map.get(""subject"")); if (!(subject.isEmpty())) { ret += "":\n"" + subject; } java.lang.String reason = com.google.common.base.Strings.nullToEmpty(map.get(""reason"")); if (!(reason.isEmpty())) { ret += ""\n\nReason:\n"" + reason; } java.lang.String url = com.google.common.base.Strings.nullToEmpty(map.get(""change-url"")); url = com.google.common.base.Strings.nullToEmpty(map.get(""changeUrl"")); if (!(url.isEmpty())) { ret += ""\n\n"" + (its.createLinkForWebui(url, url)); } return ret; }",f544211f94e178908c997cba5d74eb77704bd421,"private java.lang.String getCommentChangeEvent(java.lang.String action, java.lang.String prefix, java.util.Map<java.lang.String, java.lang.String> map) { java.lang.String ret = """"; java.lang.String changeNumber = com.google.common.base.Strings.nullToEmpty(map.get(""changeNumber"")); if (!(changeNumber.isEmpty())) { changeNumber += "" ""; } ret += (""Change "" + changeNumber) + action; java.lang.String submitter = formatPerson(prefix, map); if (!(submitter.isEmpty())) { ret += "" by "" + submitter; } java.lang.String subject = com.google.common.base.Strings.nullToEmpty(map.get(""subject"")); if (!(subject.isEmpty())) { ret += "":\n"" + subject; } java.lang.String reason = com.google.common.base.Strings.nullToEmpty(map.get(""reason"")); if (!(reason.isEmpty())) { ret += ""\n\nReason:\n"" + reason; } java.lang.String url = com.google.common.base.Strings.nullToEmpty(map.get(""changeUrl"")); if (!(url.isEmpty())) { ret += ""\n\n"" + (its.createLinkForWebui(url, url)); } return ret; }",bce433560a6ccacb8ef11dece599b1a3a31abb87,"private java.lang.String getCommentChangeEvent(java.lang.String action, java.lang.String prefix, java.util.Map<java.lang.String, java.lang.String> map) { java.lang.String ret = """"; java.lang.String changeNumber = getValueFromMap(map, """", ""change-number"", ""changeNumber""); if (!(changeNumber.isEmpty())) { changeNumber += "" ""; } ret += (""Change "" + changeNumber) + action; java.lang.String submitter = getValueFromMap(map, prefix, ""-name"", ""Name"", ""-username"", ""Username""); if (!(submitter.isEmpty())) { ret += "" by "" + submitter; } java.lang.String subject = com.google.common.base.Strings.nullToEmpty(map.get(""subject"")); if (!(subject.isEmpty())) { ret += "":\n"" + subject; } java.lang.String reason = com.google.common.base.Strings.nullToEmpty(map.get(""reason"")); if (!(reason.isEmpty())) { ret += ""\n\nReason:\n"" + reason; } java.lang.String url = getValueFromMap(map, """", ""change-url"", ""changeUrl""); if (!(url.isEmpty())) { ret += ""\n\n"" + (its.createLinkForWebui(url, url)); } return ret; }",5fe76daf6728a173cc0eb53dff123c7a4a62ca17,2017-12-01 12:10:24,10
145662,src_main_java_com_googlesource_gerrit_plugins_its_base_workflow_action_AddStandardComment.java,"private java.lang.String formatPerson(java.lang.String prefix, java.util.Map<java.lang.String, java.lang.String> map) { java.lang.String ret = com.google.common.base.Strings.nullToEmpty(map.get((prefix + ""-name""))); ret = com.google.common.base.Strings.nullToEmpty(map.get((prefix + ""Name""))); if (ret.isEmpty()) { ret = com.google.common.base.Strings.nullToEmpty(map.get((prefix + ""-username""))); ret = com.google.common.base.Strings.nullToEmpty(map.get((prefix + ""Username""))); } return ret; }",19d7b4ca13869bdb6bec138a6953bf78af611b93,"private java.lang.String formatPerson(java.lang.String prefix, java.util.Map<java.lang.String, java.lang.String> map) { java.lang.String ret = com.google.common.base.Strings.nullToEmpty(map.get((prefix + ""Name""))); if (ret.isEmpty()) { ret = com.google.common.base.Strings.nullToEmpty(map.get((prefix + ""Username""))); } return ret; }",0b2e79d7e6eb66b90b48236c20917ae7490e6da6,"private java.lang.String getValueFromMap(java.util.Map<java.lang.String, java.lang.String> map, java.lang.String keyPrefix, java.lang.String... keyOptions) { for (java.lang.String key : keyOptions) { java.lang.String ret = com.google.common.base.Strings.nullToEmpty(map.get((keyPrefix + key))); if (!(ret.isEmpty())) { return ret; } } return """"; }",d2db9cc0c3458aa78e60e2a285d5d4d17c1a60ab,2017-12-01 12:10:24,10
144133,src_main_java_com_googlesource_gerrit_plugins_findowners_Config.java,"static java.lang.String getOwnersFileName(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.query.change.ChangeData c) { if (((com.googlesource.gerrit.plugins.findowners.Config.config) != null) && (project != null)) { try { java.lang.String name = com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(project, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getString(com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME, com.googlesource.gerrit.plugins.findowners.Config.OWNERS); if (name.trim().equals("""")) { com.googlesource.gerrit.plugins.findowners.Config.log.error((((((((""Project "" + project) + "" has wrong "") + (com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME)) + "": \"""") + name) + ""\"" for "") + (com.googlesource.gerrit.plugins.findowners.Config.getChangeId(c)))); return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; } return name; } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.findowners.Config.log.error((((""Cannot find project "" + project) + "" for "") + (com.googlesource.gerrit.plugins.findowners.Config.getChangeId(c))), e); } } return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; }",e8c965d930ba6bdda16ad70136caf4ba469c1692,"static java.lang.String getOwnersFileName(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.query.change.ChangeData c) { if (((com.googlesource.gerrit.plugins.findowners.Config.config) != null) && (projectState != null)) { java.lang.String name = com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(projectState, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getString(com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME, com.googlesource.gerrit.plugins.findowners.Config.OWNERS); if (name.trim().equals("""")) { com.googlesource.gerrit.plugins.findowners.Config.log.error((((((((""Project "" + (c.project())) + "" has wrong "") + (com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME)) + "": \"""") + name) + ""\"" for "") + (com.googlesource.gerrit.plugins.findowners.Config.getChangeId(c)))); return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; } return name; } return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; }",a315f939b5624369b6fcd3146ac3552b20451415,"static java.lang.String getOwnersFileName(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.query.change.ChangeData c) { if (projectState == null) { com.googlesource.gerrit.plugins.findowners.Config.log.error((""Null projectState for change "" + (com.googlesource.gerrit.plugins.findowners.Config.getChangeId(c)))); } else if ((com.googlesource.gerrit.plugins.findowners.Config.config) != null) { java.lang.String name = com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(projectState, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getString(com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME, com.googlesource.gerrit.plugins.findowners.Config.OWNERS); if (name.trim().equals("""")) { com.googlesource.gerrit.plugins.findowners.Config.log.error((((((((""Project "" + (projectState.getProject())) + "" has wrong "") + (com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME)) + "": \"""") + name) + ""\"" for "") + (com.googlesource.gerrit.plugins.findowners.Config.getChangeId(c)))); return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; } return name; } return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; }",b5587b71b3c8f78334729410e6f132784ffb3b67,2017-12-04 07:39:21,4
138270,src_main_java_com_googlesource_gerrit_plugins_replication_Destination.java,"private boolean shouldReplicate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { return threadScoper.scope(new java.util.concurrent.Callable<java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { return shouldReplicate(project); } }).call(); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format(""source project %s not available"", project), err, states); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); throw new java.lang.RuntimeException(e); } return false; }",deef4347ced14ef53c5b43d1012119b26d0ac059,"private boolean shouldReplicate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (java.io.IOException e) { return false; } if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } return shouldReplicate(projectState, userProvider.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format(""source project %s not available"", project), err, states); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); throw new java.lang.RuntimeException(e); } return false; }",6befb37b5f3d23b05220baaebc800bb4f6813f04,"private boolean shouldReplicate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { return threadScoper.scope(new java.util.concurrent.Callable<java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (IOException e) { return false; } if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } return shouldReplicate(projectState, userProvider.get()); } }).call(); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format(""source project %s not available"", project), err, states); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); throw new java.lang.RuntimeException(e); } return false; }",0f6c2f7457b82133c9745bd91e2a5a56288ad174,2017-12-04 10:22:43,3
146031,src_main_java_com_googlesource_gerrit_plugins_its_base_its_ItsConfig.java,public java.util.regex.Pattern getIssuePattern() { java.util.Optional<java.lang.String> match = HEAD(bb16a6); },b436a30fa502bc1e2128a4985cfe65faf6076273,"public java.util.regex.Pattern getIssuePattern() { java.util.Optional<java.lang.String> match = com.googlesource.gerrit.plugins.its.base.its.FluentIterable.from(getCommentLinkInfo(getCommentLinkName())).filter(new com.googlesource.gerrit.plugins.its.base.its.Predicate<com.google.gerrit.extensions.api.projects.CommentLinkInfo>() { @java.lang.Override public boolean apply(com.google.gerrit.extensions.api.projects.CommentLinkInfo input) { return ((input.match) != null) && (!(input.match.trim().isEmpty())); } }).transform(new com.googlesource.gerrit.plugins.its.base.its.Function<com.google.gerrit.extensions.api.projects.CommentLinkInfo, java.lang.String>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.extensions.api.projects.CommentLinkInfo input) { return input.match; } }).last(); java.lang.String defPattern = gerritConfig.getString(""commentlink"", getCommentLinkName(), ""match""); }",c8daf9cf49164e46c9f605660501b91f2fdccb15,"public java.util.regex.Pattern getIssuePattern() { java.util.Optional<java.lang.String> match = getCommentLinkInfo(getCommentLinkName()).stream().filter(( input) -> (input.match != null) && (!(input.match.trim().isEmpty()))).map(( input) -> input.match).reduce(( a, b) -> b); java.lang.String defPattern = gerritConfig.getString(""commentlink"", getCommentLinkName(), ""match""); if ((!(match.isPresent())) && (defPattern == null)) { return null; } return java.util.regex.Pattern.compile(match.orElse(defPattern)); }",aad108455b8667c6d1f786f5fababa3a063f7962,2017-12-04 11:07:08,5
146031,src_main_java_com_googlesource_gerrit_plugins_its_base_util_PropertyAttributeExtractor.java,"public java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) { java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create(""revision"", patchSetAttribute.revision)); properties.add(propertyFactory.create(""patch-set-number"", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(""patchSetNumber"", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(""ref"", patchSetAttribute.ref)); properties.add(propertyFactory.create(""created-on"", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create(""createdOn"", patchSetAttribute.createdOn.toString())); HEAD(bb16a6); }",89c0f2da9be866ef35c5a4488ed17c01934ec216,"public java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) { java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create(""revision"", patchSetAttribute.revision)); properties.add(propertyFactory.create(""patch-set-number"", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(""patchSetNumber"", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(""ref"", patchSetAttribute.ref)); properties.add(propertyFactory.create(""created-on"", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create(""createdOn"", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create(""parents"", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create(""deletions"", java.lang.Integer.toString(patchSetAttribute.sizeDeletions))); properties.add(propertyFactory.create(""insertions"", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.addAll(extractFrom(patchSetAttribute.uploader, ""uploader"")); properties.addAll(extractFrom(patchSetAttribute.author, ""author"")); }",9cca1f938060075a34ea117a9b652c3e37f1d0fb,"public java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) { java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create(""revision"", patchSetAttribute.revision)); properties.add(propertyFactory.create(""patch-set-number"", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(""patchSetNumber"", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(""ref"", patchSetAttribute.ref)); properties.add(propertyFactory.create(""created-on"", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create(""createdOn"", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create(""parents"", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create(""deletions"", java.lang.Integer.toString(patchSetAttribute.sizeDeletions))); properties.add(propertyFactory.create(""insertions"", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.addAll(extractFrom(patchSetAttribute.uploader, ""uploader"")); properties.addAll(extractFrom(patchSetAttribute.author, ""author"")); return properties; }",9334da4c36e26915e74a2e94f9f950a7b94f669a,2017-12-04 11:07:08,5
146250,java_com_google_gerrit_server_group_db_GroupBundle.java,"public static com.google.common.collect.ImmutableList<java.lang.String> compare(com.google.gerrit.server.group.db.GroupBundle reviewDbBundle, com.google.gerrit.server.group.db.GroupBundle noteDbBundle) { reviewDbBundle = reviewDbBundle.truncateToSecond(); com.google.gerrit.reviewdb.client.AccountGroup reviewDbGroup = new com.google.gerrit.reviewdb.client.AccountGroup(reviewDbBundle.group()); reviewDbGroup.setDescription(com.google.common.base.Strings.emptyToNull(reviewDbGroup.getDescription())); reviewDbBundle = reviewDbBundle.toBuilder().group(reviewDbGroup).build(); checkArgument(((reviewDbBundle.source()) == (com.google.gerrit.server.group.db.GroupBundle.Source.REVIEW_DB)), ""first bundle's source must be %s: %s"", com.google.gerrit.server.group.db.GroupBundle.Source.REVIEW_DB, reviewDbBundle); checkArgument(((noteDbBundle.source()) == (com.google.gerrit.server.group.db.GroupBundle.Source.NOTE_DB)), ""second bundle's source must be %s: %s"", com.google.gerrit.server.group.db.GroupBundle.Source.NOTE_DB, noteDbBundle); com.google.common.collect.ImmutableList.Builder<java.lang.String> result = com.google.common.collect.ImmutableList.builder(); if (!(reviewDbBundle.group().equals(noteDbBundle.group()))) { result.add(((""AccountGroups differ\n"" + ((""ReviewDb: "" + (reviewDbBundle.group())) + ""\n"")) + (""NoteDb : "" + (noteDbBundle.group())))); } if (!(reviewDbBundle.members().equals(noteDbBundle.members()))) { result.add(((""AccountGroupMembers differ\n"" + ((""ReviewDb: "" + (reviewDbBundle.members())) + ""\n"")) + (""NoteDb : "" + (noteDbBundle.members())))); } if (!(com.google.gerrit.server.group.db.GroupBundle.areMemberAuditsConsideredEqual(reviewDbBundle.memberAudit(), noteDbBundle.memberAudit()))) { result.add(((""AccountGroupMemberAudits differ\n"" + ((""ReviewDb: "" + (reviewDbBundle.memberAudit())) + ""\n"")) + (""NoteDb : "" + (noteDbBundle.memberAudit())))); } if (!(reviewDbBundle.byId().equals(noteDbBundle.byId()))) { result.add(((""AccountGroupByIds differ\n"" + ((""ReviewDb: "" + (reviewDbBundle.byId())) + ""\n"")) + (""NoteDb : "" + (noteDbBundle.byId())))); } if (!(com.google.gerrit.server.group.db.GroupBundle.areByIdAuditsConsideredEqual(reviewDbBundle.byIdAudit(), noteDbBundle.byIdAudit()))) { result.add(((""AccountGroupByIdAudits differ\n"" + ((""ReviewDb: "" + (reviewDbBundle.byIdAudit())) + ""\n"")) + (""NoteDb : "" + (noteDbBundle.byIdAudit())))); } return result.build(); }",b0a153c8d2383626a7380e102312e2616c40e836,"public static com.google.common.collect.ImmutableList<java.lang.String> compare(com.google.gerrit.server.group.db.GroupBundle reviewDbBundle, com.google.gerrit.server.group.db.GroupBundle noteDbBundle) { return com.google.gerrit.server.group.db.GroupBundle.compare(reviewDbBundle, noteDbBundle, true); }",a55d022ce12f2c8b6ca83cca372b594c05cca0b3,"public static com.google.common.collect.ImmutableList<java.lang.String> compareWithAudits(com.google.gerrit.server.group.db.GroupBundle reviewDbBundle, com.google.gerrit.server.group.db.GroupBundle noteDbBundle) { return com.google.gerrit.server.group.db.GroupBundle.compare(reviewDbBundle, noteDbBundle, true); }",d962cbcb6f6ec9e0b877002b95d1b3e5cc641971,2017-12-04 17:13:15,3
146251,gerrit-server_src_main_java_com_google_gerrit_server_project_RemoveReviewerControl.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.IOException, com.google.gerrit.server.project.NoSuchProjectException { if (canRemoveReviewerWithoutPermissionCheck(notes.getChange(), currentUser, reviewer, val)) { return; } permissionBackend.user(currentUser).change(notes).database(dbProvider).check(ChangePermission.REMOVE_REVIEWER); }",175c7711e430a01ac73965aec448eede76f75ea1,"private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { if (canRemoveReviewerWithoutPermissionCheck(notes.getChange(), currentUser, reviewer, val)) { return; } permissionBackend.user(currentUser).change(notes).database(dbProvider).check(ChangePermission.REMOVE_REVIEWER); }",0adf4c7856f94dfb3a7a5504e0b657832da7f413,2017-12-05 09:50:52,6
146251,gerrit-server_src_main_java_com_google_gerrit_server_project_RemoveReviewerControl.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.IOException, com.google.gerrit.server.project.NoSuchProjectException { checkRemoveReviewer(notes, currentUser, reviewer, 0); }",133c8be7298aaec383a3a15deb8ee66ffd81e905,"public void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { checkRemoveReviewer(notes, currentUser, reviewer, 0); }",e290dea15374f0b217d3bbe0189831bf6f40d845,2017-12-05 09:50:52,6
145730,src_test_java_com_ericsson_gerrit_plugins_highavailability_ConfigurationTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testHealthCheckEnabled() throws java.lang.Exception { when(configMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HEALTH_CHECK_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_HEALTH_CHECK_ENABLED)).thenReturn(false); initializeConfiguration(); assertThat(configuration.healthCheck().enabled()).isFalse(); }",28860a3f9d31742039b112732bf2be653730062d,"@org.junit.Test public void testHealthCheckEnabled() throws java.lang.Exception { when(configMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HEALTH_CHECK_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_HEALTH_CHECK_ENABLED)).thenReturn(false); initializeConfiguration(); assertThat(configuration.healthCheck().enabled()).isFalse(); }",89b7b550db536e9b7960ed136984b05da88ba4f1,2017-12-05 10:33:40,2
143830,java_com_google_gerrit_acceptance_AbstractDaemonTest.java,"@java.lang.Override public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description description) { return new org.junit.runners.model.Statement() { @java.lang.Override public void evaluate() throws java.lang.Throwable { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } beforeTest(description); try { base.evaluate(); } finally { afterTest(); } } }; }",0bd88c8370209563fface2ea646507549ab578d0,"@java.lang.Override public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description description) { return new org.junit.runners.model.Statement() { @java.lang.Override public void evaluate() throws java.lang.Throwable { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } beforeTest(description); try (com.google.gerrit.acceptance.ProjectConfigResetter resetter = resetProjects(allProjects, allUsers)) { base.evaluate(); } finally { afterTest(); } } }; }",5fab2223512c5b1557536201ed380847415c4f62,"@java.lang.Override public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description description) { return new org.junit.runners.model.Statement() { @java.lang.Override public void evaluate() throws java.lang.Throwable { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } beforeTest(description); try (com.google.gerrit.acceptance.ProjectResetter resetter = resetProjects(projectResetter.builder())) { base.evaluate(); } finally { afterTest(); } } }; }",fb518fe7ca98062aa67b5947361efe3db710d6c0,2017-12-07 09:34:28,16
143830,java_com_google_gerrit_acceptance_AbstractDaemonTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected com.google.gerrit.acceptance.ProjectConfigResetter resetProjects(com.google.gerrit.reviewdb.client.Project... projects) throws java.lang.Exception { return new com.google.gerrit.acceptance.ProjectConfigResetter(repoManager, metaDataUpdateFactory, projectCache, projects); }",6113377d808350845a09d056c1e43f3a31bd3b09,"protected com.google.gerrit.acceptance.ProjectResetter resetProjects(com.google.gerrit.acceptance.ProjectResetter.Builder resetter) throws java.io.IOException { return resetter.reset(allProjects, RefNames.REFS_CONFIG).reset(allUsers, RefNames.REFS_CONFIG, ((com.google.gerrit.reviewdb.client.RefNames.REFS_USERS) + ""*""), RefNames.REFS_EXTERNAL_IDS, ((com.google.gerrit.reviewdb.client.RefNames.REFS_STARRED_CHANGES) + ""*""), ((com.google.gerrit.reviewdb.client.RefNames.REFS_DRAFT_COMMENTS) + ""*"")).build(); }",c17264a9be7ad42f27f990964f5d1c674d365b2e,2017-12-07 09:34:28,16
143830,java_com_google_gerrit_acceptance_AbstractDaemonTest.java,@java.lang.Override public void evaluate() throws java.lang.Throwable { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } beforeTest(description); try { base.evaluate(); } finally { afterTest(); } },87960c62142dfc9bb125ae76d6a7d0581928bc45,"@java.lang.Override public void evaluate() throws java.lang.Throwable { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } beforeTest(description); try (com.google.gerrit.acceptance.ProjectConfigResetter resetter = resetProjects(allProjects, allUsers)) { base.evaluate(); } finally { afterTest(); } }",e6f87114629922a712c6f72546f4bde0563eff91,@java.lang.Override public void evaluate() throws java.lang.Throwable { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } beforeTest(description); try (com.google.gerrit.acceptance.ProjectResetter resetter = resetProjects(projectResetter.builder())) { base.evaluate(); } finally { afterTest(); } },7322bc6090149d79d61b5e4be5ac34be0381416c,2017-12-07 09:34:28,16
143831,java_com_google_gerrit_server_group_db_GroupNameNotes.java,"public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPNAMES); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository);org.eclipse.jgit.lib.ObjectReader reader = revWalk.getObjectReader()) { org.eclipse.jgit.revwalk.RevCommit notesCommit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, notesCommit); com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.common.data.GroupReference> groupReferences = com.google.common.collect.ImmutableSet.builder(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.common.data.GroupReference groupReference = com.google.gerrit.server.group.db.GroupNameNotes.getGroupReference(reader, note.getData()); groupReferences.add(groupReference); } return groupReferences.build(); } }",27cd82550c3d24e707d5e5142016caacac8a9056,"public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPNAMES); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository);org.eclipse.jgit.lib.ObjectReader reader = revWalk.getObjectReader()) { org.eclipse.jgit.revwalk.RevCommit notesCommit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, notesCommit); com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.common.data.GroupReference> groupReferences = com.google.common.collect.ImmutableSet.builder(); java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, java.lang.String> uuidMap = new java.util.HashMap<>(); java.util.Map<java.lang.String, com.google.gerrit.reviewdb.client.AccountGroup.UUID> nameMap = new java.util.HashMap<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.common.data.GroupReference groupReference = com.google.gerrit.server.group.db.GroupNameNotes.getGroupReference(reader, note.getData()); groupReferences.add(groupReference); com.google.gerrit.server.group.db.GroupNameNotes.checkConsistency(groupReference, uuidMap, nameMap); } return groupReferences.build(); } }",9a3898bd97dd2c5e8df27b9064ea35c18b703844,"public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPNAMES); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository);org.eclipse.jgit.lib.ObjectReader reader = revWalk.getObjectReader()) { org.eclipse.jgit.revwalk.RevCommit notesCommit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, notesCommit); java.util.Set<com.google.gerrit.common.data.GroupReference> groupReferences = new java.util.LinkedHashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.common.data.GroupReference groupReference = com.google.gerrit.server.group.db.GroupNameNotes.getGroupReference(reader, note.getData()); boolean result = groupReferences.add(groupReference); if (!result) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblemAsWarning(""The UUID of group %s (%s) is duplicate in group name notes"", groupReference.getName(), groupReference.getUUID()); } } return com.google.common.collect.ImmutableSet.copyOf(groupReferences); } }",0645c99abf5d09d5c6ffc7c653735d1db77f8231,2017-12-07 10:31:57,12
144151,java_com_google_gerrit_server_group_db_GroupConfig.java,"public static com.google.gerrit.server.group.db.GroupConfig createForNewGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupCreation.getGroupUUID()); groupConfig.load(repository); groupConfig.setGroupCreation(groupCreation); return groupConfig; }",0c128167e4033a51ea911b5ffd22aac01fae9022,"public static com.google.gerrit.server.group.db.GroupConfig createForNewGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupCreation.getGroupUUID(), repository); groupConfig.load(repository); groupConfig.setGroupCreation(groupCreation); return groupConfig; }",988cfe57db8ea5aa05b8ad1d2614a4d4019e7f8c,"public static com.google.gerrit.server.group.db.GroupConfig createForNewGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupCreation.getGroupUUID()); groupConfig.load(repository); groupConfig.setGroupCreation(groupCreation); return groupConfig; }",0c128167e4033a51ea911b5ffd22aac01fae9022,2017-12-07 14:14:41,9
144151,java_com_google_gerrit_server_group_db_GroupConfig.java,"public static com.google.gerrit.server.group.db.GroupConfig loadForGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupUuid); groupConfig.load(repository); return groupConfig; }",4adebe306b503cf08f94b40ef7455ec4be465c4a,"public static com.google.gerrit.server.group.db.GroupConfig loadForGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupUuid, repository); groupConfig.load(repository); return groupConfig; }",85169a038c1d228a2a126e1fc094473d4426e855,"public static com.google.gerrit.server.group.db.GroupConfig loadForGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupUuid); groupConfig.load(repository); return groupConfig; }",4adebe306b503cf08f94b40ef7455ec4be465c4a,2017-12-07 14:14:41,9
144151,java_com_google_gerrit_server_group_db_GroupConfig.java,public java.util.Optional<com.google.gerrit.server.group.InternalGroup> getLoadedGroup() { checkLoaded(); return loadedGroup; },c0ab9dfc58b344a7210fef7f0b9d7ab0b447cec2,public java.util.Optional<com.google.gerrit.server.group.InternalGroup> getLoadedGroup() { checkLoaded(); loadedGroup.ifPresent(( t) -> checkConsistencyWithGroupNameNotes(t)); return loadedGroup; },f2caabf23646d54aea17ce335d9ba3f9b6b9c7dc,public java.util.Optional<com.google.gerrit.server.group.InternalGroup> getLoadedGroup() { checkLoaded(); return loadedGroup; },c0ab9dfc58b344a7210fef7f0b9d7ab0b447cec2,2017-12-07 14:14:41,9
144151,java_com_google_gerrit_server_group_db_GroupConfig.java,"public static com.google.gerrit.server.group.db.GroupConfig loadForGroupSnapshot(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, org.eclipse.jgit.lib.ObjectId commitId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupUuid); groupConfig.load(repository, commitId); return groupConfig; }",63902abcd822e23b0897513f3613b69fe1472d2f,"public static com.google.gerrit.server.group.db.GroupConfig loadForGroupSnapshot(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, org.eclipse.jgit.lib.ObjectId commitId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupUuid, repository); groupConfig.load(repository, commitId); return groupConfig; }",1bf5f04081063f71d9734cc8d8045bd1ddf12981,"public static com.google.gerrit.server.group.db.GroupConfig loadForGroupSnapshot(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, org.eclipse.jgit.lib.ObjectId commitId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupUuid); groupConfig.load(repository, commitId); return groupConfig; }",63902abcd822e23b0897513f3613b69fe1472d2f,2017-12-07 14:14:41,9
145050,java_com_google_gerrit_server_group_ListGroups.java,private java.util.Optional<com.google.gerrit.common.data.GroupDescription.Internal> loadGroup(com.google.gerrit.common.data.GroupReference groupReference) { return groupCache.get(groupReference.getUUID()).map(InternalGroupDescription::new); },f06af8e3854e9be9f86394c69b3c5bb70fd565ef,"private java.util.Optional<com.google.gerrit.common.data.GroupDescription.Internal> loadGroup(com.google.gerrit.common.data.GroupReference groupReference) { java.util.Optional<com.google.gerrit.common.data.GroupDescription.Internal> group = groupCache.get(groupReference.getUUID()).map(InternalGroupDescription::new); if (!(group.isPresent())) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblemAsWarning(""Group %s (%s) from group name notes is failed to load from group ref""); } return group; }",5f6590951c34cb10145e68e23275f845826ba4c0,private java.util.Optional<com.google.gerrit.common.data.GroupDescription.Internal> loadGroup(com.google.gerrit.common.data.GroupReference groupReference) { return groupCache.get(groupReference.getUUID()).map(InternalGroupDescription::new); },f06af8e3854e9be9f86394c69b3c5bb70fd565ef,2017-12-07 23:41:35,6
145050,java_com_google_gerrit_server_group_ListGroups.java,"private java.util.List<com.google.gerrit.extensions.common.GroupInfo> suggestGroups() throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (conflictingSuggestParameters()) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""You should only have no more than one --project and -n with --suggest""); } java.util.List<com.google.gerrit.common.data.GroupReference> groupRefs = com.google.common.collect.Lists.newArrayList(com.google.common.collect.Iterables.limit(groupBackend.suggest(suggest, projects.stream().findFirst().orElse(null)), ((limit) <= 0 ? 10 : java.lang.Math.min(limit, 10)))); java.util.List<com.google.gerrit.extensions.common.GroupInfo> groupInfos = com.google.common.collect.Lists.newArrayListWithCapacity(groupRefs.size()); for (com.google.gerrit.common.data.GroupReference ref : groupRefs) { com.google.gerrit.common.data.GroupDescription.Basic desc = groupBackend.get(ref.getUUID()); if (desc != null) { groupInfos.add(json.addOptions(options).format(desc)); } } return groupInfos; }",03ba69e6c50a6511e522b310a239fac0321ead80,"private java.util.List<com.google.gerrit.extensions.common.GroupInfo> suggestGroups() throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (conflictingSuggestParameters()) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""You should only have no more than one --project and -n with --suggest""); } java.util.List<com.google.gerrit.common.data.GroupReference> groupRefs = com.google.common.collect.Lists.newArrayList(com.google.common.collect.Iterables.limit(groupBackend.suggest(suggest, projects.stream().findFirst().orElse(null)), ((limit) <= 0 ? 10 : java.lang.Math.min(limit, 10)))); java.util.List<com.google.gerrit.extensions.common.GroupInfo> groupInfos = com.google.common.collect.Lists.newArrayListWithCapacity(groupRefs.size()); for (com.google.gerrit.common.data.GroupReference ref : groupRefs) { com.google.gerrit.common.data.GroupDescription.Basic desc = groupBackend.get(ref.getUUID()); if (desc != null) { groupInfos.add(json.addOptions(options).format(desc)); } else if ((groupBackend) instanceof com.google.gerrit.server.account.InternalGroupBackend) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblemAsWarning(""Group %s (%s) from group name notes is failed to load from group ref"", ref.getName(), ref.getUUID()); } } return groupInfos; }",cfbfa4e71e9645b6aa2708c060cd3b6dec2b0165,"private java.util.List<com.google.gerrit.extensions.common.GroupInfo> suggestGroups() throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (conflictingSuggestParameters()) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""You should only have no more than one --project and -n with --suggest""); } java.util.List<com.google.gerrit.common.data.GroupReference> groupRefs = com.google.common.collect.Lists.newArrayList(com.google.common.collect.Iterables.limit(groupBackend.suggest(suggest, projects.stream().findFirst().orElse(null)), ((limit) <= 0 ? 10 : java.lang.Math.min(limit, 10)))); java.util.List<com.google.gerrit.extensions.common.GroupInfo> groupInfos = com.google.common.collect.Lists.newArrayListWithCapacity(groupRefs.size()); for (com.google.gerrit.common.data.GroupReference ref : groupRefs) { com.google.gerrit.common.data.GroupDescription.Basic desc = groupBackend.get(ref.getUUID()); if (desc != null) { groupInfos.add(json.addOptions(options).format(desc)); } } return groupInfos; }",03ba69e6c50a6511e522b310a239fac0321ead80,2017-12-07 23:41:35,6
146690,src_main_java_com_googlesource_gerrit_plugins_findowners_Checker.java,"int findApproval(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.server.account.Emails emails) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (com.googlesource.gerrit.plugins.findowners.Checker.isExemptFromOwnerApproval(changeData)) { return 0; } com.googlesource.gerrit.plugins.findowners.OwnersDb db = com.googlesource.gerrit.plugins.findowners.Cache.getInstance().get(projectState, accountCache, emails, repository, changeData); if ((db.getNumOwners()) <= 0) { return 0; } if ((minVoteLevel) <= 0) { minVoteLevel = com.googlesource.gerrit.plugins.findowners.Config.getMinOwnerVoteLevel(changeData); } com.googlesource.gerrit.plugins.findowners.Checker.log.trace((""findApproval db key = "" + (db.key))); return findApproval(accountCache, db); }",903fab484c411af434159dd848fb22bd58986b80,"int findApproval(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.server.account.Emails emails) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (com.googlesource.gerrit.plugins.findowners.Checker.isExemptFromOwnerApproval(changeData)) { return 0; } com.googlesource.gerrit.plugins.findowners.OwnersDb db = com.googlesource.gerrit.plugins.findowners.Cache.getInstance().get(projectState, accountCache, emails, repository, changeData); if ((db.getNumOwners()) <= 0) { return 0; } if ((minVoteLevel) <= 0) { minVoteLevel = com.googlesource.gerrit.plugins.findowners.Config.getMinOwnerVoteLevel(projectState); } com.googlesource.gerrit.plugins.findowners.Checker.log.trace((""findApproval db key = "" + (db.key))); return findApproval(accountCache, db); }",3b03aa66fdc93cd9a1797cfee318223387466d53,"int findApproval(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.server.account.Emails emails) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (com.googlesource.gerrit.plugins.findowners.Checker.isExemptFromOwnerApproval(changeData)) { return 0; } com.googlesource.gerrit.plugins.findowners.OwnersDb db = com.googlesource.gerrit.plugins.findowners.Cache.getInstance().get(projectState, accountCache, emails, repository, changeData); if ((db.getNumOwners()) <= 0) { return 0; } if ((minVoteLevel) <= 0) { minVoteLevel = com.googlesource.gerrit.plugins.findowners.Config.getMinOwnerVoteLevel(projectState, changeData); } com.googlesource.gerrit.plugins.findowners.Checker.log.trace((""findApproval db key = "" + (db.key))); return findApproval(accountCache, db); }",c08db1482eabdc1673aae81d69f04432f13ab15e,2017-12-09 16:49:48,2
146690,src_main_java_com_googlesource_gerrit_plugins_findowners_Config.java,"static int getMinOwnerVoteLevel(com.google.gerrit.server.query.change.ChangeData changeData) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Project.NameKey project = changeData.change().getProject(); try { return ((com.googlesource.gerrit.plugins.findowners.Config.config) == null) || (project == null) ? com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel : com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(project, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getInt(com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER_VOTE_LEVEL, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.findowners.Config.log.error((((""Cannot find project "" + project) + "" for "") + (com.googlesource.gerrit.plugins.findowners.Config.getChangeId(changeData))), e); return com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel; } }",174630327e6e7d78cb9ee38ed8b55a4344ef50db,"static int getMinOwnerVoteLevel(com.google.gerrit.server.project.ProjectState projectState) throws com.google.gwtorm.server.OrmException { return ((com.googlesource.gerrit.plugins.findowners.Config.config) == null) || (projectState == null) ? com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel : com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(projectState, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getInt(com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER_VOTE_LEVEL, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel); }",5683f5d38eabdbaafe35f536fa169a8418f26749,"static int getMinOwnerVoteLevel(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.query.change.ChangeData c) throws com.google.gwtorm.server.OrmException { if (projectState == null) { com.googlesource.gerrit.plugins.findowners.Config.log.error((""Null projectState for change "" + (com.googlesource.gerrit.plugins.findowners.Config.getChangeId(c)))); return com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel; } else if ((com.googlesource.gerrit.plugins.findowners.Config.config) == null) { return com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel; } else { return com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(projectState, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getInt(com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER_VOTE_LEVEL, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel); } }",e1530ebca267b2a7db52cc1c9bfa3fbbd46a0f12,2017-12-09 16:49:48,2
140090,java_com_google_gerrit_server_project_ListTags.java,"public static com.google.gerrit.extensions.api.projects.TagInfo createTagInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.WebLinks links) throws java.io.IOException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject object = rw.parseAny(ref.getObjectId()); boolean canDelete = perm.testOrFalse(RefPermission.DELETE); java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> webLinks = links.getTagLinks(projectName.get(), ref.getName()); if (object instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), tag.getName(), tag.getObject().getName(), tag.getFullMessage().trim(), (tagger != null ? com.google.gerrit.server.CommonConverters.toGitPerson(tag.getTaggerIdent()) : null), canDelete, (webLinks.isEmpty() ? null : webLinks)); } return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), ref.getObjectId().getName(), canDelete, (webLinks.isEmpty() ? null : webLinks)); }",1dce8634e645b35e5b078a1fe74fa5d7e6d3b880,"public static com.google.gerrit.extensions.api.projects.TagInfo createTagInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.WebLinks links) throws java.io.IOException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject object = rw.parseAny(ref.getObjectId()); boolean canDelete = perm.testOrFalse(RefPermission.DELETE); java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> webLinks = links.getTagLinks(projectName.get(), ref.getName()); if (object instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), tag.getName(), tag.getObject().getName(), tag.getFullMessage().trim(), (tagger != null ? com.google.gerrit.server.CommonConverters.toGitPerson(tagger) : null), canDelete, (tagger != null ? new java.sql.Timestamp(tagger.getWhen().getTime()) : null), (webLinks.isEmpty() ? null : webLinks)); } java.sql.Timestamp timestamp = (object instanceof org.eclipse.jgit.revwalk.RevCommit) ? new java.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getWhen().getTime()) : null; return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), ref.getObjectId().getName(), canDelete, timestamp, (webLinks.isEmpty() ? null : webLinks)); }",d46f8e774f382544f5a2cefb62f1e4d68739f3d4,"public static com.google.gerrit.extensions.api.projects.TagInfo createTagInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.WebLinks links) throws java.io.IOException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject object = rw.parseAny(ref.getObjectId()); java.lang.Boolean canDelete = (perm.testOrFalse(RefPermission.DELETE)) ? true : null; java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> webLinks = links.getTagLinks(projectName.get(), ref.getName()); if (object instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), tag.getName(), tag.getObject().getName(), tag.getFullMessage().trim(), (tagger != null ? com.google.gerrit.server.CommonConverters.toGitPerson(tagger) : null), canDelete, (webLinks.isEmpty() ? null : webLinks), (tagger != null ? new java.sql.Timestamp(tagger.getWhen().getTime()) : null)); } java.sql.Timestamp timestamp = (object instanceof org.eclipse.jgit.revwalk.RevCommit) ? new java.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getWhen().getTime()) : null; return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), ref.getObjectId().getName(), canDelete, (webLinks.isEmpty() ? null : webLinks), timestamp); }",8d4a2ca0e02f7e0c2be8054b1f62177936e2807d,2017-12-11 07:30:28,5
140090,javatests_com_google_gerrit_acceptance_rest_project_TagsIT.java,"@org.junit.Test public void lightweightTag() throws java.lang.Exception { grantTagPermissions(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(""refs/heads/master""); r.assertOkStatus(); com.google.gerrit.extensions.api.projects.TagInput input = new com.google.gerrit.extensions.api.projects.TagInput(); input.ref = ""v1.0""; input.revision = r.getCommit().getName(); com.google.gerrit.extensions.api.projects.TagInfo result = tag(input.ref).create(input).get(); assertThat(result.ref).isEqualTo(((R_TAGS) + (input.ref))); assertThat(result.revision).isEqualTo(input.revision); assertThat(result.canDelete).isTrue(); input.ref = ""refs/tags/v2.0""; result = tag(input.ref).create(input).get(); assertThat(result.ref).isEqualTo(input.ref); assertThat(result.revision).isEqualTo(input.revision); assertThat(result.canDelete).isTrue(); setApiUser(user); result = tag(input.ref).get(); assertThat(result.canDelete).isFalse(); eventRecorder.assertRefUpdatedEvents(project.get(), result.ref, null, result.revision); }",166ad49d5148b2a1ec42efef587f26363c9cdb63,"@org.junit.Test public void lightweightTag() throws java.lang.Exception { grantTagPermissions(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(""refs/heads/master""); r.assertOkStatus(); com.google.gerrit.extensions.api.projects.TagInput input = new com.google.gerrit.extensions.api.projects.TagInput(); input.ref = ""v1.0""; input.revision = r.getCommit().getName(); com.google.gerrit.extensions.api.projects.TagInfo result = tag(input.ref).create(input).get(); assertThat(result.ref).isEqualTo(((R_TAGS) + (input.ref))); assertThat(result.revision).isEqualTo(input.revision); assertThat(result.canDelete).isTrue(); assertThat(result.created).isEqualTo(timestamp(r)); input.ref = ""refs/tags/v2.0""; result = tag(input.ref).create(input).get(); assertThat(result.ref).isEqualTo(input.ref); assertThat(result.revision).isEqualTo(input.revision); assertThat(result.canDelete).isTrue(); assertThat(result.created).isEqualTo(timestamp(r)); setApiUser(user); result = tag(input.ref).get(); assertThat(result.canDelete).isFalse(); eventRecorder.assertRefUpdatedEvents(project.get(), result.ref, null, result.revision); }",b21d8c00f1f9ffd8dc99e8a946c9dd7f96e92621,"@org.junit.Test public void lightweightTag() throws java.lang.Exception { grantTagPermissions(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(""refs/heads/master""); r.assertOkStatus(); com.google.gerrit.extensions.api.projects.TagInput input = new com.google.gerrit.extensions.api.projects.TagInput(); input.ref = ""v1.0""; input.revision = r.getCommit().getName(); com.google.gerrit.extensions.api.projects.TagInfo result = tag(input.ref).create(input).get(); assertThat(result.ref).isEqualTo(((R_TAGS) + (input.ref))); assertThat(result.revision).isEqualTo(input.revision); assertThat(result.canDelete).isTrue(); assertThat(result.created).isEqualTo(timestamp(r)); input.ref = ""refs/tags/v2.0""; result = tag(input.ref).create(input).get(); assertThat(result.ref).isEqualTo(input.ref); assertThat(result.revision).isEqualTo(input.revision); assertThat(result.canDelete).isTrue(); assertThat(result.created).isEqualTo(timestamp(r)); setApiUser(user); result = tag(input.ref).get(); assertThat(result.canDelete).isNull(); eventRecorder.assertRefUpdatedEvents(project.get(), result.ref, null, result.revision); }",65a147ec0e0e05b6767021a682ea612b33df47f7,2017-12-11 07:30:28,5
146993,java_com_google_gerrit_server_account_AccountConfig.java,public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.account = checkNotNull(account); this.registeredOn = account.getRegisteredOn(); },5d3619cded0c1f52e66df1e89a9962c3f19904ab,public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.loadedAccount = java.util.Optional.of(checkNotNull(account)); this.registeredOn = account.getRegisteredOn(); },eeb76f0ca4d3bab86ed681bb84d6d32f20e79bac,public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.loadedAccount = java.util.Optional.of(account); this.registeredOn = account.getRegisteredOn(); },6b62f9dd688cceabb2bc4f3694ddcc33ebdbaf4b,2017-12-12 11:34:38,5
146993,java_com_google_gerrit_server_account_AccountConfig.java,@com.google.gerrit.common.Nullable public com.google.gerrit.reviewdb.client.Account getAccount() { checkLoaded(); return account; },9c1e07ab5b47fe2b096538acf0dfa9eb068f139a,@com.google.gerrit.common.Nullable public java.util.Optional<com.google.gerrit.reviewdb.client.Account> getLoadedAccount() { checkLoaded(); return loadedAccount; },c89209499eb15e41bdd5350a4999963ff813584c,public java.util.Optional<com.google.gerrit.reviewdb.client.Account> getLoadedAccount() { checkLoaded(); return loadedAccount; },29912537b4515435f595a57493adcf22b6154566,2017-12-12 11:34:38,5
146993,java_com_google_gerrit_server_account_AccountConfig.java,"@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision) != null) { rw.reset(); rw.markStart(revision); rw.sort(RevSort.REVERSE); registeredOn = new java.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); account = parse(cfg); account.setMetaId(revision.name()); } isLoaded = true; }",9b2b87d1c3065ee4b2369aa0921949f2f29456b5,"@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision) != null) { rw.reset(); rw.markStart(revision); rw.sort(RevSort.REVERSE); registeredOn = new java.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadedAccount = java.util.Optional.of(parse(cfg, revision.name())); } isLoaded = true; }",eb99b03c05a7cd660b947cab617dbf9d37b47a33,"@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision) != null) { rw.reset(); rw.markStart(revision); rw.sort(RevSort.REVERSE); registeredOn = new java.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadedAccount = java.util.Optional.of(parse(cfg, revision.name())); } else { loadedAccount = java.util.Optional.empty(); } }",2b4c9dd875103af9cd759372b367c2762b04ada5,2017-12-12 11:34:38,5
141790,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,"private java.util.Map<com.google.gerrit.reviewdb.client.Change.Key, com.google.gerrit.server.notedb.ChangeNotes> openChangesByBranch(com.google.gerrit.reviewdb.client.Branch.NameKey branch) throws com.google.gwtorm.server.OrmException { java.util.Map<com.google.gerrit.reviewdb.client.Change.Key, com.google.gerrit.server.notedb.ChangeNotes> r = new java.util.HashMap<>(); for (com.google.gerrit.server.query.change.ChangeData cd : queryProvider.get().byBranchOpen(branch)) { r.put(cd.change().getKey(), cd.notes()); } return r; }",0dccdcf5d03d328218928887472b08fa15e3202b,"private java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.notedb.ChangeNotes> openChangesByIdByBranch(com.google.gerrit.reviewdb.client.Branch.NameKey branch) throws com.google.gwtorm.server.OrmException { java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.notedb.ChangeNotes> r = new java.util.HashMap<>(); for (com.google.gerrit.server.query.change.ChangeData cd : queryProvider.get().byBranchOpen(branch)) { r.put(cd.change().getId(), cd.notes()); } return r; }",63e0d43f8f833702ec17e8d52b9321330fc24f1f,private java.util.Optional<com.google.gerrit.server.query.change.ChangeData> byLegacyId(com.google.gerrit.reviewdb.client.Change.Id legacyId) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.query.change.ChangeData> res = queryProvider.get().byLegacyChangeId(legacyId); if (res.isEmpty()) { return java.util.Optional.empty(); } return java.util.Optional.of(res.get(0)); },b171cc43cdd8610612a6291680a9717997cf5fde,2017-12-12 13:29:35,5
144390,src_test_java_com_ericsson_gerrit_plugins_highavailability_health_HealthServletTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testErrorDuringTransitionToHealty() throws java.io.IOException { java.nio.file.Files.createFile(tempFolder.newFolder(""unhealthy.txt"").toPath().resolve(""child"")); javax.servlet.http.HttpServletResponse responseMock = mock(javax.servlet.http.HttpServletResponse.class); servlet.doPost(null, responseMock); verify(responseMock).sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); }",b523267e36bb33c7bd86bcd8ecc0085b3a3ec3c1,"public void testErrorDuringTransitionToHealty() throws java.io.IOException { java.nio.file.Files.createFile(tempFolder.newFolder(""unhealthy.txt"").toPath().resolve(""child"")); javax.servlet.http.HttpServletResponse responseMock = mock(javax.servlet.http.HttpServletResponse.class); servlet.doPost(null, responseMock); verify(responseMock).sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); }",426855f6a3490aac5f25925782a8ec161d30ca3b,2017-12-14 03:42:24,6
144390,src_main_java_com_ericsson_gerrit_plugins_highavailability_health_HealthServlet.java,"@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { if (healthy) { rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } else { try { rsp.sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_SERVICE_UNAVAILABLE); } catch (java.io.IOException e) { rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error(""Failed to send error response"", e); } } }",2d38815bef677f1ecccbb3e2d19f0bd47422ae9a,"@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { if (unhealthyFile.exists()) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_SERVICE_UNAVAILABLE); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); }",db528db2108080c10788b8e68fd813c89bdbc701,"@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { if (unhealthyFile.exists()) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_SERVICE_UNAVAILABLE); return; } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); }",b8f5aad5c4bbbcdcfa511ddc0595e69869c0f720,2017-12-14 03:42:24,6
144390,src_test_java_com_ericsson_gerrit_plugins_highavailability_health_HealthServletTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testErrorDuringTransitionToUnhealty() throws java.io.IOException { tempFolder.delete(); javax.servlet.http.HttpServletResponse responseMock = mock(javax.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock).sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); }",341c1c2928fb666f58993985d9b4f5a2b9b8a2d7,"public void testErrorDuringTransitionToUnhealty() throws java.io.IOException { tempFolder.delete(); javax.servlet.http.HttpServletResponse responseMock = mock(javax.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock).sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); }",f1e20fc8288f64f7d06f2d7462314386d9062227,2017-12-14 03:42:24,6
144390,src_main_java_com_ericsson_gerrit_plugins_highavailability_health_HealthServlet.java,"@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { this.healthy = true; rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); }",768177e48abce8fc3e6d1b8ef3a6adde0f5da46c,"@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { try { setHealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error(""Failed to set healthy"", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }",10dd15375d889cadcb9fb6134a40e9e9569a7a69,"@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_FORBIDDEN); return; } try { setHealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error(""Failed to set healthy"", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }",fb07bf9120775be511966627e6494ced88a91720,2017-12-14 03:42:24,6
144390,src_test_java_com_ericsson_gerrit_plugins_highavailability_health_HealthServletTest.java,@org.junit.Before public void setUp() throws java.lang.Exception { servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(); },3e0de00fb864e421400f72869fea4779047f8731,@org.junit.Before public void setUp() throws java.lang.Exception { servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(tempFolder.getRoot().toPath()); },ae4b85bf1977fd1bf6b12c88e7f6545bb303fdec,"@org.junit.Before public void setUp() throws java.lang.Exception { when(currentUserProviderMock.get()).thenReturn(currentUserMock); when(currentUserMock.getCapabilities()).thenReturn(capabilityControlMock); when(capabilityControlMock.canAdministrateServer()).thenReturn(true); servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(currentUserProviderMock, tempFolder.getRoot().toPath()); }",215ef96a8df6d592e6e63a3f9b3bd75dc3389d80,2017-12-14 03:42:24,6
144390,src_main_java_com_ericsson_gerrit_plugins_highavailability_health_HealthServlet.java,"@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { this.healthy = false; rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); }",d2091dd7decc9e2feb6d3c98dcc1f220b1c778d2,"@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { try { setUnhealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error(""Failed to set unhealthy"", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }",018ac73dfafa7e33b960e87f3e4649624d3263a8,"@java.lang.Override protected void doDelete(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_FORBIDDEN); return; } try { setUnhealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error(""Failed to set unhealthy"", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }",f4b503cc0b4d3a57296faeaec1d3ecb52abbb3fd,2017-12-14 03:42:24,6
147971,java_com_google_gerrit_server_api_changes_ChangeApiImpl.java,"@java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo pureRevert(@com.google.gerrit.common.Nullable java.lang.String claimedOriginal) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getPureRevert.setClaimedOriginal(claimedOriginal).apply(change); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot compute pure revert"", e); } }",8640ffdad118163c8cd6e992173e5b6e3193dccf,"@java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo pureRevert(@com.google.gerrit.common.Nullable java.lang.String claimedOriginal) throws com.google.gerrit.extensions.restapi.RestApiException { try { return calculatePureRevert.getPureRevert(change.getNotes(), claimedOriginal); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot compute pure revert"", e); } }",d19e5737cd5b8e2256abdb3223d0f8096d7944ad,"@java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo pureRevert(@com.google.gerrit.common.Nullable java.lang.String claimedOriginal) throws com.google.gerrit.extensions.restapi.RestApiException { try { return pureRevert.get(change.getNotes(), claimedOriginal); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot compute pure revert"", e); } }",7d2098ba0dc777d6fc137861b7c838e02da04483,2017-12-14 10:15:47,3
147971,java_com_google_gerrit_server_query_change_ChangeData.java,"@com.google.gerrit.common.Nullable public java.lang.Boolean isPureRevert() throws com.google.gwtorm.server.OrmException { if ((change().getRevertOf()) == null) { return null; } try { return pureRevert.getPureRevert(notes()).isPureRevert; } catch (java.io.IOException | com.google.gerrit.extensions.restapi.BadRequestException | com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new com.google.gwtorm.server.OrmException(""could not compute pure revert"", e); } }",2b09333543ff6d033b87656f12fe803246a7c334,"@com.google.gerrit.common.Nullable public java.lang.Boolean isPureRevert() throws com.google.gwtorm.server.OrmException { if ((change().getRevertOf()) == null) { return null; } try { return pureRevert.getPureRevert(notes(), null).isPureRevert; } catch (java.io.IOException | com.google.gerrit.extensions.restapi.BadRequestException | com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new com.google.gwtorm.server.OrmException(""could not compute pure revert"", e); } }",2aac6816b8dd79fa4f3cee638ff7e85de1ab9e86,"@com.google.gerrit.common.Nullable public java.lang.Boolean isPureRevert() throws com.google.gwtorm.server.OrmException { if ((change().getRevertOf()) == null) { return null; } try { return pureRevert.get(notes(), null).isPureRevert; } catch (java.io.IOException | com.google.gerrit.extensions.restapi.BadRequestException | com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new com.google.gwtorm.server.OrmException(""could not compute pure revert"", e); } }",9eee4961bb5227c81dacee5c22bb026ea0077905,2017-12-14 10:15:47,3
147971,java_com_google_gerrit_server_change_GetPureRevert.java,"@java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet currentPatchSet = psUtil.current(dbProvider.get(), rsrc.getNotes()); if (currentPatchSet == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""current revision is missing""); } return getPureRevert(rsrc.getNotes()); }",b613edac475bd48b783e184a65e994c63692b726,"@java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException, java.io.IOException { return calculatePureRevert.getPureRevert(rsrc.getNotes(), claimedOriginal); }",38850203101f7d7ba21b6276122fda66433fd0b3,"@java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException, java.io.IOException { return pureRevert.get(rsrc.getNotes(), claimedOriginal); }",7fdd92748758f0c044cf29edd036e9723f685a5b,2017-12-14 10:15:47,3
148230,java_com_google_gerrit_testing_SchemaUpgradeTestEnvironment.java,"private void setUp() throws java.lang.Exception { injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testing.InMemoryModule()); injector.injectMembers(this); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); lifecycle.start(); try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); setApiUser(accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(""user"")).getAccountId()); }",6c4f2d829f91e4077ca1cad8c86dc74e975239f4,"private void setUp(java.lang.Object target) throws java.lang.Exception { injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testing.InMemoryModule()); injector.injectMembers(this); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); lifecycle.start(); try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); setApiUser(accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(""user"")).getAccountId()); injector.injectMembers(target); }",91d8c3a2ad6b84a6b444a1ce23d15fcfbe16702e,"private void setUp(java.lang.Object target) throws java.lang.Exception { com.google.inject.Injector injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testing.InMemoryModule()); injector.injectMembers(this); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); lifecycle.start(); try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); setApiUser(accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(""user"")).getAccountId()); injector.injectMembers(target); }",00e5b2cb4b88dcfa02f49f505921221bc30f221f,2017-12-15 00:19:28,2
148330,src_test_java_com_ericsson_gerrit_plugins_highavailability_health_HealthServletTest.java,"@org.junit.Test public void testErrorDuringTransitionToUnhealty() throws java.io.IOException { tempFolder.delete(); javax.servlet.http.HttpServletResponse responseMock = mock(javax.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock).sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); }",341c1c2928fb666f58993985d9b4f5a2b9b8a2d7,"@org.junit.Test public void testErrorDuringTransitionToUnHealthy() throws java.io.IOException { tempFolder.delete(); javax.servlet.http.HttpServletResponse responseMock = mock(javax.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock).sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); }",06e332678eee6979541c47c7a363411e49675756,"@org.junit.Test public void testErrorDuringTransitionToUnhealthy() throws java.io.IOException { tempFolder.delete(); javax.servlet.http.HttpServletResponse responseMock = mock(javax.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock).sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); }",f372222c7f8a449d1eba84c0f1ce04779ccec55f,2017-12-15 04:46:21,2
147990,src_main_java_com_ericsson_gerrit_plugins_highavailability_Configuration.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String getProtocolStack(org.eclipse.jgit.lib.Config cfg, SitePaths site) { java.lang.String location = cfg.getString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PROTOCOL_STACK_KEY); if (location == null) { return null; } java.nio.file.Path p = java.nio.file.Paths.get(location); if (p.isAbsolute()) { return location; } return site.etc_dir.resolve(location).toString(); }",02b48a8dfd0bd0acd8b43d4df505882db07940fb,"private java.util.Optional<java.nio.file.Path> getProtocolStack(org.eclipse.jgit.lib.Config cfg, SitePaths site) { java.lang.String location = cfg.getString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PROTOCOL_STACK_KEY); return location == null ? java.util.Optional.empty() : java.util.Optional.of(site.etc_dir.resolve(location)); }",3ffdd5631a0e7df70c069f63e126ddc83602b344,2017-12-15 16:21:42,8
147990,src_main_java_com_ericsson_gerrit_plugins_highavailability_Configuration.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.lang.String protocolStack() { return protocolStack; },07d84be0094259a6ddad6324ebc33ab9bb667405,public java.util.Optional<java.nio.file.Path> protocolStack() { return protocolStack; },693bd253f622a0d334205e117658cfae52bf46dd,2017-12-15 16:21:42,8
147990,src_main_java_com_ericsson_gerrit_plugins_highavailability_peers_jgroups_JGroupsPeerInfoProvider.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private org.jgroups.JChannel getChannel() { java.lang.String protocolStack = """"; try { protocolStack = jgroupsConfig.protocolStack(); return protocolStack == null ? new org.jgroups.JChannel() : new org.jgroups.JChannel(protocolStack); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.error(""Unable to create a new channel with {}"", protocolStack, e); return null; } }",259d3162eec312d25c37aaf980f833f6c306219a,"private org.jgroups.JChannel getChannel() throws java.lang.Exception { java.util.Optional<java.nio.file.Path> protocolStack = jgroupsConfig.protocolStack(); try { return protocolStack.isPresent() ? new org.jgroups.JChannel(protocolStack.get().toString()) : new org.jgroups.JChannel(); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.error(""Unable to create a channel with protocol stack: {}"", (protocolStack == null ? ""default"" : protocolStack), e); throw e; } }",161c2077e5ab8a000e3c53e8cf2bd57b512f0041,2017-12-15 16:21:42,8
147990,src_main_java_com_ericsson_gerrit_plugins_highavailability_peers_jgroups_JGroupsPeerInfoProvider.java,"public void connect() { try { channel = new org.jgroups.JChannel(); java.util.Optional<java.net.InetAddress> address = finder.findAddress(); if (address.isPresent()) { channel.getProtocolStack().getTransport().setBindAddress(address.get()); com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.debug(""Channel bound to {}"", address.get()); } else { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.warn(""Channel not bound: address not present""); } channel.setReceiver(this); channel.setDiscardOwnMessages(true); channel.connect(jgroupsConfig.clusterName()); com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.info(""Channel {} successfully joined jgroups cluster {}"", channel.getName(), jgroupsConfig.clusterName()); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.error(""joining cluster {} for channel {} failed"", jgroupsConfig.clusterName(), channel.getName(), e); } }",f62e231df85773e3ef31e88ebd1adfaf0f8edb1a,"public void connect() { try { channel = getChannel(); java.util.Optional<java.net.InetAddress> address = finder.findAddress(); if (address.isPresent()) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.debug((""Protocol stack: "" + (channel.getProtocolStack()))); channel.getProtocolStack().getTransport().setBindAddress(address.get()); com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.debug(""Channel bound to {}"", address.get()); } else { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.warn(""Channel not bound: address not present""); } channel.setReceiver(this); channel.setDiscardOwnMessages(true); channel.connect(jgroupsConfig.clusterName()); com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.info(""Channel {} successfully joined jgroups cluster {}"", channel.getName(), jgroupsConfig.clusterName()); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.error(""joining cluster {} for channel {} failed"", jgroupsConfig.clusterName(), channel.getName(), e); } }",380aa8aa9d6703b017a1aea4e51214eb06378fb6,"public void connect() { try { channel = getChannel(); java.util.Optional<java.net.InetAddress> address = finder.findAddress(); if (address.isPresent()) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.debug((""Protocol stack: "" + (channel.getProtocolStack()))); channel.getProtocolStack().getTransport().setBindAddress(address.get()); com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.debug(""Channel bound to {}"", address.get()); } else { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.warn(""Channel not bound: address not present""); } channel.setReceiver(this); channel.setDiscardOwnMessages(true); channel.connect(jgroupsConfig.clusterName()); com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.info(""Channel {} successfully joined jgroups cluster {}"", channel.getName(), jgroupsConfig.clusterName()); } catch (java.lang.Exception e) { if ((channel) != null) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.error(""joining cluster {} (channel {}) failed"", jgroupsConfig.clusterName(), channel.getName(), e); } else { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.error(""joining cluster {} failed"", jgroupsConfig.clusterName(), e); } } }",5056ee651ec6f5a8ca6d5f6f0e814ec77acc8f2e,2017-12-15 16:21:42,8
144710,java_com_google_gerrit_acceptance_AbstractDaemonTest.java,protected void setUseSignedOffBy(com.google.gerrit.extensions.client.InheritableBoolean value) throws java.lang.Exception { try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(project)) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); config.getProject().setUseSignedOffBy(value); config.commit(md); projectCache.evict(config.getProject()); } },bf7c80b8817d5cc4140fb6cd3086f73094acfeee,"protected void setUseSignedOffBy(com.google.gerrit.extensions.client.InheritableBoolean value) throws java.lang.Exception { try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(project)) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); config.getProject().setBooleanConfig(BooleanProjectConfig.USE_SIGNED_OFFBY, value); config.commit(md); projectCache.evict(config.getProject()); } }",0b8f8401ba93a19b56ab5e84d80f3bdec65c54a6,"protected void setUseSignedOffBy(com.google.gerrit.extensions.client.InheritableBoolean value) throws java.lang.Exception { try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(project)) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); config.getProject().setBooleanConfig(BooleanProjectConfig.USE_SIGNED_OFF_BY, value); config.commit(md); projectCache.evict(config.getProject()); } }",3deb6466f38132d86dc87195005968de923eec58,2017-12-16 00:15:37,5
144710,java_com_google_gerrit_server_git_validators_CommitValidators.java,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(state.isUseSignedOffBy())) { return java.util.Collections.emptyList(); } org.eclipse.jgit.revwalk.RevCommit commit = receiveEvent.commit; org.eclipse.jgit.lib.PersonIdent committer = commit.getCommitterIdent(); org.eclipse.jgit.lib.PersonIdent author = commit.getAuthorIdent(); boolean sboAuthor = false; boolean sboCommitter = false; boolean sboMe = false; for (org.eclipse.jgit.revwalk.FooterLine footer : commit.getFooterLines()) { if (footer.matches(FooterKey.SIGNED_OFF_BY)) { java.lang.String e = footer.getEmailAddress(); if (e != null) { sboAuthor |= author.getEmailAddress().equals(e); sboCommitter |= committer.getEmailAddress().equals(e); sboMe |= user.hasEmailAddress(e); } } } if (((!sboAuthor) && (!sboCommitter)) && (!sboMe)) { try { perm.check(RefPermission.FORGE_COMMITTER); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""not Signed-off-by author/committer/uploader in commit message footer""); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.validators.CommitValidators.log.error(""cannot check FORGE_COMMITTER"", e); throw new com.google.gerrit.server.git.validators.CommitValidationException(""internal auth error""); } } return java.util.Collections.emptyList(); }",b4af38df05474bf9efc1a0cd6caca6644e4ce559,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(state.is(BooleanProjectConfig.USE_SIGNED_OFFBY))) { return java.util.Collections.emptyList(); } org.eclipse.jgit.revwalk.RevCommit commit = receiveEvent.commit; org.eclipse.jgit.lib.PersonIdent committer = commit.getCommitterIdent(); org.eclipse.jgit.lib.PersonIdent author = commit.getAuthorIdent(); boolean sboAuthor = false; boolean sboCommitter = false; boolean sboMe = false; for (org.eclipse.jgit.revwalk.FooterLine footer : commit.getFooterLines()) { if (footer.matches(FooterKey.SIGNED_OFF_BY)) { java.lang.String e = footer.getEmailAddress(); if (e != null) { sboAuthor |= author.getEmailAddress().equals(e); sboCommitter |= committer.getEmailAddress().equals(e); sboMe |= user.hasEmailAddress(e); } } } if (((!sboAuthor) && (!sboCommitter)) && (!sboMe)) { try { perm.check(RefPermission.FORGE_COMMITTER); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""not Signed-off-by author/committer/uploader in commit message footer""); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.validators.CommitValidators.log.error(""cannot check FORGE_COMMITTER"", e); throw new com.google.gerrit.server.git.validators.CommitValidationException(""internal auth error""); } } return java.util.Collections.emptyList(); }",3da7d48029cb8b278c4e94ab14c2ebde24e91395,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(state.is(BooleanProjectConfig.USE_SIGNED_OFF_BY))) { return java.util.Collections.emptyList(); } org.eclipse.jgit.revwalk.RevCommit commit = receiveEvent.commit; org.eclipse.jgit.lib.PersonIdent committer = commit.getCommitterIdent(); org.eclipse.jgit.lib.PersonIdent author = commit.getAuthorIdent(); boolean sboAuthor = false; boolean sboCommitter = false; boolean sboMe = false; for (org.eclipse.jgit.revwalk.FooterLine footer : commit.getFooterLines()) { if (footer.matches(FooterKey.SIGNED_OFF_BY)) { java.lang.String e = footer.getEmailAddress(); if (e != null) { sboAuthor |= author.getEmailAddress().equals(e); sboCommitter |= committer.getEmailAddress().equals(e); sboMe |= user.hasEmailAddress(e); } } } if (((!sboAuthor) && (!sboCommitter)) && (!sboMe)) { try { perm.check(RefPermission.FORGE_COMMITTER); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""not Signed-off-by author/committer/uploader in commit message footer""); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.validators.CommitValidators.log.error(""cannot check FORGE_COMMITTER"", e); throw new com.google.gerrit.server.git.validators.CommitValidationException(""internal auth error""); } } return java.util.Collections.emptyList(); }",b5916050e78f39aa58b976563910179f4ac3b13e,2017-12-16 00:15:37,5
144710,java_com_google_gerrit_server_project_RefControl.java,"private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case UPDATE_BY_SUBMIT : return projectControl.controlForRef((""refs/for/"" + (getRefName()))).canSubmit(true); case READ_PRIVATE_CHANGES : return canViewPrivateChanges(); case READ_CONFIG : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().isUseSignedOffBy())); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",a3980204a5bdd5a30b8656643e800c55421bc9e0,"private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case UPDATE_BY_SUBMIT : return projectControl.controlForRef((""refs/for/"" + (getRefName()))).canSubmit(true); case READ_PRIVATE_CHANGES : return canViewPrivateChanges(); case READ_CONFIG : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFFBY))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",3be18789c73617df78ce95e702b71f452095b1c0,"private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case UPDATE_BY_SUBMIT : return projectControl.controlForRef((""refs/for/"" + (getRefName()))).canSubmit(true); case READ_PRIVATE_CHANGES : return canViewPrivateChanges(); case READ_CONFIG : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFF_BY))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",088933369f6f5a6c2c36929eb71b72a2c60be0ee,2017-12-16 00:15:37,5
144710,javatests_com_google_gerrit_acceptance_rest_project_CreateProjectIT.java,"@org.junit.Test public void createProjectWithProperties() throws java.lang.Exception { java.lang.String newProjectName = name(""newProject""); com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.name = newProjectName; in.description = ""Test description""; in.submitType = com.google.gerrit.extensions.client.SubmitType.CHERRY_PICK; in.useContributorAgreements = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useSignedOffBy = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.requireChangeId = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; com.google.gerrit.extensions.common.ProjectInfo p = gApi.projects().create(in).get(); assertThat(p.name).isEqualTo(newProjectName); com.google.gerrit.reviewdb.client.Project project = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(newProjectName)).getProject(); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjectInfo(project, p); assertThat(project.getDescription()).isEqualTo(in.description); assertThat(project.getSubmitType()).isEqualTo(in.submitType); assertThat(project.getUseContributorAgreements()).isEqualTo(in.useContributorAgreements); assertThat(project.getUseSignedOffBy()).isEqualTo(in.useSignedOffBy); assertThat(project.getUseContentMerge()).isEqualTo(in.useContentMerge); assertThat(project.getRequireChangeID()).isEqualTo(in.requireChangeId); }",a28e2b86ba6a10de402d9262111174a17ba680ce,"@org.junit.Test public void createProjectWithProperties() throws java.lang.Exception { java.lang.String newProjectName = name(""newProject""); com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.name = newProjectName; in.description = ""Test description""; in.submitType = com.google.gerrit.extensions.client.SubmitType.CHERRY_PICK; in.useContributorAgreements = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useSignedOffBy = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.requireChangeId = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; com.google.gerrit.extensions.common.ProjectInfo p = gApi.projects().create(in).get(); assertThat(p.name).isEqualTo(newProjectName); com.google.gerrit.reviewdb.client.Project project = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(newProjectName)).getProject(); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjectInfo(project, p); assertThat(project.getDescription()).isEqualTo(in.description); assertThat(project.getSubmitType()).isEqualTo(in.submitType); assertThat(project.getBooleanConfig(BooleanProjectConfig.USE_CONTRIBUTOR_AGREEMENTS)).isEqualTo(in.useContributorAgreements); assertThat(project.getBooleanConfig(BooleanProjectConfig.USE_SIGNED_OFFBY)).isEqualTo(in.useSignedOffBy); assertThat(project.getBooleanConfig(BooleanProjectConfig.USE_CONTENT_MERGE)).isEqualTo(in.useContentMerge); assertThat(project.getBooleanConfig(BooleanProjectConfig.REQUIRE_CHANGE_ID)).isEqualTo(in.requireChangeId); }",1b2c1a8814ca82b02c8d0e39576824f70a1f18c8,"@org.junit.Test public void createProjectWithProperties() throws java.lang.Exception { java.lang.String newProjectName = name(""newProject""); com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.name = newProjectName; in.description = ""Test description""; in.submitType = com.google.gerrit.extensions.client.SubmitType.CHERRY_PICK; in.useContributorAgreements = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useSignedOffBy = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.requireChangeId = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; com.google.gerrit.extensions.common.ProjectInfo p = gApi.projects().create(in).get(); assertThat(p.name).isEqualTo(newProjectName); com.google.gerrit.reviewdb.client.Project project = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(newProjectName)).getProject(); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjectInfo(project, p); assertThat(project.getDescription()).isEqualTo(in.description); assertThat(project.getSubmitType()).isEqualTo(in.submitType); assertThat(project.getBooleanConfig(BooleanProjectConfig.USE_CONTRIBUTOR_AGREEMENTS)).isEqualTo(in.useContributorAgreements); assertThat(project.getBooleanConfig(BooleanProjectConfig.USE_SIGNED_OFF_BY)).isEqualTo(in.useSignedOffBy); assertThat(project.getBooleanConfig(BooleanProjectConfig.USE_CONTENT_MERGE)).isEqualTo(in.useContentMerge); assertThat(project.getBooleanConfig(BooleanProjectConfig.REQUIRE_CHANGE_ID)).isEqualTo(in.requireChangeId); }",bd484c6c19e3b05aa7dc7f3325b1a3ee5a0c9107,2017-12-16 00:15:37,5
148031,gerrit-server_src_main_java_com_google_gerrit_server_schema_Schema_154.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.Set<java.util.Map.Entry<java.lang.String, com.google.gerrit.server.schema.Schema_154.AccountSetter>> getFields(com.google.gerrit.reviewdb.server.ReviewDb db) throws java.sql.SQLException { com.google.gwtorm.jdbc.JdbcSchema schema = ((com.google.gwtorm.jdbc.JdbcSchema) (db)); java.sql.Connection connection = schema.getConnection(); java.util.Set<java.lang.String> columns = schema.getDialect().listColumns(connection, com.google.gerrit.server.schema.Schema_154.TABLE); return com.google.gerrit.server.schema.Schema_154.ACCOUNT_FIELDS_MAP.entrySet().stream().filter(( e) -> columns.contains(e.getKey())).collect(java.util.stream.Collectors.toSet()); }",e6d9928718a88e43849d4f6e17ea38af9d54f6f4,"private java.util.Map<java.lang.String, com.google.gerrit.server.schema.Schema_154.AccountSetter> getFields(com.google.gerrit.reviewdb.server.ReviewDb db) throws java.sql.SQLException { com.google.gwtorm.jdbc.JdbcSchema schema = ((com.google.gwtorm.jdbc.JdbcSchema) (db)); java.sql.Connection connection = schema.getConnection(); java.util.Set<java.lang.String> columns = schema.getDialect().listColumns(connection, com.google.gerrit.server.schema.Schema_154.TABLE); return com.google.gerrit.server.schema.Schema_154.ACCOUNT_FIELDS_MAP.entrySet().stream().filter(( e) -> columns.contains(e.getKey())).collect(java.util.stream.Collectors.toMap(java.util.Map.Entry::getKey, java.util.Map.Entry::getValue)); }",39e27bb6d56213e1df1aac955f1a32d6c3788d3b,2017-12-18 15:45:46,7
148031,gerrit-server_src_main_java_com_google_gerrit_server_schema_Schema_154.java,"private java.util.Set<com.google.gerrit.reviewdb.client.Account> scanAccounts(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.lib.ProgressMonitor pm) throws java.sql.SQLException { try (java.sql.Statement stmt = newStatement(db);java.sql.ResultSet rs = stmt.executeQuery((""SELECT account_id,"" + ((((("" registered_on,"" + "" full_name, "") + "" preferred_email,"") + "" status,"") + "" inactive"") + "" FROM accounts"")))) { java.util.Set<com.google.gerrit.reviewdb.client.Account> s = new java.util.HashSet<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.Account a = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(rs.getInt(1)), rs.getTimestamp(2)); a.setFullName(rs.getString(3)); a.setPreferredEmail(rs.getString(4)); a.setStatus(rs.getString(5)); a.setActive(rs.getString(6).equals(""N"")); s.add(a); pm.update(1); } return s; } }",eb49458c8dd7927b37b51c94042714b4c0dda7cf,"private java.util.Set<com.google.gerrit.reviewdb.client.Account> scanAccounts(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.lib.ProgressMonitor pm) throws java.sql.SQLException { java.util.Set<java.util.Map.Entry<java.lang.String, com.google.gerrit.server.schema.Schema_154.AccountSetter>> fields = getFields(db); if (fields.isEmpty()) { return java.util.Collections.emptySet(); } java.lang.String query = fields.stream().map(( f) -> f.getKey()).collect(java.util.stream.Collectors.joining("", "", ""SELECT account_id, registered_on, "", java.lang.String.format("" FROM %s"", com.google.gerrit.server.schema.Schema_154.TABLE))); try (java.sql.Statement stmt = newStatement(db);java.sql.ResultSet rs = stmt.executeQuery(query)) { java.util.Set<com.google.gerrit.reviewdb.client.Account> s = new java.util.HashSet<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.Account a = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(rs.getInt(1)), rs.getTimestamp(2)); for (java.util.Map.Entry<java.lang.String, com.google.gerrit.server.schema.Schema_154.AccountSetter> field : fields) { field.getValue().set(a, rs, field.getKey()); } s.add(a); pm.update(1); } return s; } }",f65fa6539da8cf19b80c48d6a86c3f6058fadfb6,"private java.util.Set<com.google.gerrit.reviewdb.client.Account> scanAccounts(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.lib.ProgressMonitor pm) throws java.sql.SQLException { java.util.Map<java.lang.String, com.google.gerrit.server.schema.Schema_154.AccountSetter> fields = getFields(db); if (fields.isEmpty()) { com.google.gerrit.server.schema.Schema_154.log.warn(""Only account_id and registered_on fields are migrated for accounts""); } java.util.List<java.lang.String> queryFields = new java.util.ArrayList<>(); queryFields.add(""account_id""); queryFields.add(""registered_on""); queryFields.addAll(fields.keySet()); java.lang.String query = (""SELECT "" + (java.lang.String.join("", "", queryFields))) + (java.lang.String.format("" FROM %s"", com.google.gerrit.server.schema.Schema_154.TABLE)); try (java.sql.Statement stmt = newStatement(db);java.sql.ResultSet rs = stmt.executeQuery(query)) { java.util.Set<com.google.gerrit.reviewdb.client.Account> s = new java.util.HashSet<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.Account a = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(rs.getInt(1)), rs.getTimestamp(2)); for (java.util.Map.Entry<java.lang.String, com.google.gerrit.server.schema.Schema_154.AccountSetter> field : fields.entrySet()) { field.getValue().set(a, rs, field.getKey()); } s.add(a); pm.update(1); } return s; } }",b7e3ded69240ae90e14f9b2822dd53933eb2c1e7,2017-12-18 15:45:46,7
143053,src_main_java_com_googlesource_gerrit_plugins_quota_RestApiRequestRateEnforcer.java,,,protected boolean isRest(javax.servlet.ServletRequest req) { return resturi.matcher(getURI(req)).matches(); },cfda78a0511b682e130400c062b94fbcef617324,boolean isRest(javax.servlet.ServletRequest req) { return (req instanceof javax.servlet.http.HttpServletRequest) && (resturi.matcher(((javax.servlet.http.HttpServletRequest) (req)).getRequestURI()).matches()); },a1c94c8705ff1f5890f2a6290347eeb367fdac2b,2017-12-19 10:45:36,12
143053,src_main_java_com_googlesource_gerrit_plugins_quota_Module.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public synchronized boolean inGracePeriod() { if ((gracepermits) < 0) { gracepermits = 0; } return ((gracepermits)--) > 0; },55d7ad47923cedfa327388985fb4028e19f698e4,boolean hasGracePermits() { if ((gracePermits.get()) <= 0) return false; return (gracePermits.getAndDecrement()) > 0; },0ec22d528c7343b986b6d2ae63f464dda746bde0,2017-12-19 10:45:36,12
143053,src_main_java_com_googlesource_gerrit_plugins_quota_Module.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithBurstyRateLimiter(com.google.gerrit.reviewdb.client.Account.Id key) throws java.lang.Exception { return createWithBurstyRateLimiter(finder.firstMatching(limitsConfigType, userFactory.create(key))); }",9d2dc85d7ff8a9dc5460a6cd2e2356a03d2cea24,@java.lang.Override public final com.googlesource.gerrit.plugins.quota.Module.Holder load(com.google.gerrit.reviewdb.client.Account.Id key) throws java.lang.Exception { return createWithBurstyRateLimiter(key); },465559c241c6b0dce0ed0cd612e027bf08b9b3a6,2017-12-19 10:45:36,12
143053,src_main_java_com_googlesource_gerrit_plugins_quota_HttpModule.java,,,"@java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.httpd.AllRequestFilter.class).to(com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.class); cache(com.googlesource.gerrit.plugins.quota.HttpModule.CACHE_NAME_RESTAPI_ACCOUNTID, Account.Id.class, .class).loader(com.googlesource.gerrit.plugins.quota.HttpModule.RestApiLoaderAccountId.class); cache(com.googlesource.gerrit.plugins.quota.HttpModule.CACHE_NAME_RESTAPI_REMOTEHOST, java.lang.String.class, .class).loader(com.googlesource.gerrit.plugins.quota.HttpModule.RestApiLoaderRemoteHost.class); bindConstant().annotatedWith(com.google.inject.name.Names.named(RateMsgHelper.RESTAPI_CONFIGURABLE_MSG_ANNOTATION)).to(RESTAPI_LIMIT_EXCEEDED_MSG); }",a2b11bc3fc816fcc0554ca318fbedd9a870cd248,"@java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.httpd.AllRequestFilter.class).to(com.googlesource.gerrit.plugins.quota.RestApiRateLimiter.class); bindConstant().annotatedWith(com.google.inject.name.Names.named(RateMsgHelper.RESTAPI_CONFIGURABLE_MSG_ANNOTATION)).to(restapiLimitExceededMsg); }",e40b0ed66709c16b06c47e4b9804da8a9ac69641,2017-12-19 10:45:36,12
143053,src_main_java_com_googlesource_gerrit_plugins_quota_RestApiRequestRateEnforcer.java,,,"@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse res, final javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if (isRest(req)) { com.googlesource.gerrit.plugins.quota.Module.Holder rateLimiterHolder = null; com.google.gerrit.server.CurrentUser u = user.get(); com.google.gerrit.reviewdb.client.Account.Id accountId = null; if (u.isIdentifiedUser()) { accountId = u.asIdentifiedUser().getAccountId(); try { rateLimiterHolder = limitsPerAccount.get(accountId); } catch (java.util.concurrent.ExecutionException e) { java.lang.String msg = java.text.MessageFormat.format(""Cannot get rate limits for account ''{}''"", accountId); com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.log.warn(msg, e); } } else { try { rateLimiterHolder = limitsPerRemoteHost.get(req.getRemoteHost()); } catch (java.util.concurrent.ExecutionException e) { java.lang.String msg = java.text.MessageFormat.format(""Cannot get rate limits for anonymous access from remote host ''{0}''"", req.getRemoteHost()); com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.log.warn(msg, e); } } if (((!(rateLimiterHolder.inGracePeriod())) && ((rateLimiterHolder.get()) != null)) && (!(rateLimiterHolder.get().tryAcquire()))) { java.lang.String msg = java.text.MessageFormat.format(limitExceededMsg, ((rateLimiterHolder.get().getRate()) * (com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.SECONDS_PER_HOUR)), rateLimiterHolder.getBurst()); ((javax.servlet.http.HttpServletResponse) (res)).sendError(com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.SC_TOO_MANY_REQUESTS, msg); return; } } chain.doFilter(req, res); }",9a71bccf52cf5ec0c838d5a1c28993264152b405,"@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse res, final javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if (isRest(req)) { com.googlesource.gerrit.plugins.quota.Module.Holder rateLimiterHolder; com.google.gerrit.server.CurrentUser u = user.get(); if (u.isIdentifiedUser()) { com.google.gerrit.reviewdb.client.Account.Id accountId = u.asIdentifiedUser().getAccountId(); try { rateLimiterHolder = limitsPerAccount.get(accountId); } catch (java.util.concurrent.ExecutionException e) { rateLimiterHolder = com.googlesource.gerrit.plugins.quota.Module.Holder.EMPTY; java.lang.String msg = java.text.MessageFormat.format(""Cannot get rate limits for account ''{0}''"", accountId); com.googlesource.gerrit.plugins.quota.RestApiRateLimiter.log.warn(msg, e); } } else { try { rateLimiterHolder = limitsPerRemoteHost.get(req.getRemoteHost()); } catch (java.util.concurrent.ExecutionException e) { rateLimiterHolder = com.googlesource.gerrit.plugins.quota.Module.Holder.EMPTY; java.lang.String msg = java.text.MessageFormat.format(""Cannot get rate limits for anonymous access from remote host ''{0}''"", req.getRemoteHost()); com.googlesource.gerrit.plugins.quota.RestApiRateLimiter.log.warn(msg, e); } } if (((!(rateLimiterHolder.hasGracePermits())) && ((rateLimiterHolder.get()) != null)) && (!(rateLimiterHolder.get().tryAcquire()))) { java.lang.String msg = java.text.MessageFormat.format(limitExceededMsg, ((rateLimiterHolder.get().getRate()) * (com.googlesource.gerrit.plugins.quota.RestApiRateLimiter.SECONDS_PER_HOUR)), rateLimiterHolder.getBurstPermits()); ((javax.servlet.http.HttpServletResponse) (res)).sendError(com.googlesource.gerrit.plugins.quota.RestApiRateLimiter.SC_TOO_MANY_REQUESTS, msg); return; } } chain.doFilter(req, res); }",9893b96809e03096906c6eca99fe4b487683136d,2017-12-19 10:45:36,12
143053,src_main_java_com_googlesource_gerrit_plugins_quota_Module.java,"@java.lang.Override public com.googlesource.gerrit.plugins.quota.Module.Holder load(java.lang.String key) throws java.lang.Exception { com.google.common.base.Optional<com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.RateLimit> limit = finder.getRateLimit(AccountLimitsConfig.Type.UPLOADPACK, anonymous); if (limit.isPresent()) { return com.googlesource.gerrit.plugins.quota.Module.Holder.createWithBurstyRateLimiter(limit); } return com.googlesource.gerrit.plugins.quota.Module.Holder.EMPTY; }",02db8c6848048b3ce4d5759245d88447b566957f,private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithBurstyRateLimiter(com.google.common.base.Optional<com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.RateLimit> limit) throws java.lang.Exception { if (limit.isPresent()) { return com.googlesource.gerrit.plugins.quota.Module.Holder.createWithBurstyRateLimiter(limit); } return com.googlesource.gerrit.plugins.quota.Module.Holder.EMPTY; },833994393a42b38a916037fb3aeaed0ec31ece17,"private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithBurstyRateLimiter(com.google.gerrit.reviewdb.client.Account.Id key) throws java.lang.Exception { return createWithBurstyRateLimiter(finder.firstMatching(limitsConfigType, userFactory.create(key))); }",9d2dc85d7ff8a9dc5460a6cd2e2356a03d2cea24,2017-12-19 10:45:36,12
143053,src_main_java_com_googlesource_gerrit_plugins_quota_Module.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public final com.googlesource.gerrit.plugins.quota.Module.Holder load(Key key) throws java.lang.Exception { if (((kind) == (com.googlesource.gerrit.plugins.quota.Module.AbstractHolderCacheLoader.LoaderType.ANONYMOUS)) && (key instanceof java.lang.String)) { return createWithBurstyRateLimiter(); } if (((kind) == (com.googlesource.gerrit.plugins.quota.Module.AbstractHolderCacheLoader.LoaderType.ACCOUNTID)) && (key instanceof com.google.gerrit.reviewdb.client.Account.Id)) { return createWithBurstyRateLimiter(((com.google.gerrit.reviewdb.client.Account.Id) (key))); } return com.googlesource.gerrit.plugins.quota.Module.Holder.EMPTY; },d15fe5b2c671a619b98ea153f2b585a4043d99ae,@java.lang.Override public final com.googlesource.gerrit.plugins.quota.Module.Holder load(java.lang.String key) throws java.lang.Exception { return createWithBurstyRateLimiter(); },5598e58562843c094c5db0b159d544cec7583c69,2017-12-19 10:45:36,12
147614,java_com_google_gerrit_server_update_RetryHelper.java,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { return execute(action, com.google.gerrit.server.update.RetryHelper.defaults()); }",8fc2333021673e98fd49fafe06386394a6ffbb89,"public <T> T execute(com.google.gerrit.server.update.Action<com.google.gerrit.server.update.BatchUpdate.Factory, T> action) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { return execute(action, defaults()); }",62fd42af4a8cc42e46d96084e1a2728131ba2070,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return execute(action, com.google.gerrit.server.update.RetryHelper.defaults(), ( t) -> t instanceof com.google.gerrit.server.git.LockFailureException); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gwtorm.server.OrmException.class); throw new com.google.gwtorm.server.OrmException(t); } }",5461f16eb75fbc89e25f9c3b983cdb1bb2f99baf,2017-12-19 14:11:13,7
147614,java_com_google_gerrit_server_update_RetryHelper.java,private static boolean isLockFailure(java.lang.Throwable t) { if (t instanceof com.google.gerrit.server.update.UpdateException) { t = t.getCause(); } return t instanceof com.google.gerrit.server.git.LockFailureException; },e6313a8cef2f2f29668cbe046db8f47150666592,@java.lang.Override protected boolean retryOn(java.lang.Throwable t) { if (t instanceof com.google.gerrit.server.update.UpdateException) { t = t.getCause(); } return t instanceof com.google.gerrit.server.git.LockFailureException; },cd3aa30a8cdca56e448c480cd93f7019816ca19c,"private <O> com.github.rholder.retry.RetryerBuilder<O> createRetryerBuilder(com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) { com.github.rholder.retry.RetryerBuilder<O> retryerBuilder = com.github.rholder.retry.RetryerBuilder.<O>newBuilder().retryIfException(exceptionPredicate); if ((opts.listener()) != null) { retryerBuilder.withRetryListener(opts.listener()); } if ((overwriteDefaultRetryerStrategySetup) != null) { overwriteDefaultRetryerStrategySetup.accept(retryerBuilder); return retryerBuilder; } return retryerBuilder.withStopStrategy(com.github.rholder.retry.StopStrategies.stopAfterDelay(firstNonNull(opts.timeout(), defaultTimeout).toMillis(), java.util.concurrent.TimeUnit.MILLISECONDS)).withWaitStrategy(waitStrategy); }",c0eb689a5a2d50ac5a386cc461cbbd6da13cc06e,2017-12-19 14:11:13,7
147614,java_com_google_gerrit_server_update_RetryHelper.java,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.server.update.RetryHelper.MetricListener listener = null; try { com.github.rholder.retry.RetryerBuilder<T> builder = com.github.rholder.retry.RetryerBuilder.newBuilder(); if (migration.disableChangeReviewDb()) { listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(opts.listener()); builder.withRetryListener(listener).withStopStrategy(com.github.rholder.retry.StopStrategies.stopAfterDelay(firstNonNull(opts.timeout(), defaultTimeout).toMillis(), java.util.concurrent.TimeUnit.MILLISECONDS)).withWaitStrategy(waitStrategy).retryIfException(com.google.gerrit.server.update.RetryHelper::isLockFailure); } else { } return builder.build().call(() -> action.call(updateFactory)); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { if (e instanceof com.github.rholder.retry.RetryException) { metrics.timeoutCount.increment(); } if ((e.getCause()) != null) { com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), com.google.gerrit.server.update.UpdateException.class); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), com.google.gerrit.extensions.restapi.RestApiException.class); } throw new com.google.gerrit.server.update.UpdateException(e); } finally { if (listener != null) { metrics.attemptCounts.record(listener.getAttemptCount()); } } }",c463e54341fc865ce1d3beb449b7fd8371015b02,"public <T> T execute(com.google.gerrit.server.update.Action<com.google.gerrit.server.update.BatchUpdate.Factory, T> action, com.google.gerrit.server.update.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { if (!(migration.disableChangeReviewDb())) { return doExecute(updateFactory, action, com.github.rholder.retry.RetryerBuilder.<T>newBuilder().build()); } return doExecute(updateFactory, action, opts); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.server.update.UpdateException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(t); } }",57227a948cee8ffda58934fe041dcad465c23798,"private <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws java.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return execute(action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(listener.getAttemptCount()); } }",eb91aa7a5669e121d7e9812d7b4a3b3becef3d2b,2017-12-19 14:11:13,7
147614,java_com_google_gerrit_server_account_externalids_ExternalIdsUpdate.java,"private com.google.gerrit.server.account.externalids.ExternalIdsUpdate.RefsMetaExternalIdsUpdate updateNoteMap(com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalIdUpdater updater) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryer.call(() -> { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName);org.eclipse.jgit.lib.ObjectInserter ins = repo.newObjectInserter()) { org.eclipse.jgit.lib.ObjectId rev = readRevision(repo); afterReadRevision.run(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.notes.NoteMap noteMap = readNoteMap(rw, rev); com.google.gerrit.server.account.externalids.UpdatedExternalIds updatedExtIds = updater.update(com.google.gerrit.server.account.externalids.OpenRepo.create(repo, rw, ins, noteMap)); return commit(repo, rw, ins, rev, noteMap, updatedExtIds); } } }); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { if ((e.getCause()) != null) { com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), com.google.gwtorm.server.OrmException.class); } throw new com.google.gwtorm.server.OrmException(e); } }",44e5bd58ba6d82344cc6afd6410752454eba3fb2,"private com.google.gerrit.server.account.externalids.ExternalIdsUpdate.RefsMetaExternalIdsUpdate updateNoteMap(com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalIdUpdater updater) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return retryHelper.execute(updater, ( i) -> { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName);org.eclipse.jgit.lib.ObjectInserter ins = repo.newObjectInserter()) { org.eclipse.jgit.lib.ObjectId rev = readRevision(repo); afterReadRevision.run(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.notes.NoteMap noteMap = readNoteMap(rw, rev); com.google.gerrit.server.account.externalids.UpdatedExternalIds updatedExtIds = i.update(com.google.gerrit.server.account.externalids.OpenRepo.create(repo, rw, ins, noteMap)); return commit(repo, rw, ins, rev, noteMap, updatedExtIds); } } }); }",3947d5164b6b99a2525bb0b9cd62ffe8fc9065f8,"private com.google.gerrit.server.account.externalids.ExternalIdsUpdate.RefsMetaExternalIdsUpdate updateNoteMap(com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalIdUpdater updater) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return retryHelper.execute(() -> { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName);org.eclipse.jgit.lib.ObjectInserter ins = repo.newObjectInserter()) { org.eclipse.jgit.lib.ObjectId rev = readRevision(repo); afterReadRevision.run(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.notes.NoteMap noteMap = readNoteMap(rw, rev); com.google.gerrit.server.account.externalids.UpdatedExternalIds updatedExtIds = updater.update(com.google.gerrit.server.account.externalids.OpenRepo.create(repo, rw, ins, noteMap)); return commit(repo, rw, ins, rev, noteMap, updatedExtIds); } } }); }",5a04814e71dc64f5a94a6bd11ab0ba9127beef05,2017-12-19 14:11:13,7
148033,java_com_google_gerrit_server_project_ChildProjectLister.java,,,"public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> recursiveChildProjects(com.google.gerrit.reviewdb.client.Project.NameKey parent) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project> projects = readAllProjects(); com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project.NameKey> children = parentToChildren(projects); com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(user); java.util.List<com.google.gerrit.extensions.common.ProjectInfo> results = new java.util.ArrayList<>(); depthFirstFormat(results, perm, projects, children, parent); return results; }",ac3e5aad0b4a198530ab0c114690bf102ff84b71,"public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> list(com.google.gerrit.reviewdb.client.Project.NameKey parent) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project> projects = readAllProjects(); com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project.NameKey> children = parentToChildren(projects); com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(user); java.util.List<com.google.gerrit.extensions.common.ProjectInfo> results = new java.util.ArrayList<>(); depthFirstFormat(results, perm, projects, children, parent); return results; }",560b55b3dbc9ec4a842006dcb7bab402e44085d9,2017-12-19 23:08:41,10
148033,java_com_google_gerrit_server_project_ListChildProjects.java,@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return recursiveChildProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); },542ba619a10bf5463b254b8634416983fac91b84,@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return childProjectLister.recursiveChildProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); },cfa9393036bea347af600c44581d5e4c3e3e4a24,@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return childProjects.list(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); },d98502126c20a8ed64576576c9fc1bb01554a335,2017-12-19 23:08:41,10
148033,java_com_google_gerrit_server_query_change_ChangeQueryBuilder.java,"com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, notesFactory, changeDataFactory, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, listChildProjects, submitDryRun, conflictsCache, index, indexConfig, listMembers, starredChangesUtil, accountCache, allowsDrafts, notesMigration); }",34a848a5ded992c1b6131a717a1f14813cd722dc,"com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, notesFactory, changeDataFactory, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, childProjectLister, submitDryRun, conflictsCache, index, indexConfig, listMembers, starredChangesUtil, accountCache, allowsDrafts, notesMigration); }",76a135915e6050d9bceac7b940b9f3d5a4d705c6,"com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, notesFactory, changeDataFactory, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, childProjects, submitDryRun, conflictsCache, index, indexConfig, listMembers, starredChangesUtil, accountCache, allowsDrafts, notesMigration); }",5598a4401fc0aeb6c2af128b2139ec97f111b3ce,2017-12-19 23:08:41,10
148033,java_com_google_gerrit_server_query_change_ChangeQueryBuilder.java,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData> parentproject(java.lang.String name) { return new com.google.gerrit.server.query.change.ParentProjectPredicate(args.projectCache, args.listChildProjects, args.self, name); }",5596795b6ddf0015448411141611c84a4f83cc24,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData> parentproject(java.lang.String name) { return new com.google.gerrit.server.query.change.ParentProjectPredicate(args.projectCache, args.childProjectLister, args.self, name); }",5488fa472ed2fc71cc31123ff94fbd32bcaa6b36,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData> parentproject(java.lang.String name) { return new com.google.gerrit.server.query.change.ParentProjectPredicate(args.projectCache, args.childProjects, args.self, name); }",6e52ddac6c8a1ed12de97955b5190bc2d2ca86dc,2017-12-19 23:08:41,10
147991,java_com_google_gerrit_server_project_Reachable.java,,,"public boolean isReachableFrom(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { refs = refFilter.create(state, repo).filter(refs, true); return com.google.gerrit.server.change.IncludedInResolver.includedInAny(repo, rw, commit, refs.values()); } catch (java.io.IOException e) { com.google.gerrit.server.project.Reachable.log.error(java.lang.String.format(""Cannot verify permissions to commit object %s in repository %s"", commit.name(), state.getNameKey()), e); return false; } }",22cb106f172d3f46542c202fa2cf29008322231d,"public boolean fromRefs(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> filtered = refFilter.create(state, repo).filter(refs, true); return com.google.gerrit.server.change.IncludedInResolver.includedInAny(repo, rw, commit, filtered.values()); } catch (java.io.IOException e) { com.google.gerrit.server.project.Reachable.log.error(java.lang.String.format(""Cannot verify permissions to commit object %s in repository %s"", commit.name(), state.getNameKey()), e); return false; } }",dfc321e64e51c450aaee401aa9a0768243d44f79,2017-12-19 23:08:41,11
147991,java_com_google_gerrit_server_project_CommitsCollection.java,"public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try { java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.CommitsCollection.log.error((((""Cannot look up change for commit "" + (commit.name())) + "" in "") + project), e); } return isReachableFrom(state, repo, commit, repo.getAllRefs()); }",7fe2fc83dea587d2bc6311b98747bdf7687011d6,"public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try { java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.CommitsCollection.log.error((((""Cannot look up change for commit "" + (commit.name())) + "" in "") + project), e); } return reachable.isReachableFrom(state, repo, commit, repo.getAllRefs()); }",d01b4a3b770c0bcd9e91740ee2c010268d56e060,"public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try { java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.CommitsCollection.log.error((((""Cannot look up change for commit "" + (commit.name())) + "" in "") + project), e); } return reachable.fromRefs(state, repo, commit, repo.getAllRefs()); }",611e161108e96d0da8ff1fc68c9247f480cdba73,2017-12-19 23:08:41,11
147991,java_com_google_gerrit_server_project_ProjectControl.java,"boolean isReachableFromHeadsOrTags(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.RefDatabase refdb = repo.getRefDatabase(); java.util.Collection<org.eclipse.jgit.lib.Ref> heads = refdb.getRefs(Constants.R_HEADS).values(); java.util.Collection<org.eclipse.jgit.lib.Ref> tags = refdb.getRefs(Constants.R_TAGS).values(); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = com.google.common.collect.Maps.newHashMapWithExpectedSize(((heads.size()) + (tags.size()))); for (org.eclipse.jgit.lib.Ref r : com.google.common.collect.Iterables.concat(heads, tags)) { refs.put(r.getName(), r); } return commits.isReachableFrom(state, repo, commit, refs); } catch (java.io.IOException e) { com.google.gerrit.server.project.ProjectControl.log.error(java.lang.String.format(""Cannot verify permissions to commit object %s in repository %s"", commit.name(), getProject().getNameKey()), e); return false; } }",4ab29b350a76fca7e3d3d7846f1d34a42f2df3e8,"boolean isReachableFromHeadsOrTags(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.RefDatabase refdb = repo.getRefDatabase(); java.util.Collection<org.eclipse.jgit.lib.Ref> heads = refdb.getRefs(Constants.R_HEADS).values(); java.util.Collection<org.eclipse.jgit.lib.Ref> tags = refdb.getRefs(Constants.R_TAGS).values(); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = com.google.common.collect.Maps.newHashMapWithExpectedSize(((heads.size()) + (tags.size()))); for (org.eclipse.jgit.lib.Ref r : com.google.common.collect.Iterables.concat(heads, tags)) { refs.put(r.getName(), r); } return reachable.isReachableFrom(state, repo, commit, refs); } catch (java.io.IOException e) { com.google.gerrit.server.project.ProjectControl.log.error(java.lang.String.format(""Cannot verify permissions to commit object %s in repository %s"", commit.name(), getProject().getNameKey()), e); return false; } }",7c3cb6746aa0126931e66d32e2a498c29d21113f,"boolean isReachableFromHeadsOrTags(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { return reachable.fromHeadsOrTags(state, repo, commit); }",3bd3c5e1fc79c4bcb19405348b552b18dc383161,2017-12-19 23:08:41,11
148033,java_com_google_gerrit_server_query_change_ParentProjectPredicate.java,"protected static java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.inject.Provider<com.google.gerrit.server.project.ListChildProjects> listChildProjects, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self, java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(value)); if (projectState == null) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = new java.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.project.ProjectResource proj = new com.google.gerrit.server.project.ProjectResource(projectState, self.get()); com.google.gerrit.server.project.ListChildProjects children = listChildProjects.get(); children.setRecursive(true); for (com.google.gerrit.extensions.common.ProjectInfo p : children.apply(proj)) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn(""cannot check permissions to expand child projects"", e); } return r; }",63b2245a142f6091d301a358373a6ff7241946b6,"protected static java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.gerrit.server.project.ChildProjectLister childProjectLister, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self, java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(value)); if (projectState == null) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = new java.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.project.ProjectResource proj = new com.google.gerrit.server.project.ProjectResource(projectState, self.get()); for (com.google.gerrit.extensions.common.ProjectInfo p : childProjectLister.recursiveChildProjects(proj.getNameKey())) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn(""cannot check permissions to expand child projects"", e); } return r; }",c89dad293232e405e12261a5f0177e04e575067d,"protected static java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.gerrit.server.project.ChildProjects childProjects, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self, java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(value)); if (projectState == null) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = new java.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { for (com.google.gerrit.extensions.common.ProjectInfo p : childProjects.list(projectState.getNameKey())) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn(""cannot check permissions to expand child projects"", e); } return r; }",caeea732d9a8485cb53a19041b614f6b994da7cf,2017-12-19 23:08:41,10
147670,gerrit-server_src_main_java_com_google_gerrit_server_extensions_events_PrivateStateChanged.java,,,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.Account account, java.sql.Timestamp when, boolean isPrivate) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.PrivateStateChanged.Event event = new com.google.gerrit.server.extensions.events.PrivateStateChanged.Event(util.changeInfo(change), util.accountInfo(account), isPrivate, when); for (com.google.gerrit.extensions.events.PrivateStateChangedListener l : listeners) { try { l.onPrivateStateChanged(event); } catch (java.lang.Exception e) { util.logEventListenerError(event, l, e); } } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.PrivateStateChanged.log.error(""Couldn't fire event"", e); } }",807476231b43c598715c8bd949b7eabebd86d0d0,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.Account account, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.PrivateStateChanged.Event event = new com.google.gerrit.server.extensions.events.PrivateStateChanged.Event(util.changeInfo(change), util.accountInfo(account), when); for (com.google.gerrit.extensions.events.PrivateStateChangedListener l : listeners) { try { l.onPrivateStateChanged(event); } catch (java.lang.Exception e) { util.logEventListenerError(event, l, e); } } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.PrivateStateChanged.log.error(""Couldn't fire event"", e); } }",84bd95c0d48fe2dfe1acdfa81d6d53d5b534b392,2017-12-20 00:44:14,5
147670,gerrit-server_src_main_java_com_google_gerrit_server_change_SetPrivateOp.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { privateStateChanged.fire(change, ctx.getAccount(), ctx.getWhen(), isPrivate); }",d4767b9534dfbdff3c819c936872c0842e38904d,"@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { privateStateChanged.fire(change, ctx.getAccount(), ctx.getWhen()); }",d5bbff91255d807508d5780c49f05556b6abdcfd,2017-12-20 00:44:14,5
147651,gerrit-server_src_main_java_com_google_gerrit_server_change_DeletePrivate.java,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canDeletePrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to unmark private""); } if (!(rsrc.getChange().isPrivate())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is not private""); } com.google.gerrit.server.change.SetPrivateOp op = new com.google.gerrit.server.change.SetPrivateOp(cmUtil, false, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",af043385b8cc79bda5e080f0c68a8f31cc087bd7,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canDeletePrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to unmark private""); } if (!(rsrc.getChange().isPrivate())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is not private""); } com.google.gerrit.server.change.SetPrivateOp op = setPrivateOpFactory.create(cmUtil, false, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",63e091e8130b7a2e90038e70e590c93d7555ac05,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canDeletePrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to unmark private""); } if (!(rsrc.getChange().isPrivate())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is not private""); } com.google.gerrit.server.change.SetPrivateOp op = new com.google.gerrit.server.change.SetPrivateOp(cmUtil, false, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",af043385b8cc79bda5e080f0c68a8f31cc087bd7,2017-12-20 00:44:14,6
148751,gerrit-server_src_main_java_com_google_gerrit_server_events_EventFactory.java,"public com.google.gerrit.server.data.ChangeAttribute asChangeAttribute(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change) { com.google.gerrit.server.data.ChangeAttribute a = new com.google.gerrit.server.data.ChangeAttribute(); a.project = change.getProject().get(); a.branch = change.getDest().getShortName(); a.topic = change.getTopic(); a.id = change.getKey().get(); a.number = change.getId().get(); a.subject = change.getSubject(); try { a.commitMessage = changeDataFactory.create(db, change).commitMessage(); } catch (java.lang.Exception e) { com.google.gerrit.server.events.EventFactory.log.error((""Error while getting full commit message for change "" + (a.number))); } a.url = getChangeUrl(change); a.owner = asAccountAttribute(change.getOwner()); a.assignee = asAccountAttribute(change.getAssignee()); a.status = change.getStatus(); a.createdOn = (change.getCreatedOn().getTime()) / 1000L; return a; }",a2e613e605f2f97730c395be2cf97efadd076ac3,"public com.google.gerrit.server.data.ChangeAttribute asChangeAttribute(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change) { com.google.gerrit.server.data.ChangeAttribute a = new com.google.gerrit.server.data.ChangeAttribute(); a.project = change.getProject().get(); a.branch = change.getDest().getShortName(); a.topic = change.getTopic(); a.id = change.getKey().get(); a.number = change.getId().get(); a.subject = change.getSubject(); try { a.commitMessage = changeDataFactory.create(db, change).commitMessage(); } catch (java.lang.Exception e) { com.google.gerrit.server.events.EventFactory.log.error((""Error while getting full commit message for change "" + (a.number))); } a.url = getChangeUrl(change); a.owner = asAccountAttribute(change.getOwner()); a.assignee = asAccountAttribute(change.getAssignee()); a.status = change.getStatus(); a.createdOn = (change.getCreatedOn().getTime()) / 1000L; a.isWip = (change.isWorkInProgress()) ? true : null; a.isPrivate = (change.isPrivate()) ? true : null; return a; }",7a14fe50acacb029e0745505fd4e1bb0d5f2863a,"public com.google.gerrit.server.data.ChangeAttribute asChangeAttribute(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change) { com.google.gerrit.server.data.ChangeAttribute a = new com.google.gerrit.server.data.ChangeAttribute(); a.project = change.getProject().get(); a.branch = change.getDest().getShortName(); a.topic = change.getTopic(); a.id = change.getKey().get(); a.number = change.getId().get(); a.subject = change.getSubject(); try { a.commitMessage = changeDataFactory.create(db, change).commitMessage(); } catch (java.lang.Exception e) { com.google.gerrit.server.events.EventFactory.log.error((""Error while getting full commit message for change "" + (a.number))); } a.url = getChangeUrl(change); a.owner = asAccountAttribute(change.getOwner()); a.assignee = asAccountAttribute(change.getAssignee()); a.status = change.getStatus(); a.createdOn = (change.getCreatedOn().getTime()) / 1000L; a.wip = (change.isWorkInProgress()) ? true : null; a.isPrivate = (change.isPrivate()) ? true : null; return a; }",5f9d2911dd52443c4e91535cd53bed3752e67eb0,2017-12-20 00:44:14,5
147651,gerrit-server_src_main_java_com_google_gerrit_server_change_PostPrivate.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canSetPrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to mark private""); } if (rsrc.getChange().isPrivate()) { return com.google.gerrit.extensions.restapi.Response.ok(""""); } com.google.gerrit.server.change.SetPrivateOp op = new com.google.gerrit.server.change.SetPrivateOp(cmUtil, true, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.created(""""); }",37f2f45f27272fd9fcf3839d990450a627b69f25,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canSetPrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to mark private""); } if (rsrc.getChange().isPrivate()) { return com.google.gerrit.extensions.restapi.Response.ok(""""); } com.google.gerrit.server.change.SetPrivateOp op = setPrivateOpFactory.create(cmUtil, true, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.created(""""); }",05994d8b955f0da61df5cf1921bdc8a405045b7d,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canSetPrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to mark private""); } if (rsrc.getChange().isPrivate()) { return com.google.gerrit.extensions.restapi.Response.ok(""""); } com.google.gerrit.server.change.SetPrivateOp op = new com.google.gerrit.server.change.SetPrivateOp(cmUtil, true, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.created(""""); }",37f2f45f27272fd9fcf3839d990450a627b69f25,2017-12-20 00:44:14,6
148890,java_com_google_gerrit_server_group_ListMembers.java,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (recursive) { return getTransitiveMembers(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); }",bbad8d4b12c7b996f26732594e03202c36325b72,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (recursive) { return groupMembers.getTransitiveMembers(group, resource.getControl()); } return groupMembers.getDirectMembers(group, resource.getControl()); }",0f47399b747c95ce2d1e6ae919d34a5e90586eee,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (recursive) { return getTransitiveMembers(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); }",bbad8d4b12c7b996f26732594e03202c36325b72,2017-12-20 12:45:37,9
148890,java_com_google_gerrit_server_group_GroupJson.java,"private void addInternalDetails(com.google.gerrit.extensions.common.GroupInfo info, com.google.gerrit.common.data.GroupDescription.Internal internalGroup, java.util.function.Supplier<com.google.gerrit.server.account.GroupControl> groupControlSupplier) throws com.google.gwtorm.server.OrmException { info.description = com.google.common.base.Strings.emptyToNull(internalGroup.getDescription()); info.groupId = internalGroup.getId().get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID ownerGroupUUID = internalGroup.getOwnerGroupUUID(); if (ownerGroupUUID != null) { info.ownerId = com.google.gerrit.extensions.restapi.Url.encode(ownerGroupUUID.get()); com.google.gerrit.common.data.GroupDescription.Basic o = groupBackend.get(ownerGroupUUID); if (o != null) { info.owner = o.getName(); } } info.createdOn = internalGroup.getCreatedOn(); if (options.contains(com.google.gerrit.server.group.MEMBERS)) { info.members = listMembers.get().getDirectMembers(internalGroup, groupControlSupplier.get()); } if (options.contains(com.google.gerrit.server.group.INCLUDES)) { info.includes = listSubgroups.get().getDirectSubgroups(internalGroup, groupControlSupplier.get()); } }",48d7a4520f363b9f07b0428ec4069af3160ff763,"private void addInternalDetails(com.google.gerrit.extensions.common.GroupInfo info, com.google.gerrit.common.data.GroupDescription.Internal internalGroup, java.util.function.Supplier<com.google.gerrit.server.account.GroupControl> groupControlSupplier) throws com.google.gwtorm.server.OrmException { info.description = com.google.common.base.Strings.emptyToNull(internalGroup.getDescription()); info.groupId = internalGroup.getId().get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID ownerGroupUUID = internalGroup.getOwnerGroupUUID(); if (ownerGroupUUID != null) { info.ownerId = com.google.gerrit.extensions.restapi.Url.encode(ownerGroupUUID.get()); com.google.gerrit.common.data.GroupDescription.Basic o = groupBackend.get(ownerGroupUUID); if (o != null) { info.owner = o.getName(); } } info.createdOn = internalGroup.getCreatedOn(); if (options.contains(com.google.gerrit.server.group.MEMBERS)) { info.members = groupMembers.getDirectMembers(internalGroup, groupControlSupplier.get()); } if (options.contains(com.google.gerrit.server.group.INCLUDES)) { info.includes = listSubgroups.get().getDirectSubgroups(internalGroup, groupControlSupplier.get()); } }",d27a1c8c170285d9396d4b0b328b4609f4dab08c,"private void addInternalDetails(com.google.gerrit.extensions.common.GroupInfo info, com.google.gerrit.common.data.GroupDescription.Internal internalGroup, java.util.function.Supplier<com.google.gerrit.server.account.GroupControl> groupControlSupplier) throws com.google.gwtorm.server.OrmException { info.description = com.google.common.base.Strings.emptyToNull(internalGroup.getDescription()); info.groupId = internalGroup.getId().get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID ownerGroupUUID = internalGroup.getOwnerGroupUUID(); if (ownerGroupUUID != null) { info.ownerId = com.google.gerrit.extensions.restapi.Url.encode(ownerGroupUUID.get()); com.google.gerrit.common.data.GroupDescription.Basic o = groupBackend.get(ownerGroupUUID); if (o != null) { info.owner = o.getName(); } } info.createdOn = internalGroup.getCreatedOn(); if (options.contains(com.google.gerrit.server.group.MEMBERS)) { info.members = listMembers.get().getDirectMembers(internalGroup, groupControlSupplier.get()); } if (options.contains(com.google.gerrit.server.group.INCLUDES)) { info.includes = listSubgroups.get().getDirectSubgroups(internalGroup, groupControlSupplier.get()); } }",48d7a4520f363b9f07b0428ec4069af3160ff763,2017-12-20 12:45:37,9
148890,java_com_google_gerrit_server_query_change_ChangeQueryBuilder.java,"com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, notesFactory, changeDataFactory, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, childProjects, submitDryRun, conflictsCache, index, indexConfig, listMembers, starredChangesUtil, accountCache, allowsDrafts, notesMigration); }",5598a4401fc0aeb6c2af128b2139ec97f111b3ce,"com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, notesFactory, changeDataFactory, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, childProjects, submitDryRun, conflictsCache, index, indexConfig, groupMembers, starredChangesUtil, accountCache, allowsDrafts, notesMigration); }",9ffb842c501532670f22fdb955bdc254afa6b7e2,"com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, notesFactory, changeDataFactory, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, childProjects, submitDryRun, conflictsCache, index, indexConfig, starredChangesUtil, accountCache, allowsDrafts, notesMigration, groupMembers); }",2a5411531682023db714be7549dafecfc66494dc,2017-12-20 12:45:37,9
148890,java_com_google_gerrit_sshd_commands_ListMembersCommand.java,"void display(java.io.PrintWriter writer) throws com.google.gwtorm.server.OrmException { java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(name)); java.lang.String errorText = ""Group not found or not visible\n""; if (!(group.isPresent())) { writer.write(errorText); writer.flush(); return; } java.util.List<com.google.gerrit.extensions.common.AccountInfo> members = getDirectMembers(group.get()); com.google.gerrit.server.ioutil.ColumnFormatter formatter = new com.google.gerrit.server.ioutil.ColumnFormatter(writer, '\t'); formatter.addColumn(""id""); formatter.addColumn(""username""); formatter.addColumn(""full name""); formatter.addColumn(""email""); formatter.nextLine(); for (com.google.gerrit.extensions.common.AccountInfo member : members) { if (member == null) { continue; } formatter.addColumn(java.lang.Integer.toString(member._accountId)); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.username, ""n/a"")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(com.google.common.base.Strings.emptyToNull(member.name), ""n/a"")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.email, ""n/a"")); formatter.nextLine(); } formatter.finish(); }",1ae542c70fcfb6eae3368ea78523f0d7efa75040,"void display(java.io.PrintWriter writer) throws com.google.gwtorm.server.OrmException { java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(name)); java.lang.String errorText = ""Group not found or not visible\n""; if (!(group.isPresent())) { writer.write(errorText); writer.flush(); return; } java.util.List<com.google.gerrit.extensions.common.AccountInfo> members = groupMembers.getDirectMembers(group.get()); com.google.gerrit.server.ioutil.ColumnFormatter formatter = new com.google.gerrit.server.ioutil.ColumnFormatter(writer, '\t'); formatter.addColumn(""id""); formatter.addColumn(""username""); formatter.addColumn(""full name""); formatter.addColumn(""email""); formatter.nextLine(); for (com.google.gerrit.extensions.common.AccountInfo member : members) { if (member == null) { continue; } formatter.addColumn(java.lang.Integer.toString(member._accountId)); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.username, ""n/a"")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(com.google.common.base.Strings.emptyToNull(member.name), ""n/a"")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.email, ""n/a"")); formatter.nextLine(); } formatter.finish(); }",7aad4243cdac61f2d202315cc1b76abc0569959c,"void display(java.io.PrintWriter writer) throws com.google.gwtorm.server.OrmException { java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(name)); java.lang.String errorText = ""Group not found or not visible\n""; if (!(group.isPresent())) { writer.write(errorText); writer.flush(); return; } java.util.List<com.google.gerrit.extensions.common.AccountInfo> members = getDirectMembers(group.get()); com.google.gerrit.server.ioutil.ColumnFormatter formatter = new com.google.gerrit.server.ioutil.ColumnFormatter(writer, '\t'); formatter.addColumn(""id""); formatter.addColumn(""username""); formatter.addColumn(""full name""); formatter.addColumn(""email""); formatter.nextLine(); for (com.google.gerrit.extensions.common.AccountInfo member : members) { if (member == null) { continue; } formatter.addColumn(java.lang.Integer.toString(member._accountId)); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.username, ""n/a"")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(com.google.common.base.Strings.emptyToNull(member.name), ""n/a"")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.email, ""n/a"")); formatter.nextLine(); } formatter.finish(); }",1ae542c70fcfb6eae3368ea78523f0d7efa75040,2017-12-20 12:45:37,9
149410,javatests_com_google_gerrit_acceptance_api_change_ChangeIdIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""change.api.allowedIdentifiers"", values = { ""PROJECT_NUMERIC_ID"", ""NUMERIC_ID"" }) public void deprecatedChangeIdReturnsBadRequest() throws java.lang.Exception { com.google.gerrit.extensions.api.changes.ChangeApi cApi1 = gApi.changes().id(project.get(), changeInfo._number); assertThat(cApi1.get().changeId).isEqualTo(changeInfo.changeId); com.google.gerrit.extensions.api.changes.ChangeApi cApi2 = gApi.changes().id(changeInfo._number); assertThat(cApi2.get().changeId).isEqualTo(changeInfo.changeId); com.google.gerrit.extensions.common.ChangeInfo ci = gApi.changes().create(new com.google.gerrit.extensions.common.ChangeInput(project.get(), ""master"", ""different message"")).get(); exception.expect(com.google.gerrit.extensions.restapi.DeprecatedIdentifierException.class); exception.expectMessage(((""The provided change identifier "" + (ci.changeId)) + "" is deprecated. Use 'project~changeNumber' instead."")); gApi.changes().id(ci.changeId); }",f9b1910117d0521e68fe4730d8b34cec61b4d406,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""change.api.allowedIdentifier"", values = { ""PROJECT_NUMERIC_ID"", ""NUMERIC_ID"" }) public void deprecatedChangeIdReturnsBadRequest() throws java.lang.Exception { com.google.gerrit.extensions.api.changes.ChangeApi cApi1 = gApi.changes().id(project.get(), changeInfo._number); assertThat(cApi1.get().changeId).isEqualTo(changeInfo.changeId); com.google.gerrit.extensions.api.changes.ChangeApi cApi2 = gApi.changes().id(changeInfo._number); assertThat(cApi2.get().changeId).isEqualTo(changeInfo.changeId); com.google.gerrit.extensions.common.ChangeInfo ci = gApi.changes().create(new com.google.gerrit.extensions.common.ChangeInput(project.get(), ""master"", ""different message"")).get(); exception.expect(com.google.gerrit.extensions.restapi.DeprecatedIdentifierException.class); exception.expectMessage(((""The provided change identifier "" + (ci.changeId)) + "" is deprecated. Use 'project~changeNumber' instead."")); gApi.changes().id(ci.changeId); }",9a7a2e3f9ece28657825bda6649ec576ecb97638,2017-12-21 14:25:01,3
149410,java_com_google_gerrit_server_ChangeFinder.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void checkIdType(com.google.gerrit.server.ChangeFinder.ChangeIdType type, boolean enforceDeprecation, java.lang.String val) throws com.google.gerrit.extensions.restapi.DeprecatedIdentifierException { if (enforceDeprecation && (!(allowedIdTypes.contains(type)))) { throw new com.google.gerrit.extensions.restapi.DeprecatedIdentifierException(java.lang.String.format((""The provided change identifier %s is deprecated. "" + ""Use 'project~changeNumber' instead.""), val)); } changeIdCounter.increment(type); }",e54d108855a2f09d567910814ac06681990f2370,"private void checkIdType(com.google.gerrit.server.ChangeFinder.ChangeIdType type, boolean enforceDeprecation, java.lang.String val) throws com.google.gerrit.extensions.restapi.DeprecatedIdentifierException { if ((enforceDeprecation && (!(allowedIdTypes.contains(com.google.gerrit.server.ChangeFinder.ChangeIdType.ALL)))) && (!(allowedIdTypes.contains(type)))) { throw new com.google.gerrit.extensions.restapi.DeprecatedIdentifierException(java.lang.String.format((""The provided change identifier %s is deprecated. "" + ""Use 'project~changeNumber' instead.""), val)); } changeIdCounter.increment(type); }",e2da045bc3c4822d38353e6f0cbbcfeb894e3b26,2017-12-21 14:25:01,3
149410,java_com_google_gerrit_server_ChangeFinder.java,"public java.util.List<com.google.gerrit.server.notedb.ChangeNotes> find(java.lang.String id) throws com.google.gwtorm.server.OrmException { if (id.isEmpty()) { return java.util.Collections.emptyList(); } int z = id.lastIndexOf('~'); int y = id.lastIndexOf('~', (z - 1)); if ((y < 0) && (z > 0)) { java.lang.Integer n = com.google.common.primitives.Ints.tryParse(id.substring((z + 1))); if (n != null) { changeIdCounter.increment(com.google.gerrit.server.ChangeFinder.ChangeIdType.PROJECT_NUMERIC_ID); return fromProjectNumber(id.substring(0, z), n.intValue()); } } if ((y < 0) && (z < 0)) { java.lang.Integer n = com.google.common.primitives.Ints.tryParse(id); if (n != null) { changeIdCounter.increment(com.google.gerrit.server.ChangeFinder.ChangeIdType.NUMERIC_ID); return find(new com.google.gerrit.reviewdb.client.Change.Id(n)); } } com.google.gerrit.server.query.change.InternalChangeQuery query = queryProvider.get().noFields(); if (id.matches(((((""^([0-9a-fA-F]{"" + (com.google.gerrit.reviewdb.client.RevId.ABBREV_LEN)) + "","") + (com.google.gerrit.reviewdb.client.RevId.LEN)) + ""})$""))) { changeIdCounter.increment(com.google.gerrit.server.ChangeFinder.ChangeIdType.COMMIT_HASH); return asChangeNotes(query.byCommit(id)); } if ((y > 0) && (z > 0)) { java.util.Optional<com.google.gerrit.server.change.ChangeTriplet> triplet = com.google.gerrit.server.change.ChangeTriplet.parse(id, y, z); if (triplet.isPresent()) { com.google.gerrit.server.change.ChangeTriplet t = triplet.get(); changeIdCounter.increment(com.google.gerrit.server.ChangeFinder.ChangeIdType.TRIPLET); return asChangeNotes(query.byBranchKey(t.branch(), t.id())); } } java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = asChangeNotes(query.byKeyPrefix(id)); if (!(notes.isEmpty())) { changeIdCounter.increment(com.google.gerrit.server.ChangeFinder.ChangeIdType.CHANGE_ID); } return notes; }",d3368c351e4d7205bbdabe458086cfb5c8350557,"public java.util.List<com.google.gerrit.server.notedb.ChangeNotes> find(java.lang.String id) throws com.google.gwtorm.server.OrmException { try { return find(id, false); } catch (com.google.gerrit.extensions.restapi.DeprecatedIdentifierException e) { return com.google.common.collect.ImmutableList.of(); } }",d349e8f6664b3d8a005d129b606e5bc1c31db5b9,"public java.util.List<com.google.gerrit.server.notedb.ChangeNotes> find(java.lang.String id) throws com.google.gwtorm.server.OrmException { try { return find(id, false); } catch (com.google.gerrit.extensions.restapi.DeprecatedIdentifierException e) { throw new com.google.gwtorm.server.OrmException(e); } }",0e4298209e8b52168a78cbbb1baa44fa86ce6c71,2017-12-21 14:25:01,3
149410,java_com_google_gerrit_server_account_Stars.java,"@java.lang.Override public com.google.gerrit.server.account.AccountResource.Star parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); java.util.Set<java.lang.String> labels = starredChangesUtil.getLabels(user.getAccountId(), change.getId()); return new com.google.gerrit.server.account.AccountResource.Star(user, change, labels); }",14f4358e14bce4a0a6f50baba2892f8154a0dc6f,"@java.lang.Override public com.google.gerrit.server.account.AccountResource.Star parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.DeprecatedIdentifierException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); java.util.Set<java.lang.String> labels = starredChangesUtil.getLabels(user.getAccountId(), change.getId()); return new com.google.gerrit.server.account.AccountResource.Star(user, change, labels); }",8fb96c807d495f285e67109773f35959427265cf,"@java.lang.Override public com.google.gerrit.server.account.AccountResource.Star parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); java.util.Set<java.lang.String> labels = starredChangesUtil.getLabels(user.getAccountId(), change.getId()); return new com.google.gerrit.server.account.AccountResource.Star(user, change, labels); }",cd20cd04697ce57436caa95ab4fd3492e8fddbab,2017-12-21 14:25:01,3
149410,java_com_google_gerrit_server_account_StarredChanges.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.account.StarredChanges.EmptyInput> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""change %s not found"", id.get())); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.account.StarredChanges.log.error(""cannot resolve change"", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""internal server error""); } }",f789466948203c448a9dbd41c9744c43dcc01665,"@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.account.StarredChanges.EmptyInput> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.DeprecatedIdentifierException, com.google.gerrit.extensions.restapi.UnprocessableEntityException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""change %s not found"", id.get())); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.account.StarredChanges.log.error(""cannot resolve change"", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""internal server error""); } }",d9093aebe121874b6dfdff33a52e5f85473bc3f8,"@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.account.StarredChanges.EmptyInput> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""change %s not found"", id.get())); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.account.StarredChanges.log.error(""cannot resolve change"", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""internal server error""); } }",d31abb26d4baf350bf7a2f15c7820a9235d826ef,2017-12-21 14:25:01,3
149410,java_com_google_gerrit_server_change_ChangesCollection.java,"@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded()); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }",f4b03540bf9bf4b5e9faeb7fdf6f86f76b15dacb,"@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.DeprecatedIdentifierException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }",36347b6b050c04f934e8b9bbfc6e956ab7960ec7,"@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }",efe6318a282660945880bd28fa5b35ef9b01d12a,2017-12-21 14:25:01,3
149410,java_com_google_gerrit_server_account_StarredChanges.java,"@java.lang.Override public AccountResource.StarredChange parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); if (starredChangesUtil.getLabels(user.getAccountId(), change.getId()).contains(StarredChangesUtil.DEFAULT_LABEL)) { return new com.google.gerrit.server.account.AccountResource.StarredChange(user, change); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",4fa6ece547fddebdedfd3128dedd8299ceb7d291,"@java.lang.Override public AccountResource.StarredChange parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.DeprecatedIdentifierException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); if (starredChangesUtil.getLabels(user.getAccountId(), change.getId()).contains(StarredChangesUtil.DEFAULT_LABEL)) { return new com.google.gerrit.server.account.AccountResource.StarredChange(user, change); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",4d02e8fcf1e113488d80be49f73d7d260df0587a,"@java.lang.Override public AccountResource.StarredChange parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); if (starredChangesUtil.getLabels(user.getAccountId(), change.getId()).contains(StarredChangesUtil.DEFAULT_LABEL)) { return new com.google.gerrit.server.account.AccountResource.StarredChange(user, change); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",0f0b14ea0daec6a2f95f299cf95f695ded6d55c3,2017-12-21 14:25:01,3
148470,java_com_google_gerrit_server_account_externalids_ExternalIdNotes.java,,,"public void delete(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extId); removedExtIds.add(extId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); }); }",9897d421d1b321db292a78016161a505605bfbee,"public void delete(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extId); removedExtIds.add(extId); } }); cacheUpdates.add(( cu) -> cu.remove(removedExtIds)); }",e40562c33a8aae45803bb2959f41ab75e823becb,2017-12-22 15:38:09,9
148470,javatests_com_google_gerrit_acceptance_rest_account_ExternalIdIT.java,"private void addExtId(org.eclipse.jgit.junit.TestRepository<?> testRepo, com.google.gerrit.server.account.externalids.ExternalId... extIds) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId rev = com.google.gerrit.server.account.externalids.ExternalIdReader.readRevision(testRepo.getRepository()); try (org.eclipse.jgit.lib.ObjectInserter ins = testRepo.getRepository().newObjectInserter()) { org.eclipse.jgit.notes.NoteMap noteMap = com.google.gerrit.server.account.externalids.ExternalIdReader.readNoteMap(testRepo.getRevWalk(), rev); for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalIdsUpdate.insert(testRepo.getRevWalk(), ins, noteMap, extId); } com.google.gerrit.server.account.externalids.ExternalIdsUpdate.commit(allUsers, testRepo.getRepository(), testRepo.getRevWalk(), ins, rev, noteMap, ""Add external ID"", admin.getIdent(), admin.getIdent(), null, GitReferenceUpdated.DISABLED); } }",9e9348b8bb9ded8526d41ed073646b099a3ff0d5,"private void addExtId(org.eclipse.jgit.junit.TestRepository<?> testRepo, com.google.gerrit.server.account.externalids.ExternalId... extIds) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = externalIdNotesFactory.load(testRepo.getRepository()); extIdNotes.insert(java.util.Arrays.asList(extIds)); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, null, testRepo.getRepository())) { metaDataUpdate.getCommitBuilder().setAuthor(admin.getIdent()); metaDataUpdate.getCommitBuilder().setCommitter(admin.getIdent()); extIdNotes.commit(metaDataUpdate); } }",435fa18fb7be7eca192c45995e702d2445ab4089,"private void addExtId(org.eclipse.jgit.junit.TestRepository<?> testRepo, com.google.gerrit.server.account.externalids.ExternalId... extIds) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = externalIdNotesFactory.load(testRepo.getRepository()); extIdNotes.insert(java.util.Arrays.asList(extIds)); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, null, testRepo.getRepository())) { metaDataUpdate.getCommitBuilder().setAuthor(admin.getIdent()); metaDataUpdate.getCommitBuilder().setCommitter(admin.getIdent()); extIdNotes.commit(metaDataUpdate); extIdNotes.updateCaches(); } }",c477b611429b7524fc8b3b16178ed5d63c6ff25a,2017-12-22 15:38:09,9
148470,javatests_com_google_gerrit_acceptance_rest_account_ExternalIdIT.java,"@org.junit.Test public void retryOnLockFailure() throws java.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId.Key fooId = ExternalId.Key.create(""foo"", ""foo""); com.google.gerrit.server.account.externalids.ExternalId.Key barId = ExternalId.Key.create(""bar"", ""bar""); final java.util.concurrent.atomic.AtomicBoolean doneBgUpdate = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.server.account.externalids.ExternalIdsUpdate update = new com.google.gerrit.server.account.externalids.ExternalIdsUpdate(repoManager, accountCache, allUsers, metricMaker, externalIds, new com.google.gerrit.server.account.externalids.DisabledExternalIdCache(), serverIdent.get(), serverIdent.get(), null, com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, new com.google.gerrit.server.update.RetryHelper(cfg, retryMetrics, null, null, null, ( r) -> r.withBlockStrategy(new com.github.rholder.retry.BlockStrategy() { @java.lang.Override public void block(long sleepTime) { } })), () -> { if (!(doneBgUpdate.getAndSet(true))) { try { extIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.create(barId, admin.id)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | com.google.gwtorm.server.OrmException e) { } } }); assertThat(doneBgUpdate.get()).isFalse(); update.insert(com.google.gerrit.server.account.externalids.ExternalId.create(fooId, admin.id)); assertThat(doneBgUpdate.get()).isTrue(); assertThat(externalIds.get(fooId)).isNotNull(); assertThat(externalIds.get(barId)).isNotNull(); }",5fd354a505d4457bcbb9702a99a6002540258126,"@org.junit.Test public void retryOnLockFailure() throws java.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId.Key fooId = ExternalId.Key.create(""foo"", ""foo""); com.google.gerrit.server.account.externalids.ExternalId.Key barId = ExternalId.Key.create(""bar"", ""bar""); final java.util.concurrent.atomic.AtomicBoolean doneBgUpdate = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.server.account.externalids.ExternalIdsUpdate update = new com.google.gerrit.server.account.externalids.ExternalIdsUpdate(repoManager, () -> com.google.gerrit.acceptance.rest.account.metaDataUpdateFactory.create(com.google.gerrit.acceptance.rest.account.allUsers), accountCache, allUsers, metricMaker, externalIds, new com.google.gerrit.server.account.externalids.DisabledExternalIdCache(), new com.google.gerrit.server.update.RetryHelper(cfg, retryMetrics, null, null, null, ( r) -> r.withBlockStrategy(new com.github.rholder.retry.BlockStrategy() { @java.lang.Override public void block(long sleepTime) { } })), () -> { if (!(doneBgUpdate.getAndSet(true))) { try { extIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.create(barId, admin.id)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | com.google.gwtorm.server.OrmException e) { } } }); assertThat(doneBgUpdate.get()).isFalse(); update.insert(com.google.gerrit.server.account.externalids.ExternalId.create(fooId, admin.id)); assertThat(doneBgUpdate.get()).isTrue(); assertThat(externalIds.get(fooId)).isNotNull(); assertThat(externalIds.get(barId)).isNotNull(); }",fe938bb58288f323ce87f674e52785481f8cabef,"@org.junit.Test public void retryOnLockFailure() throws java.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId.Key fooId = ExternalId.Key.create(""foo"", ""foo""); com.google.gerrit.server.account.externalids.ExternalId.Key barId = ExternalId.Key.create(""bar"", ""bar""); final java.util.concurrent.atomic.AtomicBoolean doneBgUpdate = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.server.account.externalids.ExternalIdsUpdate update = new com.google.gerrit.server.account.externalids.ExternalIdsUpdate(repoManager, () -> com.google.gerrit.acceptance.rest.account.metaDataUpdateFactory.create(com.google.gerrit.acceptance.rest.account.allUsers), accountCache, allUsers, metricMaker, externalIds, new com.google.gerrit.server.account.externalids.DisabledExternalIdCache(), new com.google.gerrit.server.update.RetryHelper(cfg, retryMetrics, null, null, null, ( r) -> r.withBlockStrategy(com.google.gerrit.acceptance.rest.account.noSleepBlockStrategy)), () -> { if (!(doneBgUpdate.getAndSet(true))) { try { extIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.create(barId, admin.id)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | com.google.gwtorm.server.OrmException e) { } } }); assertThat(doneBgUpdate.get()).isFalse(); update.insert(com.google.gerrit.server.account.externalids.ExternalId.create(fooId, admin.id)); assertThat(doneBgUpdate.get()).isTrue(); assertThat(externalIds.get(fooId)).isNotNull(); assertThat(externalIds.get(barId)).isNotNull(); }",60244d90094e140b2f456d2ea9f895067f6a76fd,2017-12-22 15:38:09,9
148470,java_com_google_gerrit_server_account_externalids_ExternalIdReader.java,"@com.google.gerrit.common.Nullable com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.ObjectId rev = com.google.gerrit.server.account.externalids.ExternalIdReader.readRevision(repo); if (rev.equals(org.eclipse.jgit.lib.ObjectId.zeroId())) { return null; } return com.google.gerrit.server.account.externalids.ExternalIdReader.parse(key, rw, rev); } }",c8d5ca0b01bf8e9e1cb9bc736d33342800b54465,"@com.google.gerrit.common.Nullable com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.externalids.ExternalIdNotes.loadReadOnly(repo).get(key); } }",851619e3b33744aa56eca4db2bef31b0bab1a340,"@com.google.gerrit.common.Nullable com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.externalids.ExternalIdNotes.loadReadOnly(repo).get(key).orElse(null); } }",341095abc9fc3fd10a6a1ba4900d926013762cd3,2017-12-22 15:38:09,9
148470,java_com_google_gerrit_server_account_externalids_ExternalIdsUpdate.java,"private com.google.gerrit.server.account.externalids.ExternalIdsUpdate.RefsMetaExternalIdsUpdate updateNoteMap(com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalIdUpdater updater) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return retryHelper.execute(updater, ( i) -> { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName);org.eclipse.jgit.lib.ObjectInserter ins = repo.newObjectInserter()) { org.eclipse.jgit.lib.ObjectId rev = readRevision(repo); afterReadRevision.run(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.notes.NoteMap noteMap = readNoteMap(rw, rev); com.google.gerrit.server.account.externalids.UpdatedExternalIds updatedExtIds = i.update(com.google.gerrit.server.account.externalids.OpenRepo.create(repo, rw, ins, noteMap)); return commit(repo, rw, ins, rev, noteMap, updatedExtIds); } } }); }",3947d5164b6b99a2525bb0b9cd62ffe8fc9065f8,"private void updateNoteMap(com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalIdUpdater updater) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { retryHelper.<com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalIdUpdater, java.lang.Object>execute(updater, ( i) -> { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = new com.google.gerrit.server.account.externalids.ExternalIdNotes(externalIdCache, accountCache, repo).setAfterReadRevision(afterReadRevision).load(); i.update(extIdNotes); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = metaDataUpdateFactory.create()) { extIdNotes.commit(metaDataUpdate); } updateCount.increment(); return null; } }); }",62bf392ec388f0ba3233e67af6339cdd9167aae9,"private void updateNoteMap(com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalIdUpdater updater) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { retryHelper.execute(() -> { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = new com.google.gerrit.server.account.externalids.ExternalIdNotes(externalIdCache, accountCache, repo).setAfterReadRevision(afterReadRevision).load(); updater.update(extIdNotes); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = metaDataUpdateFactory.create()) { extIdNotes.commit(metaDataUpdate); } extIdNotes.updateCaches(); updateCount.increment(); return null; } }); }",c6e7bd25e77d085fd64b186b45c00cd835813355,2017-12-22 15:38:09,9
148470,java_com_google_gerrit_server_account_externalids_ExternalIdNotes.java,,,public void upsert(com.google.gerrit.server.account.externalids.ExternalId extId) { upsert(java.util.Collections.singleton(extId)); },6f39fd7861bad888f7c7a30d3cd314b67b400074,"public void upsert(com.google.gerrit.server.account.externalids.ExternalId extId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { upsert(java.util.Collections.singleton(extId)); }",e7dd46958818d10b4b4f8b6e7aa131e825113dd4,2017-12-22 15:38:09,9
148470,java_com_google_gerrit_server_account_externalids_ExternalIdNotes.java,,,"public java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> all() throws java.io.IOException { checkLoaded(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> extIds = new java.util.HashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { byte[] raw = com.google.gerrit.server.account.externalids.ExternalIdNotes.readNoteData(rw, note.getData()); try { extIds.add(com.google.gerrit.server.account.externalids.ExternalId.parse(note.getName(), raw, note.getData())); } catch (java.lang.Exception e) { com.google.gerrit.server.account.externalids.ExternalIdNotes.log.error(java.lang.String.format(""Ignoring invalid external ID note %s"", note.getName()), e); } } return extIds; } }",69abf6d66f927447b741680a4e05c6e42774db21,"public java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> all() throws java.io.IOException { checkLoaded(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> extIds = new java.util.HashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { byte[] raw = com.google.gerrit.server.account.externalids.ExternalIdNotes.readNoteData(rw, note.getData()); try { extIds.add(com.google.gerrit.server.account.externalids.ExternalId.parse(note.getName(), raw, note.getData())); } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.lang.RuntimeException e) { com.google.gerrit.server.account.externalids.ExternalIdNotes.log.error(java.lang.String.format(""Ignoring invalid external ID note %s"", note.getName()), e); } } return extIds; } }",fdbf187f0d055880174b6337be42c61716fa50f6,2017-12-22 15:38:09,9
148470,java_com_google_gerrit_server_account_externalids_ExternalIdNotes.java,,,"private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId extId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extId.key().sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_NOTE_SZ); com.google.gerrit.server.account.externalids.ExternalId actualExtId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); checkState(extId.equals(actualExtId), ""external id %s should be removed, but it's not matching the actual external id %s"", extId.toString(), actualExtId.toString()); noteMap.remove(noteId); return actualExtId; }",1a9f8c838696bb9baecf9c5f0e09fd5f45ba4394,"private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId extId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extId.key().sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteDataId = noteMap.get(noteId); byte[] raw = com.google.gerrit.server.account.externalids.ExternalIdNotes.readNoteData(rw, noteDataId); com.google.gerrit.server.account.externalids.ExternalId actualExtId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteDataId); checkState(extId.equals(actualExtId), ""external id %s should be removed, but it's not matching the actual external id %s"", extId.toString(), actualExtId.toString()); noteMap.remove(noteId); return actualExtId; }",d3e3191a68ba87546db3988eca323771e30df45a,2017-12-22 15:38:09,9
148470,java_com_google_gerrit_server_account_externalids_ExternalIdNotes.java,,,"public void delete(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, accountId); removedExtIds.add(removedExtId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); }); }",f3a17442e7b8cc807fcf58e7ce3fdded2beb35aa,"public void delete(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, accountId); removedExtIds.add(removedExtId); } }); cacheUpdates.add(( cu) -> cu.remove(removedExtIds)); }",ee2b000191a838da08fdd0929e8cff646e6e3b2a,2017-12-22 15:38:09,9
148470,java_com_google_gerrit_server_account_externalids_ExternalIdNotes.java,,,"public void replace(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toDelete, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException { checkLoaded(); com.google.gerrit.server.account.externalids.ExternalIdNotes.checkSameAccount(toAdd, accountId); checkExternalIdKeysDontExist(ExternalId.Key.from(toAdd), toDelete); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, accountId); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId insertedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.upsert(rw, inserter, noteMap, extId); updatedExtIds.add(insertedExtId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onReplace(o, n, accountId, removedExtIds, updatedExtIds); evictAccount(accountId); }); }",8d7a26fbd668a2fa691a27e2077500f9c64f10e4,"public void replace(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toDelete, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException { checkLoaded(); com.google.gerrit.server.account.externalids.ExternalIdNotes.checkSameAccount(toAdd, accountId); checkExternalIdKeysDontExist(ExternalId.Key.from(toAdd), toDelete); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, accountId); if (removedExtId != null) { removedExtIds.add(removedExtId); } } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId insertedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.upsert(rw, inserter, noteMap, extId); updatedExtIds.add(insertedExtId); } }); cacheUpdates.add(( cu) -> cu.add(updatedExtIds).remove(removedExtIds)); }",0d5a48f6b95f3136814897383d7e53a35f2a2a1c,2017-12-22 15:38:09,9
148470,java_com_google_gerrit_server_account_externalids_ExternalIdNotes.java,,,"public void deleteByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, null); removedExtIds.add(extId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); }); }",6a8fe4098ed8f102bbe26778ebc108617c7a73cb,"public void deleteByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, null); removedExtIds.add(extId); } }); cacheUpdates.add(( cu) -> cu.remove(removedExtIds)); }",3e3747ff97de71b469395f8a6120d1da8ce809c5,2017-12-22 15:38:09,9
148470,java_com_google_gerrit_server_account_externalids_ExternalIdNotes.java,,,"@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (readOnly) { throw new java.io.IOException(""Updating external IDs is disabled""); } if (noteMapUpdates.isEmpty()) { return false; } if (com.google.common.base.Strings.isNullOrEmpty(commit.getMessage())) { commit.setMessage(""Update external IDs\n""); } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { for (com.google.gerrit.server.account.externalids.ExternalIdNotes.NoteMapUpdate noteMapUpdate : noteMapUpdates) { try { noteMapUpdate.execute(rw, noteMap); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw new java.io.IOException(e); } } org.eclipse.jgit.revwalk.RevTree oldTree = ((revision) != null) ? rw.parseTree(revision) : null; org.eclipse.jgit.lib.ObjectId newTreeId = noteMap.writeTree(inserter); if (newTreeId.equals(oldTree)) { return false; } commit.setTreeId(newTreeId); return true; } }",63f3f0ce164b901fb7cc658ebd4c32317be93119,"@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkState((!(readOnly)), ""Updating external IDs is disabled""); if (noteMapUpdates.isEmpty()) { return false; } if (com.google.common.base.Strings.isNullOrEmpty(commit.getMessage())) { commit.setMessage(""Update external IDs\n""); } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { for (com.google.gerrit.server.account.externalids.ExternalIdNotes.NoteMapUpdate noteMapUpdate : noteMapUpdates) { try { noteMapUpdate.execute(rw, noteMap); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw new java.io.IOException(e); } } noteMapUpdates.clear(); org.eclipse.jgit.revwalk.RevTree oldTree = ((revision) != null) ? rw.parseTree(revision) : null; org.eclipse.jgit.lib.ObjectId newTreeId = noteMap.writeTree(inserter); if (newTreeId.equals(oldTree)) { return false; } commit.setTreeId(newTreeId); return true; } }",d81f827fa7fd2eeb8abef6cbc28dc1362faa26e1,2017-12-22 15:38:09,9
148470,java_com_google_gerrit_server_account_externalids_ExternalIdNotes.java,,,private void evictAccounts(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throws java.io.IOException { if ((accountCache) != null) { for (com.google.gerrit.reviewdb.client.Account.Id id : extIds.stream().map(ExternalId::accountId).collect(java.util.stream.Collectors.toSet())) { accountCache.evict(id); } } },587448579b216bf065718d7876d44886f3d3aef3,"public java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> get(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> keys) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); java.util.HashSet<com.google.gerrit.server.account.externalids.ExternalId> externalIds = com.google.common.collect.Sets.newHashSetWithExpectedSize(keys.size()); for (com.google.gerrit.server.account.externalids.ExternalId.Key key : keys) { get(key).ifPresent(externalIds::add); } return externalIds; }",a85cde60c37b4528ca9516d2739db0777a07ffbd,2017-12-22 15:38:09,9
148470,java_com_google_gerrit_server_account_externalids_ExternalIdNotes.java,,,"private static com.google.gerrit.server.account.externalids.ExternalId upsert(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId extId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extId.key().sha1(); org.eclipse.jgit.lib.Config c = new org.eclipse.jgit.lib.Config(); if (noteMap.contains(extId.key().sha1())) { byte[] raw = rw.getObjectReader().open(noteMap.get(noteId), com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_NOTE_SZ); try { c.fromText(new java.lang.String(raw, java.nio.charset.StandardCharsets.UTF_8)); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format(""Invalid external id config for note %s: %s"", noteId, e.getMessage())); } } extId.writeToConfig(c); byte[] raw = c.toText().getBytes(java.nio.charset.StandardCharsets.UTF_8); org.eclipse.jgit.lib.ObjectId noteData = ins.insert(com.google.gerrit.server.account.externalids.OBJ_BLOB, raw); noteMap.set(noteId, noteData); return com.google.gerrit.server.account.externalids.ExternalId.create(extId, noteData); }",f57bff79fbe4ee73696916cd4d5fa58581ca0d2c,"private static com.google.gerrit.server.account.externalids.ExternalId upsert(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId extId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extId.key().sha1(); org.eclipse.jgit.lib.Config c = new org.eclipse.jgit.lib.Config(); if (noteMap.contains(extId.key().sha1())) { byte[] raw = com.google.gerrit.server.account.externalids.ExternalIdNotes.readNoteData(rw, noteMap.get(noteId)); try { c = new org.eclipse.jgit.lib.BlobBasedConfig(null, raw); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format(""Invalid external id config for note %s: %s"", noteId, e.getMessage())); } } extId.writeToConfig(c); byte[] raw = c.toText().getBytes(java.nio.charset.StandardCharsets.UTF_8); org.eclipse.jgit.lib.ObjectId noteData = ins.insert(com.google.gerrit.server.account.externalids.OBJ_BLOB, raw); noteMap.set(noteId, noteData); return com.google.gerrit.server.account.externalids.ExternalId.create(extId, noteData); }",79f104998f3fc64e2e8b4576cde6a4a26abaa14c,2017-12-22 15:38:09,9
148471,java_com_google_gerrit_server_account_InternalAccountUpdate.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.google.gerrit.server.account.InternalAccountUpdate.Builder updateExternalId(com.google.gerrit.server.account.externalids.ExternalId extId) { updatedExternalIdsBuilder().add(extId); return this; },6c662ac83e4c43eb4b9f035da4ae900be0c5dd40,public com.google.gerrit.server.account.InternalAccountUpdate.Builder updateExternalIds(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { updatedExternalIdsBuilder().addAll(extIds); return this; },494572d1ac9e487c59e7e482327b5e2a3c2d28cb,2017-12-22 15:38:09,10
148470,java_com_google_gerrit_server_account_externalids_ExternalIdReader.java,"@com.google.gerrit.common.Nullable com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key, org.eclipse.jgit.lib.ObjectId rev) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled(); if (rev.equals(org.eclipse.jgit.lib.ObjectId.zeroId())) { return null; } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { return com.google.gerrit.server.account.externalids.ExternalIdReader.parse(key, rw, rev); } }",9a2daceb58d0fdd1a7ac6812f8b43d7686670c57,"@com.google.gerrit.common.Nullable com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key, org.eclipse.jgit.lib.ObjectId rev) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.externalids.ExternalIdNotes.loadReadOnly(repo, rev).get(key); } }",0c107bc5eb9c757c151ebbf75828bf5f6ceaed12,"@com.google.gerrit.common.Nullable com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key, org.eclipse.jgit.lib.ObjectId rev) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.externalids.ExternalIdNotes.loadReadOnly(repo, rev).get(key).orElse(null); } }",265dab2612da30f5bead799087e79c18e9f81793,2017-12-22 15:38:09,9
148470,java_com_google_gerrit_server_account_externalids_ExternalIdNotes.java,,,"public void upsert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalId updatedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.upsert(rw, inserter, noteMap, extId); updatedExtIds.add(updatedExtId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onUpdate(o, n, updatedExtIds); evictAccounts(updatedExtIds); }); }",e3a097cf95e02a7f3c99bbc07d7a51ff9a27ac7e,"public void upsert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = get(ExternalId.Key.from(extIds)); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalId updatedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.upsert(rw, inserter, noteMap, extId); updatedExtIds.add(updatedExtId); } }); cacheUpdates.add(( cu) -> cu.remove(removedExtIds).add(updatedExtIds)); }",aad52d2b5d1deebd167b622c5c8112e1cfa74f0b,2017-12-22 15:38:09,9
148470,java_com_google_gerrit_server_account_externalids_ExternalIdNotes.java,,,"public void insert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException { checkLoaded(); checkExternalIdsDontExist(extIds); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> newExtIds = new java.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalId insertedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.upsert(rw, inserter, noteMap, extId); newExtIds.add(insertedExtId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onCreate(o, n, newExtIds); evictAccounts(newExtIds); }); }",573e09686343ba821d9fabcb34ebeb12cf45b0b9,"public void insert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException { checkLoaded(); checkExternalIdsDontExist(extIds); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> newExtIds = new java.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalId insertedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.upsert(rw, inserter, noteMap, extId); newExtIds.add(insertedExtId); } }); cacheUpdates.add(( cu) -> cu.add(newExtIds)); }",90e38aa3c7729f4ce079518343f15db496748550,2017-12-22 15:38:09,9
148470,java_com_google_gerrit_server_account_externalids_ExternalIdNotes.java,,,"public void replaceByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toDelete, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException { checkLoaded(); checkExternalIdKeysDontExist(ExternalId.Key.from(toAdd), toDelete); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, null); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId insertedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.upsert(rw, inserter, noteMap, extId); updatedExtIds.add(insertedExtId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onReplace(o, n, removedExtIds, updatedExtIds); evictAccounts(com.google.common.collect.Streams.concat(removedExtIds.stream(), updatedExtIds.stream()).collect(java.util.stream.Collectors.toSet())); }); }",1078e767254fd2e699699e1c6755205b67e18677,"public void replaceByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toDelete, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException { checkLoaded(); checkExternalIdKeysDontExist(ExternalId.Key.from(toAdd), toDelete); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = new java.util.HashSet<>(); java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = new java.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, null); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId insertedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.upsert(rw, inserter, noteMap, extId); updatedExtIds.add(insertedExtId); } }); cacheUpdates.add(( cu) -> cu.add(updatedExtIds).remove(removedExtIds)); }",78c28d4d58822a8ee1a9cbbe9b7cc1a45e2e7d38,2017-12-22 15:38:09,9
148471,java_com_google_gerrit_server_account_InternalAccountUpdate.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.google.gerrit.server.account.InternalAccountUpdate.Builder addExternalId(com.google.gerrit.server.account.externalids.ExternalId extId) { createdExternalIdsBuilder().add(extId); return this; },9b34e1e6e799ee6b408c62ba2d3a06d174a407be,public com.google.gerrit.server.account.InternalAccountUpdate.Builder addExternalIds(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { createdExternalIdsBuilder().addAll(extIds); return this; },7c9e465bf5832a1f44141ed54f4ed0be1ef1044f,2017-12-22 15:38:09,10
148471,java_com_google_gerrit_server_account_InternalAccountUpdate.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.google.gerrit.server.account.InternalAccountUpdate.Builder deleteExternalId(com.google.gerrit.server.account.externalids.ExternalId extId) { deletedExternalIdsBuilder().add(extId); return this; },e8004ab98426f286b523f3b2050cd048ab3d7946,public com.google.gerrit.server.account.InternalAccountUpdate.Builder deleteExternalIds(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { deletedExternalIdsBuilder().addAll(extIds); return this; },0813bc98cc3cbb6b9da48cdb2654c4949c37bdad,2017-12-22 15:38:09,10
148470,java_com_google_gerrit_server_account_externalids_ExternalIdNotes.java,,,"@com.google.gerrit.common.Nullable public com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); org.eclipse.jgit.lib.ObjectId noteId = key.sha1(); if (!(noteMap.contains(noteId))) { return null; } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.ObjectId noteDataId = noteMap.get(noteId); byte[] raw = com.google.gerrit.server.account.externalids.ExternalIdNotes.readNoteData(rw, noteDataId); return com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteDataId); } }",5c473e51d5b62c1ba68d6c6dc62690e3cbd12507,"public java.util.Optional<com.google.gerrit.server.account.externalids.ExternalId> get(com.google.gerrit.server.account.externalids.ExternalId.Key key) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); org.eclipse.jgit.lib.ObjectId noteId = key.sha1(); if (!(noteMap.contains(noteId))) { return java.util.Optional.empty(); } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.ObjectId noteDataId = noteMap.get(noteId); byte[] raw = com.google.gerrit.server.account.externalids.ExternalIdNotes.readNoteData(rw, noteDataId); return java.util.Optional.of(com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteDataId)); } }",68d89030eac778acadaf7df87462e794b00f3de9,2017-12-22 15:38:09,9
148470,java_com_google_gerrit_server_account_externalids_ExternalId.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> from(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { return extIds.stream().map(com.google.gerrit.server.account.externalids.ExternalId::key).collect(java.util.stream.Collectors.toSet()); },d9f4a7266dd6d120f11db20697fb318388c668f4,public static com.google.common.collect.ImmutableSet<com.google.gerrit.server.account.externalids.ExternalId.Key> from(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { return extIds.stream().map(com.google.gerrit.server.account.externalids.ExternalId::key).collect(toImmutableSet()); },1bb90786359f8c9599d63206f18215afb73eb6b3,2017-12-22 15:38:09,9
148470,java_com_google_gerrit_server_account_externalids_ExternalIdNotes.java,,,"private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey, com.google.gerrit.reviewdb.client.Account.Id expectedAccountId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extIdKey.sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_NOTE_SZ); com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); if (expectedAccountId != null) { checkState(expectedAccountId.equals(extId.accountId()), (""external id %s should be removed for account %s,"" + "" but external id belongs to account %s""), extIdKey.get(), expectedAccountId.get(), extId.accountId().get()); } noteMap.remove(noteId); return extId; }",14b6261b765c519f9794e11c24b0e41e79a2e697,"private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey, com.google.gerrit.reviewdb.client.Account.Id expectedAccountId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extIdKey.sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteDataId = noteMap.get(noteId); byte[] raw = com.google.gerrit.server.account.externalids.ExternalIdNotes.readNoteData(rw, noteDataId); com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteDataId); if (expectedAccountId != null) { checkState(expectedAccountId.equals(extId.accountId()), (""external id %s should be removed for account %s,"" + "" but external id belongs to account %s""), extIdKey.get(), expectedAccountId.get(), extId.accountId().get()); } noteMap.remove(noteId); return extId; }",d31537d22f1626217179aa96005398bae7e14084,2017-12-22 15:38:09,9
147210,java_com_google_gerrit_server_account_PutStatus.java,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.api.accounts.StatusInput input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.api.accounts.StatusInput(); } java.lang.String newStatus = input.status; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( a) -> a.setStatus(com.google.common.base.Strings.nullToEmpty(newStatus))); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return com.google.common.base.Strings.isNullOrEmpty(account.getStatus()) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getStatus()); }",37041609a9a4a08850fd980102df5e99927feab1,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.api.accounts.StatusInput input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.api.accounts.StatusInput(); } java.lang.String newStatus = input.status; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> u.update().setStatus(com.google.common.base.Strings.nullToEmpty(newStatus))); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return com.google.common.base.Strings.isNullOrEmpty(account.getStatus()) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getStatus()); }",90b7c09308ec88528e6a289dacf3b23c62492fdb,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.api.accounts.StatusInput input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.api.accounts.StatusInput(); } java.lang.String newStatus = input.status; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> u.setStatus(newStatus)); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return com.google.common.base.Strings.isNullOrEmpty(account.getStatus()) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getStatus()); }",0e0dbc395a5cd8af3dfc21d19857fbf1aba050cd,2017-12-22 15:38:09,10
147210,java_com_google_gerrit_server_account_InternalAccountUpdate.java,,,public static com.google.gerrit.server.account.InternalAccountUpdate.Builder builder() { return new com.google.gerrit.server.account.AutoValue_InternalAccountUpdate.Builder(); },b2c2c628c77ac05f50be40a9af5bffd5062d1e6d,public static com.google.gerrit.server.account.InternalAccountUpdate.Builder builder() { return new com.google.gerrit.server.account.InternalAccountUpdate.Builder.WrapperThatConvertsNullStringArgsToEmptyStrings(new com.google.gerrit.server.account.AutoValue_InternalAccountUpdate.Builder()); },3977b836bb154934a1dc481e6d079dfdf94a2f1f,2017-12-22 15:38:09,10
147210,java_com_google_gerrit_server_git_receive_ReceiveCommits.java,"private void updateAccountInfo() { if ((setFullNameTo) == null) { return; } logDebug(""Updating full name of caller""); try { com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( a) -> { if (com.google.common.base.Strings.isNullOrEmpty(a.getFullName())) { a.setFullName(setFullNameTo); } }); if (account != null) { user.getAccount().setFullName(account.getFullName()); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { logWarn(""Failed to update full name of caller"", e); } }",cbf7d42aa11cd9002e70986309ebf97086790baa,"private void updateAccountInfo() { if ((setFullNameTo) == null) { return; } logDebug(""Updating full name of caller""); try { com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> { if (com.google.common.base.Strings.isNullOrEmpty(u.account().getFullName())) { u.update().setFullName(setFullNameTo); } }); if (account != null) { user.getAccount().setFullName(account.getFullName()); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { logWarn(""Failed to update full name of caller"", e); } }",39aba54e78e20ddbc05244ed245c5b0d0c5f840b,"private void updateAccountInfo() { if ((setFullNameTo) == null) { return; } logDebug(""Updating full name of caller""); try { com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( a, u) -> { if (com.google.common.base.Strings.isNullOrEmpty(a.getFullName())) { u.setFullName(setFullNameTo); } }); if (account != null) { user.getAccount().setFullName(account.getFullName()); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { logWarn(""Failed to update full name of caller"", e); } }",37614204a728ff5c3731e01fed91495be2dd2ee2,2017-12-22 15:38:09,10
147210,java_com_google_gerrit_server_account_AccountManager.java,"public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(who.getExternalIdKey()); if (extId != null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (extId.key().get())) + ""' in use by another account"")); } update(who, extId); } else { externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress())); if ((who.getEmailAddress()) != null) { accountsUpdateFactory.create().update(to, ( a) -> { if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); } }); } } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); }",1d6c01711f3c29444204638ce773368a90490738,"public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(who.getExternalIdKey()); if (extId != null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (extId.key().get())) + ""' in use by another account"")); } update(who, extId); } else { externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress())); if ((who.getEmailAddress()) != null) { accountsUpdateFactory.create().update(to, ( u) -> { if ((u.account().getPreferredEmail()) == null) { u.update().setPreferredEmail(who.getEmailAddress()); } }); } } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); }",86cdabda0eea1f0783befdfcff0c52357e26bd63,"public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(who.getExternalIdKey()); if (extId != null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (extId.key().get())) + ""' in use by another account"")); } update(who, extId); } else { externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress())); if ((who.getEmailAddress()) != null) { accountsUpdateFactory.create().update(to, ( a, u) -> { if ((a.getPreferredEmail()) == null) { u.setPreferredEmail(who.getEmailAddress()); } }); } } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); }",f860d332343e4bc20dd95663853f61ea85f0babb,2017-12-22 15:38:09,10
147210,java_com_google_gerrit_server_account_AccountManager.java,"public void unlink(com.google.gerrit.reviewdb.client.Account.Id from, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (extIdKeys.isEmpty()) { return; } java.util.List<com.google.gerrit.server.account.externalids.ExternalId> extIds = new java.util.ArrayList(extIdKeys.size()); for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(extIdKey); if (extId != null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (extIdKey.get())) + ""' in use by another account"")); } extIds.add(extId); } else { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (extIdKey.get())) + ""' not found"")); } } externalIdsUpdateFactory.create().delete(extIds); if (extIds.stream().anyMatch(( e) -> (e.email()) != null)) { accountsUpdateFactory.create().update(from, ( a) -> { if ((a.getPreferredEmail()) != null) { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { if (a.getPreferredEmail().equals(extId.email())) { a.setPreferredEmail(null); break; } } } }); } }",f414e8d62e3b464e7f701fc61d3fdd25a9437f03,"public void unlink(com.google.gerrit.reviewdb.client.Account.Id from, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (extIdKeys.isEmpty()) { return; } java.util.List<com.google.gerrit.server.account.externalids.ExternalId> extIds = new java.util.ArrayList(extIdKeys.size()); for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(extIdKey); if (extId != null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (extIdKey.get())) + ""' in use by another account"")); } extIds.add(extId); } else { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (extIdKey.get())) + ""' not found"")); } } externalIdsUpdateFactory.create().delete(extIds); if (extIds.stream().anyMatch(( e) -> (e.email()) != null)) { accountsUpdateFactory.create().update(from, ( u) -> { if ((u.account().getPreferredEmail()) != null) { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { if (u.account().getPreferredEmail().equals(extId.email())) { u.update().setPreferredEmail(""""); break; } } } }); } }",51239b362bbf05d99364200c40165994b647b610,"public void unlink(com.google.gerrit.reviewdb.client.Account.Id from, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (extIdKeys.isEmpty()) { return; } java.util.List<com.google.gerrit.server.account.externalids.ExternalId> extIds = new java.util.ArrayList(extIdKeys.size()); for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(extIdKey); if (extId != null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (extIdKey.get())) + ""' in use by another account"")); } extIds.add(extId); } else { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (extIdKey.get())) + ""' not found"")); } } externalIdsUpdateFactory.create().delete(extIds); if (extIds.stream().anyMatch(( e) -> (e.email()) != null)) { accountsUpdateFactory.create().update(from, ( a, u) -> { if ((a.getPreferredEmail()) != null) { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { if (a.getPreferredEmail().equals(extId.email())) { u.setPreferredEmail(null); break; } } } }); } }",414b007717c2f72762f6a658cd5d9a42029ecca6,2017-12-22 15:38:09,10
147210,java_com_google_gerrit_server_account_SetInactiveFlag.java,"public com.google.gerrit.extensions.restapi.Response<?> deactivate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.atomic.AtomicBoolean alreadyInactive = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, ( a) -> { if (!(a.isActive())) { alreadyInactive.set(true); } else { a.setActive(false); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } if (alreadyInactive.get()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""account not active""); } return com.google.gerrit.extensions.restapi.Response.none(); }",f282b3f6fdda9673ef823bbf1028d3e5ac7f9b28,"public com.google.gerrit.extensions.restapi.Response<?> deactivate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.atomic.AtomicBoolean alreadyInactive = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, ( u) -> { if (!(u.account().isActive())) { alreadyInactive.set(true); } else { u.update().setActive(false); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } if (alreadyInactive.get()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""account not active""); } return com.google.gerrit.extensions.restapi.Response.none(); }",2b6d894fbfda87678280ee4787eefb8b6954c0d2,"public com.google.gerrit.extensions.restapi.Response<?> deactivate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.atomic.AtomicBoolean alreadyInactive = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, ( a, u) -> { if (!(a.isActive())) { alreadyInactive.set(true); } else { u.setActive(false); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } if (alreadyInactive.get()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""account not active""); } return com.google.gerrit.extensions.restapi.Response.none(); }",6dbdbdea385963b8c62895dc9f12e9704b2d90e9,2017-12-22 15:38:09,10
147210,java_com_google_gerrit_server_account_SetInactiveFlag.java,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> activate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.atomic.AtomicBoolean alreadyActive = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, ( a) -> { if (a.isActive()) { alreadyActive.set(true); } else { a.setActive(true); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return alreadyActive.get() ? com.google.gerrit.extensions.restapi.Response.ok("""") : com.google.gerrit.extensions.restapi.Response.created(""""); }",2f1fac69ea3bf3e8032e393f17514be5ec9f9e04,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> activate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.atomic.AtomicBoolean alreadyActive = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, ( u) -> { if (u.account().isActive()) { alreadyActive.set(true); } else { u.update().setActive(true); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return alreadyActive.get() ? com.google.gerrit.extensions.restapi.Response.ok("""") : com.google.gerrit.extensions.restapi.Response.created(""""); }",c598959d4691fd0e4a3c30fd727900c1c21a36c1,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> activate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.atomic.AtomicBoolean alreadyActive = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, ( a, u) -> { if (a.isActive()) { alreadyActive.set(true); } else { u.setActive(true); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return alreadyActive.get() ? com.google.gerrit.extensions.restapi.Response.ok("""") : com.google.gerrit.extensions.restapi.Response.created(""""); }",bbc62f5ff843bccbf0ff770c896a49f6d31f5fc1,2017-12-22 15:38:09,10
147210,javatests_com_google_gerrit_gpg_GerritPublicKeyCheckerTest.java,"@org.junit.Before public void setUpInjector() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = com.google.gerrit.testing.InMemoryModule.newDefaultConfig(); cfg.setInt(""receive"", null, ""maxTrustDepth"", 2); cfg.setStringList(""receive"", null, ""trustedKey"", com.google.common.collect.ImmutableList.of(com.google.gerrit.gpg.Fingerprint.toString(keyB().getPublicKey().getFingerprint()), com.google.gerrit.gpg.Fingerprint.toString(keyD().getPublicKey().getFingerprint()))); com.google.inject.Injector injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testing.InMemoryModule(cfg, com.google.gerrit.testing.NoteDbMode.newNotesMigrationFromEnv())); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); injector.injectMembers(this); lifecycle.start(); db = schemaFactory.open(); schemaCreator.create(db); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(""user"")).getAccountId(); accountsUpdate.create().update(userId, ( a) -> a.setPreferredEmail(""user@example.com"")); user = reloadUser(); requestContext.setContext(new com.google.gerrit.server.util.RequestContext() { @java.lang.Override public com.google.gerrit.server.CurrentUser getUser() { return user; } @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDbProvider() { return com.google.inject.util.Providers.of(db); } }); storeRepo = new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository(new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription(""repo"")); store = new com.google.gerrit.gpg.PublicKeyStore(storeRepo); }",1cab698e2c9babf80882dc377336723d6bdfa954,"@org.junit.Before public void setUpInjector() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = com.google.gerrit.testing.InMemoryModule.newDefaultConfig(); cfg.setInt(""receive"", null, ""maxTrustDepth"", 2); cfg.setStringList(""receive"", null, ""trustedKey"", com.google.common.collect.ImmutableList.of(com.google.gerrit.gpg.Fingerprint.toString(keyB().getPublicKey().getFingerprint()), com.google.gerrit.gpg.Fingerprint.toString(keyD().getPublicKey().getFingerprint()))); com.google.inject.Injector injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testing.InMemoryModule(cfg, com.google.gerrit.testing.NoteDbMode.newNotesMigrationFromEnv())); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); injector.injectMembers(this); lifecycle.start(); db = schemaFactory.open(); schemaCreator.create(db); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(""user"")).getAccountId(); accountsUpdate.create().update(userId, ( u) -> u.update().setPreferredEmail(""user@example.com"")); user = reloadUser(); requestContext.setContext(new com.google.gerrit.server.util.RequestContext() { @java.lang.Override public com.google.gerrit.server.CurrentUser getUser() { return user; } @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDbProvider() { return com.google.inject.util.Providers.of(db); } }); storeRepo = new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository(new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription(""repo"")); store = new com.google.gerrit.gpg.PublicKeyStore(storeRepo); }",4cf275ce30549ab9fba17bbcc7c7f172f6ba0d37,"@org.junit.Before public void setUpInjector() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = com.google.gerrit.testing.InMemoryModule.newDefaultConfig(); cfg.setInt(""receive"", null, ""maxTrustDepth"", 2); cfg.setStringList(""receive"", null, ""trustedKey"", com.google.common.collect.ImmutableList.of(com.google.gerrit.gpg.Fingerprint.toString(keyB().getPublicKey().getFingerprint()), com.google.gerrit.gpg.Fingerprint.toString(keyD().getPublicKey().getFingerprint()))); com.google.inject.Injector injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testing.InMemoryModule(cfg, com.google.gerrit.testing.NoteDbMode.newNotesMigrationFromEnv())); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); injector.injectMembers(this); lifecycle.start(); db = schemaFactory.open(); schemaCreator.create(db); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(""user"")).getAccountId(); accountsUpdate.create().update(userId, ( u) -> u.setPreferredEmail(""user@example.com"")); user = reloadUser(); requestContext.setContext(new com.google.gerrit.server.util.RequestContext() { @java.lang.Override public com.google.gerrit.server.CurrentUser getUser() { return user; } @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDbProvider() { return com.google.inject.util.Providers.of(db); } }); storeRepo = new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository(new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription(""repo"")); store = new com.google.gerrit.gpg.PublicKeyStore(storeRepo); }",7013acedd2ec27f1f31ee683a154d1a5b95abb4b,2017-12-22 15:38:09,10
147210,java_com_google_gerrit_server_account_PutPreferred.java,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String email) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.atomic.AtomicBoolean alreadyPreferred = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( a) -> { if (email.equals(a.getPreferredEmail())) { alreadyPreferred.set(true); } else { a.setPreferredEmail(email); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return alreadyPreferred.get() ? com.google.gerrit.extensions.restapi.Response.ok("""") : com.google.gerrit.extensions.restapi.Response.created(""""); }",6fe8fb40ba95d3931dd971fcb8747914050e9388,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String email) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.atomic.AtomicBoolean alreadyPreferred = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> { if (email.equals(u.account().getPreferredEmail())) { alreadyPreferred.set(true); } else { u.update().setPreferredEmail(email); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return alreadyPreferred.get() ? com.google.gerrit.extensions.restapi.Response.ok("""") : com.google.gerrit.extensions.restapi.Response.created(""""); }",ed3a96d765c582fbeb6f4fb41f986732ee6a0c14,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String email) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.atomic.AtomicBoolean alreadyPreferred = new java.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( a, u) -> { if (email.equals(a.getPreferredEmail())) { alreadyPreferred.set(true); } else { u.setPreferredEmail(email); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return alreadyPreferred.get() ? com.google.gerrit.extensions.restapi.Response.ok("""") : com.google.gerrit.extensions.restapi.Response.created(""""); }",a786d586094e5995a31bb68a5b89509a3b617a7a,2017-12-22 15:38:09,10
147210,javatests_com_google_gerrit_server_query_change_AbstractQueryChangesTest.java,"protected void setUpDatabase() throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(""user"")).getAccountId(); java.lang.String email = ""user@example.com""; externalIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().update(userId, ( a) -> a.setPreferredEmail(email)); user = userFactory.create(userId); requestContext.setContext(newRequestContext(userId)); }",243d5e69e0d751429e1e9e3f77316ac5fb8ece5e,"protected void setUpDatabase() throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(""user"")).getAccountId(); java.lang.String email = ""user@example.com""; externalIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().update(userId, ( u) -> u.update().setPreferredEmail(email)); user = userFactory.create(userId); requestContext.setContext(newRequestContext(userId)); }",3eac62b14217e8daf4931b2a9d95e9cc4ef71164,"protected void setUpDatabase() throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(""user"")).getAccountId(); java.lang.String email = ""user@example.com""; externalIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().update(userId, ( u) -> u.setPreferredEmail(email)); user = userFactory.create(userId); requestContext.setContext(newRequestContext(userId)); }",240d2ab97231c178d34fa0d80f7767dd00d0ecce,2017-12-22 15:38:09,10
147210,javatests_com_google_gerrit_acceptance_api_accounts_AccountIT.java,"@org.junit.Test public void pushAccountConfigToUserBranchInvalidPreferredEmailButNotChanged() throws java.lang.Exception { TestAccount foo = accountCreator.create(name(""foo""), ((name(""foo"")) + ""@example.com""), ""Foo""); java.lang.String userRef = com.google.gerrit.reviewdb.client.RefNames.refsUsers(foo.id); java.lang.String noEmail = ""no.email""; accountsUpdate.create().update(foo.id, ( a) -> a.setPreferredEmail(noEmail)); accountIndexedCounter.clear(); grant(allUsers, userRef, Permission.PUSH, false, com.google.gerrit.acceptance.api.accounts.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers, foo); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, (userRef + "":userRef"")); allUsersRepo.reset(""userRef""); java.lang.String status = ""in vacation""; org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_STATUS, status); pushFactory.create(db, foo.getIdent(), allUsersRepo, ""Update account config"", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(userRef).assertOkStatus(); accountIndexedCounter.assertReindexOf(foo); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.id.get()).get(); assertThat(info.email).isEqualTo(noEmail); assertThat(info.name).isEqualTo(foo.fullName); assertThat(info.status).isEqualTo(status); }",1b9dff3ca9833ac2afdddebcb0db14d4f73895d7,"@org.junit.Test public void pushAccountConfigToUserBranchInvalidPreferredEmailButNotChanged() throws java.lang.Exception { TestAccount foo = accountCreator.create(name(""foo""), ((name(""foo"")) + ""@example.com""), ""Foo""); java.lang.String userRef = com.google.gerrit.reviewdb.client.RefNames.refsUsers(foo.id); java.lang.String noEmail = ""no.email""; accountsUpdate.create().update(foo.id, ( u) -> u.update().setPreferredEmail(noEmail)); accountIndexedCounter.clear(); grant(allUsers, userRef, Permission.PUSH, false, com.google.gerrit.acceptance.api.accounts.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers, foo); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, (userRef + "":userRef"")); allUsersRepo.reset(""userRef""); java.lang.String status = ""in vacation""; org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_STATUS, status); pushFactory.create(db, foo.getIdent(), allUsersRepo, ""Update account config"", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(userRef).assertOkStatus(); accountIndexedCounter.assertReindexOf(foo); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.id.get()).get(); assertThat(info.email).isEqualTo(noEmail); assertThat(info.name).isEqualTo(foo.fullName); assertThat(info.status).isEqualTo(status); }",8189b145c637f8dba2e0a4baa5208b877ab87f12,"@org.junit.Test public void pushAccountConfigToUserBranchInvalidPreferredEmailButNotChanged() throws java.lang.Exception { TestAccount foo = accountCreator.create(name(""foo""), ((name(""foo"")) + ""@example.com""), ""Foo""); java.lang.String userRef = com.google.gerrit.reviewdb.client.RefNames.refsUsers(foo.id); java.lang.String noEmail = ""no.email""; accountsUpdate.create().update(foo.id, ( u) -> u.setPreferredEmail(noEmail)); accountIndexedCounter.clear(); grant(allUsers, userRef, Permission.PUSH, false, com.google.gerrit.acceptance.api.accounts.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers, foo); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, (userRef + "":userRef"")); allUsersRepo.reset(""userRef""); java.lang.String status = ""in vacation""; org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_STATUS, status); pushFactory.create(db, foo.getIdent(), allUsersRepo, ""Update account config"", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(userRef).assertOkStatus(); accountIndexedCounter.assertReindexOf(foo); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.id.get()).get(); assertThat(info.email).isEqualTo(noEmail); assertThat(info.name).isEqualTo(foo.fullName); assertThat(info.status).isEqualTo(status); }",e08ad29c04e88fef008654a33dbd574508edc62c,2017-12-22 15:38:09,10
147210,javatests_com_google_gerrit_acceptance_api_accounts_AccountIT.java,"@org.junit.Test public void updateAccountWithoutAccountConfigNoteDb() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount anonymousCoward = accountCreator.create(); assertUserBranchWithoutAccountConfig(anonymousCoward.getId()); java.lang.String status = ""OOO""; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(anonymousCoward.getId(), ( a) -> a.setStatus(status)); assertThat(account).isNotNull(); assertThat(account.getFullName()).isNull(); assertThat(account.getStatus()).isEqualTo(status); assertUserBranch(anonymousCoward.getId(), null, status); }",0dc2dff1154225c8b6afa2968b6e04329592d367,"@org.junit.Test public void updateAccountWithoutAccountConfigNoteDb() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount anonymousCoward = accountCreator.create(); assertUserBranchWithoutAccountConfig(anonymousCoward.getId()); java.lang.String status = ""OOO""; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(anonymousCoward.getId(), ( u) -> u.update().setStatus(status)); assertThat(account).isNotNull(); assertThat(account.getFullName()).isNull(); assertThat(account.getStatus()).isEqualTo(status); assertUserBranch(anonymousCoward.getId(), null, status); }",3c58fb8e2e6c1de6fb998fa32e58840561228d15,"@org.junit.Test public void updateAccountWithoutAccountConfigNoteDb() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount anonymousCoward = accountCreator.create(); assertUserBranchWithoutAccountConfig(anonymousCoward.getId()); java.lang.String status = ""OOO""; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(anonymousCoward.getId(), ( u) -> u.setStatus(status)); assertThat(account).isNotNull(); assertThat(account.getFullName()).isNull(); assertThat(account.getStatus()).isEqualTo(status); assertUserBranch(anonymousCoward.getId(), null, status); }",0c637fe6b942e89492bf7c87c5565b0fb85e9455,2017-12-22 15:38:09,10
147210,javatests_com_google_gerrit_acceptance_api_accounts_AccountIT.java,"@org.junit.Test public void lookUpByPreferredEmail() throws java.lang.Exception { java.lang.String prefix = ""foo.preferred""; java.lang.String prefEmail = prefix + ""@example.com""; com.google.gerrit.acceptance.TestAccount foo = accountCreator.create(name(""foo"")); accountsUpdate.create().update(foo.id, ( a) -> a.setPreferredEmail(prefEmail)); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> accountsByPrefEmail = emails.getAccountFor(prefEmail); assertThat(accountsByPrefEmail).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(accountsByPrefEmail)).isEqualTo(foo.id); accountsByPrefEmail = emails.getAccountFor(prefix); assertThat(accountsByPrefEmail).isEmpty(); accountsByPrefEmail = emails.getAccountFor(prefEmail.toUpperCase(java.util.Locale.US)); assertThat(accountsByPrefEmail).isEmpty(); }",a0f89dd4c472a3effadeb4def8ce52f7555aeb89,"@org.junit.Test public void lookUpByPreferredEmail() throws java.lang.Exception { java.lang.String prefix = ""foo.preferred""; java.lang.String prefEmail = prefix + ""@example.com""; com.google.gerrit.acceptance.TestAccount foo = accountCreator.create(name(""foo"")); accountsUpdate.create().update(foo.id, ( u) -> u.update().setPreferredEmail(prefEmail)); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> accountsByPrefEmail = emails.getAccountFor(prefEmail); assertThat(accountsByPrefEmail).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(accountsByPrefEmail)).isEqualTo(foo.id); accountsByPrefEmail = emails.getAccountFor(prefix); assertThat(accountsByPrefEmail).isEmpty(); accountsByPrefEmail = emails.getAccountFor(prefEmail.toUpperCase(java.util.Locale.US)); assertThat(accountsByPrefEmail).isEmpty(); }",008d923d9782430d9e28b77094c5e191847c562a,"@org.junit.Test public void lookUpByPreferredEmail() throws java.lang.Exception { java.lang.String prefix = ""foo.preferred""; java.lang.String prefEmail = prefix + ""@example.com""; com.google.gerrit.acceptance.TestAccount foo = accountCreator.create(name(""foo"")); accountsUpdate.create().update(foo.id, ( u) -> u.setPreferredEmail(prefEmail)); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> accountsByPrefEmail = emails.getAccountFor(prefEmail); assertThat(accountsByPrefEmail).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(accountsByPrefEmail)).isEqualTo(foo.id); accountsByPrefEmail = emails.getAccountFor(prefix); assertThat(accountsByPrefEmail).isEmpty(); accountsByPrefEmail = emails.getAccountFor(prefEmail.toUpperCase(java.util.Locale.US)); assertThat(accountsByPrefEmail).isEmpty(); }",0e485a75ff8298b72f0ee2e389156ef9c9a5e8bb,2017-12-22 15:38:09,10
147210,java_com_google_gerrit_server_account_PutName.java,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.common.NameInput input) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.common.NameInput(); } if (!(realm.allowsEdit(AccountFieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""realm does not allow editing name""); } java.lang.String newName = input.name; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( a) -> a.setFullName(newName)); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return com.google.common.base.Strings.isNullOrEmpty(account.getFullName()) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getFullName()); }",189f2a025e7d5062530b443b5573da4bc9e2f413,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.common.NameInput input) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.common.NameInput(); } if (!(realm.allowsEdit(AccountFieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""realm does not allow editing name""); } java.lang.String newName = input.name; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> u.update().setFullName(com.google.common.base.Strings.nullToEmpty(newName))); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return com.google.common.base.Strings.isNullOrEmpty(account.getFullName()) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getFullName()); }",7cb1e898915605854642e5c0ff824ca64b310295,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.common.NameInput input) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.common.NameInput(); } if (!(realm.allowsEdit(AccountFieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""realm does not allow editing name""); } java.lang.String newName = input.name; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> u.setFullName(newName)); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return com.google.common.base.Strings.isNullOrEmpty(account.getFullName()) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getFullName()); }",0fedf2cfeea5e4e9db1d214b2f9577de7d99f747,2017-12-22 15:38:09,10
147210,java_com_google_gerrit_server_account_AccountsUpdate.java,"public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.function.Consumer<com.google.gerrit.reviewdb.client.Account> consumer) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return update(accountId, com.google.common.collect.ImmutableList.of(consumer)); }",5c76096370cb2003f158930e3d511863a3d2de74,"public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.function.Consumer<com.google.gerrit.server.account.AccountUpdate> consumer) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return update(accountId, com.google.common.collect.ImmutableList.of(consumer)); }",da03cf87fcdbecae34630ba816660a60d24e718f,"public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.function.Consumer<com.google.gerrit.server.account.InternalAccountUpdate.Builder> update) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return update(accountId, com.google.gerrit.server.account.AccountsUpdate.AccountUpdater.fromConsumer(update)); }",22397eec25974ea1a5090d9da7cddb429e79b959,2017-12-22 15:38:09,10
147210,java_com_google_gerrit_server_account_AccountsUpdate.java,"@com.google.gerrit.common.Nullable public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.List<java.util.function.Consumer<com.google.gerrit.reviewdb.client.Account>> consumers) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (consumers.isEmpty()) { return null; } com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId); java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = accountConfig.getLoadedAccount(); if (account.isPresent()) { consumers.stream().forEach(( c) -> c.accept(account.get())); commit(accountConfig); } return account.orElse(null); }",efeead5d752042e5be87a2ddf7e344c73f8ccb33,"@com.google.gerrit.common.Nullable public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.List<java.util.function.Consumer<com.google.gerrit.server.account.AccountUpdate>> consumers) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (consumers.isEmpty()) { return null; } com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId); java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = accountConfig.getLoadedAccount(); if (account.isPresent()) { com.google.gerrit.server.account.AccountUpdate accountUpdate = com.google.gerrit.server.account.AccountUpdate.create(account.get()); consumers.stream().forEach(( c) -> c.accept(accountUpdate)); accountConfig.setAccountUpdate(accountUpdate.buildUpdate()); commit(accountConfig); } return accountConfig.getLoadedAccount().orElse(null); }",b57259d1fc12d321496e1c148bebca359fbefb61,"@com.google.gerrit.common.Nullable public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate.AccountUpdater updater) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId); java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = accountConfig.getLoadedAccount(); if (!(account.isPresent())) { return null; } com.google.gerrit.server.account.InternalAccountUpdate.Builder updateBuilder = com.google.gerrit.server.account.InternalAccountUpdate.builder(); updater.update(account.get(), updateBuilder); accountConfig.setAccountUpdate(updateBuilder.build()); commit(accountConfig); return accountConfig.getLoadedAccount().orElse(null); }",47048f5710fa9339eab7fd9c4e42056a86ce527b,2017-12-22 15:38:09,10
147210,java_com_google_gerrit_server_account_AccountsUpdate.java,"public com.google.gerrit.reviewdb.client.Account insert(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.function.Consumer<com.google.gerrit.reviewdb.client.Account> init) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(); init.accept(account); commitNew(accountConfig); return account; }",afc77c52cca5bd254c142738c4981c764038dbff,"public com.google.gerrit.reviewdb.client.Account insert(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.function.Consumer<com.google.gerrit.server.account.AccountUpdate> init) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(); com.google.gerrit.server.account.AccountUpdate accountUpdate = com.google.gerrit.server.account.AccountUpdate.create(account); init.accept(accountUpdate); accountConfig.setAccountUpdate(accountUpdate.buildUpdate()); commitNew(accountConfig); return accountConfig.getLoadedAccount().get(); }",e8462b78e5e7bf38230c6cdd0ea8a5ae16de0d69,"public com.google.gerrit.reviewdb.client.Account insert(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.function.Consumer<com.google.gerrit.server.account.InternalAccountUpdate.Builder> init) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return insert(accountId, com.google.gerrit.server.account.AccountsUpdate.AccountUpdater.fromConsumer(init)); }",ce22a2c9a9655dcefa7146aecf7b1d09189c2d66,2017-12-22 15:38:09,10
147210,java_com_google_gerrit_server_account_AccountConfig.java,"@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); if (!(loadedAccount.isPresent())) { return false; } if ((revision) != null) { commit.setMessage(""Update account\n""); } else { commit.setMessage(""Create account\n""); commit.setAuthor(new org.eclipse.jgit.lib.PersonIdent(commit.getAuthor(), registeredOn)); commit.setCommitter(new org.eclipse.jgit.lib.PersonIdent(commit.getCommitter(), registeredOn)); } org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); com.google.gerrit.server.account.AccountConfig.writeToConfig(loadedAccount.get(), cfg); saveConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG, cfg); return true; }",126608a71a2cc8a0759c87a1b2f8ed2dcb1a3ff8,"@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); if ((revision) != null) { commit.setMessage(""Update account\n""); } else { commit.setMessage(""Create account\n""); commit.setAuthor(new org.eclipse.jgit.lib.PersonIdent(commit.getAuthor(), registeredOn)); commit.setCommitter(new org.eclipse.jgit.lib.PersonIdent(commit.getCommitter(), registeredOn)); } org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); if (accountUpdate.isPresent()) { com.google.gerrit.server.account.AccountConfig.writeToConfig(accountUpdate.get(), cfg); } saveConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG, cfg); loadedAccount = java.util.Optional.of(parse(cfg, null)); return true; }",8c5241e022faad6b602c794ce18b1ef1a01daae4,"@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); if (!(loadedAccount.isPresent())) { return false; } if ((revision) != null) { commit.setMessage(""Update account\n""); } else { commit.setMessage(""Create account\n""); commit.setAuthor(new org.eclipse.jgit.lib.PersonIdent(commit.getAuthor(), registeredOn)); commit.setCommitter(new org.eclipse.jgit.lib.PersonIdent(commit.getCommitter(), registeredOn)); } org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); if (accountUpdate.isPresent()) { com.google.gerrit.server.account.AccountConfig.writeToConfig(accountUpdate.get(), cfg); } saveConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG, cfg); loadedAccount = java.util.Optional.of(parse(cfg, null)); accountUpdate = java.util.Optional.empty(); return true; }",9d2639a5c751e0853bbacdb6b378d69adaefc934,2017-12-22 15:38:09,10
147210,java_com_google_gerrit_server_account_AccountConfig.java,public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.loadedAccount = java.util.Optional.of(account); this.registeredOn = account.getRegisteredOn(); },6b62f9dd688cceabb2bc4f3694ddcc33ebdbaf4b,public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.loadedAccount = java.util.Optional.of(account); this.accountUpdate = java.util.Optional.of(com.google.gerrit.server.account.InternalAccountUpdate.builder().setActive(account.isActive()).setFullName(com.google.common.base.Strings.nullToEmpty(account.getFullName())).setPreferredEmail(com.google.common.base.Strings.nullToEmpty(account.getPreferredEmail())).setStatus(com.google.common.base.Strings.nullToEmpty(account.getStatus())).build()); this.registeredOn = account.getRegisteredOn(); },482fa1acc9c261a6894375ff8471ed0103d66f38,public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.loadedAccount = java.util.Optional.of(account); this.accountUpdate = java.util.Optional.of(com.google.gerrit.server.account.InternalAccountUpdate.builder().setActive(account.isActive()).setFullName(account.getFullName()).setPreferredEmail(account.getPreferredEmail()).setStatus(account.getStatus()).build()); this.registeredOn = account.getRegisteredOn(); },0865608a7119ce9dd6ece03f6310b12e39b062b6,2017-12-22 15:38:09,10
147210,javatests_com_google_gerrit_server_query_group_AbstractQueryGroupsTest.java,"private Account.Id createAccountOutsideRequestContext(java.lang.String username, java.lang.String fullName, java.lang.String email, boolean active) throws java.lang.Exception { try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.open()) { com.google.gerrit.reviewdb.client.Account.Id id = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(username)).getAccountId(); if (email != null) { accountManager.link(id, com.google.gerrit.server.account.AuthRequest.forEmail(email)); } accountsUpdate.create().update(id, ( a) -> { a.setFullName(fullName); a.setPreferredEmail(email); a.setActive(active); }); return id; } }",0f3656791a522722e1aa820ee0c206cfbedc8a57,"private Account.Id createAccountOutsideRequestContext(java.lang.String username, java.lang.String fullName, java.lang.String email, boolean active) throws java.lang.Exception { try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.open()) { com.google.gerrit.reviewdb.client.Account.Id id = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(username)).getAccountId(); if (email != null) { accountManager.link(id, com.google.gerrit.server.account.AuthRequest.forEmail(email)); } accountsUpdate.create().update(id, ( u) -> { u.update().setFullName(com.google.common.base.Strings.nullToEmpty(fullName)).setPreferredEmail(com.google.common.base.Strings.nullToEmpty(email)).setActive(active); }); return id; } }",c5e4c28cca2a9cd3addd572dc9f2c026ab16f4bc,"private Account.Id createAccountOutsideRequestContext(java.lang.String username, java.lang.String fullName, java.lang.String email, boolean active) throws java.lang.Exception { try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.open()) { com.google.gerrit.reviewdb.client.Account.Id id = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(username)).getAccountId(); if (email != null) { accountManager.link(id, com.google.gerrit.server.account.AuthRequest.forEmail(email)); } accountsUpdate.create().update(id, ( u) -> { u.setFullName(fullName).setPreferredEmail(email).setActive(active); }); return id; } }",0449f6f9d55aa73e22cb9d4b2d374fb58cef3fb0,2017-12-22 15:38:09,10
147210,javatests_com_google_gerrit_acceptance_api_accounts_AccountIT.java,"@org.junit.Test public void checkMetaId() throws java.lang.Exception { assertThat(accounts.get(admin.getId()).getMetaId()).isEqualTo(getMetaId(admin.getId())); com.google.gerrit.server.account.AccountsUpdate au = accountsUpdate.create(); com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(seq.nextAccountId()); com.google.gerrit.reviewdb.client.Account account = au.insert(accountId, ( a) -> { }); assertThat(account.getMetaId()).isEqualTo(getMetaId(accountId)); com.google.gerrit.reviewdb.client.Account updatedAccount = au.update(accountId, ( a) -> a.setFullName(""foo"")); assertThat(account.getMetaId()).isNotEqualTo(updatedAccount.getMetaId()); assertThat(updatedAccount.getMetaId()).isEqualTo(getMetaId(accountId)); }",1ab471d32b4bb5be0cacb0c1265914d6dbfe9b6f,"@org.junit.Test public void checkMetaId() throws java.lang.Exception { assertThat(accounts.get(admin.getId()).getMetaId()).isEqualTo(getMetaId(admin.getId())); com.google.gerrit.server.account.AccountsUpdate au = accountsUpdate.create(); com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(seq.nextAccountId()); com.google.gerrit.reviewdb.client.Account account = au.insert(accountId, ( u) -> { }); assertThat(account.getMetaId()).isEqualTo(getMetaId(accountId)); com.google.gerrit.reviewdb.client.Account updatedAccount = au.update(accountId, ( u) -> u.update().setFullName(""foo"")); assertThat(account.getMetaId()).isNotEqualTo(updatedAccount.getMetaId()); assertThat(updatedAccount.getMetaId()).isEqualTo(getMetaId(accountId)); }",2568a748ac93c0ecd6b384b2e9435e36c9f3739a,"@org.junit.Test public void checkMetaId() throws java.lang.Exception { assertThat(accounts.get(admin.getId()).getMetaId()).isEqualTo(getMetaId(admin.getId())); com.google.gerrit.server.account.AccountsUpdate au = accountsUpdate.create(); com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(seq.nextAccountId()); com.google.gerrit.reviewdb.client.Account account = au.insert(accountId, ( u) -> { }); assertThat(account.getMetaId()).isEqualTo(getMetaId(accountId)); com.google.gerrit.reviewdb.client.Account updatedAccount = au.update(accountId, ( u) -> u.setFullName(""foo"")); assertThat(account.getMetaId()).isNotEqualTo(updatedAccount.getMetaId()); assertThat(updatedAccount.getMetaId()).isEqualTo(getMetaId(accountId)); }",aa9494d7531a62589d986f511836e39385758faf,2017-12-22 15:38:09,10
150230,lib_asciidoctor_java_AsciiDoctor.java,"private void invoke(java.lang.String... parameters) throws java.io.IOException { org.kohsuke.args4j.CmdLineParser parser = new org.kohsuke.args4j.CmdLineParser(this); try { parser.parseArgument(parameters); if (inputFiles.isEmpty()) { throw new org.kohsuke.args4j.CmdLineException(parser, ""asciidoctor: FAILED: input file missing""); } } catch (org.kohsuke.args4j.CmdLineException e) { java.lang.System.err.println(e.getMessage()); parser.printUsage(java.lang.System.err); java.lang.System.exit(1); return; } if ((revnumberFile) != null) { try (java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.FileReader(revnumberFile))) { revnumber = reader.readLine(); } } if (mktmp) { tmpdir = java.nio.file.Files.createTempDirectory(""asciidoctor-"").toFile(); } if (bazel) { renderFiles(inputFiles, null); } else { try (java.util.zip.ZipOutputStream zip = new java.util.zip.ZipOutputStream(java.nio.file.Files.newOutputStream(java.nio.file.Paths.get(zipFile)))) { renderFiles(inputFiles, zip); java.io.File[] cssFiles = tmpdir.listFiles(new java.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File dir, java.lang.String name) { return name.endsWith("".css""); } }); for (java.io.File css : cssFiles) { AsciiDoctor.zipFile(css, css.getName(), zip); } } } }",502425f6c0765934e54cd2ae406558047e8c81ad,"private void invoke(java.lang.String... parameters) throws java.io.IOException { org.kohsuke.args4j.CmdLineParser parser = new org.kohsuke.args4j.CmdLineParser(this); try { parser.parseArgument(parameters); if (inputFiles.isEmpty()) { throw new org.kohsuke.args4j.CmdLineException(parser, ""asciidoctor: FAILED: input file missing""); } } catch (org.kohsuke.args4j.CmdLineException e) { java.lang.System.err.println(e.getMessage()); parser.printUsage(java.lang.System.err); java.lang.System.exit(1); return; } if ((revnumberFile) != null) { try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(revnumberFile.toPath())) { revnumber = reader.readLine(); } } if (mktmp) { tmpdir = java.nio.file.Files.createTempDirectory(""asciidoctor-"").toFile(); } if (bazel) { renderFiles(inputFiles, null); } else { try (java.util.zip.ZipOutputStream zip = new java.util.zip.ZipOutputStream(java.nio.file.Files.newOutputStream(java.nio.file.Paths.get(zipFile)))) { renderFiles(inputFiles, zip); java.io.File[] cssFiles = tmpdir.listFiles(new java.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File dir, java.lang.String name) { return name.endsWith("".css""); } }); for (java.io.File css : cssFiles) { AsciiDoctor.zipFile(css, css.getName(), zip); } } } }",528c8565a0123fcd5ecfc2d6688cc59fbf78082f,"private void invoke(java.lang.String... parameters) throws java.io.IOException { org.kohsuke.args4j.CmdLineParser parser = new org.kohsuke.args4j.CmdLineParser(this); try { parser.parseArgument(parameters); if (inputFiles.isEmpty()) { throw new org.kohsuke.args4j.CmdLineException(parser, ""asciidoctor: FAILED: input file missing""); } } catch (org.kohsuke.args4j.CmdLineException e) { java.lang.System.err.println(e.getMessage()); parser.printUsage(java.lang.System.err); java.lang.System.exit(1); return; } if ((revnumberFile) != null) { try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(revnumberFile.toPath(), java.nio.charset.StandardCharsets.UTF_8)) { revnumber = reader.readLine(); } } if (mktmp) { tmpdir = java.nio.file.Files.createTempDirectory(""asciidoctor-"").toFile(); } if (bazel) { renderFiles(inputFiles, null); } else { try (java.util.zip.ZipOutputStream zip = new java.util.zip.ZipOutputStream(java.nio.file.Files.newOutputStream(java.nio.file.Paths.get(zipFile)))) { renderFiles(inputFiles, zip); java.io.File[] cssFiles = tmpdir.listFiles(new java.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File dir, java.lang.String name) { return name.endsWith("".css""); } }); for (java.io.File css : cssFiles) { AsciiDoctor.zipFile(css, css.getName(), zip); } } } }",83b086963bab26849ffef63d4d76ff9a93dd2f58,2018-01-03 07:14:15,2
150794,java_com_google_gerrit_server_update_RetryHelper.java,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return execute(action, com.google.gerrit.server.update.RetryHelper.defaults(), ( t) -> t instanceof com.google.gerrit.server.git.LockFailureException); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gwtorm.server.OrmException.class); throw new com.google.gwtorm.server.OrmException(t); } }",5461f16eb75fbc89e25f9c3b983cdb1bb2f99baf,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(com.google.gerrit.server.update.RetryHelper.defaults(), ( t) -> t instanceof com.google.gerrit.server.git.LockFailureException); try { return retryerBuilder.build().call(() -> action.call()); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { java.lang.Throwable t = e; if ((e.getCause()) != null) { t = e.getCause(); } com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gwtorm.server.OrmException.class); throw new com.google.gwtorm.server.OrmException(t); } }",17812e0a508dbd831d910440c1c528c226b2c63e,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return execute(actionType, action, com.google.gerrit.server.update.RetryHelper.defaults(), ( t) -> t instanceof com.google.gerrit.server.git.LockFailureException); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gwtorm.server.OrmException.class); throw new com.google.gwtorm.server.OrmException(t); } }",a20b67d8a36362645ae7505444478eab1baa121c,2018-01-08 14:16:39,4
150794,java_com_google_gerrit_server_update_RetryHelper.java,"private <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws java.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return execute(action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(listener.getAttemptCount()); } }",eb91aa7a5669e121d7e9812d7b4a3b3becef3d2b,"private <T> T execute(com.google.gerrit.server.update.RetryHelper.ChangeAction<T> changeAction, com.github.rholder.retry.Retryer<T> retryer) throws java.lang.Throwable { try { return retryer.call(() -> changeAction.call(updateFactory)); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { if (e instanceof com.github.rholder.retry.RetryException) { metrics.timeoutCount.increment(); } if ((e.getCause()) != null) { throw e.getCause(); } throw e; } }",c7628e182763c9a9383cd002aeb186d3d1473149,"private <T> T execute(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws java.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return execute(actionType, action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(actionType, listener.getAttemptCount()); } }",4f81c455a9af19aa50e21a4f4b1b3164df204e2a,2018-01-08 14:16:39,4
150795,java_com_google_gerrit_server_update_RetryHelper.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(com.google.gerrit.server.update.RetryHelper.defaults(), exceptionPredicate); try { return retryerBuilder.build().call(() -> action.call()); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { java.lang.Throwable t = e; if ((e.getCause()) != null) { t = e.getCause(); } com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gwtorm.server.OrmException.class); throw new com.google.gwtorm.server.OrmException(t); } }",72a04e80dc89828c28d4a22df42ee9a57f3ffd5c,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return execute(actionType, action, com.google.gerrit.server.update.RetryHelper.defaults(), exceptionPredicate); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gwtorm.server.OrmException.class); throw new com.google.gwtorm.server.OrmException(t); } }",6e8262e98fdae8c61e035fa375616a605e3e18fb,2018-01-08 14:16:39,3
150794,java_com_google_gerrit_server_update_RetryHelper.java,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.ChangeAction<T> changeAction, com.google.gerrit.server.update.RetryHelper.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { if (!(migration.disableChangeReviewDb())) { return execute(() -> changeAction.call(updateFactory), com.github.rholder.retry.RetryerBuilder.<T>newBuilder().build()); } return execute(() -> changeAction.call(updateFactory), opts, ( t) -> { if (t instanceof com.google.gerrit.server.update.UpdateException) { t = t.getCause(); } return t instanceof com.google.gerrit.server.git.LockFailureException; }); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.server.update.UpdateException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(t); } }",e5cc6de1574690bd4ce7b26ffd1931c2d38ca9c6,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.ChangeAction<T> changeAction, com.google.gerrit.server.update.RetryHelper.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { if (!(migration.disableChangeReviewDb())) { return execute(changeAction, com.github.rholder.retry.RetryerBuilder.<T>newBuilder().build()); } com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, ( t) -> { if (t instanceof com.google.gerrit.server.update.UpdateException) { t = t.getCause(); } return t instanceof com.google.gerrit.server.git.LockFailureException; }); retryerBuilder.withRetryListener(listener); return execute(changeAction, retryerBuilder.build()); } finally { metrics.attemptCounts.record(listener.getAttemptCount()); } } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.server.update.UpdateException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(t); } }",663cbabb4d6341d1ade81b9821fe343a18343c93,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.ChangeAction<T> changeAction, com.google.gerrit.server.update.RetryHelper.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { if (!(migration.disableChangeReviewDb())) { return execute(com.google.gerrit.server.update.RetryHelper.ActionType.CHANGE_UPDATE, () -> changeAction.call(updateFactory), com.github.rholder.retry.RetryerBuilder.<T>newBuilder().build()); } return execute(com.google.gerrit.server.update.RetryHelper.ActionType.CHANGE_UPDATE, () -> changeAction.call(updateFactory), opts, ( t) -> { if (t instanceof com.google.gerrit.server.update.UpdateException) { t = t.getCause(); } return t instanceof com.google.gerrit.server.git.LockFailureException; }); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.server.update.UpdateException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(t); } }",3d07b28584c95d63dcfe2752f7a3aee1c76ed89a,2018-01-08 14:16:39,4
150795,java_com_google_gerrit_server_update_RetryHelper.java,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(com.google.gerrit.server.update.RetryHelper.defaults(), ( t) -> t instanceof com.google.gerrit.server.git.LockFailureException); try { return retryerBuilder.build().call(() -> action.call()); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { java.lang.Throwable t = e; if ((e.getCause()) != null) { t = e.getCause(); } com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gwtorm.server.OrmException.class); throw new com.google.gwtorm.server.OrmException(t); } }",17812e0a508dbd831d910440c1c528c226b2c63e,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return execute(action, ( t) -> t instanceof com.google.gerrit.server.git.LockFailureException); }",c1146a1f1b6a8c8a071cebb5173624567b8a49ad,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return execute(actionType, action, ( t) -> t instanceof com.google.gerrit.server.git.LockFailureException); }",7d925aa55cae2c08f2c730349b1302ebf0fc87e0,2018-01-08 14:16:39,3
148032,java_com_google_gerrit_server_auth_ldap_Helper.java,"private void recursivelyExpandGroups(final java.util.Set<java.lang.String> groupDNs, final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema, final javax.naming.directory.DirContext ctx, final java.lang.String groupDN) { if (((groupDNs.add(groupDN)) && ((schema.accountMemberField) != null)) && (schema.accountMemberExpandGroups)) { com.google.common.collect.ImmutableSet<java.lang.String> cachedParentsDNs = parentGroups.getIfPresent(groupDN); if (cachedParentsDNs == null) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> dns = com.google.common.collect.ImmutableSet.builder(); try { final javax.naming.Name compositeGroupName = new javax.naming.CompositeName().add(groupDN); final javax.naming.directory.Attribute in = ctx.getAttributes(compositeGroupName, schema.accountMemberFieldArray).get(schema.accountMemberField); if (in != null) { final javax.naming.NamingEnumeration<?> groups = in.getAll(); try { while (groups.hasMore()) { dns.add(((java.lang.String) (groups.next()))); } } catch (javax.naming.PartialResultException e) { } } } catch (javax.naming.NamingException e) { LdapRealm.log.warn((""Could not find group "" + groupDN), e); } cachedParentsDNs = dns.build(); parentGroups.put(groupDN, cachedParentsDNs); } for (java.lang.String dn : cachedParentsDNs) { recursivelyExpandGroups(groupDNs, schema, ctx, dn); } } }",7bf7687b90fdb0f67d4ebbad1995cee4e3cf0b00,"private void recursivelyExpandGroups(final java.util.Set<java.lang.String> groupDNs, final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema, final javax.naming.directory.DirContext ctx, final java.lang.String groupDN) { if (((groupDNs.add(groupDN)) && ((schema.accountMemberField) != null)) && (schema.accountMemberExpandGroups)) { com.google.common.collect.ImmutableSet<java.lang.String> cachedParentsDNs = parentGroups.getIfPresent(groupDN); if (cachedParentsDNs == null) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> dns = com.google.common.collect.ImmutableSet.builder(); try { final javax.naming.Name compositeGroupName = new javax.naming.CompositeName().add(groupDN); final javax.naming.directory.Attribute in = ctx.getAttributes(compositeGroupName, schema.accountMemberFieldArray).get(schema.accountMemberField); if (in != null) { final javax.naming.NamingEnumeration<?> groups = in.getAll(); try { while (groups.hasMore()) { dns.add(((java.lang.String) (groups.next()))); } } catch (javax.naming.PartialResultException e) { } } } catch (javax.naming.NamingException e) { LdapRealm.log.warn((""Could not find account "" + groupDN), e); } cachedParentsDNs = dns.build(); parentGroups.put(groupDN, cachedParentsDNs); } for (java.lang.String dn : cachedParentsDNs) { recursivelyExpandGroups(groupDNs, schema, ctx, dn); } } }",981cb15cd4998fca062ac446c3162b1f3d8d3696,"private void recursivelyExpandGroups(final java.util.Set<java.lang.String> groupDNs, final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema, final javax.naming.directory.DirContext ctx, final java.lang.String groupDN) { if (((groupDNs.add(groupDN)) && ((schema.accountMemberField) != null)) && (schema.accountMemberExpandGroups)) { com.google.common.collect.ImmutableSet<java.lang.String> cachedParentsDNs = parentGroups.getIfPresent(groupDN); if (cachedParentsDNs == null) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> dns = com.google.common.collect.ImmutableSet.builder(); try { final javax.naming.Name compositeGroupName = new javax.naming.CompositeName().add(groupDN); final javax.naming.directory.Attribute in = ctx.getAttributes(compositeGroupName, schema.accountMemberFieldArray).get(schema.accountMemberField); if (in != null) { final javax.naming.NamingEnumeration<?> groups = in.getAll(); try { while (groups.hasMore()) { dns.add(((java.lang.String) (groups.next()))); } } catch (javax.naming.PartialResultException e) { } } } catch (javax.naming.NamingException e) { LdapRealm.log.warn((""Could not find group "" + groupDN), e); } cachedParentsDNs = dns.build(); parentGroups.put(groupDN, cachedParentsDNs); } for (java.lang.String dn : cachedParentsDNs) { recursivelyExpandGroups(groupDNs, schema, ctx, dn); } } }",7bf7687b90fdb0f67d4ebbad1995cee4e3cf0b00,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_changes_FileApiImpl.java,com.google.gerrit.server.api.changes.FileApiImpl create(com.google.gerrit.server.change.FileResource r);,c302ed0acd30dea21e9602e8b00e2a670b6b84ab,com.google.gerrit.server.api.changes.FileApiImpl create(com.google.gerrit.server.restapi.change.FileResource r);,677737cb2549402b9cdb6dc5e2a69b8fe62ef69f,com.google.gerrit.server.api.changes.FileApiImpl create(com.google.gerrit.server.change.FileResource r);,c302ed0acd30dea21e9602e8b00e2a670b6b84ab,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_GetSubgroup.java,@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.SubgroupResource rsrc) throws com.google.gwtorm.server.OrmException { return json.format(rsrc.getMemberDescription()); },e56b4a6a5e024e886883678ea9eeaa649fade878,@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.SubgroupResource rsrc) throws com.google.gwtorm.server.OrmException { return json.format(rsrc.getMemberDescription()); },40df8dba71f796f2ac4036cafa0d1491b3c37304,@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.SubgroupResource rsrc) throws com.google.gwtorm.server.OrmException { return json.format(rsrc.getMemberDescription()); },e56b4a6a5e024e886883678ea9eeaa649fade878,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_Votes.java,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.VoteResource>> views() { return views; },4e6f3d55f9d099f19a56ffa203b1b14210c12214,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.change.VoteResource>> views() { return views; },9263f49695c5b4f95b38b8e8c44f54b63124c573,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.VoteResource>> views() { return views; },4e6f3d55f9d099f19a56ffa203b1b14210c12214,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_Votes.java,"@java.lang.Override public com.google.gerrit.server.change.VoteResource parse(com.google.gerrit.server.change.ReviewerResource reviewer, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if (((reviewer.getRevisionResource()) != null) && (!(reviewer.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""Cannot access on non-current patch set""); } return new com.google.gerrit.server.change.VoteResource(reviewer, id.get()); }",22663f90f707607fc93652100a47aca5f07eb72d,"@java.lang.Override public com.google.gerrit.server.restapi.change.VoteResource parse(com.google.gerrit.server.change.ReviewerResource reviewer, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if (((reviewer.getRevisionResource()) != null) && (!(reviewer.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""Cannot access on non-current patch set""); } return new com.google.gerrit.server.restapi.change.VoteResource(reviewer, id.get()); }",88dcb2072fbf62806bc70e8721b318ddb8bfbc70,"@java.lang.Override public com.google.gerrit.server.change.VoteResource parse(com.google.gerrit.server.change.ReviewerResource reviewer, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if (((reviewer.getRevisionResource()) != null) && (!(reviewer.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""Cannot access on non-current patch set""); } return new com.google.gerrit.server.change.VoteResource(reviewer, id.get()); }",22663f90f707607fc93652100a47aca5f07eb72d,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_auth_ldap_LdapGroupBackend.java,"@java.lang.Override public GroupDescription.Basic get(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { if (!(handles(uuid))) { return null; } java.lang.String groupDn = uuid.get().substring(com.google.gerrit.server.auth.ldap.Helper.LDAP_UUID.length()); com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((!(user.isIdentifiedUser())) || (!(membershipsOf(user.asIdentifiedUser()).contains(uuid)))) { try { if (!(existsCache.get(groupDn))) { return null; } } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.auth.ldap.LdapGroupBackend.log.warn(java.lang.String.format(""Cannot lookup group %s in LDAP"", groupDn), e); return null; } } final java.lang.String name = (com.google.gerrit.server.auth.ldap.LdapGroupBackend.LDAP_NAME) + (com.google.gerrit.server.auth.ldap.LdapGroupBackend.cnFor(groupDn)); return new com.google.gerrit.common.data.GroupDescription.Basic() { @java.lang.Override public AccountGroup.UUID getGroupUUID() { return uuid; } @java.lang.Override public java.lang.String getName() { return name; } @java.lang.Override @com.google.gerrit.common.Nullable public java.lang.String getEmailAddress() { return null; } @java.lang.Override @com.google.gerrit.common.Nullable public java.lang.String getUrl() { return null; } }; }",9eded51d6664a51915c8fb3371a950b643fc21b7,"@java.lang.Override public GroupDescription.Basic get(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { if (!(handles(uuid))) { return null; } java.lang.String groupDn = uuid.get().substring(com.google.gerrit.server.auth.ldap.Helper.LDAP_UUID.length()); com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((!(user.isIdentifiedUser())) || (!(membershipsOf(user.asIdentifiedUser()).contains(uuid)))) { try { if (!(existsCache.get(groupDn))) { return null; } } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.auth.ldap.LdapGroupBackend.log.warn(java.lang.String.format(""Cannot lookup account %s in LDAP"", groupDn), e); return null; } } final java.lang.String name = (com.google.gerrit.server.auth.ldap.LdapGroupBackend.LDAP_NAME) + (com.google.gerrit.server.auth.ldap.LdapGroupBackend.cnFor(groupDn)); return new com.google.gerrit.common.data.GroupDescription.Basic() { @java.lang.Override public AccountGroup.UUID getGroupUUID() { return uuid; } @java.lang.Override public java.lang.String getName() { return name; } @java.lang.Override @com.google.gerrit.common.Nullable public java.lang.String getEmailAddress() { return null; } @java.lang.Override @com.google.gerrit.common.Nullable public java.lang.String getUrl() { return null; } }; }",83dee091e5775b7c8c5636655dd7028f9c13d6f2,"@java.lang.Override public GroupDescription.Basic get(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { if (!(handles(uuid))) { return null; } java.lang.String groupDn = uuid.get().substring(com.google.gerrit.server.auth.ldap.Helper.LDAP_UUID.length()); com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((!(user.isIdentifiedUser())) || (!(membershipsOf(user.asIdentifiedUser()).contains(uuid)))) { try { if (!(existsCache.get(groupDn))) { return null; } } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.auth.ldap.LdapGroupBackend.log.warn(java.lang.String.format(""Cannot lookup group %s in LDAP"", groupDn), e); return null; } } final java.lang.String name = (com.google.gerrit.server.auth.ldap.LdapGroupBackend.LDAP_NAME) + (com.google.gerrit.server.auth.ldap.LdapGroupBackend.cnFor(groupDn)); return new com.google.gerrit.common.data.GroupDescription.Basic() { @java.lang.Override public AccountGroup.UUID getGroupUUID() { return uuid; } @java.lang.Override public java.lang.String getName() { return name; } @java.lang.Override @com.google.gerrit.common.Nullable public java.lang.String getEmailAddress() { return null; } @java.lang.Override @com.google.gerrit.common.Nullable public java.lang.String getUrl() { return null; } }; }",9eded51d6664a51915c8fb3371a950b643fc21b7,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_DeleteDashboard.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.DashboardResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (resource.isProjectDefault()) { com.google.gerrit.extensions.common.SetDashboardInput in = new com.google.gerrit.extensions.common.SetDashboardInput(); in.commitMessage = (input != null) ? input.commitMessage : null; return defaultSetter.get().apply(resource, in); } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); }",1cf6f59e95b7dd2d1ae0229130550c1081490e84,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.restapi.project.DashboardResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (resource.isProjectDefault()) { com.google.gerrit.extensions.common.SetDashboardInput in = new com.google.gerrit.extensions.common.SetDashboardInput(); in.commitMessage = (input != null) ? input.commitMessage : null; return defaultSetter.get().apply(resource, in); } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); }",c8c04e1136bf1fff983d1eb5a45237c195af717e,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.DashboardResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (resource.isProjectDefault()) { com.google.gerrit.extensions.common.SetDashboardInput in = new com.google.gerrit.extensions.common.SetDashboardInput(); in.commitMessage = (input != null) ? input.commitMessage : null; return defaultSetter.get().apply(resource, in); } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); }",1cf6f59e95b7dd2d1ae0229130550c1081490e84,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupNameNotesTest.java,"@org.junit.Test public void updateGroupNamesWithEmptyCollectionClearsAllNotes() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup(""a""); com.google.gerrit.common.data.GroupReference g2 = newGroup(""b""); org.eclipse.jgit.lib.PersonIdent ident = com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(); updateGroupNames(ident, g1, g2); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).containsExactly(""a"", ""a-1"", ""b"", ""b-2""); updateGroupNames(ident); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).isEmpty(); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(); assertThat(log).hasSize(2); assertThat(log.get(1)).message().isEqualTo(""Store 0 group names""); }",06a89957415425b93b81dbb9541206b012caf547,"@org.junit.Test public void updateGroupNamesWithEmptyCollectionClearsAllNotes() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup(""a""); com.google.gerrit.common.data.GroupReference g2 = newGroup(""b""); org.eclipse.jgit.lib.PersonIdent ident = com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(); updateGroupNames(ident, g1, g2); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).containsExactly(""a"", ""a-1"", ""b"", ""b-2""); updateGroupNames(ident); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).isEmpty(); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(); assertThat(log).hasSize(2); assertThat(log.get(1)).message().isEqualTo(""Store 0 account names""); }",79f02be7d0309c13aced9b7e2e2e688db1fc1fa2,"@org.junit.Test public void updateGroupNamesWithEmptyCollectionClearsAllNotes() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup(""a""); com.google.gerrit.common.data.GroupReference g2 = newGroup(""b""); org.eclipse.jgit.lib.PersonIdent ident = com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(); updateGroupNames(ident, g1, g2); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).containsExactly(""a"", ""a-1"", ""b"", ""b-2""); updateGroupNames(ident); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).isEmpty(); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(); assertThat(log).hasSize(2); assertThat(log.get(1)).message().isEqualTo(""Store 0 group names""); }",06a89957415425b93b81dbb9541206b012caf547,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupNameNotesTest.java,"@org.junit.Test public void emptyGroupName() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g = newGroup(""""); updateGroupNames(com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(), g); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).containsExactly("""", ""-1""); assertThat(readNameNote(g)).isEqualTo(""[group]\n\tuuid = -1\n\tname = \n""); }",efffb60f2fbba639c1bd2095ab803996e1b34240,"@org.junit.Test public void emptyGroupName() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g = newGroup(""""); updateGroupNames(com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(), g); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).containsExactly("""", ""-1""); assertThat(readNameNote(g)).isEqualTo(""[account]\n\tuuid = -1\n\tname = \n""); }",c589c21c043bd1ccf2e34dee9be382b6b67b592a,"@org.junit.Test public void emptyGroupName() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g = newGroup(""""); updateGroupNames(com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(), g); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).containsExactly("""", ""-1""); assertThat(readNameNote(g)).isEqualTo(""[group]\n\tuuid = -1\n\tname = \n""); }",efffb60f2fbba639c1bd2095ab803996e1b34240,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupNameNotesTest.java,"@org.junit.Test public void updateGroupNames() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup(""a""); com.google.gerrit.common.data.GroupReference g2 = newGroup(""b""); org.eclipse.jgit.lib.PersonIdent ident = com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(); updateGroupNames(ident, g1, g2); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(); assertThat(log).hasSize(1); assertThat(log.get(0)).parents().isEmpty(); assertThat(log.get(0)).message().isEqualTo(""Store 2 group names""); assertThat(log.get(0)).author().matches(ident); assertThat(log.get(0)).committer().matches(ident); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).containsExactly(""a"", ""a-1"", ""b"", ""b-2""); java.lang.String commit = log.get(0).commit; updateGroupNames(com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(), g1, g2); log = log(); assertThat(log).hasSize(1); assertThat(log.get(0)).commit().isEqualTo(commit); }",a410875c821035eab1b50138f1ad99d060971252,"@org.junit.Test public void updateGroupNames() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup(""a""); com.google.gerrit.common.data.GroupReference g2 = newGroup(""b""); org.eclipse.jgit.lib.PersonIdent ident = com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(); updateGroupNames(ident, g1, g2); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(); assertThat(log).hasSize(1); assertThat(log.get(0)).parents().isEmpty(); assertThat(log.get(0)).message().isEqualTo(""Store 2 account names""); assertThat(log.get(0)).author().matches(ident); assertThat(log.get(0)).committer().matches(ident); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).containsExactly(""a"", ""a-1"", ""b"", ""b-2""); java.lang.String commit = log.get(0).commit; updateGroupNames(com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(), g1, g2); log = log(); assertThat(log).hasSize(1); assertThat(log.get(0)).commit().isEqualTo(commit); }",53e94b023bef9f3911d38b26c6e7c92079b07040,"@org.junit.Test public void updateGroupNames() throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup(""a""); com.google.gerrit.common.data.GroupReference g2 = newGroup(""b""); org.eclipse.jgit.lib.PersonIdent ident = com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(); updateGroupNames(ident, g1, g2); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(); assertThat(log).hasSize(1); assertThat(log.get(0)).parents().isEmpty(); assertThat(log.get(0)).message().isEqualTo(""Store 2 group names""); assertThat(log.get(0)).author().matches(ident); assertThat(log.get(0)).committer().matches(ident); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).containsExactly(""a"", ""a-1"", ""b"", ""b-2""); java.lang.String commit = log.get(0).commit; updateGroupNames(com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(), g1, g2); log = log(); assertThat(log).hasSize(1); assertThat(log.get(0)).commit().isEqualTo(commit); }",a410875c821035eab1b50138f1ad99d060971252,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_MembersCollection.java,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.MemberResource>> views() { return views; },2fdb93ed23e16cb3eb9df041b63eced006630a6c,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.group.MemberResource>> views() { return views; },846338aa5012b24fe6f79c18572f9f214b3f1efb,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.MemberResource>> views() { return views; },2fdb93ed23e16cb3eb9df041b63eced006630a6c,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_MembersCollection.java,"@java.lang.Override public com.google.gerrit.server.group.AddMembers.PutMember create(com.google.gerrit.server.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.group.AddMembers.PutMember(put, id.get()); }",f26aee0cc864e7bcf38097418b21558e6e3291d5,"@java.lang.Override public com.google.gerrit.server.restapi.group.AddMembers.PutMember create(com.google.gerrit.server.restapi.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.restapi.group.AddMembers.PutMember(put, id.get()); }",777a310f07cab7083a4c5e6e5af077dec9167d24,"@java.lang.Override public com.google.gerrit.server.restapi.group.AddMembers.PutMember create(com.google.gerrit.server.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.restapi.group.AddMembers.PutMember(put, id.get()); }",a79fa2e618259a5366d399d6887969fefd29a137,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_MembersCollection.java,"@java.lang.Override public com.google.gerrit.server.group.MemberResource parse(com.google.gerrit.server.group.GroupResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal group = parent.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.server.IdentifiedUser user = accounts.parse(TopLevelResource.INSTANCE, id).getUser(); if ((parent.getControl().canSeeMember(user.getAccountId())) && (com.google.gerrit.server.group.MembersCollection.isMember(group, user))) { return new com.google.gerrit.server.group.MemberResource(parent, user); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",1727d7a9ffa1232ad3a91dce61858fe88357210e,"@java.lang.Override public com.google.gerrit.server.restapi.group.MemberResource parse(com.google.gerrit.server.restapi.group.GroupResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal group = parent.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.server.IdentifiedUser user = accounts.parse(TopLevelResource.INSTANCE, id).getUser(); if ((parent.getControl().canSeeMember(user.getAccountId())) && (com.google.gerrit.server.restapi.group.MembersCollection.isMember(group, user))) { return new com.google.gerrit.server.restapi.group.MemberResource(parent, user); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",24b1185a273c83278486a6b30b5d0649b7e14101,"@java.lang.Override public com.google.gerrit.server.group.MemberResource parse(com.google.gerrit.server.group.GroupResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal group = parent.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.server.IdentifiedUser user = accounts.parse(TopLevelResource.INSTANCE, id).getUser(); if ((parent.getControl().canSeeMember(user.getAccountId())) && (com.google.gerrit.server.restapi.group.MembersCollection.isMember(group, user))) { return new com.google.gerrit.server.group.MemberResource(parent, user); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",c4a59c71a516db56311b4f7ad9e668ee456b9986,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_MembersCollection.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource> list() throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { return list.get(); }",6284dd7a544e67f245933f1ddc2eb4da75b98f35,"@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.group.GroupResource> list() throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { return list.get(); }",39d0b925144c08e12e8baaba0e3421ba406c468e,"@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource> list() throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { return list.get(); }",6284dd7a544e67f245933f1ddc2eb4da75b98f35,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_Fixes.java,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.FixResource>> views() { return views; },9520fbd6628d87e666f35e18e657585fa23cb56c,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.change.FixResource>> views() { return views; },a2b87888b0ed543ff115f096eab2ab5759b872d9,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.FixResource>> views() { return views; },9520fbd6628d87e666f35e18e657585fa23cb56c,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_Fixes.java,"@java.lang.Override public com.google.gerrit.server.change.FixResource parse(com.google.gerrit.server.change.RevisionResource revisionResource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String fixId = id.get(); com.google.gerrit.server.notedb.ChangeNotes changeNotes = revisionResource.getNotes(); java.util.List<com.google.gerrit.reviewdb.client.RobotComment> robotComments = commentsUtil.robotCommentsByPatchSet(changeNotes, revisionResource.getPatchSet().getId()); for (com.google.gerrit.reviewdb.client.RobotComment robotComment : robotComments) { for (com.google.gerrit.reviewdb.client.FixSuggestion fixSuggestion : robotComment.fixSuggestions) { if (java.util.Objects.equals(fixId, fixSuggestion.fixId)) { return new com.google.gerrit.server.change.FixResource(revisionResource, fixSuggestion.replacements); } } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",8221c9c08a26524fbd194a4924362d5258b9cf05,"@java.lang.Override public com.google.gerrit.server.restapi.change.FixResource parse(com.google.gerrit.server.change.RevisionResource revisionResource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String fixId = id.get(); com.google.gerrit.server.notedb.ChangeNotes changeNotes = revisionResource.getNotes(); java.util.List<com.google.gerrit.reviewdb.client.RobotComment> robotComments = commentsUtil.robotCommentsByPatchSet(changeNotes, revisionResource.getPatchSet().getId()); for (com.google.gerrit.reviewdb.client.RobotComment robotComment : robotComments) { for (com.google.gerrit.reviewdb.client.FixSuggestion fixSuggestion : robotComment.fixSuggestions) { if (java.util.Objects.equals(fixId, fixSuggestion.fixId)) { return new com.google.gerrit.server.restapi.change.FixResource(revisionResource, fixSuggestion.replacements); } } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",ce40720bd51999c8cb9ef279ee31d12346b0676a,"@java.lang.Override public com.google.gerrit.server.change.FixResource parse(com.google.gerrit.server.change.RevisionResource revisionResource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String fixId = id.get(); com.google.gerrit.server.notedb.ChangeNotes changeNotes = revisionResource.getNotes(); java.util.List<com.google.gerrit.reviewdb.client.RobotComment> robotComments = commentsUtil.robotCommentsByPatchSet(changeNotes, revisionResource.getPatchSet().getId()); for (com.google.gerrit.reviewdb.client.RobotComment robotComment : robotComments) { for (com.google.gerrit.reviewdb.client.FixSuggestion fixSuggestion : robotComment.fixSuggestions) { if (java.util.Objects.equals(fixId, fixSuggestion.fixId)) { return new com.google.gerrit.server.change.FixResource(revisionResource, fixSuggestion.replacements); } } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",8221c9c08a26524fbd194a4924362d5258b9cf05,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_PutTopic.java,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource req, TopicInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { req.permissions().check(ChangePermission.EDIT_TOPIC_NAME); if (((input != null) && ((input.topic) != null)) && ((input.topic.length()) > (com.google.gerrit.server.ChangeUtil.TOPIC_MAX_LENGTH))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""topic length exceeds the limit (%s)"", ChangeUtil.TOPIC_MAX_LENGTH)); } com.google.gerrit.server.change.PutTopic.Op op = new com.google.gerrit.server.change.PutTopic.Op((input != null ? input : new TopicInput())); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), req.getChange().getProject(), req.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(req.getId(), op); u.execute(); } return com.google.common.base.Strings.isNullOrEmpty(op.newTopicName) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(op.newTopicName); }",31cd9170526619f19d8b91e5d6395f138a64b9ff,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.change.ChangeResource req, TopicInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { req.permissions().check(ChangePermission.EDIT_TOPIC_NAME); if (((input != null) && ((input.topic) != null)) && ((input.topic.length()) > (com.google.gerrit.server.ChangeUtil.TOPIC_MAX_LENGTH))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""topic length exceeds the limit (%s)"", ChangeUtil.TOPIC_MAX_LENGTH)); } com.google.gerrit.server.restapi.change.PutTopic.Op op = new com.google.gerrit.server.restapi.change.PutTopic.Op((input != null ? input : new TopicInput())); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), req.getChange().getProject(), req.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(req.getId(), op); u.execute(); } return com.google.common.base.Strings.isNullOrEmpty(op.newTopicName) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(op.newTopicName); }",9594f9353911817ff273c675e40dd8c692dba302,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource req, TopicInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { req.permissions().check(ChangePermission.EDIT_TOPIC_NAME); if (((input != null) && ((input.topic) != null)) && ((input.topic.length()) > (com.google.gerrit.server.ChangeUtil.TOPIC_MAX_LENGTH))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""topic length exceeds the limit (%s)"", ChangeUtil.TOPIC_MAX_LENGTH)); } com.google.gerrit.server.restapi.change.PutTopic.Op op = new com.google.gerrit.server.restapi.change.PutTopic.Op((input != null ? input : new TopicInput())); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), req.getChange().getProject(), req.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(req.getId(), op); u.execute(); } return com.google.common.base.Strings.isNullOrEmpty(op.newTopicName) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(op.newTopicName); }",ed8c1a41d9f4f576ce81378e1b3b8b6aebbe3683,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_query_change_AbstractQueryChangesTest.java,"@org.junit.Test public void byLabelGroup() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount(""user1""); createAccount(""user2""); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject(""repo""); java.lang.String g1 = createGroup(""group1"", ""Administrators""); java.lang.String g2 = createGroup(""group2"", ""Administrators""); gApi.groups().id(g1).addMembers(""user1""); gApi.groups().id(g2).addMembers(""user2""); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo), user1); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change1.getId().get()).current().review(new com.google.gerrit.extensions.api.changes.ReviewInput().label(""Code-Review"", 1)); requestContext.setContext(newRequestContext(userId)); assertQuery(""label:Code-Review=+1,group1"", change1); assertQuery(""label:Code-Review=+1,group=group1"", change1); assertQuery(""label:Code-Review=+1,user=user1"", change1); assertQuery(""label:Code-Review=+1,user=user2""); assertQuery(""label:Code-Review=+1,group=group2""); }",4abc3af98afe3b9f4af472c5ff309531a338d7e8,"@org.junit.Test public void byLabelGroup() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount(""user1""); createAccount(""user2""); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject(""repo""); java.lang.String g1 = createGroup(""group1"", ""Administrators""); java.lang.String g2 = createGroup(""group2"", ""Administrators""); gApi.groups().id(g1).addMembers(""user1""); gApi.groups().id(g2).addMembers(""user2""); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo), user1); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change1.getId().get()).current().review(new com.google.gerrit.extensions.api.changes.ReviewInput().label(""Code-Review"", 1)); requestContext.setContext(newRequestContext(userId)); assertQuery(""label:Code-Review=+1,group1"", change1); assertQuery(""label:Code-Review=+1,account=group1"", change1); assertQuery(""label:Code-Review=+1,user=user1"", change1); assertQuery(""label:Code-Review=+1,user=user2""); assertQuery(""label:Code-Review=+1,account=group2""); }",860b44fb6db76eaf58f9784eb71dbdd63edda680,"@org.junit.Test public void byLabelGroup() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount(""user1""); createAccount(""user2""); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject(""repo""); java.lang.String g1 = createGroup(""group1"", ""Administrators""); java.lang.String g2 = createGroup(""group2"", ""Administrators""); gApi.groups().id(g1).addMembers(""user1""); gApi.groups().id(g2).addMembers(""user2""); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo), user1); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change1.getId().get()).current().review(new com.google.gerrit.extensions.api.changes.ReviewInput().label(""Code-Review"", 1)); requestContext.setContext(newRequestContext(userId)); assertQuery(""label:Code-Review=+1,group1"", change1); assertQuery(""label:Code-Review=+1,group=group1"", change1); assertQuery(""label:Code-Review=+1,user=user1"", change1); assertQuery(""label:Code-Review=+1,user=user2""); assertQuery(""label:Code-Review=+1,group=group2""); }",4abc3af98afe3b9f4af472c5ff309531a338d7e8,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_query_change_AbstractQueryChangesTest.java,"@org.junit.Test public void submitRecords() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount(""user1""); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject(""repo""); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); gApi.changes().id(change1.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change2.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user.getAccountId())); assertQuery(""is:submittable"", change1); assertQuery(""-is:submittable"", change2); assertQuery(""submittable:ok"", change1); assertQuery(""submittable:not_ready"", change2); assertQuery(""label:CodE-RevieW=ok"", change1); assertQuery(""label:CodE-RevieW=ok,user=user"", change1); assertQuery(""label:CodE-RevieW=ok,Administrators"", change1); assertQuery(""label:CodE-RevieW=ok,group=Administrators"", change1); assertQuery(""label:CodE-RevieW=ok,owner"", change1); assertQuery(""label:CodE-RevieW=ok,user1""); assertQuery(""label:CodE-RevieW=need"", change2); assertQuery(""label:CodE-RevieW=need,user1""); assertQuery(""label:CodE-RevieW=need,user""); }",cfbc0891d8b3cd78f6a5fbf458885ec2904540b7,"@org.junit.Test public void submitRecords() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount(""user1""); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject(""repo""); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); gApi.changes().id(change1.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change2.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user.getAccountId())); assertQuery(""is:submittable"", change1); assertQuery(""-is:submittable"", change2); assertQuery(""submittable:ok"", change1); assertQuery(""submittable:not_ready"", change2); assertQuery(""label:CodE-RevieW=ok"", change1); assertQuery(""label:CodE-RevieW=ok,user=user"", change1); assertQuery(""label:CodE-RevieW=ok,Administrators"", change1); assertQuery(""label:CodE-RevieW=ok,account=Administrators"", change1); assertQuery(""label:CodE-RevieW=ok,owner"", change1); assertQuery(""label:CodE-RevieW=ok,user1""); assertQuery(""label:CodE-RevieW=need"", change2); assertQuery(""label:CodE-RevieW=need,user1""); assertQuery(""label:CodE-RevieW=need,user""); }",b9a8e928df08b6b1da92772e2e398f4550748eed,"@org.junit.Test public void submitRecords() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount(""user1""); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject(""repo""); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); gApi.changes().id(change1.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change2.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user.getAccountId())); assertQuery(""is:submittable"", change1); assertQuery(""-is:submittable"", change2); assertQuery(""submittable:ok"", change1); assertQuery(""submittable:not_ready"", change2); assertQuery(""label:CodE-RevieW=ok"", change1); assertQuery(""label:CodE-RevieW=ok,user=user"", change1); assertQuery(""label:CodE-RevieW=ok,Administrators"", change1); assertQuery(""label:CodE-RevieW=ok,group=Administrators"", change1); assertQuery(""label:CodE-RevieW=ok,owner"", change1); assertQuery(""label:CodE-RevieW=ok,user1""); assertQuery(""label:CodE-RevieW=need"", change2); assertQuery(""label:CodE-RevieW=need,user1""); assertQuery(""label:CodE-RevieW=need,user""); }",cfbc0891d8b3cd78f6a5fbf458885ec2904540b7,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_GetCommit.java,@java.lang.Override public com.google.gerrit.extensions.common.CommitInfo apply(com.google.gerrit.server.project.CommitResource rsrc) throws java.io.IOException { return com.google.gerrit.server.git.CommitUtil.toCommitInfo(rsrc.getCommit()); },930c4c5bb60217a7895171b451340f20d5717630,@java.lang.Override public com.google.gerrit.extensions.common.CommitInfo apply(com.google.gerrit.server.restapi.project.CommitResource rsrc) throws java.io.IOException { return com.google.gerrit.server.git.CommitUtil.toCommitInfo(rsrc.getCommit()); },f268f79ff694baf47b7fac109aeca231ff5ea9a9,@java.lang.Override public com.google.gerrit.extensions.common.CommitInfo apply(com.google.gerrit.server.project.CommitResource rsrc) throws java.io.IOException { return com.google.gerrit.server.git.CommitUtil.toCommitInfo(rsrc.getCommit()); },930c4c5bb60217a7895171b451340f20d5717630,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_TagsCollection.java,"@java.lang.Override public com.google.gerrit.server.project.CreateTag create(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString name) { return createTagFactory.create(name.get()); }",afda3561f7851ea8df323bb696337bbda606bd44,"@java.lang.Override public com.google.gerrit.server.restapi.project.CreateTag create(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString name) { return createTagFactory.create(name.get()); }",3e579e7dd55203428f6d5515238750b555504117,"@java.lang.Override public com.google.gerrit.server.restapi.project.CreateTag create(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString name) { return createTagFactory.create(name.get()); }",27368dcf356f2bf258c56c8677c6cc9cb7315536,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_PutGroup.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.api.groups.GroupInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""Group already exists""); }",aa9200b00d50dd818a12c57332a095cf42c807d3,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.extensions.api.groups.GroupInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""Group already exists""); }",8386a341012e6d96f0b67a8d4f85c9a6fe25e1d7,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.api.groups.GroupInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""Group already exists""); }",aa9200b00d50dd818a12c57332a095cf42c807d3,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_index_IndexUtils.java,"public static java.lang.String describe(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { return user.getAccountId().toString(); } if (user instanceof com.google.gerrit.server.query.change.SingleGroupUser) { return ""group:"" + (user.getEffectiveGroups().getKnownGroups().iterator().next().toString()); } return user.toString(); }",c2cd0d583b4d35799fd12545a7476223e62ac9e6,"public static java.lang.String describe(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { return user.getAccountId().toString(); } if (user instanceof com.google.gerrit.server.query.change.SingleGroupUser) { return ""account:"" + (user.getEffectiveGroups().getKnownGroups().iterator().next().toString()); } return user.toString(); }",d714f62c7d1c6f0e0e7342c76d258d9ac5223eec,"public static java.lang.String describe(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { return user.getAccountId().toString(); } if (user instanceof com.google.gerrit.server.query.change.SingleGroupUser) { return ""group:"" + (user.getEffectiveGroups().getKnownGroups().iterator().next().toString()); } return user.toString(); }",c2cd0d583b4d35799fd12545a7476223e62ac9e6,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_GetMember.java,@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.group.MemberResource rsrc) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.account.AccountLoader loader = infoFactory.create(true); com.google.gerrit.extensions.common.AccountInfo info = loader.get(rsrc.getMember().getAccountId()); loader.fill(); return info; },f17db268bab2a16a65f0b25fbe609b8e3894505f,@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.restapi.group.MemberResource rsrc) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.account.AccountLoader loader = infoFactory.create(true); com.google.gerrit.extensions.common.AccountInfo info = loader.get(rsrc.getMember().getAccountId()); loader.fill(); return info; },1617bc12a5b4d1f48d74594ca0b1ecf0828a038d,@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.group.MemberResource rsrc) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.account.AccountLoader loader = infoFactory.create(true); com.google.gerrit.extensions.common.AccountInfo info = loader.get(rsrc.getMember().getAccountId()); loader.fill(); return info; },f17db268bab2a16a65f0b25fbe609b8e3894505f,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_DbGroupMemberAuditListener.java,"private java.lang.String getGroupName(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { return groupCache.get(groupId).map(InternalGroup::getName).orElse((""Deleted group "" + groupId)); }",a99b2f15fd41c66e419e7f5b7280ad2505ae122e,"private java.lang.String getGroupName(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { return groupCache.get(groupId).map(InternalGroup::getName).orElse((""Deleted account "" + groupId)); }",a6b3332ce3d82704968ed924e8df63600c919dca,"private java.lang.String getGroupName(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { return groupCache.get(groupId).map(InternalGroup::getName).orElse((""Deleted group "" + groupId)); }",a99b2f15fd41c66e419e7f5b7280ad2505ae122e,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_DbGroupMemberAuditListener.java,"private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> values, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById m : values) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = m.getIncludeUUID(); java.lang.String groupName = groupBackend.get(groupUuid).getName(); com.google.gerrit.reviewdb.client.AccountGroup.Id targetGroupId = m.getGroupId(); java.lang.String targetGroupName = getGroupName(targetGroupId); descriptions.add(java.text.MessageFormat.format(""group {0}/{1}, group {2}/{3}"", groupUuid, groupName, targetGroupId, targetGroupName)); } logOrmException(header, me, descriptions, e); }",e9df4245dc043ab28915a01dfdf24c44ba5182f3,"private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> values, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById m : values) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = m.getIncludeUUID(); java.lang.String groupName = groupBackend.get(groupUuid).getName(); com.google.gerrit.reviewdb.client.AccountGroup.Id targetGroupId = m.getGroupId(); java.lang.String targetGroupName = getGroupName(targetGroupId); descriptions.add(java.text.MessageFormat.format(""account {0}/{1}, account {2}/{3}"", groupUuid, groupName, targetGroupId, targetGroupName)); } logOrmException(header, me, descriptions, e); }",9ccc464b10da6c3d7aaf52457aab7ca971f3cffc,"private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> values, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById m : values) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = m.getIncludeUUID(); java.lang.String groupName = groupBackend.get(groupUuid).getName(); com.google.gerrit.reviewdb.client.AccountGroup.Id targetGroupId = m.getGroupId(); java.lang.String targetGroupName = getGroupName(targetGroupId); descriptions.add(java.text.MessageFormat.format(""group {0}/{1}, group {2}/{3}"", groupUuid, groupName, targetGroupId, targetGroupName)); } logOrmException(header, me, descriptions, e); }",e9df4245dc043ab28915a01dfdf24c44ba5182f3,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_DbGroupMemberAuditListener.java,"@java.lang.Override public void onDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed, java.sql.Timestamp removedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupMember m : removed) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupMemberAudit a : db.accountGroupMembersAudit().byGroupAccount(m.getAccountGroupId(), m.getAccountId())) { if (a.isActive()) { audit = a; break; } } if (audit != null) { audit.removed(me, removedOn); auditUpdates.add(audit); } else { audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, removedOn); audit.removedLegacy(); auditInserts.add(audit); } } db.accountGroupMembersAudit().update(auditUpdates); db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts(""Cannot log delete accounts from group event performed by user"", me, removed, e); } }",d119ea158b67c34ae2604a8c4c3a442e06349138,"@java.lang.Override public void onDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed, java.sql.Timestamp removedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupMember m : removed) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupMemberAudit a : db.accountGroupMembersAudit().byGroupAccount(m.getAccountGroupId(), m.getAccountId())) { if (a.isActive()) { audit = a; break; } } if (audit != null) { audit.removed(me, removedOn); auditUpdates.add(audit); } else { audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, removedOn); audit.removedLegacy(); auditInserts.add(audit); } } db.accountGroupMembersAudit().update(auditUpdates); db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts(""Cannot log delete accounts from account event performed by user"", me, removed, e); } }",711035ee9bfd64b7774a900c50c34cfd9f28312b,"@java.lang.Override public void onDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed, java.sql.Timestamp removedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupMember m : removed) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupMemberAudit a : db.accountGroupMembersAudit().byGroupAccount(m.getAccountGroupId(), m.getAccountId())) { if (a.isActive()) { audit = a; break; } } if (audit != null) { audit.removed(me, removedOn); auditUpdates.add(audit); } else { audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, removedOn); audit.removedLegacy(); auditInserts.add(audit); } } db.accountGroupMembersAudit().update(auditUpdates); db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts(""Cannot log delete accounts from group event performed by user"", me, removed, e); } }",d119ea158b67c34ae2604a8c4c3a442e06349138,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_DbGroupMemberAuditListener.java,"@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, addedOn); auditInserts.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts(""Cannot log add accounts to group event performed by user"", me, added, e); } }",eae2ca4d0fbc9bcf9f00b06713225c4b21847f39,"@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, addedOn); auditInserts.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts(""Cannot log add accounts to account event performed by user"", me, added, e); } }",e9d90e309ceedbc1b15d4a8814b77d02a50de6ed,"@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, addedOn); auditInserts.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts(""Cannot log add accounts to group event performed by user"", me, added, e); } }",eae2ca4d0fbc9bcf9f00b06713225c4b21847f39,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_DbGroupMemberAuditListener.java,"@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { final java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupById g : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(g.getGroupId(), g.getIncludeUUID())) { if (a.isActive()) { audit = a; break; } } if (audit != null) { audit.removed(me, removedOn); auditUpdates.add(audit); } } db.accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups(""Cannot log delete groups from group event performed by user"", me, removed, e); } }",50e5ca9ef9ec4f544ce88c09496c7cc45d7ba96f,"@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { final java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupById g : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(g.getGroupId(), g.getIncludeUUID())) { if (a.isActive()) { audit = a; break; } } if (audit != null) { audit.removed(me, removedOn); auditUpdates.add(audit); } } db.accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups(""Cannot log delete groups from account event performed by user"", me, removed, e); } }",ab36f2576d5a74c7173e8887b4631c1d5d0668b1,"@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { final java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupById g : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(g.getGroupId(), g.getIncludeUUID())) { if (a.isActive()) { audit = a; break; } } if (audit != null) { audit.removed(me, removedOn); auditUpdates.add(audit); } } db.accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups(""Cannot log delete groups from group event performed by user"", me, removed, e); } }",50e5ca9ef9ec4f544ce88c09496c7cc45d7ba96f,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_PutTopic.java,"@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Edit Topic"").setVisible(rsrc.permissions().testCond(ChangePermission.EDIT_TOPIC_NAME)); }",fe9ce784ced2e002b0d153580e7769665f4abcd2,"@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.restapi.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Edit Topic"").setVisible(rsrc.permissions().testCond(ChangePermission.EDIT_TOPIC_NAME)); }",58f950c27d1b8d92bd69764561cf8f7fa4437cf7,"@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Edit Topic"").setVisible(rsrc.permissions().testCond(ChangePermission.EDIT_TOPIC_NAME)); }",fe9ce784ced2e002b0d153580e7769665f4abcd2,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_DbGroupMemberAuditListener.java,"@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> includesAudit = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById groupInclude : added) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(groupInclude, me, addedOn); includesAudit.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups(""Cannot log add groups to group event performed by user"", me, added, e); } }",e290fe07cf24e9c678f00489ca220d47d7c69dea,"@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> includesAudit = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById groupInclude : added) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(groupInclude, me, addedOn); includesAudit.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups(""Cannot log add groups to account event performed by user"", me, added, e); } }",d249c890013d60bb03d9a5ff666c1a28a9215e4c,"@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> includesAudit = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById groupInclude : added) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(groupInclude, me, addedOn); includesAudit.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups(""Cannot log add groups to group event performed by user"", me, added, e); } }",e290fe07cf24e9c678f00489ca220d47d7c69dea,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_db_GroupsNoteDbConsistencyChecker.java,"public static void logFailToLoadFromGroupRefAsWarning(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblem(warning(""Group with UUID %s from group name notes failed to load from group ref"", uuid)); }",5d01ec61b2ae029a6cf1f58dc44f8fbbaffcd75d,"public static void logFailToLoadFromGroupRefAsWarning(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblem(warning(""Group with UUID %s from account name notes failed to load from account ref"", uuid)); }",4684b8ba70a4af9882e8372cba2d354d48319289,"public static void logFailToLoadFromGroupRefAsWarning(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblem(warning(""Group with UUID %s from group name notes failed to load from group ref"", uuid)); }",5d01ec61b2ae029a6cf1f58dc44f8fbbaffcd75d,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_db_GroupsNoteDbConsistencyChecker.java,"@com.google.common.annotations.VisibleForTesting static java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkWithGroupNameNotes(org.eclipse.jgit.lib.Repository allUsersRepo, java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws java.io.IOException { try { java.util.Optional<com.google.gerrit.common.data.GroupReference> groupRef = com.google.gerrit.server.group.db.GroupNameNotes.loadOneGroupReference(allUsersRepo, groupName); if (!(groupRef.isPresent())) { return com.google.common.collect.ImmutableList.of(warning(""Group with name '%s' doesn't exist in the list of all names"", groupName)); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = groupRef.get().getUUID(); java.lang.String name = groupRef.get().getName(); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = new java.util.ArrayList<>(); if (!(java.util.Objects.equals(groupUUID, uuid))) { problems.add(warning(""group with name '%s' has UUID '%s' in 'group.config' but '%s' in group name notes"", groupName, groupUUID, uuid)); } if (!(java.util.Objects.equals(groupName, name))) { problems.add(warning(""group note of name '%s' claims to represent name of '%s'"", groupName, name)); } return problems; } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { return com.google.common.collect.ImmutableList.of(warning(""fail to check consistency with group name notes: %s"", e.getMessage())); } }",94185b2eae6f64127fb3b61296a816fd054352f0,"@com.google.common.annotations.VisibleForTesting static java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkWithGroupNameNotes(org.eclipse.jgit.lib.Repository allUsersRepo, java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws java.io.IOException { try { java.util.Optional<com.google.gerrit.common.data.GroupReference> groupRef = com.google.gerrit.server.group.db.GroupNameNotes.loadOneGroupReference(allUsersRepo, groupName); if (!(groupRef.isPresent())) { return com.google.common.collect.ImmutableList.of(warning(""Group with name '%s' doesn't exist in the list of all names"", groupName)); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = groupRef.get().getUUID(); java.lang.String name = groupRef.get().getName(); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = new java.util.ArrayList<>(); if (!(java.util.Objects.equals(groupUUID, uuid))) { problems.add(warning(""account with name '%s' has UUID '%s' in 'account.config' but '%s' in account name notes"", groupName, groupUUID, uuid)); } if (!(java.util.Objects.equals(groupName, name))) { problems.add(warning(""account note of name '%s' claims to represent name of '%s'"", groupName, name)); } return problems; } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { return com.google.common.collect.ImmutableList.of(warning(""fail to check consistency with account name notes: %s"", e.getMessage())); } }",628c8f974c57b8fdbcbefcb84278586b61fe1b72,"@com.google.common.annotations.VisibleForTesting static java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkWithGroupNameNotes(org.eclipse.jgit.lib.Repository allUsersRepo, java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throws java.io.IOException { try { java.util.Optional<com.google.gerrit.common.data.GroupReference> groupRef = com.google.gerrit.server.group.db.GroupNameNotes.loadOneGroupReference(allUsersRepo, groupName); if (!(groupRef.isPresent())) { return com.google.common.collect.ImmutableList.of(warning(""Group with name '%s' doesn't exist in the list of all names"", groupName)); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = groupRef.get().getUUID(); java.lang.String name = groupRef.get().getName(); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = new java.util.ArrayList<>(); if (!(java.util.Objects.equals(groupUUID, uuid))) { problems.add(warning(""group with name '%s' has UUID '%s' in 'group.config' but '%s' in group name notes"", groupName, groupUUID, uuid)); } if (!(java.util.Objects.equals(groupName, name))) { problems.add(warning(""group note of name '%s' claims to represent name of '%s'"", groupName, name)); } return problems; } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { return com.google.common.collect.ImmutableList.of(warning(""fail to check consistency with group name notes: %s"", e.getMessage())); } }",94185b2eae6f64127fb3b61296a816fd054352f0,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_db_GroupsNoteDbConsistencyChecker.java,"private void readGroups(org.eclipse.jgit.lib.Repository repo, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs, com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result result) throws java.io.IOException { for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> entry : refs.entrySet()) { if (!(entry.getKey().startsWith(RefNames.REFS_GROUPS))) { continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = AccountGroup.UUID.fromRef(entry.getKey()); if (uuid == null) { result.problems.add(error(""null UUID from %s"", entry.getKey())); continue; } try { com.google.gerrit.server.group.db.GroupConfig cfg = com.google.gerrit.server.group.db.GroupConfig.loadForGroupSnapshot(repo, uuid, entry.getValue().getObjectId()); result.uuidToGroupMap.put(uuid, cfg.getLoadedGroup().get()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { result.problems.add(error(""group %s does not parse: %s"", uuid, e.getMessage())); } } }",fa655fab8a24d853d34cdfce9443f7300d230c2b,"private void readGroups(org.eclipse.jgit.lib.Repository repo, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs, com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result result) throws java.io.IOException { for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> entry : refs.entrySet()) { if (!(entry.getKey().startsWith(RefNames.REFS_GROUPS))) { continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = AccountGroup.UUID.fromRef(entry.getKey()); if (uuid == null) { result.problems.add(error(""null UUID from %s"", entry.getKey())); continue; } try { com.google.gerrit.server.group.db.GroupConfig cfg = com.google.gerrit.server.group.db.GroupConfig.loadForGroupSnapshot(repo, uuid, entry.getValue().getObjectId()); result.uuidToGroupMap.put(uuid, cfg.getLoadedGroup().get()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { result.problems.add(error(""account %s does not parse: %s"", uuid, e.getMessage())); } } }",791c200a619fbb0cf0e18274fbbf92563a4da41d,"private void readGroups(org.eclipse.jgit.lib.Repository repo, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs, com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result result) throws java.io.IOException { for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> entry : refs.entrySet()) { if (!(entry.getKey().startsWith(RefNames.REFS_GROUPS))) { continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = AccountGroup.UUID.fromRef(entry.getKey()); if (uuid == null) { result.problems.add(error(""null UUID from %s"", entry.getKey())); continue; } try { com.google.gerrit.server.group.db.GroupConfig cfg = com.google.gerrit.server.group.db.GroupConfig.loadForGroupSnapshot(repo, uuid, entry.getValue().getObjectId()); result.uuidToGroupMap.put(uuid, cfg.getLoadedGroup().get()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { result.problems.add(error(""group %s does not parse: %s"", uuid, e.getMessage())); } } }",fa655fab8a24d853d34cdfce9443f7300d230c2b,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_SetParent.java,"@java.lang.Override public java.lang.String apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ParentInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return apply(rsrc, input, true); }",e43eb179268a34547058341b472892a1778ea8c8,"@java.lang.Override public java.lang.String apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ParentInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return apply(rsrc, input, true); }",437e660c8114148876eb6dbd86acf21d13356eab,"@java.lang.Override public java.lang.String apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ParentInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return apply(rsrc, input, true); }",e43eb179268a34547058341b472892a1778ea8c8,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_SetParent.java,"public void validateParentUpdate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.IdentifiedUser user, java.lang.String newParent, boolean checkIfAdmin) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException { if (checkIfAdmin) { permissionBackend.user(user).check(GlobalPermission.ADMINISTRATE_SERVER); } if ((project.equals(allUsers)) && (!(allProjects.get().equals(newParent)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""%s must inherit from %s"", allUsers.get(), allProjects.get())); } if (project.equals(allProjects)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""cannot set parent of "" + (allProjects.get()))); } newParent = com.google.common.base.Strings.emptyToNull(newParent); if (newParent != null) { com.google.gerrit.server.project.ProjectState parent = cache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(newParent)); if (parent == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(((""parent project "" + newParent) + "" not found"")); } if (parent.getName().equals(project.get())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""cannot set parent to self""); } if (com.google.common.collect.Iterables.tryFind(parent.tree(), ( p) -> { return p.getNameKey().equals(project); }).isPresent()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((((""cycle exists between "" + (project.get())) + "" and "") + (parent.getName()))); } } }",8b70c9b4d7cba385f50f89ce5685266c67d8ea48,"public void validateParentUpdate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.IdentifiedUser user, java.lang.String newParent, boolean checkIfAdmin) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException { if (checkIfAdmin) { permissionBackend.user(user).check(GlobalPermission.ADMINISTRATE_SERVER); } if ((project.equals(allUsers)) && (!(allProjects.get().equals(newParent)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""%s must inherit from %s"", allUsers.get(), allProjects.get())); } if (project.equals(allProjects)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""cannot set parent of "" + (allProjects.get()))); } newParent = com.google.common.base.Strings.emptyToNull(newParent); if (newParent != null) { com.google.gerrit.server.restapi.project.ProjectState parent = cache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(newParent)); if (parent == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(((""parent project "" + newParent) + "" not found"")); } if (parent.getName().equals(project.get())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""cannot set parent to self""); } if (com.google.common.collect.Iterables.tryFind(parent.tree(), ( p) -> { return p.getNameKey().equals(project); }).isPresent()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((((""cycle exists between "" + (project.get())) + "" and "") + (parent.getName()))); } } }",30aa535c6f8ee76dd70490a101b91d37362c0970,"public void validateParentUpdate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.IdentifiedUser user, java.lang.String newParent, boolean checkIfAdmin) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException { if (checkIfAdmin) { permissionBackend.user(user).check(GlobalPermission.ADMINISTRATE_SERVER); } if ((project.equals(allUsers)) && (!(allProjects.get().equals(newParent)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""%s must inherit from %s"", allUsers.get(), allProjects.get())); } if (project.equals(allProjects)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""cannot set parent of "" + (allProjects.get()))); } newParent = com.google.common.base.Strings.emptyToNull(newParent); if (newParent != null) { com.google.gerrit.server.project.ProjectState parent = cache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(newParent)); if (parent == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(((""parent project "" + newParent) + "" not found"")); } if (parent.getName().equals(project.get())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""cannot set parent to self""); } if (com.google.common.collect.Iterables.tryFind(parent.tree(), ( p) -> { return p.getNameKey().equals(project); }).isPresent()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((((""cycle exists between "" + (project.get())) + "" and "") + (parent.getName()))); } } }",8b70c9b4d7cba385f50f89ce5685266c67d8ea48,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_TagsCollection.java,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.TagResource>> views() { return views; },5fc99876f155133ee36ee50adbf489cef937d96a,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.TagResource>> views() { return views; },f60f7c9d28805c412693705b7ae95bca5ae10e6f,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.TagResource>> views() { return views; },5fc99876f155133ee36ee50adbf489cef937d96a,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_TagsCollection.java,"@java.lang.Override public com.google.gerrit.server.project.TagResource parse(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return new com.google.gerrit.server.project.TagResource(rsrc.getProjectState(), rsrc.getUser(), list.get().get(rsrc, id)); }",86249975ebe8dbd5094544dc6c4610b09e16c544,"@java.lang.Override public com.google.gerrit.server.restapi.project.TagResource parse(com.google.gerrit.server.restapi.project.ProjectResource rsrc, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return new com.google.gerrit.server.restapi.project.TagResource(rsrc.getProjectState(), rsrc.getUser(), list.get().get(rsrc, id)); }",0d5fd3fdc8f31f8c419a98abbbba0cc17a91ee53,"@java.lang.Override public com.google.gerrit.server.project.TagResource parse(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return new com.google.gerrit.server.project.TagResource(rsrc.getProjectState(), rsrc.getUser(), list.get().get(rsrc, id)); }",86249975ebe8dbd5094544dc6c4610b09e16c544,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_account_GetAgreements.java,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AgreementInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""contributor agreements disabled""); } if (!(self.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to get contributor agreements""); } com.google.gerrit.server.IdentifiedUser user = self.get().asIdentifiedUser(); if (user != (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to get contributor agreements""); } java.util.List<com.google.gerrit.extensions.common.AgreementInfo> results = new java.util.ArrayList<>(); java.util.Collection<com.google.gerrit.common.data.ContributorAgreement> cas = projectCache.getAllProjects().getConfig().getContributorAgreements(); for (com.google.gerrit.common.data.ContributorAgreement ca : cas) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupIds = new java.util.ArrayList<>(); for (com.google.gerrit.common.data.PermissionRule rule : ca.getAccepted()) { if (((rule.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) && ((rule.getGroup()) != null)) { if ((rule.getGroup().getUUID()) != null) { groupIds.add(rule.getGroup().getUUID()); } else { com.google.gerrit.server.account.GetAgreements.log.warn((((((""group \"""" + (rule.getGroup().getName())) + ""\"" does not "") + ""exist, referenced in CLA \"""") + (ca.getName())) + ""\"""")); } } } if (user.getEffectiveGroups().containsAnyOf(groupIds)) { results.add(agreementJson.format(ca)); } } return results; }",0ab063e6a45c21ba64d60153a416db9f25f61ac0,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AgreementInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""contributor agreements disabled""); } if (!(self.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to get contributor agreements""); } com.google.gerrit.server.IdentifiedUser user = self.get().asIdentifiedUser(); if (user != (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to get contributor agreements""); } java.util.List<com.google.gerrit.extensions.common.AgreementInfo> results = new java.util.ArrayList<>(); java.util.Collection<com.google.gerrit.common.data.ContributorAgreement> cas = projectCache.getAllProjects().getConfig().getContributorAgreements(); for (com.google.gerrit.common.data.ContributorAgreement ca : cas) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupIds = new java.util.ArrayList<>(); for (com.google.gerrit.common.data.PermissionRule rule : ca.getAccepted()) { if (((rule.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) && ((rule.getGroup()) != null)) { if ((rule.getGroup().getUUID()) != null) { groupIds.add(rule.getGroup().getUUID()); } else { com.google.gerrit.server.restapi.account.GetAgreements.log.warn((((((""account \"""" + (rule.getGroup().getName())) + ""\"" does not "") + ""exist, referenced in CLA \"""") + (ca.getName())) + ""\"""")); } } } if (user.getEffectiveGroups().containsAnyOf(groupIds)) { results.add(agreementJson.format(ca)); } } return results; }",94c080995cee3e9311f9995f06a970793832aa64,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AgreementInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""contributor agreements disabled""); } if (!(self.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to get contributor agreements""); } com.google.gerrit.server.IdentifiedUser user = self.get().asIdentifiedUser(); if (user != (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to get contributor agreements""); } java.util.List<com.google.gerrit.extensions.common.AgreementInfo> results = new java.util.ArrayList<>(); java.util.Collection<com.google.gerrit.common.data.ContributorAgreement> cas = projectCache.getAllProjects().getConfig().getContributorAgreements(); for (com.google.gerrit.common.data.ContributorAgreement ca : cas) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupIds = new java.util.ArrayList<>(); for (com.google.gerrit.common.data.PermissionRule rule : ca.getAccepted()) { if (((rule.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) && ((rule.getGroup()) != null)) { if ((rule.getGroup().getUUID()) != null) { groupIds.add(rule.getGroup().getUUID()); } else { com.google.gerrit.server.restapi.account.GetAgreements.log.warn((((((""group \"""" + (rule.getGroup().getName())) + ""\"" does not "") + ""exist, referenced in CLA \"""") + (ca.getName())) + ""\"""")); } } } if (user.getEffectiveGroups().containsAnyOf(groupIds)) { results.add(agreementJson.format(ca)); } } return results; }",8f3ef5978d8ac76e3a8a20c476eed283fd466142,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_DbGroupMemberAuditListener.java,"private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId(); java.lang.String userName = accountCache.get(accountId).getUserName(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId(); java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format(""account {0}/{1}, group {2}/{3}"", accountId, userName, groupId, groupName)); } logOrmException(header, me, descriptions, e); }",80fccd5352f592f0a6c3859fd53930c265499d53,"private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId(); java.lang.String userName = accountCache.get(accountId).getUserName(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId(); java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format(""account {0}/{1}, account {2}/{3}"", accountId, userName, groupId, groupName)); } logOrmException(header, me, descriptions, e); }",3e3373609473e416cb7187999cbf398f4e0f5808,"private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId(); java.lang.String userName = accountCache.get(accountId).getUserName(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId(); java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format(""account {0}/{1}, group {2}/{3}"", accountId, userName, groupId, groupName)); } logOrmException(header, me, descriptions, e); }",80fccd5352f592f0a6c3859fd53930c265499d53,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_access_Module.java,"@java.lang.Override protected void configure() { bind(com.google.gerrit.server.access.AccessCollection.class); com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.server.access.AccessResource.ACCESS_KIND); }",f8c8945c581f49ca49d11c1932f8e5d9b6c68cda,"@java.lang.Override protected void configure() { bind(com.google.gerrit.server.restapi.access.AccessCollection.class); com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.server.restapi.access.AccessResource.ACCESS_KIND); }",71a7b2dface63d8396951b8405e038a0a0be1c35,"@java.lang.Override protected void configure() { bind(com.google.gerrit.server.restapi.access.AccessCollection.class); com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.server.restapi.access.ACCESS_KIND); }",d2fe85df6598e6bf3a702ed8f706869089bb5abd,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"private void testCannotCreateGroupBranch(java.lang.String refPattern, java.lang.String groupRef) throws java.lang.Exception { grant(allUsers, refPattern, Permission.CREATE); grant(allUsers, refPattern, Permission.PUSH); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo).to(groupRef); r.assertErrorStatus(); assertThat(r.getMessage()).contains(""Not allowed to create group branch.""); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(repo.exactRef(groupRef)).isNull(); } }",907caa6407ebe14f3b59496808785eb8fae5eda1,"private void testCannotCreateGroupBranch(java.lang.String refPattern, java.lang.String groupRef) throws java.lang.Exception { grant(allUsers, refPattern, Permission.CREATE); grant(allUsers, refPattern, Permission.PUSH); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo).to(groupRef); r.assertErrorStatus(); assertThat(r.getMessage()).contains(""Not allowed to create account branch.""); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(repo.exactRef(groupRef)).isNull(); } }",3e3c99a30ca65093e9f98fa4915d3238240a02dc,"private void testCannotCreateGroupBranch(java.lang.String refPattern, java.lang.String groupRef) throws java.lang.Exception { grant(allUsers, refPattern, Permission.CREATE); grant(allUsers, refPattern, Permission.PUSH); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo).to(groupRef); r.assertErrorStatus(); assertThat(r.getMessage()).contains(""Not allowed to create group branch.""); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(repo.exactRef(groupRef)).isNull(); } }",907caa6407ebe14f3b59496808785eb8fae5eda1,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_db_GroupBundle.java,"private static <T> com.google.common.collect.ImmutableSet<T> logIfNotUnique(com.google.gerrit.server.group.db.GroupBundle.Source source, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, java.lang.Iterable<T> iterable, java.util.Comparator<T> comparator, java.lang.Class<T> clazz) { java.util.List<T> list = com.google.common.collect.Streams.stream(iterable).sorted(comparator).collect(java.util.stream.Collectors.toList()); com.google.common.collect.ImmutableSet<T> set = com.google.common.collect.ImmutableSet.copyOf(list); if ((set.size()) != (list.size())) { com.google.gerrit.server.group.db.GroupBundle.log.warn(""group {} in {} has duplicate {} entities: {}"", uuid, source, clazz.getSimpleName(), iterable); } return set; }",7c9b89ca18e2097df82f4da5cceca6f8cfbcdf46,"private static <T> com.google.common.collect.ImmutableSet<T> logIfNotUnique(com.google.gerrit.server.group.db.GroupBundle.Source source, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, java.lang.Iterable<T> iterable, java.util.Comparator<T> comparator, java.lang.Class<T> clazz) { java.util.List<T> list = com.google.common.collect.Streams.stream(iterable).sorted(comparator).collect(java.util.stream.Collectors.toList()); com.google.common.collect.ImmutableSet<T> set = com.google.common.collect.ImmutableSet.copyOf(list); if ((set.size()) != (list.size())) { com.google.gerrit.server.group.db.GroupBundle.log.warn(""account {} in {} has duplicate {} entities: {}"", uuid, source, clazz.getSimpleName(), iterable); } return set; }",3d4dd5030f51b01ba9e78a34846f5a8d9db2a8d4,"private static <T> com.google.common.collect.ImmutableSet<T> logIfNotUnique(com.google.gerrit.server.group.db.GroupBundle.Source source, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, java.lang.Iterable<T> iterable, java.util.Comparator<T> comparator, java.lang.Class<T> clazz) { java.util.List<T> list = com.google.common.collect.Streams.stream(iterable).sorted(comparator).collect(java.util.stream.Collectors.toList()); com.google.common.collect.ImmutableSet<T> set = com.google.common.collect.ImmutableSet.copyOf(list); if ((set.size()) != (list.size())) { com.google.gerrit.server.group.db.GroupBundle.log.warn(""group {} in {} has duplicate {} entities: {}"", uuid, source, clazz.getSimpleName(), iterable); } return set; }",7c9b89ca18e2097df82f4da5cceca6f8cfbcdf46,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_db_testing_GroupTestUtil.java,"public static void updateGroupFile(org.eclipse.jgit.lib.Repository allUsersRepo, org.eclipse.jgit.lib.PersonIdent serverIdent, java.lang.String refName, java.lang.String fileName, java.lang.String contents) throws java.lang.Exception { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(allUsersRepo)) { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.lib.Repository> testRepository = new org.eclipse.jgit.junit.TestRepository(allUsersRepo, rw); TestRepository<Repository>.CommitBuilder builder = testRepository.branch(refName).commit().add(fileName, contents).message(""update group file"").author(serverIdent).committer(serverIdent); org.eclipse.jgit.lib.Ref ref = allUsersRepo.exactRef(refName); if (ref != null) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); if (c != null) { builder.parent(c); } } builder.create(); } }",2a3eac5277777542e0a683e72bce84d8c548338b,"public static void updateGroupFile(org.eclipse.jgit.lib.Repository allUsersRepo, org.eclipse.jgit.lib.PersonIdent serverIdent, java.lang.String refName, java.lang.String fileName, java.lang.String contents) throws java.lang.Exception { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(allUsersRepo)) { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.lib.Repository> testRepository = new org.eclipse.jgit.junit.TestRepository(allUsersRepo, rw); TestRepository<Repository>.CommitBuilder builder = testRepository.branch(refName).commit().add(fileName, contents).message(""update account file"").author(serverIdent).committer(serverIdent); org.eclipse.jgit.lib.Ref ref = allUsersRepo.exactRef(refName); if (ref != null) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); if (c != null) { builder.parent(c); } } builder.create(); } }",91fa0ccc1dd56e9ab8db2cfca6a978783658054c,"public static void updateGroupFile(org.eclipse.jgit.lib.Repository allUsersRepo, org.eclipse.jgit.lib.PersonIdent serverIdent, java.lang.String refName, java.lang.String fileName, java.lang.String contents) throws java.lang.Exception { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(allUsersRepo)) { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.lib.Repository> testRepository = new org.eclipse.jgit.junit.TestRepository(allUsersRepo, rw); TestRepository<Repository>.CommitBuilder builder = testRepository.branch(refName).commit().add(fileName, contents).message(""update group file"").author(serverIdent).committer(serverIdent); org.eclipse.jgit.lib.Ref ref = allUsersRepo.exactRef(refName); if (ref != null) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); if (c != null) { builder.parent(c); } } builder.create(); } }",2a3eac5277777542e0a683e72bce84d8c548338b,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_GetProject.java,@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.project.ProjectResource rsrc) { return json.format(rsrc.getProjectState()); },d01152819a42bd8887657b47847a411163a8223e,@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) { return json.format(rsrc.getProjectState()); },df33f7d6d96adfeaece61f40986d105f53a4c22b,@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.project.ProjectResource rsrc) { return json.format(rsrc.getProjectState()); },d01152819a42bd8887657b47847a411163a8223e,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_projects_BranchApiImpl.java,"com.google.gerrit.server.api.projects.BranchApiImpl create(com.google.gerrit.server.project.ProjectResource project, java.lang.String ref);",cc96327514beb1e54e38e880f2068a3c17d95049,"com.google.gerrit.server.api.projects.BranchApiImpl create(com.google.gerrit.server.restapi.project.ProjectResource project, java.lang.String ref);",e40eba35e1b51e01fa245ba34057db0cbbfb2b4f,"com.google.gerrit.server.api.projects.BranchApiImpl create(com.google.gerrit.server.project.ProjectResource project, java.lang.String ref);",cc96327514beb1e54e38e880f2068a3c17d95049,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_projects_BranchApiImpl.java,"private com.google.gerrit.server.project.BranchResource resource() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return branches.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(ref)); }",8c08186c58992f3a11049005af1e8c75f6f39138,"private com.google.gerrit.server.restapi.project.BranchResource resource() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return branches.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(ref)); }",df60e4184435655207655e2ad127ae06847925be,"private com.google.gerrit.server.project.BranchResource resource() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return branches.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(ref)); }",8c08186c58992f3a11049005af1e8c75f6f39138,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_projects_BranchApiImpl.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult file(java.lang.String path) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.project.FileResource resource = filesCollection.parse(resource(), com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)); return getContent.apply(resource); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot retrieve file"", e); } }",f7302cbffb95811b7186d565a65add98bc9b9fcc,"@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult file(java.lang.String path) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.restapi.project.FileResource resource = filesCollection.parse(resource(), com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)); return getContent.apply(resource); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot retrieve file"", e); } }",d8146324b73b38e6fa18592ea9a0014aa51cc9f5,"@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult file(java.lang.String path) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.project.FileResource resource = filesCollection.parse(resource(), com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)); return getContent.apply(resource); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot retrieve file"", e); } }",f7302cbffb95811b7186d565a65add98bc9b9fcc,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupsNoteDbConsistencyCheckerTest.java,"@org.junit.Test public void groupNameNoteHasDifferentUUID() throws java.lang.Exception { updateGroupNamesRef(""g-1"", ""[group]\n\tuuid = uuid-2\n\tname = g-1\n""); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, ""g-1"", new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""uuid-1"")); assertThat(problems).containsExactly(warning((""group with name 'g-1' has UUID 'uuid-1' in 'group.config' but 'uuid-2' in group "" + ""name notes""))); }",6db596a971e6c5eb9b8d16640a4c1b945ffd9a88,"@org.junit.Test public void groupNameNoteHasDifferentUUID() throws java.lang.Exception { updateGroupNamesRef(""g-1"", ""[account]\n\tuuid = uuid-2\n\tname = g-1\n""); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, ""g-1"", new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""uuid-1"")); assertThat(problems).containsExactly(warning((""account with name 'g-1' has UUID 'uuid-1' in 'account.config' but 'uuid-2' in account "" + ""name notes""))); }",63d93513723afd36b041550615f0655227e2c17d,"@org.junit.Test public void groupNameNoteHasDifferentUUID() throws java.lang.Exception { updateGroupNamesRef(""g-1"", ""[group]\n\tuuid = uuid-2\n\tname = g-1\n""); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, ""g-1"", new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""uuid-1"")); assertThat(problems).containsExactly(warning((""group with name 'g-1' has UUID 'uuid-1' in 'group.config' but 'uuid-2' in group "" + ""name notes""))); }",6db596a971e6c5eb9b8d16640a4c1b945ffd9a88,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupsNoteDbConsistencyCheckerTest.java,"@org.junit.Test public void groupNameNoteIsConsistent() throws java.lang.Exception { updateGroupNamesRef(""g-1"", ""[group]\n\tuuid = uuid-1\n\tname = g-1\n""); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, ""g-1"", new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""uuid-1"")); assertThat(problems).isEmpty(); }",bb1ff859e740f5b6b2cbffad9453e79981ffc204,"@org.junit.Test public void groupNameNoteIsConsistent() throws java.lang.Exception { updateGroupNamesRef(""g-1"", ""[account]\n\tuuid = uuid-1\n\tname = g-1\n""); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, ""g-1"", new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""uuid-1"")); assertThat(problems).isEmpty(); }",91d1249e61fb78b651aeefa8245416fed3bcd38d,"@org.junit.Test public void groupNameNoteIsConsistent() throws java.lang.Exception { updateGroupNamesRef(""g-1"", ""[group]\n\tuuid = uuid-1\n\tname = g-1\n""); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, ""g-1"", new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""uuid-1"")); assertThat(problems).isEmpty(); }",bb1ff859e740f5b6b2cbffad9453e79981ffc204,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupsNoteDbConsistencyCheckerTest.java,"@org.junit.Test public void groupNameNoteFailToParse() throws java.lang.Exception { updateGroupNamesRef(""g-1"", ""[invalid""); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, ""g-1"", new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""uuid-1"")); assertThat(problems).containsExactly(warning(""fail to check consistency with group name notes: Unexpected end of config file"")); }",a02046cf4f62673d2fd2b1006d3f64fdee532021,"@org.junit.Test public void groupNameNoteFailToParse() throws java.lang.Exception { updateGroupNamesRef(""g-1"", ""[invalid""); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, ""g-1"", new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""uuid-1"")); assertThat(problems).containsExactly(warning(""fail to check consistency with account name notes: Unexpected end of config file"")); }",51f229a213561efbe4bca80545df6c5f27edfc25,"@org.junit.Test public void groupNameNoteFailToParse() throws java.lang.Exception { updateGroupNamesRef(""g-1"", ""[invalid""); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, ""g-1"", new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""uuid-1"")); assertThat(problems).containsExactly(warning(""fail to check consistency with group name notes: Unexpected end of config file"")); }",a02046cf4f62673d2fd2b1006d3f64fdee532021,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupsNoteDbConsistencyCheckerTest.java,"@org.junit.Test public void groupNameNoteIsMissing() throws java.lang.Exception { updateGroupNamesRef(""g-2"", ""[group]\n\tuuid = uuid-2\n\tname = g-2\n""); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, ""g-1"", new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""uuid-1"")); assertThat(problems).containsExactly(warning(""Group with name 'g-1' doesn't exist in the list of all names"")); }",9cb70d3294db374adc1e8a39a4e3a02c9c6b0bd1,"@org.junit.Test public void groupNameNoteIsMissing() throws java.lang.Exception { updateGroupNamesRef(""g-2"", ""[account]\n\tuuid = uuid-2\n\tname = g-2\n""); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, ""g-1"", new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""uuid-1"")); assertThat(problems).containsExactly(warning(""Group with name 'g-1' doesn't exist in the list of all names"")); }",521322f544758fb2a054231877177fafd0a5c11e,"@org.junit.Test public void groupNameNoteIsMissing() throws java.lang.Exception { updateGroupNamesRef(""g-2"", ""[group]\n\tuuid = uuid-2\n\tname = g-2\n""); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, ""g-1"", new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""uuid-1"")); assertThat(problems).containsExactly(warning(""Group with name 'g-1' doesn't exist in the list of all names"")); }",9cb70d3294db374adc1e8a39a4e3a02c9c6b0bd1,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupsNoteDbConsistencyCheckerTest.java,"@org.junit.Test public void groupNameNoteHasDifferentName() throws java.lang.Exception { updateGroupNamesRef(""g-1"", ""[group]\n\tuuid = uuid-1\n\tname = g-2\n""); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, ""g-1"", new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""uuid-1"")); assertThat(problems).containsExactly(warning(""group note of name 'g-1' claims to represent name of 'g-2'"")); }",0cbf01b09c5097679433aaf2bd205f5e2a4df14c,"@org.junit.Test public void groupNameNoteHasDifferentName() throws java.lang.Exception { updateGroupNamesRef(""g-1"", ""[account]\n\tuuid = uuid-1\n\tname = g-2\n""); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, ""g-1"", new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""uuid-1"")); assertThat(problems).containsExactly(warning(""account note of name 'g-1' claims to represent name of 'g-2'"")); }",47270d231f57ae33594515fbd603256af79793ee,"@org.junit.Test public void groupNameNoteHasDifferentName() throws java.lang.Exception { updateGroupNamesRef(""g-1"", ""[group]\n\tuuid = uuid-1\n\tname = g-2\n""); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, ""g-1"", new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""uuid-1"")); assertThat(problems).containsExactly(warning(""group note of name 'g-1' claims to represent name of 'g-2'"")); }",0cbf01b09c5097679433aaf2bd205f5e2a4df14c,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupsNoteDbConsistencyCheckerTest.java,"@org.junit.Test public void groupNameNoteHasDifferentNameAndUUID() throws java.lang.Exception { updateGroupNamesRef(""g-1"", ""[group]\n\tuuid = uuid-2\n\tname = g-2\n""); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, ""g-1"", new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""uuid-1"")); assertThat(problems).containsExactly(warning((""group with name 'g-1' has UUID 'uuid-1' in 'group.config' but 'uuid-2' in group "" + ""name notes"")), warning(""group note of name 'g-1' claims to represent name of 'g-2'"")).inOrder(); }",643f492ac4f9c2ae1894165da418409963b13813,"@org.junit.Test public void groupNameNoteHasDifferentNameAndUUID() throws java.lang.Exception { updateGroupNamesRef(""g-1"", ""[account]\n\tuuid = uuid-2\n\tname = g-2\n""); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, ""g-1"", new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""uuid-1"")); assertThat(problems).containsExactly(warning((""account with name 'g-1' has UUID 'uuid-1' in 'account.config' but 'uuid-2' in account "" + ""name notes"")), warning(""account note of name 'g-1' claims to represent name of 'g-2'"")).inOrder(); }",3cd08af29cc4066bb28849741b92a5074038506d,"@org.junit.Test public void groupNameNoteHasDifferentNameAndUUID() throws java.lang.Exception { updateGroupNamesRef(""g-1"", ""[group]\n\tuuid = uuid-2\n\tname = g-2\n""); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, ""g-1"", new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""uuid-1"")); assertThat(problems).containsExactly(warning((""group with name 'g-1' has UUID 'uuid-1' in 'group.config' but 'uuid-2' in group "" + ""name notes"")), warning(""group note of name 'g-1' claims to represent name of 'g-2'"")).inOrder(); }",643f492ac4f9c2ae1894165da418409963b13813,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_projects_ChildProjectApiImpl.java,com.google.gerrit.server.api.projects.ChildProjectApiImpl create(com.google.gerrit.server.project.ChildProjectResource rsrc);,2a51305299c68e17f72184ec69de1a8c41ef8dc5,com.google.gerrit.server.api.projects.ChildProjectApiImpl create(com.google.gerrit.server.restapi.project.ChildProjectResource rsrc);,67bb232f56e6d1a2ffba00b076dab2e0b6e9461b,com.google.gerrit.server.api.projects.ChildProjectApiImpl create(com.google.gerrit.server.project.ChildProjectResource rsrc);,2a51305299c68e17f72184ec69de1a8c41ef8dc5,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_DeleteTags.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.ProjectResource project, DeleteTagsInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((input == null) || ((input.tags) == null)) || (input.tags.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""tags must be specified""); } deleteRefFactory.create(project).refs(input.tags).prefix(com.google.gerrit.server.project.R_TAGS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }",53e206698275bb82564f8c278e2cfd6d22c8732e,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.project.ProjectResource project, DeleteTagsInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((input == null) || ((input.tags) == null)) || (input.tags.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""tags must be specified""); } deleteRefFactory.create(project).refs(input.tags).prefix(com.google.gerrit.server.restapi.project.R_TAGS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }",74024937580b274c34abfc3087b3ee5220746c57,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.ProjectResource project, DeleteTagsInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((input == null) || ((input.tags) == null)) || (input.tags.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""tags must be specified""); } deleteRefFactory.create(project).refs(input.tags).prefix(com.google.gerrit.server.restapi.project.R_TAGS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }",a2d3e5d991abfe2ca12fd3b6446a70bf50434d4c,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_db_AuditLogReader.java,"private static void logInvalid(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, org.eclipse.jgit.revwalk.RevCommit c, org.eclipse.jgit.revwalk.FooterLine line) { com.google.gerrit.server.group.db.AuditLogReader.log.debug(""Invalid footer line in commit {} while parsing audit log for group {}: {}"", c.name(), uuid, line); }",f4f0201d2f5f96a44a4fde095fa279b8420209e1,"private static void logInvalid(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, org.eclipse.jgit.revwalk.RevCommit c, org.eclipse.jgit.revwalk.FooterLine line) { com.google.gerrit.server.group.db.AuditLogReader.log.debug(""Invalid footer line in commit {} while parsing audit log for account {}: {}"", c.name(), uuid, line); }",505d59cfe723a64e99af291fb68662e2d76b7c6b,"private static void logInvalid(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, org.eclipse.jgit.revwalk.RevCommit c, org.eclipse.jgit.revwalk.FooterLine line) { com.google.gerrit.server.group.db.AuditLogReader.log.debug(""Invalid footer line in commit {} while parsing audit log for group {}: {}"", c.name(), uuid, line); }",f4f0201d2f5f96a44a4fde095fa279b8420209e1,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_ChildProjectsCollection.java,"@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProjectState()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",8e14eff2ddceb4bff265b888f2bcfb4d67842391,"@java.lang.Override public com.google.gerrit.server.restapi.project.ChildProjectResource parse(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.restapi.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.restapi.project.ChildProjectResource(parent, p.getProjectState()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",38f671efc8b7b7c1273a04c9774df20be9d3f4da,"@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProjectState()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",8e14eff2ddceb4bff265b888f2bcfb4d67842391,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_BanCommit.java,"@java.lang.Override protected com.google.gerrit.server.project.BanCommit.BanResultInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.project.ProjectResource rsrc, BanCommitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, java.io.IOException { com.google.gerrit.server.project.BanCommit.BanResultInfo r = new com.google.gerrit.server.project.BanCommit.BanResultInfo(); if (((input != null) && ((input.commits) != null)) && (!(input.commits.isEmpty()))) { java.util.List<org.eclipse.jgit.lib.ObjectId> commitsToBan = new java.util.ArrayList(input.commits.size()); for (java.lang.String c : input.commits) { try { commitsToBan.add(org.eclipse.jgit.lib.ObjectId.fromString(c)); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } } com.google.gerrit.server.git.BanCommitResult result = banCommit.ban(rsrc.getNameKey(), rsrc.getUser(), commitsToBan, input.reason); r.newlyBanned = com.google.gerrit.server.project.BanCommit.transformCommits(result.getNewlyBannedCommits()); r.alreadyBanned = com.google.gerrit.server.project.BanCommit.transformCommits(result.getAlreadyBannedCommits()); r.ignored = com.google.gerrit.server.project.BanCommit.transformCommits(result.getIgnoredObjectIds()); } return r; }",1465c5d77afc1fbc602adc4889ef071284b6d3fb,"@java.lang.Override protected com.google.gerrit.server.restapi.project.BanCommit.BanResultInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.project.ProjectResource rsrc, BanCommitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, java.io.IOException { com.google.gerrit.server.restapi.project.BanCommit.BanResultInfo r = new com.google.gerrit.server.restapi.project.BanCommit.BanResultInfo(); if (((input != null) && ((input.commits) != null)) && (!(input.commits.isEmpty()))) { java.util.List<org.eclipse.jgit.lib.ObjectId> commitsToBan = new java.util.ArrayList(input.commits.size()); for (java.lang.String c : input.commits) { try { commitsToBan.add(org.eclipse.jgit.lib.ObjectId.fromString(c)); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } } com.google.gerrit.server.git.BanCommitResult result = banCommit.ban(rsrc.getNameKey(), rsrc.getUser(), commitsToBan, input.reason); r.newlyBanned = com.google.gerrit.server.restapi.project.BanCommit.transformCommits(result.getNewlyBannedCommits()); r.alreadyBanned = com.google.gerrit.server.restapi.project.BanCommit.transformCommits(result.getAlreadyBannedCommits()); r.ignored = com.google.gerrit.server.restapi.project.BanCommit.transformCommits(result.getIgnoredObjectIds()); } return r; }",53e4b2071f6567ca69c773e43012b9e678045389,"@java.lang.Override protected com.google.gerrit.server.restapi.project.BanCommit.BanResultInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.project.ProjectResource rsrc, BanCommitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, java.io.IOException { com.google.gerrit.server.restapi.project.BanCommit.BanResultInfo r = new com.google.gerrit.server.restapi.project.BanCommit.BanResultInfo(); if (((input != null) && ((input.commits) != null)) && (!(input.commits.isEmpty()))) { java.util.List<org.eclipse.jgit.lib.ObjectId> commitsToBan = new java.util.ArrayList(input.commits.size()); for (java.lang.String c : input.commits) { try { commitsToBan.add(org.eclipse.jgit.lib.ObjectId.fromString(c)); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } } com.google.gerrit.server.git.BanCommitResult result = banCommit.ban(rsrc.getNameKey(), rsrc.getUser(), commitsToBan, input.reason); r.newlyBanned = com.google.gerrit.server.restapi.project.BanCommit.transformCommits(result.getNewlyBannedCommits()); r.alreadyBanned = com.google.gerrit.server.restapi.project.BanCommit.transformCommits(result.getAlreadyBannedCommits()); r.ignored = com.google.gerrit.server.restapi.project.BanCommit.transformCommits(result.getIgnoredObjectIds()); } return r; }",3b3e26f446d00d893b7fb651c665c9fe7780c2e4,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupBundleTest.java,"private GroupBundle.Builder newBundle() { com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""group""), new com.google.gerrit.reviewdb.client.AccountGroup.Id(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""group-1""), ts); com.google.gerrit.reviewdb.client.AccountGroupMember member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.Account.Id(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.Account.Id(2000), ts); com.google.gerrit.reviewdb.client.AccountGroupById byId = new com.google.gerrit.reviewdb.client.AccountGroupById(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""subgroup""))); com.google.gerrit.reviewdb.client.AccountGroupByIdAud byIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(byId, new com.google.gerrit.reviewdb.client.Account.Id(3000), ts); return com.google.gerrit.server.group.db.GroupBundle.builder().group(group).members(member).memberAudit(memberAudit).byId(byId).byIdAudit(byIdAudit); }",0b7b3b4251ca840001c3bf9351d3fb40c1ca2f5d,"private GroupBundle.Builder newBundle() { com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""group""), new com.google.gerrit.reviewdb.client.AccountGroup.Id(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""account-1""), ts); com.google.gerrit.reviewdb.client.AccountGroupMember member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.Account.Id(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.Account.Id(2000), ts); com.google.gerrit.reviewdb.client.AccountGroupById byId = new com.google.gerrit.reviewdb.client.AccountGroupById(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""subgroup""))); com.google.gerrit.reviewdb.client.AccountGroupByIdAud byIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(byId, new com.google.gerrit.reviewdb.client.Account.Id(3000), ts); return com.google.gerrit.server.group.db.GroupBundle.builder().group(group).members(member).memberAudit(memberAudit).byId(byId).byIdAudit(byIdAudit); }",550f3b4c6c027ae567889d86cfdde17076f4aa4f,"private GroupBundle.Builder newBundle() { com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""group""), new com.google.gerrit.reviewdb.client.AccountGroup.Id(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""group-1""), ts); com.google.gerrit.reviewdb.client.AccountGroupMember member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.Account.Id(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.Account.Id(2000), ts); com.google.gerrit.reviewdb.client.AccountGroupById byId = new com.google.gerrit.reviewdb.client.AccountGroupById(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""subgroup""))); com.google.gerrit.reviewdb.client.AccountGroupByIdAud byIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(byId, new com.google.gerrit.reviewdb.client.Account.Id(3000), ts); return com.google.gerrit.server.group.db.GroupBundle.builder().group(group).members(member).memberAudit(memberAudit).byId(byId).byIdAudit(byIdAudit); }",0b7b3b4251ca840001c3bf9351d3fb40c1ca2f5d,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""groups.global:Anonymous-Users.name"", value = ""All Users"") public void createGroupWithDefaultNameOfSystemGroup_Conflict() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""group name 'Anonymous Users' is reserved""); gApi.groups().create(""anonymous users""); }",c12b040789cd59fb0f7a335064b57b6663495a6f,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""groups.global:Anonymous-Users.name"", value = ""All Users"") public void createGroupWithDefaultNameOfSystemGroup_Conflict() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""account name 'Anonymous Users' is reserved""); gApi.groups().create(""anonymous users""); }",a02064d240edc377ae30e0e2b45dc5adf0546206,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""groups.global:Anonymous-Users.name"", value = ""All Users"") public void createGroupWithDefaultNameOfSystemGroup_Conflict() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""group name 'Anonymous Users' is reserved""); gApi.groups().create(""anonymous users""); }",c12b040789cd59fb0f7a335064b57b6663495a6f,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_changes_RobotCommentApiImpl.java,com.google.gerrit.server.api.changes.RobotCommentApiImpl create(com.google.gerrit.server.change.RobotCommentResource c);,69190d83eebb69541be87f3880b396805151ebc3,com.google.gerrit.server.api.changes.RobotCommentApiImpl create(com.google.gerrit.server.restapi.change.RobotCommentResource c);,50dee2930dbedbdd33d7beedb7e51360970a2657,com.google.gerrit.server.api.changes.RobotCommentApiImpl create(com.google.gerrit.server.change.RobotCommentResource c);,69190d83eebb69541be87f3880b396805151ebc3,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_config_GetServerInfo.java,"private com.google.gerrit.extensions.common.AuthInfo getAuthInfo(com.google.gerrit.server.config.AuthConfig cfg, com.google.gerrit.server.account.Realm realm) { com.google.gerrit.extensions.common.AuthInfo info = new com.google.gerrit.extensions.common.AuthInfo(); info.authType = cfg.getAuthType(); info.useContributorAgreements = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.isUseContributorAgreements()); info.editableAccountFields = new java.util.ArrayList(realm.getEditableFields()); info.switchAccountUrl = cfg.getSwitchAccountUrl(); info.gitBasicAuthPolicy = cfg.getGitBasicAuthPolicy(); if ((info.useContributorAgreements) != null) { java.util.Collection<com.google.gerrit.common.data.ContributorAgreement> agreements = projectCache.getAllProjects().getConfig().getContributorAgreements(); if (!(agreements.isEmpty())) { info.contributorAgreements = com.google.common.collect.Lists.newArrayListWithCapacity(agreements.size()); for (com.google.gerrit.common.data.ContributorAgreement agreement : agreements) { info.contributorAgreements.add(agreementJson.format(agreement)); } } } switch (info.authType) { case LDAP : case LDAP_BIND : info.registerUrl = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterText(); info.editFullNameUrl = cfg.getEditFullNameUrl(); break; case CUSTOM_EXTENSION : info.registerUrl = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterText(); info.editFullNameUrl = cfg.getEditFullNameUrl(); info.httpPasswordUrl = cfg.getHttpPasswordUrl(); break; case HTTP : case HTTP_LDAP : info.loginUrl = cfg.getLoginUrl(); info.loginText = cfg.getLoginText(); break; case CLIENT_SSL_CERT_LDAP : case DEVELOPMENT_BECOME_ANY_ACCOUNT : case OAUTH : case OPENID : case OPENID_SSO : break; } return info; }",38f7ed38184c9c07d584bf0539d245922ae096f3,"private com.google.gerrit.extensions.common.AuthInfo getAuthInfo(com.google.gerrit.server.restapi.config.AuthConfig cfg, com.google.gerrit.server.account.Realm realm) { com.google.gerrit.extensions.common.AuthInfo info = new com.google.gerrit.extensions.common.AuthInfo(); info.authType = cfg.getAuthType(); info.useContributorAgreements = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.isUseContributorAgreements()); info.editableAccountFields = new java.util.ArrayList(realm.getEditableFields()); info.switchAccountUrl = cfg.getSwitchAccountUrl(); info.gitBasicAuthPolicy = cfg.getGitBasicAuthPolicy(); if ((info.useContributorAgreements) != null) { java.util.Collection<com.google.gerrit.common.data.ContributorAgreement> agreements = projectCache.getAllProjects().getConfig().getContributorAgreements(); if (!(agreements.isEmpty())) { info.contributorAgreements = com.google.common.collect.Lists.newArrayListWithCapacity(agreements.size()); for (com.google.gerrit.common.data.ContributorAgreement agreement : agreements) { info.contributorAgreements.add(agreementJson.format(agreement)); } } } switch (info.authType) { case LDAP : case LDAP_BIND : info.registerUrl = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterText(); info.editFullNameUrl = cfg.getEditFullNameUrl(); break; case CUSTOM_EXTENSION : info.registerUrl = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterText(); info.editFullNameUrl = cfg.getEditFullNameUrl(); info.httpPasswordUrl = cfg.getHttpPasswordUrl(); break; case HTTP : case HTTP_LDAP : info.loginUrl = cfg.getLoginUrl(); info.loginText = cfg.getLoginText(); break; case CLIENT_SSL_CERT_LDAP : case DEVELOPMENT_BECOME_ANY_ACCOUNT : case OAUTH : case OPENID : case OPENID_SSO : break; } return info; }",5b533a5764d05e2bad0692e3f814fb6dc86216f6,"private com.google.gerrit.extensions.common.AuthInfo getAuthInfo(com.google.gerrit.server.config.AuthConfig cfg, com.google.gerrit.server.account.Realm realm) { com.google.gerrit.extensions.common.AuthInfo info = new com.google.gerrit.extensions.common.AuthInfo(); info.authType = cfg.getAuthType(); info.useContributorAgreements = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.isUseContributorAgreements()); info.editableAccountFields = new java.util.ArrayList(realm.getEditableFields()); info.switchAccountUrl = cfg.getSwitchAccountUrl(); info.gitBasicAuthPolicy = cfg.getGitBasicAuthPolicy(); if ((info.useContributorAgreements) != null) { java.util.Collection<com.google.gerrit.common.data.ContributorAgreement> agreements = projectCache.getAllProjects().getConfig().getContributorAgreements(); if (!(agreements.isEmpty())) { info.contributorAgreements = com.google.common.collect.Lists.newArrayListWithCapacity(agreements.size()); for (com.google.gerrit.common.data.ContributorAgreement agreement : agreements) { info.contributorAgreements.add(agreementJson.format(agreement)); } } } switch (info.authType) { case LDAP : case LDAP_BIND : info.registerUrl = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterText(); info.editFullNameUrl = cfg.getEditFullNameUrl(); break; case CUSTOM_EXTENSION : info.registerUrl = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterText(); info.editFullNameUrl = cfg.getEditFullNameUrl(); info.httpPasswordUrl = cfg.getHttpPasswordUrl(); break; case HTTP : case HTTP_LDAP : info.loginUrl = cfg.getLoginUrl(); info.loginText = cfg.getLoginText(); break; case CLIENT_SSL_CERT_LDAP : case DEVELOPMENT_BECOME_ANY_ACCOUNT : case OAUTH : case OPENID : case OPENID_SSO : break; } return info; }",38f7ed38184c9c07d584bf0539d245922ae096f3,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"@org.junit.Test public void pushToGroupBranchForReviewForAllUsersRepoIsRejectedOnSubmit() throws java.lang.Exception { pushToGroupBranchForReviewAndSubmit(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), ""group update not allowed""); }",8fa700d0554c09cf91f7f93e0c5de57fbdc0f984,"@org.junit.Test public void pushToGroupBranchForReviewForAllUsersRepoIsRejectedOnSubmit() throws java.lang.Exception { pushToGroupBranchForReviewAndSubmit(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), ""account update not allowed""); }",5875f0ca0264b1faf17940fa92799c5dfe4f0e6e,"@org.junit.Test public void pushToGroupBranchForReviewForAllUsersRepoIsRejectedOnSubmit() throws java.lang.Exception { pushToGroupBranchForReviewAndSubmit(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), ""group update not allowed""); }",8fa700d0554c09cf91f7f93e0c5de57fbdc0f984,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""groups.global:Anonymous-Users.name"", value = ""All Users"") public void createGroupWithConfiguredNameOfSystemGroup_Conflict() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""group 'All Users' already exists""); gApi.groups().create(""all users""); }",5086a33fe0d61e38895455454e867609b5e1ffd5,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""groups.global:Anonymous-Users.name"", value = ""All Users"") public void createGroupWithConfiguredNameOfSystemGroup_Conflict() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""account 'All Users' already exists""); gApi.groups().create(""all users""); }",b0494cb763a9d7e7ffc3d0b2f99aa5fa03ce95d4,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""groups.global:Anonymous-Users.name"", value = ""All Users"") public void createGroupWithConfiguredNameOfSystemGroup_Conflict() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""group 'All Users' already exists""); gApi.groups().create(""all users""); }",5086a33fe0d61e38895455454e867609b5e1ffd5,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"@org.junit.Test public void createDuplicateSystemGroupCaseSensitiveName_Conflict() throws java.lang.Exception { java.lang.String newGroupName = ""Registered Users""; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""group 'Registered Users' already exists""); gApi.groups().create(newGroupName); }",f08033f31973db0e7afcf967e94683ed74cf3c0f,"@org.junit.Test public void createDuplicateSystemGroupCaseSensitiveName_Conflict() throws java.lang.Exception { java.lang.String newGroupName = ""Registered Users""; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""account 'Registered Users' already exists""); gApi.groups().create(newGroupName); }",f4eb9f23377f700ce3d3865ae3b74e26038399cc,"@org.junit.Test public void createDuplicateSystemGroupCaseSensitiveName_Conflict() throws java.lang.Exception { java.lang.String newGroupName = ""Registered Users""; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""group 'Registered Users' already exists""); gApi.groups().create(newGroupName); }",f08033f31973db0e7afcf967e94683ed74cf3c0f,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"private void testCannotDeleteGroupBranch(java.lang.String refPattern, java.lang.String groupRef) throws java.lang.Exception { grant(allUsers, refPattern, Permission.DELETE, true, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); org.eclipse.jgit.transport.PushResult r = com.google.gerrit.acceptance.GitUtil.deleteRef(allUsersRepo, groupRef); org.eclipse.jgit.transport.RemoteRefUpdate refUpdate = r.getRemoteUpdate(groupRef); assertThat(refUpdate.getStatus()).isEqualTo(RemoteRefUpdate.Status.REJECTED_OTHER_REASON); assertThat(refUpdate.getMessage()).contains(""Not allowed to delete group branch.""); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(repo.exactRef(groupRef)).isNotNull(); } }",c4a8c45c384e8072dfe81ed98c7012822caed59e,"private void testCannotDeleteGroupBranch(java.lang.String refPattern, java.lang.String groupRef) throws java.lang.Exception { grant(allUsers, refPattern, Permission.DELETE, true, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); org.eclipse.jgit.transport.PushResult r = com.google.gerrit.acceptance.GitUtil.deleteRef(allUsersRepo, groupRef); org.eclipse.jgit.transport.RemoteRefUpdate refUpdate = r.getRemoteUpdate(groupRef); assertThat(refUpdate.getStatus()).isEqualTo(RemoteRefUpdate.Status.REJECTED_OTHER_REASON); assertThat(refUpdate.getMessage()).contains(""Not allowed to delete account branch.""); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(repo.exactRef(groupRef)).isNotNull(); } }",ff5303bf7fab43140fa0f889121b88f027afb69b,"private void testCannotDeleteGroupBranch(java.lang.String refPattern, java.lang.String groupRef) throws java.lang.Exception { grant(allUsers, refPattern, Permission.DELETE, true, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); org.eclipse.jgit.transport.PushResult r = com.google.gerrit.acceptance.GitUtil.deleteRef(allUsersRepo, groupRef); org.eclipse.jgit.transport.RemoteRefUpdate refUpdate = r.getRemoteUpdate(groupRef); assertThat(refUpdate.getStatus()).isEqualTo(RemoteRefUpdate.Status.REJECTED_OTHER_REASON); assertThat(refUpdate.getMessage()).contains(""Not allowed to delete group branch.""); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(repo.exactRef(groupRef)).isNotNull(); } }",c4a8c45c384e8072dfe81ed98c7012822caed59e,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"private void pushToGroupBranchForReviewAndSubmit(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String groupRef, java.lang.String expectedError) throws java.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); grantLabel(""Code-Review"", (-2), 2, project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS, false); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.SUBMIT, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRef + "":groupRef"")); repo.reset(""groupRef""); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Update group config"", ""group.config"", ""some content"").to(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + groupRef)); r.assertOkStatus(); assertThat(r.getChange().change().getDest().get()).isEqualTo(groupRef); gApi.changes().id(r.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); if (expectedError != null) { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""group update not allowed""); } gApi.changes().id(r.getChangeId()).current().submit(); }",3e3e69032283036881731a4414eb6d30d87a6bf1,"private void pushToGroupBranchForReviewAndSubmit(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String groupRef, java.lang.String expectedError) throws java.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); grantLabel(""Code-Review"", (-2), 2, project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS, false); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.SUBMIT, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRef + "":groupRef"")); repo.reset(""groupRef""); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Update account config"", ""account.config"", ""some content"").to(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + groupRef)); r.assertOkStatus(); assertThat(r.getChange().change().getDest().get()).isEqualTo(groupRef); gApi.changes().id(r.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); if (expectedError != null) { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""account update not allowed""); } gApi.changes().id(r.getChangeId()).current().submit(); }",fdddd66fa6305668ad4c17e3339923053b8f1bfd,"private void pushToGroupBranchForReviewAndSubmit(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String groupRef, java.lang.String expectedError) throws java.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); grantLabel(""Code-Review"", (-2), 2, project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS, false); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.SUBMIT, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRef + "":groupRef"")); repo.reset(""groupRef""); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Update group config"", ""group.config"", ""some content"").to(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + groupRef)); r.assertOkStatus(); assertThat(r.getChange().change().getDest().get()).isEqualTo(groupRef); gApi.changes().id(r.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); if (expectedError != null) { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""group update not allowed""); } gApi.changes().id(r.getChangeId()).current().submit(); }",3e3e69032283036881731a4414eb6d30d87a6bf1,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"@org.junit.Test public void pushToGroupNamesBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); allowGlobalCapabilities(com.google.gerrit.acceptance.api.group.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); assertPushToGroupBranch(allUsers, RefNames.REFS_GROUPNAMES, ""group update not allowed""); }",f6b943326a0a3afbe747cd151fb841b6f945fc6e,"@org.junit.Test public void pushToGroupNamesBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); allowGlobalCapabilities(com.google.gerrit.acceptance.api.group.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); assertPushToGroupBranch(allUsers, RefNames.REFS_GROUPNAMES, ""account update not allowed""); }",d22786713e3afb84d1b60071630ffc7ca68957b5,"@org.junit.Test public void pushToGroupNamesBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); allowGlobalCapabilities(com.google.gerrit.acceptance.api.group.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); assertPushToGroupBranch(allUsers, RefNames.REFS_GROUPNAMES, ""group update not allowed""); }",f6b943326a0a3afbe747cd151fb841b6f945fc6e,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"@org.junit.Test public void pushToDeletedGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name(""foo"")).get().id)); createBranch(allUsers, groupRef); assertPushToGroupBranch(allUsers, groupRef, ""group update not allowed""); }",88b1c9aabee8c4b01ca4a36cd9e791d88064b2be,"@org.junit.Test public void pushToDeletedGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name(""foo"")).get().id)); createBranch(allUsers, groupRef); assertPushToGroupBranch(allUsers, groupRef, ""account update not allowed""); }",d26aa4c941f688354d85b806073b20433fb2055c,"@org.junit.Test public void pushToDeletedGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name(""foo"")).get().id)); createBranch(allUsers, groupRef); assertPushToGroupBranch(allUsers, groupRef, ""group update not allowed""); }",88b1c9aabee8c4b01ca4a36cd9e791d88064b2be,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"@org.junit.Test public void createDuplicateInternalGroupCaseSensitiveName_Conflict() throws java.lang.Exception { java.lang.String dupGroupName = name(""dupGroup""); gApi.groups().create(dupGroupName); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(((""group '"" + dupGroupName) + ""' already exists"")); gApi.groups().create(dupGroupName); }",ff6372a7bd25f94a42b7425ca7605891c0a74871,"@org.junit.Test public void createDuplicateInternalGroupCaseSensitiveName_Conflict() throws java.lang.Exception { java.lang.String dupGroupName = name(""dupGroup""); gApi.groups().create(dupGroupName); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(((""account '"" + dupGroupName) + ""' already exists"")); gApi.groups().create(dupGroupName); }",2f56cc3bef48cdefbb4326d7ebadb44bf577a748,"@org.junit.Test public void createDuplicateInternalGroupCaseSensitiveName_Conflict() throws java.lang.Exception { java.lang.String dupGroupName = name(""dupGroup""); gApi.groups().create(dupGroupName); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(((""group '"" + dupGroupName) + ""' already exists"")); gApi.groups().create(dupGroupName); }",ff6372a7bd25f94a42b7425ca7605891c0a74871,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"private void assertPushToGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String groupRefName, java.lang.String expectedErrorOnUpdate) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, RefNames.REFS_GROUPNAMES, Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefName + "":groupRef"")); repo.reset(""groupRef""); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Update group config"", GroupConfig.GROUP_CONFIG_FILE, ""some content"").to(groupRefName); if (expectedErrorOnUpdate != null) { r.assertErrorStatus(expectedErrorOnUpdate); } else { r.assertOkStatus(); } }",46d5a9ab98bf629af2f9dd1d03df81b414d92917,"private void assertPushToGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String groupRefName, java.lang.String expectedErrorOnUpdate) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, RefNames.REFS_GROUPNAMES, Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefName + "":groupRef"")); repo.reset(""groupRef""); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Update account config"", GroupConfig.GROUP_CONFIG_FILE, ""some content"").to(groupRefName); if (expectedErrorOnUpdate != null) { r.assertErrorStatus(expectedErrorOnUpdate); } else { r.assertOkStatus(); } }",fdbccf4bba6f1d8b2489322f00521cebad1b9005,"private void assertPushToGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String groupRefName, java.lang.String expectedErrorOnUpdate) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, RefNames.REFS_GROUPNAMES, Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefName + "":groupRef"")); repo.reset(""groupRef""); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Update group config"", GroupConfig.GROUP_CONFIG_FILE, ""some content"").to(groupRefName); if (expectedErrorOnUpdate != null) { r.assertErrorStatus(expectedErrorOnUpdate); } else { r.assertOkStatus(); } }",46d5a9ab98bf629af2f9dd1d03df81b414d92917,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"private void assertCreateGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedErrorOnCreate) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Update group config"", GroupConfig.GROUP_CONFIG_FILE, ""some content"").setParents(com.google.common.collect.ImmutableList.of()).to(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + (name(""bar"")))); if (expectedErrorOnCreate != null) { r.assertErrorStatus(expectedErrorOnCreate); } else { r.assertOkStatus(); } }",fd41fdfa27c88af76d9c7f54c71a4ceaa0bcc8ab,"private void assertCreateGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedErrorOnCreate) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Update account config"", GroupConfig.GROUP_CONFIG_FILE, ""some content"").setParents(com.google.common.collect.ImmutableList.of()).to(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + (name(""bar"")))); if (expectedErrorOnCreate != null) { r.assertErrorStatus(expectedErrorOnCreate); } else { r.assertOkStatus(); } }",5cd6b5dfc510aca8b50754ee0aac73a98c59d903,"private void assertCreateGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedErrorOnCreate) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Update group config"", GroupConfig.GROUP_CONFIG_FILE, ""some content"").setParents(com.google.common.collect.ImmutableList.of()).to(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + (name(""bar"")))); if (expectedErrorOnCreate != null) { r.assertErrorStatus(expectedErrorOnCreate); } else { r.assertOkStatus(); } }",fd41fdfa27c88af76d9c7f54c71a4ceaa0bcc8ab,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"@org.junit.Test public void onlyVisibleGroupsReturned() throws java.lang.Exception { java.lang.String newGroupName = name(""newGroup""); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = newGroupName; in.description = ""a hidden group""; in.visibleToAll = false; in.ownerId = adminGroupUuid().get(); gApi.groups().create(in); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).doesNotContainKey(newGroupName); setApiUser(admin); gApi.groups().id(newGroupName).addMembers(user.username); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).containsKey(newGroupName); }",6a7c86c2837a14baa77c064502d3f1b49b0c56c9,"@org.junit.Test public void onlyVisibleGroupsReturned() throws java.lang.Exception { java.lang.String newGroupName = name(""newGroup""); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = newGroupName; in.description = ""a hidden account""; in.visibleToAll = false; in.ownerId = adminGroupUuid().get(); gApi.groups().create(in); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).doesNotContainKey(newGroupName); setApiUser(admin); gApi.groups().id(newGroupName).addMembers(user.username); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).containsKey(newGroupName); }",5b45118e89bb2ed93ae4bfe73f69ef1414100779,"@org.junit.Test public void onlyVisibleGroupsReturned() throws java.lang.Exception { java.lang.String newGroupName = name(""newGroup""); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = newGroupName; in.description = ""a hidden group""; in.visibleToAll = false; in.ownerId = adminGroupUuid().get(); gApi.groups().create(in); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).doesNotContainKey(newGroupName); setApiUser(admin); gApi.groups().id(newGroupName).addMembers(user.username); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).containsKey(newGroupName); }",6a7c86c2837a14baa77c064502d3f1b49b0c56c9,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"@org.junit.Test public void pushToGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); assertPushToGroupBranch(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), ""group update not allowed""); }",cc506802da01be66c6162ce062615816031f724a,"@org.junit.Test public void pushToGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); assertPushToGroupBranch(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), ""account update not allowed""); }",ab5f593b784c1491d112d98475b8a7b5ef533cf4,"@org.junit.Test public void pushToGroupBranchIsRejectedForAllUsersRepo() throws java.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); assertPushToGroupBranch(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), ""group update not allowed""); }",cc506802da01be66c6162ce062615816031f724a,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"@org.junit.Test public void groupDescription() throws java.lang.Exception { java.lang.String name = name(""group""); gApi.groups().create(name); assertThat(gApi.groups().id(name).description()).isEmpty(); java.lang.String desc = ""New description for the group.""; gApi.groups().id(name).description(desc); assertThat(gApi.groups().id(name).description()).isEqualTo(desc); gApi.groups().id(name).description(null); assertThat(gApi.groups().id(name).description()).isEmpty(); gApi.groups().id(name).description(""""); assertThat(gApi.groups().id(name).description()).isEmpty(); }",58b705cf012e585706f360188eb3a19ffdedbf45,"@org.junit.Test public void groupDescription() throws java.lang.Exception { java.lang.String name = name(""group""); gApi.groups().create(name); assertThat(gApi.groups().id(name).description()).isEmpty(); java.lang.String desc = ""New description for the account.""; gApi.groups().id(name).description(desc); assertThat(gApi.groups().id(name).description()).isEqualTo(desc); gApi.groups().id(name).description(null); assertThat(gApi.groups().id(name).description()).isEmpty(); gApi.groups().id(name).description(""""); assertThat(gApi.groups().id(name).description()).isEmpty(); }",9a3f9a4c0df1791f163c11ce2e14c7e6b7a1314f,"@org.junit.Test public void groupDescription() throws java.lang.Exception { java.lang.String name = name(""group""); gApi.groups().create(name); assertThat(gApi.groups().id(name).description()).isEmpty(); java.lang.String desc = ""New description for the group.""; gApi.groups().id(name).description(desc); assertThat(gApi.groups().id(name).description()).isEqualTo(desc); gApi.groups().id(name).description(null); assertThat(gApi.groups().id(name).description()).isEmpty(); gApi.groups().id(name).description(""""); assertThat(gApi.groups().id(name).description()).isEmpty(); }",58b705cf012e585706f360188eb3a19ffdedbf45,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"@org.junit.Test public void reindexPermissions() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount groupOwner = accountCreator.user2(); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name(""group""); in.members = java.util.Collections.singleton(groupOwner).stream().map(( u) -> u.id.toString()).collect(java.util.stream.Collectors.toList()); in.visibleToAll = true; com.google.gerrit.extensions.common.GroupInfo group = gApi.groups().create(in).get(); setApiUser(admin); gApi.groups().id(group.id).index(); setApiUser(groupOwner); gApi.groups().id(group.id).index(); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage(""not allowed to index group""); gApi.groups().id(group.id).index(); }",6edf656a4e651816203c155cb5c2843fb1f16960,"@org.junit.Test public void reindexPermissions() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount groupOwner = accountCreator.user2(); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name(""group""); in.members = java.util.Collections.singleton(groupOwner).stream().map(( u) -> u.id.toString()).collect(java.util.stream.Collectors.toList()); in.visibleToAll = true; com.google.gerrit.extensions.common.GroupInfo group = gApi.groups().create(in).get(); setApiUser(admin); gApi.groups().id(group.id).index(); setApiUser(groupOwner); gApi.groups().id(group.id).index(); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage(""not allowed to index account""); gApi.groups().id(group.id).index(); }",c0c50ed6d50f6d70edcec6981ab30a6e11b4dfab,"@org.junit.Test public void reindexPermissions() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount groupOwner = accountCreator.user2(); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name(""group""); in.members = java.util.Collections.singleton(groupOwner).stream().map(( u) -> u.id.toString()).collect(java.util.stream.Collectors.toList()); in.visibleToAll = true; com.google.gerrit.extensions.common.GroupInfo group = gApi.groups().create(in).get(); setApiUser(admin); gApi.groups().id(group.id).index(); setApiUser(groupOwner); gApi.groups().id(group.id).index(); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage(""not allowed to index group""); gApi.groups().id(group.id).index(); }",6edf656a4e651816203c155cb5c2843fb1f16960,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,"@org.junit.Test public void createDuplicateSystemGroupCaseInsensitiveName_Conflict() throws java.lang.Exception { java.lang.String newGroupName = ""registered users""; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""group 'Registered Users' already exists""); gApi.groups().create(newGroupName); }",d91ff89670b6a76e243e834b54370dc6a017eba1,"@org.junit.Test public void createDuplicateSystemGroupCaseInsensitiveName_Conflict() throws java.lang.Exception { java.lang.String newGroupName = ""registered users""; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""account 'Registered Users' already exists""); gApi.groups().create(newGroupName); }",01c0103fd8b571aec6074a347c39d6b23c8fa9c4,"@org.junit.Test public void createDuplicateSystemGroupCaseInsensitiveName_Conflict() throws java.lang.Exception { java.lang.String newGroupName = ""registered users""; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""group 'Registered Users' already exists""); gApi.groups().create(newGroupName); }",d91ff89670b6a76e243e834b54370dc6a017eba1,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_config_GetServerInfo.java,"private com.google.gerrit.extensions.common.ChangeConfigInfo getChangeInfo(org.eclipse.jgit.lib.Config cfg) { com.google.gerrit.extensions.common.ChangeConfigInfo info = new com.google.gerrit.extensions.common.ChangeConfigInfo(); info.allowBlame = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.getBoolean(""change"", ""allowBlame"", true)); info.allowDrafts = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.getBoolean(""change"", ""allowDrafts"", true)); boolean hasAssigneeInIndex = indexes.getSearchIndex().getSchema().hasField(ChangeField.ASSIGNEE); info.showAssigneeInChangesTable = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(((cfg.getBoolean(""change"", ""showAssigneeInChangesTable"", false)) && hasAssigneeInIndex)); info.largeChange = cfg.getInt(""change"", ""largeChange"", 500); info.privateByDefault = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.getBoolean(""change"", ""privateByDefault"", false)); info.replyTooltip = (java.util.Optional.ofNullable(cfg.getString(""change"", null, ""replyTooltip"")).orElse(""Reply and score"")) + "" (Shortcut: a)""; info.replyLabel = (java.util.Optional.ofNullable(cfg.getString(""change"", null, ""replyLabel"")).orElse(""Reply"")) + ""\u2026""; info.updateDelay = ((int) (com.google.gerrit.server.config.ConfigUtil.getTimeUnit(cfg, ""change"", null, ""updateDelay"", 300, java.util.concurrent.TimeUnit.SECONDS))); info.submitWholeTopic = com.google.gerrit.server.change.Submit.wholeTopicEnabled(cfg); return info; }",1fdf6f72c69e201744e98d487201adaac50bcf37,"private com.google.gerrit.extensions.common.ChangeConfigInfo getChangeInfo(org.eclipse.jgit.lib.Config cfg) { com.google.gerrit.extensions.common.ChangeConfigInfo info = new com.google.gerrit.extensions.common.ChangeConfigInfo(); info.allowBlame = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.getBoolean(""change"", ""allowBlame"", true)); info.allowDrafts = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.getBoolean(""change"", ""allowDrafts"", true)); boolean hasAssigneeInIndex = indexes.getSearchIndex().getSchema().hasField(ChangeField.ASSIGNEE); info.showAssigneeInChangesTable = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(((cfg.getBoolean(""change"", ""showAssigneeInChangesTable"", false)) && hasAssigneeInIndex)); info.largeChange = cfg.getInt(""change"", ""largeChange"", 500); info.privateByDefault = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.getBoolean(""change"", ""privateByDefault"", false)); info.replyTooltip = (java.util.Optional.ofNullable(cfg.getString(""change"", null, ""replyTooltip"")).orElse(""Reply and score"")) + "" (Shortcut: a)""; info.replyLabel = (java.util.Optional.ofNullable(cfg.getString(""change"", null, ""replyLabel"")).orElse(""Reply"")) + ""\u2026""; info.updateDelay = ((int) (com.google.gerrit.server.restapi.config.ConfigUtil.getTimeUnit(cfg, ""change"", null, ""updateDelay"", 300, java.util.concurrent.TimeUnit.SECONDS))); info.submitWholeTopic = com.google.gerrit.server.git.MergeSuperSet.wholeTopicEnabled(cfg); return info; }",156ad7db56b8733c2412418630cc7af9accfcfb0,"private com.google.gerrit.extensions.common.ChangeConfigInfo getChangeInfo(org.eclipse.jgit.lib.Config cfg) { com.google.gerrit.extensions.common.ChangeConfigInfo info = new com.google.gerrit.extensions.common.ChangeConfigInfo(); info.allowBlame = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.getBoolean(""change"", ""allowBlame"", true)); info.allowDrafts = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.getBoolean(""change"", ""allowDrafts"", true)); boolean hasAssigneeInIndex = indexes.getSearchIndex().getSchema().hasField(ChangeField.ASSIGNEE); info.showAssigneeInChangesTable = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(((cfg.getBoolean(""change"", ""showAssigneeInChangesTable"", false)) && hasAssigneeInIndex)); info.largeChange = cfg.getInt(""change"", ""largeChange"", 500); info.replyTooltip = (java.util.Optional.ofNullable(cfg.getString(""change"", null, ""replyTooltip"")).orElse(""Reply and score"")) + "" (Shortcut: a)""; info.replyLabel = (java.util.Optional.ofNullable(cfg.getString(""change"", null, ""replyLabel"")).orElse(""Reply"")) + ""\u2026""; info.updateDelay = ((int) (com.google.gerrit.server.config.ConfigUtil.getTimeUnit(cfg, ""change"", null, ""updateDelay"", 300, java.util.concurrent.TimeUnit.SECONDS))); info.submitWholeTopic = com.google.gerrit.server.git.MergeSuperSet.wholeTopicEnabled(cfg); return info; }",6c5cb08560620c13a796b3edc09c6963d6d88757,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_config_GetServerInfo.java,"private com.google.gerrit.extensions.common.GerritInfo getGerritInfo(org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.config.AllProjectsName allProjectsName, com.google.gerrit.server.config.AllUsersName allUsersName) { com.google.gerrit.extensions.common.GerritInfo info = new com.google.gerrit.extensions.common.GerritInfo(); info.allProjects = allProjectsName.get(); info.allUsers = allUsersName.get(); info.reportBugUrl = cfg.getString(""gerrit"", null, ""reportBugUrl""); info.reportBugText = cfg.getString(""gerrit"", null, ""reportBugText""); info.docUrl = getDocUrl(cfg); info.docSearch = docSearcher.isAvailable(); info.editGpgKeys = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(((enableSignedPush) && (cfg.getBoolean(""gerrit"", null, ""editGpgKeys"", true)))); info.webUis = java.util.EnumSet.noneOf(com.google.gerrit.extensions.client.UiType.class); if (gerritOptions.enableGwtUi()) { info.webUis.add(UiType.GWT); } if (gerritOptions.enablePolyGerrit()) { info.webUis.add(UiType.POLYGERRIT); } return info; }",0a5aa0763197d697c4c21a926cc688a575e4e112,"private com.google.gerrit.extensions.common.GerritInfo getGerritInfo(org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.restapi.config.AllProjectsName allProjectsName, com.google.gerrit.server.restapi.config.AllUsersName allUsersName) { com.google.gerrit.extensions.common.GerritInfo info = new com.google.gerrit.extensions.common.GerritInfo(); info.allProjects = allProjectsName.get(); info.allUsers = allUsersName.get(); info.reportBugUrl = cfg.getString(""gerrit"", null, ""reportBugUrl""); info.reportBugText = cfg.getString(""gerrit"", null, ""reportBugText""); info.docUrl = getDocUrl(cfg); info.docSearch = docSearcher.isAvailable(); info.editGpgKeys = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(((enableSignedPush) && (cfg.getBoolean(""gerrit"", null, ""editGpgKeys"", true)))); info.webUis = java.util.EnumSet.noneOf(com.google.gerrit.extensions.client.UiType.class); if (gerritOptions.enableGwtUi()) { info.webUis.add(UiType.GWT); } if (gerritOptions.enablePolyGerrit()) { info.webUis.add(UiType.POLYGERRIT); } return info; }",5603715892c7586ac86f05401df229497dcf552c,"private com.google.gerrit.extensions.common.GerritInfo getGerritInfo(org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.config.AllProjectsName allProjectsName, com.google.gerrit.server.config.AllUsersName allUsersName) { com.google.gerrit.extensions.common.GerritInfo info = new com.google.gerrit.extensions.common.GerritInfo(); info.allProjects = allProjectsName.get(); info.allUsers = allUsersName.get(); info.reportBugUrl = cfg.getString(""gerrit"", null, ""reportBugUrl""); info.reportBugText = cfg.getString(""gerrit"", null, ""reportBugText""); info.docUrl = getDocUrl(cfg); info.docSearch = docSearcher.isAvailable(); info.editGpgKeys = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(((enableSignedPush) && (cfg.getBoolean(""gerrit"", null, ""editGpgKeys"", true)))); info.webUis = java.util.EnumSet.noneOf(com.google.gerrit.extensions.client.UiType.class); if (gerritOptions.enableGwtUi()) { info.webUis.add(UiType.GWT); } if (gerritOptions.enablePolyGerrit()) { info.webUis.add(UiType.POLYGERRIT); } return info; }",0a5aa0763197d697c4c21a926cc688a575e4e112,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_config_GetServerInfo.java,"@java.lang.Override public com.google.gerrit.extensions.common.ServerInfo apply(com.google.gerrit.server.config.ConfigResource rsrc) throws java.net.MalformedURLException { com.google.gerrit.extensions.common.ServerInfo info = new com.google.gerrit.extensions.common.ServerInfo(); info.accounts = getAccountsInfo(accountVisibilityProvider); info.auth = getAuthInfo(authConfig, realm); info.change = getChangeInfo(config); info.download = getDownloadInfo(downloadSchemes, downloadCommands, cloneCommands, archiveFormats); info.gerrit = getGerritInfo(config, allProjectsName, allUsersName); info.noteDbEnabled = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(isNoteDbEnabled()); info.plugin = getPluginInfo(); if (java.nio.file.Files.exists(sitePaths.site_theme)) { info.defaultTheme = ""/static/"" + (com.google.gerrit.server.config.SitePaths.THEME_FILENAME); } info.sshd = getSshdInfo(config); info.suggest = getSuggestInfo(config); java.util.Map<java.lang.String, java.lang.String> urlAliases = getUrlAliasesInfo(config); info.urlAliases = (!(urlAliases.isEmpty())) ? urlAliases : null; info.user = getUserInfo(anonymousCowardName); info.receive = getReceiveInfo(); return info; }",3b607a70d519a77b8ba2a287062bd5556eb4aa0f,"@java.lang.Override public com.google.gerrit.extensions.common.ServerInfo apply(com.google.gerrit.server.restapi.config.ConfigResource rsrc) throws java.net.MalformedURLException { com.google.gerrit.extensions.common.ServerInfo info = new com.google.gerrit.extensions.common.ServerInfo(); info.accounts = getAccountsInfo(accountVisibilityProvider); info.auth = getAuthInfo(authConfig, realm); info.change = getChangeInfo(config); info.download = getDownloadInfo(downloadSchemes, downloadCommands, cloneCommands, archiveFormats); info.gerrit = getGerritInfo(config, allProjectsName, allUsersName); info.noteDbEnabled = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(isNoteDbEnabled()); info.plugin = getPluginInfo(); if (java.nio.file.Files.exists(sitePaths.site_theme)) { info.defaultTheme = ""/static/"" + (SitePaths.THEME_FILENAME); } info.sshd = getSshdInfo(config); info.suggest = getSuggestInfo(config); java.util.Map<java.lang.String, java.lang.String> urlAliases = getUrlAliasesInfo(config); info.urlAliases = (!(urlAliases.isEmpty())) ? urlAliases : null; info.user = getUserInfo(anonymousCowardName); info.receive = getReceiveInfo(); return info; }",087eac59d1d67f84a5d75e936f5f4e2d779c0cb5,"@java.lang.Override public com.google.gerrit.extensions.common.ServerInfo apply(com.google.gerrit.server.config.ConfigResource rsrc) throws java.net.MalformedURLException { com.google.gerrit.extensions.common.ServerInfo info = new com.google.gerrit.extensions.common.ServerInfo(); info.accounts = getAccountsInfo(accountVisibilityProvider); info.auth = getAuthInfo(authConfig, realm); info.change = getChangeInfo(config); info.download = getDownloadInfo(downloadSchemes, downloadCommands, cloneCommands, archiveFormats); info.gerrit = getGerritInfo(config, allProjectsName, allUsersName); info.noteDbEnabled = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(isNoteDbEnabled()); info.plugin = getPluginInfo(); if (java.nio.file.Files.exists(sitePaths.site_theme)) { info.defaultTheme = ""/static/"" + (com.google.gerrit.server.config.SitePaths.THEME_FILENAME); } info.sshd = getSshdInfo(config); info.suggest = getSuggestInfo(config); java.util.Map<java.lang.String, java.lang.String> urlAliases = getUrlAliasesInfo(config); info.urlAliases = (!(urlAliases.isEmpty())) ? urlAliases : null; info.user = getUserInfo(anonymousCowardName); info.receive = getReceiveInfo(); return info; }",3b607a70d519a77b8ba2a287062bd5556eb4aa0f,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_ChildProjectsCollection.java,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ChildProjectResource>> views() { return views; },da25231f5a8b840bb9fb823c31b9268539fed5fc,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.ChildProjectResource>> views() { return views; },88cb703ceb041ac869632acff8f5f54cfa6b95ab,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ChildProjectResource>> views() { return views; },da25231f5a8b840bb9fb823c31b9268539fed5fc,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_account_UniversalGroupBackend.java,"@java.lang.Override public void check() throws com.google.gerrit.server.StartupException { java.lang.String invalid = cfg.getSubsections(""groups"").stream().filter(( sub) -> { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(sub); com.google.gerrit.server.account.GroupBackend groupBackend = universalGroupBackend.backend(uuid); return (groupBackend == null) || ((groupBackend.get(uuid)) == null); }).map(( u) -> (""'"" + u) + ""'"").collect(java.util.stream.Collectors.joining("","")); if (!(invalid.isEmpty())) { throw new com.google.gerrit.server.StartupException(java.lang.String.format(((((""Subsections for 'groups' in gerrit.config must be valid group"" + "" UUIDs. The following group UUIDs could not be resolved: "") + invalid) + "" Please remove/fix these 'groups' subsections in"") + "" gerrit.config.""))); } }",5053040dca71b593105e46c9fa84bd2be13671d4,"@java.lang.Override public void check() throws com.google.gerrit.server.StartupException { java.lang.String invalid = cfg.getSubsections(""groups"").stream().filter(( sub) -> { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(sub); com.google.gerrit.server.account.GroupBackend groupBackend = universalGroupBackend.backend(uuid); return (groupBackend == null) || ((groupBackend.get(uuid)) == null); }).map(( u) -> (""'"" + u) + ""'"").collect(java.util.stream.Collectors.joining("","")); if (!(invalid.isEmpty())) { throw new com.google.gerrit.server.StartupException(java.lang.String.format(((((""Subsections for 'groups' in gerrit.config must be valid account"" + "" UUIDs. The following account UUIDs could not be resolved: "") + invalid) + "" Please remove/fix these 'groups' subsections in"") + "" gerrit.config.""))); } }",96af629282016f9191735c38c69e5ca9b908571c,"@java.lang.Override public void check() throws com.google.gerrit.server.StartupException { java.lang.String invalid = cfg.getSubsections(""groups"").stream().filter(( sub) -> { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(sub); com.google.gerrit.server.account.GroupBackend groupBackend = universalGroupBackend.backend(uuid); return (groupBackend == null) || ((groupBackend.get(uuid)) == null); }).map(( u) -> (""'"" + u) + ""'"").collect(java.util.stream.Collectors.joining("","")); if (!(invalid.isEmpty())) { throw new com.google.gerrit.server.StartupException(java.lang.String.format(((((""Subsections for 'groups' in gerrit.config must be valid group"" + "" UUIDs. The following group UUIDs could not be resolved: "") + invalid) + "" Please remove/fix these 'groups' subsections in"") + "" gerrit.config.""))); } }",5053040dca71b593105e46c9fa84bd2be13671d4,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_ListGroups.java,"@java.lang.Deprecated @org.kohsuke.args4j.Option(name = ""--query"", aliases = { ""-q"" }, usage = ""group to inspect (deprecated: use --group/-g instead)"") void addGroup_Deprecated(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { addGroup(uuid); }",73d09c299d7eb41f55e247a10babf8b0a3b5e324,"@java.lang.Deprecated @org.kohsuke.args4j.Option(name = ""--query"", aliases = { ""-q"" }, usage = ""account to inspect (deprecated: use --account/-g instead)"") void addGroup_Deprecated(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { addGroup(uuid); }",caeee90b5050f83aa1c84c28dd07218ebe824064,"@java.lang.Deprecated @org.kohsuke.args4j.Option(name = ""--query"", aliases = { ""-q"" }, usage = ""group to inspect (deprecated: use --group/-g instead)"") void addGroup_Deprecated(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { addGroup(uuid); }",73d09c299d7eb41f55e247a10babf8b0a3b5e324,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_sshd_commands_RenameGroupCommand.java,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.server.group.GroupResource rsrc = groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromDecoded(groupName)); com.google.gerrit.extensions.common.NameInput input = new com.google.gerrit.extensions.common.NameInput(); input.name = newGroupName; putName.apply(rsrc, input); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw die(e); } }",c20d57e52e60af1d890c127f006f840b0bc081c3,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.server.restapi.group.GroupResource rsrc = groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromDecoded(groupName)); com.google.gerrit.extensions.common.NameInput input = new com.google.gerrit.extensions.common.NameInput(); input.name = newGroupName; putName.apply(rsrc, input); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw die(e); } }",5179b683b7db179c49404b5594d588ea189dc53a,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.server.group.GroupResource rsrc = groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromDecoded(groupName)); com.google.gerrit.extensions.common.NameInput input = new com.google.gerrit.extensions.common.NameInput(); input.name = newGroupName; putName.apply(rsrc, input); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw die(e); } }",c20d57e52e60af1d890c127f006f840b0bc081c3,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_db_Groups.java,"private static java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> getGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUuid).toList(); if ((accountGroups.size()) == 1) { return java.util.Optional.of(com.google.common.collect.Iterables.getOnlyElement(accountGroups)); } else if (accountGroups.isEmpty()) { return java.util.Optional.empty(); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException((""Duplicate group UUID "" + groupUuid)); } }",566d52e9f941ffa3a9713a0988c4af4bdc642572,"private static java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> getGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUuid).toList(); if ((accountGroups.size()) == 1) { return java.util.Optional.of(com.google.common.collect.Iterables.getOnlyElement(accountGroups)); } else if (accountGroups.isEmpty()) { return java.util.Optional.empty(); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException((""Duplicate account UUID "" + groupUuid)); } }",433bed0c7c3e4c9e40416115b829cc48f3ab81bf,"private static java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> getGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUuid).toList(); if ((accountGroups.size()) == 1) { return java.util.Optional.of(com.google.common.collect.Iterables.getOnlyElement(accountGroups)); } else if (accountGroups.isEmpty()) { return java.util.Optional.empty(); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException((""Duplicate group UUID "" + groupUuid)); } }",566d52e9f941ffa3a9713a0988c4af4bdc642572,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_FilesCollection.java,@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.BranchResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); },22dadb7da6a1cebfd1f5f562af2f059858917d4d,@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.BranchResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); },46fd88812aa2b3888caa4956a7c7ac3b1a6345f5,@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.BranchResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); },22dadb7da6a1cebfd1f5f562af2f059858917d4d,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_FilesCollection.java,"@java.lang.Override public com.google.gerrit.server.project.FileResource parse(com.google.gerrit.server.project.BranchResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return com.google.gerrit.server.project.FileResource.create(repoManager, parent.getProjectState(), org.eclipse.jgit.lib.ObjectId.fromString(parent.getRevision()), id.get()); }",8a0cc266f849925c994a8a91c79866c5905f8a8f,"@java.lang.Override public com.google.gerrit.server.restapi.project.FileResource parse(com.google.gerrit.server.restapi.project.BranchResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return com.google.gerrit.server.restapi.project.FileResource.create(repoManager, parent.getProjectState(), org.eclipse.jgit.lib.ObjectId.fromString(parent.getRevision()), id.get()); }",350e789d4866b830314cd691f0bb9b9a6d9eb95f,"@java.lang.Override public com.google.gerrit.server.project.FileResource parse(com.google.gerrit.server.project.BranchResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return com.google.gerrit.server.project.FileResource.create(repoManager, parent.getProjectState(), org.eclipse.jgit.lib.ObjectId.fromString(parent.getRevision()), id.get()); }",8a0cc266f849925c994a8a91c79866c5905f8a8f,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_git_ProjectConfigTest.java,"@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add(""groups"", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add(""project.config"", (""[plugin \""somePlugin\""]\nkey1 = "" + (staff.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationErrors()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationErrors()).getMessage()).isEqualTo((((""project.config: group \"""" + (staff.getName())) + ""\"" not in "") + (GroupList.FILE_NAME))); }",ba0aab439d2ed384c5de3c50f7f6d7a2582f1b5a,"@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add(""groups"", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add(""project.config"", (""[plugin \""somePlugin\""]\nkey1 = "" + (staff.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationErrors()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationErrors()).getMessage()).isEqualTo((((""project.config: account \"""" + (staff.getName())) + ""\"" not in "") + (GroupList.FILE_NAME))); }",b8778430f0be1ddaa4f7b36da0842c2bc1bb473a,"@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add(""groups"", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add(""project.config"", (""[plugin \""somePlugin\""]\nkey1 = "" + (staff.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationErrors()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationErrors()).getMessage()).isEqualTo((((""project.config: group \"""" + (staff.getName())) + ""\"" not in "") + (GroupList.FILE_NAME))); }",ba0aab439d2ed384c5de3c50f7f6d7a2582f1b5a,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_git_ProjectConfigTest.java,"@org.junit.Test public void editConfigMissingGroupTableEntry() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add(""groups"", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add(""project.config"", (""[access \""refs/heads/*\""]\n"" + ((("" exclusiveGroupPermissions = read submit\n"" + "" submit = group People Who Can Submit\n"") + "" upload = group Developers\n"") + "" read = group Developers\n""))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.common.data.AccessSection section = cfg.getAccessSection(""refs/heads/*""); com.google.gerrit.common.data.Permission submit = section.getPermission(Permission.SUBMIT); submit.add(new com.google.gerrit.common.data.PermissionRule(cfg.resolve(staff))); rev = commit(cfg); assertThat(text(rev, ""project.config"")).isEqualTo((""[access \""refs/heads/*\""]\n"" + (((("" exclusiveGroupPermissions = read submit\n"" + "" submit = group People Who Can Submit\n"") + ""\tsubmit = group Staff\n"") + "" upload = group Developers\n"") + "" read = group Developers\n""))); }",011520d3befae4937c612e8edfb3c2f0c665a5f8,"@org.junit.Test public void editConfigMissingGroupTableEntry() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add(""groups"", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add(""project.config"", (""[access \""refs/heads/*\""]\n"" + ((("" exclusiveGroupPermissions = read submit\n"" + "" submit = account People Who Can Submit\n"") + "" upload = account Developers\n"") + "" read = account Developers\n""))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.common.data.AccessSection section = cfg.getAccessSection(""refs/heads/*""); com.google.gerrit.common.data.Permission submit = section.getPermission(Permission.SUBMIT); submit.add(new com.google.gerrit.common.data.PermissionRule(cfg.resolve(staff))); rev = commit(cfg); assertThat(text(rev, ""project.config"")).isEqualTo((""[access \""refs/heads/*\""]\n"" + (((("" exclusiveGroupPermissions = read submit\n"" + "" submit = account People Who Can Submit\n"") + ""\tsubmit = account Staff\n"") + "" upload = account Developers\n"") + "" read = account Developers\n""))); }",532380f5b283c0357270035d4eada0081108eb22,"@org.junit.Test public void editConfigMissingGroupTableEntry() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add(""groups"", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add(""project.config"", (""[access \""refs/heads/*\""]\n"" + ((("" exclusiveGroupPermissions = read submit\n"" + "" submit = group People Who Can Submit\n"") + "" upload = group Developers\n"") + "" read = group Developers\n""))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.common.data.AccessSection section = cfg.getAccessSection(""refs/heads/*""); com.google.gerrit.common.data.Permission submit = section.getPermission(Permission.SUBMIT); submit.add(new com.google.gerrit.common.data.PermissionRule(cfg.resolve(staff))); rev = commit(cfg); assertThat(text(rev, ""project.config"")).isEqualTo((""[access \""refs/heads/*\""]\n"" + (((("" exclusiveGroupPermissions = read submit\n"" + "" submit = group People Who Can Submit\n"") + ""\tsubmit = group Staff\n"") + "" upload = group Developers\n"") + "" read = group Developers\n""))); }",011520d3befae4937c612e8edfb3c2f0c665a5f8,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_access_AccessCollection.java,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.access.AccessResource>> views() { return views; },3c2f3a3f8aaf8c1b00c54b0e69774cc748788e0c,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.access.AccessResource>> views() { return views; },e6bf58525280dd93c0bc6c80b00472274e2a680b,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.access.AccessResource>> views() { return views; },3c2f3a3f8aaf8c1b00c54b0e69774cc748788e0c,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_access_AccessCollection.java,"@java.lang.Override public com.google.gerrit.server.access.AccessResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",7bd2e2dd405856e614427678cfd0e7e4ff0a4213,"@java.lang.Override public com.google.gerrit.server.restapi.access.AccessResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",af56b9b8f19d2a1ec5a63db0a8a31f5091a83f6f,"@java.lang.Override public com.google.gerrit.server.access.AccessResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",7bd2e2dd405856e614427678cfd0e7e4ff0a4213,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_PutTag.java,"@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.api.projects.TagInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""Tag \"""" + (resource.getTagInfo().ref)) + ""\"" already exists"")); }",6b62186be544e37dd8d50a9744dd25e8025e20df,"@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.restapi.project.TagResource resource, com.google.gerrit.extensions.api.projects.TagInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""Tag \"""" + (resource.getTagInfo().ref)) + ""\"" already exists"")); }",e91e4bea1328fa7feffc880f8772c31aab545b8a,"@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.api.projects.TagInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""Tag \"""" + (resource.getTagInfo().ref)) + ""\"" already exists"")); }",6b62186be544e37dd8d50a9744dd25e8025e20df,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_DeleteBranch.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { permissionBackend.user(user).ref(rsrc.getBranchKey()).check(RefPermission.DELETE); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""branch "" + (rsrc.getBranchKey())) + "" has open changes"")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }",a6a96105ec943c6171961d7c32289b8db9ef4e2a,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { permissionBackend.user(user).ref(rsrc.getBranchKey()).check(RefPermission.DELETE); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""branch "" + (rsrc.getBranchKey())) + "" has open changes"")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.restapi.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }",ea67472683ebb2ee7ab50f367f74eee484e8e2ff,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { permissionBackend.user(user).ref(rsrc.getBranchKey()).check(RefPermission.DELETE); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""branch "" + (rsrc.getBranchKey())) + "" has open changes"")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.restapi.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }",c928126fa6db536238fead148ca990e1179a9874,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_GetOptions.java,@java.lang.Override public com.google.gerrit.extensions.common.GroupOptionsInfo apply(com.google.gerrit.server.group.GroupResource resource) { return com.google.gerrit.server.group.GroupJson.createOptions(resource.getGroup()); },382365b0799d373e0005cad2b26476ce9e14fcd9,@java.lang.Override public com.google.gerrit.extensions.common.GroupOptionsInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource) { return com.google.gerrit.server.restapi.group.GroupJson.createOptions(resource.getGroup()); },3971cdd033715a326038ee09fccd783e2ad6687c,@java.lang.Override public com.google.gerrit.extensions.common.GroupOptionsInfo apply(com.google.gerrit.server.group.GroupResource resource) { return com.google.gerrit.server.restapi.group.GroupJson.createOptions(resource.getGroup()); },626af36ce2f000fdb8ad82bc9ca6fe83276ed88b,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_QueryGroups.java,"@org.kohsuke.args4j.Option(name = ""-o"", usage = ""Output options per group"") public void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o); }",cbdee3b15098a7bac1982d11145343865c2f7bda,"@org.kohsuke.args4j.Option(name = ""-o"", usage = ""Output options per account"") public void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o); }",33f8045fe2ef0e7c148f9ca3138d92a293fe9556,"@org.kohsuke.args4j.Option(name = ""-o"", usage = ""Output options per group"") public void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o); }",cbdee3b15098a7bac1982d11145343865c2f7bda,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_QueryGroups.java,"@org.kohsuke.args4j.Option(name = ""--query2"", aliases = { ""-q2"" }, usage = ""group query"") public void setQuery(java.lang.String query) { this.query = query; }",c99b69dbb077532e768c6463038459f03caf3c63,"@org.kohsuke.args4j.Option(name = ""--query2"", aliases = { ""-q2"" }, usage = ""account query"") public void setQuery(java.lang.String query) { this.query = query; }",c6ac718ac760324211492b1f8eeac3b995c948e8,"@org.kohsuke.args4j.Option(name = ""--query2"", aliases = { ""-q2"" }, usage = ""group query"") public void setQuery(java.lang.String query) { this.query = query; }",c99b69dbb077532e768c6463038459f03caf3c63,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_GetDashboard.java,"@java.lang.Override public com.google.gerrit.extensions.api.projects.DashboardInfo apply(com.google.gerrit.server.project.DashboardResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if ((inherited) && (!(rsrc.isProjectDefault()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""inherited flag can only be used with default""); } if (rsrc.isProjectDefault()) { try { rsrc = defaultOf(rsrc.getProjectState(), rsrc.getUser()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } } return com.google.gerrit.server.project.DashboardsCollection.parse(rsrc.getProjectState().getProject(), rsrc.getRefName().substring(com.google.gerrit.server.project.REFS_DASHBOARDS.length()), rsrc.getPathName(), rsrc.getConfig(), rsrc.getProjectState().getName(), true); }",24fbb58b0c7f5abd77cb395aaf10b26fd95c80f6,"@java.lang.Override public com.google.gerrit.extensions.api.projects.DashboardInfo apply(com.google.gerrit.server.restapi.project.DashboardResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if ((inherited) && (!(rsrc.isProjectDefault()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""inherited flag can only be used with default""); } if (rsrc.isProjectDefault()) { try { rsrc = defaultOf(rsrc.getProjectState(), rsrc.getUser()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } } return com.google.gerrit.server.restapi.project.DashboardsCollection.parse(rsrc.getProjectState().getProject(), rsrc.getRefName().substring(com.google.gerrit.server.restapi.project.REFS_DASHBOARDS.length()), rsrc.getPathName(), rsrc.getConfig(), rsrc.getProjectState().getName(), true); }",1bfde0dfec0c5406d196d1b0be4eb5ff7df8deb2,"@java.lang.Override public com.google.gerrit.extensions.api.projects.DashboardInfo apply(com.google.gerrit.server.project.DashboardResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if ((inherited) && (!(rsrc.isProjectDefault()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""inherited flag can only be used with default""); } if (rsrc.isProjectDefault()) { try { rsrc = defaultOf(rsrc.getProjectState(), rsrc.getUser()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } } return com.google.gerrit.server.restapi.project.DashboardsCollection.parse(rsrc.getProjectState().getProject(), rsrc.getRefName().substring(com.google.gerrit.server.restapi.project.REFS_DASHBOARDS.length()), rsrc.getPathName(), rsrc.getConfig(), rsrc.getProjectState().getName(), true); }",8ef635b7b874b334235b80ba5adfa7fb4ef2dddd,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_GetDashboard.java,"private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = projectState.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }",9295570fda4f31b7c80eab7777674a3bb1605d2a,"private com.google.gerrit.server.restapi.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = projectState.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }",087554f24d593c621096e4ef42e72169af8c3436,"private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = projectState.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }",05238778f53bde7e0adefeb7568de23c45a9385a,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_GetDashboard.java,"private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id)); java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0)); java.lang.String path = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards.parse(new com.google.gerrit.server.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.IdString.fromUrl(((ref + ':') + path))); }",e9d50afb916b499ada2b97b8678dd239f3e4fd4f,"private com.google.gerrit.server.restapi.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id)); java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0)); java.lang.String path = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards.parse(new com.google.gerrit.server.restapi.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.IdString.fromUrl(((ref + ':') + path))); }",172e562f25a198994ef3389d2ffd5bd580bb5a46,"private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id)); java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0)); java.lang.String path = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards.parse(new com.google.gerrit.server.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.IdString.fromUrl(((ref + ':') + path))); }",e9d50afb916b499ada2b97b8678dd239f3e4fd4f,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_RobotComments.java,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.RobotCommentResource>> views() { return views; },31694de8cf9e7e0dadc86a16beb9ab12845818e3,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.change.RobotCommentResource>> views() { return views; },1e1e4807a9098d7c1baef8b61fb4765847879183,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.RobotCommentResource>> views() { return views; },31694de8cf9e7e0dadc86a16beb9ab12845818e3,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_query_group_AbstractQueryGroupsTest.java,"@org.junit.Test public void byOwner() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo ownerGroup = createGroup(name(""owner-group"")); com.google.gerrit.extensions.common.GroupInfo group = createGroupWithOwner(name(""group""), ownerGroup); createGroup(name(""group2"")); assertQuery((""owner:"" + (group.id))); assertQuery((""owner:"" + (ownerGroup.id)), group, ownerGroup); assertQuery((""owner:"" + (ownerGroup.name)), group, ownerGroup); }",61fac5ec58d26b4188b3138425110563e8881070,"@org.junit.Test public void byOwner() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo ownerGroup = createGroup(name(""owner-account"")); com.google.gerrit.extensions.common.GroupInfo group = createGroupWithOwner(name(""group""), ownerGroup); createGroup(name(""group2"")); assertQuery((""owner:"" + (group.id))); assertQuery((""owner:"" + (ownerGroup.id)), group, ownerGroup); assertQuery((""owner:"" + (ownerGroup.name)), group, ownerGroup); }",e26aeaa99816300048c137aef105a3c486af215e,"@org.junit.Test public void byOwner() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo ownerGroup = createGroup(name(""owner-group"")); com.google.gerrit.extensions.common.GroupInfo group = createGroupWithOwner(name(""group""), ownerGroup); createGroup(name(""group2"")); assertQuery((""owner:"" + (group.id))); assertQuery((""owner:"" + (ownerGroup.id)), group, ownerGroup); assertQuery((""owner:"" + (ownerGroup.name)), group, ownerGroup); }",61fac5ec58d26b4188b3138425110563e8881070,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_RobotComments.java,"@java.lang.Override public com.google.gerrit.server.change.RobotCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.RobotComment c : commentsUtil.robotCommentsByPatchSet(notes, rev.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.change.RobotCommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",e7ca083999f6ab8de8ce7588b72d099b3ec9be5c,"@java.lang.Override public com.google.gerrit.server.restapi.change.RobotCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.RobotComment c : commentsUtil.robotCommentsByPatchSet(notes, rev.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.restapi.change.RobotCommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",40bd4539eee26ea8c66cd05b3593bf1c90a46a19,"@java.lang.Override public com.google.gerrit.server.change.RobotCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.RobotComment c : commentsUtil.robotCommentsByPatchSet(notes, rev.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.change.RobotCommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",e7ca083999f6ab8de8ce7588b72d099b3ec9be5c,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_query_group_AbstractQueryGroupsTest.java,"@org.junit.Test public void byName() throws java.lang.Exception { assertQuery(""name:non-existing""); GroupInfo group = createGroup(name(""Group"")); assertQuery((""name:"" + (group.name)), group); assertQuery((""name:"" + (group.name.toLowerCase(Locale.US)))); GroupInfo groupWithHyphen = createGroup(name(""group-with-hyphen"")); createGroup(name(""group-no-match-with-hyphen"")); assertQuery((""name:"" + (groupWithHyphen.name)), groupWithHyphen); }",7ecc119f6246309cc67354cdd3951714bc977875,"@org.junit.Test public void byName() throws java.lang.Exception { assertQuery(""name:non-existing""); GroupInfo group = createGroup(name(""Group"")); assertQuery((""name:"" + (group.name)), group); assertQuery((""name:"" + (group.name.toLowerCase(Locale.US)))); GroupInfo groupWithHyphen = createGroup(name(""account-with-hyphen"")); createGroup(name(""account-no-match-with-hyphen"")); assertQuery((""name:"" + (groupWithHyphen.name)), groupWithHyphen); }",0ac81c112370d9a0b4ad07c8b5a55e882ced6d94,"@org.junit.Test public void byName() throws java.lang.Exception { assertQuery(""name:non-existing""); GroupInfo group = createGroup(name(""Group"")); assertQuery((""name:"" + (group.name)), group); assertQuery((""name:"" + (group.name.toLowerCase(Locale.US)))); GroupInfo groupWithHyphen = createGroup(name(""group-with-hyphen"")); createGroup(name(""group-no-match-with-hyphen"")); assertQuery((""name:"" + (groupWithHyphen.name)), groupWithHyphen); }",7ecc119f6246309cc67354cdd3951714bc977875,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_query_group_AbstractQueryGroupsTest.java,"@org.junit.Test public void byDefaultField() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name(""foo-group"")); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name(""group2"")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name(""group3""), (""decription that contains foo and the UUID of group2: "" + (group2.id))); assertQuery(""non-existing""); assertQuery(""foo"", group1, group3); assertQuery(group2.id, group2, group3); }",069440872697f3805ccd5377892f469eef95c6e3,"@org.junit.Test public void byDefaultField() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name(""foo-account"")); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name(""group2"")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name(""group3""), (""decription that contains foo and the UUID of group2: "" + (group2.id))); assertQuery(""non-existing""); assertQuery(""foo"", group1, group3); assertQuery(group2.id, group2, group3); }",d59112d7e9c89c31c8b5a196c103aedb4f1211a2,"@org.junit.Test public void byDefaultField() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name(""foo-group"")); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name(""group2"")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name(""group3""), (""decription that contains foo and the UUID of group2: "" + (group2.id))); assertQuery(""non-existing""); assertQuery(""foo"", group1, group3); assertQuery(group2.id, group2, group3); }",069440872697f3805ccd5377892f469eef95c6e3,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_GetContent.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String path = rsrc.getPatchKey().get(); if (Patch.COMMIT_MSG.equals(path)) { java.lang.String msg = getMessage(rsrc.getRevision().getChangeResource().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(msg).setContentType(FileContentUtil.TEXT_X_GERRIT_COMMIT_MESSAGE).base64(); } else if (Patch.MERGE_LIST.equals(path)) { byte[] mergeList = getMergeList(rsrc.getRevision().getChangeResource().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(mergeList).setContentType(FileContentUtil.TEXT_X_GERRIT_MERGE_LIST).base64(); } return fileContentUtil.getContent(projectCache.checkedGet(rsrc.getRevision().getProject()), org.eclipse.jgit.lib.ObjectId.fromString(rsrc.getRevision().getPatchSet().getRevision().get()), path, parent); }",0f92bf92eadb6140e64c0863e28e792c1acd2e2c,"@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.restapi.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String path = rsrc.getPatchKey().get(); if (Patch.COMMIT_MSG.equals(path)) { java.lang.String msg = getMessage(rsrc.getRevision().getChangeResource().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(msg).setContentType(FileContentUtil.TEXT_X_GERRIT_COMMIT_MESSAGE).base64(); } else if (Patch.MERGE_LIST.equals(path)) { byte[] mergeList = getMergeList(rsrc.getRevision().getChangeResource().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(mergeList).setContentType(FileContentUtil.TEXT_X_GERRIT_MERGE_LIST).base64(); } return fileContentUtil.getContent(projectCache.checkedGet(rsrc.getRevision().getProject()), org.eclipse.jgit.lib.ObjectId.fromString(rsrc.getRevision().getPatchSet().getRevision().get()), path, parent); }",ab3ec9850fca29c99f6c19c174f2002e75b8c37c,"@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String path = rsrc.getPatchKey().get(); if (Patch.COMMIT_MSG.equals(path)) { java.lang.String msg = getMessage(rsrc.getRevision().getChangeResource().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(msg).setContentType(FileContentUtil.TEXT_X_GERRIT_COMMIT_MESSAGE).base64(); } else if (Patch.MERGE_LIST.equals(path)) { byte[] mergeList = getMergeList(rsrc.getRevision().getChangeResource().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(mergeList).setContentType(FileContentUtil.TEXT_X_GERRIT_MERGE_LIST).base64(); } return fileContentUtil.getContent(projectCache.checkedGet(rsrc.getRevision().getProject()), org.eclipse.jgit.lib.ObjectId.fromString(rsrc.getRevision().getPatchSet().getRevision().get()), path, parent); }",0f92bf92eadb6140e64c0863e28e792c1acd2e2c,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupRebuilderTest.java,"@org.junit.Test public void fixupCommitPostDatesAllAuditEventsEvenIfAuditEventsAreInTheFuture() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); java.util.stream.IntStream.range(0, 20).forEach(( i) -> com.google.gerrit.common.TimeUtil.nowTs()); java.sql.Timestamp future = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.testing.TestTimeUtil.resetWithClockStep(1, java.util.concurrent.TimeUnit.SECONDS); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId(byId(g, ""x""), byId(g, ""y""), byId(g, ""z"")).byIdAudit(addById(g, ""x"", 8, future)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), ""Create group""); assertCommit(log.get(1), ""Update group\n\nAdd-group: Group <x>"", ""Account 8"", ""8@server-id""); assertServerCommit(log.get(2), ""Update group\n\nAdd-group: Group <y>\nAdd-group: Group <z>""); assertThat(log.stream().map(( c) -> c.committer.date).collect(toImmutableList())).named(""%s"", log).isOrdered(); assertThat(com.google.gerrit.common.TimeUtil.nowTs()).isLessThan(future); }",b436fa49fe679a5613f17e90b868861986167e64,"@org.junit.Test public void fixupCommitPostDatesAllAuditEventsEvenIfAuditEventsAreInTheFuture() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); java.util.stream.IntStream.range(0, 20).forEach(( i) -> com.google.gerrit.common.TimeUtil.nowTs()); java.sql.Timestamp future = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.testing.TestTimeUtil.resetWithClockStep(1, java.util.concurrent.TimeUnit.SECONDS); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId(byId(g, ""x""), byId(g, ""y""), byId(g, ""z"")).byIdAudit(addById(g, ""x"", 8, future)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), ""Create account""); assertCommit(log.get(1), ""Update account\n\nAdd-account: Group <x>"", ""Account 8"", ""8@server-id""); assertServerCommit(log.get(2), ""Update account\n\nAdd-account: Group <y>\nAdd-account: Group <z>""); assertThat(log.stream().map(( c) -> c.committer.date).collect(toImmutableList())).named(""%s"", log).isOrdered(); assertThat(com.google.gerrit.common.TimeUtil.nowTs()).isLessThan(future); }",5153431fa1a6270814f34572ccdfb1078e9265a8,"@org.junit.Test public void fixupCommitPostDatesAllAuditEventsEvenIfAuditEventsAreInTheFuture() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); java.util.stream.IntStream.range(0, 20).forEach(( i) -> com.google.gerrit.common.TimeUtil.nowTs()); java.sql.Timestamp future = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.testing.TestTimeUtil.resetWithClockStep(1, java.util.concurrent.TimeUnit.SECONDS); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId(byId(g, ""x""), byId(g, ""y""), byId(g, ""z"")).byIdAudit(addById(g, ""x"", 8, future)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), ""Create group""); assertCommit(log.get(1), ""Update group\n\nAdd-group: Group <x>"", ""Account 8"", ""8@server-id""); assertServerCommit(log.get(2), ""Update group\n\nAdd-group: Group <y>\nAdd-group: Group <z>""); assertThat(log.stream().map(( c) -> c.committer.date).collect(toImmutableList())).named(""%s"", log).isOrdered(); assertThat(com.google.gerrit.common.TimeUtil.nowTs()).isLessThan(future); }",b436fa49fe679a5613f17e90b868861986167e64,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupRebuilderTest.java,"@org.junit.Test public void memberAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = GroupRebuilderTest.builder().group(g).members(member(g, 1)).memberAudit(addMember(g, 1, 8, t2), addAndRemoveMember(g, 2, 8, t1, 9, t3)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), ""Create group""); assertCommit(log.get(1), ""Update group\n\nAdd: Account 2 <2@server-id>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(2), ""Update group\n\nAdd: Account 1 <1@server-id>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(3), ""Update group\n\nRemove: Account 2 <2@server-id>"", ""Account 9"", ""9@server-id""); }",1cf6ce1636f13d8a2c6a326cb747c0c660e9996f,"@org.junit.Test public void memberAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = GroupRebuilderTest.builder().group(g).members(member(g, 1)).memberAudit(addMember(g, 1, 8, t2), addAndRemoveMember(g, 2, 8, t1, 9, t3)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), ""Create account""); assertCommit(log.get(1), ""Update account\n\nAdd: Account 2 <2@server-id>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(2), ""Update account\n\nAdd: Account 1 <1@server-id>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(3), ""Update account\n\nRemove: Account 2 <2@server-id>"", ""Account 9"", ""9@server-id""); }",64246ff13dcc78fe8ee4d1e475612ce2eb977e49,"@org.junit.Test public void memberAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = GroupRebuilderTest.builder().group(g).members(member(g, 1)).memberAudit(addMember(g, 1, 8, t2), addAndRemoveMember(g, 2, 8, t1, 9, t3)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), ""Create group""); assertCommit(log.get(1), ""Update group\n\nAdd: Account 2 <2@server-id>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(2), ""Update group\n\nAdd: Account 1 <1@server-id>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(3), ""Update group\n\nRemove: Account 2 <2@server-id>"", ""Account 9"", ""9@server-id""); }",1cf6ce1636f13d8a2c6a326cb747c0c660e9996f,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupRebuilderTest.java,"@org.junit.Test public void unauditedByIdAddedAtEnd() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId(byId(g, ""x""), byId(g, ""y""), byId(g, ""z"")).byIdAudit(addById(g, ""x"", 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), ""Create group""); assertCommit(log.get(1), ""Update group\n\nAdd-group: Group <x>"", ""Account 8"", ""8@server-id""); assertServerCommit(log.get(2), ""Update group\n\nAdd-group: Group <y>\nAdd-group: Group <z>""); }",5b84bc1b850446c0314068223bbed35ec7c9f242,"@org.junit.Test public void unauditedByIdAddedAtEnd() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId(byId(g, ""x""), byId(g, ""y""), byId(g, ""z"")).byIdAudit(addById(g, ""x"", 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), ""Create account""); assertCommit(log.get(1), ""Update account\n\nAdd-account: Group <x>"", ""Account 8"", ""8@server-id""); assertServerCommit(log.get(2), ""Update account\n\nAdd-account: Group <y>\nAdd-account: Group <z>""); }",aae78c5f0a6b98fc250c647deebfaafcc5fbf664,"@org.junit.Test public void unauditedByIdAddedAtEnd() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId(byId(g, ""x""), byId(g, ""y""), byId(g, ""z"")).byIdAudit(addById(g, ""x"", 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), ""Create group""); assertCommit(log.get(1), ""Update group\n\nAdd-group: Group <x>"", ""Account 8"", ""8@server-id""); assertServerCommit(log.get(2), ""Update group\n\nAdd-group: Group <y>\nAdd-group: Group <z>""); }",5b84bc1b850446c0314068223bbed35ec7c9f242,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupRebuilderTest.java,"@org.junit.Test public void redundantByIdAuditsAreIgnored() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t4 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t5 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId().byIdAudit(addById(g, ""x"", 8, t1), addById(g, ""x"", 8, t3), addById(g, ""x"", 9, t4), addAndRemoveById(g, ""x"", 8, t2, 9, t5)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), ""Create group""); assertCommit(log.get(1), ""Update group\n\nAdd-group: Group <x>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(2), ""Update group\n\nRemove-group: Group <x>"", ""Account 9"", ""9@server-id""); }",d5fbc8e06e9516929426a478b0c5fb231b47d724,"@org.junit.Test public void redundantByIdAuditsAreIgnored() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t4 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t5 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId().byIdAudit(addById(g, ""x"", 8, t1), addById(g, ""x"", 8, t3), addById(g, ""x"", 9, t4), addAndRemoveById(g, ""x"", 8, t2, 9, t5)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), ""Create account""); assertCommit(log.get(1), ""Update account\n\nAdd-account: Group <x>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(2), ""Update account\n\nRemove-account: Group <x>"", ""Account 9"", ""9@server-id""); }",b4ca51cc2dab786827351de71f0fa7ea66c480c3,"@org.junit.Test public void redundantByIdAuditsAreIgnored() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t4 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t5 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId().byIdAudit(addById(g, ""x"", 8, t1), addById(g, ""x"", 8, t3), addById(g, ""x"", 9, t4), addAndRemoveById(g, ""x"", 8, t2, 9, t5)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), ""Create group""); assertCommit(log.get(1), ""Update group\n\nAdd-group: Group <x>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(2), ""Update group\n\nRemove-group: Group <x>"", ""Account 9"", ""9@server-id""); }",d5fbc8e06e9516929426a478b0c5fb231b47d724,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupRebuilderTest.java,"@org.junit.Test public void unauditedMembershipsAddedAtEnd() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2), member(g, 3)).memberAudit(addMember(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), ""Create group""); assertCommit(log.get(1), ""Update group\n\nAdd: Account 1 <1@server-id>"", ""Account 8"", ""8@server-id""); assertServerCommit(log.get(2), ""Update group\n\nAdd: Account 2 <2@server-id>\nAdd: Account 3 <3@server-id>""); }",5c880e16a047f822b9bd0c0c62801afd576c69ed,"@org.junit.Test public void unauditedMembershipsAddedAtEnd() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2), member(g, 3)).memberAudit(addMember(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), ""Create account""); assertCommit(log.get(1), ""Update account\n\nAdd: Account 1 <1@server-id>"", ""Account 8"", ""8@server-id""); assertServerCommit(log.get(2), ""Update account\n\nAdd: Account 2 <2@server-id>\nAdd: Account 3 <3@server-id>""); }",a17d37b9868396d97609a2bea0dbf56c418a6140,"@org.junit.Test public void unauditedMembershipsAddedAtEnd() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2), member(g, 3)).memberAudit(addMember(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), ""Create group""); assertCommit(log.get(1), ""Update group\n\nAdd: Account 1 <1@server-id>"", ""Account 8"", ""8@server-id""); assertServerCommit(log.get(2), ""Update group\n\nAdd: Account 2 <2@server-id>\nAdd: Account 3 <3@server-id>""); }",5c880e16a047f822b9bd0c0c62801afd576c69ed,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupRebuilderTest.java,"@org.junit.Test public void auditsAtSameTimestampBrokenDownByUserAndType() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); java.sql.Timestamp ts = com.google.gerrit.common.TimeUtil.nowTs(); int user1 = 8; int user2 = 9; com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2), member(g, 3)).memberAudit(addMember(g, 1, user1, ts), addMember(g, 2, user2, ts), addMember(g, 3, user1, ts)).byId(byId(g, ""x""), byId(g, ""y""), byId(g, ""z"")).byIdAudit(addById(g, ""x"", user1, ts), addById(g, ""y"", user2, ts), addById(g, ""z"", user1, ts)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(5); assertServerCommit(log.get(0), ""Create group""); assertCommit(log.get(1), (""Update group\n"" + ((""\n"" + ""Add: Account 1 <1@server-id>\n"") + ""Add: Account 3 <3@server-id>"")), ""Account 8"", ""8@server-id""); assertCommit(log.get(2), ""Update group\n\nAdd-group: Group <x>\nAdd-group: Group <z>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(3), ""Update group\n\nAdd: Account 2 <2@server-id>"", ""Account 9"", ""9@server-id""); assertCommit(log.get(4), ""Update group\n\nAdd-group: Group <y>"", ""Account 9"", ""9@server-id""); }",3e761a2b586e3c7f252312778c216c657d8ecf9f,"@org.junit.Test public void auditsAtSameTimestampBrokenDownByUserAndType() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); java.sql.Timestamp ts = com.google.gerrit.common.TimeUtil.nowTs(); int user1 = 8; int user2 = 9; com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2), member(g, 3)).memberAudit(addMember(g, 1, user1, ts), addMember(g, 2, user2, ts), addMember(g, 3, user1, ts)).byId(byId(g, ""x""), byId(g, ""y""), byId(g, ""z"")).byIdAudit(addById(g, ""x"", user1, ts), addById(g, ""y"", user2, ts), addById(g, ""z"", user1, ts)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(5); assertServerCommit(log.get(0), ""Create account""); assertCommit(log.get(1), (""Update account\n"" + ((""\n"" + ""Add: Account 1 <1@server-id>\n"") + ""Add: Account 3 <3@server-id>"")), ""Account 8"", ""8@server-id""); assertCommit(log.get(2), ""Update account\n\nAdd-account: Group <x>\nAdd-account: Group <z>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(3), ""Update account\n\nAdd: Account 2 <2@server-id>"", ""Account 9"", ""9@server-id""); assertCommit(log.get(4), ""Update account\n\nAdd-account: Group <y>"", ""Account 9"", ""9@server-id""); }",85232ea5ab72ed5e78a79df8abaf9c4295477c1f,"@org.junit.Test public void auditsAtSameTimestampBrokenDownByUserAndType() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); java.sql.Timestamp ts = com.google.gerrit.common.TimeUtil.nowTs(); int user1 = 8; int user2 = 9; com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2), member(g, 3)).memberAudit(addMember(g, 1, user1, ts), addMember(g, 2, user2, ts), addMember(g, 3, user1, ts)).byId(byId(g, ""x""), byId(g, ""y""), byId(g, ""z"")).byIdAudit(addById(g, ""x"", user1, ts), addById(g, ""y"", user2, ts), addById(g, ""z"", user1, ts)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(5); assertServerCommit(log.get(0), ""Create group""); assertCommit(log.get(1), (""Update group\n"" + ((""\n"" + ""Add: Account 1 <1@server-id>\n"") + ""Add: Account 3 <3@server-id>"")), ""Account 8"", ""8@server-id""); assertCommit(log.get(2), ""Update group\n\nAdd-group: Group <x>\nAdd-group: Group <z>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(3), ""Update group\n\nAdd: Account 2 <2@server-id>"", ""Account 9"", ""9@server-id""); assertCommit(log.get(4), ""Update group\n\nAdd-group: Group <y>"", ""Account 9"", ""9@server-id""); }",3e761a2b586e3c7f252312778c216c657d8ecf9f,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupRebuilderTest.java,"@org.junit.Test public void byIdAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = GroupRebuilderTest.builder().group(g).byId(byId(g, ""x"")).byIdAudit(addById(g, ""x"", 8, t2), addAndRemoveById(g, ""y"", 8, t1, 9, t3)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), ""Create group""); assertCommit(log.get(1), ""Update group\n\nAdd-group: Group <y>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(2), ""Update group\n\nAdd-group: Group <x>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(3), ""Update group\n\nRemove-group: Group <y>"", ""Account 9"", ""9@server-id""); }",7b7e00b721a788aae8e0d84e161576bb92ccd689,"@org.junit.Test public void byIdAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = GroupRebuilderTest.builder().group(g).byId(byId(g, ""x"")).byIdAudit(addById(g, ""x"", 8, t2), addAndRemoveById(g, ""y"", 8, t1, 9, t3)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), ""Create account""); assertCommit(log.get(1), ""Update account\n\nAdd-account: Group <y>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(2), ""Update account\n\nAdd-account: Group <x>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(3), ""Update account\n\nRemove-account: Group <y>"", ""Account 9"", ""9@server-id""); }",4cc76a6a40a9bc20d9f45d164366b8c39862f182,"@org.junit.Test public void byIdAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs(); java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = GroupRebuilderTest.builder().group(g).byId(byId(g, ""x"")).byIdAudit(addById(g, ""x"", 8, t2), addAndRemoveById(g, ""y"", 8, t1, 9, t3)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), ""Create group""); assertCommit(log.get(1), ""Update group\n\nAdd-group: Group <y>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(2), ""Update group\n\nAdd-group: Group <x>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(3), ""Update group\n\nRemove-group: Group <y>"", ""Account 9"", ""9@server-id""); }",7b7e00b721a788aae8e0d84e161576bb92ccd689,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupRebuilderTest.java,"@org.junit.Test public void membersAndSubgroups() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2)).byId(byId(g, ""x""), byId(g, ""y"")).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(2); assertServerCommit(log.get(0), ""Create group""); assertServerCommit(log.get(1), (""Update group\n"" + ((((""\n"" + ""Add: Account 1 <1@server-id>\n"") + ""Add: Account 2 <2@server-id>\n"") + ""Add-group: Group <x>\n"") + ""Add-group: Group <y>""))); }",3858ddcdf7e9ede50bb487cf9c835e9b88432193,"@org.junit.Test public void membersAndSubgroups() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2)).byId(byId(g, ""x""), byId(g, ""y"")).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(2); assertServerCommit(log.get(0), ""Create account""); assertServerCommit(log.get(1), (""Update account\n"" + ((((""\n"" + ""Add: Account 1 <1@server-id>\n"") + ""Add: Account 2 <2@server-id>\n"") + ""Add-account: Group <x>\n"") + ""Add-account: Group <y>""))); }",a5f91c466d6ef243f0fe498e43fb79f7056d7891,"@org.junit.Test public void membersAndSubgroups() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2)).byId(byId(g, ""x""), byId(g, ""y"")).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(2); assertServerCommit(log.get(0), ""Create group""); assertServerCommit(log.get(1), (""Update group\n"" + ((((""\n"" + ""Add: Account 1 <1@server-id>\n"") + ""Add: Account 2 <2@server-id>\n"") + ""Add-group: Group <x>\n"") + ""Add-group: Group <y>""))); }",3858ddcdf7e9ede50bb487cf9c835e9b88432193,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupRebuilderTest.java,"@org.junit.Test public void allGroupFields() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); g.setDescription(""Description""); g.setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""owner"")); g.setVisibleToAll(true); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertServerCommit(log.get(0), ""Create group""); }",0f5513cac72432b83139d8b78e29fef5fee19a27,"@org.junit.Test public void allGroupFields() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); g.setDescription(""Description""); g.setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""owner"")); g.setVisibleToAll(true); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertServerCommit(log.get(0), ""Create account""); }",a177a54090ca1fa6b441b9fd7ce70c1d8e026de0,"@org.junit.Test public void allGroupFields() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); g.setDescription(""Description""); g.setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""owner"")); g.setVisibleToAll(true); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertServerCommit(log.get(0), ""Create group""); }",0f5513cac72432b83139d8b78e29fef5fee19a27,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupRebuilderTest.java,"@org.junit.Test public void memberAuditLegacyRemoved() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 2)).memberAudit(addAndLegacyRemoveMember(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs()), addMember(g, 2, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), ""Create group""); assertCommit(log.get(1), ""Update group\n\nAdd: Account 1 <1@server-id>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(2), ""Update group\n\nRemove: Account 1 <1@server-id>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(3), ""Update group\n\nAdd: Account 2 <2@server-id>"", ""Account 8"", ""8@server-id""); }",84cbadc479ede55a13943931f35749a17ec9d56b,"@org.junit.Test public void memberAuditLegacyRemoved() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 2)).memberAudit(addAndLegacyRemoveMember(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs()), addMember(g, 2, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), ""Create account""); assertCommit(log.get(1), ""Update account\n\nAdd: Account 1 <1@server-id>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(2), ""Update account\n\nRemove: Account 1 <1@server-id>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(3), ""Update account\n\nAdd: Account 2 <2@server-id>"", ""Account 8"", ""8@server-id""); }",1cc2d1650be4d416bb037bb5be5fa6fc06aaa731,"@org.junit.Test public void memberAuditLegacyRemoved() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 2)).memberAudit(addAndLegacyRemoveMember(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs()), addMember(g, 2, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), ""Create group""); assertCommit(log.get(1), ""Update group\n\nAdd: Account 1 <1@server-id>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(2), ""Update group\n\nRemove: Account 1 <1@server-id>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(3), ""Update group\n\nAdd: Account 2 <2@server-id>"", ""Account 8"", ""8@server-id""); }",84cbadc479ede55a13943931f35749a17ec9d56b,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupRebuilderTest.java,"@org.junit.Test public void minimalGroupFields() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertCommit(log.get(0), ""Create group"", com.google.gerrit.server.group.db.SERVER_NAME, com.google.gerrit.server.group.db.SERVER_EMAIL); assertThat(logGroupNames()).isEmpty(); }",1ccf1dbb337b60aafe089a84f1f6763d2bc2aa88,"@org.junit.Test public void minimalGroupFields() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertCommit(log.get(0), ""Create account"", com.google.gerrit.server.group.db.SERVER_NAME, com.google.gerrit.server.group.db.SERVER_EMAIL); assertThat(logGroupNames()).isEmpty(); }",67b5257bce0cc097d10a9368f1d3a134591c2d9a,"@org.junit.Test public void minimalGroupFields() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertCommit(log.get(0), ""Create group"", com.google.gerrit.server.group.db.SERVER_NAME, com.google.gerrit.server.group.db.SERVER_EMAIL); assertThat(logGroupNames()).isEmpty(); }",1ccf1dbb337b60aafe089a84f1f6763d2bc2aa88,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_GetContent.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.project.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return fileContentUtil.getContent(rsrc.getProjectState(), rsrc.getRev(), rsrc.getPath(), null); }",c80a77faf2a3d91531955603aa1b77a5fa6690d8,"@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.restapi.project.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return fileContentUtil.getContent(rsrc.getProjectState(), rsrc.getRev(), rsrc.getPath(), null); }",b9c36b9cc552713d0073c5b29d50bef472546337,"@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.project.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return fileContentUtil.getContent(rsrc.getProjectState(), rsrc.getRev(), rsrc.getPath(), null); }",c80a77faf2a3d91531955603aa1b77a5fa6690d8,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_query_group_AbstractQueryGroupsTest.java,"@org.junit.Test public void byDescription() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroupWithDescription(name(""group1""), ""This is a test group.""); com.google.gerrit.extensions.common.GroupInfo group2 = createGroupWithDescription(name(""group2""), ""ANOTHER TEST GROUP.""); createGroupWithDescription(name(""group3""), ""Maintainers of project foo.""); assertQuery(""description:test"", group1, group2); assertQuery(""description:non-existing""); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(""description operator requires a value""); assertQuery(""description:\""\""""); }",4223e38b7220799f322ee6d2f6d897557450a169,"@org.junit.Test public void byDescription() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroupWithDescription(name(""group1""), ""This is a test account.""); com.google.gerrit.extensions.common.GroupInfo group2 = createGroupWithDescription(name(""group2""), ""ANOTHER TEST GROUP.""); createGroupWithDescription(name(""group3""), ""Maintainers of project foo.""); assertQuery(""description:test"", group1, group2); assertQuery(""description:non-existing""); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(""description operator requires a value""); assertQuery(""description:\""\""""); }",3ba99e654d3816aeef88de75c96775fbcef7bee1,"@org.junit.Test public void byDescription() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroupWithDescription(name(""group1""), ""This is a test group.""); com.google.gerrit.extensions.common.GroupInfo group2 = createGroupWithDescription(name(""group2""), ""ANOTHER TEST GROUP.""); createGroupWithDescription(name(""group3""), ""Maintainers of project foo.""); assertQuery(""description:test"", group1, group2); assertQuery(""description:non-existing""); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(""description operator requires a value""); assertQuery(""description:\""\""""); }",4223e38b7220799f322ee6d2f6d897557450a169,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_query_group_AbstractQueryGroupsTest.java,"@org.junit.Test public void bySubgroups() throws java.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(GroupField.SUBGROUP); assertFailingQuery(""subgroup:someGroupName"", ""'subgroup' operator is not supported by group index version""); return; } com.google.gerrit.extensions.common.GroupInfo superParentGroup = createGroup(name(""superParentGroup"")); com.google.gerrit.extensions.common.GroupInfo parentGroup1 = createGroup(name(""parentGroup1"")); com.google.gerrit.extensions.common.GroupInfo parentGroup2 = createGroup(name(""parentGroup2"")); com.google.gerrit.extensions.common.GroupInfo subGroup = createGroup(name(""subGroup"")); gApi.groups().id(superParentGroup.id).addGroups(parentGroup1.id, parentGroup2.id); gApi.groups().id(parentGroup1.id).addGroups(subGroup.id); gApi.groups().id(parentGroup2.id).addGroups(subGroup.id); assertQuery((""subgroup:"" + (subGroup.id)), parentGroup1, parentGroup2); assertQuery((""subgroup:"" + (parentGroup1.id)), superParentGroup); gApi.groups().id(superParentGroup.id).addGroups(subGroup.id); gApi.groups().id(parentGroup1.id).removeGroups(subGroup.id); assertQuery((""subgroup:"" + (subGroup.id)), superParentGroup, parentGroup2); }",28b6a2e4dc91ea5787b3090ea0dee9953c217050,"@org.junit.Test public void bySubgroups() throws java.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(GroupField.SUBGROUP); assertFailingQuery(""subgroup:someGroupName"", ""'subgroup' operator is not supported by account index version""); return; } com.google.gerrit.extensions.common.GroupInfo superParentGroup = createGroup(name(""superParentGroup"")); com.google.gerrit.extensions.common.GroupInfo parentGroup1 = createGroup(name(""parentGroup1"")); com.google.gerrit.extensions.common.GroupInfo parentGroup2 = createGroup(name(""parentGroup2"")); com.google.gerrit.extensions.common.GroupInfo subGroup = createGroup(name(""subGroup"")); gApi.groups().id(superParentGroup.id).addGroups(parentGroup1.id, parentGroup2.id); gApi.groups().id(parentGroup1.id).addGroups(subGroup.id); gApi.groups().id(parentGroup2.id).addGroups(subGroup.id); assertQuery((""subgroup:"" + (subGroup.id)), parentGroup1, parentGroup2); assertQuery((""subgroup:"" + (parentGroup1.id)), superParentGroup); gApi.groups().id(superParentGroup.id).addGroups(subGroup.id); gApi.groups().id(parentGroup1.id).removeGroups(subGroup.id); assertQuery((""subgroup:"" + (subGroup.id)), superParentGroup, parentGroup2); }",64d7e1e191f5c992f922af83b30705d705d86b8c,"@org.junit.Test public void bySubgroups() throws java.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(GroupField.SUBGROUP); assertFailingQuery(""subgroup:someGroupName"", ""'subgroup' operator is not supported by group index version""); return; } com.google.gerrit.extensions.common.GroupInfo superParentGroup = createGroup(name(""superParentGroup"")); com.google.gerrit.extensions.common.GroupInfo parentGroup1 = createGroup(name(""parentGroup1"")); com.google.gerrit.extensions.common.GroupInfo parentGroup2 = createGroup(name(""parentGroup2"")); com.google.gerrit.extensions.common.GroupInfo subGroup = createGroup(name(""subGroup"")); gApi.groups().id(superParentGroup.id).addGroups(parentGroup1.id, parentGroup2.id); gApi.groups().id(parentGroup1.id).addGroups(subGroup.id); gApi.groups().id(parentGroup2.id).addGroups(subGroup.id); assertQuery((""subgroup:"" + (subGroup.id)), parentGroup1, parentGroup2); assertQuery((""subgroup:"" + (parentGroup1.id)), superParentGroup); gApi.groups().id(superParentGroup.id).addGroups(subGroup.id); gApi.groups().id(parentGroup1.id).removeGroups(subGroup.id); assertQuery((""subgroup:"" + (subGroup.id)), superParentGroup, parentGroup2); }",28b6a2e4dc91ea5787b3090ea0dee9953c217050,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_query_group_AbstractQueryGroupsTest.java,"@org.junit.Test public void byMember() throws java.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(GroupField.MEMBER); assertFailingQuery(""member:someName"", ""'member' operator is not supported by group index version""); return; } com.google.gerrit.extensions.common.AccountInfo user1 = createAccount(""user1"", ""User1"", ""user1@example.com""); com.google.gerrit.extensions.common.AccountInfo user2 = createAccount(""user2"", ""User2"", ""user2@example.com""); com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name(""group1""), user1); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name(""group2""), user2); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup(name(""group3""), user1); assertQuery((""member:"" + (user1.name)), group1, group3); assertQuery((""member:"" + (user1.email)), group1, group3); gApi.groups().id(group3.id).removeMembers(user1.username); gApi.groups().id(group2.id).addMembers(user1.username); assertQuery((""member:"" + (user1.name)), group1, group2); }",674b9b137f17ece7f71555f0f9affa23e19508d1,"@org.junit.Test public void byMember() throws java.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(GroupField.MEMBER); assertFailingQuery(""member:someName"", ""'member' operator is not supported by account index version""); return; } com.google.gerrit.extensions.common.AccountInfo user1 = createAccount(""user1"", ""User1"", ""user1@example.com""); com.google.gerrit.extensions.common.AccountInfo user2 = createAccount(""user2"", ""User2"", ""user2@example.com""); com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name(""group1""), user1); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name(""group2""), user2); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup(name(""group3""), user1); assertQuery((""member:"" + (user1.name)), group1, group3); assertQuery((""member:"" + (user1.email)), group1, group3); gApi.groups().id(group3.id).removeMembers(user1.username); gApi.groups().id(group2.id).addMembers(user1.username); assertQuery((""member:"" + (user1.name)), group1, group2); }",798156d17464d387f85aed5220f3586c6ef55f60,"@org.junit.Test public void byMember() throws java.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(GroupField.MEMBER); assertFailingQuery(""member:someName"", ""'member' operator is not supported by group index version""); return; } com.google.gerrit.extensions.common.AccountInfo user1 = createAccount(""user1"", ""User1"", ""user1@example.com""); com.google.gerrit.extensions.common.AccountInfo user2 = createAccount(""user2"", ""User2"", ""user2@example.com""); com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name(""group1""), user1); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name(""group2""), user2); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup(name(""group3""), user1); assertQuery((""member:"" + (user1.name)), group1, group3); assertQuery((""member:"" + (user1.email)), group1, group3); gApi.groups().id(group3.id).removeMembers(user1.username); gApi.groups().id(group2.id).addMembers(user1.username); assertQuery((""member:"" + (user1.name)), group1, group2); }",674b9b137f17ece7f71555f0f9affa23e19508d1,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_query_group_AbstractQueryGroupsTest.java,"@org.junit.Test public void byInname() throws java.lang.Exception { java.lang.String namePart = getSanitizedMethodName(); namePart = com.google.common.base.CharMatcher.is('_').removeFrom(namePart); com.google.gerrit.extensions.common.GroupInfo group1 = createGroup((""group-"" + namePart)); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(((""group-"" + namePart) + ""-2"")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup(((""group-"" + namePart) + ""3"")); assertQuery((""inname:"" + namePart), group1, group2, group3); assertQuery((""inname:"" + (namePart.toUpperCase(java.util.Locale.US))), group1, group2, group3); assertQuery((""inname:"" + (namePart.toLowerCase(java.util.Locale.US))), group1, group2, group3); }",509d2d618627ff071ee4a36c72cbf24a2b45f574,"@org.junit.Test public void byInname() throws java.lang.Exception { java.lang.String namePart = getSanitizedMethodName(); namePart = com.google.common.base.CharMatcher.is('_').removeFrom(namePart); com.google.gerrit.extensions.common.GroupInfo group1 = createGroup((""account-"" + namePart)); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(((""account-"" + namePart) + ""-2"")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup(((""account-"" + namePart) + ""3"")); assertQuery((""inname:"" + namePart), group1, group2, group3); assertQuery((""inname:"" + (namePart.toUpperCase(java.util.Locale.US))), group1, group2, group3); assertQuery((""inname:"" + (namePart.toLowerCase(java.util.Locale.US))), group1, group2, group3); }",3e9bb1b1589d2b3e7b94c67a1770c6616e56558a,"@org.junit.Test public void byInname() throws java.lang.Exception { java.lang.String namePart = getSanitizedMethodName(); namePart = com.google.common.base.CharMatcher.is('_').removeFrom(namePart); com.google.gerrit.extensions.common.GroupInfo group1 = createGroup((""group-"" + namePart)); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(((""group-"" + namePart) + ""-2"")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup(((""group-"" + namePart) + ""3"")); assertQuery((""inname:"" + namePart), group1, group2, group3); assertQuery((""inname:"" + (namePart.toUpperCase(java.util.Locale.US))), group1, group2, group3); assertQuery((""inname:"" + (namePart.toLowerCase(java.util.Locale.US))), group1, group2, group3); }",509d2d618627ff071ee4a36c72cbf24a2b45f574,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_query_group_AbstractQueryGroupsTest.java,"@org.junit.Test public void byIsVisibleToAll() throws java.lang.Exception { assertQuery(""is:visibletoall""); com.google.gerrit.extensions.common.GroupInfo groupThatIsVisibleToAll = createGroupThatIsVisibleToAll(name(""group-that-is-visible-to-all"")); createGroup(name(""group"")); assertQuery(""is:visibletoall"", groupThatIsVisibleToAll); }",e519c85bd4d8f6dbd311a7f0fce187419ce22958,"@org.junit.Test public void byIsVisibleToAll() throws java.lang.Exception { assertQuery(""is:visibletoall""); com.google.gerrit.extensions.common.GroupInfo groupThatIsVisibleToAll = createGroupThatIsVisibleToAll(name(""account-that-is-visible-to-all"")); createGroup(name(""group"")); assertQuery(""is:visibletoall"", groupThatIsVisibleToAll); }",b125d39aa4dce16b001abe4f266c2db8aaed32b8,"@org.junit.Test public void byIsVisibleToAll() throws java.lang.Exception { assertQuery(""is:visibletoall""); com.google.gerrit.extensions.common.GroupInfo groupThatIsVisibleToAll = createGroupThatIsVisibleToAll(name(""group-that-is-visible-to-all"")); createGroup(name(""group"")); assertQuery(""is:visibletoall"", groupThatIsVisibleToAll); }",e519c85bd4d8f6dbd311a7f0fce187419ce22958,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_rest_project_DeleteBranchIT.java,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""noteDb.groups.write"", value = ""true"") public void deleteGroupBranch_Conflict() throws java.lang.Exception { allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""Not allowed to delete group branch.""); branch(new com.google.gerrit.reviewdb.client.Branch.NameKey(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()))).delete(); }",e3c0ec496d217bbb74d5cd962b0d46bdc4d0cb5c,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""noteDb.groups.write"", value = ""true"") public void deleteGroupBranch_Conflict() throws java.lang.Exception { allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""Not allowed to delete account branch.""); branch(new com.google.gerrit.reviewdb.client.Branch.NameKey(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()))).delete(); }",a07ba4c78970497accee93e377a00cf396e3abf9,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""noteDb.groups.write"", value = ""true"") public void deleteGroupBranch_Conflict() throws java.lang.Exception { allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""Not allowed to delete group branch.""); branch(new com.google.gerrit.reviewdb.client.Branch.NameKey(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()))).delete(); }",e3c0ec496d217bbb74d5cd962b0d46bdc4d0cb5c,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_PutBranch.java,"@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""Branch \"""" + (rsrc.getRef())) + ""\"" already exists"")); }",dcf0802f9a5c63a75689c6b4d762d0a95771c9c8,"@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.restapi.project.BranchResource rsrc, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""Branch \"""" + (rsrc.getRef())) + ""\"" already exists"")); }",5cabd9c40a2ff6ba46972897fad041307c1281bc,"@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""Branch \"""" + (rsrc.getRef())) + ""\"" already exists"")); }",dcf0802f9a5c63a75689c6b4d762d0a95771c9c8,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_changes_CommentApiImpl.java,com.google.gerrit.server.api.changes.CommentApiImpl create(com.google.gerrit.server.change.CommentResource c);,b9259fb961adc309d06b6d189ff9d9993d9b5d71,com.google.gerrit.server.api.changes.CommentApiImpl create(com.google.gerrit.server.restapi.change.CommentResource c);,d50cd939267f271d7bb0b646eab84ffd9f57bcb1,com.google.gerrit.server.api.changes.CommentApiImpl create(com.google.gerrit.server.change.CommentResource c);,b9259fb961adc309d06b6d189ff9d9993d9b5d71,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_Move.java,"@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Move Change"").setTitle(""Move change to a different branch"").setVisible(and(change.getStatus().isOpen(), and(permissionBackend.user(rsrc.getUser()).ref(change.getDest()).testCond(com.google.gerrit.server.change.CREATE_CHANGE), rsrc.permissions().database(dbProvider).testCond(com.google.gerrit.server.change.ABANDON)))); }",1cbbd97a4181ec274549e832b841d996077e53b4,"@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.restapi.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Move Change"").setTitle(""Move change to a different branch"").setVisible(and(change.getStatus().isOpen(), and(permissionBackend.user(rsrc.getUser()).ref(change.getDest()).testCond(com.google.gerrit.server.restapi.change.CREATE_CHANGE), rsrc.permissions().database(dbProvider).testCond(com.google.gerrit.server.restapi.change.ABANDON)))); }",52bcb2fe511a2b284880fea9eda1bc488ea16a13,"@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Move Change"").setTitle(""Move change to a different branch"").setVisible(and(change.getStatus().isOpen(), and(permissionBackend.user(rsrc.getUser()).ref(change.getDest()).testCond(com.google.gerrit.server.restapi.change.CREATE_CHANGE), rsrc.permissions().database(dbProvider).testCond(com.google.gerrit.server.restapi.change.ABANDON)))); }",5f3004610078e033c8009039e4c3849529592158,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_GetDescription.java,@java.lang.Override public java.lang.String apply(com.google.gerrit.server.project.ProjectResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.getProjectState().getProject().getDescription()); },8af9090bd7e75a69642cb58869d75b8e6299eda5,@java.lang.Override public java.lang.String apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.getProjectState().getProject().getDescription()); },6cc7fcfa91184881b7143155d9d99ce7b60fb8ad,@java.lang.Override public java.lang.String apply(com.google.gerrit.server.project.ProjectResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.getProjectState().getProject().getDescription()); },8af9090bd7e75a69642cb58869d75b8e6299eda5,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_projects_ProjectApiImpl.java,private com.google.gerrit.server.project.ProjectResource checkExists() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((project) == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(name); } return project; },1c8bcfead3e2b1be1670bd6a030f3419b6039d4e,private com.google.gerrit.server.restapi.project.ProjectResource checkExists() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((project) == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(name); } return project; },f547ad2922d7e7d7cb31572f9a14548a840af000,private com.google.gerrit.server.project.ProjectResource checkExists() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((project) == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(name); } return project; },1c8bcfead3e2b1be1670bd6a030f3419b6039d4e,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_projects_ProjectApiImpl.java,com.google.gerrit.server.api.projects.ProjectApiImpl create(com.google.gerrit.server.project.ProjectResource project);,23482c93d03d726f855ae9afdf6378378fdd22d8,com.google.gerrit.server.api.projects.ProjectApiImpl create(com.google.gerrit.server.restapi.project.ProjectResource project);,a5e18cf1df3c92b4856852cff9f116c35dbb6baa,com.google.gerrit.server.api.projects.ProjectApiImpl create(com.google.gerrit.server.project.ProjectResource project);,23482c93d03d726f855ae9afdf6378378fdd22d8,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_git_validators_MergeValidators.java,"@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || (!(com.google.gerrit.reviewdb.client.RefNames.isGroupRef(destBranch.get())))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException(""group update not allowed""); }",74818e7177c62b55a030439e2f32610cc2b0e372,"@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || (!(com.google.gerrit.reviewdb.client.RefNames.isGroupRef(destBranch.get())))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException(""account update not allowed""); }",76963c93c34b82ed3ecffdf49e6ded65a15047f0,"@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || (!(com.google.gerrit.reviewdb.client.RefNames.isGroupRef(destBranch.get())))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException(""group update not allowed""); }",74818e7177c62b55a030439e2f32610cc2b0e372,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_account_GroupUUID.java,"public static AccountGroup.UUID make(java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent creator) { java.security.MessageDigest md = org.eclipse.jgit.lib.Constants.newMessageDigest(); md.update(org.eclipse.jgit.lib.Constants.encode(((""group "" + groupName) + ""\n""))); md.update(org.eclipse.jgit.lib.Constants.encode(((""creator "" + (creator.toExternalString())) + ""\n""))); md.update(org.eclipse.jgit.lib.Constants.encode(java.lang.String.valueOf(java.lang.Math.random()))); return new com.google.gerrit.reviewdb.client.AccountGroup.UUID(org.eclipse.jgit.lib.ObjectId.fromRaw(md.digest()).name()); }",a2c426bc47085e49bf0d1162bb4479bf5570ffe7,"public static AccountGroup.UUID make(java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent creator) { java.security.MessageDigest md = org.eclipse.jgit.lib.Constants.newMessageDigest(); md.update(org.eclipse.jgit.lib.Constants.encode(((""account "" + groupName) + ""\n""))); md.update(org.eclipse.jgit.lib.Constants.encode(((""creator "" + (creator.toExternalString())) + ""\n""))); md.update(org.eclipse.jgit.lib.Constants.encode(java.lang.String.valueOf(java.lang.Math.random()))); return new com.google.gerrit.reviewdb.client.AccountGroup.UUID(org.eclipse.jgit.lib.ObjectId.fromRaw(md.digest()).name()); }",fb81d95748e12dc4a2239c2749f6ee75eb6ca625,"public static AccountGroup.UUID make(java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent creator) { java.security.MessageDigest md = org.eclipse.jgit.lib.Constants.newMessageDigest(); md.update(org.eclipse.jgit.lib.Constants.encode(((""group "" + groupName) + ""\n""))); md.update(org.eclipse.jgit.lib.Constants.encode(((""creator "" + (creator.toExternalString())) + ""\n""))); md.update(org.eclipse.jgit.lib.Constants.encode(java.lang.String.valueOf(java.lang.Math.random()))); return new com.google.gerrit.reviewdb.client.AccountGroup.UUID(org.eclipse.jgit.lib.ObjectId.fromRaw(md.digest()).name()); }",a2c426bc47085e49bf0d1162bb4479bf5570ffe7,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_schema_Schema_150_to_151_Test.java,"@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedBeforeAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup(""Ancient group for schema migration""); setCreatedOnToVeryOldTimestamp(groupId); removeAuditEntriesFor(groupId); schema151.migrateData(db, new com.google.gerrit.testing.TestUpdateUI()); java.sql.Timestamp createdOn = getCreatedOn(groupId); assertThat(createdOn).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }",ccb7f53c8b9df380d317522aad0254d828e9a078,"@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedBeforeAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup(""Ancient account for schema migration""); setCreatedOnToVeryOldTimestamp(groupId); removeAuditEntriesFor(groupId); schema151.migrateData(db, new com.google.gerrit.testing.TestUpdateUI()); java.sql.Timestamp createdOn = getCreatedOn(groupId); assertThat(createdOn).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }",4a8494c1651962d0364c9ed72a78ab3e7be076cf,"@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedBeforeAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup(""Ancient group for schema migration""); setCreatedOnToVeryOldTimestamp(groupId); removeAuditEntriesFor(groupId); schema151.migrateData(db, new com.google.gerrit.testing.TestUpdateUI()); java.sql.Timestamp createdOn = getCreatedOn(groupId); assertThat(createdOn).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }",ccb7f53c8b9df380d317522aad0254d828e9a078,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_ListBranches.java,"private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId()) != null) ? ref.getObjectId().name() : null; info.canDelete = ((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE))) ? true : null; com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = new java.util.TreeMap(); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty()) ? null : links; return info; }",86747ac21af0f9742742fed522488f21cb8890a2,"private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId()) != null) ? ref.getObjectId().name() : null; info.canDelete = ((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE))) ? true : null; com.google.gerrit.server.restapi.project.BranchResource rsrc = new com.google.gerrit.server.restapi.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = new java.util.TreeMap(); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty()) ? null : links; return info; }",54928301cf1d7f45fb24db86807e4950283162db,"private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId()) != null) ? ref.getObjectId().name() : null; info.canDelete = ((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE))) ? true : null; com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = new java.util.TreeMap(); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty()) ? null : links; return info; }",86747ac21af0f9742742fed522488f21cb8890a2,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_ListBranches.java,"com.google.gerrit.extensions.api.projects.BranchInfo toBranchInfo(com.google.gerrit.server.project.BranchResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.lib.Ref r = db.exactRef(rsrc.getRef()); if (r == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, com.google.common.collect.ImmutableList.of(r)).get(0); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }",08a3eef7acc2b04d11b2beb66f222dd3b9989c50,"com.google.gerrit.extensions.api.projects.BranchInfo toBranchInfo(com.google.gerrit.server.restapi.project.BranchResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.lib.Ref r = db.exactRef(rsrc.getRef()); if (r == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, com.google.common.collect.ImmutableList.of(r)).get(0); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }",fbb0a802d5b402550bb9fa3648a9141e02648175,"com.google.gerrit.extensions.api.projects.BranchInfo toBranchInfo(com.google.gerrit.server.project.BranchResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.lib.Ref r = db.exactRef(rsrc.getRef()); if (r == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, com.google.common.collect.ImmutableList.of(r)).get(0); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }",08a3eef7acc2b04d11b2beb66f222dd3b9989c50,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_ListBranches.java,"private java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> allBranches(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { java.util.List<org.eclipse.jgit.lib.Ref> refs; try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) { java.util.Collection<org.eclipse.jgit.lib.Ref> heads = db.getRefDatabase().getRefs(Constants.R_HEADS).values(); refs = new java.util.ArrayList(((heads.size()) + 3)); refs.addAll(heads); refs.addAll(db.getRefDatabase().exactRef(Constants.HEAD, RefNames.REFS_CONFIG, RefNames.REFS_USERS_DEFAULT).values()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noGitRepository) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, refs); }",7dec9ee3f14073332d414c5b0a2325f52635e99e,"private java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> allBranches(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { java.util.List<org.eclipse.jgit.lib.Ref> refs; try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) { java.util.Collection<org.eclipse.jgit.lib.Ref> heads = db.getRefDatabase().getRefs(Constants.R_HEADS).values(); refs = new java.util.ArrayList(((heads.size()) + 3)); refs.addAll(heads); refs.addAll(db.getRefDatabase().exactRef(Constants.HEAD, RefNames.REFS_CONFIG, RefNames.REFS_USERS_DEFAULT).values()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noGitRepository) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, refs); }",c4f92f147272dd07ad48a81af38f44b7642652a7,"private java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> allBranches(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { java.util.List<org.eclipse.jgit.lib.Ref> refs; try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) { java.util.Collection<org.eclipse.jgit.lib.Ref> heads = db.getRefDatabase().getRefs(Constants.R_HEADS).values(); refs = new java.util.ArrayList(((heads.size()) + 3)); refs.addAll(heads); refs.addAll(db.getRefDatabase().exactRef(Constants.HEAD, RefNames.REFS_CONFIG, RefNames.REFS_USERS_DEFAULT).values()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noGitRepository) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, refs); }",7dec9ee3f14073332d414c5b0a2325f52635e99e,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_ListBranches.java,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring).regex(matchRegex).start(start).limit(limit).filter(allBranches(rsrc)); }",11f6a08ac64835deb0153c850feb0d45e9482352,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring).regex(matchRegex).start(start).limit(limit).filter(allBranches(rsrc)); }",16c094307150c29830a50fd0239d4a8b9786ad1e,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring).regex(matchRegex).start(start).limit(limit).filter(allBranches(rsrc)); }",11f6a08ac64835deb0153c850feb0d45e9482352,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_ListBranches.java,"private java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> toBranchInfo(com.google.gerrit.server.project.ProjectResource rsrc, java.util.List<org.eclipse.jgit.lib.Ref> refs) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Set<java.lang.String> targets = com.google.common.collect.Sets.newHashSetWithExpectedSize(1); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) { targets.add(ref.getTarget().getName()); } } com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(user).project(rsrc.getNameKey()); java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> branches = new java.util.ArrayList(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) { java.lang.String target = ref.getTarget().getName(); if (!(perm.ref(target).test(RefPermission.READ))) { continue; } if (target.startsWith(Constants.R_HEADS)) { target = target.substring(Constants.R_HEADS.length()); } com.google.gerrit.extensions.api.projects.BranchInfo b = new com.google.gerrit.extensions.api.projects.BranchInfo(); b.ref = ref.getName(); b.revision = target; branches.add(b); if (!(Constants.HEAD.equals(ref.getName()))) { b.canDelete = (perm.ref(ref.getName()).testOrFalse(RefPermission.DELETE)) ? true : null; } continue; } if (perm.ref(ref.getName()).test(RefPermission.READ)) { branches.add(createBranchInfo(perm.ref(ref.getName()), ref, rsrc.getProjectState(), rsrc.getUser(), targets)); } } java.util.Collections.sort(branches, new com.google.gerrit.server.project.ListBranches.BranchComparator()); return branches; }",5de549c80b82c024b5e731c6e81f3fd6373049cb,"private java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> toBranchInfo(com.google.gerrit.server.restapi.project.ProjectResource rsrc, java.util.List<org.eclipse.jgit.lib.Ref> refs) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Set<java.lang.String> targets = com.google.common.collect.Sets.newHashSetWithExpectedSize(1); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) { targets.add(ref.getTarget().getName()); } } com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(user).project(rsrc.getNameKey()); java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> branches = new java.util.ArrayList(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) { java.lang.String target = ref.getTarget().getName(); if (!(perm.ref(target).test(RefPermission.READ))) { continue; } if (target.startsWith(Constants.R_HEADS)) { target = target.substring(Constants.R_HEADS.length()); } com.google.gerrit.extensions.api.projects.BranchInfo b = new com.google.gerrit.extensions.api.projects.BranchInfo(); b.ref = ref.getName(); b.revision = target; branches.add(b); if (!(Constants.HEAD.equals(ref.getName()))) { b.canDelete = (perm.ref(ref.getName()).testOrFalse(RefPermission.DELETE)) ? true : null; } continue; } if (perm.ref(ref.getName()).test(RefPermission.READ)) { branches.add(createBranchInfo(perm.ref(ref.getName()), ref, rsrc.getProjectState(), rsrc.getUser(), targets)); } } java.util.Collections.sort(branches, new com.google.gerrit.server.restapi.project.ListBranches.BranchComparator()); return branches; }",ddc85b3a31143df469a41a83c1dcd17e92b73d18,"private java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> toBranchInfo(com.google.gerrit.server.project.ProjectResource rsrc, java.util.List<org.eclipse.jgit.lib.Ref> refs) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Set<java.lang.String> targets = com.google.common.collect.Sets.newHashSetWithExpectedSize(1); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) { targets.add(ref.getTarget().getName()); } } com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(user).project(rsrc.getNameKey()); java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> branches = new java.util.ArrayList(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) { java.lang.String target = ref.getTarget().getName(); if (!(perm.ref(target).test(RefPermission.READ))) { continue; } if (target.startsWith(Constants.R_HEADS)) { target = target.substring(Constants.R_HEADS.length()); } com.google.gerrit.extensions.api.projects.BranchInfo b = new com.google.gerrit.extensions.api.projects.BranchInfo(); b.ref = ref.getName(); b.revision = target; branches.add(b); if (!(Constants.HEAD.equals(ref.getName()))) { b.canDelete = (perm.ref(ref.getName()).testOrFalse(RefPermission.DELETE)) ? true : null; } continue; } if (perm.ref(ref.getName()).test(RefPermission.READ)) { branches.add(createBranchInfo(perm.ref(ref.getName()), ref, rsrc.getProjectState(), rsrc.getUser(), targets)); } } java.util.Collections.sort(branches, new com.google.gerrit.server.restapi.project.ListBranches.BranchComparator()); return branches; }",6f1e6858f9c59c21b8fe6c5017df81c02a3c5975,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_Index.java,"@java.lang.Override public Response.Accepted apply(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) { com.google.gerrit.reviewdb.client.Project.NameKey project = resource.getNameKey(); com.google.gerrit.server.git.MultiProgressMonitor.Task mpt = new com.google.gerrit.server.git.MultiProgressMonitor(com.google.common.io.ByteStreams.nullOutputStream(), ""Reindexing project"").beginSubTask("""", MultiProgressMonitor.UNKNOWN); com.google.gerrit.server.index.change.AllChangesIndexer allChangesIndexer = allChangesIndexerProvider.get(); allChangesIndexer.setVerboseOut(NullOutputStream.INSTANCE); @java.lang.SuppressWarnings(""unused"") java.util.concurrent.Future<java.lang.Void> ignored = executor.submit(allChangesIndexer.reindexProject(indexer, project, mpt, mpt)); return com.google.gerrit.extensions.restapi.Response.accepted(((""Project "" + project) + "" submitted for reindexing"")); }",2adec069fd9b8cbb17a437f6f7e6de737597a8d6,"@java.lang.Override public Response.Accepted apply(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) { com.google.gerrit.reviewdb.client.Project.NameKey project = resource.getNameKey(); com.google.gerrit.server.git.MultiProgressMonitor.Task mpt = new com.google.gerrit.server.git.MultiProgressMonitor(com.google.common.io.ByteStreams.nullOutputStream(), ""Reindexing project"").beginSubTask("""", MultiProgressMonitor.UNKNOWN); com.google.gerrit.server.index.change.AllChangesIndexer allChangesIndexer = allChangesIndexerProvider.get(); allChangesIndexer.setVerboseOut(NullOutputStream.INSTANCE); @java.lang.SuppressWarnings(""unused"") java.util.concurrent.Future<java.lang.Void> ignored = executor.submit(allChangesIndexer.reindexProject(indexer, project, mpt, mpt)); return com.google.gerrit.extensions.restapi.Response.accepted(((""Project "" + project) + "" submitted for reindexing"")); }",5103e7b032a1ad54f82ad29f674e6477a287e12a,"@java.lang.Override public Response.Accepted apply(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) { com.google.gerrit.reviewdb.client.Project.NameKey project = resource.getNameKey(); com.google.gerrit.server.git.MultiProgressMonitor.Task mpt = new com.google.gerrit.server.git.MultiProgressMonitor(com.google.common.io.ByteStreams.nullOutputStream(), ""Reindexing project"").beginSubTask("""", MultiProgressMonitor.UNKNOWN); com.google.gerrit.server.index.change.AllChangesIndexer allChangesIndexer = allChangesIndexerProvider.get(); allChangesIndexer.setVerboseOut(NullOutputStream.INSTANCE); @java.lang.SuppressWarnings(""unused"") java.util.concurrent.Future<java.lang.Void> ignored = executor.submit(allChangesIndexer.reindexProject(indexer, project, mpt, mpt)); return com.google.gerrit.extensions.restapi.Response.accepted(((""Project "" + project) + "" submitted for reindexing"")); }",2adec069fd9b8cbb17a437f6f7e6de737597a8d6,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_ListGroups.java,"@org.kohsuke.args4j.Option(name = ""--owned-by"", usage = ""list groups owned by the given group uuid"") public void setOwnedBy(java.lang.String ownedBy) { this.ownedBy = ownedBy; }",4d6bb13e026ac4db277600e36d0ccb4a4f6ea6c8,"@org.kohsuke.args4j.Option(name = ""--owned-by"", usage = ""list groups owned by the given account uuid"") public void setOwnedBy(java.lang.String ownedBy) { this.ownedBy = ownedBy; }",668602cd537c1178deaed46fdb16b24b1d1f22a3,"@org.kohsuke.args4j.Option(name = ""--owned-by"", usage = ""list groups owned by the given group uuid"") public void setOwnedBy(java.lang.String ownedBy) { this.ownedBy = ownedBy; }",4d6bb13e026ac4db277600e36d0ccb4a4f6ea6c8,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_ListGroups.java,"@org.kohsuke.args4j.Option(name = ""--group"", aliases = { ""-g"" }, usage = ""group to inspect"") public void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { groupsToInspect.add(uuid); }",5e8b2207d7550d4167cd7a300a806e2e58869543,"@org.kohsuke.args4j.Option(name = ""--account"", aliases = { ""-g"" }, usage = ""account to inspect"") public void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { groupsToInspect.add(uuid); }",a4b67f945a9cdc59bd457767f363e7d9ff752dcf,"@org.kohsuke.args4j.Option(name = ""--group"", aliases = { ""-g"" }, usage = ""group to inspect"") public void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { groupsToInspect.add(uuid); }",5e8b2207d7550d4167cd7a300a806e2e58869543,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_ListGroups.java,"@org.kohsuke.args4j.Option(name = ""-o"", usage = ""Output options per group"") void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o); }",70367db6bf4671810b1bfdb14748c3caf6c201ae,"@org.kohsuke.args4j.Option(name = ""-o"", usage = ""Output options per account"") void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o); }",52cad5058d048ef989ac366864bc09dbbcd966a7,"@org.kohsuke.args4j.Option(name = ""-o"", usage = ""Output options per group"") void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o); }",70367db6bf4671810b1bfdb14748c3caf6c201ae,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_ListGroups.java,"@org.kohsuke.args4j.Option(name = ""--regex"", aliases = { ""-r"" }, metaVar = ""REGEX"", usage = ""match group regex"") public void setMatchRegex(java.lang.String matchRegex) { this.matchRegex = matchRegex; }",5467129ab5d03c305f5137943640b4595beb1891,"@org.kohsuke.args4j.Option(name = ""--regex"", aliases = { ""-r"" }, metaVar = ""REGEX"", usage = ""match account regex"") public void setMatchRegex(java.lang.String matchRegex) { this.matchRegex = matchRegex; }",8bea43ae5bae5f526022875f35cc5f994b41aea4,"@org.kohsuke.args4j.Option(name = ""--regex"", aliases = { ""-r"" }, metaVar = ""REGEX"", usage = ""match group regex"") public void setMatchRegex(java.lang.String matchRegex) { this.matchRegex = matchRegex; }",5467129ab5d03c305f5137943640b4595beb1891,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_DeleteTag.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String tag = com.google.gerrit.server.project.RefUtil.normalizeTagRef(resource.getTagInfo().ref); permissionBackend.user(user).project(resource.getNameKey()).ref(tag).check(RefPermission.DELETE); deleteRefFactory.create(resource).ref(tag).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }",b8feb47ff2d4c8da3e8783b2088cfb776b9a1ee4,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.project.TagResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String tag = com.google.gerrit.server.project.RefUtil.normalizeTagRef(resource.getTagInfo().ref); permissionBackend.user(user).project(resource.getNameKey()).ref(tag).check(RefPermission.DELETE); deleteRefFactory.create(resource).ref(tag).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }",b88ac1c275519aaad0236deb36296b792b81f120,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String tag = com.google.gerrit.server.project.RefUtil.normalizeTagRef(resource.getTagInfo().ref); permissionBackend.user(user).project(resource.getNameKey()).ref(tag).check(RefPermission.DELETE); deleteRefFactory.create(resource).ref(tag).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }",b8feb47ff2d4c8da3e8783b2088cfb776b9a1ee4,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_query_group_GroupQueryBuilder.java,"private static com.google.gerrit.index.query.QueryParseException getExceptionForUnsupportedOperator(java.lang.String operatorName) { return new com.google.gerrit.index.query.QueryParseException(java.lang.String.format(""'%s' operator is not supported by group index version"", operatorName)); }",97d3bd914f102e00c51c4648043a83feda287fcd,"private static com.google.gerrit.index.query.QueryParseException getExceptionForUnsupportedOperator(java.lang.String operatorName) { return new com.google.gerrit.index.query.QueryParseException(java.lang.String.format(""'%s' operator is not supported by account index version"", operatorName)); }",fcd8dd12c32d964125990849b5af2dd28147adff,"private static com.google.gerrit.index.query.QueryParseException getExceptionForUnsupportedOperator(java.lang.String operatorName) { return new com.google.gerrit.index.query.QueryParseException(java.lang.String.format(""'%s' operator is not supported by group index version"", operatorName)); }",97d3bd914f102e00c51c4648043a83feda287fcd,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_account_PutHttpPassword.java,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""username must be set""); } com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.account.SCHEME_USERNAME, user.getUserName())); if (extId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId newExtId = com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.accountId(), extId.email(), newPassword); externalIdsUpdate.create().upsert(newExtId); return com.google.common.base.Strings.isNullOrEmpty(newPassword) ? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }",eb86a5d1f948c9ca4d2ebe9e1314a406473cf434,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""username must be set""); } com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.restapi.account.SCHEME_USERNAME, user.getUserName())); if (extId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId newExtId = com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.accountId(), extId.email(), newPassword); externalIdsUpdate.create().upsert(newExtId); return com.google.common.base.Strings.isNullOrEmpty(newPassword) ? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }",a67a9b4294262d9eb961f1fb2137ad7c0b142c3f,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""username must be set""); } com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.restapi.account.SCHEME_USERNAME, user.getUserName())); if (extId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } accountsUpdate.create().update(""Set HTTP Password via API"", extId.accountId(), ( u) -> u.updateExternalId(com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.accountId(), extId.email(), newPassword))); return com.google.common.base.Strings.isNullOrEmpty(newPassword) ? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }",c421c5b22a3be55590f446a1cca24af128fa35e6,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_db_GroupConfigEntry.java,"@java.lang.Override void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroup.Builder group, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException { int id = config.getInt(com.google.gerrit.server.group.db.GroupConfigEntry.SECTION_NAME, super.keyName, (-1)); if (id < 0) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format(""ID of the group %s must not be negative, found %d"", groupUuid.get(), id)); } group.setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(id)); }",cd95b3369f8b82fad5f9ffced47ddff4683fa630,"@java.lang.Override void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroup.Builder group, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException { int id = config.getInt(com.google.gerrit.server.group.db.GroupConfigEntry.SECTION_NAME, super.keyName, (-1)); if (id < 0) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format(""ID of the account %s must not be negative, found %d"", groupUuid.get(), id)); } group.setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(id)); }",2051f1329a6df99969a47b9f0ad464fa9a3b824f,"@java.lang.Override void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroup.Builder group, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException { int id = config.getInt(com.google.gerrit.server.group.db.GroupConfigEntry.SECTION_NAME, super.keyName, (-1)); if (id < 0) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format(""ID of the group %s must not be negative, found %d"", groupUuid.get(), id)); } group.setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(id)); }",cd95b3369f8b82fad5f9ffced47ddff4683fa630,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_GetChildProject.java,@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.project.ChildProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((recursive) || (rsrc.isDirectChild())) { return json.format(rsrc.getChild().getProject()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.getChild().getName()); },965634c06201e12ac80de2b08e11ff60a277f3d0,@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.restapi.project.ChildProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((recursive) || (rsrc.isDirectChild())) { return json.format(rsrc.getChild().getProject()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.getChild().getName()); },bc31987797a22a94b37f49bbddade8e0ce4a5c46,@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.project.ChildProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((recursive) || (rsrc.isDirectChild())) { return json.format(rsrc.getChild().getProject()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.getChild().getName()); },965634c06201e12ac80de2b08e11ff60a277f3d0,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_ListSubgroups.java,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.GroupInfo> apply(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = rsrc.asInternalGroup().orElseThrow(MethodNotAllowedException::new); return getDirectSubgroups(group, rsrc.getControl()); }",1ae22b9ac37f4e1669edf2f14bd6c662c532d85f,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.GroupInfo> apply(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = rsrc.asInternalGroup().orElseThrow(MethodNotAllowedException::new); return getDirectSubgroups(group, rsrc.getControl()); }",a83c87d0cffc713198007da603c094e1289e94c9,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.GroupInfo> apply(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = rsrc.asInternalGroup().orElseThrow(MethodNotAllowedException::new); return getDirectSubgroups(group, rsrc.getControl()); }",1ae22b9ac37f4e1669edf2f14bd6c662c532d85f,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_ReviewersUtil.java,private java.util.List<com.google.gerrit.reviewdb.client.Account.Id> suggestAccounts(com.google.gerrit.server.change.SuggestReviewers suggestReviewers) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.metrics.Timer0.Context ctx = metrics.queryAccountsLatency.start()) { try { com.google.gerrit.index.query.QueryResult<com.google.gerrit.server.account.AccountState> result = queryProvider.get().setUserProvidedLimit(((suggestReviewers.getLimit()) * (com.google.gerrit.server.ReviewersUtil.CANDIDATE_LIST_MULTIPLIER))).query(com.google.gerrit.server.query.account.AccountPredicates.andActive(accountQueryBuilder.defaultQuery(suggestReviewers.getQuery()))); return result.entities().stream().map(( a) -> a.getAccount().getId()).collect(java.util.stream.Collectors.toList()); } catch (com.google.gerrit.index.query.QueryParseException e) { return com.google.common.collect.ImmutableList.of(); } } },fc42c98f9be4802f86b2ffad6dc1f53dd9032785,private java.util.List<com.google.gerrit.reviewdb.client.Account.Id> suggestAccounts(com.google.gerrit.server.restapi.change.SuggestReviewers suggestReviewers) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.metrics.Timer0.Context ctx = metrics.queryAccountsLatency.start()) { try { com.google.gerrit.index.query.QueryResult<com.google.gerrit.server.account.AccountState> result = queryProvider.get().setUserProvidedLimit(((suggestReviewers.getLimit()) * (com.google.gerrit.server.restapi.change.ReviewersUtil.CANDIDATE_LIST_MULTIPLIER))).query(com.google.gerrit.server.query.account.AccountPredicates.andActive(accountQueryBuilder.defaultQuery(suggestReviewers.getQuery()))); return result.entities().stream().map(( a) -> a.getAccount().getId()).collect(java.util.stream.Collectors.toList()); } catch (com.google.gerrit.index.query.QueryParseException e) { return com.google.common.collect.ImmutableList.of(); } } },525afec76d20dd8f6e44f9fae681d936e6fba7ab,"private java.util.List<com.google.gerrit.reviewdb.client.Account.Id> suggestAccounts(com.google.gerrit.server.restapi.change.SuggestReviewers suggestReviewers) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.metrics.Timer0.Context ctx = metrics.queryAccountsLatency.start()) { try { com.google.gwtorm.server.ResultSet<com.google.gerrit.index.query.FieldBundle> result = accountIndexes.getSearchIndex().getSource(com.google.gerrit.index.query.Predicate.and(com.google.gerrit.server.query.account.AccountPredicates.isActive(), accountQueryBuilder.defaultQuery(suggestReviewers.getQuery())), com.google.gerrit.index.QueryOptions.create(indexConfig, 0, ((suggestReviewers.getLimit()) * (com.google.gerrit.server.restapi.change.ReviewersUtil.CANDIDATE_LIST_MULTIPLIER)), com.google.common.collect.ImmutableSet.of(AccountField.ID.getName()))).readRaw(); return result.toList().stream().map(( f) -> new com.google.gerrit.reviewdb.client.Account.Id(f.getValue(AccountField.ID).intValue())).collect(java.util.stream.Collectors.toList()); } catch (com.google.gerrit.index.query.QueryParseException e) { return com.google.common.collect.ImmutableList.of(); } } }",43940c152a98ec2969949ec964eeb021cb57b862,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_SubgroupsCollection.java,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.SubgroupResource>> views() { return views; },d5f3a276f3410ef2291e85447530daa58d0b602b,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.group.SubgroupResource>> views() { return views; },c3a284b269029a69d14d2f681433da4566f313e8,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.SubgroupResource>> views() { return views; },d5f3a276f3410ef2291e85447530daa58d0b602b,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_SubgroupsCollection.java,"@java.lang.Override public com.google.gerrit.server.group.AddSubgroups.PutSubgroup create(com.google.gerrit.server.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.group.AddSubgroups.PutSubgroup(addSubgroups, id.get()); }",6008ad794edff7c136a83d1a2f930e4f2d43d896,"@java.lang.Override public com.google.gerrit.server.restapi.group.AddSubgroups.PutSubgroup create(com.google.gerrit.server.restapi.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.restapi.group.AddSubgroups.PutSubgroup(addSubgroups, id.get()); }",688bc7cddae8c6a5041e921c7d368edbb7544f13,"@java.lang.Override public com.google.gerrit.server.restapi.group.AddSubgroups.PutSubgroup create(com.google.gerrit.server.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.restapi.group.AddSubgroups.PutSubgroup(addSubgroups, id.get()); }",bfb3749ca60e8992fafe3a68623f40ecd62f7e34,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_SubgroupsCollection.java,"@java.lang.Override public com.google.gerrit.server.group.SubgroupResource parse(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.common.data.GroupDescription.Internal parent = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.common.data.GroupDescription.Basic member = groupsCollection.parse(TopLevelResource.INSTANCE, id).getGroup(); if ((resource.getControl().canSeeGroup()) && (com.google.gerrit.server.group.SubgroupsCollection.isSubgroup(parent, member))) { return new com.google.gerrit.server.group.SubgroupResource(resource, member); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",82f378ddb5bd0da31daf8c599269f42e6de51538,"@java.lang.Override public com.google.gerrit.server.restapi.group.SubgroupResource parse(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.common.data.GroupDescription.Internal parent = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.common.data.GroupDescription.Basic member = groupsCollection.parse(TopLevelResource.INSTANCE, id).getGroup(); if ((resource.getControl().canSeeGroup()) && (com.google.gerrit.server.restapi.group.SubgroupsCollection.isSubgroup(parent, member))) { return new com.google.gerrit.server.restapi.group.SubgroupResource(resource, member); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",9f9ea5684b6930a64f2ad5b1a03eda02eb32a608,"@java.lang.Override public com.google.gerrit.server.group.SubgroupResource parse(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.common.data.GroupDescription.Internal parent = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.common.data.GroupDescription.Basic member = groupsCollection.parse(TopLevelResource.INSTANCE, id).getGroup(); if ((resource.getControl().canSeeGroup()) && (com.google.gerrit.server.restapi.group.SubgroupsCollection.isSubgroup(parent, member))) { return new com.google.gerrit.server.group.SubgroupResource(resource, member); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",47d1069e4ed3c517810560e406e1c117eb048a5a,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_SubgroupsCollection.java,@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource> list() { return list; },17c37c90a2662056d8796a9a1637ec7991609024,@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.group.GroupResource> list() { return list; },28d263bb83a3d80545260c8739101c9face8c51f,@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource> list() { return list; },17c37c90a2662056d8796a9a1637ec7991609024,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_changes_DraftApiImpl.java,com.google.gerrit.server.api.changes.DraftApiImpl create(com.google.gerrit.server.change.DraftCommentResource d);,757f9541bc8db4a3332f1c0aaefcd6eaff5304bb,com.google.gerrit.server.api.changes.DraftApiImpl create(com.google.gerrit.server.restapi.change.DraftCommentResource d);,0f05ef726791303347074a94fa3df0a411e976a5,com.google.gerrit.server.api.changes.DraftApiImpl create(com.google.gerrit.server.change.DraftCommentResource d);,757f9541bc8db4a3332f1c0aaefcd6eaff5304bb,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_ListGroups.java,"@org.kohsuke.args4j.Option(name = ""--match"", aliases = { ""-m"" }, metaVar = ""MATCH"", usage = ""match group substring"") public void setMatchSubstring(java.lang.String matchSubstring) { this.matchSubstring = matchSubstring; }",39a645dbb4f81104ebb51bbce5af5073cc9ee298,"@org.kohsuke.args4j.Option(name = ""--match"", aliases = { ""-m"" }, metaVar = ""MATCH"", usage = ""match account substring"") public void setMatchSubstring(java.lang.String matchSubstring) { this.matchSubstring = matchSubstring; }",5ca375f7b13318d8b26cdba9787bfb62af2a8d26,"@org.kohsuke.args4j.Option(name = ""--match"", aliases = { ""-m"" }, metaVar = ""MATCH"", usage = ""match group substring"") public void setMatchSubstring(java.lang.String matchSubstring) { this.matchSubstring = matchSubstring; }",39a645dbb4f81104ebb51bbce5af5073cc9ee298,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_PutOptions.java,"@java.lang.Override public com.google.gerrit.extensions.common.GroupOptionsInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.common.GroupOptionsInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Not group owner""); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""options are required""); } if ((input.visibleToAll) == null) { input.visibleToAll = false; } if ((internalGroup.isVisibleToAll()) != (input.visibleToAll)) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setVisibleToAll(input.visibleToAll).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format(""Group %s not found"", groupUuid)); } } com.google.gerrit.extensions.common.GroupOptionsInfo options = new com.google.gerrit.extensions.common.GroupOptionsInfo(); if (input.visibleToAll) { options.visibleToAll = true; } return options; }",e6b6a2928a4055612d0640c5d27beac5e0d94954,"@java.lang.Override public com.google.gerrit.extensions.common.GroupOptionsInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.extensions.common.GroupOptionsInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Not account owner""); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""options are required""); } if ((input.visibleToAll) == null) { input.visibleToAll = false; } if ((internalGroup.isVisibleToAll()) != (input.visibleToAll)) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setVisibleToAll(input.visibleToAll).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format(""Group %s not found"", groupUuid)); } } com.google.gerrit.extensions.common.GroupOptionsInfo options = new com.google.gerrit.extensions.common.GroupOptionsInfo(); if (input.visibleToAll) { options.visibleToAll = true; } return options; }",1ae5ced923b7530367f4907adcda59a923805623,"@java.lang.Override public com.google.gerrit.extensions.common.GroupOptionsInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.common.GroupOptionsInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Not group owner""); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""options are required""); } if ((input.visibleToAll) == null) { input.visibleToAll = false; } if ((internalGroup.isVisibleToAll()) != (input.visibleToAll)) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setVisibleToAll(input.visibleToAll).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format(""Group %s not found"", groupUuid)); } } com.google.gerrit.extensions.common.GroupOptionsInfo options = new com.google.gerrit.extensions.common.GroupOptionsInfo(); if (input.visibleToAll) { options.visibleToAll = true; } return options; }",e6b6a2928a4055612d0640c5d27beac5e0d94954,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_GetParent.java,"@java.lang.Override public java.lang.String apply(com.google.gerrit.server.project.ProjectResource resource) { com.google.gerrit.reviewdb.client.Project project = resource.getProjectState().getProject(); com.google.gerrit.reviewdb.client.Project.NameKey parentName = project.getParent(allProjectsName); return parentName != null ? parentName.get() : """"; }",e642e02b32bfb320d6085af2c73da8cf4344608b,"@java.lang.Override public java.lang.String apply(com.google.gerrit.server.restapi.project.ProjectResource resource) { com.google.gerrit.reviewdb.client.Project project = resource.getProjectState().getProject(); com.google.gerrit.reviewdb.client.Project.NameKey parentName = project.getParent(allProjectsName); return parentName != null ? parentName.get() : """"; }",16092203e9f64da7cd249a9b4faa89324be0cddb,"@java.lang.Override public java.lang.String apply(com.google.gerrit.server.project.ProjectResource resource) { com.google.gerrit.reviewdb.client.Project project = resource.getProjectState().getProject(); com.google.gerrit.reviewdb.client.Project.NameKey parentName = project.getParent(allProjectsName); return parentName != null ? parentName.get() : """"; }",e642e02b32bfb320d6085af2c73da8cf4344608b,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_GarbageCollect.java,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.server.project.GarbageCollect.Input input) { com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getNameKey(); if (input.async) { return applyAsync(project, input); } return applySync(project, input); }",12c5b2f66a3d132f0cafc146fab1630c7f1b2aca,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc, com.google.gerrit.server.restapi.project.GarbageCollect.Input input) { com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getNameKey(); if (input.async) { return applyAsync(project, input); } return applySync(project, input); }",47c716c022ffaaa48258fb2d867850f3b9457cee,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.server.restapi.project.GarbageCollect.Input input) { com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getNameKey(); if (input.async) { return applyAsync(project, input); } return applySync(project, input); }",9d62390e8a8ca06fd8c041b597630f360116f436,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_GarbageCollect.java,"@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.project.ProjectResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Run GC"").setTitle(""Triggers the Git Garbage Collection for this project."").setVisible(canGC); }",b44f47517f1fff84d2e08ed0c87ad77861a81569,"@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.restapi.project.ProjectResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Run GC"").setTitle(""Triggers the Git Garbage Collection for this project."").setVisible(canGC); }",83051a0da46bcdf91184b7ee0b699b5bbe3d5adc,"@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.project.ProjectResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Run GC"").setTitle(""Triggers the Git Garbage Collection for this project."").setVisible(canGC); }",b44f47517f1fff84d2e08ed0c87ad77861a81569,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_acceptance_AbstractDaemonTest.java,"protected com.google.gerrit.common.data.ContributorAgreement configureContributorAgreement(boolean autoVerify) throws java.lang.Exception { com.google.gerrit.common.data.ContributorAgreement ca; if (autoVerify) { java.lang.String g = createGroup(""cla-test-group""); com.google.gerrit.extensions.api.groups.GroupApi groupApi = gApi.groups().id(g); groupApi.description(""CLA test group""); com.google.gerrit.server.group.InternalGroup caGroup = group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupApi.detail().id)); com.google.gerrit.common.data.GroupReference groupRef = new com.google.gerrit.common.data.GroupReference(caGroup.getGroupUUID(), caGroup.getName()); com.google.gerrit.common.data.PermissionRule rule = new com.google.gerrit.common.data.PermissionRule(groupRef); rule.setAction(PermissionRule.Action.ALLOW); ca = new com.google.gerrit.common.data.ContributorAgreement(""cla-test""); ca.setAutoVerify(groupRef); ca.setAccepted(com.google.common.collect.ImmutableList.of(rule)); } else { ca = new com.google.gerrit.common.data.ContributorAgreement(""cla-test-no-auto-verify""); } ca.setDescription(""description""); ca.setAgreementUrl(""agreement-url""); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(allProjects).getConfig(); cfg.replace(ca); saveProjectConfig(allProjects, cfg); return ca; }",ea6314cf59cf95f8d615c2257ef464a715256ce1,"protected com.google.gerrit.common.data.ContributorAgreement configureContributorAgreement(boolean autoVerify) throws java.lang.Exception { com.google.gerrit.common.data.ContributorAgreement ca; if (autoVerify) { java.lang.String g = createGroup(""cla-test-account""); com.google.gerrit.extensions.api.groups.GroupApi groupApi = gApi.groups().id(g); groupApi.description(""CLA test account""); com.google.gerrit.server.group.InternalGroup caGroup = group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupApi.detail().id)); com.google.gerrit.common.data.GroupReference groupRef = new com.google.gerrit.common.data.GroupReference(caGroup.getGroupUUID(), caGroup.getName()); com.google.gerrit.common.data.PermissionRule rule = new com.google.gerrit.common.data.PermissionRule(groupRef); rule.setAction(PermissionRule.Action.ALLOW); ca = new com.google.gerrit.common.data.ContributorAgreement(""cla-test""); ca.setAutoVerify(groupRef); ca.setAccepted(com.google.common.collect.ImmutableList.of(rule)); } else { ca = new com.google.gerrit.common.data.ContributorAgreement(""cla-test-no-auto-verify""); } ca.setDescription(""description""); ca.setAgreementUrl(""agreement-url""); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(allProjects).getConfig(); cfg.replace(ca); saveProjectConfig(allProjects, cfg); return ca; }",4a72d53a35df06d2d04a1cb7089b6c0098e3c4ec,"protected com.google.gerrit.common.data.ContributorAgreement configureContributorAgreement(boolean autoVerify) throws java.lang.Exception { com.google.gerrit.common.data.ContributorAgreement ca; if (autoVerify) { java.lang.String g = createGroup(""cla-test-group""); com.google.gerrit.extensions.api.groups.GroupApi groupApi = gApi.groups().id(g); groupApi.description(""CLA test group""); com.google.gerrit.server.group.InternalGroup caGroup = group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupApi.detail().id)); com.google.gerrit.common.data.GroupReference groupRef = new com.google.gerrit.common.data.GroupReference(caGroup.getGroupUUID(), caGroup.getName()); com.google.gerrit.common.data.PermissionRule rule = new com.google.gerrit.common.data.PermissionRule(groupRef); rule.setAction(PermissionRule.Action.ALLOW); ca = new com.google.gerrit.common.data.ContributorAgreement(""cla-test""); ca.setAutoVerify(groupRef); ca.setAccepted(com.google.common.collect.ImmutableList.of(rule)); } else { ca = new com.google.gerrit.common.data.ContributorAgreement(""cla-test-no-auto-verify""); } ca.setDescription(""description""); ca.setAgreementUrl(""agreement-url""); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(allProjects).getConfig(); cfg.replace(ca); saveProjectConfig(allProjects, cfg); return ca; }",ea6314cf59cf95f8d615c2257ef464a715256ce1,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_Files.java,"@java.lang.Override public com.google.gerrit.server.change.FileResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.change.FileResource(rev, id.get()); }",1f8ecd6e412413f265efcdd22c2596d8d0e861a8,"@java.lang.Override public com.google.gerrit.server.restapi.change.FileResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.restapi.change.FileResource(rev, id.get()); }",04874b34c4cc33e98d9e9b49af5cf9131ddbdd79,"@java.lang.Override public com.google.gerrit.server.change.FileResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.change.FileResource(rev, id.get()); }",1f8ecd6e412413f265efcdd22c2596d8d0e861a8,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_Files.java,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.FileResource>> views() { return views; },e9af9d1c2974b7ee4b976d50cfbb36799b71d96b,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.change.FileResource>> views() { return views; },4ffad7e1839fc410cc66703b8d36553a58bc2068,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.FileResource>> views() { return views; },e9af9d1c2974b7ee4b976d50cfbb36799b71d96b,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_sshd_commands_BanCommitCommand.java,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.extensions.api.projects.BanCommitInput input = com.google.gerrit.extensions.api.projects.BanCommitInput.fromCommits(com.google.common.collect.Lists.transform(commitsToBan, ObjectId::getName)); input.reason = reason; com.google.gerrit.server.project.BanCommit.BanResultInfo r = banCommit.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), input); printCommits(r.newlyBanned, ""The following commits were banned""); printCommits(r.alreadyBanned, ""The following commits were already banned""); printCommits(r.ignored, ""The following ids do not represent commits and were ignored""); } catch (java.lang.Exception e) { throw die(e); } }",668962063ca79a07ebbba479677cb3a82ef30358,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.extensions.api.projects.BanCommitInput input = com.google.gerrit.extensions.api.projects.BanCommitInput.fromCommits(com.google.common.collect.Lists.transform(commitsToBan, ObjectId::getName)); input.reason = reason; com.google.gerrit.server.restapi.project.BanCommit.BanResultInfo r = banCommit.apply(new com.google.gerrit.server.restapi.project.ProjectResource(projectState, user), input); printCommits(r.newlyBanned, ""The following commits were banned""); printCommits(r.alreadyBanned, ""The following commits were already banned""); printCommits(r.ignored, ""The following ids do not represent commits and were ignored""); } catch (java.lang.Exception e) { throw die(e); } }",16d7e510f4b65a7f81208e47a1d164b3daaccb1a,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.extensions.api.projects.BanCommitInput input = com.google.gerrit.extensions.api.projects.BanCommitInput.fromCommits(com.google.common.collect.Lists.transform(commitsToBan, ObjectId::getName)); input.reason = reason; com.google.gerrit.server.restapi.project.BanCommit.BanResultInfo r = banCommit.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), input); printCommits(r.newlyBanned, ""The following commits were banned""); printCommits(r.alreadyBanned, ""The following commits were already banned""); printCommits(r.ignored, ""The following ids do not represent commits and were ignored""); } catch (java.lang.Exception e) { throw die(e); } }",52da71a56611b03bb18f040de52c38c612abe785,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_db_GroupConfigEntry.java,"@java.lang.Override void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroup.Builder group, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String ownerGroupUuid = config.getString(com.google.gerrit.server.group.db.GroupConfigEntry.SECTION_NAME, null, super.keyName); if (com.google.common.base.Strings.isNullOrEmpty(ownerGroupUuid)) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format(""Owner UUID of the group %s must be defined"", groupUuid.get())); } group.setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(ownerGroupUuid)); }",7de59bc98401e09921556c433c3958d9c1f5d8c0,"@java.lang.Override void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroup.Builder group, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String ownerGroupUuid = config.getString(com.google.gerrit.server.group.db.GroupConfigEntry.SECTION_NAME, null, super.keyName); if (com.google.common.base.Strings.isNullOrEmpty(ownerGroupUuid)) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format(""Owner UUID of the account %s must be defined"", groupUuid.get())); } group.setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(ownerGroupUuid)); }",7c5c3699d340f690d7c1ed8e7a77794b1b1c022b,"@java.lang.Override void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroup.Builder group, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String ownerGroupUuid = config.getString(com.google.gerrit.server.group.db.GroupConfigEntry.SECTION_NAME, null, super.keyName); if (com.google.common.base.Strings.isNullOrEmpty(ownerGroupUuid)) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format(""Owner UUID of the group %s must be defined"", groupUuid.get())); } group.setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(ownerGroupUuid)); }",7de59bc98401e09921556c433c3958d9c1f5d8c0,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_DeleteBranches.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.ProjectResource project, DeleteBranchesInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((input == null) || ((input.branches) == null)) || (input.branches.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""branches must be specified""); } deleteRefFactory.create(project).refs(input.branches).prefix(com.google.gerrit.server.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }",d432101556709aedcba2c00aebf3a81f81026dfa,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.project.ProjectResource project, DeleteBranchesInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((input == null) || ((input.branches) == null)) || (input.branches.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""branches must be specified""); } deleteRefFactory.create(project).refs(input.branches).prefix(com.google.gerrit.server.restapi.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }",41b533a877f854e1563b168fe64da7d55f701869,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.ProjectResource project, DeleteBranchesInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((input == null) || ((input.branches) == null)) || (input.branches.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""branches must be specified""); } deleteRefFactory.create(project).refs(input.branches).prefix(com.google.gerrit.server.restapi.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }",7333ed10262d768d8d9514f9455a7b947afe52de,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_PutDraftComment.java,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommentInfo> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.DraftCommentResource rsrc, DraftInput in) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException { if (((in == null) || ((in.message) == null)) || (in.message.trim().isEmpty())) { return delete.applyImpl(updateFactory, rsrc, null); } else if (((in.id) != null) && (!(rsrc.getId().equals(in.id)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""id must match URL""); } else if (((in.line) != null) && ((in.line) < 0)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""line must be >= 0""); } else if ((((in.line) != null) && ((in.range) != null)) && ((in.line) != (in.range.endLine))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""range endLine must be on the same line as the comment""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.change.PutDraftComment.Op op = new com.google.gerrit.server.change.PutDraftComment.Op(rsrc.getComment().key, in); bu.addOp(rsrc.getChange().getId(), op); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(commentJson.get().setFillAccounts(false).newCommentFormatter().format(op.comment)); } }",1694814af64e526f6e9244b5c6eb773737f0a097,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommentInfo> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.change.DraftCommentResource rsrc, DraftInput in) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException { if (((in == null) || ((in.message) == null)) || (in.message.trim().isEmpty())) { return delete.applyImpl(updateFactory, rsrc, null); } else if (((in.id) != null) && (!(rsrc.getId().equals(in.id)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""id must match URL""); } else if (((in.line) != null) && ((in.line) < 0)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""line must be >= 0""); } else if ((((in.line) != null) && ((in.range) != null)) && ((in.line) != (in.range.endLine))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""range endLine must be on the same line as the comment""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.restapi.change.PutDraftComment.Op op = new com.google.gerrit.server.restapi.change.PutDraftComment.Op(rsrc.getComment().key, in); bu.addOp(rsrc.getChange().getId(), op); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(commentJson.get().setFillAccounts(false).newCommentFormatter().format(op.comment)); } }",9ab4221bbc579944b156c183e89b02847ea7e18b,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommentInfo> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.DraftCommentResource rsrc, DraftInput in) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException { if (((in == null) || ((in.message) == null)) || (in.message.trim().isEmpty())) { return delete.applyImpl(updateFactory, rsrc, null); } else if (((in.id) != null) && (!(rsrc.getId().equals(in.id)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""id must match URL""); } else if (((in.line) != null) && ((in.line) < 0)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""line must be >= 0""); } else if ((((in.line) != null) && ((in.range) != null)) && ((in.line) != (in.range.endLine))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""range endLine must be on the same line as the comment""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.restapi.change.PutDraftComment.Op op = new com.google.gerrit.server.restapi.change.PutDraftComment.Op(rsrc.getComment().key, in); bu.addOp(rsrc.getChange().getId(), op); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(commentJson.get().setFillAccounts(false).newCommentFormatter().format(op.comment)); } }",bdfa778d64de8aaa5ef34d0f4b69f879d0cf38d2,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_db_GroupsUpdate.java,"private java.util.Optional<com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult> updateGroupInNoteDb(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(allUsersRepo, groupUuid); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); if (!(groupConfig.getLoadedGroup().isPresent())) { if (groupsMigration.readFromNoteDb()) { throw new com.google.gerrit.common.errors.NoSuchGroupException(groupUuid); } return java.util.Optional.empty(); } com.google.gerrit.server.group.InternalGroup originalGroup = groupConfig.getLoadedGroup().get(); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = null; if (groupUpdate.getName().isPresent()) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName = originalGroup.getNameKey(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName = groupUpdate.getName().get(); groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForRename(allUsersRepo, groupUuid, oldName, newName); } commit(allUsersRepo, groupConfig, groupNameNotes); com.google.gerrit.server.group.InternalGroup updatedGroup = groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""Updated group wasn't automatically loaded"")); return java.util.Optional.of(com.google.gerrit.server.group.db.GroupsUpdate.getUpdateResult(originalGroup, updatedGroup)); } }",cf4a2a0938b76babefa6792b3e35969a660b3e51,"private java.util.Optional<com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult> updateGroupInNoteDb(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(allUsersRepo, groupUuid); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); if (!(groupConfig.getLoadedGroup().isPresent())) { if (groupsMigration.readFromNoteDb()) { throw new com.google.gerrit.common.errors.NoSuchGroupException(groupUuid); } return java.util.Optional.empty(); } com.google.gerrit.server.group.InternalGroup originalGroup = groupConfig.getLoadedGroup().get(); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = null; if (groupUpdate.getName().isPresent()) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName = originalGroup.getNameKey(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName = groupUpdate.getName().get(); groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForRename(allUsersRepo, groupUuid, oldName, newName); } commit(allUsersRepo, groupConfig, groupNameNotes); com.google.gerrit.server.group.InternalGroup updatedGroup = groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""Updated account wasn't automatically loaded"")); return java.util.Optional.of(com.google.gerrit.server.group.db.GroupsUpdate.getUpdateResult(originalGroup, updatedGroup)); } }",2f5322f221c4ceb6702199abfcfb8ea6bd8a1e65,"private java.util.Optional<com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult> updateGroupInNoteDb(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(allUsersRepo, groupUuid); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); if (!(groupConfig.getLoadedGroup().isPresent())) { if (groupsMigration.readFromNoteDb()) { throw new com.google.gerrit.common.errors.NoSuchGroupException(groupUuid); } return java.util.Optional.empty(); } com.google.gerrit.server.group.InternalGroup originalGroup = groupConfig.getLoadedGroup().get(); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = null; if (groupUpdate.getName().isPresent()) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName = originalGroup.getNameKey(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName = groupUpdate.getName().get(); groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForRename(allUsersRepo, groupUuid, oldName, newName); } commit(allUsersRepo, groupConfig, groupNameNotes); com.google.gerrit.server.group.InternalGroup updatedGroup = groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""Updated group wasn't automatically loaded"")); return java.util.Optional.of(com.google.gerrit.server.group.db.GroupsUpdate.getUpdateResult(originalGroup, updatedGroup)); } }",cf4a2a0938b76babefa6792b3e35969a660b3e51,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_audit_AuditService.java,"public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddGroupsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log add groups to group event"", e); } } }",f0d11f5afd9a8c95f494c88f1253c1a3be74aef7,"public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddGroupsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log add groups to account event"", e); } } }",a98a9b7a7b35a5d41ea7245424c8219e38a9d33f,"public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddGroupsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log add groups to group event"", e); } } }",f0d11f5afd9a8c95f494c88f1253c1a3be74aef7,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_sshd_commands_CreateGroupCommand.java,"private void addMembers(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.AddMembers.Input input = AddMembers.Input.fromMembers(initialMembers.stream().map(java.lang.Object::toString).collect(java.util.stream.Collectors.toList())); addMembers.apply(rsrc, input); }",1a6f7508c758f545b9d77477a5390e6c69c05eb2,"private void addMembers(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddMembers.Input input = AddMembers.Input.fromMembers(initialMembers.stream().map(java.lang.Object::toString).collect(java.util.stream.Collectors.toList())); addMembers.apply(rsrc, input); }",99aea1357289be2a0205faf559e561d6c57ee23b,"private void addMembers(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddMembers.Input input = AddMembers.Input.fromMembers(initialMembers.stream().map(java.lang.Object::toString).collect(java.util.stream.Collectors.toList())); addMembers.apply(rsrc, input); }",22bfde6704d97f5f43069713890a0b889dc36926,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_sshd_commands_CreateGroupCommand.java,"private void addSubgroups(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.AddSubgroups.Input input = AddSubgroups.Input.fromGroups(initialGroups.stream().map(com.google.gerrit.reviewdb.client.AccountGroup.UUID::get).collect(java.util.stream.Collectors.toList())); addSubgroups.apply(rsrc, input); }",93734d0ee042af3cb83a11b908dd7acc339b2e78,"private void addSubgroups(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddSubgroups.Input input = AddSubgroups.Input.fromGroups(initialGroups.stream().map(com.google.gerrit.reviewdb.client.AccountGroup.UUID::get).collect(java.util.stream.Collectors.toList())); addSubgroups.apply(rsrc, input); }",deba187988e8cb5003bdfb06d8cbe5082ffe7739,"private void addSubgroups(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddSubgroups.Input input = AddSubgroups.Input.fromGroups(initialGroups.stream().map(com.google.gerrit.reviewdb.client.AccountGroup.UUID::get).collect(java.util.stream.Collectors.toList())); addSubgroups.apply(rsrc, input); }",08a0cfddb96990a6e3056520b99894e0491fc7d5,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_sshd_commands_CreateGroupCommand.java,"@org.kohsuke.args4j.Option(name = ""--group"", aliases = ""-g"", metaVar = ""GROUP"", usage = ""initial set of groups to be included in the group"") void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID id) { initialGroups.add(id); }",6ca2a5c721d6867400a013b25278d6dedd5ddb23,"@org.kohsuke.args4j.Option(name = ""--account"", aliases = ""-g"", metaVar = ""GROUP"", usage = ""initial set of groups to be included in the account"") void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID id) { initialGroups.add(id); }",87137d134f544904ea5baa86dfe765bec707b7cf,"@org.kohsuke.args4j.Option(name = ""--group"", aliases = ""-g"", metaVar = ""GROUP"", usage = ""initial set of groups to be included in the group"") void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID id) { initialGroups.add(id); }",6ca2a5c721d6867400a013b25278d6dedd5ddb23,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_elasticsearch_ElasticGroupIndex.java,"@java.lang.Override public void replace(com.google.gerrit.server.group.InternalGroup group) throws java.io.IOException { io.searchbox.core.Bulk bulk = new io.searchbox.core.Bulk.Builder().defaultIndex(indexName).defaultType(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS).addAction(insert(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS, group)).refresh(true).build(); io.searchbox.client.JestResult result = client.execute(bulk); if (!(result.isSucceeded())) { throw new java.io.IOException(java.lang.String.format(""Failed to replace group %s in index %s: %s"", group.getGroupUUID().get(), indexName, result.getErrorMessage())); } }",f90f9d08bb98b7e4f4e3f865e27df4485015f37d,"@java.lang.Override public void replace(com.google.gerrit.server.group.InternalGroup group) throws java.io.IOException { io.searchbox.core.Bulk bulk = new io.searchbox.core.Bulk.Builder().defaultIndex(indexName).defaultType(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS).addAction(insert(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS, group)).refresh(true).build(); io.searchbox.client.JestResult result = client.execute(bulk); if (!(result.isSucceeded())) { throw new java.io.IOException(java.lang.String.format(""Failed to replace account %s in index %s: %s"", group.getGroupUUID().get(), indexName, result.getErrorMessage())); } }",5248c2be5e7d16e4a02da27573f736321579a49a,"@java.lang.Override public void replace(com.google.gerrit.server.group.InternalGroup group) throws java.io.IOException { io.searchbox.core.Bulk bulk = new io.searchbox.core.Bulk.Builder().defaultIndex(indexName).defaultType(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS).addAction(insert(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS, group)).refresh(true).build(); io.searchbox.client.JestResult result = client.execute(bulk); if (!(result.isSucceeded())) { throw new java.io.IOException(java.lang.String.format(""Failed to replace group %s in index %s: %s"", group.getGroupUUID().get(), indexName, result.getErrorMessage())); } }",f90f9d08bb98b7e4f4e3f865e27df4485015f37d,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_sshd_commands_SetMembersCommand.java,"private void reportGroupsAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupUuidList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = groupUuidList.stream().map(( uuid) -> groupCache.get(uuid).map(com.google.gerrit.server.group.InternalGroup::getName)).flatMap(Streams::stream).collect(java.util.stream.Collectors.joining("", "")); out.write(java.lang.String.format(""Groups %s group %s: %s\n"", action, group.getName(), names).getBytes(com.google.gerrit.sshd.commands.ENC)); }",dc9c9f89249cf39300b555030efdb06ba34926d3,"private void reportGroupsAction(java.lang.String action, com.google.gerrit.server.restapi.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupUuidList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = groupUuidList.stream().map(( uuid) -> groupCache.get(uuid).map(com.google.gerrit.server.group.InternalGroup::getName)).flatMap(Streams::stream).collect(java.util.stream.Collectors.joining("", "")); out.write(java.lang.String.format(""Groups %s account %s: %s\n"", action, group.getName(), names).getBytes(com.google.gerrit.sshd.commands.ENC)); }",fb79e33dc2c98e92533180f053a69d1132c0357e,"private void reportGroupsAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupUuidList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = groupUuidList.stream().map(( uuid) -> groupCache.get(uuid).map(com.google.gerrit.server.group.InternalGroup::getName)).flatMap(Streams::stream).collect(java.util.stream.Collectors.joining("", "")); out.write(java.lang.String.format(""Groups %s group %s: %s\n"", action, group.getName(), names).getBytes(com.google.gerrit.sshd.commands.ENC)); }",dc9c9f89249cf39300b555030efdb06ba34926d3,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_sshd_commands_SetMembersCommand.java,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gerrit.sshd.commands.UnloggedFailure, java.lang.Exception { try { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid : groups) { com.google.gerrit.server.group.GroupResource resource = groupsCollection.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(groupUuid.get())); if (!(accountsToRemove.isEmpty())) { deleteMembers.apply(resource, fromMembers(accountsToRemove)); reportMembersAction(""removed from"", resource, accountsToRemove); } if (!(groupsToRemove.isEmpty())) { deleteSubgroups.apply(resource, fromGroups(groupsToRemove)); reportGroupsAction(""excluded from"", resource, groupsToRemove); } if (!(accountsToAdd.isEmpty())) { addMembers.apply(resource, fromMembers(accountsToAdd)); reportMembersAction(""added to"", resource, accountsToAdd); } if (!(groupsToInclude.isEmpty())) { addSubgroups.apply(resource, fromGroups(groupsToInclude)); reportGroupsAction(""included to"", resource, groupsToInclude); } } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }",ed59297f202ea09663d0b5917ee75cb1a969dc16,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gerrit.sshd.commands.UnloggedFailure, java.lang.Exception { try { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid : groups) { com.google.gerrit.server.restapi.group.GroupResource resource = groupsCollection.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(groupUuid.get())); if (!(accountsToRemove.isEmpty())) { deleteMembers.apply(resource, fromMembers(accountsToRemove)); reportMembersAction(""removed from"", resource, accountsToRemove); } if (!(groupsToRemove.isEmpty())) { deleteSubgroups.apply(resource, fromGroups(groupsToRemove)); reportGroupsAction(""excluded from"", resource, groupsToRemove); } if (!(accountsToAdd.isEmpty())) { addMembers.apply(resource, fromMembers(accountsToAdd)); reportMembersAction(""added to"", resource, accountsToAdd); } if (!(groupsToInclude.isEmpty())) { addSubgroups.apply(resource, fromGroups(groupsToInclude)); reportGroupsAction(""included to"", resource, groupsToInclude); } } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }",ef26b3ac9b90d13d66b027f8db9c066351eae147,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gerrit.sshd.commands.UnloggedFailure, java.lang.Exception { try { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid : groups) { com.google.gerrit.server.group.GroupResource resource = groupsCollection.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(groupUuid.get())); if (!(accountsToRemove.isEmpty())) { deleteMembers.apply(resource, fromMembers(accountsToRemove)); reportMembersAction(""removed from"", resource, accountsToRemove); } if (!(groupsToRemove.isEmpty())) { deleteSubgroups.apply(resource, fromGroups(groupsToRemove)); reportGroupsAction(""excluded from"", resource, groupsToRemove); } if (!(accountsToAdd.isEmpty())) { addMembers.apply(resource, fromMembers(accountsToAdd)); reportMembersAction(""added to"", resource, accountsToAdd); } if (!(groupsToInclude.isEmpty())) { addSubgroups.apply(resource, fromGroups(groupsToInclude)); reportGroupsAction(""included to"", resource, groupsToInclude); } } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }",ed59297f202ea09663d0b5917ee75cb1a969dc16,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_sshd_commands_SetMembersCommand.java,"private void reportMembersAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.get(accountId).getAccount().getPreferredEmail(), ""n/a"")).collect(java.util.stream.Collectors.joining("", "")); out.write(java.lang.String.format(""Members %s group %s: %s\n"", action, group.getName(), names).getBytes(com.google.gerrit.sshd.commands.ENC)); }",822d1dd3537ae41a2648a8553efa8820c8ee3368,"private void reportMembersAction(java.lang.String action, com.google.gerrit.server.restapi.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.get(accountId).getAccount().getPreferredEmail(), ""n/a"")).collect(java.util.stream.Collectors.joining("", "")); out.write(java.lang.String.format(""Members %s account %s: %s\n"", action, group.getName(), names).getBytes(com.google.gerrit.sshd.commands.ENC)); }",b6e26f9a9cd191679ac421f9880945b5aa0dbd34,"private void reportMembersAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.get(accountId).getAccount().getPreferredEmail(), ""n/a"")).collect(java.util.stream.Collectors.joining("", "")); out.write(java.lang.String.format(""Members %s group %s: %s\n"", action, group.getName(), names).getBytes(com.google.gerrit.sshd.commands.ENC)); }",822d1dd3537ae41a2648a8553efa8820c8ee3368,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_PutProject.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""Project \"""" + (resource.getName())) + ""\"" already exists"")); }",6890f38193c1bd83620f177d39ffc8dd1b85f6c6,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""Project \"""" + (resource.getName())) + ""\"" already exists"")); }",84010b820fa2afb08a5e4734deb0f9ca5e85bf9e,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""Project \"""" + (resource.getName())) + ""\"" already exists"")); }",6890f38193c1bd83620f177d39ffc8dd1b85f6c6,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_sshd_commands_SetProjectCommand.java,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { com.google.gerrit.extensions.api.projects.ConfigInput configInput = new com.google.gerrit.extensions.api.projects.ConfigInput(); configInput.requireChangeId = requireChangeID; configInput.submitType = submitType; configInput.useContentMerge = contentMerge; configInput.useContributorAgreements = contributorAgreements; configInput.useSignedOffBy = signedOffBy; configInput.state = state.getProject().getState(); configInput.maxObjectSizeLimit = maxObjectSizeLimit; if ((com.google.common.base.Strings.emptyToNull(projectDescription)) != null) { configInput.description = projectDescription; } else { configInput.description = projectState.getProject().getDescription(); } try { putConfig.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), configInput); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw die(e); } }",9a5f23eecd42ee6dc8816ee0790c0146e308a0a6,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { com.google.gerrit.extensions.api.projects.ConfigInput configInput = new com.google.gerrit.extensions.api.projects.ConfigInput(); configInput.requireChangeId = requireChangeID; configInput.submitType = submitType; configInput.useContentMerge = contentMerge; configInput.useContributorAgreements = contributorAgreements; configInput.useSignedOffBy = signedOffBy; configInput.state = state.getProject().getState(); configInput.maxObjectSizeLimit = maxObjectSizeLimit; if ((com.google.common.base.Strings.emptyToNull(projectDescription)) != null) { configInput.description = projectDescription; } else { configInput.description = projectState.getProject().getDescription(); } try { putConfig.apply(new com.google.gerrit.server.restapi.project.ProjectResource(projectState, user), configInput); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw die(e); } }",1d6475e5720b5a34335ace316a255def29c03cc4,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { com.google.gerrit.extensions.api.projects.ConfigInput configInput = new com.google.gerrit.extensions.api.projects.ConfigInput(); configInput.requireChangeId = requireChangeID; configInput.submitType = submitType; configInput.useContentMerge = contentMerge; configInput.useContributorAgreements = contributorAgreements; configInput.useSignedOffBy = signedOffBy; configInput.state = state.getProject().getState(); configInput.maxObjectSizeLimit = maxObjectSizeLimit; if ((com.google.common.base.Strings.emptyToNull(projectDescription)) != null) { configInput.description = projectDescription; } else { configInput.description = projectState.getProject().getDescription(); } try { putConfig.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), configInput); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw die(e); } }",9a5f23eecd42ee6dc8816ee0790c0146e308a0a6,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_groups_GroupApiImpl.java,com.google.gerrit.server.api.groups.GroupApiImpl create(com.google.gerrit.server.group.GroupResource rsrc);,2213e39fc563516c8efd1e676c129c44aa9fb0dd,com.google.gerrit.server.api.groups.GroupApiImpl create(com.google.gerrit.server.restapi.group.GroupResource rsrc);,556ba79eb2632359f8d67aed57629468a1289989,com.google.gerrit.server.api.groups.GroupApiImpl create(com.google.gerrit.server.group.GroupResource rsrc);,2213e39fc563516c8efd1e676c129c44aa9fb0dd,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_groups_GroupApiImpl.java,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo owner() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getOwner.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot get group owner"", e); } }",3f7538c1aba735eb867127171e65d43742e79a3c,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo owner() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getOwner.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot get account owner"", e); } }",3791d406aaac43314e180c0ed34991d68e82512b,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo owner() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getOwner.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot get group owner"", e); } }",3f7538c1aba735eb867127171e65d43742e79a3c,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_groups_GroupApiImpl.java,"@java.lang.Override public void options(com.google.gerrit.extensions.common.GroupOptionsInfo options) throws com.google.gerrit.extensions.restapi.RestApiException { try { putOptions.apply(rsrc, options); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot put group options"", e); } }",0e5d5afb214aa7207fe24c7231e4cfb6261c343d,"@java.lang.Override public void options(com.google.gerrit.extensions.common.GroupOptionsInfo options) throws com.google.gerrit.extensions.restapi.RestApiException { try { putOptions.apply(rsrc, options); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot put account options"", e); } }",1fe05e77d76be900000223cbd8e84b2c89bd47c1,"@java.lang.Override public void options(com.google.gerrit.extensions.common.GroupOptionsInfo options) throws com.google.gerrit.extensions.restapi.RestApiException { try { putOptions.apply(rsrc, options); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot put group options"", e); } }",0e5d5afb214aa7207fe24c7231e4cfb6261c343d,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_groups_GroupApiImpl.java,"@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(rsrc, new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot index group"", e); } }",894d2f4a106a701bd5618c91d98b391a246d2c6a,"@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(rsrc, new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot index account"", e); } }",faa6d6968666494e0d76e99e9a685df776c1a58c,"@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(rsrc, new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot index group"", e); } }",894d2f4a106a701bd5618c91d98b391a246d2c6a,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_groups_GroupApiImpl.java,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> members(boolean recursive) throws com.google.gerrit.extensions.restapi.RestApiException { listMembers.setRecursive(recursive); try { return listMembers.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot list group members"", e); } }",65abc58401749be903da6fc80d6896937c9d02a4,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> members(boolean recursive) throws com.google.gerrit.extensions.restapi.RestApiException { listMembers.setRecursive(recursive); try { return listMembers.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot list account members"", e); } }",b2e99efcce61d13f9c1d74386bb2e5c70c1c07ec,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> members(boolean recursive) throws com.google.gerrit.extensions.restapi.RestApiException { listMembers.setRecursive(recursive); try { return listMembers.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot list group members"", e); } }",65abc58401749be903da6fc80d6896937c9d02a4,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_groups_GroupApiImpl.java,"@java.lang.Override public void removeMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot remove group members"", e); } }",9866f06bd0c0719f772fd3160f675715a317fa72,"@java.lang.Override public void removeMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot remove account members"", e); } }",8d2ea67e717a49fcb21157a44360578cd59f1e8b,"@java.lang.Override public void removeMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot remove group members"", e); } }",9866f06bd0c0719f772fd3160f675715a317fa72,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_groups_GroupApiImpl.java,"@java.lang.Override public void name(java.lang.String name) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.NameInput in = new com.google.gerrit.extensions.common.NameInput(); in.name = name; try { putName.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot put group name"", e); } }",74b272f332516c920bfb131e5b7086fd871c4f72,"@java.lang.Override public void name(java.lang.String name) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.NameInput in = new com.google.gerrit.extensions.common.NameInput(); in.name = name; try { putName.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot put account name"", e); } }",b44b7a881a0b7b872908fe351ebc5ff183c9c644,"@java.lang.Override public void name(java.lang.String name) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.NameInput in = new com.google.gerrit.extensions.common.NameInput(); in.name = name; try { putName.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot put group name"", e); } }",74b272f332516c920bfb131e5b7086fd871c4f72,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_groups_GroupApiImpl.java,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo detail() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getDetail.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot retrieve group"", e); } }",3cde3428692ff1ce60bc59777a5cc8ccebbbeb31,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo detail() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getDetail.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot retrieve account"", e); } }",b184bffb6e10978076777899b846af19de3ab7e7,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo detail() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getDetail.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot retrieve group"", e); } }",3cde3428692ff1ce60bc59777a5cc8ccebbbeb31,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_groups_GroupApiImpl.java,"@java.lang.Override public void addMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { addMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot add group members"", e); } }",072dee825daab21c138c0e56c941e3a3a55cae7b,"@java.lang.Override public void addMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { addMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot add account members"", e); } }",8cf7f67af3494e0891291e3187a21eec990fbf4e,"@java.lang.Override public void addMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { addMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot add group members"", e); } }",072dee825daab21c138c0e56c941e3a3a55cae7b,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_groups_GroupApiImpl.java,"@java.lang.Override public void description(java.lang.String description) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.DescriptionInput in = new com.google.gerrit.extensions.common.DescriptionInput(); in.description = description; try { putDescription.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot put group description"", e); } }",cc64f3552294963f4184a061c600cc6aecede3e0,"@java.lang.Override public void description(java.lang.String description) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.DescriptionInput in = new com.google.gerrit.extensions.common.DescriptionInput(); in.description = description; try { putDescription.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot put account description"", e); } }",e7993ab3efe5d9edf490f06b54eecb18f23aa6c6,"@java.lang.Override public void description(java.lang.String description) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.DescriptionInput in = new com.google.gerrit.extensions.common.DescriptionInput(); in.description = description; try { putDescription.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot put group description"", e); } }",cc64f3552294963f4184a061c600cc6aecede3e0,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_sshd_commands_CreateGroupCommand.java,"@org.kohsuke.args4j.Option(name = ""--member"", aliases = { ""-m"" }, metaVar = ""USERNAME"", usage = ""initial set of users to become members of the group"") void addMember(com.google.gerrit.reviewdb.client.Account.Id id) { initialMembers.add(id); }",1f624bc3c6ee283d9c0a0aa580e44048842003aa,"@org.kohsuke.args4j.Option(name = ""--member"", aliases = { ""-m"" }, metaVar = ""USERNAME"", usage = ""initial set of users to become members of the account"") void addMember(com.google.gerrit.reviewdb.client.Account.Id id) { initialMembers.add(id); }",113b785a1da9575b7f72de8a6e5436e9501b866b,"@org.kohsuke.args4j.Option(name = ""--member"", aliases = { ""-m"" }, metaVar = ""USERNAME"", usage = ""initial set of users to become members of the group"") void addMember(com.google.gerrit.reviewdb.client.Account.Id id) { initialMembers.add(id); }",1f624bc3c6ee283d9c0a0aa580e44048842003aa,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_sshd_commands_CreateGroupCommand.java,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { com.google.gerrit.server.group.GroupResource rsrc = createGroup(); if (!(initialMembers.isEmpty())) { addMembers(rsrc); } if (!(initialGroups.isEmpty())) { addSubgroups(rsrc); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e); } }",1f5ee16303864646fa1036bdd258003a772470af,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { com.google.gerrit.server.restapi.group.GroupResource rsrc = createGroup(); if (!(initialMembers.isEmpty())) { addMembers(rsrc); } if (!(initialGroups.isEmpty())) { addSubgroups(rsrc); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e); } }",f9e7acd446f54d3ba0d19b85ec37602bbc6ee74d,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { com.google.gerrit.server.group.GroupResource rsrc = createGroup(); if (!(initialMembers.isEmpty())) { addMembers(rsrc); } if (!(initialGroups.isEmpty())) { addSubgroups(rsrc); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e); } }",1f5ee16303864646fa1036bdd258003a772470af,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_sshd_commands_CreateGroupCommand.java,"private com.google.gerrit.server.group.GroupResource createGroup() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.extensions.api.groups.GroupInput input = new com.google.gerrit.extensions.api.groups.GroupInput(); input.description = groupDescription; input.visibleToAll = visibleToAll; if ((ownerGroupId) != null) { input.ownerId = java.lang.String.valueOf(ownerGroupId.get()); } com.google.gerrit.extensions.common.GroupInfo group = createGroupFactory.create(groupName).apply(TopLevelResource.INSTANCE, input); return groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(group.id)); }",7612ebb919fbf690f54025a926df2012c26ffccb,"private com.google.gerrit.server.restapi.group.GroupResource createGroup() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.extensions.api.groups.GroupInput input = new com.google.gerrit.extensions.api.groups.GroupInput(); input.description = groupDescription; input.visibleToAll = visibleToAll; if ((ownerGroupId) != null) { input.ownerId = java.lang.String.valueOf(ownerGroupId.get()); } com.google.gerrit.extensions.common.GroupInfo group = createGroupFactory.create(groupName).apply(TopLevelResource.INSTANCE, input); return groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(group.id)); }",fe04a20a20fe5e8ca7ad23a14ea35e15b1f397ef,"private com.google.gerrit.server.group.GroupResource createGroup() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.extensions.api.groups.GroupInput input = new com.google.gerrit.extensions.api.groups.GroupInput(); input.description = groupDescription; input.visibleToAll = visibleToAll; if ((ownerGroupId) != null) { input.ownerId = java.lang.String.valueOf(ownerGroupId.get()); } com.google.gerrit.extensions.common.GroupInfo group = createGroupFactory.create(groupName).apply(TopLevelResource.INSTANCE, input); return groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(group.id)); }",7612ebb919fbf690f54025a926df2012c26ffccb,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_groups_GroupsImpl.java,"@java.lang.Override public com.google.gerrit.extensions.api.groups.GroupApi create(com.google.gerrit.extensions.api.groups.GroupInput in) throws com.google.gerrit.extensions.restapi.RestApiException { if ((checkNotNull(in, ""GroupInput"").name) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""GroupInput must specify name""); } try { com.google.gerrit.server.group.CreateGroup impl = createGroup.create(in.name); permissionBackend.user(user).checkAny(com.google.gerrit.server.permissions.GlobalPermission.fromAnnotation(impl.getClass())); com.google.gerrit.extensions.common.GroupInfo info = impl.apply(TopLevelResource.INSTANCE, in); return id(info.id); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException((""Cannot create group "" + (in.name)), e); } }",a22d35fc87bf4ae6fbe1421cf5c1aa5a85965859,"@java.lang.Override public com.google.gerrit.extensions.api.groups.GroupApi create(com.google.gerrit.extensions.api.groups.GroupInput in) throws com.google.gerrit.extensions.restapi.RestApiException { if ((checkNotNull(in, ""GroupInput"").name) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""GroupInput must specify name""); } try { com.google.gerrit.server.restapi.group.CreateGroup impl = createGroup.create(in.name); permissionBackend.user(user).checkAny(com.google.gerrit.server.permissions.GlobalPermission.fromAnnotation(impl.getClass())); com.google.gerrit.extensions.common.GroupInfo info = impl.apply(TopLevelResource.INSTANCE, in); return id(info.id); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException((""Cannot create account "" + (in.name)), e); } }",c5673aa435e4c1bbac54dcc41aa7d643a3a9c931,"@java.lang.Override public com.google.gerrit.extensions.api.groups.GroupApi create(com.google.gerrit.extensions.api.groups.GroupInput in) throws com.google.gerrit.extensions.restapi.RestApiException { if ((checkNotNull(in, ""GroupInput"").name) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""GroupInput must specify name""); } try { com.google.gerrit.server.restapi.group.CreateGroup impl = createGroup.create(in.name); permissionBackend.user(user).checkAny(com.google.gerrit.server.permissions.GlobalPermission.fromAnnotation(impl.getClass())); com.google.gerrit.extensions.common.GroupInfo info = impl.apply(TopLevelResource.INSTANCE, in); return id(info.id); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException((""Cannot create group "" + (in.name)), e); } }",73e1cc68f8459dddd0e182d23fd7e5a7ab9c82c6,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_db_GroupNameNotes.java,"public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPNAMES); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository);org.eclipse.jgit.lib.ObjectReader reader = revWalk.getObjectReader()) { org.eclipse.jgit.revwalk.RevCommit notesCommit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, notesCommit); java.util.Set<com.google.gerrit.common.data.GroupReference> groupReferences = new java.util.LinkedHashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.common.data.GroupReference groupReference = com.google.gerrit.server.group.db.GroupNameNotes.getGroupReference(reader, note.getData()); boolean result = groupReferences.add(groupReference); if (!result) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblemAsWarning(""The UUID of group %s (%s) is duplicate in group name notes"", groupReference.getName(), groupReference.getUUID()); } } return com.google.common.collect.ImmutableSet.copyOf(groupReferences); } }",0645c99abf5d09d5c6ffc7c653735d1db77f8231,"public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPNAMES); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository);org.eclipse.jgit.lib.ObjectReader reader = revWalk.getObjectReader()) { org.eclipse.jgit.revwalk.RevCommit notesCommit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, notesCommit); java.util.Set<com.google.gerrit.common.data.GroupReference> groupReferences = new java.util.LinkedHashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.common.data.GroupReference groupReference = com.google.gerrit.server.group.db.GroupNameNotes.getGroupReference(reader, note.getData()); boolean result = groupReferences.add(groupReference); if (!result) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblemAsWarning(""The UUID of account %s (%s) is duplicate in account name notes"", groupReference.getName(), groupReference.getUUID()); } } return com.google.common.collect.ImmutableSet.copyOf(groupReferences); } }",174dc58b7b2dcb8907fbca3907460f02aec6cc4c,"public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPNAMES); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository);org.eclipse.jgit.lib.ObjectReader reader = revWalk.getObjectReader()) { org.eclipse.jgit.revwalk.RevCommit notesCommit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, notesCommit); java.util.Set<com.google.gerrit.common.data.GroupReference> groupReferences = new java.util.LinkedHashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.common.data.GroupReference groupReference = com.google.gerrit.server.group.db.GroupNameNotes.getGroupReference(reader, note.getData()); boolean result = groupReferences.add(groupReference); if (!result) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblemAsWarning(""The UUID of group %s (%s) is duplicate in group name notes"", groupReference.getName(), groupReference.getUUID()); } } return com.google.common.collect.ImmutableSet.copyOf(groupReferences); } }",0645c99abf5d09d5c6ffc7c653735d1db77f8231,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_db_GroupNameNotes.java,"private java.lang.String getCommitMessage() { if ((oldGroupName.isPresent()) && (newGroupName.isPresent())) { return java.lang.String.format(""Rename group from '%s' to '%s'"", oldGroupName.get(), newGroupName.get()); } if (newGroupName.isPresent()) { return java.lang.String.format(""Create group '%s'"", newGroupName.get()); } if (oldGroupName.isPresent()) { return java.lang.String.format(""Delete group '%s'"", oldGroupName.get()); } return ""No-op""; }",e13a64b74bd3e58659cecb62ec30da440014ec67,"private java.lang.String getCommitMessage() { if ((oldGroupName.isPresent()) && (newGroupName.isPresent())) { return java.lang.String.format(""Rename account from '%s' to '%s'"", oldGroupName.get(), newGroupName.get()); } if (newGroupName.isPresent()) { return java.lang.String.format(""Create account '%s'"", newGroupName.get()); } if (oldGroupName.isPresent()) { return java.lang.String.format(""Delete account '%s'"", oldGroupName.get()); } return ""No-op""; }",0717288b7909fde1a76a27bc17d0871c48585e1a,"private java.lang.String getCommitMessage() { if ((oldGroupName.isPresent()) && (newGroupName.isPresent())) { return java.lang.String.format(""Rename group from '%s' to '%s'"", oldGroupName.get(), newGroupName.get()); } if (newGroupName.isPresent()) { return java.lang.String.format(""Create group '%s'"", newGroupName.get()); } if (oldGroupName.isPresent()) { return java.lang.String.format(""Delete group '%s'"", oldGroupName.get()); } return ""No-op""; }",e13a64b74bd3e58659cecb62ec30da440014ec67,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_account_PutAgreement.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource resource, com.google.gerrit.extensions.common.AgreementInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""contributor agreements disabled""); } if ((self.get()) != (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to enter contributor agreement""); } java.lang.String agreementName = com.google.common.base.Strings.nullToEmpty(input.name); com.google.gerrit.common.data.ContributorAgreement ca = projectCache.getAllProjects().getConfig().getContributorAgreement(agreementName); if (ca == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""contributor agreement not found""); } if ((ca.getAutoVerify()) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""cannot enter a non-autoVerify agreement""); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = ca.getAutoVerify().getUUID(); if (uuid == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""autoverify group uuid not found""); } com.google.gerrit.reviewdb.client.Account account = self.get().getAccount(); try { addMembers.addMembers(uuid, com.google.common.collect.ImmutableSet.of(account.getId())); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""autoverify group not found""); } agreementSignup.fire(account, agreementName); return com.google.gerrit.extensions.restapi.Response.ok(agreementName); }",0b5c21c7da0e026ebee2823aa214f0b5e6fd8944,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource resource, com.google.gerrit.extensions.common.AgreementInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""contributor agreements disabled""); } if ((self.get()) != (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to enter contributor agreement""); } java.lang.String agreementName = com.google.common.base.Strings.nullToEmpty(input.name); com.google.gerrit.common.data.ContributorAgreement ca = projectCache.getAllProjects().getConfig().getContributorAgreement(agreementName); if (ca == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""contributor agreement not found""); } if ((ca.getAutoVerify()) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""cannot enter a non-autoVerify agreement""); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = ca.getAutoVerify().getUUID(); if (uuid == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""autoverify account uuid not found""); } com.google.gerrit.reviewdb.client.Account account = self.get().getAccount(); try { addMembers.addMembers(uuid, com.google.common.collect.ImmutableSet.of(account.getId())); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""autoverify account not found""); } agreementSignup.fire(account, agreementName); return com.google.gerrit.extensions.restapi.Response.ok(agreementName); }",a447aa17fc52de3f3501e4c7a015306ff9e0a8f7,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource resource, com.google.gerrit.extensions.common.AgreementInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""contributor agreements disabled""); } if ((self.get()) != (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to enter contributor agreement""); } java.lang.String agreementName = com.google.common.base.Strings.nullToEmpty(input.name); com.google.gerrit.common.data.ContributorAgreement ca = projectCache.getAllProjects().getConfig().getContributorAgreement(agreementName); if (ca == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""contributor agreement not found""); } if ((ca.getAutoVerify()) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""cannot enter a non-autoVerify agreement""); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = ca.getAutoVerify().getUUID(); if (uuid == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""autoverify group uuid not found""); } com.google.gerrit.reviewdb.client.Account account = self.get().getAccount(); try { addMembers.addMembers(uuid, com.google.common.collect.ImmutableSet.of(account.getId())); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""autoverify group not found""); } agreementSignup.fire(account, agreementName); return com.google.gerrit.extensions.restapi.Response.ok(agreementName); }",0b5c21c7da0e026ebee2823aa214f0b5e6fd8944,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsConsistencyIT.java,"@org.junit.Test public void sharedGroupID() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString(""group"", null, ""name"", g1.name); cfg.setInt(""group"", null, ""id"", g2.groupId); cfg.setString(""group"", null, ""ownerGroupUuid"", gAdmin.id); updateGroupFile(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), GroupConfig.GROUP_CONFIG_FILE, cfg.toText()); assertError(""shared group id""); }",763e4e396458b7fd635c9b6d6c48ebb8e93d3449,"@org.junit.Test public void sharedGroupID() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString(""group"", null, ""name"", g1.name); cfg.setInt(""group"", null, ""id"", g2.groupId); cfg.setString(""group"", null, ""ownerGroupUuid"", gAdmin.id); updateGroupFile(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), GroupConfig.GROUP_CONFIG_FILE, cfg.toText()); assertError(""shared account id""); }",6788d75d3fd34c28f64ebbf7638727a8f04f041d,"@org.junit.Test public void sharedGroupID() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString(""group"", null, ""name"", g1.name); cfg.setInt(""group"", null, ""id"", g2.groupId); cfg.setString(""group"", null, ""ownerGroupUuid"", gAdmin.id); updateGroupFile(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), GroupConfig.GROUP_CONFIG_FILE, cfg.toText()); assertError(""shared group id""); }",763e4e396458b7fd635c9b6d6c48ebb8e93d3449,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsConsistencyIT.java,"@org.junit.Test public void missingGroupNameRef() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(RefNames.REFS_GROUPNAMES); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertError(""refs/meta/group-names does not exist""); }",94990abfffd2435ce19c29a2d8f622219ff2a9e6,"@org.junit.Test public void missingGroupNameRef() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(RefNames.REFS_GROUPNAMES); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertError(""refs/meta/account-names does not exist""); }",f9d2b69fc5a4ca1695b34d7721b355554c1fc5ec,"@org.junit.Test public void missingGroupNameRef() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(RefNames.REFS_GROUPNAMES); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertError(""refs/meta/group-names does not exist""); }",94990abfffd2435ce19c29a2d8f622219ff2a9e6,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsConsistencyIT.java,"@org.junit.Test public void nameWithoutGroupRef() throws java.lang.Exception { java.lang.String bogusName = ""bogus name""; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.setString(""group"", null, ""uuid"", com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID); config.setString(""group"", null, ""name"", bogusName); updateGroupFile(RefNames.REFS_GROUPNAMES, com.google.gerrit.server.group.db.GroupNameNotes.getNoteKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(bogusName)).getName(), config.toText()); assertError(""entry missing as group ref""); }",8b60bf3c1532dcfb31dfdbad20500548276ec6b4,"@org.junit.Test public void nameWithoutGroupRef() throws java.lang.Exception { java.lang.String bogusName = ""bogus name""; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.setString(""group"", null, ""uuid"", com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID); config.setString(""group"", null, ""name"", bogusName); updateGroupFile(RefNames.REFS_GROUPNAMES, com.google.gerrit.server.group.db.GroupNameNotes.getNoteKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(bogusName)).getName(), config.toText()); assertError(""entry missing as account ref""); }",69d8985ba0c117d666d3b760080230b94b8538e5,"@org.junit.Test public void nameWithoutGroupRef() throws java.lang.Exception { java.lang.String bogusName = ""bogus name""; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.setString(""group"", null, ""uuid"", com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID); config.setString(""group"", null, ""name"", bogusName); updateGroupFile(RefNames.REFS_GROUPNAMES, com.google.gerrit.server.group.db.GroupNameNotes.getNoteKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(bogusName)).getName(), config.toText()); assertError(""entry missing as group ref""); }",8b60bf3c1532dcfb31dfdbad20500548276ec6b4,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsConsistencyIT.java,"@org.junit.Test public void missingNameEntry() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefRename ru = repo.renameRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID))); org.eclipse.jgit.lib.RefUpdate.Result result = ru.rename(); assertThat(result).isEqualTo(Result.RENAMED); } assertError(((""group "" + (com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID)) + "" has no entry in name map"")); }",8112f321e7c88bacd973463b3343f981ba57cc83,"@org.junit.Test public void missingNameEntry() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefRename ru = repo.renameRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID))); org.eclipse.jgit.lib.RefUpdate.Result result = ru.rename(); assertThat(result).isEqualTo(Result.RENAMED); } assertError(((""account "" + (com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID)) + "" has no entry in name map"")); }",a030bd6b1a8a3e82579c7d946dbe7b7bbaaa19ab,"@org.junit.Test public void missingNameEntry() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefRename ru = repo.renameRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID))); org.eclipse.jgit.lib.RefUpdate.Result result = ru.rename(); assertThat(result).isEqualTo(Result.RENAMED); } assertError(((""group "" + (com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID)) + "" has no entry in name map"")); }",8112f321e7c88bacd973463b3343f981ba57cc83,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsConsistencyIT.java,"@org.junit.Test public void unknownOwnerGroup() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString(""group"", null, ""name"", g1.name); cfg.setInt(""group"", null, ""id"", g1.groupId); cfg.setString(""group"", null, ""ownerGroupUuid"", com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID); updateGroupFile(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), GroupConfig.GROUP_CONFIG_FILE, cfg.toText()); assertError(""nonexistent owner group""); }",9640a4e182c84e932b9b0c605fbdee58d6603a42,"@org.junit.Test public void unknownOwnerGroup() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString(""group"", null, ""name"", g1.name); cfg.setInt(""group"", null, ""id"", g1.groupId); cfg.setString(""group"", null, ""ownerGroupUuid"", com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID); updateGroupFile(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), GroupConfig.GROUP_CONFIG_FILE, cfg.toText()); assertError(""nonexistent owner account""); }",56e24d24d83b2fe25ab364876067589c3388f912,"@org.junit.Test public void unknownOwnerGroup() throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString(""group"", null, ""name"", g1.name); cfg.setInt(""group"", null, ""id"", g1.groupId); cfg.setString(""group"", null, ""ownerGroupUuid"", com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID); updateGroupFile(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), GroupConfig.GROUP_CONFIG_FILE, cfg.toText()); assertError(""nonexistent owner group""); }",9640a4e182c84e932b9b0c605fbdee58d6603a42,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsConsistencyIT.java,"@org.junit.Test public void missingGroupRef() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id))); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertError(""missing as group ref""); }",35dae42752202f8a826509ef307ecb19f9424e47,"@org.junit.Test public void missingGroupRef() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id))); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertError(""missing as account ref""); }",36932da442863fba196d298debc8999e4b749133,"@org.junit.Test public void missingGroupRef() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id))); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertError(""missing as group ref""); }",35dae42752202f8a826509ef307ecb19f9424e47,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_groups_GroupApiImpl.java,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo get() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getGroup.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot retrieve group"", e); } }",2dc3715dc62cad0958e3db51d4d57f47dfb6a1dd,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo get() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getGroup.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot retrieve account"", e); } }",1d2eeb5bb7365e7cb4b210d16c28ea7c356b4ba0,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo get() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getGroup.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot retrieve group"", e); } }",2dc3715dc62cad0958e3db51d4d57f47dfb6a1dd,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_SetDashboard.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.DashboardResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (resource.isProjectDefault()) { return defaultSetter.get().apply(resource, input); } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); }",a88571bd4c1598004c1ca9097f89903f1a73c9ec,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.restapi.project.DashboardResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (resource.isProjectDefault()) { return defaultSetter.get().apply(resource, input); } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); }",e9294b7bce35f58c497f298c8f4115385c20a8d2,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.DashboardResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (resource.isProjectDefault()) { return defaultSetter.get().apply(resource, input); } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); }",a88571bd4c1598004c1ca9097f89903f1a73c9ec,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_account_GroupCacheImpl.java,"@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.NameKey name) { if (name == null) { return java.util.Optional.empty(); } try { return byName.get(name.get()); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(java.lang.String.format(""Cannot look up group %s by name"", name.get()), e); return java.util.Optional.empty(); } }",4966ca3c95f4f249eec28cb34e5c046d8040357e,"@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.NameKey name) { if (name == null) { return java.util.Optional.empty(); } try { return byName.get(name.get()); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(java.lang.String.format(""Cannot look up account %s by name"", name.get()), e); return java.util.Optional.empty(); } }",5b4cc74919675b78f50ac0e079647325df854a31,"@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.NameKey name) { if (name == null) { return java.util.Optional.empty(); } try { return byName.get(name.get()); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(java.lang.String.format(""Cannot look up group %s by name"", name.get()), e); return java.util.Optional.empty(); } }",4966ca3c95f4f249eec28cb34e5c046d8040357e,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_account_GroupCacheImpl.java,"@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { try { return byId.get(groupId); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn((""Cannot load group "" + groupId), e); return java.util.Optional.empty(); } }",c63abe446d6289a33bdd43c013a1e7338b7f4060,"@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { try { return byId.get(groupId); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn((""Cannot load account "" + groupId), e); return java.util.Optional.empty(); } }",66dd11a06df44da3a870fad2a54d4af0e29243a7,"@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { try { return byId.get(groupId); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn((""Cannot load group "" + groupId), e); return java.util.Optional.empty(); } }",c63abe446d6289a33bdd43c013a1e7338b7f4060,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_account_GroupCacheImpl.java,"@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { if (groupUuid == null) { return java.util.Optional.empty(); } try { return byUUID.get(groupUuid.get()); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(java.lang.String.format(""Cannot look up group %s by uuid"", groupUuid.get()), e); return java.util.Optional.empty(); } }",7b60a66a00b6483b2295c9e6262560f867a5fe79,"@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { if (groupUuid == null) { return java.util.Optional.empty(); } try { return byUUID.get(groupUuid.get()); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(java.lang.String.format(""Cannot look up account %s by uuid"", groupUuid.get()), e); return java.util.Optional.empty(); } }",870622338208129abca4e65b6265ed9558701f7e,"@java.lang.Override public java.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { if (groupUuid == null) { return java.util.Optional.empty(); } try { return byUUID.get(groupUuid.get()); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(java.lang.String.format(""Cannot look up group %s by uuid"", groupUuid.get()), e); return java.util.Optional.empty(); } }",7b60a66a00b6483b2295c9e6262560f867a5fe79,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_sshd_commands_IndexProjectCommand.java,"private void index(com.google.gerrit.server.project.ProjectState projectState) { try { index.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), null); } catch (java.lang.Exception e) { writeError(""error"", java.lang.String.format(""Unable to index %s: %s"", projectState.getName(), e.getMessage())); } }",48d322c0d4e205a3ad5f90f6ab632b6da18832e1,"private void index(com.google.gerrit.server.project.ProjectState projectState) { try { index.apply(new com.google.gerrit.server.restapi.project.ProjectResource(projectState, user), null); } catch (java.lang.Exception e) { writeError(""error"", java.lang.String.format(""Unable to index %s: %s"", projectState.getName(), e.getMessage())); } }",c616e8848e2524cf252fe4adb4784f22c79dbdcb,"private void index(com.google.gerrit.server.project.ProjectState projectState) { try { index.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), null); } catch (java.lang.Exception e) { writeError(""error"", java.lang.String.format(""Unable to index %s: %s"", projectState.getName(), e.getMessage())); } }",48d322c0d4e205a3ad5f90f6ab632b6da18832e1,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_ListTags.java,"public com.google.gerrit.extensions.api.projects.TagInfo get(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.lang.String tagName = id.get(); if (!(tagName.startsWith(Constants.R_TAGS))) { tagName = (org.eclipse.jgit.lib.Constants.R_TAGS) + tagName; } org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(tagName); if ((ref != null) && (!(visibleTags(resource.getProjectState(), repo, com.google.common.collect.ImmutableMap.of(ref.getName(), ref)).isEmpty()))) { return com.google.gerrit.server.project.ListTags.createTagInfo(permissionBackend.user(resource.getUser()).project(resource.getNameKey()).ref(ref.getName()), ref, rw, resource.getNameKey(), links); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",61375679f36d883ebed2ad6411ecc6699e8b0bd2,"public com.google.gerrit.extensions.api.projects.TagInfo get(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.lang.String tagName = id.get(); if (!(tagName.startsWith(Constants.R_TAGS))) { tagName = (org.eclipse.jgit.lib.Constants.R_TAGS) + tagName; } org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(tagName); if ((ref != null) && (!(visibleTags(resource.getProjectState(), repo, com.google.common.collect.ImmutableMap.of(ref.getName(), ref)).isEmpty()))) { return com.google.gerrit.server.restapi.project.ListTags.createTagInfo(permissionBackend.user(resource.getUser()).project(resource.getNameKey()).ref(ref.getName()), ref, rw, resource.getNameKey(), links); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",6c9a14cf74fcde24bfa36a06f1915438fe158824,"public com.google.gerrit.extensions.api.projects.TagInfo get(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.lang.String tagName = id.get(); if (!(tagName.startsWith(Constants.R_TAGS))) { tagName = (org.eclipse.jgit.lib.Constants.R_TAGS) + tagName; } org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(tagName); if ((ref != null) && (!(visibleTags(resource.getProjectState(), repo, com.google.common.collect.ImmutableMap.of(ref.getName(), ref)).isEmpty()))) { return com.google.gerrit.server.restapi.project.ListTags.createTagInfo(permissionBackend.user(resource.getUser()).project(resource.getNameKey()).ref(ref.getName()), ref, rw, resource.getNameKey(), links); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",49b888e7a6b19d1be6939dd121b1571fee52ff2e,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_ListTags.java,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> apply(com.google.gerrit.server.project.ProjectResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> tags = new java.util.ArrayList<>(); com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(user).project(resource.getNameKey()); try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = visibleTags(resource.getProjectState(), repo, repo.getRefDatabase().getRefs(Constants.R_TAGS)); for (org.eclipse.jgit.lib.Ref ref : all.values()) { tags.add(com.google.gerrit.server.project.ListTags.createTagInfo(perm.ref(ref.getName()), ref, rw, resource.getNameKey(), links)); } } java.util.Collections.sort(tags, new java.util.Comparator<com.google.gerrit.extensions.api.projects.TagInfo>() { @java.lang.Override public int compare(com.google.gerrit.extensions.api.projects.TagInfo a, com.google.gerrit.extensions.api.projects.TagInfo b) { return a.ref.compareTo(b.ref); } }); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.TagInfo>(org.eclipse.jgit.lib.Constants.R_TAGS).start(start).limit(limit).subString(matchSubstring).regex(matchRegex).filter(tags); }",04aa60582bb9a4a675962093ef09fdd42ecbec64,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> apply(com.google.gerrit.server.restapi.project.ProjectResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> tags = new java.util.ArrayList<>(); com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(user).project(resource.getNameKey()); try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = visibleTags(resource.getProjectState(), repo, repo.getRefDatabase().getRefs(Constants.R_TAGS)); for (org.eclipse.jgit.lib.Ref ref : all.values()) { tags.add(com.google.gerrit.server.restapi.project.ListTags.createTagInfo(perm.ref(ref.getName()), ref, rw, resource.getNameKey(), links)); } } java.util.Collections.sort(tags, new java.util.Comparator<com.google.gerrit.extensions.api.projects.TagInfo>() { @java.lang.Override public int compare(com.google.gerrit.extensions.api.projects.TagInfo a, com.google.gerrit.extensions.api.projects.TagInfo b) { return a.ref.compareTo(b.ref); } }); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.TagInfo>(org.eclipse.jgit.lib.Constants.R_TAGS).start(start).limit(limit).subString(matchSubstring).regex(matchRegex).filter(tags); }",631319d2d6cf982549e268e810e6083ee17f3b4e,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> apply(com.google.gerrit.server.project.ProjectResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> tags = new java.util.ArrayList<>(); com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(user).project(resource.getNameKey()); try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = visibleTags(resource.getProjectState(), repo, repo.getRefDatabase().getRefs(Constants.R_TAGS)); for (org.eclipse.jgit.lib.Ref ref : all.values()) { tags.add(com.google.gerrit.server.restapi.project.ListTags.createTagInfo(perm.ref(ref.getName()), ref, rw, resource.getNameKey(), links)); } } java.util.Collections.sort(tags, new java.util.Comparator<com.google.gerrit.extensions.api.projects.TagInfo>() { @java.lang.Override public int compare(com.google.gerrit.extensions.api.projects.TagInfo a, com.google.gerrit.extensions.api.projects.TagInfo b) { return a.ref.compareTo(b.ref); } }); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.TagInfo>(org.eclipse.jgit.lib.Constants.R_TAGS).start(start).limit(limit).subString(matchSubstring).regex(matchRegex).filter(tags); }",a3b2b5620612c66cdf3f338e0701ec982f8c64f0,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_GetHashtags.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.Set<java.lang.String>> apply(com.google.gerrit.server.change.ChangeResource req) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.notedb.ChangeNotes notes = req.getNotes().load(); java.util.Set<java.lang.String> hashtags = notes.getHashtags(); if (hashtags == null) { hashtags = java.util.Collections.emptySet(); } return com.google.gerrit.extensions.restapi.Response.ok(hashtags); }",9af20f56b527058177b7cd22b7990c363aeee7ec,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.Set<java.lang.String>> apply(com.google.gerrit.server.restapi.change.ChangeResource req) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.notedb.ChangeNotes notes = req.getNotes().load(); java.util.Set<java.lang.String> hashtags = notes.getHashtags(); if (hashtags == null) { hashtags = java.util.Collections.emptySet(); } return com.google.gerrit.extensions.restapi.Response.ok(hashtags); }",c0893cca5457f2dc6e2b2292fce7a521038d4807,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.Set<java.lang.String>> apply(com.google.gerrit.server.change.ChangeResource req) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.notedb.ChangeNotes notes = req.getNotes().load(); java.util.Set<java.lang.String> hashtags = notes.getHashtags(); if (hashtags == null) { hashtags = java.util.Collections.emptySet(); } return com.google.gerrit.extensions.restapi.Response.ok(hashtags); }",9af20f56b527058177b7cd22b7990c363aeee7ec,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_rest_project_CreateBranchIT.java,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""noteDb.groups.write"", value = ""true"") public void createGroupBranch_Conflict() throws java.lang.Exception { allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); assertCreateFails(new com.google.gerrit.reviewdb.client.Branch.NameKey(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""foo""))), com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), com.google.gerrit.extensions.restapi.ResourceConflictException.class, ""Not allowed to create group branch.""); }",c70da8da0a506776615352f3c7529a365d569bd8,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""noteDb.groups.write"", value = ""true"") public void createGroupBranch_Conflict() throws java.lang.Exception { allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); assertCreateFails(new com.google.gerrit.reviewdb.client.Branch.NameKey(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""foo""))), com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), com.google.gerrit.extensions.restapi.ResourceConflictException.class, ""Not allowed to create account branch.""); }",dc318d7f199118677532a56f3236a621dfd54bd2,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""noteDb.groups.write"", value = ""true"") public void createGroupBranch_Conflict() throws java.lang.Exception { allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); assertCreateFails(new com.google.gerrit.reviewdb.client.Branch.NameKey(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""foo""))), com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), com.google.gerrit.extensions.restapi.ResourceConflictException.class, ""Not allowed to create group branch.""); }",c70da8da0a506776615352f3c7529a365d569bd8,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_groups_GroupsImpl.java,"private java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.GroupInfo> list(com.google.gerrit.server.api.groups.ListRequest req) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.restapi.TopLevelResource tlr = com.google.gerrit.extensions.restapi.TopLevelResource.INSTANCE; com.google.gerrit.server.group.ListGroups list = listGroups.get(); list.setOptions(req.getOptions()); for (java.lang.String project : req.getProjects()) { try { com.google.gerrit.server.project.ProjectResource rsrc = projects.parse(tlr, com.google.gerrit.extensions.restapi.IdString.fromDecoded(project)); list.addProject(rsrc.getProjectState()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException((""Error looking up project "" + project), e); } } for (java.lang.String group : req.getGroups()) { list.addGroup(groups.parse(group).getGroupUUID()); } list.setVisibleToAll(req.getVisibleToAll()); if ((req.getOwnedBy()) != null) { list.setOwnedBy(req.getOwnedBy()); } if ((req.getUser()) != null) { try { list.setUser(accounts.parse(req.getUser()).getAccountId()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException((""Error looking up user "" + (req.getUser())), e); } } list.setOwned(req.getOwned()); list.setLimit(req.getLimit()); list.setStart(req.getStart()); list.setMatchSubstring(req.getSubstring()); list.setMatchRegex(req.getRegex()); list.setSuggest(req.getSuggest()); try { return list.apply(tlr); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot list groups"", e); } }",5c157e122cabf4ff8f4037955402fa08d5f34a9f,"private java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.GroupInfo> list(com.google.gerrit.server.api.groups.ListRequest req) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.restapi.TopLevelResource tlr = com.google.gerrit.extensions.restapi.TopLevelResource.INSTANCE; com.google.gerrit.server.restapi.group.ListGroups list = listGroups.get(); list.setOptions(req.getOptions()); for (java.lang.String project : req.getProjects()) { try { com.google.gerrit.server.restapi.project.ProjectResource rsrc = projects.parse(tlr, com.google.gerrit.extensions.restapi.IdString.fromDecoded(project)); list.addProject(rsrc.getProjectState()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException((""Error looking up project "" + project), e); } } for (java.lang.String group : req.getGroups()) { list.addGroup(groups.parse(group).getGroupUUID()); } list.setVisibleToAll(req.getVisibleToAll()); if ((req.getOwnedBy()) != null) { list.setOwnedBy(req.getOwnedBy()); } if ((req.getUser()) != null) { try { list.setUser(accounts.parse(req.getUser()).getAccountId()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException((""Error looking up user "" + (req.getUser())), e); } } list.setOwned(req.getOwned()); list.setLimit(req.getLimit()); list.setStart(req.getStart()); list.setMatchSubstring(req.getSubstring()); list.setMatchRegex(req.getRegex()); list.setSuggest(req.getSuggest()); try { return list.apply(tlr); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot list groups"", e); } }",242cb9edcce6d475c581a92a4c3ff32b26567667,"private java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.GroupInfo> list(com.google.gerrit.server.api.groups.ListRequest req) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.restapi.TopLevelResource tlr = com.google.gerrit.extensions.restapi.TopLevelResource.INSTANCE; com.google.gerrit.server.restapi.group.ListGroups list = listGroups.get(); list.setOptions(req.getOptions()); for (java.lang.String project : req.getProjects()) { try { com.google.gerrit.server.project.ProjectResource rsrc = projects.parse(tlr, com.google.gerrit.extensions.restapi.IdString.fromDecoded(project)); list.addProject(rsrc.getProjectState()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException((""Error looking up project "" + project), e); } } for (java.lang.String group : req.getGroups()) { list.addGroup(groups.parse(group).getGroupUUID()); } list.setVisibleToAll(req.getVisibleToAll()); if ((req.getOwnedBy()) != null) { list.setOwnedBy(req.getOwnedBy()); } if ((req.getUser()) != null) { try { list.setUser(accounts.parse(req.getUser()).getAccountId()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException((""Error looking up user "" + (req.getUser())), e); } } list.setOwned(req.getOwned()); list.setLimit(req.getLimit()); list.setStart(req.getStart()); list.setMatchSubstring(req.getSubstring()); list.setMatchRegex(req.getRegex()); list.setSuggest(req.getSuggest()); try { return list.apply(tlr); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot list groups"", e); } }",55b79f0b7507c98621aecdecba564f80dfe2add3,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_GetPastAssignees.java,@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.List<com.google.gerrit.extensions.common.AccountInfo>> apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> pastAssignees = rsrc.getNotes().load().getPastAssignees(); if (pastAssignees == null) { return com.google.gerrit.extensions.restapi.Response.ok(java.util.Collections.emptyList()); } com.google.gerrit.server.account.AccountLoader accountLoader = accountLoaderFactory.create(true); java.util.List<com.google.gerrit.extensions.common.AccountInfo> infos = pastAssignees.stream().map(accountLoader::get).collect(java.util.stream.Collectors.toList()); accountLoader.fill(); return com.google.gerrit.extensions.restapi.Response.ok(infos); },5ea4a3b23c22698a1d69d4b3456571b55691adfa,@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.List<com.google.gerrit.extensions.common.AccountInfo>> apply(com.google.gerrit.server.restapi.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> pastAssignees = rsrc.getNotes().load().getPastAssignees(); if (pastAssignees == null) { return com.google.gerrit.extensions.restapi.Response.ok(java.util.Collections.emptyList()); } com.google.gerrit.server.account.AccountLoader accountLoader = accountLoaderFactory.create(true); java.util.List<com.google.gerrit.extensions.common.AccountInfo> infos = pastAssignees.stream().map(accountLoader::get).collect(java.util.stream.Collectors.toList()); accountLoader.fill(); return com.google.gerrit.extensions.restapi.Response.ok(infos); },1f0c71ede62921e102fb3ea0ef709b79c8ad0e97,@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.List<com.google.gerrit.extensions.common.AccountInfo>> apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> pastAssignees = rsrc.getNotes().load().getPastAssignees(); if (pastAssignees == null) { return com.google.gerrit.extensions.restapi.Response.ok(java.util.Collections.emptyList()); } com.google.gerrit.server.account.AccountLoader accountLoader = accountLoaderFactory.create(true); java.util.List<com.google.gerrit.extensions.common.AccountInfo> infos = pastAssignees.stream().map(accountLoader::get).collect(java.util.stream.Collectors.toList()); accountLoader.fill(); return com.google.gerrit.extensions.restapi.Response.ok(infos); },5ea4a3b23c22698a1d69d4b3456571b55691adfa,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_query_change_ChangeQueryBuilder.java,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData> visibleto(java.lang.String who) throws com.google.gerrit.index.query.QueryParseException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (isSelf(who)) { return is_visible(); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = args.accountResolver.findAll(who); if (!(m.isEmpty())) { java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { return visibleto(args.userFactory.create(id)); } return com.google.gerrit.index.query.Predicate.or(p); } java.util.Collection<com.google.gerrit.common.data.GroupReference> suggestions = args.groupBackend.suggest(who, null); if (!(suggestions.isEmpty())) { java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> ids = new java.util.HashSet<>(); for (com.google.gerrit.common.data.GroupReference ref : suggestions) { ids.add(ref.getUUID()); } return visibleto(new com.google.gerrit.server.query.change.SingleGroupUser(ids)); } throw error(((""No user or group matches \"""" + who) + ""\""."")); }",e135588d87e28ae915cbbacb0bb1900fd9b8f978,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData> visibleto(java.lang.String who) throws com.google.gerrit.index.query.QueryParseException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (isSelf(who)) { return is_visible(); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = args.accountResolver.findAll(who); if (!(m.isEmpty())) { java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { return visibleto(args.userFactory.create(id)); } return com.google.gerrit.index.query.Predicate.or(p); } java.util.Collection<com.google.gerrit.common.data.GroupReference> suggestions = args.groupBackend.suggest(who, null); if (!(suggestions.isEmpty())) { java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> ids = new java.util.HashSet<>(); for (com.google.gerrit.common.data.GroupReference ref : suggestions) { ids.add(ref.getUUID()); } return visibleto(new com.google.gerrit.server.query.change.SingleGroupUser(ids)); } throw error(((""No user or account matches \"""" + who) + ""\""."")); }",fa90f995cb602312b9d52657efe9345498a06f32,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData> visibleto(java.lang.String who) throws com.google.gerrit.index.query.QueryParseException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (isSelf(who)) { return is_visible(); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = args.accountResolver.findAll(who); if (!(m.isEmpty())) { java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { return visibleto(args.userFactory.create(id)); } return com.google.gerrit.index.query.Predicate.or(p); } java.util.Collection<com.google.gerrit.common.data.GroupReference> suggestions = args.groupBackend.suggest(who, null); if (!(suggestions.isEmpty())) { java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> ids = new java.util.HashSet<>(); for (com.google.gerrit.common.data.GroupReference ref : suggestions) { ids.add(ref.getUUID()); } return visibleto(new com.google.gerrit.server.query.change.SingleGroupUser(ids)); } throw error(((""No user or group matches \"""" + who) + ""\""."")); }",e135588d87e28ae915cbbacb0bb1900fd9b8f978,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_GroupsCollection.java,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource>> views() { return views; },3c4fc4da983f112c806ac22677c1c2e987abe944,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.group.GroupResource>> views() { return views; },3fa933bded1b95b3f69e71384095932b23f5337e,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource>> views() { return views; },3c4fc4da983f112c806ac22677c1c2e987abe944,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_GroupsCollection.java,"@java.lang.Override public com.google.gerrit.server.group.GroupResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { final com.google.gerrit.server.CurrentUser user = self.get(); if (user instanceof com.google.gerrit.server.AnonymousUser) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } else if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.common.data.GroupDescription.Basic group = parseId(id.get()); if (group == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id.get()); } com.google.gerrit.server.account.GroupControl ctl = groupControlFactory.controlFor(group); if (!(ctl.isVisible())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.group.GroupResource(ctl); }",4e958970fb95f42124b4d93325158f7781a329a4,"@java.lang.Override public com.google.gerrit.server.restapi.group.GroupResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { final com.google.gerrit.server.CurrentUser user = self.get(); if (user instanceof com.google.gerrit.server.AnonymousUser) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } else if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.common.data.GroupDescription.Basic group = parseId(id.get()); if (group == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id.get()); } com.google.gerrit.server.account.GroupControl ctl = groupControlFactory.controlFor(group); if (!(ctl.isVisible())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.restapi.group.GroupResource(ctl); }",558492665b4eed8b8a9d0f842c870b1c680e9582,"@java.lang.Override public com.google.gerrit.server.group.GroupResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { final com.google.gerrit.server.CurrentUser user = self.get(); if (user instanceof com.google.gerrit.server.AnonymousUser) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } else if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.common.data.GroupDescription.Basic group = parseId(id.get()); if (group == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id.get()); } com.google.gerrit.server.account.GroupControl ctl = groupControlFactory.controlFor(group); if (!(ctl.isVisible())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.group.GroupResource(ctl); }",4e958970fb95f42124b4d93325158f7781a329a4,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_git_GroupCollector.java,"public void visit(org.eclipse.jgit.revwalk.RevCommit c) { checkState((!(done)), ""visit() called after getGroups()""); java.util.Set<org.eclipse.jgit.revwalk.RevCommit> interestingParents = getInterestingParents(c); if ((interestingParents.size()) == 0) { groups.put(c, c.name()); return; } else if ((interestingParents.size()) == 1) { groups.putAll(c, groups.get(interestingParents.iterator().next())); return; } java.util.Set<java.lang.String> thisCommitGroups = new java.util.TreeSet<>(); java.util.Set<java.lang.String> parentGroupsNewInThisPush = com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(interestingParents.size()); for (org.eclipse.jgit.revwalk.RevCommit p : interestingParents) { java.util.Collection<java.lang.String> parentGroups = groups.get(p); if (parentGroups.isEmpty()) { throw new java.lang.IllegalStateException(java.lang.String.format(""no group assigned to parent %s of commit %s"", p.name(), c.name())); } for (java.lang.String parentGroup : parentGroups) { if (isGroupFromExistingPatchSet(p, parentGroup)) { thisCommitGroups.add(parentGroup); } else { parentGroupsNewInThisPush.add(parentGroup); } } } java.lang.Iterable<java.lang.String> toAlias; if (thisCommitGroups.isEmpty()) { java.lang.String firstParentGroup = parentGroupsNewInThisPush.iterator().next(); thisCommitGroups = com.google.common.collect.ImmutableSet.of(firstParentGroup); toAlias = com.google.common.collect.Iterables.skip(parentGroupsNewInThisPush, 1); } else { toAlias = parentGroupsNewInThisPush; } groups.putAll(c, thisCommitGroups); for (java.lang.String pg : toAlias) { groupAliases.putAll(pg, thisCommitGroups); } }",fbacb49b448dc89ed31a177783e1f0e9138277ce,"public void visit(org.eclipse.jgit.revwalk.RevCommit c) { checkState((!(done)), ""visit() called after getGroups()""); java.util.Set<org.eclipse.jgit.revwalk.RevCommit> interestingParents = getInterestingParents(c); if ((interestingParents.size()) == 0) { groups.put(c, c.name()); return; } else if ((interestingParents.size()) == 1) { groups.putAll(c, groups.get(interestingParents.iterator().next())); return; } java.util.Set<java.lang.String> thisCommitGroups = new java.util.TreeSet<>(); java.util.Set<java.lang.String> parentGroupsNewInThisPush = com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(interestingParents.size()); for (org.eclipse.jgit.revwalk.RevCommit p : interestingParents) { java.util.Collection<java.lang.String> parentGroups = groups.get(p); if (parentGroups.isEmpty()) { throw new java.lang.IllegalStateException(java.lang.String.format(""no account assigned to parent %s of commit %s"", p.name(), c.name())); } for (java.lang.String parentGroup : parentGroups) { if (isGroupFromExistingPatchSet(p, parentGroup)) { thisCommitGroups.add(parentGroup); } else { parentGroupsNewInThisPush.add(parentGroup); } } } java.lang.Iterable<java.lang.String> toAlias; if (thisCommitGroups.isEmpty()) { java.lang.String firstParentGroup = parentGroupsNewInThisPush.iterator().next(); thisCommitGroups = com.google.common.collect.ImmutableSet.of(firstParentGroup); toAlias = com.google.common.collect.Iterables.skip(parentGroupsNewInThisPush, 1); } else { toAlias = parentGroupsNewInThisPush; } groups.putAll(c, thisCommitGroups); for (java.lang.String pg : toAlias) { groupAliases.putAll(pg, thisCommitGroups); } }",27b19f1bf54f4b4a2854c0a61d366027a4be8de5,"public void visit(org.eclipse.jgit.revwalk.RevCommit c) { checkState((!(done)), ""visit() called after getGroups()""); java.util.Set<org.eclipse.jgit.revwalk.RevCommit> interestingParents = getInterestingParents(c); if ((interestingParents.size()) == 0) { groups.put(c, c.name()); return; } else if ((interestingParents.size()) == 1) { groups.putAll(c, groups.get(interestingParents.iterator().next())); return; } java.util.Set<java.lang.String> thisCommitGroups = new java.util.TreeSet<>(); java.util.Set<java.lang.String> parentGroupsNewInThisPush = com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(interestingParents.size()); for (org.eclipse.jgit.revwalk.RevCommit p : interestingParents) { java.util.Collection<java.lang.String> parentGroups = groups.get(p); if (parentGroups.isEmpty()) { throw new java.lang.IllegalStateException(java.lang.String.format(""no group assigned to parent %s of commit %s"", p.name(), c.name())); } for (java.lang.String parentGroup : parentGroups) { if (isGroupFromExistingPatchSet(p, parentGroup)) { thisCommitGroups.add(parentGroup); } else { parentGroupsNewInThisPush.add(parentGroup); } } } java.lang.Iterable<java.lang.String> toAlias; if (thisCommitGroups.isEmpty()) { java.lang.String firstParentGroup = parentGroupsNewInThisPush.iterator().next(); thisCommitGroups = com.google.common.collect.ImmutableSet.of(firstParentGroup); toAlias = com.google.common.collect.Iterables.skip(parentGroupsNewInThisPush, 1); } else { toAlias = parentGroupsNewInThisPush; } groups.putAll(c, thisCommitGroups); for (java.lang.String pg : toAlias) { groupAliases.putAll(pg, thisCommitGroups); } }",fbacb49b448dc89ed31a177783e1f0e9138277ce,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_git_GroupCollector.java,"private org.eclipse.jgit.lib.ObjectId parseGroup(org.eclipse.jgit.lib.ObjectId forCommit, java.lang.String group) { try { return org.eclipse.jgit.lib.ObjectId.fromString(group); } catch (java.lang.IllegalArgumentException e) { com.google.gerrit.server.git.GroupCollector.log.warn(""group for commit {} is not a SHA-1: {}"", forCommit.name(), group); return null; } }",ff90513b3d72830eeca3d0f72ca50af6cb3e624c,"private org.eclipse.jgit.lib.ObjectId parseGroup(org.eclipse.jgit.lib.ObjectId forCommit, java.lang.String group) { try { return org.eclipse.jgit.lib.ObjectId.fromString(group); } catch (java.lang.IllegalArgumentException e) { com.google.gerrit.server.git.GroupCollector.log.warn(""account for commit {} is not a SHA-1: {}"", forCommit.name(), group); return null; } }",9f8ce8efc14db2072eee459a9b39ceb98a51ed1b,"private org.eclipse.jgit.lib.ObjectId parseGroup(org.eclipse.jgit.lib.ObjectId forCommit, java.lang.String group) { try { return org.eclipse.jgit.lib.ObjectId.fromString(group); } catch (java.lang.IllegalArgumentException e) { com.google.gerrit.server.git.GroupCollector.log.warn(""group for commit {} is not a SHA-1: {}"", forCommit.name(), group); return null; } }",ff90513b3d72830eeca3d0f72ca50af6cb3e624c,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_GetDetail.java,@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return json.format(rsrc); },c9127f97d9e0b2904cedae8cef07f9d1fabbc9c4,@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return json.format(rsrc); },206e8adfa1706039ac9c4dfb0af12347d79f6ae9,@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return json.format(rsrc); },c9127f97d9e0b2904cedae8cef07f9d1fabbc9c4,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_AuditLogReaderTest.java,"@org.junit.Test public void createGroupAsUserIdent() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, ""test-group""); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit = createExpMemberAudit(group.getId(), userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit); }",6d87df72b68546c843d281e90ea793bd50c84d02,"@org.junit.Test public void createGroupAsUserIdent() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, ""test-account""); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit = createExpMemberAudit(group.getId(), userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit); }",a9e82bc805464e946f697a53ece536f562081470,"@org.junit.Test public void createGroupAsUserIdent() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, ""test-group""); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit = createExpMemberAudit(group.getId(), userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit); }",6d87df72b68546c843d281e90ea793bd50c84d02,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_AuditLogReaderTest.java,"private com.google.gerrit.server.group.InternalGroup updateGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws java.lang.Exception { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(allUsersRepo, uuid); groupConfig.setGroupUpdate(groupUpdate, AbstractGroupTest::getAccountNameEmail, AbstractGroupTest::getGroupName); groupConfig.commit(createMetaDataUpdate(userIdent)); return groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""updated group failed"")); }",b951110b5d6240539b98869dbd641deda9690175,"private com.google.gerrit.server.group.InternalGroup updateGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws java.lang.Exception { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(allUsersRepo, uuid); groupConfig.setGroupUpdate(groupUpdate, AbstractGroupTest::getAccountNameEmail, AbstractGroupTest::getGroupName); groupConfig.commit(createMetaDataUpdate(userIdent)); return groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""updated account failed"")); }",898ef0360578c873debb19ca3c3201ea7a806b08,"private com.google.gerrit.server.group.InternalGroup updateGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws java.lang.Exception { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(allUsersRepo, uuid); groupConfig.setGroupUpdate(groupUpdate, AbstractGroupTest::getAccountNameEmail, AbstractGroupTest::getGroupName); groupConfig.commit(createMetaDataUpdate(userIdent)); return groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""updated group failed"")); }",b951110b5d6240539b98869dbd641deda9690175,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_AuditLogReaderTest.java,"@org.junit.Test public void addMultiSubgroups() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, ""test-group""); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroup subgroup1 = createGroupAsUser(2, ""test-group-2""); com.google.gerrit.server.group.InternalGroup subgroup2 = createGroupAsUser(3, ""test-group-3""); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid1 = subgroup1.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid2 = subgroup2.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid1, subgroupUuid2)); assertTipCommit(uuid, (((""Update group\n"" + ""\n"") + (java.lang.String.format(""Add-group: Group <%s>\n"", subgroupUuid1))) + (java.lang.String.format(""Add-group: Group <%s>"", subgroupUuid2)))); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit1 = createExpGroupAudit(group.getId(), subgroupUuid1, userId, getTipTimestamp(uuid)); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit2 = createExpGroupAudit(group.getId(), subgroupUuid2, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2).inOrder(); }",9bf0c2b9f88ff0815f099b6235d4d94879ecfa1b,"@org.junit.Test public void addMultiSubgroups() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, ""test-account""); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroup subgroup1 = createGroupAsUser(2, ""test-account-2""); com.google.gerrit.server.group.InternalGroup subgroup2 = createGroupAsUser(3, ""test-account-3""); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid1 = subgroup1.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid2 = subgroup2.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid1, subgroupUuid2)); assertTipCommit(uuid, (((""Update account\n"" + ""\n"") + (java.lang.String.format(""Add-account: Group <%s>\n"", subgroupUuid1))) + (java.lang.String.format(""Add-account: Group <%s>"", subgroupUuid2)))); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit1 = createExpGroupAudit(group.getId(), subgroupUuid1, userId, getTipTimestamp(uuid)); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit2 = createExpGroupAudit(group.getId(), subgroupUuid2, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2).inOrder(); }",4a8cd87308f4b460dbaf4206060f33de5b808f90,"@org.junit.Test public void addMultiSubgroups() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, ""test-group""); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroup subgroup1 = createGroupAsUser(2, ""test-group-2""); com.google.gerrit.server.group.InternalGroup subgroup2 = createGroupAsUser(3, ""test-group-3""); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid1 = subgroup1.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid2 = subgroup2.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid1, subgroupUuid2)); assertTipCommit(uuid, (((""Update group\n"" + ""\n"") + (java.lang.String.format(""Add-group: Group <%s>\n"", subgroupUuid1))) + (java.lang.String.format(""Add-group: Group <%s>"", subgroupUuid2)))); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit1 = createExpGroupAudit(group.getId(), subgroupUuid1, userId, getTipTimestamp(uuid)); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit2 = createExpGroupAudit(group.getId(), subgroupUuid2, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2).inOrder(); }",9bf0c2b9f88ff0815f099b6235d4d94879ecfa1b,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_AuditLogReaderTest.java,"@org.junit.Test public void createGroupAsServerIdent() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroup(1, ""test-group"", serverIdent, null); assertThat(auditLogReader.getMembersAudit(allUsersRepo, group.getGroupUUID())).hasSize(0); }",127174651980634497882afbf662824def472e60,"@org.junit.Test public void createGroupAsServerIdent() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroup(1, ""test-account"", serverIdent, null); assertThat(auditLogReader.getMembersAudit(allUsersRepo, group.getGroupUUID())).hasSize(0); }",365941477909587f0308a03a4d1e83728252cb8f,"@org.junit.Test public void createGroupAsServerIdent() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroup(1, ""test-group"", serverIdent, null); assertThat(auditLogReader.getMembersAudit(allUsersRepo, group.getGroupUUID())).hasSize(0); }",127174651980634497882afbf662824def472e60,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_AuditLogReaderTest.java,"private com.google.gerrit.server.group.InternalGroup createGroup(int next, java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent authorIdent, com.google.gerrit.reviewdb.client.Account.Id authorId) throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = com.google.gerrit.server.group.db.InternalGroupCreation.builder().setGroupUUID(com.google.gerrit.server.account.GroupUUID.make(groupName, serverIdent)).setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupName)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(next)).build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = (authorIdent.equals(serverIdent)) ? com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setDescription(""Groups"").build() : com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setDescription(""Groups"").setMemberModification(( members) -> com.google.common.collect.ImmutableSet.of(authorId)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, AbstractGroupTest::getAccountNameEmail, AbstractGroupTest::getGroupName); org.eclipse.jgit.revwalk.RevCommit commit = groupConfig.commit(createMetaDataUpdate(authorIdent)); assertCreateGroup(authorIdent, commit); return groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""create group failed"")); }",88fd5a0b513aad3e11070236a8755a2f608d5e86,"private com.google.gerrit.server.group.InternalGroup createGroup(int next, java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent authorIdent, com.google.gerrit.reviewdb.client.Account.Id authorId) throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = com.google.gerrit.server.group.db.InternalGroupCreation.builder().setGroupUUID(com.google.gerrit.server.account.GroupUUID.make(groupName, serverIdent)).setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupName)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(next)).build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = (authorIdent.equals(serverIdent)) ? com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setDescription(""Groups"").build() : com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setDescription(""Groups"").setMemberModification(( members) -> com.google.common.collect.ImmutableSet.of(authorId)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, AbstractGroupTest::getAccountNameEmail, AbstractGroupTest::getGroupName); org.eclipse.jgit.revwalk.RevCommit commit = groupConfig.commit(createMetaDataUpdate(authorIdent)); assertCreateGroup(authorIdent, commit); return groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""create account failed"")); }",9dfc180e2732afb3130d601b6334ae6526ca7f79,"private com.google.gerrit.server.group.InternalGroup createGroup(int next, java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent authorIdent, com.google.gerrit.reviewdb.client.Account.Id authorId) throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = com.google.gerrit.server.group.db.InternalGroupCreation.builder().setGroupUUID(com.google.gerrit.server.account.GroupUUID.make(groupName, serverIdent)).setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupName)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(next)).build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = (authorIdent.equals(serverIdent)) ? com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setDescription(""Groups"").build() : com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setDescription(""Groups"").setMemberModification(( members) -> com.google.common.collect.ImmutableSet.of(authorId)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, AbstractGroupTest::getAccountNameEmail, AbstractGroupTest::getGroupName); org.eclipse.jgit.revwalk.RevCommit commit = groupConfig.commit(createMetaDataUpdate(authorIdent)); assertCreateGroup(authorIdent, commit); return groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""create group failed"")); }",88fd5a0b513aad3e11070236a8755a2f608d5e86,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_AuditLogReaderTest.java,"private void assertCreateGroup(org.eclipse.jgit.lib.PersonIdent authorIdent, org.eclipse.jgit.revwalk.RevCommit commit) throws java.lang.Exception { if (authorIdent.equals(serverIdent)) { assertServerCommit(com.google.gerrit.server.git.CommitUtil.toCommitInfo(commit), ""Create group""); } else { assertCommit(com.google.gerrit.server.git.CommitUtil.toCommitInfo(commit), java.lang.String.format(""Create group\n\nAdd: Account %s <%s@%s>"", userId, userId, com.google.gerrit.server.group.db.SERVER_ID), getAccountName(userId), getAccountEmail(userId)); } }",57a5e4f574289e96947361d90f4b50f5579868b7,"private void assertCreateGroup(org.eclipse.jgit.lib.PersonIdent authorIdent, org.eclipse.jgit.revwalk.RevCommit commit) throws java.lang.Exception { if (authorIdent.equals(serverIdent)) { assertServerCommit(com.google.gerrit.server.git.CommitUtil.toCommitInfo(commit), ""Create account""); } else { assertCommit(com.google.gerrit.server.git.CommitUtil.toCommitInfo(commit), java.lang.String.format(""Create account\n\nAdd: Account %s <%s@%s>"", userId, userId, com.google.gerrit.server.group.db.SERVER_ID), getAccountName(userId), getAccountEmail(userId)); } }",fae0c2bf84f2d64c41704d041c1aba344d5bc40c,"private void assertCreateGroup(org.eclipse.jgit.lib.PersonIdent authorIdent, org.eclipse.jgit.revwalk.RevCommit commit) throws java.lang.Exception { if (authorIdent.equals(serverIdent)) { assertServerCommit(com.google.gerrit.server.git.CommitUtil.toCommitInfo(commit), ""Create group""); } else { assertCommit(com.google.gerrit.server.git.CommitUtil.toCommitInfo(commit), java.lang.String.format(""Create group\n\nAdd: Account %s <%s@%s>"", userId, userId, com.google.gerrit.server.group.db.SERVER_ID), getAccountName(userId), getAccountEmail(userId)); } }",57a5e4f574289e96947361d90f4b50f5579868b7,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_validators_ProjectCreationValidationListener.java,void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException;,0895d2a7b6f05fc87e652b59339caf6cedb0a1e2,void validateNewProject(com.google.gerrit.server.restapi.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException;,7b8416e774172e2f707e49ac900f28c69f3b6c2e,void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException;,0895d2a7b6f05fc87e652b59339caf6cedb0a1e2,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_AuditLogReaderTest.java,"@org.junit.Test public void addAndRemoveSubgroups() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, ""test-group""); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroup subgroup = createGroupAsUser(2, ""test-group-2""); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid = subgroup.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid)); assertTipCommit(uuid, java.lang.String.format(""Update group\n\nAdd-group: Group <%s>"", subgroupUuid)); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit = createExpGroupAudit(group.getId(), subgroupUuid, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit); removeSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid)); assertTipCommit(uuid, java.lang.String.format(""Update group\n\nRemove-group: Group <%s>"", subgroupUuid)); expAudit.removed(userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit); }",d5091a049458b0f8233dbce75c1f3f1238ba125a,"@org.junit.Test public void addAndRemoveSubgroups() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, ""test-account""); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroup subgroup = createGroupAsUser(2, ""test-account-2""); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid = subgroup.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid)); assertTipCommit(uuid, java.lang.String.format(""Update account\n\nAdd-account: Group <%s>"", subgroupUuid)); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit = createExpGroupAudit(group.getId(), subgroupUuid, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit); removeSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid)); assertTipCommit(uuid, java.lang.String.format(""Update account\n\nRemove-account: Group <%s>"", subgroupUuid)); expAudit.removed(userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit); }",410c23a2a6888b96718955ad5307bdefb15b34cd,"@org.junit.Test public void addAndRemoveSubgroups() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, ""test-group""); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroup subgroup = createGroupAsUser(2, ""test-group-2""); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid = subgroup.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid)); assertTipCommit(uuid, java.lang.String.format(""Update group\n\nAdd-group: Group <%s>"", subgroupUuid)); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit = createExpGroupAudit(group.getId(), subgroupUuid, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit); removeSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid)); assertTipCommit(uuid, java.lang.String.format(""Update group\n\nRemove-group: Group <%s>"", subgroupUuid)); expAudit.removed(userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit); }",d5091a049458b0f8233dbce75c1f3f1238ba125a,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_AuditLogReaderTest.java,"@org.junit.Test public void addMultiMembers() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, ""test-group""); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit1 = createExpMemberAudit(groupId, userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id1 = new com.google.gerrit.reviewdb.client.Account.Id(100002); com.google.gerrit.reviewdb.client.Account.Id id2 = new com.google.gerrit.reviewdb.client.Account.Id(100003); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id1, id2)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit2 = createExpMemberAudit(groupId, id1, userId, getTipTimestamp(uuid)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit3 = createExpMemberAudit(groupId, id2, userId, getTipTimestamp(uuid)); assertTipCommit(uuid, (""Update group\n"" + ((""\n"" + ""Add: Account 100002 <100002@server-id>\n"") + ""Add: Account 100003 <100003@server-id>""))); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2, expAudit3).inOrder(); }",3f6c453468686bc677732e05d39b4b60ea87fb5c,"@org.junit.Test public void addMultiMembers() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, ""test-account""); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit1 = createExpMemberAudit(groupId, userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id1 = new com.google.gerrit.reviewdb.client.Account.Id(100002); com.google.gerrit.reviewdb.client.Account.Id id2 = new com.google.gerrit.reviewdb.client.Account.Id(100003); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id1, id2)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit2 = createExpMemberAudit(groupId, id1, userId, getTipTimestamp(uuid)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit3 = createExpMemberAudit(groupId, id2, userId, getTipTimestamp(uuid)); assertTipCommit(uuid, (""Update account\n"" + ((""\n"" + ""Add: Account 100002 <100002@server-id>\n"") + ""Add: Account 100003 <100003@server-id>""))); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2, expAudit3).inOrder(); }",832a46c5ef0c699a805114d70e6f10aabded2e25,"@org.junit.Test public void addMultiMembers() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, ""test-group""); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit1 = createExpMemberAudit(groupId, userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id1 = new com.google.gerrit.reviewdb.client.Account.Id(100002); com.google.gerrit.reviewdb.client.Account.Id id2 = new com.google.gerrit.reviewdb.client.Account.Id(100003); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id1, id2)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit2 = createExpMemberAudit(groupId, id1, userId, getTipTimestamp(uuid)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit3 = createExpMemberAudit(groupId, id2, userId, getTipTimestamp(uuid)); assertTipCommit(uuid, (""Update group\n"" + ((""\n"" + ""Add: Account 100002 <100002@server-id>\n"") + ""Add: Account 100003 <100003@server-id>""))); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2, expAudit3).inOrder(); }",3f6c453468686bc677732e05d39b4b60ea87fb5c,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_FilesInCommitCollection.java,@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.CommitResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); },619fc489007c685b4ac06a66189c7f01a639c217,@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.CommitResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); },aed89bd9489a952bd07b556f1ebf1f55f667c243,@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.CommitResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); },619fc489007c685b4ac06a66189c7f01a639c217,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_FilesInCommitCollection.java,"@java.lang.Override public com.google.gerrit.server.project.FileResource parse(com.google.gerrit.server.project.CommitResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { if (com.google.gerrit.reviewdb.client.Patch.isMagic(id.get())) { return new com.google.gerrit.server.project.FileResource(parent.getProjectState(), parent.getCommit(), id.get()); } return com.google.gerrit.server.project.FileResource.create(repoManager, parent.getProjectState(), parent.getCommit(), id.get()); }",9335a5e2584cc43b035ebe8d97bae8e9e8c3d7af,"@java.lang.Override public com.google.gerrit.server.restapi.project.FileResource parse(com.google.gerrit.server.restapi.project.CommitResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { if (com.google.gerrit.reviewdb.client.Patch.isMagic(id.get())) { return new com.google.gerrit.server.restapi.project.FileResource(parent.getProjectState(), parent.getCommit(), id.get()); } return com.google.gerrit.server.restapi.project.FileResource.create(repoManager, parent.getProjectState(), parent.getCommit(), id.get()); }",d03035624cdb30f26277e4bf1d6413a8432cc47c,"@java.lang.Override public com.google.gerrit.server.project.FileResource parse(com.google.gerrit.server.project.CommitResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { if (com.google.gerrit.reviewdb.client.Patch.isMagic(id.get())) { return new com.google.gerrit.server.project.FileResource(parent.getProjectState(), parent.getCommit(), id.get()); } return com.google.gerrit.server.project.FileResource.create(repoManager, parent.getProjectState(), parent.getCommit(), id.get()); }",9335a5e2584cc43b035ebe8d97bae8e9e8c3d7af,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_AddMembers.java,"@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.AddMembers.Input in = new com.google.gerrit.server.group.AddMembers.Input(); in._oneMember = id; try { java.util.List<com.google.gerrit.extensions.common.AccountInfo> list = put.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw new java.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }",87a22e307da47c85092a8fb2be4eae3aac621ee2,"@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddMembers.Input in = new com.google.gerrit.server.restapi.group.AddMembers.Input(); in._oneMember = id; try { java.util.List<com.google.gerrit.extensions.common.AccountInfo> list = put.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw new java.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }",9f436d00b1fb4d7fb9e39d0b3428b635d94ab1fc,"@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddMembers.Input in = new com.google.gerrit.server.restapi.group.AddMembers.Input(); in._oneMember = id; try { java.util.List<com.google.gerrit.extensions.common.AccountInfo> list = put.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw new java.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }",59f6b521117ca04be392a78cd535c2b178e19e0f,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_AddMembers.java,"@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.group.MemberResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gwtorm.server.OrmException { return get.apply(resource); }",49d340511e5140f0063b18475d76722447674a3f,"@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.restapi.group.MemberResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gwtorm.server.OrmException { return get.apply(resource); }",bb994759159dd01ae2bad89b7349f41894c14e43,"@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.group.MemberResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gwtorm.server.OrmException { return get.apply(resource); }",427628b7197277afb0d9067f0a7b66184b265b13,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_GetBranch.java,"@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.project.BranchResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return list.get().toBranchInfo(rsrc); }",2c867bfb66ab901120c78b5faa15b6267083f996,"@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.restapi.project.BranchResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return list.get().toBranchInfo(rsrc); }",46570531c091be65684141e7b28392b57cb7b4f3,"@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.project.BranchResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return list.get().toBranchInfo(rsrc); }",2c867bfb66ab901120c78b5faa15b6267083f996,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_schema_SchemaCreator.java,"private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(org.eclipse.jgit.lib.Repository allUsersRepo, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""Created group wasn't automatically loaded"")); }",5243df379b1af0b6f8c0dff26dd7bd6e2d98ae2f,"private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(org.eclipse.jgit.lib.Repository allUsersRepo, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""Created account wasn't automatically loaded"")); }",521ddfd45fa788403e7c32c9323c6b98241f1843,"private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(org.eclipse.jgit.lib.Repository allUsersRepo, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""Created group wasn't automatically loaded"")); }",5243df379b1af0b6f8c0dff26dd7bd6e2d98ae2f,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_git_receive_ReceiveCommits.java,"@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { java.lang.String refName = cmd.getRefName(); if ((cmd.getType()) == (ReceiveCommand.Type.UPDATE)) { logDebug(""Updating tag cache on fast-forward of {}"", cmd.getRefName()); tagCache.updateFastForward(project.getNameKey(), refName, cmd.getOldId(), cmd.getNewId()); } if (com.google.gerrit.server.git.receive.ReceiveCommits.isConfig(cmd)) { logDebug(""Reloading project in cache""); try { projectCache.evict(project); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn((""Cannot evict from project cache, name key: "" + (project.getName())), e); } com.google.gerrit.server.project.ProjectState ps = projectCache.get(project.getNameKey()); try { logDebug(""Updating project description""); repo.setGitwebDescription(ps.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn((""cannot update description of "" + (project.getName())), e); } if (allProjectsName.equals(project.getNameKey())) { try { createGroupPermissionSyncer.syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.error(""Can't sync create group permissions"", e); } } } }",869a58a94913f52368a4939bdbec49c557ff8d12,"@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { java.lang.String refName = cmd.getRefName(); if ((cmd.getType()) == (ReceiveCommand.Type.UPDATE)) { logDebug(""Updating tag cache on fast-forward of {}"", cmd.getRefName()); tagCache.updateFastForward(project.getNameKey(), refName, cmd.getOldId(), cmd.getNewId()); } if (com.google.gerrit.server.git.receive.ReceiveCommits.isConfig(cmd)) { logDebug(""Reloading project in cache""); try { projectCache.evict(project); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn((""Cannot evict from project cache, name key: "" + (project.getName())), e); } com.google.gerrit.server.project.ProjectState ps = projectCache.get(project.getNameKey()); try { logDebug(""Updating project description""); repo.setGitwebDescription(ps.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn((""cannot update description of "" + (project.getName())), e); } if (allProjectsName.equals(project.getNameKey())) { try { createGroupPermissionSyncer.syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.error(""Can't sync create account permissions"", e); } } } }",8b6c2c82aaa7f77e0f45ee8abeeeda9f24b6aa03,"@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { java.lang.String refName = cmd.getRefName(); if ((cmd.getType()) == (ReceiveCommand.Type.UPDATE)) { logDebug(""Updating tag cache on fast-forward of {}"", cmd.getRefName()); tagCache.updateFastForward(project.getNameKey(), refName, cmd.getOldId(), cmd.getNewId()); } if (com.google.gerrit.server.git.receive.ReceiveCommits.isConfig(cmd)) { logDebug(""Reloading project in cache""); try { projectCache.evict(project); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn((""Cannot evict from project cache, name key: "" + (project.getName())), e); } com.google.gerrit.server.project.ProjectState ps = projectCache.get(project.getNameKey()); try { logDebug(""Updating project description""); repo.setGitwebDescription(ps.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn((""cannot update description of "" + (project.getName())), e); } if (allProjectsName.equals(project.getNameKey())) { try { createGroupPermissionSyncer.syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.error(""Can't sync create group permissions"", e); } } } }",869a58a94913f52368a4939bdbec49c557ff8d12,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_GetStatistics.java,"@java.lang.Override public com.google.gerrit.server.project.RepositoryStatistics apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.api.GarbageCollectCommand gc = org.eclipse.jgit.api.Git.wrap(repo).gc(); return new com.google.gerrit.server.project.RepositoryStatistics(gc.getStatistics()); } catch (org.eclipse.jgit.api.errors.GitAPIException | org.eclipse.jgit.api.errors.JGitInternalException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.getName()); } }",517fd2db83b620f4e3fb6a2c36f56932c751fded,"@java.lang.Override public com.google.gerrit.server.restapi.project.RepositoryStatistics apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.api.GarbageCollectCommand gc = org.eclipse.jgit.api.Git.wrap(repo).gc(); return new com.google.gerrit.server.restapi.project.RepositoryStatistics(gc.getStatistics()); } catch (org.eclipse.jgit.api.errors.GitAPIException | org.eclipse.jgit.api.errors.JGitInternalException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.getName()); } }",47590c90ce88fcf0604c484834b9d201e6a56e8a,"@java.lang.Override public com.google.gerrit.server.restapi.project.RepositoryStatistics apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.api.GarbageCollectCommand gc = org.eclipse.jgit.api.Git.wrap(repo).gc(); return new com.google.gerrit.server.restapi.project.RepositoryStatistics(gc.getStatistics()); } catch (org.eclipse.jgit.api.errors.GitAPIException | org.eclipse.jgit.api.errors.JGitInternalException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.getName()); } }",a6be4c82807e6189fb6676831a764231a59d0167,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_AuditLogReaderTest.java,"@org.junit.Test public void addAndRemoveMember() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, ""test-group""); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit1 = createExpMemberAudit(group.getId(), userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(100002); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit2 = createExpMemberAudit(group.getId(), id, userId, getTipTimestamp(uuid)); assertTipCommit(uuid, ""Update group\n\nAdd: Account 100002 <100002@server-id>""); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2).inOrder(); removeMembers(uuid, com.google.common.collect.ImmutableSet.of(id)); assertTipCommit(uuid, ""Update group\n\nRemove: Account 100002 <100002@server-id>""); expAudit2.removed(userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2).inOrder(); }",511b9dc4dad2d2ad8d995235fea32aa509e54121,"@org.junit.Test public void addAndRemoveMember() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, ""test-account""); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit1 = createExpMemberAudit(group.getId(), userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(100002); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit2 = createExpMemberAudit(group.getId(), id, userId, getTipTimestamp(uuid)); assertTipCommit(uuid, ""Update account\n\nAdd: Account 100002 <100002@server-id>""); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2).inOrder(); removeMembers(uuid, com.google.common.collect.ImmutableSet.of(id)); assertTipCommit(uuid, ""Update account\n\nRemove: Account 100002 <100002@server-id>""); expAudit2.removed(userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2).inOrder(); }",eeced95152113fe2c09f9ad245ff680a3898baa1,"@org.junit.Test public void addAndRemoveMember() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, ""test-group""); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit1 = createExpMemberAudit(group.getId(), userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(100002); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit2 = createExpMemberAudit(group.getId(), id, userId, getTipTimestamp(uuid)); assertTipCommit(uuid, ""Update group\n\nAdd: Account 100002 <100002@server-id>""); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2).inOrder(); removeMembers(uuid, com.google.common.collect.ImmutableSet.of(id)); assertTipCommit(uuid, ""Update group\n\nRemove: Account 100002 <100002@server-id>""); expAudit2.removed(userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2).inOrder(); }",511b9dc4dad2d2ad8d995235fea32aa509e54121,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_db_GroupNameNotes.java,"static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(new java.lang.String(noteData, java.nio.charset.StandardCharsets.UTF_8)); java.lang.String uuid = config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.UUID_PARAM); java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.NAME_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format(""UUID for group '%s' must be defined"", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }",efb0d402fc6e6d3035de9ff87a3aafb6203b261f,"static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(new java.lang.String(noteData, java.nio.charset.StandardCharsets.UTF_8)); java.lang.String uuid = config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.UUID_PARAM); java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.NAME_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format(""UUID for account '%s' must be defined"", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }",9a8bee1da2e5682fc5b2068b30b80e4d9974aa1a,"static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(new java.lang.String(noteData, java.nio.charset.StandardCharsets.UTF_8)); java.lang.String uuid = config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.UUID_PARAM); java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.NAME_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format(""UUID for group '%s' must be defined"", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }",efb0d402fc6e6d3035de9ff87a3aafb6203b261f,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_ApplyFix.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server.change.FixResource fixResource, java.lang.Void nothing) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.RevisionResource revisionResource = fixResource.getRevisionResource(); com.google.gerrit.reviewdb.client.Project.NameKey project = revisionResource.getProject(); com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(project); com.google.gerrit.reviewdb.client.PatchSet patchSet = revisionResource.getPatchSet(); org.eclipse.jgit.lib.ObjectId patchSetCommitId = org.eclipse.jgit.lib.ObjectId.fromString(patchSet.getRevision().get()); try (org.eclipse.jgit.lib.Repository repository = gitRepositoryManager.openRepository(project)) { java.util.List<com.google.gerrit.server.edit.tree.TreeModification> treeModifications = fixReplacementInterpreter.toTreeModifications(repository, projectState, patchSetCommitId, fixResource.getFixReplacements()); com.google.gerrit.server.edit.ChangeEdit changeEdit = changeEditModifier.combineWithModifiedPatchSetTree(repository, revisionResource.getNotes(), patchSet, treeModifications); return com.google.gerrit.extensions.restapi.Response.ok(changeEditJson.toEditInfo(changeEdit, false)); } catch (com.google.gerrit.server.project.InvalidChangeOperationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }",65fcf1a897091d4ea726a80b7af73161a16de310,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server.restapi.change.FixResource fixResource, java.lang.Void nothing) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.RevisionResource revisionResource = fixResource.getRevisionResource(); com.google.gerrit.reviewdb.client.Project.NameKey project = revisionResource.getProject(); com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(project); com.google.gerrit.reviewdb.client.PatchSet patchSet = revisionResource.getPatchSet(); org.eclipse.jgit.lib.ObjectId patchSetCommitId = org.eclipse.jgit.lib.ObjectId.fromString(patchSet.getRevision().get()); try (org.eclipse.jgit.lib.Repository repository = gitRepositoryManager.openRepository(project)) { java.util.List<com.google.gerrit.server.edit.tree.TreeModification> treeModifications = fixReplacementInterpreter.toTreeModifications(repository, projectState, patchSetCommitId, fixResource.getFixReplacements()); com.google.gerrit.server.edit.ChangeEdit changeEdit = changeEditModifier.combineWithModifiedPatchSetTree(repository, revisionResource.getNotes(), patchSet, treeModifications); return com.google.gerrit.extensions.restapi.Response.ok(changeEditJson.toEditInfo(changeEdit, false)); } catch (com.google.gerrit.server.project.InvalidChangeOperationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }",7dc5e9599cdd4c702533dd2b1f82c6e0c2c4a604,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server.change.FixResource fixResource, java.lang.Void nothing) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.RevisionResource revisionResource = fixResource.getRevisionResource(); com.google.gerrit.reviewdb.client.Project.NameKey project = revisionResource.getProject(); com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(project); com.google.gerrit.reviewdb.client.PatchSet patchSet = revisionResource.getPatchSet(); org.eclipse.jgit.lib.ObjectId patchSetCommitId = org.eclipse.jgit.lib.ObjectId.fromString(patchSet.getRevision().get()); try (org.eclipse.jgit.lib.Repository repository = gitRepositoryManager.openRepository(project)) { java.util.List<com.google.gerrit.server.edit.tree.TreeModification> treeModifications = fixReplacementInterpreter.toTreeModifications(repository, projectState, patchSetCommitId, fixResource.getFixReplacements()); com.google.gerrit.server.edit.ChangeEdit changeEdit = changeEditModifier.combineWithModifiedPatchSetTree(repository, revisionResource.getNotes(), patchSet, treeModifications); return com.google.gerrit.extensions.restapi.Response.ok(changeEditJson.toEditInfo(changeEdit, false)); } catch (com.google.gerrit.server.project.InvalidChangeOperationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }",65fcf1a897091d4ea726a80b7af73161a16de310,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_projects_DashboardApiImpl.java,"com.google.gerrit.server.api.projects.DashboardApiImpl create(com.google.gerrit.server.project.ProjectResource project, java.lang.String id);",d14850e950869db983d6a244a0c73f48d5c9a83e,"com.google.gerrit.server.api.projects.DashboardApiImpl create(com.google.gerrit.server.restapi.project.ProjectResource project, java.lang.String id);",d132c0ca93cc36a5b1ea2609f4ba8cad26732c6a,"com.google.gerrit.server.api.projects.DashboardApiImpl create(com.google.gerrit.server.project.ProjectResource project, java.lang.String id);",d14850e950869db983d6a244a0c73f48d5c9a83e,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_PostReviewers.java,"public com.google.gerrit.server.change.PostReviewers.Addition prepareApplication(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.api.changes.AddReviewerInput input, boolean allowGroup) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String reviewer = input.reviewer; com.google.gerrit.extensions.client.ReviewerState state = input.state(); com.google.gerrit.extensions.api.changes.NotifyHandling notify = input.notify; com.google.common.collect.ListMultimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify = null; try { accountsToNotify = notifyUtil.resolveAccounts(input.notifyDetails); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { return fail(reviewer, e.getMessage()); } boolean confirmed = input.confirmed(); boolean allowByEmail = projectCache.checkedGet(rsrc.getProject()).isEnableReviewerByEmail(); com.google.gerrit.server.change.PostReviewers.Addition byAccountId = addByAccountId(reviewer, rsrc, state, notify, accountsToNotify, allowGroup, allowByEmail); if (byAccountId != null) { return byAccountId; } com.google.gerrit.server.change.PostReviewers.Addition wholeGroup = addWholeGroup(reviewer, rsrc, state, notify, accountsToNotify, confirmed, allowGroup, allowByEmail); if (wholeGroup != null) { return wholeGroup; } return addByEmail(reviewer, rsrc, state, notify, accountsToNotify); }",3e1ed4ac55f421b888f0501d2deac96961d0a428,"public com.google.gerrit.server.restapi.change.PostReviewers.Addition prepareApplication(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.api.changes.AddReviewerInput input, boolean allowGroup) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String reviewer = input.reviewer; com.google.gerrit.extensions.client.ReviewerState state = input.state(); com.google.gerrit.extensions.api.changes.NotifyHandling notify = input.notify; com.google.common.collect.ListMultimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify = null; try { accountsToNotify = notifyUtil.resolveAccounts(input.notifyDetails); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { return fail(reviewer, e.getMessage()); } boolean confirmed = input.confirmed(); boolean allowByEmail = projectCache.checkedGet(rsrc.getProject()).isEnableReviewerByEmail(); com.google.gerrit.server.restapi.change.PostReviewers.Addition byAccountId = addByAccountId(reviewer, rsrc, state, notify, accountsToNotify, allowGroup, allowByEmail); if (byAccountId != null) { return byAccountId; } com.google.gerrit.server.restapi.change.PostReviewers.Addition wholeGroup = addWholeGroup(reviewer, rsrc, state, notify, accountsToNotify, confirmed, allowGroup, allowByEmail); if (wholeGroup != null) { return wholeGroup; } return addByEmail(reviewer, rsrc, state, notify, accountsToNotify); }",f99e10ae006e42f274ebe2924c66db97bcc36c06,"public com.google.gerrit.server.restapi.change.PostReviewers.Addition prepareApplication(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.api.changes.AddReviewerInput input, boolean allowGroup) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String reviewer = input.reviewer; com.google.gerrit.extensions.client.ReviewerState state = input.state(); com.google.gerrit.extensions.api.changes.NotifyHandling notify = input.notify; com.google.common.collect.ListMultimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify = null; try { accountsToNotify = notifyUtil.resolveAccounts(input.notifyDetails); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { return fail(reviewer, e.getMessage()); } boolean confirmed = input.confirmed(); boolean allowByEmail = projectCache.checkedGet(rsrc.getProject()).is(BooleanProjectConfig.ENABLE_REVIEWER_BY_EMAIL); com.google.gerrit.server.restapi.change.PostReviewers.Addition byAccountId = addByAccountId(reviewer, rsrc, state, notify, accountsToNotify, allowGroup, allowByEmail); if (byAccountId != null) { return byAccountId; } com.google.gerrit.server.restapi.change.PostReviewers.Addition wholeGroup = addWholeGroup(reviewer, rsrc, state, notify, accountsToNotify, confirmed, allowGroup, allowByEmail); if (wholeGroup != null) { return wholeGroup; } return addByEmail(reviewer, rsrc, state, notify, accountsToNotify); }",86a22fe5bde825e6263d0f207f220b35f2a09837,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_db_GroupConfig.java,"private java.lang.String createCommitMessage(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> originalMembers, java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id>> updatedMembers, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> originalSubgroups, java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubgroups) { java.lang.String summaryLine = (groupCreation.isPresent()) ? ""Create group"" : ""Update group""; java.util.StringJoiner footerJoiner = new java.util.StringJoiner(""\n"", ""\n\n"", """"); footerJoiner.setEmptyValue(""""); getCommitFooterForRename().ifPresent(footerJoiner::add); updatedMembers.ifPresent(( newMembers) -> getCommitFootersForMemberModifications(originalMembers, newMembers).forEach(footerJoiner::add)); updatedSubgroups.ifPresent(( newSubgroups) -> getCommitFootersForSubgroupModifications(originalSubgroups, newSubgroups).forEach(footerJoiner::add)); java.lang.String footer = footerJoiner.toString(); return summaryLine + footer; }",0f4095519dd1e8a4a3de981cd38087957b91b909,"private java.lang.String createCommitMessage(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> originalMembers, java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id>> updatedMembers, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> originalSubgroups, java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubgroups) { java.lang.String summaryLine = (groupCreation.isPresent()) ? ""Create account"" : ""Update account""; java.util.StringJoiner footerJoiner = new java.util.StringJoiner(""\n"", ""\n\n"", """"); footerJoiner.setEmptyValue(""""); getCommitFooterForRename().ifPresent(footerJoiner::add); updatedMembers.ifPresent(( newMembers) -> getCommitFootersForMemberModifications(originalMembers, newMembers).forEach(footerJoiner::add)); updatedSubgroups.ifPresent(( newSubgroups) -> getCommitFootersForSubgroupModifications(originalSubgroups, newSubgroups).forEach(footerJoiner::add)); java.lang.String footer = footerJoiner.toString(); return summaryLine + footer; }",9a4c931f34f180d3f121ab6ca2aca409bfc43cb1,"private java.lang.String createCommitMessage(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> originalMembers, java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id>> updatedMembers, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> originalSubgroups, java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubgroups) { java.lang.String summaryLine = (groupCreation.isPresent()) ? ""Create group"" : ""Update group""; java.util.StringJoiner footerJoiner = new java.util.StringJoiner(""\n"", ""\n\n"", """"); footerJoiner.setEmptyValue(""""); getCommitFooterForRename().ifPresent(footerJoiner::add); updatedMembers.ifPresent(( newMembers) -> getCommitFootersForMemberModifications(originalMembers, newMembers).forEach(footerJoiner::add)); updatedSubgroups.ifPresent(( newSubgroups) -> getCommitFootersForSubgroupModifications(originalSubgroups, newSubgroups).forEach(footerJoiner::add)); java.lang.String footer = footerJoiner.toString(); return summaryLine + footer; }",0f4095519dd1e8a4a3de981cd38087957b91b909,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_sshd_commands_SetHeadCommand.java,"@java.lang.Override protected void run() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.HeadInput input = new com.google.gerrit.extensions.api.projects.HeadInput(); input.ref = newHead; try { setHead.apply(new com.google.gerrit.server.project.ProjectResource(project, user), input); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw die(e); } }",b461c49358b3ec47846b009978e511d8e541b273,"@java.lang.Override protected void run() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.HeadInput input = new com.google.gerrit.extensions.api.projects.HeadInput(); input.ref = newHead; try { setHead.apply(new com.google.gerrit.server.restapi.project.ProjectResource(project, user), input); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw die(e); } }",87bf5927a9a560a69cbd609630fd3fc4698497bd,"@java.lang.Override protected void run() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.HeadInput input = new com.google.gerrit.extensions.api.projects.HeadInput(); input.ref = newHead; try { setHead.apply(new com.google.gerrit.server.project.ProjectResource(project, user), input); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw die(e); } }",b461c49358b3ec47846b009978e511d8e541b273,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_GetDraftComment.java,@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.change.DraftCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().format(rsrc.getComment()); },2d02236867d627e49763d3ca45de8d832e08c365,@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.restapi.change.DraftCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().format(rsrc.getComment()); },52ef5cf172527b88c356cd2592a277aa6cf23be2,@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.change.DraftCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().format(rsrc.getComment()); },2d02236867d627e49763d3ca45de8d832e08c365,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_sshd_commands_AdminSetParent.java,"private java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> getChildrenForReparenting(com.google.gerrit.server.project.ProjectState parent) throws com.google.gerrit.server.permissions.PermissionBackendException { final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> childProjects = new java.util.ArrayList<>(); final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> excluded = new java.util.ArrayList(excludedChildren.size()); for (com.google.gerrit.server.project.ProjectState excludedChild : excludedChildren) { excluded.add(excludedChild.getProject().getNameKey()); } final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> automaticallyExcluded = new java.util.ArrayList(excludedChildren.size()); if ((newParentKey) != null) { automaticallyExcluded.addAll(getAllParents(newParentKey)); } for (com.google.gerrit.extensions.common.ProjectInfo child : listChildProjects.apply(new com.google.gerrit.server.project.ProjectResource(parent, user))) { final com.google.gerrit.reviewdb.client.Project.NameKey childName = new com.google.gerrit.reviewdb.client.Project.NameKey(child.name); if (!(excluded.contains(childName))) { if (!(automaticallyExcluded.contains(childName))) { childProjects.add(childName); } else { stdout.println(((((((""Automatically excluded '"" + childName) + ""' "") + ""from reparenting because it is in the parent "") + ""line of the new parent '"") + (newParentKey)) + ""'."")); } } } return childProjects; }",1492620343f52e6bd4912d63a4f3d5152b938028,"private java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> getChildrenForReparenting(com.google.gerrit.server.project.ProjectState parent) throws com.google.gerrit.server.permissions.PermissionBackendException { final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> childProjects = new java.util.ArrayList<>(); final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> excluded = new java.util.ArrayList(excludedChildren.size()); for (com.google.gerrit.server.project.ProjectState excludedChild : excludedChildren) { excluded.add(excludedChild.getProject().getNameKey()); } final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> automaticallyExcluded = new java.util.ArrayList(excludedChildren.size()); if ((newParentKey) != null) { automaticallyExcluded.addAll(getAllParents(newParentKey)); } for (com.google.gerrit.extensions.common.ProjectInfo child : listChildProjects.apply(new com.google.gerrit.server.restapi.project.ProjectResource(parent, user))) { final com.google.gerrit.reviewdb.client.Project.NameKey childName = new com.google.gerrit.reviewdb.client.Project.NameKey(child.name); if (!(excluded.contains(childName))) { if (!(automaticallyExcluded.contains(childName))) { childProjects.add(childName); } else { stdout.println(((((((""Automatically excluded '"" + childName) + ""' "") + ""from reparenting because it is in the parent "") + ""line of the new parent '"") + (newParentKey)) + ""'."")); } } } return childProjects; }",085ef7b45b929e31e5859905bc6cb8bf018794ff,"private java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> getChildrenForReparenting(com.google.gerrit.server.project.ProjectState parent) throws com.google.gerrit.server.permissions.PermissionBackendException { final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> childProjects = new java.util.ArrayList<>(); final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> excluded = new java.util.ArrayList(excludedChildren.size()); for (com.google.gerrit.server.project.ProjectState excludedChild : excludedChildren) { excluded.add(excludedChild.getProject().getNameKey()); } final java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> automaticallyExcluded = new java.util.ArrayList(excludedChildren.size()); if ((newParentKey) != null) { automaticallyExcluded.addAll(getAllParents(newParentKey)); } for (com.google.gerrit.extensions.common.ProjectInfo child : listChildProjects.apply(new com.google.gerrit.server.project.ProjectResource(parent, user))) { final com.google.gerrit.reviewdb.client.Project.NameKey childName = new com.google.gerrit.reviewdb.client.Project.NameKey(child.name); if (!(excluded.contains(childName))) { if (!(automaticallyExcluded.contains(childName))) { childProjects.add(childName); } else { stdout.println(((((((""Automatically excluded '"" + childName) + ""' "") + ""from reparenting because it is in the parent "") + ""line of the new parent '"") + (newParentKey)) + ""'."")); } } } return childProjects; }",1492620343f52e6bd4912d63a4f3d5152b938028,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_config_AgreementJson.java,"public com.google.gerrit.extensions.common.AgreementInfo format(com.google.gerrit.common.data.ContributorAgreement ca) { com.google.gerrit.extensions.common.AgreementInfo info = new com.google.gerrit.extensions.common.AgreementInfo(); info.name = ca.getName(); info.description = ca.getDescription(); info.url = ca.getAgreementUrl(); com.google.gerrit.common.data.GroupReference autoVerifyGroup = ca.getAutoVerify(); if ((autoVerifyGroup != null) && (self.get().isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser user = identifiedUserFactory.create(self.get().getAccountId()); try { com.google.gerrit.server.account.GroupControl gc = genericGroupControlFactory.controlFor(user, autoVerifyGroup.getUUID()); com.google.gerrit.server.group.GroupResource group = new com.google.gerrit.server.group.GroupResource(gc); info.autoVerifyGroup = groupJson.format(group); } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.config.AgreementJson.log.warn(((((""autoverify group \"""" + (autoVerifyGroup.getName())) + ""\"" does not exist, referenced in CLA \"""") + (ca.getName())) + ""\"""")); } } return info; }",c11a33b1cb4deb5f729d678cc69339be6a497799,"public com.google.gerrit.extensions.common.AgreementInfo format(com.google.gerrit.common.data.ContributorAgreement ca) { com.google.gerrit.extensions.common.AgreementInfo info = new com.google.gerrit.extensions.common.AgreementInfo(); info.name = ca.getName(); info.description = ca.getDescription(); info.url = ca.getAgreementUrl(); com.google.gerrit.common.data.GroupReference autoVerifyGroup = ca.getAutoVerify(); if ((autoVerifyGroup != null) && (self.get().isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser user = identifiedUserFactory.create(self.get().getAccountId()); try { com.google.gerrit.server.account.GroupControl gc = genericGroupControlFactory.controlFor(user, autoVerifyGroup.getUUID()); com.google.gerrit.server.restapi.group.GroupResource group = new com.google.gerrit.server.restapi.group.GroupResource(gc); info.autoVerifyGroup = groupJson.format(group); } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.restapi.config.AgreementJson.log.warn(((((""autoverify account \"""" + (autoVerifyGroup.getName())) + ""\"" does not exist, referenced in CLA \"""") + (ca.getName())) + ""\"""")); } } return info; }",e5264b4e0a87dd234a7801444cf5b04e44a12307,"public com.google.gerrit.extensions.common.AgreementInfo format(com.google.gerrit.common.data.ContributorAgreement ca) { com.google.gerrit.extensions.common.AgreementInfo info = new com.google.gerrit.extensions.common.AgreementInfo(); info.name = ca.getName(); info.description = ca.getDescription(); info.url = ca.getAgreementUrl(); com.google.gerrit.common.data.GroupReference autoVerifyGroup = ca.getAutoVerify(); if ((autoVerifyGroup != null) && (self.get().isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser user = identifiedUserFactory.create(self.get().getAccountId()); try { com.google.gerrit.server.account.GroupControl gc = genericGroupControlFactory.controlFor(user, autoVerifyGroup.getUUID()); com.google.gerrit.server.group.GroupResource group = new com.google.gerrit.server.group.GroupResource(gc); info.autoVerifyGroup = groupJson.format(group); } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.restapi.config.AgreementJson.log.warn(((((""autoverify group \"""" + (autoVerifyGroup.getName())) + ""\"" does not exist, referenced in CLA \"""") + (ca.getName())) + ""\"""")); } } return info; }",3a4518900f2cc0a83f453f0f3b982f3df55e6820,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_DashboardResource.java,"public static com.google.gerrit.server.project.DashboardResource projectDefault(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) { return new com.google.gerrit.server.project.DashboardResource(projectState, user, null, null, null, true); }",736b2f52ce381a67793a49ff21d3da8691c7514c,"public static com.google.gerrit.server.restapi.project.DashboardResource projectDefault(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) { return new com.google.gerrit.server.restapi.project.DashboardResource(projectState, user, null, null, null, true); }",23aad1100d38c06d2a7991ebc17ddc336984699d,"public static com.google.gerrit.server.project.DashboardResource projectDefault(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) { return new com.google.gerrit.server.project.DashboardResource(projectState, user, null, null, null, true); }",736b2f52ce381a67793a49ff21d3da8691c7514c,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_GetRobotComment.java,@java.lang.Override public com.google.gerrit.extensions.common.RobotCommentInfo apply(com.google.gerrit.server.change.RobotCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newRobotCommentFormatter().format(rsrc.getComment()); },55f1a853abb19e4b9c2342ea4c2c5287d3d5cad2,@java.lang.Override public com.google.gerrit.extensions.common.RobotCommentInfo apply(com.google.gerrit.server.restapi.change.RobotCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newRobotCommentFormatter().format(rsrc.getComment()); },2cf8f31490dff6b3570cf953ebfdf8214631818d,@java.lang.Override public com.google.gerrit.extensions.common.RobotCommentInfo apply(com.google.gerrit.server.change.RobotCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newRobotCommentFormatter().format(rsrc.getComment()); },55f1a853abb19e4b9c2342ea4c2c5287d3d5cad2,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_GetGroup.java,@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gwtorm.server.OrmException { return json.format(resource.getGroup()); },9689920dea40442aaf87cfec5d76d2636d366f77,@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource) throws com.google.gwtorm.server.OrmException { return json.format(resource.getGroup()); },518a80c025530f8baa87a76f67b073cc4c3f714d,@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gwtorm.server.OrmException { return json.format(resource.getGroup()); },9689920dea40442aaf87cfec5d76d2636d366f77,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_rest_project_CreateProjectIT.java,"@org.junit.Test public void createProjectWithNonExistingOwner_UnprocessableEntity() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.name = name(""newProjectName""); in.owners = java.util.Collections.singletonList(""non-existing-group""); assertCreateFails(in, com.google.gerrit.extensions.restapi.UnprocessableEntityException.class); }",3a425e431f2c92a9dc1ea4919cdd4c44532eaf3a,"@org.junit.Test public void createProjectWithNonExistingOwner_UnprocessableEntity() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.name = name(""newProjectName""); in.owners = java.util.Collections.singletonList(""non-existing-account""); assertCreateFails(in, com.google.gerrit.extensions.restapi.UnprocessableEntityException.class); }",d6b95740b6bdb20c04c6d526a3814019d563974e,"@org.junit.Test public void createProjectWithNonExistingOwner_UnprocessableEntity() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.name = name(""newProjectName""); in.owners = java.util.Collections.singletonList(""non-existing-group""); assertCreateFails(in, com.google.gerrit.extensions.restapi.UnprocessableEntityException.class); }",3a425e431f2c92a9dc1ea4919cdd4c44532eaf3a,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_ListProjects.java,"@org.kohsuke.args4j.Option(name = ""--has-acl-for"", metaVar = ""GROUP"", usage = ""displays only projects on which access rights for this group are directly assigned"") public void setGroupUuid(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { this.groupUuid = groupUuid; }",97ecd8b5dd2de6f6a158c177d47f674090df23a6,"@org.kohsuke.args4j.Option(name = ""--has-acl-for"", metaVar = ""GROUP"", usage = ""displays only projects on which access rights for this account are directly assigned"") public void setGroupUuid(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { this.groupUuid = groupUuid; }",4a0ba7949804655bd37184e0aad3567aa2e2b6ba,"@org.kohsuke.args4j.Option(name = ""--has-acl-for"", metaVar = ""GROUP"", usage = ""displays only projects on which access rights for this group are directly assigned"") public void setGroupUuid(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { this.groupUuid = groupUuid; }",97ecd8b5dd2de6f6a158c177d47f674090df23a6,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_projects_TagApiImpl.java,"com.google.gerrit.server.api.projects.TagApiImpl create(com.google.gerrit.server.project.ProjectResource project, java.lang.String ref);",f201a082b3044dbb2cf924d862a3d1831931c8b7,"com.google.gerrit.server.api.projects.TagApiImpl create(com.google.gerrit.server.restapi.project.ProjectResource project, java.lang.String ref);",12278ec796d690dcec36052f93bbf92d485a40c2,"com.google.gerrit.server.api.projects.TagApiImpl create(com.google.gerrit.server.project.ProjectResource project, java.lang.String ref);",f201a082b3044dbb2cf924d862a3d1831931c8b7,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_AddSubgroups.java,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.AddSubgroups.Input in = new com.google.gerrit.server.group.AddSubgroups.Input(); in.groups = com.google.common.collect.ImmutableList.of(id); try { java.util.List<com.google.gerrit.extensions.common.GroupInfo> list = addSubgroups.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw new java.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }",2b3656bbf98d6200078d576c796a31a026c8a3ab,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.server.restapi.group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddSubgroups.Input in = new com.google.gerrit.server.restapi.group.AddSubgroups.Input(); in.groups = com.google.common.collect.ImmutableList.of(id); try { java.util.List<com.google.gerrit.extensions.common.GroupInfo> list = addSubgroups.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw new java.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }",13a47cb9ade88ff5c5c69f0236ef2d594d95669d,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.restapi.group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddSubgroups.Input in = new com.google.gerrit.server.restapi.group.AddSubgroups.Input(); in.groups = com.google.common.collect.ImmutableList.of(id); try { java.util.List<com.google.gerrit.extensions.common.GroupInfo> list = addSubgroups.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw new java.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }",b9e03c7e27a7483072826c538a3bacf7331497fe,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_AddSubgroups.java,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.SubgroupResource resource, com.google.gerrit.server.group.AddSubgroups.Input input) throws com.google.gwtorm.server.OrmException { return get.get().apply(resource); }",19065bfa852d4bde68c9fd02db4c89ef0b874cfb,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.SubgroupResource resource, com.google.gerrit.server.restapi.group.AddSubgroups.Input input) throws com.google.gwtorm.server.OrmException { return get.get().apply(resource); }",05071259912fbbf94ffcbc48096b19e7b93b8941,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.SubgroupResource resource, com.google.gerrit.server.restapi.group.AddSubgroups.Input input) throws com.google.gwtorm.server.OrmException { return get.get().apply(resource); }",8fddb3e2cc37deb157c63e769c4be2981e1b42c6,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_Comments.java,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.CommentResource>> views() { return views; },8b5c4b252742a238ea981f836e85d9ee3d65b6c8,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.change.CommentResource>> views() { return views; },152efe53f33ca3fc65417b0081b2339eed9f54b8,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.CommentResource>> views() { return views; },8b5c4b252742a238ea981f836e85d9ee3d65b6c8,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_Comments.java,"@java.lang.Override public com.google.gerrit.server.change.CommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.publishedByPatchSet(dbProvider.get(), notes, rev.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.change.CommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",85347aaf2ac961768b4feb3776efd820a7d32e95,"@java.lang.Override public com.google.gerrit.server.restapi.change.CommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.publishedByPatchSet(dbProvider.get(), notes, rev.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.restapi.change.CommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",b749f72e8634453e835bc991d72764c5baaafc3a,"@java.lang.Override public com.google.gerrit.server.change.CommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.publishedByPatchSet(dbProvider.get(), notes, rev.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.change.CommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",85347aaf2ac961768b4feb3776efd820a7d32e95,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_FileResource.java,"public static com.google.gerrit.server.project.FileResource create(com.google.gerrit.server.git.GitRepositoryManager repoManager, com.google.gerrit.server.project.ProjectState projectState, org.eclipse.jgit.lib.ObjectId rev, java.lang.String path) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(projectState.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevTree tree = rw.parseTree(rev); if ((org.eclipse.jgit.treewalk.TreeWalk.forPath(repo, path, tree)) != null) { return new com.google.gerrit.server.project.FileResource(projectState, rev, path); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)); }",08a350b899d73154d9d124020bf6e614de017643,"public static com.google.gerrit.server.restapi.project.FileResource create(com.google.gerrit.server.git.GitRepositoryManager repoManager, com.google.gerrit.server.project.ProjectState projectState, org.eclipse.jgit.lib.ObjectId rev, java.lang.String path) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(projectState.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevTree tree = rw.parseTree(rev); if ((org.eclipse.jgit.treewalk.TreeWalk.forPath(repo, path, tree)) != null) { return new com.google.gerrit.server.restapi.project.FileResource(projectState, rev, path); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)); }",c41bd3fda61e355b0437dbba93f9a4fefc5ba805,"public static com.google.gerrit.server.project.FileResource create(com.google.gerrit.server.git.GitRepositoryManager repoManager, com.google.gerrit.server.project.ProjectState projectState, org.eclipse.jgit.lib.ObjectId rev, java.lang.String path) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(projectState.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevTree tree = rw.parseTree(rev); if ((org.eclipse.jgit.treewalk.TreeWalk.forPath(repo, path, tree)) != null) { return new com.google.gerrit.server.project.FileResource(projectState, rev, path); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)); }",08a350b899d73154d9d124020bf6e614de017643,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_schema_Schema_164.java,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git)) { md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); md.setMessage(com.google.gerrit.server.schema.Schema_164.COMMIT_MSG); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.AccessSection groups = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), true); com.google.gerrit.server.schema.AclUtil.grant(config, groups, Permission.READ, false, true, systemGroupBackend.getGroup(com.google.gerrit.server.schema.REGISTERED_USERS)); config.commit(md); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException(""Failed to grant read permissions on group branches"", e); } }",4ae7c7245c4d94294e51567ed3f682e403e1e7a7,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git)) { md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); md.setMessage(com.google.gerrit.server.schema.Schema_164.COMMIT_MSG); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.AccessSection groups = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), true); com.google.gerrit.server.schema.AclUtil.grant(config, groups, Permission.READ, false, true, systemGroupBackend.getGroup(com.google.gerrit.server.schema.REGISTERED_USERS)); config.commit(md); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException(""Failed to grant read permissions on account branches"", e); } }",e6c17ee683c11dda3df456dbe0bbb435c4849896,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git)) { md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); md.setMessage(com.google.gerrit.server.schema.Schema_164.COMMIT_MSG); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.AccessSection groups = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), true); com.google.gerrit.server.schema.AclUtil.grant(config, groups, Permission.READ, false, true, systemGroupBackend.getGroup(com.google.gerrit.server.schema.REGISTERED_USERS)); config.commit(md); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException(""Failed to grant read permissions on group branches"", e); } }",4ae7c7245c4d94294e51567ed3f682e403e1e7a7,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_projects_DashboardApiImpl.java,"private com.google.gerrit.server.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }",082c2e5770523aecaf5fc786bbdaa567a6a4a22b,"private com.google.gerrit.server.restapi.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }",fd529c91680cc0a74d4e3204bd7803b10e23f5b3,"private com.google.gerrit.server.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }",082c2e5770523aecaf5fc786bbdaa567a6a4a22b,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_projects_DashboardApiImpl.java,"@java.lang.Override public void setDefault() throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.SetDashboardInput input = new com.google.gerrit.extensions.common.SetDashboardInput(); input.id = id; try { set.apply(com.google.gerrit.server.project.DashboardResource.projectDefault(project.getProjectState(), project.getUser()), input); } catch (java.lang.Exception e) { java.lang.String msg = java.lang.String.format(""Cannot %s default dashboard"", ((id) != null ? ""set"" : ""remove"")); throw com.google.gerrit.server.api.ApiUtil.asRestApiException(msg, e); } }",2f91cea5070645915a206703ea86b837572c106f,"@java.lang.Override public void setDefault() throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.SetDashboardInput input = new com.google.gerrit.extensions.common.SetDashboardInput(); input.id = id; try { set.apply(com.google.gerrit.server.restapi.project.DashboardResource.projectDefault(project.getProjectState(), project.getUser()), input); } catch (java.lang.Exception e) { java.lang.String msg = java.lang.String.format(""Cannot %s default dashboard"", ((id) != null ? ""set"" : ""remove"")); throw com.google.gerrit.server.api.ApiUtil.asRestApiException(msg, e); } }",7bd5e5624598b493737b59d9e4e15b804af06ea6,"@java.lang.Override public void setDefault() throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.SetDashboardInput input = new com.google.gerrit.extensions.common.SetDashboardInput(); input.id = id; try { set.apply(com.google.gerrit.server.project.DashboardResource.projectDefault(project.getProjectState(), project.getUser()), input); } catch (java.lang.Exception e) { java.lang.String msg = java.lang.String.format(""Cannot %s default dashboard"", ((id) != null ? ""set"" : ""remove"")); throw com.google.gerrit.server.api.ApiUtil.asRestApiException(msg, e); } }",2f91cea5070645915a206703ea86b837572c106f,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_projects_TagApiImpl.java,"private com.google.gerrit.server.project.TagResource resource() throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException { return tags.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(ref)); }",cc1b20468c5a484c2d9192b23c979a578cdf1be4,"private com.google.gerrit.server.restapi.project.TagResource resource() throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException { return tags.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(ref)); }",a415610af1aa967459d988e469d85a1a61f25f68,"private com.google.gerrit.server.project.TagResource resource() throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException { return tags.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(ref)); }",cc1b20468c5a484c2d9192b23c979a578cdf1be4,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_DeleteMembers.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); input = com.google.gerrit.server.group.AddMembers.Input.init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveMember())) { throw new com.google.gerrit.extensions.restapi.AuthException((""Cannot delete members from group "" + (internalGroup.getName()))); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> membersToRemove = new java.util.HashSet<>(); for (java.lang.String nameOrEmail : input.members) { com.google.gerrit.reviewdb.client.Account a = accounts.parse(nameOrEmail).getAccount(); membersToRemove.add(a.getId()); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); try { removeGroupMembers(groupUuid, membersToRemove); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format(""Group %s not found"", groupUuid)); } return com.google.gerrit.extensions.restapi.Response.none(); }",11c2bfa7d739dac83773143333a1d6538d4e3fca,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); input = com.google.gerrit.server.restapi.group.AddMembers.Input.init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveMember())) { throw new com.google.gerrit.extensions.restapi.AuthException((""Cannot delete members from account "" + (internalGroup.getName()))); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> membersToRemove = new java.util.HashSet<>(); for (java.lang.String nameOrEmail : input.members) { com.google.gerrit.reviewdb.client.Account a = accounts.parse(nameOrEmail).getAccount(); membersToRemove.add(a.getId()); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); try { removeGroupMembers(groupUuid, membersToRemove); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format(""Group %s not found"", groupUuid)); } return com.google.gerrit.extensions.restapi.Response.none(); }",ff3ef7e7f44380fad77e3ef5cfe2269081acb208,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); input = com.google.gerrit.server.restapi.group.AddMembers.Input.init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveMember())) { throw new com.google.gerrit.extensions.restapi.AuthException((""Cannot delete members from group "" + (internalGroup.getName()))); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> membersToRemove = new java.util.HashSet<>(); for (java.lang.String nameOrEmail : input.members) { com.google.gerrit.reviewdb.client.Account a = accounts.parse(nameOrEmail).getAccount(); membersToRemove.add(a.getId()); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); try { removeGroupMembers(groupUuid, membersToRemove); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format(""Group %s not found"", groupUuid)); } return com.google.gerrit.extensions.restapi.Response.none(); }",e5ae21bf6c3113ce784ea8813e043614c5f7fe86,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_groups_GroupApiImpl.java,"@java.lang.Override public void owner(java.lang.String owner) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.groups.OwnerInput in = new com.google.gerrit.extensions.api.groups.OwnerInput(); in.owner = owner; try { putOwner.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot put group owner"", e); } }",220bf6f4af0f2cb4aee8593d6c048ccdc559a292,"@java.lang.Override public void owner(java.lang.String owner) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.groups.OwnerInput in = new com.google.gerrit.extensions.api.groups.OwnerInput(); in.owner = owner; try { putOwner.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot put account owner"", e); } }",30cac2c504c8190cbf1f478dc14de2125f45f1ea,"@java.lang.Override public void owner(java.lang.String owner) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.groups.OwnerInput in = new com.google.gerrit.extensions.api.groups.OwnerInput(); in.owner = owner; try { putOwner.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot put group owner"", e); } }",220bf6f4af0f2cb4aee8593d6c048ccdc559a292,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_rest_change_ChangeReviewersByEmailIT.java,"@org.junit.Test public void rejectWhenFeatureIsDisabled() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.api.projects.ConfigInput conf = new com.google.gerrit.extensions.api.projects.ConfigInput(); conf.enableReviewerByEmail = com.google.gerrit.extensions.client.InheritableBoolean.FALSE; gApi.projects().name(project.get()).config(conf); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.AddReviewerResult result = gApi.changes().id(r.getChangeId()).addReviewer(""Foo Bar <foo.bar@gerritcodereview.com>""); assertThat(result.error).isEqualTo(""Foo Bar <foo.bar@gerritcodereview.com> does not identify a registered user or group""); assertThat(result.reviewers).isNull(); }",467a48cdc87340dd4e834304969132bfa6198e74,"@org.junit.Test public void rejectWhenFeatureIsDisabled() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.api.projects.ConfigInput conf = new com.google.gerrit.extensions.api.projects.ConfigInput(); conf.enableReviewerByEmail = com.google.gerrit.extensions.client.InheritableBoolean.FALSE; gApi.projects().name(project.get()).config(conf); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.AddReviewerResult result = gApi.changes().id(r.getChangeId()).addReviewer(""Foo Bar <foo.bar@gerritcodereview.com>""); assertThat(result.error).isEqualTo(""Foo Bar <foo.bar@gerritcodereview.com> does not identify a registered user or account""); assertThat(result.reviewers).isNull(); }",b16121e4a4cece4e7507001d63fa27f089573b01,"@org.junit.Test public void rejectWhenFeatureIsDisabled() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.api.projects.ConfigInput conf = new com.google.gerrit.extensions.api.projects.ConfigInput(); conf.enableReviewerByEmail = com.google.gerrit.extensions.client.InheritableBoolean.FALSE; gApi.projects().name(project.get()).config(conf); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.AddReviewerResult result = gApi.changes().id(r.getChangeId()).addReviewer(""Foo Bar <foo.bar@gerritcodereview.com>""); assertThat(result.error).isEqualTo(""Foo Bar <foo.bar@gerritcodereview.com> does not identify a registered user or group""); assertThat(result.reviewers).isNull(); }",467a48cdc87340dd4e834304969132bfa6198e74,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_DashboardsCollection.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource, ?> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",2e7622a77fef766a8a742afcd13e6a8b74924169,"@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.restapi.project.ProjectResource, ?> create(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",b56ba05a8111549cccc3dcfddf6e172416d80a93,"@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource, ?> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",f880e4e34fc9e8b0f9e406fb74c3f8a6c0d7eff2,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_DashboardsCollection.java,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.DashboardResource>> views() { return views; },615084bac5578cfebea3103a7077ed8268888ace,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.DashboardResource>> views() { return views; },d18faf97f26c0003c098a3611069525f105ea1db,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.DashboardResource>> views() { return views; },615084bac5578cfebea3103a7077ed8268888ace,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_DashboardsCollection.java,"@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",c8bbbeea5dd2fb674d114aaa14d74c623bc9aadb,"@java.lang.Override public com.google.gerrit.server.restapi.project.DashboardResource parse(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.restapi.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.restapi.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",6b7ee5d7a19387b7cdc66947c2b924d809787636,"@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.restapi.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",05010da3618980ff9445d7b2ad0103c8a1b7e929,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_GetConfig.java,"@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource resource) { return new com.google.gerrit.server.project.ConfigInfoImpl(serverEnableSignedPush, resource.getProjectState(), resource.getUser(), config, pluginConfigEntries, cfgFactory, allProjects, uiActions, views); }",774294192cdec6bcb6bd6f455a52e5c5ca2d4806,"@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.restapi.project.ProjectResource resource) { return new com.google.gerrit.server.project.ConfigInfoImpl(serverEnableSignedPush, resource.getProjectState(), resource.getUser(), config, pluginConfigEntries, cfgFactory, allProjects, uiActions, views); }",ca17a0455595fd0a057dec99304b85c0adf08643,"@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource resource) { return new com.google.gerrit.server.restapi.project.ConfigInfoImpl(serverEnableSignedPush, resource.getProjectState(), resource.getUser(), config, pluginConfigEntries, cfgFactory, allProjects, uiActions, views); }",c518a6b035b8c107c065b8ad3a9126595cd986d5,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_GetOwner.java,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); try { com.google.gerrit.server.account.GroupControl c = controlFactory.validateFor(group.getOwnerGroupUUID()); return json.format(c.getGroup()); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }",f22b239a978b714c6086c88b64433469f1ccfd11,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); try { com.google.gerrit.server.account.GroupControl c = controlFactory.validateFor(group.getOwnerGroupUUID()); return json.format(c.getGroup()); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }",c5be5e568cf437bd0262752b402c0465f856cbb3,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); try { com.google.gerrit.server.account.GroupControl c = controlFactory.validateFor(group.getOwnerGroupUUID()); return json.format(c.getGroup()); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }",f22b239a978b714c6086c88b64433469f1ccfd11,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_GetComment.java,@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.change.CommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().format(rsrc.getComment()); },78d9b367ad9ba422e1d660efbd2849efb4dcc801,@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.restapi.change.CommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().format(rsrc.getComment()); },947e469fc30a97b93cadb42e29253539f2fe81da,@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.change.CommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().format(rsrc.getComment()); },78d9b367ad9ba422e1d660efbd2849efb4dcc801,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_db_GroupsConsistencyChecker.java,"private java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkGroup(com.google.gerrit.server.group.InternalGroup g, java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> byUUID) throws java.io.IOException { java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = new java.util.ArrayList<>(); problems.addAll(checkCycle(g, byUUID)); if (((byUUID.get(g.getOwnerGroupUUID())) == null) && ((groupBackend.get(g.getOwnerGroupUUID())) == null)) { problems.add(error(""group %s (%s) has nonexistent owner group %s"", g.getName(), g.getGroupUUID(), g.getOwnerGroupUUID())); } for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid : g.getSubgroups()) { if (((byUUID.get(subUuid)) == null) && ((groupBackend.get(subUuid)) == null)) { problems.add(error(""group %s (%s) has nonexistent subgroup %s"", g.getName(), g.getGroupUUID(), subUuid)); } } for (com.google.gerrit.reviewdb.client.Account.Id id : g.getMembers().asList()) { com.google.gerrit.reviewdb.client.Account account; try { account = accounts.get(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { problems.add(error(""group %s (%s) has member %s with invalid configuration: %s"", g.getName(), g.getGroupUUID(), id, e.getMessage())); continue; } if (account == null) { problems.add(error(""group %s (%s) has nonexistent member %s"", g.getName(), g.getGroupUUID(), id)); } } return problems; }",59437299a604a45fd3fe33ec11c2f724a51b542b,"private java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkGroup(com.google.gerrit.server.group.InternalGroup g, java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> byUUID) throws java.io.IOException { java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = new java.util.ArrayList<>(); problems.addAll(checkCycle(g, byUUID)); if (((byUUID.get(g.getOwnerGroupUUID())) == null) && ((groupBackend.get(g.getOwnerGroupUUID())) == null)) { problems.add(error(""account %s (%s) has nonexistent owner account %s"", g.getName(), g.getGroupUUID(), g.getOwnerGroupUUID())); } for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid : g.getSubgroups()) { if (((byUUID.get(subUuid)) == null) && ((groupBackend.get(subUuid)) == null)) { problems.add(error(""account %s (%s) has nonexistent subgroup %s"", g.getName(), g.getGroupUUID(), subUuid)); } } for (com.google.gerrit.reviewdb.client.Account.Id id : g.getMembers().asList()) { com.google.gerrit.reviewdb.client.Account account; try { account = accounts.get(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { problems.add(error(""account %s (%s) has member %s with invalid configuration: %s"", g.getName(), g.getGroupUUID(), id, e.getMessage())); continue; } if (account == null) { problems.add(error(""account %s (%s) has nonexistent member %s"", g.getName(), g.getGroupUUID(), id)); } } return problems; }",25d2eb2794d1197b6eefabd4f8bf97df01f78d0f,"private java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkGroup(com.google.gerrit.server.group.InternalGroup g, java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> byUUID) throws java.io.IOException { java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = new java.util.ArrayList<>(); problems.addAll(checkCycle(g, byUUID)); if (((byUUID.get(g.getOwnerGroupUUID())) == null) && ((groupBackend.get(g.getOwnerGroupUUID())) == null)) { problems.add(error(""group %s (%s) has nonexistent owner group %s"", g.getName(), g.getGroupUUID(), g.getOwnerGroupUUID())); } for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid : g.getSubgroups()) { if (((byUUID.get(subUuid)) == null) && ((groupBackend.get(subUuid)) == null)) { problems.add(error(""group %s (%s) has nonexistent subgroup %s"", g.getName(), g.getGroupUUID(), subUuid)); } } for (com.google.gerrit.reviewdb.client.Account.Id id : g.getMembers().asList()) { com.google.gerrit.reviewdb.client.Account account; try { account = accounts.get(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { problems.add(error(""group %s (%s) has member %s with invalid configuration: %s"", g.getName(), g.getGroupUUID(), id, e.getMessage())); continue; } if (account == null) { problems.add(error(""group %s (%s) has nonexistent member %s"", g.getName(), g.getGroupUUID(), id)); } } return problems; }",59437299a604a45fd3fe33ec11c2f724a51b542b,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_db_GroupsConsistencyChecker.java,"private java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkCycle(com.google.gerrit.server.group.InternalGroup root, java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> byUUID) { java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = new java.util.ArrayList<>(); java.util.Set<com.google.gerrit.server.group.InternalGroup> todo = new java.util.LinkedHashSet<>(); java.util.Set<com.google.gerrit.server.group.InternalGroup> seen = new java.util.HashSet<>(); todo.add(root); while (!(todo.isEmpty())) { com.google.gerrit.server.group.InternalGroup t = todo.iterator().next(); todo.remove(t); if (seen.contains(t)) { continue; } seen.add(t); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid : t.getSubgroups()) { com.google.gerrit.server.group.InternalGroup g = byUUID.get(subUuid); if (g == null) { continue; } if (java.util.Objects.equals(g, root)) { problems.add(warning(""group %s (%s) contains a cycle: %s (%s) points to it as subgroup."", root.getName(), root.getGroupUUID(), t.getName(), t.getGroupUUID())); } todo.add(g); } } return problems; }",363214d02c9143429bfd3bb78bd82e7a2befb20d,"private java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkCycle(com.google.gerrit.server.group.InternalGroup root, java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> byUUID) { java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = new java.util.ArrayList<>(); java.util.Set<com.google.gerrit.server.group.InternalGroup> todo = new java.util.LinkedHashSet<>(); java.util.Set<com.google.gerrit.server.group.InternalGroup> seen = new java.util.HashSet<>(); todo.add(root); while (!(todo.isEmpty())) { com.google.gerrit.server.group.InternalGroup t = todo.iterator().next(); todo.remove(t); if (seen.contains(t)) { continue; } seen.add(t); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid : t.getSubgroups()) { com.google.gerrit.server.group.InternalGroup g = byUUID.get(subUuid); if (g == null) { continue; } if (java.util.Objects.equals(g, root)) { problems.add(warning(""account %s (%s) contains a cycle: %s (%s) points to it as subgroup."", root.getName(), root.getGroupUUID(), t.getName(), t.getGroupUUID())); } todo.add(g); } } return problems; }",f268777a6b2ddb21d2dbb009ac71f23aabdc9d05,"private java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkCycle(com.google.gerrit.server.group.InternalGroup root, java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> byUUID) { java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = new java.util.ArrayList<>(); java.util.Set<com.google.gerrit.server.group.InternalGroup> todo = new java.util.LinkedHashSet<>(); java.util.Set<com.google.gerrit.server.group.InternalGroup> seen = new java.util.HashSet<>(); todo.add(root); while (!(todo.isEmpty())) { com.google.gerrit.server.group.InternalGroup t = todo.iterator().next(); todo.remove(t); if (seen.contains(t)) { continue; } seen.add(t); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid : t.getSubgroups()) { com.google.gerrit.server.group.InternalGroup g = byUUID.get(subUuid); if (g == null) { continue; } if (java.util.Objects.equals(g, root)) { problems.add(warning(""group %s (%s) contains a cycle: %s (%s) points to it as subgroup."", root.getName(), root.getGroupUUID(), t.getName(), t.getGroupUUID())); } todo.add(g); } } return problems; }",363214d02c9143429bfd3bb78bd82e7a2befb20d,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_GetTag.java,@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.project.TagResource resource) { return resource.getTagInfo(); },1fab8f18798a71a3c0f77619ac0263a5005d46a1,@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.restapi.project.TagResource resource) { return resource.getTagInfo(); },b0a07ed7a98eafc4c0ec8eb596b0846d8b4e5272,@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.project.TagResource resource) { return resource.getTagInfo(); },1fab8f18798a71a3c0f77619ac0263a5005d46a1,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_DashboardsCollection.java,"private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState parent, com.google.gerrit.server.project.ProjectState current, com.google.gerrit.server.CurrentUser user, com.google.gerrit.extensions.api.projects.DashboardInfo info) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.AmbiguousObjectException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.IncorrectObjectTypeException { java.lang.String ref = com.google.gerrit.server.project.DashboardsCollection.normalizeDashboardRef(info.ref); try { permissionBackend.user(user).project(parent.getNameKey()).ref(ref).check(RefPermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } if (!(org.eclipse.jgit.lib.Repository.isValidRefName(ref))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(parent.getNameKey())) { org.eclipse.jgit.lib.ObjectId objId = git.resolve(((ref + "":"") + (info.path))); if (objId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } org.eclipse.jgit.lib.BlobBasedConfig cfg = new org.eclipse.jgit.lib.BlobBasedConfig(null, git, objId); return new com.google.gerrit.server.project.DashboardResource(current, user, ref, info.path, cfg, false); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } }",df4931e2586132544dec5d84970336e38c4d9853,"private com.google.gerrit.server.restapi.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState parent, com.google.gerrit.server.project.ProjectState current, com.google.gerrit.server.CurrentUser user, com.google.gerrit.extensions.api.projects.DashboardInfo info) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.AmbiguousObjectException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.IncorrectObjectTypeException { java.lang.String ref = com.google.gerrit.server.restapi.project.DashboardsCollection.normalizeDashboardRef(info.ref); try { permissionBackend.user(user).project(parent.getNameKey()).ref(ref).check(RefPermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } if (!(org.eclipse.jgit.lib.Repository.isValidRefName(ref))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(parent.getNameKey())) { org.eclipse.jgit.lib.ObjectId objId = git.resolve(((ref + "":"") + (info.path))); if (objId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } org.eclipse.jgit.lib.BlobBasedConfig cfg = new org.eclipse.jgit.lib.BlobBasedConfig(null, git, objId); return new com.google.gerrit.server.restapi.project.DashboardResource(current, user, ref, info.path, cfg, false); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } }",037be50c7ca62f73e2291936c6f5345f47ebf288,"private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState parent, com.google.gerrit.server.project.ProjectState current, com.google.gerrit.server.CurrentUser user, com.google.gerrit.extensions.api.projects.DashboardInfo info) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.AmbiguousObjectException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.IncorrectObjectTypeException { java.lang.String ref = com.google.gerrit.server.restapi.project.DashboardsCollection.normalizeDashboardRef(info.ref); try { permissionBackend.user(user).project(parent.getNameKey()).ref(ref).check(RefPermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } if (!(org.eclipse.jgit.lib.Repository.isValidRefName(ref))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(parent.getNameKey())) { org.eclipse.jgit.lib.ObjectId objId = git.resolve(((ref + "":"") + (info.path))); if (objId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } org.eclipse.jgit.lib.BlobBasedConfig cfg = new org.eclipse.jgit.lib.BlobBasedConfig(null, git, objId); return new com.google.gerrit.server.project.DashboardResource(current, user, ref, info.path, cfg, false); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } }",778b033abd00c67e3a8e8ace7bc6000f397a8d12,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_projects_CommitApiImpl.java,com.google.gerrit.server.api.projects.CommitApiImpl create(com.google.gerrit.server.project.CommitResource r);,9b184dddad8da1e08396aa3e024aaef3bfb03122,com.google.gerrit.server.api.projects.CommitApiImpl create(com.google.gerrit.server.restapi.project.CommitResource r);,fc6b4e405255fb83e89c6aabbef4bfe6bc7f401b,com.google.gerrit.server.api.projects.CommitApiImpl create(com.google.gerrit.server.project.CommitResource r);,9b184dddad8da1e08396aa3e024aaef3bfb03122,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupConfigTest.java,"@org.junit.Test public void idInConfigMustBeDefined() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[group]\n\tname = users\n\townerGroupUuid = owners\n""); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage(""ID of the group users-XYZ""); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }",da9ca6ed4e9075449916553b31010eb7efd237b9,"@org.junit.Test public void idInConfigMustBeDefined() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[account]\n\tname = users\n\townerGroupUuid = owners\n""); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage(""ID of the account users-XYZ""); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }",8d0841c9830b0187b6f7c96edbd9a7e44dfd46fb,"@org.junit.Test public void idInConfigMustBeDefined() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[group]\n\tname = users\n\townerGroupUuid = owners\n""); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage(""ID of the group users-XYZ""); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }",da9ca6ed4e9075449916553b31010eb7efd237b9,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupConfigTest.java,"@org.junit.Test public void ownerUuidOfNewGroupMustNotBeNull() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Owner UUID of the group users-XYZ""); groupConfig.commit(metaDataUpdate); } }",c4af6370bec4b2967ff4b9adeedc90a65c01138c,"@org.junit.Test public void ownerUuidOfNewGroupMustNotBeNull() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Owner UUID of the account users-XYZ""); groupConfig.commit(metaDataUpdate); } }",abb68a2ee1fed4a9a7e242929be7c3d72b3f4fca,"@org.junit.Test public void ownerUuidOfNewGroupMustNotBeNull() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Owner UUID of the group users-XYZ""); groupConfig.commit(metaDataUpdate); } }",c4af6370bec4b2967ff4b9adeedc90a65c01138c,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupConfigTest.java,"@org.junit.Test public void nameOfNewGroupMustNotBeNull() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Name of the group users-XYZ""); groupConfig.commit(metaDataUpdate); } }",5c4d32ac13ef9d3e9c90c24d5e95e539ebe6f58c,"@org.junit.Test public void nameOfNewGroupMustNotBeNull() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Name of the account users-XYZ""); groupConfig.commit(metaDataUpdate); } }",7910c7b8ac5dc7be1dd28969b56b161cdcad8036,"@org.junit.Test public void nameOfNewGroupMustNotBeNull() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Name of the group users-XYZ""); groupConfig.commit(metaDataUpdate); } }",5c4d32ac13ef9d3e9c90c24d5e95e539ebe6f58c,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupConfigTest.java,"@org.junit.Test public void nameCannotBeUpdatedToEmptyString() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[group]\n\tname = users\n\tid = 42\n\townerGroupUuid = owners\n""); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("""")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Name of the group users-XYZ""); groupConfig.commit(metaDataUpdate); } }",c727c0c21f38df4bd3e407b134bc5287efc69bfe,"@org.junit.Test public void nameCannotBeUpdatedToEmptyString() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[account]\n\tname = users\n\tid = 42\n\townerGroupUuid = owners\n""); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("""")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Name of the account users-XYZ""); groupConfig.commit(metaDataUpdate); } }",eea64b4e347aa94940b329d9dde0ee71c9f693e9,"@org.junit.Test public void nameCannotBeUpdatedToEmptyString() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[group]\n\tname = users\n\tid = 42\n\townerGroupUuid = owners\n""); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("""")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Name of the group users-XYZ""); groupConfig.commit(metaDataUpdate); } }",c727c0c21f38df4bd3e407b134bc5287efc69bfe,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupConfigTest.java,"@org.junit.Test public void ownerUuidCannotBeUpdatedToEmptyString() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[group]\n\tname = users\n\tid = 42\n\townerGroupUuid = owners\n""); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("""")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Owner UUID of the group users-XYZ""); groupConfig.commit(metaDataUpdate); } }",4135c61662b1011b46a6cc7dabff781b3964b380,"@org.junit.Test public void ownerUuidCannotBeUpdatedToEmptyString() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[account]\n\tname = users\n\tid = 42\n\townerGroupUuid = owners\n""); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("""")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Owner UUID of the account users-XYZ""); groupConfig.commit(metaDataUpdate); } }",623139ff5fa46b437cad7b699eb36434778f03e4,"@org.junit.Test public void ownerUuidCannotBeUpdatedToEmptyString() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[group]\n\tname = users\n\tid = 42\n\townerGroupUuid = owners\n""); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("""")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Owner UUID of the group users-XYZ""); groupConfig.commit(metaDataUpdate); } }",4135c61662b1011b46a6cc7dabff781b3964b380,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupConfigTest.java,"@org.junit.Test public void idInConfigMustNotBeNegative() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[group]\n\tname = users\n\tid = -5\n\townerGroupUuid = owners\n""); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage(""ID of the group users-XYZ""); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }",c2abfb32451ef13dda3e826a92cf0ca0430f8924,"@org.junit.Test public void idInConfigMustNotBeNegative() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[account]\n\tname = users\n\tid = -5\n\townerGroupUuid = owners\n""); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage(""ID of the account users-XYZ""); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }",bb601ffdae44a1738a872a4921d71cc4a8ce4bab,"@org.junit.Test public void idInConfigMustNotBeNegative() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[group]\n\tname = users\n\tid = -5\n\townerGroupUuid = owners\n""); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage(""ID of the group users-XYZ""); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }",c2abfb32451ef13dda3e826a92cf0ca0430f8924,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupConfigTest.java,"@org.junit.Test public void ownerUuidInConfigMustBeDefined() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[group]\n\tname = users\n\tid = 42\n""); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage(""Owner UUID of the group users-XYZ""); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }",ca577acb342bbefe716660d0c25de71f75c83b65,"@org.junit.Test public void ownerUuidInConfigMustBeDefined() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[account]\n\tname = users\n\tid = 42\n""); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage(""Owner UUID of the account users-XYZ""); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }",ef7f779d5b8c2a98a596bfe8e1252aece4c16a90,"@org.junit.Test public void ownerUuidInConfigMustBeDefined() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[group]\n\tname = users\n\tid = 42\n""); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage(""Owner UUID of the group users-XYZ""); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }",ca577acb342bbefe716660d0c25de71f75c83b65,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupConfigTest.java,"@org.junit.Test public void nameInConfigMayBeUndefined() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[group]\n\tid = 42\n\townerGroupUuid = owners\n""); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); assertThat(groupConfig.getLoadedGroup().get().getName()).isEmpty(); }",9c9396de08429eaeb1651eb6a50b37aaecc6783c,"@org.junit.Test public void nameInConfigMayBeUndefined() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[account]\n\tid = 42\n\townerGroupUuid = owners\n""); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); assertThat(groupConfig.getLoadedGroup().get().getName()).isEmpty(); }",717f205b3067831ca1539638ac1ec40365d5963e,"@org.junit.Test public void nameInConfigMayBeUndefined() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[group]\n\tid = 42\n\townerGroupUuid = owners\n""); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); assertThat(groupConfig.getLoadedGroup().get().getName()).isEmpty(); }",9c9396de08429eaeb1651eb6a50b37aaecc6783c,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupConfigTest.java,"@org.junit.Test public void nameCannotBeUpdatedToNull() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[group]\n\tname = users\n\tid = 42\n\townerGroupUuid = owners\n""); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Name of the group users-XYZ""); groupConfig.commit(metaDataUpdate); } }",b367c513f756f83f7ae1f729f1e5c9cfcd1440b5,"@org.junit.Test public void nameCannotBeUpdatedToNull() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[account]\n\tname = users\n\tid = 42\n\townerGroupUuid = owners\n""); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Name of the account users-XYZ""); groupConfig.commit(metaDataUpdate); } }",7676f6a0c600d9c9e5532341d24c7d29e9c4d749,"@org.junit.Test public void nameCannotBeUpdatedToNull() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[group]\n\tname = users\n\tid = 42\n\townerGroupUuid = owners\n""); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Name of the group users-XYZ""); groupConfig.commit(metaDataUpdate); } }",b367c513f756f83f7ae1f729f1e5c9cfcd1440b5,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupConfigTest.java,"@org.junit.Test public void nameOfNewGroupMustNotBeEmpty() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("""")).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Name of the group users-XYZ""); groupConfig.commit(metaDataUpdate); } }",afea245ea23c0920fe7eb7eac0f90f7edf297f41,"@org.junit.Test public void nameOfNewGroupMustNotBeEmpty() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("""")).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Name of the account users-XYZ""); groupConfig.commit(metaDataUpdate); } }",f3412ae48b57d6db0f2d2be50749172b220866d7,"@org.junit.Test public void nameOfNewGroupMustNotBeEmpty() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("""")).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Name of the group users-XYZ""); groupConfig.commit(metaDataUpdate); } }",afea245ea23c0920fe7eb7eac0f90f7edf297f41,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupConfigTest.java,"private void populateGroupConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, java.lang.String fileContent) throws java.lang.Exception { testRepository.branch(com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid)).commit().message(""Prepopulate group.config"").add(GroupConfig.GROUP_CONFIG_FILE, fileContent).create(); }",2ac2edbec7487c64d73e8db9b9809f96081ce077,"private void populateGroupConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, java.lang.String fileContent) throws java.lang.Exception { testRepository.branch(com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid)).commit().message(""Prepopulate account.config"").add(GroupConfig.GROUP_CONFIG_FILE, fileContent).create(); }",260d85bd6c96483dd19e2243ef7cabf4eae23927,"private void populateGroupConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, java.lang.String fileContent) throws java.lang.Exception { testRepository.branch(com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid)).commit().message(""Prepopulate group.config"").add(GroupConfig.GROUP_CONFIG_FILE, fileContent).create(); }",2ac2edbec7487c64d73e8db9b9809f96081ce077,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_git_validators_CommitValidators.java,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { return java.util.Collections.emptyList(); } if (com.google.gerrit.reviewdb.client.RefNames.isGroupRef(receiveEvent.command.getRefName())) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""group update not allowed""); } return java.util.Collections.emptyList(); }",1e8b5969ab0228fcb87f89d11992273fe50bf1c0,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { return java.util.Collections.emptyList(); } if (com.google.gerrit.reviewdb.client.RefNames.isGroupRef(receiveEvent.command.getRefName())) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""account update not allowed""); } return java.util.Collections.emptyList(); }",29d0f34cdcc850268920b5245a0a8b64a8db491e,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { return java.util.Collections.emptyList(); } if (com.google.gerrit.reviewdb.client.RefNames.isGroupRef(receiveEvent.command.getRefName())) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""group update not allowed""); } return java.util.Collections.emptyList(); }",1e8b5969ab0228fcb87f89d11992273fe50bf1c0,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_PostReview.java,"private static com.google.gerrit.server.change.PostReview.CommentSetEntry create(java.lang.String filename, int patchSetId, java.lang.Integer line, com.google.gerrit.extensions.client.Side side, com.google.common.hash.HashCode message, com.google.gerrit.reviewdb.client.Comment.Range range) { return new com.google.gerrit.server.change.AutoValue_PostReview_CommentSetEntry(filename, patchSetId, line, side, message, range); }",17e0dd4d0780cefb8ffb65665ea3f906fdbf25ae,"private static com.google.gerrit.server.restapi.change.PostReview.CommentSetEntry create(java.lang.String filename, int patchSetId, java.lang.Integer line, com.google.gerrit.extensions.client.Side side, com.google.common.hash.HashCode message, com.google.gerrit.reviewdb.client.Comment.Range range) { return new com.google.gerrit.server.change.AutoValue_PostReview_CommentSetEntry(filename, patchSetId, line, side, message, range); }",f0dbedf26969144adabd0dbd7d4f11c45c643066,"private static com.google.gerrit.server.restapi.change.PostReview.CommentSetEntry create(java.lang.String filename, int patchSetId, java.lang.Integer line, com.google.gerrit.extensions.client.Side side, com.google.common.hash.HashCode message, com.google.gerrit.reviewdb.client.Comment.Range range) { return new com.google.gerrit.server.restapi.change.AutoValue_PostReview_CommentSetEntry(filename, patchSetId, line, side, message, range); }",19b66af3caf8ef36e93fb0d9719c218be00a6e02,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_audit_AuditService.java,"public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteAccountsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log delete accounts from group event"", e); } } }",4bc0f888e322318307600f56849cafa413f0fa27,"public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteAccountsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log delete accounts from account event"", e); } } }",a1f674dc29530be504ecd95cc16b0d413ef2c578,"public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteAccountsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log delete accounts from group event"", e); } } }",4bc0f888e322318307600f56849cafa413f0fa27,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_audit_AuditService.java,"public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteGroupsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log delete groups from group event"", e); } } }",c69e31d411013df57124f105ba30ff437d341391,"public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteGroupsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log delete groups from account event"", e); } } }",d6fcf1e6344eee730de9e0f09f3be9efa4587229,"public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteGroupsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log delete groups from group event"", e); } } }",c69e31d411013df57124f105ba30ff437d341391,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_audit_AuditService.java,"public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log add accounts to group event"", e); } } }",e9f537334969f9ec192603e0d1c2318204fbb8d0,"public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log add accounts to account event"", e); } } }",9cffbaf5fd22349b37b2a038fa1cc4345cab9b06,"public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log add accounts to group event"", e); } } }",e9f537334969f9ec192603e0d1c2318204fbb8d0,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_GetTopic.java,@java.lang.Override public java.lang.String apply(com.google.gerrit.server.change.ChangeResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.getChange().getTopic()); },0ea402a30bd620613cb9af6a355a2fe02924681e,@java.lang.Override public java.lang.String apply(com.google.gerrit.server.restapi.change.ChangeResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.getChange().getTopic()); },ca439c28a0ac3a6f13045ef6b8385f24b9eee06a,@java.lang.Override public java.lang.String apply(com.google.gerrit.server.change.ChangeResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.getChange().getTopic()); },0ea402a30bd620613cb9af6a355a2fe02924681e,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_git_ProjectConfig.java,"private void loadPluginSections(org.eclipse.jgit.lib.Config rc) { pluginConfigs = new java.util.HashMap(); for (java.lang.String plugin : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)) { org.eclipse.jgit.lib.Config pluginConfig = new org.eclipse.jgit.lib.Config(); pluginConfigs.put(plugin, pluginConfig); for (java.lang.String name : rc.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { java.lang.String value = rc.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); java.lang.String groupName = com.google.gerrit.common.data.GroupReference.extractGroupName(value); if (groupName != null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if (ref == null) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((""group \"""" + groupName) + ""\"" not in "") + (GroupList.FILE_NAME)))); } rc.setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, value); } pluginConfig.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }",1f41fa8120742a0e6f92b1045aad4938e3351910,"private void loadPluginSections(org.eclipse.jgit.lib.Config rc) { pluginConfigs = new java.util.HashMap(); for (java.lang.String plugin : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)) { org.eclipse.jgit.lib.Config pluginConfig = new org.eclipse.jgit.lib.Config(); pluginConfigs.put(plugin, pluginConfig); for (java.lang.String name : rc.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { java.lang.String value = rc.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); java.lang.String groupName = com.google.gerrit.common.data.GroupReference.extractGroupName(value); if (groupName != null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if (ref == null) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((""account \"""" + groupName) + ""\"" not in "") + (GroupList.FILE_NAME)))); } rc.setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, value); } pluginConfig.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }",63ea9b8caf40e4b4160d18ed151902a9026336e8,"private void loadPluginSections(org.eclipse.jgit.lib.Config rc) { pluginConfigs = new java.util.HashMap(); for (java.lang.String plugin : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)) { org.eclipse.jgit.lib.Config pluginConfig = new org.eclipse.jgit.lib.Config(); pluginConfigs.put(plugin, pluginConfig); for (java.lang.String name : rc.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { java.lang.String value = rc.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); java.lang.String groupName = com.google.gerrit.common.data.GroupReference.extractGroupName(value); if (groupName != null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if (ref == null) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((""group \"""" + groupName) + ""\"" not in "") + (GroupList.FILE_NAME)))); } rc.setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, value); } pluginConfig.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }",1f41fa8120742a0e6f92b1045aad4938e3351910,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_git_ProjectConfig.java,"private void loadPermissionRules(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String varName, java.util.Map<java.lang.String, com.google.gerrit.common.data.GroupReference> groupsByName, com.google.gerrit.common.data.Permission perm, boolean useRange) { for (java.lang.String ruleString : rc.getStringList(section, subsection, varName)) { com.google.gerrit.common.data.PermissionRule rule; try { rule = com.google.gerrit.common.data.PermissionRule.fromString(ruleString, useRange); } catch (java.lang.IllegalArgumentException notRule) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, ((((((""Invalid rule in "" + section) + (subsection != null ? ""."" + subsection : """")) + ""."") + varName) + "": "") + (notRule.getMessage())))); continue; } com.google.gerrit.common.data.GroupReference ref = groupsByName.get(rule.getGroup().getName()); if (ref == null) { ref = rule.getGroup(); groupsByName.put(ref.getName(), ref); error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((""group \"""" + (ref.getName())) + ""\"" not in "") + (GroupList.FILE_NAME)))); } rule.setGroup(ref); perm.add(rule); } }",3870c9b53bb8d5b7bccf7c7f50d2c2f494fbac76,"private void loadPermissionRules(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String varName, java.util.Map<java.lang.String, com.google.gerrit.common.data.GroupReference> groupsByName, com.google.gerrit.common.data.Permission perm, boolean useRange) { for (java.lang.String ruleString : rc.getStringList(section, subsection, varName)) { com.google.gerrit.common.data.PermissionRule rule; try { rule = com.google.gerrit.common.data.PermissionRule.fromString(ruleString, useRange); } catch (java.lang.IllegalArgumentException notRule) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, ((((((""Invalid rule in "" + section) + (subsection != null ? ""."" + subsection : """")) + ""."") + varName) + "": "") + (notRule.getMessage())))); continue; } com.google.gerrit.common.data.GroupReference ref = groupsByName.get(rule.getGroup().getName()); if (ref == null) { ref = rule.getGroup(); groupsByName.put(ref.getName(), ref); error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((""account \"""" + (ref.getName())) + ""\"" not in "") + (GroupList.FILE_NAME)))); } rule.setGroup(ref); perm.add(rule); } }",91644920b58d41f29d6a6adf5b1e447283654501,"private void loadPermissionRules(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String varName, java.util.Map<java.lang.String, com.google.gerrit.common.data.GroupReference> groupsByName, com.google.gerrit.common.data.Permission perm, boolean useRange) { for (java.lang.String ruleString : rc.getStringList(section, subsection, varName)) { com.google.gerrit.common.data.PermissionRule rule; try { rule = com.google.gerrit.common.data.PermissionRule.fromString(ruleString, useRange); } catch (java.lang.IllegalArgumentException notRule) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, ((((((""Invalid rule in "" + section) + (subsection != null ? ""."" + subsection : """")) + ""."") + varName) + "": "") + (notRule.getMessage())))); continue; } com.google.gerrit.common.data.GroupReference ref = groupsByName.get(rule.getGroup().getName()); if (ref == null) { ref = rule.getGroup(); groupsByName.put(ref.getName(), ref); error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((""group \"""" + (ref.getName())) + ""\"" not in "") + (GroupList.FILE_NAME)))); } rule.setGroup(ref); perm.add(rule); } }",3870c9b53bb8d5b7bccf7c7f50d2c2f494fbac76,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_git_ProjectConfig.java,"private void savePluginSections(org.eclipse.jgit.lib.Config rc, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> keepGroups) { java.util.List<java.lang.String> existing = com.google.common.collect.Lists.newArrayList(rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)); for (java.lang.String name : existing) { rc.unsetSection(com.google.gerrit.server.git.ProjectConfig.PLUGIN, name); } for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Config> e : pluginConfigs.entrySet()) { java.lang.String plugin = e.getKey(); org.eclipse.jgit.lib.Config pluginConfig = e.getValue(); for (java.lang.String name : pluginConfig.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { java.lang.String value = pluginConfig.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); java.lang.String groupName = com.google.gerrit.common.data.GroupReference.extractGroupName(value); if (groupName != null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if ((ref != null) && ((ref.getUUID()) != null)) { keepGroups.add(ref.getUUID()); pluginConfig.setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, (""group "" + (ref.getName()))); } } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(pluginConfig.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }",cc563f0e6ecfe9f1f729153c6d593e150fd2925b,"private void savePluginSections(org.eclipse.jgit.lib.Config rc, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> keepGroups) { java.util.List<java.lang.String> existing = com.google.common.collect.Lists.newArrayList(rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)); for (java.lang.String name : existing) { rc.unsetSection(com.google.gerrit.server.git.ProjectConfig.PLUGIN, name); } for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Config> e : pluginConfigs.entrySet()) { java.lang.String plugin = e.getKey(); org.eclipse.jgit.lib.Config pluginConfig = e.getValue(); for (java.lang.String name : pluginConfig.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { java.lang.String value = pluginConfig.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); java.lang.String groupName = com.google.gerrit.common.data.GroupReference.extractGroupName(value); if (groupName != null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if ((ref != null) && ((ref.getUUID()) != null)) { keepGroups.add(ref.getUUID()); pluginConfig.setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, (""account "" + (ref.getName()))); } } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(pluginConfig.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }",2488d0b509e6b8794228a8106dac9fa34e2b72cd,"private void savePluginSections(org.eclipse.jgit.lib.Config rc, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> keepGroups) { java.util.List<java.lang.String> existing = com.google.common.collect.Lists.newArrayList(rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)); for (java.lang.String name : existing) { rc.unsetSection(com.google.gerrit.server.git.ProjectConfig.PLUGIN, name); } for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Config> e : pluginConfigs.entrySet()) { java.lang.String plugin = e.getKey(); org.eclipse.jgit.lib.Config pluginConfig = e.getValue(); for (java.lang.String name : pluginConfig.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { java.lang.String value = pluginConfig.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); java.lang.String groupName = com.google.gerrit.common.data.GroupReference.extractGroupName(value); if (groupName != null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if ((ref != null) && ((ref.getUUID()) != null)) { keepGroups.add(ref.getUUID()); pluginConfig.setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, (""group "" + (ref.getName()))); } } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(pluginConfig.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }",cc563f0e6ecfe9f1f729153c6d593e150fd2925b,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_DeleteMembers.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.MemberResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.AddMembers.Input in = new com.google.gerrit.server.group.AddMembers.Input(); in._oneMember = resource.getMember().getAccountId().toString(); return delete.get().apply(resource, in); }",60ddd2ed116fd0a6c3c6e32082ad9b58278d4f15,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.group.MemberResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddMembers.Input in = new com.google.gerrit.server.restapi.group.AddMembers.Input(); in._oneMember = resource.getMember().getAccountId().toString(); return delete.get().apply(resource, in); }",f86f0ad2ed4ea32a8180c18c7aaa7bc6f485367d,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.MemberResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddMembers.Input in = new com.google.gerrit.server.restapi.group.AddMembers.Input(); in._oneMember = resource.getMember().getAccountId().toString(); return delete.get().apply(resource, in); }",3cc1fa06cdb7b572f8fb81175c811a3f2ae61a66,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_SystemGroupBackend.java,"public com.google.gerrit.common.data.GroupReference getGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return checkNotNull(uuids.get(uuid), ""group %s not found"", uuid.get()); }",15f07c961667a9dbae976073c847d4b27c233622,"public com.google.gerrit.common.data.GroupReference getGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return checkNotNull(uuids.get(uuid), ""account %s not found"", uuid.get()); }",2bce5bc1c5bf45f994f1203b4bc53c6645531f71,"public com.google.gerrit.common.data.GroupReference getGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return checkNotNull(uuids.get(uuid), ""group %s not found"", uuid.get()); }",15f07c961667a9dbae976073c847d4b27c233622,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_git_GroupList.java,"public static com.google.gerrit.server.git.GroupList parse(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String text, com.google.gerrit.server.git.ValidationError.Sink errors) throws java.io.IOException { java.util.List<com.google.gerrit.server.git.Row> rows = com.google.gerrit.server.git.GroupList.parse(text, com.google.gerrit.server.git.GroupList.FILE_NAME, com.google.gerrit.server.git.TRIM, com.google.gerrit.server.git.TRIM, errors); java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.common.data.GroupReference> groupsByUUID = new java.util.HashMap(rows.size()); for (com.google.gerrit.server.git.Row row : rows) { if ((row.left) == null) { com.google.gerrit.server.git.GroupList.log.warn(""null field in group list for {}:\n{}"", project, text); continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(row.left); java.lang.String name = row.right; com.google.gerrit.common.data.GroupReference ref = new com.google.gerrit.common.data.GroupReference(uuid, name); groupsByUUID.put(uuid, ref); } return new com.google.gerrit.server.git.GroupList(groupsByUUID); }",5b1a87dcbf626e98d87878650c099495e8f8f79b,"public static com.google.gerrit.server.git.GroupList parse(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String text, com.google.gerrit.server.git.ValidationError.Sink errors) throws java.io.IOException { java.util.List<com.google.gerrit.server.git.Row> rows = com.google.gerrit.server.git.GroupList.parse(text, com.google.gerrit.server.git.GroupList.FILE_NAME, com.google.gerrit.server.git.TRIM, com.google.gerrit.server.git.TRIM, errors); java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.common.data.GroupReference> groupsByUUID = new java.util.HashMap(rows.size()); for (com.google.gerrit.server.git.Row row : rows) { if ((row.left) == null) { com.google.gerrit.server.git.GroupList.log.warn(""null field in account list for {}:\n{}"", project, text); continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(row.left); java.lang.String name = row.right; com.google.gerrit.common.data.GroupReference ref = new com.google.gerrit.common.data.GroupReference(uuid, name); groupsByUUID.put(uuid, ref); } return new com.google.gerrit.server.git.GroupList(groupsByUUID); }",fe1da003e7fff74037fb3277b13032367222e863,"public static com.google.gerrit.server.git.GroupList parse(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String text, com.google.gerrit.server.git.ValidationError.Sink errors) throws java.io.IOException { java.util.List<com.google.gerrit.server.git.Row> rows = com.google.gerrit.server.git.GroupList.parse(text, com.google.gerrit.server.git.GroupList.FILE_NAME, com.google.gerrit.server.git.TRIM, com.google.gerrit.server.git.TRIM, errors); java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.common.data.GroupReference> groupsByUUID = new java.util.HashMap(rows.size()); for (com.google.gerrit.server.git.Row row : rows) { if ((row.left) == null) { com.google.gerrit.server.git.GroupList.log.warn(""null field in group list for {}:\n{}"", project, text); continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(row.left); java.lang.String name = row.right; com.google.gerrit.common.data.GroupReference ref = new com.google.gerrit.common.data.GroupReference(uuid, name); groupsByUUID.put(uuid, ref); } return new com.google.gerrit.server.git.GroupList(groupsByUUID); }",5b1a87dcbf626e98d87878650c099495e8f8f79b,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_SystemGroupBackend.java,"private static java.lang.String getAmbiguousNameMessage(java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.reviewdb.client.AccountGroup.UUID systemGroupUuid) { return java.lang.String.format((""The configured name '%s' for system group '%s' is ambiguous"" + (("" with the name '%s' of existing group '%s'."" + "" Please remove/change the value for groups.%s.name in"") + "" gerrit.config."")), groupName, systemGroupUuid.get(), groupName, groupUuid.get(), systemGroupUuid.get()); }",59c7ca46ced6af2ca84c3a3ba5b0128b587d4a38,"private static java.lang.String getAmbiguousNameMessage(java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.reviewdb.client.AccountGroup.UUID systemGroupUuid) { return java.lang.String.format((""The configured name '%s' for system account '%s' is ambiguous"" + (("" with the name '%s' of existing account '%s'."" + "" Please remove/change the value for groups.%s.name in"") + "" gerrit.config."")), groupName, systemGroupUuid.get(), groupName, groupUuid.get(), systemGroupUuid.get()); }",38a116dcdc69f3466a40d5a7e8f6d3fb9d2fe1f7,"private static java.lang.String getAmbiguousNameMessage(java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.reviewdb.client.AccountGroup.UUID systemGroupUuid) { return java.lang.String.format((""The configured name '%s' for system group '%s' is ambiguous"" + (("" with the name '%s' of existing group '%s'."" + "" Please remove/change the value for groups.%s.name in"") + "" gerrit.config."")), groupName, systemGroupUuid.get(), groupName, groupUuid.get(), systemGroupUuid.get()); }",59c7ca46ced6af2ca84c3a3ba5b0128b587d4a38,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_GetDescription.java,@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); return com.google.common.base.Strings.nullToEmpty(group.getDescription()); },884135cadd3e7db49a17fca7a47c3bf8b8882bd9,@java.lang.Override public java.lang.String apply(com.google.gerrit.server.restapi.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); return com.google.common.base.Strings.nullToEmpty(group.getDescription()); },e16086418cec28676c32da6832b30696244b0878,@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); return com.google.common.base.Strings.nullToEmpty(group.getDescription()); },884135cadd3e7db49a17fca7a47c3bf8b8882bd9,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_Reviewed.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.change.FileResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gwtorm.server.OrmException { if (accountPatchReviewStore.get().markReviewed(resource.getPatchKey().getParentKey(), resource.getAccountId(), resource.getPatchKey().getFileName())) { return com.google.gerrit.extensions.restapi.Response.created(""""); } return com.google.gerrit.extensions.restapi.Response.ok(""""); }",64a8c48a2e9a1fe7013c7737f21105a64ade392c,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.restapi.change.FileResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gwtorm.server.OrmException { if (accountPatchReviewStore.get().markReviewed(resource.getPatchKey().getParentKey(), resource.getAccountId(), resource.getPatchKey().getFileName())) { return com.google.gerrit.extensions.restapi.Response.created(""""); } return com.google.gerrit.extensions.restapi.Response.ok(""""); }",bb814e439ef87483022c91e09b32be89d6105553,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.change.FileResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gwtorm.server.OrmException { if (accountPatchReviewStore.get().markReviewed(resource.getPatchKey().getParentKey(), resource.getAccountId(), resource.getPatchKey().getFileName())) { return com.google.gerrit.extensions.restapi.Response.created(""""); } return com.google.gerrit.extensions.restapi.Response.ok(""""); }",64a8c48a2e9a1fe7013c7737f21105a64ade392c,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_Reviewed.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.FileResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gwtorm.server.OrmException { accountPatchReviewStore.get().clearReviewed(resource.getPatchKey().getParentKey(), resource.getAccountId(), resource.getPatchKey().getFileName()); return com.google.gerrit.extensions.restapi.Response.none(); }",f8425f7ac3eb977b4a1857e88edbfbd9da538cfe,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.change.FileResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gwtorm.server.OrmException { accountPatchReviewStore.get().clearReviewed(resource.getPatchKey().getParentKey(), resource.getAccountId(), resource.getPatchKey().getFileName()); return com.google.gerrit.extensions.restapi.Response.none(); }",aa47fb8db3def8c8373a70d5e6291c389a0c3d89,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.FileResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gwtorm.server.OrmException { accountPatchReviewStore.get().clearReviewed(resource.getPatchKey().getParentKey(), resource.getAccountId(), resource.getPatchKey().getFileName()); return com.google.gerrit.extensions.restapi.Response.none(); }",f8425f7ac3eb977b4a1857e88edbfbd9da538cfe,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_Index.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, java.io.IOException { if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to index group""); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = rsrc.getGroup().getGroupUUID(); if (!(rsrc.isInternalGroup())) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""External Group Not Allowed: %s"", groupUuid.get())); } java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(groupUuid); if (group.isPresent()) { groupCache.evict(group.get().getGroupUUID(), group.get().getId(), group.get().getNameKey()); } return com.google.gerrit.extensions.restapi.Response.none(); }",5d9920c7877d60b3bc93230a033dc0d85f403f67,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.group.GroupResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, java.io.IOException { if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to index account""); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = rsrc.getGroup().getGroupUUID(); if (!(rsrc.isInternalGroup())) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""External Group Not Allowed: %s"", groupUuid.get())); } java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(groupUuid); if (group.isPresent()) { groupCache.evict(group.get().getGroupUUID(), group.get().getId(), group.get().getNameKey()); } return com.google.gerrit.extensions.restapi.Response.none(); }",2844a4e5447a1722de33aaecb356ce8d35b9ceef,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, java.io.IOException { if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to index group""); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = rsrc.getGroup().getGroupUUID(); if (!(rsrc.isInternalGroup())) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""External Group Not Allowed: %s"", groupUuid.get())); } java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(groupUuid); if (group.isPresent()) { groupCache.evict(group.get().getGroupUUID(), group.get().getId(), group.get().getNameKey()); } return com.google.gerrit.extensions.restapi.Response.none(); }",5d9920c7877d60b3bc93230a033dc0d85f403f67,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_acceptance_api_group_GroupAssert.java,"public static void assertGroups(java.lang.Iterable<java.lang.String> expected, java.util.Set<java.lang.String> actual) { for (java.lang.String g : expected) { assertWithMessage((""missing group "" + g)).that(actual.remove(g)).isTrue(); } assertWithMessage((""unexpected groups: "" + actual)).that(actual).isEmpty(); }",2b5a04a574f43f8bb1b02dbfea5a7bb4f6b967e7,"public static void assertGroups(java.lang.Iterable<java.lang.String> expected, java.util.Set<java.lang.String> actual) { for (java.lang.String g : expected) { assertWithMessage((""missing account "" + g)).that(actual.remove(g)).isTrue(); } assertWithMessage((""unexpected groups: "" + actual)).that(actual).isEmpty(); }",50a8b451f3300f45370d529d734faab3fc30eef8,"public static void assertGroups(java.lang.Iterable<java.lang.String> expected, java.util.Set<java.lang.String> actual) { for (java.lang.String g : expected) { assertWithMessage((""missing group "" + g)).that(actual.remove(g)).isTrue(); } assertWithMessage((""unexpected groups: "" + actual)).that(actual).isEmpty(); }",2b5a04a574f43f8bb1b02dbfea5a7bb4f6b967e7,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_GetAccess.java,"public com.google.gerrit.extensions.api.access.ProjectAccessInfo apply(com.google.gerrit.reviewdb.client.Project.NameKey nameKey) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(nameKey.get()); } return apply(new com.google.gerrit.server.project.ProjectResource(state, user.get())); }",1c994d49b756b4175916701992b9ac092b2e4e0b,"public com.google.gerrit.extensions.api.access.ProjectAccessInfo apply(com.google.gerrit.reviewdb.client.Project.NameKey nameKey) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(nameKey.get()); } return apply(new com.google.gerrit.server.restapi.project.ProjectResource(state, user.get())); }",51334b1cfe386f9ab6cee1e6caba8f020b9bf8d7,"public com.google.gerrit.extensions.api.access.ProjectAccessInfo apply(com.google.gerrit.reviewdb.client.Project.NameKey nameKey) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(nameKey.get()); } return apply(new com.google.gerrit.server.project.ProjectResource(state, user.get())); }",1c994d49b756b4175916701992b9ac092b2e4e0b,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_GetAccess.java,"private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo group = visibleGroups.get(id); if (group == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); group = com.google.gerrit.server.project.GetAccess.INVISIBLE_SENTINEL; if (control.isVisible()) { group = groupJson.format(control.getGroup()); group.id = null; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.project.GetAccess.LOG.warn((""NoSuchGroupException; ignoring group "" + id), e); group = com.google.gerrit.server.project.GetAccess.INVISIBLE_SENTINEL; } visibleGroups.put(id, group); } return group; }",00dd0d2db4db6e818f088ef87fac92213bd0b973,"private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo group = visibleGroups.get(id); if (group == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); group = com.google.gerrit.server.restapi.project.GetAccess.INVISIBLE_SENTINEL; if (control.isVisible()) { group = groupJson.format(control.getGroup()); group.id = null; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.restapi.project.GetAccess.LOG.warn((""NoSuchGroupException; ignoring account "" + id), e); group = com.google.gerrit.server.restapi.project.GetAccess.INVISIBLE_SENTINEL; } visibleGroups.put(id, group); } return group; }",8f525b6e98fff71c9f59d6a761dd9a08481456a2,"private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo group = visibleGroups.get(id); if (group == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); group = com.google.gerrit.server.restapi.project.GetAccess.INVISIBLE_SENTINEL; if (control.isVisible()) { group = groupJson.format(control.getGroup()); group.id = null; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.restapi.project.GetAccess.LOG.warn((""NoSuchGroupException; ignoring group "" + id), e); group = com.google.gerrit.server.restapi.project.GetAccess.INVISIBLE_SENTINEL; } visibleGroups.put(id, group); } return group; }",57cc77fcdcb205a5c8fab06724ce4ad771507571,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_ListDashboards.java,"private java.util.Collection<com.google.gerrit.server.project.ProjectState> tree(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.project.ProjectState> tree = new java.util.LinkedHashMap<>(); for (com.google.gerrit.server.project.ProjectState ps : rsrc.getProjectState().tree()) { tree.put(ps.getNameKey(), ps); } tree.keySet().retainAll(permissionBackend.user(user).filter(ProjectPermission.ACCESS, tree.keySet())); return tree.values(); }",8769cd3f539749e16cfdd9ddd50a45294267d598,"private java.util.Collection<com.google.gerrit.server.project.ProjectState> tree(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.project.ProjectState> tree = new java.util.LinkedHashMap<>(); for (com.google.gerrit.server.project.ProjectState ps : rsrc.getProjectState().tree()) { tree.put(ps.getNameKey(), ps); } tree.keySet().retainAll(permissionBackend.user(user).filter(ProjectPermission.ACCESS, tree.keySet())); return tree.values(); }",37164576d629850957c8cf754abddb5a8551bdd8,"private java.util.Collection<com.google.gerrit.server.project.ProjectState> tree(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.project.ProjectState> tree = new java.util.LinkedHashMap<>(); for (com.google.gerrit.server.project.ProjectState ps : rsrc.getProjectState().tree()) { tree.put(ps.getNameKey(), ps); } tree.keySet().retainAll(permissionBackend.user(user).filter(ProjectPermission.ACCESS, tree.keySet())); return tree.values(); }",8769cd3f539749e16cfdd9ddd50a45294267d598,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_ListDashboards.java,"@java.lang.Override public java.util.List<?> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { java.lang.String project = rsrc.getName(); if (!(inherited)) { return scan(rsrc.getProjectState(), project, true); } java.util.List<java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo>> all = new java.util.ArrayList<>(); boolean setDefault = true; for (com.google.gerrit.server.project.ProjectState ps : tree(rsrc)) { java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo> list = scan(ps, project, setDefault); for (com.google.gerrit.extensions.api.projects.DashboardInfo d : list) { if (((d.isDefault) != null) && (java.lang.Boolean.TRUE.equals(d.isDefault))) { setDefault = false; } } if (!(list.isEmpty())) { all.add(list); } } return all; }",2b76b5a4ca4b76c8203b80221587071c2943aed9,"@java.lang.Override public java.util.List<?> apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { java.lang.String project = rsrc.getName(); if (!(inherited)) { return scan(rsrc.getProjectState(), project, true); } java.util.List<java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo>> all = new java.util.ArrayList<>(); boolean setDefault = true; for (com.google.gerrit.server.project.ProjectState ps : tree(rsrc)) { java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo> list = scan(ps, project, setDefault); for (com.google.gerrit.extensions.api.projects.DashboardInfo d : list) { if (((d.isDefault) != null) && (java.lang.Boolean.TRUE.equals(d.isDefault))) { setDefault = false; } } if (!(list.isEmpty())) { all.add(list); } } return all; }",c584544b9c662ee0da554b01e20cdcfcaa8157c5,"@java.lang.Override public java.util.List<?> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { java.lang.String project = rsrc.getName(); if (!(inherited)) { return scan(rsrc.getProjectState(), project, true); } java.util.List<java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo>> all = new java.util.ArrayList<>(); boolean setDefault = true; for (com.google.gerrit.server.project.ProjectState ps : tree(rsrc)) { java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo> list = scan(ps, project, setDefault); for (com.google.gerrit.extensions.api.projects.DashboardInfo d : list) { if (((d.isDefault) != null) && (java.lang.Boolean.TRUE.equals(d.isDefault))) { setDefault = false; } } if (!(list.isEmpty())) { all.add(list); } } return all; }",2b76b5a4ca4b76c8203b80221587071c2943aed9,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_PutOwner.java,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.api.groups.OwnerInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Not group owner""); } if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.owner))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""owner is required""); } com.google.gerrit.common.data.GroupDescription.Basic owner = groupsCollection.parse(input.owner); if (!(internalGroup.getOwnerGroupUUID().equals(owner.getGroupUUID()))) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(owner.getGroupUUID()).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format(""Group %s not found"", groupUuid)); } } return json.format(owner); }",1774155da350f283aeabe701a5ec5e3dc4b0f0d3,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.extensions.api.groups.OwnerInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Not account owner""); } if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.owner))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""owner is required""); } com.google.gerrit.common.data.GroupDescription.Basic owner = groupsCollection.parse(input.owner); if (!(internalGroup.getOwnerGroupUUID().equals(owner.getGroupUUID()))) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(owner.getGroupUUID()).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format(""Group %s not found"", groupUuid)); } } return json.format(owner); }",29fd0ae82661d1ff32d6108ecf1c83572f2fa9d9,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.extensions.api.groups.OwnerInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Not group owner""); } if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.owner))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""owner is required""); } com.google.gerrit.common.data.GroupDescription.Basic owner = groupsCollection.parse(input.owner); if (!(internalGroup.getOwnerGroupUUID().equals(owner.getGroupUUID()))) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(owner.getGroupUUID()).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format(""Group %s not found"", groupUuid)); } } return json.format(owner); }",1774155da350f283aeabe701a5ec5e3dc4b0f0d3,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupConfigTest.java,"@org.junit.Test public void ownerUuidOfNewGroupMustNotBeEmpty() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("""")).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Owner UUID of the group users-XYZ""); groupConfig.commit(metaDataUpdate); } }",fd7761cc681e0e611f3fb0cc4040034644414edd,"@org.junit.Test public void ownerUuidOfNewGroupMustNotBeEmpty() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("""")).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Owner UUID of the account users-XYZ""); groupConfig.commit(metaDataUpdate); } }",429094627cb23672c110116a8ed5fff2573ba86a,"@org.junit.Test public void ownerUuidOfNewGroupMustNotBeEmpty() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("""")).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Owner UUID of the group users-XYZ""); groupConfig.commit(metaDataUpdate); } }",fd7761cc681e0e611f3fb0cc4040034644414edd,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_CreateGroupPermissionSyncer.java,"@java.lang.Override public void onChangeMerged(com.google.gerrit.server.Event event) { if ((!(allProjects.get().equals(event.getChange().project))) || (!(RefNames.REFS_CONFIG.equals(event.getChange().branch)))) { return; } try { syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.CreateGroupPermissionSyncer.log.error(""Can't sync create group permissions"", e); } }",80e47218e70e2ee975d32edcbd4877e520d17ff6,"@java.lang.Override public void onChangeMerged(com.google.gerrit.server.Event event) { if ((!(allProjects.get().equals(event.getChange().project))) || (!(RefNames.REFS_CONFIG.equals(event.getChange().branch)))) { return; } try { syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.CreateGroupPermissionSyncer.log.error(""Can't sync create account permissions"", e); } }",0c6e91749dcc24978915cc00d78643d6dc9ab920,"@java.lang.Override public void onChangeMerged(com.google.gerrit.server.Event event) { if ((!(allProjects.get().equals(event.getChange().project))) || (!(RefNames.REFS_CONFIG.equals(event.getChange().branch)))) { return; } try { syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.CreateGroupPermissionSyncer.log.error(""Can't sync create group permissions"", e); } }",80e47218e70e2ee975d32edcbd4877e520d17ff6,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupConfigTest.java,"@org.junit.Test public void nameInConfigMayBeEmpty() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[group]\n\tname=\n\tid = 42\n\townerGroupUuid = owners\n""); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); assertThat(groupConfig.getLoadedGroup().get().getName()).isEmpty(); }",bf11288598b1b392b3728b34391afc7fae25e3bb,"@org.junit.Test public void nameInConfigMayBeEmpty() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[account]\n\tname=\n\tid = 42\n\townerGroupUuid = owners\n""); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); assertThat(groupConfig.getLoadedGroup().get().getName()).isEmpty(); }",3e534466b30427e063988fae4d37adcd87dd0acc,"@org.junit.Test public void nameInConfigMayBeEmpty() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[group]\n\tname=\n\tid = 42\n\townerGroupUuid = owners\n""); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); assertThat(groupConfig.getLoadedGroup().get().getName()).isEmpty(); }",bf11288598b1b392b3728b34391afc7fae25e3bb,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_query_change_ParentProjectPredicate.java,"protected static java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.inject.Provider<com.google.gerrit.server.project.ListChildProjects> listChildProjects, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self, java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(value)); if (projectState == null) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = new java.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.project.ProjectResource proj = new com.google.gerrit.server.project.ProjectResource(projectState, self.get()); com.google.gerrit.server.project.ListChildProjects children = listChildProjects.get(); children.setRecursive(true); for (com.google.gerrit.extensions.common.ProjectInfo p : children.apply(proj)) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn(""cannot check permissions to expand child projects"", e); } return r; }",63b2245a142f6091d301a358373a6ff7241946b6,"protected static java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.inject.Provider<com.google.gerrit.server.restapi.project.ListChildProjects> listChildProjects, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self, java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(value)); if (projectState == null) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = new java.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.restapi.project.ProjectResource proj = new com.google.gerrit.server.restapi.project.ProjectResource(projectState, self.get()); com.google.gerrit.server.restapi.project.ListChildProjects children = listChildProjects.get(); children.setRecursive(true); for (com.google.gerrit.extensions.common.ProjectInfo p : children.apply(proj)) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn(""cannot check permissions to expand child projects"", e); } return r; }",2de554284677558a04204f9c1db80b8b5a2caa3f,"protected static java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.gerrit.server.project.ChildProjects childProjects, java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(value)); if (projectState == null) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = new java.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { for (com.google.gerrit.extensions.common.ProjectInfo p : childProjects.list(projectState.getNameKey())) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn(""cannot check permissions to expand child projects"", e); } return r; }",8fe79b94db76531827f17b257d32cf068afc0d76,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_GroupJson.java,"public com.google.gerrit.extensions.common.GroupInfo format(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return createGroupInfo(rsrc.getGroup(), rsrc::getControl); }",984091a7e8aec2400311a9443c9c299813678d57,"public com.google.gerrit.extensions.common.GroupInfo format(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return createGroupInfo(rsrc.getGroup(), rsrc::getControl); }",6c6d7918dba18a4603fc90c02b10309f9402785d,"public com.google.gerrit.extensions.common.GroupInfo format(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return createGroupInfo(rsrc.getGroup(), rsrc::getControl); }",984091a7e8aec2400311a9443c9c299813678d57,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_ListMembers.java,"private static void checkSameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) { checkState(group.equals(groupControl.getGroup()), ""Specified group and groupControl do not match""); }",48d6d6c6c886127c52d6254c6cc304b5f9fb13b4,"private static void checkSameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) { checkState(group.equals(groupControl.getGroup()), ""Specified account and groupControl do not match""); }",b66ae4f17eadf8499c7567877520e572f92db43b,"private static void checkSameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) { checkState(group.equals(groupControl.getGroup()), ""Specified group and groupControl do not match""); }",48d6d6c6c886127c52d6254c6cc304b5f9fb13b4,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_api_changes_RevisionApiImpl.java,"@java.lang.Override public void setReviewed(java.lang.String path, boolean reviewed) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.change.FileResource, com.google.gerrit.extensions.common.Input> view; if (reviewed) { view = putReviewed; } else { view = deleteReviewed; } view.apply(files.parse(revision, com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)), new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot update reviewed flag"", e); } }",889dd6124b81b9e3cf5b549f58a884e09b30c791,"@java.lang.Override public void setReviewed(java.lang.String path, boolean reviewed) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.restapi.change.FileResource, com.google.gerrit.extensions.common.Input> view; if (reviewed) { view = putReviewed; } else { view = deleteReviewed; } view.apply(files.parse(revision, com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)), new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot update reviewed flag"", e); } }",fdc117089ccfbd8c824f4fdc8f7c137d82971a9e,"@java.lang.Override public void setReviewed(java.lang.String path, boolean reviewed) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.change.FileResource, com.google.gerrit.extensions.common.Input> view; if (reviewed) { view = putReviewed; } else { view = deleteReviewed; } view.apply(files.parse(revision, com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)), new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot update reviewed flag"", e); } }",889dd6124b81b9e3cf5b549f58a884e09b30c791,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_CommitsCollection.java,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.CommitResource>> views() { return views; },c9859fef1f20e0929ba36dd6de558840a86f7a31,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.CommitResource>> views() { return views; },2941683fa60f3d901c4b2640e40f3f2e7b74bf94,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.CommitResource>> views() { return views; },c9859fef1f20e0929ba36dd6de558840a86f7a31,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_CommitsCollection.java,"@java.lang.Override public com.google.gerrit.server.project.CommitResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { org.eclipse.jgit.lib.ObjectId objectId; try { objectId = org.eclipse.jgit.lib.ObjectId.fromString(id.get()); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(parent.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(objectId); rw.parseBody(commit); if (!(canRead(parent.getProjectState(), repo, commit))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (int i = 0; i < (commit.getParentCount()); i++) { rw.parseBody(rw.parseCommit(commit.getParent(i))); } return new com.google.gerrit.server.project.CommitResource(parent, commit); } catch (org.eclipse.jgit.errors.MissingObjectException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }",1b9d6104d66f985cbc8bf59be38ed27b0fa69a61,"@java.lang.Override public com.google.gerrit.server.restapi.project.CommitResource parse(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { org.eclipse.jgit.lib.ObjectId objectId; try { objectId = org.eclipse.jgit.lib.ObjectId.fromString(id.get()); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(parent.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(objectId); rw.parseBody(commit); if (!(canRead(parent.getProjectState(), repo, commit))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (int i = 0; i < (commit.getParentCount()); i++) { rw.parseBody(rw.parseCommit(commit.getParent(i))); } return new com.google.gerrit.server.restapi.project.CommitResource(parent, commit); } catch (org.eclipse.jgit.errors.MissingObjectException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }",232f47124a5d60a497218a6dee227d38b2d36c16,"@java.lang.Override public com.google.gerrit.server.project.CommitResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { org.eclipse.jgit.lib.ObjectId objectId; try { objectId = org.eclipse.jgit.lib.ObjectId.fromString(id.get()); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(parent.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(objectId); rw.parseBody(commit); if (!(canRead(parent.getProjectState(), repo, commit))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (int i = 0; i < (commit.getParentCount()); i++) { rw.parseBody(rw.parseCommit(commit.getParent(i))); } return new com.google.gerrit.server.project.CommitResource(parent, commit); } catch (org.eclipse.jgit.errors.MissingObjectException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }",1b9d6104d66f985cbc8bf59be38ed27b0fa69a61,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_CommitsCollection.java,"public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try { java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.CommitsCollection.log.error((((""Cannot look up change for commit "" + (commit.name())) + "" in "") + project), e); } return isReachableFrom(state, repo, commit, repo.getAllRefs()); }",7fe2fc83dea587d2bc6311b98747bdf7687011d6,"public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try { java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.restapi.project.CommitsCollection.log.error((((""Cannot look up change for commit "" + (commit.name())) + "" in "") + project), e); } return isReachableFrom(state, repo, commit, repo.getAllRefs()); }",2055da0c96b3094de80a26ab07d743ea5b1415a5,"public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try { java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.restapi.project.CommitsCollection.log.error((((""Cannot look up change for commit "" + (commit.name())) + "" in "") + project), e); } return reachable.fromRefs(state, repo, commit, repo.getAllRefs()); }",9f42d3379083b5f46917a33c987869d081f0d34e,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_CommitsCollection.java,@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); },7464bda06e48c1a98c8885dbe106f869a76b791d,@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.ProjectResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); },741b256d8805066a68bb65a1cb9fe8df4de3195f,@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); },7464bda06e48c1a98c8885dbe106f869a76b791d,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_BranchesCollection.java,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.BranchResource>> views() { return views; },7ecd632678c1e2eeee94ac0bcd35921f36010547,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.BranchResource>> views() { return views; },d9ab6827c3315803805feb98d1fd2a6141b03197,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.BranchResource>> views() { return views; },7ecd632678c1e2eeee94ac0bcd35921f36010547,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_DraftComments.java,"@java.lang.Override public com.google.gerrit.server.change.DraftCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { checkIdentifiedUser(); java.lang.String uuid = id.get(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.draftByPatchSetAuthor(dbProvider.get(), rev.getPatchSet().getId(), rev.getAccountId(), rev.getNotes())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.change.DraftCommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",f50fb4f8534250aad6e4fde7bb708db0ed2a5246,"@java.lang.Override public com.google.gerrit.server.restapi.change.DraftCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { checkIdentifiedUser(); java.lang.String uuid = id.get(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.draftByPatchSetAuthor(dbProvider.get(), rev.getPatchSet().getId(), rev.getAccountId(), rev.getNotes())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.restapi.change.DraftCommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",d29cf97bbb7f5070c3de06994d4a3aee7df5bc99,"@java.lang.Override public com.google.gerrit.server.change.DraftCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { checkIdentifiedUser(); java.lang.String uuid = id.get(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.draftByPatchSetAuthor(dbProvider.get(), rev.getPatchSet().getId(), rev.getAccountId(), rev.getNotes())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.change.DraftCommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",f50fb4f8534250aad6e4fde7bb708db0ed2a5246,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_BranchesCollection.java,@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> list() { return list.get(); },4ab6f9326c26d53b14442fb02687e43709016e38,@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.ProjectResource> list() { return list.get(); },4b90d42da30773777d29e46e9737c560296d39e1,@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> list() { return list.get(); },4ab6f9326c26d53b14442fb02687e43709016e38,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_BranchesCollection.java,"@java.lang.Override public com.google.gerrit.server.project.CreateBranch create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString name) { return createBranchFactory.create(name.get()); }",5e20bdf71e809523330e721720b6f70b0de1d4b5,"@java.lang.Override public com.google.gerrit.server.restapi.project.CreateBranch create(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString name) { return createBranchFactory.create(name.get()); }",085dd65cde2c1310fe729e4393923adda03e54f9,"@java.lang.Override public com.google.gerrit.server.restapi.project.CreateBranch create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString name) { return createBranchFactory.create(name.get()); }",cdb6b694b30125176e2c637e4923dbd393a1b4f6,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_ProjectsCollection.java,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource>> views() { return views; },409326902094c0952fa5781fa1209755ff255178,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.ProjectResource>> views() { return views; },3a707984316e708470c5b7787a9a8617812d09c4,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource>> views() { return views; },409326902094c0952fa5781fa1209755ff255178,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_ProjectsCollection.java,"@com.google.gerrit.common.Nullable private com.google.gerrit.server.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { try { permissionBackend.user(user).project(nameKey).check(ProjectPermission.ACCESS); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } } return new com.google.gerrit.server.project.ProjectResource(state, user.get()); }",358ba27c5cc8fb4938a84730214879632334a62e,"@com.google.gerrit.common.Nullable private com.google.gerrit.server.restapi.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { try { permissionBackend.user(user).project(nameKey).check(ProjectPermission.ACCESS); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } } return new com.google.gerrit.server.restapi.project.ProjectResource(state, user.get()); }",5bc5c3aa1df1f0f5bce57a16574b59bca28cb539,"@com.google.gerrit.common.Nullable private com.google.gerrit.server.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { try { permissionBackend.user(user).project(nameKey).check(ProjectPermission.ACCESS); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } } return new com.google.gerrit.server.project.ProjectResource(state, user.get()); }",358ba27c5cc8fb4938a84730214879632334a62e,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_ProjectsCollection.java,"public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""Project Not Found: %s"", id)); } return rsrc; }",7b4f7848a64082c8e493adbc7c1ce6827459cfb0,"public com.google.gerrit.server.restapi.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.restapi.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""Project Not Found: %s"", id)); } return rsrc; }",1d1f514f8bb85673eba128467cd539565c5e59c0,"public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""Project Not Found: %s"", id)); } return rsrc; }",7b4f7848a64082c8e493adbc7c1ce6827459cfb0,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_ProjectsCollection.java,"public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return parse(id, true); }",4fd39fcfefacb1e714749c4ea1ee800a619327bc,"public com.google.gerrit.server.restapi.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return parse(id, true); }",07c17cf22b7482afe5aa01869083b27b541c1f65,"public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return parse(id, true); }",4fd39fcfefacb1e714749c4ea1ee800a619327bc,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_ProjectsCollection.java,"@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }",3a362391c37b40bd19bc9ce392099795b2b2fb19,"@java.lang.Override public com.google.gerrit.server.restapi.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.restapi.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }",2c4a9d89bfd34cf19a4520ef2dd071d897d1ff3a,"@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }",3a362391c37b40bd19bc9ce392099795b2b2fb19,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_DeleteDraftComment.java,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommentInfo> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.DraftCommentResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.change.DeleteDraftComment.Op op = new com.google.gerrit.server.change.DeleteDraftComment.Op(rsrc.getComment().key); bu.addOp(rsrc.getChange().getId(), op); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",3e26f4d04059fa3dbc2ea1a5d7c6b0b8b7391270,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommentInfo> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.change.DraftCommentResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.restapi.change.DeleteDraftComment.Op op = new com.google.gerrit.server.restapi.change.DeleteDraftComment.Op(rsrc.getComment().key); bu.addOp(rsrc.getChange().getId(), op); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",e0c7d19a25be7ce2820124399b454c32d038ac16,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommentInfo> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.DraftCommentResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.restapi.change.DeleteDraftComment.Op op = new com.google.gerrit.server.restapi.change.DeleteDraftComment.Op(rsrc.getComment().key); bu.addOp(rsrc.getChange().getId(), op); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",22b8041e59ad04c8407ad695c6193c2c102a42a9,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_pgm_init_GroupsOnInit.java,"private static com.google.gerrit.reviewdb.client.AccountGroup getExistingGroup(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUuid).toList(); if ((accountGroups.size()) == 1) { return com.google.common.collect.Iterables.getOnlyElement(accountGroups); } else if (accountGroups.isEmpty()) { throw new com.google.gerrit.common.errors.NoSuchGroupException(groupUuid); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException((""Duplicate group UUID "" + groupUuid)); } }",cb38e087e556e3ce7cabac80511e9e191efae9bc,"private static com.google.gerrit.reviewdb.client.AccountGroup getExistingGroup(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUuid).toList(); if ((accountGroups.size()) == 1) { return com.google.common.collect.Iterables.getOnlyElement(accountGroups); } else if (accountGroups.isEmpty()) { throw new com.google.gerrit.common.errors.NoSuchGroupException(groupUuid); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException((""Duplicate account UUID "" + groupUuid)); } }",f4d87c4dcb708180d9ecee28594400a5b4295434,"private static com.google.gerrit.reviewdb.client.AccountGroup getExistingGroup(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUuid).toList(); if ((accountGroups.size()) == 1) { return com.google.common.collect.Iterables.getOnlyElement(accountGroups); } else if (accountGroups.isEmpty()) { throw new com.google.gerrit.common.errors.NoSuchGroupException(groupUuid); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException((""Duplicate group UUID "" + groupUuid)); } }",cb38e087e556e3ce7cabac80511e9e191efae9bc,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupConfigTest.java,"@org.junit.Test public void ownerUuidCannotBeUpdatedToNull() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[group]\n\tname = users\n\tid = 42\n\townerGroupUuid = owners\n""); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Owner UUID of the group users-XYZ""); groupConfig.commit(metaDataUpdate); } }",b589541dcc85ca1cf0a226d5ca240f8f016b80a0,"@org.junit.Test public void ownerUuidCannotBeUpdatedToNull() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[account]\n\tname = users\n\tid = 42\n\townerGroupUuid = owners\n""); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Owner UUID of the account users-XYZ""); groupConfig.commit(metaDataUpdate); } }",c4ae3f7129d61c68dfe19ca2bf50d915b30fbbe7,"@org.junit.Test public void ownerUuidCannotBeUpdatedToNull() throws java.lang.Exception { populateGroupConfig(groupUuid, ""[group]\n\tname = users\n\tid = 42\n\townerGroupUuid = owners\n""); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Owner UUID of the group users-XYZ""); groupConfig.commit(metaDataUpdate); } }",b589541dcc85ca1cf0a226d5ca240f8f016b80a0,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_BranchesCollection.java,"@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic() ? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }",e162ea532751db60eb8f160a10dc02f23e4d590d,"@java.lang.Override public com.google.gerrit.server.restapi.project.BranchResource parse(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic() ? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.restapi.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }",c0834bc6cc0dd66a3332d8113320cb04eb3623b4,"@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic() ? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }",e162ea532751db60eb8f160a10dc02f23e4d590d,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_DraftComments.java,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.DraftCommentResource>> views() { return views; },0d33319ad5172dd5d12163deea5b6087ce619967,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.change.DraftCommentResource>> views() { return views; },492ee553cd57b6697ff2debb6ce500e5fc2be863,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.DraftCommentResource>> views() { return views; },0d33319ad5172dd5d12163deea5b6087ce619967,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_ListMembers.java,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (recursive) { return getTransitiveMembers(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); }",bbad8d4b12c7b996f26732594e03202c36325b72,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.restapi.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (recursive) { return getTransitiveMembers(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); }",632a4e0fac68f1fd41379f34da2ad5157bf4b30a,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (recursive) { return getTransitiveMembers(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); }",bbad8d4b12c7b996f26732594e03202c36325b72,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_ChildProjectResource.java,public com.google.gerrit.server.project.ProjectResource getParent() { return parent; },347e98f9c327b2126b07bad62e14bdfb8dc63596,public com.google.gerrit.server.restapi.project.ProjectResource getParent() { return parent; },fec09d86c235fc9a99c9c77dc4e8d7a00462dac4,public com.google.gerrit.server.project.ProjectResource getParent() { return parent; },347e98f9c327b2126b07bad62e14bdfb8dc63596,2018-01-08 16:30:53,17
148032,javatests_com_google_gerrit_server_group_db_GroupConfigTest.java,"@org.junit.Test public void idOfNewGroupMustNotBeNegative() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id((-2))).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""ID of the group users-XYZ""); groupConfig.commit(metaDataUpdate); } }",6baafc77fcd32fe53c7c8cad24aff70d08d609d9,"@org.junit.Test public void idOfNewGroupMustNotBeNegative() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id((-2))).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""ID of the account users-XYZ""); groupConfig.commit(metaDataUpdate); } }",1d5df9335a18acad2464393c52cd59f26c709a1f,"@org.junit.Test public void idOfNewGroupMustNotBeNegative() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id((-2))).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""ID of the group users-XYZ""); groupConfig.commit(metaDataUpdate); } }",6baafc77fcd32fe53c7c8cad24aff70d08d609d9,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_group_db_GroupsUpdate.java,"private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""Created group wasn't automatically loaded"")); } }",acfa7e2439895decfb2f3fb93cca01c3682cc9af,"private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""Created account wasn't automatically loaded"")); } }",75f18f8299dccc0cd45fb565c6368f1338562c9f,"private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""Created group wasn't automatically loaded"")); } }",acfa7e2439895decfb2f3fb93cca01c3682cc9af,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_DeleteSubgroups.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); input = com.google.gerrit.server.group.AddSubgroups.Input.init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveGroup())) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format(""Cannot delete groups from group %s"", internalGroup.getName())); } java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupsToRemove = new java.util.HashSet<>(); for (java.lang.String subgroupIdentifier : input.groups) { com.google.gerrit.common.data.GroupDescription.Basic subgroup = groupsCollection.parse(subgroupIdentifier); subgroupsToRemove.add(subgroup.getGroupUUID()); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); try { removeSubgroups(groupUuid, subgroupsToRemove); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format(""Group %s not found"", groupUuid)); } return com.google.gerrit.extensions.restapi.Response.none(); }",cc29b63ce4433492bf2b2a87ed6e2a4277c7f833,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.server.restapi.group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); input = com.google.gerrit.server.restapi.group.AddSubgroups.Input.init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveGroup())) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format(""Cannot delete groups from account %s"", internalGroup.getName())); } java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupsToRemove = new java.util.HashSet<>(); for (java.lang.String subgroupIdentifier : input.groups) { com.google.gerrit.common.data.GroupDescription.Basic subgroup = groupsCollection.parse(subgroupIdentifier); subgroupsToRemove.add(subgroup.getGroupUUID()); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); try { removeSubgroups(groupUuid, subgroupsToRemove); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format(""Group %s not found"", groupUuid)); } return com.google.gerrit.extensions.restapi.Response.none(); }",f426f6b467b8b9315665d255b41ecc7844ee154e,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.restapi.group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); input = com.google.gerrit.server.restapi.group.AddSubgroups.Input.init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveGroup())) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format(""Cannot delete groups from group %s"", internalGroup.getName())); } java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupsToRemove = new java.util.HashSet<>(); for (java.lang.String subgroupIdentifier : input.groups) { com.google.gerrit.common.data.GroupDescription.Basic subgroup = groupsCollection.parse(subgroupIdentifier); subgroupsToRemove.add(subgroup.getGroupUUID()); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); try { removeSubgroups(groupUuid, subgroupsToRemove); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format(""Group %s not found"", groupUuid)); } return com.google.gerrit.extensions.restapi.Response.none(); }",27cd16f93706920b59621e03b7dcd480f0eefb4e,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_DeleteSubgroups.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.SubgroupResource resource, com.google.gerrit.server.group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.AddSubgroups.Input in = new com.google.gerrit.server.group.AddSubgroups.Input(); in.groups = com.google.common.collect.ImmutableList.of(resource.getMember().get()); return delete.get().apply(resource, in); }",32c53c534c01f8b5ec6a64327b703744c2398e9d,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.group.SubgroupResource resource, com.google.gerrit.server.restapi.group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddSubgroups.Input in = new com.google.gerrit.server.restapi.group.AddSubgroups.Input(); in.groups = com.google.common.collect.ImmutableList.of(resource.getMember().get()); return delete.get().apply(resource, in); }",29415c0b0fd7eeddff7c7a364b46150ff023f357,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.SubgroupResource resource, com.google.gerrit.server.restapi.group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddSubgroups.Input in = new com.google.gerrit.server.restapi.group.AddSubgroups.Input(); in.groups = com.google.common.collect.ImmutableList.of(resource.getMember().get()); return delete.get().apply(resource, in); }",70ac40bf33ebc83199f90e173bafaa44bd436b1e,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_DeleteRef.java,com.google.gerrit.server.project.DeleteRef create(com.google.gerrit.server.project.ProjectResource r);,648f2b8eb7035198dfa9a7ba4794cf2dc939642a,com.google.gerrit.server.restapi.project.DeleteRef create(com.google.gerrit.server.restapi.project.ProjectResource r);,a56507c42bf6b5cc92df2f181c03a1e41fa0c9b0,com.google.gerrit.server.restapi.project.DeleteRef create(com.google.gerrit.server.project.ProjectResource r);,b8955f44a95e461b95b192676a4de423d206d751,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_DeleteRef.java,"private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, identifiedUser.get().getAccount()); }",5d44b0cac8f96c6dc663d300ecf9ec9bbb80091b,"private void postDeletion(com.google.gerrit.server.restapi.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, identifiedUser.get().getAccount()); }",f36643478badd87769fe4398366257eea7cea9ad,"private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, identifiedUser.get().getAccount()); }",5d44b0cac8f96c6dc663d300ecf9ec9bbb80091b,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_PutConfig.java,"@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ConfigInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.user(user).project(rsrc.getNameKey()).check(ProjectPermission.WRITE_CONFIG); return apply(rsrc.getProjectState(), input); }",e708b61a8a06964713517871c8baedcec53c231d,"@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ConfigInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.user(user).project(rsrc.getNameKey()).check(ProjectPermission.WRITE_CONFIG); return apply(rsrc.getProjectState(), input); }",01f3714a0643b47a3463f581eae5d7e9d43adc6a,"@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ConfigInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.user(user).project(rsrc.getNameKey()).check(ProjectPermission.WRITE_CONFIG); return apply(rsrc.getProjectState(), input); }",e708b61a8a06964713517871c8baedcec53c231d,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_DeleteVote.java,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.VoteResource rsrc, com.google.gerrit.extensions.api.changes.DeleteVoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, java.io.IOException { if (input == null) { input = new com.google.gerrit.extensions.api.changes.DeleteVoteInput(); } if (((input.label) != null) && (!(rsrc.getLabel().equals(input.label)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""label must match URL""); } if ((input.notify) == null) { input.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; } com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.reviewdb.client.Change change = r.getChange(); if (((r.getRevisionResource()) != null) && (!(r.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""Cannot delete vote on non-current patch set""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), change.getProject(), r.getChangeResource().getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.change.DeleteVote.Op(projectCache.checkedGet(r.getChange().getProject()), r.getReviewerUser().getAccount(), rsrc.getLabel(), input)); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",4205c16f851493e5b9473709211c31d0e9d75725,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.change.VoteResource rsrc, com.google.gerrit.extensions.api.changes.DeleteVoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, java.io.IOException { if (input == null) { input = new com.google.gerrit.extensions.api.changes.DeleteVoteInput(); } if (((input.label) != null) && (!(rsrc.getLabel().equals(input.label)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""label must match URL""); } if ((input.notify) == null) { input.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; } com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.reviewdb.client.Change change = r.getChange(); if (((r.getRevisionResource()) != null) && (!(r.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""Cannot delete vote on non-current patch set""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), change.getProject(), r.getChangeResource().getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.restapi.change.DeleteVote.Op(projectCache.checkedGet(r.getChange().getProject()), r.getReviewerUser().getAccount(), rsrc.getLabel(), input)); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",8cd1db5145937f87d5439230f9dee81cc27ca5cc,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.VoteResource rsrc, com.google.gerrit.extensions.api.changes.DeleteVoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, java.io.IOException { if (input == null) { input = new com.google.gerrit.extensions.api.changes.DeleteVoteInput(); } if (((input.label) != null) && (!(rsrc.getLabel().equals(input.label)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""label must match URL""); } if ((input.notify) == null) { input.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; } com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.reviewdb.client.Change change = r.getChange(); if (((r.getRevisionResource()) != null) && (!(r.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""Cannot delete vote on non-current patch set""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), change.getProject(), r.getChangeResource().getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.restapi.change.DeleteVote.Op(projectCache.checkedGet(r.getChange().getProject()), r.getReviewerUser().getAccount(), rsrc.getLabel(), input)); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",2b4259625478229bc274e721be74be3fc9bef364,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_ListChildProjects.java,@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return recursiveChildProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); },542ba619a10bf5463b254b8634416983fac91b84,@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return recursiveChildProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); },eb3cc2f300d4e57fce1e6c290ff2a3532faddba5,@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return childProjects.list(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); },d98502126c20a8ed64576576c9fc1bb01554a335,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_git_RenameGroupOp.java,"@java.lang.Override public void run() { java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> names = (tryingAgain) ? retryOn : projectCache.all(); for (com.google.gerrit.reviewdb.client.Project.NameKey projectName : names) { com.google.gerrit.server.git.ProjectConfig config = projectCache.get(projectName).getConfig(); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { continue; } try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName)) { rename(md); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noProject) { continue; } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException err) { com.google.gerrit.server.git.RenameGroupOp.log.error((((""Cannot rename group "" + (oldName)) + "" in "") + projectName), err); } } if ((!(retryOn.isEmpty())) && (!(tryingAgain))) { tryingAgain = true; @java.lang.SuppressWarnings(""unused"") java.util.concurrent.Future<?> possiblyIgnoredError = start(5, java.util.concurrent.TimeUnit.MINUTES); } }",4b2421d894f664b832e5c191d3e67ff2740a0cc3,"@java.lang.Override public void run() { java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> names = (tryingAgain) ? retryOn : projectCache.all(); for (com.google.gerrit.reviewdb.client.Project.NameKey projectName : names) { com.google.gerrit.server.git.ProjectConfig config = projectCache.get(projectName).getConfig(); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { continue; } try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName)) { rename(md); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noProject) { continue; } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException err) { com.google.gerrit.server.git.RenameGroupOp.log.error((((""Cannot rename account "" + (oldName)) + "" in "") + projectName), err); } } if ((!(retryOn.isEmpty())) && (!(tryingAgain))) { tryingAgain = true; @java.lang.SuppressWarnings(""unused"") java.util.concurrent.Future<?> possiblyIgnoredError = start(5, java.util.concurrent.TimeUnit.MINUTES); } }",6fc459a001ea17bce6ae94fb91be1f15eeae2cf8,"@java.lang.Override public void run() { java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> names = (tryingAgain) ? retryOn : projectCache.all(); for (com.google.gerrit.reviewdb.client.Project.NameKey projectName : names) { com.google.gerrit.server.git.ProjectConfig config = projectCache.get(projectName).getConfig(); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { continue; } try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName)) { rename(md); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noProject) { continue; } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException err) { com.google.gerrit.server.git.RenameGroupOp.log.error((((""Cannot rename group "" + (oldName)) + "" in "") + projectName), err); } } if ((!(retryOn.isEmpty())) && (!(tryingAgain))) { tryingAgain = true; @java.lang.SuppressWarnings(""unused"") java.util.concurrent.Future<?> possiblyIgnoredError = start(5, java.util.concurrent.TimeUnit.MINUTES); } }",4b2421d894f664b832e5c191d3e67ff2740a0cc3,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_git_RenameGroupOp.java,"private void rename(com.google.gerrit.server.git.MetaDataUpdate md) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { boolean success = false; for (int attempts = 0; (!success) && (attempts < (com.google.gerrit.server.git.RenameGroupOp.MAX_TRIES)); attempts++) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { projectCache.evict(config.getProject()); return; } ref.setName(newName); md.getCommitBuilder().setAuthor(author); md.setMessage(((((""Rename group "" + (oldName)) + "" to "") + (newName)) + ""\n"")); try { config.commit(md); projectCache.evict(config.getProject()); success = true; } catch (java.io.IOException e) { com.google.gerrit.server.git.RenameGroupOp.log.error((((((""Could not commit rename of group "" + (oldName)) + "" to "") + (newName)) + "" in "") + (md.getProjectName().get())), e); try { java.lang.Thread.sleep(25); } catch (java.lang.InterruptedException wakeUp) { continue; } } } if (!success) { if (tryingAgain) { com.google.gerrit.server.git.RenameGroupOp.log.warn((((((""Could not rename group "" + (oldName)) + "" to "") + (newName)) + "" in "") + (md.getProjectName().get()))); } else { retryOn.add(md.getProjectName()); } } }",383881a02c1e9d93eadd34a4d6e6dd82aad73401,"private void rename(com.google.gerrit.server.git.MetaDataUpdate md) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { boolean success = false; for (int attempts = 0; (!success) && (attempts < (com.google.gerrit.server.git.RenameGroupOp.MAX_TRIES)); attempts++) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { projectCache.evict(config.getProject()); return; } ref.setName(newName); md.getCommitBuilder().setAuthor(author); md.setMessage(((((""Rename account "" + (oldName)) + "" to "") + (newName)) + ""\n"")); try { config.commit(md); projectCache.evict(config.getProject()); success = true; } catch (java.io.IOException e) { com.google.gerrit.server.git.RenameGroupOp.log.error((((((""Could not commit rename of account "" + (oldName)) + "" to "") + (newName)) + "" in "") + (md.getProjectName().get())), e); try { java.lang.Thread.sleep(25); } catch (java.lang.InterruptedException wakeUp) { continue; } } } if (!success) { if (tryingAgain) { com.google.gerrit.server.git.RenameGroupOp.log.warn((((((""Could not rename account "" + (oldName)) + "" to "") + (newName)) + "" in "") + (md.getProjectName().get()))); } else { retryOn.add(md.getProjectName()); } } }",656e7bb3f6c191ac2efeb56e7b0767e1f2c27041,"private void rename(com.google.gerrit.server.git.MetaDataUpdate md) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { boolean success = false; for (int attempts = 0; (!success) && (attempts < (com.google.gerrit.server.git.RenameGroupOp.MAX_TRIES)); attempts++) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { projectCache.evict(config.getProject()); return; } ref.setName(newName); md.getCommitBuilder().setAuthor(author); md.setMessage(((((""Rename group "" + (oldName)) + "" to "") + (newName)) + ""\n"")); try { config.commit(md); projectCache.evict(config.getProject()); success = true; } catch (java.io.IOException e) { com.google.gerrit.server.git.RenameGroupOp.log.error((((((""Could not commit rename of group "" + (oldName)) + "" to "") + (newName)) + "" in "") + (md.getProjectName().get())), e); try { java.lang.Thread.sleep(25); } catch (java.lang.InterruptedException wakeUp) { continue; } } } if (!success) { if (tryingAgain) { com.google.gerrit.server.git.RenameGroupOp.log.warn((((((""Could not rename group "" + (oldName)) + "" to "") + (newName)) + "" in "") + (md.getProjectName().get()))); } else { retryOn.add(md.getProjectName()); } } }",383881a02c1e9d93eadd34a4d6e6dd82aad73401,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_SetDefaultDashboard.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.SetDefaultDashboard set = setDefault.get(); set.inherited = inherited; return set.apply(com.google.gerrit.server.project.DashboardResource.projectDefault(resource.getProjectState(), resource.getUser()), input); }",9b02f8bb5a88b4234fbe1e12f1054cf5eb106b3f,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.restapi.project.SetDefaultDashboard set = setDefault.get(); set.inherited = inherited; return set.apply(com.google.gerrit.server.restapi.project.DashboardResource.projectDefault(resource.getProjectState(), resource.getUser()), input); }",2e632fee059074dacc075890697f36fc826058bd,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.project.ProjectResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.restapi.project.SetDefaultDashboard set = setDefault.get(); set.inherited = inherited; return set.apply(com.google.gerrit.server.project.DashboardResource.projectDefault(resource.getProjectState(), resource.getUser()), input); }",c245ddb28a7e97d96cc5a29b028b5bae36786c0a,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_PutName.java,"private void renameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, java.lang.String newName) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = group.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(newName)).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format(""Group %s not found"", groupUuid)); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""group with name "" + newName) + "" already exists"")); } }",c293d02787d0839298740cedebbd476762f24774,"private void renameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, java.lang.String newName) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = group.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(newName)).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format(""Group %s not found"", groupUuid)); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""account with name "" + newName) + "" already exists"")); } }",3b03e9dd91651fdb3754c60b00616c140088ac50,"private void renameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, java.lang.String newName) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = group.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(newName)).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format(""Group %s not found"", groupUuid)); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""group with name "" + newName) + "" already exists"")); } }",c293d02787d0839298740cedebbd476762f24774,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_project_CommitIncludedIn.java,"@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc.getCommit(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProjectState().getNameKey(); return includedIn.apply(project, commit.getId().getName()); }",dc91da5e784b02c042247e2d1241098c2777d3c9,"@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server.restapi.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc.getCommit(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProjectState().getNameKey(); return includedIn.apply(project, commit.getId().getName()); }",a938e75d57d6aef132c35fb9981c5f71c82cda12,"@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc.getCommit(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProjectState().getNameKey(); return includedIn.apply(project, commit.getId().getName()); }",dc91da5e784b02c042247e2d1241098c2777d3c9,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_PutName.java,"@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource rsrc, NameInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = rsrc.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Not group owner""); } else if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""name is required""); } java.lang.String newName = input.name.trim(); if (newName.isEmpty()) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""name is required""); } if (internalGroup.getName().equals(newName)) { return newName; } renameGroup(internalGroup, newName); return newName; }",ebb104bc90ea8bf5b6a1320e3b1fad7dc07247cf,"@java.lang.Override public java.lang.String apply(com.google.gerrit.server.restapi.group.GroupResource rsrc, NameInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = rsrc.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Not account owner""); } else if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""name is required""); } java.lang.String newName = input.name.trim(); if (newName.isEmpty()) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""name is required""); } if (internalGroup.getName().equals(newName)) { return newName; } renameGroup(internalGroup, newName); return newName; }",03a4b961dacc7f76b0189fd4b240a99ce354a750,"@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource rsrc, NameInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = rsrc.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Not group owner""); } else if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""name is required""); } java.lang.String newName = input.name.trim(); if (newName.isEmpty()) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""name is required""); } if (internalGroup.getName().equals(newName)) { return newName; } renameGroup(internalGroup, newName); return newName; }",ebb104bc90ea8bf5b6a1320e3b1fad7dc07247cf,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_auth_ldap_LdapType.java,"@java.lang.Override java.lang.String groupPattern() { return ""(&(objectClass=group)(cn=${groupname}))""; }",fc895798b1703ebf46b93e5a0ca909580dc54693,"@java.lang.Override java.lang.String groupPattern() { return ""(&(objectClass=account)(cn=${groupname}))""; }",4ac3389be391045538204a1fe1d275834a170f9e,"@java.lang.Override java.lang.String groupPattern() { return ""(&(objectClass=group)(cn=${groupname}))""; }",fc895798b1703ebf46b93e5a0ca909580dc54693,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_change_DownloadContent.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String path = rsrc.getPatchKey().get(); com.google.gerrit.server.change.RevisionResource rev = rsrc.getRevision(); org.eclipse.jgit.lib.ObjectId revstr = org.eclipse.jgit.lib.ObjectId.fromString(rev.getPatchSet().getRevision().get()); return fileContentUtil.downloadContent(projectCache.checkedGet(rev.getProject()), revstr, path, parent); }",5f3ab52591557914b934468d85853e49d8706781,"@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.restapi.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String path = rsrc.getPatchKey().get(); com.google.gerrit.server.change.RevisionResource rev = rsrc.getRevision(); org.eclipse.jgit.lib.ObjectId revstr = org.eclipse.jgit.lib.ObjectId.fromString(rev.getPatchSet().getRevision().get()); return fileContentUtil.downloadContent(projectCache.checkedGet(rev.getProject()), revstr, path, parent); }",2aa997aa35dd5bbdf0fc59ae455cceb0e3e741c2,"@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String path = rsrc.getPatchKey().get(); com.google.gerrit.server.change.RevisionResource rev = rsrc.getRevision(); org.eclipse.jgit.lib.ObjectId revstr = org.eclipse.jgit.lib.ObjectId.fromString(rev.getPatchSet().getRevision().get()); return fileContentUtil.downloadContent(projectCache.checkedGet(rev.getProject()), revstr, path, parent); }",5f3ab52591557914b934468d85853e49d8706781,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_query_group_InternalGroupQuery.java,"public java.util.Optional<com.google.gerrit.server.group.InternalGroup> byName(com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicates.name(groupName.get()), ((""group name '"" + groupName) + ""'"")); }",d00f145812d5a5189e778f78437ed1c5665cf8f1,"public java.util.Optional<com.google.gerrit.server.group.InternalGroup> byName(com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicates.name(groupName.get()), ((""account name '"" + groupName) + ""'"")); }",36a7cffd81f7bb91febddfc60e592bb288f81883,"public java.util.Optional<com.google.gerrit.server.group.InternalGroup> byName(com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicates.name(groupName.get()), ((""group name '"" + groupName) + ""'"")); }",d00f145812d5a5189e778f78437ed1c5665cf8f1,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_restapi_group_GetName.java,@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource resource) { return resource.getName(); },21af28abed9af42ca54d9ab5a04bdd64879620e7,@java.lang.Override public java.lang.String apply(com.google.gerrit.server.restapi.group.GroupResource resource) { return resource.getName(); },5f84e5c6376ab200bd8ba79dc57b0240f343cfba,@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource resource) { return resource.getName(); },21af28abed9af42ca54d9ab5a04bdd64879620e7,2018-01-08 16:30:53,17
148032,java_com_google_gerrit_server_query_group_InternalGroupQuery.java,"public java.util.Optional<com.google.gerrit.server.group.InternalGroup> byId(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicates.id(groupId), ((""group id '"" + groupId) + ""'"")); }",8e59109a32d8cb10209a6b2b352d2e6a0ed22905,"public java.util.Optional<com.google.gerrit.server.group.InternalGroup> byId(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicates.id(groupId), ((""account id '"" + groupId) + ""'"")); }",40b3105476e16f44fcd05f2121e068715fa84fc9,"public java.util.Optional<com.google.gerrit.server.group.InternalGroup> byId(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicates.id(groupId), ((""group id '"" + groupId) + ""'"")); }",8e59109a32d8cb10209a6b2b352d2e6a0ed22905,2018-01-08 16:30:53,17
151331,javatests_com_google_gerrit_acceptance_rest_change_AbstractSubmit.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitEmptyCommit_NoFastForward() throws java.lang.Exception { assume().that(getSubmitType()).isNotEqualTo(SubmitType.FAST_FORWARD_ONLY); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(""Change 1"", ""a.txt"", ""content""); submit(change.getChangeId()); com.google.gerrit.extensions.api.changes.ChangeApi revert1 = gApi.changes().id(change.getChangeId()).revert(); approve(revert1.id()); revert1.current().submit(); com.google.gerrit.extensions.api.changes.ChangeApi revert2 = gApi.changes().id(change.getChangeId()).revert(); approve(revert2.id()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage((((""Change "" + (revert2.get()._number)) + "": Change could not be merged because the commit is empty. "") + ""Project policy requires all commits to contain modifications to at least one file."")); revert2.current().submit(); }",88561aca0734c3319e3e43fe09c452bdb5bb5a6e,"@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.FALSE) public void submitEmptyCommitPatchSetCanNotFastForward_emptyCommitAllowed() throws java.lang.Exception { assume().that(getSubmitType()).isNotEqualTo(SubmitType.FAST_FORWARD_ONLY); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(""Change 1"", ""a.txt"", ""content""); submit(change.getChangeId()); com.google.gerrit.extensions.api.changes.ChangeApi revert1 = gApi.changes().id(change.getChangeId()).revert(); approve(revert1.id()); revert1.current().submit(); com.google.gerrit.extensions.api.changes.ChangeApi revert2 = gApi.changes().id(change.getChangeId()).revert(); approve(revert2.id()); revert2.current().submit(); }",00b83d93f714a83d4c1b0fac20a0825b916124af,2018-01-09 14:10:29,2
151331,javatests_com_google_gerrit_acceptance_rest_change_AbstractSubmit.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitEmptyCommit_FastForward() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput ci = new com.google.gerrit.extensions.common.ChangeInput(); ci.subject = ""Empty change""; ci.project = project.get(); ci.branch = ""master""; com.google.gerrit.extensions.api.changes.ChangeApi change = gApi.changes().create(ci); approve(change.id()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage((((""Change "" + (change.get()._number)) + "": Change could not be merged because the commit is empty. "") + ""Project policy requires all commits to contain modifications to at least one file."")); change.current().submit(); }",22d857a4167683793867bec5143c7dac14c5a18c,"@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.FALSE) public void submitEmptyCommitPatchSetCanFastForward_emptyCommitAllowed() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput ci = new com.google.gerrit.extensions.common.ChangeInput(); ci.subject = ""Empty change""; ci.project = project.get(); ci.branch = ""master""; com.google.gerrit.extensions.api.changes.ChangeApi change = gApi.changes().create(ci); approve(change.id()); change.current().submit(); }",01a79fe824d2fb8344f750c446574f89053346f7,2018-01-09 14:10:29,2
135830,gerrit-gwtui_src_main_java_com_google_gerrit_client_projects_ConfigInfo.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public final com.google.gerrit.extensions.client.SubmitType configuredSubmitType() { java.lang.String raw = configuredSubmitTypeRaw(); return raw != null ? com.google.gerrit.extensions.client.SubmitType.valueOf(raw) : null; },4472ac1734ab9c61ae6e2a216164a1bd7e7078ff,public native final com.google.gerrit.client.projects.ConfigInfo.SubmitTypeInfo defaultSubmitType();,977fbf0727ca1e66c1d0118ddadc2e30f66f0d6c,2018-01-09 14:46:48,9
135830,gerrit-gwtui_src_main_java_com_google_gerrit_client_projects_ConfigInfo.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private native java.lang.String configuredSubmitTypeRaw();,dc8df37f97abef606b68b23315f5699881de3f1e,private native final java.lang.String configuredValueRaw();,68702e9b6dd69dac214cc0166b235b04be02514d,2018-01-09 14:46:48,9
135830,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectInfoScreen.java,private void setSubmitType(com.google.gerrit.extensions.client.SubmitType newSubmitType) { int index = -1; if ((submitType) != null) { for (int i = 0; i < (submitType.getItemCount()); i++) { if (newSubmitType.name().equals(submitType.getValue(i))) { index = i; break; } } submitType.setSelectedIndex(index); setEnabledForUseContentMerge(); } },0c1135e34a55e4f0610a3dfe3c9fc964c7e97315,"private void setSubmitType(com.google.gerrit.extensions.client.SubmitType newSubmitType, com.google.gerrit.extensions.client.SubmitType newConfiguredSubmitType) { int index = -1; if ((submitType) != null) { for (int i = 0; i < (submitType.getItemCount()); i++) { if (newConfiguredSubmitType.name().equals(submitType.getValue(i))) { index = i; if (newConfiguredSubmitType == (com.google.gerrit.extensions.client.SubmitType.INHERIT)) { } break; } } submitType.setSelectedIndex(index); setEnabledForUseContentMerge(); } }",1ffedce1d18391155239116c49fbea220d00260a,"private void setSubmitType(com.google.gerrit.client.projects.ConfigInfo.SubmitTypeInfo newSubmitType) { int index = -1; if (newSubmitType != null) { for (int i = 0; i < (submitType.getItemCount()); i++) { if (submitType.getValue(i).equals(SubmitType.INHERIT.name())) { submitType.setItemText(i, com.google.gerrit.client.admin.ProjectInfoScreen.getInheritString(newSubmitType)); } if (newSubmitType.configuredValue().name().equals(submitType.getValue(i))) { index = i; } } submitType.setSelectedIndex(index); setEnabledForUseContentMerge(); } }",38134146f0acabeba83c1a24ea6a6c86c90ee10f,2018-01-09 14:46:48,9
135830,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectInfoScreen.java,"void display(com.google.gerrit.client.projects.ConfigInfo result) { descTxt.setText(result.description()); setBool(contributorAgreements, result.useContributorAgreements()); setBool(signedOffBy, result.useSignedOffBy()); setBool(contentMerge, result.useContentMerge()); setBool(newChangeForAllNotInTarget, result.createNewChangeForAllNotInTarget()); setBool(requireChangeID, result.requireChangeId()); if (com.google.gerrit.client.Gerrit.info().receive().enableSignedPush()) { setBool(enableSignedPush, result.enableSignedPush()); setBool(requireSignedPush, result.requireSignedPush()); } setBool(rejectImplicitMerges, result.rejectImplicitMerges()); setBool(privateByDefault, result.privateByDefault()); setBool(enableReviewerByEmail, result.enableReviewerByEmail()); setBool(matchAuthorToCommitterDate, result.matchAuthorToCommitterDate()); setSubmitType(result.submitType()); setState(result.state()); maxObjectSizeLimit.setText(result.maxObjectSizeLimit().configuredValue()); if ((result.maxObjectSizeLimit().inheritedValue()) != null) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setText(AdminMessages.I.effectiveMaxObjectSizeLimit(result.maxObjectSizeLimit().value())); effectiveMaxObjectSizeLimit.setTitle(AdminMessages.I.globalMaxObjectSizeLimit(result.maxObjectSizeLimit().inheritedValue())); } else { effectiveMaxObjectSizeLimit.setVisible(false); } saveProject.setEnabled(false); initPluginOptions(result); initProjectActions(result); }",364d80da181af03230eb951c594f9e64100fe306,"void display(com.google.gerrit.client.projects.ConfigInfo result) { descTxt.setText(result.description()); setBool(contributorAgreements, result.useContributorAgreements()); setBool(signedOffBy, result.useSignedOffBy()); setBool(contentMerge, result.useContentMerge()); setBool(newChangeForAllNotInTarget, result.createNewChangeForAllNotInTarget()); setBool(requireChangeID, result.requireChangeId()); if (com.google.gerrit.client.Gerrit.info().receive().enableSignedPush()) { setBool(enableSignedPush, result.enableSignedPush()); setBool(requireSignedPush, result.requireSignedPush()); } setBool(rejectImplicitMerges, result.rejectImplicitMerges()); setBool(privateByDefault, result.privateByDefault()); setBool(enableReviewerByEmail, result.enableReviewerByEmail()); setBool(matchAuthorToCommitterDate, result.matchAuthorToCommitterDate()); setSubmitType(result.submitType(), result.configuredSubmitType()); setState(result.state()); maxObjectSizeLimit.setText(result.maxObjectSizeLimit().configuredValue()); if ((result.maxObjectSizeLimit().inheritedValue()) != null) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setText(AdminMessages.I.effectiveMaxObjectSizeLimit(result.maxObjectSizeLimit().value())); effectiveMaxObjectSizeLimit.setTitle(AdminMessages.I.globalMaxObjectSizeLimit(result.maxObjectSizeLimit().inheritedValue())); } else { effectiveMaxObjectSizeLimit.setVisible(false); } saveProject.setEnabled(false); initPluginOptions(result); initProjectActions(result); }",699e7623aadb7ca66a3ea6250d86a351451f5603,"void display(com.google.gerrit.client.projects.ConfigInfo result) { descTxt.setText(result.description()); setBool(contributorAgreements, result.useContributorAgreements()); setBool(signedOffBy, result.useSignedOffBy()); setBool(contentMerge, result.useContentMerge()); setBool(newChangeForAllNotInTarget, result.createNewChangeForAllNotInTarget()); setBool(requireChangeID, result.requireChangeId()); if (com.google.gerrit.client.Gerrit.info().receive().enableSignedPush()) { setBool(enableSignedPush, result.enableSignedPush()); setBool(requireSignedPush, result.requireSignedPush()); } setBool(rejectImplicitMerges, result.rejectImplicitMerges()); setBool(privateByDefault, result.privateByDefault()); setBool(enableReviewerByEmail, result.enableReviewerByEmail()); setBool(matchAuthorToCommitterDate, result.matchAuthorToCommitterDate()); setSubmitType(result.defaultSubmitType()); setState(result.state()); maxObjectSizeLimit.setText(result.maxObjectSizeLimit().configuredValue()); if ((result.maxObjectSizeLimit().inheritedValue()) != null) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setText(AdminMessages.I.effectiveMaxObjectSizeLimit(result.maxObjectSizeLimit().value())); effectiveMaxObjectSizeLimit.setTitle(AdminMessages.I.globalMaxObjectSizeLimit(result.maxObjectSizeLimit().inheritedValue())); } else { effectiveMaxObjectSizeLimit.setVisible(false); } saveProject.setEnabled(false); initPluginOptions(result); initProjectActions(result); }",4a7de547f42896638fbb089cdf81e4135d1e9660,2018-01-09 14:46:48,9
150310,java_com_google_gerrit_server_account_AccountManager.java,"private void handleSettingUserNameFailure(com.google.gerrit.reviewdb.client.Account account, com.google.gerrit.server.account.externalids.ExternalId extId, java.lang.String errorMessage, java.lang.Exception e, boolean logException) throws com.google.gerrit.server.account.AccountUserNameException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (logException) { com.google.gerrit.server.account.AccountManager.log.error(errorMessage, e); } else { com.google.gerrit.server.account.AccountManager.log.error(errorMessage); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { accountsUpdateFactory.create().delete(account); externalIdsUpdateFactory.create().delete(extId); throw new com.google.gerrit.server.account.AccountUserNameException(errorMessage, e); } }",476c87ce38b67a19986a935b887f123cf7d6ae87,"private com.google.gerrit.server.account.externalids.ExternalId createUsername(com.google.gerrit.reviewdb.client.Account.Id accountId, java.lang.String username) throws com.google.gerrit.server.account.AccountUserNameException { if (com.google.common.base.Strings.isNullOrEmpty(username)) { return null; } if (!(com.google.gerrit.server.account.PutUsername.isValidUsername(username))) { throw new com.google.gerrit.server.account.AccountUserNameException(java.lang.String.format(""Cannot assign user name \""%s\"" to account %s; name does not conform."", username, accountId)); } return com.google.gerrit.server.account.externalids.ExternalId.create(com.google.gerrit.server.account.SCHEME_USERNAME, username, accountId); }",7286ea49303ef295a951a3dc619cae5c1c7954b8,"private com.google.gerrit.server.account.externalids.ExternalId createUsername(com.google.gerrit.reviewdb.client.Account.Id accountId, java.lang.String username) throws com.google.gerrit.server.account.AccountUserNameException { checkArgument((!(com.google.common.base.Strings.isNullOrEmpty(username)))); if (!(com.google.gerrit.server.account.externalids.ExternalId.isValidUsername(username))) { throw new com.google.gerrit.server.account.AccountUserNameException(java.lang.String.format(""Cannot assign user name \""%s\"" to account %s; name does not conform."", username, accountId)); } return com.google.gerrit.server.account.externalids.ExternalId.create(com.google.gerrit.server.account.SCHEME_USERNAME, username, accountId); }",c3687acc38d83c53365f3e0769f4ca17bcc6382a,2018-01-09 14:57:15,9
148652,javatests_com_google_gerrit_acceptance_api_change_DisablePrivateChangesIT.java,,,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""change.disablePrivateChanges"", value = ""true"") public void createChangeWithDisablePrivateChangesTrue() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), ""master"", ""empty change""); input.isPrivate = true; exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(""private changes are not supported""); gApi.changes().create(input); }",6c01b59f8d1c15cb9f5c4fb9aec4b76322fb560f,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""change.disablePrivateChanges"", value = ""true"") public void createPrivateChangeWithDisablePrivateChangesTrue() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), ""master"", ""empty change""); input.isPrivate = true; exception.expect(com.google.gerrit.extensions.restapi.MethodNotAllowedException.class); exception.expectMessage(""private changes are disabled""); gApi.changes().create(input); }",83a5125347a094635345b32cac6dfb35dfbc973e,2018-01-09 15:46:08,7
148652,javatests_com_google_gerrit_acceptance_api_change_DisablePrivateChangesIT.java,,,"@org.junit.Test public void createChangeWithDisablePrivateChangesFalse() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), ""master"", ""empty change""); input.isPrivate = true; assertThat(gApi.changes().create(input).get().isPrivate).isEqualTo(true); }",acb68f2a612bccfefe45b2c3f6f730eb70fcaec1,"@org.junit.Test public void createPrivateChangeWithDisablePrivateChangesFalse() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), ""master"", ""empty change""); input.isPrivate = true; assertThat(gApi.changes().create(input).get().isPrivate).isEqualTo(true); }",679900e8623edae3e990e35df5fd442f93802959,2018-01-09 15:46:08,7
148652,javatests_com_google_gerrit_acceptance_rest_change_PrivateByDefaultIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""change.disablePrivateChanges"", value = ""true"") public void createChangeWithPrivateByDefaultAndDisablePrivateChangesTrue() throws java.lang.Exception { setPrivateByDefault(project2, InheritableBoolean.TRUE); com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project2.get(), ""master"", ""empty change""); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(""private changes are not supported""); gApi.changes().create(input); }",d612e6088b7f6157f7eeeef409a150a57e9cd5de,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""change.disablePrivateChanges"", value = ""true"") public void createChangeWithPrivateByDefaultAndDisablePrivateChangesTrue() throws java.lang.Exception { setPrivateByDefault(project2, InheritableBoolean.TRUE); com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project2.get(), ""master"", ""empty change""); exception.expect(com.google.gerrit.extensions.restapi.MethodNotAllowedException.class); exception.expectMessage(""private changes are disabled""); gApi.changes().create(input); }",0ef159fa9d0a41dbade4006f77297d73ca8f2471,2018-01-09 15:46:08,7
151513,java_com_google_gerrit_server_project_ProjectCacheImpl.java,"@java.lang.Override public java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String pfx) { com.google.gerrit.reviewdb.client.Project.NameKey start = new com.google.gerrit.reviewdb.client.Project.NameKey(pfx); com.google.gerrit.reviewdb.client.Project.NameKey end = new com.google.gerrit.reviewdb.client.Project.NameKey((pfx + (java.lang.Character.MAX_VALUE))); try { return list.get(com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL).subSet(start, end); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.project.ProjectCacheImpl.log.warn((""Cannot look up projects for prefix "" + pfx), e); return java.util.Collections.emptyList(); } }",a3bd56e8593fc923ae52e847bbe852d5bce9847b,"@java.lang.Override public java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String pfx) { com.google.gerrit.reviewdb.client.Project.NameKey start = new com.google.gerrit.reviewdb.client.Project.NameKey(pfx); com.google.gerrit.reviewdb.client.Project.NameKey end = new com.google.gerrit.reviewdb.client.Project.NameKey((pfx + (java.lang.Character.MAX_VALUE))); try { return list.get(com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL).subSet(start, end); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.project.ProjectCacheImpl.log.warn((""Cannot look up projects for prefix "" + pfx), e); return java.util.Collections.emptySortedSet(); } }",afc43fbf8b8cbcb63622484c62dd950c1d87ccd9,"@java.lang.Override public com.google.common.collect.ImmutableSortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String pfx) { com.google.gerrit.reviewdb.client.Project.NameKey start = new com.google.gerrit.reviewdb.client.Project.NameKey(pfx); com.google.gerrit.reviewdb.client.Project.NameKey end = new com.google.gerrit.reviewdb.client.Project.NameKey((pfx + (java.lang.Character.MAX_VALUE))); try { return list.get(com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL).subSet(start, end); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.project.ProjectCacheImpl.log.warn((""Cannot look up projects for prefix "" + pfx), e); return com.google.common.collect.ImmutableSortedSet.of(); } }",0419d528fc67d35914920498f1ea1a7bc4e33267,2018-01-10 13:56:23,3
151513,javatests_com_google_gerrit_server_project_RefControlTest.java,@java.lang.Override public java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix) { return java.util.Collections.emptySet(); },737f9d7e8510ee05770090edf32db54ddd60238a,@java.lang.Override public java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix) { return java.util.Collections.emptySortedSet(); },e96898711374d8567bc0a486f0632dea412d7034,@java.lang.Override public com.google.common.collect.ImmutableSortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix) { return com.google.common.collect.ImmutableSortedSet.of(); },86d709ac71393b3a7abc76a91af0623624974fbb,2018-01-10 13:56:23,3
151513,java_com_google_gerrit_server_project_ProjectCache.java,java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> all();,853f5f789de6190cc75264f3293275466e5c2894,java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> all();,a1982b29e03f927dc7fd07886c24de7e9e3f1edf,com.google.common.collect.ImmutableSortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> all();,7534ecda68520e1b8b198ac30a0b3b32bfa8e090,2018-01-10 13:56:23,3
151513,javatests_com_google_gerrit_server_project_RefControlTest.java,@java.lang.Override public java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> all() { return java.util.Collections.emptySet(); },4fee4ac00b07976cd5484af4f4fb7059e28dad9a,@java.lang.Override public java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> all() { return java.util.Collections.emptySortedSet(); },bef64dd75dec1838ef905124c286dace2a1c1e46,@java.lang.Override public com.google.common.collect.ImmutableSortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> all() { return com.google.common.collect.ImmutableSortedSet.of(); },dd8a3cd11b14a6de6982db770f2accc51bebdf38,2018-01-10 13:56:23,3
151513,java_com_google_gerrit_server_project_ProjectCache.java,java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix);,50f7bccc8fee3d1ca6a327ec3d54bb86a422ebab,java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix);,3ddbd1dc834303098884c7202bd7e2c34c6fc154,com.google.common.collect.ImmutableSortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix);,4f6c33d6401cc999e1f7fe7f6fa95fe106794e1a,2018-01-10 13:56:23,3
151514,java_com_google_gerrit_server_util_RegexListSearcher.java,"public java.lang.Iterable<T> search(java.util.List<T> list) { com.google.gerrit.server.util.RegexListSearcher.checkNotNull(list); int begin; int end; if (0 < (prefixLen)) { begin = find(list, prefixBegin); end = find(list, prefixEnd); } else { begin = 0; end = list.size(); } if (prefixOnly) { return begin < end ? list.subList(begin, end) : com.google.common.collect.ImmutableList.<T>of(); } return com.google.common.collect.Iterables.filter(list.subList(begin, end), ( x) -> pattern.run(apply(x))); }",8af86a18daaf6f7daa457cf108ffb073f8d1ada1,"public java.util.stream.Stream<T> search(java.util.List<T> list) { com.google.gerrit.server.util.RegexListSearcher.checkNotNull(list); int begin; int end; if (0 < (prefixLen)) { begin = find(list, prefixBegin); end = find(list, prefixEnd); } else { begin = 0; end = list.size(); } if (prefixOnly) { return (begin < end ? list.subList(begin, end) : com.google.common.collect.ImmutableList.<T>of()).stream(); } return list.subList(begin, end).stream().filter(( x) -> pattern.run(toStringFunc.apply(x))); }",6389fdcb435942bb7b7729f69e3007bff601ebc6,"public java.util.stream.Stream<T> search(java.util.List<T> list) { com.google.gerrit.server.util.RegexListSearcher.checkNotNull(list); int begin; int end; if (0 < (prefixLen)) { java.util.List<java.lang.String> strings = com.google.common.collect.Lists.transform(list, toStringFunc::apply); begin = com.google.gerrit.server.util.RegexListSearcher.find(strings, prefixBegin); end = com.google.gerrit.server.util.RegexListSearcher.find(strings, prefixEnd); } else { begin = 0; end = list.size(); } if (begin >= end) { return java.util.stream.Stream.empty(); } java.util.stream.Stream<T> result = list.subList(begin, end).stream(); if (!(prefixOnly)) { result = result.filter(( x) -> pattern.run(toStringFunc.apply(x))); } return result; }",d9f06823a6a2b7da8df1191aac5809de5189f2de,2018-01-10 16:07:01,5
151514,java_com_google_gerrit_server_util_RegexListSearcher.java,public static com.google.gerrit.server.util.RegexListSearcher<java.lang.String> ofStrings(java.lang.String re) { return new com.google.gerrit.server.util.RegexListSearcher<java.lang.String>(re) { @java.lang.Override public java.lang.String apply(java.lang.String in) { return in; } }; },c874571c0a249b7c9002aae60f86957e971ec05e,"public static com.google.gerrit.server.util.RegexListSearcher<java.lang.String> ofStrings(java.lang.String re) { return new com.google.gerrit.server.util.RegexListSearcher(re, ( in) -> in); }",587b427a1fddf2a06021c52eaca645fd30842916,"public static com.google.gerrit.server.util.RegexListSearcher<java.lang.String> ofStrings(java.lang.String re) { return new com.google.gerrit.server.util.RegexListSearcher<>(re, ( in) -> in); }",50f47150b760647b25c55ffff02a3d35c23f85ee,2018-01-10 16:07:01,5
151514,java_com_google_gerrit_server_util_RegexListSearcher.java,"private int find(java.util.List<T> list, java.lang.String p) { int r = java.util.Collections.binarySearch(com.google.common.collect.Lists.transform(list, this), p); return r < 0 ? -(r + 1) : r; }",9d135306db46a324993690435acc6661b96c4cf7,"private int find(java.util.List<T> list, java.lang.String p) { int r = java.util.Collections.binarySearch(com.google.common.collect.Lists.transform(list, toStringFunc), p); return r < 0 ? -(r + 1) : r; }",731e7109a4efc046bf43a2478ae3ab5c54af831c,"private static int find(java.util.List<java.lang.String> list, java.lang.String p) { int r = java.util.Collections.binarySearch(list, p); return r < 0 ? -(r + 1) : r; }",7cd7c893a81f3f18b409edd5262eebbbb7cdb6b2,2018-01-10 16:07:01,5
151373,javatests_com_google_gerrit_server_project_RefControlTest.java,"private org.eclipse.jgit.internal.storage.dfs.InMemoryRepository add(com.google.gerrit.server.git.ProjectConfig pc) { com.google.gerrit.server.rules.PrologEnvironment.Factory envFactory = null; com.google.gerrit.server.project.ProjectControl.AssistedFactory projectControlFactory = null; com.google.gerrit.server.rules.RulesCache rulesCache = null; com.google.gerrit.server.config.SitePaths sitePaths = null; java.util.List<com.google.gerrit.extensions.api.projects.CommentLinkInfo> commentLinks = null; org.eclipse.jgit.internal.storage.dfs.InMemoryRepository repo; try { repo = repoManager.createRepository(pc.getName()); if ((pc.getProject()) == null) { pc.load(repo); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.lang.RuntimeException(e); } all.put(pc.getName(), new com.google.gerrit.server.project.ProjectState(sitePaths, projectCache, allProjectsName, allUsersName, projectControlFactory, envFactory, repoManager, rulesCache, commentLinks, capabilityCollectionFactory, pc)); return repo; }",3ea8e5606fbf3c37b087ab33e0aa15ef128ca404,"private org.eclipse.jgit.internal.storage.dfs.InMemoryRepository add(com.google.gerrit.server.git.ProjectConfig pc) { com.google.gerrit.server.rules.PrologEnvironment.Factory envFactory = null; com.google.gerrit.server.rules.RulesCache rulesCache = null; com.google.gerrit.server.config.SitePaths sitePaths = null; java.util.List<com.google.gerrit.extensions.api.projects.CommentLinkInfo> commentLinks = null; org.eclipse.jgit.internal.storage.dfs.InMemoryRepository repo; try { repo = repoManager.createRepository(pc.getName()); if ((pc.getProject()) == null) { pc.load(repo); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.lang.RuntimeException(e); } all.put(pc.getName(), new com.google.gerrit.server.project.ProjectState(sitePaths, projectCache, allProjectsName, allUsersName, null, envFactory, repoManager, rulesCache, commentLinks, capabilityCollectionFactory, pc)); return repo; }",13fba6ca5e5e5dd1a1cab29de6f721ffc6ed4d1b,"private org.eclipse.jgit.internal.storage.dfs.InMemoryRepository add(com.google.gerrit.server.git.ProjectConfig pc) { com.google.gerrit.server.rules.PrologEnvironment.Factory envFactory = null; com.google.gerrit.server.rules.RulesCache rulesCache = null; com.google.gerrit.server.config.SitePaths sitePaths = null; java.util.List<com.google.gerrit.extensions.api.projects.CommentLinkInfo> commentLinks = null; org.eclipse.jgit.internal.storage.dfs.InMemoryRepository repo; try { repo = repoManager.createRepository(pc.getName()); if ((pc.getProject()) == null) { pc.load(repo); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.lang.RuntimeException(e); } all.put(pc.getName(), new com.google.gerrit.server.project.ProjectState(sitePaths, projectCache, allProjectsName, allUsersName, projectControlFactory, envFactory, repoManager, rulesCache, commentLinks, capabilityCollectionFactory, pc)); return repo; }",445f54407098e3612bb58ed892e59eec5cc38a5e,2018-01-10 23:27:09,3
150690,java_com_google_gerrit_server_account_AccountConfig.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.google.gerrit.server.account.AccountConfig setEagerLoading(boolean eagerLoading) { checkState(((loadedAccount) == null), ""Account %s already loaded"", accountId.get()); this.eagerLoading = eagerLoading; return this; }",a0a497d31071fe043c67d391ba156dd904c44071,"public com.google.gerrit.server.account.AccountConfig setEagerParsing(boolean eagerParsing) { checkState(((loadedAccount) == null), ""Account %s already loaded"", accountId.get()); this.eagerParsing = eagerParsing; return this; }",173cc94faaa0014c2d46ef35e866d51f03858dc5,2018-01-11 10:17:05,8
150690,java_com_google_gerrit_server_git_validators_AccountValidator.java,"private java.util.Optional<com.google.gerrit.reviewdb.client.Account> loadAccount(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { rw.reset(); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId); accountConfig.load(rw, commit); return accountConfig.getLoadedAccount(); }",5ef122d0d27f6bb9ab9111962a9a9dfa6253b1d2,"private java.util.Optional<com.google.gerrit.reviewdb.client.Account> loadAccount(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId commit, @com.google.gerrit.common.Nullable java.util.List<java.lang.String> messages) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { rw.reset(); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId); accountConfig.setEagerLoading(true).load(rw, commit); if (messages != null) { messages.addAll(accountConfig.getValidationErrors().stream().map(ValidationError::getMessage).collect(java.util.stream.Collectors.toSet())); } return accountConfig.getLoadedAccount(); }",c9b45dddc177a6a515998f3b2885e49dd082e359,"private java.util.Optional<com.google.gerrit.reviewdb.client.Account> loadAccount(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId commit, @com.google.gerrit.common.Nullable java.util.List<java.lang.String> messages) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { rw.reset(); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId); accountConfig.setEagerParsing(true).load(rw, commit); if (messages != null) { messages.addAll(accountConfig.getValidationErrors().stream().map(ValidationError::getMessage).collect(java.util.stream.Collectors.toSet())); } return accountConfig.getLoadedAccount(); }",5dd8f131f6e0890fca093b98a8728e1c50980c3c,2018-01-11 10:17:05,8
150690,java_com_google_gerrit_server_account_AccountConfig.java,"@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision) != null) { rw.reset(); rw.markStart(revision); rw.sort(RevSort.REVERSE); registeredOn = new java.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadedAccount = java.util.Optional.of(parse(cfg, revision.name())); } else { loadedAccount = java.util.Optional.empty(); } }",2b4c9dd875103af9cd759372b367c2762b04ada5,"@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision) != null) { rw.reset(); rw.markStart(revision); rw.sort(RevSort.REVERSE); registeredOn = new java.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config accountConfig = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadedAccount = java.util.Optional.of(parse(accountConfig, revision.name())); watchConfig = new com.google.gerrit.server.account.WatchConfig(accountId, readConfig(WatchConfig.WATCH_CONFIG), this); if (eagerLoading) { watchConfig.parse(); } } else { loadedAccount = java.util.Optional.empty(); } }",6d339b84f735021ca78770acc95ee8c17c618c64,"@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision) != null) { rw.reset(); rw.markStart(revision); rw.sort(RevSort.REVERSE); registeredOn = new java.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config accountConfig = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadedAccount = java.util.Optional.of(parse(accountConfig, revision.name())); watchConfig = new com.google.gerrit.server.account.WatchConfig(accountId, readConfig(WatchConfig.WATCH_CONFIG), this); if (eagerParsing) { watchConfig.parse(); } } else { loadedAccount = java.util.Optional.empty(); } }",8dc2aad95284e023394483e044f61b3560cb2df4,2018-01-11 10:17:05,8
150350,src_main_java_com_googlesource_gerrit_plugins_its_base_workflow_action_AddSoyComment.java,"@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest, java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throws java.io.IOException { com.google.template.soy.SoyFileSet.Builder builder = com.google.template.soy.SoyFileSet.builder(); java.lang.String template = null; java.lang.String templateName = actionRequest.getParameter(1); if (templateName.isEmpty()) { com.googlesource.gerrit.plugins.its.base.workflow.action.AddSoyComment.log.error(""No template name given in {}"", actionRequest); } else { template = templateName; } if (!(com.google.common.base.Strings.isNullOrEmpty(template))) { java.lang.String comment = soyTextTemplate(builder, template, properties); its.addComment(issue, comment); } }",27dcb149c778ecc9ff11f1d4cd696833f91ffc00,"@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest, java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throws java.io.IOException { java.lang.String template = actionRequest.getParameter(1); if (!(template.isEmpty())) { java.lang.String comment = soyTextTemplate(com.google.template.soy.SoyFileSet.builder(), template, properties); its.addComment(issue, comment); } else { com.googlesource.gerrit.plugins.its.base.workflow.action.AddSoyComment.log.error(""No template name given in {}"", actionRequest); } }",d9b692356e081dd66d3c30da963ab9a5f863b9f7,"@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest, java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throws java.io.IOException { java.lang.String comment = buildComment(actionRequest, properties); if (!(com.google.common.base.Strings.isNullOrEmpty(comment))) { its.addComment(issue, comment); } }",65bf66d2ddfb0661c23a604bbd65503bd79db2a4,2018-01-11 12:23:03,4
148713,src_main_java_com_googlesource_gerrit_plugins_its_base_workflow_action_LogEvent.java,"private void logProperty(com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.Level level, com.googlesource.gerrit.plugins.its.base.workflow.Property property) { java.lang.String message = property.toString(); switch (level) { case ERROR : com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.log.error(message); break; case WARN : com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.log.warn(message); break; case INFO : com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.log.info(message); break; case DEBUG : com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.log.debug(message); break; default : com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.log.error(""Undefined log level.""); } }",0bf99526457e64edcceab6731c928f811a1ed49b,@java.lang.Override void logProperty(com.googlesource.gerrit.plugins.its.base.workflow.Property property) { com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.log.debug(property.toString()); },16a7e34e9b291cc74672b8fdaeece3ebf68304aa,"private void logProperty(com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.Level level, com.googlesource.gerrit.plugins.its.base.workflow.Property property) { java.lang.String message = property.toString(); switch (level) { case ERROR : com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.log.error(message); break; case WARN : com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.log.warn(message); break; case INFO : com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.log.info(message); break; case DEBUG : com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.log.debug(message); break; default : com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.log.error(""Undefined log level.""); } }",0bf99526457e64edcceab6731c928f811a1ed49b,2018-01-11 12:23:03,4
148713,src_main_java_com_googlesource_gerrit_plugins_its_base_workflow_action_LogEvent.java,"@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest, java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throws java.io.IOException { java.lang.String levelParameter = actionRequest.getParameter(1); if (levelParameter != null) { levelParameter = levelParameter.toLowerCase(); } com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.Level level = com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.Level.INFO; if (""error"".equals(levelParameter)) { level = com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.Level.ERROR; } else if (""warn"".equals(levelParameter)) { level = com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.Level.WARN; } else if (""info"".equals(levelParameter)) { level = com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.Level.INFO; } else if (""debug"".equals(levelParameter)) { level = com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.Level.DEBUG; } for (com.googlesource.gerrit.plugins.its.base.workflow.Property property : properties) { logProperty(level, property); } }",fd4c4e1db53f556f0448e031b803284fd1f1b2fd,"@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest, java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throws java.io.IOException { com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.Level level = com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.Level.fromString(actionRequest.getParameter(1)); for (com.googlesource.gerrit.plugins.its.base.workflow.Property property : properties) { level.logProperty(property); } }",ac929678112e8ebec2a902e72dceef0e498bb5ec,"@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest, java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throws java.io.IOException { com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.Level level = com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.Level.fromString(actionRequest.getParameter(1)); for (com.googlesource.gerrit.plugins.its.base.workflow.Property property : properties) { logProperty(level, property); } }",ba86db9b627cbc7ce0848611c8334af958ab36b3,2018-01-11 12:23:03,4
148714,src_test_java_com_googlesource_gerrit_plugins_its_base_its_ItsConfigTest.java,"public void BROKEN_testIsEnabledUnknownEvent() { com.google.gerrit.server.events.Event event = new com.google.gerrit.server.events.Event(""foo"") {}; com.googlesource.gerrit.plugins.its.base.its.ItsConfig itsConfig = createItsConfig(); replayMocks(); assertFalse(itsConfig.isEnabled(event)); assertLogMessageContains(""not recognised and ignored""); }",ceb3a6a030e64e2f0129aa77182b560408ef81df,"public void BROKEN_testIsEnabledUnknownEvent() { com.google.gerrit.server.events.ChangeEvent event = createMock(com.google.gerrit.server.events.ChangeEvent.class); com.googlesource.gerrit.plugins.its.base.its.ItsConfig itsConfig = createItsConfig(); replayMocks(); assertFalse(itsConfig.isEnabled(event)); assertLogMessageContains(""not recognised and ignored""); }",d602913e36d304d8f9f5b18c723911fac828cb75,"public void BROKEN_testIsEnabledUnknownEvent() { com.google.gerrit.server.events.RefEvent event = createMock(com.google.gerrit.server.events.RefEvent.class); com.googlesource.gerrit.plugins.its.base.its.ItsConfig itsConfig = createItsConfig(); replayMocks(); assertFalse(itsConfig.isEnabled(event)); assertLogMessageContains(""not recognised and ignored""); }",a2d0fba1f9dfcceb72967851e49fc6f73ede54b7,2018-01-11 12:23:03,5
148714,src_main_java_com_googlesource_gerrit_plugins_its_base_workflow_ActionController.java,"@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(itsConfig.isEnabled(event))) { return; } java.util.Set<java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property>> propertiesCollections = propertyExtractor.extractFrom(event); for (java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties : propertiesCollections) { java.util.Collection<com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest> actions = ruleBase.actionRequestsFor(properties); if (!(actions.isEmpty())) { for (com.googlesource.gerrit.plugins.its.base.workflow.Property property : properties) { if (""issue"".equals(property.getKey())) { java.lang.String issue = property.getValue(); actionExecutor.execute(issue, actions, properties); } } } } }",faed34d0de02126de94ea9765a256df4366d007a,"@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(event instanceof com.google.gerrit.server.events.RefEvent)) { return; } com.google.gerrit.server.events.RefEvent refEvent = ((com.google.gerrit.server.events.RefEvent) (event)); if (!(itsConfig.isEnabled(refEvent))) { return; } java.util.Set<java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property>> propertiesCollections = propertyExtractor.extractFrom(refEvent); for (java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties : propertiesCollections) { java.util.Collection<com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest> actions = ruleBase.actionRequestsFor(properties); if (!(actions.isEmpty())) { for (com.googlesource.gerrit.plugins.its.base.workflow.Property property : properties) { if (""issue"".equals(property.getKey())) { java.lang.String issue = property.getValue(); actionExecutor.execute(issue, actions, properties); } } } } }",2feae8449d27c84936b36f16d68f5b8ed7f3ce76,@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (event instanceof com.google.gerrit.server.events.RefEvent) { com.google.gerrit.server.events.RefEvent refEvent = ((com.google.gerrit.server.events.RefEvent) (event)); if (itsConfig.isEnabled(refEvent)) { handleEvent(refEvent); } } },d3a2ac3fc8d6fc0914b8dc96d431a19543d25bbb,2018-01-11 12:23:03,5
151673,java_com_google_gerrit_server_edit_ChangeEditModifier.java,"private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } try { permissionBackend.user(currentUser).database(reviewDb).change(notes).check(ChangePermission.ADD_PATCH_SET); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException(""edit not permitted"", denied); } }",fecf3d591ddff099fa4081782f9765919cb8f830,"private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } try { permissionBackend.user(currentUser).database(reviewDb).change(notes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException(""edit not permitted"", denied); } }",e09d26f002216013a5dcd2c0190a56e719e3b15d,"private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } try { permissionBackend.user(currentUser).database(reviewDb).change(notes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException(""edit not permitted"", denied); } }",35e064f1f8e2cd4e2ff7d4717e97247c2924289c,2018-01-12 10:08:20,5
151673,java_com_google_gerrit_server_project_RefControl.java,"boolean canAddPatchSet() { return (projectControl.controlForRef((""refs/for/"" + (refName))).canPerform(Permission.ADD_PATCH_SET)) && (isProjectStatePermittingWrite()); }",9ffc82e3012693fffb90b4156e848647ff78e044,"boolean canAddPatchSet() { return projectControl.controlForRef((""refs/for/"" + (refName))).canPerform(Permission.ADD_PATCH_SET); }",a1b0cda95f050660f1e52e6a385c8d690e449745,boolean canAddPatchSet() { return projectControl.controlForRef(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + (refName))).canPerform(Permission.ADD_PATCH_SET); },285d1fae5ce2b7c3629fb4f3729512bb2046690d,2018-01-12 10:08:20,5
151673,java_com_google_gerrit_server_restapi_change_PutMessage.java,"private void ensureCanEditCommitMessage(com.google.gerrit.server.notedb.ChangeNotes changeNotes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException { if (!(currentUserProvider.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } try { permissionBackend.user(currentUserProvider.get()).database(db.get()).change(changeNotes).check(ChangePermission.ADD_PATCH_SET); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException(""modifying commit message not permitted"", denied); } }",965a101b58450ba162181cfe69f1f279d93210c6,"private void ensureCanEditCommitMessage(com.google.gerrit.server.notedb.ChangeNotes changeNotes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUserProvider.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } try { permissionBackend.user(currentUserProvider.get()).database(db.get()).change(changeNotes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(changeNotes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException(""modifying commit message not permitted"", denied); } }",af47dcea78072d417bae665d1e4b1e3a4fba1bfd,"private void ensureCanEditCommitMessage(com.google.gerrit.server.notedb.ChangeNotes changeNotes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUserProvider.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } try { permissionBackend.user(currentUserProvider.get()).database(db.get()).change(changeNotes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(changeNotes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException(""modifying commit message not permitted"", denied); } }",4cb67c03578e01fb734e9a1dacd55c3257c4a0de,2018-01-12 10:08:20,5
151673,java_com_google_gerrit_server_project_ProjectState.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void checkStatePermitsWrite() throws com.google.gerrit.extensions.restapi.AuthException { if (!(getProject().getState().permitsWrite())) { throw new com.google.gerrit.extensions.restapi.AuthException(""project state does not permit write""); } }",3aa4728db8e0d4f7c50dadf1fe1d69af1d9983b6,"public void checkStatePermitsWrite() throws com.google.gerrit.extensions.restapi.ResourceConflictException { if (!(statePermitsWrite())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""project state "" + (getProject().getState().name())) + "" does not permit write"")); } }",0750c237ed3b8afc17295f740a8122f9667f2300,2018-01-12 10:08:20,5
152132,java_com_google_gerrit_server_restapi_change_Submit.java,"@java.lang.Override public com.google.gerrit.server.restapi.change.Submit.Output apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.api.changes.SubmitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { input.onBehalfOf = com.google.common.base.Strings.emptyToNull(input.onBehalfOf); com.google.gerrit.server.IdentifiedUser submitter; if ((input.onBehalfOf) != null) { submitter = onBehalfOf(rsrc, input); } else { rsrc.permissions().check(ChangePermission.SUBMIT); submitter = rsrc.getUser().asIdentifiedUser(); } return new com.google.gerrit.server.restapi.change.Submit.Output(mergeChange(rsrc, submitter, input)); }",0a3be0faccfeffd5700d75550aeb510bcc31e080,"@java.lang.Override public com.google.gerrit.server.restapi.change.Submit.Output apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.api.changes.SubmitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { input.onBehalfOf = com.google.common.base.Strings.emptyToNull(input.onBehalfOf); com.google.gerrit.server.IdentifiedUser submitter; if ((input.onBehalfOf) != null) { submitter = onBehalfOf(rsrc, input); } else { rsrc.permissions().check(ChangePermission.SUBMIT); submitter = rsrc.getUser().asIdentifiedUser(); } projectCache.checkedGet(rsrc.getProject()).statePermitsWrite(); return new com.google.gerrit.server.restapi.change.Submit.Output(mergeChange(rsrc, submitter, input)); }",0306e9b383611362d294688c14fd95b78f801920,"@java.lang.Override public com.google.gerrit.server.restapi.change.Submit.Output apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.api.changes.SubmitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { input.onBehalfOf = com.google.common.base.Strings.emptyToNull(input.onBehalfOf); com.google.gerrit.server.IdentifiedUser submitter; if ((input.onBehalfOf) != null) { submitter = onBehalfOf(rsrc, input); } else { rsrc.permissions().check(ChangePermission.SUBMIT); submitter = rsrc.getUser().asIdentifiedUser(); } projectCache.checkedGet(rsrc.getProject()).checkStatePermitsWrite(); return new com.google.gerrit.server.restapi.change.Submit.Output(mergeChange(rsrc, submitter, input)); }",ee990958e307cdfaae029d3e52b427b5fd30f5b9,2018-01-15 15:47:31,2
152294,javatests_com_google_gerrit_server_project_RefControlTest.java,"@org.junit.Test public void unblockForceEditTopicName() { block(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.ANONYMOUS_USERS, ""refs/heads/*""); allow(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.DEVS, ""refs/heads/*"").setForce(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.DEVS); assertThat(u.controlForRef(""refs/heads/master"").canForceEditTopicName()).named(""u can edit topic name"").isTrue(); }",977e60f9a94c410e48eb07076f37609411936173,"@org.junit.Test public void unblockForceEditTopicName() { block(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.ANONYMOUS_USERS, ""refs/heads/*""); allow(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.DEVS, ""refs/heads/*"").setForce(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.DEVS); assertThat(u.controlForRef(""refs/heads/master"").canPerform(Permission.EDIT_TOPIC_NAME)).named(""u can edit topic name"").isTrue(); }",4025c8332f78d77185b780fb9492d7a398dcb1ec,"@org.junit.Test public void unblockForceEditTopicName() { block(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.ANONYMOUS_USERS, ""refs/heads/*""); allow(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.DEVS, ""refs/heads/*"").setForce(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.DEVS); assertThat(u.controlForRef(""refs/heads/master"").canForceEditTopicName()).named(""u can edit topic name"").isTrue(); }",977e60f9a94c410e48eb07076f37609411936173,2018-01-16 09:03:05,5
152294,javatests_com_google_gerrit_server_project_RefControlTest.java,"@org.junit.Test public void unblockInLocalForceEditTopicName_Fails() { block(parent, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.ANONYMOUS_USERS, ""refs/heads/*""); allow(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.DEVS, ""refs/heads/*"").setForce(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.REGISTERED_USERS); assertThat(u.controlForRef(""refs/heads/master"").canForceEditTopicName()).named(""u can't edit topic name"").isFalse(); }",4d8442c5c6579acb616ae43aefa4833786b1a986,"@org.junit.Test public void unblockInLocalForceEditTopicName_Fails() { block(parent, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.ANONYMOUS_USERS, ""refs/heads/*""); allow(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.DEVS, ""refs/heads/*"").setForce(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.REGISTERED_USERS); assertThat(u.controlForRef(""refs/heads/master"").canPerform(Permission.EDIT_TOPIC_NAME)).named(""u can't edit topic name"").isFalse(); }",0a495dc3c8eff047f27a6bdff873063f963eea41,"@org.junit.Test public void unblockInLocalForceEditTopicName_Fails() { block(parent, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.ANONYMOUS_USERS, ""refs/heads/*""); allow(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.DEVS, ""refs/heads/*"").setForce(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.REGISTERED_USERS); assertThat(u.controlForRef(""refs/heads/master"").canForceEditTopicName()).named(""u can't edit topic name"").isFalse(); }",4d8442c5c6579acb616ae43aefa4833786b1a986,2018-01-16 09:03:05,5
152294,java_com_google_gerrit_server_project_ChangeControl.java,private boolean canEditTopicName() { if (getChange().getStatus().isOpen()) { return ((((isOwner()) || (refControl.isOwner())) || (getProjectControl().isOwner())) || (refControl.canEditTopicName())) || (getProjectControl().isAdmin()); } return refControl.canForceEditTopicName(); },471302166ddc0f565b984b99ca4c6580a4ac4103,private boolean canEditTopicName() { if (getChange().getStatus().isOpen()) { return ((((isOwner()) || (refControl.isOwner())) || (getProjectControl().isOwner())) || (refControl.canPerform(Permission.EDIT_TOPIC_NAME))) || (getProjectControl().isAdmin()); } return refControl.canPerform(Permission.EDIT_TOPIC_NAME); },22f38808bcf2948ded67b84648778de699877ae9,private boolean canEditTopicName() { if (getChange().getStatus().isOpen()) { return ((((isOwner()) || (refControl.isOwner())) || (getProjectControl().isOwner())) || (refControl.canPerform(Permission.EDIT_TOPIC_NAME))) || (getProjectControl().isAdmin()); } return refControl.canForceEditTopicName(); },6a035b080a5cf8d02c6eacfa487d5f9551937c5f,2018-01-16 09:03:05,5
152294,java_com_google_gerrit_server_project_RefControl.java,"private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case CREATE_TAG : return canPerform(Permission.CREATE_TAG); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + (refName))).canSubmit(true); case READ_PRIVATE_CHANGES : return canViewPrivateChanges(); case READ_CONFIG : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFF_BY))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",21afff2a29c82630b98a2800c5b43a46f5974bb5,"private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case CREATE_TAG : return canPerform(Permission.CREATE_TAG); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + (refName))).canSubmit(true); case READ_PRIVATE_CHANGES : return canPerform(Permission.VIEW_PRIVATE_CHANGES); case READ_CONFIG : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFF_BY))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",b8867cf0c728fb3d10eac5bc90deb9c4664bd66b,"private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return (isVisible()) && (getProjectControl().getProjectState().statePermitsRead()); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case CREATE_TAG : return canPerform(Permission.CREATE_TAG); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + (refName))).canSubmit(true); case READ_PRIVATE_CHANGES : return canPerform(Permission.VIEW_PRIVATE_CHANGES); case READ_CONFIG : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFF_BY))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",9a0a599160999418fffc6b9861132d2d71c56bb0,2018-01-16 09:03:05,5
152590,java_com_google_gerrit_server_git_ProjectConfig.java,"private void loadExtensionPanelSections(org.eclipse.jgit.lib.Config rc) { java.util.Map<java.lang.String, java.lang.String> lowerNames = com.google.common.collect.Maps.newHashMapWithExpectedSize(2); extensionPanelSections = com.google.common.collect.Maps.newLinkedHashMap(); for (java.lang.String name : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.EXTENSION_PANELS)) { java.lang.String lower = name.toLowerCase(); if (lowerNames.containsKey(lower)) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, java.lang.String.format(""Extension Panels \""%s\"" conflicts with \""%s\"""", name, lowerNames.get(lower)))); } lowerNames.put(lower, name); extensionPanelSections.put(name, new java.util.ArrayList(java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.EXTENSION_PANELS, name, com.google.gerrit.server.git.ProjectConfig.KEY_PANEL)))); } }",324dfa13fb0b6eb7978f7ed9a7da2a661e8ec1ae,"private void loadExtensionPanelSections(org.eclipse.jgit.lib.Config rc) { java.util.Map<java.lang.String, java.lang.String> lowerNames = new java.util.HashMap<>(2); extensionPanelSections = new java.util.LinkedHashMap<>(); for (java.lang.String name : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.EXTENSION_PANELS)) { java.lang.String lower = name.toLowerCase(); if (lowerNames.containsKey(lower)) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, java.lang.String.format(""Extension Panels \""%s\"" conflicts with \""%s\"""", name, lowerNames.get(lower)))); } lowerNames.put(lower, name); extensionPanelSections.put(name, new java.util.ArrayList(java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.EXTENSION_PANELS, name, com.google.gerrit.server.git.ProjectConfig.KEY_PANEL)))); } }",77585c65b888fb71d4fd1f9293374be8df5ec7a3,"private void loadExtensionPanelSections(org.eclipse.jgit.lib.Config rc) { java.util.Map<java.lang.String, java.lang.String> lowerNames = com.google.common.collect.Maps.newHashMapWithExpectedSize(2); extensionPanelSections = new java.util.LinkedHashMap<>(); for (java.lang.String name : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.EXTENSION_PANELS)) { java.lang.String lower = name.toLowerCase(); if (lowerNames.containsKey(lower)) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, java.lang.String.format(""Extension Panels \""%s\"" conflicts with \""%s\"""", name, lowerNames.get(lower)))); } lowerNames.put(lower, name); extensionPanelSections.put(name, new java.util.ArrayList(java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.EXTENSION_PANELS, name, com.google.gerrit.server.git.ProjectConfig.KEY_PANEL)))); } }",b82435bf5ea74923a582b08ab9a77a0bd5e0b7e5,2018-01-17 05:05:51,4
150390,src_main_java_com_googlesource_gerrit_plugins_gitiles_GerritGitilesAccess.java,"@java.lang.Override public org.eclipse.jgit.lib.Config getConfig() throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = com.googlesource.gerrit.plugins.gitiles.Resolver.getNameKey(req); com.google.gerrit.server.project.ProjectState state = projectCache.get(nameKey); if (state != null) { org.eclipse.jgit.lib.Config cfg = state.getConfig(""gitiles.config"").getWithInheritance(); if (cfg != null) { return cfg; } } else { state = projectCache.getAllProjects(); org.eclipse.jgit.lib.Config cfg = state.getConfig(""gitiles.config"").get(); if (cfg != null) { return cfg; } } return new org.eclipse.jgit.lib.Config(); }",207fbc7dcc9b702c7ac24fd21dd2bc7e983eea01,"@java.lang.Override public org.eclipse.jgit.lib.Config getConfig() throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = com.googlesource.gerrit.plugins.gitiles.Resolver.getNameKey(req); com.google.gerrit.server.project.ProjectState state = projectCache.get(nameKey); if (state != null) { org.eclipse.jgit.lib.Config cfg = state.getConfig(""gitiles.config"").getWithInheritance(); if ((cfg != null) && ((cfg.getSections().size()) > 0)) { return cfg; } } else { state = projectCache.getAllProjects(); org.eclipse.jgit.lib.Config cfg = state.getConfig(""gitiles.config"").get(); if ((cfg != null) && ((cfg.getSections().size()) > 0)) { return cfg; } } try { org.eclipse.jgit.lib.Config cfg = getGlobalConfig(); return cfg; } catch (java.lang.Exception e) { } return new org.eclipse.jgit.lib.Config(); }",97f889a7a915af8e2e44e3afc7943649a132043d,"@java.lang.Override public org.eclipse.jgit.lib.Config getConfig() throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = com.googlesource.gerrit.plugins.gitiles.Resolver.getNameKey(req); com.google.gerrit.server.project.ProjectState state = projectCache.get(nameKey); if (state != null) { org.eclipse.jgit.lib.Config cfg = state.getConfig(""gitiles.config"").getWithInheritance(); if ((cfg != null) && ((cfg.getSections().size()) > 0)) { return cfg; } } else { state = projectCache.getAllProjects(); org.eclipse.jgit.lib.Config cfg = state.getConfig(""gitiles.config"").get(); if ((cfg != null) && ((cfg.getSections().size()) > 0)) { return cfg; } } return getGlobalConfig(); }",edb690ec486dda25a75c2783fda81930b96dae68,2018-01-17 07:24:01,3
150390,src_main_java_com_googlesource_gerrit_plugins_gitiles_GerritGitilesAccess.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private org.eclipse.jgit.lib.Config getGlobalConfig() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.io.File sitePath = new java.io.File(""."").getAbsoluteFile(); if (""."".equals(sitePath.getName())) { sitePath = sitePath.getParentFile(); } java.io.File cfgFile = new java.io.File(sitePath, ""etc/gitiles.config""); org.eclipse.jgit.storage.file.FileBasedConfig cfg = new org.eclipse.jgit.storage.file.FileBasedConfig(cfgFile, org.eclipse.jgit.util.FS.DETECTED); if (cfg.getFile().exists()) { cfg.load(); } return cfg; }",a241f4465bf4384bc2345123d0c9ecd9ddd82582,"private org.eclipse.jgit.lib.Config getGlobalConfig() throws java.io.IOException { java.io.File cfgFile = site.etc_dir.resolve(""gitiles.config"").toFile(); org.eclipse.jgit.storage.file.FileBasedConfig cfg = new org.eclipse.jgit.storage.file.FileBasedConfig(cfgFile, org.eclipse.jgit.util.FS.DETECTED); try { if (cfg.getFile().exists()) { cfg.load(); } } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException(e); } return cfg; }",fa6dc9689ad4536ed5efa19d87f3a7722942baaf,2018-01-17 07:24:01,3
152710,java_com_google_gerrit_extensions_api_projects_CommentLinkInfo.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (o instanceof com.google.gerrit.extensions.api.projects.CommentLinkInfo) { com.google.gerrit.extensions.api.projects.CommentLinkInfo that = ((com.google.gerrit.extensions.api.projects.CommentLinkInfo) (o)); return ((((this.match) == null ? (that.match) == null : this.match.equals(that.match)) && ((this.link) == null ? (that.link) == null : this.link.equals(that.link))) && ((this.html) == null ? (that.html) == null : this.html.equals(that.html))) && ((this.enabled) == null ? (that.enabled) == null : this.enabled.equals(that.enabled)); } return false; },86031c6b5c858ee6d6311284f4d9e593efce1ce5,"@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (o instanceof com.google.gerrit.extensions.api.projects.CommentLinkInfo) { com.google.gerrit.extensions.api.projects.CommentLinkInfo that = ((com.google.gerrit.extensions.api.projects.CommentLinkInfo) (o)); return (((java.util.Objects.equals(this.match, that.match)) && (java.util.Objects.equals(this.link, that.link))) && (java.util.Objects.equals(this.html, that.html))) && (java.util.Objects.equals(this.enabled, that.enabled)); } return false; }",51fdeb8050faa2ddf83a8ce1140492bfca2a3bcf,2018-01-17 12:11:12,3
150430,src_main_java_com_googlesource_gerrit_plugins_gitiles_FilteredRepository.java,"com.googlesource.gerrit.plugins.gitiles.FilteredRepository create(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(name); if (!(projectState.getProject().getState().permitsRead())) { throw new com.google.gerrit.server.project.NoSuchProjectException(name); } return new com.googlesource.gerrit.plugins.gitiles.FilteredRepository(projectState, userProvider.get(), repoManager.openRepository(name), visibleRefFilterFactory, permissionBackend); }",f6a91a4c4cce60dd55596f5c6a733bdcb7695ab4,"com.googlesource.gerrit.plugins.gitiles.FilteredRepository create(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(name); try { if (!(projectState.getProject().getState().permitsRead())) { throw new com.google.gerrit.server.project.NoSuchProjectException(name); } } catch (java.lang.Exception e) { throw new com.google.gerrit.server.project.NoSuchProjectException(name); } return new com.googlesource.gerrit.plugins.gitiles.FilteredRepository(projectState, userProvider.get(), repoManager.openRepository(name), visibleRefFilterFactory, permissionBackend); }",76baa022b400b4aebd1a9cb0f6a16408dfd45e5e,"com.googlesource.gerrit.plugins.gitiles.FilteredRepository create(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(name); if ((projectState == null) || (!(projectState.getProject().getState().permitsRead()))) { throw new com.google.gerrit.server.project.NoSuchProjectException(name); } return new com.googlesource.gerrit.plugins.gitiles.FilteredRepository(projectState, userProvider.get(), repoManager.openRepository(name), visibleRefFilterFactory, permissionBackend); }",bf6029caaa3566fae103ed0f97072767a8b038d8,2018-01-17 12:31:13,2
152712,java_com_google_gerrit_server_git_ValidationError.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public int hashCode() { int h = 1; h *= 1000003; h ^= ((this.message) == null) ? 0 : this.message.hashCode(); return h; },779d0cb2bc227beb4b7fae90393f5d1a04fdbf42,@java.lang.Override public int hashCode() { return java.util.Objects.hashCode(message); },d7d153f414002d0d6a761907ecf6dd7f584cd985,2018-01-18 01:22:22,7
152712,java_com_google_gerrit_server_git_ValidationError.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (o instanceof com.google.gerrit.server.git.ValidationError) { com.google.gerrit.server.git.ValidationError that = ((com.google.gerrit.server.git.ValidationError) (o)); return (this.message) == null ? (that.message) == null : this.message.equals(that.message); } return false; },bd32b8f28310f143e2b9e61a0cf38da248649801,"@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (o instanceof com.google.gerrit.server.git.ValidationError) { com.google.gerrit.server.git.ValidationError that = ((com.google.gerrit.server.git.ValidationError) (o)); return java.util.Objects.equals(this.message, that.message); } return false; }",0bfe5842458baf88f73c38591a88a24427cbf674,2018-01-18 01:22:22,7
152610,java_com_google_gerrit_server_restapi_project_ProjectsCollection.java,"@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }",3a362391c37b40bd19bc9ce392099795b2b2fb19,"@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }",6bdb18e45ca264197a98239cfad4c054333c7db8,"@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }",1d2b3ea7a1db7141ea84ed01680035a0f069f1f2,2018-01-18 09:36:04,3
152610,java_com_google_gerrit_server_restapi_project_ProjectsCollection.java,"public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return parse(id, true); }",4fd39fcfefacb1e714749c4ea1ee800a619327bc,"public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return parse(id, true); }",6a8bbf90fec11ebbfb6f3abf0d48af800dcb0c66,"public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return parse(id, true); }",bb4bdc719746d3f023c04a95f38bbe7a56794a9a,2018-01-18 09:36:04,3
152610,java_com_google_gerrit_server_restapi_project_ProjectsCollection.java,"public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""Project Not Found: %s"", id)); } return rsrc; }",7b4f7848a64082c8e493adbc7c1ce6827459cfb0,"public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""Project Not Found: %s"", id)); } return rsrc; }",02ad693dfc104bb44fc5226669b8e4c83642a797,"public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""Project Not Found: %s"", id)); } return rsrc; }",cd71924e2db95e437fb2ab5d57475533cffb8f4c,2018-01-18 09:36:04,3
152610,java_com_google_gerrit_server_project_ProjectState.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void checkStatePermitsRead() throws com.google.gerrit.extensions.restapi.ResourceConflictException { if (!(statePermitsWrite())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""project state "" + (getProject().getState().name())) + "" does not permit read"")); } }",75752774a7789b8a39cd9d84a206e0d10603a728,"public void checkStatePermitsRead() throws com.google.gerrit.extensions.restapi.ResourceConflictException { if (!(statePermitsRead())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""project state "" + (getProject().getState().name())) + "" does not permit read"")); } }",6f676dff9a147a90ba81a72230ac8d905af0a46e,2018-01-18 09:36:04,3
152610,java_com_google_gerrit_server_restapi_project_ChildProjectsCollection.java,"@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProjectState()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",8e14eff2ddceb4bff265b888f2bcfb4d67842391,"@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProjectState()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",dd064087fcee16859d284503d70cecd2a7af5d7b,"@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProjectState()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",6fce88b92c6e4f1dc5e7092e20b2b9424c46c54c,2018-01-18 09:36:04,3
153110,java_com_google_gerrit_server_project_RefControl.java,"private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return (isVisible()) && (getProjectControl().getProjectState().statePermitsRead()); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case CREATE_TAG : return canPerform(Permission.CREATE_TAG); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + (refName))).canSubmit(true); case READ_PRIVATE_CHANGES : return canPerform(Permission.VIEW_PRIVATE_CHANGES); case READ_CONFIG : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFF_BY))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",9a0a599160999418fffc6b9861132d2d71c56bb0,"private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return (isVisible()) && (getProjectControl().getProjectState().statePermitsRead()); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case CREATE_TAG : case CREATE_SIGNED_TAG : return canPerform(perm.name()); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + (refName))).canSubmit(true); case READ_PRIVATE_CHANGES : return canPerform(Permission.VIEW_PRIVATE_CHANGES); case READ_CONFIG : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFF_BY))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",60aefe5aedd922a10efc1a0e465907a4a430ec97,"private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return (isVisible()) && (getProjectControl().getProjectState().statePermitsRead()); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case CREATE_TAG : case CREATE_SIGNED_TAG : return canPerform(perm.permissionName().get()); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + (refName))).canSubmit(true); case READ_PRIVATE_CHANGES : return canPerform(Permission.VIEW_PRIVATE_CHANGES); case READ_CONFIG : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFF_BY))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",860263a6fd9c37f31432f4037b56eec84bcf3097,2018-01-18 18:43:07,2
152451,java_com_google_gerrit_server_account_AccountCacheImpl.java,"private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())); }",32161f94fbe65e4789b19801c4c8dfbb9123e757,"private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.EditPreferencesInfo.defaults())); }",8f875173fe5d6ef8c71fe6a5a5000ebc1c8c3386,"private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return com.google.gerrit.server.account.AccountState.forAccount(allUsersName, account); }",e276b21fea557ea7c5a6c611b577cc79ed69018a,2018-01-19 08:09:50,3
152050,java_com_google_gerrit_server_account_AccountsUpdate.java,"public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision()) != null ? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), accountConfig.getProjectWatches(), accountConfig.getGeneralPreferences()); }",49fcae3fdb4cc2d743778275201fee7776e916b3,"public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision()) != null ? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences())); }",5ab61d5f1095e04efbba61f7a9783c8a9b30a85a,"public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { return com.google.gerrit.server.account.AccountState.fromAccountConfig(allUsersName, externalIds, accountConfig, extIdNotes).get(); }",7f410ec4dc32a682fe34cec9ffd0b8fb090310ec,2018-01-19 08:09:50,5
152295,java_com_google_gerrit_server_account_AccountState.java,"public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throws java.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return java.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, account, (accountConfig.getExternalIdsRev().isPresent() ? externalIds.byAccount(account.getId(), accountConfig.getExternalIdsRev().get()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()))); }",7ce37ada7406610dd92a0351b1cbe42a63bf9887,"public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throws java.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return java.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, account, (accountConfig.getExternalIdsRev().isPresent() ? externalIds.byAccount(account.getId(), accountConfig.getExternalIdsRev().get()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences()))); }",34ea10cc758f31020bf662a89b3558b919718432,"public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throws java.io.IOException { return com.google.gerrit.server.account.AccountState.fromAccountConfig(allUsersName, externalIds, accountConfig, null); }",22ac9e2e3364d22bf02e1b8faebfc73a918d3c0b,2018-01-19 08:09:50,4
152295,javatests_com_google_gerrit_server_index_account_AccountFieldTest.java,"@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = ""0e39795bb25dc914118224995c53c5c36923a461""; account.setMetaId(metaId); java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())))); assertThat(values).hasSize(1); java.lang.String expectedValue = ((((allUsersName.get()) + "":"") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + "":"") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }",92c3c2a92ca4a2dc03bec830201135ef50c20481,"@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = ""0e39795bb25dc914118224995c53c5c36923a461""; account.setMetaId(metaId); java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())))); assertThat(values).hasSize(1); java.lang.String expectedValue = ((((allUsersName.get()) + "":"") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + "":"") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }",aba853039ff96c08636ed07cd571fa196d83baa2,"@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = ""0e39795bb25dc914118224995c53c5c36923a461""; account.setMetaId(metaId); java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(com.google.gerrit.server.account.AccountState.forAccount(allUsersName, account))); assertThat(values).hasSize(1); java.lang.String expectedValue = ((((allUsersName.get()) + "":"") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + "":"") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }",5dd144554d74742e5ce3779a1f697fa3a5ed872b,2018-01-19 08:09:50,4
152295,java_com_google_gerrit_testing_FakeAccountCache.java,"private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); }",e2987b8b28abf53e772ca7fc259fc38541f5e369,"private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())); }",e459e8c42e7cd3f595b0c4eb4ae8e67cd7366489,"private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return com.google.gerrit.server.account.AccountState.forAccount(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account); }",abfe9bc7611fac3a62685c038940f8aae510b3af,2018-01-19 08:09:50,4
152295,javatests_com_google_gerrit_server_mail_send_FromAddressGeneratorProviderTest.java,"private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); }",2bb9b115cce7c25f89a6ba47127368cb83237999,"private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())); }",44fb2a285f1da222619ad12fa5186757b802e2e4,"private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return com.google.gerrit.server.account.AccountState.forAccount(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account); }",72933a1ace73f0b2f6d790e64df3395c90a3292b,2018-01-19 08:09:50,4
152295,java_com_google_gerrit_server_account_AccountCacheImpl.java,"private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); }",954a32c6f2342fc8ba2a9db50b69688e9969efdf,"private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())); }",32161f94fbe65e4789b19801c4c8dfbb9123e757,"private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return com.google.gerrit.server.account.AccountState.forAccount(allUsersName, account); }",e276b21fea557ea7c5a6c611b577cc79ed69018a,2018-01-19 08:09:50,4
152050,java_com_google_gerrit_server_account_AccountCacheImpl.java,"private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableMap.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); }",4ca21e44158e96ea0e784058c5aa54b52b213528,"private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); }",954a32c6f2342fc8ba2a9db50b69688e9969efdf,"private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return com.google.gerrit.server.account.AccountState.forAccount(allUsersName, account); }",e276b21fea557ea7c5a6c611b577cc79ed69018a,2018-01-19 08:09:50,5
152050,java_com_google_gerrit_server_account_AccountState.java,"public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throws java.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return java.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, account, (accountConfig.getExternalIdsRev().isPresent() ? externalIds.byAccount(account.getId(), accountConfig.getExternalIdsRev().get()) : com.google.common.collect.ImmutableSet.of()), accountConfig.getProjectWatches(), accountConfig.getGeneralPreferences())); }",e3d05d4183913cccc94bc904554f7976b5c0c26d,"public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throws java.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return java.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, account, (accountConfig.getExternalIdsRev().isPresent() ? externalIds.byAccount(account.getId(), accountConfig.getExternalIdsRev().get()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()))); }",7ce37ada7406610dd92a0351b1cbe42a63bf9887,"public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throws java.io.IOException { return com.google.gerrit.server.account.AccountState.fromAccountConfig(allUsersName, externalIds, accountConfig, null); }",22ac9e2e3364d22bf02e1b8faebfc73a918d3c0b,2018-01-19 08:09:50,5
152050,javatests_com_google_gerrit_server_index_account_AccountFieldTest.java,"@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = ""0e39795bb25dc914118224995c53c5c36923a461""; account.setMetaId(metaId); java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableMap.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()))); assertThat(values).hasSize(1); java.lang.String expectedValue = ((((allUsersName.get()) + "":"") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + "":"") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }",7d3a9c257fe6e85c40a6f192ac7ef45d2d554edb,"@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = ""0e39795bb25dc914118224995c53c5c36923a461""; account.setMetaId(metaId); java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())))); assertThat(values).hasSize(1); java.lang.String expectedValue = ((((allUsersName.get()) + "":"") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + "":"") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }",92c3c2a92ca4a2dc03bec830201135ef50c20481,"@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = ""0e39795bb25dc914118224995c53c5c36923a461""; account.setMetaId(metaId); java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(com.google.gerrit.server.account.AccountState.forAccount(allUsersName, account))); assertThat(values).hasSize(1); java.lang.String expectedValue = ((((allUsersName.get()) + "":"") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + "":"") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }",5dd144554d74742e5ce3779a1f697fa3a5ed872b,2018-01-19 08:09:50,5
152451,java_com_google_gerrit_server_account_AccountsUpdate.java,"public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision()) != null ? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences())); }",39ff080b6ab2db00452c5059f557e26e90b08eb8,"public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision()) != null ? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getEditPreferences())); }",1542272cdf6e16c3ce254c4b17f16f6e49b9dfa5,"public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { return com.google.gerrit.server.account.AccountState.fromAccountConfig(allUsersName, externalIds, accountConfig, extIdNotes).get(); }",7f410ec4dc32a682fe34cec9ffd0b8fb090310ec,2018-01-19 08:09:50,3
152295,java_com_google_gerrit_server_account_AccountsUpdate.java,"public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision()) != null ? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences())); }",5ab61d5f1095e04efbba61f7a9783c8a9b30a85a,"public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision()) != null ? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences())); }",39ff080b6ab2db00452c5059f557e26e90b08eb8,"public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { return com.google.gerrit.server.account.AccountState.fromAccountConfig(allUsersName, externalIds, accountConfig, extIdNotes).get(); }",7f410ec4dc32a682fe34cec9ffd0b8fb090310ec,2018-01-19 08:09:50,4
152451,java_com_google_gerrit_server_account_AccountState.java,"public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throws java.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return java.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, account, (accountConfig.getExternalIdsRev().isPresent() ? externalIds.byAccount(account.getId(), accountConfig.getExternalIdsRev().get()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences()))); }",34ea10cc758f31020bf662a89b3558b919718432,"public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throws java.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return java.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, account, (accountConfig.getExternalIdsRev().isPresent() ? externalIds.byAccount(account.getId(), accountConfig.getExternalIdsRev().get()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getEditPreferences()))); }",cabf087db6f6c9ee431b282d42d83cb1978e2600,"public static java.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throws java.io.IOException { return com.google.gerrit.server.account.AccountState.fromAccountConfig(allUsersName, externalIds, accountConfig, null); }",22ac9e2e3364d22bf02e1b8faebfc73a918d3c0b,2018-01-19 08:09:50,3
152451,javatests_com_google_gerrit_server_index_account_AccountFieldTest.java,"@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = ""0e39795bb25dc914118224995c53c5c36923a461""; account.setMetaId(metaId); java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())))); assertThat(values).hasSize(1); java.lang.String expectedValue = ((((allUsersName.get()) + "":"") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + "":"") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }",aba853039ff96c08636ed07cd571fa196d83baa2,"@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = ""0e39795bb25dc914118224995c53c5c36923a461""; account.setMetaId(metaId); java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.EditPreferencesInfo.defaults())))); assertThat(values).hasSize(1); java.lang.String expectedValue = ((((allUsersName.get()) + "":"") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + "":"") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }",55dae1fc60a445241e58a9c7482f9aebfe7802fb,"@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = ""0e39795bb25dc914118224995c53c5c36923a461""; account.setMetaId(metaId); java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(com.google.gerrit.server.account.AccountState.forAccount(allUsersName, account))); assertThat(values).hasSize(1); java.lang.String expectedValue = ((((allUsersName.get()) + "":"") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + "":"") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }",5dd144554d74742e5ce3779a1f697fa3a5ed872b,2018-01-19 08:09:50,3
152451,java_com_google_gerrit_testing_FakeAccountCache.java,"private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())); }",e459e8c42e7cd3f595b0c4eb4ae8e67cd7366489,"private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.EditPreferencesInfo.defaults())); }",10cab40ee675551bd3c4d86326179608924cdb12,"private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return com.google.gerrit.server.account.AccountState.forAccount(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account); }",abfe9bc7611fac3a62685c038940f8aae510b3af,2018-01-19 08:09:50,3
152295,java_com_google_gerrit_server_account_AccountsUpdate.java,"public com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate.AccountUpdater updater) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(( r) -> { com.google.gerrit.server.account.AccountConfig accountConfig = read(r, accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(new java.sql.Timestamp(committerIdent.getWhen().getTime())); com.google.gerrit.server.account.AccountState accountState = new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); com.google.gerrit.server.account.InternalAccountUpdate.Builder updateBuilder = com.google.gerrit.server.account.InternalAccountUpdate.builder(); updater.update(accountState, updateBuilder); com.google.gerrit.server.account.InternalAccountUpdate update = updateBuilder.build(); accountConfig.setAccountUpdate(update); com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = createExternalIdNotes(r, accountConfig.getExternalIdsRev(), accountId, update); com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount updatedAccounts = new com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount(allUsersName, externalIds, message, accountConfig, extIdNotes); updatedAccounts.setCreated(true); return updatedAccounts; }).get(); }",1018b1e7fe4de36f565883a5ef4578492abba0b0,"public com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate.AccountUpdater updater) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(( r) -> { com.google.gerrit.server.account.AccountConfig accountConfig = read(r, accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(new java.sql.Timestamp(committerIdent.getWhen().getTime())); com.google.gerrit.server.account.AccountState accountState = new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())); com.google.gerrit.server.account.InternalAccountUpdate.Builder updateBuilder = com.google.gerrit.server.account.InternalAccountUpdate.builder(); updater.update(accountState, updateBuilder); com.google.gerrit.server.account.InternalAccountUpdate update = updateBuilder.build(); accountConfig.setAccountUpdate(update); com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = createExternalIdNotes(r, accountConfig.getExternalIdsRev(), accountId, update); com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount updatedAccounts = new com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount(allUsersName, externalIds, message, accountConfig, extIdNotes); updatedAccounts.setCreated(true); return updatedAccounts; }).get(); }",75f3f509d820ceea279d628123d286a9b414fea1,"public com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate.AccountUpdater updater) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(( r) -> { com.google.gerrit.server.account.AccountConfig accountConfig = read(r, accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(new java.sql.Timestamp(committerIdent.getWhen().getTime())); com.google.gerrit.server.account.AccountState accountState = com.google.gerrit.server.account.AccountState.forAccount(allUsersName, account); com.google.gerrit.server.account.InternalAccountUpdate.Builder updateBuilder = com.google.gerrit.server.account.InternalAccountUpdate.builder(); updater.update(accountState, updateBuilder); com.google.gerrit.server.account.InternalAccountUpdate update = updateBuilder.build(); accountConfig.setAccountUpdate(update); com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = createExternalIdNotes(r, accountConfig.getExternalIdsRev(), accountId, update); com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount updatedAccounts = new com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount(allUsersName, externalIds, message, accountConfig, extIdNotes); updatedAccounts.setCreated(true); return updatedAccounts; }).get(); }",4c3b5190f755be35b2c3bf1c397b255fbfa5c29c,2018-01-19 08:09:50,4
152050,javatests_com_google_gerrit_server_mail_send_FromAddressGeneratorProviderTest.java,"private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableMap.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); }",3ef3cfe13f330b1f530193c8167c6db4aaf85a68,"private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); }",2bb9b115cce7c25f89a6ba47127368cb83237999,"private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return com.google.gerrit.server.account.AccountState.forAccount(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account); }",72933a1ace73f0b2f6d790e64df3395c90a3292b,2018-01-19 08:09:50,5
152451,javatests_com_google_gerrit_server_mail_send_FromAddressGeneratorProviderTest.java,"private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())); }",44fb2a285f1da222619ad12fa5186757b802e2e4,"private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.EditPreferencesInfo.defaults())); }",95dfc1049aa20d23add3a28fdad31d12e2a377c6,"private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return com.google.gerrit.server.account.AccountState.forAccount(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account); }",72933a1ace73f0b2f6d790e64df3395c90a3292b,2018-01-19 08:09:50,3
151691,java_com_google_gerrit_server_account_AccountConfig.java,"private void saveProjectWatches() throws java.io.IOException { if ((accountUpdate.isPresent()) && ((!(accountUpdate.get().getDeletedProjectWatches().isEmpty())) || (!(accountUpdate.get().getUpdatedProjectWatches().isEmpty())))) { java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = watchConfig.getProjectWatches(); accountUpdate.get().getDeletedProjectWatches().forEach(( pw) -> projectWatches.remove(pw)); accountUpdate.get().getUpdatedProjectWatches().forEach(( pw, nt) -> projectWatches.put(pw, nt)); saveConfig(WatchConfig.WATCH_CONFIG, watchConfig.save(projectWatches)); } }",2cd841af52b129b474a7cadc9180ea6639471211,"private void saveProjectWatches() throws java.io.IOException { if ((accountUpdate.isPresent()) && ((!(accountUpdate.get().getDeletedProjectWatches().isEmpty())) || (!(accountUpdate.get().getUpdatedProjectWatches().isEmpty())))) { java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = new java.util.HashMap(watchConfig.getProjectWatches()); accountUpdate.get().getDeletedProjectWatches().forEach(( pw) -> projectWatches.remove(pw)); accountUpdate.get().getUpdatedProjectWatches().forEach(( pw, nt) -> projectWatches.put(pw, nt)); saveConfig(WatchConfig.WATCH_CONFIG, watchConfig.save(com.google.common.collect.ImmutableMap.copyOf(projectWatches))); } }",c005c1dd8e64418fd5ac116ba382c72635ee9f55,"private void saveProjectWatches() throws java.io.IOException { if ((accountUpdate.isPresent()) && ((!(accountUpdate.get().getDeletedProjectWatches().isEmpty())) || (!(accountUpdate.get().getUpdatedProjectWatches().isEmpty())))) { java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = new java.util.HashMap(watchConfig.getProjectWatches()); accountUpdate.get().getDeletedProjectWatches().forEach(( pw) -> projectWatches.remove(pw)); accountUpdate.get().getUpdatedProjectWatches().forEach(( pw, nt) -> projectWatches.put(pw, nt)); saveConfig(WatchConfig.WATCH_CONFIG, watchConfig.save(projectWatches)); } }",71587b12879865a4495efd766a96ce4e2837e30a,2018-01-19 08:09:50,5
151691,java_com_google_gerrit_server_account_AccountConfig.java,"public java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { checkLoaded(); return watchConfig.getProjectWatches(); }",568aa55f234b51243e93ab18e00b821b5a22ea25,"public com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { checkLoaded(); return watchConfig.getProjectWatches(); }",4189b74709f7e9b8a69d6d5133c5d5f88884e294,"public com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, com.google.common.collect.ImmutableSet<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { checkLoaded(); return watchConfig.getProjectWatches(); }",c469092232df1e5a027faefd694418fef4d91b2e,2018-01-19 08:09:50,5
151691,java_com_google_gerrit_server_account_WatchConfig.java,"@com.google.common.annotations.VisibleForTesting public static java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.git.ValidationError.Sink validationErrorSink) { java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = new java.util.HashMap<>(); for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) { java.lang.String[] notifyValues = cfg.getStringList(com.google.gerrit.server.account.WatchConfig.PROJECT, projectName, com.google.gerrit.server.account.WatchConfig.KEY_NOTIFY); for (java.lang.String nv : notifyValues) { if (com.google.common.base.Strings.isNullOrEmpty(nv)) { continue; } com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.parse(accountId, projectName, nv, validationErrorSink); if (notifyValue == null) { continue; } com.google.gerrit.server.account.WatchConfig.ProjectWatchKey key = com.google.gerrit.server.account.WatchConfig.ProjectWatchKey.create(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName), notifyValue.filter()); if (!(projectWatches.containsKey(key))) { projectWatches.put(key, java.util.EnumSet.noneOf(com.google.gerrit.server.account.WatchConfig.NotifyType.class)); } projectWatches.get(key).addAll(notifyValue.notifyTypes()); } } return projectWatches; }",88b42a44ff023172be0ce43f19e5ead8c81578da,"@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.git.ValidationError.Sink validationErrorSink) { java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = new java.util.HashMap<>(); for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) { java.lang.String[] notifyValues = cfg.getStringList(com.google.gerrit.server.account.WatchConfig.PROJECT, projectName, com.google.gerrit.server.account.WatchConfig.KEY_NOTIFY); for (java.lang.String nv : notifyValues) { if (com.google.common.base.Strings.isNullOrEmpty(nv)) { continue; } com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.parse(accountId, projectName, nv, validationErrorSink); if (notifyValue == null) { continue; } com.google.gerrit.server.account.WatchConfig.ProjectWatchKey key = com.google.gerrit.server.account.WatchConfig.ProjectWatchKey.create(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName), notifyValue.filter()); if (!(projectWatches.containsKey(key))) { projectWatches.put(key, java.util.EnumSet.noneOf(com.google.gerrit.server.account.WatchConfig.NotifyType.class)); } projectWatches.get(key).addAll(notifyValue.notifyTypes()); } } return com.google.common.collect.ImmutableMap.copyOf(projectWatches); }",667f684cf0f105de8674ea390cf141e946c04761,"@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, com.google.common.collect.ImmutableSet<com.google.gerrit.server.account.WatchConfig.NotifyType>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.git.ValidationError.Sink validationErrorSink) { java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = new java.util.HashMap<>(); for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) { java.lang.String[] notifyValues = cfg.getStringList(com.google.gerrit.server.account.WatchConfig.PROJECT, projectName, com.google.gerrit.server.account.WatchConfig.KEY_NOTIFY); for (java.lang.String nv : notifyValues) { if (com.google.common.base.Strings.isNullOrEmpty(nv)) { continue; } com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.parse(accountId, projectName, nv, validationErrorSink); if (notifyValue == null) { continue; } com.google.gerrit.server.account.WatchConfig.ProjectWatchKey key = com.google.gerrit.server.account.WatchConfig.ProjectWatchKey.create(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName), notifyValue.filter()); if (!(projectWatches.containsKey(key))) { projectWatches.put(key, java.util.EnumSet.noneOf(com.google.gerrit.server.account.WatchConfig.NotifyType.class)); } projectWatches.get(key).addAll(notifyValue.notifyTypes()); } } return com.google.gerrit.server.account.WatchConfig.immutableCopyOf(projectWatches); }",91dd76cef594180f76df57d5477988d355099318,2018-01-19 08:09:50,5
151691,java_com_google_gerrit_server_account_WatchConfig.java,"public org.eclipse.jgit.lib.Config save(java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches) { this.projectWatches = projectWatches; for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) { cfg.unsetSection(com.google.gerrit.server.account.WatchConfig.PROJECT, projectName); } com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> notifyValuesByProject = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (java.util.Map.Entry<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> e : projectWatches.entrySet()) { com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.create(e.getKey().filter(), e.getValue()); notifyValuesByProject.put(e.getKey().project().get(), notifyValue.toString()); } for (java.util.Map.Entry<java.lang.String, java.util.Collection<java.lang.String>> e : notifyValuesByProject.asMap().entrySet()) { cfg.setStringList(com.google.gerrit.server.account.WatchConfig.PROJECT, e.getKey(), com.google.gerrit.server.account.WatchConfig.KEY_NOTIFY, new java.util.ArrayList(e.getValue())); } return cfg; }",0c15b4925388ceac6876cb580b8c4c5651a428c0,"public org.eclipse.jgit.lib.Config save(com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches) { this.projectWatches = projectWatches; for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) { cfg.unsetSection(com.google.gerrit.server.account.WatchConfig.PROJECT, projectName); } com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> notifyValuesByProject = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (java.util.Map.Entry<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> e : projectWatches.entrySet()) { com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.create(e.getKey().filter(), e.getValue()); notifyValuesByProject.put(e.getKey().project().get(), notifyValue.toString()); } for (java.util.Map.Entry<java.lang.String, java.util.Collection<java.lang.String>> e : notifyValuesByProject.asMap().entrySet()) { cfg.setStringList(com.google.gerrit.server.account.WatchConfig.PROJECT, e.getKey(), com.google.gerrit.server.account.WatchConfig.KEY_NOTIFY, new java.util.ArrayList(e.getValue())); } return cfg; }",e74b3d026485a8b36f5ed0222f04ecf96e20a92c,"public org.eclipse.jgit.lib.Config save(java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches) { this.projectWatches = com.google.gerrit.server.account.WatchConfig.immutableCopyOf(projectWatches); for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) { cfg.unsetSection(com.google.gerrit.server.account.WatchConfig.PROJECT, projectName); } com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> notifyValuesByProject = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (java.util.Map.Entry<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> e : projectWatches.entrySet()) { com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.create(e.getKey().filter(), e.getValue()); notifyValuesByProject.put(e.getKey().project().get(), notifyValue.toString()); } for (java.util.Map.Entry<java.lang.String, java.util.Collection<java.lang.String>> e : notifyValuesByProject.asMap().entrySet()) { cfg.setStringList(com.google.gerrit.server.account.WatchConfig.PROJECT, e.getKey(), com.google.gerrit.server.account.WatchConfig.KEY_NOTIFY, new java.util.ArrayList(e.getValue())); } return cfg; }",cc5fad8d4cfe6899fdb5278bc26737d894eb4e3b,2018-01-19 08:09:50,5
151691,java_com_google_gerrit_server_account_WatchConfig.java,"public java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { if ((projectWatches) == null) { parse(); } return projectWatches; }",a1d87bc6a1ebd2fdb0a685a57a23650d1101d158,"public com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { if ((projectWatches) == null) { parse(); } return projectWatches; }",8584ddb09230a7f4eaea0aeab798f27497f51e31,"public com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, com.google.common.collect.ImmutableSet<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { if ((projectWatches) == null) { parse(); } return projectWatches; }",587dfda1cdc63060075230002a6180237f071703,2018-01-19 08:09:50,5
151691,java_com_google_gerrit_server_account_AccountState.java,"public java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { return projectWatches; }",9950fa6a7984e10f636a67505184548b36fe838d,"public com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { return projectWatches; }",56732a44ae884528bbf75480d114b0539e72b359,"public com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, com.google.common.collect.ImmutableSet<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { return projectWatches; }",fa7f0cb9441f3d3373c83210d7f94743db6d2956,2018-01-19 08:09:50,5
152050,java_com_google_gerrit_server_account_AccountsUpdate.java,"public com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate.AccountUpdater updater) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(( r) -> { com.google.gerrit.server.account.AccountConfig accountConfig = read(r, accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(new java.sql.Timestamp(committerIdent.getWhen().getTime())); com.google.gerrit.server.account.AccountState accountState = new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableMap.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); com.google.gerrit.server.account.InternalAccountUpdate.Builder updateBuilder = com.google.gerrit.server.account.InternalAccountUpdate.builder(); updater.update(accountState, updateBuilder); com.google.gerrit.server.account.InternalAccountUpdate update = updateBuilder.build(); accountConfig.setAccountUpdate(update); com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = createExternalIdNotes(r, accountConfig.getExternalIdsRev(), accountId, update); com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount updatedAccounts = new com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount(allUsersName, externalIds, message, accountConfig, extIdNotes); updatedAccounts.setCreated(true); return updatedAccounts; }); }",f69245c572d8ddc1d987b0ad7f5b196eaa965da7,"public com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate.AccountUpdater updater) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(( r) -> { com.google.gerrit.server.account.AccountConfig accountConfig = read(r, accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(new java.sql.Timestamp(committerIdent.getWhen().getTime())); com.google.gerrit.server.account.AccountState accountState = new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); com.google.gerrit.server.account.InternalAccountUpdate.Builder updateBuilder = com.google.gerrit.server.account.InternalAccountUpdate.builder(); updater.update(accountState, updateBuilder); com.google.gerrit.server.account.InternalAccountUpdate update = updateBuilder.build(); accountConfig.setAccountUpdate(update); com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = createExternalIdNotes(r, accountConfig.getExternalIdsRev(), accountId, update); com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount updatedAccounts = new com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount(allUsersName, externalIds, message, accountConfig, extIdNotes); updatedAccounts.setCreated(true); return updatedAccounts; }); }",5a1e52035d93e7e919509c4081691a49248aeaa6,"public com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate.AccountUpdater updater) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(( r) -> { com.google.gerrit.server.account.AccountConfig accountConfig = read(r, accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(new java.sql.Timestamp(committerIdent.getWhen().getTime())); com.google.gerrit.server.account.AccountState accountState = com.google.gerrit.server.account.AccountState.forAccount(allUsersName, account); com.google.gerrit.server.account.InternalAccountUpdate.Builder updateBuilder = com.google.gerrit.server.account.InternalAccountUpdate.builder(); updater.update(accountState, updateBuilder); com.google.gerrit.server.account.InternalAccountUpdate update = updateBuilder.build(); accountConfig.setAccountUpdate(update); com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = createExternalIdNotes(r, accountConfig.getExternalIdsRev(), accountId, update); com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount updatedAccounts = new com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount(allUsersName, externalIds, message, accountConfig, extIdNotes); updatedAccounts.setCreated(true); return updatedAccounts; }); }",2e75cc9f38e6270c75c7062a45243e2bffa6452a,2018-01-19 08:09:50,5
152051,java_com_google_gerrit_server_account_AccountResolver.java,"public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.regex.Matcher m = java.util.regex.Pattern.compile(""^.* \\(([1-9][0-9]*)\\)$"").matcher(nameOrEmail); if (m.matches()) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(m.group(1)); if ((accounts.get(id)) != null) { return java.util.Collections.singleton(id); } return java.util.Collections.emptySet(); } if (nameOrEmail.matches(""^[1-9][0-9]*$"")) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(nameOrEmail); if ((accounts.get(id)) != null) { return java.util.Collections.singleton(id); } return java.util.Collections.emptySet(); } if (nameOrEmail.matches(Account.USER_NAME_PATTERN)) { com.google.gerrit.server.account.AccountState who = byId.getByUsername(nameOrEmail); if (who != null) { return java.util.Collections.singleton(who.getAccount().getId()); } } return findAllByNameOrEmail(nameOrEmail); }",d265bf256b8faff78689ae1cda6c40369a559997,"public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.regex.Matcher m = java.util.regex.Pattern.compile(""^.* \\(([1-9][0-9]*)\\)$"").matcher(nameOrEmail); if (m.matches()) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(m.group(1)); if (accounts.get(id).isPresent()) { return java.util.Collections.singleton(id); } return java.util.Collections.emptySet(); } if (nameOrEmail.matches(""^[1-9][0-9]*$"")) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(nameOrEmail); if (accounts.get(id).isPresent()) { return java.util.Collections.singleton(id); } return java.util.Collections.emptySet(); } if (nameOrEmail.matches(Account.USER_NAME_PATTERN)) { com.google.gerrit.server.account.AccountState who = byId.getByUsername(nameOrEmail); if (who != null) { return java.util.Collections.singleton(who.getAccount().getId()); } } return findAllByNameOrEmail(nameOrEmail); }",17a90bcaca0b52e5d8e2e0ca474260a4b9fdb75f,"public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.regex.Matcher m = java.util.regex.Pattern.compile(""^.* \\(([1-9][0-9]*)\\)$"").matcher(nameOrEmail); if (m.matches()) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(m.group(1)); return com.google.common.collect.Streams.stream(accounts.get(id)).map(( a) -> id).collect(toImmutableSet()); } if (nameOrEmail.matches(""^[1-9][0-9]*$"")) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(nameOrEmail); return com.google.common.collect.Streams.stream(accounts.get(id)).map(( a) -> id).collect(toImmutableSet()); } if (nameOrEmail.matches(Account.USER_NAME_PATTERN)) { com.google.gerrit.server.account.AccountState who = byId.getByUsername(nameOrEmail); if (who != null) { return java.util.Collections.singleton(who.getAccount().getId()); } } return findAllByNameOrEmail(nameOrEmail); }",60b86ffe98615749a9868e6f70b0f20f42863269,2018-01-19 08:09:50,6
152050,java_com_google_gerrit_testing_FakeAccountCache.java,"private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableMap.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); }",48f5aa8ce20076d486c8ca47612b577652747efa,"private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); }",e2987b8b28abf53e772ca7fc259fc38541f5e369,"private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return com.google.gerrit.server.account.AccountState.forAccount(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account); }",abfe9bc7611fac3a62685c038940f8aae510b3af,2018-01-19 08:09:50,5
153170,java_com_google_gerrit_server_project_RemoveReviewerControl.java,"private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { if (canRemoveReviewerWithoutPermissionCheck(notes.getChange(), currentUser, reviewer, val)) { return; } permissionBackend.user(currentUser).change(notes).database(dbProvider).check(ChangePermission.REMOVE_REVIEWER); }",0bafbe8999da1751b901b290032651b92d826e03,"private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { if (com.google.gerrit.server.project.RemoveReviewerControl.canRemoveReviewerWithoutPermissionCheck(permissionBackend, notes.getChange(), currentUser, reviewer, val)) { return; } permissionBackend.user(currentUser).change(notes).database(dbProvider).check(ChangePermission.REMOVE_REVIEWER); }",0af0fb0bc70ebd56579a9cb76ab4b660b5819159,"private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException { if (com.google.gerrit.server.project.RemoveReviewerControl.canRemoveReviewerWithoutPermissionCheck(permissionBackend, notes.getChange(), currentUser, reviewer, val)) { return; } permissionBackend.user(currentUser).change(notes).database(dbProvider).check(ChangePermission.REMOVE_REVIEWER); }",1695f0132fe3eb19e1e9b5663625c48799dcf1d6,2018-01-19 09:02:11,4
153170,java_com_google_gerrit_server_project_RemoveReviewerControl.java,"private boolean canRemoveReviewerWithoutPermissionCheck(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int value) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { if (!(change.getStatus().isOpen())) { return false; } if (currentUser.isIdentifiedUser()) { com.google.gerrit.reviewdb.client.Account.Id aId = currentUser.getAccountId(); if (aId.equals(reviewer)) { return true; } else if ((aId.equals(change.getOwner())) && (0 <= value)) { return true; } } com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(change.getProject()); if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(change.getProject()); } com.google.gerrit.server.project.ProjectControl ctl = projectState.controlFor(currentUser); if (((ctl.controlForRef(change.getDest()).isOwner()) || (ctl.isOwner())) || (ctl.isAdmin())) { return true; } return false; }",b193608ea0afe9f7b684ec4842762367f11b75b0,"private static boolean canRemoveReviewerWithoutPermissionCheck(com.google.gerrit.server.permissions.PermissionBackend permissionBackend, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { if (!(change.getStatus().isOpen())) { return false; } if (currentUser.isIdentifiedUser()) { com.google.gerrit.reviewdb.client.Account.Id aId = currentUser.getAccountId(); if (aId.equals(reviewer)) { return true; } else if ((aId.equals(change.getOwner())) && (0 <= value)) { return true; } } com.google.gerrit.server.permissions.PermissionBackend.WithUser withUser = permissionBackend.user(currentUser); com.google.gerrit.server.permissions.PermissionBackend.ForProject forProject = withUser.project(change.getProject()); if ((com.google.gerrit.server.project.RemoveReviewerControl.check(forProject.ref(change.getDest().get()), RefPermission.WRITE_CONFIG)) || (com.google.gerrit.server.project.RemoveReviewerControl.check(withUser, GlobalPermission.ADMINISTRATE_SERVER))) { return true; } return false; }",089041813094fc262b102a42113cd81176a9de24,"private static boolean canRemoveReviewerWithoutPermissionCheck(com.google.gerrit.server.permissions.PermissionBackend permissionBackend, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int value) throws com.google.gerrit.server.permissions.PermissionBackendException { if (!(change.getStatus().isOpen())) { return false; } if (currentUser.isIdentifiedUser()) { com.google.gerrit.reviewdb.client.Account.Id aId = currentUser.getAccountId(); if (aId.equals(reviewer)) { return true; } else if ((aId.equals(change.getOwner())) && (0 <= value)) { return true; } } com.google.gerrit.server.permissions.PermissionBackend.WithUser withUser = permissionBackend.user(currentUser); com.google.gerrit.server.permissions.PermissionBackend.ForProject forProject = withUser.project(change.getProject()); if ((com.google.gerrit.server.project.RemoveReviewerControl.check(forProject.ref(change.getDest().get()), RefPermission.WRITE_CONFIG)) || (com.google.gerrit.server.project.RemoveReviewerControl.check(withUser, GlobalPermission.ADMINISTRATE_SERVER))) { return true; } return false; }",8c007212c0b1e5e18c2fa09dc9501031d9de30bd,2018-01-19 09:02:11,4
153170,java_com_google_gerrit_server_project_RemoveReviewerControl.java,"public boolean testRemoveReviewer(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.server.OrmException, java.io.IOException { if (canRemoveReviewerWithoutPermissionCheck(cd.change(), currentUser, reviewer, value)) { return true; } return permissionBackend.user(currentUser).change(cd).database(dbProvider).test(ChangePermission.REMOVE_REVIEWER); }",e6a1f08e810e7007a3c05864bea4ac444d0a30b3,"public boolean testRemoveReviewer(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.server.OrmException, java.io.IOException { if (com.google.gerrit.server.project.RemoveReviewerControl.canRemoveReviewerWithoutPermissionCheck(permissionBackend, cd.change(), currentUser, reviewer, value)) { return true; } return permissionBackend.user(currentUser).change(cd).database(dbProvider).test(ChangePermission.REMOVE_REVIEWER); }",5edb2ffc82935c0860aa258b5af634d3aee1708f,"public boolean testRemoveReviewer(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { if (com.google.gerrit.server.project.RemoveReviewerControl.canRemoveReviewerWithoutPermissionCheck(permissionBackend, cd.change(), currentUser, reviewer, value)) { return true; } return permissionBackend.user(currentUser).change(cd).database(dbProvider).test(ChangePermission.REMOVE_REVIEWER); }",3c507242a204256fff401fe8bc00e141da2ff2ba,2018-01-19 09:02:11,4
152971,java_com_google_gerrit_server_restapi_project_DashboardsCollection.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource, ?> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",f880e4e34fc9e8b0f9e406fb74c3f8a6c0d7eff2,"@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource, ?> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { parent.getProjectState().checkStatePermitsRead(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",07cc602587efcb904ffaa01d659ec72f18d8ef5d,"@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource, ?> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { parent.getProjectState().checkStatePermitsWrite(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",2abb6e0806abdd1540a86c82d65449578733ee29,2018-01-19 11:47:50,2
142972,src_test_java_com_googlesource_gerrit_plugins_its_base_validation_ItsValidateCommentTest.java,"public void testSuggestedNonMatching() throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> ret; com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.SUGGESTED).atLeastOnce(); expect(commit.getFullMessage()).andReturn(""TestMessage"").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn(""TestCommit"").anyTimes(); expect(issueExtractor.getIssueIds(""TestMessage"")).andReturn(new java.lang.String[]{ }).atLeastOnce(); replayMocks(); ret = ivc.onCommitReceived(event); assertEquals(""Size of returned CommitValidationMessages does not match"", 1, ret.size()); assertTrue((""First CommitValidationMessages does not contain 'Missing "" + ""issue'""), ret.get(0).getMessage().contains(""Missing issue"")); }",5b2f2fcb2226b26835fa1aed2a2f152dcfc11300,"public void testSuggestedNonMatching() throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> ret; com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.SUGGESTED).atLeastOnce(); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.regex.Pattern.compile(""x^"")).atLeastOnce(); expect(commit.getFullMessage()).andReturn(""TestMessage"").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn(""TestCommit"").anyTimes(); expect(issueExtractor.getIssueIds(""TestMessage"")).andReturn(new java.lang.String[]{ }).atLeastOnce(); replayMocks(); ret = ivc.onCommitReceived(event); assertEquals(""Size of returned CommitValidationMessages does not match"", 1, ret.size()); assertTrue((""First CommitValidationMessages does not contain 'Missing "" + ""issue'""), ret.get(0).getMessage().contains(""Missing issue"")); }",db2effc6d6b9ec33f91be2842e98c86295c15a2e,"public void testSuggestedNonMatching() throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> ret; com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.SUGGESTED).atLeastOnce(); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.Optional.empty()).atLeastOnce(); expect(commit.getFullMessage()).andReturn(""TestMessage"").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn(""TestCommit"").anyTimes(); expect(issueExtractor.getIssueIds(""TestMessage"")).andReturn(new java.lang.String[]{ }).atLeastOnce(); replayMocks(); ret = ivc.onCommitReceived(event); assertEquals(""Size of returned CommitValidationMessages does not match"", 1, ret.size()); assertTrue((""First CommitValidationMessages does not contain 'Missing "" + ""issue'""), ret.get(0).getMessage().contains(""Missing issue"")); }",ca8f41b16a231c05c91b5106ab912900cd726610,2018-01-21 13:34:49,6
142972,src_main_java_com_googlesource_gerrit_plugins_its_base_its_ItsConfig.java,"public java.lang.String getCommentLinkName() { java.lang.String ret; ret = getPluginConfigString(""commentlink""); if (ret == null) { ret = pluginName; } return ret; }",8f96b434cc38c8a40abe99337e1a361ad34a315e,"public java.lang.String getCommentLinkName() { java.lang.String ret; ret = getPluginConfigString(""commentlink"", null); if (ret == null) { ret = pluginName; } return ret; }",e8d1e20226cc9f8936ddcbe439f69a61f4719175,"public java.lang.String getCommentLinkName() { java.lang.String ret; ret = getPluginConfigString(""commentlink""); if (ret == null) { ret = pluginName; } return ret; }",8f96b434cc38c8a40abe99337e1a361ad34a315e,2018-01-21 13:34:49,6
142972,src_main_java_com_googlesource_gerrit_plugins_its_base_its_ItsConfig.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.util.regex.Pattern getDummyIssuePattern() { return java.util.regex.Pattern.compile(getPluginConfigString(""dummyIssuePattern"", ""x^"")); }",83544c445fad0802c3f4ba193d2d1838a897fdb5,"public java.util.Optional<java.util.regex.Pattern> getDummyIssuePattern() { return java.util.Optional.ofNullable(getPluginConfigString(""dummyIssuePattern"")).map(java.util.regex.Pattern::compile); }",98723803c954046c22ab1feeb493eab8c38856d9,2018-01-21 13:34:49,6
142972,src_test_java_com_googlesource_gerrit_plugins_its_base_validation_ItsValidateCommentTest.java,"public void testMandatoryNonMatching() { com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.MANDATORY).atLeastOnce(); expect(commit.getFullMessage()).andReturn(""TestMessage"").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn(""TestCommit"").anyTimes(); expect(issueExtractor.getIssueIds(""TestMessage"")).andReturn(new java.lang.String[]{ }).atLeastOnce(); replayMocks(); try { ivc.onCommitReceived(event); fail(""onCommitReceived did not throw any exception""); } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { assertTrue((""Message of thrown CommitValidationException does not "" + ""contain 'Missing issue'""), e.getMessage().contains(""Missing issue"")); } }",eaf2913750a082c6fe913bcdab13b648a8cb8869,"public void testMandatoryNonMatching() { com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.MANDATORY).atLeastOnce(); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.regex.Pattern.compile(""x^"")).atLeastOnce(); expect(commit.getFullMessage()).andReturn(""TestMessage"").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn(""TestCommit"").anyTimes(); expect(issueExtractor.getIssueIds(""TestMessage"")).andReturn(new java.lang.String[]{ }).atLeastOnce(); replayMocks(); try { ivc.onCommitReceived(event); fail(""onCommitReceived did not throw any exception""); } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { assertTrue((""Message of thrown CommitValidationException does not "" + ""contain 'Missing issue'""), e.getMessage().contains(""Missing issue"")); } }",baba66ee8ed2256c9158b127ed529a72fefe3f8f,"public void testMandatoryNonMatching() { com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.MANDATORY).atLeastOnce(); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.Optional.empty()).atLeastOnce(); expect(commit.getFullMessage()).andReturn(""TestMessage"").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn(""TestCommit"").anyTimes(); expect(issueExtractor.getIssueIds(""TestMessage"")).andReturn(new java.lang.String[]{ }).atLeastOnce(); replayMocks(); try { ivc.onCommitReceived(event); fail(""onCommitReceived did not throw any exception""); } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { assertTrue((""Message of thrown CommitValidationException does not "" + ""contain 'Missing issue'""), e.getMessage().contains(""Missing issue"")); } }",864c0769b17b5e25cbaa8e915fa7a0d586abb4d3,2018-01-21 13:34:49,6
142972,src_main_java_com_googlesource_gerrit_plugins_its_base_its_ItsConfig.java,"private java.lang.String getPluginConfigString(java.lang.String key) { return getCurrentPluginConfig().getString(key, gerritConfig.getString(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.PLUGIN, pluginName, key)); }",2664342bb82c9f96834ed31870d1e56816dbd974,"private java.lang.String getPluginConfigString(java.lang.String key, java.lang.String defaultValue) { java.lang.String val = getCurrentPluginConfig().getString(key, gerritConfig.getString(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.PLUGIN, pluginName, key)); return val == null ? defaultValue : val; }",54dd215cef621879cb9ae8b4e68c56d09bba9e11,"private java.lang.String getPluginConfigString(java.lang.String key) { return getCurrentPluginConfig().getString(key, gerritConfig.getString(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.PLUGIN, pluginName, key)); }",2664342bb82c9f96834ed31870d1e56816dbd974,2018-01-21 13:34:49,6
142972,src_test_java_com_googlesource_gerrit_plugins_its_base_validation_ItsValidateCommentTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testOnlySkipMatching() throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> ret; com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.MANDATORY).atLeastOnce(); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.regex.Pattern.compile(""SKIP"")).atLeastOnce(); expect(commit.getFullMessage()).andReturn(""TestMessage SKIP"").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn(""TestCommit"").anyTimes(); expect(issueExtractor.getIssueIds(""TestMessage SKIP"")).andReturn(new java.lang.String[]{ }).atLeastOnce(); replayMocks(); ret = ivc.onCommitReceived(event); assertEmptyList(ret); }",e037f5445fb006a3f903ecd5032cb3898304c82e,"public void testOnlySkipMatching() throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> ret; com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.MANDATORY).atLeastOnce(); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.Optional.of(java.util.regex.Pattern.compile(""SKIP""))).atLeastOnce(); expect(commit.getFullMessage()).andReturn(""TestMessage SKIP"").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn(""TestCommit"").anyTimes(); expect(issueExtractor.getIssueIds(""TestMessage SKIP"")).andReturn(new java.lang.String[]{ }).atLeastOnce(); replayMocks(); ret = ivc.onCommitReceived(event); assertEmptyList(ret); }",3073022bedd49e43102d3e51333d0ce474268dcb,2018-01-21 13:34:49,6
153011,java_com_google_gerrit_testing_FakeAccountCache.java,@java.lang.Override @com.google.gerrit.common.Nullable public synchronized com.google.gerrit.server.account.AccountState getByUsername(java.lang.String username) { return byUsername.get(username); },3fe59a12f8d72f7c967bff9b78fe619899a9c986,@java.lang.Override @com.google.gerrit.common.Nullable public synchronized java.util.Optional<com.google.gerrit.server.account.AccountState> getByUsername(java.lang.String username) { return java.util.Optional.ofNullable(byUsername.get(username)); },d7ea31042f15c4a6dbb5b5c2a877709eed87b2be,@java.lang.Override public synchronized java.util.Optional<com.google.gerrit.server.account.AccountState> getByUsername(java.lang.String username) { return java.util.Optional.ofNullable(byUsername.get(username)); },c287bf964783a78c935addf6babfa5ca197b7a96,2018-01-22 08:15:49,4
153713,javatests_com_google_gerrit_acceptance_rest_project_CreateProjectIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.Optional<java.lang.String> readProjectConfig(java.lang.String projectName) throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName))) { org.eclipse.jgit.junit.TestRepository<?> tr = new org.eclipse.jgit.junit.TestRepository(repo); org.eclipse.jgit.revwalk.RevWalk rw = tr.getRevWalk(); org.eclipse.jgit.lib.Ref ref = repo.exactRef(RefNames.REFS_CONFIG); if (ref == null) { return java.util.Optional.empty(); } org.eclipse.jgit.lib.ObjectLoader obj = rw.getObjectReader().open(tr.get(rw.parseTree(ref.getObjectId()), com.google.gerrit.acceptance.rest.project.PROJECT_CONFIG), com.google.gerrit.acceptance.rest.project.OBJ_BLOB); return java.util.Optional.of(new java.lang.String(obj.getCachedBytes(java.lang.Integer.MAX_VALUE), java.nio.charset.StandardCharsets.UTF_8)); } }",2425cfc6934620be2463d2f24f67731d1ed111ec,"private java.util.Optional<java.lang.String> readProjectConfig(java.lang.String projectName) throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName))) { org.eclipse.jgit.junit.TestRepository<?> tr = new org.eclipse.jgit.junit.TestRepository(repo); org.eclipse.jgit.revwalk.RevWalk rw = tr.getRevWalk(); org.eclipse.jgit.lib.Ref ref = repo.exactRef(RefNames.REFS_CONFIG); if (ref == null) { return java.util.Optional.empty(); } org.eclipse.jgit.lib.ObjectLoader obj = rw.getObjectReader().open(tr.get(rw.parseTree(ref.getObjectId()), com.google.gerrit.acceptance.rest.project.PROJECT_CONFIG), Constants.OBJ_BLOB); return java.util.Optional.of(new java.lang.String(obj.getCachedBytes(java.lang.Integer.MAX_VALUE), java.nio.charset.StandardCharsets.UTF_8)); } }",1f99d8b4af96cd8f13346b6b68c7dcb2bb09193f,2018-01-23 08:38:56,2
152375,java_com_google_gerrit_server_git_receive_ReceiveCommits.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public <T> T executeIndexQuery(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException { try { return retryHelper.execute(ActionType.INDEX_QUERY, action, ( t) -> t instanceof com.google.gwtorm.server.OrmException); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gwtorm.server.OrmException.class); throw new com.google.gwtorm.server.OrmException(t); } }",c76050654b6f72df839817bd8977ea0ee5bdc404,"private <T> T executeIndexQuery(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException { try { return retryHelper.execute(ActionType.INDEX_QUERY, action, com.google.gwtorm.server.OrmException.class::isInstance); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmException.class); throw new com.google.gwtorm.server.OrmException(e); } }",78fe965b73d4932564d069256ccc48ef49b40f1b,2018-01-23 08:39:36,7
152375,java_com_google_gerrit_server_update_RetryHelper.java,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return execute(actionType, action, ( t) -> t instanceof com.google.gerrit.server.git.LockFailureException); }",7d925aa55cae2c08f2c730349b1302ebf0fc87e0,"private <T> T executeWithAttempCount(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws java.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return executeWithTimeoutCount(actionType, action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(actionType, listener.getAttemptCount()); } }",65a604d7b1aa78639374bdde0aa20d6d36a5311c,"private <T> T executeWithAttemptAndTimeoutCount(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws java.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return executeWithTimeoutCount(actionType, action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(actionType, listener.getAttemptCount()); } }",79b562feb8252f63b5138cebe8184ee87c22951e,2018-01-23 08:39:36,7
152375,java_com_google_gerrit_server_update_RetryHelper.java,"private <T> T execute(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws java.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return execute(actionType, action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(actionType, listener.getAttemptCount()); } }",4f81c455a9af19aa50e21a4f4b1b3164df204e2a,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws java.lang.Exception { try { return executeWithAttempCount(actionType, action, opts, exceptionPredicate); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.lang.Exception.class); throw new java.lang.IllegalStateException(t); } }",78429f8900fbbee4ba4ca85e8cf65dcf74df9fab,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws java.lang.Exception { try { return executeWithAttemptAndTimeoutCount(actionType, action, opts, exceptionPredicate); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.lang.Exception.class); throw new java.lang.IllegalStateException(t); } }",f8bc6f351aa4d805c91856bf5c798865ca9b0a80,2018-01-23 08:39:36,7
153630,java_com_google_gerrit_server_group_db_GroupsUpdate.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.server.group.InternalGroup createGroupInNoteDbWithRetry(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryHelper.ActionType.GROUP_UPDATE, () -> createGroupInNoteDb(groupCreation, groupUpdate), com.google.gerrit.server.git.LockFailureException.class::isInstance); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmDuplicateKeyException.class); throw new java.io.IOException(e); } }",92b94eaa4b0fa758991b029adfe21b97b2191e07,"private com.google.gerrit.server.group.InternalGroup createGroupInNoteDbWithRetry(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryHelper.ActionType.GROUP_UPDATE, () -> createGroupInNoteDb(groupCreation, groupUpdate), com.google.gerrit.server.git.LockFailureException.class::isInstance); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmDuplicateKeyException.class); throw new java.io.IOException(e); } }",684684e6b516880d7abc30b2ecfe0791841040be,2018-01-23 08:39:36,6
152375,java_com_google_gerrit_server_account_AccountsUpdate.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private <T> T executeAccountUpdate(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(ActionType.ACCOUNT_UPDATE, action, ( t) -> t instanceof com.google.gerrit.server.git.LockFailureException); } catch (java.lang.Exception t) { com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gwtorm.server.OrmException.class); throw new com.google.gwtorm.server.OrmException(t); } }",ee00ed1d4bc449b3c2105222432f206a0f6b51d5,"private java.util.Optional<com.google.gerrit.server.account.AccountState> executeAccountUpdate(com.google.gerrit.server.update.RetryHelper.Action<java.util.Optional<com.google.gerrit.server.account.AccountState>> action) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(ActionType.ACCOUNT_UPDATE, action, com.google.gerrit.server.git.LockFailureException.class::isInstance); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmException.class); throw new com.google.gwtorm.server.OrmException(e); } }",37750420acc06c62c9482b577a374899da6daea5,2018-01-23 08:39:36,7
153630,java_com_google_gerrit_server_group_db_GroupsUpdate.java,"private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""Created group wasn't automatically loaded"")); } }",acfa7e2439895decfb2f3fb93cca01c3682cc9af,"private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""Created group wasn't automatically loaded"")); } }",4c3479dd43b7f8d4d2fc1ad977b4484e964889fb,"private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.forNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""Created group wasn't automatically loaded"")); } }",4369d3b78ddb2b2268dd4483c952e5931b466b0e,2018-01-23 08:39:36,6
153630,java_com_google_gerrit_server_group_db_GroupsUpdate.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.Optional<com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult> updateGroupInNoteDbWithRetry(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryHelper.ActionType.GROUP_UPDATE, () -> updateGroupInNoteDb(groupUuid, groupUpdate), com.google.gerrit.server.git.LockFailureException.class::isInstance); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmDuplicateKeyException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gerrit.common.errors.NoSuchGroupException.class); throw new java.io.IOException(e); } }",4740721b71fdc1b0f0a8734ca252c720dc0535fb,"private java.util.Optional<com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult> updateGroupInNoteDbWithRetry(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryHelper.ActionType.GROUP_UPDATE, () -> updateGroupInNoteDb(groupUuid, groupUpdate), com.google.gerrit.server.git.LockFailureException.class::isInstance); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmDuplicateKeyException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gerrit.common.errors.NoSuchGroupException.class); throw new java.io.IOException(e); } }",261782a85b084b0c759299d37137cd2a49d0dad7,2018-01-23 08:39:36,6
152375,java_com_google_gerrit_server_account_AccountsUpdate.java,"private com.google.gerrit.reviewdb.client.Account updateAccount(com.google.gerrit.server.account.AccountsUpdate.AccountUpdate accountUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return retryHelper.execute(ActionType.ACCOUNT_UPDATE, () -> { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.account.UpdatedAccount updatedAccount = accountUpdate.update(allUsersRepo); if (updatedAccount == null) { return null; } commit(allUsersRepo, updatedAccount); return updatedAccount.getAccount(); } }); }",112d5bf2c86373ff91c69cdaa37f61625bbd10f2,"private com.google.gerrit.reviewdb.client.Account updateAccount(com.google.gerrit.server.account.AccountsUpdate.AccountUpdate accountUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return executeAccountUpdate(() -> { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.account.UpdatedAccount updatedAccount = accountUpdate.update(allUsersRepo); if (updatedAccount == null) { return null; } commit(allUsersRepo, updatedAccount); return updatedAccount.getAccount(); } }); }",ded21993ed5497aa37fdf840f4182c10f26c93b1,"private java.util.Optional<com.google.gerrit.server.account.AccountState> updateAccount(com.google.gerrit.server.account.AccountsUpdate.AccountUpdate accountUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return executeAccountUpdate(() -> { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.account.UpdatedAccount updatedAccount = accountUpdate.update(allUsersRepo); if (updatedAccount == null) { return java.util.Optional.empty(); } commit(allUsersRepo, updatedAccount); return java.util.Optional.of(updatedAccount.getAccount()); } }); }",08129f8405482d3b5e8347cfb5d5f253380cc313,2018-01-23 08:39:36,7
152952,java_com_google_gerrit_server_restapi_project_BranchesCollection.java,"@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic() ? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }",e162ea532751db60eb8f160a10dc02f23e4d590d,"@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); parent.getProjectState().checkStatePermitsRead(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic() ? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }",d9e806ada665bffdf02c2215018f47b3ecbcf2f3,"@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { parent.getProjectState().checkStatePermitsRead(); com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); parent.getProjectState().checkStatePermitsRead(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic() ? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }",d6e8d8d8abfcce719df2b398de22f04aa5afad07,2018-01-23 10:30:47,3
152952,java_com_google_gerrit_server_restapi_project_ListBranches.java,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring).regex(matchRegex).start(start).limit(limit).filter(allBranches(rsrc)); }",11f6a08ac64835deb0153c850feb0d45e9482352,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { rsrc.getProjectState().checkStatePermitsRead(); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring).regex(matchRegex).start(start).limit(limit).filter(allBranches(rsrc)); }",b03e970a52b0a6ab896f4b430c602ae5b82e45fd,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { rsrc.getProjectState().checkStatePermitsRead(); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring).regex(matchRegex).start(start).limit(limit).filter(allBranches(rsrc)); }",12c89d5c649373b666cc5d7f988dfecc3d1573c7,2018-01-23 10:30:47,3
152952,java_com_google_gerrit_server_restapi_project_GetDashboard.java,"private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id)); java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0)); java.lang.String path = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards.parse(new com.google.gerrit.server.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.IdString.fromUrl(((ref + ':') + path))); }",e9d50afb916b499ada2b97b8678dd239f3e4fd4f,"private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id)); java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0)); java.lang.String path = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards.parse(new com.google.gerrit.server.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.IdString.fromUrl(((ref + ':') + path))); }",47fb93b2ecf24a11702326f37be2579e10fa13b9,"private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.lang.String id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id)); java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0)); java.lang.String path = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards.parse(new com.google.gerrit.server.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.IdString.fromUrl(((ref + ':') + path))); }",355af11f5f8fc7d0e4ddc1f67d5e80e90f86f3b3,2018-01-23 10:30:47,3
152952,java_com_google_gerrit_server_api_projects_DashboardApiImpl.java,"private com.google.gerrit.server.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }",082c2e5770523aecaf5fc786bbdaa567a6a4a22b,"private com.google.gerrit.server.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }",eb83d5ea1cc3a9764f995695b75be1efefa0ebf6,"private com.google.gerrit.server.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }",eed00fd4a94660a1f51e8b19915384b1ecd79e6f,2018-01-23 10:30:47,3
152952,java_com_google_gerrit_server_restapi_project_GetDashboard.java,"private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = projectState.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }",05238778f53bde7e0adefeb7568de23c45a9385a,"private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = projectState.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }",137a350da2d192002828a4ddaddfe9d06f8fb5dc,"private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = projectState.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }",6a69e80165aa7dd2e107bbf65d0dd71e89b8d8be,2018-01-23 10:30:47,3
152952,java_com_google_gerrit_server_restapi_project_DashboardsCollection.java,"@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.restapi.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",05010da3618980ff9445d7b2ad0103c8a1b7e929,"@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.restapi.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",8da8fbafa745eba95f96952cdf70202d68edd1e6,"@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { parent.getProjectState().checkStatePermitsRead(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.restapi.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",39d650f75f1a0b8bbf248e183cb0550f01c488ba,2018-01-23 10:30:47,3
153070,java_com_google_gerrit_server_restapi_change_ChangesCollection.java,"public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.restapi.change.ChangesCollection.toIdString(id)); } else if ((notes.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.restapi.change.ChangesCollection.toIdString(id)); } return changeResourceFactory.create(change, user.get()); }",6b558049c8f17b334db9dcf5216a0c95e9127593,"public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.restapi.change.ChangesCollection.toIdString(id)); } else if ((notes.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.restapi.change.ChangesCollection.toIdString(id)); } return changeResourceFactory.create(change, user.get()); }",d14562dc62ddbd8dd9fc296218c416824bd38af5,"public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.restapi.change.ChangesCollection.toIdString(id)); } else if ((notes.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.restapi.change.ChangesCollection.toIdString(id)); } checkProjectStatePermitsRead(change.getProjectName()); return changeResourceFactory.create(change, user.get()); }",2cb32514b9bd51406575a34a0aa2d308f2f0d975,2018-01-23 11:47:59,4
153070,java_com_google_gerrit_sshd_commands_SetReviewersCommand.java,"@org.kohsuke.args4j.Argument(index = 0, required = true, multiValued = true, metaVar = ""CHANGE"", usage = ""changes to modify"") void addChange(java.lang.String token) { try { changeArgumentParser.addChange(token, changes, projectState); } catch (com.google.gerrit.sshd.commands.UnloggedFailure e) { throw new java.lang.IllegalArgumentException(e.getMessage(), e); } catch (com.google.gwtorm.server.OrmException e) { throw new java.lang.IllegalArgumentException(""database is down"", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.lang.IllegalArgumentException(""can't check permissions"", e); } }",7d1e37ddfb4fc97c2700f6f22d1737b741adc09e,"@org.kohsuke.args4j.Argument(index = 0, required = true, multiValued = true, metaVar = ""CHANGE"", usage = ""changes to modify"") void addChange(java.lang.String token) { try { changeArgumentParser.addChange(token, changes, projectState); } catch (com.google.gerrit.sshd.commands.UnloggedFailure e) { throw new java.lang.IllegalArgumentException(e.getMessage(), e); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new java.lang.IllegalArgumentException(""database is down"", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.lang.IllegalArgumentException(""can't check permissions"", e); } }",d62ca66e1280bedea413ec0c3fd04ecbc4da33fc,"@org.kohsuke.args4j.Argument(index = 0, required = true, multiValued = true, metaVar = ""CHANGE"", usage = ""changes to modify"") void addChange(java.lang.String token) { try { changeArgumentParser.addChange(token, changes, projectState); } catch (java.io.IOException | com.google.gerrit.sshd.commands.UnloggedFailure e) { throw new java.lang.IllegalArgumentException(e.getMessage(), e); } catch (com.google.gwtorm.server.OrmException e) { throw new java.lang.IllegalArgumentException(""database is down"", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.lang.IllegalArgumentException(""can't check permissions"", e); } }",6d6d6c785e3cc4c951efbe3f5bdb699a94fe4303,2018-01-23 11:47:59,4
153070,java_com_google_gerrit_server_restapi_account_StarredChanges.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.restapi.account.StarredChanges.EmptyInput> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""change %s not found"", id.get())); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.restapi.account.StarredChanges.log.error(""cannot resolve change"", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""internal server error""); } }",6f243b02c2c3561fa47b38a61c753ed59f8d51d3,"@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.restapi.account.StarredChanges.EmptyInput> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""change %s not found"", id.get())); } catch (java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.restapi.account.StarredChanges.log.error(""cannot resolve change"", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""internal server error""); } }",d7c05100a518fc3b97862ea0fa0a2a14221d3618,"@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.restapi.account.StarredChanges.EmptyInput> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""change %s not found"", id.get())); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException | java.io.IOException e) { com.google.gerrit.server.restapi.account.StarredChanges.log.error(""cannot resolve change"", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""internal server error""); } }",a1a7ac48ba24c182cf9aa1b6ba5977429e980d48,2018-01-23 11:47:59,4
153070,java_com_google_gerrit_server_restapi_change_ChangesCollection.java,"@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }",efe6318a282660945880bd28fa5b35ef9b01d12a,"@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }",c050781671258e84c40b841dfa42be769f99ca0b,"@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } checkProjectStatePermitsRead(change.getProjectName()); return changeResourceFactory.create(change, user.get()); }",a0d63805c1a934213e9be86fefe56d73b341c00d,2018-01-23 11:47:59,4
153070,java_com_google_gerrit_server_restapi_change_RelatedChangesSorter.java,"private static boolean isVisible(com.google.gerrit.server.restapi.change.RelatedChangesSorter.PatchSetData psd, com.google.gerrit.server.permissions.PermissionBackend.WithUser perm) throws com.google.gerrit.server.permissions.PermissionBackendException { try { perm.change(psd.data()).check(ChangePermission.READ); return true; } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } }",b16a6299bb149cebc28548126eba23135a73fb44,"private boolean isVisible(com.google.gerrit.server.restapi.change.RelatedChangesSorter.PatchSetData psd) throws com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(currentUserProvider).database(dbProvider); try { perm.change(psd.data()).check(ChangePermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } return projectCache.checkedGet(psd.data().project()).statePermitsRead(); }",44f7d51ac93751da6ee2f652ed969cc5e334b547,"private boolean isVisible(com.google.gerrit.server.restapi.change.RelatedChangesSorter.PatchSetData psd) throws com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(currentUserProvider).database(dbProvider); try { perm.change(psd.data()).check(ChangePermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(psd.data().project()); return (state != null) && (state.statePermitsRead()); }",6ec2123264dc312cb0fa3418ed53f8b218483683,2018-01-23 11:47:59,4
153212,java_com_google_gerrit_server_project_SectionSortCache.java,"void sort(java.lang.String ref, java.util.List<com.google.gerrit.common.data.AccessSection> sections) { final int cnt = sections.size(); if (cnt <= 1) { return; } com.google.gerrit.server.project.SectionSortCache.EntryKey key = com.google.gerrit.server.project.SectionSortCache.EntryKey.create(ref, sections); com.google.gerrit.server.project.SectionSortCache.EntryVal val = cache.getIfPresent(key); if (val != null) { int[] srcIdx = val.order; if (srcIdx != null) { com.google.gerrit.common.data.AccessSection[] srcList = com.google.gerrit.server.project.SectionSortCache.copy(sections); for (int i = 0; i < cnt; i++) { sections.set(i, srcList[srcIdx[i]]); } } else { } } else { boolean poison = false; java.util.IdentityHashMap<com.google.gerrit.common.data.AccessSection, java.lang.Integer> srcMap = new java.util.IdentityHashMap<>(); for (int i = 0; i < cnt; i++) { poison |= (srcMap.put(sections.get(i), i)) != null; } java.util.Collections.sort(sections, new com.google.gerrit.server.util.MostSpecificComparator(ref)); int[] srcIdx; if (com.google.gerrit.server.project.SectionSortCache.isIdentityTransform(sections, srcMap)) { srcIdx = null; } else { srcIdx = new int[cnt]; for (int i = 0; i < cnt; i++) { srcIdx[i] = srcMap.get(sections.get(i)); } } if (poison) { com.google.gerrit.server.project.SectionSortCache.log.error(""Received duplicate AccessSection instances, not caching sort""); } else { cache.put(key, new com.google.gerrit.server.project.SectionSortCache.EntryVal(srcIdx)); } } }",029834c5910693e92efbf3cb7d20f24a83e2003f,"public void sort(java.lang.String ref, java.util.List<com.google.gerrit.common.data.AccessSection> sections) { final int cnt = sections.size(); if (cnt <= 1) { return; } com.google.gerrit.server.project.SectionSortCache.EntryKey key = com.google.gerrit.server.project.SectionSortCache.EntryKey.create(ref, sections); com.google.gerrit.server.project.SectionSortCache.EntryVal val = cache.getIfPresent(key); if (val != null) { int[] srcIdx = val.order; if (srcIdx != null) { com.google.gerrit.common.data.AccessSection[] srcList = com.google.gerrit.server.project.SectionSortCache.copy(sections); for (int i = 0; i < cnt; i++) { sections.set(i, srcList[srcIdx[i]]); } } else { } } else { boolean poison = false; java.util.IdentityHashMap<com.google.gerrit.common.data.AccessSection, java.lang.Integer> srcMap = new java.util.IdentityHashMap<>(); for (int i = 0; i < cnt; i++) { poison |= (srcMap.put(sections.get(i), i)) != null; } java.util.Collections.sort(sections, new com.google.gerrit.server.util.MostSpecificComparator(ref)); int[] srcIdx; if (com.google.gerrit.server.project.SectionSortCache.isIdentityTransform(sections, srcMap)) { srcIdx = null; } else { srcIdx = new int[cnt]; for (int i = 0; i < cnt; i++) { srcIdx[i] = srcMap.get(sections.get(i)); } } if (poison) { com.google.gerrit.server.project.SectionSortCache.log.error(""Received duplicate AccessSection instances, not caching sort""); } else { cache.put(key, new com.google.gerrit.server.project.SectionSortCache.EntryVal(srcIdx)); } } }",b31916ca6e6e4871c61c79bc839bb37f12811bf8,"void sort(java.lang.String ref, java.util.List<com.google.gerrit.common.data.AccessSection> sections) { final int cnt = sections.size(); if (cnt <= 1) { return; } com.google.gerrit.server.permissions.SectionSortCache.EntryKey key = com.google.gerrit.server.permissions.SectionSortCache.EntryKey.create(ref, sections); com.google.gerrit.server.permissions.SectionSortCache.EntryVal val = cache.getIfPresent(key); if (val != null) { int[] srcIdx = val.order; if (srcIdx != null) { com.google.gerrit.common.data.AccessSection[] srcList = com.google.gerrit.server.permissions.SectionSortCache.copy(sections); for (int i = 0; i < cnt; i++) { sections.set(i, srcList[srcIdx[i]]); } } else { } } else { boolean poison = false; java.util.IdentityHashMap<com.google.gerrit.common.data.AccessSection, java.lang.Integer> srcMap = new java.util.IdentityHashMap<>(); for (int i = 0; i < cnt; i++) { poison |= (srcMap.put(sections.get(i), i)) != null; } java.util.Collections.sort(sections, new com.google.gerrit.server.util.MostSpecificComparator(ref)); int[] srcIdx; if (com.google.gerrit.server.permissions.SectionSortCache.isIdentityTransform(sections, srcMap)) { srcIdx = null; } else { srcIdx = new int[cnt]; for (int i = 0; i < cnt; i++) { srcIdx[i] = srcMap.get(sections.get(i)); } } if (poison) { com.google.gerrit.server.permissions.SectionSortCache.log.error(""Received duplicate AccessSection instances, not caching sort""); } else { cache.put(key, new com.google.gerrit.server.permissions.SectionSortCache.EntryVal(srcIdx)); } } }",fb02d644b035b4fff8a76f5f83f54f89a5c3d12a,2018-01-24 09:23:35,8
154411,javatests_com_google_gerrit_acceptance_rest_change_CreateChangeIT.java,"@org.junit.Test public void noteDbCommit() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.common.ChangeInfo c = assertCreateSucceeds(newChangeInput(ChangeStatus.NEW)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(repo.exactRef(changeMetaRef(new com.google.gerrit.reviewdb.client.Change.Id(c._number))).getObjectId()); assertThat(commit.getShortMessage()).isEqualTo(""Create change""); org.eclipse.jgit.lib.PersonIdent expectedAuthor = changeNoteUtil.newIdent(accountCache.get(admin.id).getAccount(), c.created, serverIdent.get()); assertThat(commit.getAuthorIdent()).isEqualTo(expectedAuthor); assertThat(commit.getCommitterIdent()).isEqualTo(new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), c.created)); assertThat(commit.getParentCount()).isEqualTo(0); } }",cd820d45c3dc3907f1a0cb3679a79c7c5e9c8b9d,"@org.junit.Test public void noteDbCommit() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.common.ChangeInfo c = assertCreateSucceeds(newChangeInput(ChangeStatus.NEW)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(repo.exactRef(changeMetaRef(new com.google.gerrit.reviewdb.client.Change.Id(c._number))).getObjectId()); assertThat(commit.getShortMessage()).isEqualTo(""Create change""); org.eclipse.jgit.lib.PersonIdent expectedAuthor = changeNoteUtil.newIdent(accountCache.maybeGet(admin.id).get().getAccount(), c.created, serverIdent.get()); assertThat(commit.getAuthorIdent()).isEqualTo(expectedAuthor); assertThat(commit.getCommitterIdent()).isEqualTo(new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), c.created)); assertThat(commit.getParentCount()).isEqualTo(0); } }",2d64a65a1288714b494649640527fb99fe0db1fe,"@org.junit.Test public void noteDbCommit() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.common.ChangeInfo c = assertCreateSucceeds(newChangeInput(ChangeStatus.NEW)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(repo.exactRef(changeMetaRef(new com.google.gerrit.reviewdb.client.Change.Id(c._number))).getObjectId()); assertThat(commit.getShortMessage()).isEqualTo(""Create change""); org.eclipse.jgit.lib.PersonIdent expectedAuthor = changeNoteUtil.newIdent(getAccount(admin.id), c.created, serverIdent.get()); assertThat(commit.getAuthorIdent()).isEqualTo(expectedAuthor); assertThat(commit.getCommitterIdent()).isEqualTo(new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), c.created)); assertThat(commit.getParentCount()).isEqualTo(0); } }",25ab0676699e9cbe795a2ee1be3249b06dabd89e,2018-01-24 16:48:49,2
154411,javatests_com_google_gerrit_acceptance_rest_account_ExternalIdIT.java,"@org.junit.Test public void getExternalIdsOfOtherUserWithAccessDatabase() throws java.lang.Exception { allowGlobalCapabilities(com.google.gerrit.acceptance.rest.account.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.get(admin.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get(((""/accounts/"" + (admin.id)) + ""/external.ids"")); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }",8b8bc36f8ad50c797d971e727a773ebec20788a9,"@org.junit.Test public void getExternalIdsOfOtherUserWithAccessDatabase() throws java.lang.Exception { allowGlobalCapabilities(com.google.gerrit.acceptance.rest.account.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.maybeGet(admin.getId()).get().getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get(((""/accounts/"" + (admin.id)) + ""/external.ids"")); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }",a0439785ca2eec4958fb213f1002292cf4ade2d1,"@org.junit.Test public void getExternalIdsOfOtherUserWithAccessDatabase() throws java.lang.Exception { allowGlobalCapabilities(com.google.gerrit.acceptance.rest.account.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = getAccountState(admin.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get(((""/accounts/"" + (admin.id)) + ""/external.ids"")); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }",4b354e0ce9936e91737daad4e192b42c6e1dc7b9,2018-01-24 16:48:49,2
154411,javatests_com_google_gerrit_acceptance_rest_account_ExternalIdIT.java,"@org.junit.Test public void getExternalIds() throws java.lang.Exception { java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get(""/accounts/self/external.ids""); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }",810e02074c7e8a7b3f4fee8106c1a4e1b447e906,"@org.junit.Test public void getExternalIds() throws java.lang.Exception { java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.maybeGet(user.getId()).get().getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get(""/accounts/self/external.ids""); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }",1eebd94f0ed01567c11516af1a4d05f594fcf50e,"@org.junit.Test public void getExternalIds() throws java.lang.Exception { java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = getAccountState(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get(""/accounts/self/external.ids""); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }",724e01e7953e8751eab5992eab73389b1f742a5a,2018-01-24 16:48:49,2
154411,javatests_com_google_gerrit_acceptance_api_accounts_AccountIT.java,"private void assertUserBranch(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable java.lang.String name, @com.google.gerrit.common.Nullable java.lang.String status) throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectReader or = repo.newObjectReader()) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); assertThat(ref).isNotNull(); org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); long timestampDiffMs = java.lang.Math.abs((((c.getCommitTime()) * 1000L) - (accountCache.get(accountId).getAccount().getRegisteredOn().getTime()))); assertThat(timestampDiffMs).isAtMost(ChangeRebuilderImpl.MAX_WINDOW_MS); try (org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or, AccountProperties.ACCOUNT_CONFIG, c.getTree())) { if ((name != null) || (status != null)) { assertThat(tw).isNotNull(); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(new java.lang.String(or.open(tw.getObjectId(0), com.google.gerrit.acceptance.api.accounts.OBJ_BLOB).getBytes(), java.nio.charset.StandardCharsets.UTF_8)); assertThat(cfg.getString(AccountProperties.ACCOUNT, null, AccountProperties.KEY_FULL_NAME)).isEqualTo(name); assertThat(cfg.getString(AccountProperties.ACCOUNT, null, AccountProperties.KEY_STATUS)).isEqualTo(status); } else { assertThat(tw).isNull(); } } } }",3da66d1bfddf956c6c7518c229170fd70f0fcaca,"private void assertUserBranch(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable java.lang.String name, @com.google.gerrit.common.Nullable java.lang.String status) throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectReader or = repo.newObjectReader()) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); assertThat(ref).isNotNull(); org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); long timestampDiffMs = java.lang.Math.abs((((c.getCommitTime()) * 1000L) - (accountCache.maybeGet(accountId).get().getAccount().getRegisteredOn().getTime()))); assertThat(timestampDiffMs).isAtMost(ChangeRebuilderImpl.MAX_WINDOW_MS); try (org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or, AccountProperties.ACCOUNT_CONFIG, c.getTree())) { if ((name != null) || (status != null)) { assertThat(tw).isNotNull(); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(new java.lang.String(or.open(tw.getObjectId(0), com.google.gerrit.acceptance.api.accounts.OBJ_BLOB).getBytes(), java.nio.charset.StandardCharsets.UTF_8)); assertThat(cfg.getString(AccountProperties.ACCOUNT, null, AccountProperties.KEY_FULL_NAME)).isEqualTo(name); assertThat(cfg.getString(AccountProperties.ACCOUNT, null, AccountProperties.KEY_STATUS)).isEqualTo(status); } else { assertThat(tw).isNull(); } } } }",eaa47ca8899184aad61b7eeda109cedb0ab13fff,"private void assertUserBranch(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable java.lang.String name, @com.google.gerrit.common.Nullable java.lang.String status) throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectReader or = repo.newObjectReader()) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); assertThat(ref).isNotNull(); org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); long timestampDiffMs = java.lang.Math.abs((((c.getCommitTime()) * 1000L) - (getAccount(accountId).getRegisteredOn().getTime()))); assertThat(timestampDiffMs).isAtMost(ChangeRebuilderImpl.MAX_WINDOW_MS); try (org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or, AccountProperties.ACCOUNT_CONFIG, c.getTree())) { if ((name != null) || (status != null)) { assertThat(tw).isNotNull(); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(new java.lang.String(or.open(tw.getObjectId(0), com.google.gerrit.acceptance.api.accounts.OBJ_BLOB).getBytes(), java.nio.charset.StandardCharsets.UTF_8)); assertThat(cfg.getString(AccountProperties.ACCOUNT, null, AccountProperties.KEY_FULL_NAME)).isEqualTo(name); assertThat(cfg.getString(AccountProperties.ACCOUNT, null, AccountProperties.KEY_STATUS)).isEqualTo(status); } else { assertThat(tw).isNull(); } } } }",6d9b157eca94f079ffdaf29a42ec1147f33ea97e,2018-01-24 16:48:49,2
154411,javatests_com_google_gerrit_acceptance_rest_account_GetAccountDetailIT.java,"@org.junit.Test public void getDetail() throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminRestSession.get(((""/accounts/"" + (admin.username)) + ""/detail/"")); com.google.gerrit.server.restapi.account.GetDetail.AccountDetailInfo info = newGson().fromJson(r.getReader(), com.google.gerrit.server.restapi.account.GetDetail.AccountDetailInfo.class); com.google.gerrit.acceptance.rest.account.AccountAssert.assertAccountInfo(admin, info); com.google.gerrit.reviewdb.client.Account account = accountCache.get(admin.getId()).getAccount(); assertThat(info.registeredOn).isEqualTo(account.getRegisteredOn()); }",12ae5932e14f9ef1d10e286f277490be4499eb3b,"@org.junit.Test public void getDetail() throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminRestSession.get(((""/accounts/"" + (admin.username)) + ""/detail/"")); com.google.gerrit.server.restapi.account.GetDetail.AccountDetailInfo info = newGson().fromJson(r.getReader(), com.google.gerrit.server.restapi.account.GetDetail.AccountDetailInfo.class); com.google.gerrit.acceptance.rest.account.AccountAssert.assertAccountInfo(admin, info); com.google.gerrit.reviewdb.client.Account account = accountCache.maybeGet(admin.getId()).get().getAccount(); assertThat(info.registeredOn).isEqualTo(account.getRegisteredOn()); }",2c0674f4ad6ed7ac3d63109af65327120a8ff344,"@org.junit.Test public void getDetail() throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminRestSession.get(((""/accounts/"" + (admin.username)) + ""/detail/"")); com.google.gerrit.server.restapi.account.GetDetail.AccountDetailInfo info = newGson().fromJson(r.getReader(), com.google.gerrit.server.restapi.account.GetDetail.AccountDetailInfo.class); com.google.gerrit.acceptance.rest.account.AccountAssert.assertAccountInfo(admin, info); com.google.gerrit.reviewdb.client.Account account = getAccount(admin.getId()); assertThat(info.registeredOn).isEqualTo(account.getRegisteredOn()); }",b9fb673c7166f9756bb0a3f51eb86d891732be5b,2018-01-24 16:48:49,2
154411,javatests_com_google_gerrit_acceptance_server_change_ConsistencyCheckerIT.java,"private void addNoteDbCommit(com.google.gerrit.reviewdb.client.Change.Id id, java.lang.String commitMessage) throws java.lang.Exception { if (!(notesMigration.commitChangeWrites())) { return; } org.eclipse.jgit.lib.PersonIdent committer = serverIdent.get(); org.eclipse.jgit.lib.PersonIdent author = noteUtil.newIdent(accountCache.get(admin.getId()).getAccount(), committer.getWhen(), committer); serverSideTestRepo.branch(com.google.gerrit.reviewdb.client.RefNames.changeMetaRef(id)).commit().author(author).committer(committer).message(commitMessage).create(); }",68f2f761f59e66c2620a4775d79bf2e21fa7ae3d,"private void addNoteDbCommit(com.google.gerrit.reviewdb.client.Change.Id id, java.lang.String commitMessage) throws java.lang.Exception { if (!(notesMigration.commitChangeWrites())) { return; } org.eclipse.jgit.lib.PersonIdent committer = serverIdent.get(); org.eclipse.jgit.lib.PersonIdent author = noteUtil.newIdent(accountCache.maybeGet(admin.getId()).get().getAccount(), committer.getWhen(), committer); serverSideTestRepo.branch(com.google.gerrit.reviewdb.client.RefNames.changeMetaRef(id)).commit().author(author).committer(committer).message(commitMessage).create(); }",6dad0a23ddae0a1cb2b613c409a5b868f8e9f7ff,"private void addNoteDbCommit(com.google.gerrit.reviewdb.client.Change.Id id, java.lang.String commitMessage) throws java.lang.Exception { if (!(notesMigration.commitChangeWrites())) { return; } org.eclipse.jgit.lib.PersonIdent committer = serverIdent.get(); org.eclipse.jgit.lib.PersonIdent author = noteUtil.newIdent(getAccount(admin.getId()), committer.getWhen(), committer); serverSideTestRepo.branch(com.google.gerrit.reviewdb.client.RefNames.changeMetaRef(id)).commit().author(author).committer(committer).message(commitMessage).create(); }",5fa28ec23155013b2cc8abd71da53baf1538b6fe,2018-01-24 16:48:49,2
154493,java_com_google_gerrit_server_restapi_account_GetEditPreferences.java,"@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).getEditPreferences(); }",b95f7e6ccbebe9ba34ebbb69e35bb1a4c310c5b3,"@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.maybeGet(id).map(AccountState::getEditPreferences).orElseThrow(ResourceNotFoundException::new); }",81d91031baa7909c670bccd0bcf30cea8756efc5,"@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.maybeGet(id).map(AccountState::getEditPreferences).orElseThrow(() -> new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.extensions.restapi.IdString.fromDecoded(id.toString()))); }",9b6cf60aedfc2217b37b04ba3d62aedaf587f846,2018-01-24 16:48:49,2
154493,java_com_google_gerrit_server_restapi_account_GetDiffPreferences.java,"@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).getDiffPreferences(); }",76605b87321b3a9d072f6413044edfa2ba32febc,"@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.maybeGet(id).map(AccountState::getDiffPreferences).orElseThrow(ResourceNotFoundException::new); }",5bff89e8fcb13ace35e680ed2a1dba19e87f84ae,"@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.maybeGet(id).map(AccountState::getDiffPreferences).orElseThrow(() -> new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.extensions.restapi.IdString.fromDecoded(id.toString()))); }",3d7eb05c5d80c18743000d265a2824028e0d541c,2018-01-24 16:48:49,2
154493,java_com_google_gerrit_server_restapi_account_GetPreferences.java,"@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).getGeneralPreferences(); }",52051306787d9650c04d63d699b768827c9202fb,"@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.maybeGet(id).map(AccountState::getGeneralPreferences).orElseThrow(ResourceNotFoundException::new); }",57f42b449b3b6dec8fb58c7c154ea95071545afc,"@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.maybeGet(id).map(AccountState::getGeneralPreferences).orElseThrow(() -> new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.extensions.restapi.IdString.fromDecoded(id.toString()))); }",66a63b99b775f4dbd7358a4102e8d9ad4737be02,2018-01-24 16:48:49,2
153611,java_com_google_gerrit_server_update_RetryHelper.java,public java.time.Duration getDefaultTimeout() { return defaultTimeout; },caed7beda2027ae799901b1bc070e79a05ae4b9a,public java.time.Duration getDefaultTimeout(com.google.gerrit.server.update.RetryHelper.ActionType actionType) { switch (actionType) { case ACCOUNT_UPDATE : case CHANGE_UPDATE : return noteDbDefaultTimeout; case INDEX_QUERY : default : return defaultTimeout; } },8f3bb531a358022f2f8baddcc7f58ed332901c28,public java.time.Duration getDefaultTimeout(com.google.gerrit.server.update.RetryHelper.ActionType actionType) { return defaultTimeouts.get(actionType); },6d3fdf6c2a08e8f2d865f92701f726686fb3158f,2018-01-25 09:55:24,6
153611,java_com_google_gerrit_server_update_RetryHelper.java,"private <T> T executeWithAttemptCount(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws java.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return executeWithTimeoutCount(actionType, action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(actionType, listener.getAttemptCount()); } }",4c03c6498cd055d1f4ff20e66c365ff2b5abbe52,"private <T> T executeWithAttemptCount(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws java.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(actionType, opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return executeWithTimeoutCount(actionType, action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(actionType, listener.getAttemptCount()); } }",881b45fc34b95078f976fbdfbf602d265f00ef54,"private <T> T executeWithAttemptAndTimeoutCount(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws java.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(actionType, opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return executeWithTimeoutCount(actionType, action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(actionType, listener.getAttemptCount()); } }",50794ba635c4f9027ef017daa6031fee671316ea,2018-01-25 09:55:24,6
146010,java_com_google_gerrit_server_group_db_AuditLogFormatter.java,,,"private static java.util.Optional<com.google.gerrit.reviewdb.client.Account> getAccount(com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState accountState = accountCache.getOrNull(accountId); return java.util.Optional.ofNullable(accountState).map(AccountState::getAccount); }",6e2bff7c23ae7f9bea348e76aeb0c113c63126f1,"private static java.util.Optional<com.google.gerrit.reviewdb.client.Account> getAccount(com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.reviewdb.client.Account.Id accountId) { return accountCache.maybeGet(accountId).map(AccountState::getAccount); }",8e420de118126e64a9f77595dc802d66c400dc81,2018-01-25 16:09:54,6
147150,javatests_com_google_gerrit_server_group_db_GroupConfigTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void createdOnOfNewGroupMatchesCreatedOnOfReloadedGroup() throws java.lang.Exception { java.sql.Timestamp createdOn = java.sql.Timestamp.from(java.time.LocalDateTime.of(2017, java.time.Month.DECEMBER, 1, 17, 49, 13, 123).atOffset(java.time.ZoneOffset.UTC).toInstant()); com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setUpdatedOn(createdOn).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { groupConfig.commit(metaDataUpdate); } com.google.gerrit.server.group.InternalGroup createdGroup = groupConfig.getLoadedGroup().get(); com.google.gerrit.server.group.InternalGroup loadedGroup = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, createdGroup.getGroupUUID()).getLoadedGroup().get(); assertThat(createdGroup.getCreatedOn()).isEqualTo(loadedGroup.getCreatedOn()); }",543990f5cd35d3c476375d8dec000f7c5e576836,"@org.junit.Test public void automaticallyLoadedNewGroupDoesNotChangeOnReload() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { groupConfig.commit(metaDataUpdate); } java.util.Optional<com.google.gerrit.server.group.InternalGroup> createdGroup = groupConfig.getLoadedGroup(); java.util.Optional<com.google.gerrit.server.group.InternalGroup> reloadedGroup = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupCreation.getGroupUUID()).getLoadedGroup(); assertThat(createdGroup).isEqualTo(reloadedGroup); }",90262792f7fa8053b4ad27338b690b2cead34f2a,2018-01-25 16:09:54,6
154494,java_com_google_gerrit_server_restapi_account_AccountsCollection.java,"public com.google.gerrit.server.IdentifiedUser parseOnBehalfOf(@com.google.gerrit.common.Nullable com.google.gerrit.server.CurrentUser caller, java.lang.String id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseIdOnBehalfOf(caller, id); if (user == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""Account Not Found: %s"", id)); } else if (!(accountControlFactory.get().canSee(user.getAccount()))) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""Account Not Found: %s"", id)); } return user; }",acc3554ac936ef6ae2ac7c716bc6a0fccde557fa,"public com.google.gerrit.server.IdentifiedUser parseOnBehalfOf(@com.google.gerrit.common.Nullable com.google.gerrit.server.CurrentUser caller, java.lang.String id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseIdOnBehalfOf(caller, id); if ((user == null) || (!(accountControlFactory.get().canSee(user.getAccount())))) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""'%s' doesn't represent an account or is ambiguous"", id)); } return user; }",c6310cbb2c05043f85323932e706fa39b4840690,"public com.google.gerrit.server.IdentifiedUser parseOnBehalfOf(@com.google.gerrit.common.Nullable com.google.gerrit.server.CurrentUser caller, java.lang.String id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseIdOnBehalfOf(caller, id); if ((user == null) || (!(accountControlFactory.get().canSee(user.getAccount())))) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""Account '%s' is not found or ambiguous"", id)); } return user; }",829d825ed3ca73a2b632cf0659e75e9bf987d4a1,2018-01-26 00:48:11,2
154494,java_com_google_gerrit_server_restapi_account_AccountsCollection.java,"@java.lang.Override public com.google.gerrit.server.account.AccountResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseId(id.get()); if (user == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if (!(accountControlFactory.get().canSee(user.getAccount()))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.account.AccountResource(user); }",ad90bc775b7fb29749f4c482603d810d29ec916d,"@java.lang.Override public com.google.gerrit.server.account.AccountResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseId(id.get()); if ((user == null) || (!(accountControlFactory.get().canSee(user.getAccount())))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format(""'%s' doesn't represent an account or is ambiguous"", id)); } return new com.google.gerrit.server.account.AccountResource(user); }",c48686b3f72f3e47c5903be76c40ef98be90d9d8,"@java.lang.Override public com.google.gerrit.server.account.AccountResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseId(id.get()); if ((user == null) || (!(accountControlFactory.get().canSee(user.getAccount())))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format(""Account '%s' is not found or ambiguous"", id)); } return new com.google.gerrit.server.account.AccountResource(user); }",5a9769b56c70cf69251c80395086ff42715ca704,2018-01-26 00:48:11,2
153612,javatests_com_google_gerrit_extensions_conditions_BooleanConditionTest.java,,,"@org.junit.Test public void reduceComplexTreeToSingleValue() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true))).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); }",cba1719fcd0ced328def5d162d9050027ffaab24,"@org.junit.Test public void reduceComplexTreeToSingleValue() throws java.lang.Exception { com.google.gerrit.extensions.conditions.BooleanCondition nonReduced = com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true))); com.google.gerrit.extensions.conditions.BooleanCondition reduced = com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false); assertEquals(nonReduced.reduce(), reduced); }",e284b26bddd485b0db0e21f022d987034447ee94,2018-01-26 08:27:23,5
153612,javatests_com_google_gerrit_extensions_conditions_BooleanConditionTest.java,,,"@org.junit.Test public void reduceOr() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.or(true, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.or(false, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.or(false, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION)); }",2b9ddbde9021840e2dad92ae5f4ec1a3fe7e1ca4,"@org.junit.Test public void reduceOr_CutOffNonTrivialWhenPossible() throws java.lang.Exception { com.google.gerrit.extensions.conditions.BooleanCondition nonReduced = com.google.gerrit.extensions.conditions.BooleanCondition.or(true, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION); com.google.gerrit.extensions.conditions.BooleanCondition reduced = com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true); assertEquals(nonReduced.reduce(), reduced); }",fa33f9affa0e08358b0f719983b99e9bd7845b15,2018-01-26 08:27:23,5
153612,javatests_com_google_gerrit_extensions_conditions_BooleanConditionTest.java,,,@org.junit.Test public void reduceNot() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION)); },a007a4badd389d5fe77f56649163c9bbb6813cf5,"@org.junit.Test public void reduceNot_ReduceIrrelevant() throws java.lang.Exception { com.google.gerrit.extensions.conditions.BooleanCondition nonReduced = com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); com.google.gerrit.extensions.conditions.BooleanCondition reduced = com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false); assertEquals(nonReduced.reduce(), reduced); }",ca6f531ab34517c557416cf75a94e0d89cce97a3,2018-01-26 08:27:23,5
153612,javatests_com_google_gerrit_extensions_conditions_BooleanConditionTest.java,,,"@org.junit.Test public void reduceAnd() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(false, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(true, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.and(true, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION)); }",d1ae98c414a432adfad58a676e92c85367666030,"@org.junit.Test public void reduceAnd_CutOffNonTrivialWhenPossible() throws java.lang.Exception { com.google.gerrit.extensions.conditions.BooleanCondition nonReduced = com.google.gerrit.extensions.conditions.BooleanCondition.and(false, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION); com.google.gerrit.extensions.conditions.BooleanCondition reduced = com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false); assertEquals(nonReduced.reduce(), reduced); }",a40886611d7393771555cf07938972ca15182653,2018-01-26 08:27:23,5
153612,javatests_com_google_gerrit_extensions_conditions_BooleanConditionTest.java,,,"@org.junit.Test public void reduceComplexTreeToSmallerTree() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true), com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false))).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true))); }",d3a6dd5e77f8b801e66f6e2c7c03ec490cbad8ab,"@org.junit.Test public void reduceComplexTreeToSmallerTree() throws java.lang.Exception { com.google.gerrit.extensions.conditions.BooleanCondition nonReduced = com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true), com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false))); com.google.gerrit.extensions.conditions.BooleanCondition reduced = com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); assertEquals(nonReduced.reduce(), reduced); }",6f9cdc7d46ea7ffef36427411b750da3379de559,2018-01-26 08:27:23,5
153612,java_com_google_gerrit_extensions_conditions_BooleanCondition.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static boolean evaluatesTriviallyToExpectedValue(com.google.gerrit.extensions.conditions.BooleanCondition cond, boolean expectedValue) { if (!(cond.evaluatesTrivially())) { return false; } return (cond.value()) == expectedValue; }",a443f783ccd4bb1a73af9a0b777b64864a7d54ac,"private static boolean evaluatesTriviallyToExpectedValue(com.google.gerrit.extensions.conditions.BooleanCondition cond, boolean expectedValue) { return (cond.evaluatesTrivially()) && ((cond.value()) == expectedValue); }",9f35bb288444653f8e09720710263dcf6df9f165,2018-01-26 08:27:23,5
154071,java_com_google_gerrit_server_restapi_account_SetPreferences.java,"@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.GeneralPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } checkDownloadScheme(input.downloadScheme); com.google.gerrit.server.account.Preferences.validateMy(input.my); com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdate.create().update(""Set General Preferences via API"", id, ( u) -> u.setGeneralPreferences(input)); return cache.get(id).getGeneralPreferences(); }",b7723d735f7291b0e4b8cf03cf122895d9900291,"@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.GeneralPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } checkDownloadScheme(input.downloadScheme); com.google.gerrit.server.account.Preferences.validateMy(input.my); com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateProvider.get().update(""Set General Preferences via API"", id, ( u) -> u.setGeneralPreferences(input)); return cache.get(id).getGeneralPreferences(); }",f94e8c3c3fed9377f309cbb44dcb63800d60888b,"@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.GeneralPreferencesInfo input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } checkDownloadScheme(input.downloadScheme); com.google.gerrit.server.account.Preferences.validateMy(input.my); com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountsUpdateProvider.get().update(""Set General Preferences via API"", id, ( u) -> u.setGeneralPreferences(input)).map(AccountState::getGeneralPreferences).orElseThrow(() -> new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.extensions.restapi.IdString.fromDecoded(id.toString()))); }",1fac22be1f46d19b388eafab26ee1137f20d2072,2018-01-26 14:05:33,3
154071,java_com_google_gerrit_server_restapi_account_SetEditPreferences.java,"@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.EditPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""input must be provided""); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdate.create().update(""Set Diff Preferences via API"", id, ( u) -> u.setEditPreferences(input)); return accountCache.get(id).getEditPreferences(); }",85aaa7feeb8246e4f4fa208d9ed509a9ff961458,"@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.EditPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""input must be provided""); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateProvider.get().update(""Set Diff Preferences via API"", id, ( u) -> u.setEditPreferences(input)); return accountCache.get(id).getEditPreferences(); }",0404547ba91da69e5862ec45fb1f6d21983c1288,"@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.EditPreferencesInfo input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""input must be provided""); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountsUpdateProvider.get().update(""Set Edit Preferences via API"", id, ( u) -> u.setEditPreferences(input)).map(AccountState::getEditPreferences).orElseThrow(() -> new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.extensions.restapi.IdString.fromDecoded(id.toString()))); }",f9bbb9645abe366b422a3b7344051515b827b643,2018-01-26 14:05:33,3
154071,java_com_google_gerrit_server_restapi_account_SetDiffPreferences.java,"@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.DiffPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""input must be provided""); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdate.create().update(""Set Diff Preferences via API"", id, ( u) -> u.setDiffPreferences(input)); return accountCache.get(id).getDiffPreferences(); }",678110799d56bb47c5f2e36649a9375ce03f77a0,"@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.DiffPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""input must be provided""); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateProvider.get().update(""Set Diff Preferences via API"", id, ( u) -> u.setDiffPreferences(input)); return accountCache.get(id).getDiffPreferences(); }",1e130c19f67edc0d583d52af2f15ff596a2998ca,"@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.DiffPreferencesInfo input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""input must be provided""); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountsUpdateProvider.get().update(""Set Diff Preferences via API"", id, ( u) -> u.setDiffPreferences(input)).map(AccountState::getDiffPreferences).orElseThrow(() -> new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.extensions.restapi.IdString.fromDecoded(id.toString()))); }",a5ef0252755309fdfe3a6628b2a6c43db6798ba4,2018-01-26 14:05:33,3
155051,java_com_google_gerrit_server_account_GroupMembers.java,"private java.util.Set<com.google.gerrit.reviewdb.client.Account> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.server.group.InternalGroupDescription(group)); java.util.Set<com.google.gerrit.reviewdb.client.Account> directMembers = group.getMembers().stream().filter(groupControl::canSeeMember).map(accountCache::get).map(AccountState::getAccount).collect(toImmutableSet()); java.util.Set<com.google.gerrit.reviewdb.client.Account> indirectMembers = new java.util.HashSet<>(); if (groupControl.canSeeGroup()) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : group.getSubgroups()) { if (!(seen.contains(subgroupUuid))) { indirectMembers.addAll(listAccounts(subgroupUuid, project, seen)); } } } return com.google.common.collect.Sets.union(directMembers, indirectMembers); }",5b2ff6a0343597cad32328af2f3e8a49ac45873b,"private java.util.Set<com.google.gerrit.reviewdb.client.Account> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.server.group.InternalGroupDescription(group)); java.util.Set<com.google.gerrit.reviewdb.client.Account> directMembers = group.getMembers().stream().filter(groupControl::canSeeMember).map(accountCache::maybeGet).filter(java.util.Optional::isPresent).map(java.util.Optional::get).map(AccountState::getAccount).collect(toImmutableSet()); java.util.Set<com.google.gerrit.reviewdb.client.Account> indirectMembers = new java.util.HashSet<>(); if (groupControl.canSeeGroup()) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : group.getSubgroups()) { if (!(seen.contains(subgroupUuid))) { indirectMembers.addAll(listAccounts(subgroupUuid, project, seen)); } } } return com.google.common.collect.Sets.union(directMembers, indirectMembers); }",15ed4005ce276ea2669789caad1b33bf7e95a7a7,"private java.util.Set<com.google.gerrit.reviewdb.client.Account> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.server.group.InternalGroupDescription(group)); java.util.Set<com.google.gerrit.reviewdb.client.Account> directMembers = group.getMembers().stream().filter(groupControl::canSeeMember).map(accountCache::maybeGet).flatMap(Streams::stream).map(AccountState::getAccount).collect(toImmutableSet()); java.util.Set<com.google.gerrit.reviewdb.client.Account> indirectMembers = new java.util.HashSet<>(); if (groupControl.canSeeGroup()) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : group.getSubgroups()) { if (!(seen.contains(subgroupUuid))) { indirectMembers.addAll(listAccounts(subgroupUuid, project, seen)); } } } return com.google.common.collect.Sets.union(directMembers, indirectMembers); }",87212c0ca04ef80f1cc437ba3d51257e6c4b85b9,2018-01-26 14:16:20,2
153310,java_com_google_gerrit_httpd_GetUserFilter.java,"@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse resp, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((user != null) && (user.isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser who = user.asIdentifiedUser(); if ((who.getUserName()) != null) { req.setAttribute(com.google.gerrit.httpd.GetUserFilter.REQ_ATTR_KEY, who.getUserName()); } else { req.setAttribute(com.google.gerrit.httpd.GetUserFilter.REQ_ATTR_KEY, (""a/"" + (who.getAccountId()))); } } chain.doFilter(req, resp); }",d871ebb383d2c90dc0da0d86cd515d12d13abe39,"@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse resp, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((user != null) && (user.isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser who = user.asIdentifiedUser(); req.setAttribute(com.google.gerrit.httpd.GetUserFilter.REQ_ATTR_KEY, who.getUserName().orElse((""a/"" + (who.getAccountId())))); } chain.doFilter(req, resp); }",c8fe072a4920660426c593b19000cca7dbfc529b,"@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse resp, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((user != null) && (user.isIdentifiedUser())) { req.setAttribute(com.google.gerrit.httpd.GetUserFilter.REQ_ATTR_KEY, user.asIdentifiedUser().getLoggableName()); } chain.doFilter(req, resp); }",dd373d8c266d04cd5943806750bebfc5c87d1d4a,2018-01-26 14:58:46,7
153310,java_com_google_gerrit_server_IdentifiedUser.java,"public org.eclipse.jgit.lib.PersonIdent newCommitterIdent(java.util.Date when, java.util.TimeZone tz) { final com.google.gerrit.reviewdb.client.Account ua = getAccount(); java.lang.String name = ua.getFullName(); java.lang.String email = ua.getPreferredEmail(); if ((email == null) || (email.isEmpty())) { java.lang.String user = getUserName(); if (user == null) { user = ""account-"" + (ua.getId().toString()); } java.lang.String host; if ((canonicalUrl.get()) != null) { try { host = new java.net.URL(canonicalUrl.get()).getHost(); } catch (java.net.MalformedURLException e) { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } } else { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } email = (user + ""@"") + host; } if ((name == null) || (name.isEmpty())) { final int at = email.indexOf('@'); if (0 < at) { name = email.substring(0, at); } else { name = anonymousCowardName; } } return new org.eclipse.jgit.lib.PersonIdent(name, email, when, tz); }",6ade931bcea2089d11493108ba286d906dd1756d,"public org.eclipse.jgit.lib.PersonIdent newCommitterIdent(java.util.Date when, java.util.TimeZone tz) { final com.google.gerrit.reviewdb.client.Account ua = getAccount(); java.lang.String name = ua.getFullName(); java.lang.String email = ua.getPreferredEmail(); if ((email == null) || (email.isEmpty())) { java.lang.String user = getUserName().orElse((""account-"" + (ua.getId().toString()))); java.lang.String host; if ((canonicalUrl.get()) != null) { try { host = new java.net.URL(canonicalUrl.get()).getHost(); } catch (java.net.MalformedURLException e) { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } } else { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } email = (user + ""@"") + host; } if ((name == null) || (name.isEmpty())) { final int at = email.indexOf('@'); if (0 < at) { name = email.substring(0, at); } else { name = anonymousCowardName; } } return new org.eclipse.jgit.lib.PersonIdent(name, email, when, tz); }",72aabda96adcfd59276d9a0379f2fb1ac9dfde5b,"public org.eclipse.jgit.lib.PersonIdent newCommitterIdent(java.util.Date when, java.util.TimeZone tz) { final com.google.gerrit.reviewdb.client.Account ua = getAccount(); java.lang.String name = ua.getFullName(); java.lang.String email = ua.getPreferredEmail(); if ((email == null) || (email.isEmpty())) { java.lang.String user = getUserName().orElseGet(() -> ""account-"" + (ua.getId().toString())); java.lang.String host; if ((canonicalUrl.get()) != null) { try { host = new java.net.URL(canonicalUrl.get()).getHost(); } catch (java.net.MalformedURLException e) { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } } else { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } email = (user + ""@"") + host; } if ((name == null) || (name.isEmpty())) { final int at = email.indexOf('@'); if (0 < at) { name = email.substring(0, at); } else { name = anonymousCowardName; } } return new org.eclipse.jgit.lib.PersonIdent(name, email, when, tz); }",7392d68f26182bedad72d436fe5600b7132f2445,2018-01-26 14:58:46,7
153310,java_com_google_gerrit_server_project_RefPatternMatcher.java,"private java.lang.Iterable<java.lang.String> getUsernames(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { java.util.Set<java.lang.String> emails = user.asIdentifiedUser().getEmailAddresses(); if ((user.getUserName()) == null) { return emails; } else if (emails.isEmpty()) { return com.google.common.collect.ImmutableSet.of(user.getUserName()); } return com.google.common.collect.Iterables.concat(emails, com.google.common.collect.ImmutableSet.of(user.getUserName())); } if ((user.getUserName()) != null) { return com.google.common.collect.ImmutableSet.of(user.getUserName()); } return com.google.common.collect.ImmutableSet.of(); }",850cb940f8b1c3ad6c1433d876561dfdb016fbd8,"private java.lang.Iterable<java.lang.String> getUsernames(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { java.util.Set<java.lang.String> emails = user.asIdentifiedUser().getEmailAddresses(); if (!(user.getUserName().isPresent())) { return emails; } else if (emails.isEmpty()) { return com.google.common.collect.Streams.stream(user.getUserName()).collect(toImmutableSet()); } return com.google.common.collect.Streams.concat(emails.stream(), com.google.common.collect.Streams.stream(user.getUserName())).collect(toImmutableSet()); } return com.google.common.collect.Streams.stream(user.getUserName()).collect(toImmutableSet()); }",5ff8bd725a0aaa7caa119bf0cfddac1076d18fb3,"private com.google.common.collect.ImmutableSet<java.lang.String> getUsernames(com.google.gerrit.server.CurrentUser user) { java.util.stream.Stream<java.lang.String> usernames = com.google.common.collect.Streams.stream(user.getUserName()); if (user.isIdentifiedUser()) { usernames = com.google.common.collect.Streams.concat(usernames, user.asIdentifiedUser().getEmailAddresses().stream()); } return usernames.collect(toImmutableSet()); }",4c4071f4360be75e6a0a10524ceecbcdebca5960,2018-01-26 14:58:46,7
146191,gerrit-sshd_src_main_java_com_google_gerrit_sshd_SshLog.java,"private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return ""Command was already destroyed""; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] args = dcmd.getArguments(); for (int i = 1; i < (args.length); i++) { commandName.append(""."").append(args[i]); } return commandName.toString(); }",fb8f919e7c112abba762266fa30d8cb2d2496216,"private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd, com.google.common.collect.ListMultimap<java.lang.String, ?> parameters) { if (dcmd == null) { return ""Command was already destroyed""; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] args = dcmd.getArguments(); commandName.append(""."").append(args[1]); for (java.lang.String key : parameters.keys()) { for (java.lang.Object value : parameters.get(key)) { if (key.toString().startsWith(""$"")) { commandName.append(""."").append(value); } } } for (java.lang.String key : parameters.keys()) { for (java.lang.Object value : parameters.get(key)) { if (!(key.toString().startsWith(""$""))) { commandName.append(""."").append(key).append(""."").append(value); } } } return commandName.toString(); }",da5121ed348d6ae932505f2ea32712934f675ba7,"private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd, boolean hideSensitive) { if (dcmd == null) { return ""Command was already destroyed""; } return hideSensitive ? dcmd.getFormattedMaskedArguments(""."") : extractWhat(dcmd); }",f532c3371038f98e4c2876911c07083bdf22e71e,2018-01-29 05:58:07,18
146191,gerrit-sshd_src_main_java_com_google_gerrit_sshd_BaseCommand.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean isSensitiveParameters(java.lang.String params) { return (this.sensitiveParameters) == null ? false : sensitiveParameters.contains(params); },698387aea8e47a27356a1490fef2da419456948f,"public java.lang.String getFormattedMaskedArguments(java.lang.String delimiter) { return java.lang.String.join(delimiter, maskedArgv); }",afe77bd450ebd9f9dee8878975ce383c2d30dbe6,2018-01-29 05:58:07,18
146191,gerrit-sshd_src_main_java_com_google_gerrit_sshd_BaseCommand.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void addSensitiveParameters(java.lang.String sensitiveParameters) { if ((this.sensitiveParameters) == null) { this.sensitiveParameters = new java.util.HashSet<>(); } this.sensitiveParameters.add(sensitiveParameters); },d1d0aa2f66d29f86c00450039dd5dd76d8869576,public void setMaskedArguments(java.util.List<java.lang.String> argv) { this.maskedArgv = argv; },ea7dce9905be5fc6973160334c294bd65bdc97a3,2018-01-29 05:58:07,18
146191,gerrit-sshd_src_main_java_com_google_gerrit_sshd_BaseCommand.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.util.Set<java.lang.String> getSensitiveParamters() { return this.sensitiveParameters; },b10eab7ffe18758062cc0ae17dc49d282ac1973e,"private void maskSensitiveParameters() { sensitiveParameters = cache.get(this.getClass()); maskedArgv = new java.util.ArrayList<>(); maskedArgv.add(commandName); boolean maskNext = false; for (int i = 0; i < (argv.length); i++) { if (maskNext) { maskedArgv.add(com.google.gerrit.sshd.BaseCommand.MASK); maskNext = false; continue; } java.lang.String arg = argv[i]; java.lang.String key = extractKey(arg); if (isSensitiveParameter(key)) { maskNext = arg.equals(key); if (!maskNext) { arg = (key + ""="") + (com.google.gerrit.sshd.BaseCommand.MASK); } } maskedArgv.add(arg); } }",82d776344c54bcfb5baadc812b05165328ce8bbe,2018-01-29 05:58:07,18
146191,gerrit-sshd_src_main_java_com_google_gerrit_sshd_BaseCommand.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setSensitiveParamaters(java.util.Set<java.lang.String> set) { this.sensitiveParameters = set; },0e485a0c1a9763e25754323adeef67db0233298f,public boolean isSensitiveParameter(java.lang.String param) { return sensitiveParameters.contains(param); },c82965a2b6be700cb73e615ef785e5b575e0235b,2018-01-29 05:58:07,18
146191,gerrit-sshd_src_main_java_com_google_gerrit_sshd_SshLog.java,"private com.google.common.collect.ListMultimap<java.lang.String, ?> extractParameters(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return com.google.common.collect.MultimapBuilder.hashKeys(0).arrayListValues(0).build(); } java.lang.String[] cmdArgs = dcmd.getArguments(); java.lang.String paramName = null; int argPos = 0; com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> parms = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (int i = 2; i < (cmdArgs.length); i++) { java.lang.String arg = cmdArgs[i]; if (arg.equals(""--"")) { for (i++; i < (cmdArgs.length); i++) { parms.put((""$"" + (argPos++)), cmdArgs[i]); } break; } int eqPos = arg.indexOf('='); if ((arg.startsWith(""--"")) && (eqPos > 0)) { parms.put(arg.substring(0, eqPos), arg.substring((eqPos + 1))); continue; } if (arg.startsWith(""-"")) { if (paramName != null) { parms.put(paramName, null); } paramName = arg; continue; } if (paramName == null) { parms.put((""$"" + (argPos++)), arg); } else { parms.put(paramName, arg); paramName = null; } } if (paramName != null) { parms.put(paramName, null); } return parms; }",dea4fe8cb918ebab0951e4f489dc8636eacb6d60,"private com.google.common.collect.ListMultimap<java.lang.String, ?> extractParameters(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return com.google.common.collect.MultimapBuilder.hashKeys(0).arrayListValues(0).build(); } java.lang.String[] cmdArgs = dcmd.getArguments(); java.lang.String paramName = null; int argPos = 0; com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> parms = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (int i = 2; i < (cmdArgs.length); i++) { java.lang.String arg = cmdArgs[i]; if (arg.equals(""--"")) { for (i++; i < (cmdArgs.length); i++) { parms.put((""$"" + (argPos++)), cmdArgs[i]); } break; } int eqPos = arg.indexOf('='); if ((arg.startsWith(""--"")) && (eqPos > 0)) { java.lang.String parm = arg.substring(0, eqPos); parms.put(parm, (dcmd.isSensitiveParameters(parm) ? com.google.gerrit.sshd.SshLog.MASK : arg.substring((eqPos + 1)))); continue; } if (arg.startsWith(""-"")) { if (paramName != null) { parms.put(paramName, null); } paramName = arg; continue; } if (paramName == null) { parms.put((""$"" + (argPos++)), arg); } else { parms.put(paramName, (dcmd.isSensitiveParameters(paramName) ? com.google.gerrit.sshd.SshLog.MASK : arg)); paramName = null; } } if (paramName != null) { parms.put(paramName, null); } return parms; }",0784e159a00bdfb10019276903066ae5bce5b34b,"private com.google.common.collect.ListMultimap<java.lang.String, ?> extractParameters(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return com.google.common.collect.MultimapBuilder.hashKeys(0).arrayListValues(0).build(); } java.lang.String[] cmdArgs = dcmd.getArguments(); java.lang.String paramName = null; int argPos = 0; com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> parms = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (int i = 2; i < (cmdArgs.length); i++) { java.lang.String arg = cmdArgs[i]; if (arg.equals(""--"")) { for (i++; i < (cmdArgs.length); i++) { parms.put((""$"" + (argPos++)), cmdArgs[i]); } break; } int eqPos = arg.indexOf('='); if ((arg.startsWith(""--"")) && (eqPos > 0)) { java.lang.String param = arg.substring(0, eqPos); java.lang.String value = ((auditMask) && (dcmd.isSensitiveParameter(param))) ? com.google.gerrit.sshd.SshLog.MASK : arg.substring((eqPos + 1)); parms.put(param, value); continue; } if (arg.startsWith(""-"")) { if (paramName != null) { parms.put(paramName, null); } paramName = arg; continue; } if (paramName == null) { parms.put((""$"" + (argPos++)), arg); } else { parms.put(paramName, ((auditMask) && (dcmd.isSensitiveParameter(paramName)) ? com.google.gerrit.sshd.SshLog.MASK : arg)); paramName = null; } } if (paramName != null) { parms.put(paramName, null); } return parms; }",da44f47a6f6fd19ec7644bc5f0f41d522f06a7c7,2018-01-29 05:58:07,18
146191,gerrit-sshd_src_main_java_com_google_gerrit_sshd_DispatchCommand.java,"@java.lang.Override public void start(final org.apache.sshd.server.Environment env) throws java.io.IOException { try { parseCommandLine(); if (com.google.common.base.Strings.isNullOrEmpty(commandName)) { java.io.StringWriter msg = new java.io.StringWriter(); msg.write(usage()); throw die(msg.toString()); } final com.google.gerrit.sshd.CommandProvider p = commands.get(commandName); if (p == null) { java.lang.String msg = (((getName().isEmpty() ? ""Gerrit Code Review"" : getName()) + "": "") + (commandName)) + "": not found""; throw die(msg); } final org.apache.sshd.server.Command cmd = p.getProvider().get(); checkRequiresCapability(cmd); if (cmd instanceof com.google.gerrit.sshd.BaseCommand) { final com.google.gerrit.sshd.BaseCommand bc = ((com.google.gerrit.sshd.BaseCommand) (cmd)); if (getName().isEmpty()) { bc.setName(commandName); } else { bc.setName((((getName()) + "" "") + (commandName))); } bc.setArguments(args.toArray(new java.lang.String[args.size()])); } else if (!(args.isEmpty())) { throw die(((commandName) + "" does not take arguments"")); } provideStateTo(cmd); atomicCmd.set(cmd); cmd.start(env); } catch (com.google.gerrit.sshd.UnloggedFailure e) { java.lang.String msg = e.getMessage(); if (!(msg.endsWith(""\n""))) { msg += ""\n""; } err.write(msg.getBytes(com.google.gerrit.sshd.ENC)); err.flush(); onExit(e.exitCode); } }",687e10ac2de2130af9e3539415e9a0a0749aaadf,"@java.lang.Override public void start(final org.apache.sshd.server.Environment env) throws java.io.IOException { try { parseCommandLine(); if (com.google.common.base.Strings.isNullOrEmpty(commandName)) { java.io.StringWriter msg = new java.io.StringWriter(); msg.write(usage()); throw die(msg.toString()); } final com.google.gerrit.sshd.CommandProvider p = commands.get(commandName); if (p == null) { java.lang.String msg = (((getName().isEmpty() ? ""Gerrit Code Review"" : getName()) + "": "") + (commandName)) + "": not found""; throw die(msg); } final org.apache.sshd.server.Command cmd = p.getProvider().get(); checkRequiresCapability(cmd); if (cmd instanceof com.google.gerrit.sshd.BaseCommand) { final com.google.gerrit.sshd.BaseCommand bc = ((com.google.gerrit.sshd.BaseCommand) (cmd)); if (getName().isEmpty()) { bc.setName(commandName); } else { bc.setName((((getName()) + "" "") + (commandName))); } checkSensitiveData(bc); bc.setArguments(args.toArray(new java.lang.String[args.size()])); } else if (!(args.isEmpty())) { throw die(((commandName) + "" does not take arguments"")); } provideStateTo(cmd); atomicCmd.set(cmd); cmd.start(env); this.setSensitiveParamaters(((com.google.gerrit.sshd.BaseCommand) (cmd)).getSensitiveParamters()); } catch (com.google.gerrit.sshd.UnloggedFailure e) { java.lang.String msg = e.getMessage(); if (!(msg.endsWith(""\n""))) { msg += ""\n""; } err.write(msg.getBytes(com.google.gerrit.sshd.ENC)); err.flush(); onExit(e.exitCode); } }",6dd5880a2dca561665bddfa857ebbd0e0a6199f6,"@java.lang.Override public void start(final org.apache.sshd.server.Environment env) throws java.io.IOException { try { parseCommandLine(); if (com.google.common.base.Strings.isNullOrEmpty(commandName)) { java.io.StringWriter msg = new java.io.StringWriter(); msg.write(usage()); throw die(msg.toString()); } final com.google.gerrit.sshd.CommandProvider p = commands.get(commandName); if (p == null) { java.lang.String msg = (((getName().isEmpty() ? ""Gerrit Code Review"" : getName()) + "": "") + (commandName)) + "": not found""; throw die(msg); } final org.apache.sshd.server.Command cmd = p.getProvider().get(); checkRequiresCapability(cmd); if (cmd instanceof com.google.gerrit.sshd.BaseCommand) { final com.google.gerrit.sshd.BaseCommand bc = ((com.google.gerrit.sshd.BaseCommand) (cmd)); if (getName().isEmpty()) { bc.setName(commandName); } else { bc.setName((((getName()) + "" "") + (commandName))); } bc.setArguments(args.toArray(new java.lang.String[args.size()])); } else if (!(args.isEmpty())) { throw die(((commandName) + "" does not take arguments"")); } provideStateTo(cmd); atomicCmd.set(cmd); cmd.start(env); if (cmd instanceof com.google.gerrit.sshd.BaseCommand) { setMaskedArguments(((com.google.gerrit.sshd.BaseCommand) (cmd)).getMaskedArguments()); } } catch (com.google.gerrit.sshd.UnloggedFailure e) { java.lang.String msg = e.getMessage(); if (!(msg.endsWith(""\n""))) { msg += ""\n""; } err.write(msg.getBytes(com.google.gerrit.sshd.ENC)); err.flush(); onExit(e.exitCode); } }",6314481e470ac9569d77c166c9645846ff9ecefb,2018-01-29 05:58:07,18
146191,gerrit-sshd_src_main_java_com_google_gerrit_sshd_SshLog.java,"void onExecute(com.google.gerrit.sshd.DispatchCommand dcmd, int exitValue, com.google.gerrit.sshd.SshSession sshSession) { final com.google.gerrit.sshd.SshScope.Context ctx = context.get(); ctx.finished = com.google.gerrit.common.TimeUtil.nowMs(); java.lang.String cmd = extractWhat(dcmd); final org.apache.log4j.spi.LoggingEvent event = log(cmd); event.setProperty(com.google.gerrit.sshd.SshLog.P_WAIT, (((ctx.started) - (ctx.created)) + ""ms"")); event.setProperty(com.google.gerrit.sshd.SshLog.P_EXEC, (((ctx.finished) - (ctx.started)) + ""ms"")); final java.lang.String status; switch (exitValue) { case BaseCommand.STATUS_CANCEL : status = ""killed""; break; case BaseCommand.STATUS_NOT_FOUND : status = ""not-found""; break; case BaseCommand.STATUS_NOT_ADMIN : status = ""not-admin""; break; default : status = java.lang.String.valueOf(exitValue); break; } event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, status); java.lang.String peerAgent = sshSession.getPeerAgent(); if (peerAgent != null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_AGENT, peerAgent); } if ((async) != null) { async.append(event); } audit(context.get(), status, dcmd); }",cf4c3c1b79e003f39bf50844dc815aee91333f73,"void onExecute(com.google.gerrit.sshd.DispatchCommand dcmd, int exitValue, com.google.gerrit.sshd.SshSession sshSession) { final com.google.gerrit.sshd.SshScope.Context ctx = context.get(); ctx.finished = com.google.gerrit.common.TimeUtil.nowMs(); com.google.common.collect.ListMultimap<java.lang.String, ?> parameters = extractParameters(dcmd); java.lang.String cmd = extractWhat(dcmd, parameters); final org.apache.log4j.spi.LoggingEvent event = log(cmd); event.setProperty(com.google.gerrit.sshd.SshLog.P_WAIT, (((ctx.started) - (ctx.created)) + ""ms"")); event.setProperty(com.google.gerrit.sshd.SshLog.P_EXEC, (((ctx.finished) - (ctx.started)) + ""ms"")); final java.lang.String status; switch (exitValue) { case BaseCommand.STATUS_CANCEL : status = ""killed""; break; case BaseCommand.STATUS_NOT_FOUND : status = ""not-found""; break; case BaseCommand.STATUS_NOT_ADMIN : status = ""not-admin""; break; default : status = java.lang.String.valueOf(exitValue); break; } event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, status); java.lang.String peerAgent = sshSession.getPeerAgent(); if (peerAgent != null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_AGENT, peerAgent); } if ((async) != null) { async.append(event); } audit(ctx, status, extractWhat(dcmd, parameters), parameters); }",00da1de17c9804d0242e1a7b619b9829014e5069,"void onExecute(com.google.gerrit.sshd.DispatchCommand dcmd, int exitValue, com.google.gerrit.sshd.SshSession sshSession) { final com.google.gerrit.sshd.SshScope.Context ctx = context.get(); ctx.finished = com.google.gerrit.common.TimeUtil.nowMs(); java.lang.String cmd = extractWhat(dcmd, true); final org.apache.log4j.spi.LoggingEvent event = log(cmd); event.setProperty(com.google.gerrit.sshd.SshLog.P_WAIT, (((ctx.started) - (ctx.created)) + ""ms"")); event.setProperty(com.google.gerrit.sshd.SshLog.P_EXEC, (((ctx.finished) - (ctx.started)) + ""ms"")); final java.lang.String status; switch (exitValue) { case BaseCommand.STATUS_CANCEL : status = ""killed""; break; case BaseCommand.STATUS_NOT_FOUND : status = ""not-found""; break; case BaseCommand.STATUS_NOT_ADMIN : status = ""not-admin""; break; default : status = java.lang.String.valueOf(exitValue); break; } event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, status); java.lang.String peerAgent = sshSession.getPeerAgent(); if (peerAgent != null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_AGENT, peerAgent); } if ((async) != null) { async.append(event); } if (!(auditMask)) { cmd = extractWhat(dcmd, false); } audit(ctx, status, cmd, extractParameters(dcmd)); }",3be5ea528d55393743816484824bebf767f9d779,2018-01-29 05:58:07,18
37870,gerrit-server_src_main_java_com_google_gerrit_server_project_ChangeControl.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.common.data.SubmitTypeRecord logActionRuleError(java.lang.String err) { com.google.gerrit.server.project.ChangeControl.log.error(err); return actionRuleError(""Error evaluating project action rules, check server log""); }",338d1ddc70fa8f418ab27151f65d15405020823e,"private com.google.gerrit.common.data.SubmitTypeRecord logTypeRuleError(java.lang.String err) { com.google.gerrit.server.project.ChangeControl.log.error(err); return typeRuleError(""Error evaluating project type rules, check server log""); }",28a00733976df17328ca5a82357b0ab1592ce421,2018-01-31 15:52:40,7
37870,gerrit-server_src_main_java_com_google_gerrit_server_project_ChangeControl.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.common.data.SubmitTypeRecord logInvalidAction(com.googlecode.prolog_cafe.lang.Term rule, com.googlecode.prolog_cafe.lang.Term record) { return logActionRuleError((((((((""Submit action rule "" + rule) + "" for change "") + (change.getId())) + "" of "") + (getProject().getName())) + "" output invalid result: "") + record)); }",79ee056134d3bef5679fa47e66b0408ea4b15814,"private com.google.gerrit.common.data.SubmitTypeRecord logInvalidType(com.googlecode.prolog_cafe.lang.Term rule, java.lang.String record) { return logTypeRuleError((((((((""Submit type rule "" + rule) + "" for change "") + (change.getId())) + "" of "") + (getProject().getName())) + "" output invalid result: "") + record)); }",5fbc48de01c4ca8f9066b0edf8a5903e0ca88674,2018-01-31 15:52:40,7
37870,gerrit-server_src_main_java_com_google_gerrit_server_project_ChangeControl.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.common.data.SubmitTypeRecord logActionRuleError(java.lang.String err, java.lang.Exception e) { com.google.gerrit.server.project.ChangeControl.log.error(err, e); return actionRuleError(""Error evaluating project action rules, check server log""); }",1855267e3ddb927d6b7f79e7073759215d8614ed,"private com.google.gerrit.common.data.SubmitTypeRecord logTypeRuleError(java.lang.String err, java.lang.Exception e) { com.google.gerrit.server.project.ChangeControl.log.error(err, e); return typeRuleError(""Error evaluating project type rules, check server log""); }",590cfb96ddc8dbeba607a8771e41267616d1f8da,2018-01-31 15:52:40,7
37870,gerrit-server_src_main_java_com_google_gerrit_server_project_ChangeControl.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private com.google.gerrit.common.data.SubmitTypeRecord actionRuleError(java.lang.String err) { com.google.gerrit.common.data.SubmitTypeRecord rec = new com.google.gerrit.common.data.SubmitTypeRecord(); rec.status = SubmitTypeRecord.Status.RULE_ERROR; rec.errorMessage = err; return rec; },fc56b079e6226e4696d197316ca36faf42dc6662,private com.google.gerrit.common.data.SubmitTypeRecord typeRuleError(java.lang.String err) { com.google.gerrit.common.data.SubmitTypeRecord rec = new com.google.gerrit.common.data.SubmitTypeRecord(); rec.status = SubmitTypeRecord.Status.RULE_ERROR; rec.errorMessage = err; return rec; },f3d16496430008acff5bc3eb6f5ca8aefc965bf5,2018-01-31 15:52:40,7
155394,src_main_java_com_googlesource_gerrit_plugins_its_jira_JiraModule.java,"@java.lang.Override protected void configure() { if ((gerritConfig.getString(pluginName, null, ""url"")) != null) { com.googlesource.gerrit.plugins.its.jira.JiraModule.LOG.info(""JIRA is configured as ITS""); bind(com.googlesource.gerrit.plugins.its.base.its.ItsFacade.class).toInstance(new com.googlesource.gerrit.plugins.its.jira.JiraItsFacade(pluginName, gerritConfig)); install(new com.googlesource.gerrit.plugins.its.base.ItsHookModule(pluginName, pluginCfgFactory)); } }",2c9afe3e448ae1ae9298ec14db99b63244551845,"@java.lang.Override protected void configure() { if ((gerritConfig.getString(pluginName, null, ""url"")) != null) { com.googlesource.gerrit.plugins.its.jira.JiraModule.LOG.info(""JIRA is configured as ITS""); bind(com.googlesource.gerrit.plugins.its.jira.JiraConfig.class); bind(com.googlesource.gerrit.plugins.its.base.its.ItsFacade.class).to(com.googlesource.gerrit.plugins.its.jira.JiraItsFacade.class).asEagerSingleton(); install(new com.googlesource.gerrit.plugins.its.base.ItsHookModule(pluginName, pluginCfgFactory)); } }",2fd5adbded0f89b6a0caa9ab30054c6ec493a39b,"@java.lang.Override protected void configure() { if ((gerritConfig.getString(pluginName, null, ""url"")) != null) { com.googlesource.gerrit.plugins.its.jira.JiraModule.LOG.info(""JIRA is configured as ITS""); bind(com.googlesource.gerrit.plugins.its.base.its.ItsFacade.class).to(com.googlesource.gerrit.plugins.its.jira.JiraItsFacade.class).asEagerSingleton(); install(new com.googlesource.gerrit.plugins.its.base.ItsHookModule(pluginName, pluginCfgFactory)); } }",eb98e11defe300cebb8494bfebaaf94d206d7696,2018-01-31 22:48:30,7
155394,src_test_java_com_googlesource_gerrit_plugins_its_jira_JiraConfigTest.java,,,"@org.junit.Test public void gerritConfigContainsSaneValues() throws java.lang.Exception { when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, ""username"")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER); when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, ""password"")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PASS); when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, ""url"")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.URL); jiraConfig = new com.googlesource.gerrit.plugins.its.jira.JiraConfig(cfg, com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME); assertThat(jiraConfig.getUsername()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER); assertThat(jiraConfig.getPassword()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PASS); assertThat(jiraConfig.getUrl()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.URL); }",f23ce5d7a73bb709c92590bfb7df2991a5601cbf,"@org.junit.Test public void gerritConfigContainsSaneValues() throws java.lang.Exception { when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, com.googlesource.gerrit.plugins.its.jira.JiraConfig.GERRIT_CONFIG_URL)).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.URL); when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, com.googlesource.gerrit.plugins.its.jira.JiraConfig.GERRIT_CONFIG_USERNAME)).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER); when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, com.googlesource.gerrit.plugins.its.jira.JiraConfig.GERRIT_CONFIG_PASSWORD)).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PASS); jiraConfig = new com.googlesource.gerrit.plugins.its.jira.JiraConfig(cfg, com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME); assertThat(jiraConfig.getUsername()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER); assertThat(jiraConfig.getPassword()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PASS); assertThat(jiraConfig.getJiraUrl()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.URL); }",8244c4f65de97fa2fbabd2a106fb5b7a9b50b4c5,2018-01-31 22:48:30,7
155394,src_main_java_com_googlesource_gerrit_plugins_its_jira_JiraItsFacade.java,"private com.googlesource.gerrit.plugins.its.jira.JiraClient client() throws java.net.MalformedURLException { if ((client) == null) { log.debug(""Connecting to jira at {}"", getUrl()); client = new com.googlesource.gerrit.plugins.its.jira.JiraClient(getUrl(), getUsername(), getPassword()); log.debug(""Authenticating as User {}"", getUsername()); } return client; }",3c6845fc7c9f0d23ceca86662b043b57b403aebb,"private com.googlesource.gerrit.plugins.its.jira.JiraClient client() throws java.net.MalformedURLException { if ((client) == null) { log.debug(""Connecting to jira at {}"", jiraConfig.getUrl()); client = new com.googlesource.gerrit.plugins.its.jira.JiraClient(jiraConfig.getUrl(), jiraConfig.getUsername(), jiraConfig.getPassword()); log.debug(""Authenticating as User {}"", jiraConfig.getUsername()); } return client; }",a263724bee0c6c8e67390c107fc4cd95bb495c1c,"private com.googlesource.gerrit.plugins.its.jira.JiraClient client() throws java.net.MalformedURLException { if ((client) == null) { log.debug(""Connecting to jira at {}"", jiraConfig.getJiraUrl()); client = new com.googlesource.gerrit.plugins.its.jira.JiraClient(jiraConfig.getJiraUrl(), jiraConfig.getUsername(), jiraConfig.getPassword()); log.debug(""Authenticating as User {}"", jiraConfig.getUsername()); } return client; }",c912fa4f1d77d042c2df8e3a35b6393fa6dfd000,2018-01-31 22:48:30,7
155394,src_main_java_com_googlesource_gerrit_plugins_its_jira_JiraConfig.java,,,public java.lang.String getUrl() { return jiraUrl; },8cdea5175fe9393eaf7815e1cb72eabbf71213c9,public java.lang.String getJiraUrl() { return jiraUrl; },b55eccfcc1c5775d0b6fcbf07734ff787d2857d0,2018-01-31 22:48:30,7
156032,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsApiServlet.java,"private void authorizeUser(com.google.gerrit.server.CurrentUser user, com.google.gerrit.server.project.ProjectState state, java.lang.String operation) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { com.google.gerrit.reviewdb.client.Project.NameKey projectName = state.getNameKey(); if (((operation.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.DOWNLOAD)) && (!(permissionBackend.user(user).project(projectName).testOrFalse(com.googlesource.gerrit.plugins.lfs.READ)))) || ((operation.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.UPLOAD)) && (!(permissionBackend.user(user).project(projectName).testOrFalse(com.googlesource.gerrit.plugins.lfs.PUSH_AT_LEAST_ONE_REF))))) { java.lang.String op = operation.toLowerCase(); java.lang.String project = state.getProject().getName(); java.lang.String userName = (com.google.common.base.Strings.isNullOrEmpty(user.getUserName())) ? ""anonymous"" : user.getUserName(); com.googlesource.gerrit.plugins.lfs.LfsApiServlet.log.debug(java.lang.String.format(""operation %s unauthorized for user %s on project %s"", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); } }",68e591a4f88a66259ab104379aaac9f2df95ea40,"private void authorizeUser(com.google.gerrit.server.CurrentUser user, com.google.gerrit.server.project.ProjectState state, java.lang.String operation) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { com.google.gerrit.reviewdb.client.Project.NameKey projectName = state.getNameKey(); if (((operation.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.DOWNLOAD)) && (!(permissionBackend.user(user).project(projectName).testOrFalse(com.googlesource.gerrit.plugins.lfs.READ)))) || ((operation.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.UPLOAD)) && (!(permissionBackend.user(user).project(projectName).testOrFalse(com.googlesource.gerrit.plugins.lfs.PUSH_AT_LEAST_ONE_REF))))) { java.lang.String op = operation.toLowerCase(); java.lang.String project = state.getProject().getName(); java.lang.String userName = (user.getUserName().isPresent()) ? user.getUserName().get() : ""anonymous""; com.googlesource.gerrit.plugins.lfs.LfsApiServlet.log.debug(java.lang.String.format(""operation %s unauthorized for user %s on project %s"", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); } }",d2da78e22bef3537b75b81101a64b315b82bba06,"private void authorizeUser(com.google.gerrit.server.CurrentUser user, com.google.gerrit.server.project.ProjectState state, java.lang.String operation) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { com.google.gerrit.reviewdb.client.Project.NameKey projectName = state.getNameKey(); if (((operation.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.DOWNLOAD)) && (!(permissionBackend.user(user).project(projectName).testOrFalse(com.googlesource.gerrit.plugins.lfs.READ)))) || ((operation.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.UPLOAD)) && (!(permissionBackend.user(user).project(projectName).testOrFalse(com.googlesource.gerrit.plugins.lfs.PUSH_AT_LEAST_ONE_REF))))) { java.lang.String op = operation.toLowerCase(); java.lang.String project = state.getProject().getName(); java.lang.String userName = user.getUserName().orElse(""anonymous""); com.googlesource.gerrit.plugins.lfs.LfsApiServlet.log.debug(java.lang.String.format(""operation %s unauthorized for user %s on project %s"", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); } }",2a15d22c59be0730bdebeb4741cd89b4da853334,2018-02-01 01:10:39,6
156032,src_test_java_com_googlesource_gerrit_plugins_lfs_LfsCipherTest.java,"@org.junit.Test public void testVerifyDecodeAgainstEncodedInput() throws java.lang.Exception { java.lang.String plain = ""plain text""; java.lang.String encrypted = cipher.encrypt(plain); com.google.common.base.Optional<java.lang.String> decrypted = cipher.decrypt(encrypted); assertThat(decrypted.isPresent()).isTrue(); assertThat(decrypted.get()).isEqualTo(plain); }",391070c3471630d32b1e4111d64b0f7b0a79d1ed,"@org.junit.Test public void testVerifyDecodeAgainstEncodedInput() throws java.lang.Exception { java.lang.String plain = ""plain text""; java.lang.String encrypted = cipher.encrypt(plain); java.util.Optional<java.lang.String> decrypted = cipher.decrypt(encrypted); assertThat(decrypted.isPresent()).isTrue(); assertThat(decrypted.get()).isEqualTo(plain); }",731ea3cce02d221a9a23c129795b808c63623632,"@org.junit.Test public void testVerifyDecodeAgainstEncodedInput() throws java.lang.Exception { java.lang.String plain = ""plain text""; java.lang.String encrypted = cipher.encrypt(plain); com.google.common.base.Optional<java.lang.String> decrypted = cipher.decrypt(encrypted); assertThat(decrypted.isPresent()).isTrue(); assertThat(decrypted.get()).isEqualTo(plain); }",391070c3471630d32b1e4111d64b0f7b0a79d1ed,2018-02-01 01:10:39,6
156032,src_main_java_com_googlesource_gerrit_plugins_lfs_locks_LfsLocksAction.java,"private void throwUnauthorizedOp(java.lang.String op, com.google.gerrit.server.project.ProjectState state, com.google.gerrit.server.CurrentUser user) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { java.lang.String project = state.getProject().getName(); java.lang.String userName = (com.google.common.base.Strings.isNullOrEmpty(user.getUserName())) ? ""anonymous"" : user.getUserName(); com.googlesource.gerrit.plugins.lfs.locks.LfsLocksAction.log.debug(java.lang.String.format(""operation %s unauthorized for user %s on project %s"", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); }",8c00cc0483d81cf7873ef330606abf777d9351bf,"private void throwUnauthorizedOp(java.lang.String op, com.google.gerrit.server.project.ProjectState state, com.google.gerrit.server.CurrentUser user) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { java.lang.String project = state.getProject().getName(); java.lang.String userName = (user.getUserName().isPresent()) ? user.getUserName().get() : ""anonymous""; com.googlesource.gerrit.plugins.lfs.locks.LfsLocksAction.log.debug(java.lang.String.format(""operation %s unauthorized for user %s on project %s"", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); }",d56585045555ee25769a881199ff96824c37992e,"private void throwUnauthorizedOp(java.lang.String op, com.google.gerrit.server.project.ProjectState state, com.google.gerrit.server.CurrentUser user) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { java.lang.String project = state.getProject().getName(); java.lang.String userName = user.getUserName().orElse(""anonymous""); com.googlesource.gerrit.plugins.lfs.locks.LfsLocksAction.log.debug(java.lang.String.format(""operation %s unauthorized for user %s on project %s"", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); }",ee28e2c28040c809ebd1a15fd767aeb7b7ba55c3,2018-02-01 01:10:39,6
156032,src_test_java_com_googlesource_gerrit_plugins_lfs_LfsAuthTokenTest.java,@org.junit.Test public void testTokenSerializationDeserialization() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor processor = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor(cipher); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(0); java.lang.String serialized = processor.serialize(token); assertThat(serialized).isNotEmpty(); com.google.common.base.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> deserialized = processor.deserialize(serialized); assertThat(deserialized.isPresent()).isTrue(); assertThat(token.expiresAt).isEqualTo(deserialized.get().expiresAt); },b95b9d62a5d68356dd772b2a6edc56c7acba4cc2,@org.junit.Test public void testTokenSerializationDeserialization() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor processor = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor(cipher); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(0); java.lang.String serialized = processor.serialize(token); assertThat(serialized).isNotEmpty(); java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> deserialized = processor.deserialize(serialized); assertThat(deserialized.isPresent()).isTrue(); assertThat(token.expiresAt).isEqualTo(deserialized.get().expiresAt); },22d66c79bf23dd0fd1bacd5b79fba1ecc2b91fc3,@org.junit.Test public void testTokenSerializationDeserialization() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor processor = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor(cipher); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(0); java.lang.String serialized = processor.serialize(token); assertThat(serialized).isNotEmpty(); com.google.common.base.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> deserialized = processor.deserialize(serialized); assertThat(deserialized.isPresent()).isTrue(); assertThat(token.expiresAt).isEqualTo(deserialized.get().expiresAt); },b95b9d62a5d68356dd772b2a6edc56c7acba4cc2,2018-02-01 01:10:39,6
156032,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsAuthToken.java,public com.google.common.base.Optional<T> deserialize(java.lang.String input) { com.google.common.base.Optional<java.lang.String> decrypted = cipher.decrypt(input); if (!(decrypted.isPresent())) { return com.google.common.base.Optional.absent(); } return createToken(com.google.common.base.Splitter.on(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.Processor.DELIMETER).splitToList(decrypted.get())); },faa3c268f891522c790c5743f2a614fed9535184,public java.util.Optional<T> deserialize(java.lang.String input) { java.util.Optional<java.lang.String> decrypted = cipher.decrypt(input); if (!(decrypted.isPresent())) { return java.util.Optional.empty(); } return createToken(com.google.common.base.Splitter.on(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.Processor.DELIMETER).splitToList(decrypted.get())); },f08efbc8ee4e5d0c4e7e0a88254fa532f03eb2f0,public com.google.common.base.Optional<T> deserialize(java.lang.String input) { com.google.common.base.Optional<java.lang.String> decrypted = cipher.decrypt(input); if (!(decrypted.isPresent())) { return com.google.common.base.Optional.absent(); } return createToken(com.google.common.base.Splitter.on(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.Processor.DELIMETER).splitToList(decrypted.get())); },faa3c268f891522c790c5743f2a614fed9535184,2018-02-01 01:10:39,6
156032,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsAuthToken.java,protected abstract com.google.common.base.Optional<T> createToken(java.util.List<java.lang.String> values);,6eb5bf2f23d8a1df0f41ff9fa40b1b3e3cf13c4f,protected abstract java.util.Optional<T> createToken(java.util.List<java.lang.String> values);,2350767236d4c51e84c4c16b2da3473f93a74304,protected abstract com.google.common.base.Optional<T> createToken(java.util.List<java.lang.String> values);,6eb5bf2f23d8a1df0f41ff9fa40b1b3e3cf13c4f,2018-02-01 01:10:39,6
156032,src_main_java_com_googlesource_gerrit_plugins_lfs_fs_LfsFsRequestAuthorizer.java,"public boolean verifyAuthInfo(java.lang.String authToken, java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id) { com.google.common.base.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> token = processor.deserialize(authToken); if (!(token.isPresent())) { return false; } return new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.Verifier(token.get(), operation, id).verify(); }",d266c782c7130fdf14cc30604c22b4a794d64b60,"public boolean verifyAuthInfo(java.lang.String authToken, java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id) { java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> token = processor.deserialize(authToken); if (!(token.isPresent())) { return false; } return new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.Verifier(token.get(), operation, id).verify(); }",a365315d3d226941ef3ab99a6d2c40135d5a28cd,"public boolean verifyAuthInfo(java.lang.String authToken, java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id) { com.google.common.base.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> token = processor.deserialize(authToken); if (!(token.isPresent())) { return false; } return new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.Verifier(token.get(), operation, id).verify(); }",d266c782c7130fdf14cc30604c22b4a794d64b60,2018-02-01 01:10:39,6
156032,src_main_java_com_googlesource_gerrit_plugins_lfs_fs_LfsFsRequestAuthorizer.java,"@java.lang.Override protected com.google.common.base.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size()) != 3) { return com.google.common.base.Optional.absent(); } return com.google.common.base.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(values.get(0), org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values.get(1)), values.get(2))); }",c54d4682823c8ea4f9e0707c98c9708ead83554b,"@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size()) != 3) { return java.util.Optional.empty(); } return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(values.get(0), org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values.get(1)), values.get(2))); }",bb3f6db26d1b08f22b3d5905937e24ae52c5b78d,"@java.lang.Override protected com.google.common.base.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size()) != 3) { return com.google.common.base.Optional.absent(); } return com.google.common.base.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(values.get(0), org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values.get(1)), values.get(2))); }",c54d4682823c8ea4f9e0707c98c9708ead83554b,2018-02-01 01:10:39,6
156032,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsSshRequestAuthorizer.java,"@java.lang.Override protected com.google.common.base.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size()) != 4) { return com.google.common.base.Optional.absent(); } return com.google.common.base.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(values.get(0), values.get(1), values.get(2), values.get(3))); }",d4d3ff06d1e8e969ee843594d48809307e484a1f,"@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size()) != 4) { return java.util.Optional.empty(); } return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(values.get(0), values.get(1), values.get(2), values.get(3))); }",05d3ee9c3a80a6d7e4290d9c24e78025f2796195,"@java.lang.Override protected com.google.common.base.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size()) != 4) { return com.google.common.base.Optional.absent(); } return com.google.common.base.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(values.get(0), values.get(1), values.get(2), values.get(3))); }",d4d3ff06d1e8e969ee843594d48809307e484a1f,2018-02-01 01:10:39,6
156032,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsSshRequestAuthorizer.java,"com.google.common.base.Optional<java.lang.String> getUserFromValidToken(java.lang.String authToken, java.lang.String project, java.lang.String operation) { com.google.common.base.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> token = processor.deserialize(authToken); if (!(token.isPresent())) { return com.google.common.base.Optional.absent(); } com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier(token.get(), project, operation); if (!(verifier.verify())) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.log.error(""Invalid data was provided with auth token {}."", authToken); return com.google.common.base.Optional.absent(); } return com.google.common.base.Optional.of(token.get().user); }",997d448ecf2885524216bffbdf75bb15a77d225e,"java.util.Optional<java.lang.String> getUserFromValidToken(java.lang.String authToken, java.lang.String project, java.lang.String operation) { java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> token = processor.deserialize(authToken); if (!(token.isPresent())) { return java.util.Optional.empty(); } com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier(token.get(), project, operation); if (!(verifier.verify())) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.log.error(""Invalid data was provided with auth token {}."", authToken); return java.util.Optional.empty(); } return java.util.Optional.of(token.get().user); }",906f6ecef3cd5460dedc07afaafe7ce7b593f708,"com.google.common.base.Optional<java.lang.String> getUserFromValidToken(java.lang.String authToken, java.lang.String project, java.lang.String operation) { com.google.common.base.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> token = processor.deserialize(authToken); if (!(token.isPresent())) { return com.google.common.base.Optional.absent(); } com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier(token.get(), project, operation); if (!(verifier.verify())) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.log.error(""Invalid data was provided with auth token {}."", authToken); return com.google.common.base.Optional.absent(); } return com.google.common.base.Optional.of(token.get().user); }",997d448ecf2885524216bffbdf75bb15a77d225e,2018-02-01 01:10:39,6
156032,src_test_java_com_googlesource_gerrit_plugins_lfs_LfsAuthTokenTest.java,@java.lang.Override protected com.google.common.base.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> createToken(java.util.List<java.lang.String> values) { return com.google.common.base.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values.get(0))); },a4cfaaf625f9fbaf535498dd228cbef7c0292765,@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> createToken(java.util.List<java.lang.String> values) { return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values.get(0))); },b095462119d9098fcc30a845b3a6894ce00e15fb,@java.lang.Override protected com.google.common.base.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> createToken(java.util.List<java.lang.String> values) { return com.google.common.base.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values.get(0))); },a4cfaaf625f9fbaf535498dd228cbef7c0292765,2018-02-01 01:10:39,6
156032,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsCipher.java,"public com.google.common.base.Optional<java.lang.String> decrypt(java.lang.String input) { if (com.google.common.base.Strings.isNullOrEmpty(input)) { return com.google.common.base.Optional.absent(); } byte[] bytes = org.eclipse.jgit.util.Base64.decode(input); byte[] initVector = java.util.Arrays.copyOf(bytes, com.googlesource.gerrit.plugins.lfs.LfsCipher.IV_LENGTH); try { javax.crypto.Cipher cipher = cipher(initVector, javax.crypto.Cipher.DECRYPT_MODE); return com.google.common.base.Optional.of(new java.lang.String(cipher.doFinal(java.util.Arrays.copyOfRange(bytes, com.googlesource.gerrit.plugins.lfs.LfsCipher.IV_LENGTH, bytes.length)), java.nio.charset.StandardCharsets.UTF_8)); } catch (java.security.GeneralSecurityException e) { com.googlesource.gerrit.plugins.lfs.LfsCipher.log.error(""Exception was thrown during token verification"", e); } return com.google.common.base.Optional.absent(); }",380f74f6605ae95971f77207de19a6166bf4e11d,"public java.util.Optional<java.lang.String> decrypt(java.lang.String input) { if (com.google.common.base.Strings.isNullOrEmpty(input)) { return java.util.Optional.empty(); } byte[] bytes = org.eclipse.jgit.util.Base64.decode(input); byte[] initVector = java.util.Arrays.copyOf(bytes, com.googlesource.gerrit.plugins.lfs.LfsCipher.IV_LENGTH); try { javax.crypto.Cipher cipher = cipher(initVector, javax.crypto.Cipher.DECRYPT_MODE); return java.util.Optional.of(new java.lang.String(cipher.doFinal(java.util.Arrays.copyOfRange(bytes, com.googlesource.gerrit.plugins.lfs.LfsCipher.IV_LENGTH, bytes.length)), java.nio.charset.StandardCharsets.UTF_8)); } catch (java.security.GeneralSecurityException e) { com.googlesource.gerrit.plugins.lfs.LfsCipher.log.error(""Exception was thrown during token verification"", e); } return java.util.Optional.empty(); }",82c3294bc480f5b43b3a8dad9119b13d18c4128f,"public com.google.common.base.Optional<java.lang.String> decrypt(java.lang.String input) { if (com.google.common.base.Strings.isNullOrEmpty(input)) { return com.google.common.base.Optional.absent(); } byte[] bytes = org.eclipse.jgit.util.Base64.decode(input); byte[] initVector = java.util.Arrays.copyOf(bytes, com.googlesource.gerrit.plugins.lfs.LfsCipher.IV_LENGTH); try { javax.crypto.Cipher cipher = cipher(initVector, javax.crypto.Cipher.DECRYPT_MODE); return com.google.common.base.Optional.of(new java.lang.String(cipher.doFinal(java.util.Arrays.copyOfRange(bytes, com.googlesource.gerrit.plugins.lfs.LfsCipher.IV_LENGTH, bytes.length)), java.nio.charset.StandardCharsets.UTF_8)); } catch (java.security.GeneralSecurityException e) { com.googlesource.gerrit.plugins.lfs.LfsCipher.log.error(""Exception was thrown during token verification"", e); } return com.google.common.base.Optional.absent(); }",380f74f6605ae95971f77207de19a6166bf4e11d,2018-02-01 01:10:39,6
156032,src_test_java_com_googlesource_gerrit_plugins_lfs_LfsCipherTest.java,"@org.junit.Test public void testVerifyDecodeAgainstInvalidInput() throws java.lang.Exception { java.lang.String plain = ""plain text""; java.lang.String encrypted = cipher.encrypt(plain); while ((encrypted.charAt(0)) == (encrypted.charAt(1))) { encrypted = cipher.encrypt(plain); } com.google.common.base.Optional<java.lang.String> decrypted = cipher.decrypt((((encrypted.substring(1, 2)) + (encrypted.substring(0, 1))) + (encrypted.substring(2)))); assertThat(decrypted.isPresent()).isTrue(); assertThat(decrypted.get()).isNotEqualTo(plain); }",076287d072e9a80e83cae796d0d35d7ea5559a2c,"@org.junit.Test public void testVerifyDecodeAgainstInvalidInput() throws java.lang.Exception { java.lang.String plain = ""plain text""; java.lang.String encrypted = cipher.encrypt(plain); while ((encrypted.charAt(0)) == (encrypted.charAt(1))) { encrypted = cipher.encrypt(plain); } java.util.Optional<java.lang.String> decrypted = cipher.decrypt((((encrypted.substring(1, 2)) + (encrypted.substring(0, 1))) + (encrypted.substring(2)))); assertThat(decrypted.isPresent()).isTrue(); assertThat(decrypted.get()).isNotEqualTo(plain); }",dceaa846888b879fd0cc0c2be3de358e13d95b2a,"@org.junit.Test public void testVerifyDecodeAgainstInvalidInput() throws java.lang.Exception { java.lang.String plain = ""plain text""; java.lang.String encrypted = cipher.encrypt(plain); while ((encrypted.charAt(0)) == (encrypted.charAt(1))) { encrypted = cipher.encrypt(plain); } com.google.common.base.Optional<java.lang.String> decrypted = cipher.decrypt((((encrypted.substring(1, 2)) + (encrypted.substring(0, 1))) + (encrypted.substring(2)))); assertThat(decrypted.isPresent()).isTrue(); assertThat(decrypted.get()).isNotEqualTo(plain); }",076287d072e9a80e83cae796d0d35d7ea5559a2c,2018-02-01 01:10:39,6
156032,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsAuthUserProvider.java,"public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { com.google.common.base.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { com.google.gerrit.server.account.AccountState acc = accounts.getByUsername(user.get()); if (acc != null) { return userFactory.create(acc); } } } } return anonymous.get(); }",310538d8cee6e8d97657374cb4010d13d96d0666,"public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { java.util.Optional<com.google.gerrit.server.account.AccountState> acc = accounts.getByUsername(user.get()); if (acc.isPresent()) { return userFactory.create(acc.get()); } } } } return anonymous.get(); }",6327e8995a296e04bee8985e534854858ae9565a,"public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { com.google.common.base.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { java.util.Optional<com.google.gerrit.server.account.AccountState> acc = accounts.getByUsername(user.get()); if (acc.isPresent()) { return userFactory.create(acc.get()); } } } } return anonymous.get(); }",2dff4e9c0e46d4fd82d725b086942f815e2702af,2018-02-01 01:10:39,6
156132,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsAuthUserProvider.java,"public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { com.google.common.base.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { com.google.gerrit.server.account.AccountState acc = accounts.getByUsername(user.get()); if (acc != null) { return userFactory.create(acc); } } } } return anonymous.get(); }",310538d8cee6e8d97657374cb4010d13d96d0666,"public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { com.google.gerrit.server.account.AccountState acc = accounts.getByUsername(user.get()); if (acc != null) { return userFactory.create(acc); } } } } return anonymous.get(); }",22425141cd83870000df7e7822989947308e8d39,"public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { java.util.Optional<com.google.gerrit.server.account.AccountState> acc = accounts.getByUsername(user.get()); if (acc.isPresent()) { return userFactory.create(acc.get()); } } } } return anonymous.get(); }",6327e8995a296e04bee8985e534854858ae9565a,2018-02-01 05:07:20,5
138331,src_test_java_com_googlesource_gerrit_plugins_lfs_LfsAuthTokenTest.java,@org.junit.Test public void testOnTime() throws java.lang.Exception { org.joda.time.DateTime now = now(); assertThat(Verifier.onTime(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.print(now.plusMillis(1)))).isTrue(); },6618273511d080d69b6b2f1519c7baddc366aa50,@org.junit.Test public void testOnTime() throws java.lang.Exception { assertThat(Verifier.onTime(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(now().plusMillis(1)))).isTrue(); },8a310a1b80aa0f81dcad81fe3c95fd488f4c0e00,@org.junit.Test public void testOnTime() throws java.lang.Exception { assertThat(Verifier.onTime(formatter.format(now().plusMillis(1)))).isTrue(); },05fceed43e18d76197d6e1c1518e8bfeb67716f9,2018-02-01 05:09:14,12
138331,src_test_java_com_googlesource_gerrit_plugins_lfs_LfsAuthTokenTest.java,@org.junit.Test public void testExpiredTime() throws java.lang.Exception { org.joda.time.DateTime now = now(); assertThat(Verifier.onTime(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.print(now.minusMillis(1)))).isFalse(); },e55243c78ab53c576828c3581d25043731a428f9,@org.junit.Test public void testExpiredTime() throws java.lang.Exception { assertThat(Verifier.onTime(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(now().minusMillis(1)))).isFalse(); },b8a608d60b462bdd636a15389a73944b03bede9d,@org.junit.Test public void testExpiredTime() throws java.lang.Exception { assertThat(Verifier.onTime(formatter.format(now().minusMillis(1)))).isFalse(); },d8e1a6ce6eeb2a60cf6cb38bf281d7963f77cd42,2018-02-01 05:09:14,12
138331,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsAuthToken.java,static boolean onTime(java.lang.String dateTime) { java.lang.String now = com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.print(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now()); return (now.compareTo(dateTime)) <= 0; },52a16b34330fcdd7e018ff28e8db0ea167d73e4e,static boolean onTime(java.lang.String dateTime) { java.lang.String now = com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now()); return (now.compareTo(dateTime)) <= 0; },1dfea34a809a77a1d6b255959b20b0434ae723b9,static boolean onTime(java.lang.String dateTime) { return (com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMAT.now().compareTo(dateTime)) <= 0; },38f0aaa1af88381d133c1a3dd6a2636a8fea6442,2018-02-01 05:09:14,12
138331,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsAuthToken.java,static java.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.print(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now().plusSeconds(expirationSeconds)); },a2948726b3256e1edc5bb3738ce5b8bb8a446703,static java.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now().plusSeconds(expirationSeconds)); },46ad1afb453a8da503b26861e10b6b3ea6575945,static java.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMAT.now(expirationSeconds); },def5cae569b8b4f988e2385bcad75fba7d6bfdb4,2018-02-01 05:09:14,12
155732,src_main_java_com_googlesource_gerrit_plugins_reviewnotes_HeaderFormatter.java,"void appendSubmittedBy(com.google.gerrit.reviewdb.client.Account user) { sb.append(""Submitted-by: ""); appendUserData(user); sb.append(""\n""); }",4a49b1f6af6713206432008e6d5b9e4f9261f05a,"void appendSubmittedBy(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { sb.append(""Submitted-by: ""); appendUserData(accountId, account); sb.append(""\n""); }",f6904ff0a0243ff63c4ad9e411aa54bd54109e04,"void appendSubmittedBy(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Optional<com.google.gerrit.reviewdb.client.Account> account) { sb.append(""Submitted-by: ""); appendUserData(accountId, account); sb.append(""\n""); }",3f03fa734f33567620c8c36f344c0503ea4cf6ff,2018-02-02 16:00:03,2
155750,src_main_java_com_googlesource_gerrit_plugins_reviewnotes_HeaderFormatter.java,"private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkState(((account == null) || (accountId.equals(account.getId()))), ""mismatching account IDs""); boolean needSpace = false; boolean wroteData = false; if (account != null) { if (((account.getFullName()) != null) && (!(account.getFullName().isEmpty()))) { sb.append(account.getFullName()); needSpace = true; wroteData = true; } if (((account.getPreferredEmail()) != null) && (!(account.getPreferredEmail().isEmpty()))) { if (needSpace) { sb.append("" ""); } sb.append(""<"").append(account.getPreferredEmail()).append("">""); wroteData = true; } } if (!wroteData) { sb.append(anonymousCowardName).append("" #"").append(accountId); } }",93238aaf79fcf597faf61d1987c12df00fcb493a,"private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkState(((account == null) || (accountId.equals(account.getId()))), ""mismatching account IDs""); boolean needSpace = false; boolean wroteData = false; if (account != null) { if (!(com.google.common.base.Strings.isNullOrEmpty(account.getFullName()))) { sb.append(account.getFullName()); needSpace = true; wroteData = true; } if (!(com.google.common.base.Strings.isNullOrEmpty(account.getPreferredEmail()))) { if (needSpace) { sb.append("" ""); } sb.append(""<"").append(account.getPreferredEmail()).append("">""); wroteData = true; } } if (!wroteData) { sb.append(anonymousCowardName).append("" #"").append(accountId); } }",4fa6fc99b73dfef5d06ff89a73d809dcf81339e4,"private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Optional<com.google.gerrit.reviewdb.client.Account> account) { checkState(((!(account.isPresent())) || (accountId.equals(account.get().getId()))), ""mismatching account IDs""); boolean needSpace = false; boolean wroteData = false; if (account.isPresent()) { java.lang.String fullName = account.get().getFullName(); if (!(com.google.common.base.Strings.isNullOrEmpty(fullName))) { sb.append(fullName); needSpace = true; wroteData = true; } java.lang.String preferredEmail = account.get().getPreferredEmail(); if (!(com.google.common.base.Strings.isNullOrEmpty(preferredEmail))) { if (needSpace) { sb.append("" ""); } sb.append(""<"").append(preferredEmail).append("">""); wroteData = true; } } if (!wroteData) { sb.append(anonymousCowardName).append("" #"").append(accountId); } }",75fe5ceb1365d1d955464ffcc22cd3d32e915be1,2018-02-02 16:00:03,2
155732,src_main_java_com_googlesource_gerrit_plugins_reviewnotes_CreateReviewNotes.java,"private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), ps.getId(), null, null)) { if ((a.getValue()) == 0) { } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type != null) { fmt.appendApproval(type, a.getValue(), accountCache.get(a.getAccountId()).getAccount()); } } } if (submit != null) { fmt.appendSubmittedBy(accountCache.get(submit.getAccountId()).getAccount()); fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl) != null) { fmt.appendReviewedOn(canonicalWebUrl, ps.getId().getParentKey()); } fmt.appendProject(project.get()); fmt.appendBranch(change.getDest().get()); }",8df98c32e9c4cbca298ad453e779a82441598228,"private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), ps.getId(), null, null)) { if ((a.getValue()) == 0) { } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type != null) { fmt.appendApproval(type, a.getValue(), a.getAccountId(), accountCache.maybeGet(a.getAccountId()).map(AccountState::getAccount).orElse(null)); } } } if (submit != null) { fmt.appendSubmittedBy(submit.getAccountId(), accountCache.maybeGet(submit.getAccountId()).map(AccountState::getAccount).orElse(null)); fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl) != null) { fmt.appendReviewedOn(canonicalWebUrl, ps.getId().getParentKey()); } fmt.appendProject(project.get()); fmt.appendBranch(change.getDest().get()); }",4d58d07f266599e47311064dc0278c19f2edcf70,"private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), ps.getId(), null, null)) { if ((a.getValue()) == 0) { } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type != null) { fmt.appendApproval(type, a.getValue(), a.getAccountId(), accountCache.maybeGet(a.getAccountId()).map(AccountState::getAccount)); } } } if (submit != null) { fmt.appendSubmittedBy(submit.getAccountId(), accountCache.maybeGet(submit.getAccountId()).map(AccountState::getAccount)); fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl) != null) { fmt.appendReviewedOn(canonicalWebUrl, ps.getId().getParentKey()); } fmt.appendProject(project.get()); fmt.appendBranch(change.getDest().get()); }",bbc85fdd705894d871c0196cca6429e1d9096c53,2018-02-02 16:00:03,2
155732,src_main_java_com_googlesource_gerrit_plugins_reviewnotes_HeaderFormatter.java,"private void appendUserData(com.google.gerrit.reviewdb.client.Account user) { boolean needSpace = false; boolean wroteData = false; if (((user.getFullName()) != null) && (!(user.getFullName().isEmpty()))) { sb.append(user.getFullName()); needSpace = true; wroteData = true; } if (((user.getPreferredEmail()) != null) && (!(user.getPreferredEmail().isEmpty()))) { if (needSpace) { sb.append("" ""); } sb.append(""<"").append(user.getPreferredEmail()).append("">""); wroteData = true; } if (!wroteData) { sb.append(anonymousCowardName).append("" #"").append(user.getId()); } }",bbcc75e074bf51dfae3425198f966d0130d073cf,"private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkState(((account == null) || (accountId.equals(account.getId()))), ""mismatching account IDs""); boolean needSpace = false; boolean wroteData = false; if (account != null) { if (((account.getFullName()) != null) && (!(account.getFullName().isEmpty()))) { sb.append(account.getFullName()); needSpace = true; wroteData = true; } if (((account.getPreferredEmail()) != null) && (!(account.getPreferredEmail().isEmpty()))) { if (needSpace) { sb.append("" ""); } sb.append(""<"").append(account.getPreferredEmail()).append("">""); wroteData = true; } } if (!wroteData) { sb.append(anonymousCowardName).append("" #"").append(accountId); } }",93238aaf79fcf597faf61d1987c12df00fcb493a,"private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Optional<com.google.gerrit.reviewdb.client.Account> account) { checkState(((!(account.isPresent())) || (accountId.equals(account.get().getId()))), ""mismatching account IDs""); boolean needSpace = false; boolean wroteData = false; if (account.isPresent()) { java.lang.String fullName = account.get().getFullName(); if ((fullName != null) && (!(fullName.isEmpty()))) { sb.append(fullName); needSpace = true; wroteData = true; } java.lang.String preferredEmail = account.get().getPreferredEmail(); if ((preferredEmail != null) && (!(preferredEmail.isEmpty()))) { if (needSpace) { sb.append("" ""); } sb.append(""<"").append(preferredEmail).append("">""); wroteData = true; } } if (!wroteData) { sb.append(anonymousCowardName).append("" #"").append(accountId); } }",fd067eff07d6bb8e604711daa840d7af8eb4d383,2018-02-02 16:00:03,2
155732,src_main_java_com_googlesource_gerrit_plugins_reviewnotes_HeaderFormatter.java,"void appendApproval(com.google.gerrit.common.data.LabelType label, short value, com.google.gerrit.reviewdb.client.Account user) { sb.append(label.getName()); sb.append(com.google.gerrit.common.data.LabelValue.formatValue(value)); sb.append("": ""); appendUserData(user); sb.append(""\n""); }",bea0eb1a85697af85e3346608aa17f966803d443,"void appendApproval(com.google.gerrit.common.data.LabelType label, short value, com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { sb.append(label.getName()); sb.append(com.google.gerrit.common.data.LabelValue.formatValue(value)); sb.append("": ""); appendUserData(accountId, account); sb.append(""\n""); }",348dc76bfb4c30bf792336d51029550452b7cdc9,"void appendApproval(com.google.gerrit.common.data.LabelType label, short value, com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Optional<com.google.gerrit.reviewdb.client.Account> account) { sb.append(label.getName()); sb.append(com.google.gerrit.common.data.LabelValue.formatValue(value)); sb.append("": ""); appendUserData(accountId, account); sb.append(""\n""); }",98751cf5f8fb064d07855f3b93d812360d2b87fa,2018-02-02 16:00:03,2
155810,java_com_google_gerrit_server_notedb_ChangeNoteUtil.java,"public org.eclipse.jgit.lib.PersonIdent newIdent(com.google.gerrit.reviewdb.client.Account.Id authorId, java.util.Date when, org.eclipse.jgit.lib.PersonIdent serverIdent) { com.google.gerrit.reviewdb.client.Account author = accountCache.get(authorId).getAccount(); return new org.eclipse.jgit.lib.PersonIdent(author.getName(), (((author.getId().get()) + ""@"") + (serverId)), when, serverIdent.getTimeZone()); }",3d30d2de2f4021554c96cbc9c257a4e9631a3445,"public org.eclipse.jgit.lib.PersonIdent newIdent(com.google.gerrit.reviewdb.client.Account.Id authorId, java.util.Date when, org.eclipse.jgit.lib.PersonIdent serverIdent) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> author = accountCache.maybeGet(authorId).map(AccountState::getAccount); return new org.eclipse.jgit.lib.PersonIdent(author.map(Account::getName).orElse((""GerritAccount #"" + authorId)), (((authorId.get()) + ""@"") + (serverId)), when, serverIdent.getTimeZone()); }",a157c33c4f6832e3967c6f6e8699f3c1acbc422c,"public org.eclipse.jgit.lib.PersonIdent newIdent(com.google.gerrit.reviewdb.client.Account.Id authorId, java.util.Date when, org.eclipse.jgit.lib.PersonIdent serverIdent) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> author = accountCache.maybeGet(authorId).map(AccountState::getAccount); return new org.eclipse.jgit.lib.PersonIdent(author.map(Account::getName).orElseGet(() -> com.google.gerrit.reviewdb.client.Account.getName(authorId)), (((authorId.get()) + ""@"") + (serverId)), when, serverIdent.getTimeZone()); }",3c2566c1c12fcd46e601c46909d5aee43fe93f41,2018-02-02 16:46:24,3
156674,src_main_java_com_googlesource_gerrit_plugins_its_jira_restapi_JiraRestApi.java,java.net.URL getBaseUrl() { return baseUrl; },5aea8a354fdb1ad07f48e6f9c56a5064630bdb1f,java.lang.String getBaseUrl() { return baseUrl; },56393764eb72d90c35634449b5c9b03cfb034252,@com.google.common.annotations.VisibleForTesting java.lang.String getBaseUrl() { return baseUrl; },8e4c1772a09a0e11e21815e9ff2dd51bb5ac72fe,2018-02-02 20:41:15,7
156674,src_main_java_com_googlesource_gerrit_plugins_its_jira_restapi_JiraRestApi.java,"private java.net.HttpURLConnection prepHttpConnection(java.lang.String spec, boolean isPostRequest) throws java.io.IOException { java.net.URL url = new java.net.URL(baseUrl, spec); java.net.ProxySelector proxySelector = java.net.ProxySelector.getDefault(); java.net.Proxy proxy = org.eclipse.jgit.util.HttpSupport.proxyFor(proxySelector, url); java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection(proxy))); conn.setRequestProperty(""Authorization"", (""Basic "" + (auth))); conn.setRequestProperty(""Content-Type"", ""application/json""); if (isPostRequest) { conn.setRequestMethod(""POST""); conn.setDoOutput(true); } else { conn.setRequestMethod(""GET""); } return conn; }",29afd93d7549adfe77e51a36407dfa914afc255c,"private java.net.HttpURLConnection prepHttpConnection(java.lang.String spec, boolean isPostRequest) throws java.io.IOException { java.lang.String urlWithSpec = (baseUrl) + spec; java.net.URL url = new java.net.URL(urlWithSpec); java.net.ProxySelector proxySelector = java.net.ProxySelector.getDefault(); java.net.Proxy proxy = org.eclipse.jgit.util.HttpSupport.proxyFor(proxySelector, url); java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection(proxy))); conn.setRequestProperty(""Authorization"", (""Basic "" + (auth))); conn.setRequestProperty(""Content-Type"", ""application/json""); if (isPostRequest) { conn.setRequestMethod(""POST""); conn.setDoOutput(true); } else { conn.setRequestMethod(""GET""); } return conn; }",4a28586fd8577837427f4074b16c8d0240ac454a,"private java.net.HttpURLConnection prepHttpConnection(java.lang.String spec, boolean isPostRequest) throws java.io.IOException { java.net.URL url = new java.net.URL(((baseUrl) + spec)); java.net.ProxySelector proxySelector = java.net.ProxySelector.getDefault(); java.net.Proxy proxy = org.eclipse.jgit.util.HttpSupport.proxyFor(proxySelector, url); java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection(proxy))); conn.setRequestProperty(""Authorization"", (""Basic "" + (auth))); conn.setRequestProperty(""Content-Type"", ""application/json""); if (isPostRequest) { conn.setRequestMethod(""POST""); conn.setDoOutput(true); } else { conn.setRequestMethod(""GET""); } return conn; }",da62ee772babc1d648fb47a780921adca86d7b0f,2018-02-02 20:41:15,7
156690,src_main_java_com_ericsson_gerrit_plugins_projectgroupstructure_ProjectCreationValidator.java,"@java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException { java.lang.String name = args.getProjectName(); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug(""validating creation of {}"", name); HEAD(81.0F); com.ericsson.gerrit.plugins.projectgroupstructure.d64 Compile = 2.15 - (rc2); com.google.gerrit.server.project.ProjectControl parentCtrl; try { parentCtrl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.error((((((""Failed to create project "" + name) + ""; Cannot retrieve info about parent project "") + (args.newParent.get())) + "": "") + (e.getMessage())), e); throw new com.google.gerrit.server.validators.ValidationException(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.AN_ERROR_OCCURRED_MSG); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); if (name.contains("" "")) { throw new com.google.gerrit.server.validators.ValidationException(java.lang.String.format(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.PROJECT_CANNOT_CONTAINS_SPACES_MSG, documentationUrl)); } com.google.gerrit.server.project.ProjectControl parentCtrl = args.newParent; if (parentCtrl.getUser().getCapabilities().canAdministrateServer()) com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug(""admin is creating project, bypassing all rules""); return; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.permissions.PermissionBackendException e) { } if (allProjectsName.get().equals(parentCtrl.getProject().getNameKey())) { validateRootProject(name, args.permissionsOnly); } else { validateProject(name, parentCtrl); } if ((!(parentCtrl.isOwner())) && (!(configDisableGrantingOwnership(parentCtrl)))) { args.ownerIds.add(createGroup((name + ""-admins""))); } }",11471f81d54fe0fdf6fe76bec272ae9603f92a48,"@java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException { java.lang.String name = args.getProjectName(); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug(""validating creation of {}"", name); if (name.contains("" "")) { throw new com.google.gerrit.server.validators.ValidationException(java.lang.String.format(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.PROJECT_CANNOT_CONTAINS_SPACES_MSG, documentationUrl)); } com.google.gerrit.server.project.ProjectControl parentCtrl; try { parentCtrl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.error((((((""Failed to create project "" + name) + ""; Cannot retrieve info about parent project "") + (args.newParent.get())) + "": "") + (e.getMessage())), e); throw new com.google.gerrit.server.validators.ValidationException(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.AN_ERROR_OCCURRED_MSG); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug(""admin is creating project, bypassing all rules""); return; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.permissions.PermissionBackendException e) { } if (allProjectsName.get().equals(parentCtrl.getProject().getNameKey())) { validateRootProject(name, args.permissionsOnly); } else { validateProject(name, parentCtrl); } if ((!(parentCtrl.isOwner())) && (!(configDisableGrantingOwnership(parentCtrl)))) { args.ownerIds.add(createGroup((name + ""-admins""))); } }",454289cafe7b9e4bc7196990546f6c40832f2934,"@java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException { java.lang.String name = args.getProjectName(); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug(""validating creation of {}"", name); if (name.contains("" "")) { throw new com.google.gerrit.server.validators.ValidationException(java.lang.String.format(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.PROJECT_CANNOT_CONTAINS_SPACES_MSG, documentationUrl)); } com.google.gerrit.server.project.ProjectControl parentCtrl; try { parentCtrl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.error(""Failed to create project {}; Cannot retrieve info about parent project {}: {}"", name, args.newParent.get(), e.getMessage(), e); throw new com.google.gerrit.server.validators.ValidationException(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.AN_ERROR_OCCURRED_MSG); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug(""admin is creating project, bypassing all rules""); return; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.permissions.PermissionBackendException e) { } if (allProjectsName.get().equals(parentCtrl.getProject().getNameKey())) { validateRootProject(name, args.permissionsOnly); } else { validateProject(name, parentCtrl); } if ((!(parentCtrl.isOwner())) && (!(configDisableGrantingOwnership(parentCtrl)))) { args.ownerIds.add(createGroup((name + ""-admins""))); } }",acc34c6fcbf7b2d51e4e14821939a55de0cc37ba,2018-02-02 22:13:16,2
156672,src_main_java_com_ericsson_gerrit_plugins_projectgroupstructure_ProjectCreationValidator.java,"@java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException { java.lang.String name = args.getProjectName(); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug(""validating creation of {}"", name); com.google.gerrit.server.project.ProjectControl parentCtrl = args.newParent; try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug(""admin is creating project, bypassing all rules""); return; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.permissions.PermissionBackendException e) { } if (allProjectsName.get().equals(parentCtrl.getProject().getNameKey())) { validateRootProject(name, args.permissionsOnly); } else { validateProject(name, parentCtrl); } if ((!(parentCtrl.isOwner())) && (!(configDisableGrantingOwnership(parentCtrl)))) { args.ownerIds.add(createGroup((name + ""-admins""))); } }",148ec98030af1c9ed186036cdeae59f2d5a5fa48,"@java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException { java.lang.String name = args.getProjectName(); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug(""validating creation of {}"", name); com.google.gerrit.server.project.ProjectControl parentCtrl; try { parentCtrl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.error((((((""Failed to create project "" + name) + ""; Cannot retrieve info about parent project "") + (args.newParent.get())) + "": "") + (e.getMessage())), e); throw new com.google.gerrit.server.validators.ValidationException(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.AN_ERROR_OCCURRED_MSG); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug(""admin is creating project, bypassing all rules""); return; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.permissions.PermissionBackendException e) { } if (allProjectsName.get().equals(parentCtrl.getProject().getNameKey())) { validateRootProject(name, args.permissionsOnly); } else { validateProject(name, parentCtrl); } if ((!(parentCtrl.isOwner())) && (!(configDisableGrantingOwnership(parentCtrl)))) { args.ownerIds.add(createGroup((name + ""-admins""))); } }",f76e9b5af48898e0f7d712a5affc265ef68bd5da,"@java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException { java.lang.String name = args.getProjectName(); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug(""validating creation of {}"", name); com.google.gerrit.server.project.ProjectControl parentCtrl; try { parentCtrl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.error(""Failed to create project {}; Cannot retrieve info about parent project {}: {}"", name, args.newParent.get(), e.getMessage(), e); throw new com.google.gerrit.server.validators.ValidationException(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.AN_ERROR_OCCURRED_MSG); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug(""admin is creating project, bypassing all rules""); return; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.permissions.PermissionBackendException e) { } if (allProjectsName.get().equals(parentCtrl.getProject().getNameKey())) { validateRootProject(name, args.permissionsOnly); } else { validateProject(name, parentCtrl); } if ((!(parentCtrl.isOwner())) && (!(configDisableGrantingOwnership(parentCtrl)))) { args.ownerIds.add(createGroup((name + ""-admins""))); } }",7e1a2e25ee7851c6feebeadd8ed076bee993828a,2018-02-02 22:13:16,3
157072,src_main_java_com_googlesource_gerrit_plugins_its_jira_JiraClient.java,"public boolean issueExists(java.lang.String issueKey) throws java.io.IOException { com.googlesource.gerrit.plugins.its.jira.restapi.JiraRestApi<com.googlesource.gerrit.plugins.its.jira.restapi.JiraIssue> api = apiBuilder.getIssue(); api.doGet((""/"" + issueKey), java.net.HttpURLConnection.HTTP_OK, new int[]{ java.net.HttpURLConnection.HTTP_NOT_FOUND, java.net.HttpURLConnection.HTTP_FORBIDDEN }); java.lang.Integer code = api.getResponseCode(); switch (code) { case java.net.HttpURLConnection.HTTP_OK : return true; case java.net.HttpURLConnection.HTTP_NOT_FOUND : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error(""Issue {} not found"", issueKey); return false; case java.net.HttpURLConnection.HTTP_FORBIDDEN : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error(""No permission to read Issue {}"", issueKey); return false; default : throw new java.io.IOException((""Unexpected HTTP code received:"" + (code.toString()))); } }",656c5d21e508c85336d3b315d9063d171142c23c,"public boolean issueExists(java.lang.String issueKey) throws java.io.IOException { com.googlesource.gerrit.plugins.its.jira.restapi.JiraRestApi<com.googlesource.gerrit.plugins.its.jira.restapi.JiraIssue> api = apiBuilder.getIssue(); api.doGet(issueKey, java.net.HttpURLConnection.HTTP_OK, null); java.lang.Integer code = api.getResponseCode(); switch (code) { case java.net.HttpURLConnection.HTTP_OK : return true; case java.net.HttpURLConnection.HTTP_NOT_FOUND : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error(""Issue {} not found"", issueKey); return false; case java.net.HttpURLConnection.HTTP_FORBIDDEN : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error(""No permission to read Issue {}"", issueKey); return false; default : throw new java.io.IOException((""Unexpected HTTP code received:"" + (code.toString()))); } }",4bd25f26e98795ff4a6ef0f43d2c2d6c00605375,"public boolean issueExists(java.lang.String issueKey) throws java.io.IOException { com.googlesource.gerrit.plugins.its.jira.restapi.JiraRestApi<com.googlesource.gerrit.plugins.its.jira.restapi.JiraIssue> api = apiBuilder.getIssue(); api.doGet(issueKey, java.net.HttpURLConnection.HTTP_OK, new int[]{ java.net.HttpURLConnection.HTTP_NOT_FOUND, java.net.HttpURLConnection.HTTP_FORBIDDEN }); java.lang.Integer code = api.getResponseCode(); switch (code) { case java.net.HttpURLConnection.HTTP_OK : return true; case java.net.HttpURLConnection.HTTP_NOT_FOUND : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error(""Issue {} not found"", issueKey); return false; case java.net.HttpURLConnection.HTTP_FORBIDDEN : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error(""No permission to read Issue {}"", issueKey); return false; default : throw new java.io.IOException((""Unexpected HTTP code received:"" + (code.toString()))); } }",d5e7b91c7dbef7e54855370d45e99f445ff2db70,2018-02-03 11:18:17,3
154472,java_com_google_gerrit_server_account_AccountResolver.java,"public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.get(r.iterator().next()).getAccount(); } com.google.gerrit.reviewdb.client.Account match = null; for (com.google.gerrit.reviewdb.client.Account.Id id : r) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = byId.maybeGet(id).map(AccountState::getAccount); if ((!(account.isPresent())) || (!(account.get().isActive()))) { continue; } if (match != null) { return null; } match = account.get(); } return match; }",81f73622ff2e99cb205850b9cae16a9e0d627d45,"public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.getEvenIfMissing(r.iterator().next()).getAccount(); } com.google.gerrit.reviewdb.client.Account match = null; for (com.google.gerrit.reviewdb.client.Account.Id id : r) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = byId.maybeGet(id).map(AccountState::getAccount); if ((!(account.isPresent())) || (!(account.get().isActive()))) { continue; } if (match != null) { return null; } match = account.get(); } return match; }",6a72da5f030aca5e4daa567bfc7c4479aed0b169,"public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.maybeGet(r.iterator().next()).map(AccountState::getAccount).orElse(null); } com.google.gerrit.reviewdb.client.Account match = null; for (com.google.gerrit.reviewdb.client.Account.Id id : r) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = byId.maybeGet(id).map(AccountState::getAccount); if (!(account.map(Account::isActive).orElse(false))) { continue; } if (match != null) { return null; } match = account.get(); } return match; }",dc4e70db8c08302e85235bfec728ae4ea4da25d6,2018-02-05 09:22:54,8
154472,java_com_google_gerrit_server_mail_send_OutgoingEmail.java,"protected java.lang.String getFromLine() { final com.google.gerrit.reviewdb.client.Account account = args.accountCache.get(fromId).getAccount(); final java.lang.String name = account.getFullName(); final java.lang.String email = account.getPreferredEmail(); java.lang.StringBuilder f = new java.lang.StringBuilder(); if (((name != null) && (!(name.isEmpty()))) || ((email != null) && (!(email.isEmpty())))) { f.append(""From""); if ((name != null) && (!(name.isEmpty()))) { f.append("" "").append(name); } if ((email != null) && (!(email.isEmpty()))) { f.append("" <"").append(email).append("">""); } f.append("":\n\n""); } return f.toString(); }",1f2425000d783cd6622c1243162d04ca4bda061d,"protected java.lang.String getFromLine() { final com.google.gerrit.reviewdb.client.Account account = args.accountCache.getEvenIfMissing(fromId).getAccount(); final java.lang.String name = account.getFullName(); final java.lang.String email = account.getPreferredEmail(); java.lang.StringBuilder f = new java.lang.StringBuilder(); if (((name != null) && (!(name.isEmpty()))) || ((email != null) && (!(email.isEmpty())))) { f.append(""From""); if ((name != null) && (!(name.isEmpty()))) { f.append("" "").append(name); } if ((email != null) && (!(email.isEmpty()))) { f.append("" <"").append(email).append("">""); } f.append("":\n\n""); } return f.toString(); }",3ea6803e38d582ac20f97ca58b719d74e197354f,"protected java.lang.String getFromLine() { java.lang.StringBuilder f = new java.lang.StringBuilder(); java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = args.accountCache.maybeGet(fromId).map(AccountState::getAccount); if (account.isPresent()) { java.lang.String name = account.get().getFullName(); java.lang.String email = account.get().getPreferredEmail(); if (((name != null) && (!(name.isEmpty()))) || ((email != null) && (!(email.isEmpty())))) { f.append(""From""); if ((name != null) && (!(name.isEmpty()))) { f.append("" "").append(name); } if ((email != null) && (!(email.isEmpty()))) { f.append("" <"").append(email).append("">""); } f.append("":\n\n""); } } return f.toString(); }",9fcc707fc2007cc9c4b1ecb59c6627606537265c,2018-02-05 09:22:54,8
154472,java_com_google_gerrit_server_notedb_ChangeNoteUtil.java,"private void appendIdent(java.io.PrintWriter writer, java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id id, java.sql.Timestamp ts) { org.eclipse.jgit.lib.PersonIdent ident = newIdent(accountCache.get(id).getAccount(), ts, serverIdent); java.lang.StringBuilder name = new java.lang.StringBuilder(); org.eclipse.jgit.lib.PersonIdent.appendSanitized(name, ident.getName()); name.append("" <""); org.eclipse.jgit.lib.PersonIdent.appendSanitized(name, ident.getEmailAddress()); name.append('>'); appendHeaderField(writer, header, name.toString()); }",43f9661904ee9b8c737c2f4f8df192d9ab313eb5,"private void appendIdent(java.io.PrintWriter writer, java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id id, java.sql.Timestamp ts) { org.eclipse.jgit.lib.PersonIdent ident = newIdent(accountCache.getEvenIfMissing(id).getAccount(), ts, serverIdent); java.lang.StringBuilder name = new java.lang.StringBuilder(); org.eclipse.jgit.lib.PersonIdent.appendSanitized(name, ident.getName()); name.append("" <""); org.eclipse.jgit.lib.PersonIdent.appendSanitized(name, ident.getEmailAddress()); name.append('>'); appendHeaderField(writer, header, name.toString()); }",ac3641db53b6dc47fdf020e6ad935c58268d45ae,"private void appendIdent(java.io.PrintWriter writer, java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id id, java.sql.Timestamp ts) { org.eclipse.jgit.lib.PersonIdent ident = newIdent(id, ts, serverIdent); java.lang.StringBuilder name = new java.lang.StringBuilder(); org.eclipse.jgit.lib.PersonIdent.appendSanitized(name, ident.getName()); name.append("" <""); org.eclipse.jgit.lib.PersonIdent.appendSanitized(name, ident.getEmailAddress()); name.append('>'); appendHeaderField(writer, header, name.toString()); }",ddc005e203f0024c5aa6914c88b2b204492da70e,2018-02-05 09:22:54,8
154472,java_com_google_gerrit_server_account_AccountResolver.java,"public com.google.gerrit.reviewdb.client.Account findByNameOrEmail(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAllByNameOrEmail(nameOrEmail); return (r.size()) == 1 ? byId.get(r.iterator().next()).getAccount() : null; }",e6c5e23a5d516dca794245d297f79256686f60ba,"public com.google.gerrit.reviewdb.client.Account findByNameOrEmail(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAllByNameOrEmail(nameOrEmail); return (r.size()) == 1 ? byId.getEvenIfMissing(r.iterator().next()).getAccount() : null; }",6118b30ccc086bd2127dc3d5568519fe2dbbaf44,"public com.google.gerrit.reviewdb.client.Account findByNameOrEmail(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAllByNameOrEmail(nameOrEmail); return (r.size()) == 1 ? byId.maybeGet(r.iterator().next()).map(AccountState::getAccount).orElse(null) : null; }",922610042d0c843d2b375c3094a447a3844b98ea,2018-02-05 09:22:54,8
154472,java_com_google_gerrit_server_events_EventFactory.java,"private void addSubmitRecordLabels(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.labels) != null) && (!(submitRecord.labels.isEmpty()))) { sa.labels = new java.util.ArrayList(); for (SubmitRecord.Label lbl : submitRecord.labels) { com.google.gerrit.server.data.SubmitLabelAttribute la = new com.google.gerrit.server.data.SubmitLabelAttribute(); la.label = lbl.label; la.status = lbl.status.name(); if ((lbl.appliedBy) != null) { com.google.gerrit.server.account.AccountState accountState = accountCache.get(lbl.appliedBy); la.by = asAccountAttribute(accountState); } sa.labels.add(la); } } }",3653fcb00f052acd13351632f45a096d24d71985,"private void addSubmitRecordLabels(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.labels) != null) && (!(submitRecord.labels.isEmpty()))) { sa.labels = new java.util.ArrayList(); for (SubmitRecord.Label lbl : submitRecord.labels) { com.google.gerrit.server.data.SubmitLabelAttribute la = new com.google.gerrit.server.data.SubmitLabelAttribute(); la.label = lbl.label; la.status = lbl.status.name(); if ((lbl.appliedBy) != null) { com.google.gerrit.server.account.AccountState accountState = accountCache.getEvenIfMissing(lbl.appliedBy); la.by = asAccountAttribute(accountState); } sa.labels.add(la); } } }",f8d62ee4c4bbb3e40ecbb404daa2b5b0803b819b,"private void addSubmitRecordLabels(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.labels) != null) && (!(submitRecord.labels.isEmpty()))) { sa.labels = new java.util.ArrayList(); for (SubmitRecord.Label lbl : submitRecord.labels) { com.google.gerrit.server.data.SubmitLabelAttribute la = new com.google.gerrit.server.data.SubmitLabelAttribute(); la.label = lbl.label; la.status = lbl.status.name(); if ((lbl.appliedBy) != null) { la.by = asAccountAttribute(lbl.appliedBy); } sa.labels.add(la); } } }",1082446f4bcbcd45d25428347d6d28f167abb0b2,2018-02-05 09:22:54,8
154472,java_com_google_gerrit_server_events_EventFactory.java,public com.google.gerrit.server.data.AccountAttribute asAccountAttribute(com.google.gerrit.reviewdb.client.Account.Id id) { if (id == null) { return null; } return asAccountAttribute(accountCache.get(id)); },be621d26b46e2e603492413bacd3b49c4d6b4a5b,public com.google.gerrit.server.data.AccountAttribute asAccountAttribute(com.google.gerrit.reviewdb.client.Account.Id id) { if (id == null) { return null; } return asAccountAttribute(accountCache.getEvenIfMissing(id)); },8fe5406fba3972f0d857d05843161a844b2df44d,public com.google.gerrit.server.data.AccountAttribute asAccountAttribute(com.google.gerrit.reviewdb.client.Account.Id id) { if (id == null) { return null; } return accountCache.maybeGet(id).map(( a) -> asAccountAttribute(a)).orElse(null); },8d0ff1eee4abea0eda892874d0561f1f6c6d12c8,2018-02-05 09:22:54,8
154474,java_com_google_gerrit_acceptance_AbstractDaemonTest.java,protected com.google.gerrit.server.account.AccountState getAccountState(com.google.gerrit.reviewdb.client.Account.Id accountId) { return accountCache.maybeGet(accountId).get(); },92225149b7994c172bae8116f39449b521b4dd02,protected com.google.gerrit.server.account.AccountState getAccountState(com.google.gerrit.reviewdb.client.Account.Id accountId) { return accountCache.get(accountId).get(); },f3da006fbb276389cb33fd4343ca8e1edb074bbc,"protected com.google.gerrit.server.account.AccountState getAccountState(com.google.gerrit.reviewdb.client.Account.Id accountId) { java.util.Optional<com.google.gerrit.server.account.AccountState> accountState = accountCache.get(accountId); assertThat(accountState).named(""account %s"", accountId.get()).isPresent(); return accountState.get(); }",3445e42ce76a49526f94f84177cf9d5fb2c6a1c8,2018-02-05 09:22:54,10
154474,java_com_google_gerrit_server_mail_send_ChangeEmail.java,"protected void removeUsersThatIgnoredTheChange() { for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, java.util.Collection<java.lang.String>> e : stars.asMap().entrySet()) { if (e.getValue().contains(StarredChangesUtil.IGNORE_LABEL)) { args.accountCache.maybeGet(e.getKey()).map(AccountState::getAccount).ifPresent(( a) -> removeUser(a)); } } }",42df9d7b2974cdb125a3c71f5c9fce0dd9134de2,"protected void removeUsersThatIgnoredTheChange() { for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, java.util.Collection<java.lang.String>> e : stars.asMap().entrySet()) { if (e.getValue().contains(StarredChangesUtil.IGNORE_LABEL)) { args.accountCache.get(e.getKey()).map(AccountState::getAccount).ifPresent(( a) -> removeUser(a)); } } }",1b79a614ccffe2f5d266a6f880d686a8a3c307c6,"protected void removeUsersThatIgnoredTheChange() { for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, java.util.Collection<java.lang.String>> e : stars.asMap().entrySet()) { if (e.getValue().contains(StarredChangesUtil.IGNORE_LABEL)) { args.accountCache.get(e.getKey()).ifPresent(( a) -> removeUser(a.getAccount())); } } }",91271960996b5e460131d5caee5a454bb5520161,2018-02-05 09:22:54,10
154472,java_com_google_gerrit_server_restapi_change_PostReviewersOp.java,"@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { opResult = com.google.gerrit.server.restapi.change.PostReviewersOp.Result.builder().setAddedReviewers(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).setAddedCCs(com.google.common.collect.ImmutableList.copyOf(addedCCs)).build(); emailReviewers(rsrc.getChange(), com.google.common.collect.Lists.transform(addedReviewers, ( r) -> r.getAccountId()), ((addedCCs) == null ? com.google.common.collect.ImmutableList.of() : addedCCs), reviewersByEmail, addedCCsByEmail, notify, accountsToNotify); if (!(addedReviewers.isEmpty())) { java.util.List<com.google.gerrit.server.account.AccountState> reviewers = addedReviewers.stream().map(( r) -> accountCache.get(r.getAccountId())).collect(java.util.stream.Collectors.toList()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, ctx.getAccount(), ctx.getWhen()); } }",94e16296d0670ee813c8b48885d254d71bfd2520,"@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { opResult = com.google.gerrit.server.restapi.change.PostReviewersOp.Result.builder().setAddedReviewers(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).setAddedCCs(com.google.common.collect.ImmutableList.copyOf(addedCCs)).build(); emailReviewers(rsrc.getChange(), com.google.common.collect.Lists.transform(addedReviewers, ( r) -> r.getAccountId()), ((addedCCs) == null ? com.google.common.collect.ImmutableList.of() : addedCCs), reviewersByEmail, addedCCsByEmail, notify, accountsToNotify); if (!(addedReviewers.isEmpty())) { java.util.List<com.google.gerrit.server.account.AccountState> reviewers = addedReviewers.stream().map(( r) -> accountCache.getEvenIfMissing(r.getAccountId())).collect(java.util.stream.Collectors.toList()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, ctx.getAccount(), ctx.getWhen()); } }",f8c5b47b7c201132bb01b8d088aa93d040e201cc,"@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { opResult = com.google.gerrit.server.restapi.change.PostReviewersOp.Result.builder().setAddedReviewers(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).setAddedCCs(com.google.common.collect.ImmutableList.copyOf(addedCCs)).build(); emailReviewers(rsrc.getChange(), com.google.common.collect.Lists.transform(addedReviewers, ( r) -> r.getAccountId()), ((addedCCs) == null ? com.google.common.collect.ImmutableList.of() : addedCCs), reviewersByEmail, addedCCsByEmail, notify, accountsToNotify); if (!(addedReviewers.isEmpty())) { java.util.List<com.google.gerrit.server.account.AccountState> reviewers = addedReviewers.stream().map(( r) -> accountCache.maybeGet(r.getAccountId())).flatMap(Streams::stream).collect(java.util.stream.Collectors.toList()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, ctx.getAccount(), ctx.getWhen()); } }",6e6a97d015f5a8a026e28f1028f410ed8b130f7a,2018-02-05 09:22:54,8
154472,java_com_google_gerrit_server_group_DbGroupMemberAuditListener.java,"private void logOrmException(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.lang.Iterable<?> values, com.google.gwtorm.server.OrmException e) { java.lang.StringBuilder message = new java.lang.StringBuilder(header); message.append("" ""); message.append(me); message.append(""/""); message.append(accountCache.get(me).getUserName().orElse(null)); message.append("": ""); message.append(com.google.common.base.Joiner.on(""; "").join(values)); com.google.gerrit.server.group.DbGroupMemberAuditListener.log.error(message.toString(), e); }",3563f6fb2608fb4a100ee01bf3fa8b9d84c6ada7,"private void logOrmException(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.lang.Iterable<?> values, com.google.gwtorm.server.OrmException e) { java.lang.StringBuilder message = new java.lang.StringBuilder(header); message.append("" ""); message.append(me); message.append(""/""); message.append(accountCache.getEvenIfMissing(me).getUserName().orElse(null)); message.append("": ""); message.append(com.google.common.base.Joiner.on(""; "").join(values)); com.google.gerrit.server.group.DbGroupMemberAuditListener.log.error(message.toString(), e); }",ae16d73eae799375f1086b4de4e857c40c72d332,"private void logOrmException(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.lang.Iterable<?> values, com.google.gwtorm.server.OrmException e) { java.lang.StringBuilder message = new java.lang.StringBuilder(header); message.append("" ""); message.append(me); message.append(""/""); message.append(getUserName(me).orElse(null)); message.append("": ""); message.append(com.google.common.base.Joiner.on(""; "").join(values)); com.google.gerrit.server.group.DbGroupMemberAuditListener.log.error(message.toString(), e); }",37111f6e5561174f52e1a2e077152a15cc4ac841,2018-02-05 09:22:54,8
154472,java_com_google_gerrit_server_group_DbGroupMemberAuditListener.java,"private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId(); java.lang.String userName = accountCache.get(accountId).getUserName().orElse(null); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId(); java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format(""account {0}/{1}, group {2}/{3}"", accountId, userName, groupId, groupName)); } logOrmException(header, me, descriptions, e); }",ea4a3e858e8ac8db17d29e428dfa814c0da3cd52,"private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId(); java.lang.String userName = accountCache.getEvenIfMissing(accountId).getUserName().orElse(null); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId(); java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format(""account {0}/{1}, group {2}/{3}"", accountId, userName, groupId, groupName)); } logOrmException(header, me, descriptions, e); }",6463cdb11b6510a7c05a966f9c343bb4d9b3ca9e,"private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId(); java.lang.String userName = getUserName(accountId).orElse(null); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId(); java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format(""account {0}/{1}, group {2}/{3}"", accountId, userName, groupId, groupName)); } logOrmException(header, me, descriptions, e); }",aaa2a083377fd5eae3a9f9c31919f76855a023eb,2018-02-05 09:22:54,8
154472,java_com_google_gerrit_server_mail_send_FromAddressGeneratorProvider.java,"@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { java.lang.String senderName; if (fromId != null) { com.google.gerrit.reviewdb.client.Account a = accountCache.get(fromId).getAccount(); java.lang.String fullName = a.getFullName(); java.lang.String userEmail = a.getPreferredEmail(); if (canRelay(userEmail)) { return new com.google.gerrit.server.mail.Address(fullName, userEmail); } if ((fullName == null) || ("""".equals(fullName.trim()))) { fullName = anonymousCowardName; } senderName = nameRewriteTmpl.replace(""user"", fullName).toString(); } else { senderName = serverAddress.getName(); } java.lang.String senderEmail; com.google.gerrit.common.data.ParameterizedString senderEmailPattern = new com.google.gerrit.common.data.ParameterizedString(serverAddress.getEmail()); if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace(""userHash"", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }",cd75d15d6c41dfa5db7e752a7cdfc04f6a2cc28d,"@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { java.lang.String senderName; if (fromId != null) { com.google.gerrit.reviewdb.client.Account a = accountCache.getEvenIfMissing(fromId).getAccount(); java.lang.String fullName = a.getFullName(); java.lang.String userEmail = a.getPreferredEmail(); if (canRelay(userEmail)) { return new com.google.gerrit.server.mail.Address(fullName, userEmail); } if ((fullName == null) || ("""".equals(fullName.trim()))) { fullName = anonymousCowardName; } senderName = nameRewriteTmpl.replace(""user"", fullName).toString(); } else { senderName = serverAddress.getName(); } java.lang.String senderEmail; com.google.gerrit.common.data.ParameterizedString senderEmailPattern = new com.google.gerrit.common.data.ParameterizedString(serverAddress.getEmail()); if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace(""userHash"", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }",cb41d86388b20291aecee4ff1fc4965d99af3639,"@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { java.lang.String senderName; if (fromId != null) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> a = accountCache.maybeGet(fromId).map(AccountState::getAccount); java.lang.String fullName = a.map(Account::getFullName).orElse(null); java.lang.String userEmail = a.map(Account::getPreferredEmail).orElse(null); if (canRelay(userEmail)) { return new com.google.gerrit.server.mail.Address(fullName, userEmail); } if ((fullName == null) || ("""".equals(fullName.trim()))) { fullName = anonymousCowardName; } senderName = nameRewriteTmpl.replace(""user"", fullName).toString(); } else { senderName = serverAddress.getName(); } java.lang.String senderEmail; com.google.gerrit.common.data.ParameterizedString senderEmailPattern = new com.google.gerrit.common.data.ParameterizedString(serverAddress.getEmail()); if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace(""userHash"", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }",4f0c7fa7e363b6848774fada4674291b64970952,2018-02-05 09:22:54,8
154472,java_com_google_gerrit_server_mail_send_FromAddressGeneratorProvider.java,"@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { final java.lang.String senderName; if (fromId != null) { final com.google.gerrit.reviewdb.client.Account account = accountCache.get(fromId).getAccount(); java.lang.String fullName = account.getFullName(); if ((fullName == null) || ("""".equals(fullName))) { fullName = anonymousCowardName; } senderName = namePattern.replace(""user"", fullName).toString(); } else { senderName = serverAddress.getName(); } java.lang.String senderEmail; if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace(""userHash"", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }",1d377927d27fb85622b81a294528a987f060dc11,"@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { final java.lang.String senderName; if (fromId != null) { final com.google.gerrit.reviewdb.client.Account account = accountCache.getEvenIfMissing(fromId).getAccount(); java.lang.String fullName = account.getFullName(); if ((fullName == null) || ("""".equals(fullName))) { fullName = anonymousCowardName; } senderName = namePattern.replace(""user"", fullName).toString(); } else { senderName = serverAddress.getName(); } java.lang.String senderEmail; if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace(""userHash"", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }",20e117650f39f5f01a78ea0b477610953ac484af,"@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { final java.lang.String senderName; if (fromId != null) { java.lang.String fullName = accountCache.maybeGet(fromId).map(( a) -> a.getAccount().getFullName()).orElse(null); if ((fullName == null) || ("""".equals(fullName))) { fullName = anonymousCowardName; } senderName = namePattern.replace(""user"", fullName).toString(); } else { senderName = serverAddress.getName(); } java.lang.String senderEmail; if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace(""userHash"", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }",8ad358547cf399b308870a3f5fe1b5aea2d5c90d,2018-02-05 09:22:54,8
154472,java_com_google_gerrit_server_notedb_rebuild_ChangeRebuilderImpl.java,"private org.eclipse.jgit.lib.PersonIdent newAuthorIdent(com.google.gerrit.server.notedb.rebuild.EventList<?> events) { com.google.gerrit.reviewdb.client.Account.Id id = events.getAccountId(); if (id == null) { return new org.eclipse.jgit.lib.PersonIdent(serverIdent, events.getWhen()); } return changeNoteUtil.newIdent(accountCache.get(id).getAccount(), events.getWhen(), serverIdent); }",a6f7fa550362b247f817d21944a9f990621da81d,"private org.eclipse.jgit.lib.PersonIdent newAuthorIdent(com.google.gerrit.server.notedb.rebuild.EventList<?> events) { com.google.gerrit.reviewdb.client.Account.Id id = events.getAccountId(); if (id == null) { return new org.eclipse.jgit.lib.PersonIdent(serverIdent, events.getWhen()); } return changeNoteUtil.newIdent(accountCache.getEvenIfMissing(id).getAccount(), events.getWhen(), serverIdent); }",637c36cf456017a6a091916d4b8f847090b95e8f,"private org.eclipse.jgit.lib.PersonIdent newAuthorIdent(com.google.gerrit.server.notedb.rebuild.EventList<?> events) { com.google.gerrit.reviewdb.client.Account.Id id = events.getAccountId(); if (id == null) { return new org.eclipse.jgit.lib.PersonIdent(serverIdent, events.getWhen()); } return changeNoteUtil.newIdent(id, events.getWhen(), serverIdent); }",e1a6a2d1d8ab7a8b354547dfe7d8b57e8f799416,2018-02-05 09:22:54,8
154472,java_com_google_gerrit_server_mail_send_OutgoingEmail.java,"public java.lang.String getUserNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.get(accountId); java.lang.String name = who.getAccount().getFullName(); java.lang.String email = who.getAccount().getPreferredEmail(); if ((name != null) && (email != null)) { return ((name + "" <"") + email) + "">""; } else if (email != null) { return email; } else if (name != null) { return name; } return who.getUserName().orElse(null); }",863b3e2d4ecbde5db1fad8e05f52c09d9088efea,"public java.lang.String getUserNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.getEvenIfMissing(accountId); java.lang.String name = who.getAccount().getFullName(); java.lang.String email = who.getAccount().getPreferredEmail(); if ((name != null) && (email != null)) { return ((name + "" <"") + email) + "">""; } else if (email != null) { return email; } else if (name != null) { return name; } return who.getUserName().orElse(null); }",d19110838ae3ded52475f1586cfe44186694d8b9,"public java.lang.String getUserNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { java.util.Optional<com.google.gerrit.server.account.AccountState> accountState = args.accountCache.maybeGet(accountId); if (!(accountState.isPresent())) { return null; } com.google.gerrit.reviewdb.client.Account account = accountState.get().getAccount(); java.lang.String name = account.getFullName(); java.lang.String email = account.getPreferredEmail(); if ((name != null) && (email != null)) { return ((name + "" <"") + email) + "">""; } else if (email != null) { return email; } else if (name != null) { return name; } return accountState.get().getUserName().orElse(null); }",023be966e7b5797acbc2c8134ee32c552af48b06,2018-02-05 09:22:54,8
154472,java_com_google_gerrit_server_notedb_ChangeUpdate.java,"private java.lang.StringBuilder addIdent(java.lang.StringBuilder sb, com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = accountCache.get(accountId).getAccount(); org.eclipse.jgit.lib.PersonIdent ident = newIdent(account, when); org.eclipse.jgit.lib.PersonIdent.appendSanitized(sb, ident.getName()); sb.append("" <""); org.eclipse.jgit.lib.PersonIdent.appendSanitized(sb, ident.getEmailAddress()); sb.append('>'); return sb; }",0f78d52966ec1b8653d23e09aece83f602f9afb2,"private java.lang.StringBuilder addIdent(java.lang.StringBuilder sb, com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = accountCache.getEvenIfMissing(accountId).getAccount(); org.eclipse.jgit.lib.PersonIdent ident = newIdent(account, when); org.eclipse.jgit.lib.PersonIdent.appendSanitized(sb, ident.getName()); sb.append("" <""); org.eclipse.jgit.lib.PersonIdent.appendSanitized(sb, ident.getEmailAddress()); sb.append('>'); return sb; }",541913b71928ceadbf50d6dda11536ce86042b46,"private java.lang.StringBuilder addIdent(java.lang.StringBuilder sb, com.google.gerrit.reviewdb.client.Account.Id accountId) { org.eclipse.jgit.lib.PersonIdent ident = newIdent(accountId, when); org.eclipse.jgit.lib.PersonIdent.appendSanitized(sb, ident.getName()); sb.append("" <""); org.eclipse.jgit.lib.PersonIdent.appendSanitized(sb, ident.getEmailAddress()); sb.append('>'); return sb; }",81413c32b9d7c7f4bf13d8abc32d0baa9edebde0,2018-02-05 09:22:54,8
154472,java_com_google_gerrit_server_mail_send_OutgoingEmail.java,"public java.lang.String getNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.get(accountId); java.lang.String name = who.getAccount().getFullName(); java.lang.String email = who.getAccount().getPreferredEmail(); if ((name != null) && (email != null)) { return ((name + "" <"") + email) + "">""; } else if (name != null) { return name; } else if (email != null) { return email; } else { return ((args.anonymousCowardName) + "" #"") + accountId; } }",b35652bea7ac0974dc423bb9d0aac26166b11828,"public java.lang.String getNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.getEvenIfMissing(accountId); java.lang.String name = who.getAccount().getFullName(); java.lang.String email = who.getAccount().getPreferredEmail(); if ((name != null) && (email != null)) { return ((name + "" <"") + email) + "">""; } else if (name != null) { return name; } else if (email != null) { return email; } else { return ((args.anonymousCowardName) + "" #"") + accountId; } }",e5b5f6ba4454556d3cf24ae39654ff7f1bac2058,"public java.lang.String getNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = args.accountCache.maybeGet(accountId).map(AccountState::getAccount); if (account.isPresent()) { java.lang.String name = account.get().getFullName(); java.lang.String email = account.get().getPreferredEmail(); if ((name != null) && (email != null)) { return ((name + "" <"") + email) + "">""; } else if (name != null) { return name; } else if (email != null) { return email; } } return ((args.anonymousCowardName) + "" #"") + accountId; }",feccb60c8c907fdb5baa2a8cc698bf25758d7de9,2018-02-05 09:22:54,8
154472,java_com_google_gerrit_server_mail_send_OutgoingEmail.java,"private com.google.gerrit.server.mail.Address toAddress(com.google.gerrit.reviewdb.client.Account.Id id) { final com.google.gerrit.reviewdb.client.Account a = args.accountCache.get(id).getAccount(); final java.lang.String e = a.getPreferredEmail(); if ((!(a.isActive())) || (e == null)) { return null; } return new com.google.gerrit.server.mail.Address(a.getFullName(), e); }",46727932b8314ddfb773965c651dffc620e53933,"private com.google.gerrit.server.mail.Address toAddress(com.google.gerrit.reviewdb.client.Account.Id id) { final com.google.gerrit.reviewdb.client.Account a = args.accountCache.getEvenIfMissing(id).getAccount(); final java.lang.String e = a.getPreferredEmail(); if ((!(a.isActive())) || (e == null)) { return null; } return new com.google.gerrit.server.mail.Address(a.getFullName(), e); }",57a180b2a82870b55d9b32ee8ff60730b1a867e3,"private com.google.gerrit.server.mail.Address toAddress(com.google.gerrit.reviewdb.client.Account.Id id) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> accountState = args.accountCache.maybeGet(id).map(AccountState::getAccount); if (!(accountState.isPresent())) { return null; } com.google.gerrit.reviewdb.client.Account account = accountState.get(); java.lang.String e = account.getPreferredEmail(); if ((!(account.isActive())) || (e == null)) { return null; } return new com.google.gerrit.server.mail.Address(account.getFullName(), e); }",6d6a88b06c1fad15861dc2144a5a2c4c23499a2c,2018-02-05 09:22:54,8
154472,java_com_google_gerrit_server_mail_send_OutgoingEmail.java,"protected java.lang.String getNameFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { if (accountId == null) { return args.gerritPersonIdent.getName(); } final com.google.gerrit.reviewdb.client.Account userAccount = args.accountCache.get(accountId).getAccount(); java.lang.String name = userAccount.getFullName(); if (name == null) { name = userAccount.getPreferredEmail(); } if (name == null) { name = ((args.anonymousCowardName) + "" #"") + accountId; } return name; }",bbea8e4eda1ab30b26017378f651d034619f5bb7,"protected java.lang.String getNameFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { if (accountId == null) { return args.gerritPersonIdent.getName(); } final com.google.gerrit.reviewdb.client.Account userAccount = args.accountCache.getEvenIfMissing(accountId).getAccount(); java.lang.String name = userAccount.getFullName(); if (name == null) { name = userAccount.getPreferredEmail(); } if (name == null) { name = ((args.anonymousCowardName) + "" #"") + accountId; } return name; }",dc2006ffb19e2a192e594b1157a1a1a8e140279d,"protected java.lang.String getNameFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { if (accountId == null) { return args.gerritPersonIdent.getName(); } java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = args.accountCache.maybeGet(accountId).map(AccountState::getAccount); java.lang.String name = null; if (account.isPresent()) { name = account.get().getFullName(); if (name == null) { name = account.get().getPreferredEmail(); } } if (name == null) { name = ((args.anonymousCowardName) + "" #"") + accountId; } return name; }",81bbdb137075a32ca03053cdd67721d5b03906dd,2018-02-05 09:22:54,8
154472,javatests_com_google_gerrit_server_mail_send_FromAddressGeneratorProviderTest.java,"private Account.Id user(java.lang.String name, java.lang.String email) { final com.google.gerrit.server.account.AccountState s = makeUser(name, email); expect(accountCache.get(eq(s.getAccount().getId()))).andReturn(s); return s.getAccount().getId(); }",a96b9ddf7c382a335d51009a89a72aac6463cdd1,"private Account.Id user(java.lang.String name, java.lang.String email) { final com.google.gerrit.server.account.AccountState s = makeUser(name, email); expect(accountCache.getEvenIfMissing(eq(s.getAccount().getId()))).andReturn(s); return s.getAccount().getId(); }",3b0990567818dc0e590cef1302a17dd61a22e735,"private Account.Id user(java.lang.String name, java.lang.String email) { final com.google.gerrit.server.account.AccountState s = makeUser(name, email); expect(accountCache.maybeGet(eq(s.getAccount().getId()))).andReturn(java.util.Optional.of(s)); return s.getAccount().getId(); }",639302165bd6a68fac9a698c9166018213bfd5f4,2018-02-05 09:22:54,8
154472,java_com_google_gerrit_server_account_GroupMembers.java,"private java.util.Set<com.google.gerrit.reviewdb.client.Account> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.server.group.InternalGroupDescription(group)); java.util.Set<com.google.gerrit.reviewdb.client.Account> directMembers = group.getMembers().stream().filter(groupControl::canSeeMember).map(accountCache::get).map(AccountState::getAccount).collect(toImmutableSet()); java.util.Set<com.google.gerrit.reviewdb.client.Account> indirectMembers = new java.util.HashSet<>(); if (groupControl.canSeeGroup()) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : group.getSubgroups()) { if (!(seen.contains(subgroupUuid))) { indirectMembers.addAll(listAccounts(subgroupUuid, project, seen)); } } } return com.google.common.collect.Sets.union(directMembers, indirectMembers); }",5b2ff6a0343597cad32328af2f3e8a49ac45873b,"private java.util.Set<com.google.gerrit.reviewdb.client.Account> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.server.group.InternalGroupDescription(group)); java.util.Set<com.google.gerrit.reviewdb.client.Account> directMembers = group.getMembers().stream().filter(groupControl::canSeeMember).map(accountCache::getEvenIfMissing).map(AccountState::getAccount).collect(toImmutableSet()); java.util.Set<com.google.gerrit.reviewdb.client.Account> indirectMembers = new java.util.HashSet<>(); if (groupControl.canSeeGroup()) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : group.getSubgroups()) { if (!(seen.contains(subgroupUuid))) { indirectMembers.addAll(listAccounts(subgroupUuid, project, seen)); } } } return com.google.common.collect.Sets.union(directMembers, indirectMembers); }",87e736515f3d5e23635cd8b1e78d82d2c39e14e8,"private java.util.Set<com.google.gerrit.reviewdb.client.Account> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.server.group.InternalGroupDescription(group)); java.util.Set<com.google.gerrit.reviewdb.client.Account> directMembers = group.getMembers().stream().filter(groupControl::canSeeMember).map(accountCache::maybeGet).flatMap(Streams::stream).map(AccountState::getAccount).collect(toImmutableSet()); java.util.Set<com.google.gerrit.reviewdb.client.Account> indirectMembers = new java.util.HashSet<>(); if (groupControl.canSeeGroup()) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : group.getSubgroups()) { if (!(seen.contains(subgroupUuid))) { indirectMembers.addAll(listAccounts(subgroupUuid, project, seen)); } } } return com.google.common.collect.Sets.union(directMembers, indirectMembers); }",87212c0ca04ef80f1cc437ba3d51257e6c4b85b9,2018-02-05 09:22:54,8
154474,java_com_google_gerrit_server_account_AccountResolver.java,"public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.getEvenIfMissing(r.iterator().next()).getAccount(); } com.google.gerrit.reviewdb.client.Account match = null; for (com.google.gerrit.reviewdb.client.Account.Id id : r) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = byId.maybeGet(id).map(AccountState::getAccount); if ((!(account.isPresent())) || (!(account.get().isActive()))) { continue; } if (match != null) { return null; } match = account.get(); } return match; }",6a72da5f030aca5e4daa567bfc7c4479aed0b169,"public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.getEvenIfMissing(r.iterator().next()).getAccount(); } com.google.gerrit.reviewdb.client.Account match = null; for (com.google.gerrit.reviewdb.client.Account.Id id : r) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = byId.get(id).map(AccountState::getAccount); if ((!(account.isPresent())) || (!(account.get().isActive()))) { continue; } if (match != null) { return null; } match = account.get(); } return match; }",c3091013b6b8b8167c5e84ee45d3dff7fc5bd0b2,"public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.get(r.iterator().next()).map(AccountState::getAccount).orElse(null); } com.google.gerrit.reviewdb.client.Account match = null; for (com.google.gerrit.reviewdb.client.Account.Id id : r) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = byId.get(id).map(AccountState::getAccount); if (!(account.map(Account::isActive).orElse(false))) { continue; } if (match != null) { return null; } match = account.get(); } return match; }",15bf5164cccac7ac74f1365f50e2499114fb4364,2018-02-05 09:22:54,10
154472,java_com_google_gerrit_server_git_strategy_SubmitStrategyOp.java,"@java.lang.Override public final void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { if (changeAlreadyMerged) { logDebug(""Skipping post-update steps for change {}"", getId()); return; } postUpdateImpl(ctx); if ((command) != null) { args.tagCache.updateFastForward(getProject(), command.getRefName(), command.getOldId(), command.getNewId()); if (RefNames.REFS_CONFIG.equals(getDest().get())) { args.projectCache.evict(getProject()); com.google.gerrit.server.project.ProjectState p = args.projectCache.get(getProject()); try (org.eclipse.jgit.lib.Repository git = args.repoManager.openRepository(getProject())) { git.setGitwebDescription(p.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error((""cannot update description of "" + (p.getName())), e); } } } try { args.mergedSenderFactory.create(ctx.getProject(), getId(), submitter.getAccountId(), args.submitInput.notify, args.accountsToNotify).sendAsync(); } catch (java.lang.Exception e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error((""Cannot email merged notification for "" + (getId())), e); } if (((mergeResultRev) != null) && (!(args.dryrun))) { args.changeMerged.fire(updatedChange, mergedPatchSet, args.accountCache.get(submitter.getAccountId()), args.mergeTip.getCurrentTip().name(), ctx.getWhen()); } }",8ed178baa6ad69ecb3e94f1604d49b1347bdaa28,"@java.lang.Override public final void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { if (changeAlreadyMerged) { logDebug(""Skipping post-update steps for change {}"", getId()); return; } postUpdateImpl(ctx); if ((command) != null) { args.tagCache.updateFastForward(getProject(), command.getRefName(), command.getOldId(), command.getNewId()); if (RefNames.REFS_CONFIG.equals(getDest().get())) { args.projectCache.evict(getProject()); com.google.gerrit.server.project.ProjectState p = args.projectCache.get(getProject()); try (org.eclipse.jgit.lib.Repository git = args.repoManager.openRepository(getProject())) { git.setGitwebDescription(p.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error((""cannot update description of "" + (p.getName())), e); } } } try { args.mergedSenderFactory.create(ctx.getProject(), getId(), submitter.getAccountId(), args.submitInput.notify, args.accountsToNotify).sendAsync(); } catch (java.lang.Exception e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error((""Cannot email merged notification for "" + (getId())), e); } if (((mergeResultRev) != null) && (!(args.dryrun))) { args.changeMerged.fire(updatedChange, mergedPatchSet, args.accountCache.getEvenIfMissing(submitter.getAccountId()), args.mergeTip.getCurrentTip().name(), ctx.getWhen()); } }",4f3f5c801157f135a22d81fe7b0d3d8754678993,"@java.lang.Override public final void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { if (changeAlreadyMerged) { logDebug(""Skipping post-update steps for change {}"", getId()); return; } postUpdateImpl(ctx); if ((command) != null) { args.tagCache.updateFastForward(getProject(), command.getRefName(), command.getOldId(), command.getNewId()); if (RefNames.REFS_CONFIG.equals(getDest().get())) { args.projectCache.evict(getProject()); com.google.gerrit.server.project.ProjectState p = args.projectCache.get(getProject()); try (org.eclipse.jgit.lib.Repository git = args.repoManager.openRepository(getProject())) { git.setGitwebDescription(p.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error((""cannot update description of "" + (p.getName())), e); } } } try { args.mergedSenderFactory.create(ctx.getProject(), getId(), submitter.getAccountId(), args.submitInput.notify, args.accountsToNotify).sendAsync(); } catch (java.lang.Exception e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error((""Cannot email merged notification for "" + (getId())), e); } if (((mergeResultRev) != null) && (!(args.dryrun))) { args.changeMerged.fire(updatedChange, mergedPatchSet, args.accountCache.maybeGet(submitter.getAccountId()).orElse(null), args.mergeTip.getCurrentTip().name(), ctx.getWhen()); } }",22b75601a81f16c2eea60cd63a60271faa196a8e,2018-02-05 09:22:54,8
154472,java_com_google_gerrit_server_account_InternalAccountDirectory.java,"@java.lang.Override public void fillAccountInfo(java.lang.Iterable<? extends com.google.gerrit.extensions.common.AccountInfo> in, java.util.Set<com.google.gerrit.server.account.FillOptions> options) throws com.google.gerrit.server.account.DirectoryException { if (options.equals(com.google.gerrit.server.account.InternalAccountDirectory.ID_ONLY)) { return; } for (com.google.gerrit.extensions.common.AccountInfo info : in) { com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(info._accountId); com.google.gerrit.server.account.AccountState state = accountCache.get(id); fill(info, state, state.getExternalIds(), options); } }",8b1e2133a75f90fe1da0a1e685c219c121248a7d,"@java.lang.Override public void fillAccountInfo(java.lang.Iterable<? extends com.google.gerrit.extensions.common.AccountInfo> in, java.util.Set<com.google.gerrit.server.account.FillOptions> options) throws com.google.gerrit.server.account.DirectoryException { if (options.equals(com.google.gerrit.server.account.InternalAccountDirectory.ID_ONLY)) { return; } for (com.google.gerrit.extensions.common.AccountInfo info : in) { com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(info._accountId); com.google.gerrit.server.account.AccountState state = accountCache.getEvenIfMissing(id); fill(info, state, state.getExternalIds(), options); } }",8ead32c96902e072f249ef2c746a6f8282516a60,"@java.lang.Override public void fillAccountInfo(java.lang.Iterable<? extends com.google.gerrit.extensions.common.AccountInfo> in, java.util.Set<com.google.gerrit.server.account.FillOptions> options) throws com.google.gerrit.server.account.DirectoryException { if (options.equals(com.google.gerrit.server.account.InternalAccountDirectory.ID_ONLY)) { return; } for (com.google.gerrit.extensions.common.AccountInfo info : in) { com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(info._accountId); java.util.Optional<com.google.gerrit.server.account.AccountState> state = accountCache.maybeGet(id); if (state.isPresent()) { fill(info, state.get(), options); } else { info._accountId = (options.contains(FillOptions.ID)) ? id.get() : null; } } }",383ccf8253bc8d8549fb943fb29434e38f1dbc2b,2018-02-05 09:22:54,8
155791,src_main_java_com_googlesource_gerrit_plugins_reviewnotes_CreateReviewNotes.java,"private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), ps.getId(), null, null)) { if ((a.getValue()) == 0) { } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type != null) { fmt.appendApproval(type, a.getValue(), a.getAccountId(), accountCache.maybeGet(a.getAccountId()).map(AccountState::getAccount).orElse(null)); } } } if (submit != null) { fmt.appendSubmittedBy(submit.getAccountId(), accountCache.maybeGet(submit.getAccountId()).map(AccountState::getAccount).orElse(null)); fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl) != null) { fmt.appendReviewedOn(canonicalWebUrl, ps.getId().getParentKey()); } fmt.appendProject(project.get()); fmt.appendBranch(change.getDest().get()); }",4d58d07f266599e47311064dc0278c19f2edcf70,"private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), ps.getId(), null, null)) { if ((a.getValue()) == 0) { } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type != null) { fmt.appendApproval(type, a.getValue(), a.getAccountId(), accountCache.get(a.getAccountId()).map(AccountState::getAccount).orElse(null)); } } } if (submit != null) { fmt.appendSubmittedBy(submit.getAccountId(), accountCache.get(submit.getAccountId()).map(AccountState::getAccount).orElse(null)); fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl) != null) { fmt.appendReviewedOn(canonicalWebUrl, ps.getId().getParentKey()); } fmt.appendProject(project.get()); fmt.appendBranch(change.getDest().get()); }",cf4c68bfa479d2b7f5a29740c95eaa7e6eb20f00,"private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), ps.getId(), null, null)) { if ((a.getValue()) == 0) { } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type != null) { fmt.appendApproval(type, a.getValue(), a.getAccountId(), accountCache.get(a.getAccountId()).map(AccountState::getAccount)); } } } if (submit != null) { fmt.appendSubmittedBy(submit.getAccountId(), accountCache.get(submit.getAccountId()).map(AccountState::getAccount)); fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl) != null) { fmt.appendReviewedOn(canonicalWebUrl, ps.getId().getParentKey()); } fmt.appendProject(project.get()); fmt.appendBranch(change.getDest().get()); }",139bea602e31530e22011e0ed170327bf027114e,2018-02-05 09:22:54,3
154472,java_com_google_gerrit_sshd_commands_SetMembersCommand.java,"private void reportMembersAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.get(accountId).getAccount().getPreferredEmail(), ""n/a"")).collect(java.util.stream.Collectors.joining("", "")); out.write(java.lang.String.format(""Members %s group %s: %s\n"", action, group.getName(), names).getBytes(com.google.gerrit.sshd.commands.ENC)); }",822d1dd3537ae41a2648a8553efa8820c8ee3368,"private void reportMembersAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.getEvenIfMissing(accountId).getAccount().getPreferredEmail(), ""n/a"")).collect(java.util.stream.Collectors.joining("", "")); out.write(java.lang.String.format(""Members %s group %s: %s\n"", action, group.getName(), names).getBytes(com.google.gerrit.sshd.commands.ENC)); }",8066b6502705c23d61dbbfcbb1c463b2f26b728f,"private void reportMembersAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throws java.io.IOException, java.io.UnsupportedEncodingException { java.lang.String names = accountIdList.stream().map(( accountId) -> { Optional<com.google.gerrit.server.account.AccountState> accountState = accountCache.maybeGet(accountId); if (!(accountState.isPresent())) { return ""n/a""; } return com.google.common.base.MoreObjects.firstNonNull(accountState.get().getAccount().getPreferredEmail(), ""n/a""); }).collect(java.util.stream.Collectors.joining("", "")); out.write(java.lang.String.format(""Members %s group %s: %s\n"", action, group.getName(), names).getBytes(com.google.gerrit.sshd.commands.ENC)); }",559395200905583523c91b2e34c574aeeec6a060,2018-02-05 09:22:54,8
156510,javatests_com_google_gerrit_server_permissions_RefControlTest.java,"@org.junit.Test public void blockPushDrafts() { allow(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, ""refs/for/refs/*""); block(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.ANONYMOUS_USERS, ""refs/drafts/*""); com.google.gerrit.server.permissions.ProjectControl u = user(local); assertCreateChange(""refs/heads/master"", u); assertBlocked(com.google.gerrit.server.permissions.PUSH, ""refs/drafts/refs/heads/master"", u); }",7e6624947efa65f91531a39bed9062b80f97c716,"@org.junit.Test public void blockPushDrafts() { allow(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, ""refs/for/refs/*""); block(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.ANONYMOUS_USERS, ""refs/drafts/*""); allow(local, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, ""refs/drafts/*""); com.google.gerrit.server.permissions.ProjectControl u = user(local); assertCreateChange(""refs/heads/master"", u); assertThat(u.controlForRef(""refs/drafst/master"").canPerform(com.google.gerrit.server.permissions.PUSH)).isFalse(); }",aa6ac79b0cc0a6ea5680961da9a5d344ddaa205d,"@org.junit.Test public void blockPushDrafts() { allow(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, ""refs/for/refs/*""); block(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.ANONYMOUS_USERS, ""refs/drafts/*""); allow(local, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, ""refs/drafts/*""); com.google.gerrit.server.permissions.ProjectControl u = user(local); assertCreateChange(""refs/heads/master"", u); assertThat(u.controlForRef(""refs/drafts/master"").canPerform(com.google.gerrit.server.permissions.PUSH)).isFalse(); }",27505aff8ad3fae2d1eefefdfdb53d39a36173a1,2018-02-05 10:54:51,2
156872,java_com_google_gerrit_server_notedb_NoteDbChangeState.java,"private static java.util.Optional<com.google.gerrit.server.notedb.NoteDbChangeState.RefState> parse(com.google.gerrit.reviewdb.client.Change.Id changeId, java.util.List<java.lang.String> parts) { checkArgument((!(parts.isEmpty())), ""missing state string for change %s"", changeId); org.eclipse.jgit.lib.ObjectId changeMetaId = org.eclipse.jgit.lib.ObjectId.fromString(parts.get(0)); java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.ObjectId> draftIds = com.google.common.collect.Maps.newHashMapWithExpectedSize(((parts.size()) - 1)); com.google.common.base.Splitter s = com.google.common.base.Splitter.on('='); for (int i = 1; i < (parts.size()); i++) { java.lang.String p = parts.get(i); java.util.List<java.lang.String> draftParts = s.splitToList(p); checkArgument(((draftParts.size()) == 2), ""invalid draft state part for change %s: %s"", changeId, p); draftIds.put(Account.Id.parse(draftParts.get(0)), org.eclipse.jgit.lib.ObjectId.fromString(draftParts.get(1))); } return java.util.Optional.of(com.google.gerrit.server.notedb.NoteDbChangeState.RefState.create(changeMetaId, draftIds)); }",f0fbec3f1fa7b3cee39dd62a5fff9e051f7bf0bc,"private static java.util.Optional<com.google.gerrit.server.notedb.NoteDbChangeState.RefState> parse(com.google.gerrit.reviewdb.client.Change.Id changeId, java.util.List<java.lang.String> parts) { checkArgument((!(parts.isEmpty())), ""missing state string for change %s"", changeId); org.eclipse.jgit.lib.ObjectId changeMetaId = org.eclipse.jgit.lib.ObjectId.fromString(parts.get(0)); java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.ObjectId> draftIds = com.google.common.collect.Maps.newHashMapWithExpectedSize(((parts.size()) - 1)); com.google.common.base.Splitter s = com.google.common.base.Splitter.on('='); for (int i = 1; i < (parts.size()); i++) { java.lang.String p = parts.get(i); java.util.List<java.lang.String> draftParts = s.splitToList(p); checkArgument(((draftParts.size()) == 2), ""invalid draft state part for change %s: %s"", changeId, p); java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> accountId = Account.Id.parse(draftParts.get(0)); checkArgument(accountId.isPresent(), ""invalid account ID in draft state part for change %s: %s"", changeId, p); draftIds.put(accountId.get(), org.eclipse.jgit.lib.ObjectId.fromString(draftParts.get(1))); } return java.util.Optional.of(com.google.gerrit.server.notedb.NoteDbChangeState.RefState.create(changeMetaId, draftIds)); }",cc210ecd67939c056a021af807dec15390e329a0,"private static java.util.Optional<com.google.gerrit.server.notedb.NoteDbChangeState.RefState> parse(com.google.gerrit.reviewdb.client.Change.Id changeId, java.util.List<java.lang.String> parts) { checkArgument((!(parts.isEmpty())), ""missing state string for change %s"", changeId); org.eclipse.jgit.lib.ObjectId changeMetaId = org.eclipse.jgit.lib.ObjectId.fromString(parts.get(0)); java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.ObjectId> draftIds = com.google.common.collect.Maps.newHashMapWithExpectedSize(((parts.size()) - 1)); com.google.common.base.Splitter s = com.google.common.base.Splitter.on('='); for (int i = 1; i < (parts.size()); i++) { java.lang.String p = parts.get(i); java.util.List<java.lang.String> draftParts = s.splitToList(p); checkArgument(((draftParts.size()) == 2), ""invalid draft state part for change %s: %s"", changeId, p); java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> accountId = Account.Id.tryParse(draftParts.get(0)); checkArgument(accountId.isPresent(), ""invalid account ID in draft state part for change %s: %s"", changeId, p); draftIds.put(accountId.get(), org.eclipse.jgit.lib.ObjectId.fromString(draftParts.get(1))); } return java.util.Optional.of(com.google.gerrit.server.notedb.NoteDbChangeState.RefState.create(changeMetaId, draftIds)); }",bf6fc00fd1f520ece44f472fea2777d9ca3c79c5,2018-02-05 14:43:22,6
156872,java_com_google_gerrit_httpd_auth_become_BecomeAnyAccountLoginServlet.java,"private java.util.Optional<com.google.gerrit.server.account.AuthResult> byAccountId(java.lang.String idStr) { final com.google.gerrit.reviewdb.client.Account.Id id; try { id = Account.Id.parse(idStr); } catch (java.lang.NumberFormatException nfe) { return java.util.Optional.empty(); } try { return auth(accounts.get(id)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { getServletContext().log(""cannot query database"", e); return java.util.Optional.empty(); } }",2bf328a382bcb67c378e49a77fd327fd5b9339b4,"private java.util.Optional<com.google.gerrit.server.account.AuthResult> byAccountId(java.lang.String idStr) { java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.parse(idStr); if (!(id.isPresent())) { return java.util.Optional.empty(); } try { return auth(accounts.get(id.get())); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { getServletContext().log(""cannot query database"", e); return java.util.Optional.empty(); } }",6eee2b7fb7703e8accb8df0e1fe016487a63504f,"private java.util.Optional<com.google.gerrit.server.account.AuthResult> byAccountId(java.lang.String idStr) { java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.tryParse(idStr); if (!(id.isPresent())) { return java.util.Optional.empty(); } try { return auth(accounts.get(id.get())); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { getServletContext().log(""cannot query database"", e); return java.util.Optional.empty(); } }",5e20173cae16a21cbcea5ebf793f8f2a92572cd4,2018-02-05 14:43:22,6
156872,java_com_google_gerrit_server_account_AccountResolver.java,"public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.regex.Matcher m = java.util.regex.Pattern.compile(""^.* \\(([1-9][0-9]*)\\)$"").matcher(nameOrEmail); if (m.matches()) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(m.group(1)); return com.google.common.collect.Streams.stream(accounts.get(id)).map(( a) -> id).collect(toImmutableSet()); } if (nameOrEmail.matches(""^[1-9][0-9]*$"")) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(nameOrEmail); return com.google.common.collect.Streams.stream(accounts.get(id)).map(( a) -> id).collect(toImmutableSet()); } if (nameOrEmail.matches(Account.USER_NAME_PATTERN)) { java.util.Optional<com.google.gerrit.server.account.AccountState> who = byId.getByUsername(nameOrEmail); if (who.isPresent()) { return com.google.common.collect.ImmutableSet.of(who.map(( a) -> a.getAccount().getId()).get()); } } return findAllByNameOrEmail(nameOrEmail); }",bfe58b065e7694fd215ecf2276277dc7633c9d4d,"public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.regex.Matcher m = java.util.regex.Pattern.compile(""^.* \\(([1-9][0-9]*)\\)$"").matcher(nameOrEmail); if (m.matches()) { java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.parse(m.group(1)); if (id.isPresent()) { return com.google.common.collect.Streams.stream(accounts.get(id.get())).map(( a) -> id.get()).collect(toImmutableSet()); } } if (nameOrEmail.matches(""^[1-9][0-9]*$"")) { java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.parse(nameOrEmail); if (id.isPresent()) { return com.google.common.collect.Streams.stream(accounts.get(id.get())).map(( a) -> id.get()).collect(toImmutableSet()); } } if (nameOrEmail.matches(Account.USER_NAME_PATTERN)) { java.util.Optional<com.google.gerrit.server.account.AccountState> who = byId.getByUsername(nameOrEmail); if (who.isPresent()) { return com.google.common.collect.ImmutableSet.of(who.map(( a) -> a.getAccount().getId()).get()); } } return findAllByNameOrEmail(nameOrEmail); }",ba5fe206290f8cdf8444cf6c5f3d27a6f61b590f,"public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.regex.Matcher m = java.util.regex.Pattern.compile(""^.* \\(([1-9][0-9]*)\\)$"").matcher(nameOrEmail); if (m.matches()) { java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.tryParse(m.group(1)); if (id.isPresent()) { return com.google.common.collect.Streams.stream(accounts.get(id.get())).map(( a) -> a.getAccount().getId()).collect(toImmutableSet()); } } if (nameOrEmail.matches(""^[1-9][0-9]*$"")) { java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.tryParse(nameOrEmail); if (id.isPresent()) { return com.google.common.collect.Streams.stream(accounts.get(id.get())).map(( a) -> a.getAccount().getId()).collect(toImmutableSet()); } } if (nameOrEmail.matches(Account.USER_NAME_PATTERN)) { java.util.Optional<com.google.gerrit.server.account.AccountState> who = byId.getByUsername(nameOrEmail); if (who.isPresent()) { return com.google.common.collect.ImmutableSet.of(who.map(( a) -> a.getAccount().getId()).get()); } } return findAllByNameOrEmail(nameOrEmail); }",2cd32b4482db773e06f97a6c4dc72074e825f745,2018-02-05 14:43:22,6
156872,java_com_google_gerrit_server_mail_SignedTokenEmailTokenVerifier.java,"@java.lang.Override public com.google.gerrit.server.mail.ParsedToken decode(java.lang.String tokenString) throws com.google.gerrit.server.mail.InvalidTokenException { checkEmailRegistrationToken(); com.google.gwtjsonrpc.server.ValidToken token; try { token = emailRegistrationToken.checkToken(tokenString, null); } catch (com.google.gwtjsonrpc.server.XsrfException err) { throw new com.google.gerrit.server.mail.InvalidTokenException(err); } if (((token == null) || ((token.getData()) == null)) || (token.getData().isEmpty())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); } java.lang.String payload = new java.lang.String(org.eclipse.jgit.util.Base64.decode(token.getData()), java.nio.charset.StandardCharsets.UTF_8); java.util.regex.Matcher matcher = java.util.regex.Pattern.compile(""^([0-9]+):(.+@.+)$"").matcher(payload); if (!(matcher.matches())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); } com.google.gerrit.reviewdb.client.Account.Id id; try { id = Account.Id.parse(matcher.group(1)); } catch (java.lang.IllegalArgumentException err) { throw new com.google.gerrit.server.mail.InvalidTokenException(err); } java.lang.String newEmail = matcher.group(2); return new com.google.gerrit.server.mail.ParsedToken(id, newEmail); }",4d95b726e234dd6af4b2b27286d898bc55e2a557,"@java.lang.Override public com.google.gerrit.server.mail.ParsedToken decode(java.lang.String tokenString) throws com.google.gerrit.server.mail.InvalidTokenException { checkEmailRegistrationToken(); com.google.gwtjsonrpc.server.ValidToken token; try { token = emailRegistrationToken.checkToken(tokenString, null); } catch (com.google.gwtjsonrpc.server.XsrfException err) { throw new com.google.gerrit.server.mail.InvalidTokenException(err); } if (((token == null) || ((token.getData()) == null)) || (token.getData().isEmpty())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); } java.lang.String payload = new java.lang.String(org.eclipse.jgit.util.Base64.decode(token.getData()), java.nio.charset.StandardCharsets.UTF_8); java.util.regex.Matcher matcher = java.util.regex.Pattern.compile(""^([0-9]+):(.+@.+)$"").matcher(payload); if (!(matcher.matches())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); } com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(matcher.group(1)).orElseThrow(InvalidTokenException::new); java.lang.String newEmail = matcher.group(2); return new com.google.gerrit.server.mail.ParsedToken(id, newEmail); }",a7d03b1b0a207512f71f1cf8b47f5d8a5ff42b37,"@java.lang.Override public com.google.gerrit.server.mail.ParsedToken decode(java.lang.String tokenString) throws com.google.gerrit.server.mail.InvalidTokenException { checkEmailRegistrationToken(); com.google.gwtjsonrpc.server.ValidToken token; try { token = emailRegistrationToken.checkToken(tokenString, null); } catch (com.google.gwtjsonrpc.server.XsrfException err) { throw new com.google.gerrit.server.mail.InvalidTokenException(err); } if (((token == null) || ((token.getData()) == null)) || (token.getData().isEmpty())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); } java.lang.String payload = new java.lang.String(org.eclipse.jgit.util.Base64.decode(token.getData()), java.nio.charset.StandardCharsets.UTF_8); java.util.regex.Matcher matcher = java.util.regex.Pattern.compile(""^([0-9]+):(.+@.+)$"").matcher(payload); if (!(matcher.matches())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); } com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.tryParse(matcher.group(1)).orElseThrow(InvalidTokenException::new); java.lang.String newEmail = matcher.group(2); return new com.google.gerrit.server.mail.ParsedToken(id, newEmail); }",03cf8fab55fd716d5a12bd476e9767752581bdf7,2018-02-05 14:43:22,6
156872,java_com_google_gerrit_reviewdb_client_Account.java,public static com.google.gerrit.reviewdb.client.Account.Id parse(java.lang.String str) { com.google.gerrit.reviewdb.client.Account.Id r = new com.google.gerrit.reviewdb.client.Account.Id(); r.fromString(str); return r; },856c35c92710abf965763ab63f97f8528da0858c,public static java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> parse(java.lang.String str) { try { return java.util.Optional.of(new com.google.gerrit.reviewdb.client.Account.Id(java.lang.Integer.parseInt(str))); } catch (java.lang.NumberFormatException e) { return java.util.Optional.empty(); } },e2d42ebdeb7e16e06f37637535a4281f6125171d,public static java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> tryParse(java.lang.String str) { try { return java.util.Optional.of(new com.google.gerrit.reviewdb.client.Account.Id(java.lang.Integer.parseInt(str))); } catch (java.lang.NumberFormatException e) { return java.util.Optional.empty(); } },38449d99183331383d0224a4d5ebeb29520b0c5e,2018-02-05 14:43:22,6
156872,gerrit-gwtui_src_main_java_com_google_gerrit_client_Dispatcher.java,"private static void dashboard(java.lang.String token) { java.lang.String rest = com.google.gerrit.client.Dispatcher.skip(token); if (rest.matches(""[0-9]+"")) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(Account.Id.parse(rest))); return; } if (rest.equals(""self"")) { if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(com.google.gerrit.client.Gerrit.getUserAccount().getId())); } else { com.google.gerrit.client.ui.Screen s = new com.google.gerrit.client.changes.AccountDashboardScreen(null); s.setRequiresSignIn(true); com.google.gerrit.client.Gerrit.display(token, s); } return; } if (rest.startsWith(""?"")) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.CustomDashboardScreen(rest.substring(1))); return; } com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); }",791088479e86e6737915eeb35249e20fb67423bc,"private static void dashboard(java.lang.String token) { java.lang.String rest = com.google.gerrit.client.Dispatcher.skip(token); java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> accountId = Account.Id.parse(rest); if (accountId.isPresent()) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(accountId.get())); return; } if (rest.equals(""self"")) { if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(com.google.gerrit.client.Gerrit.getUserAccount().getId())); } else { com.google.gerrit.client.ui.Screen s = new com.google.gerrit.client.changes.AccountDashboardScreen(null); s.setRequiresSignIn(true); com.google.gerrit.client.Gerrit.display(token, s); } return; } if (rest.startsWith(""?"")) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.CustomDashboardScreen(rest.substring(1))); return; } com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); }",1d931f3768588e6cf37352ae3312df570bf0ded1,"private static void dashboard(java.lang.String token) { java.lang.String rest = com.google.gerrit.client.Dispatcher.skip(token); java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> accountId = Account.Id.tryParse(rest); if (accountId.isPresent()) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(accountId.get())); return; } if (rest.equals(""self"")) { if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(com.google.gerrit.client.Gerrit.getUserAccount().getId())); } else { com.google.gerrit.client.ui.Screen s = new com.google.gerrit.client.changes.AccountDashboardScreen(null); s.setRequiresSignIn(true); com.google.gerrit.client.Gerrit.display(token, s); } return; } if (rest.startsWith(""?"")) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.CustomDashboardScreen(rest.substring(1))); return; } com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); }",c1695fe2ef9103cfd5fcfebd93170899f2c1fd1c,2018-02-05 14:43:22,6
157790,java_com_google_gerrit_server_git_receive_ReplaceOp.java,"private java.lang.String changeKindMessage(com.google.gerrit.extensions.client.ChangeKind changeKind) { switch (changeKind) { case MERGE_FIRST_PARENT_UPDATE : case TRIVIAL_REBASE : case NO_CHANGE : return ("": Patch Set "" + (priorPatchSetId.get())) + "" was rebased.""; case NO_CODE_CHANGE : return "": Commit message was updated.""; case REWORK : default : return null; } }",6f48b652ba946cc069302e3df375f68fe4bd0ba9,"private java.lang.String changeKindMessage(com.google.gerrit.extensions.client.ChangeKind changeKind) { switch (changeKind) { case MERGE_FIRST_PARENT_UPDATE : return ("": New merge patch set was added with a new first parent relative to "" + (priorPatchSetId.get())) + "".""; case TRIVIAL_REBASE : return ("": Patch Set "" + (priorPatchSetId.get())) + "" was rebased.""; case NO_CHANGE : return ((("": New patch set was added with same tree, parent"" + ((commit.getParentCount()) != 1 ? ""s"" : """")) + "", and commit message as Patch Set "") + (priorPatchSetId.get())) + "".""; case NO_CODE_CHANGE : return "": Commit message was updated.""; case REWORK : default : return null; } }",b7f93f9268950056bb94c0d4cd6b3c8895f47dad,"private java.lang.String changeKindMessage(com.google.gerrit.extensions.client.ChangeKind changeKind) { switch (changeKind) { case MERGE_FIRST_PARENT_UPDATE : return ("": New merge patch set was added with a new first parent relative to Patch Set "" + (priorPatchSetId.get())) + "".""; case TRIVIAL_REBASE : return ("": Patch Set "" + (priorPatchSetId.get())) + "" was rebased.""; case NO_CHANGE : return ((("": New patch set was added with same tree, parent"" + ((commit.getParentCount()) != 1 ? ""s"" : """")) + "", and commit message as Patch Set "") + (priorPatchSetId.get())) + "".""; case NO_CODE_CHANGE : return "": Commit message was updated.""; case REWORK : default : return null; } }",21588c3973847ea16c3ca09e6af1b5736c58e87a,2018-02-06 17:48:12,2
147190,java_com_google_gerrit_server_group_DbGroupMemberAuditListener.java,"@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> includesAudit = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById groupInclude : added) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(groupInclude, me, addedOn); includesAudit.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups(""Cannot log add groups to group event performed by user"", me, added, e); } }",e290fe07cf24e9c678f00489ca220d47d7c69dea,"@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> addedSubgroups, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> includesAudit = addedSubgroups.stream().map(( t) -> toAccountGroupByIdAud(t, parentGroupId, addedOn, me)).collect(java.util.stream.Collectors.toList()); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups(""Cannot log add groups to group event performed by user"", me, addedSubgroups, parentGroupId, e); } }",6a7e3c7d0e9cfb4a6afcdee11bbc59c2156cb0c4,"@java.lang.Override public void onAddSubgroups(com.google.gerrit.server.audit.group.GroupSubgroupAuditEvent event) { java.util.Optional<com.google.gerrit.server.group.InternalGroup> updatedGroup = groupCache.get(event.getUpdatedGroup()); if (!(updatedGroup.isPresent())) { logFailToLoadUpdatedGroup(event); return; } com.google.gerrit.server.group.InternalGroup group = updatedGroup.get(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(com.google.gerrit.server.group.DbGroupMemberAuditListener.toAccountGroupByIdAudits(event, group.getId())); } catch (com.google.gwtorm.server.OrmException e) { logOrmException(""Cannot log add groups to group event performed by user"", event, group.getName(), e); } }",01d85e85cf6beff923e0463c80451e53ca83e02f,2018-02-06 19:02:04,7
147190,java_com_google_gerrit_server_group_DbGroupMemberAuditListener.java,"@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { final java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupById g : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(g.getGroupId(), g.getIncludeUUID())) { if (a.isActive()) { audit = a; break; } } if (audit != null) { audit.removed(me, removedOn); auditUpdates.add(audit); } } db.accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups(""Cannot log delete groups from group event performed by user"", me, removed, e); } }",50e5ca9ef9ec4f544ce88c09496c7cc45d7ba96f,"@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> removed, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.sql.Timestamp removedOn) { final java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(parentGroupId, uuid)) { if (a.isActive()) { audit = a; break; } } if (audit != null) { audit.removed(me, removedOn); auditUpdates.add(audit); } } db.accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups(""Cannot log delete groups from group event performed by user"", me, removed, parentGroupId, e); } }",29b1fb3b44125c2115eb71f760234295da504231,"@java.lang.Override public void onDeleteSubgroups(com.google.gerrit.server.audit.group.GroupSubgroupAuditEvent event) { java.util.Optional<com.google.gerrit.server.group.InternalGroup> updatedGroup = groupCache.get(event.getUpdatedGroup()); if (!(updatedGroup.isPresent())) { logFailToLoadUpdatedGroup(event); return; } com.google.gerrit.server.group.InternalGroup group = updatedGroup.get(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = new java.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : event.getModifiedSubgroups()) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> audits = db.accountGroupByIdAud().byGroupInclude(updatedGroup.get().getId(), uuid); for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : audits) { if (a.isActive()) { audit = a; break; } } if (audit != null) { audit.removed(event.getActor(), event.getTimestamp()); auditUpdates.add(audit); } } db.accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmException(""Cannot log delete groups from group event performed by user"", event, group.getName(), e); } }",33e62e9a0701109e92629fdb039c69e0a6a1c149,2018-02-06 19:02:04,7
147190,java_com_google_gerrit_server_group_DbGroupMemberAuditListener.java,"private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId(); java.lang.String userName = accountCache.get(accountId).getUserName(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId(); java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format(""account {0}/{1}, group {2}/{3}"", accountId, userName, groupId, groupName)); } logOrmException(header, me, descriptions, e); }",80fccd5352f592f0a6c3859fd53930c265499d53,"private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> accounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.Account.Id id : accounts) { java.lang.String userName = accountCache.get(id).getUserName(); java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format(""account {0}/{1}, group {2}/{3}"", id, userName, groupId, groupName)); } logOrmException(header, me, descriptions, e); }",2da809f43387b87d5d838af57e16aca1c5d737cd,"private com.google.common.collect.ImmutableList<java.lang.String> createEventDescriptions(com.google.gerrit.server.audit.group.GroupAuditEvent event, java.lang.String updatedGroupName) { com.google.common.collect.ImmutableList.Builder<java.lang.String> builder = com.google.common.collect.ImmutableList.builder(); if (event instanceof com.google.gerrit.server.audit.group.GroupMemberAuditEvent) { com.google.gerrit.server.audit.group.GroupMemberAuditEvent memberAuditEvent = ((com.google.gerrit.server.audit.group.GroupMemberAuditEvent) (event)); for (com.google.gerrit.reviewdb.client.Account.Id accountId : memberAuditEvent.getModifiedMembers()) { java.lang.String userName = getUserName(accountId).orElse(""""); builder.add(java.text.MessageFormat.format(""account {0}/{1}, group {2}/{3}"", accountId, userName, event.getUpdatedGroup(), updatedGroupName)); } } else if (event instanceof com.google.gerrit.server.audit.group.GroupSubgroupAuditEvent) { com.google.gerrit.server.audit.group.GroupSubgroupAuditEvent subgroupAuditEvent = ((com.google.gerrit.server.audit.group.GroupSubgroupAuditEvent) (event)); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid : subgroupAuditEvent.getModifiedSubgroups()) { java.lang.String groupName = groupBackend.get(groupUuid).getName(); builder.add(java.text.MessageFormat.format(""group {0}/{1}, group {2}/{3}"", groupUuid, groupName, subgroupAuditEvent.getUpdatedGroup(), updatedGroupName)); } } return builder.build(); }",3c63cf0a933f537d2c1552a6d08762f9547b0143,2018-02-06 19:02:04,7
147190,java_com_google_gerrit_server_group_DbGroupMemberAuditListener.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static com.google.gerrit.reviewdb.client.AccountGroupMemberAudit toAccountGroupMemberAudit(com.google.gerrit.reviewdb.client.Account.Id id, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.Account.Id me) { return new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key(id, groupId, ts), me); }",085c388fdbc2f5f2999debb83872aae21792659d,"private void logFailToLoadUpdatedGroup(com.google.gerrit.server.audit.group.GroupAuditEvent event) { com.google.common.collect.ImmutableList<java.lang.String> descriptions = createEventDescriptions(event, ""(fail to load group)""); java.lang.String message = createErrorMessage(""Fail to load the updated group"", event.getActor(), descriptions); com.google.gerrit.server.group.DbGroupMemberAuditListener.log.error(message); }",09525d0e684a18c68525a291a0cf7b175ffc23ca,2018-02-06 19:02:04,7
147190,java_com_google_gerrit_server_audit_AuditService.java,"public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteAccountsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log delete accounts from group event"", e); } } }",4bc0f888e322318307600f56849cafa413f0fa27,"public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> removedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteAccountsFromGroup(actor, removedAccounts, groupId, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log delete accounts from group event"", e); } } }",f7e25731782d01c4feccebcf463da8bf6b252c11,"public void dispatchDeleteMembers(com.google.gerrit.reviewdb.client.Account.Id actor, com.google.gerrit.reviewdb.client.AccountGroup.UUID updatedGroup, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> deletedMembers, java.sql.Timestamp deletedOn) { for (com.google.gerrit.server.audit.group.GroupAuditListener auditListener : groupAuditListeners) { try { com.google.gerrit.server.audit.group.GroupMemberAuditEvent event = com.google.gerrit.server.audit.group.GroupMemberAuditEvent.create(actor, updatedGroup, deletedMembers, deletedOn); auditListener.onDeleteMembers(event); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log delete accounts from group event"", e); } } }",616301c5485bb84241605504747f263936c8109a,2018-02-06 19:02:04,7
154974,java_com_google_gerrit_server_group_DbGroupAuditListener.java,"@java.lang.Override public void onAddSubgroups(com.google.gerrit.server.audit.group.GroupSubgroupAuditEvent event) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(com.google.gerrit.server.group.DbGroupMemberAuditListener.toAccountGroupByIdAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForSubgroupsEvent(""Cannot log add groups to group event performed by user"", event, e); } }",a3030c2adc6268aca7610949556a97b7ee111f3b,"@java.lang.Override public void onAddSubgroups(com.google.gerrit.server.audit.group.GroupSubgroupAuditEvent event) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(com.google.gerrit.server.group.DbGroupAuditListener.toAccountGroupByIdAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForSubgroupsEvent(""Cannot log add groups to group event performed by user"", event, e); } }",a3bbce14da1aadc984bc6e767b2f5bcc1792e47b,"@java.lang.Override public void onAddSubgroups(com.google.gerrit.server.audit.group.GroupSubgroupAuditEvent event) { java.util.Optional<com.google.gerrit.server.group.InternalGroup> updatedGroup = groupCache.get(event.getUpdatedGroup()); if (!(updatedGroup.isPresent())) { logFailToLoadUpdatedGroup(event); return; } com.google.gerrit.server.group.InternalGroup group = updatedGroup.get(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(com.google.gerrit.server.group.DbGroupAuditListener.toAccountGroupByIdAudits(event, group.getId())); } catch (com.google.gwtorm.server.OrmException e) { logOrmException(""Cannot log add groups to group event performed by user"", event, group.getName(), e); } }",eb187d1172373aad463fb4bd66d456ed15132c18,2018-02-06 19:02:04,5
147190,java_com_google_gerrit_server_group_db_GroupsUpdate.java,"private void removeSubgroupsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids, java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> subgroupsToRemove = subgroupUuids.stream().map(( subgroupUuid) -> new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, subgroupUuid)).map(AccountGroupById::new).collect(toImmutableSet()); if ((currentUser) != null) { auditService.dispatchDeleteGroupsFromGroup(currentUser.getAccountId(), subgroupsToRemove, removedOn); } db.accountGroupById().delete(subgroupsToRemove); }",5c7e682af98084560a8470376416f728ff6c7029,"private void removeSubgroupsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids, java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> subgroupsToRemove = subgroupUuids.stream().map(( subgroupUuid) -> new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, subgroupUuid)).map(AccountGroupById::new).collect(toImmutableSet()); if ((currentUser) != null) { auditService.dispatchDeleteGroupsFromGroup(currentUser.getAccountId(), subgroupUuids, parentGroupId, removedOn); } db.accountGroupById().delete(subgroupsToRemove); }",9f54eb32c126205c493e038d851cb188157af674,"private static com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupById> toAccountGroupByIds(com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids) { return subgroupUuids.stream().map(( subgroupUuid) -> new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, subgroupUuid)).map(AccountGroupById::new).collect(toImmutableSet()); }",90435c8bb92296fa32aa7cb53f9d09fc9d282905,2018-02-06 19:02:04,7
147190,java_com_google_gerrit_server_group_DbGroupMemberAuditListener.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static com.google.gerrit.reviewdb.client.AccountGroupByIdAud toAccountGroupByIdAud(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.Account.Id me) { return new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(new com.google.gerrit.reviewdb.client.AccountGroupByIdAud.Key(groupId, uuid, ts), me); }",d57184bb322ba5c252ca8b71be17fcbd3c3ce4d9,"private void logOrmException(java.lang.String header, com.google.gerrit.server.audit.group.GroupAuditEvent event, java.lang.String updatedGroupName, com.google.gwtorm.server.OrmException e) { com.google.common.collect.ImmutableList<java.lang.String> descriptions = createEventDescriptions(event, updatedGroupName); java.lang.String message = createErrorMessage(header, event.getActor(), descriptions); com.google.gerrit.server.group.DbGroupMemberAuditListener.log.error(message, e); }",9b08b386723b5f50f7be5bb8e09a461c23c61a55,2018-02-06 19:02:04,7
147190,java_com_google_gerrit_server_group_db_GroupsUpdate.java,"private void addSubgroupsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids, java.sql.Timestamp addedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> newSubgroups = subgroupUuids.stream().map(( subgroupUuid) -> new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, subgroupUuid)).map(AccountGroupById::new).collect(toImmutableSet()); if ((currentUser) != null) { auditService.dispatchAddGroupsToGroup(currentUser.getAccountId(), newSubgroups, addedOn); } db.accountGroupById().insert(newSubgroups); }",d7bc69f962e800da335756eaff71fe3ac665764a,"private void addSubgroupsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids, java.sql.Timestamp addedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> newSubgroups = subgroupUuids.stream().map(( subgroupUuid) -> new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, subgroupUuid)).map(AccountGroupById::new).collect(toImmutableSet()); if ((currentUser) != null) { auditService.dispatchAddGroupsToGroup(currentUser.getAccountId(), subgroupUuids, parentGroupId, addedOn); } db.accountGroupById().insert(newSubgroups); }",0fdfeb61d2ce33b26a40e959dea177037927996d,"private static java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> deleteSubgroupsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> originalSubgroups, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> updatedSubgroups) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids = com.google.common.collect.Sets.difference(originalSubgroups, updatedSubgroups); if (subgroupUuids.isEmpty()) { return subgroupUuids; } com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupById> subgroupsToRemove = com.google.gerrit.server.group.db.GroupsUpdate.toAccountGroupByIds(parentGroupId, subgroupUuids); db.accountGroupById().delete(subgroupsToRemove); return subgroupUuids; }",6f3a81c69390524368028f0aa652018d953f37ee,2018-02-06 19:02:04,7
154974,java_com_google_gerrit_server_group_DbGroupAuditListener.java,"@java.lang.Override public void onAddMembers(com.google.gerrit.server.audit.group.GroupMemberAuditEvent event) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(com.google.gerrit.server.group.DbGroupMemberAuditListener.toAccountGroupMemberAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForMembersEvent(""Cannot log add accounts to group event performed by user"", event, e); } }",380cd45a14aaa442ca3dd96a42856ea6e4888328,"@java.lang.Override public void onAddMembers(com.google.gerrit.server.audit.group.GroupMemberAuditEvent event) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(com.google.gerrit.server.group.DbGroupAuditListener.toAccountGroupMemberAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForMembersEvent(""Cannot log add accounts to group event performed by user"", event, e); } }",0396e0cb5b9b7224db227c06f283f2d8afcb834e,"@java.lang.Override public void onAddMembers(com.google.gerrit.server.audit.group.GroupMemberAuditEvent event) { java.util.Optional<com.google.gerrit.server.group.InternalGroup> updatedGroup = groupCache.get(event.getUpdatedGroup()); if (!(updatedGroup.isPresent())) { logFailToLoadUpdatedGroup(event); return; } com.google.gerrit.server.group.InternalGroup group = updatedGroup.get(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(com.google.gerrit.server.group.DbGroupAuditListener.toAccountGroupMemberAudits(event, group.getId())); } catch (com.google.gwtorm.server.OrmException e) { logOrmException(""Cannot log add accounts to group event performed by user"", event, group.getName(), e); } }",9fb726725ab57866fd3c5e30726cda4b478cc58f,2018-02-06 19:02:04,5
147190,java_com_google_gerrit_server_group_db_GroupsUpdate.java,"private void removeGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds, java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> membersToRemove = accountIds.stream().map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new).collect(toImmutableSet()); if ((currentUser) != null) { auditService.dispatchDeleteAccountsFromGroup(currentUser.getAccountId(), membersToRemove, removedOn); } db.accountGroupMembers().delete(membersToRemove); }",3caf2836d1da8c92bcccf17d87a9d12285da9793,"private void removeGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds, java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> membersToRemove = accountIds.stream().map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new).collect(toImmutableSet()); if ((currentUser) != null) { auditService.dispatchDeleteAccountsFromGroup(currentUser.getAccountId(), accountIds, groupId, removedOn); } db.accountGroupMembers().delete(membersToRemove); }",19e4e0f087be17843dde97f048afa1e5b8d1b12b,"private static com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMember> toAccountGroupMembers(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds) { return accountIds.stream().map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new).collect(toImmutableSet()); }",888c5e11dec4aa25d652b0e82673f40b3f59ca37,2018-02-06 19:02:04,7
147190,java_com_google_gerrit_server_group_DbGroupMemberAuditListener.java,"@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, addedOn); auditInserts.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts(""Cannot log add accounts to group event performed by user"", me, added, e); } }",eae2ca4d0fbc9bcf9f00b06713225c4b21847f39,"@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> addedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = addedAccounts.stream().map(( t) -> toAccountGroupMemberAudit(t, groupId, addedOn, me)).collect(java.util.stream.Collectors.toList()); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts(""Cannot log add accounts to group event performed by user"", me, addedAccounts, groupId, e); } }",8f555bb37f1df5fe95656c75ea139ed7745701d5,"@java.lang.Override public void onAddMembers(com.google.gerrit.server.audit.group.GroupMemberAuditEvent event) { java.util.Optional<com.google.gerrit.server.group.InternalGroup> updatedGroup = groupCache.get(event.getUpdatedGroup()); if (!(updatedGroup.isPresent())) { logFailToLoadUpdatedGroup(event); return; } com.google.gerrit.server.group.InternalGroup group = updatedGroup.get(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(com.google.gerrit.server.group.DbGroupMemberAuditListener.toAccountGroupMemberAudits(event, group.getId())); } catch (com.google.gwtorm.server.OrmException e) { logOrmException(""Cannot log add accounts to group event performed by user"", event, group.getName(), e); } }",3ad08fdd1b82c3d14e0a706f186ebd56b8451550,2018-02-06 19:02:04,7
147190,java_com_google_gerrit_server_audit_AuditService.java,"public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log add accounts to group event"", e); } } }",e9f537334969f9ec192603e0d1c2318204fbb8d0,"public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> addedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, addedAccounts, groupId, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log add accounts to group event"", e); } } }",8e86ebead554ce482d6cfd32506480ea9e38e3e4,"public void dispatchAddMembers(com.google.gerrit.reviewdb.client.Account.Id actor, com.google.gerrit.reviewdb.client.AccountGroup.UUID updatedGroup, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> addedMembers, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.group.GroupAuditListener auditListener : groupAuditListeners) { try { com.google.gerrit.server.audit.group.GroupMemberAuditEvent event = com.google.gerrit.server.audit.group.GroupMemberAuditEvent.create(actor, updatedGroup, addedMembers, addedOn); auditListener.onAddMembers(event); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log add accounts to group event"", e); } } }",70198b55abc41ae586670e793c46ca6b8ab31ff1,2018-02-06 19:02:04,7
147190,java_com_google_gerrit_server_group_db_GroupsUpdate.java,"private void addGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> newMemberIds, java.sql.Timestamp addedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> newMembers = newMemberIds.stream().map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new).collect(toImmutableSet()); if ((currentUser) != null) { auditService.dispatchAddAccountsToGroup(currentUser.getAccountId(), newMembers, addedOn); } db.accountGroupMembers().insert(newMembers); }",8681d3e328dc72012a6e966d5c42bf6964fdf4f9,"private void addGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> newMemberIds, java.sql.Timestamp addedOn) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> newMembers = newMemberIds.stream().map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new).collect(toImmutableSet()); if ((currentUser) != null) { auditService.dispatchAddAccountsToGroup(currentUser.getAccountId(), newMemberIds, groupId, addedOn); } db.accountGroupMembers().insert(newMembers); }",c518c33ac074db2110b20ad64f8ceade66114acc,"private static java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> deleteGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> originalMembers, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> updatedMembers) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds = com.google.common.collect.Sets.difference(originalMembers, updatedMembers); if (accountIds.isEmpty()) { return accountIds; } com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMember> membersToRemove = com.google.gerrit.server.group.db.GroupsUpdate.toAccountGroupMembers(groupId, accountIds); db.accountGroupMembers().delete(membersToRemove); return accountIds; }",9466ce357db42336bc234e20e0ea504712ea8e03,2018-02-06 19:02:04,7
147190,java_com_google_gerrit_server_audit_AuditService.java,"public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteGroupsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log delete groups from group event"", e); } } }",c69e31d411013df57124f105ba30ff437d341391,"public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> removedSubgroups, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteGroupsFromGroup(actor, removedSubgroups, groupId, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log delete groups from group event"", e); } } }",a3b094a39d2f1337beb4715d3f2c495ea6ee4bf3,"public void dispatchDeleteSubgroups(com.google.gerrit.reviewdb.client.Account.Id actor, com.google.gerrit.reviewdb.client.AccountGroup.UUID updatedGroup, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> deletedSubgroups, java.sql.Timestamp deletedOn) { for (com.google.gerrit.server.audit.group.GroupAuditListener auditListener : groupAuditListeners) { try { com.google.gerrit.server.audit.group.GroupSubgroupAuditEvent event = com.google.gerrit.server.audit.group.GroupSubgroupAuditEvent.create(actor, updatedGroup, deletedSubgroups, deletedOn); auditListener.onDeleteSubgroups(event); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log delete groups from group event"", e); } } }",af5a8598e37373678a2d8ada2788f16a3bb7bb50,2018-02-06 19:02:04,7
147190,java_com_google_gerrit_server_audit_AuditService.java,"public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddGroupsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log add groups to group event"", e); } } }",f0d11f5afd9a8c95f494c88f1253c1a3be74aef7,"public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> addedSubgroups, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddGroupsToGroup(actor, addedSubgroups, groupId, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log add groups to group event"", e); } } }",2918f9ce0ff82248edd7581d9338d409f8f3a7c5,"public void dispatchAddSubgroups(com.google.gerrit.reviewdb.client.Account.Id actor, com.google.gerrit.reviewdb.client.AccountGroup.UUID updatedGroup, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> addedSubgroups, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.group.GroupAuditListener auditListener : groupAuditListeners) { try { com.google.gerrit.server.audit.group.GroupSubgroupAuditEvent event = com.google.gerrit.server.audit.group.GroupSubgroupAuditEvent.create(actor, updatedGroup, addedSubgroups, addedOn); auditListener.onAddSubgroups(event); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log add groups to group event"", e); } } }",69809b63819c67c7d782dbcbc14efbaa7e884bf2,2018-02-06 19:02:04,7
147190,java_com_google_gerrit_server_group_DbGroupMemberAuditListener.java,"private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> values, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById m : values) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = m.getIncludeUUID(); java.lang.String groupName = groupBackend.get(groupUuid).getName(); com.google.gerrit.reviewdb.client.AccountGroup.Id targetGroupId = m.getGroupId(); java.lang.String targetGroupName = getGroupName(targetGroupId); descriptions.add(java.text.MessageFormat.format(""group {0}/{1}, group {2}/{3}"", groupUuid, groupName, targetGroupId, targetGroupName)); } logOrmException(header, me, descriptions, e); }",e9df4245dc043ab28915a01dfdf24c44ba5182f3,"private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> uuids, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : uuids) { java.lang.String groupName = groupBackend.get(uuid).getName(); java.lang.String targetGroupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format(""group {0}/{1}, group {2}/{3}"", uuid, groupName, groupId, targetGroupName)); } logOrmException(header, me, descriptions, e); }",54e83095b0ddf02813a737b0c162fac0eb71b1da,"private java.lang.String createErrorMessage(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, com.google.common.collect.ImmutableList<java.lang.String> descriptions) { java.lang.StringBuilder message = new java.lang.StringBuilder(header); message.append("" ""); message.append(me); message.append(""/""); message.append(getUserName(me).orElse(null)); message.append("": ""); message.append(com.google.common.base.Joiner.on(""; "").join(descriptions)); return message.toString(); }",db6662fca68a23af12cec9dba069f828d6bbc601,2018-02-06 19:02:04,7
157370,gerrit-server_src_main_java_com_google_gerrit_server_index_change_ChangeIndexer.java,"@java.lang.Override public java.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws java.lang.Exception { if (!(stalenessChecker.isStale(id))) { return false; } index(newChangeData(db.get(), project, id)); return true; }",ce2db5b5616947544dd4a474f233d36b0d41d1b7,"@java.lang.Override public java.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws java.lang.Exception { try { if (stalenessChecker.isStale(id)) { index(newChangeData(db.get(), project, id)); return true; } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug(""Change was deleted, aborting reindexing the change""); } return false; }",2196df430261a8e3dbf3cef6f037825d15ef7353,"@java.lang.Override public java.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws java.lang.Exception { try { if (stalenessChecker.isStale(id)) { index(newChangeData(db.get(), project, id)); return true; } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug(""Change {} was deleted, aborting reindexing the change."", id.get()); } return false; }",9515349ad4eb2e330f7c7e8098461a93552b58d5,2018-02-07 00:55:43,4
157830,gerrit-server_src_main_java_com_google_gerrit_server_index_change_ChangeIndexer.java,"@java.lang.Override public java.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws java.lang.Exception { try { if (stalenessChecker.isStale(id)) { index(newChangeData(db.get(), project, id)); return true; } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug(""Change {} was deleted, aborting reindexing the change."", id.get()); } return false; }",9515349ad4eb2e330f7c7e8098461a93552b58d5,"@java.lang.Override public java.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws java.lang.Exception { try { if (stalenessChecker.isStale(id)) { index(newChangeData(db.get(), project, id)); return true; } } catch (com.google.gerrit.server.project.NoSuchChangeException nsce) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug(""Change {} was deleted, aborting reindexing the change."", id.get()); } catch (java.lang.Exception e) { if (!(isCausedByRepositoryNotFoundException(e))) { throw e; } com.google.gerrit.server.index.change.ChangeIndexer.log.debug(""Change {} belong to a deleted project, aborting reindexing the change."", id.get()); } return false; }",ac19169490d5227ba6cff8bcd6e49293d5ee3458,"@java.lang.Override public java.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws java.lang.Exception { try { if (stalenessChecker.isStale(id)) { index(newChangeData(db.get(), project, id)); return true; } } catch (com.google.gerrit.server.project.NoSuchChangeException nsce) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug(""Change {} was deleted, aborting reindexing the change."", id.get()); } catch (java.lang.Exception e) { if (!(isCausedByRepositoryNotFoundException(e))) { throw e; } com.google.gerrit.server.index.change.ChangeIndexer.log.debug(""Change {} belongs to deleted project {}, aborting reindexing the change."", id.get(), project.get()); } return false; }",95760ef23557e9bf4ee6c9b377972edbe3c91be8,2018-02-07 05:12:46,2
142970,src_main_java_com_googlesource_gerrit_plugins_rabbitmq_message_MessagePublisher.java,"@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { try { if (!(publisherThread.isAlive())) { publisherThread.start(); } queue.put(event); } catch (java.lang.InterruptedException e) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.warn(""Failed to queue event"", e); } }",51033490df97f4f66ef636d3940150991943d902,"@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(publisherThread.isAlive())) { publisherThread.start(); } if (!(queue.offer(event))) { if (!(fullQueue)) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.error(""Cannot receive events, Queue is full.""); fullQueue = true; } } else if (fullQueue) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.warn(""Queue is processable again""); fullQueue = false; } }",a856ff5f8426a26fd0354dfa1bb2d91a3c83daf6,"@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(publisherThread.isAlive())) { publisherThread.start(); } if (queue.offer(event)) { if ((lostEventCount) > 0) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.warn(""Event queue is no longer full, {} events were lost"", lostEventCount); lostEventCount = 0; } } else { if ((((lostEventCount)++) % 10) == 0) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.error(""Event queue is full, lost {} event(s)"", lostEventCount); } } }",7045b900876e2cecbb94ec52e9ae909f3566e4e4,2018-02-07 07:16:30,11
157690,src_main_java_com_googlesource_gerrit_plugins_reviewers_Reviewers.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.util.Set<com.google.gerrit.server.change.SuggestedReviewer> suggestReviewers(com.google.gerrit.reviewdb.client.Project.NameKey projectName, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Change.Id changeId, @com.google.gerrit.common.Nullable java.lang.String query, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> candidates) { java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> sections = getSections(projectName); if (!(sections.isEmpty())) { try (com.google.gerrit.reviewdb.server.ReviewDb reviewDb = schemaFactory.open()) { com.google.gerrit.server.query.change.ChangeData changeData = changeDataFactory.create(reviewDb, projectName, changeId); java.util.Set<java.lang.String> reviewers = findReviewers(sections, changeData); if (!(reviewers.isEmpty())) { return toAccounts(reviewDb, reviewers, projectName, null).stream().map(( a) -> suggestedReviewer(a)).collect(java.util.stream.Collectors.toSet()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException x) { com.googlesource.gerrit.plugins.reviewers.Reviewers.log.error(x.getMessage(), x); } } return new java.util.HashSet<>(); }",6e44dd78dca6234bac516df7450479e4b83dec23,"@java.lang.Override public java.util.Set<com.google.gerrit.server.change.SuggestedReviewer> suggestReviewers(com.google.gerrit.reviewdb.client.Project.NameKey projectName, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Change.Id changeId, @com.google.gerrit.common.Nullable java.lang.String query, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> candidates) { java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> sections = getSections(projectName); if (sections.isEmpty()) { return com.google.common.collect.ImmutableSet.of(); } try (com.google.gerrit.reviewdb.server.ReviewDb reviewDb = schemaFactory.open()) { com.google.gerrit.server.query.change.ChangeData changeData = changeDataFactory.create(reviewDb, projectName, changeId); java.util.Set<java.lang.String> reviewers = findReviewers(sections, changeData); if (!(reviewers.isEmpty())) { return toAccounts(reviewDb, reviewers, projectName).stream().map(( a) -> suggestedReviewer(a)).collect(java.util.stream.Collectors.toSet()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException x) { com.googlesource.gerrit.plugins.reviewers.Reviewers.log.error(x.getMessage(), x); } return com.google.common.collect.ImmutableSet.of(); }",36caa0fad083394352f165637525321c624b6616,2018-02-07 08:24:22,4
157750,java_com_google_gerrit_server_restapi_group_ListMembers.java,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (recursive) { return getTransitiveMembers(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); }",bbad8d4b12c7b996f26732594e03202c36325b72,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(() -> new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""not a Gerrit internal group"")); if (recursive) { return getTransitiveMembers(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); }",4ba66a004e10d309aee3ad6755ced0d949c27353,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.server.restapi.group.NotInternalGroupException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(NotInternalGroupException::new); if (recursive) { return getTransitiveMembers(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); }",6fb9d24fd9883edab6f8a99cb308f9fa0cd5d8e5,2018-02-07 09:18:26,2
156830,java_com_google_gerrit_server_IdentifiedUser.java,"@java.lang.Override @com.google.gerrit.common.Nullable public synchronized <T> T get(com.google.gerrit.server.PropertyKey<T> key) { if ((properties) != null) { @java.lang.SuppressWarnings(""unchecked"") T value = ((T) (properties.get(key))); return value; } return null; }",531b9fb07b1aa05a5e65f9a2ce7001613728ad02,"@java.lang.Override @com.google.gerrit.common.Nullable public synchronized <T> java.util.Optional<T> get(com.google.gerrit.server.PropertyKey<T> key) { if ((properties) != null) { @java.lang.SuppressWarnings(""unchecked"") T value = ((T) (properties.get(key))); return java.util.Optional.ofNullable(value); } return java.util.Optional.empty(); }",afaafb2bf12309443afaa5c70316973f4cfc3075,"@java.lang.Override public synchronized <T> java.util.Optional<T> get(com.google.gerrit.server.PropertyKey<T> key) { if ((properties) != null) { @java.lang.SuppressWarnings(""unchecked"") T value = ((T) (properties.get(key))); return java.util.Optional.ofNullable(value); } return java.util.Optional.empty(); }",0e64fc8a78b4352db2eebdb0088588ade97a097a,2018-02-07 15:36:21,3
150070,owners-common_src_main_java_com_vmware_gerrit_owners_common_AccountsImpl.java,"private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupNameOrUUID) { com.google.gerrit.reviewdb.client.AccountGroup group = java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupNameOrUUID))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupNameOrUUID))); if (group == null) { com.vmware.gerrit.owners.common.AccountsImpl.log.warn(""Group {} was not found"", groupNameOrUUID); } try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.openAs(adminUser.getAccountId())) { return groupMembers.create(adminUser).listAccounts(group.getGroupUUID(), null).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gerrit.server.project.NoSuchProjectException | com.google.gwtorm.server.OrmException | java.io.IOException e) { com.vmware.gerrit.owners.common.AccountsImpl.log.error((""Unable to list accounts in group "" + group), e); return java.util.Collections.emptySet(); } }",613bed854215fa0024b0745e91a754166ff8a7cb,"private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupNameOrUUID) { java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupNameOrUUID))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupNameOrUUID))); if (!(group.isPresent())) { com.vmware.gerrit.owners.common.AccountsImpl.log.warn(""Group {} was not found"", groupNameOrUUID); return java.util.Collections.emptySet(); } try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.openAs(adminUser.getAccountId())) { return groupMembers.create(adminUser).listAccounts(group.get().getGroupUUID(), null).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gerrit.server.project.NoSuchProjectException | com.google.gwtorm.server.OrmException | java.io.IOException e) { com.vmware.gerrit.owners.common.AccountsImpl.log.error((""Unable to list accounts in group "" + group), e); return java.util.Collections.emptySet(); } }",cd8245597e497c11ef9497f03acfbda695c8b097,"private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupNameOrUUID) { java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupNameOrUUID)).map(java.util.Optional::of).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupNameOrUUID))); if (!(group.isPresent())) { com.vmware.gerrit.owners.common.AccountsImpl.log.warn(""Group {} was not found"", groupNameOrUUID); return java.util.Collections.emptySet(); } try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.openAs(adminUser.getAccountId())) { return groupMembers.create(adminUser).listAccounts(group.get().getGroupUUID(), null).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gerrit.server.project.NoSuchProjectException | com.google.gwtorm.server.OrmException | java.io.IOException e) { com.vmware.gerrit.owners.common.AccountsImpl.log.error((""Unable to list accounts in group "" + group), e); return java.util.Collections.emptySet(); } }",9e6a6fb553684395cb64ee76a450e8a6f42cebc5,2018-02-08 13:42:35,2
158131,java_com_googlesource_gerrit_plugins_supermanifest_SuperManifestRefUpdatedListener.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource resource, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); update(resource.getProjectState().getProject().getName(), resource.getRef(), false); return com.google.gerrit.extensions.restapi.Response.none(); }",924915d60104b9800b8395dbdd1c9f6e1d2c4ab9,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource resource, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.log.info(""manual trigger for %s:%s by %d. Config: %s"", resource.getBranchKey().getParentKey().get(), resource.getBranchKey().get(), identifiedUser.get().getAccountId().get(), configurationToString()); update(resource.getProjectState().getProject().getName(), resource.getRef(), false); return com.google.gerrit.extensions.restapi.Response.none(); }",e9fe8e4d4a5d05ba011a64354c099abf6d927e73,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource resource, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); info(""manual trigger for %s:%s by %d. Config: %s"", resource.getBranchKey().getParentKey().get(), resource.getBranchKey().get(), identifiedUser.get().getAccountId().get(), configurationToString()); update(resource.getProjectState().getProject().getName(), resource.getRef(), false); return com.google.gerrit.extensions.restapi.Response.none(); }",7adf23d99a354e5b3cead3163d370c26e7f52b15,2018-02-08 13:46:12,3
150050,owners-common_src_main_java_com_vmware_gerrit_owners_common_AccountsImpl.java,"private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupNameOrUUID) { com.google.gerrit.reviewdb.client.AccountGroup group = java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupNameOrUUID))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupNameOrUUID))); if (group == null) { com.vmware.gerrit.owners.common.AccountsImpl.log.warn(""Group {} was not found"", groupNameOrUUID); } try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.openAs(adminUser.getAccountId())) { return groupMembers.create(adminUser).listAccounts(group.getGroupUUID(), null).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gerrit.server.project.NoSuchProjectException | com.google.gwtorm.server.OrmException | java.io.IOException e) { com.vmware.gerrit.owners.common.AccountsImpl.log.error((""Unable to list accounts in group "" + group), e); return java.util.Collections.emptySet(); } }",613bed854215fa0024b0745e91a754166ff8a7cb,"private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupNameOrUUID) { java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupNameOrUUID))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupNameOrUUID))); if (!(group.isPresent())) { com.vmware.gerrit.owners.common.AccountsImpl.log.warn(""Group {} was not found"", groupNameOrUUID); return java.util.Collections.emptySet(); } try { return groupMembers.listAccounts(group.get().getGroupUUID(), null).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.vmware.gerrit.owners.common.AccountsImpl.log.error((""Unable to list accounts in group "" + group), e); return java.util.Collections.emptySet(); } }",2c806e5d89f08d79a71dfb7d2ecb25910c4412ec,"private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupNameOrUUID) { java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupNameOrUUID)).map(java.util.Optional::of).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupNameOrUUID))); if (!(group.isPresent())) { com.vmware.gerrit.owners.common.AccountsImpl.log.warn(""Group {} was not found"", groupNameOrUUID); return java.util.Collections.emptySet(); } try { return groupMembers.listAccounts(group.get().getGroupUUID(), null).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.vmware.gerrit.owners.common.AccountsImpl.log.error((""Unable to list accounts in group "" + group), e); return java.util.Collections.emptySet(); } }",52da53d63778aec5fc761eb77c36f1028749f7a0,2018-02-08 16:34:22,3
158830,java_com_google_gitiles_LogSoyData.java,"private java.util.Map<java.lang.String, java.lang.Object> toFooterSoyData(com.google.gitiles.Paginator paginator, @javax.annotation.Nullable java.lang.String revision) { java.util.Map<java.lang.String, java.lang.Object> data = com.google.common.collect.Maps.newHashMapWithExpectedSize(1); org.eclipse.jgit.lib.ObjectId next = paginator.getNextStart(); if (next != null) { data.put(""nextUrl"", copyAndCanonicalizeView(revision).replaceParam(LogServlet.START_PARAM, next.name()).toUrl()); } return data; }",a112d4a3a69bb69aa6c1b2615a9bc52d5c7da2eb,"private java.util.Map<java.lang.String, java.lang.Object> toFooterSoyData(com.google.gitiles.Paginator paginator, @javax.annotation.Nullable java.lang.String revision, com.google.gitiles.LogSoyData.FooterBehavior behavior) { switch (behavior) { case NEXT : org.eclipse.jgit.lib.ObjectId next = paginator.getNextStart(); if (next == null) { return com.google.common.collect.ImmutableMap.of(); } return com.google.common.collect.ImmutableMap.of(""nextUrl"", copyAndCanonicalizeView(revision).replaceParam(LogServlet.START_PARAM, next.name()).toUrl(), ""nextText"", ""Next""); case LOG_HEAD : return com.google.common.collect.ImmutableMap.of(""nextUrl"", com.google.gitiles.GitilesView.log().copyFrom(view).toUrl(), ""nextText"", ""Log""); default : throw new java.lang.IllegalStateException((""unknown footer behavior: "" + behavior)); } }",a88a931991e8f369897263402affba9e576e7ea0,"private java.util.Map<java.lang.String, java.lang.Object> toFooterSoyData(com.google.gitiles.Paginator paginator, @javax.annotation.Nullable java.lang.String revision, com.google.gitiles.LogSoyData.FooterBehavior behavior) { switch (behavior) { case NEXT : org.eclipse.jgit.lib.ObjectId next = paginator.getNextStart(); if (next == null) { return com.google.common.collect.ImmutableMap.of(); } return com.google.common.collect.ImmutableMap.of(""nextUrl"", copyAndCanonicalizeView(revision).replaceParam(LogServlet.START_PARAM, next.name()).toUrl(), ""nextText"", ""Next""); case LOG_HEAD : return com.google.common.collect.ImmutableMap.of(""nextUrl"", com.google.gitiles.GitilesView.log().copyFrom(view).toUrl(), ""nextText"", ""More""); default : throw new java.lang.IllegalStateException((""unknown footer behavior: "" + behavior)); } }",8be1c65573acd55a6d8333a0bd3bfc9a93e07c1d,2018-02-10 00:13:27,3
158531,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsSshAuth.java,"@java.lang.Override public java.lang.String authenticate(com.google.gerrit.server.CurrentUser user, java.util.List<java.lang.String> args) throws com.google.gerrit.sshd.BaseCommand.Failure, com.google.gerrit.sshd.BaseCommand.UnloggedFailure { try { java.net.URL url = new java.net.URL(canonicalWebUrl); java.lang.String path = url.getPath(); java.lang.String project = args.get(0); java.lang.String operation = args.get(1); java.lang.StringBuilder href = new java.lang.StringBuilder(url.getProtocol()).append(""://"").append(url.getAuthority()).append(path).append((path.endsWith(""/"") ? """" : ""/"")).append(project).append(""/info/lfs""); com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo info = auth.generateAuthInfo(user, project, operation); com.googlesource.gerrit.plugins.lfs.ExpiringAction action = new com.googlesource.gerrit.plugins.lfs.ExpiringAction(href.toString(), info); return gson.toJson(action); } catch (java.net.MalformedURLException e) { throw new com.google.gerrit.sshd.BaseCommand.Failure(1, (((""Server configuration error: "" + ""forming Git LFS endpoint URL from canonicalWebUrl ["") + (canonicalWebUrl)) + ""] failed."")); } }",0aea08811960e1e2d0ebbd44697df5611167be46,"@java.lang.Override public java.lang.String authenticate(com.google.gerrit.server.CurrentUser user, java.util.List<java.lang.String> args) throws com.google.gerrit.sshd.BaseCommand.Failure, com.google.gerrit.sshd.BaseCommand.UnloggedFailure { if ((args.size()) != 2) { throw new com.google.gerrit.sshd.BaseCommand.Failure(1, ""Unexpected number of arguments""); } try { java.net.URL url = new java.net.URL(canonicalWebUrl); java.lang.String path = url.getPath(); java.lang.String project = args.get(0); java.lang.String operation = args.get(1); java.lang.StringBuilder href = new java.lang.StringBuilder(url.getProtocol()).append(""://"").append(url.getAuthority()).append(path).append((path.endsWith(""/"") ? """" : ""/"")).append(project).append(""/info/lfs""); com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo info = auth.generateAuthInfo(user, project, operation); com.googlesource.gerrit.plugins.lfs.ExpiringAction action = new com.googlesource.gerrit.plugins.lfs.ExpiringAction(href.toString(), info); return gson.toJson(action); } catch (java.net.MalformedURLException e) { throw new com.google.gerrit.sshd.BaseCommand.Failure(1, (((""Server configuration error: "" + ""forming Git LFS endpoint URL from canonicalWebUrl ["") + (canonicalWebUrl)) + ""] failed."")); } }",6b1a033304b2fb5ed7d1da059e525a9eb980fd4f,"@java.lang.Override public java.lang.String authenticate(com.google.gerrit.server.CurrentUser user, java.util.List<java.lang.String> args) throws com.google.gerrit.sshd.BaseCommand.Failure, com.google.gerrit.sshd.BaseCommand.UnloggedFailure { if ((args.size()) != 2) { throw new com.google.gerrit.sshd.BaseCommand.UnloggedFailure(1, ""Unexpected number of arguments""); } try { java.net.URL url = new java.net.URL(canonicalWebUrl); java.lang.String path = url.getPath(); java.lang.String project = args.get(0); java.lang.String operation = args.get(1); java.lang.StringBuilder href = new java.lang.StringBuilder(url.getProtocol()).append(""://"").append(url.getAuthority()).append(path).append((path.endsWith(""/"") ? """" : ""/"")).append(project).append(""/info/lfs""); com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo info = auth.generateAuthInfo(user, project, operation); com.googlesource.gerrit.plugins.lfs.ExpiringAction action = new com.googlesource.gerrit.plugins.lfs.ExpiringAction(href.toString(), info); return gson.toJson(action); } catch (java.net.MalformedURLException e) { throw new com.google.gerrit.sshd.BaseCommand.Failure(1, (((""Server configuration error: "" + ""forming Git LFS endpoint URL from canonicalWebUrl ["") + (canonicalWebUrl)) + ""] failed."")); } }",94b90dc90080b6a2a3b3737d1510b103249a68bf,2018-02-12 05:02:01,3
158730,src_main_java_com_googlesource_gerrit_plugins_validators_CommitMessageLengthValidation.java,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { final org.eclipse.jgit.revwalk.RevCommit commit = receiveEvent.commit; final org.eclipse.jgit.lib.AbbreviatedObjectId id = commit.abbreviate(7); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = new java.util.ArrayList<>(); if ((this.maxSubjectLength) < (commit.getShortMessage().length())) { onLineTooLong(id, messages, ((""commit subject >"" + (this.maxSubjectLength)) + "" characters; use shorter first paragraph"")); } int longLineCnt = 0; int nonEmptyCnt = 0; for (java.lang.String line : commit.getFullMessage().split(""\n"")) { if (!(line.trim().isEmpty())) { nonEmptyCnt++; } if ((this.maxLineLength) < (line.length())) { longLineCnt++; } } if (longLineCnt > (((longLinesThreshold) * nonEmptyCnt) / 100)) { onLineTooLong(id, messages, ((""too many commit message lines longer than "" + (this.maxLineLength)) + "" characters; manually wrap lines"")); } return messages; }",cdd18f8cb467c872a4409341329804e4ed13a676,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { final org.eclipse.jgit.revwalk.RevCommit commit = receiveEvent.commit; final org.eclipse.jgit.lib.AbbreviatedObjectId id = commit.abbreviate(7); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = new java.util.ArrayList<>(); if ((this.maxSubjectLength) < (commit.getShortMessage().length())) { onLineTooLong(id, messages, ((""commit subject >"" + (this.maxSubjectLength)) + "" characters; use shorter first paragraph"")); } int longLineCnt = 0; int nonEmptyCnt = 0; for (java.lang.String line : com.google.gwt.thirdparty.guava.common.base.Splitter.on('\n').split(commit.getFullMessage())) { if (!(line.trim().isEmpty())) { nonEmptyCnt++; } if ((this.maxLineLength) < (line.length())) { longLineCnt++; } } if (longLineCnt > (((longLinesThreshold) * nonEmptyCnt) / 100)) { onLineTooLong(id, messages, ((""too many commit message lines longer than "" + (this.maxLineLength)) + "" characters; manually wrap lines"")); } return messages; }",176a519a8c98580a3a48de2d25e80ee41fdea655,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { final org.eclipse.jgit.revwalk.RevCommit commit = receiveEvent.commit; final org.eclipse.jgit.lib.AbbreviatedObjectId id = commit.abbreviate(7); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = new java.util.ArrayList<>(); if ((this.maxSubjectLength) < (commit.getShortMessage().length())) { onLineTooLong(id, messages, ((""commit subject >"" + (this.maxSubjectLength)) + "" characters; use shorter first paragraph"")); } int longLineCnt = 0; int nonEmptyCnt = 0; for (java.lang.String line : com.google.common.base.Splitter.on('\n').split(commit.getFullMessage())) { if (!(line.trim().isEmpty())) { nonEmptyCnt++; } if ((this.maxLineLength) < (line.length())) { longLineCnt++; } } if (longLineCnt > (((longLinesThreshold) * nonEmptyCnt) / 100)) { onLineTooLong(id, messages, ((""too many commit message lines longer than "" + (this.maxLineLength)) + "" characters; manually wrap lines"")); } return messages; }",14ee08469f0a81d8c7ff8a17eca7049f92f065f4,2018-02-12 11:51:53,2
158710,java_com_google_gerrit_server_args4j_ChangeIdHandler.java,"@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { final java.lang.String token = params.getParameter(0); final java.lang.String[] tokens = token.split("",""); if ((tokens.length) != 3) { throw new org.kohsuke.args4j.CmdLineException(owner, ""change should be specified as <project>,<branch>,<change-id>""); } try { final com.google.gerrit.reviewdb.client.Change.Key key = Change.Key.parse(tokens[2]); final com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey(tokens[0]); final com.google.gerrit.reviewdb.client.Branch.NameKey branch = new com.google.gerrit.reviewdb.client.Branch.NameKey(project, tokens[1]); for (com.google.gerrit.server.query.change.ChangeData cd : queryProvider.get().byBranchKey(branch, key)) { setter.addValue(cd.getId()); return 1; } } catch (java.lang.IllegalArgumentException e) { throw new org.kohsuke.args4j.CmdLineException(owner, ""Change-Id is not valid""); } catch (com.google.gwtorm.server.OrmException e) { throw new org.kohsuke.args4j.CmdLineException(owner, (""Database error: "" + (e.getMessage()))); } throw new org.kohsuke.args4j.CmdLineException(owner, ((""\"""" + token) + ""\"": change not found"")); }",297e462da9dadb23e16ed6da775f91612eee439a,"@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { final java.lang.String token = params.getParameter(0); final java.util.List<java.lang.String> tokens = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(',').split(token)); if ((tokens.size()) != 3) { throw new org.kohsuke.args4j.CmdLineException(owner, ""change should be specified as <project>,<branch>,<change-id>""); } try { final com.google.gerrit.reviewdb.client.Change.Key key = Change.Key.parse(tokens.get(2)); final com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey(tokens.get(0)); final com.google.gerrit.reviewdb.client.Branch.NameKey branch = new com.google.gerrit.reviewdb.client.Branch.NameKey(project, tokens.get(1)); for (com.google.gerrit.server.query.change.ChangeData cd : queryProvider.get().byBranchKey(branch, key)) { setter.addValue(cd.getId()); return 1; } } catch (java.lang.IllegalArgumentException e) { throw new org.kohsuke.args4j.CmdLineException(owner, ""Change-Id is not valid""); } catch (com.google.gwtorm.server.OrmException e) { throw new org.kohsuke.args4j.CmdLineException(owner, (""Database error: "" + (e.getMessage()))); } throw new org.kohsuke.args4j.CmdLineException(owner, ((""\"""" + token) + ""\"": change not found"")); }",81011540b1b3acb9efabab7c2b8c0c69124b1d33,"@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { final java.lang.String token = params.getParameter(0); final java.util.List<java.lang.String> tokens = com.google.common.base.Splitter.on(',').splitToList(token); if ((tokens.size()) != 3) { throw new org.kohsuke.args4j.CmdLineException(owner, ""change should be specified as <project>,<branch>,<change-id>""); } try { final com.google.gerrit.reviewdb.client.Change.Key key = Change.Key.parse(tokens.get(2)); final com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey(tokens.get(0)); final com.google.gerrit.reviewdb.client.Branch.NameKey branch = new com.google.gerrit.reviewdb.client.Branch.NameKey(project, tokens.get(1)); for (com.google.gerrit.server.query.change.ChangeData cd : queryProvider.get().byBranchKey(branch, key)) { setter.addValue(cd.getId()); return 1; } } catch (java.lang.IllegalArgumentException e) { throw new org.kohsuke.args4j.CmdLineException(owner, ""Change-Id is not valid""); } catch (com.google.gwtorm.server.OrmException e) { throw new org.kohsuke.args4j.CmdLineException(owner, (""Database error: "" + (e.getMessage()))); } throw new org.kohsuke.args4j.CmdLineException(owner, ((""\"""" + token) + ""\"": change not found"")); }",c8855e0c47566a8c9e0eeffe79212a2930cb460e,2018-02-12 16:02:31,3
158710,java_com_google_gerrit_httpd_gitweb_GitwebServlet.java,"private static java.util.Map<java.lang.String, java.lang.String> getParameters(javax.servlet.http.HttpServletRequest req) { final java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<>(); for (java.lang.String pair : req.getQueryString().split(""[&;]"")) { final int eq = pair.indexOf('='); if (0 < eq) { java.lang.String name = pair.substring(0, eq); java.lang.String value = pair.substring((eq + 1)); name = com.google.gerrit.extensions.restapi.Url.decode(name); value = com.google.gerrit.extensions.restapi.Url.decode(value); params.put(name, value); } } return params; }",759b66ad9148422523c8ceddefccb677f311725b,"private static java.util.Map<java.lang.String, java.lang.String> getParameters(javax.servlet.http.HttpServletRequest req) { final java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<>(); for (java.lang.String pair : com.google.common.base.Splitter.on(com.google.gerrit.httpd.gitweb.GitwebServlet.QUERY_SPLIT_PATTERN).split(req.getQueryString())) { final int eq = pair.indexOf('='); if (0 < eq) { java.lang.String name = pair.substring(0, eq); java.lang.String value = pair.substring((eq + 1)); name = com.google.gerrit.extensions.restapi.Url.decode(name); value = com.google.gerrit.extensions.restapi.Url.decode(value); params.put(name, value); } } return params; }",e8e9981d603296edffa14b2e466fd7c9b1fd7751,"private static java.util.Map<java.lang.String, java.lang.String> getParameters(javax.servlet.http.HttpServletRequest req) { final java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<>(); for (java.lang.String pair : com.google.common.base.Splitter.on(com.google.common.base.CharMatcher.anyOf(""&;"")).split(req.getQueryString())) { final int eq = pair.indexOf('='); if (0 < eq) { java.lang.String name = pair.substring(0, eq); java.lang.String value = pair.substring((eq + 1)); name = com.google.gerrit.extensions.restapi.Url.decode(name); value = com.google.gerrit.extensions.restapi.Url.decode(value); params.put(name, value); } } return params; }",9d70b1c61cb01c0025254d1631b6ad5485ebbb2f,2018-02-12 16:02:31,3
158710,java_com_google_gerrit_pgm_Passwd.java,"private void init() { java.lang.String[] varParts = sectionAndKey.split(""\\.""); if ((varParts.length) != 2) { throw new java.lang.IllegalArgumentException(((""Invalid name '"" + (sectionAndKey)) + ""': expected section.key format"")); } section = varParts[0]; key = varParts[1]; }",fa90894a1ad644d60fd0a4b74bf24f57d33e8d24,"private void init() { java.util.List<java.lang.String> varParts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on('.').split(sectionAndKey)); if ((varParts.size()) != 2) { throw new java.lang.IllegalArgumentException(((""Invalid name '"" + (sectionAndKey)) + ""': expected section.key format"")); } section = varParts.get(0); key = varParts.get(1); }",eeea8852c484e9f2c586809305de9c30bc560d63,"private void init() { java.util.List<java.lang.String> varParts = com.google.common.base.Splitter.on('.').splitToList(sectionAndKey); if ((varParts.size()) != 2) { throw new java.lang.IllegalArgumentException(((""Invalid name '"" + (sectionAndKey)) + ""': expected section.key format"")); } section = varParts.get(0); key = varParts.get(1); }",38721d9e7b0ab9265eaeb5cbf217d94f80a43e95,2018-02-12 16:02:31,3
158710,java_com_google_gerrit_server_account_AccountSshKey.java,"private java.lang.String getPublicKeyPart(int index, java.lang.String defaultValue) { java.lang.String s = getSshPublicKey(); if ((s != null) && ((s.length()) > 0)) { java.lang.String[] parts = s.split("" ""); if ((parts.length) > index) { return parts[index]; } } return defaultValue; }",d4b73c557b81a8eb07412b91b0060b15827c9a96,"private java.lang.String getPublicKeyPart(int index, java.lang.String defaultValue) { java.lang.String s = getSshPublicKey(); if ((s != null) && ((s.length()) > 0)) { java.util.List<java.lang.String> parts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(' ').split(s)); if ((parts.size()) > index) { return parts.get(index); } } return defaultValue; }",3a8b347e77e4709e4b3d1f06fdedda1f994c93b4,"private java.lang.String getPublicKeyPart(int index, java.lang.String defaultValue) { java.lang.String s = getSshPublicKey(); if ((s != null) && ((s.length()) > 0)) { java.util.List<java.lang.String> parts = com.google.common.base.Splitter.on(' ').splitToList(s); if ((parts.size()) > index) { return parts.get(index); } } return defaultValue; }",fce37ecf3fb5beeb1aa8710c0fa0a9c0f015e848,2018-02-12 16:02:31,3
158710,java_com_google_gerrit_server_mail_receive_ParserUtil.java,"public static java.lang.String trimQuotation(java.lang.String comment) { java.util.StringJoiner j = new java.util.StringJoiner(""\n""); java.lang.String[] lines = comment.split(""\n""); for (int i = 0; i < ((lines.length) - 2); i++) { j.add(lines[i]); } java.lang.String lastLine = lines[((lines.length) - 1)]; if (com.google.gerrit.server.mail.receive.ParserUtil.containsQuotationPattern(lastLine)) { if ((lines.length) > 1) { j.add(lines[((lines.length) - 2)]); } return j.toString().trim(); } if ((lines.length) > 1) { java.lang.String lastLines = (lines[((lines.length) - 2)]) + lastLine; if (com.google.gerrit.server.mail.receive.ParserUtil.containsQuotationPattern(lastLines)) { return j.toString().trim(); } } if ((lines.length) > 1) { j.add(lines[((lines.length) - 2)]); } j.add(lines[((lines.length) - 1)]); return j.toString().trim(); }",842d0adbc735742387674b12d2a8a342996529ed,"public static java.lang.String trimQuotation(java.lang.String comment) { java.util.StringJoiner j = new java.util.StringJoiner(""\n""); java.util.List<java.lang.String> lines = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on('\n').split(comment)); for (int i = 0; i < ((lines.size()) - 2); i++) { j.add(lines.get(i)); } java.lang.String lastLine = lines.get(((lines.size()) - 1)); if (com.google.gerrit.server.mail.receive.ParserUtil.containsQuotationPattern(lastLine)) { if ((lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2))); } return j.toString().trim(); } if ((lines.size()) > 1) { java.lang.String lastLines = (lines.get(((lines.size()) - 2))) + lastLine; if (com.google.gerrit.server.mail.receive.ParserUtil.containsQuotationPattern(lastLines)) { return j.toString().trim(); } } if ((lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2))); } j.add(lines.get(((lines.size()) - 1))); return j.toString().trim(); }",e445b9e19b65fc1094d594260b340454723a2dd6,"public static java.lang.String trimQuotation(java.lang.String comment) { java.util.StringJoiner j = new java.util.StringJoiner(""\n""); java.util.List<java.lang.String> lines = com.google.common.base.Splitter.on('\n').splitToList(comment); for (int i = 0; i < ((lines.size()) - 2); i++) { j.add(lines.get(i)); } java.lang.String lastLine = lines.get(((lines.size()) - 1)); if (com.google.gerrit.server.mail.receive.ParserUtil.containsQuotationPattern(lastLine)) { if ((lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2))); } return j.toString().trim(); } if ((lines.size()) > 1) { java.lang.String lastLines = (lines.get(((lines.size()) - 2))) + lastLine; if (com.google.gerrit.server.mail.receive.ParserUtil.containsQuotationPattern(lastLines)) { return j.toString().trim(); } } if ((lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2))); } j.add(lines.get(((lines.size()) - 1))); return j.toString().trim(); }",052b01026ef17084db4d95e7a1af9ab6eb2d96ea,2018-02-12 16:02:31,3
158710,java_com_google_gerrit_httpd_gitweb_GitwebServlet.java,"private void readCgiHeaders(javax.servlet.http.HttpServletResponse res, java.io.InputStream in) throws java.io.IOException { java.lang.String line; while (!((line = readLine(in)).isEmpty())) { if (line.startsWith(""HTTP"")) { throw new java.io.IOException((""NPH CGI not supported: "" + line)); } final int sep = line.indexOf(':'); if (sep < 0) { throw new java.io.IOException((""CGI returned invalid header: "" + line)); } final java.lang.String key = line.substring(0, sep).trim(); final java.lang.String value = line.substring((sep + 1)).trim(); if (""Location"".equalsIgnoreCase(key)) { res.sendRedirect(value); } else if (""Status"".equalsIgnoreCase(key)) { final java.lang.String[] token = value.split("" ""); final int status = java.lang.Integer.parseInt(token[0]); res.setStatus(status); } else { res.addHeader(key, value); } } }",e4d8bd3c2eada2971fc722c6dd8a255a3dfcefea,"private void readCgiHeaders(javax.servlet.http.HttpServletResponse res, java.io.InputStream in) throws java.io.IOException { java.lang.String line; while (!((line = readLine(in)).isEmpty())) { if (line.startsWith(""HTTP"")) { throw new java.io.IOException((""NPH CGI not supported: "" + line)); } final int sep = line.indexOf(':'); if (sep < 0) { throw new java.io.IOException((""CGI returned invalid header: "" + line)); } final java.lang.String key = line.substring(0, sep).trim(); final java.lang.String value = line.substring((sep + 1)).trim(); if (""Location"".equalsIgnoreCase(key)) { res.sendRedirect(value); } else if (""Status"".equalsIgnoreCase(key)) { final java.util.List<java.lang.String> token = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(' ').split(value)); final int status = java.lang.Integer.parseInt(token.get(0)); res.setStatus(status); } else { res.addHeader(key, value); } } }",83f506950cd4372c55a59f43abca73cc7fe7f738,"private void readCgiHeaders(javax.servlet.http.HttpServletResponse res, java.io.InputStream in) throws java.io.IOException { java.lang.String line; while (!((line = readLine(in)).isEmpty())) { if (line.startsWith(""HTTP"")) { throw new java.io.IOException((""NPH CGI not supported: "" + line)); } final int sep = line.indexOf(':'); if (sep < 0) { throw new java.io.IOException((""CGI returned invalid header: "" + line)); } final java.lang.String key = line.substring(0, sep).trim(); final java.lang.String value = line.substring((sep + 1)).trim(); if (""Location"".equalsIgnoreCase(key)) { res.sendRedirect(value); } else if (""Status"".equalsIgnoreCase(key)) { final java.util.List<java.lang.String> token = com.google.common.base.Splitter.on(' ').splitToList(value); final int status = java.lang.Integer.parseInt(token.get(0)); res.setStatus(status); } else { res.addHeader(key, value); } } }",375a364353ade58dbd0b622799ed3dcc9be1dd48,2018-02-12 16:02:31,3
158710,java_com_google_gerrit_sshd_SshModule.java,"private void configureAliases() { com.google.gerrit.sshd.CommandName gerrit = com.google.gerrit.sshd.Commands.named(""gerrit""); for (java.util.Map.Entry<java.lang.String, java.lang.String> e : aliases.entrySet()) { java.lang.String name = e.getKey(); java.lang.String[] dest = e.getValue().split(""[ \\t]+""); com.google.gerrit.sshd.CommandName cmd = com.google.gerrit.sshd.Commands.named(dest[0]); for (int i = 1; i < (dest.length); i++) { cmd = com.google.gerrit.sshd.Commands.named(cmd, dest[i]); } bind(com.google.gerrit.sshd.Commands.key(gerrit, name)).toProvider(new com.google.gerrit.sshd.AliasCommandProvider(cmd)); } }",48b834e0b1bab4d341cbb8c3f1b0d3979b59ce83,"private void configureAliases() { com.google.gerrit.sshd.CommandName gerrit = com.google.gerrit.sshd.Commands.named(""gerrit""); for (java.util.Map.Entry<java.lang.String, java.lang.String> e : aliases.entrySet()) { java.lang.String name = e.getKey(); java.util.List<java.lang.String> dest = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(com.google.gerrit.sshd.SshModule.ALIAS_SPLIT_PATTEN).split(e.getValue())); com.google.gerrit.sshd.CommandName cmd = com.google.gerrit.sshd.Commands.named(dest.get(0)); for (int i = 1; i < (dest.size()); i++) { cmd = com.google.gerrit.sshd.Commands.named(cmd, dest.get(i)); } bind(com.google.gerrit.sshd.Commands.key(gerrit, name)).toProvider(new com.google.gerrit.sshd.AliasCommandProvider(cmd)); } }",48645dcf76001abd9f14bb79633f0c6306af4e65,"private void configureAliases() { com.google.gerrit.sshd.CommandName gerrit = com.google.gerrit.sshd.Commands.named(""gerrit""); for (java.util.Map.Entry<java.lang.String, java.lang.String> e : aliases.entrySet()) { java.lang.String name = e.getKey(); java.util.List<java.lang.String> dest = com.google.common.base.Splitter.on(com.google.common.base.CharMatcher.whitespace()).splitToList(e.getValue()); com.google.gerrit.sshd.CommandName cmd = com.google.gerrit.sshd.Commands.named(dest.get(0)); for (int i = 1; i < (dest.size()); i++) { cmd = com.google.gerrit.sshd.Commands.named(cmd, dest.get(i)); } bind(com.google.gerrit.sshd.Commands.key(gerrit, name)).toProvider(new com.google.gerrit.sshd.AliasCommandProvider(cmd)); } }",fb17e97f2044afd900f59ea4f53bb6818fbd1f1a,2018-02-12 16:02:31,3
158710,java_com_google_gerrit_server_account_HashedPassword.java,"public static com.google.gerrit.server.account.HashedPassword decode(java.lang.String encoded) throws org.apache.commons.codec.DecoderException { if (!(encoded.startsWith(com.google.gerrit.server.account.HashedPassword.ALGORITHM_PREFIX))) { throw new org.apache.commons.codec.DecoderException(""unrecognized algorithm""); } java.lang.String[] fields = encoded.split("":""); if ((fields.length) != 4) { throw new org.apache.commons.codec.DecoderException(""want 4 fields""); } java.lang.Integer cost = com.google.common.primitives.Ints.tryParse(fields[1]); if (cost == null) { throw new org.apache.commons.codec.DecoderException(""cost parse failed""); } if (!((cost >= 4) && (cost < 32))) { throw new org.apache.commons.codec.DecoderException((""cost should be 4..31 inclusive, got "" + cost)); } byte[] salt = com.google.gerrit.server.account.HashedPassword.codec.decode(fields[2]); if ((salt.length) != 16) { throw new org.apache.commons.codec.DecoderException((""salt should be 16 bytes, got "" + (salt.length))); } return new com.google.gerrit.server.account.HashedPassword(com.google.gerrit.server.account.HashedPassword.codec.decode(fields[3]), salt, cost); }",b42274a094973813f25be18e205a1af31511bf91,"public static com.google.gerrit.server.account.HashedPassword decode(java.lang.String encoded) throws org.apache.commons.codec.DecoderException { if (!(encoded.startsWith(com.google.gerrit.server.account.HashedPassword.ALGORITHM_PREFIX))) { throw new org.apache.commons.codec.DecoderException(""unrecognized algorithm""); } java.util.List<java.lang.String> fields = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').split(encoded)); if ((fields.size()) != 4) { throw new org.apache.commons.codec.DecoderException(""want 4 fields""); } java.lang.Integer cost = com.google.common.primitives.Ints.tryParse(fields.get(1)); if (cost == null) { throw new org.apache.commons.codec.DecoderException(""cost parse failed""); } if (!((cost >= 4) && (cost < 32))) { throw new org.apache.commons.codec.DecoderException((""cost should be 4..31 inclusive, got "" + cost)); } byte[] salt = com.google.gerrit.server.account.HashedPassword.codec.decode(fields.get(2)); if ((salt.length) != 16) { throw new org.apache.commons.codec.DecoderException((""salt should be 16 bytes, got "" + (salt.length))); } return new com.google.gerrit.server.account.HashedPassword(com.google.gerrit.server.account.HashedPassword.codec.decode(fields.get(3)), salt, cost); }",e5e3dceb5510a9905c1d9c3943963435092e56de,"public static com.google.gerrit.server.account.HashedPassword decode(java.lang.String encoded) throws org.apache.commons.codec.DecoderException { if (!(encoded.startsWith(com.google.gerrit.server.account.HashedPassword.ALGORITHM_PREFIX))) { throw new org.apache.commons.codec.DecoderException(""unrecognized algorithm""); } java.util.List<java.lang.String> fields = com.google.common.base.Splitter.on(':').splitToList(encoded); if ((fields.size()) != 4) { throw new org.apache.commons.codec.DecoderException(""want 4 fields""); } java.lang.Integer cost = com.google.common.primitives.Ints.tryParse(fields.get(1)); if (cost == null) { throw new org.apache.commons.codec.DecoderException(""cost parse failed""); } if (!((cost >= 4) && (cost < 32))) { throw new org.apache.commons.codec.DecoderException((""cost should be 4..31 inclusive, got "" + cost)); } byte[] salt = com.google.gerrit.server.account.HashedPassword.codec.decode(fields.get(2)); if ((salt.length) != 16) { throw new org.apache.commons.codec.DecoderException((""salt should be 16 bytes, got "" + (salt.length))); } return new com.google.gerrit.server.account.HashedPassword(com.google.gerrit.server.account.HashedPassword.codec.decode(fields.get(3)), salt, cost); }",15cbe313e9372644af1a033c10f9d87260987c54,2018-02-12 16:02:31,3
158491,java_com_google_gerrit_server_index_account_AccountIndexerImpl.java,"@java.lang.SuppressWarnings(""deprecation"") public com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id) { java.util.concurrent.Callable<java.lang.Boolean> task = () -> { if (stalenessChecker.isStale(id)) { index(id); return true; } return false; }; return com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.Futures.nonCancellationPropagating(batchExecutor.submit(task)), IndexUtils.MAPPER); }",1302a4b8ee8b0449638df75ad5fde70323eba784,"@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id) throws java.io.IOException { try { return reindexIfStaleAsync(id).get(); } catch (java.util.concurrent.ExecutionException | java.lang.InterruptedException e) { com.google.gerrit.server.index.account.AccountIndexerImpl.log.warn(""reindex of possibly stale account {} failed"", id.get()); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), java.io.IOException.class); throw new java.io.IOException(e); } }",a01b5d9c42e1a5440cdce4ed5cf702c5177b6f04,@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id) throws java.io.IOException { if (stalenessChecker.isStale(id)) { index(id); return true; } return false; },a9a166918e12100c1efe801b0b0237307127369c,2018-02-13 12:11:12,7
158491,java_com_google_gerrit_server_index_group_GroupIndexerImpl.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.SuppressWarnings(""deprecation"") private com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { java.util.concurrent.Callable<java.lang.Boolean> task = () -> { if (stalenessChecker.isStale(uuid)) { index(uuid); return true; } return false; }; return com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.Futures.nonCancellationPropagating(batchExecutor.submit(task)), IndexUtils.MAPPER); }",1b29b2e4d47c8d5527c66cf700147bdaa0418e25,"@java.lang.SuppressWarnings(""deprecation"") private com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.Futures.nonCancellationPropagating(batchExecutor.submit(() -> reindexIfStale(uuid))), IndexUtils.MAPPER); }",201495ab8c28b5449fc0455209d14ca8a520b2d9,2018-02-13 12:11:12,7
158491,java_com_google_gerrit_server_index_group_GroupIndexerImpl.java,"@java.lang.SuppressWarnings(""deprecation"") public com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStale(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { java.util.concurrent.Callable<java.lang.Boolean> task = () -> { if (stalenessChecker.isStale(uuid)) { index(uuid); return true; } return false; }; return com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.Futures.nonCancellationPropagating(batchExecutor.submit(task)), IndexUtils.MAPPER); }",6c83af5664f103ee03f2632f57803078cbd2fa12,"@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) throws java.io.IOException { try { return reindexIfStaleAsync(uuid).get(); } catch (java.util.concurrent.ExecutionException | java.lang.InterruptedException e) { com.google.gerrit.server.index.group.GroupIndexerImpl.log.warn(""reindex of possibly stale group {} failed"", uuid.get()); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), java.io.IOException.class); throw new java.io.IOException(e); } }",0a38c8605147b26dfc15f9fadd81094d7b8d6d76,@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) throws java.io.IOException { if (stalenessChecker.isStale(uuid)) { index(uuid); return true; } return false; },8b493749451bf33967ed7f24aa511b5e14cdb424,2018-02-13 12:11:12,7
158491,java_com_google_gerrit_server_index_account_AccountIndexerImpl.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.SuppressWarnings(""deprecation"") public com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.Account.Id id) { java.util.concurrent.Callable<java.lang.Boolean> task = () -> { if (stalenessChecker.isStale(id)) { index(id); return true; } return false; }; return com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.Futures.nonCancellationPropagating(batchExecutor.submit(task)), IndexUtils.MAPPER); }",81d1ed594b56cf6436e858bbb1db7c76eb0fb078,"@java.lang.SuppressWarnings(""deprecation"") private com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.Account.Id id) { return com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.Futures.nonCancellationPropagating(batchExecutor.submit(() -> reindexIfStale(id))), IndexUtils.MAPPER); }",516ac64a54a029b5d24a408d8929fd57bcf6d78e,2018-02-13 12:11:12,7
158791,gerrit-pgm_src_main_java_com_google_gerrit_pgm_MigrateToNoteDb.java,private com.google.inject.Injector createSysInjector() { return dbInjector.createChildInjector(new com.google.gerrit.extensions.config.FactoryModule() { @java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchProgramModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(GitReferenceUpdated.DISABLED); install(getIndexModule()); factory(ChangeResource.Factory.class); } }); },743bfbd3672c6f238569fe8f7d89adba390a37fb,private com.google.inject.Injector createSysInjector(int actualThreads) { return dbInjector.createChildInjector(new com.google.gerrit.extensions.config.FactoryModule() { @java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchProgramModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(GitReferenceUpdated.DISABLED); install(getIndexModule(actualThreads)); factory(ChangeResource.Factory.class); } }); },0ea732934c07e6599949333d34fad113cfc77169,private com.google.inject.Injector createSysInjector() { return dbInjector.createChildInjector(new com.google.gerrit.extensions.config.FactoryModule() { @java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchProgramModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(GitReferenceUpdated.DISABLED); install(getIndexModule()); factory(ChangeResource.Factory.class); } }); },743bfbd3672c6f238569fe8f7d89adba390a37fb,2018-02-13 12:46:33,3
158791,gerrit-pgm_src_main_java_com_google_gerrit_pgm_MigrateToNoteDb.java,@java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchProgramModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(GitReferenceUpdated.DISABLED); install(getIndexModule()); factory(ChangeResource.Factory.class); },7be7b83e3b07cd09fdbe2a30997ab9ec6420bf7c,@java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchProgramModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(GitReferenceUpdated.DISABLED); install(getIndexModule(actualThreads)); factory(ChangeResource.Factory.class); },f0256383c69d206b1922db8f269be63d7d5f591c,@java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchProgramModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(GitReferenceUpdated.DISABLED); install(getIndexModule()); factory(ChangeResource.Factory.class); },7be7b83e3b07cd09fdbe2a30997ab9ec6420bf7c,2018-02-13 12:46:33,3
158791,gerrit-pgm_src_main_java_com_google_gerrit_pgm_MigrateToNoteDb.java,"private java.lang.Module getIndexModule() { switch (com.google.gerrit.server.index.IndexModule.getIndexType(dbInjector)) { case LUCENE : return com.google.gerrit.lucene.LuceneIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), threads); case ELASTICSEARCH : return com.google.gerrit.elasticsearch.ElasticIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), threads); default : throw new java.lang.IllegalStateException(""unsupported index.type""); } }",1ba3f9b949e37a24422bd2a4418708e00bc3e49f,"private java.lang.Module getIndexModule(int actualThreads) { switch (com.google.gerrit.server.index.IndexModule.getIndexType(dbInjector)) { case LUCENE : return com.google.gerrit.lucene.LuceneIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), actualThreads); case ELASTICSEARCH : return com.google.gerrit.elasticsearch.ElasticIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), actualThreads); default : throw new java.lang.IllegalStateException(""unsupported index.type""); } }",bc2138af985501fb21a325f86f48f2f4f9ce3f02,"private java.lang.Module getIndexModule() { switch (com.google.gerrit.server.index.IndexModule.getIndexType(dbInjector)) { case LUCENE : return com.google.gerrit.lucene.LuceneIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), threads); case ELASTICSEARCH : return com.google.gerrit.elasticsearch.ElasticIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), threads); default : throw new java.lang.IllegalStateException(""unsupported index.type""); } }",1ba3f9b949e37a24422bd2a4418708e00bc3e49f,2018-02-13 12:46:33,3
159371,src_main_java_com_googlesource_gerrit_plugins_reviewers_Reviewers.java,"private java.util.Set<com.google.gerrit.reviewdb.client.Account> toAccounts(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p) { return toAccounts(reviewDb, in, p, null); }",dcd41ed4647a14ac185bcf2e8bf96d55661f21eb,"private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> toAccounts(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p) { return toAccounts(reviewDb, in, p, null); }",e11333a77911b129fa393c6a6744fef45b6f6e48,"private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> toAccounts(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber) { return toAccounts(reviewDb, in, p, changeNumber, null); }",acb5f76aeedc07629c91dd140404623321c33117,2018-02-14 10:21:35,3
157734,java_com_google_gerrit_server_git_DefaultAdvertiseRefsHook.java,,,"@java.lang.Override protected java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getAdvertisedRefs(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk revWalk) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { try { return perm.filter(repo.getRefDatabase().getRefs(RefDatabase.ALL), repo, opts); } catch (org.eclipse.jgit.transport.ServiceMayNotContinueException e) { throw e; } catch (java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException e) { org.eclipse.jgit.transport.ServiceMayNotContinueException ex = new org.eclipse.jgit.transport.ServiceMayNotContinueException(); ex.initCause(e); throw ex; } }",e65f20e6ef6ab6ab53bfe8065367f192da2fa1a9,"@java.lang.Override protected java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getAdvertisedRefs(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk revWalk) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { try { return perm.filter(repo.getAllRefs(), repo, opts); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { org.eclipse.jgit.transport.ServiceMayNotContinueException ex = new org.eclipse.jgit.transport.ServiceMayNotContinueException(); ex.initCause(e); throw ex; } }",b4ac1d3437a709f7a6e827330ec23248fc269253,2018-02-14 15:13:16,5
157734,java_com_google_gerrit_server_permissions_PermissionBackend.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions defaults() { return com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.builder().setFilterMeta(false).setFilterTagsSeparately(false).build(); },69d5fb6a8c595eb2dc403d775ac4f7d72d4110f2,public static com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions defaults() { return com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.builder().build(); },83a7431ac442b7a8533afd63110aacd24b3411bc,2018-02-14 15:13:16,5
158410,src_test_java_com_googlesource_gerrit_plugins_uploadvalidator_EmailDomainWhitelistTest.java,,,"@org.junit.Test public void testEmailVaildListed() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailValidListed, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isTrue(); }",9fdceab538d3058de591a6ed9add1b99d672f86d,"@org.junit.Test public void testEmailValidListed() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailValidListed01, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isTrue(); assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailValidListed02, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isTrue(); }",6927d7e5d2b407c232d7f04df4a8f8fd4487299c,2018-02-14 16:23:06,5
158410,src_test_java_com_googlesource_gerrit_plugins_uploadvalidator_EmailDomainWhitelistTest.java,,,"@org.junit.Test public void testEmailInvaildNotListed() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailInvalidNotListed, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isFalse(); }",d2d4129a2d9aacf9540a6d0e5988f2308d01e065,"@org.junit.Test public void testEmailInvalidNotListed() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailInvalidNotListed, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isFalse(); }",624c83292636a8cd37594549d194e4143a4a7969,2018-02-14 16:23:06,5
158410,src_test_java_com_googlesource_gerrit_plugins_uploadvalidator_EmailDomainWhitelistTest.java,,,"@org.junit.Test public void testEmailVaildNotListed() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailValidNotListed, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isFalse(); }",56fbb09d31d3bdea2d8c3bdf130208dc47f2d82f,"@org.junit.Test public void testEmailValidNotListed() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailValidNotListed01, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isFalse(); assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailValidNotListed02, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isFalse(); }",7cb96c0aa1adc635c49418f567c44c3b06be025b,2018-02-14 16:23:06,5
158410,src_test_java_com_googlesource_gerrit_plugins_uploadvalidator_EmailDomainWhitelistTest.java,,,@org.junit.Test public void testGetEmailWhitelist() throws java.lang.Exception { },6cb2b85549267a6eefbfe4b67551aa708b1986ca,"@org.junit.Test public void testEmailNullNotListed() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailNullNotListed, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isFalse(); }",46d80e3c651f1acf7e197af097402b2ed713180b,2018-02-14 16:23:06,5
158410,src_main_java_com_googlesource_gerrit_plugins_uploadvalidator_EmailDomainWhitelistValidator.java,,,@com.google.common.annotations.VisibleForTesting private static java.util.List<java.lang.String> getEmailDomainWhiteList(com.google.gerrit.server.config.PluginConfig cfg) { return java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.KEY_EMAIL_DOMAIN_WHITELIST)); },72d94445dcfc2d91cd994076439e8a6ca2076d24,@com.google.common.annotations.VisibleForTesting static java.lang.String[] getEmailDomainWhiteList(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.KEY_EMAIL_DOMAIN_WHITELIST); },bf709d6f38a3f5b75986001689e13b22677814b8,2018-02-14 16:23:06,5
158410,src_main_java_com_googlesource_gerrit_plugins_uploadvalidator_EmailDomainWhitelistValidator.java,,,static boolean isActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.KEY_EMAIL_DOMAIN_WHITELIST).length) > 0; },f6dac970664c73364da299825563db99cca67003,@com.google.common.annotations.VisibleForTesting static boolean isActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.KEY_EMAIL_DOMAIN_WHITELIST).length) > 0; },81ad6f43ec8c63408f078cee10754de1bc899c86,2018-02-14 16:23:06,5
158410,src_main_java_com_googlesource_gerrit_plugins_uploadvalidator_EmailDomainWhitelistValidator.java,,,"@com.google.common.annotations.VisibleForTesting static boolean performValidation(java.lang.String email, java.util.List<java.lang.String> emailDomainWhitelist) { java.net.URI uri = null; try { uri = new java.net.URI(email); } catch (java.net.URISyntaxException | java.lang.NullPointerException e) { return false; } return emailDomainWhitelist.contains(uri.getHost()); }",1b60180daf99afb4211559fa11df76f19c5beeec,"@com.google.common.annotations.VisibleForTesting static boolean performValidation(java.lang.String email, java.lang.String[] emailDomainWhitelist) { return java.util.Arrays.stream(emailDomainWhitelist).anyMatch(( s) -> java.util.regex.Pattern.matches(s, com.google.common.base.Strings.nullToEmpty(email))); }",1682226c46344c8e714bfbbad95def5807bb9da8,2018-02-14 16:23:06,5
158410,src_test_java_com_googlesource_gerrit_plugins_uploadvalidator_EmailDomainWhitelistTest.java,,,@org.junit.Test public void validatorInactiveWhenConfigEmpty() { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.isActive(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG)).isFalse(); },92a80f025f7fc807ab699d29286a91f2101e273b,@org.junit.Test public void validatorBehaviorWhenConfigEmpty() { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.isActive(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG)).isFalse(); assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.getEmailDomainWhiteList(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG)).isEmpty(); },222c0ed546c6968fde56c600a15657acec4c59cd,2018-02-14 16:23:06,5
158892,gerrit-server_src_main_java_com_google_gerrit_server_index_IndexModule.java,"@com.google.inject.Provides @com.google.inject.Singleton @com.google.gerrit.server.index.IndexExecutor(BATCH) com.google.common.util.concurrent.ListeningExecutorService getBatchIndexExecutor(@com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config, com.google.gerrit.server.git.WorkQueue workQueue) { if ((batchExecutor) != null) { return batchExecutor; } int threads = config.getInt(""index"", null, ""batchThreads"", 0); if (threads <= 0) { threads = java.lang.Runtime.getRuntime().availableProcessors(); } return com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(threads, ""Index-Batch"")); }",dd185cf4a9b1bed5003c69e9647a6c35156b286e,"@com.google.inject.Provides @com.google.inject.Singleton @com.google.gerrit.server.index.IndexExecutor(BATCH) com.google.common.util.concurrent.ListeningExecutorService getBatchIndexExecutor(@com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config, com.google.gerrit.server.git.WorkQueue workQueue) { if ((batchExecutor) != null) { return batchExecutor; } int batchThreads = this.threads; if (batchThreads <= 0) batchThreads = config.getInt(""index"", null, ""batchThreads"", 0); if (batchThreads <= 0) { batchThreads = java.lang.Runtime.getRuntime().availableProcessors(); } return com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(batchThreads, ""Index-Batch"")); }",04418e510645c15f0287a63a6c89a5fcd6d611df,"@com.google.inject.Provides @com.google.inject.Singleton @com.google.gerrit.server.index.IndexExecutor(BATCH) com.google.common.util.concurrent.ListeningExecutorService getBatchIndexExecutor(@com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config, com.google.gerrit.server.git.WorkQueue workQueue) { if ((batchExecutor) != null) { return batchExecutor; } int batchThreads = this.threads; if (batchThreads <= 0) { batchThreads = config.getInt(""index"", null, ""batchThreads"", 0); } if (batchThreads <= 0) { batchThreads = java.lang.Runtime.getRuntime().availableProcessors(); } return com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(batchThreads, ""Index-Batch"")); }",58449dbfe01d0cbd2f7a3857038ae55c1844aab6,2018-02-15 01:52:20,5
159570,javatests_com_google_gerrit_acceptance_api_group_GroupIndexerIT.java,,,"@org.junit.Test public void indexStalenessIsNotDerivedFromCacheStaleness() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = createGroup(""verifiers""); groupIndexer.index(groupUuid); updateGroupWithoutCacheOrIndex(groupUuid, com.google.gerrit.acceptance.api.group.GroupIndexerIT.newGroupUpdate().setDescription(""Modified"").build()); reloadGroupToCache(groupUuid); boolean reindexed = groupIndexer.reindexIfStale(groupUuid); assertWithMessage(""Group should have been reindexed"").that(reindexed).isTrue(); }",7871a9b09e1320b7441f872414d790803d1ca342,"@org.junit.Test public void indexStalenessIsNotDerivedFromCacheStaleness() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = createGroup(""verifiers""); updateGroupWithoutCacheOrIndex(groupUuid, com.google.gerrit.acceptance.api.group.GroupIndexerIT.newGroupUpdate().setDescription(""Modified"").build()); reloadGroupToCache(groupUuid); boolean reindexed = groupIndexer.reindexIfStale(groupUuid); assertWithMessage(""Group should have been reindexed"").that(reindexed).isTrue(); }",c32209d5598174fd1f9e5c0ac9c5d004700dbda0,2018-02-15 13:20:10,2
159510,java_com_google_gerrit_server_change_ChangeCleanupRunner.java,"@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = cfg.getScheduleConfig(); java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (!(schedule.isPresent())) { com.google.gerrit.server.change.ChangeCleanupRunner.log.info(""Ignoring missing changeCleanup schedule configuration""); } else if (((schedule.get().initialDelay()) < 0) || ((schedule.get().interval()) <= 0)) { com.google.gerrit.server.change.ChangeCleanupRunner.log.warn(java.lang.String.format(""Ignoring invalid changeCleanup schedule configuration: %s"", scheduleConfig)); } else { @java.lang.SuppressWarnings(""unused"") java.util.concurrent.Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(runner, schedule.get().initialDelay(), schedule.get().interval(), java.util.concurrent.TimeUnit.MILLISECONDS); } }",82efd67976cedff9646c7afc9cc791d9f82c7524,"@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = cfg.getScheduleConfig(); java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (schedule.isPresent()) { @java.lang.SuppressWarnings(""unused"") java.util.concurrent.Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(runner, schedule.get().initialDelay(), schedule.get().interval(), java.util.concurrent.TimeUnit.MILLISECONDS); } }",42c307ef9bc62a6e70782bbddf52c8ea3228521c,"@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = cfg.getScheduleConfig(); scheduleConfig.schedule().ifPresent(( s) -> { @java.lang.SuppressWarnings(""unused"") Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(runner, s.initialDelay(), s.interval(), TimeUnit.MILLISECONDS); }); }",1c97876d00352f297a7940e8f45dd1ba32450b15,2018-02-15 15:43:57,3
159510,java_com_google_gerrit_server_account_AccountDeactivator.java,"@java.lang.Override public void start() { if (!(supportAutomaticAccountActivityUpdate)) { return; } java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (!(schedule.isPresent())) { com.google.gerrit.server.account.AccountDeactivator.log.info(""Ignoring missing accountDeactivator schedule configuration""); } else if (((schedule.get().initialDelay()) < 0) || ((schedule.get().interval()) <= 0)) { com.google.gerrit.server.account.AccountDeactivator.log.warn(java.lang.String.format(""Ignoring invalid accountDeactivator schedule configuration: %s"", scheduleConfig)); } else { queue.getDefaultQueue().scheduleAtFixedRate(deactivator, schedule.get().initialDelay(), schedule.get().interval(), java.util.concurrent.TimeUnit.MILLISECONDS); } }",c1a097672f87c096373d4826d5cba13467a21340,"@java.lang.Override public void start() { if (!(supportAutomaticAccountActivityUpdate)) { return; } java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (schedule.isPresent()) { queue.getDefaultQueue().scheduleAtFixedRate(deactivator, schedule.get().initialDelay(), schedule.get().interval(), java.util.concurrent.TimeUnit.MILLISECONDS); } }",16c44826bae585121e3bf3dc9edbca4d05c9091d,"@java.lang.Override public void start() { if (!(supportAutomaticAccountActivityUpdate)) { return; } scheduleConfig.schedule().ifPresent(( s) -> { @java.lang.SuppressWarnings(""unused"") Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(deactivator, s.initialDelay(), s.interval(), TimeUnit.MILLISECONDS); }); }",e978f16fec9d5bb2f3baa99f7b76bb132efebb34,2018-02-15 15:43:57,3
159431,java_com_google_gerrit_server_config_ScheduleConfig.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static com.google.gerrit.server.config.ScheduleConfig create(org.eclipse.jgit.lib.Config config, java.lang.String section, java.lang.String subsection) { return com.google.gerrit.server.config.ScheduleConfig.builder(config, section, subsection).build(); }",ad90ddc41c3424effdffa4ed5d0457af5b031a8d,"@com.google.auto.value.extension.memoized.Memoized public long interval() { return com.google.gerrit.server.config.ScheduleConfig.computeInterval(config(), section(), subsection(), keyInterval()); }",5782358881e74de61c89d5119122445e1c61d237,2018-02-15 15:43:57,4
159431,java_com_google_gerrit_server_config_ScheduleConfig.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static com.google.gerrit.server.config.ScheduleConfig.Builder builder(org.eclipse.jgit.lib.Config config, java.lang.String section) { return com.google.gerrit.server.config.ScheduleConfig.builder(config, section, null); }",f66bffd2cbee824e9ba984b1f2239051db7d813b,"public static com.google.gerrit.server.config.ScheduleConfig.Builder builder(org.eclipse.jgit.lib.Config config, java.lang.String section) { return new com.google.gerrit.server.config.AutoValue_ScheduleConfig.Builder().setNow(java.time.ZonedDateTime.now(java.time.ZoneId.systemDefault())).setKeyInterval(com.google.gerrit.server.config.ScheduleConfig.KEY_INTERVAL).setKeyStartTime(com.google.gerrit.server.config.ScheduleConfig.KEY_STARTTIME).setConfig(config).setSection(section); }",b70352e8a884774fd696ec24a0e7610f73bddcb1,2018-02-15 15:43:57,4
159510,java_com_google_gerrit_server_git_GarbageCollectionRunner.java,"@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = gcConfig.getScheduleConfig(); java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (!(schedule.isPresent())) { com.google.gerrit.server.git.GarbageCollectionRunner.log.info(""Ignoring missing gc schedule configuration""); } else if (((schedule.get().initialDelay()) < 0) || ((schedule.get().interval()) <= 0)) { com.google.gerrit.server.git.GarbageCollectionRunner.log.warn(java.lang.String.format(""Ignoring invalid gc schedule configuration: %s"", scheduleConfig)); } else { @java.lang.SuppressWarnings(""unused"") java.util.concurrent.Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(gcRunner, schedule.get().initialDelay(), schedule.get().interval(), java.util.concurrent.TimeUnit.MILLISECONDS); } }",b9d24f72b0b20f754b0f30dd46931ef1bcd2584f,"@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = gcConfig.getScheduleConfig(); java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (schedule.isPresent()) { @java.lang.SuppressWarnings(""unused"") java.util.concurrent.Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(gcRunner, schedule.get().initialDelay(), schedule.get().interval(), java.util.concurrent.TimeUnit.MILLISECONDS); } }",f6ce2cfe7f287dfe09bd23b26e17e72176e2c12b,"@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = gcConfig.getScheduleConfig(); scheduleConfig.schedule().ifPresent(( s) -> { @java.lang.SuppressWarnings(""unused"") Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(gcRunner, s.initialDelay(), s.interval(), TimeUnit.MILLISECONDS); }); }",d3aab464d2a3fb25a40b8ce44e4b04a71922cab3,2018-02-15 15:43:57,3
159470,java_com_google_gerrit_server_config_ScheduleConfig.java,public long getInitialDelay() { if ((initialDelay) == null) { load(); } return initialDelay; },fec2d34990b9342b5ba4c14240ff2311d8c8ef8a,public com.google.gerrit.server.config.ScheduleConfig.Schedule schedule() { if ((schedule) == null) { schedule = loadSchedule(); } return schedule; },02edfbb1468d23c700cae9ff2e2f20a28785a5d0,"@com.google.auto.value.extension.memoized.Memoized public com.google.gerrit.server.config.ScheduleConfig.Schedule schedule() { long interval = com.google.gerrit.server.config.ScheduleConfig.computeInterval(config(), section(), subsection(), keyInterval()); long initialDelay; if (interval > 0) { initialDelay = com.google.gerrit.server.config.ScheduleConfig.computeInitialDelay(config(), section(), subsection(), keyStartTime(), now(), interval); } else { initialDelay = interval; } return com.google.gerrit.server.config.ScheduleConfig.Schedule.create(interval, initialDelay); }",8b1a3cdfa81712b7128f8d0e7057f4b7778c88b6,2018-02-15 15:43:57,3
159510,java_com_google_gerrit_server_config_ScheduleConfig.java,"private static long interval(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String keyInterval) { long interval = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG; try { interval = com.google.gerrit.server.config.ConfigUtil.getTimeUnit(rc, section, subsection, keyInterval, (-1), java.util.concurrent.TimeUnit.MILLISECONDS); if (interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) { com.google.gerrit.server.config.ScheduleConfig.log.info(java.text.MessageFormat.format(""{0} schedule parameter \""{0}.{1}\"" is not configured"", section, keyInterval)); } } catch (java.lang.IllegalArgumentException e) { com.google.gerrit.server.config.ScheduleConfig.log.error(java.text.MessageFormat.format(""Invalid {0} schedule parameter \""{0}.{1}\"""", section, keyInterval), e); interval = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return interval; }",04b4746095a3172bf4b4b5fea9f1ea0ea2af6760,"private static long interval(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String keyInterval) { try { return com.google.gerrit.server.config.ConfigUtil.getTimeUnit(rc, section, subsection, keyInterval, com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG, java.util.concurrent.TimeUnit.MILLISECONDS); } catch (java.lang.IllegalArgumentException e) { return com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } }",39ab660d9abdaf07ec8ddc8f44826baccd6e74e9,"private static long computeInterval(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String keyInterval) { try { return com.google.gerrit.server.config.ConfigUtil.getTimeUnit(rc, section, subsection, keyInterval, com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG, java.util.concurrent.TimeUnit.MILLISECONDS); } catch (java.lang.IllegalArgumentException e) { return com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } }",0c6f669d9d19b90a80412f283237614c83783753,2018-02-15 15:43:57,3
159452,java_com_google_gerrit_server_config_ScheduleConfig.java,public com.google.gerrit.server.config.ScheduleConfig.Schedule schedule() { if ((schedule) == null) { schedule = loadSchedule(); } return schedule; },02edfbb1468d23c700cae9ff2e2f20a28785a5d0,public java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule() { if ((schedule) == null) { schedule = loadSchedule(); } return schedule; },78cec8bbda49a6795097a82df76e8c87f6cab3be,"@com.google.auto.value.extension.memoized.Memoized public java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule() { long interval = com.google.gerrit.server.config.ScheduleConfig.computeInterval(config(), section(), subsection(), keyInterval()); long initialDelay; if (interval > 0) { initialDelay = com.google.gerrit.server.config.ScheduleConfig.computeInitialDelay(config(), section(), subsection(), keyStartTime(), now(), interval); } else { initialDelay = interval; } if ((interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) || (initialDelay == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG))) { return java.util.Optional.empty(); } return java.util.Optional.of(com.google.gerrit.server.config.ScheduleConfig.Schedule.create(interval, initialDelay)); }",b528495e0fe2ea10828eab52f43d9bc86e9ddf7d,2018-02-15 15:43:57,2
159510,java_com_google_gerrit_server_config_ScheduleConfig.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean isInvalidOrMissing(long interval, long initialDelay) { java.lang.String key = (section()) + ((subsection()) != null ? ""."" + (subsection()) : """"); if ((interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) && (initialDelay == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG))) { com.google.gerrit.server.config.ScheduleConfig.log.info(""No schedule configuration for \""{}\""."", key); return true; } if (interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) { com.google.gerrit.server.config.ScheduleConfig.log.error(""Incomplete schedule configuration for \""{}\"" is ignored. Missing value for \""{}\""."", key, ((key + ""."") + (keyInterval()))); return true; } if (initialDelay == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) { com.google.gerrit.server.config.ScheduleConfig.log.error(""Incomplete schedule configuration for \""{}\"" is ignored. Missing value for \""{}\""."", key, ((key + ""."") + (keyStartTime()))); return true; } if ((interval <= 0) && (initialDelay < 0)) { com.google.gerrit.server.config.ScheduleConfig.log.error(""Invalid schedule configuration for \""{}\"" is ingnored. "", key); return true; } return false; }",57645b99e8ce7e82da7a4afee874082e5666f365,"private boolean isInvalidOrMissing(long interval, long initialDelay) { java.lang.String key = (section()) + ((subsection()) != null ? ""."" + (subsection()) : """"); if ((interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) && (initialDelay == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG))) { com.google.gerrit.server.config.ScheduleConfig.log.info(""No schedule configuration for \""{}\""."", key); return true; } if (interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) { com.google.gerrit.server.config.ScheduleConfig.log.error(""Incomplete schedule configuration for \""{}\"" is ignored. Missing value for \""{}\""."", key, ((key + ""."") + (keyInterval()))); return true; } if (initialDelay == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) { com.google.gerrit.server.config.ScheduleConfig.log.error(""Incomplete schedule configuration for \""{}\"" is ignored. Missing value for \""{}\""."", key, ((key + ""."") + (keyStartTime()))); return true; } if ((interval <= 0) || (initialDelay < 0)) { com.google.gerrit.server.config.ScheduleConfig.log.error(""Invalid schedule configuration for \""{}\"" is ignored. "", key); return true; } return false; }",0a3fe2eda5d5aa6f94184f9a636cc95291dab55c,2018-02-15 15:43:57,3
159452,javatests_com_google_gerrit_server_config_ScheduleConfigTest.java,"@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString(""a"", ""b"", ""i"", ""1h""); rc.setString(""a"", ""b"", ""s"", ""01:00""); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"", ""b"").setKeyInterval(""i"").setKeyStartTime(""s"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.schedule()).isEqualTo(com.google.gerrit.server.config.ScheduleConfig.Schedule.create(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS))); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"", ""b"").setKeyInterval(""myInterval"").setKeyStartTime(""myStart"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.schedule()).isEqualTo(com.google.gerrit.server.config.ScheduleConfig.Schedule.create(ScheduleConfig.MISSING_CONFIG, ScheduleConfig.MISSING_CONFIG)); }",78ae11a83abd5d4e692aeb3862a9f3a5a015616e,"@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString(""a"", ""b"", ""i"", ""1h""); rc.setString(""a"", ""b"", ""s"", ""01:00""); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"", ""b"").setKeyInterval(""i"").setKeyStartTime(""s"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.schedule()).isPresent(); assertThat(s.schedule().get()).isEqualTo(com.google.gerrit.server.config.ScheduleConfig.Schedule.create(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS))); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"", ""b"").setKeyInterval(""myInterval"").setKeyStartTime(""myStart"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.schedule()).isEmpty(); }",50292c1c090cecad4ed991629081e74080e12ff5,"@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString(""a"", ""b"", ""i"", ""1h""); rc.setString(""a"", ""b"", ""s"", ""01:00""); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"").setSubsection(""b"").setKeyInterval(""i"").setKeyStartTime(""s"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.schedule()).hasValue(com.google.gerrit.server.config.ScheduleConfig.Schedule.create(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS))); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"").setSubsection(""b"").setKeyInterval(""myInterval"").setKeyStartTime(""myStart"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.schedule()).isEmpty(); }",887ccda4c05cdb906681e5da9c804683133f2e84,2018-02-15 15:43:57,2
159451,javatests_com_google_gerrit_server_config_ScheduleConfigTest.java,"@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString(""a"", ""b"", ""i"", ""1h""); rc.setString(""a"", ""b"", ""s"", ""01:00""); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"", ""b"").setKeyInterval(""i"").setKeyStartTime(""s"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.getInterval()); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"", ""b"").setKeyInterval(""myInterval"").setKeyStartTime(""myStart"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(s.getInterval(), ScheduleConfig.MISSING_CONFIG); assertEquals(s.getInitialDelay(), ScheduleConfig.MISSING_CONFIG); }",b1fc1aabce00e7ebcca8fab488cd0d4c3a9d0660,"@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString(""a"", ""b"", ""i"", ""1h""); rc.setString(""a"", ""b"", ""s"", ""01:00""); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"", ""b"").setKeyInterval(""i"").setKeyStartTime(""s"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.getInterval()).isEqualTo(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS)); assertThat(s.getInitialDelay()).isEqualTo(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS)); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"", ""b"").setKeyInterval(""myInterval"").setKeyStartTime(""myStart"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.getInterval()).isEqualTo(ScheduleConfig.MISSING_CONFIG); assertThat(s.getInitialDelay()).isEqualTo(ScheduleConfig.MISSING_CONFIG); }",8664b86ebaa7ce9dd79f146bff2e8ccdf14fe107,"@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString(""a"", ""b"", ""i"", ""1h""); rc.setString(""a"", ""b"", ""s"", ""01:00""); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"").setSubsection(""b"").setKeyInterval(""i"").setKeyStartTime(""s"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.interval()).isEqualTo(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS)); assertThat(s.initialDelay()).isEqualTo(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS)); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"").setSubsection(""b"").setKeyInterval(""myInterval"").setKeyStartTime(""myStart"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.interval()).isEqualTo(ScheduleConfig.MISSING_CONFIG); assertThat(s.initialDelay()).isEqualTo(ScheduleConfig.MISSING_CONFIG); }",c63502a715bc2e8fd6c00aade6ee643b2ef721e0,2018-02-15 15:43:57,3
159470,javatests_com_google_gerrit_server_config_ScheduleConfigTest.java,"private static long initialDelay(java.lang.String startTime, java.lang.String interval) { return com.google.gerrit.server.config.ScheduleConfig.builder(com.google.gerrit.server.config.ScheduleConfigTest.config(startTime, interval), ""section"", ""subsection"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build().getInitialDelay(); }",fc630bb961fb1c7d1d29ba2751040da9446cf06e,"private static long initialDelay(java.lang.String startTime, java.lang.String interval) { return com.google.gerrit.server.config.ScheduleConfig.builder(ScheduleConfigTest.config(startTime, interval), ""section"", ""subsection"").setNow(ScheduleConfigTest.NOW).build().schedule().initialDelay(); }",1b0adf6aea8499822939df358f8cbf964aeb6b17,"private static long initialDelay(java.lang.String startTime, java.lang.String interval) { return com.google.gerrit.server.config.ScheduleConfig.builder(ScheduleConfigTest.config(startTime, interval), ""section"").setSubsection(""subsection"").setNow(ScheduleConfigTest.NOW).build().schedule().initialDelay(); }",d122957085f3a6ca5fa8fc22274954bc1ad41852,2018-02-15 15:43:57,3
159431,javatests_com_google_gerrit_server_config_ScheduleConfigTest.java,"private static long initialDelay(java.lang.String startTime, java.lang.String interval) { return new com.google.gerrit.server.config.ScheduleConfig(com.google.gerrit.server.config.ScheduleConfigTest.config(startTime, interval), ""section"", ""subsection"", com.google.gerrit.server.config.ScheduleConfigTest.NOW).getInitialDelay(); }",42452919de007ee460247dd953b68fbb2a7594f9,"private static long initialDelay(java.lang.String startTime, java.lang.String interval) { return com.google.gerrit.server.config.ScheduleConfig.builder(com.google.gerrit.server.config.ScheduleConfigTest.config(startTime, interval), ""section"", ""subsection"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build().getInitialDelay(); }",fc630bb961fb1c7d1d29ba2751040da9446cf06e,"private static long initialDelay(java.lang.String startTime, java.lang.String interval) { return com.google.gerrit.server.config.ScheduleConfig.builder(ScheduleConfigTest.config(startTime, interval), ""section"").setSubsection(""subsection"").setNow(ScheduleConfigTest.NOW).build().initialDelay(); }",f1a5325911b22c04ea6ddd3704fe26d21a9d02b8,2018-02-15 15:43:57,4
159470,javatests_com_google_gerrit_server_config_ScheduleConfigTest.java,"@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString(""a"", ""b"", ""i"", ""1h""); rc.setString(""a"", ""b"", ""s"", ""01:00""); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"", ""b"").setKeyInterval(""i"").setKeyStartTime(""s"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.getInterval()); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"", ""b"").setKeyInterval(""myInterval"").setKeyStartTime(""myStart"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(s.getInterval(), ScheduleConfig.MISSING_CONFIG); assertEquals(s.getInitialDelay(), ScheduleConfig.MISSING_CONFIG); }",b1fc1aabce00e7ebcca8fab488cd0d4c3a9d0660,"@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString(""a"", ""b"", ""i"", ""1h""); rc.setString(""a"", ""b"", ""s"", ""01:00""); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"", ""b"").setKeyInterval(""i"").setKeyStartTime(""s"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.schedule().interval()); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.schedule().initialDelay()); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"", ""b"").setKeyInterval(""myInterval"").setKeyStartTime(""myStart"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(s.schedule().interval(), ScheduleConfig.MISSING_CONFIG); assertEquals(s.schedule().initialDelay(), ScheduleConfig.MISSING_CONFIG); }",1b02c8504fc1d3564507eb8d9b4a3c53806044c1,"@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString(""a"", ""b"", ""i"", ""1h""); rc.setString(""a"", ""b"", ""s"", ""01:00""); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"").setSubsection(""b"").setKeyInterval(""i"").setKeyStartTime(""s"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.schedule()).isEqualTo(com.google.gerrit.server.config.ScheduleConfig.Schedule.create(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS))); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"").setSubsection(""b"").setKeyInterval(""myInterval"").setKeyStartTime(""myStart"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.schedule()).isEqualTo(com.google.gerrit.server.config.ScheduleConfig.Schedule.create(ScheduleConfig.MISSING_CONFIG, ScheduleConfig.MISSING_CONFIG)); }",d644fce5594b39171a5427518c849929aa80d153,2018-02-15 15:43:57,3
159431,javatests_com_google_gerrit_server_config_ScheduleConfigTest.java,"@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString(""a"", ""b"", ""i"", ""1h""); rc.setString(""a"", ""b"", ""s"", ""01:00""); com.google.gerrit.server.config.ScheduleConfig s = new com.google.gerrit.server.config.ScheduleConfig(rc, ""a"", ""b"", ""i"", ""s"", com.google.gerrit.server.config.ScheduleConfigTest.NOW); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.getInterval()); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); s = new com.google.gerrit.server.config.ScheduleConfig(rc, ""a"", ""b"", ""myInterval"", ""myStart"", com.google.gerrit.server.config.ScheduleConfigTest.NOW); assertEquals(s.getInterval(), ScheduleConfig.MISSING_CONFIG); assertEquals(s.getInitialDelay(), ScheduleConfig.MISSING_CONFIG); }",d5dd3f6a5c7fcb05c4190655a47a327cd884a644,"@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString(""a"", ""b"", ""i"", ""1h""); rc.setString(""a"", ""b"", ""s"", ""01:00""); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"", ""b"").setKeyInterval(""i"").setKeyStartTime(""s"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.getInterval()); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"", ""b"").setKeyInterval(""myInterval"").setKeyStartTime(""myStart"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(s.getInterval(), ScheduleConfig.MISSING_CONFIG); assertEquals(s.getInitialDelay(), ScheduleConfig.MISSING_CONFIG); }",b1fc1aabce00e7ebcca8fab488cd0d4c3a9d0660,"@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString(""a"", ""b"", ""i"", ""1h""); rc.setString(""a"", ""b"", ""s"", ""01:00""); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"").setSubsection(""b"").setKeyInterval(""i"").setKeyStartTime(""s"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.interval()); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.initialDelay()); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"").setSubsection(""b"").setKeyInterval(""myInterval"").setKeyStartTime(""myStart"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(s.interval(), ScheduleConfig.MISSING_CONFIG); assertEquals(s.initialDelay(), ScheduleConfig.MISSING_CONFIG); }",02d92b9fc2de642d1773059e6bdbc15af1d1c00a,2018-02-15 15:43:57,4
159510,java_com_google_gerrit_server_config_ScheduleConfig.java,"private static long initialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String keyStartTime, java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start != null) { java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern(""[E ]HH:mm"").withLocale(java.util.Locale.US); java.time.LocalTime firstStartTime = java.time.LocalTime.parse(start, formatter); java.time.ZonedDateTime startTime = now.with(firstStartTime); try { java.time.DayOfWeek dayOfWeek = formatter.parse(start, java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } else { com.google.gerrit.server.config.ScheduleConfig.log.info(java.text.MessageFormat.format(""{0} schedule parameter \""{0}.{1}\"" is not configured"", section, keyStartTime)); } } catch (java.lang.IllegalArgumentException e2) { com.google.gerrit.server.config.ScheduleConfig.log.error(java.text.MessageFormat.format(""Invalid {0} schedule parameter \""{0}.{1}\"""", section, keyStartTime), e2); delay = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }",08130dfdf5a2aeeb14b438cb7ed4e8c1f1157abb,"private static long initialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String keyStartTime, java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start != null) { java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern(""[E ]HH:mm"").withLocale(java.util.Locale.US); java.time.LocalTime firstStartTime = java.time.LocalTime.parse(start, formatter); java.time.ZonedDateTime startTime = now.with(firstStartTime); try { java.time.DayOfWeek dayOfWeek = formatter.parse(start, java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } } catch (java.lang.IllegalArgumentException e2) { delay = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }",f103a2594134e8762ad5742cea28c96d147faa81,"private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String keyStartTime, java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start != null) { java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern(""[E ]HH:mm"").withLocale(java.util.Locale.US); java.time.LocalTime firstStartTime = java.time.LocalTime.parse(start, formatter); java.time.ZonedDateTime startTime = now.with(firstStartTime); try { java.time.DayOfWeek dayOfWeek = formatter.parse(start, java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } } catch (java.lang.IllegalArgumentException e2) { delay = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }",0d5ef59ed32c520b8a1c1d8c5563865057497e3f,2018-02-15 15:43:57,3
159431,java_com_google_gerrit_server_config_ScheduleConfig.java,public long getInitialDelay() { return initialDelay; },aa9d2fdedbe6bcc52f3cc990a9af60854523ab71,public long getInitialDelay() { if ((initialDelay) == null) { load(); } return initialDelay; },fec2d34990b9342b5ba4c14240ff2311d8c8ef8a,"@com.google.auto.value.extension.memoized.Memoized public long initialDelay() { long interval = interval(); if (interval <= 0) { return interval; } return com.google.gerrit.server.config.ScheduleConfig.computeInitialDelay(config(), section(), subsection(), keyStartTime(), now(), interval); }",dd14cd39cd1f9790c0a5e737a336a9812730489a,2018-02-15 15:43:57,4
159452,javatests_com_google_gerrit_server_config_ScheduleConfigTest.java,"private static long initialDelay(java.lang.String startTime, java.lang.String interval) { return com.google.gerrit.server.config.ScheduleConfig.builder(ScheduleConfigTest.config(startTime, interval), ""section"", ""subsection"").setNow(ScheduleConfigTest.NOW).build().schedule().initialDelay(); }",1b0adf6aea8499822939df358f8cbf964aeb6b17,"private static long initialDelay(java.lang.String startTime, java.lang.String interval) { java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = com.google.gerrit.server.config.ScheduleConfig.builder(ScheduleConfigTest.config(startTime, interval), ""section"", ""subsection"").setNow(ScheduleConfigTest.NOW).build().schedule(); assertThat(schedule).isPresent(); return schedule.get().initialDelay(); }",51f016a6124b3c4a42cd60d713ecb5a8328dc546,"private static long initialDelay(java.lang.String startTime, java.lang.String interval) { java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = com.google.gerrit.server.config.ScheduleConfig.builder(ScheduleConfigTest.config(startTime, interval), ""section"").setSubsection(""subsection"").setNow(ScheduleConfigTest.NOW).build().schedule(); assertThat(schedule).isPresent(); return schedule.get().initialDelay(); }",c74a243bf80f9adcfc7766876f706befd93caeb7,2018-02-15 15:43:57,2
142192,gerrit-server_src_main_java_com_google_gerrit_server_schema_JdbcAccountPatchReviewStore.java,"private static void doCreateTable(java.sql.Statement stmt) throws java.sql.SQLException { stmt.executeUpdate((""CREATE TABLE IF NOT EXISTS account_patch_reviews ("" + ((((((""account_id INTEGER DEFAULT 0 NOT NULL, "" + ""change_id INTEGER DEFAULT 0 NOT NULL, "") + ""patch_set_id INTEGER DEFAULT 0 NOT NULL, "") + ""file_name VARCHAR(4096) DEFAULT '' NOT NULL, "") + ""CONSTRAINT primary_key_account_patch_reviews "") + ""PRIMARY KEY (change_id, patch_set_id, account_id, file_name)"") + "")""))); }",109dee2a15faf81751994e8291a32a93b0daca79,"private static void doCreateTable(java.sql.Statement stmt) throws java.sql.SQLException { stmt.executeUpdate((""CREATE TABLE IF NOT EXISTS account_patch_reviews ("" + ((((((""account_id INTEGER DEFAULT 0 NOT NULL, "" + ""change_id INTEGER DEFAULT 0 NOT NULL, "") + ""patch_set_id INTEGER DEFAULT 0 NOT NULL, "") + ""file_name VARCHAR(256) DEFAULT '' NOT NULL, "") + ""CONSTRAINT primary_key_account_patch_reviews "") + ""PRIMARY KEY (change_id, patch_set_id, account_id, file_name)"") + "")""))); }",9143d93c69402517d083937f99d495b10ce5ce83,"protected void doCreateTable(java.sql.Statement stmt) throws java.sql.SQLException { stmt.executeUpdate((""CREATE TABLE IF NOT EXISTS account_patch_reviews ("" + ((((((""account_id INTEGER DEFAULT 0 NOT NULL, "" + ""change_id INTEGER DEFAULT 0 NOT NULL, "") + ""patch_set_id INTEGER DEFAULT 0 NOT NULL, "") + ""file_name VARCHAR(4096) DEFAULT '' NOT NULL, "") + ""CONSTRAINT primary_key_account_patch_reviews "") + ""PRIMARY KEY (change_id, patch_set_id, account_id, file_name)"") + "")""))); }",405a3aeece77567afd7e40a05913dd1683ca0d7c,2018-02-15 22:08:58,9
159711,src_main_java_com_googlesource_gerrit_plugins_reviewers_ReviewersConfig.java,java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getReviewerFilterSections() { com.google.common.collect.ImmutableList.Builder<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> b = com.google.common.collect.ImmutableList.builder(); for (java.lang.String f : cfg.getSubsections(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILTER)) { b.add(newReviewerFilterSection(f)); } return b.build(); },5acb6fab7f80f3aa097ec6e885274025d95117fe,"public com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject forProject(com.google.gerrit.reviewdb.client.Project.NameKey projectName) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { try { return new com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject(cfgFactory.getProjectPluginConfigWithInheritance(projectName, pluginName)); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(((""Project"" + (projectName.get())) + "" not found"")); } }",99c5c2eb86b878df632bedc1fc9909899751a407,"public com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject forProject(com.google.gerrit.reviewdb.client.Project.NameKey projectName) { org.eclipse.jgit.lib.Config cfg; try { cfg = cfgFactory.getProjectPluginConfigWithInheritance(projectName, pluginName); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.log.error(""Unable to get config for project {}"", projectName.get()); cfg = new org.eclipse.jgit.lib.Config(); } return new com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject(cfg); }",8e86e3bbd7c56c6db8e738e8a1de1406366551c2,2018-02-15 23:50:03,4
159711,src_main_java_com_googlesource_gerrit_plugins_reviewers_ReviewersConfig.java,"@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.common.base.Strings.isNullOrEmpty(commit.getMessage())) { commit.setMessage(""Update reviewers configuration\n""); } saveConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILENAME, cfg); return true; }",5dda7b0e25ef072f00ad9ca3d23170f6c3c6ca1f,"@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.common.base.Strings.isNullOrEmpty(commit.getMessage())) { commit.setMessage(""Update reviewers configuration\n""); } saveConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILENAME, cfg); return true; }",3f0ecdf39a71d5c3e0b8364af3be32ca32759005,"@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.common.base.Strings.isNullOrEmpty(commit.getMessage())) { commit.setMessage(""Update reviewers configuration\n""); } saveConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILENAME, cfg); return true; }",5dda7b0e25ef072f00ad9ca3d23170f6c3c6ca1f,2018-02-15 23:50:03,4
159711,src_main_java_com_googlesource_gerrit_plugins_reviewers_ReviewersConfig.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getReviewerFilterSections() { com.google.common.collect.ImmutableList.Builder<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> b = com.google.common.collect.ImmutableList.builder(); for (java.lang.String f : cfg.getSubsections(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER)) { b.add(newReviewerFilterSection(f)); } return b.build(); },9af706b6737cc0010f1aaa8535a598381d667da4,java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getReviewerFilterSections() { com.google.common.collect.ImmutableList.Builder<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> b = com.google.common.collect.ImmutableList.builder(); for (java.lang.String f : cfg.getSubsections(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.SECTION_FILTER)) { b.add(newReviewerFilterSection(f)); } return b.build(); },287a151ab07a96e66aa5b9d98de0667d4e5e2932,2018-02-15 23:50:03,4
159711,src_main_java_com_googlesource_gerrit_plugins_reviewers_ReviewersConfig.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void removeReviewer(java.lang.String filter, java.lang.String reviewer) { if (newReviewerFilterSection(filter).getReviewers().contains(reviewer)) { java.util.List<java.lang.String> values = new java.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER))); values.remove(reviewer); if (values.isEmpty()) { cfg.unsetSection(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter); } else { cfg.setStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER, values); } } }",0504410d84a57a6597e3baa68c2a9e9526d06b1c,"void removeReviewer(java.lang.String filter, java.lang.String reviewer) { if (newReviewerFilterSection(filter).getReviewers().contains(reviewer)) { java.util.List<java.lang.String> values = new java.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.SECTION_FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.KEY_REVIEWER))); values.remove(reviewer); if (values.isEmpty()) { cfg.unsetSection(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.SECTION_FILTER, filter); } else { cfg.setStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.SECTION_FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.KEY_REVIEWER, values); } } }",105629a7c22e314b19e2e126fee7a9444ae946c3,2018-02-15 23:50:03,4
159711,src_main_java_com_googlesource_gerrit_plugins_reviewers_ReviewersConfig.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection newReviewerFilterSection(java.lang.String filter) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> b = com.google.common.collect.ImmutableSet.builder(); for (java.lang.String reviewer : cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER)) { b.add(reviewer); } return new com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection(filter, b.build()); }",2dc275038bfea4f12f0d1ed91db1c8e118ac5866,"private com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection newReviewerFilterSection(java.lang.String filter) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> b = com.google.common.collect.ImmutableSet.builder(); for (java.lang.String reviewer : cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.SECTION_FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.KEY_REVIEWER)) { b.add(reviewer); } return new com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection(filter, b.build()); }",381c3eadeca0e5794c4683562922ca1c8bca7fc1,2018-02-15 23:50:03,4
159711,src_main_java_com_googlesource_gerrit_plugins_reviewers_ReviewersConfig.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { cfg = readConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILENAME); }",13842bff9fdde64601b995ab430fe7e6345e9faf,"@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { cfg = readConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILENAME); }",fc6db07547c973bbebc588add2fab0ebe98eb788,2018-02-15 23:50:03,4
159711,src_main_java_com_googlesource_gerrit_plugins_reviewers_Reviewers.java,private java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getSections(com.google.gerrit.reviewdb.client.Project.NameKey projectName) { return configFactory.create(projectName).getReviewerFilterSections(); },1c04338ef8e2ee0882dca7ae6a9a45ba6123a5d8,"private java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getSections(com.google.gerrit.reviewdb.client.Project.NameKey projectName) { try { return config.forProject(projectName).getReviewerFilterSections(); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.log.error(""Unable to get config for project {}"", projectName.get()); return com.google.common.collect.ImmutableList.of(); } }",6e4b957c85685ecf6ed454a1dc9d058446ac4709,private java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getSections(com.google.gerrit.reviewdb.client.Project.NameKey projectName) { return config.forProject(projectName).getReviewerFilterSections(); },7e87cb976c2adfe89e0f19baa0b228e3891ca2cc,2018-02-15 23:50:03,4
159711,src_main_java_com_googlesource_gerrit_plugins_reviewers_ReviewersConfig.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void addReviewer(java.lang.String filter, java.lang.String reviewer) { if (!(newReviewerFilterSection(filter).getReviewers().contains(reviewer))) { java.util.List<java.lang.String> values = new java.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER))); values.add(reviewer); cfg.setStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER, values); } }",4de653971e31926ab21f6ebe5742f8f54daded11,"void addReviewer(java.lang.String filter, java.lang.String reviewer) { if (!(newReviewerFilterSection(filter).getReviewers().contains(reviewer))) { java.util.List<java.lang.String> values = new java.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.SECTION_FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.KEY_REVIEWER))); values.add(reviewer); cfg.setStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.SECTION_FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.KEY_REVIEWER, values); } }",4d178249205b9a681c5ec887a0a1add4af5802b5,2018-02-15 23:50:03,4
143791,src_main_java_com_googlesource_gerrit_plugins_importer_GerritApi.java,"@java.lang.Override public int compareTo(com.googlesource.gerrit.plugins.importer.GerritApi.Version o) { if (((major) == null) || ((o.major) == null)) { return -1; } if ((major) == (o.major)) { if (com.google.common.base.Objects.equal(minor, o.minor)) { if (com.google.common.base.Objects.equal(patch, o.patch)) { return 0; } if ((o.patch) == null) { return 1; } if ((patch) == null) { return -1; } return (patch) - (o.patch); } if ((o.minor) == null) { return 1; } if ((minor) == null) { return -1; } return (minor) - (o.minor); } return (major) - (o.major); }",72ad67d80a5ffd06edc48c90163d399e83986e1d,@java.lang.Override public int compareTo(com.googlesource.gerrit.plugins.importer.GerritApi.Version o) { if (((major) == null) || ((o.major) == null)) { return -1; } if (major.equals(o.major)) { if (minor.equals(o.minor)) { if (patch.equals(o.patch)) { return 0; } if ((o.patch) == null) { return 1; } if ((patch) == null) { return -1; } return (patch) - (o.patch); } if ((o.minor) == null) { return 1; } if ((minor) == null) { return -1; } return (minor) - (o.minor); } return (major) - (o.major); },a5cb6c20a7f3c28b3e48fae3fad6b7fe2e80adcc,"@java.lang.Override public int compareTo(com.googlesource.gerrit.plugins.importer.GerritApi.Version o) { if (((major) == null) || ((o.major) == null)) { return -1; } if (com.google.common.base.Objects.equal(major, o.major)) { if (com.google.common.base.Objects.equal(minor, o.minor)) { if (com.google.common.base.Objects.equal(patch, o.patch)) { return 0; } if ((o.patch) == null) { return 1; } if ((patch) == null) { return -1; } return (patch) - (o.patch); } if ((o.minor) == null) { return 1; } if ((minor) == null) { return -1; } return (minor) - (o.minor); } return (major) - (o.major); }",271605011945e011c63a2918aedfb6d60a32b008,2018-02-16 01:42:30,4
160036,javatests_com_google_gerrit_server_config_GitwebConfigTest.java,"@org.junit.Test public void validPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.VALID_CHARACTERS.toCharArray()) { assertTrue((""valid character rejected: "" + c), com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c)); } }",66d291516ef2ba0b08cc3e6ac98ee0a0336ac5c0,@org.junit.Test public void validPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.VALID_CHARACTERS.toCharArray()) { assertThat(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c)).isTrue(); } },7f3782b1f8f8720ec8c4fc0d1b0ee51c5e7e2b65,"@org.junit.Test public void validPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.VALID_CHARACTERS.toCharArray()) { assertWithMessage((""valid character rejected: "" + c)).that(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c)).isTrue(); } }",00d72c28d571792c7fb2d683a995d30d755f7b00,2018-02-19 16:30:37,2
160036,javatests_com_google_gerrit_server_config_GitwebConfigTest.java,"@org.junit.Test public void inalidPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.SOME_INVALID_CHARACTERS.toCharArray()) { assertFalse((""invalid character accepted: "" + c), com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c)); } }",987d03f84a8e1553a23d0737fac7c1445190038f,@org.junit.Test public void inalidPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.SOME_INVALID_CHARACTERS.toCharArray()) { assertThat(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c)).isFalse(); } },4e2cbe3ff203708c9a7c47bfa6c8a8d6405afc13,"@org.junit.Test public void inalidPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.SOME_INVALID_CHARACTERS.toCharArray()) { assertWithMessage((""invalid character accepted: "" + c)).that(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c)).isFalse(); } }",99f68dc380c113e42676640c6b05d602726d8c3d,2018-02-19 16:30:37,2
160081,src_main_java_com_googlesource_gerrit_plugins_gitiles_FilteredRepository.java,"@java.lang.Override public java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getRefs(java.lang.String prefix) throws java.io.IOException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = refFilter.filter(delegate.getRefs(prefix), true); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> result = com.google.common.collect.Maps.newHashMapWithExpectedSize(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs.values()) { result.put(ref.getName().substring(prefix.length()), ref); } return refs; }",179b258ca83f04fc881ee455a62a4d4a5c6caee1,"@java.lang.Override public java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getRefs(java.lang.String prefix) throws java.io.IOException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs; try { refs = perm.filter(delegate.getRefs(prefix), git, com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.defaults()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.io.IOException(e); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> result = com.google.common.collect.Maps.newHashMapWithExpectedSize(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs.values()) { result.put(ref.getName().substring(prefix.length()), ref); } return refs; }",77deb5fae30114242c619c591084734dbe30df83,"@java.lang.Override public java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getRefs(java.lang.String prefix) throws java.io.IOException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs; try { refs = perm.filter(git.getRefDatabase().getRefs(prefix), git, com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.builder().setFilterTagsSeparately(true).build()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.io.IOException(e); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> result = com.google.common.collect.Maps.newHashMapWithExpectedSize(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs.values()) { result.put(ref.getName().substring(prefix.length()), ref); } return refs; }",4083efd91645e16639ac642f2627cb2ddc4ead65,2018-02-19 16:45:36,3
160081,src_main_java_com_googlesource_gerrit_plugins_gitiles_FilteredRepository.java,"@java.lang.Override public org.eclipse.jgit.lib.Ref exactRef(java.lang.String name) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.exactRef(name); if (ref == null) { return null; } return refFilter.filter(com.google.common.collect.ImmutableMap.of(name, ref), true).get(name); }",10062789c23a1087d9d32c04f1b1fe39563cad75,"@java.lang.Override public org.eclipse.jgit.lib.Ref exactRef(java.lang.String name) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.exactRef(name); if (ref == null) { return null; } try { return perm.filter(com.google.common.collect.ImmutableMap.of(name, ref), git, com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.defaults()).get(name); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.io.IOException(e); } }",ca32718289895fb000cdc1e4ed0f5c17e8ec8c78,"@java.lang.Override public org.eclipse.jgit.lib.Ref exactRef(java.lang.String name) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = git.getRefDatabase().exactRef(name); if (ref == null) { return null; } try { return perm.filter(com.google.common.collect.ImmutableMap.of(name, ref), git, com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.builder().setFilterTagsSeparately(true).build()).get(name); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.io.IOException(e); } }",70c5b15f43b0f2a0ea799b8c3cfff2c9ea88672a,2018-02-19 16:45:36,3
160081,src_main_java_com_googlesource_gerrit_plugins_gitiles_FilteredRepository.java,"@java.lang.Override public org.eclipse.jgit.lib.Ref getRef(java.lang.String name) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.getRef(name); if (ref == null) { return null; } return refFilter.filter(com.google.common.collect.ImmutableMap.of(ref.getName(), ref), true).get(ref.getName()); }",cbc191a0f4e5bb626b9ecee20e33e851cfb2057b,"@java.lang.Override public org.eclipse.jgit.lib.Ref getRef(java.lang.String name) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.getRef(name); if (ref == null) { return null; } try { return perm.filter(com.google.common.collect.ImmutableMap.of(ref.getName(), ref), git, com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.defaults()).get(ref.getName()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.io.IOException(e); } }",498c2380c63d838a7dfa17759ceefed36e64af32,"@java.lang.Override public org.eclipse.jgit.lib.Ref getRef(java.lang.String name) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = git.getRefDatabase().getRef(name); if (ref == null) { return null; } try { return perm.filter(com.google.common.collect.ImmutableMap.of(ref.getName(), ref), git, com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.builder().setFilterTagsSeparately(true).build()).get(ref.getName()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.io.IOException(e); } }",7a493638a3ca800b2bc46d17f0a77901ecda02eb,2018-02-19 16:45:36,3
160490,gerrit-common_src_main_java_com_google_gerrit_common_SiteLibraryLoaderUtil.java,"public static void loadSiteLib(java.nio.file.Path libdir) { try { com.google.gerrit.common.IoUtil.loadJARs(com.google.gerrit.common.SiteLibraryLoaderUtil.listJars(libdir)); } catch (java.io.IOException e) { com.google.gerrit.common.SiteLibraryLoaderUtil.log.error((""Error scanning lib directory "" + libdir), e); } }",164357b43ea82257272e35f6859800142d653277,"public static void loadSiteLib(java.nio.file.Path libdir) { try { java.util.List<java.nio.file.Path> jars = com.google.gerrit.common.SiteLibraryLoaderUtil.listJars(libdir); com.google.gerrit.common.IoUtil.loadJARs(jars); com.google.gerrit.common.SiteLibraryLoaderUtil.log.info(""Loaded site libraries: {}"", com.google.gerrit.common.SiteLibraryLoaderUtil.jarList(jars)); } catch (java.io.IOException e) { com.google.gerrit.common.SiteLibraryLoaderUtil.log.error((""Error scanning lib directory "" + libdir), e); } }",3805b4d0e7d2a48ec06bef4fe6141c9d97ce8253,"public static void loadSiteLib(java.nio.file.Path libdir) { try { java.util.List<java.nio.file.Path> jars = com.google.gerrit.common.SiteLibraryLoaderUtil.listJars(libdir); com.google.gerrit.common.IoUtil.loadJARs(jars); com.google.gerrit.common.SiteLibraryLoaderUtil.log.debug(""Loaded site libraries: {}"", com.google.gerrit.common.SiteLibraryLoaderUtil.jarList(jars)); } catch (java.io.IOException e) { com.google.gerrit.common.SiteLibraryLoaderUtil.log.error((""Error scanning lib directory "" + libdir), e); } }",54e140afe4df35a433536f3b5ff7aa1468f8d96a,2018-02-20 10:15:45,2
160350,src_main_java_com_googlesource_gerrit_plugins_singleusergroup_SingleUserGroup.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static com.google.gerrit.common.data.GroupReference accountToGroup(com.google.gerrit.server.account.AccountState s) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid; if (s.getUserName().isPresent()) { uuid = com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup.uuid(s.getUserName().get()); } else { uuid = com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup.uuid(s.getAccount().getId()); } return new com.google.gerrit.common.data.GroupReference(uuid, com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup.nameOf(uuid, s)); }",c4e28ab4499ed783d5fd757353bdcdbdd854cbad,"private static com.google.gerrit.common.data.GroupReference accountToGroup(com.google.gerrit.server.account.AccountState s) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup.uuid((s.getUserName().isPresent() ? s.getUserName().get() : com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup.uuid(s.getAccount().getId()))); return new com.google.gerrit.common.data.GroupReference(uuid, com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup.nameOf(uuid, s)); }",d373ed6cdec3fe59dceeede082dee6b636d5bc47,2018-02-20 11:41:04,4
160052,java_com_google_gerrit_server_mail_receive_MailProcessor.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void warnErrorEmail(com.google.gerrit.server.mail.receive.MailMessage message, java.lang.String reason) { try { com.google.gerrit.server.mail.send.ErrorEmail em = createErrorEmailFactory.create(); em.setTo(message.from()); em.setReplyTo(message.id()); em.setReason(reason); em.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.mail.receive.MailProcessor.log.error(""Cannot send email for erroneous email"", e); throw new java.lang.Error(e); } }",cab65e8f5ae99197dba1999965018cb542da307d,"private void sendRejectionEmail(com.google.gerrit.server.mail.receive.MailMessage message, com.google.gerrit.server.mail.send.InboundEmailRejectionSender.Error reason) { try { com.google.gerrit.server.mail.send.InboundEmailRejectionSender em = emailRejectionSender.create(message.from(), message.id(), reason); em.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.mail.receive.MailProcessor.log.error(""Cannot send email to warn for an error"", e); } }",348e624bae588926390db34ab081c732308bcefe,2018-02-20 13:53:04,11
160052,java_com_google_gerrit_server_mail_send_OutgoingEmail.java,"protected void init() throws com.google.gerrit.common.errors.EmailException { setupSoyContext(); smtpFromAddress = args.fromAddressGenerator.from(fromId); setHeader(""Date"", new java.util.Date()); headers.put(""From"", new com.google.gerrit.server.mail.send.EmailHeader.AddressList(smtpFromAddress)); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_TO, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_CC, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); setHeader(""Message-ID"", """"); for (com.google.gerrit.extensions.api.changes.RecipientType recipientType : accountsToNotify.keySet()) { add(recipientType, accountsToNotify.get(recipientType)); } setHeader(""X-Gerrit-MessageType"", messageClass); textBody = new java.lang.StringBuilder(); htmlBody = new java.lang.StringBuilder(); if (((fromId) != null) && (args.fromAddressGenerator.isGenericAddress(fromId))) { appendText(getFromLine()); } }",254dbd34ba17b6a3d5b6cc61aa80582e7ae32322,"protected void init() throws com.google.gerrit.common.errors.EmailException { setupSoyContext(); smtpFromAddress = args.fromAddressGenerator.from(fromId); setHeader(""Date"", new java.util.Date()); headers.put(""From"", new com.google.gerrit.server.mail.send.EmailHeader.AddressList(smtpFromAddress)); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_TO, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_CC, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); setHeader(""Message-ID"", """"); setHeader(""Auto-Submitted"", ""auto-generated""); for (com.google.gerrit.extensions.api.changes.RecipientType recipientType : accountsToNotify.keySet()) { add(recipientType, accountsToNotify.get(recipientType)); } setHeader(""X-Gerrit-MessageType"", messageClass); textBody = new java.lang.StringBuilder(); htmlBody = new java.lang.StringBuilder(); if (((fromId) != null) && (args.fromAddressGenerator.isGenericAddress(fromId))) { appendText(getFromLine()); } }",2f2a189b955a85def9336674ce5b03e3ecb53ecb,"protected void init() throws com.google.gerrit.common.errors.EmailException { setupSoyContext(); smtpFromAddress = args.fromAddressGenerator.from(fromId); setHeader(FieldName.DATE, new java.util.Date()); headers.put(FieldName.FROM, new com.google.gerrit.server.mail.send.EmailHeader.AddressList(smtpFromAddress)); headers.put(FieldName.TO, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); headers.put(FieldName.CC, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); setHeader(FieldName.MESSAGE_ID, """"); setHeader(MailHeader.AUTO_SUBMITTED.fieldName(), ""auto-generated""); for (com.google.gerrit.extensions.api.changes.RecipientType recipientType : accountsToNotify.keySet()) { add(recipientType, accountsToNotify.get(recipientType)); } setHeader(MailHeader.MESSAGE_TYPE.fieldName(), messageClass); footers.add(((MailHeader.MESSAGE_TYPE.withDelimiter()) + (messageClass))); textBody = new java.lang.StringBuilder(); htmlBody = new java.lang.StringBuilder(); if (((fromId) != null) && (args.fromAddressGenerator.isGenericAddress(fromId))) { appendText(getFromLine()); } }",d2f84a312f7bbbfd6dd5a67dc3d2505ec4a5524f,2018-02-20 13:53:04,11
160052,javatests_com_google_gerrit_acceptance_server_mail_ListMailFilterIT.java,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""receiveemail.filter.mode"", value = ""WHITELIST"") @com.google.gerrit.acceptance.GerritConfig(name = ""receiveemail.filter.patterns"", values = { "".+@gerritcodereview\\.com"", ""a@b\\.com"" }) public void listFilterWhitelistFiltersNotListedUser() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo changeInfo = createChangeAndReplyByEmail(); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeInfo.id).get().messages; assertThat(messages).hasSize(2); }",98e1b5b1201d5b741653511bfb7c9011c4f8b989,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""receiveemail.filter.mode"", value = ""WHITELIST"") @com.google.gerrit.acceptance.GerritConfig(name = ""receiveemail.filter.patterns"", values = { "".+@gerritcodereview\\.com"", ""a@b\\.com"" }) public void listFilterWhitelistFiltersNotListedUser() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo changeInfo = createChangeAndReplyByEmail(); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeInfo.id).get().messages; assertThat(messages).hasSize(2); assertThat(sender.getMessages()).hasSize(0); }",9461e289860ddef2eebb5c5602c4271b8a92dadf,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""receiveemail.filter.mode"", value = ""WHITELIST"") @com.google.gerrit.acceptance.GerritConfig(name = ""receiveemail.filter.patterns"", values = { "".+@gerritcodereview\\.com"", ""a@b\\.com"" }) public void listFilterWhitelistFiltersNotListedUser() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo changeInfo = createChangeAndReplyByEmail(); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeInfo.id).get().messages; assertThat(messages).hasSize(2); assertThat(sender.getMessages()).isEmpty(); }",140909795f1a18e0f69ebe6abdfb05104ed67266,2018-02-20 13:53:04,11
160052,javatests_com_google_gerrit_acceptance_server_mail_MailProcessorIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void sendNotificationOnMissingMetadatas() throws java.lang.Exception { java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); assertThat(comments).hasSize(2); java.lang.String ts = ""null""; java.lang.String txt = newPlaintextBody(((((canonicalWebUrl.get()) + ""#/c/"") + (changeInfo._number)) + ""/1""), ""Test Message"", null, null, null); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields().from(user.emailAddress).textContent((txt + (textFooterForChange(changeInfo._number, ts)))); sender.clear(); mailProcessor.process(b.build()); assertNotifyTo(user); com.google.gerrit.testing.FakeEmailSender.Message message = sender.nextMessage(); assertThat(message.body()).contains(""missing required metadata""); }",327d8f20a78e3150a1f09eaaa66b25f01bc38cc1,"@org.junit.Test public void sendNotificationOnMissingMetadatas() throws java.lang.Exception { java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); assertThat(comments).hasSize(2); java.lang.String ts = ""null""; java.lang.String txt = newPlaintextBody(((((canonicalWebUrl.get()) + ""#/c/"") + (changeInfo._number)) + ""/1""), ""Test Message"", null, null, null); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields().from(user.emailAddress).textContent((txt + (textFooterForChange(changeInfo._number, ts)))); sender.clear(); mailProcessor.process(b.build()); assertNotifyTo(user); com.google.gerrit.testing.FakeEmailSender.Message message = sender.nextMessage(); assertThat(message.body()).contains(""was unable to parse your email""); }",233dff1463f78052df9c3b8443f38341dee3e509,2018-02-20 13:53:04,11
160074,java_com_google_gerrit_server_config_ScheduleConfig.java,"private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String keyStartTime, java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start != null) { java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern(""[E ]HH:mm"").withLocale(java.util.Locale.US); java.time.LocalTime firstStartTime = java.time.LocalTime.parse(start, formatter); java.time.ZonedDateTime startTime = now.with(firstStartTime); try { java.time.DayOfWeek dayOfWeek = formatter.parse(start, java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } } catch (java.lang.IllegalArgumentException e2) { delay = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }",0d5ef59ed32c520b8a1c1d8c5563865057497e3f,"private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String keyStartTime, java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start != null) { java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern(""[E ]HH:mm"").withLocale(java.util.Locale.US); java.time.LocalTime firstStartTime = java.time.LocalTime.parse(start, formatter); java.time.ZonedDateTime startTime = now.with(firstStartTime); try { java.time.DayOfWeek dayOfWeek = formatter.parse(start, java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } } catch (java.time.format.DateTimeParseException | java.lang.IllegalArgumentException e) { delay = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }",8db8be898cb9adccfaaa3cd500296b18465230bf,"private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String keyStartTime, java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start != null) { java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern(""[E ]HH:mm"").withLocale(java.util.Locale.US); java.time.LocalTime firstStartTime = java.time.LocalTime.parse(start, formatter); java.time.ZonedDateTime startTime = now.with(firstStartTime); try { java.time.DayOfWeek dayOfWeek = formatter.parse(start, java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } } catch (java.time.format.DateTimeParseException e) { delay = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }",0ce2a073fcd4115d04a92c66a81e572f49ca781d,2018-02-20 13:53:42,4
159810,java_com_google_gerrit_server_config_ScheduleConfig.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static com.google.gerrit.server.config.ScheduleConfig.Schedule createOrFail(long interval, java.lang.String startTime) { return com.google.gerrit.server.config.ScheduleConfig.Schedule.create(interval, startTime).orElseThrow(java.lang.IllegalStateException::new); }",9372e055431007c046e3a53df7cb2a9996f1546b,"public static com.google.gerrit.server.config.ScheduleConfig.Schedule createOrFail(long interval, java.lang.String startTime) { return com.google.gerrit.server.config.ScheduleConfig.Schedule.create(interval, startTime).orElseThrow(java.lang.IllegalArgumentException::new); }",061774d3058137b8686084a0c0d5e294ba7ef016,2018-02-20 14:23:21,5
159810,java_com_google_gerrit_server_config_ScheduleConfig.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static long computeInitialDelay(long interval, java.lang.String start) { return com.google.gerrit.server.config.ScheduleConfig.computeInitialDelay(interval, start, com.google.gerrit.server.config.ScheduleConfig.NOW); }",fd642a46e148dd66a5d28e7a5ffb8374292f948a,"private static long computeInitialDelay(long interval, java.lang.String start) { return com.google.gerrit.server.config.ScheduleConfig.computeInitialDelay(interval, start, com.google.gerrit.server.config.ScheduleConfig.computeNow()); }",f5a93c01e90466f11b1d6894d3160f50e0539866,2018-02-20 14:23:21,5
159810,java_com_google_gerrit_server_config_ScheduleConfig.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static long computeInitialDelay(long interval, java.lang.String start, java.time.ZonedDateTime now) { checkNotNull(start); java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern(""[E ]HH:mm"").withLocale(java.util.Locale.US); java.time.LocalTime firstStartTime = java.time.LocalTime.parse(start, formatter); java.time.ZonedDateTime startTime = now.with(firstStartTime); try { java.time.DayOfWeek dayOfWeek = formatter.parse(start, java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); long delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } return delay; }",f4339afbb579966b09cb32010197c42c0f956f38,"private static long computeInitialDelay(long interval, java.lang.String start, java.time.ZonedDateTime now) { checkNotNull(start); try { java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern(""[E ]HH:mm"").withLocale(java.util.Locale.US); java.time.LocalTime firstStartTime = java.time.LocalTime.parse(start, formatter); java.time.ZonedDateTime startTime = now.with(firstStartTime); try { java.time.DayOfWeek dayOfWeek = formatter.parse(start, java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); long delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } return delay; } catch (java.time.format.DateTimeParseException e) { return com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } }",d3ed09680eb4f8c2d6d3f462ab14509bec952e82,2018-02-20 14:23:21,5
159810,java_com_google_gerrit_server_config_ScheduleConfig.java,"private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String keyStartTime, java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start != null) { java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern(""[E ]HH:mm"").withLocale(java.util.Locale.US); java.time.LocalTime firstStartTime = java.time.LocalTime.parse(start, formatter); java.time.ZonedDateTime startTime = now.with(firstStartTime); try { java.time.DayOfWeek dayOfWeek = formatter.parse(start, java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } } catch (java.lang.IllegalArgumentException e2) { delay = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }",0d5ef59ed32c520b8a1c1d8c5563865057497e3f,"private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String keyStartTime, java.time.ZonedDateTime now, long interval) { java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start == null) { return com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG; } return com.google.gerrit.server.config.ScheduleConfig.computeInitialDelay(interval, start, now); } catch (java.lang.IllegalArgumentException e2) { return com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } }",0204c09a460f47cc9e00f3c6c822f3fa32fe47b2,"private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String keyStartTime, java.time.ZonedDateTime now, long interval) { java.lang.String start = rc.getString(section, subsection, keyStartTime); if (start == null) { return com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG; } return com.google.gerrit.server.config.ScheduleConfig.computeInitialDelay(interval, start, now); }",5910dcf2b8a507d6eab9518a17cb17ed8c97708f,2018-02-20 14:23:21,5
159810,java_com_google_gerrit_server_config_ScheduleConfig.java,"public static com.google.gerrit.server.config.ScheduleConfig.Builder builder(org.eclipse.jgit.lib.Config config, java.lang.String section) { return new com.google.gerrit.server.config.AutoValue_ScheduleConfig.Builder().setNow(java.time.ZonedDateTime.now(java.time.ZoneId.systemDefault())).setKeyInterval(com.google.gerrit.server.config.ScheduleConfig.KEY_INTERVAL).setKeyStartTime(com.google.gerrit.server.config.ScheduleConfig.KEY_STARTTIME).setConfig(config).setSection(section); }",b70352e8a884774fd696ec24a0e7610f73bddcb1,"public static com.google.gerrit.server.config.ScheduleConfig.Builder builder(org.eclipse.jgit.lib.Config config, java.lang.String section) { return new com.google.gerrit.server.config.AutoValue_ScheduleConfig.Builder().setNow(com.google.gerrit.server.config.ScheduleConfig.NOW).setKeyInterval(com.google.gerrit.server.config.ScheduleConfig.KEY_INTERVAL).setKeyStartTime(com.google.gerrit.server.config.ScheduleConfig.KEY_STARTTIME).setConfig(config).setSection(section); }",6c433876029eb8979f654afbcf55c7d730df56ea,"public static com.google.gerrit.server.config.ScheduleConfig.Builder builder(org.eclipse.jgit.lib.Config config, java.lang.String section) { return new com.google.gerrit.server.config.AutoValue_ScheduleConfig.Builder().setNow(com.google.gerrit.server.config.ScheduleConfig.computeNow()).setKeyInterval(com.google.gerrit.server.config.ScheduleConfig.KEY_INTERVAL).setKeyStartTime(com.google.gerrit.server.config.ScheduleConfig.KEY_STARTTIME).setConfig(config).setSection(section); }",dd143cd914833fafde5842f0e4e9efa36b6667e3,2018-02-20 14:23:21,5
160354,java_com_google_gerrit_server_permissions_ProjectControl.java,"private boolean can(com.google.gerrit.server.permissions.ProjectPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case ACCESS : return ((!(isHidden())) && ((user.isInternalUser()) || (canPerformOnAnyRef(Permission.READ)))) || (isOwner()); case READ : return (!(isHidden())) && (allRefsAreVisible(java.util.Collections.emptySet())); case CREATE_REF : return canAddRefs(); case CREATE_CHANGE : return canCreateChanges(); case RUN_RECEIVE_PACK : return canRunReceivePack(); case RUN_UPLOAD_PACK : return canRunUploadPack(); case PUSH_AT_LEAST_ONE_REF : return canPushToAtLeastOneRef(); case BAN_COMMIT : case READ_REFLOG : case READ_CONFIG : case WRITE_CONFIG : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",fbd06db22bfd8784325abbe7f0af860e196eb184,"private boolean can(com.google.gerrit.server.permissions.ProjectPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case ACCESS : return ((!(isHidden())) && ((user.isInternalUser()) || (canPerformOnAnyRef(Permission.READ)))) || (isOwner()); case READ : return (!(isHidden())) && (allRefsAreVisible(java.util.Collections.emptySet())); case CREATE_REF : return canAddRefs(); case CREATE_CHANGE : return canCreateChanges(); case RUN_RECEIVE_PACK : return canRunReceivePack(); case RUN_UPLOAD_PACK : return canRunUploadPack(); case PUSH_AT_LEAST_ONE_REF : return canPushToAtLeastOneRef(); case READ_CONFIG : return controlForRef(RefNames.REFS_CONFIG).canPerform(Permission.READ); case BAN_COMMIT : case READ_REFLOG : case WRITE_CONFIG : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",d903834a728059aa5e0d09551dc6d1e37a072f16,"private boolean can(com.google.gerrit.server.permissions.ProjectPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case ACCESS : return ((!(isHidden())) && ((user.isInternalUser()) || (canPerformOnAnyRef(Permission.READ)))) || (isOwner()); case READ : return (!(isHidden())) && (allRefsAreVisible(java.util.Collections.emptySet())); case CREATE_REF : return canAddRefs(); case CREATE_CHANGE : return canCreateChanges(); case RUN_RECEIVE_PACK : return canRunReceivePack(); case RUN_UPLOAD_PACK : return canRunUploadPack(); case PUSH_AT_LEAST_ONE_REF : return canPushToAtLeastOneRef(); case READ_CONFIG : return controlForRef(RefNames.REFS_CONFIG).isVisible(); case BAN_COMMIT : case READ_REFLOG : case WRITE_CONFIG : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",e394a4d5de2f767b28c7684643ec333124bfa764,2018-02-21 07:16:48,2
158132,java_com_google_gerrit_acceptance_AbstractDaemonTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void reindexAllGroups() throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.Iterable<com.google.gerrit.common.data.GroupReference> allGroups = groups.getAllGroupReferences(db)::iterator; for (com.google.gerrit.common.data.GroupReference group : allGroups) { groupCache.onCreateGroup(group.getUUID()); } }",ca1385e4db9220737ecacfcd553be3b4f3e03307,"private void reindexAllGroups() throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.Iterable<com.google.gerrit.common.data.GroupReference> allGroups = groups.getAllGroupReferences(db)::iterator; for (com.google.gerrit.common.data.GroupReference group : allGroups) { groupIndexer.index(group.getUUID()); } }",64ae253ccb33c11d49eb76267a76bc483b38f917,2018-02-21 09:33:36,8
159851,gerrit-sshd_src_main_java_com_google_gerrit_sshd_SshLog.java,"private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return ""Command was already destroyed""; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] args = dcmd.getArguments(); for (int i = 1; i < (args.length); i++) { commandName.append(""."").append(args[i]); } return commandName.toString(); }",fb8f919e7c112abba762266fa30d8cb2d2496216,"private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return ""Command was already destroyed""; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] trimmedArgs = dcmd.getTrimmedArguments(); if (trimmedArgs != null) { for (int i = 1; i < (trimmedArgs.length); i++) { commandName.append(""."").append(trimmedArgs[i]); } } return commandName.toString(); }",025ef70aadd9c5f89732b8d54a1dabe283ab3cae,"private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return ""Command was already destroyed""; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] trimmedArgs = dcmd.getTrimmedArguments(); if (trimmedArgs != null) { commandName.append(com.google.common.base.Joiner.on(""."").join(trimmedArgs)); } return commandName.toString(); }",03959d5b7a71929dfae0ef9b9150ca1b542c08b0,2018-02-21 10:42:48,6
156531,java_com_google_gerrit_server_permissions_RefControl.java,private boolean canForceUpdate() { if (canPushWithForce()) { return true; } switch (getUser().getAccessPath()) { case GIT : return false; case JSON_RPC : case REST_API : case SSH_COMMAND : case UNKNOWN : case WEB_BROWSER : default : return ((isOwner()) && (!(isForceBlocked(Permission.PUSH)))) || (projectControl.isAdmin()); } },7c9e4bcd9fb7ed6d7db1c023852bc50b34280985,"private boolean canForceUpdate() { if (canPushWithForce()) { return true; } switch (getUser().getAccessPath()) { case GIT : return false; case JSON_RPC : case REST_API : case SSH_COMMAND : case UNKNOWN : case WEB_BROWSER : default : return ((isOwner()) && (!(canPerform(Permission.PUSH, true, true)))) || (projectControl.isAdmin()); } }",ff7ede978915558ab7122966707694cfd03a3aeb,"private boolean canForceUpdate() { if (canPushWithForce()) { return true; } switch (getUser().getAccessPath()) { case GIT : return false; case JSON_RPC : case REST_API : case SSH_COMMAND : case UNKNOWN : case WEB_BROWSER : default : return ((isOwner()) && (!(isBlocked(Permission.PUSH, false, true)))) || (projectControl.isAdmin()); } }",3c754d4de88b69e8e9bf710810d828b63de4f469,2018-02-21 16:03:30,21
156531,java_com_google_gerrit_server_permissions_RefControl.java,private boolean canDelete() { if (RefNames.REFS_CONFIG.equals(refName)) { return false; } switch (getUser().getAccessPath()) { case GIT : return (canPushWithForce()) || (canPerform(Permission.DELETE)); case JSON_RPC : case REST_API : case SSH_COMMAND : case UNKNOWN : case WEB_BROWSER : default : return ((((isOwner()) && (!(isForceBlocked(Permission.PUSH)))) || (canPushWithForce())) || (canPerform(Permission.DELETE))) || (projectControl.isAdmin()); } },1bd87e3f26dbf5a87ce88a44f2f14e052be5c188,private boolean canDelete() { if (RefNames.REFS_CONFIG.equals(refName)) { return false; } switch (getUser().getAccessPath()) { case GIT : return (canPushWithForce()) || (canPerform(Permission.DELETE)); case JSON_RPC : case REST_API : case SSH_COMMAND : case UNKNOWN : case WEB_BROWSER : default : return (((isOwner()) || (canPushWithForce())) || (canPerform(Permission.DELETE))) || (projectControl.isAdmin()); } },b73b7fc149693b605c001897c4ebaab6cec59341,"private boolean canDelete() { if (RefNames.REFS_CONFIG.equals(refName)) { return false; } switch (getUser().getAccessPath()) { case GIT : return (canPushWithForce()) || (canPerform(Permission.DELETE)); case JSON_RPC : case REST_API : case SSH_COMMAND : case UNKNOWN : case WEB_BROWSER : default : return ((((isOwner()) && (!(isBlocked(Permission.PUSH, false, true)))) || (canPushWithForce())) || (canPerform(Permission.DELETE))) || (projectControl.isAdmin()); } }",4fc40680a408ab66698505f3de90bf0bb34a8777,2018-02-21 16:03:30,21
156531,java_com_google_gerrit_server_permissions_RefControl.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean canPerform(java.lang.String permissionName, boolean isChangeOwner, boolean withForce) { for (com.google.gerrit.server.permissions.PermissionCollection.BlockAccessSection s : relevant.getBlocks(permissionName)) { boolean blocked = false; for (com.google.gerrit.common.data.PermissionRule pr : s.blocks) { if (projectControl.match(pr, isChangeOwner)) { blocked = true; break; } } if (blocked) { for (com.google.gerrit.common.data.PermissionRule pr : s.overrides) { if (projectControl.match(pr, isChangeOwner)) { return (pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW); } } } } for (com.google.gerrit.common.data.PermissionRule pr : relevant.getRules(permissionName)) { if (projectControl.match(pr, isChangeOwner)) { if ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.DENY)) { return false; } if (withForce) { if (((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) && (pr.getForce())) { return true; } } else if ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) { return true; } } } return false; }",85ab9f46441a333d390485cd55be99cf626d6c17,"private boolean canPerform(java.lang.String permissionName, boolean isChangeOwner, boolean withForce) { if (isBlocked(permissionName, isChangeOwner, withForce)) { return false; } for (com.google.gerrit.common.data.PermissionRule pr : relevant.getAllowRules(permissionName)) { if ((com.google.gerrit.server.permissions.RefControl.isAllow(pr, withForce)) && (projectControl.match(pr, isChangeOwner))) { return true; } } return false; }",c31ffacf7e099709b8ebd7446b71914c8a6b37bb,2018-02-21 16:03:30,21
156531,java_com_google_gerrit_server_permissions_RefControl.java,boolean canForceEditTopicName() { return canForcePerform(Permission.EDIT_TOPIC_NAME); },cbb8c664e21758443ed831f971b295f93d6ccfc2,boolean canForceEditTopicName() { return canPerform(Permission.EDIT_TOPIC_NAME); },c51e7a623ab1b0eb228a30f504b337ed05bb0f1f,"boolean canForceEditTopicName() { return canPerform(Permission.EDIT_TOPIC_NAME, false, true); }",cb804599124353f7a9ec90cec39d0876d13d4f5c,2018-02-21 16:03:30,21
156531,java_com_google_gerrit_server_permissions_PermissionCollection.java,com.google.gerrit.server.permissions.ProjectRef getRuleProps(com.google.gerrit.common.data.PermissionRule rule) { return ruleProps.get(rule); },af80bf80f69025ac64acd20027c2c8a6cc5fa8ac,public java.util.List<com.google.gerrit.common.data.PermissionRule> getRules(java.lang.String perm) { return rulesByPermission.get(perm); },0e06c5e74e682c23ca603207a8b0cf0ff2fc3a35,"java.util.List<com.google.gerrit.common.data.PermissionRule> getAllowRules(java.lang.String perm) { java.util.List<com.google.gerrit.common.data.PermissionRule> ps = rulesByPermission.get(perm); if (ps == null) { ps = calculateAllowRules(perm); rulesByPermission.put(perm, ps); } return ps; }",e64e8a7d380d393c9b4b17e8932a479afb0fcd92,2018-02-21 16:03:30,21
156531,java_com_google_gerrit_server_permissions_PermissionCollection.java,"public java.lang.Iterable<java.util.Map.Entry<java.lang.String, java.util.List<com.google.gerrit.common.data.PermissionRule>>> getDeclaredPermissions() { return rules.entrySet(); }",3a050812ad00434ee03a71e7443424a005190bf0,public java.util.List<com.google.gerrit.server.permissions.PermissionCollection.BlockAccessSection> getBlocks(java.lang.String perm) { return blockByPermission.get(perm); },4328f88500b513b55ae98cee50f4e310caeb5fad,"private java.util.List<com.google.gerrit.common.data.PermissionRule> calculateAllowRules(java.lang.String permName) { java.util.Set<com.google.gerrit.server.permissions.PermissionCollection.SeenRule> seen = new java.util.HashSet<>(); java.util.List<com.google.gerrit.common.data.PermissionRule> r = new java.util.ArrayList<>(); for (com.google.gerrit.common.data.AccessSection s : accessSectionsUpward) { com.google.gerrit.common.data.Permission p = s.getPermission(permName); if (p == null) { continue; } for (com.google.gerrit.common.data.PermissionRule pr : p.getRules()) { com.google.gerrit.server.permissions.PermissionCollection.SeenRule sr = com.google.gerrit.server.permissions.PermissionCollection.SeenRule.create(s, pr); if (seen.contains(sr)) { continue; } seen.add(sr); if ((pr.getAction()) == (BLOCK)) { continue; } if ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.DENY)) { continue; } r.add(pr); } if (p.getExclusiveGroup()) { break; } } return r; }",18961e8f28d027f62d791c7fc49dafa16b02cfdd,2018-02-21 16:03:30,21
156531,java_com_google_gerrit_server_permissions_PermissionCollection.java,public java.util.List<com.google.gerrit.common.data.PermissionRule> getPermission(java.lang.String permissionName) { java.util.List<com.google.gerrit.common.data.PermissionRule> r = rules.get(permissionName); return r != null ? r : java.util.Collections.<com.google.gerrit.common.data.PermissionRule>emptyList(); },65bce795a1013e792e974032074974dd9cfa4f1a,public java.util.List<com.google.gerrit.common.data.PermissionRule> getPermission(java.lang.String permissionName) { java.util.List<com.google.gerrit.common.data.PermissionRule> r = rulesByPermission.get(permissionName); return r != null ? r : java.util.Collections.<com.google.gerrit.common.data.PermissionRule>emptyList(); },48c92206b2f55d1e7810d4d103976b1064578825,private java.util.List<java.util.List<com.google.gerrit.common.data.Permission>> calculateBlockRules(java.lang.String permName) { java.util.List<java.util.List<com.google.gerrit.common.data.Permission>> result = new java.util.ArrayList<>(); for (java.util.List<com.google.gerrit.common.data.AccessSection> secs : this.accessSectionsPerProjectDownward) { java.util.List<com.google.gerrit.common.data.Permission> perms = new java.util.ArrayList<>(); boolean blockFound = false; for (com.google.gerrit.common.data.AccessSection sec : secs) { com.google.gerrit.common.data.Permission p = sec.getPermission(permName); if (p == null) { continue; } for (com.google.gerrit.common.data.PermissionRule pr : p.getRules()) { if (blockFound || ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.BLOCK))) { blockFound = true; break; } } perms.add(p); } if (blockFound) { result.add(perms); } } return result; },23dac89fc932c40922c42fda344147f66b3680ea,2018-02-21 16:03:30,21
156531,java_com_google_gerrit_server_permissions_RefControl.java,"private com.google.gerrit.common.data.PermissionRange toRange(java.lang.String permissionName, java.util.List<com.google.gerrit.common.data.PermissionRule> ruleList) { java.util.Map<com.google.gerrit.server.permissions.ProjectRef, com.google.gerrit.server.permissions.RefControl.AllowedRange> ranges = new java.util.HashMap<>(); for (com.google.gerrit.common.data.PermissionRule rule : ruleList) { com.google.gerrit.server.permissions.ProjectRef p = relevant.getRuleProps(rule); com.google.gerrit.server.permissions.RefControl.AllowedRange r = ranges.get(p); if (r == null) { r = new com.google.gerrit.server.permissions.RefControl.AllowedRange(); ranges.put(p, r); } r.update(rule); } int allowMin = 0; int allowMax = 0; int blockMin = java.lang.Integer.MIN_VALUE; int blockMax = java.lang.Integer.MAX_VALUE; for (com.google.gerrit.server.permissions.RefControl.AllowedRange r : ranges.values()) { allowMin = java.lang.Math.min(allowMin, r.getAllowMin()); allowMax = java.lang.Math.max(allowMax, r.getAllowMax()); blockMin = java.lang.Math.max(blockMin, r.getBlockMin()); blockMax = java.lang.Math.min(blockMax, r.getBlockMax()); } int min = java.lang.Math.max(allowMin, (blockMin + 1)); int max = java.lang.Math.min(allowMax, (blockMax - 1)); return new com.google.gerrit.common.data.PermissionRange(permissionName, min, max); }",86a95eb8a5a21dd0e9a7e8715f1b676e94d24167,"private com.google.gerrit.common.data.PermissionRange toRange(java.lang.String permissionName, java.util.List<com.google.gerrit.common.data.PermissionRule> ruleList) { return new com.google.gerrit.common.data.PermissionRange(permissionName, (-1), 1); }",6173ec0f1d12dcce78a1b87d1a2e1112d372f873,"private static boolean isAllow(com.google.gerrit.common.data.PermissionRule pr, boolean withForce) { return ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) && ((pr.getForce()) || (!withForce)); }",a02e465a20390708560dfcbf32f1e3adf143cb89,2018-02-21 16:03:30,21
156531,java_com_google_gerrit_server_permissions_PermissionCollection.java,"java.util.List<com.google.gerrit.common.data.PermissionRule> getOverridden(java.lang.String permissionName) { return firstNonNull(overridden.get(permissionName), java.util.Collections.<com.google.gerrit.common.data.PermissionRule>emptyList()); }",e97e81dbf11f813f308f3ee91ffead78f1da92e7,"static java.util.List<com.google.gerrit.common.data.PermissionRule> findRules(java.util.List<com.google.gerrit.common.data.AccessSection> sections, java.lang.String permName) { java.util.List<com.google.gerrit.common.data.PermissionRule> r = new java.util.ArrayList<>(); for (com.google.gerrit.common.data.AccessSection s : sections) { com.google.gerrit.common.data.Permission p = s.getPermission(permName); if (p == null) { continue; } for (com.google.gerrit.common.data.PermissionRule pr : p.getRules()) { r.add(pr); } if (p.getExclusiveGroup()) { break; } } return r; }",8241c1b9714b27fee35b3f74341717b6207278d6,"java.util.List<java.util.List<com.google.gerrit.common.data.Permission>> getBlockRules(java.lang.String perm) { java.util.List<java.util.List<com.google.gerrit.common.data.Permission>> ps = blockPerProjectByPermission.get(perm); if (ps == null) { ps = calculateBlockRules(perm); blockPerProjectByPermission.put(perm, ps); } return ps; }",1a5e3a3f639bdd32c18a6e4849c65a8951e472a6,2018-02-21 16:03:30,21
160950,gerrit-server_src_main_java_com_google_gerrit_server_schema_Schema_159.java,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE; if (ui.yesno(false, ""Migrate draft changes to work-in-progress changes (default is private)?"")) { strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.WORK_IN_PROGRESS; } ui.message(java.lang.String.format(""Replace draft changes with %s changes ..."", strategy.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE)) ? ""is_private"" : ""work_in_progress""; e.execute(java.lang.String.format((""UPDATE changes SET %s = 'Y', created_on = created_on WHERE status = 'd' OR "" + (""EXISTS (SELECT * FROM patch_sets WHERE "" + ""patch_sets.change_id = changes.change_id AND patch_sets.draft = 'Y')"")), column)); e.execute(""UPDATE changes SET status = 'n', created_on = created_on WHERE status = 'd'""); } ui.message(""done""); }",115b8a7ca44cba3974d1ec654975004b72156e6d,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.WORK_IN_PROGRESS; if (ui.yesno(false, ""Migrate draft changes to private changes (default is work-in-progress)?"")) { strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE; } ui.message(java.lang.String.format(""Replace draft changes with %s changes ..."", strategy.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE)) ? ""is_private"" : ""work_in_progress""; e.execute(java.lang.String.format((""UPDATE changes SET %s = 'Y', created_on = created_on WHERE status = 'd' OR "" + (""EXISTS (SELECT * FROM patch_sets WHERE "" + ""patch_sets.change_id = changes.change_id AND patch_sets.draft = 'Y')"")), column)); e.execute(""UPDATE changes SET status = 'n', created_on = created_on WHERE status = 'd'""); } ui.message(""done""); }",2eef0a20656beabe9992ac75e4debedc1b7e449a,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.WORK_IN_PROGRESS; if (ui.yesno(false, ""Migrate draft changes to private changes (default is work-in-progress)"")) { strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE; } ui.message(java.lang.String.format(""Replace draft changes with %s changes ..."", strategy.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE)) ? ""is_private"" : ""work_in_progress""; e.execute(java.lang.String.format((""UPDATE changes SET %s = 'Y', created_on = created_on WHERE status = 'd' OR "" + (""EXISTS (SELECT * FROM patch_sets WHERE "" + ""patch_sets.change_id = changes.change_id AND patch_sets.draft = 'Y')"")), column)); e.execute(""UPDATE changes SET status = 'n', created_on = created_on WHERE status = 'd'""); } ui.message(""done""); }",f6ff7680b33f0514e98d962975ceb62fa2203d86,2018-02-21 17:45:42,4
160951,gerrit-server_src_main_java_com_google_gerrit_server_schema_Schema_159.java,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.WORK_IN_PROGRESS; if (ui.yesno(false, ""Migrate draft changes to private changes (default is work-in-progress)?"")) { strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE; } ui.message(java.lang.String.format(""Replace draft changes with %s changes ..."", strategy.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE)) ? ""is_private"" : ""work_in_progress""; e.execute(java.lang.String.format((""UPDATE changes SET %s = 'Y', created_on = created_on WHERE status = 'd' OR "" + (""EXISTS (SELECT * FROM patch_sets WHERE "" + ""patch_sets.change_id = changes.change_id AND patch_sets.draft = 'Y')"")), column)); e.execute(""UPDATE changes SET status = 'n', created_on = created_on WHERE status = 'd'""); } ui.message(""done""); }",2eef0a20656beabe9992ac75e4debedc1b7e449a,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.WORK_IN_PROGRESS; if (ui.yesno(false, ""Migrate draft changes to private changes (default is work-in-progress)?"")) { strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE; } ui.message(java.lang.String.format(""Replace draft changes with %s changes ..."", strategy.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE)) ? ""is_private"" : ""work_in_progress""; e.execute(java.lang.String.format((""UPDATE changes "" + (((((((((""SET %s = 'Y', "" + "" status = 'n' "") + "" created_on = created_on "") + ""WHERE status = 'd' "") + "" OR (status = 'n' "") + "" AND EXISTS "") + "" (SELECT * "") + "" FROM patch_sets "") + "" WHERE patch_sets.change_id = changes.change_id "") + "" AND patch_sets.draft = 'Y')) "")), column)); } ui.message(""done""); }",1ab01c6d852b9dddda23202918766617fb0ca30c,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.WORK_IN_PROGRESS; if (ui.yesno(false, ""Migrate draft changes to private changes (default is work-in-progress)"")) { strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE; } ui.message(java.lang.String.format(""Replace draft changes with %s changes ..."", strategy.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE)) ? ""is_private"" : ""work_in_progress""; e.execute(java.lang.String.format((""UPDATE changes "" + (((((((((""SET %s = 'Y', "" + "" status = 'n', "") + "" created_on = created_on "") + ""WHERE status = 'd' "") + "" OR (status = 'n' "") + "" AND EXISTS "") + "" (SELECT * "") + "" FROM patch_sets "") + "" WHERE patch_sets.change_id = changes.change_id "") + "" AND patch_sets.draft = 'Y')) "")), column)); } ui.message(""done""); }",fbd32b90ebaa898bd543abf9e64070a0e4d1ea57,2018-02-21 17:45:42,4
160990,java_com_google_gerrit_sshd_SshLog.java,"private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return ""Command was already destroyed""; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] args = dcmd.getArguments(); for (int i = 1; i < (args.length); i++) { commandName.append(""."").append(args[i]); } return commandName.toString(); }",fb8f919e7c112abba762266fa30d8cb2d2496216,"private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return ""Command was already destroyed""; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] trimmedArgs = dcmd.getTrimmedArguments(); if (trimmedArgs != null) { commandName.append(com.google.gerrit.sshd.Joiner.on(""."").join(trimmedArgs)); } return commandName.toString(); }",a38c4124aefe963580656ccfdd3a1846bec0e2c0,"private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return ""Command was already destroyed""; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] trimmedArgs = dcmd.getTrimmedArguments(); if (trimmedArgs != null) { commandName.append(com.google.common.base.Joiner.on(""."").join(trimmedArgs)); } return commandName.toString(); }",03959d5b7a71929dfae0ef9b9150ca1b542c08b0,2018-02-21 23:40:18,3
129954,src_main_java_com_ericsson_gerrit_plugins_highavailability_Configuration.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.lang.String myUrl() { throw new java.lang.UnsupportedOperationException(""peerInfo.jgroups.myUrl not supported""); }",8a6dfa92dde717d5a8e15c0ba90ebbd41b695058,public java.lang.String myUrl() { return myUrl; },9917125c624356f4e9a1758810e3c183e5c30083,2018-02-22 09:34:35,5
161992,src_test_java_com_ericsson_gerrit_plugins_highavailability_ConfigurationTest.java,"@org.junit.Test public void testHealthCheckEnabled() throws java.lang.Exception { when(globalPluginConfigMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HEALTH_CHECK_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_HEALTH_CHECK_ENABLED)).thenReturn(false); initializeConfiguration(); assertThat(configuration.healthCheck().enabled()).isFalse(); }",43b1a610adfc1f042fb3f378b18d162f83d0c518,"@org.junit.Test public void testHealthCheckEnabled() throws java.lang.Exception { assertThat(getConfiguration().healthCheck().enabled()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HEALTH_CHECK_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE_KEY, false); assertThat(getConfiguration().healthCheck().enabled()).isFalse(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HEALTH_CHECK_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE_KEY, true); assertThat(getConfiguration().healthCheck().enabled()).isTrue(); }",442ef23d45012fda4f3ee9ee745c9ee41f16bedb,"@org.junit.Test public void testHealthCheckEnabled() throws java.lang.Exception { assertThat(getConfiguration().healthCheck().enabled()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_HEALTH_CHECK_ENABLED); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HEALTH_CHECK_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE_KEY, false); assertThat(getConfiguration().healthCheck().enabled()).isFalse(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HEALTH_CHECK_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE_KEY, true); assertThat(getConfiguration().healthCheck().enabled()).isTrue(); }",69c3c2dcae7a8e12c3db16b7c5470546cd97fe15,2018-02-23 16:09:20,5
161992,src_test_java_com_ericsson_gerrit_plugins_highavailability_ConfigurationTest.java,"@org.junit.Test public void testGetJGroupsSkipInterface() throws java.lang.Exception { when(globalPluginConfigMock.getEnum(com.ericsson.gerrit.plugins.highavailability.Configuration.PEER_INFO_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.STRATEGY_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_PEER_INFO_STRATEGY)).thenReturn(Configuration.PeerInfoStrategy.JGROUPS); initializeConfiguration(); assertThat(configuration.jgroups().skipInterface()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SKIP_INTERFACE_LIST); when(globalPluginConfigMock.getStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SKIP_INTERFACE_KEY)).thenReturn(new java.lang.String[]{ ""lo*"", ""eth0"" }); initializeConfiguration(); assertThat(configuration.jgroups().skipInterface()).containsAllOf(""lo*"", ""eth0"").inOrder(); }",a616cee604e061049407588a145a1af1788dd078,"@org.junit.Test public void testGetJGroupsSkipInterface() throws java.lang.Exception { assertThat(getConfiguration().jgroups().skipInterface()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SKIP_INTERFACE_LIST); globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SKIP_INTERFACE_KEY, wiremock.com.google.common.collect.Lists.newArrayList(""lo*"", ""eth0"")); assertThat(getConfiguration().jgroups().skipInterface()).containsAllOf(""lo*"", ""eth0"").inOrder(); }",cf2c581611724eec0609e3dec60efcd9fc3e2945,"@org.junit.Test public void testGetJGroupsSkipInterface() throws java.lang.Exception { assertThat(getConfiguration().jgroups().skipInterface()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SKIP_INTERFACE_LIST); globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SKIP_INTERFACE_KEY, com.google.common.collect.ImmutableList.of(""lo*"", ""eth0"")); assertThat(getConfiguration().jgroups().skipInterface()).containsAllOf(""lo*"", ""eth0"").inOrder(); }",2496a7f16d0284ac6b3bd248f916b7a3ec3c5b89,2018-02-23 16:09:20,5
161992,src_test_java_com_ericsson_gerrit_plugins_highavailability_ConfigurationTest.java,"@org.junit.Test public void testGetJGroupsCluster() throws java.lang.Exception { when(globalPluginConfigMock.getEnum(com.ericsson.gerrit.plugins.highavailability.Configuration.PEER_INFO_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.STRATEGY_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_PEER_INFO_STRATEGY)).thenReturn(Configuration.PeerInfoStrategy.JGROUPS); initializeConfiguration(); assertThat(configuration.jgroups().clusterName()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_CLUSTER_NAME); when(globalPluginConfigMock.getString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUSTER_NAME_KEY)).thenReturn(""foo""); initializeConfiguration(); assertThat(configuration.jgroups().clusterName()).isEqualTo(""foo""); }",da0dc478c6600aaf89cdeb381855f99e8bb43e0b,"@org.junit.Test public void testGetJGroupsCluster() throws java.lang.Exception { globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUSTER_NAME_KEY, ""foo""); assertThat(getConfiguration().jgroups().clusterName()).isEqualTo(""foo""); }",aed6b4eb816776bb6a73fd36e2409ccc1bc97563,"@org.junit.Test public void testGetJGroupsCluster() throws java.lang.Exception { assertThat(getConfiguration().jgroups().clusterName()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_CLUSTER_NAME); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUSTER_NAME_KEY, ""foo""); assertThat(getConfiguration().jgroups().clusterName()).isEqualTo(""foo""); }",821f001c4598e729c19a6c6006fd570988cf943c,2018-02-23 16:09:20,5
161992,src_test_java_com_ericsson_gerrit_plugins_highavailability_ConfigurationTest.java,"@org.junit.Test public void testGetWebsessionSynchronize() throws java.lang.Exception { when(globalPluginConfigMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SYNCHRONIZE)).thenReturn(true); initializeConfiguration(); assertThat(configuration.websession().synchronize()).isTrue(); when(globalPluginConfigMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SYNCHRONIZE)).thenReturn(false); initializeConfiguration(); assertThat(configuration.websession().synchronize()).isFalse(); when(globalPluginConfigMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SYNCHRONIZE)).thenThrow(new java.lang.IllegalArgumentException(com.ericsson.gerrit.plugins.highavailability.ConfigurationTest.ERROR_MESSAGE)); initializeConfiguration(); assertThat(configuration.websession().synchronize()).isTrue(); }",d69e9833732b80a8ae7d0f9c033c850c5d69d130,"@org.junit.Test public void testGetWebsessionSynchronize() throws java.lang.Exception { assertThat(getConfiguration().websession().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().websession().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, ""invalidBoolean""); assertThat(getConfiguration().websession().synchronize()).isTrue(); }",149a3e74b92b48a1d8e3aab4741c2c30c0d521a9,"@org.junit.Test public void testGetWebsessionSynchronize() throws java.lang.Exception { assertThat(getConfiguration().websession().synchronize()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SYNCHRONIZE); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().websession().synchronize()).isFalse(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, true); assertThat(getConfiguration().websession().synchronize()).isTrue(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, ""invalidBoolean""); assertThat(getConfiguration().websession().synchronize()).isTrue(); }",1d5d9554871e1527ad3b592b3c849c1e943a0e55,2018-02-23 16:09:20,5
161992,src_test_java_com_ericsson_gerrit_plugins_highavailability_ConfigurationTest.java,"@org.junit.Test public void testGetCachePatterns() throws java.lang.Exception { initializeConfiguration(); com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher matcher = new com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher(configuration); for (java.lang.String cache : com.google.common.collect.ImmutableList.of(""accounts_byemail"", ""ldap_groups"", ""project_list"", ""my_cache_a"", ""my_cache_b"", ""other"")) { assertThat(matcher.matches(cache)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of(""ldap_groups_by_include"", ""foo"")) { assertThat(matcher.matches(cache)).isFalse(); } }",93fe5562fa808c1fbe1b4750eb2c7f71c7163feb,"@org.junit.Test public void testGetCachePatterns() throws java.lang.Exception { globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, wiremock.com.google.common.collect.Lists.newArrayList(""^my_cache.*"", ""other"")); com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher matcher = new com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher(getConfiguration()); for (java.lang.String cache : com.google.common.collect.ImmutableList.of(""accounts_byemail"", ""ldap_groups"", ""project_list"", ""my_cache_a"", ""my_cache_b"", ""other"")) { assertThat(matcher.matches(cache)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of(""ldap_groups_by_include"", ""foo"")) { assertThat(matcher.matches(cache)).isFalse(); } }",c15b7b03ea41cb8c52c691040745e04867b1a7a3,"@org.junit.Test public void testGetCachePatterns() throws java.lang.Exception { globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, com.google.common.collect.ImmutableList.of(""^my_cache.*"", ""other"")); com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher matcher = new com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher(getConfiguration()); for (java.lang.String cache : com.google.common.collect.ImmutableList.of(""accounts_byemail"", ""ldap_groups"", ""project_list"", ""my_cache_a"", ""my_cache_b"", ""other"")) { assertThat(matcher.matches(cache)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of(""ldap_groups_by_include"", ""foo"")) { assertThat(matcher.matches(cache)).isFalse(); } }",d7f5c9f69a363183f9fb02e72260a08b4ee434a2,2018-02-23 16:09:20,5
161992,src_test_java_com_ericsson_gerrit_plugins_highavailability_ConfigurationTest.java,"@org.junit.Test public void testGetEventSynchronize() throws java.lang.Exception { when(globalPluginConfigMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SYNCHRONIZE)).thenReturn(true); initializeConfiguration(); assertThat(configuration.event().synchronize()).isTrue(); when(globalPluginConfigMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SYNCHRONIZE)).thenReturn(false); initializeConfiguration(); assertThat(configuration.event().synchronize()).isFalse(); when(globalPluginConfigMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SYNCHRONIZE)).thenThrow(new java.lang.IllegalArgumentException(com.ericsson.gerrit.plugins.highavailability.ConfigurationTest.ERROR_MESSAGE)); initializeConfiguration(); assertThat(configuration.event().synchronize()).isTrue(); }",09e92d30da9aa2594c60937ff68ad46909cde589,"@org.junit.Test public void testGetEventSynchronize() throws java.lang.Exception { assertThat(getConfiguration().event().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().event().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, ""invalidBoolean""); assertThat(getConfiguration().event().synchronize()).isTrue(); }",33eef7120aafa47b276369dcf887c842c78cc839,"@org.junit.Test public void testGetEventSynchronize() throws java.lang.Exception { assertThat(getConfiguration().event().synchronize()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SYNCHRONIZE); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().event().synchronize()).isFalse(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, true); assertThat(getConfiguration().event().synchronize()).isTrue(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, ""invalidBoolean""); assertThat(getConfiguration().event().synchronize()).isTrue(); }",6f25d33b89a616dac53cf230eb9890142a2f07c5,2018-02-23 16:09:20,5
161992,src_test_java_com_ericsson_gerrit_plugins_highavailability_ConfigurationTest.java,"@org.junit.Test public void testGetIndexSynchronize() throws java.lang.Exception { when(globalPluginConfigMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SYNCHRONIZE)).thenReturn(true); initializeConfiguration(); assertThat(configuration.index().synchronize()).isTrue(); when(globalPluginConfigMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SYNCHRONIZE)).thenReturn(false); initializeConfiguration(); assertThat(configuration.index().synchronize()).isFalse(); when(globalPluginConfigMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SYNCHRONIZE)).thenThrow(new java.lang.IllegalArgumentException(com.ericsson.gerrit.plugins.highavailability.ConfigurationTest.ERROR_MESSAGE)); initializeConfiguration(); assertThat(configuration.index().synchronize()).isTrue(); }",e700e98fcf8d7545bbbfb8c202acc547930028c0,"@org.junit.Test public void testGetIndexSynchronize() throws java.lang.Exception { assertThat(getConfiguration().index().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().index().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, ""invalidBoolean""); assertThat(getConfiguration().index().synchronize()).isTrue(); }",68a25b1643828c8b3bc09aaa59c11ec4cfecea50,"@org.junit.Test public void testGetIndexSynchronize() throws java.lang.Exception { assertThat(getConfiguration().index().synchronize()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SYNCHRONIZE); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().index().synchronize()).isFalse(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, true); assertThat(getConfiguration().index().synchronize()).isTrue(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, ""invalidBoolean""); assertThat(getConfiguration().index().synchronize()).isTrue(); }",1bbde33ed2121b9280344b87b39f67e9ccfa2aa4,2018-02-23 16:09:20,5
162050,src_test_java_com_ericsson_gerrit_plugins_highavailability_cache_CachePattenMatcherTest.java,,,"@org.junit.Test public void testCachePatternMatcher() throws java.lang.Exception { when(configurationMock.cache().patterns()).thenReturn(wiremock.com.google.common.collect.Lists.newArrayList(""^my_cache.*"", ""other"")); com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher matcher = new com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher(configurationMock); for (java.lang.String cache : com.google.common.collect.ImmutableList.of(""accounts_byemail"", ""ldap_groups"", ""project_list"", ""my_cache_a"", ""my_cache_b"", ""other"")) { assertThat(matcher.matches(cache)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of(""ldap_groups_by_include"", ""foo"")) { assertThat(matcher.matches(cache)).isFalse(); } }",93cff21db632a25970144387c76faf155bfa3650,"@org.junit.Test public void testCachePatternMatcher() throws java.lang.Exception { when(configurationMock.cache().patterns()).thenReturn(com.google.common.collect.ImmutableList.of(""^my_cache.*"", ""other"")); com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher matcher = new com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher(configurationMock); for (java.lang.String cache : com.google.common.collect.ImmutableList.of(""accounts_byemail"", ""ldap_groups"", ""project_list"", ""my_cache_a"", ""my_cache_b"", ""other"")) { assertThat(matcher.matches(cache)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of(""ldap_groups_by_include"", ""foo"")) { assertThat(matcher.matches(cache)).isFalse(); } }",a8557b7ba81d6d5db3ab5e89ac5dd3d74d15126a,2018-02-23 16:09:20,2
162050,src_test_java_com_ericsson_gerrit_plugins_highavailability_ConfigurationTest.java,"@org.junit.Test public void testGetCachePatterns() throws java.lang.Exception { globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, com.google.common.collect.Lists.newArrayList(""^my_cache.*"", ""other"")); com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher matcher = new com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher(getConfiguration()); for (java.lang.String cache : com.google.common.collect.ImmutableList.of(""accounts_byemail"", ""ldap_groups"", ""project_list"", ""my_cache_a"", ""my_cache_b"", ""other"")) { assertThat(matcher.matches(cache)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of(""ldap_groups_by_include"", ""foo"")) { assertThat(matcher.matches(cache)).isFalse(); } }",14f9db5e7ed39028783e172e4ed9b769430edfd5,"@org.junit.Test public void testGetCachePatterns() throws java.lang.Exception { globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, com.google.common.collect.Lists.newArrayList(""^my_cache.*"", ""other"")); assertThat(getConfiguration().cache().patterns()).containsExactly(""^my_cache.*"", ""other""); }",4c308e7ee11c1fc21ad9448215e939cf92fe19cb,"@org.junit.Test public void testGetCachePatterns() throws java.lang.Exception { globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, com.google.common.collect.ImmutableList.of(""^my_cache.*"", ""other"")); assertThat(getConfiguration().cache().patterns()).containsExactly(""^my_cache.*"", ""other""); }",47f97b3ea70b15aee890c35297511dd1ed0de2d7,2018-02-23 16:09:20,2
161992,src_test_java_com_ericsson_gerrit_plugins_highavailability_ConfigurationTest.java,"@org.junit.Test public void testGetCacheSynchronize() throws java.lang.Exception { when(globalPluginConfigMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SYNCHRONIZE)).thenReturn(true); initializeConfiguration(); assertThat(configuration.cache().synchronize()).isTrue(); when(globalPluginConfigMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SYNCHRONIZE)).thenReturn(false); initializeConfiguration(); assertThat(configuration.cache().synchronize()).isFalse(); when(globalPluginConfigMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SYNCHRONIZE)).thenThrow(new java.lang.IllegalArgumentException(com.ericsson.gerrit.plugins.highavailability.ConfigurationTest.ERROR_MESSAGE)); initializeConfiguration(); assertThat(configuration.cache().synchronize()).isTrue(); }",5c6867ac71ef50e5d20976766ccdc27be9f4507a,"@org.junit.Test public void testGetCacheSynchronize() throws java.lang.Exception { assertThat(getConfiguration().cache().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().cache().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, ""invalidBoolean""); assertThat(getConfiguration().cache().synchronize()).isTrue(); }",750f41b77ec32d3df432cf3e5b933e7c7865f7f3,"@org.junit.Test public void testGetCacheSynchronize() throws java.lang.Exception { assertThat(getConfiguration().cache().synchronize()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SYNCHRONIZE); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().cache().synchronize()).isFalse(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, true); assertThat(getConfiguration().cache().synchronize()).isTrue(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, ""invalidBoolean""); assertThat(getConfiguration().cache().synchronize()).isTrue(); }",f8f3a8839bef6ce1526ae5425a89e79416375682,2018-02-23 16:09:20,5
158613,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsAuthToken.java,static boolean onTime(java.lang.String dateTime) { java.lang.String now = com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.print(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now()); return (now.compareTo(dateTime)) <= 0; },52a16b34330fcdd7e018ff28e8db0ea167d73e4e,static boolean onTime(java.lang.String dateTime) { return (com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMAT.now().compareTo(dateTime)) <= 0; },38f0aaa1af88381d133c1a3dd6a2636a8fea6442,static boolean onTime(java.lang.String dateTime) { return (com.googlesource.gerrit.plugins.lfs.LfsDateTime.now().compareTo(dateTime)) <= 0; },b769a43664c37a74602edabdaf0b4f29d3c802d7,2018-02-25 14:24:31,8
158613,src_test_java_com_googlesource_gerrit_plugins_lfs_LfsAuthTokenTest.java,@org.junit.Test public void testOnTime() throws java.lang.Exception { org.joda.time.DateTime now = now(); assertThat(Verifier.onTime(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.print(now.plusMillis(1)))).isTrue(); },6618273511d080d69b6b2f1519c7baddc366aa50,@org.junit.Test public void testOnTime() throws java.lang.Exception { assertThat(Verifier.onTime(formatter.format(now().plusMillis(1)))).isTrue(); },05fceed43e18d76197d6e1c1518e8bfeb67716f9,@org.junit.Test public void testOnTime() throws java.lang.Exception { assertThat(Verifier.onTime(com.googlesource.gerrit.plugins.lfs.LfsDateTime.format(now().plusMillis(1)))).isTrue(); },eb928ddc68331271b7b7be969f46d05887c8a6d0,2018-02-25 14:24:31,8
158613,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsDateTime.java,,,public java.lang.String format(java.time.Instant instant) { return format.format(instant); },7766c970a4858fbb78ae6fa98f37c082f25c9e6b,public static java.lang.String format(java.time.Instant instant) { return com.googlesource.gerrit.plugins.lfs.LfsDateTime.FORMAT.format(instant); },5247dc4c4ecf943f4888615c78ccc0a55ad1f04f,2018-02-25 14:24:31,8
158613,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsDateTime.java,,,public java.lang.String now(int secondsToAdd) { return format.format(java.time.Instant.now().plusSeconds(secondsToAdd)); },980162ccbd284072d57cca417ddce054c78129bd,public static java.lang.String now(int secondsToAdd) { return com.googlesource.gerrit.plugins.lfs.LfsDateTime.FORMAT.format(java.time.Instant.now().plusSeconds(secondsToAdd)); },3dfed0a81f4f711739367f8c938db3214f8ffc2c,2018-02-25 14:24:31,8
158613,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsDateTime.java,,,public java.lang.String now() { return format.format(java.time.Instant.now()); },1c77a0b673d42e2967ffd1c9a0be79eec11b4439,public static java.lang.String now() { return com.googlesource.gerrit.plugins.lfs.LfsDateTime.FORMAT.format(java.time.Instant.now()); },94d45dac89dce581d8baf28388c24c7c0f799fc3,2018-02-25 14:24:31,8
158613,src_test_java_com_googlesource_gerrit_plugins_lfs_LfsDateTimeTest.java,,,@org.junit.Test public void formatWithDefaultTimezone() throws java.lang.Exception { org.joda.time.DateTime now = org.joda.time.DateTime.now(); java.lang.String jodaFormat = org.joda.time.format.ISODateTimeFormat.dateTime().print(now); com.googlesource.gerrit.plugins.lfs.LfsDateTime formatter = com.googlesource.gerrit.plugins.lfs.LfsDateTime.instance(); java.lang.String javaFormat = formatter.format(java.time.Instant.ofEpochMilli(now.getMillis())); assertThat(javaFormat).isEqualTo(jodaFormat); },11c29e3b31d2d307478916974bcd2c5ce699de64,@org.junit.Test public void format() throws java.lang.Exception { org.joda.time.DateTime now = org.joda.time.DateTime.now(); java.lang.String jodaFormat = org.joda.time.format.ISODateTimeFormat.dateTime().withZoneUTC().print(now); java.lang.String javaFormat = com.googlesource.gerrit.plugins.lfs.LfsDateTime.format(java.time.Instant.ofEpochMilli(now.getMillis())); assertThat(javaFormat).isEqualTo(jodaFormat); },78af940c8228883026c476ad308f4f4b2e8af481,2018-02-25 14:24:31,8
158613,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsAuthToken.java,static java.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.print(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now().plusSeconds(expirationSeconds)); },a2948726b3256e1edc5bb3738ce5b8bb8a446703,static java.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMAT.now(expirationSeconds); },def5cae569b8b4f988e2385bcad75fba7d6bfdb4,static java.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsDateTime.now(expirationSeconds); },096c702ae5086c4d09016a2eceec55317665854a,2018-02-25 14:24:31,8
158613,src_test_java_com_googlesource_gerrit_plugins_lfs_LfsAuthTokenTest.java,@org.junit.Test public void testExpiredTime() throws java.lang.Exception { org.joda.time.DateTime now = now(); assertThat(Verifier.onTime(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.print(now.minusMillis(1)))).isFalse(); },e55243c78ab53c576828c3581d25043731a428f9,@org.junit.Test public void testExpiredTime() throws java.lang.Exception { assertThat(Verifier.onTime(formatter.format(now().minusMillis(1)))).isFalse(); },d8e1a6ce6eeb2a60cf6cb38bf281d7963f77cd42,@org.junit.Test public void testExpiredTime() throws java.lang.Exception { assertThat(Verifier.onTime(com.googlesource.gerrit.plugins.lfs.LfsDateTime.format(now().minusMillis(1)))).isFalse(); },389e36e23c6159bbb759975a0c90b06a716b0931,2018-02-25 14:24:31,8
161370,src_main_java_com_googlesource_gerrit_plugins_readonly_ReadOnly.java,"@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if ((request instanceof javax.servlet.http.HttpServletRequest) && (response instanceof javax.servlet.http.HttpServletResponse)) { java.lang.String method = ((javax.servlet.http.HttpServletRequest) (request)).getMethod(); if (((method == ""POST"") || (method == ""PUT"")) || (method == ""DELETE"")) { ((javax.servlet.http.HttpServletResponse) (response)).sendError(com.googlesource.gerrit.plugins.readonly.SC_SERVICE_UNAVAILABLE, com.googlesource.gerrit.plugins.readonly.ReadOnly.READ_ONLY_MSG); return; } } chain.doFilter(request, response); }",c0f361a237b69adc2aa5ec22ca160e9b59dc46df,"@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if ((request instanceof javax.servlet.http.HttpServletRequest) && (response instanceof javax.servlet.http.HttpServletResponse)) { java.lang.String method = ((javax.servlet.http.HttpServletRequest) (request)).getMethod(); if (((method == ""POST"") || (method == ""PUT"")) || (method == ""DELETE"")) { ((javax.servlet.http.HttpServletResponse) (response)).sendError(com.googlesource.gerrit.plugins.readonly.SC_SERVICE_UNAVAILABLE, this.message); return; } } chain.doFilter(request, response); }",4287d3acabb0317c6adfd24114b37aedcd592e0f,"@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if ((request instanceof javax.servlet.http.HttpServletRequest) && (response instanceof javax.servlet.http.HttpServletResponse)) { java.lang.String method = ((javax.servlet.http.HttpServletRequest) (request)).getMethod(); if (((method == ""POST"") || (method == ""PUT"")) || (method == ""DELETE"")) { ((javax.servlet.http.HttpServletResponse) (response)).sendError(com.googlesource.gerrit.plugins.readonly.SC_SERVICE_UNAVAILABLE, message); return; } } chain.doFilter(request, response); }",abfdefbe38332e230fcbe71a79a04e9b16962d52,2018-02-26 07:37:59,2
161370,src_main_java_com_googlesource_gerrit_plugins_readonly_ReadOnly.java,@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { throw new com.google.gerrit.server.git.validators.CommitValidationException(com.googlesource.gerrit.plugins.readonly.ReadOnly.READ_ONLY_MSG); },d0576eb093410c60ae753d771cd794c3f558d978,@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { throw new com.google.gerrit.server.git.validators.CommitValidationException(this.message); },578b30a439012e5e834f7e35d6343c5cef2d2b78,@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { throw new com.google.gerrit.server.git.validators.CommitValidationException(message); },6b7d7528585df972a2e2aee415193de205779421,2018-02-26 07:37:59,2
162611,src_main_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_AbstractIndexRestApiServlet.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public java.lang.String toString() { return name().toLowerCase(java.util.Locale.US); },b5de002084ca24676068d686fee756e32a962bcd,@java.lang.Override public java.lang.String toString() { return name().toLowerCase(); },93e4e66e1bc5bcaf98c6863c6d8309b9d117cdc6,2018-02-27 01:33:31,4
162890,src_test_java_com_ericsson_gerrit_plugins_eventslog_sql_SQLStoreTest.java,"public void tearDown() throws java.lang.Exception { stat.execute((""DROP TABLE "" + (com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME))); store.stop(); }",81f2e02179d59570ccd9c28a19061c23e2a7ed26,"@org.junit.After public void tearDown() throws java.lang.Exception { stat.execute((""DROP TABLE "" + (com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME))); store.stop(); }",c5885f70076d67341019da0689b5842bfe11872e,"private void tearDown() throws java.lang.Exception { stat.execute((""DROP TABLE "" + (com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME))); store.stop(); }",ce209542015959183efcec4a8ef0ea9f69c8753f,2018-02-28 10:53:26,2
161470,src_test_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGeneratorTest.java,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() throws java.lang.Exception { return getConfig(""^WIP.*"", true); }",c4c4d7494b8f57760bec59fa09adc8aab91b8459,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet) throws java.lang.Exception { return getConfig(""^WIP.*"", publishOnPatchSetCreated, ignoreRebaseEmptyPatchSet); }",1eab80990a05eb2afffcc4c7cb98478be5db0cce,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreUnchangedPatchSet) throws java.lang.Exception { return getConfig(""^WIP.*"", publishOnPatchSetCreated, ignoreUnchangedPatchSet); }",f426193009833e320cd6a7e8ed0c24c0263588fd,2018-02-28 18:35:39,4
161470,src_test_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGeneratorTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void doesNotPublishWhenTrivialRebase() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }",fd2623a6744014b2cbdca3576071d806244577af,"@org.junit.Test public void doesNotPublishWhenTrivialRebase() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockPatchSet); mockPatchSet.kind = com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }",df343cff4b866e7150cd32aab8fe4f90e6d1a767,2018-02-28 18:35:39,4
161470,src_test_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGeneratorTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void doesNotPublishWhenMergeUpdate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }",19321269497b9c2277b89b5ad5ff9ea6df96a59d,"@org.junit.Test public void doesNotPublishWhenMergeUpdate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockPatchSet); mockPatchSet.kind = com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }",4d634d4a024e1a8030b2276438ff157417e2c674,2018-02-28 18:35:39,4
161470,src_test_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGeneratorTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void doesPublishWhenNoChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",ecb4ffcc3b3316904f4a5cff6afc6806188b72ea,"@org.junit.Test public void publishesWhenNoChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockPatchSet); mockPatchSet.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",0a4ed226f6ec47699c914deac73e0548a180d564,2018-02-28 18:35:39,4
161470,src_test_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGeneratorTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void doesPublishWhenMergeUpdate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",837bd6ad56ce1c1149d054d49a72c8db747e642b,"@org.junit.Test public void publishesWhenMergeUpdate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockPatchSet); mockPatchSet.kind = com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",4ad430778adb1c1b46a73ed3d4903a9df04f5a77,2018-02-28 18:35:39,4
161470,src_test_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGeneratorTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void doesPublishWhenNoCodeChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",a5794dcb93c1b4da7dad971ea1408da09264a93e,"@org.junit.Test public void publishesWhenNoCodeChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockPatchSet); mockPatchSet.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",32ce870ff0b1ea6434a221d377b4fe34d236b0a1,2018-02-28 18:35:39,4
161470,src_test_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGeneratorTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void doesNotPublishWhenNoChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }",c6792b1511f8c72926ffbf955f1b86cd9c633437,"@org.junit.Test public void doesNotPublishWhenNoChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockPatchSet); mockPatchSet.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }",577818876c60f108b6375f1116374299fb1e32ef,2018-02-28 18:35:39,4
161470,src_main_java_com_cisco_gerrit_plugins_slack_config_ProjectConfig.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean getIgnoreRebaseEmptyPatchSet() { return ignoreRebaseEmptyPatchSet; },a88c5bfdd71d6420bf7aa90d7ad8c3e4511a447c,public boolean getIgnoreUnchangedPatchSet() { return ignoreUnchangedPatchSet; },8888382356fd56fdf2c2e716879b460cf8476b9c,2018-02-28 18:35:39,4
161470,src_test_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGeneratorTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void doesPublishWhenTrivialRebase() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",6c868d50bbcc19b52eec84ac2d22175777788ded,"@org.junit.Test public void publishesWhenTrivialRebase() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockPatchSet); mockPatchSet.kind = com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",efaa30eebd8c73b4dd477693ecb70e13a676c854,2018-02-28 18:35:39,4
161470,src_test_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGeneratorTest.java,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean(""enabled"", false)).thenReturn(true); when(mockPluginConfig.getString(""webhookurl"", """")).thenReturn(""https://webook/""); when(mockPluginConfig.getString(""channel"", ""general"")).thenReturn(""testchannel""); when(mockPluginConfig.getString(""username"", ""gerrit"")).thenReturn(""testuser""); when(mockPluginConfig.getString(""ignore"", """")).thenReturn(ignore); when(mockPluginConfig.getBoolean(""publish-on-patch-set-created"", true)).thenReturn(publishOnPatchSetCreated); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }",0041ab7daae5d924ed63782d28b7366b706e5823,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean(""enabled"", false)).thenReturn(true); when(mockPluginConfig.getString(""webhookurl"", """")).thenReturn(""https://webook/""); when(mockPluginConfig.getString(""channel"", ""general"")).thenReturn(""testchannel""); when(mockPluginConfig.getString(""username"", ""gerrit"")).thenReturn(""testuser""); when(mockPluginConfig.getString(""ignore"", """")).thenReturn(ignore); when(mockPluginConfig.getBoolean(""publish-on-patch-set-created"", true)).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean(""ignore-rebase-empty-patch-set"", true)).thenReturn(ignoreRebaseEmptyPatchSet); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }",ad8bbb8b389d31e921c817cd03b79fc36532bb67,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated, boolean ignoreUnchangedPatchSet) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean(""enabled"", false)).thenReturn(true); when(mockPluginConfig.getString(""webhookurl"", """")).thenReturn(""https://webook/""); when(mockPluginConfig.getString(""channel"", ""general"")).thenReturn(""testchannel""); when(mockPluginConfig.getString(""username"", ""gerrit"")).thenReturn(""testuser""); when(mockPluginConfig.getString(""ignore"", """")).thenReturn(ignore); when(mockPluginConfig.getBoolean(""publish-on-patch-set-created"", true)).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean(""ignore-unchanged-patch-set"", true)).thenReturn(ignoreUnchangedPatchSet); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }",f0c84a6e8365d927834a0a28886686ac873c0379,2018-02-28 18:35:39,4
161470,src_test_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGeneratorTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void doesNotPublishWhenNoCodeChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }",3125fc1c77d06285403d771703c705058caf24e7,"@org.junit.Test public void doesNotPublishWhenNoCodeChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockPatchSet); mockPatchSet.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }",37db1928d609efe6e192f7c3f7a102cfeb1ff1b9,2018-02-28 18:35:39,4
161470,src_test_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGeneratorTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void doesPublishWhenRework() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.REWORK; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",a66eb8c653d5996d5998da1b8262a7585395a24d,"@org.junit.Test public void publishesWhenRework() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockPatchSet); mockPatchSet.kind = com.google.gerrit.extensions.client.ChangeKind.REWORK; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",8ddead590c153c5972d9ca3719fc4a07c6a0564f,2018-02-28 18:35:39,4
161470,src_main_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGenerator.java,"@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } boolean result; result = true; try { java.util.regex.Pattern pattern; pattern = java.util.regex.Pattern.compile(config.getIgnore(), java.util.regex.Pattern.DOTALL); java.util.regex.Matcher matcher; matcher = pattern.matcher(event.change.get().commitMessage); result = !(matcher.matches()); } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn(""The specified ignore pattern was invalid"", e); } return result; }",d5ee132f75b50de37a56d68e31b72e6167492fb3,"@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet; patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmptyPatchSet()) && (((((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE)))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn(""Error checking patch set kind"", e); } boolean result; result = true; try { java.util.regex.Pattern pattern; pattern = java.util.regex.Pattern.compile(config.getIgnore(), java.util.regex.Pattern.DOTALL); java.util.regex.Matcher matcher; matcher = pattern.matcher(event.change.get().commitMessage); result = !(matcher.matches()); } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn(""The specified ignore pattern was invalid"", e); } return result; }",62deb03294c23378ccf95124090ad5021b42d325,"@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { if ((config.getIgnoreUnchangedPatchSet()) && (unchangedChangeKind(event.patchSet.get().kind))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn(""Error checking patch set kind"", e); } boolean result; result = true; try { java.util.regex.Pattern pattern; pattern = java.util.regex.Pattern.compile(config.getIgnore(), java.util.regex.Pattern.DOTALL); java.util.regex.Matcher matcher; matcher = pattern.matcher(event.change.get().commitMessage); result = !(matcher.matches()); } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn(""The specified ignore pattern was invalid"", e); } return result; }",a3835ad38a60bff6ff1065c56f602de98a8afa6e,2018-02-28 18:35:39,4
145750,src_main_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_AbstractIndexRestApiServlet.java,"private void process(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType(""text/plain""); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); java.lang.String path = req.getPathInfo(); T id = parse(path.substring(((path.lastIndexOf('/')) + 1))); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug(""{} {} {}"", operation.name().toLowerCase(java.util.Locale.US), type, id); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true); java.util.concurrent.atomic.AtomicInteger idLock = getAndIncrementIdLock(id); synchronized(idLock) { index(id, operation); } if ((idLock.decrementAndGet()) == 0) { removeIdLock(id); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.error(""Unable to update {} index"", type, e); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = java.lang.String.format(""Error trying to find %s \n"", type); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, msg); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug(msg, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }",d914d925af765d664c324ef51d46a5caaefef2bd,"private void process(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType(""text/plain""); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); java.lang.String path = req.getPathInfo(); T id = parse(path.substring(((path.lastIndexOf('/')) + 1))); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug(""{} {} {}"", operation.name().toLowerCase(java.util.Locale.US), type, id); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true); java.util.concurrent.atomic.AtomicInteger idLock = getAndIncrementIdLock(id); synchronized(this) { index(id, operation); } if ((idLock.decrementAndGet()) == 0) { removeIdLock(id); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.error(""Unable to update {} index"", type, e); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = java.lang.String.format(""Error trying to find %s \n"", type); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, msg); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug(msg, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }",8efeace10f0dfeb34d0d3c50ea507febd85ff8fd,"private void process(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType(""text/plain""); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); java.lang.String path = req.getPathInfo(); T id = parse(path.substring(((path.lastIndexOf('/')) + 1))); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug(""{} {} {}"", operation, type, id); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true); java.util.concurrent.locks.Lock idLock = idLocks.get(id); idLock.lock(); try { index(id, operation); } finally { idLock.unlock(); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.error(""Unable to update {} index"", type, e); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = java.lang.String.format(""Error trying to find %s \n"", type); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, msg); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug(msg, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }",8b1c89c65f54effb877d63c0417431e82db67780,2018-03-01 20:14:27,10
162054,src_main_java_com_googlesource_gerrit_plugins_uploadvalidator_EmailWhitelistValidator.java,,,"public static com.google.inject.AbstractModule module() { return new com.google.inject.AbstractModule() { @java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_AUTHOR_EMAIL_WHITELIST)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry(""Author Email Whitelist"", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, ""Whitelist of author email addresses that will be permitted."")); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_COMMITTER_EMAIL_WHITELIST)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry(""Committter Email Whitelist"", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, ""Whitelist of committer email addresses that will be permitted."")); } }; }",112813fc2206c257703b90305100d206f26c4c2b,"public static com.google.inject.AbstractModule module() { return new com.google.inject.AbstractModule() { @java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.ChangeEmailValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.ChangeEmailValidator.KEY_ALLOWED_AUTHOR_EMAIL_PATTERN)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry(""Author Email Pattern"", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, ""Commits with author email not matching one of these pattterns will be rejected."")); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.ChangeEmailValidator.KEY_ALLOWED_COMMITTER_EMAIL_PATTERN)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry(""Committer Email Pattern"", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, ""Commits with committer email not matching one of these patterns will be rejected."")); } }; }",bda717d2eed50d185da3ddff5504085078a80f5b,2018-03-03 00:53:15,5
162054,src_main_java_com_googlesource_gerrit_plugins_uploadvalidator_Module.java,@java.lang.Override protected void configure() { install(new com.googlesource.gerrit.plugins.uploadvalidator.PatternCacheModule()); install(com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FooterValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidFilenameValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.SubmoduleValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.SymlinkValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.DuplicatePathnameValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig.module()); bind(com.googlesource.gerrit.plugins.uploadvalidator.ConfigFactory.class).to(com.googlesource.gerrit.plugins.uploadvalidator.PluginConfigWithInheritanceFactory.class).in(Scopes.SINGLETON); },cad9038c71ff91b8f249962d8c7721267afb8b65,@java.lang.Override protected void configure() { install(new com.googlesource.gerrit.plugins.uploadvalidator.PatternCacheModule()); install(com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FooterValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidFilenameValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.SubmoduleValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.SymlinkValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.DuplicatePathnameValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig.module()); bind(com.googlesource.gerrit.plugins.uploadvalidator.ConfigFactory.class).to(com.googlesource.gerrit.plugins.uploadvalidator.PluginConfigWithInheritanceFactory.class).in(Scopes.SINGLETON); },f62fab7ee213fd0ba467ae4d92db38f45c1082a6,@java.lang.Override protected void configure() { install(new com.googlesource.gerrit.plugins.uploadvalidator.PatternCacheModule()); install(com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FooterValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ChangeEmailValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidFilenameValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.SubmoduleValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.SymlinkValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.DuplicatePathnameValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig.module()); bind(com.googlesource.gerrit.plugins.uploadvalidator.ConfigFactory.class).to(com.googlesource.gerrit.plugins.uploadvalidator.PluginConfigWithInheritanceFactory.class).in(Scopes.SINGLETON); },948d4f72feea538c51274fed0a4660f8f2f3d7c5,2018-03-03 00:53:15,5
162054,src_main_java_com_googlesource_gerrit_plugins_uploadvalidator_EmailWhitelistValidator.java,,,@com.google.common.annotations.VisibleForTesting static boolean isCommitterActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_COMMITTER_EMAIL_WHITELIST).length) > 0; },b368d4e504c8ffcf6ec5e99a1025d914812af34e,@com.google.common.annotations.VisibleForTesting static boolean isCommitterActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.ChangeEmailValidator.KEY_ALLOWED_COMMITTER_EMAIL_PATTERN).length) > 0; },e4e9be16a0546d1c241e97a9ff6c43e901c15121,2018-03-03 00:53:15,5
162054,src_main_java_com_googlesource_gerrit_plugins_uploadvalidator_EmailWhitelistValidator.java,,,"@com.google.common.annotations.VisibleForTesting static boolean performValidation(java.lang.String email, java.lang.String[] emailWhitelist) { return java.util.Arrays.stream(emailWhitelist).anyMatch(( s) -> java.util.regex.Pattern.matches(s, com.google.common.base.Strings.nullToEmpty(email))); }",7121f84d80ab72f48fd67c3671f20999599dc4bd,"@com.google.common.annotations.VisibleForTesting static boolean performValidation(java.lang.String email, java.lang.String[] allowedEmailPatterns) { return java.util.Arrays.stream(allowedEmailPatterns).anyMatch(( s) -> java.util.regex.Pattern.matches(s, com.google.common.base.Strings.nullToEmpty(email))); }",9758488a3dde9bc09508304dc05b5b45616614b1,2018-03-03 00:53:15,5
162054,src_main_java_com_googlesource_gerrit_plugins_uploadvalidator_EmailWhitelistValidator.java,,,@com.google.common.annotations.VisibleForTesting static java.lang.String[] getAuthorEmailWhiteList(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_AUTHOR_EMAIL_WHITELIST); },265a4a04336eb05fa188a7b5f4aeabffa6033a07,@com.google.common.annotations.VisibleForTesting static java.lang.String[] getAllowedAuthorEmailPatterns(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.ChangeEmailValidator.KEY_ALLOWED_AUTHOR_EMAIL_PATTERN); },5e077d4cacaa8666e616a98267e1a3cdb6a2951e,2018-03-03 00:53:15,5
162054,src_main_java_com_googlesource_gerrit_plugins_uploadvalidator_EmailWhitelistValidator.java,,,"@java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_AUTHOR_EMAIL_WHITELIST)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry(""Author Email Whitelist"", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, ""Whitelist of author email addresses that will be permitted."")); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_COMMITTER_EMAIL_WHITELIST)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry(""Committter Email Whitelist"", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, ""Whitelist of committer email addresses that will be permitted."")); }",640443739ef7c4e70b03ed00532238dc5a7d128b,"@java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.ChangeEmailValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.ChangeEmailValidator.KEY_ALLOWED_AUTHOR_EMAIL_PATTERN)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry(""Author Email Pattern"", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, ""Commits with author email not matching one of these pattterns will be rejected."")); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.ChangeEmailValidator.KEY_ALLOWED_COMMITTER_EMAIL_PATTERN)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry(""Committer Email Pattern"", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, ""Commits with committer email not matching one of these patterns will be rejected."")); }",157b1bc0e662e8cb332fac29d8e1f8d1ff28e6ee,2018-03-03 00:53:15,5
162054,src_main_java_com_googlesource_gerrit_plugins_uploadvalidator_EmailWhitelistValidator.java,,,@com.google.common.annotations.VisibleForTesting static boolean isAuthorActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_AUTHOR_EMAIL_WHITELIST).length) > 0; },b49fc9e83d710f96a516ebd325a4383cb15a9559,@com.google.common.annotations.VisibleForTesting static boolean isAuthorActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.ChangeEmailValidator.KEY_ALLOWED_AUTHOR_EMAIL_PATTERN).length) > 0; },ea2d80537545d8b06963e2fe888923ebae1ca6e1,2018-03-03 00:53:15,5
162054,src_main_java_com_googlesource_gerrit_plugins_uploadvalidator_EmailWhitelistValidator.java,,,@com.google.common.annotations.VisibleForTesting static java.lang.String[] getCommitterEmailWhiteList(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_COMMITTER_EMAIL_WHITELIST); },a8dcda4e62bcd19c5995165d872fb45e63d7ced8,@com.google.common.annotations.VisibleForTesting static java.lang.String[] getAllowedCommitterEmailPatterns(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.ChangeEmailValidator.KEY_ALLOWED_COMMITTER_EMAIL_PATTERN); },5da9fa3eff3ab39df1f0c98e1b4a870eb14f5db4,2018-03-03 00:53:15,5
162390,src_test_java_com_googlesource_gerrit_plugins_its_base_workflow_RuleBaseTest.java,"@java.lang.Override protected void configure() { bind(java.lang.String.class).annotatedWith(com.google.gerrit.extensions.annotations.PluginName.class).toInstance(""ItsTestName""); sitePath = randomTargetPath(); assertFalse(((""sitePath already ("" + (sitePath)) + "") already exists""), java.nio.file.Files.exists(sitePath)); cleanupSitePath = true; rulesConfigReader = createMock(com.googlesource.gerrit.plugins.its.base.workflow.RulesConfigReader.class); bind(com.googlesource.gerrit.plugins.its.base.workflow.RulesConfigReader.class).toInstance(rulesConfigReader); rulesProjectCache = createMock(com.googlesource.gerrit.plugins.its.base.workflow.ItsRulesProjectCache.class); bind(com.googlesource.gerrit.plugins.its.base.workflow.ItsRulesProjectCache.class).toInstance(rulesProjectCache); bind(java.nio.file.Path.class).annotatedWith(com.google.gerrit.server.config.SitePath.class).toInstance(sitePath); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.GlobalRulesFileName.class).toInstance(com.googlesource.gerrit.plugins.its.base.workflow.RuleBaseTest.RuleBaseKind.GLOBAL.fileName); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.PluginRulesFileName.class).toInstance(com.googlesource.gerrit.plugins.its.base.workflow.RuleBaseTest.RuleBaseKind.ITS.fileName); }",403432f626a67dbb60c00c900a1f02ffff1afa6e,"@java.lang.Override protected void configure() { bind(java.lang.String.class).annotatedWith(com.google.gerrit.extensions.annotations.PluginName.class).toInstance(""ItsTestName""); itsPath = randomTargetPath().resolve(""etc"").resolve(""its""); assertFalse(((""itsPath ("" + (itsPath)) + "") already exists""), java.nio.file.Files.exists(itsPath)); cleanupSitePath = true; rulesConfigReader = createMock(com.googlesource.gerrit.plugins.its.base.workflow.RulesConfigReader.class); bind(com.googlesource.gerrit.plugins.its.base.workflow.RulesConfigReader.class).toInstance(rulesConfigReader); rulesProjectCache = createMock(com.googlesource.gerrit.plugins.its.base.workflow.ItsRulesProjectCache.class); bind(com.googlesource.gerrit.plugins.its.base.workflow.ItsRulesProjectCache.class).toInstance(rulesProjectCache); bind(java.nio.file.Path.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.ItsPath.class).toInstance(itsPath); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.GlobalRulesFileName.class).toInstance(com.googlesource.gerrit.plugins.its.base.workflow.RuleBaseTest.RuleBaseKind.GLOBAL.fileName); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.PluginRulesFileName.class).toInstance(com.googlesource.gerrit.plugins.its.base.workflow.RuleBaseTest.RuleBaseKind.ITS.fileName); }",77bc996e51e7eef0c541f32137632589ec57170e,"@java.lang.Override protected void configure() { bind(java.lang.String.class).annotatedWith(com.google.gerrit.extensions.annotations.PluginName.class).toInstance(""ItsTestName""); itsPath = randomTargetPath().resolve(""etc"").resolve(""its""); assertFalse(((""itsPath ("" + (itsPath)) + "") already exists""), java.nio.file.Files.exists(itsPath)); cleanupSitePath = true; bind(java.nio.file.Path.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.ItsPath.class).toInstance(itsPath); ruleFactory = createMock(Rule.Factory.class); bind(Rule.Factory.class).toInstance(ruleFactory); conditionFactory = createMock(Condition.Factory.class); bind(Condition.Factory.class).toInstance(conditionFactory); actionRequestFactory = createMock(ActionRequest.Factory.class); bind(ActionRequest.Factory.class).toInstance(actionRequestFactory); }",d8c440832ebbcddb98799ebea1390baa36308c4c,2018-03-07 06:34:47,3
162390,src_main_java_com_googlesource_gerrit_plugins_its_base_ItsHookModule.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.google.inject.Provides @com.googlesource.gerrit.plugins.its.base.ItsPath @com.google.inject.Inject java.nio.file.Path itsPath(@com.google.gerrit.server.config.SitePath java.nio.file.Path sitePath) { return sitePath.normalize().resolve(""etc"").resolve(""its""); }",bd09097eec88c82729d424ca83bb4728b51c880a,@com.google.inject.Provides @com.googlesource.gerrit.plugins.its.base.ItsPath @com.google.inject.Inject java.nio.file.Path itsPath(SitePaths sitePaths) { return sitePaths.etc_dir.normalize().resolve(com.googlesource.gerrit.plugins.its.base.ItsHookModule.ITS_FOLDER); },de6b88839bcee8cebc2157f290c7b21b3ff8b7e9,2018-03-07 06:34:47,3
160692,src_main_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_IndexChangeRestApiServlet.java,"@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException, java.io.IOException { switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { com.google.gerrit.reviewdb.client.Change change = db.changes().get(id); if (change == null) { indexer.delete(id); return; } indexer.index(db, change); } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug(""Change {} successfully indexed"", id); break; case DELETE : indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug(""Change {} successfully deleted from index"", id); break; } }",6b7759b067ce523915259fc67b4cdc61b6995bf0,"@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException, java.io.IOException { switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { com.google.gerrit.reviewdb.client.Change change = db.changes().get(id); if (change == null) { indexer.delete(id); return; } indexer.index(db, change); } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug(""Change {} successfully indexed"", id); break; case DELETE : indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug(""Change {} successfully deleted from index"", id); break; } indexTs.update(""change""); }",d529c48de96e06d8e89533797ce716c990b90241,"@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.Change change = null; switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { change = db.changes().get(id); if (change == null) { indexer.delete(id); } else { indexer.index(db, change); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug(""Change {} successfully indexed"", id); } } catch (java.lang.Exception e) { if (!(isCausedByNoSuchChangeException(e))) { throw e; } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug(""Change {} was deleted, aborting forwarded indexing the change."", id.get()); } break; case DELETE : indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug(""Change {} successfully deleted from index"", id); break; } updateIndexTs((change == null ? java.time.LocalDateTime.now() : change.getLastUpdatedOn().toLocalDateTime())); }",db04a245432a1de77654427edb77e7855dc042c8,2018-03-07 12:01:54,19
160692,src_main_java_com_ericsson_gerrit_plugins_highavailability_index_IndexModule.java,"@java.lang.Override protected void configure() { bind(java.util.concurrent.Executor.class).annotatedWith(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutor.class).toProvider(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutorProvider.class); listener().to(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutorProvider.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.ChangeIndexedListener.class).to(com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.AccountIndexedListener.class).to(com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.class); }",509814f4dd594129a5041c78b65102dbcf26a16d,"@java.lang.Override protected void configure() { bind(java.util.concurrent.Executor.class).annotatedWith(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutor.class).toProvider(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutorProvider.class); listener().to(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutorProvider.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.ChangeIndexedListener.class).to(com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.AccountIndexedListener.class).to(com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.LifecycleListener.class).to(com.ericsson.gerrit.plugins.highavailability.AutoReindexAtStart.class); }",8e3f6d5046d93bbb2cd0028f10c434d9bc1a346e,"@java.lang.Override protected void configure() { bind(java.util.concurrent.Executor.class).annotatedWith(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutor.class).toProvider(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutorProvider.class); listener().to(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutorProvider.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.ChangeIndexedListener.class).to(com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.AccountIndexedListener.class).to(com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.GroupIndexedListener.class).to(com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.LifecycleListener.class).to(com.ericsson.gerrit.plugins.highavailability.AutoReindexListener.class); }",5735a4f913b89eb377fff2653d0a57e2135edf0c,2018-03-07 12:01:54,19
160692,src_main_java_com_ericsson_gerrit_plugins_highavailability_Configuration.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean autoReindexAtStart() { return autoReindexAtStart; },54c3b93bd435db2b67378bab44d69c0ca4753e1b,public boolean enabled() { return enabled; },db05cc8c4c3eb3870116d05610c47d7cd7d9efaa,2018-03-07 12:01:54,19
160692,src_main_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_IndexAccountRestApiServlet.java,"@java.lang.Override void index(com.google.gerrit.reviewdb.client.Account.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws java.io.IOException { indexer.index(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.logger.debug(""Account {} successfully indexed"", id); }",cb2afc5e5c3c8bf278f219c8d78e4eb3f59caa7f,"@java.lang.Override void index(com.google.gerrit.reviewdb.client.Account.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws java.io.IOException { indexer.index(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.logger.debug(""Account {} successfully indexed"", id); indexTs.update(""account""); }",9340907252e715080a47c67484fedf53ad9f515e,"@java.lang.Override void index(com.google.gerrit.reviewdb.client.Account.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws java.io.IOException { indexer.index(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.logger.debug(""Account {} successfully indexed"", id); updateIndexTs(java.time.LocalDateTime.now()); }",e66980f2d51b2a654f0f1e0d5f4501e48ff8771d,2018-03-07 12:01:54,19
160692,src_main_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_IndexGroupRestApiServlet.java,"@java.lang.Override void index(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws java.io.IOException { indexer.index(uuid); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexGroupRestApiServlet.logger.debug(""Group {} successfully indexed"", uuid); }",f0bb7e996c4732b747cd3ab133e796b189f0764c,"@java.lang.Override void index(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws java.io.IOException { indexer.index(uuid); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexGroupRestApiServlet.logger.debug(""Group {} successfully indexed"", uuid); indexTs.update(""group""); }",ebc7cfb861221ae1dbd5486dbcc28d624f228515,"@java.lang.Override void index(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws java.io.IOException { indexer.index(uuid); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexGroupRestApiServlet.logger.debug(""Group {} successfully indexed"", uuid); updateIndexTs(java.time.LocalDateTime.now()); }",93dbaf156e4da3eea6e37dea37f3c96f80daeea6,2018-03-07 12:01:54,19
164632,src_main_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_IndexChangeRestApiServlet.java,"@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException, java.io.IOException { switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { com.google.gerrit.reviewdb.client.Change change = db.changes().get(id); if (change == null) { indexer.delete(id); return; } indexer.index(db, change); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug(""Change {} successfully indexed"", id); } catch (java.lang.Exception e) { if (!(isCausedByNoSuchChangeException(e))) { throw e; } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug(""Change {} was deleted, aborting forwarded indexing the change."", id.get()); } break; case DELETE : indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug(""Change {} successfully deleted from index"", id); break; } }",52c528976b9e02b8079b64d56baaf626352c6717,"@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.Change change = null; switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { change = db.changes().get(id); if (change != null) { indexer.index(db, change); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug(""Change {} successfully indexed"", id); } } catch (java.lang.Exception e) { if (!(isCausedByNoSuchChangeException(e))) { throw e; } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug(""Change {} was deleted, aborting forwarded indexing the change."", id.get()); } if (change == null) { indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug(""Change {} not found, deleted from index"", id); } break; case DELETE : indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug(""Change {} successfully deleted from index"", id); break; } }",8edaeb971b0bd217fbfe73f08894173f7dfb51b3,"@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException, java.io.IOException { switch (operation) { case INDEX : com.google.gerrit.reviewdb.client.Change change = null; try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { change = db.changes().get(id); if (change != null) { indexer.index(db, change); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug(""Change {} successfully indexed"", id); } } catch (java.lang.Exception e) { if (!(isCausedByNoSuchChangeException(e))) { throw e; } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug(""Change {} was deleted, aborting forwarded indexing the change."", id.get()); } if (change == null) { indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug(""Change {} not found, deleted from index"", id); } break; case DELETE : indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug(""Change {} successfully deleted from index"", id); break; } }",d25221c3140a02cca4eee31d6ea44855c97f962d,2018-03-08 12:43:53,2
163935,gerrit-server_src_main_java_com_google_gerrit_server_CurrentUser.java,"public void setLastLoginExternalIdKey(com.google.gerrit.server.account.ExternalId.Key externalIdKey) { put(lastLoginExternalIdPropertyKey, externalIdKey); }",ad7f3bd23144731be2d4446f226fd441827b16b1,"public void setLastLoginExternalIdKey(com.google.gerrit.reviewdb.client.AccountExternalId.Key externalIdKey) { put(lastLoginExternalIdPropertyKey, externalIdKey); }",343bf080b0f02cfd07e0b963c7b73787a6107fb0,"public void setLastLoginExternalIdKey(com.google.gerrit.server.account.ExternalId.Key externalIdKey) { put(lastLoginExternalIdPropertyKey, externalIdKey); }",ad7f3bd23144731be2d4446f226fd441827b16b1,2018-03-08 15:00:23,3
163935,gerrit-pgm_src_main_java_com_google_gerrit_pgm_LocalUsernamesToLowerCase.java,"private void convertLocalUserToLowerCase(com.google.gerrit.server.account.ExternalId extId) { if (extId.isScheme(com.google.gerrit.pgm.SCHEME_GERRIT)) { java.lang.String localUser = extId.key().id(); java.lang.String localUserLowerCase = localUser.toLowerCase(java.util.Locale.US); if (!(localUser.equals(localUserLowerCase))) { com.google.gerrit.server.account.ExternalId extIdLowerCase = com.google.gerrit.server.account.ExternalId.create(com.google.gerrit.pgm.SCHEME_GERRIT, localUserLowerCase, extId.accountId(), extId.email(), extId.password()); externalIdsBatchUpdate.replace(extId, extIdLowerCase); } } }",d8ddd0471f2d6427614c65458de5ccf9e8a623fc,"private void convertLocalUserToLowerCase(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.AccountExternalId extId) { if (extId.isScheme(AccountExternalId.SCHEME_GERRIT)) { final java.lang.String localUser = extId.getSchemeRest(); final java.lang.String localUserLowerCase = localUser.toLowerCase(java.util.Locale.US); if (!(localUser.equals(localUserLowerCase))) { final com.google.gerrit.reviewdb.client.AccountExternalId.Key extIdKeyLowerCase = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GERRIT, localUserLowerCase); final com.google.gerrit.reviewdb.client.AccountExternalId extIdLowerCase = new com.google.gerrit.reviewdb.client.AccountExternalId(extId.getAccountId(), extIdKeyLowerCase); try { db.accountExternalIds().insert(java.util.Collections.singleton(extIdLowerCase)); db.accountExternalIds().delete(java.util.Collections.singleton(extId)); } catch (com.google.gwtorm.server.OrmException error) { java.lang.System.err.println((""ERR "" + (error.getMessage()))); } } } }",fd0337beda9fa7dc12bef4a50a61b2d16ff726ef,"private void convertLocalUserToLowerCase(com.google.gerrit.server.account.ExternalId extId) { if (extId.isScheme(com.google.gerrit.pgm.SCHEME_GERRIT)) { java.lang.String localUser = extId.key().id(); java.lang.String localUserLowerCase = localUser.toLowerCase(java.util.Locale.US); if (!(localUser.equals(localUserLowerCase))) { com.google.gerrit.server.account.ExternalId extIdLowerCase = com.google.gerrit.server.account.ExternalId.create(com.google.gerrit.pgm.SCHEME_GERRIT, localUserLowerCase, extId.accountId(), extId.email(), extId.password()); externalIdsBatchUpdate.replace(extId, extIdLowerCase); } } }",d8ddd0471f2d6427614c65458de5ccf9e8a623fc,2018-03-08 15:00:23,3
163935,gerrit-pgm_src_main_java_com_google_gerrit_pgm_LocalUsernamesToLowerCase.java,"@java.lang.Override public int run() throws java.lang.Exception { com.google.inject.Injector dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); manager.add(dbInjector, dbInjector.createChildInjector(com.google.gerrit.server.schema.SchemaVersionCheck.module())); manager.start(); dbInjector.injectMembers(this); try (com.google.gerrit.reviewdb.server.ReviewDb db = database.open()) { java.util.Collection<com.google.gerrit.server.account.ExternalId> todo = com.google.gerrit.server.account.ExternalId.from(db.accountExternalIds().all().toList()); monitor.beginTask(""Converting local usernames"", todo.size()); for (com.google.gerrit.server.account.ExternalId extId : todo) { convertLocalUserToLowerCase(extId); monitor.update(1); } externalIdsBatchUpdate.commit(db, ""Convert local usernames to lower case""); } monitor.endTask(); manager.stop(); return 0; }",58b5bfb220fd10bc18419f5dc5ba146fbb787278,"@java.lang.Override public int run() throws java.lang.Exception { if ((threads) <= 0) { threads = 1; } dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); manager.add(dbInjector, dbInjector.createChildInjector(com.google.gerrit.server.schema.SchemaVersionCheck.module())); manager.start(); dbInjector.injectMembers(this); try (com.google.gerrit.reviewdb.server.ReviewDb db = database.open()) { todo = db.accountExternalIds().all().toList(); synchronized(monitor) { monitor.beginTask(""Converting local usernames"", todo.size()); } } final java.util.List<com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker> workers = new java.util.ArrayList<>(threads); for (int tid = 0; tid < (threads); tid++) { com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker t = new com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker(); t.start(); workers.add(t); } for (com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker t : workers) { t.join(); } synchronized(monitor) { monitor.endTask(); } manager.stop(); return 0; }",d111e63cc71053b6d561c92aeea3bec2370ccd99,"@java.lang.Override public int run() throws java.lang.Exception { com.google.inject.Injector dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); manager.add(dbInjector, dbInjector.createChildInjector(com.google.gerrit.server.schema.SchemaVersionCheck.module())); manager.start(); dbInjector.injectMembers(this); try (com.google.gerrit.reviewdb.server.ReviewDb db = database.open()) { java.util.Collection<com.google.gerrit.server.account.ExternalId> todo = com.google.gerrit.server.account.ExternalId.from(db.accountExternalIds().all().toList()); monitor.beginTask(""Converting local usernames"", todo.size()); for (com.google.gerrit.server.account.ExternalId extId : todo) { convertLocalUserToLowerCase(extId); monitor.update(1); } externalIdsBatchUpdate.commit(db); } monitor.endTask(); int exitCode = reindexAccounts(); manager.stop(); return exitCode; }",7c560ec760fba3c077aabce7550661243c46e3bd,2018-03-08 15:00:23,3
163935,gerrit-pgm_src_main_java_com_google_gerrit_pgm_LocalUsernamesToLowerCase.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private com.google.gerrit.reviewdb.client.AccountExternalId next() { synchronized(todo) { if (todo.isEmpty()) { return null; } return todo.remove(((todo.size()) - 1)); } },5e00b0ec3000620a0c9e2cf6ca8e120238d4712e,"private int reindexAccounts() throws java.lang.Exception { monitor.beginTask(""Reindex accounts"", ProgressMonitor.UNKNOWN); java.lang.String[] reindexArgs = new java.lang.String[]{ ""--site-path"", getSitePath().toString(), ""--index"", com.google.gerrit.server.index.account.AccountSchemaDefinitions.NAME }; java.lang.System.out.println(""Migration complete, reindexing accounts with:""); java.lang.System.out.println(("" reindex "" + (java.lang.String.join("" "", reindexArgs)))); com.google.gerrit.pgm.Reindex reindexPgm = new com.google.gerrit.pgm.Reindex(); int exitCode = reindexPgm.main(reindexArgs); monitor.endTask(); return exitCode; }",48ebde045358d0bdbd05a1fa705767568e83e7ba,2018-03-08 15:00:23,3
163935,gerrit-httpd_src_main_java_com_google_gerrit_httpd_auth_container_HttpAuthFilter.java,"private static boolean correctUser(java.lang.String user, com.google.gerrit.httpd.WebSession session) { com.google.gerrit.server.account.ExternalId.Key id = session.getLastLoginExternalId(); return (id != null) && (id.equals(ExternalId.Key.create(com.google.gerrit.httpd.auth.container.SCHEME_GERRIT, user))); }",5117a418bf25fd130274004e85dcd3c13a900d68,"private static boolean correctUser(java.lang.String user, com.google.gerrit.httpd.WebSession session) { com.google.gerrit.reviewdb.client.AccountExternalId.Key id = session.getLastLoginExternalId(); return (id != null) && (id.equals(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_GERRIT, user))); }",e1e76d975372bfa4632f7280bba839b73d2eccc7,"private static boolean correctUser(java.lang.String user, com.google.gerrit.httpd.WebSession session) { com.google.gerrit.server.account.ExternalId.Key id = session.getLastLoginExternalId(); return (id != null) && (id.equals(ExternalId.Key.create(com.google.gerrit.httpd.auth.container.SCHEME_GERRIT, user))); }",5117a418bf25fd130274004e85dcd3c13a900d68,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_config_ConfirmEmail.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.config.ConfigResource rsrc, com.google.gerrit.server.config.ConfirmEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.CurrentUser user = self.get(); if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } if (input == null) { input = new com.google.gerrit.server.config.ConfirmEmail.Input(); } if ((input.token) == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""missing token""); } try { com.google.gerrit.server.mail.EmailTokenVerifier.ParsedToken token = emailTokenVerifier.decode(input.token); com.google.gerrit.reviewdb.client.Account.Id accId = user.getAccountId(); if (accId.equals(token.getAccountId())) { accountManager.link(accId, token.toAuthRequest()); return com.google.gerrit.extensions.restapi.Response.none(); } throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""invalid token""); } catch (com.google.gerrit.server.mail.EmailTokenVerifier e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""invalid token""); } catch (com.google.gerrit.server.account.AccountException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } }",52c70aebc5c10f092012e29635456b0548c783ad,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.config.ConfigResource rsrc, com.google.gerrit.server.config.ConfirmEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.CurrentUser user = self.get(); if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } if (input == null) { input = new com.google.gerrit.server.config.ConfirmEmail.Input(); } if ((input.token) == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""missing token""); } try { com.google.gerrit.server.mail.EmailTokenVerifier.ParsedToken token = emailTokenVerifier.decode(input.token); com.google.gerrit.reviewdb.client.Account.Id accId = user.getAccountId(); if (accId.equals(token.getAccountId())) { accountManager.link(accId, token.toAuthRequest()); return com.google.gerrit.extensions.restapi.Response.none(); } throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""invalid token""); } catch (com.google.gerrit.server.mail.EmailTokenVerifier e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""invalid token""); } catch (com.google.gerrit.server.account.AccountException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } }",fa73e7af343830d499e0eaf0887f2bc6f8e5a01a,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.config.ConfigResource rsrc, com.google.gerrit.server.config.ConfirmEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.CurrentUser user = self.get(); if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } if (input == null) { input = new com.google.gerrit.server.config.ConfirmEmail.Input(); } if ((input.token) == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""missing token""); } try { com.google.gerrit.server.mail.EmailTokenVerifier.ParsedToken token = emailTokenVerifier.decode(input.token); com.google.gerrit.reviewdb.client.Account.Id accId = user.getAccountId(); if (accId.equals(token.getAccountId())) { accountManager.link(accId, token.toAuthRequest()); return com.google.gerrit.extensions.restapi.Response.none(); } throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""invalid token""); } catch (com.google.gerrit.server.mail.EmailTokenVerifier e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""invalid token""); } catch (com.google.gerrit.server.account.AccountException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } }",52c70aebc5c10f092012e29635456b0548c783ad,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_git_validators_CommitValidators.java,"private com.google.gerrit.server.git.validators.CommitValidators forGerritCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) { return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, repo, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators), new com.google.gerrit.server.git.validators.CommitValidators.BlockExternalIdUpdateListener(allUsers))); }",55155dee2678b2421eeac6c2c1f7a4955e7f2012,"private com.google.gerrit.server.git.validators.CommitValidators forGerritCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) { return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, repo, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators))); }",45d9c49239e2618578cba3820ee71e5f0c41f755,"private com.google.gerrit.server.git.validators.CommitValidators forGerritCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) { return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, repo, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators), new com.google.gerrit.server.git.validators.CommitValidators.BlockExternalIdUpdateListener(allUsers))); }",55155dee2678b2421eeac6c2c1f7a4955e7f2012,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_git_validators_CommitValidators.java,"private com.google.gerrit.server.git.validators.CommitValidators forReceiveCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.notes.NoteMap rejectCommits = com.google.gerrit.server.git.BanCommit.loadRejectCommitsMap(repo, rw); return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.CommitterUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, repo, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.BannedCommitsValidator(rejectCommits), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators), new com.google.gerrit.server.git.validators.CommitValidators.BlockExternalIdUpdateListener(allUsers))); } }",98c2e320d215715c92ca5f63c04fec6e3e0b2cfe,"private com.google.gerrit.server.git.validators.CommitValidators forReceiveCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.notes.NoteMap rejectCommits = com.google.gerrit.server.git.BanCommit.loadRejectCommitsMap(repo, rw); return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.CommitterUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, repo, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.BannedCommitsValidator(rejectCommits), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators))); } }",c847ea2a6bbdbbcaf948d7c17a3da7612a94c500,"private com.google.gerrit.server.git.validators.CommitValidators forReceiveCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.notes.NoteMap rejectCommits = com.google.gerrit.server.git.BanCommit.loadRejectCommitsMap(repo, rw); return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.CommitterUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, repo, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.BannedCommitsValidator(rejectCommits), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators), new com.google.gerrit.server.git.validators.CommitValidators.BlockExternalIdUpdateListener(allUsers))); } }",98c2e320d215715c92ca5f63c04fec6e3e0b2cfe,2018-03-08 15:00:23,3
163935,gerrit-httpd_src_main_java_com_google_gerrit_httpd_WebSessionManager.java,"private void writeObject(final java.io.ObjectOutputStream out) throws java.io.IOException { writeVarInt32(out, 1); writeVarInt32(out, accountId.get()); writeVarInt32(out, 2); writeFixInt64(out, refreshCookieAt); writeVarInt32(out, 3); writeVarInt32(out, (persistentCookie ? 1 : 0)); if ((externalId) != null) { writeVarInt32(out, 4); writeString(out, externalId.toString()); } if ((sessionId) != null) { writeVarInt32(out, 5); writeString(out, sessionId); } writeVarInt32(out, 6); writeFixInt64(out, expiresAt); if ((auth) != null) { writeVarInt32(out, 7); writeString(out, auth); } writeVarInt32(out, 0); }",562d292077c0e6be1cc4d9556ff42bc2bd95d544,"private void writeObject(final java.io.ObjectOutputStream out) throws java.io.IOException { writeVarInt32(out, 1); writeVarInt32(out, accountId.get()); writeVarInt32(out, 2); writeFixInt64(out, refreshCookieAt); writeVarInt32(out, 3); writeVarInt32(out, (persistentCookie ? 1 : 0)); if ((externalId) != null) { writeVarInt32(out, 4); writeString(out, externalId.get()); } if ((sessionId) != null) { writeVarInt32(out, 5); writeString(out, sessionId); } writeVarInt32(out, 6); writeFixInt64(out, expiresAt); if ((auth) != null) { writeVarInt32(out, 7); writeString(out, auth); } writeVarInt32(out, 0); }",db70f8eb8fa29438f362bda20df516f8396f6a10,"private void writeObject(final java.io.ObjectOutputStream out) throws java.io.IOException { writeVarInt32(out, 1); writeVarInt32(out, accountId.get()); writeVarInt32(out, 2); writeFixInt64(out, refreshCookieAt); writeVarInt32(out, 3); writeVarInt32(out, (persistentCookie ? 1 : 0)); if ((externalId) != null) { writeVarInt32(out, 4); writeString(out, externalId.toString()); } if ((sessionId) != null) { writeVarInt32(out, 5); writeString(out, sessionId); } writeVarInt32(out, 6); writeFixInt64(out, expiresAt); if ((auth) != null) { writeVarInt32(out, 7); writeString(out, auth); } writeVarInt32(out, 0); }",562d292077c0e6be1cc4d9556ff42bc2bd95d544,2018-03-08 15:00:23,3
163935,gerrit-httpd_src_main_java_com_google_gerrit_httpd_WebSessionManager.java,ExternalId.Key getExternalId() { return externalId; },ac4ddfd6521a38a5812165db279e4eb7d7681dc2,AccountExternalId.Key getExternalId() { return externalId; },a3b7a306a67ed42e9de1fd604ec40adbe639daea,ExternalId.Key getExternalId() { return externalId; },ac4ddfd6521a38a5812165db279e4eb7d7681dc2,2018-03-08 15:00:23,3
163935,gerrit-gpg_src_main_java_com_google_gerrit_gpg_server_PostGpgKeys.java,"private ExternalId.Key toExtIdKey(byte[] fp) { return ExternalId.Key.create(com.google.gerrit.gpg.server.SCHEME_GPGKEY, com.google.common.io.BaseEncoding.base16().encode(fp)); }",3f01d7d1ef247f576e5b042f8fc21fa07366fb12,"private AccountExternalId.Key toExtIdKey(byte[] fp) { return new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GPGKEY, com.google.common.io.BaseEncoding.base16().encode(fp)); }",a6222f749b69f8d85ae644d60f8754c79fef82ef,"private ExternalId.Key toExtIdKey(byte[] fp) { return ExternalId.Key.create(com.google.gerrit.gpg.server.SCHEME_GPGKEY, com.google.common.io.BaseEncoding.base16().encode(fp)); }",3f01d7d1ef247f576e5b042f8fc21fa07366fb12,2018-03-08 15:00:23,3
163935,gerrit-httpd_src_main_java_com_google_gerrit_httpd_WebSessionManager.java,"com.google.gerrit.httpd.WebSessionManager.Val createVal(com.google.gerrit.httpd.WebSessionManager.Key key, com.google.gerrit.reviewdb.client.Account.Id who, boolean remember, com.google.gerrit.server.account.ExternalId.Key lastLogin, java.lang.String sid, java.lang.String auth) { final long halfAgeRefresh = (sessionMaxAgeMillis) >>> 1; final long minRefresh = java.util.concurrent.TimeUnit.MILLISECONDS.convert(1, java.util.concurrent.TimeUnit.HOURS); final long refresh = java.lang.Math.min(halfAgeRefresh, minRefresh); final long now = nowMs(); final long refreshCookieAt = now + refresh; final long expiresAt = now + (sessionMaxAgeMillis); if (sid == null) { sid = newUniqueToken(who); } if (auth == null) { auth = newUniqueToken(who); } com.google.gerrit.httpd.WebSessionManager.Val val = new com.google.gerrit.httpd.WebSessionManager.Val(who, refreshCookieAt, remember, lastLogin, expiresAt, sid, auth); self.put(key.token, val); return val; }",dd8791b3bca63e59e21b959a7ae8a3f045a0a849,"com.google.gerrit.httpd.WebSessionManager.Val createVal(final com.google.gerrit.httpd.WebSessionManager.Key key, final com.google.gerrit.reviewdb.client.Account.Id who, final boolean remember, final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin, java.lang.String sid, java.lang.String auth) { final long halfAgeRefresh = (sessionMaxAgeMillis) >>> 1; final long minRefresh = java.util.concurrent.TimeUnit.MILLISECONDS.convert(1, java.util.concurrent.TimeUnit.HOURS); final long refresh = java.lang.Math.min(halfAgeRefresh, minRefresh); final long now = nowMs(); final long refreshCookieAt = now + refresh; final long expiresAt = now + (sessionMaxAgeMillis); if (sid == null) { sid = newUniqueToken(who); } if (auth == null) { auth = newUniqueToken(who); } com.google.gerrit.httpd.WebSessionManager.Val val = new com.google.gerrit.httpd.WebSessionManager.Val(who, refreshCookieAt, remember, lastLogin, expiresAt, sid, auth); self.put(key.token, val); return val; }",f1d00d48bb0b90281a5833d7e21d0b8654efb607,"com.google.gerrit.httpd.WebSessionManager.Val createVal(com.google.gerrit.httpd.WebSessionManager.Key key, com.google.gerrit.reviewdb.client.Account.Id who, boolean remember, com.google.gerrit.server.account.ExternalId.Key lastLogin, java.lang.String sid, java.lang.String auth) { final long halfAgeRefresh = (sessionMaxAgeMillis) >>> 1; final long minRefresh = java.util.concurrent.TimeUnit.MILLISECONDS.convert(1, java.util.concurrent.TimeUnit.HOURS); final long refresh = java.lang.Math.min(halfAgeRefresh, minRefresh); final long now = nowMs(); final long refreshCookieAt = now + refresh; final long expiresAt = now + (sessionMaxAgeMillis); if (sid == null) { sid = newUniqueToken(who); } if (auth == null) { auth = newUniqueToken(who); } com.google.gerrit.httpd.WebSessionManager.Val val = new com.google.gerrit.httpd.WebSessionManager.Val(who, refreshCookieAt, remember, lastLogin, expiresAt, sid, auth); self.put(key.token, val); return val; }",dd8791b3bca63e59e21b959a7ae8a3f045a0a849,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_InternalAccountDirectory.java,"public java.util.List<java.lang.String> getSecondaryEmails(com.google.gerrit.reviewdb.client.Account account, java.util.Collection<com.google.gerrit.server.account.ExternalId> externalIds) { java.util.List<java.lang.String> emails = new java.util.ArrayList(com.google.gerrit.server.account.AccountState.getEmails(externalIds)); if ((account.getPreferredEmail()) != null) { emails.remove(account.getPreferredEmail()); } java.util.Collections.sort(emails); return emails; }",911dd86d28876f670cc78c48edf9dff8c8d872fa,"public java.util.List<java.lang.String> getSecondaryEmails(com.google.gerrit.reviewdb.client.Account account, java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds) { java.util.List<java.lang.String> emails = new java.util.ArrayList(com.google.gerrit.server.account.AccountState.getEmails(externalIds)); if ((account.getPreferredEmail()) != null) { emails.remove(account.getPreferredEmail()); } java.util.Collections.sort(emails); return emails; }",04ebb2417202c8787a217030d6c9208e5d5b3663,"public java.util.List<java.lang.String> getSecondaryEmails(com.google.gerrit.reviewdb.client.Account account, java.util.Collection<com.google.gerrit.server.account.ExternalId> externalIds) { java.util.List<java.lang.String> emails = new java.util.ArrayList(com.google.gerrit.server.account.AccountState.getEmails(externalIds)); if ((account.getPreferredEmail()) != null) { emails.remove(account.getPreferredEmail()); } java.util.Collections.sort(emails); return emails; }",911dd86d28876f670cc78c48edf9dff8c8d872fa,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_auth_ldap_LdapRealm.java,"@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { return java.util.Optional.ofNullable(com.google.gerrit.server.account.ExternalId.from(db.accountExternalIds().get(ExternalId.Key.create(com.google.gerrit.server.auth.ldap.SCHEME_GERRIT, username).asAccountExternalIdKey()))).map(ExternalId::accountId); } }",bb259a8ca304c9220a1ad03838ed339dad714310,"@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { return java.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_GERRIT, username))).map(AccountExternalId::getAccountId); } }",2a9a906efc2ffb3842a5fb69e73cf9161872a055,"@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { return java.util.Optional.ofNullable(com.google.gerrit.server.account.ExternalId.from(db.accountExternalIds().get(ExternalId.Key.create(com.google.gerrit.server.auth.ldap.SCHEME_GERRIT, username).asAccountExternalIdKey()))).map(ExternalId::accountId); } }",bb259a8ca304c9220a1ad03838ed339dad714310,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountManager.java,"public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId != null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException(""Identity in use by another account""); } update(db, who, extId); } else { externalIdsUpdateFactory.create().insert(db, com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress())); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } } if ((who.getEmailAddress()) != null) { byEmailCache.evict(who.getEmailAddress()); } byIdCache.evict(to); } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); } }",c8c93e4585a72d8e1fe15242a5b7037194ae6d41,"public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId != null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException(""Identity in use by another account""); } update(db, who, extId); } else { extId = com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress()); db.accountExternalIds().insert(java.util.Collections.singleton(extId.asAccountExternalId())); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } } if ((who.getEmailAddress()) != null) { byEmailCache.evict(who.getEmailAddress()); } byIdCache.evict(to); } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); } }",a25788083b66a6e6ce5fc72937ed93966079c0f8,"public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId != null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException(""Identity in use by another account""); } update(db, who, extId); } else { externalIdsUpdateFactory.create().insert(db, com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress())); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); byIdCache.evict(to); } byEmailCache.evict(who.getEmailAddress()); } } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); } }",00194b8507fc054528d8746c7f02b8daa480718d,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountManager.java,"public com.google.gerrit.server.account.AuthResult updateLink(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { java.util.Collection<com.google.gerrit.server.account.ExternalId> filteredExtIdsByScheme = com.google.gerrit.server.account.ExternalId.from(db.accountExternalIds().byAccount(to).toList()).stream().filter(( e) -> e.isScheme(who.getExternalIdKey().scheme())).collect(java.util.stream.Collectors.toSet()); if ((!(filteredExtIdsByScheme.isEmpty())) && (((filteredExtIdsByScheme.size()) > 1) || (!(filteredExtIdsByScheme.stream().filter(( e) -> e.key().equals(who.getExternalIdKey())).findAny().isPresent())))) { externalIdsUpdateFactory.create().delete(db, filteredExtIdsByScheme); } byIdCache.evict(to); return link(to, who); } }",4b86e10c92fbd3c98e241be1073b14c03c714a63,"public com.google.gerrit.server.account.AuthResult updateLink(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = who.getExternalIdKey().asAccountExternalIdKey(); java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId.Key> filteredKeysByScheme = filterKeysByScheme(key.getScheme(), db.accountExternalIds().byAccount(to)); if ((!(filteredKeysByScheme.isEmpty())) && (((filteredKeysByScheme.size()) > 1) || (!(filteredKeysByScheme.contains(key))))) { db.accountExternalIds().deleteKeys(filteredKeysByScheme); } byIdCache.evict(to); return link(to, who); } }",064ecbb55d93ad34336e798ea22858f6ffbd93e8,"public com.google.gerrit.server.account.AuthResult updateLink(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { java.util.Collection<com.google.gerrit.server.account.ExternalId> filteredExtIdsByScheme = com.google.gerrit.server.account.ExternalId.from(db.accountExternalIds().byAccount(to).toList()).stream().filter(( e) -> e.isScheme(who.getExternalIdKey().scheme())).collect(java.util.stream.Collectors.toSet()); if ((!(filteredExtIdsByScheme.isEmpty())) && (((filteredExtIdsByScheme.size()) > 1) || (!(filteredExtIdsByScheme.stream().filter(( e) -> e.key().equals(who.getExternalIdKey())).findAny().isPresent())))) { externalIdsUpdateFactory.create().delete(db, filteredExtIdsByScheme); } byIdCache.evict(to); return link(to, who); } }",07837884b32c2313d25178abc1414d4bf89754a7,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountManager.java,"public com.google.gerrit.server.account.AuthResult unlink(com.google.gerrit.reviewdb.client.Account.Id from, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId != null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (who.getExternalIdKey().get())) + ""' in use by another account"")); } externalIdsUpdateFactory.create().delete(db, extId); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(from); if (((a.getPreferredEmail()) != null) && (a.getPreferredEmail().equals(who.getEmailAddress()))) { a.setPreferredEmail(null); db.accounts().update(java.util.Collections.singleton(a)); } byEmailCache.evict(who.getEmailAddress()); byIdCache.evict(from); } } else { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (who.getExternalIdKey().get())) + ""' not found"")); } return new com.google.gerrit.server.account.AuthResult(from, who.getExternalIdKey(), false); } }",ad1edb425ee090a0b6fee3f4a86670905d964de1,"public com.google.gerrit.server.account.AuthResult unlink(com.google.gerrit.reviewdb.client.Account.Id from, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId != null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (who.getExternalIdKey().get())) + ""' in use by another account"")); } db.accountExternalIds().delete(java.util.Collections.singleton(extId.asAccountExternalId())); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(from); if (((a.getPreferredEmail()) != null) && (a.getPreferredEmail().equals(who.getEmailAddress()))) { a.setPreferredEmail(null); db.accounts().update(java.util.Collections.singleton(a)); } byEmailCache.evict(who.getEmailAddress()); byIdCache.evict(from); } } else { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (who.getExternalIdKey().get())) + ""' not found"")); } return new com.google.gerrit.server.account.AuthResult(from, who.getExternalIdKey(), false); } }",a85c65a54b46b38aee9b427e513633322c822783,"public com.google.gerrit.server.account.AuthResult unlink(com.google.gerrit.reviewdb.client.Account.Id from, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId != null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (who.getExternalIdKey().get())) + ""' in use by another account"")); } externalIdsUpdateFactory.create().delete(db, extId); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(from); if (((a.getPreferredEmail()) != null) && (a.getPreferredEmail().equals(who.getEmailAddress()))) { a.setPreferredEmail(null); db.accounts().update(java.util.Collections.singleton(a)); byIdCache.evict(from); } byEmailCache.evict(who.getEmailAddress()); } } else { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (who.getExternalIdKey().get())) + ""' not found"")); } return new com.google.gerrit.server.account.AuthResult(from, who.getExternalIdKey(), false); } }",b6e03e2cc07584b4d16d122c03b41b0b601d92d7,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountManager.java,"private void handleSettingUserNameFailure(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account account, com.google.gerrit.server.account.ExternalId extId, java.lang.String errorMessage, java.lang.Exception e, boolean logException) throws com.google.gerrit.server.account.AccountUserNameException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (logException) { com.google.gerrit.server.account.AccountManager.log.error(errorMessage, e); } else { com.google.gerrit.server.account.AccountManager.log.error(errorMessage); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { db.accounts().delete(java.util.Collections.singleton(account)); externalIdsUpdateFactory.create().delete(db, extId); throw new com.google.gerrit.server.account.AccountUserNameException(errorMessage, e); } }",dcb128b16719709e35571841d80fda3074b5d8e9,"private void handleSettingUserNameFailure(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account account, com.google.gerrit.server.account.ExternalId extId, java.lang.String errorMessage, java.lang.Exception e, boolean logException) throws com.google.gerrit.server.account.AccountUserNameException, com.google.gwtorm.server.OrmException { if (logException) { com.google.gerrit.server.account.AccountManager.log.error(errorMessage, e); } else { com.google.gerrit.server.account.AccountManager.log.error(errorMessage); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { db.accounts().delete(java.util.Collections.singleton(account)); db.accountExternalIds().delete(java.util.Collections.singleton(extId.asAccountExternalId())); throw new com.google.gerrit.server.account.AccountUserNameException(errorMessage, e); } }",cb5b845fb28cd98fa7a95ebe0c6f3353c014a368,"private void handleSettingUserNameFailure(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account account, com.google.gerrit.server.account.ExternalId extId, java.lang.String errorMessage, java.lang.Exception e, boolean logException) throws com.google.gerrit.server.account.AccountUserNameException, com.google.gwtorm.server.OrmException, java.io.IOException { if (logException) { com.google.gerrit.server.account.AccountManager.log.error(errorMessage, e); } else { com.google.gerrit.server.account.AccountManager.log.error(errorMessage); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { db.accounts().delete(java.util.Collections.singleton(account)); externalIdsUpdateFactory.create().delete(db, extId); throw new com.google.gerrit.server.account.AccountUserNameException(errorMessage, e); } }",bcaacfd99a460cd6cb214b765ab930f33d1d02a6,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountManager.java,"public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, java.io.IOException { who = realm.authenticate(who); try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId id = findExternalId(db, who.getExternalIdKey()); if (id == null) { return create(db, who); } com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.accountId()).getAccount(); if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException(""Authentication error, account inactive""); } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.accountId(), who.getExternalIdKey(), false); } } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.server.account.AccountException(""Authentication error"", e); } }",7ad62f5e3d7597f14c6ca22792cb4bea04857938,"public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, java.io.IOException { who = realm.authenticate(who); try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId id = findExternalId(db, who.getExternalIdKey()); if (id == null) { return create(db, who); } com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.accountId()).getAccount(); if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException(""Authentication error, account inactive""); } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.accountId(), who.getExternalIdKey(), false); } } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.account.AccountException(""Authentication error"", e); } }",516cc6a9696bb53702e4446172edc026c3f2d4d0,"public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, java.io.IOException { who = realm.authenticate(who); try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId id = findExternalId(db, who.getExternalIdKey()); if (id == null) { return create(db, who); } com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.accountId()).getAccount(); if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException(""Authentication error, account inactive""); } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.accountId(), who.getExternalIdKey(), false); } } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.server.account.AccountException(""Authentication error"", e); } }",7ad62f5e3d7597f14c6ca22792cb4bea04857938,2018-03-08 15:00:23,3
163935,gerrit-gpg_src_main_java_com_google_gerrit_gpg_api_GpgApiAdapterImpl.java,"@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> putGpgKeys(com.google.gerrit.server.account.AccountResource account, java.util.List<java.lang.String> add, java.util.List<java.lang.String> delete) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.GpgException { com.google.gerrit.gpg.server.PostGpgKeys.Input in = new com.google.gerrit.gpg.server.PostGpgKeys.Input(); in.add = add; in.delete = delete; try { return postGpgKeys.apply(account, in); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.server.GpgException(e); } }",02ba57cf1e22e2dc6730702e9bc922a80f860846,"@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> putGpgKeys(com.google.gerrit.server.account.AccountResource account, java.util.List<java.lang.String> add, java.util.List<java.lang.String> delete) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.GpgException { com.google.gerrit.gpg.server.PostGpgKeys.Input in = new com.google.gerrit.gpg.server.PostGpgKeys.Input(); in.add = add; in.delete = delete; try { return postGpgKeys.apply(account, in); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.server.GpgException(e); } }",866ef96194d8f6db47a191b9b3ba07496344f125,"@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> putGpgKeys(com.google.gerrit.server.account.AccountResource account, java.util.List<java.lang.String> add, java.util.List<java.lang.String> delete) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.GpgException { com.google.gerrit.gpg.server.PostGpgKeys.Input in = new com.google.gerrit.gpg.server.PostGpgKeys.Input(); in.add = add; in.delete = delete; try { return postGpgKeys.apply(account, in); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.server.GpgException(e); } }",02ba57cf1e22e2dc6730702e9bc922a80f860846,2018-03-08 15:00:23,3
163935,gerrit-gpg_src_main_java_com_google_gerrit_gpg_server_GpgKeys.java,"@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.FluentIterable<com.google.gerrit.server.account.ExternalId> getGpgExtIds(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.FluentIterable.from(com.google.gerrit.server.account.ExternalId.from(db.accountExternalIds().byAccount(accountId).toList())).filter(( in) -> in.isScheme(com.google.gerrit.gpg.server.SCHEME_GPGKEY)); }",fa31d6ad052ca1c9bd0a975e1256e8cf97e92abf,"@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.FluentIterable<com.google.gerrit.reviewdb.client.AccountExternalId> getGpgExtIds(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.FluentIterable.from(db.accountExternalIds().byAccount(accountId)).filter(( in) -> in.isScheme(com.google.gerrit.gpg.server.SCHEME_GPGKEY)); }",44470b73dfca77c862ef079db2795b3f0eaa93d6,"@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.FluentIterable<com.google.gerrit.server.account.ExternalId> getGpgExtIds(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.FluentIterable.from(com.google.gerrit.server.account.ExternalId.from(db.accountExternalIds().byAccount(accountId).toList())).filter(( in) -> in.isScheme(com.google.gerrit.gpg.server.SCHEME_GPGKEY)); }",fa31d6ad052ca1c9bd0a975e1256e8cf97e92abf,2018-03-08 15:00:23,3
163935,gerrit-gpg_src_main_java_com_google_gerrit_gpg_server_GpgKeys.java,"static byte[] parseFingerprint(java.lang.String str, java.lang.Iterable<com.google.gerrit.server.account.ExternalId> existingExtIds) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { str = com.google.common.base.CharMatcher.whitespace().removeFrom(str).toUpperCase(); if ((((str.length()) != 8) && ((str.length()) != 40)) || (!(com.google.common.base.CharMatcher.anyOf(""0123456789ABCDEF"").matchesAllOf(str)))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } byte[] fp = null; for (com.google.gerrit.server.account.ExternalId extId : existingExtIds) { java.lang.String fpStr = extId.key().id(); if (!(fpStr.endsWith(str))) { continue; } else if (fp != null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple keys found for "" + str)); } fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); if ((str.length()) == 40) { break; } } if (fp == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } return fp; }",74e90f4e11239615ebf957c9d5a75502987cc622,"static byte[] parseFingerprint(java.lang.String str, java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountExternalId> existingExtIds) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { str = com.google.common.base.CharMatcher.whitespace().removeFrom(str).toUpperCase(); if ((((str.length()) != 8) && ((str.length()) != 40)) || (!(com.google.common.base.CharMatcher.anyOf(""0123456789ABCDEF"").matchesAllOf(str)))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } byte[] fp = null; for (com.google.gerrit.reviewdb.client.AccountExternalId extId : existingExtIds) { java.lang.String fpStr = extId.getSchemeRest(); if (!(fpStr.endsWith(str))) { continue; } else if (fp != null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple keys found for "" + str)); } fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); if ((str.length()) == 40) { break; } } if (fp == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } return fp; }",11b5dedd6f03b828383e50afb552bbde8fd94ead,"static byte[] parseFingerprint(java.lang.String str, java.lang.Iterable<com.google.gerrit.server.account.ExternalId> existingExtIds) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { str = com.google.common.base.CharMatcher.whitespace().removeFrom(str).toUpperCase(); if ((((str.length()) != 8) && ((str.length()) != 40)) || (!(com.google.common.base.CharMatcher.anyOf(""0123456789ABCDEF"").matchesAllOf(str)))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } byte[] fp = null; for (com.google.gerrit.server.account.ExternalId extId : existingExtIds) { java.lang.String fpStr = extId.key().id(); if (!(fpStr.endsWith(str))) { continue; } else if (fp != null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple keys found for "" + str)); } fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); if ((str.length()) == 40) { break; } } if (fp == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } return fp; }",74e90f4e11239615ebf957c9d5a75502987cc622,2018-03-08 15:00:23,3
163935,gerrit-gpg_src_main_java_com_google_gerrit_gpg_server_GpgKeys.java,"@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.bouncycastle.openpgp.PGPException { com.google.gerrit.gpg.server.GpgKeys.checkVisible(self, rsrc); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keys = new java.util.HashMap<>(); try (com.google.gerrit.gpg.PublicKeyStore store = storeProvider.get()) { for (com.google.gerrit.server.account.ExternalId extId : getGpgExtIds(rsrc)) { java.lang.String fpStr = extId.key().id(); byte[] fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); boolean found = false; for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : store.get(com.google.gerrit.gpg.server.GpgKeys.keyId(fp))) { if (java.util.Arrays.equals(keyRing.getPublicKey().getFingerprint(), fp)) { found = true; com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing.getPublicKey(), checkerFactory.create(rsrc.getUser(), store), store); keys.put(info.id, info); info.id = null; break; } } if (!found) { com.google.gerrit.gpg.server.GpgKeys.log.warn(""No public key stored for fingerprint {}"", com.google.gerrit.gpg.Fingerprint.toString(fp)); } } } return keys; }",0c47e4a18a0e36a072b9646322134dd4e82b20fa,"@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.bouncycastle.openpgp.PGPException { com.google.gerrit.gpg.server.GpgKeys.checkVisible(self, rsrc); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keys = new java.util.HashMap<>(); try (com.google.gerrit.gpg.PublicKeyStore store = storeProvider.get()) { for (com.google.gerrit.reviewdb.client.AccountExternalId extId : getGpgExtIds(rsrc)) { java.lang.String fpStr = extId.getSchemeRest(); byte[] fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); boolean found = false; for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : store.get(com.google.gerrit.gpg.server.GpgKeys.keyId(fp))) { if (java.util.Arrays.equals(keyRing.getPublicKey().getFingerprint(), fp)) { found = true; com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing.getPublicKey(), checkerFactory.create(rsrc.getUser(), store), store); keys.put(info.id, info); info.id = null; break; } } if (!found) { com.google.gerrit.gpg.server.GpgKeys.log.warn(""No public key stored for fingerprint {}"", com.google.gerrit.gpg.Fingerprint.toString(fp)); } } } return keys; }",5cfac20858c80d394adaa546954f4be48b21b462,"@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.bouncycastle.openpgp.PGPException { com.google.gerrit.gpg.server.GpgKeys.checkVisible(self, rsrc); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keys = new java.util.HashMap<>(); try (com.google.gerrit.gpg.PublicKeyStore store = storeProvider.get()) { for (com.google.gerrit.server.account.ExternalId extId : getGpgExtIds(rsrc)) { java.lang.String fpStr = extId.key().id(); byte[] fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); boolean found = false; for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : store.get(com.google.gerrit.gpg.server.GpgKeys.keyId(fp))) { if (java.util.Arrays.equals(keyRing.getPublicKey().getFingerprint(), fp)) { found = true; com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing.getPublicKey(), checkerFactory.create(rsrc.getUser(), store), store); keys.put(info.id, info); info.id = null; break; } } if (!found) { com.google.gerrit.gpg.server.GpgKeys.log.warn(""No public key stored for fingerprint {}"", com.google.gerrit.gpg.Fingerprint.toString(fp)); } } } return keys; }",0c47e4a18a0e36a072b9646322134dd4e82b20fa,2018-03-08 15:00:23,3
163935,gerrit-httpd_src_main_java_com_google_gerrit_httpd_WebSessionManager.java,"com.google.gerrit.httpd.WebSessionManager.Val createVal(com.google.gerrit.httpd.WebSessionManager.Key key, com.google.gerrit.httpd.WebSessionManager.Val val) { com.google.gerrit.reviewdb.client.Account.Id who = val.getAccountId(); boolean remember = val.isPersistentCookie(); com.google.gerrit.server.account.ExternalId.Key lastLogin = val.getExternalId(); return createVal(key, who, remember, lastLogin, val.sessionId, val.auth); }",e48ece76fb04946b1fc13931d49b3ec25fcd7024,"com.google.gerrit.httpd.WebSessionManager.Val createVal(final com.google.gerrit.httpd.WebSessionManager.Key key, final com.google.gerrit.httpd.WebSessionManager.Val val) { final com.google.gerrit.reviewdb.client.Account.Id who = val.getAccountId(); final boolean remember = val.isPersistentCookie(); final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin = val.getExternalId(); return createVal(key, who, remember, lastLogin, val.sessionId, val.auth); }",5b9d3532683317db014f23b68350bdfe5ae0f55e,"com.google.gerrit.httpd.WebSessionManager.Val createVal(com.google.gerrit.httpd.WebSessionManager.Key key, com.google.gerrit.httpd.WebSessionManager.Val val) { com.google.gerrit.reviewdb.client.Account.Id who = val.getAccountId(); boolean remember = val.isPersistentCookie(); com.google.gerrit.server.account.ExternalId.Key lastLogin = val.getExternalId(); return createVal(key, who, remember, lastLogin, val.sessionId, val.auth); }",e48ece76fb04946b1fc13931d49b3ec25fcd7024,2018-03-08 15:00:23,3
163935,gerrit-gpg_src_main_java_com_google_gerrit_gpg_GerritPublicKeyChecker.java,"private com.google.gerrit.gpg.CheckResult checkIdsForArbitraryUser(org.bouncycastle.openpgp.PGPPublicKey key) throws com.google.gwtorm.server.OrmException, org.bouncycastle.openpgp.PGPException { java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQueryProvider.get().byExternalId(com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key)); if (accountStates.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad(""Key is not associated with any users""); } if ((accountStates.size()) > 1) { return com.google.gerrit.gpg.CheckResult.bad(""Key is associated with multiple users""); } com.google.gerrit.server.IdentifiedUser user = userFactory.create(accountStates.get(0)); java.util.Set<java.lang.String> allowedUserIds = getAllowedUserIds(user); if (allowedUserIds.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad(""No identities found for user""); } if (hasAllowedUserId(key, allowedUserIds)) { return com.google.gerrit.gpg.CheckResult.trusted(); } return com.google.gerrit.gpg.CheckResult.bad(""Key does not contain any valid certifications for user's identities""); }",f92a8b3dfbde0a732b4b4c2abc6623159ab13f0a,"private com.google.gerrit.gpg.CheckResult checkIdsForArbitraryUser(org.bouncycastle.openpgp.PGPPublicKey key) throws com.google.gwtorm.server.OrmException, org.bouncycastle.openpgp.PGPException { java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQueryProvider.get().byExternalId(com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key).get()); if (accountStates.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad(""Key is not associated with any users""); } if ((accountStates.size()) > 1) { return com.google.gerrit.gpg.CheckResult.bad(""Key is associated with multiple users""); } com.google.gerrit.server.IdentifiedUser user = userFactory.create(accountStates.get(0)); java.util.Set<java.lang.String> allowedUserIds = getAllowedUserIds(user); if (allowedUserIds.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad(""No identities found for user""); } if (hasAllowedUserId(key, allowedUserIds)) { return com.google.gerrit.gpg.CheckResult.trusted(); } return com.google.gerrit.gpg.CheckResult.bad(""Key does not contain any valid certifications for user's identities""); }",d8db45cc24f55a43c3511fa09374b0a36ce56dea,"private com.google.gerrit.gpg.CheckResult checkIdsForArbitraryUser(org.bouncycastle.openpgp.PGPPublicKey key) throws com.google.gwtorm.server.OrmException, org.bouncycastle.openpgp.PGPException { java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQueryProvider.get().byExternalId(com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key)); if (accountStates.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad(""Key is not associated with any users""); } if ((accountStates.size()) > 1) { return com.google.gerrit.gpg.CheckResult.bad(""Key is associated with multiple users""); } com.google.gerrit.server.IdentifiedUser user = userFactory.create(accountStates.get(0)); java.util.Set<java.lang.String> allowedUserIds = getAllowedUserIds(user); if (allowedUserIds.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad(""No identities found for user""); } if (hasAllowedUserId(key, allowedUserIds)) { return com.google.gerrit.gpg.CheckResult.trusted(); } return com.google.gerrit.gpg.CheckResult.bad(""Key does not contain any valid certifications for user's identities""); }",f92a8b3dfbde0a732b4b4c2abc6623159ab13f0a,2018-03-08 15:00:23,3
163935,gerrit-httpd_src_main_java_com_google_gerrit_httpd_WebSessionManager.java,"private void readObject(final java.io.ObjectInputStream in) throws java.io.IOException { PARSE : for (; ;) { final int tag = readVarInt32(in); switch (tag) { case 0 : break PARSE; case 1 : accountId = new com.google.gerrit.reviewdb.client.Account.Id(readVarInt32(in)); continue; case 2 : refreshCookieAt = readFixInt64(in); continue; case 3 : persistentCookie = (readVarInt32(in)) != 0; continue; case 4 : externalId = ExternalId.Key.parse(readString(in)); continue; case 5 : sessionId = readString(in); continue; case 6 : expiresAt = readFixInt64(in); continue; case 7 : auth = readString(in); continue; default : throw new java.io.IOException((""Unknown tag found in object: "" + tag)); } } if ((expiresAt) == 0) { expiresAt = (refreshCookieAt) + (java.util.concurrent.TimeUnit.HOURS.toMillis(2)); } }",36b53bd3a5d6635b0a225989ddea6ccd43298656,"private void readObject(final java.io.ObjectInputStream in) throws java.io.IOException { PARSE : for (; ;) { final int tag = readVarInt32(in); switch (tag) { case 0 : break PARSE; case 1 : accountId = new com.google.gerrit.reviewdb.client.Account.Id(readVarInt32(in)); continue; case 2 : refreshCookieAt = readFixInt64(in); continue; case 3 : persistentCookie = (readVarInt32(in)) != 0; continue; case 4 : externalId = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(readString(in)); continue; case 5 : sessionId = readString(in); continue; case 6 : expiresAt = readFixInt64(in); continue; case 7 : auth = readString(in); continue; default : throw new java.io.IOException((""Unknown tag found in object: "" + tag)); } } if ((expiresAt) == 0) { expiresAt = (refreshCookieAt) + (java.util.concurrent.TimeUnit.HOURS.toMillis(2)); } }",bea0a2f42d5241e91397d5aa3a1da069941fee44,"private void readObject(final java.io.ObjectInputStream in) throws java.io.IOException { PARSE : for (; ;) { final int tag = readVarInt32(in); switch (tag) { case 0 : break PARSE; case 1 : accountId = new com.google.gerrit.reviewdb.client.Account.Id(readVarInt32(in)); continue; case 2 : refreshCookieAt = readFixInt64(in); continue; case 3 : persistentCookie = (readVarInt32(in)) != 0; continue; case 4 : externalId = ExternalId.Key.parse(readString(in)); continue; case 5 : sessionId = readString(in); continue; case 6 : expiresAt = readFixInt64(in); continue; case 7 : auth = readString(in); continue; default : throw new java.io.IOException((""Unknown tag found in object: "" + tag)); } } if ((expiresAt) == 0) { expiresAt = (refreshCookieAt) + (java.util.concurrent.TimeUnit.HOURS.toMillis(2)); } }",36b53bd3a5d6635b0a225989ddea6ccd43298656,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_config_AuthConfig.java,private boolean isTrusted(com.google.gerrit.server.account.ExternalId id) { if (id.isScheme(com.google.gerrit.server.config.SCHEME_MAILTO)) { return true; } if (id.isScheme(com.google.gerrit.server.config.SCHEME_UUID)) { return true; } if (id.isScheme(com.google.gerrit.server.config.SCHEME_USERNAME)) { return true; } for (com.google.gerrit.server.auth.openid.OpenIdProviderPattern p : trustedOpenIDs) { if (p.matches(id)) { return true; } } return false; },deab83a442192a0453898330def1a207087b639b,private boolean isTrusted(final com.google.gerrit.reviewdb.client.AccountExternalId id) { if (id.isScheme(AccountExternalId.SCHEME_MAILTO)) { return true; } if (id.isScheme(AccountExternalId.SCHEME_UUID)) { return true; } if (id.isScheme(AccountExternalId.SCHEME_USERNAME)) { return true; } for (final com.google.gerrit.server.auth.openid.OpenIdProviderPattern p : trustedOpenIDs) { if (p.matches(id)) { return true; } } return false; },b6bc8e8a4733f8c1f8ca6578c163bc10e8fc249c,private boolean isTrusted(com.google.gerrit.server.account.ExternalId id) { if (id.isScheme(com.google.gerrit.server.config.SCHEME_MAILTO)) { return true; } if (id.isScheme(com.google.gerrit.server.config.SCHEME_UUID)) { return true; } if (id.isScheme(com.google.gerrit.server.config.SCHEME_USERNAME)) { return true; } for (com.google.gerrit.server.auth.openid.OpenIdProviderPattern p : trustedOpenIDs) { if (p.matches(id)) { return true; } } return false; },deab83a442192a0453898330def1a207087b639b,2018-03-08 15:00:23,3
163935,gerrit-gpg_src_main_java_com_google_gerrit_gpg_server_PostGpgKeys.java,"private java.util.Set<com.google.gerrit.gpg.Fingerprint> readKeysToRemove(com.google.gerrit.gpg.server.PostGpgKeys.Input input, java.util.Collection<com.google.gerrit.server.account.ExternalId> existingExtIds) { if (((input.delete) == null) || (input.delete.isEmpty())) { return com.google.common.collect.ImmutableSet.of(); } java.util.Set<com.google.gerrit.gpg.Fingerprint> fingerprints = com.google.common.collect.Sets.newHashSetWithExpectedSize(input.delete.size()); for (java.lang.String id : input.delete) { try { fingerprints.add(new com.google.gerrit.gpg.Fingerprint(com.google.gerrit.gpg.server.GpgKeys.parseFingerprint(id, existingExtIds))); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { } } return fingerprints; }",f3fcaa9551a73bea3ea90f077e34c5551f2f2e56,"private java.util.Set<com.google.gerrit.gpg.Fingerprint> readKeysToRemove(com.google.gerrit.gpg.server.PostGpgKeys.Input input, java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId> existingExtIds) { if (((input.delete) == null) || (input.delete.isEmpty())) { return com.google.common.collect.ImmutableSet.of(); } java.util.Set<com.google.gerrit.gpg.Fingerprint> fingerprints = com.google.common.collect.Sets.newHashSetWithExpectedSize(input.delete.size()); for (java.lang.String id : input.delete) { try { fingerprints.add(new com.google.gerrit.gpg.Fingerprint(com.google.gerrit.gpg.server.GpgKeys.parseFingerprint(id, existingExtIds))); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { } } return fingerprints; }",504d011e6341efa5feba3a9108259bbb45bf6eb1,"private java.util.Set<com.google.gerrit.gpg.Fingerprint> readKeysToRemove(com.google.gerrit.gpg.server.PostGpgKeys.Input input, java.util.Collection<com.google.gerrit.server.account.ExternalId> existingExtIds) { if (((input.delete) == null) || (input.delete.isEmpty())) { return com.google.common.collect.ImmutableSet.of(); } java.util.Set<com.google.gerrit.gpg.Fingerprint> fingerprints = com.google.common.collect.Sets.newHashSetWithExpectedSize(input.delete.size()); for (java.lang.String id : input.delete) { try { fingerprints.add(new com.google.gerrit.gpg.Fingerprint(com.google.gerrit.gpg.server.GpgKeys.parseFingerprint(id, existingExtIds))); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { } } return fingerprints; }",f3fcaa9551a73bea3ea90f077e34c5551f2f2e56,2018-03-08 15:00:23,3
163935,gerrit-server_src_test_java_com_google_gerrit_testutil_FakeAccountCache.java,"private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), new java.util.HashMap()); }",9cb8e6c2d49310283477839a2de9fb3776b078b6,"private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(account, com.google.common.collect.ImmutableSet.<com.google.gerrit.reviewdb.client.AccountGroup.UUID>of(), com.google.common.collect.ImmutableSet.<com.google.gerrit.reviewdb.client.AccountExternalId>of(), new java.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>>()); }",d901fb7bde1fda8d05b82986cd123852bed091cc,"private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), new java.util.HashMap()); }",9cb8e6c2d49310283477839a2de9fb3776b078b6,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_auth_openid_OpenIdProviderPattern.java,public boolean matches(com.google.gerrit.server.account.ExternalId extId) { return matches(extId.key().get()); },89d0064a7fb154fe3001bcdd51de765384d0f9c7,public boolean matches(com.google.gerrit.reviewdb.client.AccountExternalId id) { return matches(id.getExternalId()); },42f920a8087c421f3ad2e3cff37d4beb46500981,public boolean matches(com.google.gerrit.server.account.ExternalId extId) { return matches(extId.key().get()); },89d0064a7fb154fe3001bcdd51de765384d0f9c7,2018-03-08 15:00:23,3
163935,gerrit-server_src_test_java_com_google_gerrit_server_mail_send_FromAddressGeneratorProviderTest.java,"private com.google.gerrit.server.account.AccountState makeUser(final java.lang.String name, final java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(account, java.util.Collections.emptySet(), java.util.Collections.emptySet(), new java.util.HashMap()); }",0e45302035b5a872d705d08d1ddfe12b6507cb78,"private com.google.gerrit.server.account.AccountState makeUser(final java.lang.String name, final java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(account, java.util.Collections.<com.google.gerrit.reviewdb.client.AccountGroup.UUID>emptySet(), java.util.Collections.<com.google.gerrit.reviewdb.client.AccountExternalId>emptySet(), new java.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>>()); }",f7e3449733abbbd717da3f9ca89c8293f82f37c5,"private com.google.gerrit.server.account.AccountState makeUser(final java.lang.String name, final java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(account, java.util.Collections.emptySet(), java.util.Collections.emptySet(), new java.util.HashMap()); }",0e45302035b5a872d705d08d1ddfe12b6507cb78,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_api_accounts_AccountExternalIdCreator.java,"java.util.List<com.google.gerrit.server.account.ExternalId> create(com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String username, java.lang.String email);",cae5f32fba8ffe0a14271359af8f9d75a643a98b,"java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId> create(com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String username, java.lang.String email);",323c7d334cb4cdf02dca566fd0248beec30241a5,"java.util.List<com.google.gerrit.server.account.ExternalId> create(com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String username, java.lang.String email);",cae5f32fba8ffe0a14271359af8f9d75a643a98b,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountByEmailCacheImpl.java,@java.lang.Override public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String email) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.Account a : db.accounts().byPreferredEmail(email)) { r.add(a.getId()); } for (com.google.gerrit.server.account.AccountState accountState : accountQueryProvider.get().byEmailPrefix(email)) { if (accountState.getExternalIds().stream().filter(( e) -> email.equals(e.email())).findAny().isPresent()) { r.add(accountState.getAccount().getId()); } } return com.google.common.collect.ImmutableSet.copyOf(r); } },73fbdaba4ecc217a771913820fd0ec2be8b54ca1,@java.lang.Override public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String email) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.Account a : db.accounts().byPreferredEmail(email)) { r.add(a.getId()); } for (com.google.gerrit.server.account.AccountState accountState : accountQueryProvider.get().byEmailPrefix(email)) { if (accountState.getExternalIds().stream().filter(( e) -> email.equals(e.getEmailAddress())).findAny().isPresent()) { r.add(accountState.getAccount().getId()); } } return com.google.common.collect.ImmutableSet.copyOf(r); } },1cd94e12e6d379c00affe584f97db35b7323eaea,@java.lang.Override public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String email) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.Account a : db.accounts().byPreferredEmail(email)) { r.add(a.getId()); } for (com.google.gerrit.server.account.AccountState accountState : accountQueryProvider.get().byEmailPrefix(email)) { if (accountState.getExternalIds().stream().filter(( e) -> email.equals(e.email())).findAny().isPresent()) { r.add(accountState.getAccount().getId()); } } return com.google.common.collect.ImmutableSet.copyOf(r); } },73fbdaba4ecc217a771913820fd0ec2be8b54ca1,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountState.java,"public boolean checkPassword(java.lang.String password, java.lang.String username) { if (password == null) { return false; } for (com.google.gerrit.server.account.ExternalId id : getExternalIds()) { if ((!(id.isScheme(com.google.gerrit.server.account.ExternalId.SCHEME_USERNAME))) || (!(username.equals(id.key().id())))) { continue; } java.lang.String hashedStr = id.password(); if (!(com.google.common.base.Strings.isNullOrEmpty(hashedStr))) { try { return com.google.gerrit.server.account.HashedPassword.decode(hashedStr).checkPassword(password); } catch (org.apache.commons.codec.DecoderException e) { com.google.gerrit.server.account.AccountState.logger.error(java.lang.String.format(""DecoderException for user %s: %s "", username, e.getMessage())); return false; } } } return false; }",cbd2ea9f3595e37155ae83e8db9f5cab02928717,"public boolean checkPassword(java.lang.String password, java.lang.String username) { if (password == null) { return false; } for (com.google.gerrit.reviewdb.client.AccountExternalId id : getExternalIds()) { if ((!(id.isScheme(AccountExternalId.SCHEME_USERNAME))) || (!(username.equals(id.getSchemeRest())))) { continue; } java.lang.String hashedStr = id.getPassword(); if (!(com.google.common.base.Strings.isNullOrEmpty(hashedStr))) { try { return com.google.gerrit.server.account.HashedPassword.decode(hashedStr).checkPassword(password); } catch (org.apache.commons.codec.DecoderException e) { com.google.gerrit.server.account.AccountState.logger.error(java.lang.String.format(""DecoderException for user %s: %s "", username, e.getMessage())); return false; } } } return false; }",8737b5afef50fb3b68c7027b01f0d924b0e0c9d5,"public boolean checkPassword(java.lang.String password, java.lang.String username) { if (password == null) { return false; } for (com.google.gerrit.server.account.ExternalId id : getExternalIds()) { if ((!(id.isScheme(com.google.gerrit.server.account.ExternalId.SCHEME_USERNAME))) || (!(username.equals(id.key().id())))) { continue; } java.lang.String hashedStr = id.password(); if (!(com.google.common.base.Strings.isNullOrEmpty(hashedStr))) { try { return com.google.gerrit.server.account.HashedPassword.decode(hashedStr).checkPassword(password); } catch (org.apache.commons.codec.DecoderException e) { com.google.gerrit.server.account.AccountState.logger.error(java.lang.String.format(""DecoderException for user %s: %s "", username, e.getMessage())); return false; } } } return false; }",cbd2ea9f3595e37155ae83e8db9f5cab02928717,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountState.java,public static java.util.Set<java.lang.String> getEmails(java.util.Collection<com.google.gerrit.server.account.ExternalId> ids) { java.util.Set<java.lang.String> emails = new java.util.HashSet<>(); for (com.google.gerrit.server.account.ExternalId extId : ids) { if (extId.isScheme(com.google.gerrit.server.account.ExternalId.SCHEME_MAILTO)) { emails.add(extId.key().id()); } } return emails; },faf9a7f4822b4201ad83e48d93b147290a8c94a3,public static java.util.Set<java.lang.String> getEmails(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { java.util.Set<java.lang.String> emails = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_MAILTO)) { emails.add(id.getSchemeRest()); } } return emails; },bfce625226f344079f72ce509643607685fde95e,public static java.util.Set<java.lang.String> getEmails(java.util.Collection<com.google.gerrit.server.account.ExternalId> ids) { java.util.Set<java.lang.String> emails = new java.util.HashSet<>(); for (com.google.gerrit.server.account.ExternalId extId : ids) { if (extId.isScheme(com.google.gerrit.server.account.ExternalId.SCHEME_MAILTO)) { emails.add(extId.key().id()); } } return emails; },faf9a7f4822b4201ad83e48d93b147290a8c94a3,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountState.java,public java.util.Collection<com.google.gerrit.server.account.ExternalId> getExternalIds() { return externalIds; },cd8f84f210bc83f35b1ac255fec95280eb4e7ccd,public java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> getExternalIds() { return externalIds; },0cd14cee3e4b40c74ca073990a3cdf44458ed03b,public java.util.Collection<com.google.gerrit.server.account.ExternalId> getExternalIds() { return externalIds; },cd8f84f210bc83f35b1ac255fec95280eb4e7ccd,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountState.java,public static java.lang.String getUserName(java.util.Collection<com.google.gerrit.server.account.ExternalId> ids) { for (com.google.gerrit.server.account.ExternalId extId : ids) { if (extId.isScheme(com.google.gerrit.server.account.ExternalId.SCHEME_USERNAME)) { return extId.key().id(); } } return null; },b4910b998eed8d4bc3e2b28e449f7ef6960afeb1,public static java.lang.String getUserName(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME)) { return id.getSchemeRest(); } } return null; },e783b73ca1f6945ab98aacd93b91e49313f52555,public static java.lang.String getUserName(java.util.Collection<com.google.gerrit.server.account.ExternalId> ids) { for (com.google.gerrit.server.account.ExternalId extId : ids) { if (extId.isScheme(com.google.gerrit.server.account.ExternalId.SCHEME_USERNAME)) { return extId.key().id(); } } return null; },b4910b998eed8d4bc3e2b28e449f7ef6960afeb1,2018-03-08 15:00:23,3
163935,gerrit-gpg_src_test_java_com_google_gerrit_gpg_GerritPublicKeyCheckerTest.java,"private void addExternalId(java.lang.String scheme, java.lang.String id, java.lang.String email) throws java.lang.Exception { externalIdsUpdateFactory.create().insert(db, com.google.gerrit.server.account.ExternalId.createWithEmail(scheme, id, user.getAccountId(), email)); reloadUser(); }",4f6c012a5f3f53b6c0621706e3244d976ae71264,"private void addExternalId(java.lang.String scheme, java.lang.String id, java.lang.String email) throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(scheme, id)); if (email != null) { extId.setEmailAddress(email); } db.accountExternalIds().insert(java.util.Collections.singleton(extId)); reloadUser(); }",2fa4b98288c20ae0fd98b657b883c26d178602f7,"private void addExternalId(java.lang.String scheme, java.lang.String id, java.lang.String email) throws java.lang.Exception { externalIdsUpdateFactory.create().insert(db, com.google.gerrit.server.account.ExternalId.createWithEmail(scheme, id, user.getAccountId(), email)); reloadUser(); }",4f6c012a5f3f53b6c0621706e3244d976ae71264,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_query_account_InternalAccountQuery.java,"public java.util.List<com.google.gerrit.server.account.AccountState> byExternalId(java.lang.String scheme, java.lang.String id) throws com.google.gwtorm.server.OrmException { return byExternalId(ExternalId.Key.create(scheme, id)); }",a3fffa5f30b50fc5f1b3becd5ba0295790308503,public java.util.List<com.google.gerrit.server.account.AccountState> byExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { return query(com.google.gerrit.server.query.account.AccountPredicates.externalId(externalId)); },7531a8a372fb475671fb5af3f3706ac6d75b1eac,"public java.util.List<com.google.gerrit.server.account.AccountState> byExternalId(java.lang.String scheme, java.lang.String id) throws com.google.gwtorm.server.OrmException { return byExternalId(ExternalId.Key.create(scheme, id)); }",a3fffa5f30b50fc5f1b3becd5ba0295790308503,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_query_account_InternalAccountQuery.java,public com.google.gerrit.server.account.AccountState oneByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { return oneByExternalId(ExternalId.Key.parse(externalId)); },ce6cd33e55e8ce978e6a3d5c781df3652cb77094,"public com.google.gerrit.server.account.AccountState oneByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.account.AccountState> accountStates = byExternalId(externalId); if ((accountStates.size()) == 1) { return accountStates.get(0); } else if ((accountStates.size()) > 0) { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append(""Ambiguous external ID "").append(externalId).append(""for accounts: ""); com.google.common.base.Joiner.on("", "").appendTo(msg, com.google.common.collect.Lists.transform(accountStates, AccountState.ACCOUNT_ID_FUNCTION)); com.google.gerrit.server.query.account.InternalAccountQuery.log.warn(msg.toString()); } return null; }",5dd96be48afde205f51c0f23ea5317c60d8717fb,public com.google.gerrit.server.account.AccountState oneByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { return oneByExternalId(ExternalId.Key.parse(externalId)); },ce6cd33e55e8ce978e6a3d5c781df3652cb77094,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_api_accounts_AccountApiImpl.java,"@java.lang.Override public void addEmail(com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), input.email); try { createEmailFactory.create(input.email).apply(rsrc, input); } catch (com.google.gerrit.common.errors.EmailException | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot add email"", e); } }",e910a4ff0b9f8f18449fb36f3a8719ebf3aa32ac,"@java.lang.Override public void addEmail(com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), input.email); try { createEmailFactory.create(input.email).apply(rsrc, input); } catch (com.google.gerrit.common.errors.EmailException | com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot add email"", e); } }",080c6c2c4f89e12446e34689fef23b9d61863263,"@java.lang.Override public void addEmail(com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), input.email); try { createEmailFactory.create(input.email).apply(rsrc, input); } catch (com.google.gerrit.common.errors.EmailException | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot add email"", e); } }",e910a4ff0b9f8f18449fb36f3a8719ebf3aa32ac,2018-03-08 15:00:23,3
163935,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,"private void addExternalIdEmail(com.google.gerrit.acceptance.TestAccount account, java.lang.String email) throws java.lang.Exception { checkNotNull(email); externalIdsUpdate.insert(db, com.google.gerrit.server.account.ExternalId.createWithEmail(name(""test""), email, account.getId(), email)); accountCache.evict(account.getId()); setApiUser(account); }",2a10bd95e1c2a7d675782da2c0acecb57288349a,"private void addExternalIdEmail(com.google.gerrit.acceptance.TestAccount account, java.lang.String email) throws java.lang.Exception { checkNotNull(email); com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(account.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(name(""test""), email)); extId.setEmailAddress(email); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); accountCache.evict(account.getId()); setApiUser(account); }",f20bbaae77d3c783bd2f58bd857491ab09af42a3,"private void addExternalIdEmail(com.google.gerrit.acceptance.TestAccount account, java.lang.String email) throws java.lang.Exception { checkNotNull(email); externalIdsUpdate.insert(db, com.google.gerrit.server.account.ExternalId.createWithEmail(name(""test""), email, account.getId(), email)); setApiUser(account); }",0be5c4d189523edd8bcecaa7f7266a6d78d7c53d,2018-03-08 15:00:23,3
163935,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,@org.junit.Before public void saveExternalIds() throws java.lang.Exception { externalIdsUpdate = externalIdsUpdateFactory.create(); savedExternalIds = new java.util.ArrayList(); savedExternalIds.addAll(getExternalIds(admin)); savedExternalIds.addAll(getExternalIds(user)); },c14fa986588de509db1cf2c7823d6529655cefcf,@org.junit.Before public void saveExternalIds() throws java.lang.Exception { savedExternalIds = new java.util.ArrayList(); savedExternalIds.addAll(getExternalIds(admin)); savedExternalIds.addAll(getExternalIds(user)); },2e73c89d0c24a805549c621126204e786fc75908,@org.junit.Before public void saveExternalIds() throws java.lang.Exception { externalIdsUpdate = externalIdsUpdateFactory.create(); savedExternalIds = new java.util.ArrayList(); savedExternalIds.addAll(getExternalIds(admin)); savedExternalIds.addAll(getExternalIds(user)); },c14fa986588de509db1cf2c7823d6529655cefcf,2018-03-08 15:00:23,3
163935,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,"@org.junit.Test public void deleteEmailFromCustomExternalIdSchemes() throws java.lang.Exception { java.lang.String email = ""foo.bar@example.com""; java.lang.String extId1 = ""foo:bar""; java.lang.String extId2 = ""foo:baz""; java.util.List<com.google.gerrit.server.account.ExternalId> extIds = com.google.common.collect.ImmutableList.of(com.google.gerrit.server.account.ExternalId.createWithEmail(ExternalId.Key.parse(extId1), admin.id, email), com.google.gerrit.server.account.ExternalId.createWithEmail(ExternalId.Key.parse(extId2), admin.id, email)); externalIdsUpdateFactory.create().insert(db, extIds); accountCache.evict(admin.id); assertThat(gApi.accounts().self().getExternalIds().stream().map(( e) -> e.identity).collect(java.util.stream.Collectors.toSet())).containsAllOf(extId1, extId2); resetCurrentApiUser(); assertThat(getEmails()).contains(email); gApi.accounts().self().deleteEmail(email); resetCurrentApiUser(); assertThat(getEmails()).doesNotContain(email); assertThat(gApi.accounts().self().getExternalIds().stream().map(( e) -> e.identity).collect(java.util.stream.Collectors.toSet())).containsNoneOf(extId1, extId2); }",42b6c25af403aee3c7bb44ee277d46341b6f38f8,"@org.junit.Test public void deleteEmailFromCustomExternalIdSchemes() throws java.lang.Exception { java.lang.String email = ""foo.bar@example.com""; java.lang.String extId1 = ""foo:bar""; java.lang.String extId2 = ""foo:baz""; db.accountExternalIds().insert(com.google.common.collect.ImmutableList.of(createExternalIdWithEmail(extId1, email), createExternalIdWithEmail(extId2, email))); accountCache.evict(admin.id); assertThat(gApi.accounts().self().getExternalIds().stream().map(( e) -> e.identity).collect(java.util.stream.Collectors.toSet())).containsAllOf(extId1, extId2); resetCurrentApiUser(); assertThat(getEmails()).contains(email); gApi.accounts().self().deleteEmail(email); resetCurrentApiUser(); assertThat(getEmails()).doesNotContain(email); assertThat(gApi.accounts().self().getExternalIds().stream().map(( e) -> e.identity).collect(java.util.stream.Collectors.toSet())).containsNoneOf(extId1, extId2); }",1433ef5ff83a8847e2e54f7bf494b2679e9391a4,"@org.junit.Test public void deleteEmailFromCustomExternalIdSchemes() throws java.lang.Exception { java.lang.String email = ""foo.bar@example.com""; java.lang.String extId1 = ""foo:bar""; java.lang.String extId2 = ""foo:baz""; java.util.List<com.google.gerrit.server.account.ExternalId> extIds = com.google.common.collect.ImmutableList.of(com.google.gerrit.server.account.ExternalId.createWithEmail(ExternalId.Key.parse(extId1), admin.id, email), com.google.gerrit.server.account.ExternalId.createWithEmail(ExternalId.Key.parse(extId2), admin.id, email)); externalIdsUpdateFactory.create().insert(db, extIds); assertThat(gApi.accounts().self().getExternalIds().stream().map(( e) -> e.identity).collect(java.util.stream.Collectors.toSet())).containsAllOf(extId1, extId2); resetCurrentApiUser(); assertThat(getEmails()).contains(email); gApi.accounts().self().deleteEmail(email); resetCurrentApiUser(); assertThat(getEmails()).doesNotContain(email); assertThat(gApi.accounts().self().getExternalIds().stream().map(( e) -> e.identity).collect(java.util.stream.Collectors.toSet())).containsNoneOf(extId1, extId2); }",82e257f381ba556ac2d59b9365a1661dcb6c1dc1,2018-03-08 15:00:23,3
163935,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,private java.util.Collection<com.google.gerrit.server.account.ExternalId> getExternalIds(com.google.gerrit.acceptance.TestAccount account) throws java.lang.Exception { return accountCache.get(account.getId()).getExternalIds(); },4319ad6cfcdbbf3228dbdfb3567e243fc2bb9bd3,private java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> getExternalIds(com.google.gerrit.acceptance.TestAccount account) throws java.lang.Exception { return accountCache.get(account.getId()).getExternalIds(); },2916f48a7ca05cd9dafcfc333e70cca053b6265e,private java.util.Collection<com.google.gerrit.server.account.ExternalId> getExternalIds(com.google.gerrit.acceptance.TestAccount account) throws java.lang.Exception { return accountCache.get(account.getId()).getExternalIds(); },4319ad6cfcdbbf3228dbdfb3567e243fc2bb9bd3,2018-03-08 15:00:23,3
163935,gerrit-gpg_src_test_java_com_google_gerrit_gpg_GerritPublicKeyCheckerTest.java,"@org.junit.Test public void noExternalIds() throws java.lang.Exception { com.google.gerrit.server.account.ExternalIdsUpdate externalIdsUpdate = externalIdsUpdateFactory.create(); externalIdsUpdate.deleteAll(db, user.getAccountId()); reloadUser(); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); com.google.gerrit.gpg.PublicKeyChecker checker = checkerFactory.create(user, store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, ""No identities found for user; check http://test/#/settings/web-identities""); checker = checkerFactory.create().setStore(store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, ""Key is not associated with any users""); externalIdsUpdate.insert(db, com.google.gerrit.server.account.ExternalId.create(com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key.getPublicKey()), user.getAccountId())); reloadUser(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, ""No identities found for user""); }",6a9913bba5c54607aea7fcb82da51636a2b2bf3c,"@org.junit.Test public void noExternalIds() throws java.lang.Exception { db.accountExternalIds().delete(db.accountExternalIds().byAccount(user.getAccountId())); reloadUser(); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); com.google.gerrit.gpg.PublicKeyChecker checker = checkerFactory.create(user, store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, ""No identities found for user; check http://test/#/settings/web-identities""); checker = checkerFactory.create().setStore(store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, ""Key is not associated with any users""); db.accountExternalIds().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key.getPublicKey())))); reloadUser(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, ""No identities found for user""); }",dcaf1e82d163d303e77da37e1db8b57170e62569,"@org.junit.Test public void noExternalIds() throws java.lang.Exception { com.google.gerrit.server.account.ExternalIdsUpdate externalIdsUpdate = externalIdsUpdateFactory.create(); externalIdsUpdate.deleteAll(db, user.getAccountId()); reloadUser(); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); com.google.gerrit.gpg.PublicKeyChecker checker = checkerFactory.create(user, store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, ""No identities found for user; check http://test/#/settings/web-identities""); checker = checkerFactory.create().setStore(store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, ""Key is not associated with any users""); externalIdsUpdate.insert(db, com.google.gerrit.server.account.ExternalId.create(com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key.getPublicKey()), user.getAccountId())); reloadUser(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, ""No identities found for user""); }",6a9913bba5c54607aea7fcb82da51636a2b2bf3c,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_GetExternalIds.java,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { if ((self.get()) != (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to get external IDs""); } java.util.Collection<com.google.gerrit.server.account.ExternalId> ids = com.google.gerrit.server.account.ExternalId.from(db.get().accountExternalIds().byAccount(resource.getUser().getAccountId()).toList()); if (ids.isEmpty()) { return com.google.common.collect.ImmutableList.of(); } java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> result = com.google.common.collect.Lists.newArrayListWithCapacity(ids.size()); for (com.google.gerrit.server.account.ExternalId id : ids) { com.google.gerrit.extensions.common.AccountExternalIdInfo info = new com.google.gerrit.extensions.common.AccountExternalIdInfo(); info.identity = id.key().get(); info.emailAddress = id.email(); info.trusted = com.google.gerrit.server.account.GetExternalIds.toBoolean(authConfig.isIdentityTrustable(java.util.Collections.singleton(id))); if (!(id.isScheme(com.google.gerrit.server.account.ExternalId.SCHEME_USERNAME))) { com.google.gerrit.server.account.ExternalId.Key last = resource.getUser().getLastLoginExternalIdKey(); info.canDelete = com.google.gerrit.server.account.GetExternalIds.toBoolean(((last == null) || (!(last.get().equals(info.identity))))); } result.add(info); } return result; }",dea6dbf9222c5b3649cc67cb3fe97b0cf244474c,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { if ((self.get()) != (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to get external IDs""); } java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = db.get().accountExternalIds().byAccount(resource.getUser().getAccountId()).toList(); if (ids.isEmpty()) { return com.google.common.collect.ImmutableList.of(); } java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> result = com.google.common.collect.Lists.newArrayListWithCapacity(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { com.google.gerrit.extensions.common.AccountExternalIdInfo info = new com.google.gerrit.extensions.common.AccountExternalIdInfo(); info.identity = id.getExternalId(); info.emailAddress = id.getEmailAddress(); info.trusted = com.google.gerrit.server.account.GetExternalIds.toBoolean(authConfig.isIdentityTrustable(java.util.Collections.singleton(id))); if (!(id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME))) { com.google.gerrit.reviewdb.client.AccountExternalId.Key last = resource.getUser().getLastLoginExternalIdKey(); info.canDelete = com.google.gerrit.server.account.GetExternalIds.toBoolean(((last == null) || (!(last.get().equals(info.identity))))); } result.add(info); } return result; }",a998031ef640bc37c74523e26de7d1bbbf3cdcf9,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { if ((self.get()) != (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to get external IDs""); } java.util.Collection<com.google.gerrit.server.account.ExternalId> ids = com.google.gerrit.server.account.ExternalId.from(db.get().accountExternalIds().byAccount(resource.getUser().getAccountId()).toList()); if (ids.isEmpty()) { return com.google.common.collect.ImmutableList.of(); } java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> result = com.google.common.collect.Lists.newArrayListWithCapacity(ids.size()); for (com.google.gerrit.server.account.ExternalId id : ids) { com.google.gerrit.extensions.common.AccountExternalIdInfo info = new com.google.gerrit.extensions.common.AccountExternalIdInfo(); info.identity = id.key().get(); info.emailAddress = id.email(); info.trusted = com.google.gerrit.server.account.GetExternalIds.toBoolean(authConfig.isIdentityTrustable(java.util.Collections.singleton(id))); if (!(id.isScheme(com.google.gerrit.server.account.ExternalId.SCHEME_USERNAME))) { com.google.gerrit.server.account.ExternalId.Key last = resource.getUser().getLastLoginExternalIdKey(); info.canDelete = com.google.gerrit.server.account.GetExternalIds.toBoolean(((last == null) || (!(last.get().equals(info.identity))))); } result.add(info); } return result; }",dea6dbf9222c5b3649cc67cb3fe97b0cf244474c,2018-03-08 15:00:23,3
163935,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,"@org.junit.Test public void addOtherUsersGpgKey_Conflict() throws java.lang.Exception { addExternalIdEmail(admin, ""test5@example.com""); externalIdsUpdate.insert(db, com.google.gerrit.server.account.ExternalId.create(""foo"", ""myId"", user.getId())); accountCache.evict(user.getId()); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); addGpgKey(key.getPublicKeyArmored()); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""GPG key already associated with another account""); addGpgKey(key.getPublicKeyArmored()); }",0ff6535e39f761364057e075078c6937502d6428,"@org.junit.Test public void addOtherUsersGpgKey_Conflict() throws java.lang.Exception { addExternalIdEmail(admin, ""test5@example.com""); com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(""foo:myId"")); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); accountCache.evict(user.getId()); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); addGpgKey(key.getPublicKeyArmored()); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""GPG key already associated with another account""); addGpgKey(key.getPublicKeyArmored()); }",6103656f0f257d8bc256f73ac257a5f1a8d4b536,"@org.junit.Test public void addOtherUsersGpgKey_Conflict() throws java.lang.Exception { addExternalIdEmail(admin, ""test5@example.com""); externalIdsUpdate.insert(db, com.google.gerrit.server.account.ExternalId.create(""foo"", ""myId"", user.getId())); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); addGpgKey(key.getPublicKeyArmored()); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""GPG key already associated with another account""); addGpgKey(key.getPublicKeyArmored()); }",363e67bd1e93ad2947e65df24a8655b05b107f72,2018-03-08 15:00:23,3
163935,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,"@org.junit.After public void restoreExternalIds() throws java.lang.Exception { if ((savedExternalIds) != null) { externalIdsUpdate.delete(db, getExternalIds(admin)); externalIdsUpdate.delete(db, getExternalIds(user)); externalIdsUpdate.insert(db, savedExternalIds); } accountCache.evict(admin.getId()); accountCache.evict(user.getId()); }",a9702e6ad4c9111352100a1ba3763ca5c7fb58a4,@org.junit.After public void restoreExternalIds() throws java.lang.Exception { if ((savedExternalIds) != null) { db.accountExternalIds().delete(getExternalIds(admin)); db.accountExternalIds().delete(getExternalIds(user)); db.accountExternalIds().insert(savedExternalIds); } accountCache.evict(admin.getId()); accountCache.evict(user.getId()); },b5b626fda4808345122b5def3f0e4bd0c89126a8,"@org.junit.After public void restoreExternalIds() throws java.lang.Exception { if ((savedExternalIds) != null) { externalIdsUpdate.delete(db, getExternalIds(admin)); externalIdsUpdate.delete(db, getExternalIds(user)); externalIdsUpdate.insert(db, savedExternalIds); } }",8f19c7a00b1dd5c18392e2e6e20d8015e5c8c04c,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_PutUsername.java,"@java.lang.Override public java.lang.String apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutUsername.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set username""); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""realm does not allow editing username""); } if (input == null) { input = new com.google.gerrit.server.account.PutUsername.Input(); } try { changeUserNameFactory.create(db.get(), rsrc.getUser(), input.username).call(); } catch (java.lang.IllegalStateException e) { if (ChangeUserName.USERNAME_CANNOT_BE_CHANGED.equals(e.getMessage())) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(e.getMessage()); } throw e; } catch (com.google.gerrit.server.account.InvalidUserNameException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""invalid username""); } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""username already used""); } return input.username; }",72adb73a30dda8c3f09def7650ffd199c3afdb43,"@java.lang.Override public java.lang.String apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutUsername.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set username""); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""realm does not allow editing username""); } if (input == null) { input = new com.google.gerrit.server.account.PutUsername.Input(); } try { changeUserNameFactory.create(db.get(), rsrc.getUser(), input.username).call(); } catch (java.lang.IllegalStateException e) { if (ChangeUserName.USERNAME_CANNOT_BE_CHANGED.equals(e.getMessage())) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(e.getMessage()); } throw e; } catch (com.google.gerrit.server.account.InvalidUserNameException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""invalid username""); } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""username already used""); } return input.username; }",69d866f5afcf7552a5941a3697ba30af9aef09ff,"@java.lang.Override public java.lang.String apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutUsername.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set username""); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""realm does not allow editing username""); } if (input == null) { input = new com.google.gerrit.server.account.PutUsername.Input(); } try { changeUserNameFactory.create(db.get(), rsrc.getUser(), input.username).call(); } catch (java.lang.IllegalStateException e) { if (ChangeUserName.USERNAME_CANNOT_BE_CHANGED.equals(e.getMessage())) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(e.getMessage()); } throw e; } catch (com.google.gerrit.server.account.InvalidUserNameException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""invalid username""); } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""username already used""); } return input.username; }",72adb73a30dda8c3f09def7650ffd199c3afdb43,2018-03-08 15:00:23,3
163935,gerrit-httpd_src_main_java_com_google_gerrit_httpd_auth_become_BecomeAnyAccountLoginServlet.java,"private com.google.gerrit.server.account.AuthResult auth(com.google.gerrit.reviewdb.client.Account.Id account) { if (account != null) { return new com.google.gerrit.server.account.AuthResult(account, null, false); } return null; }",ebfc80a9aa189f89658fbe599fc58b9be990d9b3,"private com.google.gerrit.server.account.AuthResult auth(final com.google.gerrit.reviewdb.client.AccountExternalId account) { if (account != null) { return new com.google.gerrit.server.account.AuthResult(account.getAccountId(), null, false); } return null; }",7b350bbc6aaf80b45d757c8f937d767d587f8dec,"private com.google.gerrit.server.account.AuthResult auth(com.google.gerrit.reviewdb.client.Account.Id account) { if (account != null) { return new com.google.gerrit.server.account.AuthResult(account, null, false); } return null; }",ebfc80a9aa189f89658fbe599fc58b9be990d9b3,2018-03-08 15:00:23,3
163935,gerrit-httpd_src_main_java_com_google_gerrit_httpd_auth_become_BecomeAnyAccountLoginServlet.java,"private com.google.gerrit.server.account.AuthResult byUserName(final java.lang.String userName) { try { java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQuery.byExternalId(com.google.gerrit.httpd.auth.become.SCHEME_USERNAME, userName); if (accountStates.isEmpty()) { getServletContext().log(((""No accounts with username "" + userName) + "" found"")); return null; } if ((accountStates.size()) > 1) { getServletContext().log(((""Multiple accounts with username "" + userName) + "" found"")); return null; } return auth(accountStates.get(0).getAccount().getId()); } catch (com.google.gwtorm.server.OrmException e) { getServletContext().log(""cannot query account index"", e); return null; } }",9c47959648825485eb7b3d1e72727553dabe668f,"private com.google.gerrit.server.account.AuthResult byUserName(final java.lang.String userName) { try { com.google.gerrit.reviewdb.client.AccountExternalId.Key extKey = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, userName); java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQuery.byExternalId(extKey.get()); if (accountStates.isEmpty()) { getServletContext().log(((""No accounts with username "" + userName) + "" found"")); return null; } if ((accountStates.size()) > 1) { getServletContext().log(((""Multiple accounts with username "" + userName) + "" found"")); return null; } return auth(new com.google.gerrit.reviewdb.client.AccountExternalId(accountStates.get(0).getAccount().getId(), extKey)); } catch (com.google.gwtorm.server.OrmException e) { getServletContext().log(""cannot query account index"", e); return null; } }",559a0f5320de5e0cb2ee17c7c247b0554ca5a05a,"private com.google.gerrit.server.account.AuthResult byUserName(final java.lang.String userName) { try { java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQuery.byExternalId(com.google.gerrit.httpd.auth.become.SCHEME_USERNAME, userName); if (accountStates.isEmpty()) { getServletContext().log(((""No accounts with username "" + userName) + "" found"")); return null; } if ((accountStates.size()) > 1) { getServletContext().log(((""Multiple accounts with username "" + userName) + "" found"")); return null; } return auth(accountStates.get(0).getAccount().getId()); } catch (com.google.gwtorm.server.OrmException e) { getServletContext().log(""cannot query account index"", e); return null; } }",9c47959648825485eb7b3d1e72727553dabe668f,2018-03-08 15:00:23,3
163935,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,"@org.junit.Test public void lookUpFromCacheByEmail() throws java.lang.Exception { assertEmail(byEmailCache.get(admin.email), admin); java.lang.String email = ""foo.bar@example.com""; externalIdsUpdateFactory.create().insert(db, com.google.gerrit.server.account.ExternalId.createWithEmail(ExternalId.Key.parse(""foo:bar""), admin.id, email)); accountCache.evict(admin.id); assertEmail(byEmailCache.get(email), admin); assertThat(byEmailCache.get(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(byEmailCache.get(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(byEmailCache.get(""non-existing@example.com"")).isEmpty(); }",5ca2d952a026e5ab271e805588f7df48675954a1,"@org.junit.Test public void lookUpFromCacheByEmail() throws java.lang.Exception { assertEmail(byEmailCache.get(admin.email), admin); java.lang.String email = ""foo.bar@example.com""; db.accountExternalIds().insert(com.google.common.collect.ImmutableList.of(createExternalIdWithEmail(""foo:bar"", email))); accountCache.evict(admin.id); assertEmail(byEmailCache.get(email), admin); assertThat(byEmailCache.get(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(byEmailCache.get(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(byEmailCache.get(""non-existing@example.com"")).isEmpty(); }",190b68ddd5322be9c044e50d2651b6fd2a9beeff,"@org.junit.Test public void lookUpFromCacheByEmail() throws java.lang.Exception { assertEmail(byEmailCache.get(admin.email), admin); java.lang.String email = ""foo.bar@example.com""; externalIdsUpdateFactory.create().insert(db, com.google.gerrit.server.account.ExternalId.createWithEmail(ExternalId.Key.parse(""foo:bar""), admin.id, email)); assertEmail(byEmailCache.get(email), admin); assertThat(byEmailCache.get(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(byEmailCache.get(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(byEmailCache.get(""non-existing@example.com"")).isEmpty(); }",8a730e4b14e759176380379286658764556a19e6,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_DeleteEmail.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.Email rsrc, com.google.gerrit.server.account.DeleteEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to delete email address""); } return apply(rsrc.getUser(), rsrc.getEmail()); }",29ea33bf3ee5a813827ef3306db83b3d2dac24bc,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.Email rsrc, com.google.gerrit.server.account.DeleteEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to delete email address""); } return apply(rsrc.getUser(), rsrc.getEmail()); }",499101bc575e958240d436a8ea11ac38a59fe488,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.Email rsrc, com.google.gerrit.server.account.DeleteEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to delete email address""); } return apply(rsrc.getUser(), rsrc.getEmail()); }",29ea33bf3ee5a813827ef3306db83b3d2dac24bc,2018-03-08 15:00:23,3
163935,gerrit-httpd_src_main_java_com_google_gerrit_httpd_WebSession.java,ExternalId.Key getLastLoginExternalId();,c91667bade9bc723dff35485d8939883f7210907,AccountExternalId.Key getLastLoginExternalId();,fac454b787fd00efd97c68e56978d3c25020ddb3,ExternalId.Key getLastLoginExternalId();,c91667bade9bc723dff35485d8939883f7210907,2018-03-08 15:00:23,3
163935,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,"private void assertKeys(java.lang.Iterable<com.google.gerrit.gpg.testutil.TestKey> expectedKeys) throws java.lang.Exception { com.google.common.collect.FluentIterable<com.google.gerrit.gpg.testutil.TestKey> expected = com.google.common.collect.FluentIterable.from(expectedKeys); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keyMap = gApi.accounts().self().listGpgKeys(); assertThat(keyMap.keySet()).named(""keys returned by listGpgKeys()"").containsExactlyElementsIn(expected.transform(TestKey::getKeyIdString)); for (com.google.gerrit.gpg.testutil.TestKey key : expected) { com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, gApi.accounts().self().gpgKey(key.getKeyIdString()).get()); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, gApi.accounts().self().gpgKey(com.google.gerrit.gpg.Fingerprint.toString(key.getPublicKey().getFingerprint())).get()); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyMapContains(key, keyMap); } com.google.gerrit.reviewdb.client.Account.Id currAccountId = atrScope.get().getUser().getAccountId(); java.lang.Iterable<java.lang.String> expectedFps = expected.transform(( k) -> com.google.common.io.BaseEncoding.base16().encode(k.getPublicKey().getFingerprint())); java.lang.Iterable<java.lang.String> actualFps = com.google.gerrit.gpg.server.GpgKeys.getGpgExtIds(db, currAccountId).transform(( e) -> e.key().id()); assertThat(actualFps).named(""external IDs in database"").containsExactlyElementsIn(expectedFps); for (com.google.gerrit.gpg.testutil.TestKey key : expected) { getOnlyKeyFromStore(key); } }",898e90355c9e803fe334d1ceecef4f9a24e41638,"private void assertKeys(java.lang.Iterable<com.google.gerrit.gpg.testutil.TestKey> expectedKeys) throws java.lang.Exception { com.google.common.collect.FluentIterable<com.google.gerrit.gpg.testutil.TestKey> expected = com.google.common.collect.FluentIterable.from(expectedKeys); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keyMap = gApi.accounts().self().listGpgKeys(); assertThat(keyMap.keySet()).named(""keys returned by listGpgKeys()"").containsExactlyElementsIn(expected.transform(TestKey::getKeyIdString)); for (com.google.gerrit.gpg.testutil.TestKey key : expected) { com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, gApi.accounts().self().gpgKey(key.getKeyIdString()).get()); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, gApi.accounts().self().gpgKey(com.google.gerrit.gpg.Fingerprint.toString(key.getPublicKey().getFingerprint())).get()); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyMapContains(key, keyMap); } com.google.gerrit.reviewdb.client.Account.Id currAccountId = atrScope.get().getUser().getAccountId(); java.lang.Iterable<java.lang.String> expectedFps = expected.transform(( k) -> com.google.common.io.BaseEncoding.base16().encode(k.getPublicKey().getFingerprint())); java.lang.Iterable<java.lang.String> actualFps = com.google.gerrit.gpg.server.GpgKeys.getGpgExtIds(db, currAccountId).transform(AccountExternalId::getSchemeRest); assertThat(actualFps).named(""external IDs in database"").containsExactlyElementsIn(expectedFps); for (com.google.gerrit.gpg.testutil.TestKey key : expected) { getOnlyKeyFromStore(key); } }",630083c2860f72ce59abd811b8df62f9a722a0e1,"private void assertKeys(java.lang.Iterable<com.google.gerrit.gpg.testutil.TestKey> expectedKeys) throws java.lang.Exception { com.google.common.collect.FluentIterable<com.google.gerrit.gpg.testutil.TestKey> expected = com.google.common.collect.FluentIterable.from(expectedKeys); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keyMap = gApi.accounts().self().listGpgKeys(); assertThat(keyMap.keySet()).named(""keys returned by listGpgKeys()"").containsExactlyElementsIn(expected.transform(TestKey::getKeyIdString)); for (com.google.gerrit.gpg.testutil.TestKey key : expected) { com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, gApi.accounts().self().gpgKey(key.getKeyIdString()).get()); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, gApi.accounts().self().gpgKey(com.google.gerrit.gpg.Fingerprint.toString(key.getPublicKey().getFingerprint())).get()); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyMapContains(key, keyMap); } com.google.gerrit.reviewdb.client.Account.Id currAccountId = atrScope.get().getUser().getAccountId(); java.lang.Iterable<java.lang.String> expectedFps = expected.transform(( k) -> com.google.common.io.BaseEncoding.base16().encode(k.getPublicKey().getFingerprint())); java.lang.Iterable<java.lang.String> actualFps = com.google.gerrit.gpg.server.GpgKeys.getGpgExtIds(db, currAccountId).transform(( e) -> e.key().id()); assertThat(actualFps).named(""external IDs in database"").containsExactlyElementsIn(expectedFps); for (com.google.gerrit.gpg.testutil.TestKey key : expected) { getOnlyKeyFromStore(key); } }",898e90355c9e803fe334d1ceecef4f9a24e41638,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_config_AuthConfig.java,public boolean isIdentityTrustable(java.util.Collection<com.google.gerrit.server.account.ExternalId> ids) { switch (getAuthType()) { case DEVELOPMENT_BECOME_ANY_ACCOUNT : case HTTP : case HTTP_LDAP : case LDAP : case LDAP_BIND : case CLIENT_SSL_CERT_LDAP : case CUSTOM_EXTENSION : case OAUTH : return true; case OPENID_SSO : return true; case OPENID : for (com.google.gerrit.server.account.ExternalId e : ids) { if (!(isTrusted(e))) { return false; } } return true; default : return false; } },4217e4bbb38440661ff591eb433d257ca23d8dc3,public boolean isIdentityTrustable(final java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { switch (getAuthType()) { case DEVELOPMENT_BECOME_ANY_ACCOUNT : case HTTP : case HTTP_LDAP : case LDAP : case LDAP_BIND : case CLIENT_SSL_CERT_LDAP : case CUSTOM_EXTENSION : case OAUTH : return true; case OPENID_SSO : return true; case OPENID : for (final com.google.gerrit.reviewdb.client.AccountExternalId e : ids) { if (!(isTrusted(e))) { return false; } } return true; default : return false; } },4d7c9c622d470c680916af4fc05bf614fb6da8e5,public boolean isIdentityTrustable(java.util.Collection<com.google.gerrit.server.account.ExternalId> ids) { switch (getAuthType()) { case DEVELOPMENT_BECOME_ANY_ACCOUNT : case HTTP : case HTTP_LDAP : case LDAP : case LDAP_BIND : case CLIENT_SSL_CERT_LDAP : case CUSTOM_EXTENSION : case OAUTH : return true; case OPENID_SSO : return true; case OPENID : for (com.google.gerrit.server.account.ExternalId e : ids) { if (!(isTrusted(e))) { return false; } } return true; default : return false; } },4217e4bbb38440661ff591eb433d257ca23d8dc3,2018-03-08 15:00:23,3
163935,gerrit-gpg_src_main_java_com_google_gerrit_gpg_server_PostGpgKeys.java,"private com.google.gerrit.reviewdb.client.Account getAccountByExternalId(com.google.gerrit.server.account.ExternalId.Key extIdKey) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQueryProvider.get().byExternalId(extIdKey); if (accountStates.isEmpty()) { return null; } if ((accountStates.size()) > 1) { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append(""GPG key "").append(extIdKey.get()).append("" associated with multiple accounts: ""); com.google.common.base.Joiner.on("", "").appendTo(msg, com.google.common.collect.Lists.transform(accountStates, AccountState.ACCOUNT_ID_FUNCTION)); log.error(msg.toString()); throw new java.lang.IllegalStateException(msg.toString()); } return accountStates.get(0).getAccount(); }",3bc055984a19d869e38f2645caaf3ebe0bafed31,"private com.google.gerrit.reviewdb.client.Account getAccountByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQueryProvider.get().byExternalId(externalId); if (accountStates.isEmpty()) { return null; } if ((accountStates.size()) > 1) { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append(""GPG key "").append(externalId).append("" associated with multiple accounts: ""); com.google.common.base.Joiner.on("", "").appendTo(msg, com.google.common.collect.Lists.transform(accountStates, AccountState.ACCOUNT_ID_FUNCTION)); log.error(msg.toString()); throw new java.lang.IllegalStateException(msg.toString()); } return accountStates.get(0).getAccount(); }",81c068362107ffdfe7c203d52cdbbc52dcac3acb,"private com.google.gerrit.reviewdb.client.Account getAccountByExternalId(com.google.gerrit.server.account.ExternalId.Key extIdKey) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQueryProvider.get().byExternalId(extIdKey); if (accountStates.isEmpty()) { return null; } if ((accountStates.size()) > 1) { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append(""GPG key "").append(extIdKey.get()).append("" associated with multiple accounts: ""); com.google.common.base.Joiner.on("", "").appendTo(msg, com.google.common.collect.Lists.transform(accountStates, AccountState.ACCOUNT_ID_FUNCTION)); log.error(msg.toString()); throw new java.lang.IllegalStateException(msg.toString()); } return accountStates.get(0).getAccount(); }",3bc055984a19d869e38f2645caaf3ebe0bafed31,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_api_accounts_AccountApiImpl.java,"@java.lang.Override public void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), email); try { deleteEmail.apply(rsrc, null); } catch (com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete email"", e); } }",4c166c527892d7a16a66ecf9f74ee1ec78433be6,"@java.lang.Override public void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), email); try { deleteEmail.apply(rsrc, null); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete email"", e); } }",1ac2d81f2ed0a700478fdfb59e088c1227c27660,"@java.lang.Override public void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), email); try { deleteEmail.apply(rsrc, null); } catch (com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete email"", e); } }",4c166c527892d7a16a66ecf9f74ee1ec78433be6,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountCacheImpl.java,"@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { com.google.gerrit.server.account.AccountState accountState = accountQueryProvider.get().oneByExternalId(com.google.gerrit.server.account.ExternalId.SCHEME_USERNAME, username); return java.util.Optional.ofNullable(accountState).map(( s) -> s.getAccount().getId()); }",fc36c846343618ad3ecf389b593c6bdebd25fc8e,"@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_USERNAME, username); com.google.gerrit.server.account.AccountState accountState = accountQueryProvider.get().oneByExternalId(key.get()); return java.util.Optional.ofNullable(accountState).map(( s) -> s.getAccount().getId()); }",26afafa04e6aecf20df63362a5d92cd56b8025f8,"@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { com.google.gerrit.server.account.AccountState accountState = accountQueryProvider.get().oneByExternalId(com.google.gerrit.server.account.ExternalId.SCHEME_USERNAME, username); return java.util.Optional.ofNullable(accountState).map(( s) -> s.getAccount().getId()); }",fc36c846343618ad3ecf389b593c6bdebd25fc8e,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountCacheImpl.java,"private static com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> anon = com.google.common.collect.ImmutableSet.of(); return new com.google.gerrit.server.account.AccountState(account, anon, java.util.Collections.emptySet(), new java.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>>()); }",5fa060c1b5d71a52f1e1a0b07e986aec0f7e4c4a,"private static com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = java.util.Collections.emptySet(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> anon = com.google.common.collect.ImmutableSet.of(); return new com.google.gerrit.server.account.AccountState(account, anon, ids, new java.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>>()); }",eb7d378787780e11f79a2cbab6c43382914eacd9,"private static com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> anon = com.google.common.collect.ImmutableSet.of(); return new com.google.gerrit.server.account.AccountState(account, anon, java.util.Collections.emptySet(), new java.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>>()); }",5fa060c1b5d71a52f1e1a0b07e986aec0f7e4c4a,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountCacheImpl.java,"private java.util.Optional<com.google.gerrit.server.account.AccountState> load(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.Account.Id who) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.Account account = db.accounts().get(who); if (account == null) { return java.util.Optional.empty(); } java.util.Set<com.google.gerrit.server.account.ExternalId> externalIds = com.google.gerrit.server.account.ExternalId.from(db.accountExternalIds().byAccount(who).toList()); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> internalGroups = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember g : db.accountGroupMembers().byAccount(who)) { final com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = g.getAccountGroupId(); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupId); if ((group != null) && ((group.getGroupUUID()) != null)) { internalGroups.add(group.getGroupUUID()); } } internalGroups = java.util.Collections.unmodifiableSet(internalGroups); try { account.setGeneralPreferences(loader.load(who)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.account.AccountCacheImpl.log.warn(((""Cannot load GeneralPreferences for "" + who) + "" (using default)""), e); account.setGeneralPreferences(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); } return java.util.Optional.of(new com.google.gerrit.server.account.AccountState(account, internalGroups, externalIds, watchConfig.get().getProjectWatches(who))); }",5327aec6a4172552e4e4bc4d5a7ae0dbc2f98aa6,"private java.util.Optional<com.google.gerrit.server.account.AccountState> load(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.Account.Id who) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.Account account = db.accounts().get(who); if (account == null) { return java.util.Optional.empty(); } java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds = java.util.Collections.unmodifiableCollection(db.accountExternalIds().byAccount(who).toList()); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> internalGroups = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember g : db.accountGroupMembers().byAccount(who)) { final com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = g.getAccountGroupId(); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupId); if ((group != null) && ((group.getGroupUUID()) != null)) { internalGroups.add(group.getGroupUUID()); } } internalGroups = java.util.Collections.unmodifiableSet(internalGroups); try { account.setGeneralPreferences(loader.load(who)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.account.AccountCacheImpl.log.warn(((""Cannot load GeneralPreferences for "" + who) + "" (using default)""), e); account.setGeneralPreferences(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); } return java.util.Optional.of(new com.google.gerrit.server.account.AccountState(account, internalGroups, externalIds, watchConfig.get().getProjectWatches(who))); }",6fa2843b404bcb3dd9e063ec0b14f5d4a47c78ca,"private java.util.Optional<com.google.gerrit.server.account.AccountState> load(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.Account.Id who) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.Account account = db.accounts().get(who); if (account == null) { return java.util.Optional.empty(); } java.util.Set<com.google.gerrit.server.account.ExternalId> externalIds = com.google.gerrit.server.account.ExternalId.from(db.accountExternalIds().byAccount(who).toList()); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> internalGroups = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember g : db.accountGroupMembers().byAccount(who)) { final com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = g.getAccountGroupId(); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupId); if ((group != null) && ((group.getGroupUUID()) != null)) { internalGroups.add(group.getGroupUUID()); } } internalGroups = java.util.Collections.unmodifiableSet(internalGroups); try { account.setGeneralPreferences(loader.load(who)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.account.AccountCacheImpl.log.warn(((""Cannot load GeneralPreferences for "" + who) + "" (using default)""), e); account.setGeneralPreferences(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); } return java.util.Optional.of(new com.google.gerrit.server.account.AccountState(account, internalGroups, externalIds, watchConfig.get().getProjectWatches(who))); }",5327aec6a4172552e4e4bc4d5a7ae0dbc2f98aa6,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountCacheImpl.java,"@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.open()) { return java.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key((((com.google.gerrit.server.account.ExternalId.SCHEME_USERNAME) + "":"") + username)))).map(AccountExternalId::getAccountId); } }",f56f9ab41937076caa09f43482db5887fac2115a,"@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.open()) { return java.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key((((ExternalId.SCHEME_USERNAME) + "":"") + username)))).map(AccountExternalId::getAccountId); } }",9687df36ab8ec188154c887b615a3e7f10dc4639,"@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.open()) { return java.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key((((com.google.gerrit.server.account.ExternalId.SCHEME_USERNAME) + "":"") + username)))).map(AccountExternalId::getAccountId); } }",f56f9ab41937076caa09f43482db5887fac2115a,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_AbstractRealm.java,"@java.lang.Override public boolean hasEmailAddress(com.google.gerrit.server.IdentifiedUser user, java.lang.String email) { for (com.google.gerrit.server.account.ExternalId ext : user.state().getExternalIds()) { if ((email != null) && (email.equalsIgnoreCase(ext.email()))) { return true; } } return false; }",6df4bbdb8f16ad8a70a9fa48ff6e4e9a0ed104dc,"@java.lang.Override public boolean hasEmailAddress(com.google.gerrit.server.IdentifiedUser user, java.lang.String email) { for (com.google.gerrit.reviewdb.client.AccountExternalId ext : user.state().getExternalIds()) { if ((email != null) && (email.equalsIgnoreCase(ext.getEmailAddress()))) { return true; } } return false; }",5babe01a87290005088bd4e9136acc77055660d6,"@java.lang.Override public boolean hasEmailAddress(com.google.gerrit.server.IdentifiedUser user, java.lang.String email) { for (com.google.gerrit.server.account.ExternalId ext : user.state().getExternalIds()) { if ((email != null) && (email.equalsIgnoreCase(ext.email()))) { return true; } } return false; }",6df4bbdb8f16ad8a70a9fa48ff6e4e9a0ed104dc,2018-03-08 15:00:23,3
163935,gerrit-gpg_src_main_java_com_google_gerrit_gpg_api_GpgKeyApiImpl.java,"@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { delete.apply(rsrc, new com.google.gerrit.gpg.server.DeleteGpgKey.Input()); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete GPG key"", e); } }",6b9620e311d7695e73e32da16ca18890c32ae92d,"@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { delete.apply(rsrc, new com.google.gerrit.gpg.server.DeleteGpgKey.Input()); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete GPG key"", e); } }",c9a05bd1fe7b66a52bbaad64a930a0383451f9ef,"@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { delete.apply(rsrc, new com.google.gerrit.gpg.server.DeleteGpgKey.Input()); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete GPG key"", e); } }",6b9620e311d7695e73e32da16ca18890c32ae92d,2018-03-08 15:00:23,3
163935,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_SetAccountCommand.java,"private void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (email.equals(""ALL"")) { java.util.List<com.google.gerrit.extensions.common.EmailInfo> emails = getEmails.apply(rsrc); for (com.google.gerrit.extensions.common.EmailInfo e : emails) { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, e.email), new com.google.gerrit.server.account.DeleteEmail.Input()); } } else { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, email), new com.google.gerrit.server.account.DeleteEmail.Input()); } }",4ec127d491c5ec39c303d9d29c3fbc0a33286291,"private void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { if (email.equals(""ALL"")) { java.util.List<com.google.gerrit.extensions.common.EmailInfo> emails = getEmails.apply(rsrc); for (com.google.gerrit.extensions.common.EmailInfo e : emails) { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, e.email), new com.google.gerrit.server.account.DeleteEmail.Input()); } } else { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, email), new com.google.gerrit.server.account.DeleteEmail.Input()); } }",84b1c2de26c9545f00d1203558f596b20609c480,"private void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (email.equals(""ALL"")) { java.util.List<com.google.gerrit.extensions.common.EmailInfo> emails = getEmails.apply(rsrc); for (com.google.gerrit.extensions.common.EmailInfo e : emails) { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, e.email), new com.google.gerrit.server.account.DeleteEmail.Input()); } } else { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, email), new com.google.gerrit.server.account.DeleteEmail.Input()); } }",4ec127d491c5ec39c303d9d29c3fbc0a33286291,2018-03-08 15:00:23,3
163935,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_SetAccountCommand.java,"private void addEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.extensions.api.accounts.EmailInput in = new com.google.gerrit.extensions.api.accounts.EmailInput(); in.email = email; in.noConfirmation = true; try { createEmailFactory.create(email).apply(rsrc, in); } catch (com.google.gerrit.common.errors.EmailException e) { throw die(e.getMessage()); } }",4d31339ec4e792ed6e5e3228f366f2f7161a3add,"private void addEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.extensions.api.accounts.EmailInput in = new com.google.gerrit.extensions.api.accounts.EmailInput(); in.email = email; in.noConfirmation = true; try { createEmailFactory.create(email).apply(rsrc, in); } catch (com.google.gerrit.common.errors.EmailException e) { throw die(e.getMessage()); } }",7f092b3c307c347abc2346f15bb00b0ccd8ec178,"private void addEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.extensions.api.accounts.EmailInput in = new com.google.gerrit.extensions.api.accounts.EmailInput(); in.email = email; in.noConfirmation = true; try { createEmailFactory.create(email).apply(rsrc, in); } catch (com.google.gerrit.common.errors.EmailException e) { throw die(e.getMessage()); } }",4d31339ec4e792ed6e5e3228f366f2f7161a3add,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_AbstractRealm.java,@java.lang.Override public java.util.Set<java.lang.String> getEmailAddresses(com.google.gerrit.server.IdentifiedUser user) { java.util.Collection<com.google.gerrit.server.account.ExternalId> ids = user.state().getExternalIds(); java.util.Set<java.lang.String> emails = com.google.common.collect.Sets.newHashSetWithExpectedSize(ids.size()); for (com.google.gerrit.server.account.ExternalId ext : ids) { if (!(com.google.common.base.Strings.isNullOrEmpty(ext.email()))) { emails.add(ext.email()); } } return emails; },a3e6c62f772d3bfdcd384d0bf1d3d86db1eaaee2,@java.lang.Override public java.util.Set<java.lang.String> getEmailAddresses(com.google.gerrit.server.IdentifiedUser user) { java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = user.state().getExternalIds(); java.util.Set<java.lang.String> emails = com.google.common.collect.Sets.newHashSetWithExpectedSize(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId ext : ids) { if (!(com.google.common.base.Strings.isNullOrEmpty(ext.getEmailAddress()))) { emails.add(ext.getEmailAddress()); } } return emails; },e5c78704ece7fc171ee80a8f474521f5def8b0af,@java.lang.Override public java.util.Set<java.lang.String> getEmailAddresses(com.google.gerrit.server.IdentifiedUser user) { java.util.Collection<com.google.gerrit.server.account.ExternalId> ids = user.state().getExternalIds(); java.util.Set<java.lang.String> emails = com.google.common.collect.Sets.newHashSetWithExpectedSize(ids.size()); for (com.google.gerrit.server.account.ExternalId ext : ids) { if (!(com.google.common.base.Strings.isNullOrEmpty(ext.email()))) { emails.add(ext.email()); } } return emails; },a3e6c62f772d3bfdcd384d0bf1d3d86db1eaaee2,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_CreateEmail.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EmailInfo> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.common.errors.EmailException, com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to add email address""); } if (input == null) { input = new com.google.gerrit.extensions.api.accounts.EmailInput(); } if (!(com.google.gerrit.server.mail.send.OutgoingEmailValidator.isValid(email))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""invalid email address""); } if ((input.noConfirmation) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to use no_confirmation""); } if (!(realm.allowsEdit(AccountFieldName.REGISTER_NEW_EMAIL))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""realm does not allow adding emails""); } return apply(rsrc.getUser(), input); }",3a726d3b4a0a7abe26b7d8522d56e8693aea4ff3,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EmailInfo> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.common.errors.EmailException, com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to add email address""); } if (input == null) { input = new com.google.gerrit.extensions.api.accounts.EmailInput(); } if (!(com.google.gerrit.server.mail.send.OutgoingEmailValidator.isValid(email))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""invalid email address""); } if ((input.noConfirmation) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to use no_confirmation""); } if (!(realm.allowsEdit(AccountFieldName.REGISTER_NEW_EMAIL))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""realm does not allow adding emails""); } return apply(rsrc.getUser(), input); }",438924f6b0fc77e4bb15b422ab5517384435aeae,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EmailInfo> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.common.errors.EmailException, com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to add email address""); } if (input == null) { input = new com.google.gerrit.extensions.api.accounts.EmailInput(); } if ((input.noConfirmation) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to use no_confirmation""); } if (!(realm.allowsEdit(AccountFieldName.REGISTER_NEW_EMAIL))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""realm does not allow adding emails""); } return apply(rsrc.getUser(), input); }",30b744d547d295436aed2ba2e5fee958774ba88f,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_PutHttpPassword.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.server.account.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.String newPassword; if (input.generate) { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to generate HTTP password""); } newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to clear HTTP password""); } newPassword = null; } else { if (!(self.get().getCapabilities().canAdministrateServer())) { throw new com.google.gerrit.extensions.restapi.AuthException((""not allowed to set HTTP password directly, "" + ""requires the Administrate Server permission"")); } newPassword = input.httpPassword; } return apply(rsrc.getUser(), newPassword); }",8475e0c7e2958bdbf737d957170ef3e7b9f2267e,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if (input == null) { input = new com.google.gerrit.server.account.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.String newPassword; if (input.generate) { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to generate HTTP password""); } newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to clear HTTP password""); } newPassword = null; } else { if (!(self.get().getCapabilities().canAdministrateServer())) { throw new com.google.gerrit.extensions.restapi.AuthException((""not allowed to set HTTP password directly, "" + ""requires the Administrate Server permission"")); } newPassword = input.httpPassword; } return apply(rsrc.getUser(), newPassword); }",a330dd11ec861e9d53df088397ee06838be06837,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.server.account.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.String newPassword; if (input.generate) { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to generate HTTP password""); } newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to clear HTTP password""); } newPassword = null; } else { if (!(self.get().getCapabilities().canAdministrateServer())) { throw new com.google.gerrit.extensions.restapi.AuthException((""not allowed to set HTTP password directly, "" + ""requires the Administrate Server permission"")); } newPassword = input.httpPassword; } return apply(rsrc.getUser(), newPassword); }",8475e0c7e2958bdbf737d957170ef3e7b9f2267e,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_PutHttpPassword.java,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""username must be set""); } com.google.gerrit.server.account.ExternalId extId = com.google.gerrit.server.account.ExternalId.from(dbProvider.get().accountExternalIds().get(ExternalId.Key.create(com.google.gerrit.server.account.ExternalId.SCHEME_USERNAME, user.getUserName()).asAccountExternalIdKey())); if (extId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.ExternalId newExtId = com.google.gerrit.server.account.ExternalId.createWithPassword(extId.key(), extId.accountId(), extId.email(), newPassword); externalIdsUpdate.create().upsert(dbProvider.get(), newExtId); accountCache.evict(user.getAccountId()); return com.google.common.base.Strings.isNullOrEmpty(newPassword) ? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }",efdbf8b8f4978aa01d9cfaf077bc3870dd7f56a3,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""username must be set""); } com.google.gerrit.reviewdb.client.AccountExternalId id = dbProvider.get().accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, user.getUserName())); if (id == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } id.setPassword(com.google.gerrit.server.account.HashedPassword.fromPassword(newPassword).encode()); dbProvider.get().accountExternalIds().update(java.util.Collections.singleton(id)); accountCache.evict(user.getAccountId()); return com.google.common.base.Strings.isNullOrEmpty(newPassword) ? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }",8387380b0a933f15e3437f716d0b4e73d0d19ace,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""username must be set""); } com.google.gerrit.server.account.ExternalId extId = com.google.gerrit.server.account.ExternalId.from(dbProvider.get().accountExternalIds().get(ExternalId.Key.create(com.google.gerrit.server.account.ExternalId.SCHEME_USERNAME, user.getUserName()).asAccountExternalIdKey())); if (extId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.ExternalId newExtId = com.google.gerrit.server.account.ExternalId.createWithPassword(extId.key(), extId.accountId(), extId.email(), newPassword); externalIdsUpdate.create().upsert(dbProvider.get(), newExtId); return com.google.common.base.Strings.isNullOrEmpty(newPassword) ? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }",33a05bf9454118a9352ae8215b828efb2590afec,2018-03-08 15:00:23,3
163935,gerrit-sshd_src_main_java_com_google_gerrit_sshd_SshKeyCacheImpl.java,"@java.lang.Override public java.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId user = com.google.gerrit.server.account.ExternalId.from(db.accountExternalIds().get(ExternalId.Key.create(com.google.gerrit.sshd.SCHEME_USERNAME, username).asAccountExternalIdKey())); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; } java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = new java.util.ArrayList<>(4); for (com.google.gerrit.reviewdb.client.AccountSshKey k : authorizedKeys.getKeys(user.accountId())) { if (k.isValid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } return java.util.Collections.unmodifiableList(kl); } }",b84da99c8e74bdcdd8157c1114e4637294b7533f,"@java.lang.Override public java.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, username); com.google.gerrit.reviewdb.client.AccountExternalId user = db.accountExternalIds().get(key); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; } java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = new java.util.ArrayList<>(4); for (com.google.gerrit.reviewdb.client.AccountSshKey k : authorizedKeys.getKeys(user.getAccountId())) { if (k.isValid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } return java.util.Collections.unmodifiableList(kl); } }",b8fced5ca46bafa6a7e975c498b3f93aed3ca030,"@java.lang.Override public java.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId user = com.google.gerrit.server.account.ExternalId.from(db.accountExternalIds().get(ExternalId.Key.create(com.google.gerrit.sshd.SCHEME_USERNAME, username).asAccountExternalIdKey())); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; } java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = new java.util.ArrayList<>(4); for (com.google.gerrit.reviewdb.client.AccountSshKey k : authorizedKeys.getKeys(user.accountId())) { if (k.isValid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } return java.util.Collections.unmodifiableList(kl); } }",b84da99c8e74bdcdd8157c1114e4637294b7533f,2018-03-08 15:00:23,3
163935,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_account_ExternalIdIT.java,"@org.junit.Test public void getExternalIDs() throws java.lang.Exception { java.util.Collection<com.google.gerrit.server.account.ExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = new java.util.ArrayList<>(); for (com.google.gerrit.server.account.ExternalId id : expectedIds) { com.google.gerrit.extensions.common.AccountExternalIdInfo info = new com.google.gerrit.extensions.common.AccountExternalIdInfo(); info.identity = id.key().get(); info.emailAddress = id.email(); info.canDelete = (!(id.isScheme(com.google.gerrit.acceptance.rest.account.SCHEME_USERNAME))) ? true : null; info.trusted = true; expectedIdInfos.add(info); } com.google.gerrit.acceptance.RestResponse response = userRestSession.get(""/accounts/self/external.ids""); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }",9dfe1078fee831998fa98bc34767d1e3b0a3229c,"@org.junit.Test public void getExternalIDs() throws java.lang.Exception { java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : expectedIds) { id.setCanDelete((!(id.getExternalId().equals((""username:"" + (user.username)))))); id.setTrusted(true); expectedIdInfos.add(com.google.gerrit.acceptance.rest.account.ExternalIdIT.toInfo(id)); } com.google.gerrit.acceptance.RestResponse response = userRestSession.get(""/accounts/self/external.ids""); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }",2bb302fdd0f02e9c5c4c911c43ceeaf67a8f6f4a,"@org.junit.Test public void getExternalIDs() throws java.lang.Exception { java.util.Collection<com.google.gerrit.server.account.ExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = new java.util.ArrayList<>(); for (com.google.gerrit.server.account.ExternalId id : expectedIds) { com.google.gerrit.extensions.common.AccountExternalIdInfo info = new com.google.gerrit.extensions.common.AccountExternalIdInfo(); info.identity = id.key().get(); info.emailAddress = id.email(); info.canDelete = (!(id.isScheme(com.google.gerrit.acceptance.rest.account.SCHEME_USERNAME))) ? true : null; info.trusted = true; expectedIdInfos.add(info); } com.google.gerrit.acceptance.RestResponse response = userRestSession.get(""/accounts/self/external.ids""); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }",9dfe1078fee831998fa98bc34767d1e3b0a3229c,2018-03-08 15:00:23,3
163935,gerrit-server_src_main_java_com_google_gerrit_server_api_accounts_AccountApiImpl.java,"@java.lang.Override public void deleteExternalIds(java.util.List<java.lang.String> externalIds) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteExternalIds.apply(account, externalIds); } catch (java.io.IOException | com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete external IDs"", e); } }",23b68d8933c8cdf6ad23950c4c2cc93de5a75d23,"@java.lang.Override public void deleteExternalIds(java.util.List<java.lang.String> externalIds) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteExternalIds.apply(account, externalIds); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete external IDs"", e); } }",d65ef8f6e6b803e329e9e5bc75d14d35a8fca977,"@java.lang.Override public void deleteExternalIds(java.util.List<java.lang.String> externalIds) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteExternalIds.apply(account, externalIds); } catch (java.io.IOException | com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete external IDs"", e); } }",23b68d8933c8cdf6ad23950c4c2cc93de5a75d23,2018-03-08 15:00:23,3
163935,gerrit-httpd_src_main_java_com_google_gerrit_httpd_CacheBasedWebSession.java,"@java.lang.Override public void login(com.google.gerrit.server.account.AuthResult res, boolean rememberMe) { com.google.gerrit.reviewdb.client.Account.Id id = res.getAccountId(); com.google.gerrit.server.account.ExternalId.Key identity = res.getExternalId(); if ((val) != null) { manager.destroy(key); } key = manager.createKey(id); val = manager.createVal(key, id, rememberMe, identity, null, null); saveCookie(); user = identified.create(val.getAccountId()); }",3065b4e4a30f658861256f9cc15b4ba06a34329c,"@java.lang.Override public void login(final com.google.gerrit.server.account.AuthResult res, final boolean rememberMe) { final com.google.gerrit.reviewdb.client.Account.Id id = res.getAccountId(); final com.google.gerrit.reviewdb.client.AccountExternalId.Key identity = res.getExternalId().asAccountExternalIdKey(); if ((val) != null) { manager.destroy(key); } key = manager.createKey(id); val = manager.createVal(key, id, rememberMe, identity, null, null); saveCookie(); user = identified.create(val.getAccountId()); }",bd5230ee2a5dc42344c536a8e00bebb941f3ad54,"@java.lang.Override public void login(com.google.gerrit.server.account.AuthResult res, boolean rememberMe) { com.google.gerrit.reviewdb.client.Account.Id id = res.getAccountId(); com.google.gerrit.server.account.ExternalId.Key identity = res.getExternalId(); if ((val) != null) { manager.destroy(key); } key = manager.createKey(id); val = manager.createVal(key, id, rememberMe, identity, null, null); saveCookie(); user = identified.create(val.getAccountId()); }",3065b4e4a30f658861256f9cc15b4ba06a34329c,2018-03-08 15:00:23,3
164913,src_main_java_com_cisco_gerrit_plugins_slack_client_WebhookClient.java,"private java.lang.String readResponse(java.io.InputStream responseStream) { try { java.util.Scanner scanner; scanner = new java.util.Scanner(responseStream, ""UTF-8""); scanner.useDelimiter(""\\A""); return scanner.next(); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(((""Error reading response: ["" + (e.getMessage())) + ""].""), e); } }",0de153e82df29f3be51e3b915ab8c9c1dec6d593,"private java.lang.String readResponse(java.io.InputStream responseStream) { try (java.util.Scanner scanner = new java.util.Scanner(responseStream, ""UTF-8"").useDelimiter(""\\A"")) { return scanner.next(); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(((""Error reading response: ["" + (e.getMessage())) + ""].""), e); } }",ba8a898a8b15ce3cb25882b1d0d1ebf6ba74baef,private java.io.InputStream getResponseStream(java.net.HttpURLConnection connection) { try { return connection.getInputStream(); } catch (java.io.IOException e) { return connection.getErrorStream(); } },da1df1ba48d1664617752a59c8d2ea2fceccb784,2018-03-12 14:32:02,2
162992,java_com_google_gerrit_server_events_EventFactory.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void addSubmitRecordRequirements(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.requirements) != null) && (!(submitRecord.requirements.isEmpty()))) { sa.requirements = new java.util.ArrayList(); for (com.google.gerrit.common.data.SubmitRequirement req : submitRecord.requirements) { com.google.gerrit.server.data.SubmitRequirementAttribute re = new com.google.gerrit.server.data.SubmitRequirementAttribute(); re.shortReason = req.shortReason(); re.fullReason = req.fullReason(); re.label = req.label(); sa.requirements.add(re); } } }",4ee01f36e887af7e15bcc7896970d88f7789bfbf,"private void addSubmitRecordRequirements(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.requirements) != null) && (!(submitRecord.requirements.isEmpty()))) { sa.requirements = new java.util.ArrayList(); for (com.google.gerrit.common.data.SubmitRequirement req : submitRecord.requirements) { com.google.gerrit.server.data.SubmitRequirementAttribute re = new com.google.gerrit.server.data.SubmitRequirementAttribute(); re.shortReason = req.shortReason(); re.fullReason = req.fullReason(); re.label = req.label().orElse(null); sa.requirements.add(re); } } }",c459334af46c6185c59104d348f22cd5f6977e83,2018-03-14 10:06:05,20
164370,java_com_google_gerrit_server_query_change_ChangeData.java,public com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord() { if ((submitTypeRecord) == null) { submitTypeRecord = submitRuleEvaluatorFactory.create(this).getSubmitType(); } return submitTypeRecord; },627f2c7f27c5492af38701ee4c8a6bd464e4aafd,public com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord() { if ((submitTypeRecord) == null) { submitTypeRecord = submitRuleEvaluatorFactory.create(com.google.gerrit.server.query.change.DEFAULT_OPTIONS).getSubmitType(this); } return submitTypeRecord; },da84a24bf4025817af3b64fda389b15e690ce7cb,public com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord() { if ((submitTypeRecord) == null) { submitTypeRecord = submitRuleEvaluatorFactory.create(com.google.gerrit.server.project.SubmitRuleOptions.defaults()).getSubmitType(this); } return submitTypeRecord; },94c2e94ca32a23b1370d60260557580169e3eff0,2018-03-14 10:06:05,12
164952,javatests_com_google_gerrit_server_project_SubmitRulesEvaluatorTest.java,,,"private com.google.gerrit.server.project.SubmitRuleEvaluator makeEvaluator() { com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey(""project""); com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeData.createForTest(project, new com.google.gerrit.reviewdb.client.Change.Id(1), 1); cd.setChange(com.google.gerrit.testing.TestChanges.newChange(project, com.google.gerrit.server.project.SubmitRulesEvaluatorTest.ADMIN_USER)); return evaluatorFactory.create(cd); }",f7f64301b299ec266711d5ac05e3c5800ee7b1f3,"private com.google.gerrit.server.project.SubmitRuleEvaluator makeEvaluator() { com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeData.createForTest(project, new com.google.gerrit.reviewdb.client.Change.Id(1), 1); cd.setChange(com.google.gerrit.testing.TestChanges.newChange(project, admin.id)); return evaluatorFactory.create(cd); }",ceeae14ec642baae9d9361bdd8dc110b9421e254,2018-03-14 10:06:05,4
164952,javatests_com_google_gerrit_server_project_SubmitRulesEvaluatorTest.java,,,"@org.junit.Test public void convertsPrologToSubmitRecord() { com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = makeEvaluator(); java.util.List<com.googlecode.prolog_cafe.lang.Term> terms = new java.util.ArrayList<>(); com.googlecode.prolog_cafe.lang.StructureTerm verifiedLabel = makeLabel(""Verified"", ""may""); com.googlecode.prolog_cafe.lang.StructureTerm labels = new com.googlecode.prolog_cafe.lang.StructureTerm(""label"", verifiedLabel); terms.add(makeTerm(""ok"", labels)); java.util.Collection<com.google.gerrit.common.data.SubmitRecord> records = evaluator.resultsToSubmitRecord(null, terms); assertThat(records).hasSize(1); }",da29d1197fcba8f45f9a9c93991807d83fc4ce44,"@org.junit.Test public void convertsPrologToSubmitRecord() { com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = makeEvaluator(); com.googlecode.prolog_cafe.lang.StructureTerm verifiedLabel = com.google.gerrit.acceptance.server.project.SubmitRulesEvaluatorIT.makeLabel(""Verified"", ""may""); com.googlecode.prolog_cafe.lang.StructureTerm labels = new com.googlecode.prolog_cafe.lang.StructureTerm(""label"", verifiedLabel); java.util.List<com.googlecode.prolog_cafe.lang.Term> terms = com.google.common.collect.ImmutableList.of(com.google.gerrit.acceptance.server.project.SubmitRulesEvaluatorIT.makeTerm(""ok"", labels)); java.util.Collection<com.google.gerrit.common.data.SubmitRecord> records = evaluator.resultsToSubmitRecord(null, terms); assertThat(records).hasSize(1); }",3fbdf4f58bdcf28f7b759e649c7db1c9a5a8c98f,2018-03-14 10:06:05,4
164952,javatests_com_google_gerrit_server_project_SubmitRulesEvaluatorTest.java,,,"private com.googlecode.prolog_cafe.lang.Term makeTerm(java.lang.String status, com.googlecode.prolog_cafe.lang.StructureTerm labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm(status, labels); }",538d62f522ffc0f05212872b5eb3202fbfd3c123,"private static com.googlecode.prolog_cafe.lang.Term makeTerm(java.lang.String status, com.googlecode.prolog_cafe.lang.StructureTerm labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm(status, labels); }",cde67c443188781b032ecbf3ebe55f5885377e3a,2018-03-14 10:06:05,4
164370,java_com_google_gerrit_server_restapi_change_ReviewerJson.java,"public ReviewerInfo format(ReviewerInfo out, com.google.gerrit.server.permissions.PermissionBackend.ForChange perm, com.google.gerrit.server.query.change.ChangeData cd, java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.LabelTypes labelTypes = cd.getLabelTypes(); out.approvals = new java.util.TreeMap(labelTypes.nameComparator()); for (com.google.gerrit.reviewdb.client.PatchSetApproval ca : approvals) { com.google.gerrit.common.data.LabelType at = labelTypes.byLabel(ca.getLabelId()); if (at != null) { out.approvals.put(at.getName(), formatValue(ca.getValue())); } } com.google.gerrit.reviewdb.client.PatchSet ps = cd.currentPatchSet(); if (ps != null) { for (com.google.gerrit.common.data.SubmitRecord rec : submitRuleEvaluatorFactory.create(cd).evaluate()) { if ((rec.labels) == null) { continue; } for (com.google.gerrit.common.data.SubmitRecord.Label label : rec.labels) { java.lang.String name = label.label; com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(name); if (((!(out.approvals.containsKey(name))) && (type != null)) && (perm.test(new com.google.gerrit.server.permissions.LabelPermission(type)))) { out.approvals.put(name, formatValue(((short) (0)))); } } } } if (out.approvals.isEmpty()) { out.approvals = null; } return out; }",78781b119245831bb68edffb3dec10fc4c122068,"public ReviewerInfo format(ReviewerInfo out, com.google.gerrit.server.permissions.PermissionBackend.ForChange perm, com.google.gerrit.server.query.change.ChangeData cd, java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.LabelTypes labelTypes = cd.getLabelTypes(); out.approvals = new java.util.TreeMap(labelTypes.nameComparator()); for (com.google.gerrit.reviewdb.client.PatchSetApproval ca : approvals) { com.google.gerrit.common.data.LabelType at = labelTypes.byLabel(ca.getLabelId()); if (at != null) { out.approvals.put(at.getName(), formatValue(ca.getValue())); } } com.google.gerrit.reviewdb.client.PatchSet ps = cd.currentPatchSet(); if (ps != null) { for (com.google.gerrit.common.data.SubmitRecord rec : submitRuleEvaluatorFactory.create(com.google.gerrit.server.restapi.change.DEFAULT_OPTIONS).evaluate(cd)) { if ((rec.labels) == null) { continue; } for (com.google.gerrit.common.data.SubmitRecord.Label label : rec.labels) { java.lang.String name = label.label; com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(name); if (((!(out.approvals.containsKey(name))) && (type != null)) && (perm.test(new com.google.gerrit.server.permissions.LabelPermission(type)))) { out.approvals.put(name, formatValue(((short) (0)))); } } } } if (out.approvals.isEmpty()) { out.approvals = null; } return out; }",035ac682be395029db32e6f0151eab440cdce37e,"public ReviewerInfo format(ReviewerInfo out, com.google.gerrit.server.permissions.PermissionBackend.ForChange perm, com.google.gerrit.server.query.change.ChangeData cd, java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.LabelTypes labelTypes = cd.getLabelTypes(); out.approvals = new java.util.TreeMap(labelTypes.nameComparator()); for (com.google.gerrit.reviewdb.client.PatchSetApproval ca : approvals) { com.google.gerrit.common.data.LabelType at = labelTypes.byLabel(ca.getLabelId()); if (at != null) { out.approvals.put(at.getName(), formatValue(ca.getValue())); } } com.google.gerrit.reviewdb.client.PatchSet ps = cd.currentPatchSet(); if (ps != null) { for (com.google.gerrit.common.data.SubmitRecord rec : submitRuleEvaluator.evaluate(cd)) { if ((rec.labels) == null) { continue; } for (com.google.gerrit.common.data.SubmitRecord.Label label : rec.labels) { java.lang.String name = label.label; com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(name); if (((!(out.approvals.containsKey(name))) && (type != null)) && (perm.test(new com.google.gerrit.server.permissions.LabelPermission(type)))) { out.approvals.put(name, formatValue(((short) (0)))); } } } } if (out.approvals.isEmpty()) { out.approvals = null; } return out; }",fbdcfba57638a9852bfa14bff7e8f1ecc196f1c3,2018-03-14 10:06:05,12
164370,java_com_google_gerrit_server_project_SubmitRuleEvaluator.java,public com.google.gerrit.server.project.SubmitRuleEvaluator setOptions(com.google.gerrit.server.project.SubmitRuleOptions opts) { checkNotStarted(); if (opts != null) { optsBuilder = opts.toBuilder(); } else { optsBuilder = com.google.gerrit.server.project.SubmitRuleOptions.builder(); } return this; },34a009f7e34a36439d0a4b07c618d24662153a65,"public java.util.List<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException(""No change found""); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(cd.project()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchProjectException e) { return ruleError((""Error looking up change "" + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl(""locate_submit_rule"", ""can_submit"", ""locate_submit_filter"", ""filter_submit_results"", cd, projectState); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format(""Submit rule '%s' for change %s of %s has no solution."", getSubmitRuleName(), cd.getId(), projectState.getName())); } return resultsToSubmitRecord(getSubmitRule(), results, cd); }",235bd5f5f8fb9aa04f542b17803f545fa4d09bfe,"public java.util.List<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException(""Change not found""); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(cd.project()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchProjectException e) { return ruleError((""Error looking up change "" + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl(""locate_submit_rule"", ""can_submit"", ""locate_submit_filter"", ""filter_submit_results"", cd, projectState); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format(""Submit rule '%s' for change %s of %s has no solution."", getSubmitRuleName(), cd.getId(), projectState.getName())); } return resultsToSubmitRecord(getSubmitRule(), results, cd); }",d9eebb813903f472fc42eb33999c7bd5c5fe4b09,2018-03-14 10:06:05,12
162992,java_com_google_gerrit_common_data_SubmitRequirement.java,,,public abstract java.lang.String fullReason();,fa5c231821fcb29de4610ebaad92053b3a9cec5f,public java.lang.String fullReason() { return fullReason; },5b873bd763ce138cf87d6e49da08d62121f1170d,2018-03-14 10:06:05,20
164952,javatests_com_google_gerrit_server_project_SubmitRulesEvaluatorTest.java,,,"private com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name, java.lang.String status) { return new com.googlecode.prolog_cafe.lang.StructureTerm(""label"", new com.googlecode.prolog_cafe.lang.StructureTerm(name), new com.googlecode.prolog_cafe.lang.StructureTerm(status)); }",7d572c55cc698a58b49f28785ff947dd84f0b33f,"private static com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name, java.lang.String status) { return new com.googlecode.prolog_cafe.lang.StructureTerm(""label"", new com.googlecode.prolog_cafe.lang.StructureTerm(name), new com.googlecode.prolog_cafe.lang.StructureTerm(status)); }",b46884a850abe93e2443283972d83b3c5af65c42,2018-03-14 10:06:05,4
162992,java_com_google_gerrit_common_data_SubmitRequirement.java,,,public abstract java.lang.String shortReason();,29ef36c51f8eea4d71be066b7b0db7c74688289e,public java.lang.String shortReason() { return shortReason; },c4bb1e202c1cfc2a8cc74fe5bf8544f9468b767c,2018-03-14 10:06:05,20
164370,java_com_google_gerrit_server_project_SubmitRuleOptions.java,public static com.google.gerrit.server.project.SubmitRuleOptions.Builder builder() { return new com.google.gerrit.server.project.AutoValue_SubmitRuleOptions.Builder().allowClosed(false).skipFilters(false).rule(null); },df222d74633ebd17b61849b51f92640c601acae1,public static com.google.gerrit.server.project.SubmitRuleOptions.Builder builder() { return com.google.gerrit.server.project.SubmitRuleOptions.DEFAULT_OPTIONS.toBuilder(); },2841fd82149290d41e3c8364130b8787204b0a1f,public static com.google.gerrit.server.project.SubmitRuleOptions.Builder builder() { return com.google.gerrit.server.project.SubmitRuleOptions.defaults.toBuilder(); },6995bf2252d5888298c9142c9ba16da7cac3787c,2018-03-14 10:06:05,12
162992,java_com_google_gerrit_common_data_SubmitRequirement.java,,,public abstract com.google.gerrit.common.data.SubmitRequirement build();,fa2b77ad71a78a63f3dc7ce6a3c5b6bca2f8e09c,"@java.lang.Override public java.lang.String toString() { return (((((((((""SubmitRequirement{"" + ""shortReason='"") + (shortReason)) + '\'') + "", fullReason='"") + (fullReason)) + '\'') + "", label='"") + (label)) + '\'') + '}'; }",b618476e447bf5ff620ba55b154803144aa7cc99,2018-03-14 10:06:05,20
162992,java_com_google_gerrit_common_data_SubmitRequirement.java,,,@com.google.gerrit.common.Nullable public abstract java.lang.String label();,5b785f3d8979eb77ea6ec14f8cd1b77cd24b3aef,public java.util.Optional<java.lang.String> label() { return java.util.Optional.ofNullable(label); },3b2b70a9fa6a0ecc854e071d75bb26c0234ae74a,2018-03-14 10:06:05,20
162992,java_com_google_gerrit_common_data_SubmitRequirement.java,,,public abstract com.google.gerrit.common.data.SubmitRequirement.Builder setLabel(@com.google.gerrit.common.Nullable java.lang.String label);,6fce0a79ed9426938d1d0865e4590ec54591d478,"@java.lang.Override public int hashCode() { return java.util.Objects.hash(shortReason, fullReason, label); }",2f6d140659b4cdaea6bc1dd6f7f60d63563488ba,2018-03-14 10:06:05,20
162992,java_com_google_gerrit_common_data_SubmitRequirement.java,,,public abstract com.google.gerrit.common.data.SubmitRequirement.Builder setFullReason(java.lang.String fullReason);,d2fcd008b4bf59601a3eebaf956657902953ae27,"@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if (o instanceof com.google.gerrit.common.data.SubmitRequirement) { com.google.gerrit.common.data.SubmitRequirement that = ((com.google.gerrit.common.data.SubmitRequirement) (o)); return ((java.util.Objects.equals(shortReason, that.shortReason)) && (java.util.Objects.equals(fullReason, that.fullReason))) && (java.util.Objects.equals(label, that.label)); } return false; }",5aa2aee808aa14cbeeec09766ac6b36613c9ac6b,2018-03-14 10:06:05,20
164370,java_com_google_gerrit_server_restapi_change_Mergeable.java,"private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(cd).getSubmitType(); if ((rec.status) != (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException((""Submit type rule failed: "" + rec)); } return rec.type; }",3707976bdfc53328374fc3238ed1860f246e5aba,"private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(com.google.gerrit.server.restapi.change.DEFAULT_OPTIONS).getSubmitType(cd); if ((rec.status) != (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException((""Submit type rule failed: "" + rec)); } return rec.type; }",87a278b19ca15a58ae51e07bed149b9c6a722fb7,"private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluator.getSubmitType(cd); if ((rec.status) != (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException((""Submit type rule failed: "" + rec)); } return rec.type; }",0138e398a32ba261deb8f06f73656a7912af9428,2018-03-14 10:06:05,12
164952,javatests_com_google_gerrit_server_project_SubmitRulesEvaluatorTest.java,,,"private com.googlecode.prolog_cafe.lang.StructureTerm makeLabels(com.googlecode.prolog_cafe.lang.StructureTerm... labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm(""label"", labels); }",a8affce5416757433299fe011cdc38cd5827d0e5,"private static com.googlecode.prolog_cafe.lang.StructureTerm makeLabels(com.googlecode.prolog_cafe.lang.StructureTerm... labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm(""label"", labels); }",a42efe568af04830f472d77eb7887a803a79959c,2018-03-14 10:06:05,4
163794,java_com_google_gerrit_server_project_SubmitRuleEvaluator.java,"public java.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException(""No change found""); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(cd.project()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchProjectException e) { return ruleError((""Error looking up change "" + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl(""locate_submit_rule"", ""can_submit"", ""locate_submit_filter"", ""filter_submit_results"", cd, projectState); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format(""Submit rule '%s' for change %s of %s has no solution."", getSubmitRuleName(), cd.getId(), projectState.getName())); } return resultsToSubmitRecord(getSubmitRule(), results, cd); }",6d775c2ca789e5419241a4a21ce62a8c81fb3e20,"public java.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException(""No change found""); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(cd.project()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchProjectException e) { return ruleError((""Error looking up change "" + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } return prologRule.evaluate(cd, opts); }",47c61d1ea271b9f091d2ab7f4da1cdb6a7f3b4b2,"public java.util.List<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException(""Change not found""); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(cd.project()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchProjectException e) { return ruleError((""Error looking up change "" + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } return com.google.common.collect.ImmutableList.copyOf(prologRule.evaluate(cd, opts)); }",5cab6c0c2ab38bf839322384eb5e23f8fd53822d,2018-03-14 10:06:05,15
163794,java_com_google_gerrit_server_rules_PrologRule.java,,,"@java.lang.Override public java.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.project.SubmitRuleOptions opts) { return getEvaluator(cd, opts).evaluate(); }",96c9ca856e0fe5162772fd215f08902d9b20b835,"public java.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.project.SubmitRuleOptions opts) { return getEvaluator(cd, opts).evaluate(); }",50a0f1d46fd1023e10c1b12b5d9b3707d27f04aa,2018-03-14 10:06:05,15
162993,java_com_google_gerrit_server_git_MergeOp.java,"public static void checkSubmitRule(com.google.gerrit.server.query.change.ChangeData cd, boolean allowClosed) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet patchSet = cd.currentPatchSet(); if (patchSet == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""missing current patch set for change "" + (cd.getId()))); } java.util.List<com.google.gerrit.common.data.SubmitRecord> results = com.google.gerrit.server.git.MergeOp.getSubmitRecords(cd, allowClosed); if (com.google.gerrit.common.data.SubmitRecord.findOkRecord(results).isPresent()) { return; } else if (results.isEmpty()) { throw new java.lang.IllegalStateException(java.lang.String.format(""SubmitRuleEvaluator.evaluate for change %s returned empty list for %s in %s"", cd.getId(), patchSet.getId(), cd.change().getProject().get())); } for (com.google.gerrit.common.data.SubmitRecord record : results) { switch (record.status) { case CLOSED : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is closed""); case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""submit rule error: "" + (record.errorMessage))); case NOT_READY : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case FORCED : case OK : default : throw new java.lang.IllegalStateException(java.lang.String.format(""Unexpected SubmitRecord status %s for %s in %s"", record.status, patchSet.getId().getId(), cd.change().getProject().get())); } } throw new java.lang.IllegalStateException(); }",6ace23a6e45b2f72fde0660619f94766b5fa1d6a,"public static void checkSubmitRule(com.google.gerrit.server.query.change.ChangeData cd, boolean allowClosed) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet patchSet = cd.currentPatchSet(); if (patchSet == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""missing current patch set for change "" + (cd.getId()))); } java.util.List<com.google.gerrit.common.data.SubmitRecord> results = com.google.gerrit.server.git.MergeOp.getSubmitRecords(cd, allowClosed); if (com.google.gerrit.common.data.SubmitRecord.canBeSubmitted(results)) { return; } else if (results.isEmpty()) { throw new java.lang.IllegalStateException(java.lang.String.format(""SubmitRuleEvaluator.evaluate for change %s returned empty list for %s in %s"", cd.getId(), patchSet.getId(), cd.change().getProject().get())); } for (com.google.gerrit.common.data.SubmitRecord record : results) { switch (record.status) { case OK : break; case CLOSED : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is closed""); case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""submit rule error: "" + (record.errorMessage))); case NOT_READY : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case FORCED : default : throw new java.lang.IllegalStateException(java.lang.String.format(""Unexpected SubmitRecord status %s for %s in %s"", record.status, patchSet.getId().getId(), cd.change().getProject().get())); } } throw new java.lang.IllegalStateException(); }",6669eebb2aa456097c58777782ee9b5d30196bd9,"public static void checkSubmitRule(com.google.gerrit.server.query.change.ChangeData cd, boolean allowClosed) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet patchSet = cd.currentPatchSet(); if (patchSet == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""missing current patch set for change "" + (cd.getId()))); } java.util.List<com.google.gerrit.common.data.SubmitRecord> results = com.google.gerrit.server.git.MergeOp.getSubmitRecords(cd, allowClosed); if (com.google.gerrit.common.data.SubmitRecord.allRecordsOK(results)) { return; } else if (results.isEmpty()) { throw new java.lang.IllegalStateException(java.lang.String.format(""SubmitRuleEvaluator.evaluate for change %s returned empty list for %s in %s"", cd.getId(), patchSet.getId(), cd.change().getProject().get())); } for (com.google.gerrit.common.data.SubmitRecord record : results) { switch (record.status) { case OK : break; case CLOSED : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is closed""); case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""submit rule error: "" + (record.errorMessage))); case NOT_READY : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case FORCED : default : throw new java.lang.IllegalStateException(java.lang.String.format(""Unexpected SubmitRecord status %s for %s in %s"", record.status, patchSet.getId().getId(), cd.change().getProject().get())); } } throw new java.lang.IllegalStateException(); }",2ac71635f58df699e709ae727323c281251c643f,2018-03-14 10:06:05,21
162993,java_com_google_gerrit_server_change_ChangeJson.java,private boolean submittable(com.google.gerrit.server.query.change.ChangeData cd) { return com.google.gerrit.common.data.SubmitRecord.findOkRecord(cd.submitRecords(com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS_STRICT)).isPresent(); },521d09495694ddc4343e40f3348c0f3506ae8b74,private boolean submittable(com.google.gerrit.server.query.change.ChangeData cd) { return com.google.gerrit.common.data.SubmitRecord.canBeSubmitted(cd.submitRecords(com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS_STRICT)); },9a5db75a05bbfa9a245d0beb5dbef3796b931443,private boolean submittable(com.google.gerrit.server.query.change.ChangeData cd) { return com.google.gerrit.common.data.SubmitRecord.allRecordsOK(cd.submitRecords(com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS_STRICT)); },90c21375e49dd4cfd37e0c34ba44e79d6f6698d4,2018-03-14 10:06:05,21
162993,java_com_google_gerrit_common_data_SubmitRecord.java,public static java.util.Optional<com.google.gerrit.common.data.SubmitRecord> findOkRecord(java.util.Collection<com.google.gerrit.common.data.SubmitRecord> in) { if (in == null) { return java.util.Optional.empty(); } return in.stream().filter(( r) -> (r.status) == (com.google.gerrit.common.data.SubmitRecord.Status.OK)).findFirst(); },5d5d5d128a6e92fabc3b7d6088caf149dc5857eb,public static boolean canBeSubmitted(java.util.List<com.google.gerrit.common.data.SubmitRecord> in) { if ((in == null) || (in.isEmpty())) { return true; } if (in.stream().noneMatch(( r) -> (r.status) == (com.google.gerrit.common.data.SubmitRecord.Status.OK))) { return false; } return in.stream().noneMatch(( r) -> (r.status) == (com.google.gerrit.common.data.SubmitRecord.Status.NOT_READY)); },7678f48e57a015581ecffc1e8ccbfb8ca80eac31,public static boolean allRecordsOK(java.util.Collection<com.google.gerrit.common.data.SubmitRecord> in) { if ((in == null) || (in.isEmpty())) { return true; } return in.stream().noneMatch(( r) -> (r.status) != (com.google.gerrit.common.data.SubmitRecord.Status.OK)); },4a4e04dbcfed17477ae9aca77f3a42398ea40ffc,2018-03-14 10:06:05,21
163790,java_com_google_gerrit_server_restapi_change_Mergeable.java,"private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(cd).setPatchSet(patchSet).getSubmitType(); if ((rec.status) != (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException((""Submit type rule failed: "" + rec)); } return rec.type; }",55e6f5a339fc2c3dda60cf069a4ce64503000425,"private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(cd).getSubmitType(); if ((rec.status) != (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException((""Submit type rule failed: "" + rec)); } return rec.type; }",293fe9dd35bf1641c9f402cbedd2e79be6b75613,"private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(cd).getSubmitType(); if ((rec.status) != (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException((""Submit type rule failed: "" + rec)); } return rec.type; }",3707976bdfc53328374fc3238ed1860f246e5aba,2018-03-14 10:06:05,13
164952,javatests_com_google_gerrit_server_project_SubmitRulesEvaluatorTest.java,,,"private com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name, java.lang.String status, com.google.gerrit.reviewdb.client.Account.Id account) { com.googlecode.prolog_cafe.lang.StructureTerm user = new com.googlecode.prolog_cafe.lang.StructureTerm(""user"", new com.googlecode.prolog_cafe.lang.IntegerTerm(account.get())); return new com.googlecode.prolog_cafe.lang.StructureTerm(""label"", new com.googlecode.prolog_cafe.lang.StructureTerm(name), new com.googlecode.prolog_cafe.lang.StructureTerm(status, user)); }",2deaf7258e42f6b72645c9839d0a5fc9461d13b8,"private static com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name, java.lang.String status, TestAccount account) { com.googlecode.prolog_cafe.lang.StructureTerm user = new com.googlecode.prolog_cafe.lang.StructureTerm(""user"", new com.googlecode.prolog_cafe.lang.IntegerTerm(account.id.get())); return new com.googlecode.prolog_cafe.lang.StructureTerm(""label"", new com.googlecode.prolog_cafe.lang.StructureTerm(name), new com.googlecode.prolog_cafe.lang.StructureTerm(status, user)); }",4805305f9d328945a41c5cb130c29e4f8f57ec62,2018-03-14 10:06:05,4
162992,java_com_google_gerrit_server_index_change_ChangeField.java,private com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; if ((labels) != null) { rec.labels = new java.util.ArrayList(labels.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredLabel label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label; srl.status = label.status; srl.appliedBy = ((label.appliedBy) != null) ? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); } } return rec; },f4ac5640ff5b7fb247a13e7383545a9ee05cc9c4,private com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; if ((labels) != null) { rec.labels = new java.util.ArrayList(labels.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredLabel label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label; srl.status = label.status; srl.appliedBy = ((label.appliedBy) != null) ? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); } } if ((requirements) != null) { rec.requirements = new java.util.ArrayList(requirements.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredRequirement requirement : requirements) { com.google.gerrit.common.data.SubmitRequirement.Builder srb = com.google.gerrit.common.data.SubmitRequirement.builder(); srb.setFullReason(requirement.fullReason); srb.setShortReason(requirement.shortReason); if ((requirement.label) != null) { srb.setLabel(requirement.label); } rec.requirements.add(srb.build()); } } return rec; },bafdb0e3c5877e8ef4f8140d0f9107bbcbf54402,"private com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; if ((labels) != null) { rec.labels = new java.util.ArrayList(labels.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredLabel label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label; srl.status = label.status; srl.appliedBy = ((label.appliedBy) != null) ? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); } } if ((requirements) != null) { rec.requirements = new java.util.ArrayList(requirements.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredRequirement requirement : requirements) { com.google.gerrit.common.data.SubmitRequirement sr = new com.google.gerrit.common.data.SubmitRequirement(requirement.shortReason, requirement.fullReason, requirement.label); rec.requirements.add(sr); } } return rec; }",1b32e4c45399f6b9857c51254b89594b55ae466f,2018-03-14 10:06:05,20
163794,java_com_google_gerrit_server_rules_PrologModule.java,@java.lang.Override protected void configure() { install(new com.google.gerrit.server.rules.PrologModule.EnvironmentModule()); bind(PrologEnvironment.Args.class); },6b3f312a347dea0bddf4c39ee956088807f2fa33,@java.lang.Override protected void configure() { install(new com.google.gerrit.server.rules.PrologModule.EnvironmentModule()); bind(PrologEnvironment.Args.class); factory(PrologRuleEvaluator.Factory.class); },3c071ffc8eec82fb096c280daca26e3e38349217,@java.lang.Override protected void configure() { install(new com.google.gerrit.server.rules.PrologModule.EnvironmentModule()); bind(PrologEnvironment.Args.class); bind(com.google.gerrit.server.rules.PrologRule.class); factory(PrologRuleEvaluator.Factory.class); },85db78d3f359a300b33519710da0e470af200adf,2018-03-14 10:06:05,15
161551,src_main_java_com_cisco_gerrit_plugins_slack_config_ProjectConfig.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean getIgnoreWipPrivate() { return ignoreWipPrivate; },08a53869969c3da0d2ec69d9a80ddc8ee67f0182,public boolean getIgnorePrivatePatchSet() { return ignorePrivatePatchSet; },b942abe2559692dbeabe85eb7aed3e68059f4b65,2018-03-14 18:21:02,7
161551,src_test_java_com_cisco_gerrit_plugins_slack_message_ReviewerAddedMessageGeneratorTest.java,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnReviewerAdded) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean(""enabled"", false)).thenReturn(true); when(mockPluginConfig.getString(""webhookurl"", """")).thenReturn(""https://webook/""); when(mockPluginConfig.getString(""channel"", ""general"")).thenReturn(""testchannel""); when(mockPluginConfig.getString(""username"", ""gerrit"")).thenReturn(""testuser""); when(mockPluginConfig.getString(""ignore"", """")).thenReturn(""^WIP.*""); when(mockPluginConfig.getBoolean(""publish-on-reviewer-added"", true)).thenReturn(publishOnReviewerAdded); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); }",c21663d7b9d14342e743a41555358b20ed0bf2b9,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnReviewerAdded) throws java.lang.Exception { return getConfig(publishOnReviewerAdded, true); }",0b83072393cd732c07437e6614af182eccfcccbe,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnReviewerAdded) throws java.lang.Exception { return getConfig(publishOnReviewerAdded, true, true); }",3c86271e6deccf790646e077abea0a6b96b89004,2018-03-14 18:21:02,7
161551,src_test_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGeneratorTest.java,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean(""enabled"", false)).thenReturn(true); when(mockPluginConfig.getString(""webhookurl"", """")).thenReturn(""https://webook/""); when(mockPluginConfig.getString(""channel"", ""general"")).thenReturn(""testchannel""); when(mockPluginConfig.getString(""username"", ""gerrit"")).thenReturn(""testuser""); when(mockPluginConfig.getString(""ignore"", """")).thenReturn(ignore); when(mockPluginConfig.getBoolean(""publish-on-patch-set-created"", true)).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean(""ignore-rebase-empty-patch-set"", true)).thenReturn(ignoreRebaseEmptyPatchSet); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }",ad8bbb8b389d31e921c817cd03b79fc36532bb67,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet, boolean ignoreWipPrivate) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean(""enabled"", false)).thenReturn(true); when(mockPluginConfig.getString(""webhookurl"", """")).thenReturn(""https://webook/""); when(mockPluginConfig.getString(""channel"", ""general"")).thenReturn(""testchannel""); when(mockPluginConfig.getString(""username"", ""gerrit"")).thenReturn(""testuser""); when(mockPluginConfig.getString(""ignore"", """")).thenReturn(ignore); when(mockPluginConfig.getBoolean(""publish-on-patch-set-created"", true)).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean(""ignore-rebase-empty-patch-set"", true)).thenReturn(ignoreRebaseEmptyPatchSet); when(mockPluginConfig.getBoolean(""ignore-wip-private"", true)).thenReturn(ignoreWipPrivate); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }",3fa78aeb04af8b39dbd2858086a34e51ffe6ee3a,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated, boolean ignoreUnchangedPatchSet, boolean ignoreWorkInProgressPatchSet, boolean ignorePrivatePatchSet) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean(""enabled"", false)).thenReturn(true); when(mockPluginConfig.getString(""webhookurl"", """")).thenReturn(""https://webook/""); when(mockPluginConfig.getString(""channel"", ""general"")).thenReturn(""testchannel""); when(mockPluginConfig.getString(""username"", ""gerrit"")).thenReturn(""testuser""); when(mockPluginConfig.getString(""ignore"", """")).thenReturn(ignore); when(mockPluginConfig.getBoolean(""publish-on-patch-set-created"", true)).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean(""ignore-unchanged-patch-set"", true)).thenReturn(ignoreUnchangedPatchSet); when(mockPluginConfig.getBoolean(""ignore-wip-patch-set"", true)).thenReturn(ignoreWorkInProgressPatchSet); when(mockPluginConfig.getBoolean(""ignore-private-patch-set"", true)).thenReturn(ignorePrivatePatchSet); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }",bfb5eff8b8499fd30afb99f6ed7193c08c2ffad7,2018-03-14 18:21:02,7
161551,src_test_java_com_cisco_gerrit_plugins_slack_message_ReviewerAddedMessageGeneratorTest.java,private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() throws java.lang.Exception { return getConfig(true); },14f72dc17061c82065711ef00008633e91b0eed6,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnReviewerAdded, boolean ignoreWipPrivate) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean(""enabled"", false)).thenReturn(true); when(mockPluginConfig.getString(""webhookurl"", """")).thenReturn(""https://webook/""); when(mockPluginConfig.getString(""channel"", ""general"")).thenReturn(""testchannel""); when(mockPluginConfig.getString(""username"", ""gerrit"")).thenReturn(""testuser""); when(mockPluginConfig.getString(""ignore"", """")).thenReturn(""^WIP.*""); when(mockPluginConfig.getBoolean(""publish-on-reviewer-added"", true)).thenReturn(publishOnReviewerAdded); when(mockPluginConfig.getBoolean(""ignore-wip-private"", true)).thenReturn(ignoreWipPrivate); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); }",8609abbb545b413e4b7deb62a9d4d49e331bb26b,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnReviewerAdded, boolean ignoreWorkInProgressPatchSet, boolean ignorePrivatePatchSet) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean(""enabled"", false)).thenReturn(true); when(mockPluginConfig.getString(""webhookurl"", """")).thenReturn(""https://webook/""); when(mockPluginConfig.getString(""channel"", ""general"")).thenReturn(""testchannel""); when(mockPluginConfig.getString(""username"", ""gerrit"")).thenReturn(""testuser""); when(mockPluginConfig.getString(""ignore"", """")).thenReturn(""^WIP.*""); when(mockPluginConfig.getBoolean(""publish-on-reviewer-added"", true)).thenReturn(publishOnReviewerAdded); when(mockPluginConfig.getBoolean(""ignore-wip-patch-set"", true)).thenReturn(ignoreWorkInProgressPatchSet); when(mockPluginConfig.getBoolean(""ignore-private-patch-set"", true)).thenReturn(ignorePrivatePatchSet); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); }",ac693c8832f9ac96ff526c29ddeeafb83134961e,2018-03-14 18:21:02,7
161551,src_test_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGeneratorTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void publishesWhenPrivate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; mockChange.wip = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",4f5a6606031e2d0bfe69d2be8eb8c161dac5e2e4,"@org.junit.Test public void publishesWhenPrivate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false, false, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",eb7e51e980abdccf786494f8ca39eb8391a47e82,2018-03-14 18:21:02,7
161551,src_test_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGeneratorTest.java,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore) throws java.lang.Exception { return getConfig(ignore, true, true); }",199eca7a7e0b2ca8e0b7cfa2aff09eba7110e5b8,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore) throws java.lang.Exception { return getConfig(ignore, true, true, true); }",0f8a00728aa6ea44ac862798cab81dc446d89f32,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore) throws java.lang.Exception { return getConfig(ignore, true, true, true, true); }",6a3320ec7f7b8f5018cf67628b390d2d7e491c6d,2018-03-14 18:21:02,7
161551,src_test_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGeneratorTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void publishesWhenWorkInProgress() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = false; mockChange.wip = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",586cdbc6db18e34c9446d7e20f16cd8afdeee0cb,"@org.junit.Test public void publishesWhenWorkInProgress() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false, false, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.wip = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",74c6a44b74b2881230d0b3f1abd5f9fefd145188,2018-03-14 18:21:02,7
161551,src_test_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGeneratorTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() throws java.lang.Exception { return getConfig(""^WIP.*"", true, true, true); }",6e7b1704314e1a76ba129cb53bb81e8b2c03d81c,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() throws java.lang.Exception { return getConfig(""^WIP.*"", true, true, true, true); }",b76edae1ecff13429918a5c38ef365b1d43a851b,2018-03-14 18:21:02,7
161551,src_test_java_com_cisco_gerrit_plugins_slack_message_PrivateStateChangedGeneratorTest.java,,,"@org.junit.Test public void publishesWhenExpected() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",90b583cd2e300971cd501437908bca8630165bf1,"@org.junit.Test public void publishesWhenExpected() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",26329e03f02fcd97ab960502c413e0511f9d22dc,2018-03-14 18:21:02,7
161551,src_main_java_com_cisco_gerrit_plugins_slack_message_ReviewerAddedMessageGenerator.java,@java.lang.Override public boolean shouldPublish() { return (config.isEnabled()) && (config.shouldPublishOnReviewerAdded()); },a0a1d69b862a74708109e0680dc805c6ae713d4f,"@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnReviewerAdded()))) { return false; } try { if ((config.getIgnoreWipPrivate()) && ((event.change.get().isPrivate) || (event.change.get().wip))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGenerator.LOGGER.warn(""Error checking private and work-in-progress status"", e); } return true; }",34a30dfef33e7747efeb7be937a876c429ae92bc,"@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnReviewerAdded()))) { return false; } try { com.google.gerrit.server.data.ChangeAttribute change; change = event.change.get(); if ((config.getIgnorePrivatePatchSet()) && (java.lang.Boolean.TRUE.equals(change.isPrivate))) { return false; } if ((config.getIgnoreWorkInProgressPatchSet()) && (java.lang.Boolean.TRUE.equals(change.wip))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGenerator.LOGGER.warn(""Error checking private and work-in-progress status"", e); } return true; }",55f999daf4ebe1766a0ecbab64fc781e129c4d36,2018-03-14 18:21:02,7
161551,src_test_java_com_cisco_gerrit_plugins_slack_message_ChangeMergedMessageGeneratorTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void doesPublishWhenPrivate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",753410aac9a86d503a5ab6a6e83c166f222dd070,"@org.junit.Test public void publishesWhenPrivate() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",ef467b50b58e8d290c03f82061e5b797d2739357,2018-03-14 18:21:02,7
161551,src_main_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGenerator.java,"@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet; patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmptyPatchSet()) && (((((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE)))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn(""Error checking patch set kind"", e); } boolean result; result = true; try { java.util.regex.Pattern pattern; pattern = java.util.regex.Pattern.compile(config.getIgnore(), java.util.regex.Pattern.DOTALL); java.util.regex.Matcher matcher; matcher = pattern.matcher(event.change.get().commitMessage); result = !(matcher.matches()); } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn(""The specified ignore pattern was invalid"", e); } return result; }",62deb03294c23378ccf95124090ad5021b42d325,"@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet; patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmptyPatchSet()) && (((((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE)))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn(""Error checking patch set kind"", e); } try { if ((config.getIgnoreWipPrivate()) && ((event.change.get().isPrivate) || (event.change.get().wip))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn(""Error checking private and work-in-progress status"", e); } boolean result; result = true; try { java.util.regex.Pattern pattern; pattern = java.util.regex.Pattern.compile(config.getIgnore(), java.util.regex.Pattern.DOTALL); java.util.regex.Matcher matcher; matcher = pattern.matcher(event.change.get().commitMessage); result = !(matcher.matches()); } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn(""The specified ignore pattern was invalid"", e); } return result; }",ea65850e08262f6f7b9626ea22ab509a0d929595,"@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { if ((config.getIgnoreUnchangedPatchSet()) && (unchangedChangeKind(event.patchSet.get().kind))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn(""Error checking patch set kind"", e); } try { com.google.gerrit.server.data.ChangeAttribute change; change = event.change.get(); if ((config.getIgnorePrivatePatchSet()) && (java.lang.Boolean.TRUE.equals(change.isPrivate))) { return false; } if ((config.getIgnoreWorkInProgressPatchSet()) && (java.lang.Boolean.TRUE.equals(change.wip))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn(""Error checking private and work-in-progress status"", e); } boolean result; result = true; try { java.util.regex.Pattern pattern; pattern = java.util.regex.Pattern.compile(config.getIgnore(), java.util.regex.Pattern.DOTALL); java.util.regex.Matcher matcher; matcher = pattern.matcher(event.change.get().commitMessage); result = !(matcher.matches()); } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn(""The specified ignore pattern was invalid"", e); } return result; }",2aa31823e26f2c647c06a96c8cd47b6737f019b4,2018-03-14 18:21:02,7
161551,src_test_java_com_cisco_gerrit_plugins_slack_message_WorkInProgressStateChangedGeneratorTest.java,,,"@org.junit.Test public void publishesWhenExpected() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.wip = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",d602b7b55177d061598028c3567a2231bdafb5ad,"@org.junit.Test public void publishesWhenExpected() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",26329e03f02fcd97ab960502c413e0511f9d22dc,2018-03-14 18:21:02,7
161551,src_main_java_com_cisco_gerrit_plugins_slack_message_CommentAddedMessageGenerator.java,@java.lang.Override public boolean shouldPublish() { return (config.isEnabled()) && (config.shouldPublishOnCommentAdded()); },c03173eb06c3ae9b068fed0a3c1662969829798e,"@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnCommentAdded()))) { return false; } try { if ((config.getIgnoreWipPrivate()) && ((event.change.get().isPrivate) || (event.change.get().wip))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGenerator.LOGGER.warn(""Error checking private and work-in-progress status"", e); } return true; }",08641a475ef6384968427d0c78e1e356b5248af2,"@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnCommentAdded()))) { return false; } try { com.google.gerrit.server.data.ChangeAttribute change; change = event.change.get(); if ((config.getIgnorePrivatePatchSet()) && (java.lang.Boolean.TRUE.equals(change.isPrivate))) { return false; } if ((config.getIgnoreWorkInProgressPatchSet()) && (java.lang.Boolean.TRUE.equals(change.wip))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGenerator.LOGGER.warn(""Error checking private and work-in-progress status"", e); } return true; }",58899cd5605fcdda9929341b08ae50c45174767a,2018-03-14 18:21:02,7
161551,src_test_java_com_cisco_gerrit_plugins_slack_message_CommentAddedMessageGeneratorTest.java,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean(""enabled"", false)).thenReturn(true); when(mockPluginConfig.getString(""webhookurl"", """")).thenReturn(""https://webook/""); when(mockPluginConfig.getString(""channel"", ""general"")).thenReturn(""testchannel""); when(mockPluginConfig.getString(""username"", ""gerrit"")).thenReturn(""testuser""); when(mockPluginConfig.getString(""ignore"", """")).thenReturn(""^WIP.*""); when(mockPluginConfig.getBoolean(""publish-on-comment-added"", true)).thenReturn(publishOnCommentAdded); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); }",55556271ff8720605882101b2408eddd0ffc9680,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded) throws java.lang.Exception { return getConfig(publishOnCommentAdded, true); }",a5025e8f3731acacc1e54049a9324287965e868e,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded) throws java.lang.Exception { return getConfig(publishOnCommentAdded, true, true); }",ef6e1197c2c635b09f40b0906fefb883becb057f,2018-03-14 18:21:02,7
161551,src_main_java_com_cisco_gerrit_plugins_slack_message_WorkInProgressStateChangedGenerator.java,,,@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnWipReady()))) { return false; } if (event.change.get().wip) { return false; } return true; },16dcbf35391ffbbdaf9200572fae25e195aa8ecd,@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnWipReady()))) { return false; } if (java.lang.Boolean.TRUE.equals(event.change.get().wip)) { return false; } return true; },45889deedb320abff0b3375d7d1946a4fdb608a1,2018-03-14 18:21:02,7
161551,src_test_java_com_cisco_gerrit_plugins_slack_message_CommentAddedMessageGeneratorTest.java,private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() throws java.lang.Exception { return getConfig(true); },14f72dc17061c82065711ef00008633e91b0eed6,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded, boolean ignoreWipPrivate) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean(""enabled"", false)).thenReturn(true); when(mockPluginConfig.getString(""webhookurl"", """")).thenReturn(""https://webook/""); when(mockPluginConfig.getString(""channel"", ""general"")).thenReturn(""testchannel""); when(mockPluginConfig.getString(""username"", ""gerrit"")).thenReturn(""testuser""); when(mockPluginConfig.getString(""ignore"", """")).thenReturn(""^WIP.*""); when(mockPluginConfig.getBoolean(""publish-on-comment-added"", true)).thenReturn(publishOnCommentAdded); when(mockPluginConfig.getBoolean(""ignore-wip-private"", true)).thenReturn(ignoreWipPrivate); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); }",9bef4f72f634c6b11f52d80ca0c46f7f5c7d35ad,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded, boolean ignoreWorkInProgressPatchSet, boolean ignorePrivatePatchSet) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean(""enabled"", false)).thenReturn(true); when(mockPluginConfig.getString(""webhookurl"", """")).thenReturn(""https://webook/""); when(mockPluginConfig.getString(""channel"", ""general"")).thenReturn(""testchannel""); when(mockPluginConfig.getString(""username"", ""gerrit"")).thenReturn(""testuser""); when(mockPluginConfig.getString(""ignore"", """")).thenReturn(""^WIP.*""); when(mockPluginConfig.getBoolean(""publish-on-comment-added"", true)).thenReturn(publishOnCommentAdded); when(mockPluginConfig.getBoolean(""ignore-wip-patch-set"", true)).thenReturn(ignoreWorkInProgressPatchSet); when(mockPluginConfig.getBoolean(""ignore-private-patch-set"", true)).thenReturn(ignorePrivatePatchSet); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); }",fe38c993d170e0e334566ead2efcfcb08d0f6e5b,2018-03-14 18:21:02,7
161551,src_main_java_com_cisco_gerrit_plugins_slack_message_PrivateStateChangedGenerator.java,,,@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPrivateToPublic()))) { return false; } if (event.change.get().isPrivate) { return false; } return true; },699922f07bb6e85944a6c9725712d4c29ffc0dce,@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPrivateToPublic()))) { return false; } if (java.lang.Boolean.TRUE.equals(event.change.get().isPrivate)) { return false; } return true; },781fe93788829f900d23ca6239d9be9a2bbe361f,2018-03-14 18:21:02,7
161551,src_test_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGeneratorTest.java,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() throws java.lang.Exception { return getConfig(""^WIP.*"", true, true); }",f5f70e83d0947a1589c2073acda490227da9f25f,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet, boolean ignoreWipPrivate) throws java.lang.Exception { return getConfig(""^WIP.*"", publishOnPatchSetCreated, ignoreRebaseEmptyPatchSet, ignoreWipPrivate); }",e4837642808d296f6af406aaa2c987e4b4b4785c,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreUnchangedPatchSet, boolean ignoreWorkInProgressPatchSet, boolean ignorePrivatePatchSet) throws java.lang.Exception { return getConfig(""^WIP.*"", publishOnPatchSetCreated, ignoreUnchangedPatchSet, ignoreWorkInProgressPatchSet, ignorePrivatePatchSet); }",0ee02ac1302278ea6cace8a9b51bbc55268120de,2018-03-14 18:21:02,7
161551,src_test_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGeneratorTest.java,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated) throws java.lang.Exception { return getConfig(""^WIP.*"", publishOnPatchSetCreated, true); }",80e4bd98216989fd8e295ff6898810943f234b51,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated) throws java.lang.Exception { return getConfig(""^WIP.*"", publishOnPatchSetCreated, true, true); }",70581e30ede09304a83c96d6b8b411ce647abf79,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated) throws java.lang.Exception { return getConfig(""^WIP.*"", publishOnPatchSetCreated, true, true, true); }",08410a0daa9bf5969a3713cc4299dd7521b37314,2018-03-14 18:21:02,7
161551,src_test_java_com_cisco_gerrit_plugins_slack_message_ChangeMergedMessageGeneratorTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void doesPublishWhenWorkInProgress() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.wip = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",951fa71ce01b1137da46a86c3f9a0c1949f2857f,"@org.junit.Test public void publishesWhenWorkInProgress() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.wip = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",ef533545c38c9e63c8301afcf261b6d531d7fe20,2018-03-14 18:21:02,7
161551,src_test_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGeneratorTest.java,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet) throws java.lang.Exception { return getConfig(""^WIP.*"", publishOnPatchSetCreated, ignoreRebaseEmptyPatchSet); }",1eab80990a05eb2afffcc4c7cb98478be5db0cce,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet) throws java.lang.Exception { return getConfig(""^WIP.*"", publishOnPatchSetCreated, ignoreRebaseEmptyPatchSet, true); }",eafa08cba8854355d2ad8280146af64b6ad0ca9f,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreUnchangedPatchSet) throws java.lang.Exception { return getConfig(""^WIP.*"", publishOnPatchSetCreated, ignoreUnchangedPatchSet, true, true); }",996c85182c0fbb43bcc8ddad7bc239d7704e4590,2018-03-14 18:21:02,7
163910,src_main_java_com_ericsson_gerrit_plugins_highavailability_websession_file_FileBasedWebsessionCache.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static void useFixedClockAt(java.time.Instant instant) { com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.clock = java.time.Clock.fixed(instant, java.time.ZoneId.systemDefault()); }",730d7434352c3090519a325689f5b53b686b6935,"static void useFixedClockAt(java.time.Instant instant) { com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.clock = java.time.Clock.fixed(instant, java.time.ZoneId.systemDefault()); }",87d90d89b21a5ab341010fd0b6b5fbc7006c69b3,2018-03-14 18:24:15,3
163910,src_main_java_com_ericsson_gerrit_plugins_highavailability_websession_file_FileBasedWebsessionCache.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static void useSystemDefaultZoneClock() { com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.clock = java.time.Clock.systemDefaultZone(); },8b0ad24314671f48dfcc759ab2a1e273c1bad18c,static void useSystemDefaultZoneClock() { com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.clock = java.time.Clock.systemDefaultZone(); },b90a2e4b596946ee65598beff704dcfe492f9da3,2018-03-14 18:24:15,3
163910,src_main_java_com_ericsson_gerrit_plugins_highavailability_websession_file_FileBasedWebsessionCache.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static java.time.Instant now() { return java.time.Instant.now(com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.getClock()); },bf890508070d923e3e0808eccefc706c229efc5e,static java.time.Instant now() { return java.time.Instant.now(com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.getClock()); },7a5fc6c806b52af8a2b08868d206b0ef04d50bed,2018-03-14 18:24:15,3
165852,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_InitIndex.java,"@java.lang.Override public void run() throws java.io.IOException { com.google.gerrit.server.index.IndexModule.IndexType type = com.google.gerrit.server.index.IndexModule.IndexType.LUCENE; if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) > 1) { ui.header(""Index""); type = index.select(""Type"", ""type"", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.ELASTICSEARCH)) { index.select(""Transport protocol"", ""protocol"", ""http"", com.google.common.collect.Sets.newHashSet(""http"", ""https"")); index.string(""Hostname"", ""hostname"", ""localhost""); index.string(""Port"", ""port"", ""9200""); index.string(""Index Name"", ""name"", ""gerrit""); } if (((site.isNew) || (isEmptySite())) && (type == (com.google.gerrit.server.index.IndexModule.IndexType.LUCENE))) { for (com.google.gerrit.server.index.SchemaDefinitions<?> def : com.google.gerrit.server.index.IndexModule.ALL_SCHEMA_DEFS) { com.google.gerrit.server.index.IndexUtils.setReady(site, def.getName(), def.getLatest().getVersion(), true); } } else { if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) <= 1) { ui.header(""Index""); } java.lang.String message = java.lang.String.format((""\nThe index must be %sbuilt before starting Gerrit:\n"" + "" java -jar gerrit.war reindex -d site_path\n""), (site.isNew ? """" : ""re"")); ui.message(message); initFlags.autoStart = false; } }",b641a7dbc702a297261651803caab4f5a05b2775,"@java.lang.Override public void run() throws java.io.IOException { com.google.gerrit.server.index.IndexModule.IndexType type = com.google.gerrit.server.index.IndexModule.IndexType.LUCENE; if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) > 1) { ui.header(""Index""); type = index.select(""Type"", ""type"", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.ELASTICSEARCH)) { java.lang.String name = index.string(""Index Name"", ""name"", ""gerrit""); com.google.gerrit.pgm.init.api.Section elasticsearch = sections.get(""elasticsearch"", name); elasticsearch.select(""Transport protocol"", ""protocol"", ""http"", com.google.common.collect.Sets.newHashSet(""http"", ""https"")); elasticsearch.string(""Hostname"", ""hostname"", ""localhost""); elasticsearch.string(""Port"", ""port"", ""9200""); } if (((site.isNew) || (isEmptySite())) && (type == (com.google.gerrit.server.index.IndexModule.IndexType.LUCENE))) { for (com.google.gerrit.server.index.SchemaDefinitions<?> def : com.google.gerrit.server.index.IndexModule.ALL_SCHEMA_DEFS) { com.google.gerrit.server.index.IndexUtils.setReady(site, def.getName(), def.getLatest().getVersion(), true); } } else { if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) <= 1) { ui.header(""Index""); } java.lang.String message = java.lang.String.format((""\nThe index must be %sbuilt before starting Gerrit:\n"" + "" java -jar gerrit.war reindex -d site_path\n""), (site.isNew ? """" : ""re"")); ui.message(message); initFlags.autoStart = false; } }",50569fa68e8e99ac75b0a468dd4c536f747a32e7,"@java.lang.Override public void run() throws java.io.IOException { com.google.gerrit.server.index.IndexModule.IndexType type = com.google.gerrit.server.index.IndexModule.IndexType.LUCENE; if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) > 1) { ui.header(""Index""); type = index.select(""Type"", ""type"", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.ELASTICSEARCH)) { com.google.gerrit.pgm.init.api.Section elasticsearch = sections.get(""elasticsearch"", null); elasticsearch.string(""Index Prefix"", ""prefix"", ""gerrit""); java.lang.String name = ui.readString(""default"", ""Server Name""); com.google.gerrit.pgm.init.api.Section defaultServer = sections.get(""elasticsearch"", name); defaultServer.select(""Transport protocol"", ""protocol"", ""http"", com.google.common.collect.Sets.newHashSet(""http"", ""https"")); defaultServer.string(""Hostname"", ""hostname"", ""localhost""); defaultServer.string(""Port"", ""port"", ""9200""); } if (((site.isNew) || (isEmptySite())) && (type == (com.google.gerrit.server.index.IndexModule.IndexType.LUCENE))) { for (com.google.gerrit.server.index.SchemaDefinitions<?> def : com.google.gerrit.server.index.IndexModule.ALL_SCHEMA_DEFS) { com.google.gerrit.server.index.IndexUtils.setReady(site, def.getName(), def.getLatest().getVersion(), true); } } else { if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) <= 1) { ui.header(""Index""); } java.lang.String message = java.lang.String.format((""\nThe index must be %sbuilt before starting Gerrit:\n"" + "" java -jar gerrit.war reindex -d site_path\n""), (site.isNew ? """" : ""re"")); ui.message(message); initFlags.autoStart = false; } }",f9724c4829e5050fb7ce91a481719fdd479a8281,2018-03-15 20:16:55,3
166431,src_main_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_AbstractRestApiServlet.java,,,"protected static void setContentAndEncoding(javax.servlet.http.HttpServletResponse rsp) { rsp.setContentType(""text/plain""); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); }",f36d107f2ba7048ada5c070c5369336d7cf4bb01,"protected static void setHeaders(javax.servlet.http.HttpServletResponse rsp) { rsp.setContentType(""text/plain""); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); }",a57893a6c67d17c6a6601dadbb1411d1da753e61,2018-03-16 03:30:02,5
166431,src_main_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_AbstractIndexRestApiServlet.java,"private void process(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType(""text/plain""); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); java.lang.String path = req.getPathInfo(); T id = parse(path.substring(((path.lastIndexOf('/')) + 1))); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug(""{} {} {}"", operation, indexName, id); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true); java.util.concurrent.locks.Lock idLock = idLocks.get(id); idLock.lock(); try { index(id, operation); } finally { idLock.unlock(); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.error(""Unable to update {} index"", indexName, e); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = java.lang.String.format(""Error trying to find %s \n"", indexName); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, msg); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug(msg, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }",7ced2114cf3c2a99cfbef46f0ffeae1048fe635c,"private void process(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType(""text/plain""); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); java.lang.String path = req.getPathInfo(); T id = parse(path.substring(((path.lastIndexOf('/')) + 1))); logger.debug(""{} {} {}"", operation, indexName, id); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true); java.util.concurrent.locks.Lock idLock = idLocks.get(id); idLock.lock(); try { index(id, operation); } finally { idLock.unlock(); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); logger.error(""Unable to update {} index"", indexName, e); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = java.lang.String.format(""Error trying to find %s \n"", indexName); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, msg); logger.debug(msg, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }",7cd24054edbb9a0153379af6ba850aa4f06cc536,"private void process(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { setHeaders(rsp); java.lang.String path = req.getPathInfo(); T id = parse(path.substring(((path.lastIndexOf('/')) + 1))); logger.debug(""{} {} {}"", operation, indexName, id); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true); java.util.concurrent.locks.Lock idLock = idLocks.get(id); idLock.lock(); try { index(id, operation); } finally { idLock.unlock(); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); logger.error(""Unable to update {} index"", indexName, e); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = java.lang.String.format(""Error trying to find %s \n"", indexName); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, msg); logger.debug(msg, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }",afdab8e5d533e2a8fddc0095dcbdec074260dfc7,2018-03-16 03:30:02,5
166431,src_main_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_CacheRestApiServlet.java,"@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { rsp.setContentType(""text/plain""); rsp.setCharacterEncoding(""UTF-8""); try { java.util.List<java.lang.String> params = com.google.common.base.Splitter.on('/').splitToList(req.getPathInfo()); java.lang.String cacheName = params.get(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.CACHENAME_INDEX); java.lang.String json = req.getReader().readLine(); forwardedCacheEvictionHandler.evict(com.ericsson.gerrit.plugins.highavailability.forwarder.CacheEntry.from(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, json))); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (com.ericsson.gerrit.plugins.highavailability.forwarder.CacheNotFoundException e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.error(""Failed to process eviction request: {}"", e.getMessage()); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.error(""Failed to process eviction request: {}"", e.getMessage(), e); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } }",f809a8ba960f11fbf038c3d7608ea22d6a7bae5f,"@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { setContentAndEncoding(rsp); try { java.util.List<java.lang.String> params = com.google.common.base.Splitter.on('/').splitToList(req.getPathInfo()); java.lang.String cacheName = params.get(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.CACHENAME_INDEX); java.lang.String json = req.getReader().readLine(); forwardedCacheEvictionHandler.evict(com.ericsson.gerrit.plugins.highavailability.forwarder.CacheEntry.from(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, json))); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (com.ericsson.gerrit.plugins.highavailability.forwarder.CacheNotFoundException e) { logger.error(""Failed to process eviction request: {}"", e.getMessage()); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } catch (java.io.IOException e) { logger.error(""Failed to process eviction request: {}"", e.getMessage(), e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } }",ecb203a6234a408db1a58fa24c5d215049b0c601,"@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { setHeaders(rsp); try { java.util.List<java.lang.String> params = com.google.common.base.Splitter.on('/').splitToList(req.getPathInfo()); java.lang.String cacheName = params.get(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.CACHENAME_INDEX); java.lang.String json = req.getReader().readLine(); forwardedCacheEvictionHandler.evict(com.ericsson.gerrit.plugins.highavailability.forwarder.CacheEntry.from(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, json))); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (com.ericsson.gerrit.plugins.highavailability.forwarder.CacheNotFoundException e) { logger.error(""Failed to process eviction request: {}"", e.getMessage()); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } catch (java.io.IOException e) { logger.error(""Failed to process eviction request: {}"", e.getMessage(), e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } }",258dc6407f7f4f3f553d3dabf75a33854ad187c7,2018-03-16 03:30:02,5
166431,src_main_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_EventRestApiServlet.java,"@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { rsp.setContentType(""text/plain""); rsp.setCharacterEncoding(""UTF-8""); try { if (!(com.google.common.net.MediaType.parse(req.getContentType()).is(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JSON_UTF_8))) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.EventRestApiServlet.sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_UNSUPPORTED_MEDIA_TYPE, ((""Expecting "" + (com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JSON_UTF_8.toString())) + "" content type"")); return; } forwardedEventHandler.dispatch(getEventFromRequest(req)); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (com.google.gwtorm.server.OrmException e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.EventRestApiServlet.logger.debug(""Error trying to find a change "", e); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.EventRestApiServlet.sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, ""Change not found\n""); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.EventRestApiServlet.logger.error(""Unable to re-trigger event"", e); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.EventRestApiServlet.sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } }",a08611301321bab121fa72ae7cf14f8e110efe5a,"@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { setContentAndEncoding(rsp); try { if (!(com.google.common.net.MediaType.parse(req.getContentType()).is(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JSON_UTF_8))) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_UNSUPPORTED_MEDIA_TYPE, ((""Expecting "" + (com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JSON_UTF_8.toString())) + "" content type"")); return; } forwardedEventHandler.dispatch(getEventFromRequest(req)); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (com.google.gwtorm.server.OrmException e) { logger.debug(""Error trying to find a change "", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, ""Change not found\n""); } catch (java.io.IOException e) { logger.error(""Unable to re-trigger event"", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } }",8ff558f35abf5097be03e5456e72d0ca8aadfafb,"@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { setHeaders(rsp); try { if (!(com.google.common.net.MediaType.parse(req.getContentType()).is(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JSON_UTF_8))) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_UNSUPPORTED_MEDIA_TYPE, ((""Expecting "" + (com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JSON_UTF_8.toString())) + "" content type"")); return; } forwardedEventHandler.dispatch(getEventFromRequest(req)); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (com.google.gwtorm.server.OrmException e) { logger.debug(""Error trying to find a change "", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, ""Change not found\n""); } catch (java.io.IOException e) { logger.error(""Unable to re-trigger event"", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } }",f7dd8a0c59fac0bf934a5ede159dc595f69114b9,2018-03-16 03:30:02,5
165336,javatests_com_google_gerrit_acceptance_api_accounts_AccountIndexerIT.java,,,"@org.junit.Test public void indexingUpdatesTheIndex() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount(""foo""); java.lang.String preferredEmail = ""foo@example.com""; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.index(accountId); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccountSates = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccountSates).hasSize(1); assertThat(matchedAccountSates.get(0).getAccount().getId()).isEqualTo(accountId); }",2a98e5d5a470192306c2703a3b13293d63f79ea1,"@org.junit.Test public void indexingUpdatesTheIndex() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount(""foo""); java.lang.String preferredEmail = ""foo@example.com""; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.index(accountId); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccountStates = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccountStates).hasSize(1); assertThat(matchedAccountStates.get(0).getAccount().getId()).isEqualTo(accountId); }",e8c50658f17bddab01a92b73e574449869b30499,2018-03-16 15:24:41,6
165336,javatests_com_google_gerrit_acceptance_api_accounts_AccountIndexerIT.java,,,"private void updateAccountWithoutCacheOrIndex(com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.InternalAccountUpdate acountUpdate) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, allUsersRepo)) { org.eclipse.jgit.lib.PersonIdent ident = serverIdent.get(); md.getCommitBuilder().setAuthor(ident); md.getCommitBuilder().setCommitter(ident); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId, allUsersRepo).load(); accountConfig.setAccountUpdate(acountUpdate); accountConfig.commit(md); } }",2fd575c5130365e6bae766f4365aff9b77897393,"private void updateAccountWithoutCacheOrIndex(com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.InternalAccountUpdate accountUpdate) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, allUsersRepo)) { org.eclipse.jgit.lib.PersonIdent ident = serverIdent.get(); md.getCommitBuilder().setAuthor(ident); md.getCommitBuilder().setCommitter(ident); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId, allUsersRepo).load(); accountConfig.setAccountUpdate(accountUpdate); accountConfig.commit(md); } }",b75d79a408d56e4b33684366e21e22dbef494506,2018-03-16 15:24:41,6
165336,javatests_com_google_gerrit_acceptance_ProjectResetterTest.java,"@org.junit.Test public void accountEvictionFromAccountCreatorIfUserBranchIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.acceptance.AccountCreator accountCreator = org.easymock.EasyMock.createNiceMock(com.google.gerrit.acceptance.AccountCreator.class); accountCreator.evict(com.google.common.collect.ImmutableSet.of(accountId)); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCreator); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(accountCreator, null, null).reset(project).reset(allUsers).build()) { createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCreator); }",03ea740291c126f5afdd1b1f62b70ce927c4f261,"@org.junit.Test public void accountEvictionFromAccountCreatorIfUserBranchIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.acceptance.AccountCreator accountCreator = org.easymock.EasyMock.createNiceMock(com.google.gerrit.acceptance.AccountCreator.class); accountCreator.evict(com.google.common.collect.ImmutableSet.of(accountId)); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCreator); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(accountCreator, null, null, null).reset(project).reset(allUsers).build()) { createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCreator); }",08d420b74e715d0b3e2016bc0908f65ad0465565,"@org.junit.Test public void accountEvictionFromAccountCreatorIfUserBranchIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.acceptance.AccountCreator accountCreator = org.easymock.EasyMock.createNiceMock(com.google.gerrit.acceptance.AccountCreator.class); accountCreator.evict(com.google.common.collect.ImmutableSet.of(accountId)); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCreator); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(accountCreator, null, null, null).build(new com.google.gerrit.acceptance.ProjectResetter.Config().reset(project).reset(allUsers))) { createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCreator); }",4915e5817f1910e1d95bba2fb636d5e822ec3019,2018-03-16 15:24:41,6
165336,javatests_com_google_gerrit_acceptance_ProjectResetterTest.java,"@org.junit.Test public void accountEvictionIfUserBranchIsReset() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); org.eclipse.jgit.lib.Ref userBranch = createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); com.google.gerrit.server.account.AccountCache accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCache); org.eclipse.jgit.lib.Ref nonUserBranch = createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.Account.Id(2))); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, accountCache, null).reset(project).reset(allUsers).build()) { updateRef(nonUserBranch); updateRef(allUsersRepo, userBranch); } org.easymock.EasyMock.verify(accountCache); }",5d9cd3222dbb6f57a37f157c5449e433600f25e6,"@org.junit.Test public void accountEvictionIfUserBranchIsReset() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); org.eclipse.jgit.lib.Ref userBranch = createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); com.google.gerrit.server.account.AccountCache accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCache); com.google.gerrit.server.index.account.AccountIndexer accountIndexer = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.index.account.AccountIndexer.class); accountIndexer.index(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountIndexer); org.eclipse.jgit.lib.Ref nonUserBranch = createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.Account.Id(2))); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, accountCache, accountIndexer, null).reset(project).reset(allUsers).build()) { updateRef(nonUserBranch); updateRef(allUsersRepo, userBranch); } org.easymock.EasyMock.verify(accountCache); }",af290f50a7c7834d939e54270eabf49fb694baeb,"@org.junit.Test public void accountEvictionIfUserBranchIsReset() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); org.eclipse.jgit.lib.Ref userBranch = createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); com.google.gerrit.server.account.AccountCache accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCache); com.google.gerrit.server.index.account.AccountIndexer accountIndexer = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.index.account.AccountIndexer.class); accountIndexer.index(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountIndexer); org.eclipse.jgit.lib.Ref nonUserBranch = createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.Account.Id(2))); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, accountCache, accountIndexer, null).build(new com.google.gerrit.acceptance.ProjectResetter.Config().reset(project).reset(allUsers))) { updateRef(nonUserBranch); updateRef(allUsersRepo, userBranch); } org.easymock.EasyMock.verify(accountCache, accountIndexer); }",b49e15bd1ff256f4142326b8bbf75bcdde00c3ac,2018-03-16 15:24:41,6
165336,javatests_com_google_gerrit_acceptance_ProjectResetterTest.java,"@org.junit.Test public void projectEvictionIfRefsMetaConfigIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project2 = new com.google.gerrit.reviewdb.client.Project.NameKey(""bar""); org.eclipse.jgit.lib.Repository repo2 = repoManager.createRepository(project2); com.google.gerrit.server.project.ProjectCache projectCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(project2); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(projectCache); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, null, projectCache).reset(project).reset(project2).build()) { createRef(""refs/heads/master""); createRef(repo2, RefNames.REFS_CONFIG); } org.easymock.EasyMock.verify(projectCache); }",7255d0bfe1882c59f8dbdffcb2d0edfb02df11da,"@org.junit.Test public void projectEvictionIfRefsMetaConfigIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project2 = new com.google.gerrit.reviewdb.client.Project.NameKey(""bar""); org.eclipse.jgit.lib.Repository repo2 = repoManager.createRepository(project2); com.google.gerrit.server.project.ProjectCache projectCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(project2); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(projectCache); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, null, null, projectCache).reset(project).reset(project2).build()) { createRef(""refs/heads/master""); createRef(repo2, RefNames.REFS_CONFIG); } org.easymock.EasyMock.verify(projectCache); }",71c7618cc19c2cd495976d47bb61418033ce16e8,"@org.junit.Test public void projectEvictionIfRefsMetaConfigIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project2 = new com.google.gerrit.reviewdb.client.Project.NameKey(""bar""); org.eclipse.jgit.lib.Repository repo2 = repoManager.createRepository(project2); com.google.gerrit.server.project.ProjectCache projectCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(project2); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(projectCache); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, null, null, projectCache).build(new com.google.gerrit.acceptance.ProjectResetter.Config().reset(project).reset(project2))) { createRef(""refs/heads/master""); createRef(repo2, RefNames.REFS_CONFIG); } org.easymock.EasyMock.verify(projectCache); }",3be3aa71815792ce946f979d51f1f1fe6f9b1467,2018-03-16 15:24:41,6
165336,javatests_com_google_gerrit_acceptance_ProjectResetterTest.java,"@org.junit.Test public void accountEvictionIfUserBranchIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.server.account.AccountCache accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCache); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, accountCache, null).reset(project).reset(allUsers).build()) { createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.Account.Id(2))); createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCache); }",43021572bab400b57e285fc40af7d10679e9212d,"@org.junit.Test public void accountEvictionIfUserBranchIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.server.account.AccountCache accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCache); com.google.gerrit.server.index.account.AccountIndexer accountIndexer = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.index.account.AccountIndexer.class); accountIndexer.index(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountIndexer); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, accountCache, accountIndexer, null).reset(project).reset(allUsers).build()) { createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.Account.Id(2))); createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCache); }",addb2cc6b9b72e93e5f4ec81e8966976915a9450,"@org.junit.Test public void accountEvictionIfUserBranchIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.server.account.AccountCache accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCache); com.google.gerrit.server.index.account.AccountIndexer accountIndexer = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.index.account.AccountIndexer.class); accountIndexer.index(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountIndexer); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, accountCache, accountIndexer, null).build(new com.google.gerrit.acceptance.ProjectResetter.Config().reset(project).reset(allUsers))) { createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.Account.Id(2))); createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCache, accountIndexer); }",45d489516d59e216411af2351671600f56ce20d0,2018-03-16 15:24:41,6
165336,javatests_com_google_gerrit_acceptance_api_accounts_AccountIndexerIT.java,,,"@org.junit.Test public void reindexingStaleAccountUpdatesTheIndex() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount(""foo""); java.lang.String preferredEmail = ""foo@example.com""; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.reindexIfStale(accountId); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccountSates = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccountSates).hasSize(1); assertThat(matchedAccountSates.get(0).getAccount().getId()).isEqualTo(accountId); }",4cdfb295f66bde4361cd15c1bfc7679b5d106030,"@org.junit.Test public void reindexingStaleAccountUpdatesTheIndex() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount(""foo""); java.lang.String preferredEmail = ""foo@example.com""; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.reindexIfStale(accountId); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccountStates = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccountStates).hasSize(1); assertThat(matchedAccountStates.get(0).getAccount().getId()).isEqualTo(accountId); }",c5c7e3f4b1e214762234d6d36e1b87cd26f1cb52,2018-03-16 15:24:41,6
165336,java_com_google_gerrit_acceptance_ProjectResetter.java,"public com.google.gerrit.acceptance.ProjectResetter build() throws java.io.IOException { return new com.google.gerrit.acceptance.ProjectResetter(repoManager, allUsersName, accountCreator, accountCache, projectCache, refsByProject); }",9735d13a16978f3ba616afe54d7e3915a926328c,"public com.google.gerrit.acceptance.ProjectResetter build() throws java.io.IOException { return new com.google.gerrit.acceptance.ProjectResetter(repoManager, allUsersName, accountCreator, accountCache, accountIndexer, projectCache, refsByProject); }",01ab031b6e27eeca601c7d4d509a4065729ecd54,"public com.google.gerrit.acceptance.ProjectResetter build(com.google.gerrit.acceptance.ProjectResetter.Config input) throws java.io.IOException { return new com.google.gerrit.acceptance.ProjectResetter(repoManager, allUsersName, accountCreator, accountCache, accountIndexer, projectCache, input.refsByProject); }",ccc4bfbdff5205e9080af348cb60adb1bd9dfc96,2018-03-16 15:24:41,6
165336,javatests_com_google_gerrit_acceptance_ProjectResetterTest.java,"@org.junit.Test public void projectEvictionIfRefsMetaConfigIsReset() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project2 = new com.google.gerrit.reviewdb.client.Project.NameKey(""bar""); org.eclipse.jgit.lib.Repository repo2 = repoManager.createRepository(project2); org.eclipse.jgit.lib.Ref metaConfig = createRef(repo2, RefNames.REFS_CONFIG); com.google.gerrit.server.project.ProjectCache projectCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(project2); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(projectCache); org.eclipse.jgit.lib.Ref nonMetaConfig = createRef(""refs/heads/master""); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, null, projectCache).reset(project).reset(project2).build()) { updateRef(nonMetaConfig); updateRef(repo2, metaConfig); } org.easymock.EasyMock.verify(projectCache); }",e4e9989d0416a182eea427b441e3d617f963f6a5,"@org.junit.Test public void projectEvictionIfRefsMetaConfigIsReset() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project2 = new com.google.gerrit.reviewdb.client.Project.NameKey(""bar""); org.eclipse.jgit.lib.Repository repo2 = repoManager.createRepository(project2); org.eclipse.jgit.lib.Ref metaConfig = createRef(repo2, RefNames.REFS_CONFIG); com.google.gerrit.server.project.ProjectCache projectCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(project2); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(projectCache); org.eclipse.jgit.lib.Ref nonMetaConfig = createRef(""refs/heads/master""); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, null, null, projectCache).reset(project).reset(project2).build()) { updateRef(nonMetaConfig); updateRef(repo2, metaConfig); } org.easymock.EasyMock.verify(projectCache); }",5755c5ab234c98787a925d5dd2490829f20d6b23,"@org.junit.Test public void projectEvictionIfRefsMetaConfigIsReset() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project2 = new com.google.gerrit.reviewdb.client.Project.NameKey(""bar""); org.eclipse.jgit.lib.Repository repo2 = repoManager.createRepository(project2); org.eclipse.jgit.lib.Ref metaConfig = createRef(repo2, RefNames.REFS_CONFIG); com.google.gerrit.server.project.ProjectCache projectCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(project2); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(projectCache); org.eclipse.jgit.lib.Ref nonMetaConfig = createRef(""refs/heads/master""); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, null, null, projectCache).build(new com.google.gerrit.acceptance.ProjectResetter.Config().reset(project).reset(project2))) { updateRef(nonMetaConfig); updateRef(repo2, metaConfig); } org.easymock.EasyMock.verify(projectCache); }",a17e9c4282c4082bfd9af364b4b2a64638e43870,2018-03-16 15:24:41,6
165336,javatests_com_google_gerrit_acceptance_api_accounts_AccountIndexerIT.java,,,"@org.junit.Test public void indexCannotBeCorruptedByStaleCache() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount(""foo""); loadAccountToCache(accountId); java.lang.String preferredEmail = ""foo@example.com""; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.index(accountId); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccountSates = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccountSates).hasSize(1); assertThat(matchedAccountSates.get(0).getAccount().getId()).isEqualTo(accountId); }",8b7cfecb542ae0e3237926d0bdaccb43459a4a25,"@org.junit.Test public void indexCannotBeCorruptedByStaleCache() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount(""foo""); loadAccountToCache(accountId); java.lang.String preferredEmail = ""foo@example.com""; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.index(accountId); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccountStates = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccountStates).hasSize(1); assertThat(matchedAccountStates.get(0).getAccount().getId()).isEqualTo(accountId); }",9989fbd400cb2698b8e3ab2a8187dbae9f0fd0eb,2018-03-16 15:24:41,6
166432,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_notedb_ChangeRebuilderIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void missingPatchSetCommitOmitsCommentsOnParentSide() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getChange().getId(); com.google.gerrit.extensions.common.CommentInfo draftInfo = putDraft(user, id, 1, ""draft comment"", null, Side.PARENT); putComment(user, id, 1, ""published comment"", null, Side.PARENT); com.google.gerrit.extensions.common.CommentInfo commentInfo = gApi.changes().id(id.get()).comments().values().stream().flatMap(java.util.List::stream).findFirst().get(); com.google.gerrit.reviewdb.server.ReviewDb db = getUnwrappedDb(); com.google.gerrit.reviewdb.client.PatchSet ps = db.patchSets().get(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, 1)); ps.setRevision(new com.google.gerrit.reviewdb.client.RevId(""deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"")); db.patchSets().update(java.util.Collections.singleton(ps)); try { patchListCache.getOldId(db.changes().get(id), ps, null); assert_().fail(""Expected PatchListNotAvailableException""); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { } checker.rebuildAndCheckChange(id, com.google.common.collect.ImmutableList.of(((((((((((((""PatchLineComment.Key sets differ: ["" + id) + "",1,"") + (com.google.gerrit.acceptance.PushOneCommit.FILE_NAME)) + "","") + (draftInfo.id)) + "", "") + id) + "",1,"") + (com.google.gerrit.acceptance.PushOneCommit.FILE_NAME)) + "","") + (commentInfo.id)) + ""] only in A; [] only in B""))); }",7570799d949d693ea1d5c594c831ee83a26f2a47,"@org.junit.Test public void missingPatchSetCommitOmitsCommentsOnParentSide() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getChange().getId(); com.google.gerrit.extensions.common.CommentInfo draftInfo = putDraft(user, id, 1, ""draft comment"", null, Side.PARENT); putComment(user, id, 1, ""published comment"", null, Side.PARENT); com.google.gerrit.extensions.common.CommentInfo commentInfo = gApi.changes().id(id.get()).comments().values().stream().flatMap(java.util.List::stream).findFirst().get(); com.google.gerrit.reviewdb.server.ReviewDb db = getUnwrappedDb(); com.google.gerrit.reviewdb.client.PatchSet ps = db.patchSets().get(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, 1)); ps.setRevision(new com.google.gerrit.reviewdb.client.RevId(""deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"")); db.patchSets().update(java.util.Collections.singleton(ps)); try { patchListCache.getOldId(db.changes().get(id), ps, null); assert_().fail(""Expected PatchListNotAvailableException""); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { } checker.rebuildAndCheckChange(id, java.util.stream.Stream.of(draftInfo.id, commentInfo.id).sorted().map(( c) -> (((id + "",1,"") + PushOneCommit.FILE_NAME) + "","") + c).collect(java.util.stream.Collectors.joining("", "", ""PatchLineComment.Key sets differ: ["", ""] only in A; [] only in B""))); }",97edb92e20a89701017393468aebb9253cd3cae8,2018-03-17 00:44:05,4
166432,gerrit-server_src_test_java_com_google_gerrit_testutil_NoteDbChecker.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void rebuildAndCheckChange(com.google.gerrit.reviewdb.client.Change.Id changeId, java.util.List<java.lang.String> expectedDiff) throws java.lang.Exception { ImmutableListMultimap.Builder<com.google.gerrit.reviewdb.client.Change.Id, java.lang.String> b = com.google.common.collect.ImmutableListMultimap.builder(); b.putAll(changeId, expectedDiff); rebuildAndCheckChanges(java.util.stream.Stream.of(changeId), b.build()); }",8c2ddb7b6fd6bdfc1c0a78d3507ebae7561de4de,"public void rebuildAndCheckChange(com.google.gerrit.reviewdb.client.Change.Id changeId, java.lang.String... expectedDiff) throws java.lang.Exception { ImmutableListMultimap.Builder<com.google.gerrit.reviewdb.client.Change.Id, java.lang.String> b = com.google.common.collect.ImmutableListMultimap.builder(); b.putAll(changeId, java.util.Arrays.asList(expectedDiff)); rebuildAndCheckChanges(java.util.stream.Stream.of(changeId), b.build()); }",0fa7229ae800d4b6d757d6744e440e5ea7f3b291,2018-03-17 00:44:05,4
166470,javatests_com_google_gerrit_server_schema_Schema_159_to_160_Test.java,"@org.junit.Test public void deleteItems() throws java.lang.Exception { org.eclipse.jgit.lib.ObjectId oldMetaId = metaRef(accountId); java.util.List<java.lang.String> defaultNames = com.google.common.collect.ImmutableList.copyOf(myMenusFromApi(accountId).keySet()); GeneralPreferencesInfo prefs = gApi.accounts().id(accountId.get()).getPreferences(); prefs.my.add(0, new com.google.gerrit.extensions.client.MenuItem(""Something else"", ((com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEM) + ""+is:mergeable""))); prefs.my.add(new com.google.gerrit.extensions.client.MenuItem(""Drafts"", com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEM)); prefs.my.add(new com.google.gerrit.extensions.client.MenuItem(""Totally not drafts"", com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEM)); gApi.accounts().id(accountId.get()).setPreferences(prefs); java.util.List<java.lang.String> oldNames = com.google.common.collect.ImmutableList.<java.lang.String>builder().add(""Something else"").addAll(defaultNames).add(""Drafts"").add(""Totally not drafts"").build(); assertThat(myMenusFromApi(accountId).keySet()).containsExactlyElementsIn(oldNames).inOrder(); schema160.migrateData(db, new com.google.gerrit.testing.TestUpdateUI()); accountCache.evict(accountId); testEnv.setApiUser(accountId); assertThat(metaRef(accountId)).isNotEqualTo(oldMetaId); java.util.List<java.lang.String> newNames = com.google.common.collect.ImmutableList.<java.lang.String>builder().add(""Something else"").addAll(defaultNames).build(); assertThat(myMenusFromNoteDb(accountId).keySet()).containsExactlyElementsIn(newNames).inOrder(); assertThat(myMenusFromApi(accountId).keySet()).containsExactlyElementsIn(newNames).inOrder(); }",6c5b4932993b1da3b05ff6cd55ace2d35c3323d7,"@org.junit.Test public void deleteItems() throws java.lang.Exception { org.eclipse.jgit.lib.ObjectId oldMetaId = metaRef(accountId); com.google.common.collect.ImmutableSet<java.lang.String> defaultNames = myMenusFromApi(accountId); GeneralPreferencesInfo prefs = gApi.accounts().id(accountId.get()).getPreferences(); prefs.my.add(0, new com.google.gerrit.extensions.client.MenuItem(""Something else"", ((com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEMS.get(0)) + ""+is:mergeable""))); for (int i = 0; i < (com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEMS.size()); i++) { prefs.my.add(new com.google.gerrit.extensions.client.MenuItem((""Draft entry "" + i), com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEMS.get(i))); } gApi.accounts().id(accountId.get()).setPreferences(prefs); java.util.List<java.lang.String> oldNames = com.google.common.collect.ImmutableList.<java.lang.String>builder().add(""Something else"").addAll(defaultNames).add(""Draft entry 0"").add(""Draft entry 1"").add(""Draft entry 2"").add(""Draft entry 3"").build(); assertThat(myMenusFromApi(accountId)).containsExactlyElementsIn(oldNames).inOrder(); schema160.migrateData(db, new com.google.gerrit.testing.TestUpdateUI()); accountCache.evict(accountId); testEnv.setApiUser(accountId); assertThat(metaRef(accountId)).isNotEqualTo(oldMetaId); java.util.List<java.lang.String> newNames = com.google.common.collect.ImmutableList.<java.lang.String>builder().add(""Something else"").addAll(defaultNames).build(); assertThat(myMenusFromNoteDb(accountId)).containsExactlyElementsIn(newNames).inOrder(); assertThat(myMenusFromApi(accountId)).containsExactlyElementsIn(newNames).inOrder(); }",740f0a105e4b4c253cce4d7c0213d1aba7d78009,"@org.junit.Test public void deleteItems() throws java.lang.Exception { org.eclipse.jgit.lib.ObjectId oldMetaId = metaRef(accountId); com.google.common.collect.ImmutableSet<java.lang.String> defaultNames = myMenusFromApi(accountId); GeneralPreferencesInfo prefs = gApi.accounts().id(accountId.get()).getPreferences(); prefs.my.add(0, new com.google.gerrit.extensions.client.MenuItem(""Something else"", ((com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEMS.get(0)) + ""+is:mergeable""))); for (int i = 0; i < (com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEMS.size()); i++) { prefs.my.add(new com.google.gerrit.extensions.client.MenuItem((""Draft entry "" + i), com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEMS.get(i))); } gApi.accounts().id(accountId.get()).setPreferences(prefs); java.util.List<java.lang.String> oldNames = com.google.common.collect.ImmutableList.<java.lang.String>builder().add(""Something else"").addAll(defaultNames).add(""Draft entry 0"").add(""Draft entry 1"").add(""Draft entry 2"").add(""Draft entry 3"").build(); assertThat(myMenusFromApi(accountId)).containsExactlyElementsIn(oldNames).inOrder(); schema160.migrateData(db, new com.google.gerrit.testing.TestUpdateUI()); accountCache.evict(accountId); accountIndexer.index(accountId); testEnv.setApiUser(accountId); assertThat(metaRef(accountId)).isNotEqualTo(oldMetaId); java.util.List<java.lang.String> newNames = com.google.common.collect.ImmutableList.<java.lang.String>builder().add(""Something else"").addAll(defaultNames).build(); assertThat(myMenusFromNoteDb(accountId)).containsExactlyElementsIn(newNames).inOrder(); assertThat(myMenusFromApi(accountId)).containsExactlyElementsIn(newNames).inOrder(); }",b9edcdd36c3205938284ca2d909604baf897b63f,2018-03-17 13:49:46,2
166632,src_main_java_com_googlesource_gerrit_plugins_reviewers_ReviewersResolver.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers groupMembers, java.lang.String r) { try { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groupsCollection.get().parse(r).getGroupUUID(), p).stream().filter(Account::isActive).map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(""For the change {} of project {}: reviewer {} is neither an account nor a group."", changeNumber, p, r); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(""For the change {} of project {}: failed to list accounts for group {}."", changeNumber, p, r); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(""For the change {} of project {}: failed to list accounts for group {}."", changeNumber, p, r, e); } }",1c29f2c88fe41855d4872bb2fced538416d0cc91,"private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey project, int changeNumber, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers groupMembers, java.lang.String group) { try { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groupsCollection.get().parse(group).getGroupUUID(), project).stream().filter(Account::isActive).map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(""For the change {} of project {}: reviewer {} is neither an account nor a group."", changeNumber, project, group); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(""For the change {} of project {}: failed to list accounts for group {}."", changeNumber, project, group); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(""For the change {} of project {}: failed to list accounts for group {}."", changeNumber, project, group, e); } }",202468666ae710d7c71cdec39887cbc574cb8bf2,2018-03-18 09:20:47,2
166632,src_main_java_com_googlesource_gerrit_plugins_reviewers_ReviewersResolver.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean resolveAccount(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, java.lang.String r) { try { com.google.gerrit.reviewdb.client.Account account = accountResolver.find(reviewDb, r); if ((account != null) && (account.isActive())) { if ((uploader == null) || ((uploader._accountId) != (account.getId().get()))) { reviewers.add(account.getId()); } return true; } } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.error(""For the change {} of project {}: failed to resolve account {}."", changeNumber, p, r, e); return true; } return false; }",7f9b477ea0b3eab35ac5901972f52b06647b8da3,"private boolean resolveAccount(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, com.google.gerrit.reviewdb.client.Project.NameKey project, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, java.lang.String accountName) { try { com.google.gerrit.reviewdb.client.Account account = accountResolver.find(reviewDb, accountName); if ((account != null) && (account.isActive())) { if ((uploader == null) || ((uploader._accountId) != (account.getId().get()))) { reviewers.add(account.getId()); } return true; } } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.error(""For the change {} of project {}: failed to resolve account {}."", changeNumber, project, accountName, e); return true; } return false; }",3a356cf12d58e0b7013f17a501af2b074fa2734b,2018-03-18 09:20:47,2
166632,src_main_java_com_googlesource_gerrit_plugins_reviewers_ReviewersResolver.java,"java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> resolve(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.common.AccountInfo uploader) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.Sets.newHashSetWithExpectedSize(in.size()); com.google.gerrit.server.account.GroupMembers groupMembers = null; for (java.lang.String r : in) { try { com.google.gerrit.reviewdb.client.Account account = accountResolver.find(reviewDb, r); if ((account != null) && (account.isActive())) { if ((uploader == null) || ((uploader._accountId) != (account.getId().get()))) { reviewers.add(account.getId()); } continue; } } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.error(""For the change {} of project {}: failed to resolve account {}."", changeNumber, p, r, e); continue; } if ((groupMembers == null) && (uploader != null)) { java.lang.String uploaderNameEmail = java.lang.String.format(""%s <%s>"", uploader.name, uploader.email); try { com.google.gerrit.reviewdb.client.Account uploaderAccount = accountResolver.findByNameOrEmail(reviewDb, uploaderNameEmail); if (uploaderAccount != null) { groupMembers = groupMembersFactory.create(identifiedUserFactory.create(uploaderAccount.getId())); } } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(""For the change {} of project {}: failed to list accounts for group {}, cannot retrieve uploader account {}."", changeNumber, p, r, uploaderNameEmail, e); } } try { if (groupMembers != null) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groupsCollection.get().parse(r).getGroupUUID(), p).stream().filter(Account::isActive).map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } else { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(""For the change {} of project {}: failed to list accounts for group {}; cannot retrieve uploader account for {}."", changeNumber, p, r, uploader.email); } } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(""For the change {} of project {}: reviewer {} is neither an account nor a group."", changeNumber, p, r); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(""For the change {} of project {}: failed to list accounts for group {}."", changeNumber, p, r); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(""For the change {} of project {}: failed to list accounts for group {}."", changeNumber, p, r, e); } } return reviewers; }",7f286c2f0b52fe4118e2118ef5e1dad2f5aaf3a5,"java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> resolve(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.common.AccountInfo uploader) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.Sets.newHashSetWithExpectedSize(in.size()); com.google.gerrit.server.account.GroupMembers groupMembers = null; for (java.lang.String r : in) { if (resolveAccount(reviewDb, p, changeNumber, uploader, reviewers, r)) { continue; } if ((groupMembers == null) && (uploader != null)) { groupMembers = createGroupMembers(reviewDb, p, changeNumber, uploader, r); } if (groupMembers != null) { resolveGroup(p, changeNumber, reviewers, groupMembers, r); } else { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(""For the change {} of project {}: failed to list accounts for group {}; cannot retrieve uploader account for {}."", changeNumber, p, r, uploader.email); } } return reviewers; }",a232cd20559600de71485464956b0782f273763a,"java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> resolve(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, java.util.Set<java.lang.String> names, com.google.gerrit.reviewdb.client.Project.NameKey project, int changeNumber, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.common.AccountInfo uploader) { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.Sets.newHashSetWithExpectedSize(names.size()); com.google.gerrit.server.account.GroupMembers groupMembers = null; for (java.lang.String name : names) { if (resolveAccount(reviewDb, project, changeNumber, uploader, reviewers, name)) { continue; } if ((groupMembers == null) && (uploader != null)) { groupMembers = createGroupMembers(reviewDb, project, changeNumber, uploader, name); } if (groupMembers != null) { resolveGroup(project, changeNumber, reviewers, groupMembers, name); } else { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(""For the change {} of project {}: failed to list accounts for group {}; cannot retrieve uploader account for {}."", changeNumber, project, name, uploader.email); } } return reviewers; }",09a6d69c56ec792418c0b286a7b023592b5a0022,2018-03-18 09:20:47,2
166632,src_main_java_com_googlesource_gerrit_plugins_reviewers_ReviewersResolver.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.server.account.GroupMembers createGroupMembers(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader, java.lang.String r) { java.lang.String uploaderNameEmail = java.lang.String.format(""%s <%s>"", uploader.name, uploader.email); try { com.google.gerrit.reviewdb.client.Account uploaderAccount = accountResolver.findByNameOrEmail(reviewDb, uploaderNameEmail); if (uploaderAccount != null) { return groupMembersFactory.create(identifiedUserFactory.create(uploaderAccount.getId())); } } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(""For the change {} of project {}: failed to list accounts for group {}, cannot retrieve uploader account {}."", changeNumber, p, r, uploaderNameEmail, e); } return null; }",f8eaee522cc052c2f769b3d3ecdb49d3277a1f94,"private com.google.gerrit.server.account.GroupMembers createGroupMembers(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, com.google.gerrit.reviewdb.client.Project.NameKey project, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader, java.lang.String group) { java.lang.String uploaderNameEmail = java.lang.String.format(""%s <%s>"", uploader.name, uploader.email); try { com.google.gerrit.reviewdb.client.Account uploaderAccount = accountResolver.findByNameOrEmail(reviewDb, uploaderNameEmail); if (uploaderAccount != null) { return groupMembersFactory.create(identifiedUserFactory.create(uploaderAccount.getId())); } } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(""For the change {} of project {}: failed to list accounts for group {}, cannot retrieve uploader account {}."", changeNumber, project, group, uploaderNameEmail, e); } return null; }",8ea3fec83e0a07f0db8002350cea750322e46d52,2018-03-18 09:20:47,2
166693,src_main_java_com_googlesource_gerrit_plugins_reviewers_ReviewersResolver.java,"private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers groupMembers, java.lang.String r) { try { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groupsCollection.get().parse(r).getGroupUUID(), p).stream().filter(Account::isActive).map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(""For the change {} of project {}: reviewer {} is neither an account nor a group."", changeNumber, p, r); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(""For the change {} of project {}: failed to list accounts for group {}."", changeNumber, p, r); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(""For the change {} of project {}: failed to list accounts for group {}."", changeNumber, p, r, e); } }",1c29f2c88fe41855d4872bb2fced538416d0cc91,"private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers groupMembers, java.lang.String r) { try { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groupsCollection.get().parse(r).getGroupUUID(), p).stream().filter(Account::isActive).map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(""For the change {} of project {}: reviewer {} is neither an account nor a group."", changeNumber, p, r); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(""For the change {} of project {}: failed to list accounts for group {}."", changeNumber, p, r, e); } }",998f1b0981d04c52dd0011a12946a13774bfa8ec,"private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey project, int changeNumber, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers groupMembers, java.lang.String group) { try { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groupsCollection.get().parse(group).getGroupUUID(), project).stream().filter(Account::isActive).map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(""For the change {} of project {}: reviewer {} is neither an account nor a group."", changeNumber, project, group, e); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(""For the change {} of project {}: failed to list accounts for group {}."", changeNumber, project, group, e); } }",4b47ae050b616a46ae44424355b7fd72b5df20ba,2018-03-18 09:22:50,3
166951,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_GcAllUsers.java,"private void run(java.util.function.Consumer<java.lang.String> logOneLine, @com.google.gerrit.common.Nullable java.io.PrintWriter progressWriter) { if (!((repoManager) instanceof com.google.gerrit.server.git.LocalDiskRepositoryManager)) { logOneLine.accept(((""Skipping GC of "" + (allUsers)) + ""; not a local disk repo"")); return; } if (progressWriter == null) { logOneLine.accept(((""collecting garbage for \"""" + (allUsers)) + ""\"":\n"")); } com.google.gerrit.common.data.GarbageCollectionResult result = gcFactory.create().run(com.google.common.collect.ImmutableList.of(allUsers), progressWriter); if (!(result.hasErrors())) { return; } for (com.google.gerrit.common.data.GarbageCollectionResult.Error e : result.getErrors()) { switch (e.getType()) { case GC_ALREADY_SCHEDULED : logOneLine.accept((""GC already scheduled for "" + (e.getProjectName()))); break; case GC_FAILED : logOneLine.accept((""GC failed for "" + (e.getProjectName()))); break; case REPOSITORY_NOT_FOUND : logOneLine.accept(((e.getProjectName()) + "" repo not found"")); break; default : logOneLine.accept((((""GC failed for "" + (e.getProjectName())) + "": "") + (e.getType()))); break; } } }",4ce629e0e9735dd0d5f700d91d3f8ff388882dcc,"private void run(java.util.function.Consumer<java.lang.String> logOneLine, @com.google.gerrit.common.Nullable java.io.PrintWriter progressWriter) { if (!((repoManager) instanceof com.google.gerrit.server.git.LocalDiskRepositoryManager)) { logOneLine.accept(((""Skipping GC of "" + (allUsers)) + ""; not a local disk repo"")); return; } if (!(enableAutoGc(logOneLine))) { logOneLine.accept(java.lang.String.format((((((""Skipping GC of "" + (allUsers)) + "" due to disabling "") + (CONFIG_GC_SECTION)) + ""."") + (CONFIG_KEY_AUTO)))); logOneLine.accept(((""If loading accounts is slow after the NoteDb migration, run `git gc` on "" + (allUsers)) + "" manually"")); return; } if (progressWriter == null) { logOneLine.accept(((""collecting garbage for \"""" + (allUsers)) + ""\"":\n"")); } com.google.gerrit.common.data.GarbageCollectionResult result = gcFactory.create().run(com.google.common.collect.ImmutableList.of(allUsers), progressWriter); if (!(result.hasErrors())) { return; } for (com.google.gerrit.common.data.GarbageCollectionResult.Error e : result.getErrors()) { switch (e.getType()) { case GC_ALREADY_SCHEDULED : logOneLine.accept((""GC already scheduled for "" + (e.getProjectName()))); break; case GC_FAILED : logOneLine.accept((""GC failed for "" + (e.getProjectName()))); break; case REPOSITORY_NOT_FOUND : logOneLine.accept(((e.getProjectName()) + "" repo not found"")); break; default : logOneLine.accept((((""GC failed for "" + (e.getProjectName())) + "": "") + (e.getType()))); break; } } }",e10f70822acde6d8e864d174ccc626e4d81c109f,"private void run(java.util.function.Consumer<java.lang.String> logOneLine, @com.google.gerrit.common.Nullable java.io.PrintWriter progressWriter) { if (!((repoManager) instanceof com.google.gerrit.server.git.LocalDiskRepositoryManager)) { logOneLine.accept(((""Skipping GC of "" + (allUsers)) + ""; not a local disk repo"")); return; } if (!(enableAutoGc(logOneLine))) { logOneLine.accept((((((""Skipping GC of "" + (allUsers)) + "" due to disabling "") + (CONFIG_GC_SECTION)) + ""."") + (CONFIG_KEY_AUTO))); logOneLine.accept(((""If loading accounts is slow after the NoteDb migration, run `git gc` on "" + (allUsers)) + "" manually"")); return; } if (progressWriter == null) { logOneLine.accept(((""collecting garbage for \"""" + (allUsers)) + ""\"":\n"")); } com.google.gerrit.common.data.GarbageCollectionResult result = gcFactory.create().run(com.google.common.collect.ImmutableList.of(allUsers), progressWriter); if (!(result.hasErrors())) { return; } for (com.google.gerrit.common.data.GarbageCollectionResult.Error e : result.getErrors()) { switch (e.getType()) { case GC_ALREADY_SCHEDULED : logOneLine.accept((""GC already scheduled for "" + (e.getProjectName()))); break; case GC_FAILED : logOneLine.accept((""GC failed for "" + (e.getProjectName()))); break; case REPOSITORY_NOT_FOUND : logOneLine.accept(((e.getProjectName()) + "" repo not found"")); break; default : logOneLine.accept((((""GC failed for "" + (e.getProjectName())) + "": "") + (e.getType()))); break; } } }",2276f936f49986c482a625bc1d2ee3b48b85dd5e,2018-03-19 23:41:39,2
167450,src_main_java_com_googlesource_gerrit_plugins_automerger_ConfigLoader.java,"public java.util.Set<java.lang.String> getUpstreamBranches(java.lang.String toBranch, java.lang.String project) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<java.lang.String> upstreamBranches = new java.util.HashSet<java.lang.String>(); java.util.Set<java.lang.String> subsections = getConfig().getSubsections(pluginName); for (java.lang.String subsection : subsections) { java.lang.String[] branchPair = subsection.split(com.google.re2j.Pattern.quote(com.googlesource.gerrit.plugins.automerger.ConfigLoader.BRANCH_DELIMITER)); if ((branchPair.length) != 2) { throw new org.eclipse.jgit.errors.ConfigInvalidException((""Automerger config branch pair malformed: "" + subsection)); } if (toBranch.equals(branchPair[1])) { java.util.Set<java.lang.String> projectsInScope = getProjectsInScope(branchPair[0], branchPair[1]); if (projectsInScope.contains(project)) { upstreamBranches.add(branchPair[0]); } } } return upstreamBranches; }",3837272ed9b85e357ba8c728bb58454d4ef52a3a,"public java.util.Set<java.lang.String> getUpstreamBranches(java.lang.String toBranch, java.lang.String project) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<java.lang.String> upstreamBranches = new java.util.HashSet<java.lang.String>(); java.util.Set<java.lang.String> subsections = getConfig().getSubsections(pluginName); for (java.lang.String subsection : subsections) { java.util.List<java.lang.String> branchPair = com.google.common.base.Splitter.on(com.googlesource.gerrit.plugins.automerger.ConfigLoader.BRANCH_DELIMITER).trimResults().omitEmptyStrings().splitToList(subsection); if ((branchPair.size()) != 2) { throw new org.eclipse.jgit.errors.ConfigInvalidException((""Automerger config branch pair malformed: "" + subsection)); } if (toBranch.equals(branchPair.get(1))) { java.util.Set<java.lang.String> projectsInScope = getProjectsInScope(branchPair.get(0), branchPair.get(1)); if (projectsInScope.contains(project)) { upstreamBranches.add(branchPair.get(0)); } } } return upstreamBranches; }",f3c57d3a31edbdde45d522ae7c0282a7b5a14ca3,"public java.util.Set<java.lang.String> getUpstreamBranches(java.lang.String toBranch, java.lang.String project) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (toBranch == null) { throw new java.lang.IllegalArgumentException(""toBranch cannot be null""); } java.util.Set<java.lang.String> upstreamBranches = new java.util.HashSet<java.lang.String>(); java.util.Set<java.lang.String> subsections = getConfig().getSubsections(pluginName); for (java.lang.String subsection : subsections) { java.util.List<java.lang.String> branchPair = com.google.common.base.Splitter.on(com.googlesource.gerrit.plugins.automerger.ConfigLoader.BRANCH_DELIMITER).trimResults().omitEmptyStrings().splitToList(subsection); if ((branchPair.size()) != 2) { throw new org.eclipse.jgit.errors.ConfigInvalidException((""Automerger config branch pair malformed: "" + subsection)); } if (toBranch.equals(branchPair.get(1))) { java.util.Set<java.lang.String> projectsInScope = getProjectsInScope(branchPair.get(0), branchPair.get(1)); if (projectsInScope.contains(project)) { upstreamBranches.add(branchPair.get(0)); } } } return upstreamBranches; }",8186a4647994d63bf8baa55f122bb079f68595d0,2018-03-20 22:59:19,3
166331,javatests_com_google_gerrit_acceptance_api_group_GroupRebuilderIT.java,"@org.junit.Test public void basicGroupProperties() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo createdGroup = gApi.groups().create(name(""group"")).get(); try (com.google.gerrit.acceptance.api.group.GroupRebuilderIT.BlockReviewDbUpdatesForGroups ctx = new com.google.gerrit.acceptance.api.group.GroupRebuilderIT.BlockReviewDbUpdatesForGroups()) { com.google.gerrit.server.group.InternalGroup reviewDbGroup = groups.getGroup(db, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(createdGroup.id)).get(); deleteGroupRefs(reviewDbGroup); assertThat(com.google.gerrit.acceptance.api.group.GroupRebuilderIT.removeRefState(rebuild(reviewDbGroup))).isEqualTo(roundToSecond(reviewDbGroup)); } }",613d646d55cdb457c84274a432f970c0002005ce,"@org.junit.Test public void basicGroupProperties() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo createdGroup = gApi.groups().create(name(""group"")).get(); com.google.gerrit.server.group.InternalGroup reviewDbGroup = groups.getGroup(db, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(createdGroup.id)).get(); deleteGroupRefs(reviewDbGroup); assertThat(com.google.gerrit.acceptance.api.group.GroupRebuilderIT.removeRefState(rebuild(reviewDbGroup))).isEqualTo(roundToSecond(reviewDbGroup)); }",54e7acf75c8e76bfb1aafc2538ef10db0212f195,"@org.junit.Test public void basicGroupProperties() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo createdGroup = gApi.groups().create(name(""group"")).get(); com.google.gerrit.server.group.db.GroupBundle reviewDbBundle = bundleFactory.fromReviewDb(db, new com.google.gerrit.reviewdb.client.AccountGroup.Id(createdGroup.groupId)); deleteGroupRefs(reviewDbBundle); assertMigratedCleanly(rebuild(reviewDbBundle), reviewDbBundle); }",58a725a8ae123bec15b0138f75d1e1378bd4733f,2018-03-21 09:20:01,3
166331,java_com_google_gerrit_server_group_db_GroupsUpdate.java,"private com.google.gerrit.server.group.InternalGroup createGroupInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException { checkIfReviewDbUpdatesAreBlocked(); com.google.gerrit.reviewdb.client.AccountGroupName gn = new com.google.gerrit.reviewdb.client.AccountGroupName(groupCreation.getNameKey(), groupCreation.getId()); db.accountGroupNames().insert(com.google.common.collect.ImmutableList.of(gn)); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupsUpdate.createAccountGroup(groupCreation); com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult updateResult = updateGroupInReviewDb(db, group, groupUpdate); return com.google.gerrit.server.group.InternalGroup.create(group, updateResult.getModifiedMembers(), updateResult.getModifiedSubgroups(), updateResult.getRefState()); }",e16405a9ad4d5602695b984542f06f0371172419,"private com.google.gerrit.server.group.InternalGroup createGroupInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroupName gn = new com.google.gerrit.reviewdb.client.AccountGroupName(groupCreation.getNameKey(), groupCreation.getId()); db.accountGroupNames().insert(com.google.common.collect.ImmutableList.of(gn)); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupsUpdate.createAccountGroup(groupCreation); com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult updateResult = updateGroupInReviewDb(db, group, groupUpdate); return com.google.gerrit.server.group.InternalGroup.create(group, updateResult.getModifiedMembers(), updateResult.getModifiedSubgroups(), updateResult.getRefState()); }",6d01cb2262fb3178376ade1fd200f58f1522e7a1,"private com.google.gerrit.server.group.InternalGroup createGroupInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroupName gn = new com.google.gerrit.reviewdb.client.AccountGroupName(groupCreation.getNameKey(), groupCreation.getId()); db.accountGroupNames().insert(com.google.common.collect.ImmutableList.of(gn)); java.sql.Timestamp createdOn = groupUpdate.getUpdatedOn().orElseGet(TimeUtil::nowTs); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupsUpdate.createAccountGroup(groupCreation, createdOn); com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult updateResult = updateGroupInReviewDb(db, group, groupUpdate); return com.google.gerrit.server.group.InternalGroup.create(group, updateResult.getAddedMembers(), updateResult.getAddedSubgroups(), updateResult.getRefState()); }",4a8da05e13db4700a7604e6cc312b02872bf35fd,2018-03-21 09:20:01,3
158950,src_main_java_com_googlesource_gerrit_plugins_lfs_fs_LfsFsRequestAuthorizer.java,@java.lang.Override protected java.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token) { java.util.List<java.lang.String> values = new java.util.ArrayList<>(3); values.add(token.operation); values.add(token.id.getName()); values.add(token.expiresAt); return values; },3dfdca626232f117d5eee3c7ccf5a0996c6d91d0,@java.lang.Override protected java.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token) { java.util.List<java.lang.String> values = new java.util.ArrayList<>(3); values.add(token.operation); values.add(token.id.getName()); values.add(token.expiresAt()); values.add(java.lang.String.valueOf(token.expiresIn)); return values; },8c340f49df61564e2d9e82144ff71d2c7eb010dc,@java.lang.Override protected java.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token) { java.util.List<java.lang.String> values = new java.util.ArrayList<>(3); values.add(token.operation); values.add(token.id.getName()); values.add(com.googlesource.gerrit.plugins.lfs.LfsDateTime.format(token.issued)); values.add(java.lang.String.valueOf(token.expiresIn)); return values; },575637e4a0ec86065f6880f8873a5055630dcd06,2018-03-21 09:45:31,8
158950,src_test_java_com_googlesource_gerrit_plugins_lfs_LfsAuthTokenTest.java,@org.junit.Test public void testTokenSerializationDeserialization() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor processor = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor(cipher); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(0); java.lang.String serialized = processor.serialize(token); assertThat(serialized).isNotEmpty(); java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> deserialized = processor.deserialize(serialized); assertThat(deserialized.isPresent()).isTrue(); assertThat(token.expiresAt).isEqualTo(deserialized.get().expiresAt); },22d66c79bf23dd0fd1bacd5b79fba1ecc2b91fc3,"@org.junit.Test public void testTokenSerializationDeserialization() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor processor = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor(cipher); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(java.time.Instant.now(), 0); java.lang.String serialized = processor.serialize(token); assertThat(serialized).isNotEmpty(); java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> deserialized = processor.deserialize(serialized); assertThat(deserialized.isPresent()).isTrue(); assertThat(token.expiresAt()).isEqualTo(deserialized.get().expiresAt()); }",4677027f9bdec201b60e7cd869a5b1211823060e,"@org.junit.Test public void testTokenSerializationDeserialization() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor processor = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor(cipher); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(java.time.Instant.now(), 0L); java.lang.String serialized = processor.serialize(token); assertThat(serialized).isNotEmpty(); java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> deserialized = processor.deserialize(serialized); assertThat(deserialized.isPresent()).isTrue(); assertThat(token.issued).isEqualTo(deserialized.get().issued); }",0ea4e0e0390a1f5b8fabcd074d7fd171c4ba3ef2,2018-03-21 09:45:31,8
158950,src_main_java_com_googlesource_gerrit_plugins_lfs_fs_LfsFsRequestAuthorizer.java,"@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size()) != 3) { return java.util.Optional.empty(); } return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(values.get(0), org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values.get(1)), values.get(2))); }",bb3f6db26d1b08f22b3d5905937e24ae52c5b78d,"@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size()) != 4) { return java.util.Optional.empty(); } return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(values.get(0), org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values.get(1)), values.get(2), java.lang.Integer.valueOf(values.get(3)))); }",a8988553952914be24d210b301ae609abe650c0e,"@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size()) != 4) { return java.util.Optional.empty(); } return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(values.get(0), org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values.get(1)), values.get(2), java.lang.Long.valueOf(values.get(3)))); }",503119895dffa6ada1b6f0b7250e74a62d684f23,2018-03-21 09:45:31,8
158950,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsSshRequestAuthorizer.java,@java.lang.Override protected java.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken token) { java.util.List<java.lang.String> values = new java.util.ArrayList<>(4); values.add(token.user); values.add(token.project); values.add(token.operation); values.add(token.expiresAt); return values; },36786d4e2bbf8f1214ba9f2133525253d241203f,@java.lang.Override protected java.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken token) { java.util.List<java.lang.String> values = new java.util.ArrayList<>(4); values.add(token.user); values.add(token.project); values.add(token.operation); values.add(token.expiresAt()); values.add(java.lang.String.valueOf(token.expiresIn)); return values; },460260bbb36345d94480e7568dfd0952add325dd,@java.lang.Override protected java.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken token) { java.util.List<java.lang.String> values = new java.util.ArrayList<>(4); values.add(token.user); values.add(token.project); values.add(token.operation); values.add(com.googlesource.gerrit.plugins.lfs.LfsDateTime.format(token.issued)); values.add(java.lang.String.valueOf(token.expiresIn)); return values; },6ef66d9271248c0a16b44f076ad16437ae577bdd,2018-03-21 09:45:31,8
158950,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsSshRequestAuthorizer.java,"@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size()) != 4) { return java.util.Optional.empty(); } return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(values.get(0), values.get(1), values.get(2), values.get(3))); }",05d3ee9c3a80a6d7e4290d9c24e78025f2796195,"@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size()) != 4) { return java.util.Optional.empty(); } return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(values.get(0), values.get(1), values.get(2), values.get(3), java.lang.Integer.valueOf(values.get(4)))); }",a592dcd12cec7810ca79e2a0183c9d88cc22c0ff,"@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size()) != 5) { return java.util.Optional.empty(); } return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(values.get(0), values.get(1), values.get(2), values.get(3), java.lang.Long.valueOf(values.get(4)))); }",bfa7247409902892e923ca91ddaa6135a3e1fe22,2018-03-21 09:45:31,8
158950,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsSshRequestAuthorizer.java,"com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo generateAuthInfo(com.google.gerrit.server.CurrentUser user, java.lang.String project, java.lang.String operation) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(user.getUserName(), project, operation, expirationSeconds); return new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo(processor.serialize(token), token.expiresAt); }",7af82cc3faae97c54d74a3154aadf58ef84691da,"com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo generateAuthInfo(com.google.gerrit.server.CurrentUser user, java.lang.String project, java.lang.String operation) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(user.getUserName(), project, operation, java.time.Instant.now(), expiresIn); return new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo(processor.serialize(token), token.expiresAt(), token.expiresIn); }",98978f9f67f33dd1ba2f7c9c9637032aec3d65b1,"com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo generateAuthInfo(com.google.gerrit.server.CurrentUser user, java.lang.String project, java.lang.String operation) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(user.getUserName(), project, operation, java.time.Instant.now(), expiresIn); return new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo(processor.serialize(token), token.issued, token.expiresIn); }",5aec1f672e5c379965a279664184850da71e83f4,2018-03-21 09:45:31,8
158950,src_main_java_com_googlesource_gerrit_plugins_lfs_fs_LfsFsRequestAuthorizer.java,"public com.googlesource.gerrit.plugins.lfs.AuthInfo generateAuthInfo(java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id, int expirationSeconds) { com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token = new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(operation, id, expirationSeconds); return new com.googlesource.gerrit.plugins.lfs.AuthInfo(processor.serialize(token), token.expiresAt); }",35b14f7cc74a82106af42defd5e357552fc5a1df,"public com.googlesource.gerrit.plugins.lfs.AuthInfo generateAuthInfo(java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id, java.time.Instant now, int expiresIn) { com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token = new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(operation, id, now, expiresIn); return new com.googlesource.gerrit.plugins.lfs.AuthInfo(processor.serialize(token), token.expiresAt(), token.expiresIn); }",fbef7b76b742ee89d16b69551665ff19832ac1c6,"public com.googlesource.gerrit.plugins.lfs.AuthInfo generateAuthInfo(java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id, java.time.Instant now, java.lang.Long expiresIn) { com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token = new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(operation, id, now, expiresIn); return new com.googlesource.gerrit.plugins.lfs.AuthInfo(processor.serialize(token), token.issued, token.expiresIn); }",05d27213797f69eed35f13c3677d1de9a28b39fd,2018-03-21 09:45:31,8
158950,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsAuthToken.java,static boolean onTime(java.lang.String dateTime) { return (com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMAT.now().compareTo(dateTime)) <= 0; },38f0aaa1af88381d133c1a3dd6a2636a8fea6442,public boolean onTime(java.time.Instant when) { return when.isBefore(token.issued.plusMillis(token.expiresIn)); },a3e1063dc011bfac3b9cad39d3a34105bd479657,public boolean onTime(java.time.Instant when) { return when.isBefore(token.issued.plusSeconds(token.expiresIn)); },620f8722308ff950566f3d52a820e9393293c2a6,2018-03-21 09:45:31,8
158950,src_test_java_com_googlesource_gerrit_plugins_lfs_LfsAuthTokenTest.java,@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> createToken(java.util.List<java.lang.String> values) { return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values.get(0))); },b095462119d9098fcc30a845b3a6894ce00e15fb,"@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> createToken(java.util.List<java.lang.String> values) { return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values.get(0), java.lang.Integer.valueOf(values.get(1)))); }",da45a04ac34effe03704f5ef0e75eb59d90a499a,"@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> createToken(java.util.List<java.lang.String> values) { return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values.get(0), java.lang.Long.valueOf(values.get(1)))); }",4380ab0147e29b66787adb56a7966358b6d71478,2018-03-21 09:45:31,8
158950,src_test_java_com_googlesource_gerrit_plugins_lfs_LfsAuthTokenTest.java,@org.junit.Test public void testTokenOnTime() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(1); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier(token); assertThat(verifier.verify()).isTrue(); },d7d558c69e33060cbf693ea7f5d9f8f763c29ecb,"@org.junit.Test public void testTokenOnTime() throws java.lang.Exception { java.time.Instant when = java.time.Instant.now(); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier(token); assertThat(verifier.onTime(when.plusMillis(999))).isTrue(); }",2b33ccb132b28186966a00ab4e16ef1096ac287d,"@org.junit.Test public void testTokenOnTime() throws java.lang.Exception { java.time.Instant when = java.time.Instant.now(); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(when, 1L); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier(token); assertThat(verifier.onTime(when.plusMillis(999))).isTrue(); }",6db2e35cae3992dd9b157e9d321ea6d8f36911fc,2018-03-21 09:45:31,8
158950,src_test_java_com_googlesource_gerrit_plugins_lfs_LfsAuthTokenTest.java,@java.lang.Override protected java.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token) { java.util.List<java.lang.String> values = new java.util.ArrayList<>(2); values.add(token.expiresAt); return values; },1de826e5f158af5b74bef200970c9b30865b8e8c,@java.lang.Override protected java.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token) { java.util.List<java.lang.String> values = new java.util.ArrayList<>(2); values.add(token.expiresAt()); values.add(java.lang.String.valueOf(token.expiresIn)); return values; },29e209a2e5a6ab288b13bc533864577661084571,@java.lang.Override protected java.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token) { java.util.List<java.lang.String> values = new java.util.ArrayList<>(2); values.add(com.googlesource.gerrit.plugins.lfs.LfsDateTime.format(token.issued)); values.add(java.lang.String.valueOf(token.expiresIn)); return values; },5128d4ed7f97547fea0ed250cadda0e18051a30b,2018-03-21 09:45:31,8
158950,src_test_java_com_googlesource_gerrit_plugins_lfs_LfsAuthTokenTest.java,@org.junit.Test public void testTokenExpired() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken((-1)); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier(token); assertThat(verifier.verify()).isFalse(); },1fb4bdc5cbf26f896f2d1835b2e858bcd7ce9c3d,"@org.junit.Test public void testTokenExpired() throws java.lang.Exception { java.time.Instant when = java.time.Instant.now(); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier(token); assertThat(verifier.onTime(when.plusMillis(1001))).isFalse(); }",59de6c59096f3201ddc3dbf91760e9bf55ae2d62,"@org.junit.Test public void testTokenExpired() throws java.lang.Exception { java.time.Instant when = java.time.Instant.now(); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(when, 1L); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier(token); assertThat(verifier.onTime(when.plusMillis(1001))).isFalse(); }",1c887cc3366b5afffe2f06ae398eab30c8306885,2018-03-21 09:45:31,8
158950,src_test_java_com_googlesource_gerrit_plugins_lfs_fs_LfsFsRequestAuthorizerTest.java,"@org.junit.Test public void testVerifyAuthInfo() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo(""o"", zeroId(), 1); assertThat(auth.verifyAuthInfo(info.authToken, ""o"", zeroId())).isTrue(); }",45efa249cad13bb6a37d554dbf5f13459d4bed89,"@org.junit.Test public void testVerifyAuthInfo() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo(""o"", zeroId(), java.time.Instant.now(), 1); assertThat(auth.verifyAuthInfo(info.authToken, ""o"", zeroId())).isTrue(); }",96caade0a24d18275923c8a3ddc9681466fed695,"@org.junit.Test public void testVerifyAuthInfo() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo(""o"", zeroId(), java.time.Instant.now(), 1L); assertThat(auth.verifyAuthInfo(info.authToken(), ""o"", zeroId())).isTrue(); }",23982b29bff5123081fbb29cecb59186f688924c,2018-03-21 09:45:31,8
158950,src_test_java_com_googlesource_gerrit_plugins_lfs_fs_LfsFsRequestAuthorizerTest.java,"@org.junit.Test public void testVerifyAgainstDifferentOperation() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo(""o"", zeroId(), 1); assertThat(auth.verifyAuthInfo(info.authToken, ""p"", zeroId())).isFalse(); }",6c8e1c052c1d6186089b1ec9e0507e4142bc4880,"@org.junit.Test public void testVerifyAgainstDifferentOperation() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo(""o"", zeroId(), java.time.Instant.now(), 1); assertThat(auth.verifyAuthInfo(info.authToken, ""p"", zeroId())).isFalse(); }",e0906bf198f3aad4662ea2857a2f49f4890bb37b,"@org.junit.Test public void testVerifyAgainstDifferentOperation() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo(""o"", zeroId(), java.time.Instant.now(), 1L); assertThat(auth.verifyAuthInfo(info.authToken(), ""p"", zeroId())).isFalse(); }",9e45093e79a481997dcc486e393701720be77a5d,2018-03-21 09:45:31,8
158950,src_test_java_com_googlesource_gerrit_plugins_lfs_fs_LfsFsRequestAuthorizerTest.java,"@org.junit.Test public void testVerifyAgainstDifferentObjectId() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo(""o"", zeroId(), 1); assertThat(auth.verifyAuthInfo(info.authToken, ""o"", org.eclipse.jgit.lfs.lib.LongObjectId.fromString((""123456789012345678901234567890"" + (""123456789012345678901234567890"" + ""1234""))))).isFalse(); }",5342acb9b8987a42c0d2ee3e643fa14c5dfadc65,"@org.junit.Test public void testVerifyAgainstDifferentObjectId() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo(""o"", zeroId(), java.time.Instant.now(), 1); assertThat(auth.verifyAuthInfo(info.authToken, ""o"", org.eclipse.jgit.lfs.lib.LongObjectId.fromString((""123456789012345678901234567890"" + (""123456789012345678901234567890"" + ""1234""))))).isFalse(); }",5497e2b754014333d84db3dde3749b596313b105,"@org.junit.Test public void testVerifyAgainstDifferentObjectId() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo(""o"", zeroId(), java.time.Instant.now(), 1L); assertThat(auth.verifyAuthInfo(info.authToken(), ""o"", org.eclipse.jgit.lfs.lib.LongObjectId.fromString((""123456789012345678901234567890"" + (""123456789012345678901234567890"" + ""1234""))))).isFalse(); }",ceda822178c843ba8e0b5265f83f110454a4dfc2,2018-03-21 09:45:31,8
167030,src_main_java_com_googlesource_gerrit_plugins_webhooks_PostTask.java,private boolean isRecoverable(java.io.IOException e) { return !(e instanceof javax.net.ssl.SSLException); },b3bc6fb8bf3521d6d3d631cd5f04e67c46ff10ae,private boolean isRecoverable(java.lang.Exception e) { return (!(e instanceof javax.net.ssl.SSLException)) && (e instanceof java.io.IOException); },d24ac04199f7711363f336c2d69ecb84faf98bbe,private boolean isRecoverable(java.lang.Throwable e) { return (e instanceof java.io.IOException) && (!(e instanceof javax.net.ssl.SSLException)); },6883a61af726e0f35ad98a1e4451f59a5d39b17e,2018-03-21 17:08:06,6
167030,src_main_java_com_googlesource_gerrit_plugins_webhooks_PostTask.java,"@java.lang.Override public void run() { try { java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug(""No content. Webhook [{}] skipped."", remote.getUrl()); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.get().post(remote, content.get()); if ((!(result.successful)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error(""Failed to post: {}"", toString(), e); } } }",579b044e922b606207ed42fe30ed219d4484a8e2,"@java.lang.Override public void run() { try { java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug(""No content. Webhook [{}] skipped."", remote.getUrl()); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.get().post(remote, content.get()); if ((!(result.successful)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.lang.RuntimeException | java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error(""Failed to post: {}"", toString(), e); } } }",8bf91f0b24f240f841572a7505923850bd482d36,"@java.lang.Override public void run() { try { java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug(""No content. Webhook [{}] skipped."", remote.getUrl()); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.get().post(remote, content.get()); if ((!(result.successful)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.lang.Throwable e) { if ((isRecoverable(e)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error(""Failed to post: {}"", toString(), e); } } }",2ca273f6e416a52539258bb99336f2f4c6130621,2018-03-21 17:08:06,6
161211,src_main_java_com_googlesource_gerrit_plugins_replication_PushOne.java,"private void createRepository() { org.eclipse.jgit.lib.Ref head = git.exactRef(Constants.HEAD); HEAD((5723.0F - 2.15)); com.google.gerrit.extensions.events.NewProjectCreatedListener.Event event = new com.google.gerrit.extensions.events.NewProjectCreatedListener.Event() { @java.lang.Override public java.lang.String getProjectName() { return projectName.get(); } @java.lang.Override public java.lang.String getHeadName() { return head != null ? head.getTarget().getName() : null; } @java.lang.Override public com.google.gerrit.extensions.api.changes.NotifyHandling getNotify() { return com.google.gerrit.extensions.api.changes.NotifyHandling.NONE; } }; replicationQueue.onNewProjectCreated(event); com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn((""Missing repository created; retry replication to "" + (uri))); }",edec7e707962a27b25b7be669141a2dc904a2b2e,"private void createRepository() { if (pool.isCreateMissingRepos()) { try { org.eclipse.jgit.lib.Ref head = git.exactRef(Constants.HEAD); if (replicationQueue.createProject(projectName, (head != null ? head.getName() : null))) { com.google.gerrit.extensions.events.NewProjectCreatedListener.Event event = new com.google.gerrit.extensions.events.NewProjectCreatedListener.Event() { @java.lang.Override public java.lang.String getProjectName() { return projectName.get(); } @java.lang.Override public java.lang.String getHeadName() { return head != null ? head.getTarget().getName() : null; } @java.lang.Override public com.google.gerrit.extensions.api.changes.NotifyHandling getNotify() { return com.google.gerrit.extensions.api.changes.NotifyHandling.NONE; } }; replicationQueue.onNewProjectCreated(event); pool.reschedule(this, Destination.RetryReason.REPOSITORY_MISSING); } else { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn((""Missing repository could not be created when replicating {}. "" + (""You can only create missing repositories locally, over SSH or when "" + ""using adminUrl in replication.config. See documentation for more information."")), uri); } } catch (java.io.IOException ioe) { stateLog.error(((""Cannot replicate to "" + (uri)) + ""; failed to create missing repository""), ioe, getStatesAsArray()); } } else { stateLog.error(((""Cannot replicate to "" + (uri)) + ""; repository not found""), getStatesAsArray()); } }",7f7ba6827253a9183a240af53780c207e5a97c12,"private void createRepository() { if (pool.isCreateMissingRepos()) { try { org.eclipse.jgit.lib.Ref head = git.exactRef(Constants.HEAD); if (replicationQueue.createProject(projectName, (head != null ? getName(head) : null))) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn(""Missing repository created; retry replication to {}"", uri); pool.reschedule(this, Destination.RetryReason.REPOSITORY_MISSING); } else { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn((""Missing repository could not be created when replicating {}. "" + (""You can only create missing repositories locally, over SSH or when "" + ""using adminUrl in replication.config. See documentation for more information."")), uri); } } catch (java.io.IOException ioe) { stateLog.error(((""Cannot replicate to "" + (uri)) + ""; failed to create missing repository""), ioe, getStatesAsArray()); } } else { stateLog.error(((""Cannot replicate to "" + (uri)) + ""; repository not found""), getStatesAsArray()); } }",b7f7493e676cad1a75a66fc182e43ba2ac55a823,2018-03-22 02:00:32,2
167133,java_com_google_gerrit_server_group_db_GroupBundle.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.util.List<com.google.gerrit.reviewdb.client.AccountGroupById> readAccountGroupSubgroupsFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery((((""SELECT include_uuid"" + ("" FROM account_group_by_id"" + "" WHERE group_id = '"")) + (groupId.get())) + ""'""))) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupById> subgroups = new java.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(rs.getString(1)); subgroups.add(new com.google.gerrit.reviewdb.client.AccountGroupById(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(groupId, includedGroupUuid))); } return subgroups; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format(""Failed to read subgroups of account group %s from ReviewDb"", groupId.get()), e); } }",21264b794ab97019b47b67cd8564beb66ac1a2af,"private static java.util.List<com.google.gerrit.reviewdb.client.AccountGroupById> readAccountGroupSubgroupsFromReviewDb(com.google.gwtorm.jdbc.JdbcSchema jdbcSchema, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = jdbcSchema.getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery((((""SELECT include_uuid"" + ("" FROM account_group_by_id"" + "" WHERE group_id = '"")) + (groupId.get())) + ""'""))) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupById> subgroups = new java.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(rs.getString(1)); subgroups.add(new com.google.gerrit.reviewdb.client.AccountGroupById(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(groupId, includedGroupUuid))); } return subgroups; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format(""Failed to read subgroups of account group %s from ReviewDb"", groupId.get()), e); } }",f7aa25766b189b01f6595159c7cd9967a3a9c7de,2018-03-22 09:09:00,5
167133,java_com_google_gerrit_server_group_db_GroupBundle.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> readAccountGroupMembersFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery((((""SELECT account_id"" + ("" FROM account_group_members"" + "" WHERE group_id = '"")) + (groupId.get())) + ""'""))) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> members = new java.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(rs.getInt(1)); members.add(new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId))); } return members; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format(""Failed to read members of account group %s from ReviewDb"", groupId.get()), e); } }",6aaa60b4733f9a96ed1cfd73ddd230d0a18e9e7e,"private static java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> readAccountGroupMembersFromReviewDb(com.google.gwtorm.jdbc.JdbcSchema jdbcSchema, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = jdbcSchema.getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery((((""SELECT account_id"" + ("" FROM account_group_members"" + "" WHERE group_id = '"")) + (groupId.get())) + ""'""))) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> members = new java.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(rs.getInt(1)); members.add(new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId))); } return members; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format(""Failed to read members of account group %s from ReviewDb"", groupId.get()), e); } }",a6a9a67582fe27df8f57f9b597103993c7963d90,2018-03-22 09:09:00,5
167135,java_com_google_gerrit_server_group_db_GroupBundle.java,"public static com.google.gerrit.server.group.db.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupFromReviewDb(db, groupId); return com.google.gerrit.server.group.db.GroupBundle.create(com.google.gerrit.server.group.db.GroupBundle.Source.REVIEW_DB, group, com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMemberAuditsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupAuditsFromReviewDb(db, groupId)); }",baa2405aa075679ea52217001e482826c3079ca5,"public static com.google.gerrit.server.group.db.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupFromReviewDb(db, groupUuid); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); return com.google.gerrit.server.group.db.GroupBundle.create(com.google.gerrit.server.group.db.GroupBundle.Source.REVIEW_DB, group, com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMemberAuditsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupAuditsFromReviewDb(db, groupId)); }",7c21e88a338cdf31f266c778f248aa7946215959,"public static com.google.gerrit.server.group.db.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { com.google.gwtorm.jdbc.JdbcSchema jdbcSchema = com.google.gerrit.reviewdb.server.ReviewDbWrapper.unwrapJbdcSchema(db); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupFromReviewDb(jdbcSchema, groupUuid); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); return com.google.gerrit.server.group.db.GroupBundle.create(com.google.gerrit.server.group.db.GroupBundle.Source.REVIEW_DB, group, com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMembersFromReviewDb(jdbcSchema, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMemberAuditsFromReviewDb(jdbcSchema, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupsFromReviewDb(jdbcSchema, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupAuditsFromReviewDb(jdbcSchema, groupId)); }",b199e6bfc1d221488062ab04f4067b76123b1c2a,2018-03-22 09:09:00,5
167133,java_com_google_gerrit_server_group_db_GroupBundle.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.google.gerrit.server.group.db.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupFromReviewDb(db, groupId); return com.google.gerrit.server.group.db.GroupBundle.create(com.google.gerrit.server.group.db.GroupBundle.Source.REVIEW_DB, group, com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMemberAuditsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupAuditsFromReviewDb(db, groupId)); }",d238b5f636629dbaa39f42ab218438d3a360cc96,"public com.google.gerrit.server.group.db.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { com.google.gwtorm.jdbc.JdbcSchema jdbcSchema = com.google.gerrit.reviewdb.server.ReviewDbWrapper.unwrapJbdcSchema(db); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupFromReviewDb(jdbcSchema, groupId); return com.google.gerrit.server.group.db.GroupBundle.create(com.google.gerrit.server.group.db.GroupBundle.Source.REVIEW_DB, group, com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMembersFromReviewDb(jdbcSchema, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMemberAuditsFromReviewDb(jdbcSchema, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupsFromReviewDb(jdbcSchema, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupAuditsFromReviewDb(jdbcSchema, groupId)); }",35f7bf6e89234811f74f444be15d14c429b61090,2018-03-22 09:09:00,5
167090,src_test_java_com_ericsson_gerrit_plugins_highavailability_forwarder_ForwardedIndexAccountHandlerTest.java,,,"@org.junit.Test public void shouldSetAndUnsetForwardedContextEvenIfExceptionIsThrown() throws java.lang.Exception { doAnswer(((org.mockito.stubbing.Answer<java.lang.Void>) (( invocation) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw new java.io.IOException(""someMessage""); }))).when(indexerMock).index(id); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); try { handler.index(id, Operation.INDEX); fail(""should have throw an IOException""); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo(""someMessage""); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock).index(id); }",31640718e365a413ead2781946c8cc203d9fd4ed,"@org.junit.Test public void shouldSetAndUnsetForwardedContextEvenIfExceptionIsThrown() throws java.lang.Exception { doAnswer(((org.mockito.stubbing.Answer<java.lang.Void>) (( invocation) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw new java.io.IOException(""someMessage""); }))).when(indexerMock).index(id); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); try { handler.index(id, Operation.INDEX); fail(""should have thrown an IOException""); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo(""someMessage""); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock).index(id); }",c349bf73e3520602c65e1b68e55cb3a896a59105,2018-03-22 12:41:05,6
167090,src_test_java_com_ericsson_gerrit_plugins_highavailability_forwarder_ForwardedIndexAccountHandlerTest.java,,,"@org.junit.Test public void deleteIsNotSupported() throws java.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expectMessage(""Delete from index not supported""); handler.index(Account.Id.parse(""34""), Operation.DELETE); }",21c747423589385b47293f1078ce699159256f4f,"@org.junit.Test public void deleteIsNotSupported() throws java.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expectMessage(""Delete from index not supported""); handler.index(id, Operation.DELETE); }",6e7da710b122a79c824c92718e5841530f33b41d,2018-03-22 12:41:05,6
167090,src_test_java_com_ericsson_gerrit_plugins_highavailability_forwarder_ForwardedIndexAccountHandlerTest.java,,,"@org.junit.Before public void setUp() throws java.lang.Exception { handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexAccountHandler(indexerMock); id = Account.Id.parse(""123""); }",2eff75895d4d17ecd4bf2766c7a8cdbae6467cef,@org.junit.Before public void setUp() throws java.lang.Exception { handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexAccountHandler(indexerMock); id = new com.google.gerrit.reviewdb.client.Account.Id(123); },f5295234e0ed556e0ee7658c3e65857df1bdbfad,2018-03-22 12:41:05,6
167090,src_test_java_com_ericsson_gerrit_plugins_highavailability_forwarder_ForwardedIndexGroupHandlerTest.java,,,"@org.junit.Test public void shouldSetAndUnsetForwardedContextEvenIfExceptionIsThrown() throws java.lang.Exception { doAnswer(((org.mockito.stubbing.Answer<java.lang.Void>) (( invocation) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw new java.io.IOException(""someMessage""); }))).when(indexerMock).index(uuid); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); try { handler.index(uuid, Operation.INDEX); fail(""should have throw an IOException""); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo(""someMessage""); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock).index(uuid); }",7779f3ec5a9513094d1fe612ecfafe833f6ba97f,"@org.junit.Test public void shouldSetAndUnsetForwardedContextEvenIfExceptionIsThrown() throws java.lang.Exception { doAnswer(((org.mockito.stubbing.Answer<java.lang.Void>) (( invocation) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw new java.io.IOException(""someMessage""); }))).when(indexerMock).index(uuid); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); try { handler.index(uuid, Operation.INDEX); fail(""should have thrown an IOException""); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo(""someMessage""); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock).index(uuid); }",8c73038c3acd7f2e1be5e77c591c29df5c95fda9,2018-03-22 12:41:05,6
167090,src_test_java_com_ericsson_gerrit_plugins_highavailability_forwarder_ForwardedIndexGroupHandlerTest.java,,,"@org.junit.Test public void deleteIsNotSupported() throws java.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expectMessage(""Delete from index not supported""); handler.index(AccountGroup.UUID.parse(""34""), Operation.DELETE); }",7b2c3dca4b19fe1326cf79abf29a9cefce63850b,"@org.junit.Test public void deleteIsNotSupported() throws java.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expectMessage(""Delete from index not supported""); handler.index(uuid, Operation.DELETE); }",97557c1725101141b3c6a1368c2d4a1e7db19479,2018-03-22 12:41:05,6
167090,src_test_java_com_ericsson_gerrit_plugins_highavailability_forwarder_ForwardedIndexGroupHandlerTest.java,,,"@org.junit.Before public void setUp() throws java.lang.Exception { handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexGroupHandler(indexerMock); uuid = AccountGroup.UUID.parse(""123""); }",d1aa5b625bf0d348aa9ef4850c60a12fd5018554,"@org.junit.Before public void setUp() throws java.lang.Exception { handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexGroupHandler(indexerMock); uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""123""); }",c9407653a1e423679133e7381d0e2dfff019d36f,2018-03-22 12:41:05,6
167090,src_test_java_com_ericsson_gerrit_plugins_highavailability_forwarder_ForwardedIndexChangeHandlerTest.java,,,"@org.junit.Test public void changeToIndexDoNotExist() throws java.lang.Exception { setupChangeAccessRelatedMocks(com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexChangeHandlerTest.CHANGE_DOES_NOT_EXIST); handler.index(id, Operation.INDEX); verify(indexerMock, times(1)).delete(id); }",118aec2957de76edc9cdea4ceb1c3a087a9e943d,"@org.junit.Test public void changeToIndexDoesNotExist() throws java.lang.Exception { setupChangeAccessRelatedMocks(com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexChangeHandlerTest.CHANGE_DOES_NOT_EXIST); handler.index(id, Operation.INDEX); verify(indexerMock, times(1)).delete(id); }",962da01fa9f6a17a4a646140219da6d099ce7995,2018-03-22 12:41:05,6
167090,src_test_java_com_ericsson_gerrit_plugins_highavailability_forwarder_ForwardedIndexChangeHandlerTest.java,,,"@org.junit.Test public void shouldSetAndUnsetForwardedContextEvenIfExceptionIsThrown() throws java.lang.Exception { setupChangeAccessRelatedMocks(com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexChangeHandlerTest.CHANGE_EXISTS); doAnswer(((org.mockito.stubbing.Answer<java.lang.Void>) (( invocation) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw new java.io.IOException(""someMessage""); }))).when(indexerMock).index(dbMock, change); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); try { handler.index(id, Operation.INDEX); fail(""should have throw an IOException""); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo(""someMessage""); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock, times(1)).index(dbMock, change); }",765dfd15ebf5184c16120154e9334eb5e4766c2b,"@org.junit.Test public void shouldSetAndUnsetForwardedContextEvenIfExceptionIsThrown() throws java.lang.Exception { setupChangeAccessRelatedMocks(com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexChangeHandlerTest.CHANGE_EXISTS); doAnswer(((org.mockito.stubbing.Answer<java.lang.Void>) (( invocation) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw new java.io.IOException(""someMessage""); }))).when(indexerMock).index(dbMock, change); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); try { handler.index(id, Operation.INDEX); fail(""should have thrown an IOException""); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo(""someMessage""); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock, times(1)).index(dbMock, change); }",718615a4f87e710856c288eafc695faee7ef2726,2018-03-22 12:41:05,6
167090,src_test_java_com_ericsson_gerrit_plugins_highavailability_forwarder_ForwardedIndexChangeHandlerTest.java,,,"private void setupChangeAccessRelatedMocks(boolean changeExist, boolean ormException, boolean ioException) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (ormException) { doThrow(new com.google.gwtorm.server.OrmException("""")).when(schemaFactoryMock).open(); } else { when(schemaFactoryMock.open()).thenReturn(dbMock); com.google.gerrit.reviewdb.server.ChangeAccess ca = mock(com.google.gerrit.reviewdb.server.ChangeAccess.class); when(dbMock.changes()).thenReturn(ca); if (changeExist) { when(ca.get(id)).thenReturn(change); if (ioException) { doThrow(new java.io.IOException(""io-error"")).when(indexerMock).index(dbMock, change); } } else { when(ca.get(id)).thenReturn(null); } } }",7547ae92d4f3c9ab5e5e4754bb8621771f08de27,"private void setupChangeAccessRelatedMocks(boolean changeExists, boolean ormException, boolean ioException) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (ormException) { doThrow(new com.google.gwtorm.server.OrmException("""")).when(schemaFactoryMock).open(); } else { when(schemaFactoryMock.open()).thenReturn(dbMock); com.google.gerrit.reviewdb.server.ChangeAccess ca = mock(com.google.gerrit.reviewdb.server.ChangeAccess.class); when(dbMock.changes()).thenReturn(ca); if (changeExists) { when(ca.get(id)).thenReturn(change); if (ioException) { doThrow(new java.io.IOException(""io-error"")).when(indexerMock).index(dbMock, change); } } else { when(ca.get(id)).thenReturn(null); } } }",a7ca9dfeb2b3c95d14ef61aba1ba920c9bf53976,2018-03-22 12:41:05,6
167090,src_test_java_com_ericsson_gerrit_plugins_highavailability_forwarder_ForwardedIndexChangeHandlerTest.java,,,"@org.junit.Before public void setUp() throws java.lang.Exception { when(schemaFactoryMock.open()).thenReturn(dbMock); when(dbMock.changes()).thenReturn(changeAccessMock); id = Change.Id.parse(""123""); change = new com.google.gerrit.reviewdb.client.Change(null, id, null, null, com.google.gerrit.common.TimeUtil.nowTs()); handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexChangeHandler(indexerMock, schemaFactoryMock); }",f131f695ba92259bb58dd723a997d778ae5c30e3,"@org.junit.Before public void setUp() throws java.lang.Exception { when(schemaFactoryMock.open()).thenReturn(dbMock); when(dbMock.changes()).thenReturn(changeAccessMock); id = new com.google.gerrit.reviewdb.client.Change.Id(123); change = new com.google.gerrit.reviewdb.client.Change(null, id, null, null, com.google.gerrit.common.TimeUtil.nowTs()); handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexChangeHandler(indexerMock, schemaFactoryMock); }",2d8310190c60c828c5b715bdfb58cbc9b9dd467b,2018-03-22 12:41:05,6
167673,java_com_google_gerrit_server_mail_send_NotificationEmail.java,"@java.lang.Override protected void setupSoyContext() { super.setupSoyContext(); java.lang.String projectName = branch.getParentKey().get(); soyContext.put(""projectName"", projectName); soyContext.put(""shortProjectName"", projectName.replaceAll(""/.*/"", ""..."")); soyContextEmailData.put(""sshHost"", getSshHost()); java.util.Map<java.lang.String, java.lang.String> branchData = new java.util.HashMap<>(); branchData.put(""shortName"", branch.getShortName()); soyContext.put(""branch"", branchData); footers.add(((MailHeader.PROJECT.withDelimiter()) + (branch.getParentKey().get()))); footers.add((""Gerrit-Branch: "" + (branch.getShortName()))); }",4170f71855cf120c719ad4ef844f395f76863740,"@java.lang.Override protected void setupSoyContext() { super.setupSoyContext(); java.lang.String projectName = branch.getParentKey().get(); soyContext.put(""projectName"", projectName); soyContext.put(""shortProjectName"", projectName.replaceAll(""/.*/"", ""..."")); java.lang.String prefix = """"; if ((args.addInstanceNameInSubject) && ((args.instanceNameProvider) != null)) { prefix = (com.google.common.base.Strings.nullToEmpty(args.instanceNameProvider.get())) + ""/""; } soyContext.put(""instanceAndProjectName"", (prefix + (soyContext.get(""shortProjectName"")))); soyContextEmailData.put(""sshHost"", getSshHost()); java.util.Map<java.lang.String, java.lang.String> branchData = new java.util.HashMap<>(); branchData.put(""shortName"", branch.getShortName()); soyContext.put(""branch"", branchData); footers.add(((MailHeader.PROJECT.withDelimiter()) + (branch.getParentKey().get()))); footers.add((""Gerrit-Branch: "" + (branch.getShortName()))); }",d793119b3a869e96cedba9188dc0c735475b8459,"@java.lang.Override protected void setupSoyContext() { super.setupSoyContext(); java.lang.String projectName = branch.getParentKey().get(); soyContext.put(""projectName"", projectName); soyContext.put(""shortProjectName"", projectName.replaceAll(""/.*/"", ""..."")); soyContext.put(""instanceAndProjectName"", com.google.gerrit.server.mail.send.NotificationEmail.getInstanceAndProjectName(args.instanceNameProvider.get(), projectName)); soyContext.put(""addInstanceNameInSubject"", args.addInstanceNameInSubject); soyContextEmailData.put(""sshHost"", getSshHost()); java.util.Map<java.lang.String, java.lang.String> branchData = new java.util.HashMap<>(); branchData.put(""shortName"", branch.getShortName()); soyContext.put(""branch"", branchData); footers.add(((MailHeader.PROJECT.withDelimiter()) + (branch.getParentKey().get()))); footers.add((""Gerrit-Branch: "" + (branch.getShortName()))); }",59722ac4fa78d339768957a472119c19e497684e,2018-03-23 10:47:02,8
167673,java_com_google_gerrit_server_config_GerritInstanceNameProvider.java,,,"private java.lang.String getInstanceName(org.eclipse.jgit.lib.Config config, @com.google.gerrit.common.Nullable com.google.inject.Provider<java.lang.String> canonicalUrlProvider) { java.lang.String instanceName = config.getString(""gerrit"", null, ""shortName""); if ((instanceName != null) || (canonicalUrlProvider == null)) { return instanceName; } return canonicalUrlProvider.get(); }",c1fe063859a44249ca96414a1a60e97e8018f7e1,"private java.lang.String getInstanceName(org.eclipse.jgit.lib.Config config, @com.google.gerrit.common.Nullable com.google.inject.Provider<java.lang.String> canonicalUrlProvider) { java.lang.String instanceName = config.getString(""gerrit"", null, ""instanceName""); if ((instanceName != null) || (canonicalUrlProvider == null)) { return instanceName; } return canonicalUrlProvider.get(); }",d5306eff8e9f5dfd2cc614725390e439a1d0a4a0,2018-03-23 10:47:02,8
167673,java_com_google_gerrit_server_mail_send_OutgoingEmail.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private java.lang.String getInstanceName() { java.lang.System.out.println(args.instanceNameProvider); java.lang.System.out.println(args.instanceNameProvider.get()); return args.instanceNameProvider.get(); },3bd2e5c87cda18ac3c6370def56580baeb4bd33d,private java.lang.String getInstanceName() { return args.instanceNameProvider.get(); },11dbde24afd621aa3e24922996dc443b3df69f46,2018-03-23 10:47:02,8
168050,java_com_google_gerrit_server_restapi_change_SetWorkInProgress.java,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set work in progress""); } if ((change.getStatus()) != (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""change is "" + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is already work in progress""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""""); } }",e371a78788c7f905f17ad0dbf9fa81ffd476dd6f,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { if (!(permissionBackend.user(self).test(GlobalPermission.ADMINISTRATE_SERVER))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set work in progress""); } } if ((change.getStatus()) != (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""change is "" + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is already work in progress""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""""); } }",d2b212e893f09aeb239014ba77356cf9e65f266a,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if ((!(rsrc.isUserOwner())) && (!(permissionBackend.user(self).test(GlobalPermission.ADMINISTRATE_SERVER)))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set work in progress""); } if ((change.getStatus()) != (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""change is "" + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is already work in progress""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""""); } }",506069508469a9bae1a193eb5e533a07d273ffec,2018-03-23 13:49:49,2
168050,java_com_google_gerrit_server_restapi_change_SetReadyForReview.java,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set ready for review""); } if ((change.getStatus()) != (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""change is "" + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (!(change.isWorkInProgress())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is not work in progress""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(false, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""""); } }",4cca7b1a38ee836a93c71ba051e26bb6403fb481,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { if (!(permissionBackend.user(self).test(GlobalPermission.ADMINISTRATE_SERVER))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set ready for review""); } } if ((change.getStatus()) != (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""change is "" + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (!(change.isWorkInProgress())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is not work in progress""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(false, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""""); } }",e82b7552691eb1f412285b33915c810f41b39cf3,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if ((!(rsrc.isUserOwner())) && (!(permissionBackend.user(self).test(GlobalPermission.ADMINISTRATE_SERVER)))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set ready for review""); } if ((change.getStatus()) != (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""change is "" + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (!(change.isWorkInProgress())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is not work in progress""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(false, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""""); } }",9b11320e87b1823100892bd03d9a7b65fdcfd49e,2018-03-23 13:49:49,2
93475,gerrit-elasticsearch_src_main_java_com_google_gerrit_elasticsearch_ElasticQueryBuilder.java,"protected <T> org.elasticsearch.index.query.QueryBuilder toQueryBuilder(com.google.gerrit.server.query.Predicate<T> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.OrPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return fieldQuery(((com.google.gerrit.server.index.IndexPredicate<T>) (p))); } else { throw new com.google.gerrit.server.query.QueryParseException((""cannot create query for index: "" + p)); } }",ab33faec3972b0c34b7aca599677b7cc8b1a6c47,"protected <T> org.elasticsearch.index.query.QueryBuilder toQueryBuilder(com.google.gerrit.server.query.Predicate<T> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.OrPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return fieldQuery(((com.google.gerrit.server.index.IndexPredicate<T>) (p))); } else if (p instanceof com.google.gerrit.server.query.AnyPredicate) { return org.elasticsearch.index.query.QueryBuilders.matchAllQuery(); } else { throw new com.google.gerrit.server.query.QueryParseException((""cannot create query for index: "" + p)); } }",9eafc48ac5d4a8cfa758f9926cc0024a95a4b058,"protected <T> org.elasticsearch.index.query.QueryBuilder toQueryBuilder(com.google.gerrit.server.query.Predicate<T> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.OrPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return fieldQuery(((com.google.gerrit.server.index.IndexPredicate<T>) (p))); } else if (p instanceof com.google.gerrit.server.query.PostFilterPredicate) { return org.elasticsearch.index.query.QueryBuilders.matchAllQuery(); } else { throw new com.google.gerrit.server.query.QueryParseException((""cannot create query for index: "" + p)); } }",71b9e72b1ebe7f1feacccef9a6674eb96992f7c2,2018-03-25 09:06:52,4
93475,gerrit-lucene_src_main_java_com_google_gerrit_lucene_QueryBuilder.java,"public org.apache.lucene.search.Query toQuery(com.google.gerrit.server.query.Predicate<V> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.OrPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return fieldQuery(((com.google.gerrit.server.index.IndexPredicate<V>) (p))); } else { throw new com.google.gerrit.server.query.QueryParseException((""cannot create query for index: "" + p)); } }",c473319de6491217af585fa604788d41cb44f671,"public org.apache.lucene.search.Query toQuery(com.google.gerrit.server.query.Predicate<V> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.OrPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return fieldQuery(((com.google.gerrit.server.index.IndexPredicate<V>) (p))); } else if (p instanceof com.google.gerrit.server.query.AnyPredicate) { return new org.apache.lucene.search.MatchAllDocsQuery(); } else { throw new com.google.gerrit.server.query.QueryParseException((""cannot create query for index: "" + p)); } }",1aae9ef31fb03692c0b250b7755508c261f6c92c,"public org.apache.lucene.search.Query toQuery(com.google.gerrit.server.query.Predicate<V> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.OrPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return fieldQuery(((com.google.gerrit.server.index.IndexPredicate<V>) (p))); } else if (p instanceof com.google.gerrit.server.query.PostFilterPredicate) { return new org.apache.lucene.search.MatchAllDocsQuery(); } else { throw new com.google.gerrit.server.query.QueryParseException((""cannot create query for index: "" + p)); } }",61b5f9f014937bec8f8a5fa71edb56c53a4b6508,2018-03-25 09:06:52,4
93475,gerrit-server_src_main_java_com_google_gerrit_server_index_account_IndexedAccountQuery.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public boolean match(com.google.gerrit.server.account.AccountState accountState) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.Predicate<com.google.gerrit.server.account.AccountState> pred = getChild(0); checkState(pred.isMatchable(), (""match invoked, but child predicate %s "" + ""doesn't implement %s""), pred, com.google.gerrit.server.query.Matchable.class.getName()); return pred.asMatchable().match(accountState); }",5e2e330ad2aedb7790a4ccace6c4d48767d0b3ae,"@java.lang.Override public boolean match(com.google.gerrit.server.account.AccountState accountState) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.Predicate<com.google.gerrit.server.account.AccountState> pred = getChild(0); checkState(pred.isMatchable(), ""match invoked, but child predicate %s doesn't implement %s"", pred, com.google.gerrit.server.query.Matchable.class.getName()); return pred.asMatchable().match(accountState); }",db313e82e783be7097c7a4264ce26a01e6cf469c,2018-03-25 09:06:52,4
168398,java_com_google_gerrit_sshd_commands_UploadArchive.java,"private boolean canRead(org.eclipse.jgit.lib.ObjectId revId) throws com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { try { permissionBackend.user(user).project(projectName).check(ProjectPermission.READ); return true; } catch (com.google.gerrit.extensions.restapi.AuthException e) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(revId); return commits.canRead(projectState, repo, commit); } } }",bed4af4e431a755366eb4ca7a0d0f561293157ac,"private boolean canRead(org.eclipse.jgit.lib.ObjectId revId) throws com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { try { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectName); checkNotNull(projectState, ""Failed to load project %s"", projectName); projectState.checkStatePermitsRead(); permissionBackend.user(user).project(projectName).check(ProjectPermission.READ); return true; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.extensions.restapi.ResourceConflictException e) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(revId); return commits.canRead(projectState, repo, commit); } } }",84cfba87dff7817cea1ecd146ecfc37046908e87,"private boolean canRead(org.eclipse.jgit.lib.ObjectId revId) throws com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectName); checkNotNull(projectState, ""Failed to load project %s"", projectName); if (!(projectState.statePermitsRead())) { return false; } try { permissionBackend.user(user).project(projectName).check(ProjectPermission.READ); return true; } catch (com.google.gerrit.extensions.restapi.AuthException e) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(revId); return commits.canRead(projectState, repo, commit); } } }",f9cc6564b09938f61593380289f4f184756eea5f,2018-03-26 15:40:25,4
166630,javatests_com_google_gerrit_common_data_LabelFunctionTest.java,,,@org.junit.Test public void checkMaxWorks() { com.google.gerrit.common.data.LabelFunctionTest.checkMaxIsEnforced(LabelFunction.MAX_NO_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkMaxIsEnforced(LabelFunction.MAX_WITH_BLOCK); checkMaxValidatesTheLabel(LabelFunction.MAX_NO_BLOCK); checkMaxValidatesTheLabel(LabelFunction.MAX_WITH_BLOCK); },2e4e7e3b7b11c61c7d2375615fdd1f6a2ddd1e14,@org.junit.Test public void checkMaxWorks() { com.google.gerrit.common.data.LabelFunctionTest.checkMaxIsEnforced(LabelFunction.MAX_NO_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkMaxIsEnforced(LabelFunction.MAX_WITH_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkMaxValidatesTheLabel(LabelFunction.MAX_NO_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkMaxValidatesTheLabel(LabelFunction.MAX_WITH_BLOCK); },0fd18367a575ec363a3c6f180691547b457cdee6,2018-03-27 08:43:44,7
166630,javatests_com_google_gerrit_common_data_LabelFunctionTest.java,,,"private static void checkLabelIsRequired(com.google.gerrit.common.data.LabelFunction function) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.NEED); assertThat(myLabel.appliedBy).isNull(); }",30620595c8177010fd43f3251d6c5f80cf5bab6a,"private static void checkLabelIsRequired(com.google.gerrit.common.data.LabelFunction function) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, com.google.common.collect.ImmutableList.of()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.NEED); assertThat(myLabel.appliedBy).isNull(); }",3f37f4aa7e252da9c60e58b63d2516f7061d8672,2018-03-27 08:43:44,7
166630,javatests_com_google_gerrit_common_data_LabelFunctionTest.java,,,"private static void checkMaxIsEnforced(com.google.gerrit.common.data.LabelFunction function) { java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_1, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_0); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.NEED); }",2186ded6991068cc4208eda771328ef27f973a3f,"private static void checkMaxIsEnforced(com.google.gerrit.common.data.LabelFunction function) { java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.ImmutableList.of(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_1, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_0); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.NEED); }",5b673d98877a69f324a142df1be36e858ce80ca0,2018-03-27 08:43:44,7
166630,javatests_com_google_gerrit_common_data_LabelFunctionTest.java,,,"@org.junit.Test public void checkMaxNoBlockIgnoresMin() { java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2); com.google.gerrit.common.data.SubmitRecord.Label myLabel = LabelFunction.MAX_NO_BLOCK.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.OK); assertThat(myLabel.appliedBy).isEqualTo(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2.getAccountId()); }",7ffff265102c479a8ac3d7e922745ebf1495d8a3,"@org.junit.Test public void checkMaxNoBlockIgnoresMin() { java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.ImmutableList.of(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2); com.google.gerrit.common.data.SubmitRecord.Label myLabel = LabelFunction.MAX_NO_BLOCK.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.OK); assertThat(myLabel.appliedBy).isEqualTo(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2.getAccountId()); }",41b38c3a7150409a77f17dd05654ebe8b8c2be21,2018-03-27 08:43:44,7
166630,javatests_com_google_gerrit_common_data_LabelFunctionTest.java,,,"private static com.google.gerrit.reviewdb.client.PatchSetApproval makeApproval(short value) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id((10000 + value)); com.google.gerrit.reviewdb.client.PatchSetApproval.Key key = com.google.gerrit.common.data.LabelFunctionTest.makeKey(com.google.gerrit.common.data.LabelFunctionTest.PS_ID, accountId, com.google.gerrit.common.data.LabelFunctionTest.LABEL_ID); return new com.google.gerrit.reviewdb.client.PatchSetApproval(key, value, java.sql.Date.from(java.time.Instant.now())); }",875ae10c3dd6c7af73ee6ece9d0b018b2598d54f,"private static com.google.gerrit.reviewdb.client.PatchSetApproval makeApproval(int value) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id((10000 + value)); com.google.gerrit.reviewdb.client.PatchSetApproval.Key key = com.google.gerrit.common.data.LabelFunctionTest.makeKey(com.google.gerrit.common.data.LabelFunctionTest.PS_ID, accountId, com.google.gerrit.common.data.LabelFunctionTest.LABEL_ID); return new com.google.gerrit.reviewdb.client.PatchSetApproval(key, ((short) (value)), java.sql.Date.from(java.time.Instant.now())); }",b4deb4b0e17b26c27f6f430c12d055983e8e12ce,2018-03-27 08:43:44,7
166630,javatests_com_google_gerrit_common_data_LabelFunctionTest.java,,,"@org.junit.Test public void checkLabelNameIsCorrect() { for (com.google.gerrit.common.data.LabelFunction function : com.google.gerrit.common.data.LabelFunction.values()) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, java.util.Collections.emptyList()); assertThat(myLabel.label).isEqualTo(""Verified""); } }",7154516e7c9ccfac3354154d587ea0e97475a21e,"@org.junit.Test public void checkLabelNameIsCorrect() { for (com.google.gerrit.common.data.LabelFunction function : com.google.gerrit.common.data.LabelFunction.values()) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, com.google.common.collect.ImmutableList.of()); assertThat(myLabel.label).isEqualTo(""Verified""); } }",246c2b33d447445ee3877e597cfdd8d3d78ef634,2018-03-27 08:43:44,7
166630,javatests_com_google_gerrit_common_data_LabelFunctionTest.java,,,@org.junit.Test public void checkFunctionDoesNothing() { com.google.gerrit.common.data.LabelFunctionTest.checkNothingHappens(LabelFunction.NO_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkNothingHappens(LabelFunction.NO_OP); com.google.gerrit.common.data.LabelFunctionTest.checkNothingHappens(LabelFunction.PATCH_SET_LOCK); com.google.gerrit.common.data.LabelFunctionTest.checkLabelIsRequired(LabelFunction.ANY_WITH_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkLabelIsRequired(LabelFunction.MAX_WITH_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkLabelIsRequired(LabelFunction.MAX_NO_BLOCK); },d02605b684b52763b827b44266c2e9e749427f7a,@org.junit.Test public void checkFunctionDoesNothing() { com.google.gerrit.common.data.LabelFunctionTest.checkNothingHappens(LabelFunction.NO_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkNothingHappens(LabelFunction.NO_OP); com.google.gerrit.common.data.LabelFunctionTest.checkNothingHappens(LabelFunction.PATCH_SET_LOCK); com.google.gerrit.common.data.LabelFunctionTest.checkNothingHappens(LabelFunction.ANY_WITH_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkLabelIsRequired(LabelFunction.MAX_WITH_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkLabelIsRequired(LabelFunction.MAX_NO_BLOCK); },bff005d646598dea6339296a1f25faf0e86e3fa7,2018-03-27 08:43:44,7
166630,javatests_com_google_gerrit_common_data_LabelFunctionTest.java,,,"private static void checkBlockWorks(com.google.gerrit.common.data.LabelFunction function) { java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_1, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.REJECT); assertThat(myLabel.appliedBy).isEqualTo(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2.getAccountId()); }",ddbf6532c2659ef79f9c316aa5a5a25fe33cffe1,"private static void checkBlockWorks(com.google.gerrit.common.data.LabelFunction function) { java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.ImmutableList.of(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_1, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.REJECT); assertThat(myLabel.appliedBy).isEqualTo(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2.getAccountId()); }",3bca4d4952157c072f8fa0076ca2c91e9910e444,2018-03-27 08:43:44,7
166630,java_com_google_gerrit_common_data_LabelFunction.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean isMaxValueMandatory() { return requiresMaxValue; },12c75fec2ac00a0503030c4b456906237d8e245c,public boolean isMaxValueRequired() { return requiresMaxValue; },3d35b01a47ece5844f48984703a83e4bb3b5b28a,2018-03-27 08:43:44,7
166630,java_com_google_gerrit_common_data_LabelFunction.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public SubmitRecord.Label check(com.google.gerrit.common.data.LabelType t, java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) { com.google.gerrit.common.data.SubmitRecord.Label l = new com.google.gerrit.common.data.SubmitRecord.Label(); l.label = t.getName(); l.status = SubmitRecord.Label.Status.MAY; if (isMandatory) { l.status = SubmitRecord.Label.Status.NEED; } for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvals) { if ((a.getValue()) == 0) { continue; } if ((isBlock) && (t.isMaxNegative(a))) { l.appliedBy = a.getAccountId(); l.status = SubmitRecord.Label.Status.REJECT; return l; } if ((t.isMaxPositive(a)) || (!(requiresMaxValue))) { l.appliedBy = a.getAccountId(); l.status = SubmitRecord.Label.Status.MAY; if (isMandatory) { l.status = SubmitRecord.Label.Status.OK; } } } return l; }",ed41032ff784dac0d3a9f8b00d9eea6e03410236,"public SubmitRecord.Label check(com.google.gerrit.common.data.LabelType labelType, java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) { com.google.gerrit.common.data.SubmitRecord.Label submitRecordLabel = new com.google.gerrit.common.data.SubmitRecord.Label(); submitRecordLabel.label = labelType.getName(); submitRecordLabel.status = SubmitRecord.Label.Status.MAY; if (isRequired) { submitRecordLabel.status = SubmitRecord.Label.Status.NEED; } for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvals) { if ((a.getValue()) == 0) { continue; } if ((isBlock) && (labelType.isMaxNegative(a))) { submitRecordLabel.appliedBy = a.getAccountId(); submitRecordLabel.status = SubmitRecord.Label.Status.REJECT; return submitRecordLabel; } if ((labelType.isMaxPositive(a)) || (!(requiresMaxValue))) { submitRecordLabel.appliedBy = a.getAccountId(); submitRecordLabel.status = SubmitRecord.Label.Status.MAY; if (isRequired) { submitRecordLabel.status = SubmitRecord.Label.Status.OK; } } } return submitRecordLabel; }",7e2b336e02054954e2637519c1b93ae8794b1bad,2018-03-27 08:43:44,7
166630,java_com_google_gerrit_common_data_LabelFunction.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean isMandatory() { return isMandatory; },d4945d75ffb378065a392ea6bf7beba9f41063be,public boolean isRequired() { return isRequired; },826b647dcfabb50c5351a2caf5d7b03d6bbd7cce,2018-03-27 08:43:44,7
166630,javatests_com_google_gerrit_common_data_LabelFunctionTest.java,,,"private void checkMaxValidatesTheLabel(com.google.gerrit.common.data.LabelFunction function) { java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_1, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M1); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.OK); assertThat(myLabel.appliedBy).isEqualTo(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2.getAccountId()); }",b04cb9c79494bea48402ec2d626666fe90f41cf8,"private static void checkMaxValidatesTheLabel(com.google.gerrit.common.data.LabelFunction function) { java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.ImmutableList.of(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_1, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M1); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.OK); assertThat(myLabel.appliedBy).isEqualTo(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2.getAccountId()); }",808127b294ae1c8934f0422f50c14f15895ad09a,2018-03-27 08:43:44,7
166630,java_com_google_gerrit_server_rules_DefaultSubmitRule.java,,,"private static java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> getApprovalsForLabel(java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals, com.google.gerrit.common.data.LabelType t) { return approvals.stream().filter(( input) -> input.getLabel().equals(t.getLabelId().get())).collect(java.util.stream.Collectors.toList()); }",34223f2d775b0915fbef7f54620c14348268c89a,"private static java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> getApprovalsForLabel(java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals, com.google.gerrit.common.data.LabelType t) { return approvals.stream().filter(( input) -> input.getLabel().equals(t.getLabelId().get())).collect(toImmutableList()); }",83892db0d4c3d6755fe7e780a46bd99755dc2cbe,2018-03-27 08:43:44,7
166630,javatests_com_google_gerrit_common_data_LabelFunctionTest.java,,,"private static void checkNothingHappens(com.google.gerrit.common.data.LabelFunction function) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.MAY); assertThat(myLabel.appliedBy).isNull(); }",709d46029239203219e394b8744b118c54b658e6,"private static void checkNothingHappens(com.google.gerrit.common.data.LabelFunction function) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, com.google.common.collect.ImmutableList.of()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.MAY); assertThat(myLabel.appliedBy).isNull(); }",0cae2edacc8602a9b3c8d8a80f2189c7f880809e,2018-03-27 08:43:44,7
168552,java_com_google_gerrit_server_restapi_change_SetReadyForReview.java,"@java.lang.Override public com.google.gerrit.server.restapi.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.restapi.change.Description().setLabel(""Start Review"").setTitle(""Set Ready For Review"").setVisible((((rsrc.isUserOwner()) && ((rsrc.getChange().getStatus()) == (com.google.gerrit.reviewdb.client.Change.Status.NEW))) && (rsrc.getChange().isWorkInProgress()))); }",e664fd73af62b1ed01bb59f4ce765c656fd14e20,"@java.lang.Override public com.google.gerrit.server.restapi.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.restapi.change.Description().setLabel(""Start Review"").setTitle(""Set Ready For Review"").setVisible(and((((rsrc.getChange().getStatus()) == (com.google.gerrit.reviewdb.client.Change.Status.NEW)) && (rsrc.getChange().isWorkInProgress())), or(rsrc.isUserOwner(), permissionBackend.user(self).testCond(GlobalPermission.ADMINISTRATE_SERVER)))); }",6a5940cf367acfae6d2185f61d5fece9e4745ae1,"@java.lang.Override public com.google.gerrit.server.restapi.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.restapi.change.Description().setLabel(""Start Review"").setTitle(""Set Ready For Review"").setVisible(and((((rsrc.getChange().getStatus()) == (com.google.gerrit.reviewdb.client.Change.Status.NEW)) && (rsrc.getChange().isWorkInProgress())), or(rsrc.isUserOwner(), permissionBackend.currentUser().testCond(GlobalPermission.ADMINISTRATE_SERVER)))); }",65f3c77d914f58c205c41c183d23d9af131dc689,2018-03-27 14:49:54,3
168552,java_com_google_gerrit_server_restapi_change_SetWorkInProgress.java,"@java.lang.Override public com.google.gerrit.server.restapi.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.restapi.change.Description().setLabel(""WIP"").setTitle(""Set Work In Progress"").setVisible((((rsrc.isUserOwner()) && ((rsrc.getChange().getStatus()) == (com.google.gerrit.reviewdb.client.Change.Status.NEW))) && (!(rsrc.getChange().isWorkInProgress())))); }",2b1bc7846451779b704b51bbc5ee70770e05e653,"@java.lang.Override public com.google.gerrit.server.restapi.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.restapi.change.Description().setLabel(""WIP"").setTitle(""Set Work In Progress"").setVisible(and((((rsrc.getChange().getStatus()) == (com.google.gerrit.reviewdb.client.Change.Status.NEW)) && (!(rsrc.getChange().isWorkInProgress()))), or(rsrc.isUserOwner(), permissionBackend.user(self).testCond(GlobalPermission.ADMINISTRATE_SERVER)))); }",9913f8f239b7f60bcc4bba90778711dbbcd8b5ca,"@java.lang.Override public com.google.gerrit.server.restapi.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.restapi.change.Description().setLabel(""WIP"").setTitle(""Set Work In Progress"").setVisible(and((((rsrc.getChange().getStatus()) == (com.google.gerrit.reviewdb.client.Change.Status.NEW)) && (!(rsrc.getChange().isWorkInProgress()))), or(rsrc.isUserOwner(), permissionBackend.currentUser().testCond(GlobalPermission.ADMINISTRATE_SERVER)))); }",0eb3fe165b2d7e620e41d55c92d827806a849c19,2018-03-27 14:49:54,3
168411,src_main_java_com_googlesource_gerrit_plugins_replication_Destination.java,"private boolean shouldReplicate(final com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { return threadScoper.scope(new java.util.concurrent.Callable<java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (IOException e) { return false; } if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.statePermitsRead())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (PushOne.ALL_REFS.equals(ref)) { return true; } try { permissionBackend.user(userProvider).project(project).ref(ref).check(RefPermission.READ); } catch (AuthException e) { return false; } return true; } }).call(); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format(""source project %s not available"", project), err, states); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); throw new java.lang.RuntimeException(e); } return false; }",dab6f65184d0a2fa5e0478a2943dbd12bc2af656,"private boolean shouldReplicate(final com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { return threadScoper.scope(new java.util.concurrent.Callable<java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (IOException e) { return false; } if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.statePermitsRead())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (PushOne.ALL_REFS.equals(ref)) { return true; } try { permissionBackend.currentUser().project(project).ref(ref).check(RefPermission.READ); } catch (AuthException e) { return false; } return true; } }).call(); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format(""source project %s not available"", project), err, states); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); throw new java.lang.RuntimeException(e); } return false; }",7685fcba89cc3a153ebf8c8358e86e587a87f6d2,"private boolean shouldReplicate(final com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { return threadScoper.scope(new java.util.concurrent.Callable<java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (IOException e) { return false; } if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.statePermitsRead())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (PushOne.ALL_REFS.equals(ref)) { return true; } try { permissionBackend.user(userProvider.get()).project(project).ref(ref).check(RefPermission.READ); } catch (AuthException e) { return false; } return true; } }).call(); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format(""source project %s not available"", project), err, states); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); throw new java.lang.RuntimeException(e); } return false; }",031ebe4099b1fea6adc2477ef167cbd10f259566,2018-03-27 14:50:44,3
168411,src_main_java_com_googlesource_gerrit_plugins_replication_Destination.java,"@java.lang.Override public java.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (IOException e) { return false; } if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.statePermitsRead())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (PushOne.ALL_REFS.equals(ref)) { return true; } try { permissionBackend.user(userProvider).project(project).ref(ref).check(RefPermission.READ); } catch (AuthException e) { return false; } return true; }",3720a95b00ce9b8d421b518796fe4b43eb3b8ea3,"@java.lang.Override public java.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (IOException e) { return false; } if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.statePermitsRead())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (PushOne.ALL_REFS.equals(ref)) { return true; } try { permissionBackend.currentUser().project(project).ref(ref).check(RefPermission.READ); } catch (AuthException e) { return false; } return true; }",81b045e8357956c905f4a5eb381c49dc4b73d6b3,"@java.lang.Override public java.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (IOException e) { return false; } if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.statePermitsRead())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (PushOne.ALL_REFS.equals(ref)) { return true; } try { permissionBackend.user(userProvider.get()).project(project).ref(ref).check(RefPermission.READ); } catch (AuthException e) { return false; } return true; }",d21cc10c2ec037d3e86a19209ce60e8ad7c874bd,2018-03-27 14:50:44,3
160331,java_com_google_gerrit_server_restapi_project_DeleteRef.java,"private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, identifiedUser.get().state()); }",1bae321c32dfef9df04e228f3fdfbe8b75fcc95d,"private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, currentUser.get().state()); }",8469619ba1e2a8c74a1c2bf8bb8a77c4b93e80df,"private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, identifiedUser.get().state()); }",1bae321c32dfef9df04e228f3fdfbe8b75fcc95d,2018-03-27 14:50:44,10
168172,gerrit-server_src_main_java_com_google_gerrit_server_change_SetWorkInProgress.java,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set work in progress""); } if ((change.getStatus()) != (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""change is "" + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is already work in progress""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""""); } }",e371a78788c7f905f17ad0dbf9fa81ffd476dd6f,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if ((!(rsrc.isUserOwner())) && (!(permissionBackend.user(self).test(GlobalPermission.ADMINISTRATE_SERVER)))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set work in progress""); } if ((change.getStatus()) != (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""change is "" + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is already work in progress""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""""); } }",476d16aa1ed30929ea964b4d84f3e415db5977fb,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if ((!(rsrc.isUserOwner())) && (!(permissionBackend.user(self).test(GlobalPermission.ADMINISTRATE_SERVER)))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set work in progress""); } if ((change.getStatus()) != (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""change is "" + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is already work in progress""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""""); } }",506069508469a9bae1a193eb5e533a07d273ffec,2018-03-27 15:08:34,2
167891,java_com_google_gerrit_server_group_db_GroupConfigCommitMessage.java,"public java.lang.String create() { java.lang.String summaryLine = (originalGroup.isPresent()) ? ""Update group"" : ""Create group""; java.util.StringJoiner footerJoiner = new java.util.StringJoiner(""\n"", ""\n\n"", """"); footerJoiner.setEmptyValue(""""); getFooterForRename().ifPresent(footerJoiner::add); getFootersForMemberModifications().forEach(footerJoiner::add); getFootersForSubgroupModifications().forEach(footerJoiner::add); java.lang.String footer = footerJoiner.toString(); return summaryLine + footer; }",39fd3019ca4342fdafaca7302367de3f8be81caa,"public java.lang.String create() { java.lang.String summaryLine = (originalGroup.isPresent()) ? ""Update group"" : ""Create group""; java.util.List<java.lang.String> footers = new java.util.ArrayList<>(); getFooterForRename().ifPresent(footers::add); getFootersForMemberModifications().forEach(footers::add); getFootersForSubgroupModifications().forEach(footers::add); java.util.Collections.sort(footers); java.util.StringJoiner footerJoiner = new java.util.StringJoiner(""\n"", ""\n\n"", """"); footerJoiner.setEmptyValue(""""); footers.forEach(footerJoiner::add); java.lang.String footer = footerJoiner.toString(); return summaryLine + footer; }",f86cd0f435a4796ee5fab4adbbf404743ca59b7a,"public java.lang.String create() { java.lang.String summaryLine = (originalGroup.isPresent()) ? ""Update group"" : ""Create group""; java.util.StringJoiner footerJoiner = new java.util.StringJoiner(""\n"", ""\n\n"", """"); footerJoiner.setEmptyValue(""""); com.google.common.collect.Streams.concat(com.google.common.collect.Streams.stream(getFooterForRename()), getFootersForMemberModifications(), getFootersForSubgroupModifications()).sorted().forEach(footerJoiner::add); java.lang.String footer = footerJoiner.toString(); return summaryLine + footer; }",34a922f0cc6eb8cc09024a70f3d9ea27fcd132e3,2018-03-27 16:19:20,3
169092,java_com_google_gerrit_server_restapi_change_DeleteChange.java,private boolean couldDeleteWhenIn(com.google.gerrit.reviewdb.client.Change.Status status) { switch (status) { case NEW : case ABANDONED : return true; case MERGED : return false; } return false; },ed561332e0d7538500254606136cbe1a3348b53e,private boolean isChangeDeletable(com.google.gerrit.reviewdb.client.Change.Status status) { switch (status) { case NEW : case ABANDONED : return true; case MERGED : return false; } return false; },07158de11dae317b4ab4b5cd857e5a4b7d380a1a,private static boolean isChangeDeletable(com.google.gerrit.reviewdb.client.Change.Status status) { if (status == (Change.Status.MERGED)) { return false; } return true; },3b10ec1b946dd0faa29c56c46e625fd9995e7540,2018-03-29 08:16:39,2
169092,java_com_google_gerrit_server_restapi_change_DeleteChange.java,"@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change.Status status = rsrc.getChange().getStatus(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions().database(db); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Delete"").setTitle((""Delete change "" + (rsrc.getId()))).setVisible(and(couldDeleteWhenIn(status), perm.testCond(ChangePermission.DELETE))); }",5f55d5edea9bb9c2e9e1b2a14fc02009724ce9f9,"@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change.Status status = rsrc.getChange().getStatus(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions().database(db); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Delete"").setTitle((""Delete change "" + (rsrc.getId()))).setVisible(and(isChangeDeletable(status), perm.testCond(ChangePermission.DELETE))); }",3b1473b30432d324220c656fd6062c0ce8925c8e,"@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change.Status status = rsrc.getChange().getStatus(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions().database(db); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Delete"").setTitle((""Delete change "" + (rsrc.getId()))).setVisible(and(com.google.gerrit.server.restapi.change.DeleteChange.isChangeDeletable(status), perm.testCond(ChangePermission.DELETE))); }",a38120b63581fb3be81b90e2a29cfaf4c49be976,2018-03-29 08:16:39,2
169092,java_com_google_gerrit_server_restapi_change_DeleteChange.java,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { if ((rsrc.getChange().getStatus()) == (Change.Status.MERGED)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""delete not permitted""); } rsrc.permissions().database(db).check(ChangePermission.DELETE); try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.reviewdb.client.Change.Id id = rsrc.getChange().getId(); bu.setOrder(Order.DB_BEFORE_REPO); bu.addOp(id, opProvider.get()); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",a858e724432f3783fbee234d8064f32446a74fb7,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { if (!(isChangeDeletable(rsrc.getChange().getStatus()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""delete not permitted""); } rsrc.permissions().database(db).check(ChangePermission.DELETE); try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.reviewdb.client.Change.Id id = rsrc.getChange().getId(); bu.setOrder(Order.DB_BEFORE_REPO); bu.addOp(id, opProvider.get()); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",54a1728b9238ae4c46b7c23c9942be6438b1a484,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { if (!(com.google.gerrit.server.restapi.change.DeleteChange.isChangeDeletable(rsrc.getChange().getStatus()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""delete not permitted""); } rsrc.permissions().database(db).check(ChangePermission.DELETE); try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.reviewdb.client.Change.Id id = rsrc.getChange().getId(); bu.setOrder(Order.DB_BEFORE_REPO); bu.addOp(id, opProvider.get()); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",400ae570847cc2d7288e65c0f91abb50afca00d7,2018-03-29 08:16:39,2
168610,java_com_google_gerrit_server_restapi_project_ProjectsCollection.java,"@com.google.gerrit.common.Nullable private com.google.gerrit.server.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { try { permissionBackend.user(user).project(nameKey).check(ProjectPermission.ACCESS); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } try { permissionBackend.user(user).project(nameKey).check(ProjectPermission.WRITE_CONFIG); } catch (com.google.gerrit.extensions.restapi.AuthException e) { state.checkStatePermitsRead(); } } return new com.google.gerrit.server.project.ProjectResource(state, user.get()); }",b8eb1dfb148b6d071f5ffad45c4b8ec6c84446c0,"@com.google.gerrit.common.Nullable private com.google.gerrit.server.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.statePermitsRead()) ? com.google.gerrit.server.permissions.ProjectPermission.ACCESS : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionBackend.user(user).project(nameKey).check(permissionToCheck); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } try { permissionBackend.user(user).project(nameKey).check(ProjectPermission.WRITE_CONFIG); } catch (com.google.gerrit.extensions.restapi.AuthException e) { state.checkStatePermitsRead(); } } return new com.google.gerrit.server.project.ProjectResource(state, user.get()); }",7949c101bbd5441b637d18b97e6aebae42a07c89,"@com.google.gerrit.common.Nullable private com.google.gerrit.server.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.statePermitsRead()) ? com.google.gerrit.server.permissions.ProjectPermission.ACCESS : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionBackend.currentUser().project(nameKey).check(permissionToCheck); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } try { permissionBackend.currentUser().project(nameKey).check(ProjectPermission.WRITE_CONFIG); } catch (com.google.gerrit.extensions.restapi.AuthException e) { state.checkStatePermitsRead(); } } return new com.google.gerrit.server.project.ProjectResource(state, user.get()); }",7b65645356c2f92929fcbfbb485b33d15635d4d9,2018-03-29 11:18:36,6
168610,java_com_google_gerrit_httpd_rpc_project_ProjectAccessFactory.java,"private com.google.gerrit.server.project.ProjectState checkProjectState() throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(projectName); try { permissionBackend.user(user).project(projectName).check(ProjectPermission.ACCESS); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.server.project.NoSuchProjectException(projectName); } state.checkStatePermitsRead(); return state; }",e38657fec0cebe00cc29d093a383c6d84ca8d147,"private com.google.gerrit.server.project.ProjectState checkProjectState() throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(projectName); com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.statePermitsRead()) ? com.google.gerrit.server.permissions.ProjectPermission.ACCESS : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionBackend.user(user).project(projectName).check(permissionToCheck); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.server.project.NoSuchProjectException(projectName); } state.checkStatePermitsRead(); return state; }",0a6fae4c6e0669c6a566097eb64efe68773886b5,"private com.google.gerrit.server.project.ProjectState checkProjectState() throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(projectName); com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.statePermitsRead()) ? com.google.gerrit.server.permissions.ProjectPermission.ACCESS : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionBackend.currentUser().project(projectName).check(permissionToCheck); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.server.project.NoSuchProjectException(projectName); } state.checkStatePermitsRead(); return state; }",491806b7bf2cca8e3950e628a6efb10d0ba389ff,2018-03-29 11:18:36,6
168610,java_com_google_gerrit_server_args4j_ProjectHandler.java,"@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { java.lang.String projectName = params.getParameter(0); while (projectName.endsWith(""/"")) { projectName = projectName.substring(0, ((projectName.length()) - 1)); } while (projectName.startsWith(""/"")) { projectName = projectName.substring(1); } java.lang.String nameWithoutSuffix = com.google.gerrit.common.ProjectUtil.stripGitSuffix(projectName); com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(nameWithoutSuffix); com.google.gerrit.server.project.ProjectState state; try { state = projectCache.checkedGet(nameKey); if (state == null) { throw new org.kohsuke.args4j.CmdLineException(owner, java.lang.String.format(""project %s not found"", nameWithoutSuffix)); } permissionBackend.user(user).project(nameKey).check(ProjectPermission.ACCESS); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new org.kohsuke.args4j.CmdLineException(owner, new com.google.gerrit.server.project.NoSuchProjectException(nameKey).getMessage()); } catch (com.google.gerrit.server.permissions.PermissionBackendException | java.io.IOException e) { com.google.gerrit.server.args4j.ProjectHandler.log.warn((""Cannot load project "" + nameWithoutSuffix), e); throw new org.kohsuke.args4j.CmdLineException(owner, new com.google.gerrit.server.project.NoSuchProjectException(nameKey).getMessage()); } setter.addValue(state); return 1; }",f1dae73b5f5184640a12ac22bbdaca8f455d7208,"@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { java.lang.String projectName = params.getParameter(0); while (projectName.endsWith(""/"")) { projectName = projectName.substring(0, ((projectName.length()) - 1)); } while (projectName.startsWith(""/"")) { projectName = projectName.substring(1); } java.lang.String nameWithoutSuffix = com.google.gerrit.common.ProjectUtil.stripGitSuffix(projectName); com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(nameWithoutSuffix); com.google.gerrit.server.project.ProjectState state; try { state = projectCache.checkedGet(nameKey); if (state == null) { throw new org.kohsuke.args4j.CmdLineException(owner, java.lang.String.format(""project %s not found"", nameWithoutSuffix)); } com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.statePermitsRead()) ? com.google.gerrit.server.permissions.ProjectPermission.ACCESS : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; permissionBackend.user(user).project(nameKey).check(permissionToCheck); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new org.kohsuke.args4j.CmdLineException(owner, new com.google.gerrit.server.project.NoSuchProjectException(nameKey).getMessage()); } catch (com.google.gerrit.server.permissions.PermissionBackendException | java.io.IOException e) { com.google.gerrit.server.args4j.ProjectHandler.log.warn((""Cannot load project "" + nameWithoutSuffix), e); throw new org.kohsuke.args4j.CmdLineException(owner, new com.google.gerrit.server.project.NoSuchProjectException(nameKey).getMessage()); } setter.addValue(state); return 1; }",7af459a3a26e0565780bbdf3072d3a15e6e11b91,"@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { java.lang.String projectName = params.getParameter(0); while (projectName.endsWith(""/"")) { projectName = projectName.substring(0, ((projectName.length()) - 1)); } while (projectName.startsWith(""/"")) { projectName = projectName.substring(1); } java.lang.String nameWithoutSuffix = com.google.gerrit.common.ProjectUtil.stripGitSuffix(projectName); com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(nameWithoutSuffix); com.google.gerrit.server.project.ProjectState state; try { state = projectCache.checkedGet(nameKey); if (state == null) { throw new org.kohsuke.args4j.CmdLineException(owner, java.lang.String.format(""project %s not found"", nameWithoutSuffix)); } com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.statePermitsRead()) ? com.google.gerrit.server.permissions.ProjectPermission.ACCESS : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; permissionBackend.currentUser().project(nameKey).check(permissionToCheck); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new org.kohsuke.args4j.CmdLineException(owner, new com.google.gerrit.server.project.NoSuchProjectException(nameKey).getMessage()); } catch (com.google.gerrit.server.permissions.PermissionBackendException | java.io.IOException e) { com.google.gerrit.server.args4j.ProjectHandler.log.warn((""Cannot load project "" + nameWithoutSuffix), e); throw new org.kohsuke.args4j.CmdLineException(owner, new com.google.gerrit.server.project.NoSuchProjectException(nameKey).getMessage()); } setter.addValue(state); return 1; }",38d320b5d6606a6622c92c495529bc6aa1f781d8,2018-03-29 11:18:36,6
166513,java_com_google_gitiles_ConfigUtil.java,"public static com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> getCacheBuilder(org.eclipse.jgit.lib.Config config, java.lang.String name) { com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> b = com.google.common.cache.CacheBuilder.newBuilder(); try { if ((config.getString(""cache"", name, ""maximumWeight"")) != null) { b.maximumWeight(config.getLong(""cache"", name, ""maximumWeight"", (20 << 20))); } if ((config.getString(""cache"", name, ""maximumSize"")) != null) { b.maximumSize(config.getLong(""cache"", name, ""maximumSize"", 16384)); } org.joda.time.Duration expireAfterWrite = com.google.gitiles.ConfigUtil.getDuration(config, ""cache"", name, ""expireAfterWrite"", null); if (expireAfterWrite != null) { b.expireAfterWrite(expireAfterWrite.getMillis(), java.util.concurrent.TimeUnit.MILLISECONDS); } org.joda.time.Duration expireAfterAccess = com.google.gitiles.ConfigUtil.getDuration(config, ""cache"", name, ""expireAfterAccess"", null); if (expireAfterAccess != null) { b.expireAfterAccess(expireAfterAccess.getMillis(), java.util.concurrent.TimeUnit.MILLISECONDS); } } catch (java.lang.IllegalArgumentException e) { throw new java.lang.IllegalArgumentException((""Error getting CacheBuilder for "" + name), e); } catch (java.lang.IllegalStateException e) { throw new java.lang.IllegalStateException((""Error getting CacheBuilder for "" + name), e); } return b; }",f5ab0454e194f9a4bd4c3ef6007080f611cfc8f0,"public static com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> getCacheBuilder(org.eclipse.jgit.lib.Config config, java.lang.String name) { com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> b = com.google.common.cache.CacheBuilder.newBuilder(); try { if ((config.getString(""cache"", name, ""maximumWeight"")) != null) { b.maximumWeight(config.getLong(""cache"", name, ""maximumWeight"", (20 << 20))); } if ((config.getString(""cache"", name, ""maximumSize"")) != null) { b.maximumSize(config.getLong(""cache"", name, ""maximumSize"", 16384)); } java.lang.Long expireAfterWrite = com.google.gitiles.ConfigUtil.getDuration(config, ""cache"", name, ""expireAfterWrite"", null); if (expireAfterWrite != null) { b.expireAfterWrite(expireAfterWrite, java.util.concurrent.TimeUnit.MILLISECONDS); } java.lang.Long expireAfterAccess = com.google.gitiles.ConfigUtil.getDuration(config, ""cache"", name, ""expireAfterAccess"", null); if (expireAfterAccess != null) { b.expireAfterAccess(expireAfterAccess, java.util.concurrent.TimeUnit.MILLISECONDS); } } catch (java.lang.IllegalArgumentException e) { throw new java.lang.IllegalArgumentException((""Error getting CacheBuilder for "" + name), e); } catch (java.lang.IllegalStateException e) { throw new java.lang.IllegalStateException((""Error getting CacheBuilder for "" + name), e); } return b; }",21293c2d02989b7a362ba6064026081c906e1572,"public static com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> getCacheBuilder(org.eclipse.jgit.lib.Config config, java.lang.String name) { com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> b = com.google.common.cache.CacheBuilder.newBuilder(); try { if ((config.getString(""cache"", name, ""maximumWeight"")) != null) { b.maximumWeight(config.getLong(""cache"", name, ""maximumWeight"", (20 << 20))); } if ((config.getString(""cache"", name, ""maximumSize"")) != null) { b.maximumSize(config.getLong(""cache"", name, ""maximumSize"", 16384)); } java.time.Duration expireAfterWrite = com.google.gitiles.ConfigUtil.getDuration(config, ""cache"", name, ""expireAfterWrite"", null); if (expireAfterWrite != null) { b.expireAfterWrite(expireAfterWrite.toMillis(), java.util.concurrent.TimeUnit.MILLISECONDS); } java.time.Duration expireAfterAccess = com.google.gitiles.ConfigUtil.getDuration(config, ""cache"", name, ""expireAfterAccess"", null); if (expireAfterAccess != null) { b.expireAfterAccess(expireAfterAccess.toMillis(), java.util.concurrent.TimeUnit.MILLISECONDS); } } catch (java.lang.IllegalArgumentException e) { throw new java.lang.IllegalArgumentException((""Error getting CacheBuilder for "" + name), e); } catch (java.lang.IllegalStateException e) { throw new java.lang.IllegalStateException((""Error getting CacheBuilder for "" + name), e); } return b; }",8336e1a6efc4e888fe25a0287f4bad416c0ee18f,2018-04-02 14:25:09,3
166513,java_com_google_gitiles_ConfigUtil.java,"public static org.joda.time.Duration getDuration(org.eclipse.jgit.lib.Config config, java.lang.String section, java.lang.String subsection, java.lang.String name, @javax.annotation.Nullable org.joda.time.Duration defaultValue) { long m = config.getTimeUnit(section, subsection, name, (-1), java.util.concurrent.TimeUnit.MILLISECONDS); return m == (-1) ? defaultValue : org.joda.time.Duration.millis(m); }",a7785fb56e5aa4f91e156214e6b9ffd1177237c2,"@javax.annotation.Nullable public static java.lang.Long getDuration(org.eclipse.jgit.lib.Config config, java.lang.String section, java.lang.String subsection, java.lang.String name, @javax.annotation.Nullable java.lang.Long defaultValue) { long m = config.getTimeUnit(section, subsection, name, (-1), java.util.concurrent.TimeUnit.MILLISECONDS); if (m != (-1)) { return m; } return defaultValue; }",a3eafb566b6276d7e1bda94667340f2f09e79708,"@javax.annotation.Nullable public static java.time.Duration getDuration(org.eclipse.jgit.lib.Config config, java.lang.String section, java.lang.String subsection, java.lang.String name, @javax.annotation.Nullable java.time.Duration defaultValue) { long m = config.getTimeUnit(section, subsection, name, (-1), java.util.concurrent.TimeUnit.MILLISECONDS); return m == (-1) ? defaultValue : java.time.Duration.ofMillis(m); }",1c921fe02094996e90bced208e0b9a26b7a19bf5,2018-04-02 14:25:09,3
166513,javatests_com_google_gitiles_ConfigUtilTest.java,"@org.junit.Test public void nullAsDefault() throws java.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); org.joda.time.Duration t; t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", null); assertThat(t).isNull(); config.setString(""core"", null, ""blank"", """"); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", null); assertThat(t).isNull(); config.setString(""core"", null, ""blank"", "" ""); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", null); assertThat(t).isNull(); }",d8cd17e79e36e9e968c1c2c4b893700d663d9033,"@org.junit.Test public void nullAsDefault() throws java.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.lang.Long t; t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", null); assertThat(t).isNull(); config.setString(""core"", null, ""blank"", """"); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", null); assertThat(t).isNull(); config.setString(""core"", null, ""blank"", "" ""); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", null); assertThat(t).isNull(); }",6a2eacddfaab265be082de4f6556dd77b3156c71,"@org.junit.Test public void nullAsDefault() throws java.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.time.Duration t; t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", null); assertThat(t).isNull(); config.setString(""core"", null, ""blank"", """"); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", null); assertThat(t).isNull(); config.setString(""core"", null, ""blank"", "" ""); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", null); assertThat(t).isNull(); }",b66af37a8e6c589e8794d60e77647d134378dda5,2018-04-02 14:25:09,3
166513,javatests_com_google_gitiles_ConfigUtilTest.java,"@org.junit.Test public void getDurationCanReturnDefault() throws java.lang.Exception { org.joda.time.Duration def = org.joda.time.Duration.standardSeconds(1); org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); org.joda.time.Duration t; t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", def); assertThat(t.getMillis()).isEqualTo(1000); config.setString(""core"", null, ""blank"", """"); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", def); assertThat(t.getMillis()).isEqualTo(1000); config.setString(""core"", null, ""blank"", "" ""); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", def); assertThat(t.getMillis()).isEqualTo(1000); }",42c8d4d9a439ac62ec23ed51e4b7304840e807cb,"@org.junit.Test public void getDurationCanReturnDefault() throws java.lang.Exception { java.lang.Long def = 1000L; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.lang.Long t; t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", def); assertThat(t).isEqualTo(1000); config.setString(""core"", null, ""blank"", """"); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", def); assertThat(t).isEqualTo(1000); config.setString(""core"", null, ""blank"", "" ""); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", def); assertThat(t).isEqualTo(1000); }",b64940f530f03ddaec7d7319770556dffb619c11,"@org.junit.Test public void getDurationCanReturnDefault() throws java.lang.Exception { java.time.Duration def = java.time.Duration.ofSeconds(1); org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.time.Duration t; t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", def); assertThat(t.toMillis()).isEqualTo(1000); config.setString(""core"", null, ""blank"", """"); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", def); assertThat(t.toMillis()).isEqualTo(1000); config.setString(""core"", null, ""blank"", "" ""); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", def); assertThat(t.toMillis()).isEqualTo(1000); }",a69932c9d1e11b3076a0d0162325d826a4e79374,2018-04-02 14:25:09,3
166513,javatests_com_google_gitiles_ConfigUtilTest.java,"@org.junit.Test public void getDurationReturnsDuration() throws java.lang.Exception { org.joda.time.Duration def = org.joda.time.Duration.standardSeconds(2); org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); org.joda.time.Duration t; config.setString(""core"", ""dht"", ""timeout"", ""500 ms""); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", ""dht"", ""timeout"", def); assertThat(t.getMillis()).isEqualTo(500); config.setString(""core"", ""dht"", ""timeout"", ""5.2 sec""); try { com.google.gitiles.ConfigUtil.getDuration(config, ""core"", ""dht"", ""timeout"", def); fail(""expected IllegalArgumentException""); } catch (java.lang.IllegalArgumentException e) { assertThat(e).hasMessageThat().isEqualTo(""Invalid time unit value: core.dht.timeout=5.2 sec""); } config.setString(""core"", ""dht"", ""timeout"", ""1 min""); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", ""dht"", ""timeout"", def); assertThat(t.getMillis()).isEqualTo(60000); }",de9c973e52a400991537c22c0677c41653651b1a,"@org.junit.Test public void getDurationReturnsDuration() throws java.lang.Exception { java.lang.Long def = 2 * 1000L; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.lang.Long t; config.setString(""core"", ""dht"", ""timeout"", ""500 ms""); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", ""dht"", ""timeout"", def); assertThat(t).isEqualTo(500); config.setString(""core"", ""dht"", ""timeout"", ""5.2 sec""); try { com.google.gitiles.ConfigUtil.getDuration(config, ""core"", ""dht"", ""timeout"", def); fail(""expected IllegalArgumentException""); } catch (java.lang.IllegalArgumentException e) { assertThat(e).hasMessageThat().isEqualTo(""Invalid time unit value: core.dht.timeout=5.2 sec""); } config.setString(""core"", ""dht"", ""timeout"", ""1 min""); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", ""dht"", ""timeout"", def); assertThat(t).isEqualTo(60000); }",b1b148200a6b13249337a10303c97e5ea85a2818,"@org.junit.Test public void getDurationReturnsDuration() throws java.lang.Exception { java.time.Duration def = java.time.Duration.ofSeconds(2); org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.time.Duration t; config.setString(""core"", ""dht"", ""timeout"", ""500 ms""); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", ""dht"", ""timeout"", def); assertThat(t.toMillis()).isEqualTo(500); config.setString(""core"", ""dht"", ""timeout"", ""5.2 sec""); try { com.google.gitiles.ConfigUtil.getDuration(config, ""core"", ""dht"", ""timeout"", def); fail(""expected IllegalArgumentException""); } catch (java.lang.IllegalArgumentException e) { assertThat(e).hasMessageThat().isEqualTo(""Invalid time unit value: core.dht.timeout=5.2 sec""); } config.setString(""core"", ""dht"", ""timeout"", ""1 min""); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", ""dht"", ""timeout"", def); assertThat(t.toMillis()).isEqualTo(60000); }",2350a00452ea6afadde9c71a7605e30cfb81a817,2018-04-02 14:25:09,3
169650,java_com_google_gerrit_server_restapi_project_SetAccessUtil.java,"void validateChanges(com.google.gerrit.server.git.ProjectConfig config, java.util.List<com.google.gerrit.common.data.AccessSection> removals, java.util.List<com.google.gerrit.common.data.AccessSection> additions) throws com.google.gerrit.common.errors.InvalidNameException, com.google.gerrit.extensions.restapi.BadRequestException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions, removals)) { boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(section.getName()); if (isGlobalCapabilities) { if (!(allProjects.equals(config.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""Cannot edit global capabilities for projects other than "" + (allProjects.get()))); } } } for (com.google.gerrit.common.data.AccessSection section : additions) { java.lang.String name = section.getName(); boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(name); if (!isGlobalCapabilities) { if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""invalid section name""); } com.google.gerrit.server.project.RefPattern.validate(name); } else { for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(com.google.gerrit.common.data.GlobalCapability.isCapability(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(((""Cannot add non-global capability "" + (p.getName())) + "" to global capabilities"")); } } } } }",01f184e58493845745346a2529ccebb06e1247ec,"void validateChanges(com.google.gerrit.server.git.ProjectConfig config, java.util.List<com.google.gerrit.common.data.AccessSection> removals, java.util.List<com.google.gerrit.common.data.AccessSection> additions) throws com.google.gerrit.common.errors.InvalidNameException, com.google.gerrit.extensions.restapi.BadRequestException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions, removals)) { boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(section.getName()); if (isGlobalCapabilities) { if (!(allProjects.equals(config.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""Cannot edit global capabilities for projects other than "" + (allProjects.get()))); } } } for (com.google.gerrit.common.data.AccessSection section : additions) { java.lang.String name = section.getName(); boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(name); if (!isGlobalCapabilities) { if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""invalid section name""); } com.google.gerrit.server.project.RefPattern.validate(name); } else { java.util.Set<java.lang.String> pluginCapabilities = listCapabilities.collectPluginCapabilities().keySet(); for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!((com.google.gerrit.common.data.GlobalCapability.isGlobalCapability(p.getName())) || (pluginCapabilities.contains(p.getName())))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(((""Cannot add non-global capability "" + (p.getName())) + "" to global capabilities"")); } } } } }",0baa3d0969d195017ee47b068d495fa7c3789cd8,"void validateChanges(com.google.gerrit.server.git.ProjectConfig config, java.util.List<com.google.gerrit.common.data.AccessSection> removals, java.util.List<com.google.gerrit.common.data.AccessSection> additions) throws com.google.gerrit.common.errors.InvalidNameException, com.google.gerrit.extensions.restapi.BadRequestException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions, removals)) { boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(section.getName()); if (isGlobalCapabilities) { if (!(allProjects.equals(config.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""Cannot edit global capabilities for projects other than "" + (allProjects.get()))); } } } for (com.google.gerrit.common.data.AccessSection section : additions) { java.lang.String name = section.getName(); boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(name); if (!isGlobalCapabilities) { if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""invalid section name""); } com.google.gerrit.server.project.RefPattern.validate(name); } else { for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(isCapability(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(((""Cannot add non-global capability "" + (p.getName())) + "" to global capabilities"")); } } } } }",63410a4c0cf14cce8150f7976f95a2ca8260570d,2018-04-04 07:29:34,5
168873,java_com_google_gerrit_server_mail_send_NotificationEmail.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"static java.lang.String getShortProjectName(java.lang.String projectName) { int lastIndexSlash = projectName.lastIndexOf(""/""); if (lastIndexSlash == 0) { return projectName.substring(1); } return ""..."" + (projectName.substring((lastIndexSlash + 1))); }",2b22db22dfd2063f759363757b3fc5f519108155,"@com.google.common.annotations.VisibleForTesting protected static java.lang.String getShortProjectName(java.lang.String projectName) { int lastIndexSlash = projectName.lastIndexOf(""/""); if (lastIndexSlash == 0) { return projectName.substring(1); } return ""..."" + (projectName.substring((lastIndexSlash + 1))); }",a10d18a18c15fc3063955dad8948b2c8b51824dd,2018-04-05 08:22:10,5
170190,javatests_com_google_gerrit_acceptance_edit_ChangeEditIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void editCannotBeCreatedOnAbandonedChange() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).abandon(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format(""change %s is ABANDONED"", change._number)); createArbitraryEditFor(changeId); }",30f677ea4abed5dbf9558082ab1accd6d78140c3,"@org.junit.Test public void editCannotBeCreatedOnAbandonedChange() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).abandon(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format(""change %s is abandoned"", change._number)); createArbitraryEditFor(changeId); }",7d6c6f9e5de5220e8aa0b086ae39e2a1b66c97ab,2018-04-05 19:54:12,2
170190,java_com_google_gerrit_server_edit_ChangeEditModifier.java,"private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } try { permissionBackend.currentUser().database(reviewDb).change(notes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException(""edit not permitted"", denied); } }",cf51a951a0483a1f2ab841d0cfb672866622d839,"private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } com.google.gerrit.reviewdb.client.Change change = notes.getChange(); if (!(change.getStatus().isOpen())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format(""change %s is %s"", change.getChangeId(), change.getStatus())); } try { permissionBackend.currentUser().database(reviewDb).change(notes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException(""edit not permitted"", denied); } }",ca9927e8fc561d4f6cc18e459c6b58c986f4cd78,"private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } com.google.gerrit.reviewdb.client.Change c = notes.getChange(); if (!(c.getStatus().isOpen())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format(""change %s is %s"", c.getChangeId(), c.getStatus().toString().toLowerCase())); } try { permissionBackend.currentUser().database(reviewDb).change(notes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException(""edit not permitted"", denied); } }",4d59a24ee53009455615f6eea923cc61e0281921,2018-04-05 19:54:12,2
170190,javatests_com_google_gerrit_acceptance_edit_ChangeEditIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void editCannotBeCreatedOnMergedChange() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(changeId).current().submit(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format(""change %s is MERGED"", change._number)); createArbitraryEditFor(changeId); }",a209b227f85fe919264073cc97540965604661c0,"@org.junit.Test public void editCannotBeCreatedOnMergedChange() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(changeId).current().submit(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format(""change %s is merged"", change._number)); createArbitraryEditFor(changeId); }",a2df7dac52b7b97aba4d4c4ff37e4b271f305dc2,2018-04-05 19:54:12,2
167471,src_main_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_RestForwarder.java,"@java.lang.Override public boolean deleteChangeFromIndex(final int changeId) { return new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.Request(((""delete change "" + changeId) + "" from index"")) { @java.lang.Override com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult send() throws java.io.IOException { return httpSession.delete(buildIndexEndpoint(changeId)); } }.execute(); }",d8781dfa82df1300d5406a10ed5b55fa9401ce12,"@java.lang.Override public boolean deleteChangeFromIndex(final int changeId) { return new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.Request(""delete from index change "", changeId) { @java.lang.Override com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult send() throws java.io.IOException { return httpSession.delete(buildIndexEndpoint(changeId)); } }.execute(); }",cf5dcde89100ec59eb0c985217b923e61bb1b1b3,"@java.lang.Override public boolean deleteChangeFromIndex(final int changeId) { return new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.Request(""delete change"", changeId) { @java.lang.Override com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult send() throws java.io.IOException { return httpSession.delete(buildIndexEndpoint(changeId)); } }.execute(); }",7701481b37d08f3e8b22444c5799b58cf27f54b7,2018-04-05 23:54:27,6
169851,javatests_com_google_gerrit_server_index_change_ChangeFieldTest.java,"@org.junit.Test public void storedSubmitRecordsWithRequirements() { com.google.gerrit.common.data.SubmitRecord r = com.google.gerrit.server.index.change.ChangeFieldTest.record(SubmitRecord.Status.OK, com.google.gerrit.server.index.change.ChangeFieldTest.label(SubmitRecord.Label.Status.MAY, ""Label-1"", null), com.google.gerrit.server.index.change.ChangeFieldTest.label(SubmitRecord.Label.Status.OK, ""Label-2"", 1)); com.google.gerrit.common.data.SubmitRequirement sr = new com.google.gerrit.common.data.SubmitRequirement(""short reason"", ""Full reason can be a long string with special symbols like < > \\ / ; :"", null); r.requirements = java.util.Collections.singletonList(sr); com.google.gerrit.server.index.change.ChangeFieldTest.assertStoredRecordRoundTrip(r); }",4709841300357f758b620593a669723cdd10e782,"@org.junit.Test public void storedSubmitRecordsWithRequirements() { com.google.gerrit.common.data.SubmitRecord r = com.google.gerrit.server.index.change.ChangeFieldTest.record(SubmitRecord.Status.OK, com.google.gerrit.server.index.change.ChangeFieldTest.label(SubmitRecord.Label.Status.MAY, ""Label-1"", null), com.google.gerrit.server.index.change.ChangeFieldTest.label(SubmitRecord.Label.Status.OK, ""Label-2"", 1)); com.google.gerrit.common.data.SubmitRequirement sr = new com.google.gerrit.common.data.SubmitRequirement(""Fallback text can be a long string with special symbols like < > \\ / ; :"", ""short_type"", com.google.common.collect.ImmutableMap.of(""custom_data"", ""my value"")); r.requirements = java.util.Collections.singletonList(sr); com.google.gerrit.server.index.change.ChangeFieldTest.assertStoredRecordRoundTrip(r); }",feb24d055295dec4b077c9c506ea8f64fe59d4c8,"@org.junit.Test public void storedSubmitRecordsWithRequirement() { com.google.gerrit.common.data.SubmitRecord r = com.google.gerrit.server.index.change.ChangeFieldTest.record(SubmitRecord.Status.OK, com.google.gerrit.server.index.change.ChangeFieldTest.label(SubmitRecord.Label.Status.MAY, ""Label-1"", null), com.google.gerrit.server.index.change.ChangeFieldTest.label(SubmitRecord.Label.Status.OK, ""Label-2"", 1)); com.google.gerrit.common.data.SubmitRequirement sr = com.google.gerrit.common.data.SubmitRequirement.builder().setType(""short_type"").setFallbackText(""Fallback text may contain special symbols like < > \\ / ; :"").addCustomValue(""custom_data"", ""my value"").build(); r.requirements = java.util.Collections.singletonList(sr); com.google.gerrit.server.index.change.ChangeFieldTest.assertStoredRecordRoundTrip(r); }",db32c71dd7a1f52f3d4ced2e98939a4443aa369f,2018-04-09 14:40:24,13
169851,java_com_google_gerrit_server_index_change_ChangeField.java,"private com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; if ((labels) != null) { rec.labels = new java.util.ArrayList(labels.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredLabel label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label; srl.status = label.status; srl.appliedBy = ((label.appliedBy) != null) ? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); } } if ((requirements) != null) { rec.requirements = new java.util.ArrayList(requirements.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredRequirement requirement : requirements) { com.google.gerrit.common.data.SubmitRequirement sr = new com.google.gerrit.common.data.SubmitRequirement(requirement.shortReason, requirement.fullReason, requirement.label); rec.requirements.add(sr); } } return rec; }",1b32e4c45399f6b9857c51254b89594b55ae466f,"private com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; if ((labels) != null) { rec.labels = new java.util.ArrayList(labels.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredLabel label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label; srl.status = label.status; srl.appliedBy = ((label.appliedBy) != null) ? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); } } if ((requirements) != null) { rec.requirements = new java.util.ArrayList(requirements.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredRequirement req : requirements) { if ((req.fallbackText) == null) { continue; } com.google.gerrit.common.data.SubmitRequirement sr = new com.google.gerrit.common.data.SubmitRequirement(req.fallbackText, req.type, req.data); rec.requirements.add(sr); } } return rec; }",6a5f63b83e380d56b609dbe063a02b541b4729c1,private com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; if ((labels) != null) { rec.labels = new java.util.ArrayList(labels.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredLabel label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label; srl.status = label.status; srl.appliedBy = ((label.appliedBy) != null) ? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); } } if ((requirements) != null) { rec.requirements = new java.util.ArrayList(requirements.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredRequirement req : requirements) { com.google.gerrit.common.data.SubmitRequirement sr = com.google.gerrit.common.data.SubmitRequirement.builder().setType(req.type).setFallbackText(req.fallbackText).setData(req.data).build(); rec.requirements.add(sr); } } return rec; },1ddefc0f09dc18fc6c5b97806c6d213baa642d0d,2018-04-09 14:40:24,13
169851,java_com_google_gerrit_common_data_SubmitRequirement.java,"@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if (o instanceof com.google.gerrit.common.data.SubmitRequirement) { com.google.gerrit.common.data.SubmitRequirement that = ((com.google.gerrit.common.data.SubmitRequirement) (o)); return ((java.util.Objects.equals(shortReason, that.shortReason)) && (java.util.Objects.equals(fullReason, that.fullReason))) && (java.util.Objects.equals(label, that.label)); } return false; }",5aa2aee808aa14cbeeec09766ac6b36613c9ac6b,"@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if (!(o instanceof com.google.gerrit.common.data.SubmitRequirement)) { return false; } com.google.gerrit.common.data.SubmitRequirement that = ((com.google.gerrit.common.data.SubmitRequirement) (o)); return ((java.util.Objects.equals(fallbackText, that.fallbackText)) && (java.util.Objects.equals(type, that.type))) && (java.util.Objects.equals(data, that.data)); }",5cb78ee776a88068ecd09ac57ffc77bd3cc3d991,public static com.google.gerrit.common.data.SubmitRequirement.Builder builder() { return new com.google.gerrit.common.data.AutoValue_SubmitRequirement.Builder(); },577cd71e7356d2f111f44e58a8c51e4b486fcd4b,2018-04-09 14:40:24,13
169851,java_com_google_gerrit_common_data_SubmitRequirement.java,public java.util.Optional<java.lang.String> label() { return java.util.Optional.ofNullable(label); },3b2b70a9fa6a0ecc854e071d75bb26c0234ae74a,"public java.util.Map<java.lang.String, java.lang.String> data() { return data; }",3ef5f37ad5e136f1f1e34cad70544d819d61ec02,"public abstract com.google.common.collect.ImmutableMap<java.lang.String, java.lang.String> data();",f2a43dacce2fdd7d6eb8b8aae35e70b30e57d98b,2018-04-09 14:40:24,13
169851,java_com_google_gerrit_common_data_SubmitRequirement.java,public java.lang.String shortReason() { return shortReason; },c4bb1e202c1cfc2a8cc74fe5bf8544f9468b767c,public java.lang.String fallbackText() { return fallbackText; },7131bd936df78b11dc6b5a23f1b1067f0e0c5b1d,public abstract java.lang.String fallbackText();,c2b54ca04fdb68bb584565893350d0883909803c,2018-04-09 14:40:24,13
169851,java_com_google_gerrit_common_data_SubmitRequirement.java,"@java.lang.Override public java.lang.String toString() { return (((((((((""SubmitRequirement{"" + ""shortReason='"") + (shortReason)) + '\'') + "", fullReason='"") + (fullReason)) + '\'') + "", label='"") + (label)) + '\'') + '}'; }",b618476e447bf5ff620ba55b154803144aa7cc99,"@java.lang.Override public java.lang.String toString() { return ((((((((""SubmitRequirement{"" + ""fallbackText='"") + (fallbackText)) + '\'') + "", type='"") + (type)) + '\'') + "", data="") + (data)) + '}'; }",40b14d7e66018ada1eb723a8f1cb885b0f631db4,"abstract com.google.gerrit.common.data.SubmitRequirement.Builder setData(com.google.common.collect.ImmutableMap<java.lang.String, java.lang.String> value);",5d7d572444cf602e74bfab0cb65519742694c15c,2018-04-09 14:40:24,13
169851,java_com_google_gerrit_common_data_SubmitRequirement.java,"@java.lang.Override public int hashCode() { return java.util.Objects.hash(shortReason, fullReason, label); }",2f6d140659b4cdaea6bc1dd6f7f60d63563488ba,"@java.lang.Override public int hashCode() { return java.util.Objects.hash(fallbackText, type, data); }",0640d5dd9d36d02db6b2603da43e8dbf0ee257c9,private static boolean validateType(java.lang.String type) { return com.google.gerrit.common.data.SubmitRequirement.TYPE_MATCHER.matchesAllOf(type); },d0cdcc3b881c14f8297644bdb9338b73df74f96f,2018-04-09 14:40:24,13
169851,java_com_google_gerrit_common_data_SubmitRequirement.java,public java.lang.String fullReason() { return fullReason; },5b873bd763ce138cf87d6e49da08d62121f1170d,public java.lang.String type() { return type; },8c29883cafd52032fbc8841c45228b4c0d4621cf,public abstract java.lang.String type();,12b6f4309afb561c974ada7cca8505897a8d210c,2018-04-09 14:40:24,13
170810,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_IndexStartCommand.java,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.startReindexer(name, force)) { stdout.println(""Reindexer started""); } else { stdout.println(""Nothing to reindex, index is already the latest version""); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die((""Failed to start reindexer: "" + (e.getMessage()))); } }",8cfcdfc8e90319c1676cbfa00fd2e6b964442bb3,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.isKnownIndex(name)) { if (versionManager.startReindexer(name, force)) { stdout.println(""Reindexer started""); } else { stdout.println(""Nothing to reindex, index is already the latest version""); } } else { stdout.println(""Cannot reindex, index is unknown based on this name""); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die((""Failed to start reindexer: "" + (e.getMessage()))); } }",6c1bd43ddc3f9ce57221368bd1c66d03a18e01bd,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.isKnownIndex(name)) { if (versionManager.startReindexer(name, force)) { stdout.println(""Reindexer started""); } else { stdout.println(""Nothing to reindex, index is already the latest version""); } } else { stderr.println(""Cannot reindex, index is unknown based on this name""); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die((""Failed to start reindexer: "" + (e.getMessage()))); } }",c646aeebeb4f2b056d4c5d2de9f6351454305514,2018-04-10 01:09:54,3
170810,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_IndexActivateCommand.java,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.activateLatestIndex(name)) { stdout.println(""Activated latest index version""); } else { stdout.println(""Not activating index, already using latest version""); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die((""Failed to activate latest index: "" + (e.getMessage()))); } }",d68b404a2863ecd579b1b69900f421cad525b3d5,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.isKnownIndex(name)) { if (versionManager.activateLatestIndex(name)) { stdout.println(""Activated latest index version""); } else { stdout.println(""Not activating index, already using latest version""); } } else { stdout.println(""Cannot activate index, unknown based on this name""); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die((""Failed to activate latest index: "" + (e.getMessage()))); } }",5101c3c4fe73cabc5a31ecc2fe7e219c2ae6b1e2,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.isKnownIndex(name)) { if (versionManager.activateLatestIndex(name)) { stdout.println(""Activated latest index version""); } else { stdout.println(""Not activating index, already using latest version""); } } else { stderr.println(""Cannot activate index, unknown based on this name""); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die((""Failed to activate latest index: "" + (e.getMessage()))); } }",506cbe75c9bb13b222e3f4d3d9b134079859ef33,2018-04-10 01:09:54,3
170150,java_com_google_gerrit_server_restapi_account_PutHttpPassword.java,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String userName = user.getUserName().orElseThrow(() -> new com.google.gerrit.extensions.restapi.ResourceConflictException(""username must be set"")); com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.restapi.account.SCHEME_USERNAME, userName)); if (extId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } accountsUpdateProvider.get().update(""Set HTTP Password via API"", extId.accountId(), ( u) -> u.updateExternalId(com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.accountId(), extId.email(), newPassword))); return com.google.common.base.Strings.isNullOrEmpty(newPassword) ? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }",28a617eceecef3354e7b809e77458e0622563023,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String userName = user.getUserName().orElseThrow(() -> new com.google.gerrit.extensions.restapi.ResourceConflictException(""username must be set"")); java.util.Optional<com.google.gerrit.server.account.externalids.ExternalId> optionalExtId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.restapi.account.SCHEME_USERNAME, userName)); if (!(optionalExtId.isPresent())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId extId = optionalExtId.get(); accountsUpdateProvider.get().update(""Set HTTP Password via API"", extId.accountId(), ( u) -> u.updateExternalId(com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.accountId(), extId.email(), newPassword))); return com.google.common.base.Strings.isNullOrEmpty(newPassword) ? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }",95e8cdc723aab56247c8c9bd4972ed5d159ef9c3,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String userName = user.getUserName().orElseThrow(() -> new com.google.gerrit.extensions.restapi.ResourceConflictException(""username must be set"")); java.util.Optional<com.google.gerrit.server.account.externalids.ExternalId> optionalExtId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.restapi.account.SCHEME_USERNAME, userName)); com.google.gerrit.server.account.externalids.ExternalId extId = optionalExtId.orElseThrow(() -> new com.google.gerrit.extensions.restapi.ResourceNotFoundException()); accountsUpdateProvider.get().update(""Set HTTP Password via API"", extId.accountId(), ( u) -> u.updateExternalId(com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.accountId(), extId.email(), newPassword))); return com.google.common.base.Strings.isNullOrEmpty(newPassword) ? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }",d6ac0d6eb9fc36e2a5ea72049958254a74f654bd,2018-04-10 08:10:29,3
170150,javatests_com_google_gerrit_server_query_account_AbstractQueryAccountsTest.java,"@org.junit.Test public void rawDocument() throws java.lang.Exception { com.google.gerrit.extensions.common.AccountInfo userInfo = gApi.accounts().id(admin.getAccountId().get()).get(); java.util.Optional<com.google.gerrit.index.query.FieldBundle> rawFields = indexes.getSearchIndex().getRaw(new com.google.gerrit.reviewdb.client.Account.Id(userInfo._accountId), com.google.gerrit.index.QueryOptions.create(com.google.gerrit.index.IndexConfig.createDefault(), 0, 1, indexes.getSearchIndex().getSchema().getStoredFields().keySet())); assertThat(rawFields).isPresent(); assertThat(rawFields.get().getValue(AccountField.ID)).isEqualTo(userInfo._accountId); if ((getSchemaVersion()) < 6) { return; } java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> externalIdInfos = gApi.accounts().self().getExternalIds(); java.util.List<com.google.gerrit.server.query.account.AbstractQueryAccountsTest.ByteArrayWrapper> blobs = new java.util.ArrayList<>(); for (com.google.gerrit.extensions.common.AccountExternalIdInfo info : externalIdInfos) { blobs.add(new com.google.gerrit.server.query.account.AbstractQueryAccountsTest.ByteArrayWrapper(externalIds.get(ExternalId.Key.parse(info.identity)).toByteArray())); } assertThat(rawFields.get().getValue(AccountField.EXTERNAL_ID_STATE)).hasSize(blobs.size()); assertThat(com.google.common.collect.Streams.stream(rawFields.get().getValue(AccountField.EXTERNAL_ID_STATE)).map(( b) -> new com.google.gerrit.server.query.account.ByteArrayWrapper(b)).collect(java.util.stream.Collectors.toList())).containsExactlyElementsIn(blobs); }",027ae89889004de72b2dbcf74ac45be743cec4fa,"@org.junit.Test public void rawDocument() throws java.lang.Exception { com.google.gerrit.extensions.common.AccountInfo userInfo = gApi.accounts().id(admin.getAccountId().get()).get(); java.util.Optional<com.google.gerrit.index.query.FieldBundle> rawFields = indexes.getSearchIndex().getRaw(new com.google.gerrit.reviewdb.client.Account.Id(userInfo._accountId), com.google.gerrit.index.QueryOptions.create(com.google.gerrit.index.IndexConfig.createDefault(), 0, 1, indexes.getSearchIndex().getSchema().getStoredFields().keySet())); assertThat(rawFields).isPresent(); assertThat(rawFields.get().getValue(AccountField.ID)).isEqualTo(userInfo._accountId); if ((getSchemaVersion()) < 6) { return; } java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> externalIdInfos = gApi.accounts().self().getExternalIds(); java.util.List<com.google.gerrit.server.query.account.AbstractQueryAccountsTest.ByteArrayWrapper> blobs = new java.util.ArrayList<>(); for (com.google.gerrit.extensions.common.AccountExternalIdInfo info : externalIdInfos) { java.util.Optional<com.google.gerrit.server.account.externalids.ExternalId> extId = externalIds.get(ExternalId.Key.parse(info.identity)); assertThat(extId.isPresent()).isTrue(); blobs.add(new com.google.gerrit.server.query.account.AbstractQueryAccountsTest.ByteArrayWrapper(extId.get().toByteArray())); } assertThat(rawFields.get().getValue(AccountField.EXTERNAL_ID_STATE)).hasSize(blobs.size()); assertThat(com.google.common.collect.Streams.stream(rawFields.get().getValue(AccountField.EXTERNAL_ID_STATE)).map(( b) -> new com.google.gerrit.server.query.account.ByteArrayWrapper(b)).collect(java.util.stream.Collectors.toList())).containsExactlyElementsIn(blobs); }",0195b823f7685af1b67896b0a02fcef156a3862f,"@org.junit.Test public void rawDocument() throws java.lang.Exception { com.google.gerrit.extensions.common.AccountInfo userInfo = gApi.accounts().id(admin.getAccountId().get()).get(); java.util.Optional<com.google.gerrit.index.query.FieldBundle> rawFields = indexes.getSearchIndex().getRaw(new com.google.gerrit.reviewdb.client.Account.Id(userInfo._accountId), com.google.gerrit.index.QueryOptions.create(com.google.gerrit.index.IndexConfig.createDefault(), 0, 1, indexes.getSearchIndex().getSchema().getStoredFields().keySet())); assertThat(rawFields).isPresent(); assertThat(rawFields.get().getValue(AccountField.ID)).isEqualTo(userInfo._accountId); if ((getSchemaVersion()) < 6) { return; } java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> externalIdInfos = gApi.accounts().self().getExternalIds(); java.util.List<com.google.gerrit.server.query.account.AbstractQueryAccountsTest.ByteArrayWrapper> blobs = new java.util.ArrayList<>(); for (com.google.gerrit.extensions.common.AccountExternalIdInfo info : externalIdInfos) { java.util.Optional<com.google.gerrit.server.account.externalids.ExternalId> extId = externalIds.get(ExternalId.Key.parse(info.identity)); assertThat(extId).isPresent(); blobs.add(new com.google.gerrit.server.query.account.AbstractQueryAccountsTest.ByteArrayWrapper(extId.get().toByteArray())); } assertThat(rawFields.get().getValue(AccountField.EXTERNAL_ID_STATE)).hasSize(blobs.size()); assertThat(com.google.common.collect.Streams.stream(rawFields.get().getValue(AccountField.EXTERNAL_ID_STATE)).map(( b) -> new com.google.gerrit.server.query.account.ByteArrayWrapper(b)).collect(java.util.stream.Collectors.toList())).containsExactlyElementsIn(blobs); }",ded24a6f0d453fffe080e2420a3017d5f1f4c71d,2018-04-10 08:10:29,3
169195,java_com_google_gerrit_server_restapi_project_DeleteTag.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String tag = com.google.gerrit.server.project.RefUtil.normalizeTagRef(resource.getTagInfo().ref); permissionBackend.currentUser().project(resource.getNameKey()).ref(tag).check(RefPermission.DELETE); resource.getProjectState().checkStatePermitsWrite(); deleteRefFactory.create(resource).ref(tag).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }",c9c3b8a1609acd14302f0caef11f0dd2e8071294,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String tag = com.google.gerrit.server.project.RefUtil.normalizeTagRef(resource.getTagInfo().ref); if (com.google.gerrit.reviewdb.client.RefNames.isMetaConfigRef(tag)) { throw new com.google.gerrit.extensions.restapi.AuthException((""not allowed to delete "" + tag)); } permissionBackend.currentUser().project(resource.getNameKey()).ref(tag).check(RefPermission.DELETE); resource.getProjectState().checkStatePermitsWrite(); deleteRefFactory.create(resource).ref(tag).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }",108033bf4750599afb999253f54452fcad8eb2d8,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String tag = com.google.gerrit.server.project.RefUtil.normalizeTagRef(resource.getTagInfo().ref); if (isConfigRef(tag)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException((""not allowed to delete "" + tag)); } permissionBackend.currentUser().project(resource.getNameKey()).ref(tag).check(RefPermission.DELETE); resource.getProjectState().checkStatePermitsWrite(); deleteRefFactory.create(resource).ref(tag).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }",1375dc05970b1ea77dc7c8ffdbceaf952eb5648b,2018-04-10 09:49:13,4
169195,java_com_google_gerrit_server_restapi_project_DeleteBranch.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { permissionBackend.currentUser().ref(rsrc.getBranchKey()).check(RefPermission.DELETE); rsrc.getProjectState().checkStatePermitsWrite(); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""branch "" + (rsrc.getBranchKey())) + "" has open changes"")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.restapi.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }",a07be3451a9af705fcd0b862461d3e021c589dc8,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (com.google.gerrit.reviewdb.client.RefNames.isMetaConfigRef(rsrc.getBranchKey().get())) { throw new com.google.gerrit.extensions.restapi.AuthException((""not allowed to delete branch "" + (rsrc.getBranchKey().get()))); } permissionBackend.currentUser().ref(rsrc.getBranchKey()).check(RefPermission.DELETE); rsrc.getProjectState().checkStatePermitsWrite(); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""branch "" + (rsrc.getBranchKey())) + "" has open changes"")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.restapi.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }",4b3f9b2d07c69aa5fd160058a84a751c91c9d999,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (isConfigRef(rsrc.getBranchKey().get())) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException((""not allowed to delete branch "" + (rsrc.getBranchKey().get()))); } permissionBackend.currentUser().ref(rsrc.getBranchKey()).check(RefPermission.DELETE); rsrc.getProjectState().checkStatePermitsWrite(); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""branch "" + (rsrc.getBranchKey())) + "" has open changes"")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.restapi.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }",032ee729fa930b68a7236d87a7dd2fdfb14f6c2e,2018-04-10 09:49:13,4
169195,java_com_google_gerrit_reviewdb_client_RefNames.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static boolean isMetaConfigRef(java.lang.String ref) { return com.google.gerrit.reviewdb.client.RefNames.REFS_CONFIG.equals(ref); },4ece2925b09075eb310aa0f0bb96b58fe555f864,public static boolean isConfigRef(java.lang.String ref) { return com.google.gerrit.reviewdb.client.RefNames.REFS_CONFIG.equals(ref); },d164a2a3976861f81940d81b817271537285676b,2018-04-10 09:49:13,4
169195,java_com_google_gerrit_server_git_receive_ReceiveCommits.java,private boolean canDelete(org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gerrit.server.permissions.PermissionBackendException { try { permissions.ref(cmd.getRefName()).check(RefPermission.DELETE); return projectState.statePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } },ed69b0758b79828905cefbe3e5246ac81483ed61,private boolean canDelete(org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gerrit.server.permissions.PermissionBackendException { if (com.google.gerrit.reviewdb.client.RefNames.isMetaConfigRef(cmd.getRefName())) { return false; } try { permissions.ref(cmd.getRefName()).check(RefPermission.DELETE); return projectState.statePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } },a933c0ff4b1dc12075c43d3fe80b1a1888ca3991,private boolean canDelete(org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gerrit.server.permissions.PermissionBackendException { if (isConfigRef(cmd.getRefName())) { return false; } try { permissions.ref(cmd.getRefName()).check(RefPermission.DELETE); return projectState.statePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } },297e11c2d32a0f2202ff077dcaf3a808889d377b,2018-04-10 09:49:13,4
169195,java_com_google_gerrit_server_restapi_project_ListBranches.java,"private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId()) != null) ? ref.getObjectId().name() : null; info.canDelete = (((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE))) && (projectState.statePermitsWrite())) ? true : null; com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = new java.util.TreeMap(); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty()) ? null : links; return info; }",fb46b638ed935d0b643ebad5ec7c3c4f1e8b39e8,"private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId()) != null) ? ref.getObjectId().name() : null; if (com.google.gerrit.reviewdb.client.RefNames.isMetaConfigRef(ref.getName())) { info.canDelete = null; } else { info.canDelete = (((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE))) && (projectState.statePermitsWrite())) ? true : null; } com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = new java.util.TreeMap(); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty()) ? null : links; return info; }",feb66d944fd1d0dc6df110a596a5e88f27a924dd,"private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId()) != null) ? ref.getObjectId().name() : null; if (isConfigRef(ref.getName())) { info.canDelete = null; } else { info.canDelete = (((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE))) && (projectState.statePermitsWrite())) ? true : null; } com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = new java.util.TreeMap(); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty()) ? null : links; return info; }",54b0a15e42cdaaf1ddb47428a4e61b21c05d668d,2018-04-10 09:49:13,4
170692,src_test_java_com_ericsson_gerrit_plugins_eventslog_sql_SQLStoreTest.java,"@org.junit.Test public void storeThenQueryNotVisible() throws java.lang.Exception { when(permissionBackendMock.user(userProviderMock)).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("""")).when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); tearDown(); }",169b92ff92c511fd2ea7eb5b0b054c0ebffb5705,"@org.junit.Test public void storeThenQueryNotVisible() throws java.lang.Exception { when(permissionBackendMock.user(userProviderMock.get())).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("""")).when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }",118ad59f3767ef58456193a2392fb9edf43eae40,"@org.junit.Test public void storeThenQueryNotVisible() throws java.lang.Exception { when(permissionBackendMock.currentUser()).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("""")).when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }",1c2f0502a08cf1c8dc1052bb4d3aeb2901ccb582,2018-04-10 12:17:33,4
170692,src_test_java_com_ericsson_gerrit_plugins_eventslog_sql_SQLStoreTest.java,@org.junit.Test public void storeThenQueryVisible() throws java.lang.Exception { when(permissionBackendMock.user(userProviderMock)).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doNothing().when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); java.lang.String json = new com.google.gson.Gson().toJson(mockEvent); assertThat(events).containsExactly(json); tearDown(); },23efbb5c32672efe170012f6ed869c2de0f25f67,@org.junit.Test public void storeThenQueryVisible() throws java.lang.Exception { when(permissionBackendMock.user(userProviderMock.get())).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doNothing().when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); java.lang.String json = new com.google.gson.Gson().toJson(mockEvent); assertThat(events).containsExactly(json); },2b9e4caa3d0a24996856067ea233fb9c4702b54b,@org.junit.Test public void storeThenQueryVisible() throws java.lang.Exception { when(permissionBackendMock.currentUser()).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doNothing().when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); java.lang.String json = new com.google.gson.Gson().toJson(mockEvent); assertThat(events).containsExactly(json); },2604736126d5a769cde384f196ff13cec2e43789,2018-04-10 12:17:33,4
170692,src_main_java_com_ericsson_gerrit_plugins_eventslog_sql_SQLStore.java,"@java.lang.Override public java.util.List<java.lang.String> queryChangeEvents(java.lang.String query) throws com.ericsson.gerrit.plugins.eventslog.EventsLogException { if (!(online)) { throw new com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException(); } java.util.List<com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry> entries = new java.util.ArrayList<>(); for (java.util.Map.Entry<java.lang.String, java.util.Collection<com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry>> entry : eventsDb.getEvents(query).asMap().entrySet()) { java.lang.String projectName = entry.getKey(); try { permissionBackend.user(userProvider).project(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName)).check(ProjectPermission.ACCESS); entries.addAll(entry.getValue()); } catch (com.google.gerrit.extensions.restapi.AuthException e) { } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.ericsson.gerrit.plugins.eventslog.sql.SQLStore.log.warn(""Cannot check project access permission"", e); } } return sortedEventsFromEntries(entries); }",4a2bcec89981364e5b177612fcd9283cc1456bc1,"@java.lang.Override public java.util.List<java.lang.String> queryChangeEvents(java.lang.String query) throws com.ericsson.gerrit.plugins.eventslog.EventsLogException { if (!(online)) { throw new com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException(); } java.util.List<com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry> entries = new java.util.ArrayList<>(); for (java.util.Map.Entry<java.lang.String, java.util.Collection<com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry>> entry : eventsDb.getEvents(query).asMap().entrySet()) { java.lang.String projectName = entry.getKey(); try { permissionBackend.user(userProvider.get()).project(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName)).check(ProjectPermission.ACCESS); entries.addAll(entry.getValue()); } catch (com.google.gerrit.extensions.restapi.AuthException e) { } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.ericsson.gerrit.plugins.eventslog.sql.SQLStore.log.warn(""Cannot check project access permission"", e); } } return sortedEventsFromEntries(entries); }",e5c91da317349958a968276128a65f0551a723c4,"@java.lang.Override public java.util.List<java.lang.String> queryChangeEvents(java.lang.String query) throws com.ericsson.gerrit.plugins.eventslog.EventsLogException { if (!(online)) { throw new com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException(); } java.util.List<com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry> entries = new java.util.ArrayList<>(); for (java.util.Map.Entry<java.lang.String, java.util.Collection<com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry>> entry : eventsDb.getEvents(query).asMap().entrySet()) { java.lang.String projectName = entry.getKey(); try { permissionBackend.currentUser().project(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName)).check(ProjectPermission.ACCESS); entries.addAll(entry.getValue()); } catch (com.google.gerrit.extensions.restapi.AuthException e) { } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.ericsson.gerrit.plugins.eventslog.sql.SQLStore.log.warn(""Cannot check project access permission"", e); } } return sortedEventsFromEntries(entries); }",64b4b3875d15af98c0ebaa737defd1871b711d6b,2018-04-10 12:17:33,4
170692,src_test_java_com_ericsson_gerrit_plugins_eventslog_sql_SQLStoreTest.java,"@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throws java.lang.Exception { when(permissionBackendMock.user(userProviderMock)).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("""")).when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); tearDown(); }",a6264da1d09c0d568743c507091dbab9a6c43bb6,"@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throws java.lang.Exception { when(permissionBackendMock.user(userProviderMock.get())).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("""")).when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }",38462d1a13beec292f287717a7b0f38276f5e4d7,"@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throws java.lang.Exception { when(permissionBackendMock.currentUser()).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("""")).when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }",17785b2213e73d4a235b5866e6ca86f93baddc91,2018-04-10 12:17:33,4
158871,java_com_google_gitiles_doc_Navbar.java,private java.lang.Object logo() { if ((logoUrl) == null) { return null; } java.lang.String url = fmt.image(logoUrl); if (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(url)) { return url; } else if (com.google.gitiles.doc.html.HtmlBuilder.isImageDataUri(url)) { return com.google.template.soy.shared.restricted.Sanitizers.filterImageDataUri(url); } else { return FilterImageDataUri.INSTANCE.getInnocuousOutput(); } },d8a7c929c60f3862dbaa112b64c69c57c66ef4b1,private java.lang.Object logo() { if ((logoUrl) == null) { return null; } java.lang.String url = fmt.image(logoUrl); if (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(url)) { return url; } else if (com.google.gitiles.doc.html.HtmlBuilder.isImageDataUri(url)) { return com.google.template.soy.shared.internal.Sanitizers.filterImageDataUri(url); } else { return SharedUtility.IMAGE_URI_INNOCUOUS_OUTPUT; } },61660d27b8a313e907eecbeb2cb80a24a27b33f1,private java.lang.Object logo() { if ((logoUrl) == null) { return null; } java.lang.String url = fmt.image(logoUrl); if (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(url)) { return url; } else if (com.google.gitiles.doc.html.HtmlBuilder.isImageDataUri(url)) { return com.google.template.soy.shared.internal.Sanitizers.filterImageDataUri(url); } else { return SoyConstants.IMAGE_URI_INNOCUOUS_OUTPUT; } },df292aaa164dc5dfd9a552a2143e3da008a82941,2018-04-11 05:03:18,5
158871,java_com_google_gitiles_doc_ImageLoader.java,"java.lang.String inline(@javax.annotation.Nullable java.lang.String markdownPath, java.lang.String imagePath) { java.lang.String data = inlineMaybe(markdownPath, imagePath); if (data != null) { return data; } return FilterImageDataUri.INSTANCE.getInnocuousOutput(); }",4b32866999c5756fc074bbf0249cdc9e24947781,"java.lang.String inline(@javax.annotation.Nullable java.lang.String markdownPath, java.lang.String imagePath) { java.lang.String data = inlineMaybe(markdownPath, imagePath); if (data != null) { return data; } return SharedUtility.IMAGE_URI_INNOCUOUS_OUTPUT; }",23eb659d909c5cb51145755d0df46612dc84808d,"java.lang.String inline(@javax.annotation.Nullable java.lang.String markdownPath, java.lang.String imagePath) { java.lang.String data = inlineMaybe(markdownPath, imagePath); if (data != null) { return data; } return SoyConstants.IMAGE_URI_INNOCUOUS_OUTPUT; }",31685266388acfb333df6408f9dcb3dfe8211db1,2018-04-11 05:03:18,5
158871,java_com_google_gitiles_doc_MarkdownToHtml.java,"@com.google.common.annotations.VisibleForTesting java.lang.String href(java.lang.String target) { if (((target.startsWith(""#"")) || (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(target))) || (com.google.gitiles.doc.html.HtmlBuilder.isValidMailtoUri(target))) { return target; } else if (target.startsWith(""git:"")) { if (com.google.gitiles.doc.html.HtmlBuilder.isValidGitUri(target)) { return target; } return FilterNormalizeUri.INSTANCE.getInnocuousOutput(); } java.lang.String anchor = """"; int hash = target.indexOf('#'); if (hash >= 0) { anchor = target.substring(hash); target = target.substring(0, hash); } java.lang.String dest = com.google.gitiles.doc.PathResolver.resolve(filePath, target); if ((dest == null) || ((view) == null)) { return FilterNormalizeUri.INSTANCE.getInnocuousOutput(); } com.google.gitiles.GitilesView.Builder b; if ((view.getType()) == (GitilesView.Type.ROOTED_DOC)) { b = com.google.gitiles.GitilesView.rootedDoc(); } else { b = com.google.gitiles.GitilesView.path(); } dest = b.copyFrom(view).setPathPart(dest).build().toUrl(); return (com.google.gitiles.doc.PathResolver.relative(requestUri, dest)) + anchor; }",a52b286b11c7d7c970ed0a16be05e86206e372f1,"@com.google.common.annotations.VisibleForTesting java.lang.String href(java.lang.String target) { if (((target.startsWith(""#"")) || (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(target))) || (com.google.gitiles.doc.html.HtmlBuilder.isValidMailtoUri(target))) { return target; } else if (target.startsWith(""git:"")) { if (com.google.gitiles.doc.html.HtmlBuilder.isValidGitUri(target)) { return target; } return SharedUtility.NORMAL_URI_INNOCUOUS_OUTPUT; } java.lang.String anchor = """"; int hash = target.indexOf('#'); if (hash >= 0) { anchor = target.substring(hash); target = target.substring(0, hash); } java.lang.String dest = com.google.gitiles.doc.PathResolver.resolve(filePath, target); if ((dest == null) || ((view) == null)) { return SharedUtility.NORMAL_URI_INNOCUOUS_OUTPUT; } com.google.gitiles.GitilesView.Builder b; if ((view.getType()) == (GitilesView.Type.ROOTED_DOC)) { b = com.google.gitiles.GitilesView.rootedDoc(); } else { b = com.google.gitiles.GitilesView.path(); } dest = b.copyFrom(view).setPathPart(dest).build().toUrl(); return (com.google.gitiles.doc.PathResolver.relative(requestUri, dest)) + anchor; }",45dd7a5b1379b5d5291c0ff870f8a3aa98ed8ec6,"@com.google.common.annotations.VisibleForTesting java.lang.String href(java.lang.String target) { if (((target.startsWith(""#"")) || (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(target))) || (com.google.gitiles.doc.html.HtmlBuilder.isValidMailtoUri(target))) { return target; } else if (target.startsWith(""git:"")) { if (com.google.gitiles.doc.html.HtmlBuilder.isValidGitUri(target)) { return target; } return SoyConstants.NORMAL_URI_INNOCUOUS_OUTPUT; } java.lang.String anchor = """"; int hash = target.indexOf('#'); if (hash >= 0) { anchor = target.substring(hash); target = target.substring(0, hash); } java.lang.String dest = com.google.gitiles.doc.PathResolver.resolve(filePath, target); if ((dest == null) || ((view) == null)) { return SoyConstants.NORMAL_URI_INNOCUOUS_OUTPUT; } com.google.gitiles.GitilesView.Builder b; if ((view.getType()) == (GitilesView.Type.ROOTED_DOC)) { b = com.google.gitiles.GitilesView.rootedDoc(); } else { b = com.google.gitiles.GitilesView.path(); } dest = b.copyFrom(view).setPathPart(dest).build().toUrl(); return (com.google.gitiles.doc.PathResolver.relative(requestUri, dest)) + anchor; }",3b3bf1489885e6cb9fb38b4042c527a791358511,2018-04-11 05:03:18,5
158871,java_com_google_gitiles_doc_MarkdownToHtml.java,"java.lang.String image(java.lang.String dest) { if ((com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(dest)) || (com.google.gitiles.doc.html.HtmlBuilder.isImageDataUri(dest))) { return dest; } else if ((imageLoader) != null) { return imageLoader.inline(filePath, dest); } return FilterImageDataUri.INSTANCE.getInnocuousOutput(); }",17d7a867f63c5da701071d1f840ebb0ca5149bfa,"java.lang.String image(java.lang.String dest) { if ((com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(dest)) || (com.google.gitiles.doc.html.HtmlBuilder.isImageDataUri(dest))) { return dest; } else if ((imageLoader) != null) { return imageLoader.inline(filePath, dest); } return SharedUtility.IMAGE_URI_INNOCUOUS_OUTPUT; }",91430b6b403f357c0ae53a241f3ce5a1fba9a3ab,"java.lang.String image(java.lang.String dest) { if ((com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(dest)) || (com.google.gitiles.doc.html.HtmlBuilder.isImageDataUri(dest))) { return dest; } else if ((imageLoader) != null) { return imageLoader.inline(filePath, dest); } return SoyConstants.IMAGE_URI_INNOCUOUS_OUTPUT; }",464b7b5e518943a23acc9c323b92e47debc24040,2018-04-11 05:03:18,5
170272,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_account_ImpersonationIT.java,"@org.junit.Test public void voteOnBehalfOfInvalidLabel() throws java.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id.toString(); in.label(""Not-A-Label"", 5); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(""label \""Not-A-Label\"" is not a configured label""); revision.review(in); }",b1e441f4075f82c1208aed29193f38d9d5b4e6e6,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""change.strictLabels"", value = ""true"") public void voteOnBehalfOfInvalidLabel() throws java.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id.toString(); in.label(""Not-A-Label"", 5); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(""label \""Not-A-Label\"" is not a configured label""); revision.review(in); }",3324f76090df64deade6cf64533feb05e77eff87,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""change.strictLabels"", value = ""true"") public void voteOnBehalfOfInvalidLabel() throws java.lang.Exception { allowCodeReviewOnBehalfOf(); java.lang.String changeId = createChange().getChangeId(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput().label(""Not-A-Label"", 5); in.onBehalfOf = user.id.toString(); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(""label \""Not-A-Label\"" is not a configured label""); gApi.changes().id(changeId).current().review(in); }",6bdfaac53e9cc2c6e61a58654655b9e2ad440107,2018-04-11 23:54:53,5
170272,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""change.strictLabels"", value = ""true"") public void strictLabelVotes() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.label(""Verified"", (-1)); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(""label \""Verified\"" is not a configured label""); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); }",1c629ca286efdc1d2751929e82448d1f300ddd54,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""change.strictLabels"", value = ""true"") public void strictLabelWithInvalidLabel() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput().label(""Code-Style"", 1); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(""label \""Code-Style\"" is not a configured label""); gApi.changes().id(changeId).current().review(in); }",bf83c1a736eebca437dccc89418d480a3e96cbf4,2018-04-11 23:54:53,5
170272,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void nonStrictLabelVotesPerDefault() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus(); java.lang.String changeId = r.getChangeId(); com.google.gerrit.extensions.api.changes.ReviewInput in = com.google.gerrit.extensions.api.changes.ReviewInput.approve(); in.label(""Verified"", (-1)); in.label(""Code-Style"", 1); in.label(""Library-Compliance"", (-1)); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().keySet()).containsExactly(""Code-Review""); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().values()).containsExactly(((short) (2))); assertThat(gApi.changes().id(changeId).get().submittable).isTrue(); in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.label(""Code-Review"", 42); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().values()).containsExactly(((short) (2))); }",d4362a29155dcc28c5b6126aed796dfe5d30f231,"@org.junit.Test public void nonStrictLabelWithInvalidLabelPerDefault() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); com.google.gerrit.extensions.api.changes.ReviewInput input = com.google.gerrit.extensions.api.changes.ReviewInput.approve().label(""Code-Style"", 1); gApi.changes().id(changeId).current().review(input); java.util.Map<java.lang.String, java.lang.Short> votes = gApi.changes().id(changeId).current().reviewer(admin.email).votes(); assertThat(votes.keySet()).containsExactly(""Code-Review""); assertThat(votes.values()).containsExactly(((short) (2))); }",82380e81778f27be8e63782d71f1fca68b3ac862,2018-04-11 23:54:53,5
170272,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_account_ImpersonationIT.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void voteOnBehalfOfInvalidLabelIgnoredWithoutStrictLabels() throws java.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id.toString(); in.label(""Code-Review"", 1); in.label(""Not-A-Label"", 5); revision.review(in); assertThat(gApi.changes().id(r.getChangeId()).get().labels).doesNotContainKey(""Not-A-Label""); }",91add43628cf109e4bb1957cc8f53cc77c9eb65c,"@org.junit.Test public void voteOnBehalfOfInvalidLabelIgnoredWithoutStrictLabels() throws java.lang.Exception { allowCodeReviewOnBehalfOf(); java.lang.String changeId = createChange().getChangeId(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput().label(""Code-Review"", 1).label(""Not-A-Label"", 5); in.onBehalfOf = user.id.toString(); gApi.changes().id(changeId).current().review(in); assertThat(gApi.changes().id(changeId).get().labels).doesNotContainKey(""Not-A-Label""); }",58a219ce03a4970aa97f831253894e81172b51de,2018-04-11 23:54:53,5
171351,java_com_google_gerrit_server_restapi_account_GetCapabilities.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.account.AccountResource.Capability resource) { return com.google.gerrit.extensions.restapi.BinaryResult.create(""ok\n""); }",984f782ba5ca5d1a614ddd106748364d51b06bbc,"@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.account.AccountResource.Capability resource) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { permissionBackend.checkDefault(); return com.google.gerrit.extensions.restapi.BinaryResult.create(""ok\n""); }",e5c6fc0bb4885efdf54e526667e7991f573502e6,"@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.account.AccountResource.Capability resource) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { permissionBackend.checkUsesDefaultCapabilities(); return com.google.gerrit.extensions.restapi.BinaryResult.create(""ok\n""); }",e300f720a27a2925c596d77e73b5a4166dafb066,2018-04-12 18:59:45,4
171453,java_com_google_gerrit_server_permissions_ChangeControl.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private static java.lang.String changePermissionName(com.google.gerrit.server.permissions.ChangePermission changePermission) { return com.google.gerrit.server.permissions.DefaultPermissionMappings.changePermissionName(changePermission).orElseThrow(() -> new java.lang.IllegalStateException()); },39faa404b6896aa228445373384a7a78ce6b65fc,"private static java.lang.String changePermissionName(com.google.gerrit.server.permissions.ChangePermission changePermission) { return com.google.gerrit.server.permissions.DefaultPermissionMappings.changePermissionName(changePermission).orElseThrow(() -> new java.lang.IllegalStateException((""no name for "" + changePermission))); }",42af827d508e9915d29b88bc89e3a59f1956702a,2018-04-12 18:59:45,3
171452,java_com_google_gerrit_server_permissions_RefControl.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private static java.lang.String refPermissionName(com.google.gerrit.server.permissions.RefPermission refPermission) { return com.google.gerrit.server.permissions.DefaultPermissionMappings.refPermissionName(refPermission).orElseThrow(() -> new java.lang.IllegalStateException()); },3d1d127c9dd48878c027b98976b7a0ed251c6903,"private static java.lang.String refPermissionName(com.google.gerrit.server.permissions.RefPermission refPermission) { return com.google.gerrit.server.permissions.DefaultPermissionMappings.refPermissionName(refPermission).orElseThrow(() -> new java.lang.IllegalStateException((""no name for "" + refPermission))); }",abc133ca7f4af93516827102949e1c0f109ea731,2018-04-12 18:59:45,3
171351,java_com_google_gerrit_server_restapi_account_GetCapabilities.java,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.currentUser(); if ((self.get()) != (rsrc.getUser())) { perm.check(GlobalPermission.ADMINISTRATE_SERVER); perm = permissionBackend.user(rsrc.getUser()); } java.util.Map<java.lang.String, java.lang.Object> have = new java.util.LinkedHashMap<>(); for (com.google.gerrit.extensions.api.access.GlobalOrPluginPermission p : perm.test(permissionsToTest())) { have.put(p.permissionName(), true); } com.google.gerrit.server.account.AccountLimits limits = limitsFactory.create(rsrc.getUser()); addRanges(have, limits); addPriority(have, limits); return OutputFormat.JSON.newGson().toJsonTree(have, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.Object>>() {}.getType()); }",07223f69dd8a71e5fbbc69971621894ef526c82e,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.checkDefault(); com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.currentUser(); if ((self.get()) != (rsrc.getUser())) { perm.check(GlobalPermission.ADMINISTRATE_SERVER); perm = permissionBackend.user(rsrc.getUser()); } java.util.Map<java.lang.String, java.lang.Object> have = new java.util.LinkedHashMap<>(); for (com.google.gerrit.extensions.api.access.GlobalOrPluginPermission p : perm.test(permissionsToTest())) { have.put(p.permissionName(), true); } com.google.gerrit.server.account.AccountLimits limits = limitsFactory.create(rsrc.getUser()); addRanges(have, limits); addPriority(have, limits); return OutputFormat.JSON.newGson().toJsonTree(have, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.Object>>() {}.getType()); }",5e84778470783e0cb9cc0b7a0b919cc20f476eaa,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.checkUsesDefaultCapabilities(); com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.currentUser(); if ((self.get()) != (rsrc.getUser())) { perm.check(GlobalPermission.ADMINISTRATE_SERVER); perm = permissionBackend.user(rsrc.getUser()); } java.util.Map<java.lang.String, java.lang.Object> have = new java.util.LinkedHashMap<>(); for (com.google.gerrit.extensions.api.access.GlobalOrPluginPermission p : perm.test(permissionsToTest())) { have.put(p.permissionName(), true); } com.google.gerrit.server.account.AccountLimits limits = limitsFactory.create(rsrc.getUser()); addRanges(have, limits); addPriority(have, limits); return OutputFormat.JSON.newGson().toJsonTree(have, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.Object>>() {}.getType()); }",df02f42f2191b60dda38c18dc199fd567904a998,2018-04-12 18:59:45,4
171351,java_com_google_gerrit_server_restapi_account_Capabilities.java,"@java.lang.Override public com.google.gerrit.server.account.AccountResource.Capability parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.server.IdentifiedUser target = parent.getUser(); if ((self.get()) != target) { permissionBackend.currentUser().check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.extensions.api.access.GlobalOrPluginPermission perm = parse(id); if (permissionBackend.user(target).test(perm)) { return new com.google.gerrit.server.account.AccountResource.Capability(target, perm.permissionName()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",8ab5fc738fef19eddbb4f672685cffb2ec0c651a,"@java.lang.Override public com.google.gerrit.server.account.AccountResource.Capability parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.checkDefault(); com.google.gerrit.server.IdentifiedUser target = parent.getUser(); if ((self.get()) != target) { permissionBackend.currentUser().check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.extensions.api.access.GlobalOrPluginPermission perm = parse(id); if (permissionBackend.user(target).test(perm)) { return new com.google.gerrit.server.account.AccountResource.Capability(target, perm.permissionName()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",ae1243df29c1c8f4871a8b807e93e11f8b4791f7,"@java.lang.Override public com.google.gerrit.server.account.AccountResource.Capability parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.checkUsesDefaultCapabilities(); com.google.gerrit.server.IdentifiedUser target = parent.getUser(); if ((self.get()) != target) { permissionBackend.currentUser().check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.extensions.api.access.GlobalOrPluginPermission perm = parse(id); if (permissionBackend.user(target).test(perm)) { return new com.google.gerrit.server.account.AccountResource.Capability(target, perm.permissionName()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",cfe6618b68c80f7f64b9395205a39d990dfd427c,2018-04-12 18:59:45,4
171450,java_com_google_gerrit_server_restapi_account_Capabilities.java,"private com.google.gerrit.extensions.api.access.GlobalOrPluginPermission parse(com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { java.lang.String name = id.get(); com.google.gerrit.extensions.api.access.GlobalOrPluginPermission perm = com.google.gerrit.server.permissions.GlobalPermission.byName(name); if (perm != null) { return perm; } int dash = name.lastIndexOf('-'); if (dash < 0) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } java.lang.String pluginName = name.substring(0, dash); java.lang.String capability = name.substring((dash + 1)); if ((pluginName.isEmpty()) || (capability.isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.extensions.api.access.PluginPermission(pluginName, capability); }",022e9e18600f6cb382cd80e97bab87507d8b2cbc,"private com.google.gerrit.extensions.api.access.GlobalOrPluginPermission parse(com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { java.lang.String name = id.get(); java.util.Optional<com.google.gerrit.server.permissions.GlobalPermission> perm = com.google.gerrit.server.permissions.DefaultPermissionMappings.globalPermission(name); if (perm.isPresent()) { return perm.get(); } int dash = name.lastIndexOf('-'); if (dash < 0) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } java.lang.String pluginName = name.substring(0, dash); java.lang.String capability = name.substring((dash + 1)); if ((pluginName.isEmpty()) || (capability.isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.extensions.api.access.PluginPermission(pluginName, capability); }",f6c2b06c41aa82050b66162162161e24eda946d0,"private com.google.gerrit.extensions.api.access.GlobalOrPluginPermission parse(com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { java.lang.String name = id.get(); java.util.Optional<com.google.gerrit.server.permissions.GlobalPermission> perm = globalPermission(name); if (perm.isPresent()) { return perm.get(); } int dash = name.lastIndexOf('-'); if (dash < 0) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } java.lang.String pluginName = name.substring(0, dash); java.lang.String capability = name.substring((dash + 1)); if ((pluginName.isEmpty()) || (capability.isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.extensions.api.access.PluginPermission(pluginName, capability); }",728dee9577fd7c436e40f45ecc1df8b17722283e,2018-04-12 18:59:45,3
171351,java_com_google_gerrit_server_permissions_PermissionBackend.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean isDefault() { return false; },959151dd2b546d4431b4ca7e6fa8d1da69ad0f7d,public boolean usesDefaultCapabilities() { return false; },fff9b7e04c4f3a2fd2c237eb7a0024c56f7f7ae4,2018-04-12 18:59:45,4
171351,java_com_google_gerrit_server_permissions_PermissionBackend.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void checkDefault() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if (!(isDefault())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""Gerrit permissions not used on this server""); } }",5dcc9fee5d94c6608f1806f8f7d378c126d93427,"public void checkUsesDefaultCapabilities() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if (!(usesDefaultCapabilities())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""Gerrit capabilities not used on this server""); } }",4e3977280ca09c20497cf72f319d010cf60a947b,2018-04-12 18:59:45,4
171351,java_com_google_gerrit_server_restapi_config_ListCapabilities.java,"@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.server.restapi.config.ListCapabilities.CapabilityInfo> apply(com.google.gerrit.server.config.ConfigResource resource) throws java.lang.IllegalAccessException, java.lang.NoSuchFieldException { return com.google.common.collect.ImmutableMap.<java.lang.String, com.google.gerrit.server.restapi.config.ListCapabilities.CapabilityInfo>builder().putAll(collectCoreCapabilities()).putAll(collectPluginCapabilities()).build(); }",fc72e9f1f19ce6a5e36db7fd8d4de83e5c98f6bd,"@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.server.restapi.config.ListCapabilities.CapabilityInfo> apply(com.google.gerrit.server.config.ConfigResource resource) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.lang.IllegalAccessException, java.lang.NoSuchFieldException { permissionBackend.checkDefault(); return com.google.common.collect.ImmutableMap.<java.lang.String, com.google.gerrit.server.restapi.config.ListCapabilities.CapabilityInfo>builder().putAll(collectCoreCapabilities()).putAll(collectPluginCapabilities()).build(); }",a51c37dbcbd7afc66fa4aa7df5181bbe132c5369,"@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.server.restapi.config.ListCapabilities.CapabilityInfo> apply(com.google.gerrit.server.config.ConfigResource resource) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.lang.IllegalAccessException, java.lang.NoSuchFieldException { permissionBackend.checkUsesDefaultCapabilities(); return com.google.common.collect.ImmutableMap.<java.lang.String, com.google.gerrit.server.restapi.config.ListCapabilities.CapabilityInfo>builder().putAll(collectCoreCapabilities()).putAll(collectPluginCapabilities()).build(); }",e3477f104cd52750d481aae333aacc6d6e6d2355,2018-04-12 18:59:45,4
171351,java_com_google_gerrit_server_permissions_DefaultPermissionBackend.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean isDefault() { return true; },fc5caedbef748bc12c39b18c5279a3aa7c4091fc,@java.lang.Override public boolean usesDefaultCapabilities() { return true; },8b0f6f23c90360ae001da6bcd370ed0e0453ccdb,2018-04-12 18:59:45,4
157552,java_com_google_gerrit_server_schema_Schema_124.java,"private java.util.Collection<com.google.gerrit.server.account.AccountSshKey> fixInvalidSequenceNumbers(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> keys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.from(java.util.Comparator.comparing(( k) -> k.getKey().get())); java.util.List<com.google.gerrit.server.account.AccountSshKey> fixedKeys = new java.util.ArrayList(keys); com.google.gerrit.server.account.AccountSshKey minKey = o.min(keys); while ((minKey.getKey().get()) <= 0) { com.google.gerrit.server.account.AccountSshKey fixedKey = new com.google.gerrit.server.account.AccountSshKey(new com.google.gerrit.server.account.AccountSshKey.Id(minKey.getKey().getParentKey(), java.lang.Math.max(((o.max(keys).getKey().get()) + 1), 1)), minKey.getSshPublicKey()); java.util.Collections.replaceAll(fixedKeys, minKey, fixedKey); minKey = o.min(fixedKeys); } return fixedKeys; }",c5783513b53a3b637a529f3581f4d64988b96909,"private java.util.Collection<com.google.gerrit.server.account.AccountSshKey> fixInvalidSequenceNumbers(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> keys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.from(java.util.Comparator.comparing(( k) -> k.id().get())); java.util.List<com.google.gerrit.server.account.AccountSshKey> fixedKeys = new java.util.ArrayList(keys); com.google.gerrit.server.account.AccountSshKey minKey = o.min(keys); while ((minKey.id().get()) <= 0) { com.google.gerrit.server.account.AccountSshKey fixedKey = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(minKey.id().getParentKey(), java.lang.Math.max(((o.max(keys).id().get()) + 1), 1)), minKey.sshPublicKey()); java.util.Collections.replaceAll(fixedKeys, minKey, fixedKey); minKey = o.min(fixedKeys); } return fixedKeys; }",317384cbd481a5995a2befa0c34b48bdd60e229d,"private java.util.Collection<com.google.gerrit.server.account.AccountSshKey> fixInvalidSequenceNumbers(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> keys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.from(java.util.Comparator.comparing(( k) -> k.seq())); java.util.List<com.google.gerrit.server.account.AccountSshKey> fixedKeys = new java.util.ArrayList(keys); com.google.gerrit.server.account.AccountSshKey minKey = o.min(keys); while ((minKey.seq()) <= 0) { com.google.gerrit.server.account.AccountSshKey fixedKey = com.google.gerrit.server.account.AccountSshKey.create(minKey.accountId(), java.lang.Math.max(((o.max(keys).seq()) + 1), 1), minKey.sshPublicKey()); java.util.Collections.replaceAll(fixedKeys, minKey, fixedKey); minKey = o.min(fixedKeys); } return fixedKeys; }",acd3775db2b7de168b0745257222f7ddb92d980e,2018-04-16 12:58:49,5
157552,java_com_google_gerrit_sshd_SshKeyCacheImpl.java,"private void markInvalid(com.google.gerrit.server.account.AccountSshKey k) { try { com.google.gerrit.sshd.SshKeyCacheImpl.log.info(((""Flagging SSH key "" + (k.getKey())) + "" invalid"")); authorizedKeys.markKeyInvalid(k.getAccount(), k.getKey().get()); k.setInvalid(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.sshd.SshKeyCacheImpl.log.error(((""Failed to mark SSH key"" + (k.getKey())) + "" invalid""), e); } }",0224415968a92dfebfc8228def8c6f04f243ad82,"private void markInvalid(com.google.gerrit.server.account.AccountSshKey k) { try { com.google.gerrit.sshd.SshKeyCacheImpl.log.info(((""Flagging SSH key "" + (k.id())) + "" invalid"")); authorizedKeys.markKeyInvalid(k.account(), k.id().get()); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.sshd.SshKeyCacheImpl.log.error(((""Failed to mark SSH key"" + (k.id())) + "" invalid""), e); } }",b944d1dcbf1fea8efcfb0e2039ef5ddba517d0d4,"private void markInvalid(com.google.gerrit.server.account.AccountSshKey k) { try { com.google.gerrit.sshd.SshKeyCacheImpl.log.info(((((""Flagging SSH key "" + (k.seq())) + "" of account "") + (k.accountId())) + "" invalid"")); authorizedKeys.markKeyInvalid(k.accountId(), k.seq()); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.sshd.SshKeyCacheImpl.log.error(((((""Failed to mark SSH key "" + (k.seq())) + "" of account "") + (k.accountId())) + "" invalid""), e); } }",0c887792598522c59876817aeaa1a61d4b700593,2018-04-16 12:58:49,5
157552,java_com_google_gerrit_server_account_VersionedAuthorizedKeys.java,"@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String encoded) { return new com.google.gerrit.server.account.AccountSshKey(id, encoded); }",049ebecae8fd790d6fe480d538b2ca8bc3f2145c,"@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String encoded) { return com.google.gerrit.server.account.AccountSshKey.create(id, encoded); }",29eaed922c28849d0a1a04dce4b19a4161072179,"@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.reviewdb.client.Account.Id accountId, int seq, java.lang.String encoded) { return com.google.gerrit.server.account.AccountSshKey.create(accountId, seq, encoded); }",070968b11ffaa26c02f4b90bdc9d1009c2a71fd7,2018-04-16 12:58:49,5
157552,java_com_google_gerrit_sshd_SshKeyCacheImpl.java,"private void add(java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl, com.google.gerrit.server.account.AccountSshKey k) { try { kl.add(new com.google.gerrit.sshd.SshKeyCacheEntry(k.getKey(), com.google.gerrit.sshd.SshUtil.parse(k))); } catch (java.lang.OutOfMemoryError e) { throw e; } catch (java.lang.Throwable e) { markInvalid(k); } }",fa90e11767eb6be9c0b720e1d64027cd56f7f956,"private void add(java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl, com.google.gerrit.server.account.AccountSshKey k) { try { kl.add(new com.google.gerrit.sshd.SshKeyCacheEntry(k.id(), com.google.gerrit.sshd.SshUtil.parse(k))); } catch (java.lang.OutOfMemoryError e) { throw e; } catch (java.lang.Throwable e) { markInvalid(k); } }",ab51a9eb541867aecee444c823a993c0d7d9a41e,"private void add(java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl, com.google.gerrit.server.account.AccountSshKey k) { try { kl.add(new com.google.gerrit.sshd.SshKeyCacheEntry(k.accountId(), com.google.gerrit.sshd.SshUtil.parse(k))); } catch (java.lang.OutOfMemoryError e) { throw e; } catch (java.lang.Throwable e) { markInvalid(k); } }",39daeb42be7c32d7d9ca458c4cefeae636fb0627,2018-04-16 12:58:49,5
157552,java_com_google_gerrit_sshd_commands_SetAccountCommand.java,"private void deleteSshKey(com.google.gerrit.extensions.common.SshKeyInfo i) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { com.google.gerrit.server.account.AccountSshKey sshKey = new com.google.gerrit.server.account.AccountSshKey(new com.google.gerrit.server.account.AccountSshKey.Id(user.getAccountId(), i.seq), i.sshPublicKey); deleteSshKey.apply(new com.google.gerrit.server.account.AccountResource.SshKey(user.asIdentifiedUser(), sshKey), null); }",506e67d32b1fe625588528dd5756164b871b6125,"private void deleteSshKey(com.google.gerrit.extensions.common.SshKeyInfo i) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { com.google.gerrit.server.account.AccountSshKey sshKey = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(user.getAccountId(), i.seq), i.sshPublicKey); deleteSshKey.apply(new com.google.gerrit.server.account.AccountResource.SshKey(user.asIdentifiedUser(), sshKey), null); }",e18b190d494792055908bcbc175b9c31533a59c6,"private void deleteSshKey(com.google.gerrit.extensions.common.SshKeyInfo i) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { com.google.gerrit.server.account.AccountSshKey sshKey = com.google.gerrit.server.account.AccountSshKey.create(user.getAccountId(), i.seq, i.sshPublicKey); deleteSshKey.apply(new com.google.gerrit.server.account.AccountResource.SshKey(user.asIdentifiedUser(), sshKey), null); }",4064c43602a597dc53a19aa311ed91f28ed7a955,2018-04-16 12:58:49,5
157552,java_com_google_gerrit_server_restapi_account_GetSshKeys.java,public static com.google.gerrit.extensions.common.SshKeyInfo newSshKeyInfo(com.google.gerrit.server.account.AccountSshKey sshKey) { com.google.gerrit.extensions.common.SshKeyInfo info = new com.google.gerrit.extensions.common.SshKeyInfo(); info.seq = sshKey.getKey().get(); info.sshPublicKey = sshKey.getSshPublicKey(); info.encodedKey = sshKey.getEncodedKey(); info.algorithm = sshKey.getAlgorithm(); info.comment = com.google.common.base.Strings.emptyToNull(sshKey.getComment()); info.valid = sshKey.isValid(); return info; },27e6f70543e92be6e7ec55bd62011b2424cc9764,public static com.google.gerrit.extensions.common.SshKeyInfo newSshKeyInfo(com.google.gerrit.server.account.AccountSshKey sshKey) { com.google.gerrit.extensions.common.SshKeyInfo info = new com.google.gerrit.extensions.common.SshKeyInfo(); info.seq = sshKey.id().get(); info.sshPublicKey = sshKey.sshPublicKey(); info.encodedKey = sshKey.encodedKey(); info.algorithm = sshKey.algorithm(); info.comment = com.google.common.base.Strings.emptyToNull(sshKey.comment()); info.valid = sshKey.valid(); return info; },7b4fd56bdd80f6914d121b1cbaab79ecdc3fde60,public static com.google.gerrit.extensions.common.SshKeyInfo newSshKeyInfo(com.google.gerrit.server.account.AccountSshKey sshKey) { com.google.gerrit.extensions.common.SshKeyInfo info = new com.google.gerrit.extensions.common.SshKeyInfo(); info.seq = sshKey.seq(); info.sshPublicKey = sshKey.sshPublicKey(); info.encodedKey = sshKey.encodedKey(); info.algorithm = sshKey.algorithm(); info.comment = com.google.common.base.Strings.emptyToNull(sshKey.comment()); info.valid = sshKey.valid(); return info; },a7810da0d5f5982d9cca4fcf7bd8d6a89b027dea,2018-04-16 12:58:49,5
157552,java_com_google_gerrit_sshd_SshKeyCacheImpl.java,"@java.lang.Override public java.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throws java.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId user = externalIds.get(ExternalId.Key.create(com.google.gerrit.sshd.SCHEME_USERNAME, username)); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; } java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = new java.util.ArrayList<>(4); for (com.google.gerrit.server.account.AccountSshKey k : authorizedKeys.getKeys(user.accountId())) { if (k.isValid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } return java.util.Collections.unmodifiableList(kl); }",5f4b637ad956be24e33754332d2bdfe9dab9becc,"@java.lang.Override public java.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throws java.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId user = externalIds.get(ExternalId.Key.create(com.google.gerrit.sshd.SCHEME_USERNAME, username)); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; } java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = new java.util.ArrayList<>(4); for (com.google.gerrit.server.account.AccountSshKey k : authorizedKeys.getKeys(user.accountId())) { if (k.valid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } return java.util.Collections.unmodifiableList(kl); }",7370be6aa27b581ad14a77100e03d69130f4217b,"@java.lang.Override public java.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throws java.lang.Exception { java.util.Optional<com.google.gerrit.server.account.externalids.ExternalId> user = externalIds.get(ExternalId.Key.create(com.google.gerrit.sshd.SCHEME_USERNAME, username)); if (!(user.isPresent())) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; } java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = new java.util.ArrayList<>(4); for (com.google.gerrit.server.account.AccountSshKey k : authorizedKeys.getKeys(user.get().accountId())) { if (k.valid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } return java.util.Collections.unmodifiableList(kl); }",a72c00c7179cb7fe8e3e63c48e2446f5947a325c,2018-04-16 12:58:49,5
157552,java_com_google_gerrit_server_account_VersionedAuthorizedKeys.java,private boolean markKeyInvalid(int seq) { checkLoaded(); com.google.gerrit.server.account.AccountSshKey key = getKey(seq); if ((key != null) && (key.isValid())) { key.setInvalid(); return true; } return false; },fc79c3cf749fad3db5484e750332721ccb7c1b17,"private boolean markKeyInvalid(int seq) { checkLoaded(); java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key = keys.get((seq - 1)); if ((key.isPresent()) && (key.get().valid())) { keys.add((seq - 1), java.util.Optional.of(com.google.gerrit.server.account.AccountSshKey.createInvalid(key.get()))); return true; } return false; }",879ab37c5324c473d7be4051b30c5c42d184b367,"private boolean markKeyInvalid(int seq) { checkLoaded(); java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key = keys.get((seq - 1)); if ((key.isPresent()) && (key.get().valid())) { keys.set((seq - 1), java.util.Optional.of(com.google.gerrit.server.account.AccountSshKey.createInvalid(key.get()))); return true; } return false; }",1e8c51931af8656a202f19502b69414d47924c05,2018-04-16 12:58:49,5
157552,java_com_google_gerrit_server_account_AccountSshKey.java,"public java.lang.String getEncodedKey() { return getPublicKeyPart(1, null); }",96c177d09e918121b0eeacf7cabe1ae9c34d0be1,public abstract com.google.gerrit.server.account.AccountSshKey.Id id();,babb95d1860d2af33a6f3837ae629a708a62c145,public abstract Account.Id accountId();,82873d151a2d2b2aba4cb443d5fb19de1b4385b5,2018-04-16 12:58:49,5
157552,java_com_google_gerrit_server_account_AccountSshKey.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public abstract com.google.gerrit.server.account.AccountSshKey.Builder setId(com.google.gerrit.server.account.AccountSshKey.Id id);,ff49ac726012887f552c3204586b095d17309088,public abstract com.google.gerrit.server.account.AccountSshKey.Builder setSeq(int seq);,f7c4b0d5f73c28a9c08d2fd8e6fdc97a733b4933,2018-04-16 12:58:49,5
157552,java_com_google_gerrit_server_account_AccountSshKey.java,public com.google.gerrit.server.account.AccountSshKey.Id getKey() { return id; },7cb915715276d49874c25981debe8ef44c0654b6,"public static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String sshPublicKey) { return com.google.gerrit.server.account.AccountSshKey.create(id, sshPublicKey, false); }",7ac821624f190584555eba7c066778f72cd9cdb5,"public static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.reviewdb.client.Account.Id accountId, int seq, java.lang.String sshPublicKey) { return com.google.gerrit.server.account.AccountSshKey.create(accountId, seq, sshPublicKey, false); }",5eb098f8a7d118b665abe072bbcf0eb578a6911c,2018-04-16 12:58:49,5
157552,java_com_google_gerrit_sshd_SshKeyCreatorImpl.java,"@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String encoded) throws com.google.gerrit.common.errors.InvalidSshKeyException { try { com.google.gerrit.server.account.AccountSshKey key = new com.google.gerrit.server.account.AccountSshKey(id, com.google.gerrit.sshd.SshUtil.toOpenSshPublicKey(encoded)); com.google.gerrit.sshd.SshUtil.parse(key); return key; } catch (java.security.NoSuchAlgorithmException | java.security.spec.InvalidKeySpecException e) { throw new com.google.gerrit.common.errors.InvalidSshKeyException(); } catch (java.security.NoSuchProviderException e) { com.google.gerrit.sshd.SshKeyCreatorImpl.log.error(""Cannot parse SSH key"", e); throw new com.google.gerrit.common.errors.InvalidSshKeyException(); } }",cfc9fab6cd8b7f506ad169864c62a513f6d43fa1,"@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String encoded) throws com.google.gerrit.common.errors.InvalidSshKeyException { try { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(id, com.google.gerrit.sshd.SshUtil.toOpenSshPublicKey(encoded)); com.google.gerrit.sshd.SshUtil.parse(key); return key; } catch (java.security.NoSuchAlgorithmException | java.security.spec.InvalidKeySpecException e) { throw new com.google.gerrit.common.errors.InvalidSshKeyException(); } catch (java.security.NoSuchProviderException e) { com.google.gerrit.sshd.SshKeyCreatorImpl.log.error(""Cannot parse SSH key"", e); throw new com.google.gerrit.common.errors.InvalidSshKeyException(); } }",06017d6cabf2b985b3b8f6e75c44714fe8193c12,"@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.reviewdb.client.Account.Id accountId, int seq, java.lang.String encoded) throws com.google.gerrit.common.errors.InvalidSshKeyException { try { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(accountId, seq, com.google.gerrit.sshd.SshUtil.toOpenSshPublicKey(encoded)); com.google.gerrit.sshd.SshUtil.parse(key); return key; } catch (java.security.NoSuchAlgorithmException | java.security.spec.InvalidKeySpecException e) { throw new com.google.gerrit.common.errors.InvalidSshKeyException(); } catch (java.security.NoSuchProviderException e) { com.google.gerrit.sshd.SshKeyCreatorImpl.log.error(""Cannot parse SSH key"", e); throw new com.google.gerrit.common.errors.InvalidSshKeyException(); } }",6a4055999a3417256ec5452abecdd0530be95939,2018-04-16 12:58:49,5
157552,java_com_google_gerrit_server_account_AuthorizedKeys.java,"public static java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId, java.lang.String s) { java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys = new java.util.ArrayList<>(); int seq = 1; for (java.lang.String line : s.split(""\\r?\\n"")) { line = line.trim(); if (line.isEmpty()) { continue; } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX)) { java.lang.String pub = line.substring(com.google.gerrit.server.account.AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX.length()); com.google.gerrit.server.account.AccountSshKey key = new com.google.gerrit.server.account.AccountSshKey(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (seq++)), pub); key.setInvalid(); keys.add(java.util.Optional.of(key)); } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.DELETED_KEY_COMMENT)) { keys.add(java.util.Optional.empty()); seq++; } else if (line.startsWith(""#"")) { continue; } else { com.google.gerrit.server.account.AccountSshKey key = new com.google.gerrit.server.account.AccountSshKey(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (seq++)), line); keys.add(java.util.Optional.of(key)); } } return keys; }",553eed46032e19a699b2e2dafcc4d6df6ed838bc,"public static java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId, java.lang.String s) { java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys = new java.util.ArrayList<>(); int seq = 1; for (java.lang.String line : s.split(""\\r?\\n"")) { line = line.trim(); if (line.isEmpty()) { continue; } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX)) { java.lang.String pub = line.substring(com.google.gerrit.server.account.AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX.length()); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.createInvalid(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (seq++)), pub); keys.add(java.util.Optional.of(key)); } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.DELETED_KEY_COMMENT)) { keys.add(java.util.Optional.empty()); seq++; } else if (line.startsWith(""#"")) { continue; } else { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (seq++)), line); keys.add(java.util.Optional.of(key)); } } return keys; }",827573da215c5100c49175541e7cca25334c6b35,"public static java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId, java.lang.String s) { java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys = new java.util.ArrayList<>(); int seq = 1; for (java.lang.String line : com.google.common.base.Splitter.on(com.google.gerrit.server.account.AuthorizedKeys.LINE_SPLIT_PATTERN).split(s)) { line = line.trim(); if (line.isEmpty()) { continue; } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX)) { java.lang.String pub = line.substring(com.google.gerrit.server.account.AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX.length()); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.createInvalid(accountId, (seq++), pub); keys.add(java.util.Optional.of(key)); } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.DELETED_KEY_COMMENT)) { keys.add(java.util.Optional.empty()); seq++; } else if (line.startsWith(""#"")) { continue; } else { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(accountId, (seq++), line); keys.add(java.util.Optional.of(key)); } } return keys; }",e131c03c740ee8cb61a53251880784d836e417d9,2018-04-16 12:58:49,5
157552,javatests_com_google_gerrit_server_account_AuthorizedKeysTest.java,"@org.junit.Test public void validity() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = new com.google.gerrit.server.account.AccountSshKey(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (-1)), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.isValid()).isFalse(); key = new com.google.gerrit.server.account.AccountSshKey(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 0), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.isValid()).isFalse(); key = new com.google.gerrit.server.account.AccountSshKey(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.isValid()).isTrue(); }",051c584eb5e412e7486dfcbf49f2b5b16987cb5f,"@org.junit.Test public void validity() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (-1)), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 0), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isTrue(); }",45f1f41740a0a7671b57947753f45b67ace2a47f,"@org.junit.Test public void validity() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(accountId, (-1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(accountId, 0, com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(accountId, 1, com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isTrue(); }",5e7979ebfcc68173ca5923891b82aaf2f7fa82f5,2018-04-16 12:58:49,5
157552,javatests_com_google_gerrit_server_account_AuthorizedKeysTest.java,"@org.junit.Test public void getters() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = new com.google.gerrit.server.account.AccountSshKey(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.getSshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.getAlgorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("" "")[0]); assertThat(key.getEncodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("" "")[1]); assertThat(key.getComment()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("" "")[2]); }",a69424391971ded587e2d61f7a239ce8dea673a8,"@org.junit.Test public void getters() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("" "")[0]); assertThat(key.encodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("" "")[1]); assertThat(key.comment()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("" "")[2]); }",50ff9b3b68727bc3a04651b957a83e07b3cc643a,"@org.junit.Test public void getters() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(accountId, 1, com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("" "")[0]); assertThat(key.encodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("" "")[1]); assertThat(key.comment()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("" "")[2]); }",b7714930797d5700ea8089fb4968d888d3133863,2018-04-16 12:58:49,5
157552,javatests_com_google_gerrit_server_account_AuthorizedKeysTest.java,"private static void assertParse(java.lang.StringBuilder authorizedKeys, java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> expectedKeys) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> parsedKeys = com.google.gerrit.server.account.AuthorizedKeys.parse(accountId, authorizedKeys.toString()); assertThat(parsedKeys).containsExactlyElementsIn(expectedKeys); int seq = 1; for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> sshKey : parsedKeys) { if (sshKey.isPresent()) { assertThat(sshKey.get().getAccount()).isEqualTo(accountId); assertThat(sshKey.get().getKey().get()).isEqualTo(seq); } seq++; } }",c9a152089eeb1e8edb700e6d201d33225be64baf,"private static void assertParse(java.lang.StringBuilder authorizedKeys, java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> expectedKeys) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> parsedKeys = com.google.gerrit.server.account.AuthorizedKeys.parse(accountId, authorizedKeys.toString()); assertThat(parsedKeys).containsExactlyElementsIn(expectedKeys); int seq = 1; for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> sshKey : parsedKeys) { if (sshKey.isPresent()) { assertThat(sshKey.get().account()).isEqualTo(accountId); assertThat(sshKey.get().id().get()).isEqualTo(seq); } seq++; } }",10dbabdfc54f54a83b9d4acdef4fb39bb9a06bb1,"private static void assertParse(java.lang.StringBuilder authorizedKeys, java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> expectedKeys) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> parsedKeys = com.google.gerrit.server.account.AuthorizedKeys.parse(accountId, authorizedKeys.toString()); assertThat(parsedKeys).containsExactlyElementsIn(expectedKeys); int seq = 1; for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> sshKey : parsedKeys) { if (sshKey.isPresent()) { assertThat(sshKey.get().accountId()).isEqualTo(accountId); assertThat(sshKey.get().seq()).isEqualTo(seq); } seq++; } }",f638a71bd986208bbda80fe0b0ad3ceb3b245e33,2018-04-16 12:58:49,5
157552,javatests_com_google_gerrit_server_account_AuthorizedKeysTest.java,"private static java.lang.String addInvalidKey(java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys, java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = new com.google.gerrit.server.account.AccountSshKey(keyId, pub); key.setInvalid(); keys.add(java.util.Optional.of(key)); return ((AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX) + (key.getSshPublicKey())) + ""\n""; }",82050856bc151fe91984da987bcc9ba5e87f1a34,"private static java.lang.String addInvalidKey(java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys, java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.createInvalid(keyId, pub); keys.add(java.util.Optional.of(key)); return ((AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX) + (key.sshPublicKey())) + ""\n""; }",cdbce451025bbe334f7df9df6245d8930ab82ba1,"private static java.lang.String addInvalidKey(java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys, java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.createInvalid(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1), pub); keys.add(java.util.Optional.of(key)); return ((AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX) + (key.sshPublicKey())) + ""\n""; }",a5129393a6b35879c1b287663d675a3ac776f698,2018-04-16 12:58:49,5
157552,javatests_com_google_gerrit_server_account_AuthorizedKeysTest.java,"@org.junit.Test public void keyWithNewLines() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = new com.google.gerrit.server.account.AccountSshKey(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1_WITH_NEWLINES); assertThat(key.getSshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.getAlgorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("" "")[0]); assertThat(key.getEncodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("" "")[1]); assertThat(key.getComment()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("" "")[2]); }",78c5d7203a3bc03bd0ce50b654d13c6edde2e9a4,"@org.junit.Test public void keyWithNewLines() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1_WITH_NEWLINES); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("" "")[0]); assertThat(key.encodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("" "")[1]); assertThat(key.comment()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("" "")[2]); }",717d9ca683291552400cf5d5d626fa2dd1f6be44,"@org.junit.Test public void keyWithNewLines() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(accountId, 1, com.google.gerrit.server.account.AuthorizedKeysTest.KEY1_WITH_NEWLINES); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("" "")[0]); assertThat(key.encodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("" "")[1]); assertThat(key.comment()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("" "")[2]); }",7670778eaef7c0562e9f77411c9b6de84a7b2261,2018-04-16 12:58:49,5
157552,javatests_com_google_gerrit_server_account_AuthorizedKeysTest.java,"private static java.lang.String addKey(java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys, java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = new com.google.gerrit.server.account.AccountSshKey(keyId, pub); keys.add(java.util.Optional.of(key)); return (key.getSshPublicKey()) + ""\n""; }",2af77b2405995acf687b5a719f92cef8bb50ca23,"private static java.lang.String addKey(java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys, java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(keyId, pub); keys.add(java.util.Optional.of(key)); return (key.sshPublicKey()) + ""\n""; }",67f7056e85a2fc2bbe235acc090548a001d455e6,"private static java.lang.String addKey(java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys, java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1), pub); keys.add(java.util.Optional.of(key)); return (key.sshPublicKey()) + ""\n""; }",6b16c01ed2e9bcd862a72e14f14eac428587eef0,2018-04-16 12:58:49,5
157552,java_com_google_gerrit_server_account_VersionedAuthorizedKeys.java,"private com.google.gerrit.server.account.AccountSshKey addKey(java.lang.String pub) throws com.google.gerrit.common.errors.InvalidSshKeyException { checkLoaded(); for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key : keys) { if ((key.isPresent()) && (key.get().getSshPublicKey().trim().equals(pub.trim()))) { return key.get(); } } int seq = (keys.size()) + 1; com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(accountId, seq); com.google.gerrit.server.account.AccountSshKey key = sshKeyCreator.create(keyId, pub); keys.add(java.util.Optional.of(key)); return key; }",94100bed9c5edb5d775d5ae612129c11f2e658ec,"private com.google.gerrit.server.account.AccountSshKey addKey(java.lang.String pub) throws com.google.gerrit.common.errors.InvalidSshKeyException { checkLoaded(); for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key : keys) { if ((key.isPresent()) && (key.get().sshPublicKey().trim().equals(pub.trim()))) { return key.get(); } } int seq = (keys.size()) + 1; com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(accountId, seq); com.google.gerrit.server.account.AccountSshKey key = sshKeyCreator.create(keyId, pub); keys.add(java.util.Optional.of(key)); return key; }",da275fa791c1ea13c7bb286e043824094fa97e0f,"private com.google.gerrit.server.account.AccountSshKey addKey(java.lang.String pub) throws com.google.gerrit.common.errors.InvalidSshKeyException { checkLoaded(); for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key : keys) { if ((key.isPresent()) && (key.get().sshPublicKey().trim().equals(pub.trim()))) { return key.get(); } } int seq = (keys.size()) + 1; com.google.gerrit.server.account.AccountSshKey key = sshKeyCreator.create(accountId, seq, pub); keys.add(java.util.Optional.of(key)); return key; }",2fd7e213aeb59cba9573f64999e09b2b1d37be6b,2018-04-16 12:58:49,5
157552,java_com_google_gerrit_server_account_AccountSshKey.java,public java.lang.String getSshPublicKey() { return sshPublicKey; },02a203378168b308a679ce33845fc43923f15252,"public static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.server.account.AccountSshKey key) { return com.google.gerrit.server.account.AccountSshKey.create(key.id(), key.sshPublicKey(), false); }",fb35261af40df14a3a03328b020af998630e5a08,"public static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.server.account.AccountSshKey key) { return com.google.gerrit.server.account.AccountSshKey.create(key.accountId(), key.seq(), key.sshPublicKey(), false); }",92d5d1cace654b61b655723641e98a6e89afa19a,2018-04-16 12:58:49,5
157552,java_com_google_gerrit_server_account_AccountSshKey.java,public Account.Id getAccount() { return id.accountId; },6adc73607df61c8b5b23ec5cd4ed820bf72a35cd,"public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String sshPublicKey) { return com.google.gerrit.server.account.AccountSshKey.create(id, sshPublicKey, true); }",378e28da188123a9debbea6def643e5d52344719,"public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.reviewdb.client.Account.Id accountId, int seq, java.lang.String sshPublicKey) { return com.google.gerrit.server.account.AccountSshKey.create(accountId, seq, sshPublicKey, true); }",eb496bfe41813275367c398cec47223586353440,2018-04-16 12:58:49,5
157552,java_com_google_gerrit_server_account_AccountSshKey.java,public void setInvalid() { valid = false; },d07a00cf7b6c8252b81dc84ce88948a4b5616f7e,public Account.Id account() { return id().accountId; },ad37b5a4657467b2e44f61ad89cc80d762a3b684,public abstract int seq();,d23ee905d77c2c02d176abeb9faefaf1cb2438d3,2018-04-16 12:58:49,5
157552,java_com_google_gerrit_server_restapi_account_DeleteSshKey.java,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.SshKey rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } authorizedKeys.deleteKey(rsrc.getUser().getAccountId(), rsrc.getSshKey().getKey().get()); rsrc.getUser().getUserName().ifPresent(sshKeyCache::evict); return com.google.gerrit.extensions.restapi.Response.none(); }",a9b1928cef6dcb4b3e3fc86be2d9c8f899e9afd0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.SshKey rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } authorizedKeys.deleteKey(rsrc.getUser().getAccountId(), rsrc.getSshKey().id().get()); rsrc.getUser().getUserName().ifPresent(sshKeyCache::evict); return com.google.gerrit.extensions.restapi.Response.none(); }",6c90770e485e3201fd231b21412d0b17df4ae62c,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.SshKey rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.currentUser().check(GlobalPermission.ADMINISTRATE_SERVER); } authorizedKeys.deleteKey(rsrc.getUser().getAccountId(), rsrc.getSshKey().seq()); rsrc.getUser().getUserName().ifPresent(sshKeyCache::evict); return com.google.gerrit.extensions.restapi.Response.none(); }",352d985b531f7025972cec32e13148b4b60cf959,2018-04-16 12:58:49,5
157552,java_com_google_gerrit_server_account_AccountSshKey.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String publicKeyPart(int index, java.lang.String defaultValue) { java.lang.String s = sshPublicKey(); if ((s != null) && ((s.length()) > 0)) { java.lang.String[] parts = s.split("" ""); if ((parts.length) > index) { return parts[index]; } } return defaultValue; }",a643f4ac682f7e2a4c5ba001ea0812eb7c88e082,"private java.lang.String publicKeyPart(int index, java.lang.String defaultValue) { java.lang.String s = sshPublicKey(); if ((s != null) && ((s.length()) > 0)) { java.util.List<java.lang.String> parts = com.google.common.base.Splitter.on(' ').splitToList(s); if ((parts.size()) > index) { return parts.get(index); } } return defaultValue; }",4521fc53bb5fe1db50baea96a2163327900068b1,2018-04-16 12:58:49,5
157552,java_com_google_gerrit_pgm_init_InitAdminUser.java,"private com.google.gerrit.server.account.AccountSshKey createSshKey(com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String keyFile) throws java.io.IOException { java.nio.file.Path p = java.nio.file.Paths.get(keyFile); if (!(java.nio.file.Files.exists(p))) { throw new java.io.IOException(java.lang.String.format(""Cannot add public SSH key: %s is not a file"", keyFile)); } java.lang.String content = new java.lang.String(java.nio.file.Files.readAllBytes(p), java.nio.charset.StandardCharsets.UTF_8); return new com.google.gerrit.server.account.AccountSshKey(new com.google.gerrit.server.account.AccountSshKey.Id(id, 1), content); }",23fd5b15942af09f159fb67b2b29208dedc8a570,"private com.google.gerrit.server.account.AccountSshKey createSshKey(com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String keyFile) throws java.io.IOException { java.nio.file.Path p = java.nio.file.Paths.get(keyFile); if (!(java.nio.file.Files.exists(p))) { throw new java.io.IOException(java.lang.String.format(""Cannot add public SSH key: %s is not a file"", keyFile)); } java.lang.String content = new java.lang.String(java.nio.file.Files.readAllBytes(p), java.nio.charset.StandardCharsets.UTF_8); return com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(id, 1), content); }",5cfb1f6f55da4a5e3afb5fd717fe2885b7eee8b6,"private com.google.gerrit.server.account.AccountSshKey createSshKey(com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String keyFile) throws java.io.IOException { java.nio.file.Path p = java.nio.file.Paths.get(keyFile); if (!(java.nio.file.Files.exists(p))) { throw new java.io.IOException(java.lang.String.format(""Cannot add public SSH key: %s is not a file"", keyFile)); } java.lang.String content = new java.lang.String(java.nio.file.Files.readAllBytes(p), java.nio.charset.StandardCharsets.UTF_8); return com.google.gerrit.server.account.AccountSshKey.create(id, 1, content); }",54ca43528ceebc139113dcc2d08cd47315600cd8,2018-04-16 12:58:49,5
157552,java_com_google_gerrit_server_account_AccountSshKey.java,"private java.lang.String getPublicKeyPart(int index, java.lang.String defaultValue) { java.lang.String s = getSshPublicKey(); if ((s != null) && ((s.length()) > 0)) { java.lang.String[] parts = s.split("" ""); if ((parts.length) > index) { return parts[index]; } } return defaultValue; }",d4b73c557b81a8eb07412b91b0060b15827c9a96,"public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String sshPublicKey, boolean valid) { return new com.google.gerrit.server.account.AutoValue_AccountSshKey.Builder().setId(id).setSshPublicKey(com.google.gerrit.server.account.AccountSshKey.stripOffNewLines(sshPublicKey)).setValid((valid && (id.isValid()))).build(); }",5ec65dea4bb6edadab593603466aae9b676d0b9c,"public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.reviewdb.client.Account.Id accountId, int seq, java.lang.String sshPublicKey, boolean valid) { return new com.google.gerrit.server.account.AutoValue_AccountSshKey.Builder().setAccountId(accountId).setSeq(seq).setSshPublicKey(com.google.gerrit.server.account.AccountSshKey.stripOffNewLines(sshPublicKey)).setValid((valid && (seq > 0))).build(); }",902fb8c83cd1d285093b143a84c7aadabc028a05,2018-04-16 12:58:49,5
157552,java_com_google_gerrit_server_account_VersionedAuthorizedKeys.java,"public void setKeys(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> newKeys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.from(java.util.Comparator.comparing(( k) -> k.getKey().get())); keys = new java.util.ArrayList(java.util.Collections.nCopies(o.max(newKeys).getKey().get(), java.util.Optional.empty())); for (com.google.gerrit.server.account.AccountSshKey key : newKeys) { keys.set(((key.getKey().get()) - 1), java.util.Optional.of(key)); } }",6fb040269c345cb91165cb2e2d08e49708873133,"public void setKeys(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> newKeys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.from(java.util.Comparator.comparing(( k) -> k.id().get())); keys = new java.util.ArrayList(java.util.Collections.nCopies(o.max(newKeys).id().get(), java.util.Optional.empty())); for (com.google.gerrit.server.account.AccountSshKey key : newKeys) { keys.set(((key.id().get()) - 1), java.util.Optional.of(key)); } }",073343dd95353e50237f5c65b1db76747a407aeb,"public void setKeys(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> newKeys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.from(java.util.Comparator.comparing(( k) -> k.seq())); keys = new java.util.ArrayList(java.util.Collections.nCopies(o.max(newKeys).seq(), java.util.Optional.empty())); for (com.google.gerrit.server.account.AccountSshKey key : newKeys) { keys.set(((key.seq()) - 1), java.util.Optional.of(key)); } }",414623283817984e899b6890192fc2fb345e2d91,2018-04-16 12:58:49,5
172567,java_com_google_gerrit_server_project_ProjectCacheWarmer.java,"@java.lang.Override public void start() { if ((executor) == null) { return; } java.util.concurrent.ExecutorService scheduler = java.util.concurrent.Executors.newFixedThreadPool(1); com.google.gerrit.server.project.ProjectCacheWarmer.log.info(""Loading project cache""); scheduler.execute(() -> { for (com.google.gerrit.reviewdb.client.Project.NameKey name : cache.all()) { executor.execute(() -> { cache.get(name); }); } executor.shutdown(); try { executor.awaitTermination(java.lang.Long.MAX_VALUE, java.util.concurrent.TimeUnit.MILLISECONDS); com.google.gerrit.server.project.ProjectCacheWarmer.log.info(""Finished loading project cache""); } catch (java.lang.InterruptedException e) { com.google.gerrit.server.project.ProjectCacheWarmer.log.warn(""Interrupted while waiting for project cache to load""); } }); }",8d59cee8e9980977fb416908462a177d047500eb,"@java.lang.Override public void start() { if ((executor) == null) { return; } java.lang.Thread scheduler = new java.lang.Thread(() -> { for (com.google.gerrit.reviewdb.client.Project.NameKey name : cache.all()) { executor.execute(() -> cache.get(name)); } executor.shutdown(); try { executor.awaitTermination(java.lang.Long.MAX_VALUE, java.util.concurrent.TimeUnit.MILLISECONDS); com.google.gerrit.server.project.ProjectCacheWarmer.log.info(""Finished loading project cache""); } catch (java.lang.InterruptedException e) { com.google.gerrit.server.project.ProjectCacheWarmer.log.warn(""Interrupted while waiting for project cache to load""); } }); scheduler.setName(""ProjectCacheWarmer""); scheduler.setDaemon(true); com.google.gerrit.server.project.ProjectCacheWarmer.log.info(""Loading project cache""); scheduler.start(); }",6fc8ec29dfcefec6b0ac15275e73d291b8f841ed,"@java.lang.Override public void start() { int cpus = java.lang.Runtime.getRuntime().availableProcessors(); if (config.getBoolean(""cache"", ""projects"", ""loadOnStartup"", false)) { java.util.concurrent.ThreadPoolExecutor pool = new java.util.concurrent.ScheduledThreadPoolExecutor(config.getInt(""cache"", ""projects"", ""loadThreads"", cpus), new com.google.common.util.concurrent.ThreadFactoryBuilder().setNameFormat(""ProjectCacheLoader-%d"").build()); java.lang.Thread scheduler = new java.lang.Thread(() -> { for (com.google.gerrit.reviewdb.client.Project.NameKey name : cache.all()) { pool.execute(() -> cache.get(name)); } pool.shutdown(); try { pool.awaitTermination(java.lang.Long.MAX_VALUE, java.util.concurrent.TimeUnit.MILLISECONDS); com.google.gerrit.server.project.ProjectCacheWarmer.log.info(""Finished loading project cache""); } catch (java.lang.InterruptedException e) { com.google.gerrit.server.project.ProjectCacheWarmer.log.warn(""Interrupted while waiting for project cache to load""); } }); scheduler.setName(""ProjectCacheWarmer""); scheduler.setDaemon(true); com.google.gerrit.server.project.ProjectCacheWarmer.log.info(""Loading project cache""); scheduler.start(); } }",b8f37abb8dcf731d1ffc70f91c39542febc06184,2018-04-17 13:46:17,2
172030,src_main_java_com_googlesource_gerrit_plugins_readonly_ReadOnlyConfig.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,java.lang.String[] sshAllows() { return sshAllows; },5db54d1ec9aa20d9c19c7ae3cc46e1ce3d1b9c45,java.util.List<java.lang.String> allowSshCommands() { return allowSshCommands; },54f1a56c69c9c21dc8030374f00cbe2051756794,2018-04-17 21:57:48,3
172771,javatests_com_google_gerrit_server_query_change_AbstractQueryChangesTest.java,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void assignee() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject(""repo""); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); com.google.gerrit.extensions.api.changes.AssigneeInput input = new com.google.gerrit.extensions.api.changes.AssigneeInput(); input.assignee = user.getUserName().get(); gApi.changes().id(change1.getChangeId()).setAssignee(input); assertQuery(""is:assigned"", change1); assertQuery(""-is:assigned"", change2); assertQuery(""is:unassigned"", change2); assertQuery(""-is:unassigned"", change1); assertQuery((""assignee:"" + (user.getUserName())), change1); assertQuery((""-assignee:"" + (user.getUserName())), change2); }",6032619745fa2c2909378634b138b4e0b9cd3366,"@org.junit.Test public void assignee() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject(""repo""); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); com.google.gerrit.extensions.api.changes.AssigneeInput input = new com.google.gerrit.extensions.api.changes.AssigneeInput(); input.assignee = user.getUserName().get(); gApi.changes().id(change1.getChangeId()).setAssignee(input); assertQuery(""is:assigned"", change1); assertQuery(""-is:assigned"", change2); assertQuery(""is:unassigned"", change2); assertQuery(""-is:unassigned"", change1); assertQuery((""assignee:"" + (user.getUserName().get())), change1); assertQuery((""-assignee:"" + (user.getUserName().get())), change2); }",545f567da04a3e735518bc779cc3d95cd229e208,2018-04-18 08:33:27,2
