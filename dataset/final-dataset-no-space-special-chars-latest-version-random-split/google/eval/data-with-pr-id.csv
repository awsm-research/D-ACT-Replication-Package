PR_ID,filename,method_idx_x,codebase,codebase-hash,initial,initial-hash,codebase-signature,init-signature,total_patchsets,method_idx,approved,approved-hash,approved-signature,row-num-right,init-ver-len,app-ver-len
69384,gerrit-server_src_test_java_com_google_gerrit_server_git_gpg_PublicKeyStoreTest.java,,,,"private void assertKeys(long keyId, org.bouncycastle.openpgp.PGPPublicKey... expected) throws java.lang.Exception { final com.google.common.base.Function<org.bouncycastle.openpgp.PGPPublicKey, java.lang.String> keyToString = new com.google.common.base.Function<org.bouncycastle.openpgp.PGPPublicKey, java.lang.String>() { @java.lang.Override public java.lang.String apply(org.bouncycastle.openpgp.PGPPublicKey in) { return com.google.gerrit.server.git.gpg.PublicKeyStore.keyToString(in); } }; com.google.common.base.Function<org.bouncycastle.openpgp.PGPPublicKeyRing, java.lang.String> keyRingToString = new com.google.common.base.Function<org.bouncycastle.openpgp.PGPPublicKeyRing, java.lang.String>() { @java.lang.Override public java.lang.String apply(org.bouncycastle.openpgp.PGPPublicKeyRing in) { return keyToString.apply(in.getPublicKey()); } }; assertThat(com.google.common.collect.Iterables.transform(store.get(keyId), keyRingToString)).containsExactlyElementsIn(com.google.common.collect.FluentIterable.of(expected).transform(keyToString)); }",b0ff034efcc3109fe479085f73243da980a44ed2,,"assertKeys(long,org.bouncycastle.openpgp.PGPPublicKey[])",5,6,"private void assertKeys(long keyId, com.google.gerrit.server.git.gpg.TestKey... expected) throws java.lang.Exception { java.util.Set<java.lang.String> expectedStrings = new java.util.TreeSet<>(); for (com.google.gerrit.server.git.gpg.TestKey k : expected) { expectedStrings.add(com.google.gerrit.server.git.gpg.PublicKeyStore.keyToString(k.getPublicKey())); } org.bouncycastle.openpgp.PGPPublicKeyRingCollection actual = store.get(keyId); java.util.Set<java.lang.String> actualStrings = new java.util.TreeSet<>(); for (org.bouncycastle.openpgp.PGPPublicKeyRing k : actual) { actualStrings.add(com.google.gerrit.server.git.gpg.PublicKeyStore.keyToString(k.getPublicKey())); } assertEquals(expectedStrings, actualStrings); }",7a466dc0607643f8f303ca8c150dcea851af7323,"assertKeys(long,com.google.gerrit.server.git.gpg.TestKey[])",209821,298,218
52315,gerrit-server_src_main_java_com_google_gerrit_server_contact_EncryptedContactStore.java,2.0,"private byte[] encrypt(final java.lang.String name, final java.util.Date date, final byte[] rawText) throws java.io.IOException, java.security.NoSuchProviderException, org.bouncycastle.openpgp.PGPException { final byte[] zText = com.google.gerrit.server.contact.EncryptedContactStore.compress(name, date, rawText); final org.bouncycastle.openpgp.PGPEncryptedDataGenerator cpk = new org.bouncycastle.openpgp.PGPEncryptedDataGenerator(org.bouncycastle.openpgp.PGPEncryptedData.CAST5, true, prng, ""BC""); cpk.addMethod(dest); final java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream(); final org.bouncycastle.bcpg.ArmoredOutputStream aout = new org.bouncycastle.bcpg.ArmoredOutputStream(buf); final java.io.OutputStream cout = cpk.open(aout, zText.length); cout.write(zText); cout.close(); aout.close(); return buf.toByteArray(); }",0be90334272e6f68bf4f42e1a8a4bdf1c2fa2232,"private byte[] encrypt(final java.lang.String name, final java.util.Date date, final byte[] rawText) throws java.io.IOException, java.security.NoSuchProviderException, org.bouncycastle.openpgp.PGPException { final byte[] zText = com.google.gerrit.server.contact.EncryptedContactStore.compress(name, date, rawText); final org.bouncycastle.openpgp.operator.bc.BcPGPDataEncryptorBuilder builder = new org.bouncycastle.openpgp.operator.bc.BcPGPDataEncryptorBuilder(org.bouncycastle.openpgp.PGPEncryptedData.CAST5).setSecureRandom(prng); final org.bouncycastle.openpgp.PGPEncryptedDataGenerator cpk = new org.bouncycastle.openpgp.PGPEncryptedDataGenerator(builder); final org.bouncycastle.openpgp.operator.bc.BcPublicKeyKeyEncryptionMethodGenerator methodGenerator = new org.bouncycastle.openpgp.operator.bc.BcPublicKeyKeyEncryptionMethodGenerator(dest); cpk.addMethod(methodGenerator); final java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream(); final org.bouncycastle.bcpg.ArmoredOutputStream aout = new org.bouncycastle.bcpg.ArmoredOutputStream(buf); final java.io.OutputStream cout = cpk.open(aout, zText.length); cout.write(zText); cout.close(); aout.close(); return buf.toByteArray(); }",066c568ced6c0c55ed22a815878c964a7633108d,"encrypt(java.lang.String,java.util.Date,byte[])","encrypt(java.lang.String,java.util.Date,byte[])",10,3,"private byte[] encrypt(final java.lang.String name, final java.util.Date date, final byte[] rawText) throws java.io.IOException, java.security.NoSuchProviderException, org.bouncycastle.openpgp.PGPException { final byte[] zText = com.google.gerrit.server.contact.EncryptedContactStore.compress(name, date, rawText); final java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream(); final org.bouncycastle.bcpg.ArmoredOutputStream aout = new org.bouncycastle.bcpg.ArmoredOutputStream(buf); final java.io.OutputStream cout = cpk().open(aout, zText.length); cout.write(zText); cout.close(); aout.close(); return buf.toByteArray(); }",0afae29b28df2de14733d71cdb3996ea7c818eaa,"encrypt(java.lang.String,java.util.Date,byte[])",15954,324,176
66599,gerrit-server_src_main_java_com_google_gerrit_server_account_StarredChanges.java,1.0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.StarredChanges.EmptyInput in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if ((self.get()) != (rsrc.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to add starred change""); } try { dbProvider.get().starredChanges().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.StarredChange(new com.google.gerrit.reviewdb.client.StarredChange.Key(rsrc.getUser().getAccountId(), change.getChange().getId())))); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { return com.google.gerrit.extensions.restapi.Response.none(); } return com.google.gerrit.extensions.restapi.Response.none(); }",5ab01aeccd144831421f6dd477b07ec50e5c2be1,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.StarredChanges.EmptyInput in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if ((self.get()) != (rsrc.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to add starred change""); } try { dbProvider.get().starredChanges().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.StarredChange(new com.google.gerrit.reviewdb.client.StarredChange.Key(rsrc.getUser().getAccountId(), change.getChange().getId())))); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { return com.google.gerrit.extensions.restapi.Response.none(); } rsrc.getUser().clearStarredChanges(); return com.google.gerrit.extensions.restapi.Response.none(); }",d2d355fc3d5968642954c66126ff26d176ddca29,"apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.server.account.StarredChanges$EmptyInput)","apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.server.account.StarredChanges$EmptyInput)",4,1,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.StarredChanges.EmptyInput in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if ((self.get()) != (rsrc.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to add starred change""); } try { dbProvider.get().starredChanges().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.StarredChange(new com.google.gerrit.reviewdb.client.StarredChange.Key(rsrc.getUser().getAccountId(), change.getChange().getId())))); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { return com.google.gerrit.extensions.restapi.Response.none(); } return com.google.gerrit.extensions.restapi.Response.none(); }",5ab01aeccd144831421f6dd477b07ec50e5c2be1,"apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.server.account.StarredChanges$EmptyInput)",40722,268,258
140535,java_com_google_gerrit_server_patch_PatchListLoader.java,13.0,"private java.util.Optional<com.google.gerrit.server.patch.PatchListEntry> getPatchListEntry(org.eclipse.jgit.lib.ObjectReader objectReader, org.eclipse.jgit.diff.DiffFormatter diffFormatter, org.eclipse.jgit.diff.DiffEntry diffEntry, org.eclipse.jgit.revwalk.RevTree treeA, org.eclipse.jgit.revwalk.RevTree treeB, java.util.Set<com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> editsDueToRebase) throws java.io.IOException { org.eclipse.jgit.patch.FileHeader fileHeader = toFileHeader(key.getNewId(), diffFormatter, diffEntry); long oldSize = com.google.gerrit.server.patch.PatchListLoader.getFileSize(objectReader, diffEntry.getOldMode(), diffEntry.getOldPath(), treeA); long newSize = com.google.gerrit.server.patch.PatchListLoader.getFileSize(objectReader, diffEntry.getNewMode(), diffEntry.getNewPath(), treeB); java.util.Set<org.eclipse.jgit.diff.Edit> contentEditsDueToRebase = com.google.gerrit.server.patch.PatchListLoader.getContentEdits(editsDueToRebase); com.google.gerrit.server.patch.PatchListEntry patchListEntry = com.google.gerrit.server.patch.PatchListLoader.newEntry(treeA, fileHeader, contentEditsDueToRebase, newSize, (newSize - oldSize)); if (com.google.gerrit.server.patch.EditTransformer.toEdits(patchListEntry).allMatch(editsDueToRebase::contains)) { return java.util.Optional.empty(); } return java.util.Optional.of(patchListEntry); }",71e4898b3c9f63c2609baecc150094fd12b0c969,"private java.util.Optional<com.google.gerrit.server.patchlib.PatchListEntry> getPatchListEntry(org.eclipse.jgit.lib.ObjectReader objectReader, org.eclipse.jgit.diff.DiffFormatter diffFormatter, org.eclipse.jgit.diff.DiffEntry diffEntry, org.eclipse.jgit.revwalk.RevTree treeA, org.eclipse.jgit.revwalk.RevTree treeB, java.util.Set<com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit> editsDueToRebase) throws java.io.IOException { org.eclipse.jgit.patch.FileHeader fileHeader = toFileHeader(key.getNewId(), diffFormatter, diffEntry); long oldSize = com.google.gerrit.server.patch.PatchListLoader.getFileSize(objectReader, diffEntry.getOldMode(), diffEntry.getOldPath(), treeA); long newSize = com.google.gerrit.server.patch.PatchListLoader.getFileSize(objectReader, diffEntry.getNewMode(), diffEntry.getNewPath(), treeB); java.util.Set<org.eclipse.jgit.diff.Edit> contentEditsDueToRebase = com.google.gerrit.server.patch.PatchListLoader.getContentEdits(editsDueToRebase); com.google.gerrit.server.patchlib.PatchListEntry patchListEntry = com.google.gerrit.server.patch.PatchListLoader.newEntry(treeA, fileHeader, contentEditsDueToRebase, newSize, (newSize - oldSize)); if (com.google.gerrit.server.patchlib.EditTransformer.toEdits(patchListEntry).allMatch(editsDueToRebase::contains)) { return java.util.Optional.empty(); } return java.util.Optional.of(patchListEntry); }",d8ca5b41345b416a1448a860c0d586f3e982b48d,"getPatchListEntry(org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.diff.DiffFormatter,org.eclipse.jgit.diff.DiffEntry,org.eclipse.jgit.revwalk.RevTree,org.eclipse.jgit.revwalk.RevTree,java.util.Set)","getPatchListEntry(org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.diff.DiffFormatter,org.eclipse.jgit.diff.DiffEntry,org.eclipse.jgit.revwalk.RevTree,org.eclipse.jgit.revwalk.RevTree,java.util.Set)",11,9,"private java.util.Optional<com.google.gerrit.server.diff.PatchListEntry> getPatchListEntry(org.eclipse.jgit.lib.ObjectReader objectReader, org.eclipse.jgit.diff.DiffFormatter diffFormatter, org.eclipse.jgit.diff.DiffEntry diffEntry, org.eclipse.jgit.revwalk.RevTree treeA, org.eclipse.jgit.revwalk.RevTree treeB, java.util.Set<com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> editsDueToRebase) throws java.io.IOException { org.eclipse.jgit.patch.FileHeader fileHeader = toFileHeader(key.getNewId(), diffFormatter, diffEntry); long oldSize = com.google.gerrit.server.patch.PatchListLoader.getFileSize(objectReader, diffEntry.getOldMode(), diffEntry.getOldPath(), treeA); long newSize = com.google.gerrit.server.patch.PatchListLoader.getFileSize(objectReader, diffEntry.getNewMode(), diffEntry.getNewPath(), treeB); java.util.Set<org.eclipse.jgit.diff.Edit> contentEditsDueToRebase = com.google.gerrit.server.patch.PatchListLoader.getContentEdits(editsDueToRebase); com.google.gerrit.server.diff.PatchListEntry patchListEntry = com.google.gerrit.server.patch.PatchListLoader.newEntry(treeA, fileHeader, contentEditsDueToRebase, newSize, (newSize - oldSize)); if (com.google.gerrit.server.patch.EditTransformer.toEdits(patchListEntry).allMatch(editsDueToRebase::contains)) { return java.util.Optional.empty(); } return java.util.Optional.of(patchListEntry); }",fe5be84872b97684ad4df05da9fb335beace8f40,"getPatchListEntry(org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.diff.DiffFormatter,org.eclipse.jgit.diff.DiffEntry,org.eclipse.jgit.revwalk.RevTree,org.eclipse.jgit.revwalk.RevTree,java.util.Set)",15324,422,418
76826,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Topic.java,0.0,"@com.google.gwt.uibinder.client.UiHandler(""save"") void onSaveKeyPress(com.google.gwt.event.dom.client.KeyPressEvent e) { if ((e.getNativeEvent().getKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { e.stopPropagation(); } }",8fb70ad3242927f350b0e59127a341060db27fd8,"@com.google.gwt.uibinder.client.UiHandler(""save"") void onSaveKeyPress(com.google.gwt.event.dom.client.KeyPressEvent e) { if ((e.getNativeKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { e.stopPropagation(); } }",7741b00280a9b4ebd9136524091d4f535fa4d3f2,onSaveKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),onSaveKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),4,0,"@com.google.gwt.uibinder.client.UiHandler(""save"") void onSaveKeyPress(com.google.gwt.event.dom.client.KeyPressEvent e) { if ((e.getNativeEvent().getKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { e.stopPropagation(); } }",8fb70ad3242927f350b0e59127a341060db27fd8,onSaveKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),48273,78,80
70893,gerrit-gpg_src_main_java_com_google_gerrit_gpg_server_GpgKeys.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static com.google.gerrit.extensions.common.GpgKeyInfo toJson(org.bouncycastle.openpgp.PGPPublicKey key, com.google.gerrit.gpg.CheckResult checkResult) throws java.io.IOException { com.google.gerrit.extensions.common.GpgKeyInfo info = new com.google.gerrit.extensions.common.GpgKeyInfo(); info.id = com.google.gerrit.gpg.PublicKeyStore.keyIdToString(key.getKeyID()); info.fingerprint = com.google.gerrit.gpg.Fingerprint.toString(key.getFingerprint()); @java.lang.SuppressWarnings(""unchecked"") java.util.Iterator<java.lang.String> userIds = key.getUserIDs(); info.userIds = com.google.common.collect.ImmutableList.copyOf(userIds); try (java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(4096);org.bouncycastle.bcpg.ArmoredOutputStream aout = new org.bouncycastle.bcpg.ArmoredOutputStream(out)) { key.encode(aout); info.key = new java.lang.String(out.toByteArray(), java.nio.charset.StandardCharsets.UTF_8); } info.status = checkResult.getStatus(); if (!(checkResult.getProblems().isEmpty())) { info.problems = checkResult.getProblems(); } return info; }",64a100b99c81d4318b52832d20128447c6f9fc25,,"toJson(org.bouncycastle.openpgp.PGPPublicKey,com.google.gerrit.gpg.CheckResult)",11,10,"public static com.google.gerrit.extensions.common.GpgKeyInfo toJson(org.bouncycastle.openpgp.PGPPublicKey key, com.google.gerrit.gpg.CheckResult checkResult) throws java.io.IOException { com.google.gerrit.extensions.common.GpgKeyInfo info = new com.google.gerrit.extensions.common.GpgKeyInfo(); if (key != null) { info.id = com.google.gerrit.gpg.PublicKeyStore.keyIdToString(key.getKeyID()); info.fingerprint = com.google.gerrit.gpg.Fingerprint.toString(key.getFingerprint()); @java.lang.SuppressWarnings(""unchecked"") java.util.Iterator<java.lang.String> userIds = key.getUserIDs(); info.userIds = com.google.common.collect.ImmutableList.copyOf(userIds); try (java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(4096);org.bouncycastle.bcpg.ArmoredOutputStream aout = new org.bouncycastle.bcpg.ArmoredOutputStream(out)) { key.encode(aout); info.key = new java.lang.String(out.toByteArray(), java.nio.charset.StandardCharsets.UTF_8); } } info.status = checkResult.getStatus(); info.problems = checkResult.getProblems(); return info; }",51a910297c82090d990eb21cb603ef99dff71f4c,"toJson(org.bouncycastle.openpgp.PGPPublicKey,com.google.gerrit.gpg.CheckResult)",105513,304,299
79216,gerrit-server_src_main_java_com_google_gerrit_server_schema_SchemaUpdater.java,3.0,"public void update(final com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.reviewdb.server.ReviewDb db = com.google.gerrit.server.schema.SchemaUpdater.unwrap(schema.open())) { final com.google.gerrit.server.schema.SchemaVersion u = updater.get(); final com.google.gerrit.reviewdb.client.CurrentSchemaVersion version = getSchemaVersion(db); if (version == null) { try { creator.create(db); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException(""Cannot initialize schema"", e); } } else { try { u.check(ui, version, db); } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(""Cannot upgrade schema"", e); } updateSystemConfig(db); } } }",788182b3452cfe4586949c2b883a6e815e06e9a4,"public void update(final com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.reviewdb.server.ReviewDb db = com.google.gerrit.server.schema.ReviewDbUtil.unwrapDb(schema.open())) { final com.google.gerrit.server.schema.SchemaVersion u = updater.get(); final com.google.gerrit.reviewdb.client.CurrentSchemaVersion version = getSchemaVersion(db); if (version == null) { try { creator.create(db); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException(""Cannot initialize schema"", e); } } else { try { u.check(ui, version, db); } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(""Cannot upgrade schema"", e); } updateSystemConfig(db); } } }",eb1760177fb806e5177e207f7804fc7c95320a8f,update(com.google.gerrit.server.schema.UpdateUI),update(com.google.gerrit.server.schema.UpdateUI),9,3,"public void update(final com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.reviewdb.server.ReviewDb db = com.google.gerrit.reviewdb.server.ReviewDbUtil.unwrapDb(schema.open())) { final com.google.gerrit.server.schema.SchemaVersion u = updater.get(); final com.google.gerrit.reviewdb.client.CurrentSchemaVersion version = getSchemaVersion(db); if (version == null) { try { creator.create(db); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException(""Cannot initialize schema"", e); } } else { try { u.check(ui, version, db); } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(""Cannot upgrade schema"", e); } updateSystemConfig(db); } } }",8bff8565be981dcf0f2425844cfd0d7dac4fccad,update(com.google.gerrit.server.schema.UpdateUI),51261,239,241
68617,gerrit-server_src_main_java_com_google_gerrit_server_config_FlushCache.java,0.0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.config.CacheResource rsrc, com.google.gerrit.server.config.FlushCache.Input input) throws com.google.gerrit.extensions.restapi.AuthException { if ((com.google.gerrit.server.config.FlushCache.WEB_SESSIONS.equals(rsrc.getName())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format(""only site administrators can flush %s"", com.google.gerrit.server.config.FlushCache.WEB_SESSIONS)); } rsrc.getCache().invalidateAll(); return com.google.gerrit.extensions.restapi.Response.ok(""""); }",7ffd409436cc9f612119042ed3580667edc57c73,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.config.CacheResource rsrc, com.google.gerrit.server.config.FlushCache.Input input) throws com.google.gerrit.extensions.restapi.AuthException { if ((com.google.gerrit.server.config.FlushCache.WEB_SESSIONS.equals(rsrc.getName())) && (!(self.get().getCapabilities().canMaintainServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format(""only site administrators can flush %s"", com.google.gerrit.server.config.FlushCache.WEB_SESSIONS)); } rsrc.getCache().invalidateAll(); return com.google.gerrit.extensions.restapi.Response.ok(""""); }",2964c72c1cc54cbd760a61302b82edc068056724,"apply(com.google.gerrit.server.config.CacheResource,com.google.gerrit.server.config.FlushCache$Input)","apply(com.google.gerrit.server.config.CacheResource,com.google.gerrit.server.config.FlushCache$Input)",3,0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.config.CacheResource rsrc, com.google.gerrit.server.config.FlushCache.Input input) throws com.google.gerrit.extensions.restapi.AuthException { if ((com.google.gerrit.server.config.FlushCache.WEB_SESSIONS.equals(rsrc.getName())) && (!(self.get().getCapabilities().canMaintainServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format(""only site maintainers can flush %s"", com.google.gerrit.server.config.FlushCache.WEB_SESSIONS)); } rsrc.getCache().invalidateAll(); return com.google.gerrit.extensions.restapi.Response.ok(""""); }",de9f6ee601ec21e4e7ce0883b741b81d955a78cb,"apply(com.google.gerrit.server.config.CacheResource,com.google.gerrit.server.config.FlushCache$Input)",205185,202,202
67545,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeRebuilder.java,6.0,"void applyDraft(com.google.gerrit.server.notedb.ChangeDraftUpdate draftUpdate) throws com.google.gwtorm.server.OrmException { if ((c.getRevId()) == null) { com.google.gerrit.server.PatchLineCommentsUtil.setCommentRevId(c, cache, change, ps); } draftUpdate.insertComment(c); }",2bdaf3eef63e04f8ccabfa8cac3c2741fde47383,"void applyDraft(com.google.gerrit.server.notedb.ChangeDraftUpdate draftUpdate) throws com.google.gwtorm.server.OrmException { if ((c.getRevId()) == null) { com.google.gerrit.server.PatchLineCommentsUtil.getRevId(c, cache, change, ps); } draftUpdate.insertComment(c); }",3a25cb57b29a28ae0cc8c2dd7a9e1129808e00fc,applyDraft(com.google.gerrit.server.notedb.ChangeDraftUpdate),applyDraft(com.google.gerrit.server.notedb.ChangeDraftUpdate),5,6,"void applyDraft(com.google.gerrit.server.notedb.ChangeDraftUpdate draftUpdate) throws com.google.gwtorm.server.OrmException { if ((c.getRevId()) == null) { com.google.gerrit.server.PatchLineCommentsUtil.setCommentRevId(c, cache, change, ps); } draftUpdate.insertComment(c); }",2bdaf3eef63e04f8ccabfa8cac3c2741fde47383,applyDraft(com.google.gerrit.server.notedb.ChangeDraftUpdate),141398,85,86
34480,gerrit-server_src_main_java_com_google_gerrit_server_config_ConfigUtil.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroup.NameKey apply(java.lang.String name) { return new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(name); },4d52ce9654f5d1ca6e1aec8105cec466c438225f,,apply(java.lang.String),2,11,@java.lang.Override public AccountGroup.NameKey apply(java.lang.String name) { return new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(name); },807c7c112a15e8319bf6da6149fc47ec573369c2,apply(java.lang.String),110271,59,46
47870,gerrit-gwtui_src_main_java_com_google_gerrit_client_api_ActionContext.java,,,,"private static final void put(com.google.gerrit.client.rpc.RestApi api, com.google.gwt.core.client.JavaScriptObject in, final com.google.gwt.core.client.JavaScriptObject cb) { api.put(in, com.google.gerrit.client.api.ActionContext.wrap(cb)); }",e69bb1f3d2078f6fa89843e5275a1d12c2a8a6b1,,"put(com.google.gerrit.client.rpc.RestApi,com.google.gwt.core.client.JavaScriptObject,com.google.gwt.core.client.JavaScriptObject)",7,8,"static final void put(com.google.gerrit.client.rpc.RestApi api, com.google.gwt.core.client.JavaScriptObject in, com.google.gwt.core.client.JavaScriptObject cb) { api.put(in, com.google.gerrit.client.api.ActionContext.wrap(cb)); }",63b058edeb3b081ffa301db2ff1b2bbaa8026784,"put(com.google.gerrit.client.rpc.RestApi,com.google.gwt.core.client.JavaScriptObject,com.google.gwt.core.client.JavaScriptObject)",192371,75,73
132113,gerrit-server_src_main_java_com_google_gerrit_server_git_receive_ReceiveCommits.java,28.0,"void addOps(com.google.gerrit.server.update.BatchUpdate bu, @com.google.gerrit.common.Nullable com.google.gerrit.server.git.MultiProgressMonitor.Task progress) throws java.io.IOException { if (((magicBranch) != null) && ((magicBranch.edit) || (magicBranch.draft))) { bu.addOp(notes.getChangeId(), new com.google.gerrit.server.git.receive.ReceiveCommits.ReindexOnlyOp()); if ((prev) != null) { bu.addRepoOnlyOp(new com.google.gerrit.server.git.receive.ReceiveCommits.UpdateOneRefOp(prev)); } bu.addRepoOnlyOp(new com.google.gerrit.server.git.receive.ReceiveCommits.UpdateOneRefOp(cmd)); return; } org.eclipse.jgit.revwalk.RevWalk rw = rp.getRevWalk(); org.eclipse.jgit.revwalk.RevCommit newCommit = rw.parseCommit(newCommitId); rw.parseBody(newCommit); org.eclipse.jgit.revwalk.RevCommit priorCommit = revisions.inverse().get(priorPatchSet); replaceOp = replaceOpFactory.create(projectControl, notes.getChange().getDest(), checkMergedInto, priorPatchSet, priorCommit, psId, newCommit, info, groups, magicBranch, rp.getPushCertificate()).setRequestScopePropagator(requestScopePropagator); bu.addOp(notes.getChangeId(), replaceOp); if (progress != null) { bu.addOp(notes.getChangeId(), new com.google.gerrit.server.git.receive.ChangeProgressOp(progress)); } }",576f55eb36879fd01e46e070d046ce43302d7bda,"void addOps(com.google.gerrit.server.update.BatchUpdate bu, @com.google.gerrit.common.Nullable com.google.gerrit.server.git.MultiProgressMonitor.Task progress) throws java.io.IOException { if (((magicBranch) != null) && ((magicBranch.edit) || (magicBranch.draft))) { bu.addOp(notes.getChangeId(), new com.google.gerrit.server.git.receive.ReceiveCommits.ReindexOnlyOp()); if ((prev) != null) { bu.addRepoOnlyOp(new com.google.gerrit.server.git.receive.ReceiveCommits.UpdateOneRefOp(prev)); } bu.addRepoOnlyOp(new com.google.gerrit.server.git.receive.ReceiveCommits.UpdateOneRefOp(cmd)); return; } org.eclipse.jgit.revwalk.RevWalk rw = rp.getRevWalk(); org.eclipse.jgit.revwalk.RevCommit newCommit = rw.parseCommit(newCommitId); rw.parseBody(newCommit); org.eclipse.jgit.revwalk.RevCommit priorCommit = revisions.inverse().get(priorPatchSet); replaceOp = replaceOpFactory.create(projectState, user, notes.getChange().getDest(), checkMergedInto, priorPatchSet, priorCommit, psId, newCommit, info, groups, magicBranch, rp.getPushCertificate()).setRequestScopePropagator(requestScopePropagator); bu.addOp(notes.getChangeId(), replaceOp); if (progress != null) { bu.addOp(notes.getChangeId(), new com.google.gerrit.server.git.receive.ChangeProgressOp(progress)); } }",f564a0a3ac4a158ac4875925d1a691ac52487806,"addOps(com.google.gerrit.server.update.BatchUpdate,com.google.gerrit.server.git.MultiProgressMonitor.Task)","addOps(com.google.gerrit.server.update.BatchUpdate,com.google.gerrit.server.git.MultiProgressMonitor.Task)",2,28,"void addOps(com.google.gerrit.server.update.BatchUpdate bu, @com.google.gerrit.common.Nullable com.google.gerrit.server.git.MultiProgressMonitor.Task progress) throws java.io.IOException { if (((magicBranch) != null) && ((magicBranch.edit) || (magicBranch.draft))) { bu.addOp(notes.getChangeId(), new com.google.gerrit.server.git.receive.ReceiveCommits.ReindexOnlyOp()); if ((prev) != null) { bu.addRepoOnlyOp(new com.google.gerrit.server.git.receive.ReceiveCommits.UpdateOneRefOp(prev)); } bu.addRepoOnlyOp(new com.google.gerrit.server.git.receive.ReceiveCommits.UpdateOneRefOp(cmd)); return; } org.eclipse.jgit.revwalk.RevWalk rw = rp.getRevWalk(); org.eclipse.jgit.revwalk.RevCommit newCommit = rw.parseCommit(newCommitId); rw.parseBody(newCommit); org.eclipse.jgit.revwalk.RevCommit priorCommit = revisions.inverse().get(priorPatchSet); replaceOp = replaceOpFactory.create(projectState, notes.getChange().getDest(), checkMergedInto, priorPatchSet, priorCommit, psId, newCommit, info, groups, magicBranch, rp.getPushCertificate()).setRequestScopePropagator(requestScopePropagator); bu.addOp(notes.getChangeId(), replaceOp); if (progress != null) { bu.addOp(notes.getChangeId(), new com.google.gerrit.server.git.receive.ChangeProgressOp(progress)); } }",76f4e8e73dcb57811b3758d68025738d1f376bbc,"addOps(com.google.gerrit.server.update.BatchUpdate,com.google.gerrit.server.git.MultiProgressMonitor.Task)",188902,394,392
24116,gerrit-gwtui_src_main_java_com_google_gerrit_client_Dispatcher.java,30.0,"private static java.lang.String skip(final java.lang.String prefix, final java.lang.String in) { return in.substring(prefix.length()); }",1961c69342126cc58704d0771085bf9f59b8e8e3,"public static void patch(java.lang.String token, final com.google.gerrit.reviewdb.Patch.Key id, final int patchIndex, final com.google.gerrit.common.data.PatchSetDetail patchSetDetail, final com.google.gerrit.client.changes.PatchTable patchTable, final java.lang.String type) { com.google.gwt.core.client.GWT.runAsync(new com.google.gerrit.client.Dispatcher.AsyncSplit(token) { public void onSuccess() { com.google.gerrit.client.Gerrit.display(token, select()); } private com.google.gerrit.client.ui.Screen select() { if ((com.google.gerrit.client.Dispatcher.matchPrefix(""/c/"", token)) && (id != null)) { if ((type == null) || ("""".equals(type))) { return new com.google.gerrit.client.patches.PatchScreen.SideBySide(id, patchIndex, patchSetDetail, patchTable); } else if (""unified"".equals(type)) { return new com.google.gerrit.client.patches.PatchScreen.Unified(id, patchIndex, patchSetDetail, patchTable); } else { return new com.google.gerrit.client.NotFoundScreen(); } } if (com.google.gerrit.client.Dispatcher.matchPrefix(""patch,sidebyside,"", token)) { return new com.google.gerrit.client.patches.PatchScreen.SideBySide((id != null ? id : Patch.Key.parse(com.google.gerrit.client.Dispatcher.skip(token))), patchIndex, patchSetDetail, patchTable); } if (com.google.gerrit.client.Dispatcher.matchPrefix(""patch,unified,"", token)) { return new com.google.gerrit.client.patches.PatchScreen.Unified((id != null ? id : Patch.Key.parse(com.google.gerrit.client.Dispatcher.skip(token))), patchIndex, patchSetDetail, patchTable); } return new com.google.gerrit.client.NotFoundScreen(); } }); }",69982d035f587344827c4e926ff9a42eddd8c1f9,"skip(java.lang.String,java.lang.String)","patch(java.lang.String,com.google.gerrit.reviewdb.Patch$Key,int,com.google.gerrit.common.data.PatchSetDetail,com.google.gerrit.client.changes.PatchTable,java.lang.String)",2,14,"public static void patch(java.lang.String token, final com.google.gerrit.reviewdb.Patch.Key id, final int patchIndex, final com.google.gerrit.common.data.PatchSetDetail patchSetDetail, final com.google.gerrit.client.changes.PatchTable patchTable, final java.lang.String panelType) { com.google.gwt.core.client.GWT.runAsync(new com.google.gerrit.client.Dispatcher.AsyncSplit(token) { public void onSuccess() { com.google.gerrit.client.Gerrit.display(token, select()); } private com.google.gerrit.client.ui.Screen select() { if (id != null) { java.lang.String panel = panelType; if (panel == null) { int c = token.lastIndexOf(','); panel = (0 <= c) ? token.substring((c + 1)) : """"; } if ("""".equals(panel)) { return new com.google.gerrit.client.patches.PatchScreen.SideBySide(id, patchIndex, patchSetDetail, patchTable); } else if (""unified"".equals(panel)) { return new com.google.gerrit.client.patches.PatchScreen.Unified(id, patchIndex, patchSetDetail, patchTable); } } return new com.google.gerrit.client.NotFoundScreen(); } }); }",edc872ecced69aabed357a4d1145ec2c82ae6da3,"patch(java.lang.String,com.google.gerrit.reviewdb.Patch$Key,int,com.google.gerrit.common.data.PatchSetDetail,com.google.gerrit.client.changes.PatchTable,java.lang.String)",101937,488,311
48172,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,47.0,void resizeCodeMirror() { int h = (((com.google.gerrit.client.Gerrit.getHeaderFooterHeight()) + (reviewed.getOffsetHeight())) + (diffTable.getHeaderHeight())) + 5; if ((cmA) != null) { cmA.setHeight(((com.google.gwt.user.client.Window.getClientHeight()) - h)); cmA.refresh(); } if ((cmB) != null) { cmB.setHeight(((com.google.gwt.user.client.Window.getClientHeight()) - h)); cmB.refresh(); } diffTable.sidePanel.adjustGutters(cmB); },771c2141ac4c99fe3e73a928ab92bdf26e3bf23c,void resizeCodeMirror() { if ((cmA) == null) { return; } int h = (((com.google.gerrit.client.Gerrit.getHeaderFooterHeight()) + (reviewed.getOffsetHeight())) + (diffTable.getHeaderHeight())) + 10; cmA.setHeight(((com.google.gwt.user.client.Window.getClientHeight()) - h)); cmA.refresh(); cmB.setHeight(((com.google.gwt.user.client.Window.getClientHeight()) - h)); cmB.refresh(); diffTable.sidePanel.adjustGutters(cmB); },d6a8ccff044e0327e5737acd09182cc96aa639c8,resizeCodeMirror(),resizeCodeMirror(),7,42,void resizeCodeMirror() { if ((cmA) == null) { return; } int h = (((com.google.gerrit.client.Gerrit.getHeaderFooterHeight()) + (reviewed.getOffsetHeight())) + (diffTable.getHeaderHeight())) + 10; cmA.setHeight(((com.google.gwt.user.client.Window.getClientHeight()) - h)); cmA.refresh(); cmB.setHeight(((com.google.gwt.user.client.Window.getClientHeight()) - h)); cmB.refresh(); },d34a4b4c03802d3159b7d30c5fed7c573c6feb7b,resizeCodeMirror(),146791,130,116
138780,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void testCreateGroupWithProperties(boolean writeGroupsToNoteDb) throws java.lang.Exception { com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name(""newGroup""); in.description = ""Test description""; in.visibleToAll = true; in.ownerId = getFromCache(""Administrators"").getGroupUUID().get(); com.google.gerrit.extensions.common.GroupInfo g = gApi.groups().create(in).detail(); assertThat(g.description).isEqualTo(in.description); assertThat(g.options.visibleToAll).isEqualTo(in.visibleToAll); assertThat(g.ownerId).isEqualTo(in.ownerId); if (writeGroupsToNoteDb) { assertGroupOwnerPermissions(g.id, in.ownerId); } }",33b3ad80fd9f65aa2c45d9517bf185d9a06e4ed3,,testCreateGroupWithProperties(boolean),6,79,"private void pushToGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedError) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Update group config"", ""group.config"", ""some content"").setParents(com.google.common.collect.ImmutableList.of()).to(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + (name(""foo"")))); if (expectedError != null) { r.assertErrorStatus(expectedError); } else { r.assertOkStatus(); } java.lang.String groupRefName = (com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + (name(""bar"")); createGroupBranch(project, groupRefName); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefName + "":groupRef"")); repo.reset(""groupRef""); r = pushFactory.create(db, admin.getIdent(), repo, ""Update group config"", ""group.config"", ""some content"").to(groupRefName); if (expectedError != null) { r.assertErrorStatus(expectedError); } else { r.assertOkStatus(); } }",58ef34fb0beb95ec1dac151171b98592f48e9723,"pushToGroupBranch(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)",12339,192,452
87710,src_main_java_com_googlesource_gerrit_plugins_deleteproject_fs_DeleteTrashFolders.java,3.0,"@java.lang.Override public void run() { try { java.nio.file.Files.walkFileTree(gitDir, new com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.TrashFolderRemover()); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.log.warn(""Exception occured while trying to delete trash folders"", e); } }",a0288a85801bc0cd207ecd2bd9fa39c210a361f3,"@java.lang.Override public void run() { for (java.lang.String folder : repoFolders) { java.nio.file.Path basePath = java.nio.file.Paths.get(folder); if (java.nio.file.Files.notExists(basePath)) { com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.log.debug(""Base path {} does not exist"", basePath); continue; } try { java.nio.file.Files.walkFileTree(basePath, new com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.TrashFolderRemover()); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.log.warn(""Exception while trying to delete trash folders"", e); } } }",1fafec51107ccb3999c4745307120b3ddf820969,run(),run(),4,3,"@java.lang.Override public void run() { for (java.nio.file.Path folder : repoFolders) { if (java.nio.file.Files.notExists(folder)) { com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.log.debug(""Base path {} does not exist"", folder); continue; } try { java.nio.file.Files.walkFileTree(folder, new com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.TrashFolderRemover()); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.log.warn(""Exception while trying to delete trash folders"", e); } } }",eb1e216bc558e876722fad6c9c0518a8b8fedc37,run(),102463,186,165
138331,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsAuthToken.java,0.0,static boolean onTime(java.lang.String dateTime) { java.lang.String now = com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.print(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now()); return (now.compareTo(dateTime)) <= 0; },52a16b34330fcdd7e018ff28e8db0ea167d73e4e,static boolean onTime(java.lang.String dateTime) { java.lang.String now = com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now()); return (now.compareTo(dateTime)) <= 0; },1dfea34a809a77a1d6b255959b20b0434ae723b9,onTime(java.lang.String),onTime(java.lang.String),12,0,static boolean onTime(java.lang.String dateTime) { return (com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMAT.now().compareTo(dateTime)) <= 0; },38f0aaa1af88381d133c1a3dd6a2636a8fea6442,onTime(java.lang.String),170495,71,43
35810,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_PatchTable.java,14.0,"public com.google.gerrit.client.ui.InlineHyperlink getPreviousPatchLink(int index, com.google.gerrit.client.patches.PatchScreen.Type patchType) { for (index--; index > (-1); index--) { com.google.gerrit.client.ui.InlineHyperlink link = createLink(index, patchType, com.google.gwtexpui.safehtml.client.SafeHtml.asis(Util.C.prevPatchLinkIcon()), null); if (link != null) { return link; } } return null; }",c56e6b5f27be3ee000812be7b275a07fdfbc4a69,"public com.google.gerrit.client.ui.InlineHyperlink getPreviousPatchLink(int index, com.google.gerrit.client.patches.PatchScreen.Type patchType) { int previousPatchIndex = detail.getPreviousPatch(index, PREFERENCE_VALIDATOR); if (previousPatchIndex < 0) { return null; } com.google.gerrit.client.ui.InlineHyperlink link = createLink(previousPatchIndex, patchType, com.google.gwtexpui.safehtml.client.SafeHtml.asis(Util.C.prevPatchLinkIcon()), null); return link; }",9258a0d3d3bdfc0074a1641a6c822b7c7629bd7b,"getPreviousPatchLink(int,com.google.gerrit.client.patches.PatchScreen$Type)","getPreviousPatchLink(int,com.google.gerrit.client.patches.PatchScreen$Type)",2,30,"public com.google.gerrit.client.ui.InlineHyperlink getPreviousPatchLink(int index, com.google.gerrit.client.patches.PatchScreen.Type patchType) { int previousPatchIndex = getPreviousPatch(index, PREFERENCE_VALIDATOR); if (previousPatchIndex < 0) { return null; } com.google.gerrit.client.ui.InlineHyperlink link = createLink(previousPatchIndex, patchType, com.google.gwtexpui.safehtml.client.SafeHtml.asis(Util.C.prevPatchLinkIcon()), null); return link; }",16368f73665d201cc97da200d04273fc5813ef02,"getPreviousPatchLink(int,com.google.gerrit.client.patches.PatchScreen$Type)",1766,133,132
24659,gerrit-server_src_main_java_com_google_gerrit_server_project_RefControl.java,16.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private boolean isHidden() { return getProjectControl().getProject().getState().equals(Project.State.HIDDEN); },4c96bd948ef2ecb78615ff0e336d3fdccc5a4ea6,,isHidden(),7,21,public boolean canRead() { return (getProjectControl().getProject().getState().equals(Project.State.READ_ONLY)) || (canWrite()); },8449881a19ab90c1229e92ece1a0aea623a48173,canRead(),141048,24,30
169650,java_com_google_gerrit_server_restapi_project_SetAccessUtil.java,3.0,"void validateChanges(com.google.gerrit.server.git.ProjectConfig config, java.util.List<com.google.gerrit.common.data.AccessSection> removals, java.util.List<com.google.gerrit.common.data.AccessSection> additions) throws com.google.gerrit.common.errors.InvalidNameException, com.google.gerrit.extensions.restapi.BadRequestException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions, removals)) { boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(section.getName()); if (isGlobalCapabilities) { if (!(allProjects.equals(config.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""Cannot edit global capabilities for projects other than "" + (allProjects.get()))); } } } for (com.google.gerrit.common.data.AccessSection section : additions) { java.lang.String name = section.getName(); boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(name); if (!isGlobalCapabilities) { if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""invalid section name""); } com.google.gerrit.server.project.RefPattern.validate(name); } else { for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(com.google.gerrit.common.data.GlobalCapability.isCapability(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(((""Cannot add non-global capability "" + (p.getName())) + "" to global capabilities"")); } } } } }",01f184e58493845745346a2529ccebb06e1247ec,"void validateChanges(com.google.gerrit.server.git.ProjectConfig config, java.util.List<com.google.gerrit.common.data.AccessSection> removals, java.util.List<com.google.gerrit.common.data.AccessSection> additions) throws com.google.gerrit.common.errors.InvalidNameException, com.google.gerrit.extensions.restapi.BadRequestException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions, removals)) { boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(section.getName()); if (isGlobalCapabilities) { if (!(allProjects.equals(config.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""Cannot edit global capabilities for projects other than "" + (allProjects.get()))); } } } for (com.google.gerrit.common.data.AccessSection section : additions) { java.lang.String name = section.getName(); boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(name); if (!isGlobalCapabilities) { if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""invalid section name""); } com.google.gerrit.server.project.RefPattern.validate(name); } else { java.util.Set<java.lang.String> pluginCapabilities = listCapabilities.collectPluginCapabilities().keySet(); for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!((com.google.gerrit.common.data.GlobalCapability.isGlobalCapability(p.getName())) || (pluginCapabilities.contains(p.getName())))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(((""Cannot add non-global capability "" + (p.getName())) + "" to global capabilities"")); } } } } }",0baa3d0969d195017ee47b068d495fa7c3789cd8,"validateChanges(com.google.gerrit.server.git.ProjectConfig,java.util.List,java.util.List)","validateChanges(com.google.gerrit.server.git.ProjectConfig,java.util.List,java.util.List)",5,4,"void validateChanges(com.google.gerrit.server.git.ProjectConfig config, java.util.List<com.google.gerrit.common.data.AccessSection> removals, java.util.List<com.google.gerrit.common.data.AccessSection> additions) throws com.google.gerrit.common.errors.InvalidNameException, com.google.gerrit.extensions.restapi.BadRequestException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions, removals)) { boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(section.getName()); if (isGlobalCapabilities) { if (!(allProjects.equals(config.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""Cannot edit global capabilities for projects other than "" + (allProjects.get()))); } } } for (com.google.gerrit.common.data.AccessSection section : additions) { java.lang.String name = section.getName(); boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(name); if (!isGlobalCapabilities) { if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""invalid section name""); } com.google.gerrit.server.project.RefPattern.validate(name); } else { for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(isCapability(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(((""Cannot add non-global capability "" + (p.getName())) + "" to global capabilities"")); } } } } }",63410a4c0cf14cce8150f7976f95a2ca8260570d,"validateChanges(com.google.gerrit.server.git.ProjectConfig,java.util.List,java.util.List)",56593,465,413
162992,java_com_google_gerrit_server_index_change_ChangeField.java,16.0,private com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; if ((labels) != null) { rec.labels = new java.util.ArrayList(labels.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredLabel label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label; srl.status = label.status; srl.appliedBy = ((label.appliedBy) != null) ? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); } } return rec; },f4ac5640ff5b7fb247a13e7383545a9ee05cc9c4,private com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; if ((labels) != null) { rec.labels = new java.util.ArrayList(labels.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredLabel label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label; srl.status = label.status; srl.appliedBy = ((label.appliedBy) != null) ? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); } } if ((requirements) != null) { rec.requirements = new java.util.ArrayList(requirements.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredRequirement requirement : requirements) { com.google.gerrit.common.data.SubmitRequirement.Builder srb = com.google.gerrit.common.data.SubmitRequirement.builder(); srb.setFullReason(requirement.fullReason); srb.setShortReason(requirement.shortReason); if ((requirement.label) != null) { srb.setLabel(requirement.label); } rec.requirements.add(srb.build()); } } return rec; },bafdb0e3c5877e8ef4f8140d0f9107bbcbf54402,toSubmitRecord(),toSubmitRecord(),20,16,"private com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; if ((labels) != null) { rec.labels = new java.util.ArrayList(labels.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredLabel label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label; srl.status = label.status; srl.appliedBy = ((label.appliedBy) != null) ? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); } } if ((requirements) != null) { rec.requirements = new java.util.ArrayList(requirements.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredRequirement requirement : requirements) { com.google.gerrit.common.data.SubmitRequirement sr = new com.google.gerrit.common.data.SubmitRequirement(requirement.shortReason, requirement.fullReason, requirement.label); rec.requirements.add(sr); } } return rec; }",1b32e4c45399f6b9857c51254b89594b55ae466f,toSubmitRecord(),167880,388,347
89132,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeOp.java,11.0,"private void abandonAllOpenChangeForDeletedProject(com.google.gerrit.reviewdb.client.Project.NameKey destProject) { try { for (com.google.gerrit.server.query.change.ChangeData cd : internalChangeQuery.byProjectOpen(destProject)) { try (com.google.gerrit.server.git.BatchUpdate bu = batchUpdateFactory.create(db, destProject, internalUserFactory.create(), ts)) { bu.setRequestId(submissionId); bu.addOp(cd.getId(), new com.google.gerrit.server.git.BatchUpdate.Op() { @java.lang.Override public boolean updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = ctx.getChange(); if (!(change.getStatus().isOpen())) { return false; } change.setStatus(Change.Status.ABANDONED); com.google.gerrit.reviewdb.client.ChangeMessage msg = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx.getDb(), change.currentPatchSetId(), internalUserFactory.create(), change.getLastUpdatedOn(), ""Project was deleted.""); cmUtil.addChangeMessage(ctx.getDb(), ctx.getUpdate(change.currentPatchSetId()), msg); return true; } }); try { bu.execute(); } catch (com.google.gerrit.server.git.UpdateException | com.google.gerrit.extensions.restapi.RestApiException e) { logWarn((""Cannot abandon changes for deleted project "" + destProject), e); } } } } catch (com.google.gwtorm.server.OrmException e) { logWarn((""Cannot abandon changes for deleted project "" + destProject), e); } }",83b8391ec0d1ebf7104d3ab5ebda4c5579c62254,"private void abandonAllOpenChangeForDeletedProject(com.google.gerrit.reviewdb.client.Project.NameKey destProject) { try { for (com.google.gerrit.server.query.change.ChangeData cd : internalChangeQuery.byProjectOpen(destProject)) { try (com.google.gerrit.server.git.BatchUpdate bu = batchUpdateFactory.create(db, destProject, internalUserFactory.create(), ts)) { bu.setRequestId(submissionId); bu.addOp(cd.getId(), new com.google.gerrit.server.git.BatchUpdate.Op() { @java.lang.Override public boolean updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = ctx.getChange(); if (!(change.getStatus().isOpen())) { return false; } change.setStatus(Change.Status.ABANDONED); com.google.gerrit.reviewdb.client.ChangeMessage msg = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx.getDb(), change.currentPatchSetId(), internalUserFactory.create(), change.getLastUpdatedOn(), ChangeMessagesUtil.MERGE_OP, ""Project was deleted.""); cmUtil.addChangeMessage(ctx.getDb(), ctx.getUpdate(change.currentPatchSetId()), msg); return true; } }); try { bu.execute(); } catch (com.google.gerrit.server.git.UpdateException | com.google.gerrit.extensions.restapi.RestApiException e) { logWarn((""Cannot abandon changes for deleted project "" + destProject), e); } } } } catch (com.google.gwtorm.server.OrmException e) { logWarn((""Cannot abandon changes for deleted project "" + destProject), e); } }",2824df620fbf61bc02eedca235217162a9d6f981,abandonAllOpenChangeForDeletedProject(com.google.gerrit.reviewdb.client.Project$NameKey),abandonAllOpenChangeForDeletedProject(com.google.gerrit.reviewdb.client.Project$NameKey),11,11,"private void abandonAllOpenChangeForDeletedProject(com.google.gerrit.reviewdb.client.Project.NameKey destProject) { try { for (com.google.gerrit.server.query.change.ChangeData cd : internalChangeQuery.byProjectOpen(destProject)) { try (com.google.gerrit.server.git.BatchUpdate bu = batchUpdateFactory.create(db, destProject, internalUserFactory.create(), ts)) { bu.setRequestId(submissionId); bu.addOp(cd.getId(), new com.google.gerrit.server.git.BatchUpdate.Op() { @java.lang.Override public boolean updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = ctx.getChange(); if (!(change.getStatus().isOpen())) { return false; } change.setStatus(Change.Status.ABANDONED); com.google.gerrit.reviewdb.client.ChangeMessage msg = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx.getDb(), change.currentPatchSetId(), internalUserFactory.create(), change.getLastUpdatedOn(), ChangeMessagesUtil.TAG_MERGED, ""Project was deleted.""); cmUtil.addChangeMessage(ctx.getDb(), ctx.getUpdate(change.currentPatchSetId()), msg); return true; } }); try { bu.execute(); } catch (com.google.gerrit.server.git.UpdateException | com.google.gerrit.extensions.restapi.RestApiException e) { logWarn((""Cannot abandon changes for deleted project "" + destProject), e); } } } } catch (com.google.gwtorm.server.OrmException e) { logWarn((""Cannot abandon changes for deleted project "" + destProject), e); } }",8df381c385ed5e3b295978d824de8b58b2fef99b,abandonAllOpenChangeForDeletedProject(com.google.gerrit.reviewdb.client.Project$NameKey),73633,433,434
50841,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_CommitBox.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void formatLink(com.google.gerrit.client.changes.ChangeInfo.GitPerson person, com.google.gerrit.client.ui.InlineHyperlink name, com.google.gwt.dom.client.Element date, com.google.gerrit.client.account.AccountInfo a, com.google.gerrit.reviewdb.client.Change.Status status) { name.setText(((((person.name()) + "" <"") + (person.email())) + "">"")); name.setTargetHistoryToken(com.google.gerrit.common.PageLinks.toAccountQuery(com.google.gerrit.client.ui.AccountLinkPanel.owner(a), status)); date.setInnerText(com.google.gerrit.client.FormatUtil.mediumFormat(person.date())); }",6fa1c0ba368737c381d442371c58ec73497506b9,,"formatLink(com.google.gerrit.client.changes.ChangeInfo.GitPerson,com.google.gerrit.client.ui.InlineHyperlink,com.google.gwt.dom.client.Element,com.google.gerrit.client.account.AccountInfo,com.google.gerrit.reviewdb.client.Change.Status)",8,3,"private static void formatLink(com.google.gerrit.client.changes.ChangeInfo.GitPerson person, com.google.gerrit.client.ui.InlineHyperlink name, com.google.gwt.dom.client.Element date, com.google.gerrit.reviewdb.client.Change.Status status) { name.setText(com.google.gerrit.client.change.CommitBox.renderName(person)); name.setTargetHistoryToken(com.google.gerrit.common.PageLinks.toAccountQuery(com.google.gerrit.client.change.CommitBox.owner(person), status)); date.setInnerText(com.google.gerrit.client.FormatUtil.mediumFormat(person.date())); }",1fc2dd04eb9559631208eed1ef84827c45c22873,"formatLink(com.google.gerrit.client.changes.ChangeInfo.GitPerson,com.google.gerrit.client.ui.InlineHyperlink,com.google.gwt.dom.client.Element,com.google.gerrit.reviewdb.client.Change.Status)",51941,179,163
77891,gitiles-servlet_src_main_java_com_google_gitiles_doc_MarkdownToHtml.java,8.0,"@java.lang.Override public void visit(com.google.gitiles.doc.NamedAnchorNode node) { if (outputNamedAnchor) { html.open(""a"").attribute(""name"", node.name).close(""a""); } }",94bbe7a74bc40f1d63fc42ca33faa917afe719ae,"@java.lang.Override public void visit(com.google.gitiles.doc.NamedAnchor node) { if (outputNamedAnchor) { html.open(""a"").attribute(""name"", node.getName()).close(""a""); } }",8231bf51d930ddfa0f9c15dcc3831b89c4d9bb69,visit(com.google.gitiles.doc.NamedAnchorNode),visit(com.google.gitiles.doc.NamedAnchor),9,23,"@java.lang.Override public void visit(org.commonmark.node.FencedCodeBlock node) { codeInPre(node.getInfo(), node.getLiteral()); }",d97bd49ab0706a555430aa7f136c64c551876a0a,visit(org.commonmark.node.FencedCodeBlock),90754,52,39
57790,gerrit-server_src_test_java_com_google_gerrit_server_notedb_ChangeNotesTest.java,36.0,"@org.junit.Test public void changeMessageWithMultipleParagraphs() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.setChangeMessage((""Testing paragraph 1\n"" + (((""\n"" + ""Testing paragraph 2\n"") + ""\n"") + ""Testing paragraph 3""))); update.commit(); org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo); try { org.eclipse.jgit.revwalk.RevCommit commit = walk.parseCommit(update.getRevision()); walk.parseBody(commit); assertEquals((""Update patch set 1\n"" + (((((((""\n"" + ""Testing paragraph 1\n"") + ""\n"") + ""Testing paragraph 2\n"") + ""\n"") + ""Testing paragraph 3\n"") + ""\n"") + ""Patch-set: 1\n"")), commit.getFullMessage()); } finally { walk.release(); } com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); java.util.List<java.lang.String> changeMessages = notes.getChangeMessages(); assertEquals(1, changeMessages.size()); assertEquals((""Testing paragraph 1\n"" + (((""\n"" + ""Testing paragraph 2\n"") + ""\n"") + ""Testing paragraph 3"")), changeMessages.get(0)); }",85272457fd9e223644dfac67b4bbb9a9df0e1489,"@org.junit.Test public void changeMessageWithMultipleParagraphs() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.setChangeMessage((""Testing paragraph 1\n"" + (((""\n"" + ""Testing paragraph 2\n"") + ""\n"") + ""Testing paragraph 3""))); update.commit(); org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo); try { org.eclipse.jgit.revwalk.RevCommit commit = walk.parseCommit(update.getRevision()); walk.parseBody(commit); assertEquals((""Update patch set 1\n"" + (((((((""\n"" + ""Testing paragraph 1\n"") + ""\n"") + ""Testing paragraph 2\n"") + ""\n"") + ""Testing paragraph 3\n"") + ""\n"") + ""Patch-set: 1\n"")), commit.getFullMessage()); } finally { walk.release(); } com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); java.util.List<com.google.gerrit.reviewdb.client.ChangeMessage> changeMessages = notes.getChangeMessages(); assertEquals(1, changeMessages.size()); assertEquals((""Testing paragraph 1\n"" + (((""\n"" + ""Testing paragraph 2\n"") + ""\n"") + ""Testing paragraph 3"")), changeMessages.get(0).getMessage()); }",7808a1e9e7b9d76729b174bacc02f6af9e10ddda,changeMessageWithMultipleParagraphs(),changeMessageWithMultipleParagraphs(),6,37,"@org.junit.Test public void changeMessageWithMultipleParagraphs() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.setChangeMessage((""Testing paragraph 1\n"" + (((""\n"" + ""Testing paragraph 2\n"") + ""\n"") + ""Testing paragraph 3""))); update.commit(); com.google.gerrit.reviewdb.client.PatchSet.Id ps1 = c.currentPatchSetId(); org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo); try { org.eclipse.jgit.revwalk.RevCommit commit = walk.parseCommit(update.getRevision()); walk.parseBody(commit); assertEquals((""Update patch set 1\n"" + (((((((""\n"" + ""Testing paragraph 1\n"") + ""\n"") + ""Testing paragraph 2\n"") + ""\n"") + ""Testing paragraph 3\n"") + ""\n"") + ""Patch-set: 1\n"")), commit.getFullMessage()); } finally { walk.release(); } com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.ChangeMessage> changeMessages = notes.getChangeMessages(); assertEquals(1, changeMessages.keySet().size()); com.google.gerrit.reviewdb.client.ChangeMessage cm1 = com.google.common.collect.Iterables.getOnlyElement(changeMessages.get(ps1)); assertEquals((""Testing paragraph 1\n"" + (((""\n"" + ""Testing paragraph 2\n"") + ""\n"") + ""Testing paragraph 3"")), cm1.getMessage()); assertEquals(changeOwner.getAccount().getId(), cm1.getAuthor()); }",df5433a6249428df0fc8b314c8621eeed5a6b1ed,changeMessageWithMultipleParagraphs(),49153,345,447
105052,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_CommentApiImpl.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void delete(com.google.gerrit.extensions.api.changes.DeleteCommentInput input) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteComment.apply(comment, input); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException | com.google.gerrit.server.update.UpdateException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete comment"", e); } }",95b98b7074cb856e1686211c2d6c0e9de5031a85,,delete(com.google.gerrit.extensions.api.changes.DeleteCommentInput),16,1,"@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo delete(com.google.gerrit.extensions.api.changes.DeleteCommentInput input) throws com.google.gerrit.extensions.restapi.RestApiException { try { return deleteComment.apply(comment, input); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot delete comment"", e); } }",d4bad0dad411e9b69e03e182b11d4304e281c661,delete(com.google.gerrit.extensions.api.changes.DeleteCommentInput),75943,147,107
95291,gerrit-server_src_main_java_com_google_gerrit_server_edit_ChangeEditModifier.java,21.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static org.eclipse.jgit.revwalk.RevCommit lookupCommit(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws java.io.IOException { org.eclipse.jgit.lib.ObjectId patchSetCommitId = com.google.gerrit.server.edit.ChangeEditModifier.getPatchSetCommitId(patchSet); return com.google.gerrit.server.edit.ChangeEditModifier.lookup(repository, patchSetCommitId); }",a97a5f55d4b234db9a180ce8383a993109eae7d3,,"lookupCommit(org.eclipse.jgit.lib.Repository,com.google.gerrit.reviewdb.client.PatchSet)",3,12,"private static org.eclipse.jgit.revwalk.RevCommit lookupCommit(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws java.io.IOException { org.eclipse.jgit.lib.ObjectId patchSetCommitId = com.google.gerrit.server.edit.ChangeEditModifier.getPatchSetCommitId(patchSet); try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository)) { return revWalk.parseCommit(patchSetCommitId); } }",60dfed751fae1060ef47856238c534ce3c4f02b6,"lookupCommit(org.eclipse.jgit.lib.Repository,com.google.gerrit.reviewdb.client.PatchSet)",180106,119,141
68386,src_test_java_com_ericsson_gerrit_plugins_eventslog_SQLStoreTest.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testConnectionTask() throws java.sql.SQLException { eventsDb = new com.ericsson.gerrit.plugins.eventslog.SQLClient(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.TEST_DRIVER, com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.TEST_PATH, com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.TEST_OPTIONS); localEventsDb = easyMock.createMock(com.ericsson.gerrit.plugins.eventslog.SQLClient.class); expect(localEventsDb.getAll()).andReturn(new java.util.ArrayList<com.ericsson.gerrit.plugins.eventslog.SQLClient.SQLEntry>()); org.easymock.EasyMock.replay(localEventsDb); store = new com.ericsson.gerrit.plugins.eventslog.SQLStore(pcFactoryMock, userProviderMock, cfgMock, eventsDb, localEventsDb, poolMock); eventsDb.createDBIfNotCreated(); poolMock.scheduleWithFixedDelay(store.new com.ericsson.gerrit.plugins.eventslog.CheckConnectionTask(), 0, 0, java.util.concurrent.TimeUnit.MILLISECONDS); easyMock.verifyAll(); }",47c12a60aa217b8e924f56ddbc94f93f6bb8e593,,testConnectionTask(),2,10,"@org.junit.Test public void testConnectionTask() throws java.lang.Exception { eventsDb = new com.ericsson.gerrit.plugins.eventslog.SQLClient(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.TEST_DRIVER, com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.TEST_PATH, com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.TEST_OPTIONS); localEventsDb = easyMock.createMock(com.ericsson.gerrit.plugins.eventslog.SQLClient.class); expect(localEventsDb.getAll()).andReturn(new java.util.ArrayList<com.ericsson.gerrit.plugins.eventslog.SQLEntry>()); org.easymock.EasyMock.replay(localEventsDb); store = new com.ericsson.gerrit.plugins.eventslog.SQLStore(pcFactoryMock, userProviderMock, cfgMock, eventsDb, localEventsDb, poolMock); eventsDb.createDBIfNotCreated(); poolMock.scheduleWithFixedDelay(store.new com.ericsson.gerrit.plugins.eventslog.CheckConnectionTask(), 0, 0, java.util.concurrent.TimeUnit.MILLISECONDS); easyMock.verifyAll(); }",2060a3eee4f6f26f8554b4c078400d970f801910,testConnectionTask(),101459,283,280
54260,src_main_java_com_googlesource_gerrit_plugins_quota_MaxRepositorySizeQuota.java,,,,private long getDiskUsage(java.io.File file) { if (file.isFile()) { return file.length(); } long size = 0; for (java.io.File f : file.listFiles()) { size += getDiskUsage(f); } return size; },382294bf3a6fdfdbe5e8c064f81298fbf482411d,,getDiskUsage(java.io.File),7,0,"private static long getDiskUsage(java.io.File dir) throws java.io.IOException { final org.apache.commons.lang.mutable.MutableLong size = new org.apache.commons.lang.mutable.MutableLong(); java.nio.file.Files.walkFileTree(dir.toPath(), new java.nio.file.SimpleFileVisitor<java.nio.file.Path>() { @java.lang.Override public java.nio.file.FileVisitResult visitFile(java.nio.file.Path path, java.nio.file.attribute.BasicFileAttributes attrs) throws java.io.IOException { if (attrs.isRegularFile()) { size.add(attrs.size()); } return java.nio.file.FileVisitResult.CONTINUE; } }); return size.longValue(); }",7bcd590599ce8a6e95cade66950b5a5483506d28,getDiskUsage(java.io.File),3299,59,171
62233,src_main_java_com_googlesource_gerrit_plugins_xdocs_client_XDocsPlugin.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static java.lang.String getSideBySideDiffUrl(java.lang.String changeId, java.lang.Integer patchSetIdA, int patchSetIdB, java.lang.String fileName) { java.lang.StringBuilder url = new java.lang.StringBuilder(); url.append(""/x/""); url.append(com.google.gerrit.plugin.client.Plugin.get().getPluginName()); url.append(""/c/""); url.append(changeId); url.append(""/""); if (patchSetIdA != null) { url.append(patchSetIdA); url.append(""..""); } url.append(patchSetIdB); url.append(""/""); url.append(com.google.gwt.http.client.URL.encode(fileName)); return url.toString(); }",250a367a61a06d53eb29e303b82bb6ce4efa789d,,"getSideBySideDiffUrl(java.lang.String,java.lang.Integer,int,java.lang.String)",3,0,"public static java.lang.String getSideBySidePreviewDiffUrl(java.lang.String changeId, java.lang.Integer patchSetIdA, int patchSetIdB, java.lang.String fileName) { java.lang.StringBuilder url = new java.lang.StringBuilder(); url.append(""/x/""); url.append(com.google.gerrit.plugin.client.Plugin.get().getPluginName()); url.append(""/c/""); url.append(changeId); url.append(""/""); if (patchSetIdA != null) { url.append(patchSetIdA); url.append(""..""); } url.append(patchSetIdB); url.append(""/""); url.append(com.google.gwt.http.client.URL.encode(fileName)); return url.toString(); }",05a19d88a37cbba92e3a67963fa041fdd345df71,"getSideBySidePreviewDiffUrl(java.lang.String,java.lang.Integer,int,java.lang.String)",123850,173,174
100956,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_AbstractSubmit.java,52.0,"@java.lang.Override public void preBranchUpdate(com.google.gerrit.acceptance.rest.change.Arguments args) throws com.google.gerrit.server.validators.ValidationException { assertThat(args.getCommands().keySet()).contains(""refs/heads/master""); try (org.eclipse.jgit.revwalk.RevWalk rw = args.newRevWalk()) { rw.parseBody(rw.parseCommit(args.getCommands().get(""refs/heads/master"").getNewId())); } catch (java.io.IOException e) { assertThat(e).isNull(); } projectsCalled.add(args.getProject().get()); if ((projectsCalled.size()) == 2) { throw new com.google.gerrit.server.validators.ValidationException(""time to fail""); } }",cd9b55679897e2620c6d1d56777a725257a4a5a5,"@java.lang.Override public void preBranchUpdate(com.google.gerrit.acceptance.rest.change.Arguments args) throws com.google.gerrit.server.validators.ValidationException { assertThat(args.getCommands().getCommands()).containsKey(""refs/heads/master""); try (org.eclipse.jgit.revwalk.RevWalk rw = args.newRevWalk()) { rw.parseBody(rw.parseCommit(args.getCommands().get(""refs/heads/master"").get())); } catch (java.io.IOException e) { assertThat(e).isNull(); } projectsCalled.add(args.getProject().get()); if ((projectsCalled.size()) == 2) { throw new com.google.gerrit.server.validators.ValidationException(""time to fail""); } }",80230e9aa38b00cc1bf79f02699f557f90d1a943,preBranchUpdate(com.google.gerrit.acceptance.rest.change.Arguments),preBranchUpdate(com.google.gerrit.acceptance.rest.change.Arguments),7,53,"@java.lang.Override public void preBranchUpdate(com.google.gerrit.acceptance.rest.change.Arguments args) throws com.google.gerrit.server.validators.ValidationException { java.lang.String master = ""refs/heads/master""; assertThat(args.getCommands()).containsKey(master); org.eclipse.jgit.transport.ReceiveCommand cmd = args.getCommands().get(master); org.eclipse.jgit.lib.ObjectId newMasterId = cmd.getNewId(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { assertThat(repo.exactRef(master).getObjectId()).isEqualTo(cmd.getOldId()); assertThat(args.getRef(master)).hasValue(newMasterId); args.getRevWalk().parseBody(args.getRevWalk().parseCommit(newMasterId)); } catch (java.io.IOException e) { throw new java.lang.AssertionError(""failed checking new ref value"", e); } projectsCalled.add(args.getProject().get()); if ((projectsCalled.size()) == 2) { throw new com.google.gerrit.server.validators.ValidationException(""time to fail""); } }",b36e1c7e88404bfb0c1b08acaac98be0a6ad9763,preBranchUpdate(com.google.gerrit.acceptance.rest.change.Arguments),172976,179,269
78370,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotes.java,20.0,"private com.google.gerrit.server.notedb.LoadHandle rebuildAndOpen(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectId oldId) throws java.io.IOException { try { com.google.gerrit.server.notedb.NoteDbChangeState newState = args.rebuilder.get().rebuild(args.db.get(), getChangeId()); if (newState == null) { return super.openHandle(repo, oldId); } repo.scanForRepoChanges(); return com.google.gerrit.server.notedb.LoadHandle.create(com.google.gerrit.server.notedb.ChangeNotesCommit.newRevWalk(repo), newState.getChangeMetaId()); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return super.openHandle(repo, oldId); } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException(e); } }",a89962442856638bd77718d8be7ab4e0a8de223b,"private com.google.gerrit.server.notedb.LoadHandle rebuildAndOpen(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectId oldId) throws java.io.IOException { try { com.google.gerrit.server.notedb.NoteDbChangeState newState; try { newState = args.rebuilder.get().rebuild(args.db.get(), getChangeId()); } catch (java.io.IOException e) { newState = recheckUpToDate(repo, e); } if (newState == null) { return super.openHandle(repo, oldId); } repo.scanForRepoChanges(); return com.google.gerrit.server.notedb.LoadHandle.create(com.google.gerrit.server.notedb.ChangeNotesCommit.newRevWalk(repo), newState.getChangeMetaId()); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return super.openHandle(repo, oldId); } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException(e); } }",0a0987da5ad2d67096294e54a3d48054b3339496,"rebuildAndOpen(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.ObjectId)","rebuildAndOpen(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.ObjectId)",3,20,"private com.google.gerrit.server.notedb.LoadHandle rebuildAndOpen(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectId oldId) throws java.io.IOException { try { com.google.gerrit.server.notedb.NoteDbChangeState newState; try { newState = args.rebuilder.get().rebuild(args.db.get(), getChangeId()); repo.scanForRepoChanges(); } catch (java.io.IOException e) { newState = recheckUpToDate(repo, e); } if (newState == null) { return super.openHandle(repo, oldId); } return com.google.gerrit.server.notedb.LoadHandle.create(com.google.gerrit.server.notedb.ChangeNotesCommit.newRevWalk(repo), newState.getChangeMetaId()); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return super.openHandle(repo, oldId); } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException(e); } }",0249e8a88e9c68226594ba06171e61f44a7879b7,"rebuildAndOpen(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.ObjectId)",67379,270,270
170692,src_test_java_com_ericsson_gerrit_plugins_eventslog_sql_SQLStoreTest.java,21.0,"@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throws java.lang.Exception { when(permissionBackendMock.user(userProviderMock)).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("""")).when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); tearDown(); }",a6264da1d09c0d568743c507091dbab9a6c43bb6,"@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throws java.lang.Exception { when(permissionBackendMock.user(userProviderMock.get())).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("""")).when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }",38462d1a13beec292f287717a7b0f38276f5e4d7,notReturnEventWithNoVisibilityInfo(),notReturnEventWithNoVisibilityInfo(),4,21,"@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throws java.lang.Exception { when(permissionBackendMock.currentUser()).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("""")).when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }",17785b2213e73d4a235b5866e6ca86f93baddc91,notReturnEventWithNoVisibilityInfo(),5534,163,157
68310,gerrit-server_src_test_java_com_google_gerrit_server_project_RefControlTest.java,27.0,"@org.junit.Test public void testBranchDelegation2() { com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.ADMIN, ""refs/*""); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.DEVS, ""refs/heads/x/*""); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, fixers, ""refs/heads/x/y/*""); com.google.gerrit.server.project.Util.doNotInherit(local, com.google.gerrit.server.project.OWNER, ""refs/heads/x/y/*""); com.google.gerrit.server.project.ProjectControl uDev = util.user(local, com.google.gerrit.server.project.Util.DEVS); assertFalse(""not owner"", uDev.isOwner()); assertTrue(""owns ref"", uDev.isOwnerAnyRef()); com.google.gerrit.server.project.RefControlTest.assertOwner(""refs/heads/x/*"", uDev); com.google.gerrit.server.project.RefControlTest.assertOwner(""refs/heads/x/y"", uDev); com.google.gerrit.server.project.RefControlTest.assertOwner(""refs/heads/x/y/*"", uDev); com.google.gerrit.server.project.RefControlTest.assertNotOwner(""refs/*"", uDev); com.google.gerrit.server.project.RefControlTest.assertNotOwner(""refs/heads/master"", uDev); com.google.gerrit.server.project.ProjectControl uFix = util.user(local, fixers); assertFalse(""not owner"", uFix.isOwner()); assertTrue(""owns ref"", uFix.isOwnerAnyRef()); com.google.gerrit.server.project.RefControlTest.assertOwner(""refs/heads/x/y/*"", uFix); com.google.gerrit.server.project.RefControlTest.assertOwner(""refs/heads/x/y/bar"", uFix); com.google.gerrit.server.project.RefControlTest.assertNotOwner(""refs/heads/x/*"", uFix); com.google.gerrit.server.project.RefControlTest.assertNotOwner(""refs/heads/x/y"", uFix); com.google.gerrit.server.project.RefControlTest.assertNotOwner(""refs/*"", uFix); com.google.gerrit.server.project.RefControlTest.assertNotOwner(""refs/heads/master"", uFix); }",dc00d1eb48de0b546c9a44e4b301874f5bbc722b,"@org.junit.Test public void testBranchDelegation2() { com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.ADMIN, ""refs/*""); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.DEVS, ""refs/heads/x/*""); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, fixers, ""refs/heads/x/y/*""); com.google.gerrit.server.project.Util.doNotInherit(local, com.google.gerrit.server.project.OWNER, ""refs/heads/x/y/*""); com.google.gerrit.server.project.ProjectControl uDev = util.user(local, com.google.gerrit.server.project.Util.DEVS); assertThat(uDev.isOwner()).named(""not owner"").isFalse(); assertThat(uDev.isOwnerAnyRef()).named(""owns ref"").isTrue(); assertOwner(""refs/heads/x/*"", uDev); assertOwner(""refs/heads/x/y"", uDev); assertOwner(""refs/heads/x/y/*"", uDev); assertNotOwner(""refs/*"", uDev); assertNotOwner(""refs/heads/master"", uDev); com.google.gerrit.server.project.ProjectControl uFix = util.user(local, fixers); assertThat(uFix.isOwner()).isFalse(); assertThat(uFix.isOwnerAnyRef()).isTrue(); assertOwner(""refs/heads/x/y/*"", uFix); assertOwner(""refs/heads/x/y/bar"", uFix); assertNotOwner(""refs/heads/x/*"", uFix); assertNotOwner(""refs/heads/x/y"", uFix); assertNotOwner(""refs/*"", uFix); assertNotOwner(""refs/heads/master"", uFix); }",00e27e77abcf265616198170a756805605301361,testBranchDelegation2(),testBranchDelegation2(),3,28,"@org.junit.Test public void testBranchDelegation2() { com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.ADMIN, ""refs/*""); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.DEVS, ""refs/heads/x/*""); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, fixers, ""refs/heads/x/y/*""); com.google.gerrit.server.project.Util.doNotInherit(local, com.google.gerrit.server.project.OWNER, ""refs/heads/x/y/*""); com.google.gerrit.server.project.ProjectControl uDev = util.user(local, com.google.gerrit.server.project.Util.DEVS); assertNotOwner(uDev); assertOwnerAnyRef(uDev); assertOwner(""refs/heads/x/*"", uDev); assertOwner(""refs/heads/x/y"", uDev); assertOwner(""refs/heads/x/y/*"", uDev); assertNotOwner(""refs/*"", uDev); assertNotOwner(""refs/heads/master"", uDev); com.google.gerrit.server.project.ProjectControl uFix = util.user(local, fixers); assertNotOwner(uFix); assertOwnerAnyRef(uFix); assertOwner(""refs/heads/x/y/*"", uFix); assertOwner(""refs/heads/x/y/bar"", uFix); assertNotOwner(""refs/heads/x/*"", uFix); assertNotOwner(""refs/heads/x/y"", uFix); assertNotOwner(""refs/*"", uFix); assertNotOwner(""refs/heads/master"", uFix); }",fea5e0c886429e0802aca7c949893d20f359b87d,testBranchDelegation2(),122728,499,468
117212,gerrit-server_src_main_java_com_google_gerrit_server_project_GetAccess.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) { com.google.gerrit.extensions.common.GroupInfo canSeeGroup = visibleGroups.get(id); if (canSeeGroup == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); canSeeGroup = (control.isVisible()) ? groupJson.format(control.getGroup()) : com.google.gerrit.server.project.GetAccess.invisibleSentinel; } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gwtorm.server.OrmException e) { canSeeGroup = com.google.gerrit.server.project.GetAccess.invisibleSentinel; } visibleGroups.put(id, canSeeGroup); } return canSeeGroup; }",dc77b6df611ab351e075bf2e58fe27cee41784f4,,"loadGroup(java.util.Map,com.google.gerrit.reviewdb.client.AccountGroup$UUID)",18,6,"private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo group = visibleGroups.get(id); if (group == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); group = com.google.gerrit.server.project.GetAccess.INVISIBLE_SENTINEL; if (control.isVisible()) { group = groupJson.format(control.getGroup()); group.id = null; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.project.GetAccess.LOG.warn((""NoSuchGroupException; ignoring group "" + id), e); group = com.google.gerrit.server.project.GetAccess.INVISIBLE_SENTINEL; } visibleGroups.put(id, group); } return group; }",00dd0d2db4db6e818f088ef87fac92213bd0b973,"loadGroup(java.util.Map,com.google.gerrit.reviewdb.client.AccountGroup$UUID)",116125,248,281
133072,gerrit-test-util_src_main_java_com_google_gerrit_extensions_client_RangeSubject.java,5.0,public static com.google.gerrit.extensions.client.RangeSubject assertThat(com.google.gerrit.extensions.client.Comment.Range range) { return assertAbout(com.google.gerrit.extensions.client.RangeSubject.RANGE_SUBJECT_FACTORY).that(range); },efc7f775a9c04d444fff107f5fa3a4b5406976d8,public static com.google.gerrit.extensions.client.RangeSubject assertThat(com.google.gerrit.extensions.client.Comment.Range range) { return assertAbout(com.google.gerrit.extensions.client.RANGE_SUBJECT_FACTORY).that(range); },088de5f032408f69bc5e7ec1147456ecd993d8a4,assertThat(com.google.gerrit.extensions.client.Comment$Range),assertThat(com.google.gerrit.extensions.client.Comment$Range),2,4,public static com.google.gerrit.extensions.client.RangeSubject assertThat(com.google.gerrit.extensions.client.Comment.Range range) { return assertAbout(com.google.gerrit.extensions.client.RangeSubject::new).that(range); },9e8130e5fa06b62d86d037c99ec04e81b2b58f00,assertThat(com.google.gerrit.extensions.client.Comment$Range),81978,60,59
67678,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_UsernameField.java,7.0,private boolean canEditUserName() { return com.google.gerrit.client.Gerrit.getConfig().canEdit(Account.FieldName.USER_NAME); },921b642430bcab1f88ced612eb9957453c526650,private boolean canEditUserName() { return com.google.gerrit.client.Gerrit.getInfo().auth().canEdit(Account.FieldName.USER_NAME); },8a8703a7e4ee79b710f27df20918383871790ad4,canEditUserName(),canEditUserName(),9,7,private boolean canEditUserName() { return com.google.gerrit.client.Gerrit.info().auth().canEdit(Account.FieldName.USER_NAME); },dde98a4ca89ed2ee0447c50e3df937b337a0a426,canEditUserName(),9150,37,37
9518,src_main_java_com_google_gerrit_client_patches_PatchUnifiedScreen.java,3.0,public void onSuccess(final com.google.gerrit.client.data.UnifiedPatchDetail r) { if (isAttached()) { display(r); } },0a87edf27288c025e4bf0dede9f6989d8b9be461,@java.lang.Override protected void prepare(final com.google.gerrit.client.data.UnifiedPatchDetail r) { display(r); },b60a8eff6ebbd5b3c8bdb19037d04d847a6d9886,onSuccess(com.google.gerrit.client.data.UnifiedPatchDetail),prepare(com.google.gerrit.client.data.UnifiedPatchDetail),2,2,@java.lang.Override protected void preDisplay(final com.google.gerrit.client.data.UnifiedPatchDetail r) { display(r); },f4d5c5fb63ea7c98e9aa1c0cf6dbd513da22c2b1,preDisplay(com.google.gerrit.client.data.UnifiedPatchDetail),975,33,34
148032,javatests_com_google_gerrit_server_group_db_GroupConfigTest.java,13.0,"@org.junit.Test public void ownerUuidOfNewGroupMustNotBeNull() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Owner UUID of the group users-XYZ""); groupConfig.commit(metaDataUpdate); } }",c4af6370bec4b2967ff4b9adeedc90a65c01138c,"@org.junit.Test public void ownerUuidOfNewGroupMustNotBeNull() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Owner UUID of the account users-XYZ""); groupConfig.commit(metaDataUpdate); } }",abb68a2ee1fed4a9a7e242929be7c3d72b3f4fca,ownerUuidOfNewGroupMustNotBeNull(),ownerUuidOfNewGroupMustNotBeNull(),17,13,"@org.junit.Test public void ownerUuidOfNewGroupMustNotBeNull() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Owner UUID of the group users-XYZ""); groupConfig.commit(metaDataUpdate); } }",c4af6370bec4b2967ff4b9adeedc90a65c01138c,ownerUuidOfNewGroupMustNotBeNull(),218832,284,284
60010,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_EditFileBox.java,7.0,@java.lang.Override public void execute() { file.setFocus(true); },c8d4900466a23c85c27e00ca2c30a603d10efb3f,@java.lang.Override public void execute() { if (com.google.common.base.Strings.isNullOrEmpty(fileName)) { file.setFocus(true); } else { content.setFocus(true); } },c83ed5bef3d0d124043a679945c78bb0ac900ff9,execute(),execute(),3,7,@java.lang.Override public void execute() { if (fileName.isEmpty()) { file.setFocus(true); } else { content.setFocus(true); } },d6f03b9459787a79c2d88959544349b9d1397d6f,execute(),194553,46,35
165336,javatests_com_google_gerrit_acceptance_ProjectResetterTest.java,18.0,"@org.junit.Test public void accountEvictionIfUserBranchIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.server.account.AccountCache accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCache); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, accountCache, null).reset(project).reset(allUsers).build()) { createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.Account.Id(2))); createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCache); }",43021572bab400b57e285fc40af7d10679e9212d,"@org.junit.Test public void accountEvictionIfUserBranchIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.server.account.AccountCache accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCache); com.google.gerrit.server.index.account.AccountIndexer accountIndexer = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.index.account.AccountIndexer.class); accountIndexer.index(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountIndexer); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, accountCache, accountIndexer, null).reset(project).reset(allUsers).build()) { createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.Account.Id(2))); createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCache); }",addb2cc6b9b72e93e5f4ec81e8966976915a9450,accountEvictionIfUserBranchIsDeleted(),accountEvictionIfUserBranchIsDeleted(),6,18,"@org.junit.Test public void accountEvictionIfUserBranchIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.server.account.AccountCache accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCache); com.google.gerrit.server.index.account.AccountIndexer accountIndexer = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.index.account.AccountIndexer.class); accountIndexer.index(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountIndexer); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, accountCache, accountIndexer, null).build(new com.google.gerrit.acceptance.ProjectResetter.Config().reset(project).reset(allUsers))) { createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.Account.Id(2))); createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCache, accountIndexer); }",45d489516d59e216411af2351671600f56ce20d0,accountEvictionIfUserBranchIsDeleted(),120999,423,443
53962,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeJson.java,21.0,"public com.google.gerrit.server.change.ChangeJson.ChangeInfo format(com.google.gerrit.server.change.RevisionResource rsrc) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db.get(), rsrc.getControl()); cd.limitToPatchSets(com.google.common.collect.ImmutableList.of(rsrc.getPatchSet().getId())); return format(cd); }",7e118248ee53a60ac777f1b3f5009788514149ad,"private com.google.gerrit.server.change.ChangeJson.ChangeInfo format(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet.Id psId) throws com.google.gwtorm.server.OrmException { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); com.google.gerrit.server.change.ChangeJson.ChangeInfo res = toChangeInfo(cd, psId); accountLoader.fill(); return res; }",ee0f85ac0bb56c207a7bfc3164386aae4fc035d0,format(com.google.gerrit.server.change.RevisionResource),"format(com.google.gerrit.server.query.change.ChangeData,com.google.gerrit.reviewdb.client.PatchSet$Id)",4,5,"private com.google.gerrit.server.change.ChangeJson.ChangeInfo format(com.google.gerrit.server.query.change.ChangeData cd, com.google.common.base.Optional<com.google.gerrit.reviewdb.client.PatchSet.Id> limitToPsId) throws com.google.gwtorm.server.OrmException { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); com.google.gerrit.server.change.ChangeJson.ChangeInfo res = toChangeInfo(cd, limitToPsId); accountLoader.fill(); return res; }",340ecdba69654e9c31c90760fe32c2e4dd7f95e9,"format(com.google.gerrit.server.query.change.ChangeData,com.google.common.base.Optional)",188688,134,151
147210,java_com_google_gerrit_server_account_InternalAccountUpdate.java,,,,public static com.google.gerrit.server.account.InternalAccountUpdate.Builder builder() { return new com.google.gerrit.server.account.AutoValue_InternalAccountUpdate.Builder(); },b2c2c628c77ac05f50be40a9af5bffd5062d1e6d,,builder(),10,10,public static com.google.gerrit.server.account.InternalAccountUpdate.Builder builder() { return new com.google.gerrit.server.account.InternalAccountUpdate.Builder.WrapperThatConvertsNullStringArgsToEmptyStrings(new com.google.gerrit.server.account.AutoValue_InternalAccountUpdate.Builder()); },3977b836bb154934a1dc481e6d079dfdf94a2f1f,builder(),63151,44,74
65842,src_main_java_com_googlesource_gerrit_plugins_replication_ReplicationQueue.java,0.0,"private void updateHeadRemoteSsh(org.eclipse.jgit.transport.CredentialsProvider credsProvider, org.eclipse.jgit.transport.URIish uri, java.lang.String newHead) { java.lang.String quotedPath = QuotedString.BOURNE.quote(uri.getPath()); java.lang.String cmd = ((""cd "" + quotedPath) + "" && git symbolic-ref HEAD "") + (QuotedString.BOURNE.quote(newHead)); java.io.OutputStream errStream = com.googlesource.gerrit.plugins.replication.ReplicationQueue.newErrorBufferStream(); try { executeRemoteSsh(credsProvider, uri, cmd, errStream); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.error(java.lang.String.format((""Error updating HEAD of remote repository at %s to %s:\n"" + (("" Exception: %s\n"" + "" Command: %s\n"") + "" Output: %s"")), uri, newHead, e, cmd, errStream), e); } }",b929ae04fb0f7a9e592b7d0b745a6daa2736d053,"private void updateHeadRemoteSsh(org.eclipse.jgit.transport.CredentialsProvider credsProvider, org.eclipse.jgit.transport.URIish uri, java.lang.String newHead) { java.lang.String quotedPath = QuotedString.BOURNE.quote(uri.getPath()); java.lang.String cmd = ((""cd "" + quotedPath) + "" && git symbolic-ref HEAD "") + (QuotedString.BOURNE.quote(newHead)); java.io.OutputStream errStream = com.googlesource.gerrit.plugins.replication.SshHelper.newErrorBufferStream(); try { executeRemoteSsh(credsProvider, uri, cmd, errStream); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.error(java.lang.String.format((""Error updating HEAD of remote repository at %s to %s:\n"" + (("" Exception: %s\n"" + "" Command: %s\n"") + "" Output: %s"")), uri, newHead, e, cmd, errStream), e); } }",2e683ca2e2c37ff3cd12c9d04bcfaff1f475ecf5,"updateHeadRemoteSsh(org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.transport.URIish,java.lang.String)","updateHeadRemoteSsh(org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.transport.URIish,java.lang.String)",27,2,"private void updateHeadRemoteSsh(org.eclipse.jgit.transport.URIish uri, java.lang.String newHead) { java.lang.String quotedPath = QuotedString.BOURNE.quote(uri.getPath()); java.lang.String cmd = ((""cd "" + quotedPath) + "" && git symbolic-ref HEAD "") + (QuotedString.BOURNE.quote(newHead)); java.io.OutputStream errStream = sshHelper.newErrorBufferStream(); try { sshHelper.executeRemoteSsh(uri, cmd, errStream); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.error(java.lang.String.format((""Error updating HEAD of remote repository at %s to %s:\n"" + (("" Exception: %s\n"" + "" Command: %s\n"") + "" Output: %s"")), uri, newHead, e, cmd, errStream), e); } }",3d62a3bde48749127a436b5d7c19ad2b67a6cec2,"updateHeadRemoteSsh(org.eclipse.jgit.transport.URIish,java.lang.String)",165432,252,223
48920,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_EditCommitMessageBox.java,,,,@java.lang.Override public void execute() { message.setFocus(true); message.setText(originalMessage); message.setCursorPos(0); submit.setEnabled(false); },ba5630fe321871570d77a7e9ee80581ffe80dc15,,execute(),10,6,@java.lang.Override public void execute() { message.setFocus(true); },843bee80aa5afa23444dd6c4d2d316dda56dbbed,execute(),88284,36,18
20354,gerrit-server_src_main_java_com_google_gerrit_server_git_ProjectConfig.java,12.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean hasGroup(com.google.gerrit.reviewdb.AccountGroup.UUID uuid) { return groupsByUUID.containsKey(uuid); },7ace9fa2b304ec8e5a9738b0ebd9c6ae91004859,,hasGroup(com.google.gerrit.reviewdb.AccountGroup$UUID),14,15,"public static com.google.gerrit.server.git.ProjectConfig read(com.google.gerrit.server.git.MetaDataUpdate update) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.git.ProjectConfig r = new com.google.gerrit.server.git.ProjectConfig(update.getProjectName()); r.load(update); return r; }",2f9a784d8c2a1e265d01ad8ef26cfbec442af84a,read(com.google.gerrit.server.git.MetaDataUpdate),17212,32,97
45529,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_project_ListBranches.java,0.0,"@java.lang.Override public com.google.gerrit.common.data.ListBranchesResult call() throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { final com.google.gerrit.server.project.ProjectControl pctl = projectControlFactory.validateFor(projectName, ((com.google.gerrit.server.project.ProjectControl.OWNER) | (com.google.gerrit.server.project.ProjectControl.VISIBLE))); final java.util.List<com.google.gerrit.reviewdb.client.Branch> branches = new java.util.ArrayList<com.google.gerrit.reviewdb.client.Branch>(); com.google.gerrit.reviewdb.client.Branch headBranch = null; com.google.gerrit.reviewdb.client.Branch configBranch = null; final java.util.Set<java.lang.String> targets = new java.util.HashSet<java.lang.String>(); final org.eclipse.jgit.lib.Repository db; try { db = repoManager.openRepository(projectName); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noGitRepository) { return new com.google.gerrit.common.data.ListBranchesResult(branches, false, true); } try { final java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = db.getAllRefs(); if (!(all.containsKey(Constants.HEAD))) { try { org.eclipse.jgit.lib.Ref head = db.getRef(Constants.HEAD); if (head != null) { all.put(Constants.HEAD, head); } } catch (java.io.IOException e) { } } for (final org.eclipse.jgit.lib.Ref ref : all.values()) { if (ref.isSymbolic()) { targets.add(ref.getTarget().getName()); } } for (final org.eclipse.jgit.lib.Ref ref : all.values()) { if (ref.isSymbolic()) { java.lang.String target = ref.getTarget().getName(); com.google.gerrit.server.project.RefControl targetRefControl = pctl.controlForRef(target); if (!(targetRefControl.isVisible())) { continue; } if (target.startsWith(Constants.R_HEADS)) { target = target.substring(Constants.R_HEADS.length()); } com.google.gerrit.reviewdb.client.Branch b = createBranch(ref.getName()); b.setRevision(new com.google.gerrit.reviewdb.client.RevId(target)); if (Constants.HEAD.equals(ref.getName())) { b.setCanDelete(false); headBranch = b; } else { b.setCanDelete(targetRefControl.canDelete()); branches.add(b); } continue; } final com.google.gerrit.server.project.RefControl refControl = pctl.controlForRef(ref.getName()); if (refControl.isVisible()) { if (ref.getName().startsWith(Constants.R_HEADS)) { branches.add(createBranch(ref, refControl, targets)); } else if (GitRepositoryManager.REF_CONFIG.equals(ref.getName())) { configBranch = createBranch(ref, refControl, targets); } } } } finally { db.close(); } java.util.Collections.sort(branches, new java.util.Comparator<com.google.gerrit.reviewdb.client.Branch>() { @java.lang.Override public int compare(final com.google.gerrit.reviewdb.client.Branch a, final com.google.gerrit.reviewdb.client.Branch b) { return a.getName().compareTo(b.getName()); } }); if (configBranch != null) { branches.add(0, configBranch); } if (headBranch != null) { branches.add(0, headBranch); } return new com.google.gerrit.common.data.ListBranchesResult(branches, pctl.canAddRefs(), false); }",239e59dab76183663ae082ea4f53116b9898792b,"@java.lang.Override public com.google.gerrit.common.data.ListBranchesResult call() throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectControl pctl = projectControlFactory.validateFor(projectName, ((com.google.gerrit.server.project.ProjectControl.OWNER) | (com.google.gerrit.server.project.ProjectControl.VISIBLE))); try { java.util.List<com.google.gerrit.reviewdb.client.Branch> branches = com.google.common.collect.Lists.newArrayList(); java.util.List<com.google.gerrit.server.project.ListBranches.BranchInfo> branchInfos = listBranchesProvider.get().apply(new com.google.gerrit.server.project.ProjectResource(pctl)); for (com.google.gerrit.server.project.ListBranches.BranchInfo info : branchInfos) { com.google.gerrit.reviewdb.client.Branch b = new com.google.gerrit.reviewdb.client.Branch(new com.google.gerrit.reviewdb.client.Branch.NameKey(projectName, info.ref)); b.setRevision(new com.google.gerrit.reviewdb.client.RevId(info.revision)); b.setCanDelete(((info.canDelete) != null ? true : false)); branches.add(b); } return new com.google.gerrit.common.data.ListBranchesResult(branches, pctl.canAddRefs(), false); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.server.project.NoSuchProjectException(projectName); } }",81ece91e9f47dd379da12b6850dcdfc3d63faace,call(),call(),4,0,"@java.lang.Override public com.google.gerrit.common.data.ListBranchesResult call() throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectControl pctl = projectControlFactory.validateFor(projectName, ((com.google.gerrit.server.project.ProjectControl.OWNER) | (com.google.gerrit.server.project.ProjectControl.VISIBLE))); try { java.util.List<com.google.gerrit.reviewdb.client.Branch> branches = com.google.common.collect.Lists.newArrayList(); java.util.List<com.google.gerrit.server.project.ListBranches.BranchInfo> branchInfos = listBranchesProvider.get().apply(new com.google.gerrit.server.project.ProjectResource(pctl)); for (com.google.gerrit.server.project.ListBranches.BranchInfo info : branchInfos) { com.google.gerrit.reviewdb.client.Branch b = new com.google.gerrit.reviewdb.client.Branch(new com.google.gerrit.reviewdb.client.Branch.NameKey(projectName, info.ref)); b.setRevision(new com.google.gerrit.reviewdb.client.RevId(info.revision)); b.setCanDelete(com.google.common.base.Objects.firstNonNull(info.canDelete, false)); branches.add(b); } return new com.google.gerrit.common.data.ListBranchesResult(branches, pctl.canAddRefs(), false); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.server.project.NoSuchProjectException(projectName); } }",bd598730a7ef3328d37adf911f087afe3ff13791,call(),155679,399,406
44373,gerrit-gwtui_src_main_java_com_google_gerrit_client_projects_ConfigInfoCache.java,,,,"public com.google.gerrit.client.ui.CommentLinkProcessor getCommentLinkProcessor() { if ((commentLinkProcessor) == null) { com.google.gwt.core.client.JsArray<com.google.gerrit.client.projects.ConfigInfo.CommentLinkInfo> cls = info.commentlinks().values(); java.util.List<com.google.gwtexpui.safehtml.client.FindReplace> commentLinks = new java.util.ArrayList<com.google.gwtexpui.safehtml.client.FindReplace>(cls.length()); for (int i = 0; i < (cls.length()); i++) { com.google.gerrit.client.projects.ConfigInfo.CommentLinkInfo cl = cls.get(i); if (!(cl.enabled())) { continue; } if ((cl.link()) != null) { commentLinks.add(new com.google.gwtexpui.safehtml.client.LinkFindReplace(cl.match(), cl.link())); } else { commentLinks.add(new com.google.gwtexpui.safehtml.client.RawFindReplace(cl.match(), cl.html())); } } commentLinkProcessor = new com.google.gerrit.client.ui.CommentLinkProcessor(commentLinks); } return commentLinkProcessor; }",1600f0514873805648676288378b30e64301ce46,,getCommentLinkProcessor(),6,4,public com.google.gerrit.client.ui.CommentLinkProcessor getCommentLinkProcessor() { if ((commentLinkProcessor) == null) { commentLinkProcessor = new com.google.gerrit.client.ui.CommentLinkProcessor(info.commentlinks()); } return commentLinkProcessor; },a783c88905a67716ae28f6647d6b81111ef10df7,getCommentLinkProcessor(),151765,285,65
148032,java_com_google_gerrit_server_restapi_group_QueryGroups.java,1.0,"@org.kohsuke.args4j.Option(name = ""-o"", usage = ""Output options per group"") public void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o); }",cbdee3b15098a7bac1982d11145343865c2f7bda,"@org.kohsuke.args4j.Option(name = ""-o"", usage = ""Output options per account"") public void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o); }",33f8045fe2ef0e7c148f9ca3138d92a293fe9556,addOption(com.google.gerrit.extensions.client.ListGroupsOption),addOption(com.google.gerrit.extensions.client.ListGroupsOption),17,1,"@org.kohsuke.args4j.Option(name = ""-o"", usage = ""Output options per group"") public void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o); }",cbdee3b15098a7bac1982d11145343865c2f7bda,addOption(com.google.gerrit.extensions.client.ListGroupsOption),215548,56,56
78958,gerrit-server_src_test_java_com_google_gerrit_server_project_ProjectControlTest.java,0.0,"@org.junit.Test public void canReadAfterRollbackWithAllRefsVisible() throws java.lang.Exception { com.google.gerrit.server.project.Util.allow(project, com.google.gerrit.server.project.READ, com.google.gerrit.server.project.REGISTERED_USERS, ""refs/*""); org.eclipse.jgit.revwalk.RevCommit parent1 = repo.commit().create(); org.eclipse.jgit.lib.ObjectId id1 = repo.branch(""branch1"").commit().parent(parent1).create(); com.google.gerrit.server.project.ProjectControl pc = newProjectControl(); org.eclipse.jgit.revwalk.RevWalk rw = repo.getRevWalk(); assertTrue(pc.canReadCommit(db, rw, rw.parseCommit(parent1))); assertTrue(pc.canReadCommit(db, rw, rw.parseCommit(id1))); repo.branch(""branch1"").update(parent1); assertTrue(pc.canReadCommit(db, rw, rw.parseCommit(parent1))); assertFalse(pc.canReadCommit(db, rw, rw.parseCommit(id1))); }",ad9c2331f8f8cb0522a037b7c92b3ae0f592add9,"@org.junit.Test public void canReadAfterRollbackWithAllRefsVisible() throws java.lang.Exception { com.google.gerrit.server.project.Util.allow(project, com.google.gerrit.server.project.READ, com.google.gerrit.server.project.REGISTERED_USERS, ""refs/*""); org.eclipse.jgit.revwalk.RevCommit parent1 = repo.commit().create(); org.eclipse.jgit.lib.ObjectId id1 = repo.branch(""branch1"").commit().parent(parent1).create(); com.google.gerrit.server.project.ProjectControl pc = newProjectControl(); org.eclipse.jgit.revwalk.RevWalk rw = repo.getRevWalk(); org.eclipse.jgit.lib.Repository r = repo.getRepository(); assertTrue(pc.canReadCommit(db, r, rw.parseCommit(parent1))); assertTrue(pc.canReadCommit(db, r, rw.parseCommit(id1))); repo.branch(""branch1"").update(parent1); assertTrue(pc.canReadCommit(db, r, rw.parseCommit(parent1))); assertFalse(pc.canReadCommit(db, r, rw.parseCommit(id1))); }",bb1dd7571da41c1ff6d3a99b830837444786f8f7,canReadAfterRollbackWithAllRefsVisible(),canReadAfterRollbackWithAllRefsVisible(),6,8,"@org.junit.Test public void canReadAfterRollbackWithAllRefsVisible() throws java.lang.Exception { allow(project, com.google.gerrit.server.project.READ, com.google.gerrit.server.project.REGISTERED_USERS, ""refs/*""); org.eclipse.jgit.revwalk.RevCommit parent1 = repo.commit().create(); org.eclipse.jgit.lib.ObjectId id1 = repo.branch(""branch1"").commit().parent(parent1).create(); com.google.gerrit.server.project.ProjectControl pc = newProjectControl(); org.eclipse.jgit.revwalk.RevWalk rw = repo.getRevWalk(); org.eclipse.jgit.lib.Repository r = repo.getRepository(); assertTrue(pc.canReadCommit(db, r, rw.parseCommit(parent1))); assertTrue(pc.canReadCommit(db, r, rw.parseCommit(id1))); repo.branch(""branch1"").update(parent1); assertTrue(pc.canReadCommit(db, r, rw.parseCommit(parent1))); assertFalse(pc.canReadCommit(db, r, rw.parseCommit(id1))); }",e60c698b9e2ce31cba7d5a91779d9d5a23654f04,canReadAfterRollbackWithAllRefsVisible(),33245,263,250
109252,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_mail_AddReviewerSenderIT.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@org.junit.Test public void addReviewerToReviewableChangeInNoteDbBatch() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); addReviewerToReviewableChangeInNoteDb(batch()); },01a57e8e9453abc7c0f630b346541a49e25473fd,,addReviewerToReviewableChangeInNoteDbBatch(),16,7,@org.junit.Test public void addReviewerToReviewableChangeInNoteDbBatch() throws java.lang.Exception { addReviewerToReviewableChangeInNoteDb(batch()); },d28e59ce4f532b1d184f10c6a7b8b416150e7cfb,addReviewerToReviewableChangeInNoteDbBatch(),145710,54,41
54310,gerrit-gwtui_src_main_java_com_google_gerrit_client_projects_ProjectApi.java,32.0,final void setState(com.google.gerrit.reviewdb.client.Project.State s) { setStateRaw(s.name()); },0cdc0695c0d7b0f0379904d11162b94b5811d89d,final void setState(com.google.gerrit.extensions.common.ProjectStatus s) { setStateRaw(s.name()); },a8a8adf33f27bc3373db7e4c4efc2753cb7a4883,setState(com.google.gerrit.reviewdb.client.Project$State),setState(com.google.gerrit.extensions.common.ProjectStatus),14,4,final void setState(com.google.gerrit.extensions.api.projects.ProjectState s) { setStateRaw(s.name()); },13fa90ed1be72fc03662078cf6464b710e95081b,setState(com.google.gerrit.extensions.api.projects.ProjectState),164012,31,33
54003,gerrit-sshd_src_main_java_com_google_gerrit_sshd_CommandMetaData.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,int mode() default com.google.gerrit.sshd.CommandMetaData.ALL;,834eb9b0d70154c3b2a778e3a6629b7fbb8b55f1,,mode(),13,1,com.google.gerrit.sshd.CommandMetaData.Mode runsAt() default com.google.gerrit.sshd.CommandMetaData.Mode.MASTER;,341d5dae354532abbc097e93f2efe1b7c13ab1ab,runsAt(),110061,19,35
104938,gerrit-server_src_main_java_com_google_gerrit_server_change_Ignore.java,,,,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.Ignore.Input input) throws com.google.gerrit.extensions.restapi.RestApiException { if ((rsrc.isUserOwner()) || (isIgnored(rsrc))) { return com.google.gerrit.extensions.restapi.Response.ok(""""); } try { stars.star(self.get().getAccountId(), rsrc.getProject(), rsrc.getChange().getId(), com.google.common.collect.ImmutableSet.of(""ignore""), com.google.common.collect.ImmutableSet.of()); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""failed to ignore change"", e); } return null; }",80fa224dcf99cb86b1cbf18a44643e120b635378,,"apply(com.google.gerrit.server.change.ChangeResource,com.google.gerrit.server.change.Ignore$Input)",5,2,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.Ignore.Input input) throws com.google.gerrit.extensions.restapi.RestApiException { try { if ((rsrc.isUserOwner()) || (isIgnored(rsrc))) { return com.google.gerrit.extensions.restapi.Response.ok(""""); } stars.ignore(self.get().getAccountId(), rsrc.getProject(), rsrc.getChange().getId()); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""failed to ignore change"", e); } return null; }",99342f877e1b7605db03328a2777ac73fcfd87c4,"apply(com.google.gerrit.server.change.ChangeResource,com.google.gerrit.server.change.Ignore$Input)",84580,199,171
39261,src_main_java_com_google_gwtorm_schema_sql_DialectPostgreSQL.java,1.0,"@java.lang.Override public com.google.gwtorm.server.OrmException convertError(final java.lang.String op, final java.lang.String entity, final java.sql.SQLException err) { switch (getSQLStateInt(err)) { case 23505 : return new com.google.gwtorm.server.OrmDuplicateKeyException(entity, err); case 23514 : case 23503 : case 23502 : case 23001 : default : return super.convertError(op, entity, err); } }",ba608d9675171116542a6db315c675322cab7698,"@java.lang.Override public com.google.gwtorm.server.OrmException convertError(final java.lang.String op, final java.lang.String entity, final java.sql.SQLException err) { switch (getSQLStateInt(err)) { case 23505 : return new com.google.gwtorm.server.OrmDuplicateKeyException(entity, err); case 23514 : case 23503 : case 23502 : case 23001 : default : return fallbackConvertError(op, entity, err); } }",a2f8c3ae5ad6f6ec5355d7589bfd0b2cb235b521,"convertError(java.lang.String,java.lang.String,java.sql.SQLException)","convertError(java.lang.String,java.lang.String,java.sql.SQLException)",18,1,"@java.lang.Override public com.google.gwtorm.server.OrmException convertError(final java.lang.String op, final java.lang.String entity, final java.sql.SQLException err) { switch (getSQLStateInt(err)) { case 23505 : return new com.google.gwtorm.server.OrmDuplicateKeyException(entity, err); case 23514 : case 23503 : case 23502 : case 23001 : default : return super.convertError(op, entity, err); } }",ba608d9675171116542a6db315c675322cab7698,"convertError(java.lang.String,java.lang.String,java.sql.SQLException)",50622,120,121
71940,gerrit-server_src_main_java_com_google_gerrit_server_git_strategy_CherryPick.java,5.0,"@java.lang.Override public boolean dryRun(com.google.gerrit.server.git.CodeReviewCommit mergeTip, com.google.gerrit.server.git.CodeReviewCommit toMerge) throws com.google.gerrit.server.git.MergeException { return args.mergeUtil.canCherryPick(args.mergeSorter, args.repo, mergeTip, args.rw, toMerge); }",24d1b8f94e551d8191340aadf4e6c56a13686dc1,"@java.lang.Override public boolean dryRun(com.google.gerrit.server.git.CodeReviewCommit mergeTip, com.google.gerrit.server.git.CodeReviewCommit toMerge) throws com.google.gerrit.server.git.IntegrateException { return args.mergeUtil.canCherryPick(args.mergeSorter, args.repo, mergeTip, args.rw, toMerge); }",3fa9498ea4532622177375584a3ea87929ad47f5,"dryRun(com.google.gerrit.server.git.CodeReviewCommit,com.google.gerrit.server.git.CodeReviewCommit)","dryRun(com.google.gerrit.server.git.CodeReviewCommit,com.google.gerrit.server.git.CodeReviewCommit)",2,5,"@java.lang.Override public boolean dryRun(com.google.gerrit.server.git.CodeReviewCommit mergeTip, com.google.gerrit.server.git.CodeReviewCommit toMerge) throws com.google.gerrit.server.git.IntegrationException { return args.mergeUtil.canCherryPick(args.mergeSorter, args.repo, mergeTip, args.rw, toMerge); }",50b13f3c760b18ed55cf0ad689ec6af820292835,"dryRun(com.google.gerrit.server.git.CodeReviewCommit,com.google.gerrit.server.git.CodeReviewCommit)",172497,91,90
72209,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_ChangeApiImpl.java,15.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void move(java.lang.String destination) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.changes.MoveInput input = new com.google.gerrit.extensions.api.changes.MoveInput(); input.destination = destination; move(input); },d0a2af9d372c53e91cc98bf09bf76f103559d2f2,,move(java.lang.String),17,24,@java.lang.Override public void move(java.lang.String destination) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.changes.MoveInput in = new com.google.gerrit.extensions.api.changes.MoveInput(); in.destination_branch = destination; move(in); },7f5cc1a65a83484564d8eea1978a0d40849a99d5,move(java.lang.String),72728,80,82
152451,javatests_com_google_gerrit_server_index_account_AccountFieldTest.java,1.0,"@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = ""0e39795bb25dc914118224995c53c5c36923a461""; account.setMetaId(metaId); java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())))); assertThat(values).hasSize(1); java.lang.String expectedValue = ((((allUsersName.get()) + "":"") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + "":"") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }",aba853039ff96c08636ed07cd571fa196d83baa2,"@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = ""0e39795bb25dc914118224995c53c5c36923a461""; account.setMetaId(metaId); java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.EditPreferencesInfo.defaults())))); assertThat(values).hasSize(1); java.lang.String expectedValue = ((((allUsersName.get()) + "":"") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + "":"") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }",55dae1fc60a445241e58a9c7482f9aebfe7802fb,refStateFieldValues(),refStateFieldValues(),3,1,"@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = ""0e39795bb25dc914118224995c53c5c36923a461""; account.setMetaId(metaId); java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(com.google.gerrit.server.account.AccountState.forAccount(allUsersName, account))); assertThat(values).hasSize(1); java.lang.String expectedValue = ((((allUsersName.get()) + "":"") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + "":"") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }",5dd144554d74742e5ce3779a1f697fa3a5ed872b,refStateFieldValues(),51668,448,314
16247,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountExternalIdCacheImpl.java,,,,"@java.lang.Override public java.util.List<com.google.gerrit.reviewdb.AccountExternalId> byAccountEmail(com.google.gerrit.reviewdb.Account.Id id, java.lang.String email) { return byAccountEmail.get(new com.google.gerrit.server.account.AccountExternalIdCacheImpl.AccountIdAndEmail(id, email)).list; }",f1cd513810f90fe27d90bfa4d467204859b19d5b,,"byAccountEmail(com.google.gerrit.reviewdb.Account$Id,java.lang.String)",3,4,"@java.lang.Override public java.util.List<com.google.gerrit.reviewdb.AccountExternalId> byAccountEmail(com.google.gerrit.reviewdb.Account.Id id, java.lang.String email) { java.util.List<com.google.gerrit.reviewdb.AccountExternalId> accIds = byAccountId.get(id).list; java.util.ArrayList<com.google.gerrit.reviewdb.AccountExternalId> out = new java.util.ArrayList<com.google.gerrit.reviewdb.AccountExternalId>(accIds.size()); for (com.google.gerrit.reviewdb.AccountExternalId extId : accIds) { java.lang.String accEmail = extId.getEmailAddress(); if ((accEmail != null) && (accEmail.equals(email))) { out.add(extId); } } return out; }",e1eddc2a537b26777e847f5dff75e65b80161ef5,"byAccountEmail(com.google.gerrit.reviewdb.Account$Id,java.lang.String)",121834,93,209
38750,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_AbstractPatchContentTable.java,34.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { createFileCommentEitorOnSideA(); },63bfaadaedf7e33cdaed53ffb8ca3ec15ae5666e,,onClick(com.google.gwt.event.dom.client.ClickEvent),7,46,@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { createFileCommentEditorOnSideA(); },dbf723cdee73acad43e19e83f7cf6e421bf1f4b9,onClick(com.google.gwt.event.dom.client.ClickEvent),11872,37,35
59140,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_SetLoggingLevelCommand.java,,,,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gerrit.sshd.commands.UnloggedFailure, java.lang.Exception { if ((regex) == null) { regex = ""^*.*$""; } switch (level.toLowerCase()) { case com.google.gerrit.sshd.commands.SetLoggingLevelCommand.RESET : reset(); break; case com.google.gerrit.sshd.commands.SetLoggingLevelCommand.LEVEL_ALL : setLoggingLevel(Level.ALL); break; case com.google.gerrit.sshd.commands.SetLoggingLevelCommand.LEVEL_TRACE : setLoggingLevel(Level.TRACE); break; case com.google.gerrit.sshd.commands.SetLoggingLevelCommand.LEVEL_DEBUG : setLoggingLevel(Level.DEBUG); break; case com.google.gerrit.sshd.commands.SetLoggingLevelCommand.LEVEL_INFO : setLoggingLevel(Level.INFO); break; case com.google.gerrit.sshd.commands.SetLoggingLevelCommand.LEVEL_WARN : setLoggingLevel(Level.WARN); break; case com.google.gerrit.sshd.commands.SetLoggingLevelCommand.LEVEL_ERROR : setLoggingLevel(Level.ERROR); break; case com.google.gerrit.sshd.commands.SetLoggingLevelCommand.LEVEL_FATAL : setLoggingLevel(Level.FATAL); break; case com.google.gerrit.sshd.commands.SetLoggingLevelCommand.LEVEL_OFF : setLoggingLevel(Level.OFF); break; default : stdout.println(""Invalid argument""); stdout.flush(); break; } }",e16b491b450ddb3c65c53d662c349a5c194818c4,,run(),22,0,"@java.lang.SuppressWarnings(""unchecked"") @java.lang.Override protected void run() throws java.net.MalformedURLException { if ((level) == (com.google.gerrit.sshd.commands.SetLoggingLevelCommand.LevelOption.RESET)) { com.google.gerrit.sshd.commands.SetLoggingLevelCommand.reset(); } else { for (java.util.Enumeration<org.apache.log4j.Logger> logger = org.apache.log4j.LogManager.getCurrentLoggers(); logger.hasMoreElements();) { org.apache.log4j.Logger log = logger.nextElement(); if (((name) == null) || (log.getName().contains(name))) { log.setLevel(org.apache.log4j.Level.toLevel(level.name())); } } } }",eabd8336013cb0d5d143d9acf07c64bb8e1bb9ce,run(),157363,379,176
94512,gerrit-server_src_main_java_com_google_gerrit_server_edit_tree_RenameFileModification.java,,,,"@java.lang.Override public java.util.List<org.eclipse.jgit.dircache.DirCacheEditor.PathEdit> getNecessaryPathEdits(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository)) { revWalk.parseHeaders(currentCommit); try (org.eclipse.jgit.treewalk.TreeWalk treeWalk = org.eclipse.jgit.treewalk.TreeWalk.forPath(revWalk.getObjectReader(), currentFilePath, currentCommit.getTree())) { if (treeWalk == null) { return java.util.Collections.emptyList(); } org.eclipse.jgit.dircache.DirCacheEditor.DeletePath deletePathEdit = new org.eclipse.jgit.dircache.DirCacheEditor.DeletePath(currentFilePath); com.google.gerrit.server.edit.tree.AddPath addPathEdit = new com.google.gerrit.server.edit.tree.AddPath(newFilePath, treeWalk.getFileMode(0), treeWalk.getObjectId(0)); return java.util.Arrays.asList(deletePathEdit, addPathEdit); } } }",f14ada0b098b9a27aec952df000c36f44b97ee82,,getNecessaryPathEdits(org.eclipse.jgit.lib.Repository),5,0,"@java.lang.Override public java.util.List<org.eclipse.jgit.dircache.DirCacheEditor.PathEdit> getPathEdits(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository)) { revWalk.parseHeaders(currentCommit); try (org.eclipse.jgit.treewalk.TreeWalk treeWalk = org.eclipse.jgit.treewalk.TreeWalk.forPath(revWalk.getObjectReader(), currentFilePath, currentCommit.getTree())) { if (treeWalk == null) { return java.util.Collections.emptyList(); } org.eclipse.jgit.dircache.DirCacheEditor.DeletePath deletePathEdit = new org.eclipse.jgit.dircache.DirCacheEditor.DeletePath(currentFilePath); com.google.gerrit.server.edit.tree.AddPath addPathEdit = new com.google.gerrit.server.edit.tree.AddPath(newFilePath, treeWalk.getFileMode(0), treeWalk.getObjectId(0)); return java.util.Arrays.asList(deletePathEdit, addPathEdit); } } }",c27ed2713f755e41d2ac67b4075a75771c52e6b3,getPathEdits(org.eclipse.jgit.lib.Repository),196331,279,275
105472,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_ChangeApiImpl.java,46.0,"@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo deleteAssignee() throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.AccountInfo> r = deleteAssignee.apply(change, null); return r.isNone() ? null : r.value(); } catch (com.google.gerrit.server.update.UpdateException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete assignee"", e); } }",5886f68d35f220616beac1568309ba36cbe64cb8,"@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo deleteAssignee() throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.AccountInfo> r = deleteAssignee.apply(change, null); return r.isNone() ? null : r.value(); } catch (java.lang.Exception e) { com.google.gerrit.server.api.changes.ChangeApiImpl.throwIfPossible(e); throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete assignee"", e); } }",3200fe68aa27baa57c37eb20c4fb97c17fddf4ca,deleteAssignee(),deleteAssignee(),6,44,"@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo deleteAssignee() throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.AccountInfo> r = deleteAssignee.apply(change, null); return r.isNone() ? null : r.value(); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot delete assignee"", e); } }",a9b6345ea13df6d1ada2fe96d4e98b0714f55f53,deleteAssignee(),18789,156,135
47670,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DraftBox.java,5.0,"private void removeUI() { if ((replyToBox) != null) { replyToBox.unregisterReplyBox(); } com.google.gerrit.client.changes.CommentInfo info = getOriginal(); getDiffView().removeCommentBox(info.side(), ((info.line()) - 1)); removeFromParent(); getSelfWidget().clear(); getPaddingWidget().clear(); }",da94e8369681ac5fcb3381e40092ac06608c69ed,"private void removeUI() { if ((replyToBox) != null) { replyToBox.unregisterReplyBox(); } com.google.gerrit.client.changes.CommentInfo info = getOriginal(); getDiffView().removeDraft(info.side(), ((info.line()) - 1)); removeFromParent(); getSelfWidget().clear(); getWidgetManager().remove(this); }",46d859d59f8b28681295e740d68e5ee7e0daa264,removeUI(),removeUI(),4,5,"private void removeUI() { if ((replyToBox) != null) { replyToBox.unregisterReplyBox(); } com.google.gerrit.client.changes.CommentInfo info = getOriginal(); getDiffView().removeDraft(info.side(), ((info.line()) - 1)); removeFromParent(); getSelfWidget().clear(); com.google.gerrit.client.diff.PaddingManager manager = getPaddingManager(); manager.remove(this); manager.resizePaddingWidget(); }",bb1cf98a36170a82d2b49548f681fcd96bf9ab7a,removeUI(),115275,82,105
66354,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_RevisionApiImpl.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.SuppressWarnings(""unchecked"") @java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> actions() throws com.google.gerrit.extensions.restapi.RestApiException { return ((com.google.gerrit.extensions.restapi.Response<java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo>>) (revisionActions.apply(revision))).value(); }",720a1aca38b85d602d7e92706fe43c498eefe775,,actions(),4,5,"@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> actions() throws com.google.gerrit.extensions.restapi.RestApiException { return revisionActions.apply(revision).value(); }",39dd1d058a3da64ef48b2bb4c6608219504af0bd,actions(),178797,116,62
48664,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_api2_changes_RevisionApi.java,,,,void review(com.google.gerrit.extensions.api2.changes.ReviewInput in) throws com.google.gerrit.extensions.restapi.RestApiException;,cfdad7f49869291782158b512858265a062531ae,,review(com.google.gerrit.extensions.api2.changes.ReviewInput),9,0,void review(com.google.gerrit.extensions.api.changes.ReviewInput in) throws com.google.gerrit.extensions.restapi.RestApiException;,28aaf9a6ae9555ba1e009844c9e6b5ee8681c91b,review(com.google.gerrit.extensions.api.changes.ReviewInput),55715,37,37
13740,gerrit-server_src_main_java_com_google_gerrit_common_ChangeHookRunner.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,protected java.lang.String getChangeUrl(final com.google.gerrit.reviewdb.Change change) { if ((change != null) && ((getGerritUrl()) != null)) { final java.lang.StringBuilder r = new java.lang.StringBuilder(); r.append(getGerritUrl()); r.append(change.getChangeId()); return r.toString(); } return null; },d62fe749c5b95fc980fb99e3b68f796dd16d09fa,,getChangeUrl(com.google.gerrit.reviewdb.Change),2,6,private java.lang.String getChangeUrl(final com.google.gerrit.reviewdb.Change change) { if ((change != null) && ((getGerritUrl()) != null)) { final java.lang.StringBuilder r = new java.lang.StringBuilder(); r.append(getGerritUrl()); r.append(change.getChangeId()); return r.toString(); } return null; },9f3cf235af064fe9912c67113da9e3ab0624dc0d,getChangeUrl(com.google.gerrit.reviewdb.Change),108193,91,91
40521,gitiles-servlet_src_main_java_com_google_gitiles_TimeCache.java,,,,"java.lang.Long getTime(final org.eclipse.jgit.revwalk.RevWalk walk, final org.eclipse.jgit.lib.ObjectId id) throws java.io.IOException { try { return cache.get(id, new java.util.concurrent.Callable<java.lang.Long>() { @java.lang.Override public java.lang.Long call() throws java.io.IOException { org.eclipse.jgit.revwalk.RevObject o = walk.parseAny(id); while (o instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (o)); org.eclipse.jgit.lib.PersonIdent ident = tag.getTaggerIdent(); if (ident != null) { return ident.getWhen().getTime(); } walk.parseHeaders(tag); o = tag.getObject(); } if ((o.getType()) == (org.eclipse.jgit.lib.Constants.OBJ_COMMIT)) { return java.lang.Long.valueOf(((org.eclipse.jgit.revwalk.RevCommit) (o)).getCommitTime()); } return java.lang.Long.MIN_VALUE; } }); } catch (java.util.concurrent.ExecutionException e) { com.google.common.base.Throwables.propagateIfInstanceOf(e.getCause(), java.io.IOException.class); throw new java.io.IOException(e); } }",38bb03b5b747923f80175b727d5975460fd16615,,"getTime(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ObjectId)",4,2,"java.lang.Long getTime(final org.eclipse.jgit.revwalk.RevWalk walk, final org.eclipse.jgit.lib.ObjectId id) throws java.io.IOException { try { return cache.get(id, new java.util.concurrent.Callable<java.lang.Long>() { @java.lang.Override public java.lang.Long call() throws java.io.IOException { org.eclipse.jgit.revwalk.RevObject o = walk.parseAny(id); while (o instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (o)); org.eclipse.jgit.lib.PersonIdent ident = tag.getTaggerIdent(); if (ident != null) { return (ident.getWhen().getTime()) / 1000; } o = tag.getObject(); walk.parseHeaders(o); } if ((o.getType()) == (org.eclipse.jgit.lib.Constants.OBJ_COMMIT)) { return java.lang.Long.valueOf(((org.eclipse.jgit.revwalk.RevCommit) (o)).getCommitTime()); } return java.lang.Long.MIN_VALUE; } }); } catch (java.util.concurrent.ExecutionException e) { com.google.common.base.Throwables.propagateIfInstanceOf(e.getCause(), java.io.IOException.class); throw new java.io.IOException(e); } }",6bef5786cc4f73e0c4497dc34fc3ec481ba0e84a,"getTime(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ObjectId)",47673,333,336
11264,src_main_java_com_google_gerrit_server_ssh_commands_ApproveCommand.java,,,,"private void getApprovalNames() throws com.google.gwtorm.client.OrmException { java.util.SortedMap<java.lang.Short, java.lang.String> acvMap = new java.util.TreeMap<java.lang.Short, java.lang.String>(); optionList = new java.util.ArrayList<com.google.gerrit.server.ssh.commands.ApproveCommand.CmdOption>(); com.google.gwtorm.client.ResultSet<com.google.gerrit.client.reviewdb.ApprovalCategory> rs = db.approvalCategories().all(); for (com.google.gerrit.client.reviewdb.ApprovalCategory c : rs) { if (c.getFunctionName().equals(""MaxWithBlock"")) { com.google.gwtorm.client.ResultSet<com.google.gerrit.client.reviewdb.ApprovalCategoryValue> acvrs = db.approvalCategoryValues().byCategory(c.getId()); short min = java.lang.Short.MAX_VALUE; short max = java.lang.Short.MIN_VALUE; java.lang.String usage = """"; for (com.google.gerrit.client.reviewdb.ApprovalCategoryValue acv : acvrs) { if (min > (acv.getValue())) { min = acv.getValue(); } if (max < (acv.getValue())) { max = acv.getValue(); } acvMap.put(acv.getValue(), acv.getName()); } usage += (""Score for "" + (c.getName())) + ""\n""; java.util.Iterator<java.lang.Short> i = acvMap.keySet().iterator(); while (i.hasNext()) { java.lang.Short key = i.next(); usage += (((java.lang.String.format(""%4d"", key)) + "" - "") + (acvMap.get(key))) + ""\n""; } optionList.add(new com.google.gerrit.server.ssh.commands.ApproveCommand.CmdOption((""--"" + (c.getName().toLowerCase().replace(' ', '-'))), usage, c.getId().get(), min, max, c.getName())); usage = """"; acvMap.clear(); } } }",d45f841cb548c701c22ca9ab3cefcaba0e33b945,,getApprovalNames(),5,4,"private void getApprovalNames() throws com.google.gwtorm.client.OrmException { optionList = new java.util.ArrayList<com.google.gerrit.server.ssh.commands.CmdOption>(); for (com.google.gerrit.client.data.ApprovalType type : approvalTypes.getApprovalTypes()) { java.lang.String usage = """"; final com.google.gerrit.client.reviewdb.ApprovalCategory category = type.getCategory(); usage = (""Score for "" + (category.getName())) + ""\n""; for (com.google.gerrit.client.reviewdb.ApprovalCategoryValue v : type.getValues()) { usage += (((java.lang.String.format(""%4d"", v.getValue())) + "" - "") + (v.getName())) + ""\n""; } optionList.add(new com.google.gerrit.server.ssh.commands.CmdOption((""--"" + (category.getName().toLowerCase().replace(' ', '-'))), usage, category.getId().get(), type.getMin().getValue(), type.getMax().getValue(), category.getName())); } }",4d5ab33cec252ed28b8147973b2abdb3c6f73b78,getApprovalNames(),76302,490,247
170272,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_account_ImpersonationIT.java,26.0,"@org.junit.Test public void voteOnBehalfOfInvalidLabel() throws java.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id.toString(); in.label(""Not-A-Label"", 5); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(""label \""Not-A-Label\"" is not a configured label""); revision.review(in); }",b1e441f4075f82c1208aed29193f38d9d5b4e6e6,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""change.strictLabels"", value = ""true"") public void voteOnBehalfOfInvalidLabel() throws java.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id.toString(); in.label(""Not-A-Label"", 5); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(""label \""Not-A-Label\"" is not a configured label""); revision.review(in); }",3324f76090df64deade6cf64533feb05e77eff87,voteOnBehalfOfInvalidLabel(),voteOnBehalfOfInvalidLabel(),5,26,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""change.strictLabels"", value = ""true"") public void voteOnBehalfOfInvalidLabel() throws java.lang.Exception { allowCodeReviewOnBehalfOf(); java.lang.String changeId = createChange().getChangeId(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput().label(""Not-A-Label"", 5); in.onBehalfOf = user.id.toString(); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(""label \""Not-A-Label\"" is not a configured label""); gApi.changes().id(changeId).current().review(in); }",6bdfaac53e9cc2c6e61a58654655b9e2ad440107,voteOnBehalfOfInvalidLabel(),90074,224,193
67580,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,27.0,"static com.google.gerrit.server.query.change.ChangeData createForTest(com.google.gerrit.reviewdb.client.Change.Id id, int currentPatchSetId) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData(null, null, null, null, null, null, null, null, null, null, null, null, null, id); cd.currentPatchSet = new com.google.gerrit.reviewdb.client.PatchSet(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, currentPatchSetId)); return cd; }",bec7cf69c8b27e56b21faf011b831422f740bc67,"static com.google.gerrit.server.query.change.ChangeData createForTest(com.google.gerrit.reviewdb.client.Change.Id id, int currentPatchSetId) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData(null, null, null, null, null, null, null, null, null, null, null, null, null, null, id); cd.currentPatchSet = new com.google.gerrit.reviewdb.client.PatchSet(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, currentPatchSetId)); return cd; }",4cf7549447f83c133e2412e40ed97f185840e47f,"createForTest(com.google.gerrit.reviewdb.client.Change$Id,int)","createForTest(com.google.gerrit.reviewdb.client.Change$Id,int)",20,30,"public static com.google.gerrit.server.query.change.ChangeData createForTest(com.google.gerrit.reviewdb.client.Change.Id id, int currentPatchSetId) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData(null, null, null, null, null, null, null, null, null, null, null, null, null, id); cd.currentPatchSet = new com.google.gerrit.reviewdb.client.PatchSet(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, currentPatchSetId)); return cd; }",4b709fba52bbf4b50bbd7f9fd952ae288d733f5c,"createForTest(com.google.gerrit.reviewdb.client.Change$Id,int)",149167,162,161
48012,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,36.0,"private com.google.gerrit.client.diff.PaddingManager.LineWidgetElementPair addPaddingWidget(net.codemirror.lib.CodeMirror cm, java.lang.String style, int line, double height, com.google.gwt.dom.client.Style.Unit unit, java.lang.Integer index) { com.google.gwt.dom.client.Element div = com.google.gwt.user.client.DOM.createDiv(); div.setClassName(style); div.getStyle().setHeight(height, unit); net.codemirror.lib.Configuration config = net.codemirror.lib.Configuration.create().set(""coverGutter"", true).set(""above"", (line == (-1))); if (index != null) { config = config.set(""insertAt"", index); } net.codemirror.lib.LineWidget widget = cm.addLineWidget((line == (-1) ? 0 : line), div, config); return new com.google.gerrit.client.diff.PaddingManager.LineWidgetElementPair(widget, div); }",c3c2e1ebd5b499fd841529e1d8abeab82b43a1dd,"private com.google.gerrit.client.diff.PaddingManager.LineWidgetWrapper addPaddingWidget(net.codemirror.lib.CodeMirror cm, java.lang.String style, int line, double height, com.google.gwt.dom.client.Style.Unit unit, java.lang.Integer index) { com.google.gwt.dom.client.Element div = com.google.gwt.user.client.DOM.createDiv(); div.setClassName(style); div.getStyle().setHeight(height, unit); net.codemirror.lib.Configuration config = net.codemirror.lib.Configuration.create().set(""coverGutter"", true).set(""above"", (line == (-1))); if (index != null) { config = config.set(""insertAt"", index); } net.codemirror.lib.LineWidget widget = cm.addLineWidget((line == (-1) ? 0 : line), div, config); return new com.google.gerrit.client.diff.PaddingManager.LineWidgetWrapper(widget, div); }",1e3b46b49146b80b20f73fe60b2f55a2d0242d58,"addPaddingWidget(net.codemirror.lib.CodeMirror,java.lang.String,int,double,com.google.gwt.dom.client.Style.Unit,java.lang.Integer)","addPaddingWidget(net.codemirror.lib.CodeMirror,java.lang.String,int,double,com.google.gwt.dom.client.Style.Unit,java.lang.Integer)",4,41,"private com.google.gerrit.client.diff.PaddingManager.PaddingWidgetWrapper addPaddingWidget(net.codemirror.lib.CodeMirror cm, java.lang.String style, int line, double height, com.google.gwt.dom.client.Style.Unit unit, java.lang.Integer index) { com.google.gwt.dom.client.Element div = com.google.gwt.user.client.DOM.createDiv(); div.setClassName(style); div.getStyle().setHeight(height, unit); net.codemirror.lib.Configuration config = net.codemirror.lib.Configuration.create().set(""coverGutter"", true).set(""above"", (line == (-1))); if (index != null) { config = config.set(""insertAt"", index); } net.codemirror.lib.LineWidget widget = cm.addLineWidget((line == (-1) ? 0 : line), div, config); return new com.google.gerrit.client.diff.PaddingManager.PaddingWidgetWrapper(widget, div); }",e9371aae504316599c063de99560f873403af1ec,"addPaddingWidget(net.codemirror.lib.CodeMirror,java.lang.String,int,double,com.google.gwt.dom.client.Style.Unit,java.lang.Integer)",117826,234,234
24380,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_account_AccountSecurityImpl.java,2.0,@java.lang.Override public void myGroups(final com.google.gwt.user.client.rpc.AsyncCallback<java.util.List<com.google.gerrit.reviewdb.AccountGroup>> callback) { myGroupsFactory.create().to(callback); },af7e0eb170431e22400e148aadf8a7f7bea6be51,"@java.lang.Override public void myGroups(final com.google.gwt.user.client.rpc.AsyncCallback<java.util.List<com.google.gerrit.common.data.GroupDetail>> callback) { run(callback, new com.google.gerrit.httpd.rpc.account.Action<java.util.List<com.google.gerrit.common.data.GroupDetail>>() { public java.util.List<com.google.gerrit.common.data.GroupDetail> run(final com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gerrit.httpd.rpc.account.Failure, com.google.gwtorm.client.OrmException { java.util.List<com.google.gerrit.common.data.GroupDetail> groups = new java.util.ArrayList<com.google.gerrit.common.data.GroupDetail>(); try { for (com.google.gerrit.reviewdb.AccountGroup group : myGroupsFactory.create().call()) { groups.add(groupDetailFactory.create(group.getId()).call()); } } catch (java.lang.Exception e) { throw new com.google.gerrit.httpd.rpc.account.Failure(e); } return groups; } }); }",0c72e0c031c4dbf93a66ab79c1b80288302f5483,myGroups(com.google.gwt.user.client.rpc.AsyncCallback),myGroups(com.google.gwt.user.client.rpc.AsyncCallback),4,2,"@java.lang.Override public void myGroups(final com.google.gwt.user.client.rpc.AsyncCallback<java.util.List<com.google.gerrit.common.data.GroupDetail>> callback) { run(callback, new com.google.gerrit.httpd.rpc.account.Action<java.util.List<com.google.gerrit.common.data.GroupDetail>>() { public java.util.List<com.google.gerrit.common.data.GroupDetail> run(final com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gerrit.httpd.rpc.account.Failure, com.google.gwtorm.client.OrmException { java.util.List<com.google.gerrit.common.data.GroupDetail> groupDetails = new java.util.ArrayList<com.google.gerrit.common.data.GroupDetail>(); for (com.google.gerrit.reviewdb.AccountGroup group : myGroupsFactory.create().call()) { groupDetails.add(groupDetailFactory.create(group.getId()).call()); } return groupDetails; } }); }",dc9a6f1fa09cb175d5f27c7f17c5957e0aace383,myGroups(com.google.gwt.user.client.rpc.AsyncCallback),103221,304,273
35193,gerrit-server_src_main_java_com_google_gerrit_server_plugins_PluginGuiceEnvironment.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static com.google.gerrit.extensions.registration.RegistrationHandle replace(com.google.gerrit.extensions.registration.ReloadableRegistrationHandle<?> h, com.google.inject.Binding<?> b) { @java.lang.SuppressWarnings(""unchecked"") com.google.gerrit.extensions.registration.ReloadableRegistrationHandle<java.lang.Object> handle = ((com.google.gerrit.extensions.registration.ReloadableRegistrationHandle<java.lang.Object>) (h)); return handle.replace(b.getKey(), b.getProvider().get()); }",f1864084371a6d6640ff25e30c13042702fe6b8b,,"replace(com.google.gerrit.extensions.registration.ReloadableRegistrationHandle,com.google.inject.Binding)",6,17,"private static <T> void replace(com.google.gerrit.server.plugins.Plugin newPlugin, com.google.gerrit.extensions.registration.ReloadableRegistrationHandle<T> h, com.google.inject.Binding<T> b) { com.google.gerrit.extensions.registration.RegistrationHandle n = h.replace(b.getKey(), b.getProvider().get()); if (n != null) { newPlugin.add(n); } }",488c1ce77f6b4785cfc2a790d478e4ff7f472f62,"replace(com.google.gerrit.server.plugins.Plugin,com.google.gerrit.extensions.registration.ReloadableRegistrationHandle,com.google.inject.Binding)",135398,120,100
97811,gerrit-server_src_main_java_com_google_gerrit_server_permissions_PermissionBackend.java,,,,public com.google.gerrit.server.permissions.PermissionBackend.ForChange change(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { return ref(cd.change().getDest()).change(cd); },802bd7faf12fc52e80f0aef24696970db4899dec,,change(com.google.gerrit.server.query.change.ChangeData),18,14,"public com.google.gerrit.server.permissions.PermissionBackend.ForChange change(com.google.gerrit.server.query.change.ChangeData cd) { try { return ref(cd.change().getDest()).change(cd); } catch (com.google.gwtorm.server.OrmException e) { return com.google.gerrit.server.permissions.FailedPermissionBackend.change(""unavailable"", e); } }",471e71c243b730b566c5984f8fa94070dd735340,change(com.google.gerrit.server.query.change.ChangeData),92541,66,97
61480,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_edit_ChangeEditIT.java,23.0,"@org.junit.Test public void publishEditRest() throws java.lang.Exception { com.google.gerrit.reviewdb.client.PatchSet oldCurrentPatchSet = getCurrentPatchSet(changeId); assertEquals(RefUpdate.Result.NEW, modifier.createEdit(change, oldCurrentPatchSet)); assertEquals(RefUpdate.Result.FORCED, modifier.modifyFile(editUtil.byChange(change).get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW)); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); com.google.gerrit.acceptance.RestResponse r = adminSession.post(urlPublish()); assertEquals(com.google.gerrit.acceptance.edit.SC_NO_CONTENT, r.getStatusCode()); edit = editUtil.byChange(change); assertFalse(edit.isPresent()); com.google.gerrit.reviewdb.client.PatchSet newCurrentPatchSet = getCurrentPatchSet(changeId); assertFalse(oldCurrentPatchSet.getId().equals(newCurrentPatchSet.getId())); }",63d67ad67cea052172440b05e911255a56ec8609,"@org.junit.Test public void publishEditRest() throws java.lang.Exception { com.google.gerrit.reviewdb.client.PatchSet oldCurrentPatchSet = getCurrentPatchSet(changeId); assertEquals(RefUpdate.Result.NEW, modifier.createEdit(change, oldCurrentPatchSet)); assertEquals(RefUpdate.Result.FORCED, modifier.modifyFile(editUtil.byChange(change).get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.RestSession.newRawInput(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW))); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); com.google.gerrit.acceptance.RestResponse r = adminSession.post(urlPublish()); assertEquals(com.google.gerrit.acceptance.edit.SC_NO_CONTENT, r.getStatusCode()); edit = editUtil.byChange(change); assertFalse(edit.isPresent()); com.google.gerrit.reviewdb.client.PatchSet newCurrentPatchSet = getCurrentPatchSet(changeId); assertFalse(oldCurrentPatchSet.getId().equals(newCurrentPatchSet.getId())); }",2daa0ff1517d9c9a9c23842f714c1ce1d017c72e,publishEditRest(),publishEditRest(),3,22,"@org.junit.Test public void publishEditRest() throws java.lang.Exception { com.google.gerrit.reviewdb.client.PatchSet oldCurrentPatchSet = getCurrentPatchSet(changeId); assertThat(modifier.createEdit(change, oldCurrentPatchSet)).isEqualTo(RefUpdate.Result.NEW); assertThat(modifier.modifyFile(editUtil.byChange(change).get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.RestSession.newRawInput(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW))).isEqualTo(RefUpdate.Result.FORCED); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); com.google.gerrit.acceptance.RestResponse r = adminSession.post(urlPublish()); assertThat(r.getStatusCode()).isEqualTo(com.google.gerrit.acceptance.edit.SC_NO_CONTENT); edit = editUtil.byChange(change); assertThat(edit.isPresent()).isFalse(); com.google.gerrit.reviewdb.client.PatchSet newCurrentPatchSet = getCurrentPatchSet(changeId); assertThat(oldCurrentPatchSet.getId().equals(newCurrentPatchSet.getId())).isFalse(); }",c58b79dde43b3e03d7959e88fe68dcdcdf252b15,publishEditRest(),110513,293,308
47380,gerrit-server_src_main_java_com_google_gerrit_server_index_IndexRewriteImpl.java,5.0,"public static java.util.EnumSet<com.google.gerrit.reviewdb.client.Change.Status> getPossibleStatus(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> in) { if (in instanceof com.google.gerrit.server.query.change.ChangeStatusPredicate) { return java.util.EnumSet.of(((com.google.gerrit.server.query.change.ChangeStatusPredicate) (in)).getStatus()); } else if ((in.getClass()) == (com.google.gerrit.server.query.NotPredicate.class)) { return java.util.EnumSet.complementOf(com.google.gerrit.server.query.change.IndexRewriteImpl.getPossibleStatus(in.getChild(0))); } else if ((in.getClass()) == (com.google.gerrit.server.query.OrPredicate.class)) { java.util.EnumSet<com.google.gerrit.reviewdb.client.Change.Status> s = java.util.EnumSet.noneOf(Change.Status.class); for (int i = 0; i < (in.getChildCount()); i++) { s.addAll(com.google.gerrit.server.query.change.IndexRewriteImpl.getPossibleStatus(in.getChild(i))); } return s; } else if ((in.getClass()) == (com.google.gerrit.server.query.AndPredicate.class)) { java.util.EnumSet<com.google.gerrit.reviewdb.client.Change.Status> s = java.util.EnumSet.allOf(Change.Status.class); for (int i = 0; i < (in.getChildCount()); i++) { s.retainAll(com.google.gerrit.server.query.change.IndexRewriteImpl.getPossibleStatus(in.getChild(i))); } return s; } else if ((in.getChildCount()) == 0) { return java.util.EnumSet.allOf(Change.Status.class); } else { throw new java.lang.IllegalStateException((""Invalid predicate type in change index query: "" + (in.getClass()))); } }",4c9bda2b83d4ff7592403e2570bff7c835f208ca,"public static java.util.EnumSet<com.google.gerrit.reviewdb.client.Change.Status> getPossibleStatus(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> in) { if (in instanceof com.google.gerrit.server.query.change.ChangeStatusPredicate) { return java.util.EnumSet.of(((com.google.gerrit.server.query.change.ChangeStatusPredicate) (in)).getStatus()); } else if ((in.getClass()) == (com.google.gerrit.server.query.NotPredicate.class)) { return java.util.EnumSet.complementOf(com.google.gerrit.server.index.IndexRewriteImpl.getPossibleStatus(in.getChild(0))); } else if ((in.getClass()) == (com.google.gerrit.server.query.OrPredicate.class)) { java.util.EnumSet<com.google.gerrit.reviewdb.client.Change.Status> s = java.util.EnumSet.noneOf(Change.Status.class); for (int i = 0; i < (in.getChildCount()); i++) { s.addAll(com.google.gerrit.server.index.IndexRewriteImpl.getPossibleStatus(in.getChild(i))); } return s; } else if ((in.getClass()) == (com.google.gerrit.server.query.AndPredicate.class)) { java.util.EnumSet<com.google.gerrit.reviewdb.client.Change.Status> s = java.util.EnumSet.allOf(Change.Status.class); for (int i = 0; i < (in.getChildCount()); i++) { s.retainAll(com.google.gerrit.server.index.IndexRewriteImpl.getPossibleStatus(in.getChild(i))); } return s; } else if ((in.getChildCount()) == 0) { return java.util.EnumSet.allOf(Change.Status.class); } else { throw new java.lang.IllegalStateException((""Invalid predicate type in change index query: "" + (in.getClass()))); } }",83deb9ebe9f2297d55f332ee5a4f9ec95666d8b6,getPossibleStatus(com.google.gerrit.server.query.Predicate),getPossibleStatus(com.google.gerrit.server.query.Predicate),4,7,public static java.util.EnumSet<com.google.gerrit.reviewdb.client.Change.Status> getPossibleStatus(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> in) { java.util.EnumSet<com.google.gerrit.reviewdb.client.Change.Status> s = com.google.gerrit.server.index.IndexRewriteImpl.extractStatus(in); return s != null ? s : java.util.EnumSet.allOf(com.google.gerrit.reviewdb.client.Change.Status.class); },7eeaeb963fa35081054be7e695ab6c0ba271d0f1,getPossibleStatus(com.google.gerrit.server.query.Predicate),100532,472,145
157552,java_com_google_gerrit_server_account_AccountSshKey.java,17.0,public com.google.gerrit.server.account.AccountSshKey.Id getKey() { return id; },7cb915715276d49874c25981debe8ef44c0654b6,"public static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String sshPublicKey) { return com.google.gerrit.server.account.AccountSshKey.create(id, sshPublicKey, false); }",7ac821624f190584555eba7c066778f72cd9cdb5,getKey(),"createInvalid(com.google.gerrit.server.account.AccountSshKey$Id,java.lang.String)",5,13,"public static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.reviewdb.client.Account.Id accountId, int seq, java.lang.String sshPublicKey) { return com.google.gerrit.server.account.AccountSshKey.create(accountId, seq, sshPublicKey, false); }",5eb098f8a7d118b665abe072bbcf0eb578a6911c,"createInvalid(com.google.gerrit.reviewdb.client.Account$Id,int,java.lang.String)",128139,72,77
53381,gerrit-server_src_main_java_com_google_gerrit_server_mail_ChangeEmail.java,24.0,"public java.lang.String getChangeDetail() { try { java.lang.StringBuilder detail = new java.lang.StringBuilder(); if ((patchSetInfo) != null) { detail.append(patchSetInfo.getMessage().trim()).append(""\n""); } else { detail.append(change.getSubject().trim()).append(""\n""); } if ((patchSet) != null) { detail.append(""---\n""); com.google.gerrit.server.patch.PatchList patchList = getPatchList(); for (com.google.gerrit.server.patch.PatchListEntry p : patchList.getPatches()) { if (Patch.COMMIT_MSG.equals(p.getNewName())) { continue; } detail.append(p.getChangeType().getCode()).append("" "").append(p.getNewName()).append(""\n""); } detail.append(java.text.MessageFormat.format(("""" + (((""{0,choice,0#0 files|1#1 file|1<{0} files} changed, "" + ""{1,choice,0#0 insertions|1#1 insertion|1<{1} insertions}(+), "") + ""{2,choice,0#0 deletions|1#1 deletion|1<{2} deletions}(-)"") + ""\n"")), ((patchList.getPatches().size()) - 1), patchList.getInsertions(), patchList.getDeletions())); detail.append(""\n""); } return detail.toString(); } catch (java.lang.Exception err) { com.google.gerrit.server.mail.ChangeEmail.log.warn(""Cannot format change detail"", err); return """"; } }",975a5a871a59e71412482145bd6cf39775e3c67d,"public java.lang.String getChangeDetail() { try { java.lang.StringBuilder detail = new java.lang.StringBuilder(); if ((patchSetInfo) != null) { detail.append(patchSetInfo.getMessage().trim()).append(""\n""); } else { detail.append(changeData.getChange().getSubject().trim()).append(""\n""); } if ((patchSet) != null) { detail.append(""---\n""); com.google.gerrit.server.patch.PatchList patchList = getPatchList(); for (com.google.gerrit.server.patch.PatchListEntry p : patchList.getPatches()) { if (Patch.COMMIT_MSG.equals(p.getNewName())) { continue; } detail.append(p.getChangeType().getCode()).append("" "").append(p.getNewName()).append(""\n""); } detail.append(java.text.MessageFormat.format(("""" + (((""{0,choice,0#0 files|1#1 file|1<{0} files} changed, "" + ""{1,choice,0#0 insertions|1#1 insertion|1<{1} insertions}(+), "") + ""{2,choice,0#0 deletions|1#1 deletion|1<{2} deletions}(-)"") + ""\n"")), ((patchList.getPatches().size()) - 1), patchList.getInsertions(), patchList.getDeletions())); detail.append(""\n""); } return detail.toString(); } catch (java.lang.Exception err) { com.google.gerrit.server.mail.ChangeEmail.log.warn(""Cannot format change detail"", err); return """"; } }",e73655b465df427deffd1b8d4d4af7fae3f9d660,getChangeDetail(),getChangeDetail(),9,24,"public java.lang.String getChangeDetail() { try { java.lang.StringBuilder detail = new java.lang.StringBuilder(); if ((patchSetInfo) != null) { detail.append(patchSetInfo.getMessage().trim()).append(""\n""); } else { detail.append(change.getSubject().trim()).append(""\n""); } if ((patchSet) != null) { detail.append(""---\n""); com.google.gerrit.server.patch.PatchList patchList = getPatchList(); for (com.google.gerrit.server.patch.PatchListEntry p : patchList.getPatches()) { if (Patch.COMMIT_MSG.equals(p.getNewName())) { continue; } detail.append(p.getChangeType().getCode()).append("" "").append(p.getNewName()).append(""\n""); } detail.append(java.text.MessageFormat.format(("""" + (((""{0,choice,0#0 files|1#1 file|1<{0} files} changed, "" + ""{1,choice,0#0 insertions|1#1 insertion|1<{1} insertions}(+), "") + ""{2,choice,0#0 deletions|1#1 deletion|1<{2} deletions}(-)"") + ""\n"")), ((patchList.getPatches().size()) - 1), patchList.getInsertions(), patchList.getDeletions())); detail.append(""\n""); } return detail.toString(); } catch (java.lang.Exception err) { com.google.gerrit.server.mail.ChangeEmail.log.warn(""Cannot format change detail"", err); return """"; } }",975a5a871a59e71412482145bd6cf39775e3c67d,getChangeDetail(),19054,366,362
156531,java_com_google_gerrit_server_permissions_RefControl.java,32.0,private boolean canDelete() { if (RefNames.REFS_CONFIG.equals(refName)) { return false; } switch (getUser().getAccessPath()) { case GIT : return (canPushWithForce()) || (canPerform(Permission.DELETE)); case JSON_RPC : case REST_API : case SSH_COMMAND : case UNKNOWN : case WEB_BROWSER : default : return ((((isOwner()) && (!(isForceBlocked(Permission.PUSH)))) || (canPushWithForce())) || (canPerform(Permission.DELETE))) || (projectControl.isAdmin()); } },1bd87e3f26dbf5a87ce88a44f2f14e052be5c188,private boolean canDelete() { if (RefNames.REFS_CONFIG.equals(refName)) { return false; } switch (getUser().getAccessPath()) { case GIT : return (canPushWithForce()) || (canPerform(Permission.DELETE)); case JSON_RPC : case REST_API : case SSH_COMMAND : case UNKNOWN : case WEB_BROWSER : default : return (((isOwner()) || (canPushWithForce())) || (canPerform(Permission.DELETE))) || (projectControl.isAdmin()); } },b73b7fc149693b605c001897c4ebaab6cec59341,canDelete(),canDelete(),21,29,"private boolean canDelete() { if (RefNames.REFS_CONFIG.equals(refName)) { return false; } switch (getUser().getAccessPath()) { case GIT : return (canPushWithForce()) || (canPerform(Permission.DELETE)); case JSON_RPC : case REST_API : case SSH_COMMAND : case UNKNOWN : case WEB_BROWSER : default : return ((((isOwner()) && (!(isBlocked(Permission.PUSH, false, true)))) || (canPushWithForce())) || (canPerform(Permission.DELETE))) || (projectControl.isAdmin()); } }",4fc40680a408ab66698505f3de90bf0bb34a8777,canDelete(),67185,119,133
42253,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_group_CreateGroupIT.java,,,,"@org.junit.Test public void testCreateGroupWhenGroupAlreadyExists() throws com.google.gwtorm.server.OrmException, com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.acceptance.RestResponse r = session.put(""/groups/Administrators""); assertEquals(HttpStatus.SC_PRECONDITION_FAILED, r.getStatusCode()); }",2e7f165f275033ff05ad99f7a250bc180db741f6,,testCreateGroupWhenGroupAlreadyExists(),4,4,"@org.junit.Test public void testCreateGroupWhenGroupAlreadyExists_PreconditionFailed() throws com.google.gwtorm.server.OrmException, com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.acceptance.RestResponse r = session.put(""/groups/Administrators""); assertEquals(HttpStatus.SC_PRECONDITION_FAILED, r.getStatusCode()); }",6384a9a5a4469ca54c49d85e6908b178c2358aac,testCreateGroupWhenGroupAlreadyExists_PreconditionFailed(),148320,85,88
44192,src_test_java_com_google_gwtexpui_safehtml_client_SafeHtml_ReplaceTest.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testReplaceOverlappingAtFirstCharFirstMatch() { com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest.html(""abcd""); com.google.gwtexpui.safehtml.client.RawFindReplace ab1 = new com.google.gwtexpui.safehtml.client.RawFindReplace(""ab"", ""AB""); com.google.gwtexpui.safehtml.client.RawFindReplace ab2 = new com.google.gwtexpui.safehtml.client.RawFindReplace(""[^cd][^cd]"", ""12""); assertEquals(""ABcd"", o.replaceAll(com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest.repls(ab1, ab2)).asString()); assertEquals(""12cd"", o.replaceAll(com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest.repls(ab2, ab1)).asString()); }",0af1d61df6532254ff0c34622c2689a7ba7a0e63,,testReplaceOverlappingAtFirstCharFirstMatch(),4,5,"public void testReplaceOverlappingAtFirstCharFirstMatch() { com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest.html(""abcd""); com.google.gwtexpui.safehtml.client.RegexFindReplace ab1 = new com.google.gwtexpui.safehtml.client.RegexFindReplace(""ab"", ""AB""); com.google.gwtexpui.safehtml.client.RegexFindReplace ab2 = new com.google.gwtexpui.safehtml.client.RegexFindReplace(""[^cd][^cd]"", ""12""); assertEquals(""ABcd"", o.replaceAll(com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest.repls(ab1, ab2)).asString()); assertEquals(""12cd"", o.replaceAll(com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest.repls(ab2, ab1)).asString()); }",7fe47f0b4ec58d9ddaf0b17e9a9db1401c0d311b,testReplaceOverlappingAtFirstCharFirstMatch(),202127,219,219
46890,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_CommentBox.java,,,,java.lang.String commentBox();,c43928f8563e23856baa2994f36423bea7a6d525,,commentBox(),19,4,java.lang.String close();,6fa7f169d7e796c36b5bef503930a9e300cf6ec0,close(),193268,8,7
62784,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeQueryBuilder.java,19.0,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> is(java.lang.String value) { if (""starred"".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsStarredByPredicate(args, currentUser); } if (""watched"".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsWatchedByPredicate(args, currentUser, false); } if (""visible"".equalsIgnoreCase(value)) { return is_visible(); } if (""reviewed"".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsReviewedPredicate(); } if (""owner"".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.OwnerPredicate(self()); } if (""reviewer"".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.ReviewerPredicate(self(), args.allowsDrafts); } if (""mergeable"".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsMergeablePredicate(com.google.gerrit.server.query.change.ChangeQueryBuilder.schema(args.indexes), args.fillArgs); } try { return status(value); } catch (java.lang.IllegalArgumentException e) { } throw new java.lang.IllegalArgumentException(); }",dd101f26af13a7564663c83380f56ec6af8c8741,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> is(java.lang.String value) { if (""starred"".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsStarredByPredicate(args, userProvider.get()); } if (""watched"".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsWatchedByPredicate(args, userProvider.get(), false); } if (""visible"".equalsIgnoreCase(value)) { return is_visible(); } if (""reviewed"".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsReviewedPredicate(); } if (""owner"".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.OwnerPredicate(self()); } if (""reviewer"".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.ReviewerPredicate(self(), args.allowsDrafts); } if (""mergeable"".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsMergeablePredicate(com.google.gerrit.server.query.change.ChangeQueryBuilder.schema(args.indexes), args.fillArgs); } try { return status(value); } catch (java.lang.IllegalArgumentException e) { } throw new java.lang.IllegalArgumentException(); }",11df7741cb6cb8b2ed62fbf1c3d7a0a8cc18d7b8,is(java.lang.String),is(java.lang.String),3,22,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> is(java.lang.String value) throws com.google.gerrit.server.query.QueryParseException { if (""starred"".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsStarredByPredicate(args); } if (""watched"".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsWatchedByPredicate(args, false); } if (""visible"".equalsIgnoreCase(value)) { return is_visible(); } if (""reviewed"".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsReviewedPredicate(); } if (""owner"".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.OwnerPredicate(self()); } if (""reviewer"".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.ReviewerPredicate(self(), args.allowsDrafts); } if (""mergeable"".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsMergeablePredicate(com.google.gerrit.server.query.change.ChangeQueryBuilder.schema(args.indexes), args.fillArgs); } try { return status(value); } catch (java.lang.IllegalArgumentException e) { } throw new java.lang.IllegalArgumentException(); }",49177b71ae22fd4fbbb5b99aa3b7bbf2ccc931f7,is(java.lang.String),10976,352,356
49743,gerrit-server_src_main_java_com_google_gerrit_server_mail_ProjectWatch.java,3.0,"public final com.google.gerrit.server.mail.ProjectWatch.Watchers getWatchers(com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType type) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.mail.ProjectWatch.Watchers matching = new com.google.gerrit.server.mail.ProjectWatch.Watchers(); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> projectWatchers = new java.util.HashSet<com.google.gerrit.reviewdb.client.Account.Id>(); for (com.google.gerrit.reviewdb.client.AccountProjectWatch w : args.db.get().accountProjectWatches().byProject(project)) { if (w.isNotify(type)) { projectWatchers.add(w.getAccountId()); add(matching, w); } } for (com.google.gerrit.reviewdb.client.AccountProjectWatch w : args.db.get().accountProjectWatches().byProject(args.allProjectsName)) { if ((!(projectWatchers.contains(w.getAccountId()))) && (w.isNotify(type))) { add(matching, w); } } for (com.google.gerrit.server.project.ProjectState state : projectState.tree()) { for (com.google.gerrit.server.git.NotifyConfig nc : state.getConfig().getNotifyConfigs()) { if (nc.isNotify(type)) { try { add(matching, nc, state.getProject().getNameKey()); } catch (com.google.gerrit.server.query.QueryParseException e) { com.google.gerrit.server.mail.ProjectWatch.log.warn(java.lang.String.format(""Project %s has invalid notify %s filter \""%s\"": %s"", state.getProject().getName(), nc.getName(), nc.getFilter(), e.getMessage())); } } } } return matching; }",3946fb3550086486616ccd08890096540e2b7910,"public final com.google.gerrit.server.mail.ProjectWatch.Watchers getWatchers(com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType type) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.mail.ProjectWatch.Watchers matching = new com.google.gerrit.server.mail.ProjectWatch.Watchers(); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> projectWatchers = new java.util.HashSet<com.google.gerrit.reviewdb.client.Account.Id>(); for (com.google.gerrit.reviewdb.client.AccountProjectWatch w : args.db.get().accountProjectWatches().byProject(project)) { if (w.isNotify(type)) { projectWatchers.add(w.getAccountId()); add(matching, w); } } for (com.google.gerrit.reviewdb.client.AccountProjectWatch w : args.db.get().accountProjectWatches().byProject(args.allProjectsName)) { if ((!(projectWatchers.contains(w.getAccountId()))) && (w.isNotify(type))) { add(matching, w); } } for (com.google.gerrit.server.project.ProjectState state : projectState.tree()) { for (com.google.gerrit.server.git.NotifyConfig nc : state.getConfig().getNotifyConfigs()) { if (nc.isNotify(type)) { try { add(matching, nc, state.getProject().getNameKey()); } catch (com.google.gerrit.server.query.QueryParseException e) { com.google.gerrit.server.mail.ProjectWatch.log.warn(java.lang.String.format(""Project %s has invalid notify %s filter \""%s\"": %s"", state.getProject().getName(), nc.getName(), nc.getFilter()), e); } } } } return matching; }",3a588934d7f7ad844a7cec4c36d85a5f606b8809,getWatchers(com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType),getWatchers(com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType),2,3,"public final com.google.gerrit.server.mail.ProjectWatch.Watchers getWatchers(com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType type) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.mail.ProjectWatch.Watchers matching = new com.google.gerrit.server.mail.ProjectWatch.Watchers(); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> projectWatchers = new java.util.HashSet<com.google.gerrit.reviewdb.client.Account.Id>(); for (com.google.gerrit.reviewdb.client.AccountProjectWatch w : args.db.get().accountProjectWatches().byProject(project)) { if (w.isNotify(type)) { projectWatchers.add(w.getAccountId()); add(matching, w); } } for (com.google.gerrit.reviewdb.client.AccountProjectWatch w : args.db.get().accountProjectWatches().byProject(args.allProjectsName)) { if ((!(projectWatchers.contains(w.getAccountId()))) && (w.isNotify(type))) { add(matching, w); } } for (com.google.gerrit.server.project.ProjectState state : projectState.tree()) { for (com.google.gerrit.server.git.NotifyConfig nc : state.getConfig().getNotifyConfigs()) { if (nc.isNotify(type)) { try { add(matching, nc, state.getProject().getNameKey()); } catch (com.google.gerrit.server.query.QueryParseException e) { com.google.gerrit.server.mail.ProjectWatch.log.warn(java.lang.String.format(""Project %s has invalid notify %s filter \""%s\"""", state.getProject().getName(), nc.getName(), nc.getFilter()), e); } } } } return matching; }",cd8044924de7b10bc90598398b89a712ce9767a2,getWatchers(com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType),14177,450,447
31643,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectBranchesScreen.java,2.0,@java.lang.Override public void preDisplay(final com.google.gerrit.common.data.ListBranchesResult result) { if (result.getNoRepository()) { branches.setVisible(false); addPanel.setVisible(false); delBranch.setVisible(false); com.google.gwt.user.client.ui.Label no = new com.google.gwt.user.client.ui.Label(Util.C.errorNoGitRepository()); no.setStyleName(Gerrit.RESOURCES.css().smallHeading()); add(no); } else { enableForm(true); display(result.getBranches()); addPanel.setVisible(result.getCanAdd()); } },a86ba1597e86cbb83f7132a77083b18cdd2f9ebc,@java.lang.Override public void preDisplay(final com.google.gerrit.common.data.ListBranchesResult result) { if (result.getNoRepository()) { branches.setVisible(false); addPanel.setVisible(false); abandonOpenChanges.setVisible(false); delBranch.setVisible(false); com.google.gwt.user.client.ui.Label no = new com.google.gwt.user.client.ui.Label(Util.C.errorNoGitRepository()); no.setStyleName(Gerrit.RESOURCES.css().smallHeading()); add(no); } else { enableForm(true); display(result.getBranches()); addPanel.setVisible(result.getCanAdd()); } },89d567c8f56c72d417677e5aadf34d9dc39bb065,preDisplay(com.google.gerrit.common.data.ListBranchesResult),preDisplay(com.google.gerrit.common.data.ListBranchesResult),3,2,@java.lang.Override public void preDisplay(final com.google.gerrit.common.data.ListBranchesResult result) { if (result.getNoRepository()) { branches.setVisible(false); addPanel.setVisible(false); delBranch.setVisible(false); com.google.gwt.user.client.ui.Label no = new com.google.gwt.user.client.ui.Label(Util.C.errorNoGitRepository()); no.setStyleName(Gerrit.RESOURCES.css().smallHeading()); add(no); } else { enableForm(true); display(result.getBranches()); addPanel.setVisible(result.getCanAdd()); } },a86ba1597e86cbb83f7132a77083b18cdd2f9ebc,preDisplay(com.google.gerrit.common.data.ListBranchesResult),177288,153,145
62835,gerrit-gwtui_src_main_java_net_codemirror_mode_ModeInfo.java,,,,"public final void addMime(java.lang.String mimeType) { net.codemirror.mode.ModeInfo.byMime.put(mimeType, this); }",c313c17ab677ba962d564c40fff079bd3a532786,,addMime(java.lang.String),3,1,"private static void alias(java.lang.String serverMime, java.lang.String toMime) { net.codemirror.mode.ModeInfo mode = net.codemirror.mode.ModeInfo.byMime.get(toMime); if (mode != null) { net.codemirror.mode.ModeInfo.byMime.put(serverMime, mode); } }",2f1d2c8e1ee8488e395a745dda8d2f90dfdd0b63,"alias(java.lang.String,java.lang.String)",27902,34,80
34486,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_QueryScreen.java,5.0,"@java.lang.Override protected void loadPrev() { Util.LIST_SVC.allQueryPrev(query, pos, pageSize, loadCallback()); }",f046604ab0020baff5b8f676713b8171d488438f,"@java.lang.Override protected void loadPrev() { com.google.gerrit.client.changes.ChangeList.queryPrev(query, pos, pageSize, loadCallback()); }",36f46cf4ac8c692066904c816bf57c500afc8022,loadPrev(),loadPrev(),11,4,"@java.lang.Override protected void loadPrev() { Util.LIST_SVC.allQueryPrev(query, pos, pageSize, loadCallback()); }",f046604ab0020baff5b8f676713b8171d488438f,loadPrev(),17652,40,34
68310,gerrit-server_src_test_java_com_google_gerrit_server_project_RefControlTest.java,58.0,"@org.junit.Test public void testBlockPushDrafts() { com.google.gerrit.server.project.Util.allow(parent, com.google.gerrit.server.project.PUSH, com.google.gerrit.server.project.REGISTERED_USERS, ""refs/for/refs/*""); com.google.gerrit.server.project.Util.block(parent, com.google.gerrit.server.project.PUSH, com.google.gerrit.server.project.ANONYMOUS_USERS, ""refs/drafts/*""); com.google.gerrit.server.project.ProjectControl u = util.user(local); assertTrue(""can upload refs/heads/master"", u.controlForRef(""refs/heads/master"").canUpload()); assertTrue(""push is blocked to refs/drafts/master"", u.controlForRef(""refs/drafts/refs/heads/master"").isBlocked(com.google.gerrit.server.project.PUSH)); }",9078057481c79396a019f90b29330461fc9ed802,"@org.junit.Test public void testBlockPushDrafts() { com.google.gerrit.server.project.Util.allow(parent, com.google.gerrit.server.project.PUSH, com.google.gerrit.server.project.REGISTERED_USERS, ""refs/for/refs/*""); com.google.gerrit.server.project.Util.block(parent, com.google.gerrit.server.project.PUSH, com.google.gerrit.server.project.ANONYMOUS_USERS, ""refs/drafts/*""); com.google.gerrit.server.project.ProjectControl u = util.user(local); assertCanUpload(""refs/heads/master"", u); assertBlocked(com.google.gerrit.server.project.PUSH, ""refs/drafts/refs/heads/master"", u); assertBlocked(com.google.gerrit.server.project.PUSH, ""refs/drafts/master"", u); }",1cbdd39bd72ba02366def386549392d2542bc525,testBlockPushDrafts(),testBlockPushDrafts(),3,55,"@org.junit.Test public void testBlockPushDrafts() { com.google.gerrit.server.project.Util.allow(parent, com.google.gerrit.server.project.PUSH, com.google.gerrit.server.project.REGISTERED_USERS, ""refs/for/refs/*""); com.google.gerrit.server.project.Util.block(parent, com.google.gerrit.server.project.PUSH, com.google.gerrit.server.project.ANONYMOUS_USERS, ""refs/drafts/*""); com.google.gerrit.server.project.ProjectControl u = util.user(local); assertCanUpload(""refs/heads/master"", u); assertBlocked(com.google.gerrit.server.project.PUSH, ""refs/drafts/refs/heads/master"", u); }",239bee6dab9c6947c6aadf7529acd2ed0844c321,testBlockPushDrafts(),122756,223,196
66970,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_AddFileBox.java,3.0,"@com.google.gwt.uibinder.client.UiHandler(""cancel"") void onCancel(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { hide(); }",a1afe0652b54170cbb95ce82c48cea064ae58200,"@com.google.gwt.uibinder.client.UiHandler(""cancel"") void onCancel(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { hide(); files.registerKeys(); }",a0eea41db8a165663942576ef0ad82ef74f8b749,onCancel(com.google.gwt.event.dom.client.ClickEvent),onCancel(com.google.gwt.event.dom.client.ClickEvent),5,3,"@com.google.gwt.uibinder.client.UiHandler(""cancel"") void onCancel(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { hide(); fileTable.registerKeys(); }",887a8d24093f531ad903b2d5b51b5715d65e6f16,onCancel(com.google.gwt.event.dom.client.ClickEvent),34368,53,54
55602,gerrit-server_src_main_java_com_google_gerrit_server_schema_AllUsersCreator.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void initAllUsers(org.eclipse.jgit.lib.Repository git) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git); md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); md.setMessage((""Initialized Gerrit Code Review "" + (com.google.gerrit.common.Version.getVersion()))); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.reviewdb.client.Project p = config.getProject(); p.setDescription(""Individual user settings and preferences.""); com.google.gerrit.common.data.AccessSection all = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_USER) + ""*""), true); all.getPermission(Permission.READ, true).setExclusiveGroup(true); config.commit(md); }",0697d4f4956f78b0f130427c366131229735bcc4,,initAllUsers(org.eclipse.jgit.lib.Repository),2,1,"private void initAllUsers(org.eclipse.jgit.lib.Repository git) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git); md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); md.setMessage((""Initialized Gerrit Code Review "" + (com.google.gerrit.common.Version.getVersion()))); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.reviewdb.client.Project project = config.getProject(); project.setDescription(""Individual user settings and preferences.""); com.google.gerrit.common.data.AccessSection all = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_USER) + ""*""), true); all.getPermission(Permission.READ, true).setExclusiveGroup(true); config.commit(md); }",a75e1b628cc93d3c08f8907b82d7a66a1d5bcd7d,initAllUsers(org.eclipse.jgit.lib.Repository),59800,280,280
47141,gitiles-servlet_src_main_java_com_google_gitiles_GitilesFilter.java,5.0,"public synchronized com.google.gitiles.BaseServlet getDefaultHandler(com.google.gitiles.GitilesView.Type view) { checkNotInitialized(); switch (view) { case HOST_INDEX : return new com.google.gitiles.HostIndexServlet(renderer, urls, accessFactory); case REPOSITORY_INDEX : return new com.google.gitiles.RepositoryIndexServlet(renderer, accessFactory, timeCache); case REFS : return new com.google.gitiles.RefServlet(renderer, timeCache); case REVISION : return new com.google.gitiles.RevisionServlet(renderer, linkifier()); case PATH : return new com.google.gitiles.PathServlet(renderer, urls); case DIFF : return new com.google.gitiles.DiffServlet(renderer, linkifier()); case LOG : return new com.google.gitiles.LogServlet(renderer, linkifier()); case DESCRIBE : return new com.google.gitiles.DescribeServlet(); default : throw new java.lang.IllegalArgumentException((""Invalid view type: "" + view)); } }",0ef77fe944b8a67964bea942a711aa325f53434f,"public synchronized com.google.gitiles.BaseServlet getDefaultHandler(com.google.gitiles.GitilesView.Type view) { checkNotInitialized(); switch (view) { case HOST_INDEX : return new com.google.gitiles.HostIndexServlet(renderer, urls, accessFactory); case REPOSITORY_INDEX : return new com.google.gitiles.RepositoryIndexServlet(renderer, accessFactory, timeCache); case REFS : return new com.google.gitiles.RefServlet(renderer, timeCache); case REVISION : return new com.google.gitiles.RevisionServlet(renderer, linkifier()); case PATH : return new com.google.gitiles.PathServlet(renderer, urls); case DIFF : return new com.google.gitiles.DiffServlet(renderer, linkifier()); case LOG : return new com.google.gitiles.LogServlet(renderer, linkifier()); case DESCRIBE : return new com.google.gitiles.DescribeServlet(); case TAR : return new com.google.gitiles.ArchiveServlet(ArchiveServlet.Format.TGZ); case ZIP : return new com.google.gitiles.ArchiveServlet(ArchiveServlet.Format.ZIP); default : throw new java.lang.IllegalArgumentException((""Invalid view type: "" + view)); } }",ff1b7cbc1b4d5c69b7b8872b93f212dcc9794f1c,getDefaultHandler(com.google.gitiles.GitilesView$Type),getDefaultHandler(com.google.gitiles.GitilesView$Type),7,5,"public synchronized com.google.gitiles.BaseServlet getDefaultHandler(com.google.gitiles.GitilesView.Type view) { checkNotInitialized(); switch (view) { case HOST_INDEX : return new com.google.gitiles.HostIndexServlet(renderer, urls, accessFactory); case REPOSITORY_INDEX : return new com.google.gitiles.RepositoryIndexServlet(renderer, accessFactory, timeCache); case REFS : return new com.google.gitiles.RefServlet(renderer, timeCache); case REVISION : return new com.google.gitiles.RevisionServlet(renderer, linkifier()); case PATH : return new com.google.gitiles.PathServlet(renderer, urls); case DIFF : return new com.google.gitiles.DiffServlet(renderer, linkifier()); case LOG : return new com.google.gitiles.LogServlet(renderer, linkifier()); case DESCRIBE : return new com.google.gitiles.DescribeServlet(); case ARCHIVE : return new com.google.gitiles.ArchiveServlet(); default : throw new java.lang.IllegalArgumentException((""Invalid view type: "" + view)); } }",2b86b395a3e70512c9dee8c4596d70019e2e58af,getDefaultHandler(com.google.gitiles.GitilesView$Type),41953,299,264
13074,gerrit-common_src_main_java_com_google_gerrit_common_data_GitWebType.java,,,,"public static com.google.gerrit.common.data.GitWebType fromName(final java.lang.String name) { if (((name == null) || (name.isEmpty())) || (name.equalsIgnoreCase(""gitweb""))) { return new com.google.gerrit.common.data.GitWebType(""GitWeb"", ""?p=${project}.git;a=commit;h=${commit}"", ""?p=${project}.git;a=summary"", ""?p=${project}.git;a=shortlog;h=${branch}""); } else if (name.equalsIgnoreCase(""cgit"")) { return new com.google.gerrit.common.data.GitWebType(""CGit"", ""${project}/commit/?id=${commit}"", ""${project}/summary"", ""${project}/log/?h=${branch}""); } else if (name.equalsIgnoreCase(""custom"")) { return new com.google.gerrit.common.data.GitWebType(""Custom"", """", """", """"); } return null; }",d108aa70b6d61dcbc20b0732eb6838244f7069d8,,fromName(java.lang.String),2,2,"public static com.google.gerrit.common.data.GitWebType fromName(final java.lang.String name) { final com.google.gerrit.common.data.GitWebType type; if (((name == null) || (name.isEmpty())) || (name.equalsIgnoreCase(""gitweb""))) { type = new com.google.gerrit.common.data.GitWebType(); type.setProject(""?p=${project}.git;a=summary""); type.setRevision(""?p=${project}.git;a=commit;h=${commit}""); type.setBranch(""?p=${project}.git;a=shortlog;h=${branch}""); } else if (name.equalsIgnoreCase(""cgit"")) { type = new com.google.gerrit.common.data.GitWebType(); type.setProject(""${project}/summary""); type.setRevision(""${project}/commit/?id=${commit}""); type.setBranch(""${project}/log/?h=${branch}""); } else if (name.equalsIgnoreCase(""custom"")) { type = new com.google.gerrit.common.data.GitWebType(); } else { type = null; } return type; }",de34c032988aa04a3fad29da05c2692913e0fe56,fromName(java.lang.String),138201,230,268
60065,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,89.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.lang.String getSiteBContent() { com.google.gwt.user.client.Window.alert(cmB.getValue()); return cmB.getValue(); },9b4b41b2018ddffc78dc4cb9da1e42717ad36ba5,,getSiteBContent(),11,33,public java.lang.String getSideBContent() { return cmB.getValue(); },18cbb954a8b9e528ecba2c739ce37fb81023b68a,getSideBContent(),160014,38,19
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroup> get(java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroup.Id> keys) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },c613c546199fe8b1611a9584c42a77534d3c0cd8,,get(java.lang.Iterable),3,3,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroup> get(java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroup.Id> keys) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },9e30ea42565ffbe3a5a8eedb32d0cfdea9ced77c,get(java.lang.Iterable),205049,110,97
50500,src_main_java_com_googlesource_gerrit_plugins_replication_PushResultProcessing.java,9.0,"@java.lang.Override void onOneNodeReplicated(java.lang.String project, java.lang.String ref, org.eclipse.jgit.transport.URIish uri, com.googlesource.gerrit.plugins.replication.ReplicationState.RefPushResult status) { }",0a4bd2bc1c7ac5d24ab966cc5e6ddd770994d2b1,"@java.lang.Override void onOneNodeReplicated(java.lang.String project, java.lang.String ref, java.lang.String node, com.googlesource.gerrit.plugins.replication.ReplicationState.RefPushResult status) { }",d71084c3abfd2046d79925432e8ab0d13980b7df,"onOneNodeReplicated(java.lang.String,java.lang.String,org.eclipse.jgit.transport.URIish,com.googlesource.gerrit.plugins.replication.ReplicationState.RefPushResult)","onOneNodeReplicated(java.lang.String,java.lang.String,java.lang.String,com.googlesource.gerrit.plugins.replication.ReplicationState.RefPushResult)",2,7,"@java.lang.Override void onOneNodeReplicated(java.lang.String project, java.lang.String ref, org.eclipse.jgit.transport.URIish uri, com.googlesource.gerrit.plugins.replication.ReplicationState.RefPushResult status) { }",0a4bd2bc1c7ac5d24ab966cc5e6ddd770994d2b1,"onOneNodeReplicated(java.lang.String,java.lang.String,org.eclipse.jgit.transport.URIish,com.googlesource.gerrit.plugins.replication.ReplicationState.RefPushResult)",67637,55,61
148032,java_com_google_gerrit_server_restapi_project_BranchesCollection.java,2.0,"@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic() ? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }",e162ea532751db60eb8f160a10dc02f23e4d590d,"@java.lang.Override public com.google.gerrit.server.restapi.project.BranchResource parse(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic() ? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.restapi.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }",c0834bc6cc0dd66a3332d8113320cb04eb3623b4,"parse(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)","parse(com.google.gerrit.server.restapi.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)",17,3,"@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic() ? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }",e162ea532751db60eb8f160a10dc02f23e4d590d,"parse(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)",215444,358,349
140535,java_com_google_gerrit_server_patchlib_PatchListKey.java,7.0,"public static com.google.gerrit.server.patch.PatchListKey againstParentNum(int parentNum, org.eclipse.jgit.lib.AnyObjectId newId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws) { return new com.google.gerrit.server.patch.PatchListKey(parentNum, newId, ws, com.google.gerrit.server.patch.PatchListKey.Algorithm.OPTIMIZED_DIFF); }",2006dae220a03705547802de72e0af22cad19a61,"public static com.google.gerrit.server.patchlib.PatchListKey againstParentNum(int parentNum, org.eclipse.jgit.lib.AnyObjectId newId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws) { return new com.google.gerrit.server.patchlib.PatchListKey(parentNum, newId, ws, com.google.gerrit.server.patchlib.PatchListKey.Algorithm.OPTIMIZED_DIFF); }",53d3b825187a53f35abaa6824ca56a918b9cef23,"againstParentNum(int,org.eclipse.jgit.lib.AnyObjectId,com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace)","againstParentNum(int,org.eclipse.jgit.lib.AnyObjectId,com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace)",11,7,"public static com.google.gerrit.server.diff.PatchListKey againstParentNum(int parentNum, org.eclipse.jgit.lib.AnyObjectId newId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws) { return new com.google.gerrit.server.diff.PatchListKey(parentNum, newId, ws, com.google.gerrit.server.diff.PatchListKey.Algorithm.OPTIMIZED_DIFF); }",490dffc2960f8ca8976bd2afbced17a6c089cfee,"againstParentNum(int,org.eclipse.jgit.lib.AnyObjectId,com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace)",15549,113,110
66674,github-plugin_src_main_java_com_googlesource_gerrit_plugins_github_GitHubOAuthServiceProvider.java,,,,"@java.lang.Override public java.lang.String getAuthorizationUrl(com.google.gerrit.extensions.auth.oauth.OAuthToken requestToken) { return oauth.getAuthorizationUrl(oauth.getScope(com.google.common.collect.Sets.newHashSet(config.getDefaultScopes())), null); }",1fd0cde52c8f4544b4fbe074cc4414ceac4dd1e1,,getAuthorizationUrl(com.google.gerrit.extensions.auth.oauth.OAuthToken),3,1,"@java.lang.Override public java.lang.String getAuthorizationUrl() { return oauth.getAuthorizationUrl(oauth.getScope(com.google.common.collect.Sets.newHashSet(config.getDefaultScopes())), null); }",7d90a5333641d68e51ec72413ba4a0211d8a9be1,getAuthorizationUrl(),13414,67,49
34741,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_SetAccountCommand.java,,,,"private void deleteSshKeys(final java.lang.String readDeleteKey, final com.google.gerrit.reviewdb.client.Account account) throws com.google.gwtorm.server.OrmException { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountSshKey> keys = db.accountSshKeys().byAccount(account.getId()); if (readDeleteKey.equals(""ALL"")) { db.accountSshKeys().delete(keys); } else { for (com.google.gerrit.reviewdb.client.AccountSshKey accountSshKey : keys) { if (accountSshKey.getSshPublicKey().equals(readDeleteKey)) { db.accountSshKeys().delete(java.util.Collections.singleton(accountSshKey)); } } } sshKeyCache.evict(account.getUserName()); }",650a387e3e52fc72c35293a87727acb0e4243d3e,,"deleteSshKeys(java.lang.String,com.google.gerrit.reviewdb.client.Account)",5,3,"private void deleteSshKeys(final java.util.List<java.lang.String> keys, final com.google.gerrit.reviewdb.client.Account account) throws com.google.gwtorm.server.OrmException { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountSshKey> allKeys = db.accountSshKeys().byAccount(account.getId()); if (keys.contains(""ALL"")) { db.accountSshKeys().delete(allKeys); } else { java.util.List<com.google.gerrit.reviewdb.client.AccountSshKey> accountKeys = new java.util.ArrayList<com.google.gerrit.reviewdb.client.AccountSshKey>(); for (java.lang.String key : keys) { for (com.google.gerrit.reviewdb.client.AccountSshKey accountSshKey : allKeys) { if ((key.trim().equals(accountSshKey.getSshPublicKey())) || (accountSshKey.getComment().trim().equals(key))) { accountKeys.add(accountSshKey); } } } db.accountSshKeys().delete(accountKeys); } }",2230dbe0429e1ca3e336299fd22fb4612f3b5c42,"deleteSshKeys(java.util.List,com.google.gerrit.reviewdb.client.Account)",70833,190,265
89872,gerrit-server_src_test_java_com_google_gerrit_server_notedb_ChangeNotesTest.java,7.0,"@org.junit.Test public void approvalsMultiplePatchSets() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.putApproval(""Code-Review"", ((short) (-1))); update.commit(); com.google.gerrit.reviewdb.client.PatchSet.Id ps1 = c.currentPatchSetId(); incrementPatchSet(c); update = newUpdate(c, changeOwner); update.putApproval(""Code-Review"", ((short) (1))); update.commit(); com.google.gerrit.reviewdb.client.PatchSet.Id ps2 = c.currentPatchSetId(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSetApproval> psas = notes.getApprovals(); assertThat(psas).hasSize(2); com.google.gerrit.reviewdb.client.PatchSetApproval psa1 = com.google.common.collect.Iterables.getOnlyElement(psas.get(ps1)); assertThat(psa1.getPatchSetId()).isEqualTo(ps1); assertThat(psa1.getAccountId().get()).isEqualTo(1); assertThat(psa1.getLabel()).isEqualTo(""Code-Review""); assertThat(psa1.getValue()).isEqualTo(((short) (-1))); assertThat(psa1.getGranted()).isEqualTo(truncate(after(c, 2000))); com.google.gerrit.reviewdb.client.PatchSetApproval psa2 = com.google.common.collect.Iterables.getOnlyElement(psas.get(ps2)); assertThat(psa2.getPatchSetId()).isEqualTo(ps2); assertThat(psa2.getAccountId().get()).isEqualTo(1); assertThat(psa2.getLabel()).isEqualTo(""Code-Review""); assertThat(psa2.getValue()).isEqualTo(((short) (+1))); assertThat(psa2.getGranted()).isEqualTo(truncate(after(c, 3000))); }",ffa0e8034b19d26b1a2531bb7fc829f07b8efc7a,"@org.junit.Test public void approvalsMultiplePatchSets() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.putApproval(""Code-Review"", ((short) (-1))); update.commit(); com.google.gerrit.reviewdb.client.PatchSet.Id ps1 = c.currentPatchSetId(); incrementPatchSet(c); update = newUpdate(c, changeOwner); update.putApproval(""Code-Review"", ((short) (1))); update.commit(); com.google.gerrit.reviewdb.client.PatchSet.Id ps2 = c.currentPatchSetId(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSetApproval> psas = notes.getApprovals(); assertThat(psas).hasSize(2); com.google.gerrit.reviewdb.client.PatchSetApproval psa1 = com.google.common.collect.Iterables.getOnlyElement(psas.get(ps1)); assertThat(psa1.getPatchSetId()).isEqualTo(ps1); assertThat(psa1.getAccountId().get()).isEqualTo(1); assertThat(psa1.getLabel()).isEqualTo(""Code-Review""); assertThat(psa1.getValue()).isEqualTo(((short) (-1))); assertThat(psa1.getGranted()).isEqualTo(truncate(after(c, 3000))); com.google.gerrit.reviewdb.client.PatchSetApproval psa2 = com.google.common.collect.Iterables.getOnlyElement(psas.get(ps2)); assertThat(psa2.getPatchSetId()).isEqualTo(ps2); assertThat(psa2.getAccountId().get()).isEqualTo(1); assertThat(psa2.getLabel()).isEqualTo(""Code-Review""); assertThat(psa2.getValue()).isEqualTo(((short) (+1))); assertThat(psa2.getGranted()).isEqualTo(truncate(after(c, 5000))); }",1dd8c9eef54bea269436cf0075618a508ec269bc,approvalsMultiplePatchSets(),approvalsMultiplePatchSets(),14,9,"@org.junit.Test public void approvalsMultiplePatchSets() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.putApproval(""Code-Review"", ((short) (-1))); update.commit(); com.google.gerrit.reviewdb.client.PatchSet.Id ps1 = c.currentPatchSetId(); incrementPatchSet(c); update = newUpdate(c, changeOwner); update.putApproval(""Code-Review"", ((short) (1))); update.commit(); com.google.gerrit.reviewdb.client.PatchSet.Id ps2 = c.currentPatchSetId(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSetApproval> psas = notes.getApprovals(); assertThat(psas).hasSize(2); com.google.gerrit.reviewdb.client.PatchSetApproval psa1 = com.google.common.collect.Iterables.getOnlyElement(psas.get(ps1)); assertThat(psa1.getPatchSetId()).isEqualTo(ps1); assertThat(psa1.getAccountId().get()).isEqualTo(1); assertThat(psa1.getLabel()).isEqualTo(""Code-Review""); assertThat(psa1.getValue()).isEqualTo(((short) (-1))); assertThat(psa1.getGranted()).isEqualTo(truncate(after(c, 2000))); com.google.gerrit.reviewdb.client.PatchSetApproval psa2 = com.google.common.collect.Iterables.getOnlyElement(psas.get(ps2)); assertThat(psa2.getPatchSetId()).isEqualTo(ps2); assertThat(psa2.getAccountId().get()).isEqualTo(1); assertThat(psa2.getLabel()).isEqualTo(""Code-Review""); assertThat(psa2.getValue()).isEqualTo(((short) (+1))); assertThat(psa2.getGranted()).isEqualTo(truncate(after(c, 4000))); }",9c8d5d9385ee1704c09773d4dbc79c8170fad76c,approvalsMultiplePatchSets(),206610,494,494
21950,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_account_GroupAdminServiceImpl.java,15.0,"public com.google.gerrit.common.data.GroupDetail run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.httpd.rpc.account.Failure, com.google.gerrit.server.account.NoSuchGroupException, com.google.gwtorm.client.OrmException { final com.google.gerrit.server.account.GroupControl control = groupControlFactory.validateFor(groupId); if ((control.getAccountGroup().getType()) != (AccountGroup.Type.INTERNAL)) { throw new com.google.gerrit.httpd.rpc.account.Failure(new com.google.gerrit.common.errors.NameAlreadyUsedException()); } final com.google.gerrit.reviewdb.Account a = findAccount(nameOrEmail); if (!(a.isActive())) { throw new com.google.gerrit.httpd.rpc.account.Failure(new com.google.gerrit.common.errors.InactiveAccountException(a.getFullName())); } if (!(control.canAdd(a.getId()))) { throw new com.google.gerrit.httpd.rpc.account.Failure(new com.google.gerrit.common.errors.NoSuchEntityException()); } final com.google.gerrit.reviewdb.AccountGroupMember.Key key = new com.google.gerrit.reviewdb.AccountGroupMember.Key(a.getId(), groupId); com.google.gerrit.reviewdb.AccountGroupMember m = db.accountGroupMembers().get(key); if (m == null) { m = new com.google.gerrit.reviewdb.AccountGroupMember(key); db.accountGroupMembersAudit().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.AccountGroupMemberAudit(m, getAccountId()))); db.accountGroupMembers().insert(java.util.Collections.singleton(m)); accountCache.evict(m.getAccountId()); } return groupDetailFactory.create(groupId).call(); }",b1e0e4606b1383a226533641d93caf31eb92353b,"public com.google.gerrit.common.data.GroupDetail run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.httpd.rpc.account.Failure, com.google.gerrit.server.account.NoSuchGroupException, com.google.gwtorm.client.OrmException { final com.google.gerrit.server.account.GroupControl control = groupControlFactory.validateFor(groupId); if ((control.getAccountGroup().getType()) != (AccountGroup.Type.INTERNAL)) { throw new com.google.gerrit.httpd.rpc.account.Failure(new com.google.gerrit.common.errors.NameAlreadyUsedException()); } final com.google.gerrit.reviewdb.Account a = findAccount(nameOrEmail); if (!(a.isActive())) { throw new com.google.gerrit.httpd.rpc.account.Failure(new com.google.gerrit.common.errors.InactiveAccountException(a.getFullName())); } if (!(control.canAddMember(a.getId()))) { throw new com.google.gerrit.httpd.rpc.account.Failure(new com.google.gerrit.common.errors.NoSuchEntityException()); } final com.google.gerrit.reviewdb.AccountGroupMember.Key key = new com.google.gerrit.reviewdb.AccountGroupMember.Key(a.getId(), groupId); com.google.gerrit.reviewdb.AccountGroupMember m = db.accountGroupMembers().get(key); if (m == null) { m = new com.google.gerrit.reviewdb.AccountGroupMember(key); db.accountGroupMembersAudit().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.AccountGroupMemberAudit(m, getAccountId()))); db.accountGroupMembers().insert(java.util.Collections.singleton(m)); accountCache.evict(m.getAccountId()); } return groupDetailFactory.create(groupId).call(); }",8c6f7cfa88cad69fdb27c6b8e6df6986f5be542a,run(com.google.gerrit.reviewdb.ReviewDb),run(com.google.gerrit.reviewdb.ReviewDb),9,14,"public com.google.gerrit.common.data.GroupDetail run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gerrit.httpd.rpc.account.Failure, com.google.gwtorm.client.OrmException { final com.google.gerrit.server.account.GroupControl control = groupControlFactory.validateFor(groupId); if ((control.getAccountGroup().getType()) != (AccountGroup.Type.INTERNAL)) { throw new com.google.gerrit.httpd.rpc.account.Failure(new com.google.gerrit.common.errors.NameAlreadyUsedException()); } final com.google.gerrit.reviewdb.Account a = findAccount(nameOrEmail); if (!(a.isActive())) { throw new com.google.gerrit.httpd.rpc.account.Failure(new com.google.gerrit.common.errors.InactiveAccountException(a.getFullName())); } if (!(control.canAddMember(a.getId()))) { throw new com.google.gerrit.httpd.rpc.account.Failure(new com.google.gerrit.common.errors.NoSuchEntityException()); } final com.google.gerrit.reviewdb.AccountGroupMember.Key key = new com.google.gerrit.reviewdb.AccountGroupMember.Key(a.getId(), groupId); com.google.gerrit.reviewdb.AccountGroupMember m = db.accountGroupMembers().get(key); if (m == null) { m = new com.google.gerrit.reviewdb.AccountGroupMember(key); db.accountGroupMembersAudit().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.AccountGroupMemberAudit(m, getAccountId()))); db.accountGroupMembers().insert(java.util.Collections.singleton(m)); accountCache.evict(m.getAccountId()); } return groupDetailFactory.create(groupId).call(); }",7c6be83a97e7238cfc1c61e1b4e226633b50f523,run(com.google.gerrit.reviewdb.ReviewDb),189778,444,444
66674,github-oauth_src_main_java_com_googlesource_gerrit_plugins_github_oauth_OAuthProtocol.java,23.0,"private java.lang.String getScope(java.util.Set<com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope> scopes) { if ((scopes.size()) <= 0) { return """"; } java.lang.StringBuilder out = new java.lang.StringBuilder(); for (com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope scope : scopes) { if ((out.length()) > 0) { out.append("",""); } out.append(scope.getValue()); } return (""&"" + ""scope="") + (out.toString()); }",266e784b9f49a8300ea76b4d074b794bf4b1b497,"private java.lang.String getScope(java.util.Set<com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope> scopes) { if ((scopes.size()) <= 0) { return """"; } java.lang.StringBuilder out = new java.lang.StringBuilder(); for (com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope scope : scopes) { if ((out.length()) > 0) { out.append("",""); } out.append(scope.getValue()); } return out.toString(); }",b0cb9bf6fcbbbd63473c02257e08d5ec934ddee7,getScope(java.util.Set),getScope(java.util.Set),3,23,"public java.lang.String getScope(java.util.Set<com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope> scopes) { if ((scopes.size()) <= 0) { return """"; } java.lang.StringBuilder out = new java.lang.StringBuilder(); for (com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope scope : scopes) { if ((out.length()) > 0) { out.append("",""); } out.append(scope.getValue()); } return out.toString(); }",aea55b3d50c564aedfdc520a581f8bacd15043d5,getScope(java.util.Set),13432,122,122
58820,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_SetAccountCommand.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void putPreferred(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { java.util.List<EmailInfo> emails = getEmails.apply(rsrc); for (EmailInfo e : emails) { if (e.email.equals(email)) { putPreferred.apply(new com.google.gerrit.server.account.AccountResource.Email(user, email), null); } } }",38cf06c0344616509977b84aa8ff5dc2d30de401,,putPreferred(java.lang.String),12,2,"private void putPreferred(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { for (EmailInfo e : getEmails.apply(rsrc)) { if (e.email.equals(email)) { putPreferred.apply(new com.google.gerrit.server.account.AccountResource.Email(user, email), null); return; } } stderr.println((""preferred email not found: "" + email)); }",9d3c084493a2d3304d05a8d99c61de39fc993706,putPreferred(java.lang.String),11073,113,116
77763,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_AbstractSubmit.java,24.0,"protected void assertRebase(org.eclipse.jgit.junit.TestRepository<?> testRepo, boolean contentMerge) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo = testRepo.getRepository(); org.eclipse.jgit.revwalk.RevCommit localHead = getHead(repo); org.eclipse.jgit.revwalk.RevCommit remoteHead = getRemoteHead(); assert_().withFailureMessage(java.lang.String.format(""%s not equal %s"", localHead.name(), remoteHead.name())).that(localHead.getId()).isNotEqualTo(remoteHead.getId()); assertThat(remoteHead.getParentCount()).isEqualTo(1); if (!contentMerge) { assertThat(getLatestRemoteDiff()).isEqualTo(getLatestDiff(repo)); } assertThat(remoteHead.getShortMessage()).isEqualTo(localHead.getShortMessage()); }",76d8ee78db4ce8bf5aa9fd53fa0481c9f1092231,"protected void assertRebase(org.eclipse.jgit.junit.TestRepository<?> testRepo, boolean contentMerge) throws java.lang.Exception { org.eclipse.jgit.lib.Repository repo = testRepo.getRepository(); org.eclipse.jgit.revwalk.RevCommit localHead = getHead(repo); org.eclipse.jgit.revwalk.RevCommit remoteHead = getRemoteHead(); assert_().withFailureMessage(java.lang.String.format(""%s not equal %s"", localHead.name(), remoteHead.name())).that(localHead.getId()).isNotEqualTo(remoteHead.getId()); assertThat(remoteHead.getParentCount()).isEqualTo(1); if (!contentMerge) { assertThat(getLatestRemoteDiff()).isEqualTo(getLatestDiff(repo)); } assertThat(remoteHead.getShortMessage()).isEqualTo(localHead.getShortMessage()); }",82bc825a4a063592c5b4bc4d9c366cf11d4a1b2c,"assertRebase(org.eclipse.jgit.junit.TestRepository,boolean)","assertRebase(org.eclipse.jgit.junit.TestRepository,boolean)",6,20,"protected void assertRebase(org.eclipse.jgit.junit.TestRepository<?> testRepo, boolean contentMerge) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo = testRepo.getRepository(); org.eclipse.jgit.revwalk.RevCommit localHead = getHead(repo); org.eclipse.jgit.revwalk.RevCommit remoteHead = getRemoteHead(); assert_().withFailureMessage(java.lang.String.format(""%s not equal %s"", localHead.name(), remoteHead.name())).that(localHead.getId()).isNotEqualTo(remoteHead.getId()); assertThat(remoteHead.getParentCount()).isEqualTo(1); if (!contentMerge) { assertThat(getLatestRemoteDiff()).isEqualTo(getLatestDiff(repo)); } assertThat(remoteHead.getShortMessage()).isEqualTo(localHead.getShortMessage()); }",76d8ee78db4ce8bf5aa9fd53fa0481c9f1092231,"assertRebase(org.eclipse.jgit.junit.TestRepository,boolean)",38154,187,187
61470,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_project_LabelTypeIT.java,8.0,"private void doAssertApproval(int expected, ChangeInfo c) { LabelInfo cr = c.labels.get(""Code-Review""); assertEquals((-1), ((int) (cr.defaultValue))); assertEquals(1, cr.all.size()); assertEquals(""Administrator"", cr.all.get(0).name); assertEquals(expected, cr.all.get(0).value.intValue()); }",21266c9ad0e4f691dda9da0a5b189a1f30c5a69b,"private void doAssertApproval(int expected, ChangeInfo c) { LabelInfo cr = c.labels.get(""Code-Review""); assertThat(((int) (cr.defaultValue))).isEqualTo((-1)); assertThat(cr.all.size()).isEqualTo(1); assertThat(cr.all.get(0).name).isEqualTo(""Administrator""); assertThat(cr.all.get(0).value.intValue()).isEqualTo(expected); }",810ac35a8e1cba7f778d1b1c762309204fe5b882,"doAssertApproval(int,com.google.gerrit.extensions.common.ChangeInfo)","doAssertApproval(int,com.google.gerrit.extensions.common.ChangeInfo)",6,8,"private void doAssertApproval(int expected, ChangeInfo c) { LabelInfo cr = c.labels.get(""Code-Review""); assertThat(((int) (cr.defaultValue))).isEqualTo((-1)); assertThat(cr.all).hasSize(1); assertThat(cr.all.get(0).name).isEqualTo(""Administrator""); assertThat(cr.all.get(0).value.intValue()).isEqualTo(expected); }",7495d8961f9443dc44a044530a79b914e6cc27c9,"doAssertApproval(int,com.google.gerrit.extensions.common.ChangeInfo)",23748,86,84
92290,src_main_java_com_googlesource_gerrit_plugins_its_base_its_ItsConfig.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private <T extends java.lang.Enum<?>> T getConfigEnum(java.lang.String section, java.lang.String subsection, java.lang.String key, T defaultValue) { return getCurrentPluginConfig().getEnum(key, gerritConfig.getEnum(section, subsection, key, defaultValue)); }",f4942eadbb240db4209dd09d6c32c4d73984b046,,"getConfigEnum(java.lang.String,java.lang.String,java.lang.String,java.lang.Enum)",7,3,"private <T extends java.lang.Enum<?>> T getPluginConfigEnum(java.lang.String key, T defaultValue) { return getCurrentPluginConfig().getEnum(key, gerritConfig.getEnum(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.PLUGIN, pluginName, key, defaultValue)); }",1368cf4d1ee7a5eec0b37856d30bf7287c3eaa30,"getPluginConfigEnum(java.lang.String,java.lang.Enum)",51867,69,75
62851,gerrit-gwtui_src_main_java_com_google_gerrit_client_editor_EditScreen.java,3.0,"@com.google.gwt.uibinder.client.UiHandler(""cancel"") void onCancel(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(revision.getParentKey())); }",ff1a2be205198bbf14a4d2d884339119728b951f,"@com.google.gwt.uibinder.client.UiHandler(""cancel"") void onCancel(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if ((cm.isClean(generation)) || (com.google.gwt.user.client.Window.confirm(EditConstants.I.discardUnsavedChanges()))) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(revision.getParentKey())); } }",dff2f2d8f9fe7f8a93866a5eb6b2cef69dfe29fb,onCancel(com.google.gwt.event.dom.client.ClickEvent),onCancel(com.google.gwt.event.dom.client.ClickEvent),4,5,"@com.google.gwt.uibinder.client.UiHandler(""cancel"") void onCancel(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if ((cm.isClean(generation)) || (com.google.gwt.user.client.Window.confirm(EditConstants.I.cancelUnsavedChanges()))) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(revision.getParentKey())); } }",89e2a72bbc920a108388bd630840e41153de9cba,onCancel(com.google.gwt.event.dom.client.ClickEvent),69060,121,121
74403,gerrit-server_src_main_java_com_google_gerrit_server_PatchLineCommentsUtil.java,29.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.Iterable<org.eclipse.jgit.lib.Ref> getDraftRefs(org.eclipse.jgit.lib.Repository repo, final com.google.gerrit.reviewdb.client.Change.Id changeId) throws java.io.IOException { final java.lang.String suffix = ""/"" + (changeId.get()); return com.google.common.collect.Iterables.filter(repo.getRefDatabase().getRefs(RefNames.REFS_DRAFT_COMMENTS).values(), new com.google.common.base.Predicate<org.eclipse.jgit.lib.Ref>() { @java.lang.Override public boolean apply(org.eclipse.jgit.lib.Ref input) { return input.getName().endsWith(suffix); } }); }",8730f90dfe2d5a45a61817080d2f52b012b400a0,,"getDraftRefs(org.eclipse.jgit.lib.Repository,com.google.gerrit.reviewdb.client.Change$Id)",5,19,"private java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getDraftRefs(org.eclipse.jgit.lib.Repository repo, final com.google.gerrit.reviewdb.client.Change.Id changeId) throws java.io.IOException { final java.lang.String suffix = ""/"" + (changeId.get()); return com.google.common.collect.Maps.filterKeys(repo.getRefDatabase().getRefs(RefNames.REFS_DRAFT_COMMENTS), new com.google.common.base.Predicate<java.lang.String>() { @java.lang.Override public boolean apply(java.lang.String input) { return input.endsWith(suffix); } }); }",2dfcf4782c29e4dc13f4021f3e8b57e870334d90,"getDraftRefs(org.eclipse.jgit.lib.Repository,com.google.gerrit.reviewdb.client.Change$Id)",105114,172,165
108890,src_main_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_IndexChangeRestApiServlet.java,1.0,"private void process(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp, java.lang.String operation) { rsp.setContentType(""text/plain""); rsp.setCharacterEncoding(""UTF-8""); java.lang.String path = req.getPathInfo(); java.lang.String changeId = path.substring(((path.lastIndexOf('/')) + 1)); com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.parse(changeId); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true); index(id, operation); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.error(""Unable to update change index"", e); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = ""Error trying to find a change \n""; com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, msg); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug(msg, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }",c55128a3d8ee9d461012a21c821ff161cf7cddbc,"private void process(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp, java.lang.String operation) { rsp.setContentType(""text/plain""); rsp.setCharacterEncoding(""UTF-8""); java.lang.String path = req.getPathInfo(); java.lang.String changeId = path.substring(((path.lastIndexOf('/')) + 1)); com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.parse(changeId); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true); index(id, operation); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.error(""Unable to update change index"", e); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = ""Error trying to find a change \n""; sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, msg); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug(msg, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }",02b398cf86fdbc5ede054af8c91ce8918a179511,"process(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)","process(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)",6,1,@java.lang.Override Change.Id parse(java.lang.String id) { return Change.Id.parse(id); },bc69abcf096197bd5db2aa1537a41d1e40c972aa,parse(java.lang.String),175523,374,29
44440,gerrit-server_src_main_java_com_google_gerrit_server_project_ProjectState.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.google.gerrit.server.project.ThemeInfo getTheme() { com.google.gerrit.server.project.ThemeInfo theme = this.theme; if (theme == null) { synchronized(this) { if ((this.theme) == null) { theme = loadTheme(); this.theme = theme; } } } if (theme == (ThemeInfo.INHERIT)) { com.google.gerrit.server.project.ProjectState parent = com.google.common.collect.Iterables.getFirst(parents(), null); return parent != null ? parent.getTheme() : null; } return theme; }",a0aaefae98382f16e6a2d2a5f9b6be654cdd74d6,,getTheme(),4,23,"public com.google.gerrit.server.project.ThemeInfo getTheme() { com.google.gerrit.server.project.ThemeInfo theme = this.theme; if (theme == null) { synchronized(this) { theme = this.theme; if (theme == null) { theme = loadTheme(); this.theme = theme; } } } if (theme == (ThemeInfo.INHERIT)) { com.google.gerrit.server.project.ProjectState parent = com.google.common.collect.Iterables.getFirst(parents(), null); return parent != null ? parent.getTheme() : null; } return theme; }",cc5b6b5798c8513bc74f3fe70ebca92170c94167,getTheme(),28098,137,139
166630,java_com_google_gerrit_common_data_LabelFunction.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean isMaxValueMandatory() { return requiresMaxValue; },12c75fec2ac00a0503030c4b456906237d8e245c,,isMaxValueMandatory(),7,4,public boolean isMaxValueRequired() { return requiresMaxValue; },3d35b01a47ece5844f48984703a83e4bb3b5b28a,isMaxValueRequired(),114542,12,12
16294,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_ReviewDb.java,18.0,@com.google.gwtorm.client.Relation com.google.gerrit.reviewdb.AccountPatchReviewAccess accountPatchReviews();,e2ce80100f7511237acf6cb6e731b5813d26dddd,@com.google.gwtorm.client.Relation(id = 17) com.google.gerrit.reviewdb.AccountPatchReviewAccess accountPatchReviews();,0b93092e9879377bd73da0f81fbef44a48bcec15,accountPatchReviews(),accountPatchReviews(),2,18,@com.google.gwtorm.client.Relation(id = 18) com.google.gerrit.reviewdb.AccountPatchReviewAccess accountPatchReviews();,e3fed44de24bede5c821e317097f94c3a8becda0,accountPatchReviews(),97504,36,36
109252,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_mail_AddReviewerSenderIT.java,18.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@org.junit.Test public void addReviewerToWipChangeInReviewDbNotifyAllBatch() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isFalse(); addReviewerToWipChangeInReviewDbNotifyAll(batch()); },26b5e79a7ada796a9568a76384a5b8d5af5c2696,,addReviewerToWipChangeInReviewDbNotifyAllBatch(),16,29,@org.junit.Test public void addReviewerToWipChangeInReviewDbNotifyAllBatch() throws java.lang.Exception { addReviewerToWipChangeInReviewDbNotifyAll(batch()); },7c5599830ce2561f17f8229d2908c161e13db3cb,addReviewerToWipChangeInReviewDbNotifyAllBatch(),145690,59,45
52825,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeUpdate.java,,,,"@java.lang.Override protected void onSave(org.eclipse.jgit.lib.CommitBuilder commit) { if (approvals.isEmpty()) { return; } int psId = change.currentPatchSetId().get(); java.lang.StringBuilder msg = new java.lang.StringBuilder().append(""Update patch set "").append(psId).append(""\n\n"").append(com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_PATCH_SET).append("": "").append(psId).append('\n').append(com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_ACCOUNT).append("": "").append(accountId).append('\n'); for (java.util.Map.Entry<java.lang.String, java.lang.Short> e : approvals.entrySet()) { msg.append(com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_VOTE).append("": "").append(e.getKey()).append('=').append(com.google.gerrit.common.data.LabelValue.formatValue(e.getValue())).append('\n'); } commit.setMessage(msg.toString()); }",ead0f49fda5dc826929ce2a1d751119bb1dc8a50,,onSave(org.eclipse.jgit.lib.CommitBuilder),13,4,"@java.lang.Override protected void onSave(org.eclipse.jgit.lib.CommitBuilder commit) { if (approvals.isEmpty()) { return; } int ps = ((psId) != null) ? psId.get() : change.currentPatchSetId().get(); java.lang.StringBuilder msg = new java.lang.StringBuilder(); if ((subject) != null) { msg.append(subject); } else { msg.append(""Update patch set "").append(ps); } msg.append(""\n\n""); com.google.gerrit.server.notedb.ChangeUpdate.addFooter(msg, com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_PATCH_SET, ps); for (java.util.Map.Entry<java.lang.String, java.lang.Short> e : approvals.entrySet()) { com.google.gerrit.common.data.LabelType lt = labelTypes.byLabel(e.getKey()); if (lt != null) { com.google.gerrit.server.notedb.ChangeUpdate.addFooter(msg, com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_LABEL, new com.google.gerrit.server.util.LabelVote(lt.getName(), e.getValue()).formatWithEquals()); } } commit.setMessage(msg.toString()); }",50722e56852aaa5d5a7c2ebcf9726879c36b6f0a,onSave(org.eclipse.jgit.lib.CommitBuilder),194699,266,306
35785,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_CommitMessageBlock.java,0.0,"public void display(final java.lang.String commitMessage) { com.google.gwtexpui.safehtml.client.SafeHtml msg = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().append(commitMessage); msg = msg.linkify(); msg = com.google.gerrit.client.ui.CommentLinkProcessor.apply(msg); msg = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().openElement(""p"").append(msg).closeElement(""p""); msg = msg.replaceAll(""\n\n"", ""</p><p>""); msg = msg.replaceAll(""\n"", ""<br />""); com.google.gwtexpui.safehtml.client.SafeHtml.set(description, msg); }",a4b0dad4af5561617d155eff85d989325921e833,"public void display(final java.lang.String commitMessage) { java.lang.String commitSummary = """"; java.lang.String commitBody = """"; java.lang.String[] splitCommitMessage = commitMessage.split(""\n"", 2); commitSummary = splitCommitMessage[0]; commitBody = com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(splitCommitMessage[1]); if (commitBody.trim().isEmpty()) { commitBodyPre.setAttribute(""style"", ""display: none;""); } commitSummaryPre.setInnerText(commitSummary); com.google.gwtexpui.safehtml.client.SafeHtml commitBodyLinkified = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().append(commitBody); commitBodyLinkified = commitBodyLinkified.linkify(); commitBodyLinkified = com.google.gerrit.client.ui.CommentLinkProcessor.apply(commitBodyLinkified); commitBodyPre.setInnerHTML(commitBodyLinkified.asString()); }",a9608e34d320224f5e255a396f7697ca6e2c5461,display(java.lang.String),display(java.lang.String),4,0,"public void display(final java.lang.String commitMessage) { java.lang.String commitSummary = """"; java.lang.String commitBody = """"; java.lang.String[] splitCommitMessage = commitMessage.split(""\n"", 2); commitSummary = splitCommitMessage[0]; commitBody = splitCommitMessage[1]; if (commitBody.trim().isEmpty()) { commitBodyPre.setAttribute(""style"", ""display: none;""); } com.google.gwtexpui.safehtml.client.SafeHtml commitSummaryLinkified = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().append(commitSummary); commitSummaryLinkified = commitSummaryLinkified.linkify(); commitSummaryLinkified = com.google.gerrit.client.ui.CommentLinkProcessor.apply(commitSummaryLinkified); com.google.gwtexpui.safehtml.client.SafeHtml commitBodyLinkified = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().append(commitBody); commitBodyLinkified = commitBodyLinkified.linkify(); commitBodyLinkified = com.google.gerrit.client.ui.CommentLinkProcessor.apply(commitBodyLinkified); commitSummaryPre.setInnerHTML(commitSummaryLinkified.asString()); commitBodyPre.setInnerHTML(commitBodyLinkified.asString()); }",d124908a6c1476ec672cea5ee2d5204d52f4495d,display(java.lang.String),194837,214,282
78821,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_SubmitByRebaseIfNecessaryIT.java,2.0,"@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitWithFastForward() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getId()).isEqualTo(change.getCommit()); assertThat(head.getParent(0)).isEqualTo(oldHead); assertApproved(change.getChangeId()); assertCurrentRevision(change.getChangeId(), 1, head); assertSubmitter(change.getChangeId(), 1); assertPersonEquals(admin.getIdent(), head.getAuthorIdent()); assertPersonEquals(admin.getIdent(), head.getCommitterIdent()); }",0fc459a6ffdfe4af455e507564a32016aa07dd14,"@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitWithFastForward() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getId()).isEqualTo(change.getCommit()); assertThat(head.getParent(0)).isEqualTo(oldHead); assertApproved(change.getChangeId()); assertCurrentRevision(change.getChangeId(), 1, head); assertSubmitter(change.getChangeId(), 1); assertPersonEquals(admin.getIdent(), head.getAuthorIdent()); assertPersonEquals(admin.getIdent(), head.getCommitterIdent()); assertRefUpdatedEvents(oldHead, head); assertChangeMergedEvents(1); }",221d598d484e9e8bb853495482c49a823d1ee727,submitWithFastForward(),submitWithFastForward(),6,2,"@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitWithFastForward() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getId()).isEqualTo(change.getCommit()); assertThat(head.getParent(0)).isEqualTo(oldHead); assertApproved(change.getChangeId()); assertCurrentRevision(change.getChangeId(), 1, head); assertSubmitter(change.getChangeId(), 1); assertPersonEquals(admin.getIdent(), head.getAuthorIdent()); assertPersonEquals(admin.getIdent(), head.getCommitterIdent()); assertRefUpdatedEvents(oldHead, head); assertChangeMergedEvents(change.getChangeId(), head.name()); }",076912d0d284741854dac6149e42704ad882f7d3,submitWithFastForward(),61838,226,236
76484,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_Header.java,1.0,"@java.lang.Override protected void onLoad() { com.google.gerrit.client.diff.DiffApi.list(patchSetId, base, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo> result) { com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.FileInfo> files = result.values(); com.google.gerrit.client.info.FileInfo.sortFileInfoByPath(files); fileNumber.setInnerText(java.lang.Integer.toString(((com.google.gerrit.client.rpc.Natives.asList(files).indexOf(result.get(path))) + 1))); fileCount.setInnerText(java.lang.Integer.toString(files.length())); int index = 0; for (int i = 0; i < (files.length()); i++) { if (path.equals(files.get(i).path())) { index = i; break; } } com.google.gerrit.client.info.FileInfo nextInfo = (index == ((files.length()) - 1)) ? null : files.get((index + 1)); com.google.gwtexpui.globalkey.client.KeyCommand p = setupNav(prev, '[', PatchUtil.C.previousFileHelp(), (index == 0 ? null : files.get((index - 1)))); com.google.gwtexpui.globalkey.client.KeyCommand n = setupNav(next, ']', PatchUtil.C.nextFileHelp(), nextInfo); if ((p != null) && (n != null)) { keys.pair(p, n); } nextPath = (nextInfo != null) ? nextInfo.path() : null; } }); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.changes.ChangeApi.revision(patchSetId).view(""files"").addParameterTrue(""reviewed"").get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { boolean b = com.google.gerrit.client.rpc.Natives.asList(result).contains(path); reviewed.setValue(b, false); if ((!b) && ((reviewedState) == (com.google.gerrit.client.diff.Header.ReviewedState.AUTO_REVIEW))) { postAutoReviewed(); } reviewedState = com.google.gerrit.client.diff.Header.ReviewedState.LOADED; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }",e7e3932b2ce4b83c3a2a2a78ccb70cd1503b19c9,"@java.lang.Override protected void onLoad() { com.google.gerrit.client.diff.DiffApi.list(patchSetId, base, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo> result) { files = result.values(); com.google.gerrit.client.info.FileInfo.sortFileInfoByPath(files); fileNumber.setInnerText(java.lang.Integer.toString(((com.google.gerrit.client.rpc.Natives.asList(files).indexOf(result.get(path))) + 1))); fileCount.setInnerText(java.lang.Integer.toString(files.length())); currIndex = 0; for (int i = 0; i < (files.length()); i++) { if (path.equals(files.get(i).path())) { currIndex = i; break; } } setupPrevNextFiles(); } }); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.changes.ChangeApi.revision(patchSetId).view(""files"").addParameterTrue(""reviewed"").get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { boolean b = com.google.gerrit.client.rpc.Natives.asList(result).contains(path); reviewed.setValue(b, false); if ((!b) && ((reviewedState) == (com.google.gerrit.client.diff.Header.ReviewedState.AUTO_REVIEW))) { postAutoReviewed(); } reviewedState = com.google.gerrit.client.diff.Header.ReviewedState.LOADED; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }",60d3d503b2cc65cf0e37236f54aa4e9e694587dc,onLoad(),onLoad(),10,1,"@java.lang.Override protected void onLoad() { com.google.gerrit.client.diff.DiffApi.list(patchSetId, base, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo> result) { com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.FileInfo> files = result.values(); com.google.gerrit.client.info.FileInfo.sortFileInfoByPath(files); fileNumber.setInnerText(java.lang.Integer.toString(((com.google.gerrit.client.rpc.Natives.asList(files).indexOf(result.get(path))) + 1))); fileCount.setInnerText(java.lang.Integer.toString(files.length())); setupPrevNextFiles(files, findCurrentFileIndex(files)); } }); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.changes.ChangeApi.revision(patchSetId).view(""files"").addParameterTrue(""reviewed"").get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { boolean b = com.google.gerrit.client.rpc.Natives.asList(result).contains(path); reviewed.setValue(b, false); if ((!b) && ((reviewedState) == (com.google.gerrit.client.diff.Header.ReviewedState.AUTO_REVIEW))) { postAutoReviewed(); } reviewedState = com.google.gerrit.client.diff.Header.ReviewedState.LOADED; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }",3bb7b2a2ea07a3d9d7e079a99e4c3f4a4584e7f6,onLoad(),6658,494,485
58933,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_edit_ChangeEditIT.java,5.0,"private java.lang.String urlPublishEdit() { return (((""/changes/"" + (change.getChangeId())) + ""/edits/"") + 0) + ""/publish/""; }",89dfba31374e8f2523e1e3662041a081dab423c0,"private java.lang.String urlPublishEdit() { return (urlDeleteEdit()) + ""/publish/""; }",d3e7ae7efb6843afc50a9491169fe5839ebc9283,urlPublishEdit(),urlPublishEdit(),21,8,"private java.lang.String urlEdit2() { return (""/changes/"" + (change2.getChangeId())) + ""/edit/""; }",886f6df503fc982f21e82eabe29a78596da568d6,urlEdit2(),111031,23,30
148032,java_com_google_gerrit_server_group_DbGroupMemberAuditListener.java,7.0,"@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, addedOn); auditInserts.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts(""Cannot log add accounts to group event performed by user"", me, added, e); } }",eae2ca4d0fbc9bcf9f00b06713225c4b21847f39,"@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, addedOn); auditInserts.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts(""Cannot log add accounts to account event performed by user"", me, added, e); } }",e9d90e309ceedbc1b15d4a8814b77d02a50de6ed,"onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection,java.sql.Timestamp)","onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection,java.sql.Timestamp)",17,7,"@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, addedOn); auditInserts.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts(""Cannot log add accounts to group event performed by user"", me, added, e); } }",eae2ca4d0fbc9bcf9f00b06713225c4b21847f39,"onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection,java.sql.Timestamp)",215412,258,258
102555,gerrit-server_src_main_java_com_google_gerrit_server_git_strategy_CherryPick.java,2.0,"@java.lang.Override protected void updateRepoImpl(com.google.gerrit.server.update.RepoContext ctx) throws com.google.gerrit.server.git.IntegrationException, java.io.IOException { args.rw.parseBody(toMerge); psId = com.google.gerrit.server.ChangeUtil.nextPatchSetId(args.repo, toMerge.change().currentPatchSetId()); org.eclipse.jgit.revwalk.RevCommit mergeTip = args.mergeTip.getCurrentTip(); args.rw.parseBody(mergeTip); java.lang.String cherryPickCmtMsg = args.mergeUtil.createCommitMessageOnSubmit(toMerge, mergeTip); org.eclipse.jgit.lib.PersonIdent committer = args.caller.newCommitterIdent(ctx.getWhen(), args.serverIdent.getTimeZone()); try { newCommit = args.mergeUtil.createCherryPickFromCommit(args.repo, args.inserter, args.mergeTip.getCurrentTip(), toMerge, committer, cherryPickCmtMsg, args.rw, 0, false); } catch (com.google.gerrit.extensions.restapi.MergeConflictException mce) { toMerge.setStatusCode(CommitMergeStatus.PATH_CONFLICT); return; } catch (com.google.gerrit.server.git.MergeIdenticalTreeException mie) { toMerge.setStatusCode(com.google.gerrit.server.git.strategy.CommitMergeStatus.SKIPPED_IDENTICAL_TREE); return; } newCommit = amendGitlink(newCommit); newCommit.copyFrom(toMerge); newCommit.setPatchsetId(psId); newCommit.setStatusCode(CommitMergeStatus.CLEAN_PICK); args.mergeTip.moveTipTo(newCommit, newCommit); args.commitStatus.put(newCommit); ctx.addRefUpdate(new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), newCommit, psId.toRefName())); patchSetInfo = args.patchSetInfoFactory.get(ctx.getRevWalk(), newCommit, psId); }",f3071c625b8b5377ce5e912ce33a7bc22f7d5f99,"@java.lang.Override protected void updateRepoImpl(com.google.gerrit.server.update.RepoContext ctx) throws com.google.gerrit.server.git.IntegrationException, java.io.IOException { args.rw.parseBody(toMerge); psId = com.google.gerrit.server.ChangeUtil.nextPatchSetId(args.repo, toMerge.change().currentPatchSetId()); org.eclipse.jgit.revwalk.RevCommit mergeTip = args.mergeTip.getCurrentTip(); args.rw.parseBody(mergeTip); java.lang.String cherryPickCmtMsg = args.mergeUtil.createCommitMessageOnSubmit(toMerge, mergeTip); org.eclipse.jgit.lib.PersonIdent committer = args.caller.newCommitterIdent(ctx.getWhen(), args.serverIdent.getTimeZone()); try { newCommit = args.mergeUtil.createCherryPickFromCommit(args.inserter, ctx.getRepository().getConfig(), args.mergeTip.getCurrentTip(), toMerge, committer, cherryPickCmtMsg, args.rw, 0, false); } catch (com.google.gerrit.extensions.restapi.MergeConflictException mce) { toMerge.setStatusCode(CommitMergeStatus.PATH_CONFLICT); return; } catch (com.google.gerrit.server.git.MergeIdenticalTreeException mie) { toMerge.setStatusCode(com.google.gerrit.server.git.strategy.CommitMergeStatus.SKIPPED_IDENTICAL_TREE); return; } newCommit = amendGitlink(newCommit); newCommit.copyFrom(toMerge); newCommit.setPatchsetId(psId); newCommit.setStatusCode(CommitMergeStatus.CLEAN_PICK); args.mergeTip.moveTipTo(newCommit, newCommit); args.commitStatus.put(newCommit); ctx.addRefUpdate(new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), newCommit, psId.toRefName())); patchSetInfo = args.patchSetInfoFactory.get(ctx.getRevWalk(), newCommit, psId); }",ca98843f88dab7fda44964bce69e8501f76db9e0,updateRepoImpl(com.google.gerrit.server.update.RepoContext),updateRepoImpl(com.google.gerrit.server.update.RepoContext),4,2,"@java.lang.Override protected void updateRepoImpl(com.google.gerrit.server.update.RepoContext ctx) throws com.google.gerrit.server.git.IntegrationException, java.io.IOException { args.rw.parseBody(toMerge); psId = com.google.gerrit.server.ChangeUtil.nextPatchSetId(ctx.getRepository(), toMerge.change().currentPatchSetId()); org.eclipse.jgit.revwalk.RevCommit mergeTip = args.mergeTip.getCurrentTip(); args.rw.parseBody(mergeTip); java.lang.String cherryPickCmtMsg = args.mergeUtil.createCommitMessageOnSubmit(toMerge, mergeTip); org.eclipse.jgit.lib.PersonIdent committer = args.caller.newCommitterIdent(ctx.getWhen(), args.serverIdent.getTimeZone()); try { newCommit = args.mergeUtil.createCherryPickFromCommit(ctx.getInserter(), ctx.getRepository().getConfig(), args.mergeTip.getCurrentTip(), toMerge, committer, cherryPickCmtMsg, args.rw, 0, false); } catch (com.google.gerrit.extensions.restapi.MergeConflictException mce) { toMerge.setStatusCode(CommitMergeStatus.PATH_CONFLICT); return; } catch (com.google.gerrit.server.git.MergeIdenticalTreeException mie) { toMerge.setStatusCode(com.google.gerrit.server.git.strategy.CommitMergeStatus.SKIPPED_IDENTICAL_TREE); return; } newCommit = amendGitlink(newCommit); newCommit.copyFrom(toMerge); newCommit.setPatchsetId(psId); newCommit.setStatusCode(CommitMergeStatus.CLEAN_PICK); args.mergeTip.moveTipTo(newCommit, newCommit); args.commitStatus.put(newCommit); ctx.addRefUpdate(new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), newCommit, psId.toRefName())); patchSetInfo = args.patchSetInfoFactory.get(ctx.getRevWalk(), newCommit, psId); }",a6b0ba673a805b93cc3ea4f9f873bdb5e0c04483,updateRepoImpl(com.google.gerrit.server.update.RepoContext),106809,479,480
54228,src_main_java_com_googlesource_gerrit_plugins_imagare_client_ImagareAdminScreen.java,,,,"private void display(com.googlesource.gerrit.plugins.imagare.client.ConfigInfo info) { com.google.gwt.user.client.ui.HorizontalPanel p = new com.google.gwt.user.client.ui.HorizontalPanel(); p.setStyleName(""imagare-project-panel""); p.add(new com.google.gwt.user.client.ui.Label(""Project:"")); projectBox = new com.google.gwt.user.client.ui.TextBox(); projectBox.setValue(info.getDefaultProject()); p.add(projectBox); add(p); com.google.gwt.user.client.ui.HorizontalPanel buttons = new com.google.gwt.user.client.ui.HorizontalPanel(); add(buttons); saveButton = new com.google.gwt.user.client.ui.Button(""Save""); saveButton.addStyleName(""serviceuser-saveButton""); saveButton.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { doSave(); } }); buttons.add(saveButton); saveButton.setEnabled(false); new com.googlesource.gerrit.plugins.imagare.client.OnEditEnabler(saveButton, projectBox); projectBox.setFocus(true); saveButton.setEnabled(false); }",4522078038f941e3cbfe6e6603e729d5e9d4eb2a,,display(com.googlesource.gerrit.plugins.imagare.client.ConfigInfo),2,6,"private void display(com.googlesource.gerrit.plugins.imagare.client.ConfigInfo info) { com.google.gwt.user.client.ui.HorizontalPanel p = new com.google.gwt.user.client.ui.HorizontalPanel(); p.setStyleName(""imagare-project-panel""); p.add(new com.google.gwt.user.client.ui.Label(""Project:"")); projectBox = new com.google.gwt.user.client.ui.TextBox(); projectBox.setValue(info.getDefaultProject()); p.add(projectBox); add(p); com.google.gwt.user.client.ui.HorizontalPanel buttons = new com.google.gwt.user.client.ui.HorizontalPanel(); add(buttons); saveButton = new com.google.gwt.user.client.ui.Button(""Save""); saveButton.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { doSave(); } }); buttons.add(saveButton); saveButton.setEnabled(false); new com.googlesource.gerrit.plugins.imagare.client.OnEditEnabler(saveButton, projectBox); projectBox.setFocus(true); saveButton.setEnabled(false); }",5bee459537572243d61a61b425ed4a4c9d1473b0,display(com.googlesource.gerrit.plugins.imagare.client.ConfigInfo),182175,305,294
74375,gerrit-server_src_main_java_com_google_gerrit_server_schema_Schema_106.java,0.0,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { if (!((repoManager) instanceof com.google.gerrit.server.git.LocalDiskRepositoryManager)) { return; } ui.message(""listing all repositories ...""); java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> repoList = repoManager.list(); ui.message(""done""); ui.message(java.lang.String.format(""creating reflog files for %s branches ..."", RefNames.REFS_CONFIG)); for (com.google.gerrit.reviewdb.client.Project.NameKey project : repoList) { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { java.io.File metaConfigLog = new java.io.File(repo.getDirectory(), (""logs/"" + (com.google.gerrit.reviewdb.client.RefNames.REFS_CONFIG))); if (metaConfigLog.exists()) { continue; } if ((!(metaConfigLog.getParentFile().mkdirs())) || (!(metaConfigLog.createNewFile()))) { throw new java.io.IOException(java.lang.String.format(""Failed to create reflog for %s in repository %s"", RefNames.REFS_CONFIG, project)); } org.eclipse.jgit.lib.ObjectId metaConfigId = repo.resolve(RefNames.REFS_CONFIG); if (metaConfigId != null) { try (java.io.PrintWriter writer = new java.io.PrintWriter(metaConfigLog, java.nio.charset.StandardCharsets.UTF_8.name())) { writer.print(org.eclipse.jgit.lib.ObjectId.zeroId().name()); writer.print("" ""); writer.print(metaConfigId.name()); writer.print("" ""); writer.print(serverUser.toExternalString()); writer.print(""\t""); writer.print(""create reflog""); writer.println(); } } } catch (java.io.IOException e) { ui.message(java.lang.String.format((""ERROR: Failed to create reflog file for the"" + "" %s branch in repository %s""), RefNames.REFS_CONFIG, project.get())); } } ui.message(""done""); }",f639096b71bf2ab68863f45716401ae68a14c54a,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { if (!((repoManager) instanceof com.google.gerrit.server.git.LocalDiskRepositoryManager)) { return; } ui.message(""listing all repositories ...""); java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> repoList = repoManager.list(); ui.message(""done""); ui.message(java.lang.String.format(""creating reflog files for %s branches ..."", RefNames.REFS_CONFIG)); java.util.concurrent.ExecutorService executorPool = createExecutor(ui, repoList.size()); java.util.List<java.util.concurrent.Future<java.lang.Void>> futures = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.Project.NameKey project : repoList) { java.util.concurrent.Callable<java.lang.Void> callable = new com.google.gerrit.server.schema.Schema_106.ReflogCreator(project); futures.add(executorPool.submit(callable)); } executorPool.shutdown(); try { for (java.util.concurrent.Future<java.lang.Void> future : futures) { try { future.get(); } catch (java.util.concurrent.ExecutionException e) { ui.message(e.getCause().getMessage()); } } ui.message(""done""); } catch (java.lang.InterruptedException ex) { java.lang.String msg = java.lang.String.format(""Migration step 106 was interrupted. Reflog created in %d of %d repositories only."", com.google.gerrit.server.schema.Schema_106.countDone(futures), repoList.size()); ui.message(msg); } }",39368bf88d35ae1f422ecdad7d75463a6d8593fb,"migrateData(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.schema.UpdateUI)","migrateData(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.schema.UpdateUI)",3,0,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { if (!((repoManager) instanceof com.google.gerrit.server.git.LocalDiskRepositoryManager)) { return; } ui.message(""listing all repositories ...""); java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> repoList = repoManager.list(); ui.message(""done""); ui.message(java.lang.String.format(""creating reflog files for %s branches ..."", RefNames.REFS_CONFIG)); java.util.concurrent.ExecutorService executorPool = createExecutor(ui, repoList.size()); java.util.List<java.util.concurrent.Future<java.lang.Void>> futures = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.Project.NameKey project : repoList) { java.util.concurrent.Callable<java.lang.Void> callable = new com.google.gerrit.server.schema.Schema_106.ReflogCreator(project); futures.add(executorPool.submit(callable)); } executorPool.shutdown(); try { for (java.util.concurrent.Future<java.lang.Void> future : futures) { try { future.get(); } catch (java.util.concurrent.ExecutionException e) { ui.message(e.getCause().getMessage()); } } ui.message(""done""); } catch (java.lang.InterruptedException ex) { java.lang.String msg = java.lang.String.format((""Migration step 106 was interrupted. "" + ""Reflog created in %d of %d repositories only.""), com.google.gerrit.server.schema.Schema_106.countDone(futures), repoList.size()); ui.message(msg); } }",db5b0ff22a3a50e38583765852284d98906ccf0d,"migrateData(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.schema.UpdateUI)",3201,437,440
89132,gerrit-server_src_main_java_com_google_gerrit_server_change_CherryPickChange.java,3.0,"@java.lang.Override public boolean updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder sb = new java.lang.StringBuilder(""Patch Set "").append(psId.get()).append("": Cherry Picked"").append(""\n\n"").append(""This patchset was cherry picked to branch "").append(destBranch).append("" as commit "").append(cherryPickCommit.name()); com.google.gerrit.reviewdb.client.ChangeMessage changeMessage = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx.getDb(), psId, ctx.getUser(), ctx.getWhen(), sb.toString()); cmUtil.addChangeMessage(ctx.getDb(), ctx.getUpdate(psId), changeMessage); return true; }",d84abdd610b2cc82a358aa9f8c3069a32b5aaf8a,"@java.lang.Override public boolean updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder sb = new java.lang.StringBuilder(""Patch Set "").append(psId.get()).append("": Cherry Picked"").append(""\n\n"").append(""This patchset was cherry picked to branch "").append(destBranch).append("" as commit "").append(cherryPickCommit.name()); com.google.gerrit.reviewdb.client.ChangeMessage changeMessage = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx.getDb(), psId, ctx.getUser(), ctx.getWhen(), sb.toString(), ChangeMessagesUtil.CHERRY_PICK_CHANGE); cmUtil.addChangeMessage(ctx.getDb(), ctx.getUpdate(psId), changeMessage); return true; }",3155ad9e5eb1544ac55714b34363b14f8a8dcb01,updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext),updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext),11,3,"@java.lang.Override public boolean updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder sb = new java.lang.StringBuilder(""Patch Set "").append(psId.get()).append("": Cherry Picked"").append(""\n\n"").append(""This patchset was cherry picked to branch "").append(destBranch).append("" as commit "").append(cherryPickCommit.name()); com.google.gerrit.reviewdb.client.ChangeMessage changeMessage = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx.getDb(), psId, ctx.getUser(), ctx.getWhen(), sb.toString(), ChangeMessagesUtil.TAG_CHERRY_PICK_CHANGE); cmUtil.addChangeMessage(ctx.getDb(), ctx.getUpdate(psId), changeMessage); return true; }",654a5d8e07c642a13b075b7829f86966d4a2e5a6,updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext),73606,209,211
113651,gerrit-server_src_main_java_com_google_gerrit_server_index_project_ProjectIndexerImpl.java,,,,"@java.lang.Override public void index(com.google.gerrit.reviewdb.client.Project.NameKey nameKey) throws java.io.IOException { for (com.google.gerrit.server.index.Index<?, com.google.gerrit.server.project.ProjectState> i : getWriteIndexes()) { i.replace(projectCache.get(nameKey)); } fireProjectIndexedEvent(nameKey.get()); }",6cf0d076280fca2cb176afd8fb8c68bab444466e,,index(com.google.gerrit.reviewdb.client.Project$NameKey),10,4,"@java.lang.Override public void index(com.google.gerrit.reviewdb.client.Project.NameKey nameKey) throws java.io.IOException { for (com.google.gerrit.index.Index<?, com.google.gerrit.server.project.ProjectState> i : getWriteIndexes()) { i.replace(projectCache.get(nameKey)); } fireProjectIndexedEvent(nameKey.get()); }",d5c2b0bb79eaa5f1749b12d7d04e9f51a77d8be3,index(com.google.gerrit.reviewdb.client.Project$NameKey),169314,98,96
103373,gerrit-server_src_main_java_com_google_gerrit_server_schema_JdbcAccountPatchReviewStore.java,,,,"@java.lang.Override public void clearReviewed(com.google.gerrit.reviewdb.client.PatchSet.Id psId) throws com.google.gwtorm.server.OrmException { try (java.sql.Connection con = ds.getConnection();java.sql.PreparedStatement stmt = con.prepareStatement((""DELETE FROM ACCOUNT_PATCH_REVIEWS "" + ""WHERE CHANGE_ID = ? AND PATCH_SET_ID = ?""))) { stmt.setInt(1, psId.getParentKey().get()); stmt.setInt(2, psId.get()); stmt.executeUpdate(); } catch (java.sql.SQLException e) { throw convertError(""delete"", e); } }",408ea787ad94c614757088b513909d85bfc820b9,,clearReviewed(com.google.gerrit.reviewdb.client.PatchSet$Id),23,13,"@java.lang.Override public void clearReviewed(com.google.gerrit.reviewdb.client.PatchSet.Id psId) throws com.google.gwtorm.server.OrmException { try (java.sql.Connection con = ds.getConnection();java.sql.PreparedStatement stmt = con.prepareStatement((""DELETE FROM account_patch_reviews "" + ""WHERE change_id = ? AND patch_set_id = ?""))) { stmt.setInt(1, psId.getParentKey().get()); stmt.setInt(2, psId.get()); stmt.executeUpdate(); } catch (java.sql.SQLException e) { throw convertError(""delete"", e); } }",da300545693088aaea0eed6e1ad89f80e11f94b4,clearReviewed(com.google.gerrit.reviewdb.client.PatchSet$Id),1972,148,145
104850,src_test_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_RestForwarderTest.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testFailureAfterMaxTries() throws java.io.IOException { com.ericsson.gerrit.plugins.highavailability.Configuration cfg = mock(com.ericsson.gerrit.plugins.highavailability.Configuration.class); when(cfg.getMaxTries()).thenReturn(3); when(cfg.getRetryInterval()).thenReturn(10); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpSession httpSession = mock(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpSession.class); when(httpSession.post(anyString(), any())).thenReturn(new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult(false, ""Error"")).thenReturn(new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult(false, ""Error"")).thenReturn(new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult(false, ""Error"")); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder forwarder = new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder(httpSession, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderTest.PLUGIN_NAME, cfg); assertThat(forwarder.evict(Constants.PROJECT_LIST, new java.lang.Object())).isFalse(); }",586a7945401896d194427adf59f774e990d5ad06,,testFailureAfterMaxTries(),8,22,"@org.junit.Test public void testFailureAfterMaxTries() throws java.io.IOException { com.ericsson.gerrit.plugins.highavailability.Configuration cfg = mock(com.ericsson.gerrit.plugins.highavailability.Configuration.class); when(cfg.getMaxTries()).thenReturn(3); when(cfg.getRetryInterval()).thenReturn(10); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpSession httpSession = mock(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpSession.class); when(httpSession.post(anyString(), anyString())).thenReturn(new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult(false, ""Error"")).thenReturn(new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult(false, ""Error"")).thenReturn(new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult(false, ""Error"")); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder forwarder = new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder(httpSession, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderTest.PLUGIN_NAME, cfg); assertThat(forwarder.evict(Constants.PROJECT_LIST, new java.lang.Object())).isFalse(); }",4f4caeb00ba2549ea812df175280f3bf7e6403ab,testFailureAfterMaxTries(),65704,347,348
4849,src_com_google_gwtjsonrpc_client_CallbackHandle.java,,,,final void onResult(final java.lang.Object result) { cancel(); try { callback.onSuccess(serializer.fromJson(result)); } catch (java.lang.RuntimeException e) { callback.onFailure(e); } },dd6437ee75e31d1de68a6bfd0f48bd28d0704001,,onResult(java.lang.Object),2,6,final void onResult(final java.lang.Object result) { cancel(); final R obj; try { obj = serializer.fromJson(result); } catch (java.lang.RuntimeException e) { callback.onFailure(e); return; } callback.onSuccess(obj); },eff0ff6de543f7de57c4f152506936f5056dabe1,onResult(java.lang.Object),20560,47,57
62827,gerrit-gwtui_src_main_java_com_google_gerrit_client_ui_ProjectListPopup.java,0.0,"@java.lang.Override public void onSuccess(final com.google.gerrit.client.projects.ProjectMap result) { projectsTab.display(result, subname); if (firstPopupLoad) { firstPopupLoad = false; displayPopup(); } }",3ee85b96bec14f8926b1bcddbd80e258392eb3d1,@java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ProjectMap result) { if (!(popup.isShowing())) { query = null; } else if ((query) == (this)) { query = null; showMap(result); } else { query.run(); } },178362486973c0e414383bce7283ae3c2fcb07b0,onSuccess(com.google.gerrit.client.projects.ProjectMap),onSuccess(com.google.gerrit.client.projects.ProjectMap),3,0,@java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ProjectMap result) { if ((!(firstPopupLoad)) && (!(popup.isShowing()))) { query = null; } else if ((query) == (this)) { query = null; showMap(result); } else { query.run(); } },e20fd7f064cb28a2ab44d4460b6165df5b31eb7b,onSuccess(com.google.gerrit.client.projects.ProjectMap),59516,67,75
45481,gerrit-httpd_src_main_java_com_google_gerrit_httpd_plugins_WrappedContext.java,8.0,"@java.lang.Override public void log(java.lang.Exception reason, java.lang.String msg) { log(msg, reason); }",50e6c0fd51aca4e954a8ca80c8e356d7f484c36c,"static javax.servlet.ServletContext create(com.google.gerrit.server.plugins.Plugin plugin, java.lang.String contextPath) { return ((javax.servlet.ServletContext) (java.lang.reflect.Proxy.newProxyInstance(com.google.gerrit.httpd.plugins.WrappedContext.class.getClassLoader(), new java.lang.Class[]{ javax.servlet.ServletContext.class, com.google.gerrit.httpd.plugins.WrappedContext.API.class }, new com.google.gerrit.httpd.plugins.WrappedContext.Handler(plugin, contextPath)))); }",ac87983e3c04476cffc813c95fa0add6e2fb557f,"log(java.lang.Exception,java.lang.String)","create(com.google.gerrit.server.plugins.Plugin,java.lang.String)",2,14,"static javax.servlet.ServletContext create(com.google.gerrit.server.plugins.Plugin plugin, java.lang.String contextPath) { return ((javax.servlet.ServletContext) (java.lang.reflect.Proxy.newProxyInstance(com.google.gerrit.httpd.plugins.PluginServletContext.class.getClassLoader(), new java.lang.Class[]{ javax.servlet.ServletContext.class, com.google.gerrit.httpd.plugins.PluginServletContext.API.class }, new com.google.gerrit.httpd.plugins.PluginServletContext.Handler(plugin, contextPath)))); }",e742a84bf91041a276b09c2cbe8128a212dee3d4,"create(com.google.gerrit.server.plugins.Plugin,java.lang.String)",138721,129,129
156531,java_com_google_gerrit_server_permissions_RefControl.java,29.0,boolean canForceEditTopicName() { return canForcePerform(Permission.EDIT_TOPIC_NAME); },cbb8c664e21758443ed831f971b295f93d6ccfc2,boolean canForceEditTopicName() { return canPerform(Permission.EDIT_TOPIC_NAME); },c51e7a623ab1b0eb228a30f504b337ed05bb0f1f,canForceEditTopicName(),canForceEditTopicName(),21,25,"boolean canForceEditTopicName() { return canPerform(Permission.EDIT_TOPIC_NAME, false, true); }",cb804599124353f7a9ec90cec39d0876d13d4f5c,canForceEditTopicName(),67182,21,25
39445,gerrit-gwtui_src_main_java_com_google_gerrit_client_rpc_NativeString.java,,,,@java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeString result) { cb.onSuccess(result.get()); },4b7174aeb1395987edeb9a086d7d16bb9de1f3e7,,onSuccess(com.google.gerrit.client.rpc.NativeString),5,1,@java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeString result) { cb.onSuccess(result.asString()); },b49ff1ef01447adf4b74c187c26cde4e8b2e2718,onSuccess(com.google.gerrit.client.rpc.NativeString),78845,35,35
59081,gerrit-server_src_main_java_com_google_gerrit_server_project_RefControl.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean canCreate(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevObject object) { if (!(canWrite())) { return false; } boolean owner; boolean admin; switch (getCurrentUser().getAccessPath()) { case REST_API : case JSON_RPC : owner = isOwner(); admin = getCurrentUser().getCapabilities().canAdministrateServer(); break; default : owner = false; admin = false; } if (object instanceof org.eclipse.jgit.revwalk.RevCommit) { if (admin || (owner && (!(isBlocked(Permission.CREATE))))) { return true; } else if (!(canPerform(Permission.CREATE))) { return false; } boolean isMerged = isMergedIntoBranchOrTag(db, rw, ((org.eclipse.jgit.revwalk.RevCommit) (object))); return isMerged || (canUpdate()); } else if (object instanceof org.eclipse.jgit.revwalk.RevTag) { final org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); try { rw.parseBody(tag); } catch (java.io.IOException e) { return false; } final org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); if (tagger != null) { boolean valid; if (getCurrentUser().isIdentifiedUser()) { final com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (getCurrentUser())); final java.lang.String addr = tagger.getEmailAddress(); valid = user.getEmailAddresses().contains(addr); } else { valid = false; } if (((!valid) && (!owner)) && (!(canForgeCommitter()))) { return false; } } if (tag.getFullMessage().contains(""-----BEGIN PGP SIGNATURE-----\n"")) { return owner || (canPerform(Permission.PUSH_SIGNED_TAG)); } else { return owner || (canPerform(Permission.PUSH_TAG)); } } else { return false; } }",36921848d40942cd076b36d5287a67c28e1e96df,,"canCreate(com.google.gerrit.reviewdb.server.ReviewDb,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevObject)",3,33,"public boolean canCreate(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevObject object) { if (!(canWrite())) { return false; } boolean owner; boolean admin; switch (getCurrentUser().getAccessPath()) { case REST_API : case JSON_RPC : owner = isOwner(); admin = getCurrentUser().getCapabilities().canAdministrateServer(); break; default : owner = false; admin = false; } if (object instanceof org.eclipse.jgit.revwalk.RevCommit) { if (admin || (owner && (!(isBlocked(Permission.CREATE))))) { return true; } else if (!(canPerform(Permission.CREATE))) { return false; } else if (canUpdate()) { return true; } else if (isMergedIntoBranchOrTag(db, rw, ((org.eclipse.jgit.revwalk.RevCommit) (object)))) { return true; } return false; } else if (object instanceof org.eclipse.jgit.revwalk.RevTag) { final org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); try { rw.parseBody(tag); } catch (java.io.IOException e) { return false; } final org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); if (tagger != null) { boolean valid; if (getCurrentUser().isIdentifiedUser()) { final com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (getCurrentUser())); final java.lang.String addr = tagger.getEmailAddress(); valid = user.getEmailAddresses().contains(addr); } else { valid = false; } if (((!valid) && (!owner)) && (!(canForgeCommitter()))) { return false; } } if (tag.getFullMessage().contains(""-----BEGIN PGP SIGNATURE-----\n"")) { return owner || (canPerform(Permission.PUSH_SIGNED_TAG)); } else { return owner || (canPerform(Permission.PUSH_TAG)); } } else { return false; } }",842600cbbc25af4cc58f36c59ab0d8ccc8ef661b,"canCreate(com.google.gerrit.reviewdb.server.ReviewDb,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevObject)",192156,482,492
62862,gerrit-gwtui_src_main_java_com_google_gerrit_client_editor_EditScreen.java,9.0,@java.lang.Override protected void preDisplay(java.lang.String content) { setShowTabs(prefs.showTabs()); initEditor(content); },8e1b22f4f2890703cc13708b1c6fab0434c1b4b9,"@java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeFileApi.FileContent fc) { content = fc; type = fc.contentType(); injectMode(type, modeInjectorCb); }",7e02d42fdcb3d6baf1a404a5b2275afffda689fe,preDisplay(java.lang.String),onSuccess(com.google.gerrit.client.changes.ChangeFileApi.FileContent),7,20,"@java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.HttpResponse<com.google.gerrit.client.rpc.NativeString> fc) { content = fc; if (prefs.syntaxHighlighting()) { injectMode(fc.getContentType(), modeCallback); } else { modeCallback.onSuccess(null); } }",841674938b3e7cfeb333aabe0a5c52880586e295,onSuccess(com.google.gerrit.client.rpc.HttpResponse),67112,52,75
74444,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeKindCacheImpl.java,18.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static boolean sameRestOfParents(org.eclipse.jgit.revwalk.RevCommit prior, org.eclipse.jgit.revwalk.RevCommit next) { java.util.Set<org.eclipse.jgit.revwalk.RevCommit> priorRestParents = com.google.gerrit.server.change.ChangeKindCacheImpl.Loader.mergedInParents(prior.getParents()); java.util.Set<org.eclipse.jgit.revwalk.RevCommit> nextRestParents = com.google.gerrit.server.change.ChangeKindCacheImpl.Loader.mergedInParents(next.getParents()); return priorRestParents.equals(nextRestParents); }",a44494b0807dc621b1cc4f2c24ca2916e6d8487c,,"sameRestOfParents(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)",4,11,"private static boolean sameRestOfParents(org.eclipse.jgit.revwalk.RevCommit prior, org.eclipse.jgit.revwalk.RevCommit next) { java.util.Set<org.eclipse.jgit.revwalk.RevCommit> priorRestParents = com.google.gerrit.server.change.ChangeKindCacheImpl.Loader.allExceptFirstParent(prior.getParents()); java.util.Set<org.eclipse.jgit.revwalk.RevCommit> nextRestParents = com.google.gerrit.server.change.ChangeKindCacheImpl.Loader.allExceptFirstParent(next.getParents()); return priorRestParents.equals(nextRestParents); }",2e01321a0793e219a6726a04c16c9810b5792931,"sameRestOfParents(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)",120415,156,156
76583,gerrit-server_src_main_java_com_google_gerrit_server_git_GitModules.java,0.0,"void load() throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = branch.getParentKey(); logDebug(""Loading .gitmodules of {} for project {}"", branch, project); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.ObjectId id = repo.resolve(branch.get()); if (id == null) { throw new java.io.IOException((""Cannot open branch "" + (branch.get()))); } org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(id); org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(repo, com.google.gerrit.server.git.GitModules.GIT_MODULES, commit.getTree()); if ((tw == null) || (((tw.getRawMode(0)) & (org.eclipse.jgit.lib.FileMode.TYPE_MASK)) != (org.eclipse.jgit.lib.FileMode.TYPE_FILE))) { return; } org.eclipse.jgit.lib.BlobBasedConfig bbc = new org.eclipse.jgit.lib.BlobBasedConfig(null, repo, commit, com.google.gerrit.server.git.GitModules.GIT_MODULES); subscriptions = subSecParserFactory.create(bbc, thisServer, branch).parseAllSections(); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException((""Could not read .gitmodule file of super project: "" + (branch.getParentKey())), e); } }",7f4c324558ab57db525cb8f49b1d3dd6886523f6,"void load() throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = branch.getParentKey(); logDebug(""Loading .gitmodules of {} for project {}"", branch, project); try { mergeOp.openRepo(project, false); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new java.io.IOException(e); } OpenRepo or = mergeOp.getRepo(project); ObjectId id = or.repo.resolve(branch.get()); if (id == null) { throw new java.io.IOException((""Cannot open branch "" + (branch.get()))); } org.eclipse.jgit.revwalk.RevCommit commit = or.rw.parseCommit(id); org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or.repo, com.google.gerrit.server.git.GitModules.GIT_MODULES, commit.getTree()); if ((tw == null) || (((tw.getRawMode(0)) & (org.eclipse.jgit.lib.FileMode.TYPE_MASK)) != (org.eclipse.jgit.lib.FileMode.TYPE_FILE))) { return; } try { org.eclipse.jgit.lib.BlobBasedConfig bbc = new org.eclipse.jgit.lib.BlobBasedConfig(null, or.repo, commit, com.google.gerrit.server.git.GitModules.GIT_MODULES); subscriptions = subSecParserFactory.create(bbc, thisServer, branch).parseAllSections(); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException((""Could not read .gitmodule file of super project: "" + (branch.getParentKey())), e); } }",a5531bab27cdbf5adaa95fffea0371c0960e64da,load(),load(),14,0,"void load() throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = branch.getParentKey(); logDebug(""Loading .gitmodules of {} for project {}"", branch, project); try { orm.openRepo(project, false); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new java.io.IOException(e); } OpenRepo or = orm.getRepo(project); ObjectId id = or.repo.resolve(branch.get()); if (id == null) { throw new java.io.IOException((""Cannot open branch "" + (branch.get()))); } org.eclipse.jgit.revwalk.RevCommit commit = or.rw.parseCommit(id); org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or.repo, com.google.gerrit.server.git.GitModules.GIT_MODULES, commit.getTree()); if ((tw == null) || (((tw.getRawMode(0)) & (org.eclipse.jgit.lib.FileMode.TYPE_MASK)) != (org.eclipse.jgit.lib.FileMode.TYPE_FILE))) { return; } try { org.eclipse.jgit.lib.BlobBasedConfig bbc = new org.eclipse.jgit.lib.BlobBasedConfig(null, or.repo, commit, com.google.gerrit.server.git.GitModules.GIT_MODULES); subscriptions = subSecParserFactory.create(bbc, thisServer, branch).parseAllSections(); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException((""Could not read .gitmodule file of super project: "" + (branch.getParentKey())), e); } }",e95c9a0ea73f7c0a846311fb6fcfc2b7796eb534,load(),12434,414,414
69774,gerrit-gwtui_src_main_java_com_google_gerrit_client_Gerrit.java,1.0,"@java.lang.Override public void onSuccess(final com.google.gerrit.common.data.HostPageData result) { com.google.gwt.dom.client.Document.get().getElementById(""gerrit_hostpagedata"").removeFromParent(); com.google.gerrit.client.Gerrit.myTheme = result.theme; com.google.gerrit.client.Gerrit.isNoteDbEnabled = result.isNoteDbEnabled; if ((result.account) != null) { com.google.gerrit.client.Gerrit.myAccount = result.account; com.google.gerrit.client.Gerrit.xGerritAuth = result.xGerritAuth; } if ((result.accountDiffPref) != null) { com.google.gerrit.client.Gerrit.myAccountDiffPref = result.accountDiffPref; com.google.gerrit.client.Gerrit.applyUserPreferences(); } onModuleLoad2(result); }",08a45537369ad7a14c49cd542b64129904927aae,"@java.lang.Override public void onSuccess(final com.google.gerrit.common.data.HostPageData result) { com.google.gwt.dom.client.Document.get().getElementById(""gerrit_hostpagedata"").removeFromParent(); com.google.gerrit.client.Gerrit.myTheme = result.theme; com.google.gerrit.client.Gerrit.isNoteDbEnabled = result.isNoteDbEnabled; if ((result.account) != null) { com.google.gerrit.client.Gerrit.myAccount = result.account; com.google.gerrit.client.Gerrit.xGerritAuth = result.xGerritAuth; } if ((result.accountDiffPref) != null) { com.google.gerrit.client.Gerrit.myAccountDiffPref = result.accountDiffPref; } if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.account.AccountApi.self().view(""preferences"").get(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountPreferencesInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountPreferencesInfo prefs) { com.google.gerrit.client.Gerrit.myPrefs = prefs; onModuleLoad2(result); } }); } else { com.google.gerrit.client.Gerrit.myPrefs = com.google.gerrit.client.Gerrit.getDefaultUserPreferences(); onModuleLoad2(result); } }",6153e248d378e5086edce786bbce264671ea7050,onSuccess(com.google.gerrit.common.data.HostPageData),onSuccess(com.google.gerrit.common.data.HostPageData),8,0,"@java.lang.Override public void onSuccess(final com.google.gerrit.common.data.HostPageData result) { com.google.gwt.dom.client.Document.get().getElementById(""gerrit_hostpagedata"").removeFromParent(); com.google.gerrit.client.Gerrit.myTheme = result.theme; com.google.gerrit.client.Gerrit.isNoteDbEnabled = result.isNoteDbEnabled; if ((result.account) != null) { com.google.gerrit.client.Gerrit.myAccount = result.account; com.google.gerrit.client.Gerrit.xGerritAuth = result.xGerritAuth; } if ((result.accountDiffPref) != null) { com.google.gerrit.client.Gerrit.myAccountDiffPref = result.accountDiffPref; } if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.account.AccountApi.self().view(""preferences"").get(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountPreferencesInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountPreferencesInfo prefs) { com.google.gerrit.client.Gerrit.myPrefs = prefs; onModuleLoad2(result); } }); } else { com.google.gerrit.client.Gerrit.myPrefs = com.google.gerrit.client.info.AccountPreferencesInfo.createDefault(); onModuleLoad2(result); } }",395e6d09e3da6ae2419712c4eb53e2152f1af022,onSuccess(com.google.gerrit.common.data.HostPageData),102250,369,369
148032,java_com_google_gerrit_server_restapi_project_FilesInCommitCollection.java,2.0,"@java.lang.Override public com.google.gerrit.server.project.FileResource parse(com.google.gerrit.server.project.CommitResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { if (com.google.gerrit.reviewdb.client.Patch.isMagic(id.get())) { return new com.google.gerrit.server.project.FileResource(parent.getProjectState(), parent.getCommit(), id.get()); } return com.google.gerrit.server.project.FileResource.create(repoManager, parent.getProjectState(), parent.getCommit(), id.get()); }",9335a5e2584cc43b035ebe8d97bae8e9e8c3d7af,"@java.lang.Override public com.google.gerrit.server.restapi.project.FileResource parse(com.google.gerrit.server.restapi.project.CommitResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { if (com.google.gerrit.reviewdb.client.Patch.isMagic(id.get())) { return new com.google.gerrit.server.restapi.project.FileResource(parent.getProjectState(), parent.getCommit(), id.get()); } return com.google.gerrit.server.restapi.project.FileResource.create(repoManager, parent.getProjectState(), parent.getCommit(), id.get()); }",d03035624cdb30f26277e4bf1d6413a8432cc47c,"parse(com.google.gerrit.server.project.CommitResource,com.google.gerrit.extensions.restapi.IdString)","parse(com.google.gerrit.server.restapi.project.CommitResource,com.google.gerrit.extensions.restapi.IdString)",17,1,"@java.lang.Override public com.google.gerrit.server.project.FileResource parse(com.google.gerrit.server.project.CommitResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { if (com.google.gerrit.reviewdb.client.Patch.isMagic(id.get())) { return new com.google.gerrit.server.project.FileResource(parent.getProjectState(), parent.getCommit(), id.get()); } return com.google.gerrit.server.project.FileResource.create(repoManager, parent.getProjectState(), parent.getCommit(), id.get()); }",9335a5e2584cc43b035ebe8d97bae8e9e8c3d7af,"parse(com.google.gerrit.server.project.CommitResource,com.google.gerrit.extensions.restapi.IdString)",217425,178,166
151673,java_com_google_gerrit_server_edit_ChangeEditModifier.java,5.0,"private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } try { permissionBackend.user(currentUser).database(reviewDb).change(notes).check(ChangePermission.ADD_PATCH_SET); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException(""edit not permitted"", denied); } }",fecf3d591ddff099fa4081782f9765919cb8f830,"private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } try { permissionBackend.user(currentUser).database(reviewDb).change(notes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException(""edit not permitted"", denied); } }",e09d26f002216013a5dcd2c0190a56e719e3b15d,assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes),assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes),5,5,"private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } try { permissionBackend.user(currentUser).database(reviewDb).change(notes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException(""edit not permitted"", denied); } }",35e064f1f8e2cd4e2ff7d4717e97247c2924289c,assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes),144621,183,199
62673,gerrit-server_src_main_java_com_google_gerrit_server_edit_ChangeEditModifier.java,16.0,"private RefUpdate.Result update(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.IdentifiedUser me, java.lang.String refName, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId oldObjectId, org.eclipse.jgit.lib.ObjectId newEdit) throws java.io.IOException { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(refName); ru.setExpectedOldObjectId(oldObjectId); ru.setNewObjectId(newEdit); ru.setRefLogIdent(getRefLogIdent(me)); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result res = ru.update(rw); if ((res != (RefUpdate.Result.NEW)) && (res != (RefUpdate.Result.FORCED))) { throw new java.io.IOException((""update failed: "" + ru)); } return res; }",f66d7866ae01a649397e3ff8256e5efc2a603cf3,"private RefUpdate.Result update(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.IdentifiedUser me, java.lang.String refName, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId oldObjectId, org.eclipse.jgit.lib.ObjectId newEdit) throws java.io.IOException { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(refName); ru.setExpectedOldObjectId(oldObjectId); ru.setNewObjectId(newEdit); ru.setRefLogIdent(getRefLogIdent(me)); ru.setRefLogMessage(""inline edit"", false); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result res = ru.update(rw); if ((res != (RefUpdate.Result.NEW)) && (res != (RefUpdate.Result.FORCED))) { throw new java.io.IOException((""update failed: "" + ru)); } return res; }",9a0e4525c82d9a68dd21488cc2519d50bc5e2c9b,"update(org.eclipse.jgit.lib.Repository,com.google.gerrit.server.IdentifiedUser,java.lang.String,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId)","update(org.eclipse.jgit.lib.Repository,com.google.gerrit.server.IdentifiedUser,java.lang.String,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId)",3,16,"private RefUpdate.Result update(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.IdentifiedUser me, java.lang.String refName, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId oldObjectId, org.eclipse.jgit.lib.ObjectId newEdit) throws java.io.IOException { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(refName); ru.setExpectedOldObjectId(oldObjectId); ru.setNewObjectId(newEdit); ru.setRefLogIdent(getRefLogIdent(me)); ru.setRefLogMessage(""inline edit (amend)"", false); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result res = ru.update(rw); if ((res != (RefUpdate.Result.NEW)) && (res != (RefUpdate.Result.FORCED))) { throw new java.io.IOException((""update failed: "" + ru)); } return res; }",5abb2afb1d5aaa4d22d94b83162eab880efce170,"update(org.eclipse.jgit.lib.Repository,com.google.gerrit.server.IdentifiedUser,java.lang.String,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId)",106030,237,241
140090,java_com_google_gerrit_server_project_ListTags.java,2.0,"public static com.google.gerrit.extensions.api.projects.TagInfo createTagInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.WebLinks links) throws java.io.IOException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject object = rw.parseAny(ref.getObjectId()); boolean canDelete = perm.testOrFalse(RefPermission.DELETE); java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> webLinks = links.getTagLinks(projectName.get(), ref.getName()); if (object instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), tag.getName(), tag.getObject().getName(), tag.getFullMessage().trim(), (tagger != null ? com.google.gerrit.server.CommonConverters.toGitPerson(tag.getTaggerIdent()) : null), canDelete, (webLinks.isEmpty() ? null : webLinks)); } return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), ref.getObjectId().getName(), canDelete, (webLinks.isEmpty() ? null : webLinks)); }",1dce8634e645b35e5b078a1fe74fa5d7e6d3b880,"public static com.google.gerrit.extensions.api.projects.TagInfo createTagInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.WebLinks links) throws java.io.IOException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject object = rw.parseAny(ref.getObjectId()); boolean canDelete = perm.testOrFalse(RefPermission.DELETE); java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> webLinks = links.getTagLinks(projectName.get(), ref.getName()); if (object instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), tag.getName(), tag.getObject().getName(), tag.getFullMessage().trim(), (tagger != null ? com.google.gerrit.server.CommonConverters.toGitPerson(tagger) : null), canDelete, (tagger != null ? new java.sql.Timestamp(tagger.getWhen().getTime()) : null), (webLinks.isEmpty() ? null : webLinks)); } java.sql.Timestamp timestamp = (object instanceof org.eclipse.jgit.revwalk.RevCommit) ? new java.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getWhen().getTime()) : null; return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), ref.getObjectId().getName(), canDelete, timestamp, (webLinks.isEmpty() ? null : webLinks)); }",d46f8e774f382544f5a2cefb62f1e4d68739f3d4,"createTagInfo(com.google.gerrit.server.permissions.PermissionBackend$ForRef,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.revwalk.RevWalk,com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.server.WebLinks)","createTagInfo(com.google.gerrit.server.permissions.PermissionBackend$ForRef,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.revwalk.RevWalk,com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.server.WebLinks)",5,2,"public static com.google.gerrit.extensions.api.projects.TagInfo createTagInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.WebLinks links) throws java.io.IOException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject object = rw.parseAny(ref.getObjectId()); java.lang.Boolean canDelete = (perm.testOrFalse(RefPermission.DELETE)) ? true : null; java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> webLinks = links.getTagLinks(projectName.get(), ref.getName()); if (object instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), tag.getName(), tag.getObject().getName(), tag.getFullMessage().trim(), (tagger != null ? com.google.gerrit.server.CommonConverters.toGitPerson(tagger) : null), canDelete, (webLinks.isEmpty() ? null : webLinks), (tagger != null ? new java.sql.Timestamp(tagger.getWhen().getTime()) : null)); } java.sql.Timestamp timestamp = (object instanceof org.eclipse.jgit.revwalk.RevCommit) ? new java.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getWhen().getTime()) : null; return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), ref.getObjectId().getName(), canDelete, (webLinks.isEmpty() ? null : webLinks), timestamp); }",8d4a2ca0e02f7e0c2be8054b1f62177936e2807d,"createTagInfo(com.google.gerrit.server.permissions.PermissionBackend$ForRef,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.revwalk.RevWalk,com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.server.WebLinks)",205616,479,490
86953,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,33.0,"private com.google.common.base.Optional<com.google.gerrit.server.query.change.ChangeData.ChangedLines> computeChangedLines() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = change(); if (c == null) { return com.google.common.base.Optional.absent(); } com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(); if (ps == null) { return com.google.common.base.Optional.absent(); } com.google.common.base.Optional<com.google.gerrit.server.patch.PatchList> p = getPatchList(c, ps); if (!(p.isPresent())) { return com.google.common.base.Optional.absent(); } return com.google.common.base.Optional.of(new com.google.gerrit.server.query.change.ChangeData.ChangedLines(p.get().getInsertions(), p.get().getDeletions())); }",68aa0574d4dc34eed9d35a5f4fbd677eee5ddc1a,"private com.google.common.base.Optional<com.google.gerrit.server.query.change.ChangeData.ChangedLines> computeChangedLines() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = change(); if (c == null) { return com.google.common.base.Optional.absent(); } com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(); if (ps == null) { return com.google.common.base.Optional.absent(); } com.google.common.base.Optional<com.google.gerrit.server.patch.DiffSummary> ds = getDiffSummary(c, ps); if (ds.isPresent()) { return com.google.common.base.Optional.of(ds.get().getChangedLines()); } return com.google.common.base.Optional.absent(); }",041dd4f43ec8884cd6962c6f49cab2438fe03b61,computeChangedLines(),computeChangedLines(),11,35,"private java.util.Optional<com.google.gerrit.server.query.change.ChangeData.ChangedLines> computeChangedLines() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = change(); if (c == null) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(); if (ps == null) { return java.util.Optional.empty(); } java.util.Optional<com.google.gerrit.server.patch.DiffSummary> ds = getDiffSummary(c, ps); if (ds.isPresent()) { return java.util.Optional.of(ds.get().getChangedLines()); } return java.util.Optional.empty(); }",038163246a27b1ebb4d2c585ad61ca2b3c5b4ce7,computeChangedLines(),55534,206,182
148032,java_com_google_gerrit_server_restapi_project_ChildProjectsCollection.java,2.0,"@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProjectState()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",8e14eff2ddceb4bff265b888f2bcfb4d67842391,"@java.lang.Override public com.google.gerrit.server.restapi.project.ChildProjectResource parse(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.restapi.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.restapi.project.ChildProjectResource(parent, p.getProjectState()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",38f671efc8b7b7c1273a04c9774df20be9d3f4da,"parse(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)","parse(com.google.gerrit.server.restapi.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)",17,2,"@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProjectState()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",8e14eff2ddceb4bff265b888f2bcfb4d67842391,"parse(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)",216151,220,208
146031,src_main_java_com_googlesource_gerrit_plugins_its_base_util_PropertyAttributeExtractor.java,2.0,"public java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) { java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create(""revision"", patchSetAttribute.revision)); properties.add(propertyFactory.create(""patch-set-number"", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(""patchSetNumber"", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(""ref"", patchSetAttribute.ref)); properties.add(propertyFactory.create(""created-on"", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create(""createdOn"", patchSetAttribute.createdOn.toString())); HEAD(bb16a6); }",89c0f2da9be866ef35c5a4488ed17c01934ec216,"public java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) { java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create(""revision"", patchSetAttribute.revision)); properties.add(propertyFactory.create(""patch-set-number"", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(""patchSetNumber"", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(""ref"", patchSetAttribute.ref)); properties.add(propertyFactory.create(""created-on"", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create(""createdOn"", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create(""parents"", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create(""deletions"", java.lang.Integer.toString(patchSetAttribute.sizeDeletions))); properties.add(propertyFactory.create(""insertions"", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.addAll(extractFrom(patchSetAttribute.uploader, ""uploader"")); properties.addAll(extractFrom(patchSetAttribute.author, ""author"")); }",9cca1f938060075a34ea117a9b652c3e37f1d0fb,extractFrom(com.google.gerrit.server.data.PatchSetAttribute),extractFrom(com.google.gerrit.server.data.PatchSetAttribute),5,2,"public java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) { java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create(""revision"", patchSetAttribute.revision)); properties.add(propertyFactory.create(""patch-set-number"", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(""patchSetNumber"", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(""ref"", patchSetAttribute.ref)); properties.add(propertyFactory.create(""created-on"", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create(""createdOn"", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create(""parents"", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create(""deletions"", java.lang.Integer.toString(patchSetAttribute.sizeDeletions))); properties.add(propertyFactory.create(""insertions"", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.addAll(extractFrom(patchSetAttribute.uploader, ""uploader"")); properties.addAll(extractFrom(patchSetAttribute.author, ""author"")); return properties; }",9334da4c36e26915e74a2e94f9f950a7b94f669a,extractFrom(com.google.gerrit.server.data.PatchSetAttribute),138042,319,322
30440,gerrit-server_src_main_java_com_google_gerrit_server_git_PushReplication.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void replicateProjectLocally(final com.google.gerrit.reviewdb.Project.NameKey projectName, final org.eclipse.jgit.transport.URIish replicateURI, final java.lang.String head) { org.eclipse.jgit.lib.Repository repo = null; try { repo = gitRepositoryManager.openRepository(projectName); org.apache.commons.io.FileUtils.copyDirectory(repo.getDirectory(), new java.io.File(replicateURI.getPath())); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { com.google.gerrit.server.git.PushReplication.log.error((""Failed to replicate project locally: "" + (replicateURI.toString()))); } catch (java.io.IOException e) { com.google.gerrit.server.git.PushReplication.log.error((""Failed to replicate project locally: "" + (replicateURI.toString()))); } finally { if (repo != null) { repo.close(); } } }",120d24a1173b00b08199ea182de3b8507f97bcd9,,"replicateProjectLocally(com.google.gerrit.reviewdb.Project$NameKey,org.eclipse.jgit.transport.URIish,java.lang.String)",4,16,"private void replicateProjectLocally(final org.eclipse.jgit.transport.URIish replicateURI, final java.lang.String head) { try { final org.eclipse.jgit.lib.Repository repo = new org.eclipse.jgit.storage.file.FileRepository(replicateURI.getPath()); try { repo.create(true); final org.eclipse.jgit.lib.RefUpdate u = repo.updateRef(Constants.HEAD); u.disableRefLog(); u.link(head); } finally { repo.close(); } } catch (java.io.IOException e) { com.google.gerrit.server.git.PushReplication.log.error((""Failed to replicate project locally: "" + (replicateURI.getPath()))); } }",538e7abdaa4ef0ca1d9f37baf98874824e3b1634,"replicateProjectLocally(org.eclipse.jgit.transport.URIish,java.lang.String)",137701,220,165
76267,gerrit-server_src_main_java_com_google_gerrit_server_patch_AutoMerger.java,,,,"private org.eclipse.jgit.revwalk.RevCommit commit(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, java.lang.String refName, org.eclipse.jgit.lib.ObjectId tree, org.eclipse.jgit.revwalk.RevCommit[] parents) throws java.io.IOException { org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setAuthor(gerritIdent); cb.setCommitter(gerritIdent); cb.setTreeId(tree); for (org.eclipse.jgit.revwalk.RevCommit p : parents) { cb.addParentId(p); } org.eclipse.jgit.lib.ObjectId commitId; try (org.eclipse.jgit.lib.ObjectInserter inserter = repo.newObjectInserter()) { commitId = inserter.insert(cb); } org.eclipse.jgit.lib.RefUpdate update = repo.updateRef(refName); update.setNewObjectId(commitId); update.disableRefLog(); update.forceUpdate(); return rw.lookupCommit(commitId); }",53b6f7c098f927704ef89c8e78600b9395a27ccf,,"commit(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevWalk,java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.revwalk.RevCommit[])",13,4,"private org.eclipse.jgit.revwalk.RevCommit commit(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, java.lang.String refName, org.eclipse.jgit.lib.ObjectId tree, org.eclipse.jgit.revwalk.RevCommit merge) throws java.io.IOException { rw.parseHeaders(merge); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(gerritIdent, merge.getCommitterIdent().getWhen(), gerritIdent.getTimeZone()); org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setAuthor(ident); cb.setCommitter(ident); cb.setTreeId(tree); cb.setMessage(((""Auto-merge of "" + (merge.name())) + '\n')); for (org.eclipse.jgit.revwalk.RevCommit p : merge.getParents()) { cb.addParentId(p); } org.eclipse.jgit.lib.ObjectId commitId; try (org.eclipse.jgit.lib.ObjectInserter ins = repo.newObjectInserter()) { commitId = ins.insert(cb); ins.flush(); } org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(refName); ru.setNewObjectId(commitId); ru.disableRefLog(); ru.forceUpdate(); return rw.parseCommit(commitId); }",a4b44caf324c63837107ec14d3d6af7379972546,"commit(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevWalk,java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.revwalk.RevCommit)",32619,264,350
84553,gerrit-server_src_main_java_com_google_gerrit_server_mail_ChangeEmail.java,20.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override protected void setupSoyContext() { super.setupSoyContext(); soyContext.put(""changeId"", change.getKey().get()); soyContext.put(""coverLetter"", getCoverLetter()); soyContext.put(""fromName"", getNameFor(fromId)); soyContextEmailData.put(""unifiedDiff"", getUnifiedDiff()); soyContextEmailData.put(""changeDetail"", getChangeDetail()); soyContextEmailData.put(""changeUrl"", getChangeUrl()); soyContextEmailData.put(""includeDiff"", getIncludeDiff()); java.util.LinkedHashMap<java.lang.String, java.lang.String> changeData = new java.util.LinkedHashMap<java.lang.String, java.lang.String>(); changeData.put(""subject"", change.getSubject()); changeData.put(""originalSubject"", change.getOriginalSubject()); changeData.put(""ownerEmail"", getNameEmailFor(change.getOwner())); soyContext.put(""change"", changeData); java.util.LinkedHashMap<java.lang.String, java.lang.Object> patchSetData = new java.util.LinkedHashMap<java.lang.String, java.lang.Object>(); patchSetData.put(""patchSetId"", patchSet.getPatchSetId()); patchSetData.put(""refName"", patchSet.getRefName()); soyContext.put(""patchSet"", patchSetData); }",6ee67b44bbce4d65d99041cd7722e53201cdf112,,setupSoyContext(),4,21,"@java.lang.Override protected void setupSoyContext() { super.setupSoyContext(); soyContext.put(""changeId"", change.getKey().get()); soyContext.put(""coverLetter"", getCoverLetter()); soyContext.put(""fromName"", getNameFor(fromId)); soyContextEmailData.put(""unifiedDiff"", getUnifiedDiff()); soyContextEmailData.put(""changeDetail"", getChangeDetail()); soyContextEmailData.put(""changeUrl"", getChangeUrl()); soyContextEmailData.put(""includeDiff"", getIncludeDiff()); java.util.Map<java.lang.String, java.lang.String> changeData = new java.util.HashMap<>(); changeData.put(""subject"", change.getSubject()); changeData.put(""originalSubject"", change.getOriginalSubject()); changeData.put(""ownerEmail"", getNameEmailFor(change.getOwner())); soyContext.put(""change"", changeData); java.util.Map<java.lang.String, java.lang.Object> patchSetData = new java.util.HashMap<>(); patchSetData.put(""patchSetId"", patchSet.getPatchSetId()); patchSetData.put(""refName"", patchSet.getRefName()); soyContext.put(""patchSet"", patchSetData); }",43479c29d043509ed27b0af94037432ac11a5446,setupSoyContext(),10167,304,280
130479,gerrit-server_src_main_java_com_google_gerrit_server_mail_send_NotificationEmail.java,3.0,@java.lang.Override protected void init() throws com.google.gerrit.common.errors.EmailException { super.init(); setListIdHeader(); },d0abaa91d22f3bde14c74cd01c544386e4062f24,@java.lang.Override protected void init() throws com.google.gerrit.common.errors.EmailException { super.init(); },68736d72961c01009d14c365cb37eb637d0982c3,init(),init(),7,4,@java.lang.Override protected void init() throws com.google.gerrit.common.errors.EmailException { super.init(); setListIdHeader(); },d0abaa91d22f3bde14c74cd01c544386e4062f24,init(),12641,30,35
76762,gerrit-war_src_main_java_com_google_gerrit_httpd_WebAppInitializer.java,7.0,private com.google.inject.Injector createWebInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<>(); modules.add(com.google.gerrit.httpd.RequestContextFilter.module()); modules.add(com.google.gerrit.httpd.AllRequestFilter.module()); modules.add(com.google.gerrit.httpd.RequestMetricsFilter.module()); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.GitOverHttpModule.class)); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.WebModule.class)); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.raw.StaticModule.class)); modules.add(sysInjector.getInstance(com.google.inject.Module.class)); if ((sshInjector) != null) { modules.add(sshInjector.getInstance(com.google.gerrit.httpd.WebSshGlueModule.class)); } else { modules.add(new com.google.gerrit.server.ssh.NoSshModule()); } modules.add(com.google.gerrit.httpd.H2CacheBasedWebSession.module()); modules.add(new com.google.gerrit.httpd.plugins.HttpPluginModule()); com.google.gerrit.server.config.AuthConfig authConfig = cfgInjector.getInstance(com.google.gerrit.server.config.AuthConfig.class); if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.client.AuthType.OPENID)) { modules.add(new com.google.gerrit.httpd.auth.openid.OpenIdModule()); } else if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.client.AuthType.OAUTH)) { modules.add(new com.google.gerrit.httpd.auth.oauth.OAuthModule()); } modules.add(sysInjector.getInstance(com.google.inject.Module.class)); return sysInjector.createChildInjector(modules); },5b8632a40d128c0e16a54b127f42391520918005,private com.google.inject.Injector createWebInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<>(); modules.add(com.google.gerrit.httpd.RequestContextFilter.module()); modules.add(com.google.gerrit.httpd.AllRequestFilter.module()); modules.add(com.google.gerrit.httpd.RequestMetricsFilter.module()); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.GitOverHttpModule.class)); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.WebModule.class)); modules.add(new com.google.gerrit.httpd.plugins.HttpPluginModule()); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.raw.StaticModule.class)); modules.add(sysInjector.getInstance(com.google.inject.Module.class)); if ((sshInjector) != null) { modules.add(sshInjector.getInstance(com.google.gerrit.httpd.WebSshGlueModule.class)); } else { modules.add(new com.google.gerrit.server.ssh.NoSshModule()); } modules.add(com.google.gerrit.httpd.H2CacheBasedWebSession.module()); com.google.gerrit.server.config.AuthConfig authConfig = cfgInjector.getInstance(com.google.gerrit.server.config.AuthConfig.class); if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.client.AuthType.OPENID)) { modules.add(new com.google.gerrit.httpd.auth.openid.OpenIdModule()); } else if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.client.AuthType.OAUTH)) { modules.add(new com.google.gerrit.httpd.auth.oauth.OAuthModule()); } modules.add(sysInjector.getInstance(com.google.inject.Module.class)); return sysInjector.createChildInjector(modules); },7c05a602489eaf3a1de1612d7fbe88887d145be6,createWebInjector(),createWebInjector(),5,7,private com.google.inject.Injector createWebInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<>(); modules.add(com.google.gerrit.httpd.RequestContextFilter.module()); modules.add(com.google.gerrit.httpd.AllRequestFilter.module()); modules.add(com.google.gerrit.httpd.RequestMetricsFilter.module()); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.GitOverHttpModule.class)); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.WebModule.class)); modules.add(sysInjector.getInstance(com.google.inject.Module.class)); if ((sshInjector) != null) { modules.add(sshInjector.getInstance(com.google.gerrit.httpd.WebSshGlueModule.class)); } else { modules.add(new com.google.gerrit.server.ssh.NoSshModule()); } modules.add(com.google.gerrit.httpd.H2CacheBasedWebSession.module()); modules.add(new com.google.gerrit.httpd.plugins.HttpPluginModule()); com.google.gerrit.server.config.AuthConfig authConfig = cfgInjector.getInstance(com.google.gerrit.server.config.AuthConfig.class); if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.client.AuthType.OPENID)) { modules.add(new com.google.gerrit.httpd.auth.openid.OpenIdModule()); } else if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.client.AuthType.OAUTH)) { modules.add(new com.google.gerrit.httpd.auth.oauth.OAuthModule()); } modules.add(sysInjector.getInstance(com.google.inject.Module.class)); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.raw.StaticModule.class)); return sysInjector.createChildInjector(modules); },161094bb49c0a52a6e72d8d2de64436745f6443b,createWebInjector(),130369,472,472
78821,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_SubmitByMergeAlwaysIT.java,1.0,"@org.junit.Test public void submitWithMergeIfFastForwardPossible() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getParentCount()).isEqualTo(2); assertThat(head.getParent(0)).isEqualTo(oldHead); assertThat(head.getParent(1)).isEqualTo(change.getCommit()); assertSubmitter(change.getChangeId(), 1); assertPersonEquals(admin.getIdent(), head.getAuthorIdent()); assertPersonEquals(serverIdent.get(), head.getCommitterIdent()); }",1537107cbfe0b60f0c5b8ed5b52c2d9735d18ab3,"@org.junit.Test public void submitWithMergeIfFastForwardPossible() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit initialHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit headAfterSubmit = getRemoteHead(); assertThat(headAfterSubmit.getParentCount()).isEqualTo(2); assertThat(headAfterSubmit.getParent(0)).isEqualTo(initialHead); assertThat(headAfterSubmit.getParent(1)).isEqualTo(change.getCommit()); assertSubmitter(change.getChangeId(), 1); assertPersonEquals(admin.getIdent(), headAfterSubmit.getAuthorIdent()); assertPersonEquals(serverIdent.get(), headAfterSubmit.getCommitterIdent()); assertRefUpdatedEvents(initialHead, headAfterSubmit); assertChangeMergedEvents(1); }",86cecb63f90609cf516f394a751d7fdb5114847b,submitWithMergeIfFastForwardPossible(),submitWithMergeIfFastForwardPossible(),6,1,"@org.junit.Test public void submitWithMergeIfFastForwardPossible() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit initialHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit headAfterSubmit = getRemoteHead(); assertThat(headAfterSubmit.getParentCount()).isEqualTo(2); assertThat(headAfterSubmit.getParent(0)).isEqualTo(initialHead); assertThat(headAfterSubmit.getParent(1)).isEqualTo(change.getCommit()); assertSubmitter(change.getChangeId(), 1); assertPersonEquals(admin.getIdent(), headAfterSubmit.getAuthorIdent()); assertPersonEquals(serverIdent.get(), headAfterSubmit.getCommitterIdent()); assertRefUpdatedEvents(initialHead, headAfterSubmit); assertChangeMergedEvents(change.getChangeId(), headAfterSubmit.name()); }",a9deb3ea3efed5de91fd132d59f66c6a9e84ac19,submitWithMergeIfFastForwardPossible(),61849,194,206
30370,gerrit-common_src_main_java_com_google_gerrit_common_data_GitwebLink.java,5.0,"public java.lang.String toProject(final com.google.gerrit.reviewdb.Project.NameKey project) { com.google.gerrit.common.data.ParameterizedString pattern = new com.google.gerrit.common.data.ParameterizedString(type.getProject()); final java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<java.lang.String, java.lang.String>(); p.put(""project"", com.google.gwt.http.client.URL.encodeQueryString(project.get())); return (baseUrl) + (pattern.replace(p)); }",4de4da8d7bd3fd118351efa5259d8ed83746c525,"public java.lang.String toProject(final com.google.gerrit.reviewdb.Project.NameKey project) { com.google.gerrit.common.data.ParameterizedString pattern = new com.google.gerrit.common.data.ParameterizedString(type.getProject()); final java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<java.lang.String, java.lang.String>(); p.put(""project"", com.google.gwt.http.client.URL.encode(project.get())); return (baseUrl) + (pattern.replace(p)); }",acf43538b1ff00fc56628bc57f979929069ff850,toProject(com.google.gerrit.reviewdb.Project$NameKey),toProject(com.google.gerrit.reviewdb.Project$NameKey),8,5,"public java.lang.String toProject(final com.google.gerrit.reviewdb.Project.NameKey project) { com.google.gerrit.common.data.ParameterizedString pattern = new com.google.gerrit.common.data.ParameterizedString(type.getProject()); final java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<java.lang.String, java.lang.String>(); p.put(""project"", encode(project.get())); return (baseUrl) + (pattern.replace(p)); }",6803f4e1579364d9393dc7d1dc42a25775f95fb4,toProject(com.google.gerrit.reviewdb.Project$NameKey),61301,139,127
46015,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_CodeMirrorDemo.java,4.0,"private void display(com.google.gerrit.client.diff.DiffInfo diff) { net.codemirror.lib.Configuration cfg = net.codemirror.lib.Configuration.create().set(""readOnly"", true).set(""lineNumbers"", true).set(""tabSize"", 2).set(""value"", diff.text_b()); if (((diff.meta_b()) != null) && ((diff.meta_b().content_type()) != null)) { cfg.set(""mode"", diff.meta_b().content_type()); } cm = net.codemirror.lib.CodeMirror.create(editorContainer.getElement(), cfg); cm.setWidth(""100%""); cm.setHeight(((com.google.gwt.user.client.Window.getClientHeight()) - (com.google.gerrit.client.diff.CodeMirrorDemo.HEADER_FOOTER))); resizeHandler = com.google.gwt.user.client.Window.addResizeHandler(new com.google.gwt.event.logical.shared.ResizeHandler() { @java.lang.Override public void onResize(com.google.gwt.event.logical.shared.ResizeEvent event) { cm.setHeight(((event.getHeight()) - (com.google.gerrit.client.diff.CodeMirrorDemo.HEADER_FOOTER))); cm.refresh(); } }); }",13d30803c0a756909a3238983e6f0fa021dcfbd3,"private void display(com.google.gerrit.client.diff.DiffInfo diff) { net.codemirror.lib.Configuration cfg = net.codemirror.lib.Configuration.create().set(""readOnly"", true).set(""lineNumbers"", true).set(""tabSize"", 2).set(""value"", diff.text_b()); if (((diff.meta_b()) != null) && ((diff.meta_b().content_type()) != null)) { java.lang.String mode = diff.meta_b().content_type(); if (""text/x-java-source"".equals(mode)) { mode = ""text/x-java""; } cfg.set(""mode"", mode); } cm = net.codemirror.lib.CodeMirror.create(editorContainer.getElement(), cfg); cm.setWidth(""100%""); cm.setHeight(((com.google.gwt.user.client.Window.getClientHeight()) - (com.google.gerrit.client.diff.CodeMirrorDemo.HEADER_FOOTER))); resizeHandler = com.google.gwt.user.client.Window.addResizeHandler(new com.google.gwt.event.logical.shared.ResizeHandler() { @java.lang.Override public void onResize(com.google.gwt.event.logical.shared.ResizeEvent event) { cm.setHeight(((event.getHeight()) - (com.google.gerrit.client.diff.CodeMirrorDemo.HEADER_FOOTER))); cm.refresh(); } }); }",bafb6af92cd4efa465eb47d63a65fb77b7aa5465,display(com.google.gerrit.client.diff.DiffInfo),display(com.google.gerrit.client.diff.DiffInfo),2,5,"private void display(com.google.gerrit.client.diff.DiffInfo diff) { net.codemirror.lib.Configuration cfg = net.codemirror.lib.Configuration.create().set(""readOnly"", true).set(""lineNumbers"", true).set(""tabSize"", 2).set(""mode"", com.google.gerrit.client.diff.CodeMirrorDemo.getContentType(diff.meta_b())).set(""value"", diff.text_b()); cm = net.codemirror.lib.CodeMirror.create(editorContainer.getElement(), cfg); cm.setWidth(""100%""); cm.setHeight(((com.google.gwt.user.client.Window.getClientHeight()) - (com.google.gerrit.client.diff.CodeMirrorDemo.HEADER_FOOTER))); resizeHandler = com.google.gwt.user.client.Window.addResizeHandler(new com.google.gwt.event.logical.shared.ResizeHandler() { @java.lang.Override public void onResize(com.google.gwt.event.logical.shared.ResizeEvent event) { cm.setHeight(((event.getHeight()) - (com.google.gerrit.client.diff.CodeMirrorDemo.HEADER_FOOTER))); cm.refresh(); } }); }",a0cf901541957199ad5c2fe376b79df8983d61db,display(com.google.gerrit.client.diff.DiffInfo),91084,319,266
76055,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeRebuilderImpl.java,,,,private void setStatus(com.google.gerrit.server.notedb.ChangeUpdate update) { java.lang.String msg = message.getMessage(); if (com.google.gerrit.server.notedb.ChangeRebuilderImpl.ChangeMessageEvent.STATUS_ABANDONED_REGEXP.matcher(msg).matches()) { update.setStatus(Change.Status.ABANDONED); notedbChange.setStatus(Change.Status.ABANDONED); return; } if (com.google.gerrit.server.notedb.ChangeRebuilderImpl.ChangeMessageEvent.STATUS_RESTORED_REGEXP.matcher(msg).matches()) { update.setStatus(Change.Status.NEW); notedbChange.setStatus(Change.Status.NEW); } },052a4c59966906ebc01ff173f9144fa0b21f53c6,,setStatus(com.google.gerrit.server.notedb.ChangeUpdate),10,19,private void setStatus(com.google.gerrit.server.notedb.ChangeUpdate update) { java.lang.String msg = message.getMessage(); if (com.google.gerrit.server.notedb.ChangeRebuilderImpl.ChangeMessageEvent.STATUS_ABANDONED_REGEXP.matcher(msg).matches()) { update.setStatus(Change.Status.ABANDONED); noteDbChange.setStatus(Change.Status.ABANDONED); return; } if (com.google.gerrit.server.notedb.ChangeRebuilderImpl.ChangeMessageEvent.STATUS_RESTORED_REGEXP.matcher(msg).matches()) { update.setStatus(Change.Status.NEW); noteDbChange.setStatus(Change.Status.NEW); } },e3793b8e823c55473acf715919d7c1fb80cd38b4,setStatus(com.google.gerrit.server.notedb.ChangeUpdate),138317,163,163
20554,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_AccountGroupScreen.java,43.0,@java.lang.Override protected void onInitUI() { super.onInitUI(); initName(); initOwner(); initDescription(); initGroupType(); initMemberList(); initExternal(); },1c21e9760e0e7f8ab2080e39a3b09c6844b25a02,"@java.lang.Override protected void onInitUI() { super.onInitUI(); initName(); initOwner(); initDescription(); initGroupType(); initGroupNotifications(); com.google.gwt.user.client.ui.Label spacer = new com.google.gwt.user.client.ui.Label(""""); spacer.setHeight(""15px""); add(spacer); initMemberList(); initExternal(); }",ea20064322bd32e3b9cbd7ff50b55b2ce0aef8db,onInitUI(),onInitUI(),3,44,@java.lang.Override protected void onInitUI() { super.onInitUI(); initName(); initOwner(); initDescription(); initGroupOptions(); initGroupType(); initMemberList(); initExternal(); },64207bd1165e1c795a69ba94a9758bd6163159ad,onInitUI(),203073,88,44
97796,gerrit-server_src_main_java_com_google_gerrit_server_patch_PatchList.java,6.0,private int search(final java.lang.String fileName) { if (Patch.COMMIT_MSG.equals(fileName)) { return 0; } if ((isMerge) && (Patch.MERGE_LIST.equals(fileName))) { return 1; } int high = patches.length; int low = (isMerge) ? 2 : 1; while (low < high) { final int mid = (low + high) >>> 1; final int cmp = patches[mid].getNewName().compareTo(fileName); if (cmp < 0) { low = mid + 1; } else if (cmp == 0) { return mid; } else { high = mid; } } return -(low + 1); },e9189759468e7bdf39361d07d56a844e90a9213c,"private int search(final java.lang.String fileName) { if (Patch.COMMIT_MSG.equals(fileName)) { return 0; } if ((isMerge) && (Patch.MERGE_LIST.equals(fileName))) { return 1; } com.google.gerrit.server.patch.PatchListEntry want = com.google.gerrit.server.patch.PatchListEntry.empty(fileName); return java.util.Arrays.binarySearch(patches, (isMerge ? 2 : 1), patches.length, want, new java.util.Comparator<com.google.gerrit.server.patch.PatchListEntry>() { @java.lang.Override public int compare(com.google.gerrit.server.patch.PatchListEntry o1, com.google.gerrit.server.patch.PatchListEntry o2) { return o1.getNewName().compareTo(o2.getNewName()); } }); }",dd6f4550b9d2e48ea26f7453dd0d32beb16335d7,search(java.lang.String),search(java.lang.String),4,7,"private int search(final java.lang.String fileName) { com.google.gerrit.server.patch.PatchListEntry want = com.google.gerrit.server.patch.PatchListEntry.empty(fileName); return java.util.Arrays.binarySearch(patches, 0, patches.length, want, com.google.gerrit.server.patch.PatchList.PATCH_CMP); }",80210c0669a7043d4d1bcc716457edf54e611cd0,search(java.lang.String),27600,196,87
104850,src_main_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_RestForwarder.java,12.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"boolean execute() { for (; ;) { try { (execCnt)++; tryOnce(); return true; } catch (com.ericsson.gerrit.plugins.highavailability.forwarder.rest.ForwardingException e) { if (!(e.isRecoverable())) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.log.error((""Failed to "" + (name)), e); return false; } if ((execCnt) >= (cfg.getMaxTries())) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.log.error(((((""Failed to "" + (name)) + "", after "") + (cfg.getMaxTries())) + "" tries"")); return false; } logRetry(e); try { java.lang.Thread.sleep(cfg.getRetryInterval()); } catch (java.lang.InterruptedException ie) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.log.error(((name) + "" was interrupted, giving up""), ie); } } } }",78a95ee723c10f203e985cf1b319a5acb4e8a5dc,,execute(),8,13,"boolean execute() { for (; ;) { try { (execCnt)++; tryOnce(); return true; } catch (com.ericsson.gerrit.plugins.highavailability.forwarder.rest.ForwardingException e) { if (!(e.isRecoverable())) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.log.error(""Failed to {}"", name, e); return false; } if ((execCnt) >= (cfg.getMaxTries())) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.log.error(""Failed to {}, after {} tries"", name, cfg.getMaxTries()); return false; } logRetry(e); try { java.lang.Thread.sleep(cfg.getRetryInterval()); } catch (java.lang.InterruptedException ie) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.log.error(""{} was interrupted, giving up"", name, ie); java.lang.Thread.currentThread().interrupt(); return false; } } } }",b1f0f816cacf93148141328eb81712793d7dfd8f,execute(),65729,251,246
162993,java_com_google_gerrit_server_git_MergeOp.java,3.0,"public static void checkSubmitRule(com.google.gerrit.server.query.change.ChangeData cd, boolean allowClosed) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet patchSet = cd.currentPatchSet(); if (patchSet == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""missing current patch set for change "" + (cd.getId()))); } java.util.List<com.google.gerrit.common.data.SubmitRecord> results = com.google.gerrit.server.git.MergeOp.getSubmitRecords(cd, allowClosed); if (com.google.gerrit.common.data.SubmitRecord.findOkRecord(results).isPresent()) { return; } else if (results.isEmpty()) { throw new java.lang.IllegalStateException(java.lang.String.format(""SubmitRuleEvaluator.evaluate for change %s returned empty list for %s in %s"", cd.getId(), patchSet.getId(), cd.change().getProject().get())); } for (com.google.gerrit.common.data.SubmitRecord record : results) { switch (record.status) { case CLOSED : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is closed""); case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""submit rule error: "" + (record.errorMessage))); case NOT_READY : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case FORCED : case OK : default : throw new java.lang.IllegalStateException(java.lang.String.format(""Unexpected SubmitRecord status %s for %s in %s"", record.status, patchSet.getId().getId(), cd.change().getProject().get())); } } throw new java.lang.IllegalStateException(); }",6ace23a6e45b2f72fde0660619f94766b5fa1d6a,"public static void checkSubmitRule(com.google.gerrit.server.query.change.ChangeData cd, boolean allowClosed) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet patchSet = cd.currentPatchSet(); if (patchSet == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""missing current patch set for change "" + (cd.getId()))); } java.util.List<com.google.gerrit.common.data.SubmitRecord> results = com.google.gerrit.server.git.MergeOp.getSubmitRecords(cd, allowClosed); if (com.google.gerrit.common.data.SubmitRecord.canBeSubmitted(results)) { return; } else if (results.isEmpty()) { throw new java.lang.IllegalStateException(java.lang.String.format(""SubmitRuleEvaluator.evaluate for change %s returned empty list for %s in %s"", cd.getId(), patchSet.getId(), cd.change().getProject().get())); } for (com.google.gerrit.common.data.SubmitRecord record : results) { switch (record.status) { case OK : break; case CLOSED : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is closed""); case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""submit rule error: "" + (record.errorMessage))); case NOT_READY : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case FORCED : default : throw new java.lang.IllegalStateException(java.lang.String.format(""Unexpected SubmitRecord status %s for %s in %s"", record.status, patchSet.getId().getId(), cd.change().getProject().get())); } } throw new java.lang.IllegalStateException(); }",6669eebb2aa456097c58777782ee9b5d30196bd9,"checkSubmitRule(com.google.gerrit.server.query.change.ChangeData,boolean)","checkSubmitRule(com.google.gerrit.server.query.change.ChangeData,boolean)",21,3,"public static void checkSubmitRule(com.google.gerrit.server.query.change.ChangeData cd, boolean allowClosed) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet patchSet = cd.currentPatchSet(); if (patchSet == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""missing current patch set for change "" + (cd.getId()))); } java.util.List<com.google.gerrit.common.data.SubmitRecord> results = com.google.gerrit.server.git.MergeOp.getSubmitRecords(cd, allowClosed); if (com.google.gerrit.common.data.SubmitRecord.allRecordsOK(results)) { return; } else if (results.isEmpty()) { throw new java.lang.IllegalStateException(java.lang.String.format(""SubmitRuleEvaluator.evaluate for change %s returned empty list for %s in %s"", cd.getId(), patchSet.getId(), cd.change().getProject().get())); } for (com.google.gerrit.common.data.SubmitRecord record : results) { switch (record.status) { case OK : break; case CLOSED : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is closed""); case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""submit rule error: "" + (record.errorMessage))); case NOT_READY : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case FORCED : default : throw new java.lang.IllegalStateException(java.lang.String.format(""Unexpected SubmitRecord status %s for %s in %s"", record.status, patchSet.getId().getId(), cd.change().getProject().get())); } } throw new java.lang.IllegalStateException(); }",2ac71635f58df699e709ae727323c281251c643f,"checkSubmitRule(com.google.gerrit.server.query.change.ChangeData,boolean)",109637,471,472
72237,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_TagsIT.java,4.0,"@org.junit.Test public void listTagsOfNonVisibleProjectWithApi() throws java.lang.Exception { blockRead(project, ""refs/*""); exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); gApi.projects().name(project.get()).tags(); exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); gApi.projects().name(project.get()).tag(""tag"").get(); }",9bec6d3be6ee3d8f1fee13e574044691c6e86fce,"@org.junit.Test public void listTagsOfNonVisibleProjectWithApi() throws java.lang.Exception { blockRead(project, ""refs/*""); exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); gApi.projects().name(project.get()).tags(); }",fb718856efb4f25be8e0072ea4ca05a447f012ca,listTagsOfNonVisibleProjectWithApi(),listTagsOfNonVisibleProjectWithApi(),4,4,"@org.junit.Test public void listTagsOfNonVisibleProjectWithApi() throws java.lang.Exception { blockRead(project, ""refs/*""); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); gApi.projects().name(project.get()).tags().get(); }",c13fdb49d26a7e0b091ac2c2c549e81503290a00,listTagsOfNonVisibleProjectWithApi(),162305,69,77
80402,src_main_java_com_googlesource_gerrit_plugins_verifystatus_client_JobsPanel.java,2.0,"private void display(java.util.Map<java.lang.String, com.googlesource.gerrit.plugins.verifystatus.client.VerificationInfo> jobs) { int row = 0; int column = 1; com.google.gwt.user.client.ui.Grid grid = new com.google.gwt.user.client.ui.Grid(row, column); for (java.util.Map.Entry<java.lang.String, com.googlesource.gerrit.plugins.verifystatus.client.VerificationInfo> job : jobs.entrySet()) { grid.insertRow(row); com.google.gwt.user.client.ui.HorizontalPanel p = new com.google.gwt.user.client.ui.HorizontalPanel(); short vote = job.getValue().value(); if (vote > 0) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.greenCheck())); } else if (vote < 0) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.redNot())); } else if (vote == 0) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.warning())); } p.add(new com.google.gwt.user.client.ui.InlineHyperlink(job.getKey(), job.getValue().url())); p.add(new com.google.gwt.user.client.ui.InlineLabel((("" ("" + (job.getValue().duration())) + "")""))); if (job.getValue().abstain()) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.info())); } grid.setWidget(row, 0, p); row++; } add(grid); }",1f414d2696602cff463cbabb3c2bbf9f180a60e7,"private void display(java.util.Map<java.lang.String, com.googlesource.gerrit.plugins.verifystatus.client.VerificationInfo> jobs) { int row = 0; int column = 1; com.google.gwt.user.client.ui.Grid grid = new com.google.gwt.user.client.ui.Grid(row, column); for (java.util.Map.Entry<java.lang.String, com.googlesource.gerrit.plugins.verifystatus.client.VerificationInfo> job : jobs.entrySet()) { grid.insertRow(row); com.google.gwt.user.client.ui.HorizontalPanel p = new com.google.gwt.user.client.ui.HorizontalPanel(); short vote = job.getValue().value(); if (vote > 0) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.greenCheck())); } else if (vote < 0) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.redNot())); } else if (vote == 0) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.warning())); } p.add(new com.google.gwt.user.client.ui.InlineHyperlink(job.getValue().name(), job.getValue().url())); p.add(new com.google.gwt.user.client.ui.InlineLabel((("" ("" + (job.getValue().duration())) + "")""))); if (job.getValue().abstain()) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.info())); } grid.setWidget(row, 0, p); row++; } add(grid); }",2ecfb8da5d20477fc695588856616583aff4a0ce,display(java.util.Map),display(java.util.Map),4,2,"private void display(java.util.Map<java.lang.String, com.googlesource.gerrit.plugins.verifystatus.client.VerificationInfo> jobs) { int row = 0; int column = 1; com.google.gwt.user.client.ui.Grid grid = new com.google.gwt.user.client.ui.Grid(row, column); for (java.util.Map.Entry<java.lang.String, com.googlesource.gerrit.plugins.verifystatus.client.VerificationInfo> job : jobs.entrySet()) { grid.insertRow(row); com.google.gwt.user.client.ui.HorizontalPanel p = new com.google.gwt.user.client.ui.HorizontalPanel(); short vote = job.getValue().value(); if (vote > 0) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.greenCheck())); } else if (vote < 0) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.redNot())); } else if (vote == 0) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.warning())); } p.add(new com.google.gwt.user.client.ui.InlineHyperlink(job.getKey(), job.getValue().url())); p.add(new com.google.gwt.user.client.ui.InlineLabel((("" ("" + (job.getValue().duration())) + "")""))); if (job.getValue().abstain()) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.info())); } grid.setWidget(row, 0, p); row++; } add(grid); }",1f414d2696602cff463cbabb3c2bbf9f180a60e7,display(java.util.Map),166511,400,398
76892,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_UnifiedChunkManager.java,3.0,"com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo getLineRegionInfoFromCmLine(int cmLine) { int res = java.util.Collections.binarySearch(chunks, new com.google.gerrit.client.diff.UnifiedDiffChunkInfo(DisplaySide.A, 0, 0, 0, cmLine, false), getDiffChunkComparatorCmLine()); if (res >= 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get(res); return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(info.start, com.google.gerrit.client.diff.UnifiedChunkManager.displaySideToRegionType(info.side)); } else { res = (-res) - 1; if (res > 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get((res - 1)); int lineOnInfoSide = ((info.start) + cmLine) - (info.cmLine); if (lineOnInfoSide > (info.end)) { if ((info.side) == (DisplaySide.A)) { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(getLineMapper().lineOnOther(DisplaySide.A, lineOnInfoSide).getLine(), com.google.gerrit.client.diff.UnifiedChunkManager.RegionType.COMMON); } else { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(lineOnInfoSide, com.google.gerrit.client.diff.UnifiedChunkManager.RegionType.COMMON); } } else { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(lineOnInfoSide, com.google.gerrit.client.diff.UnifiedChunkManager.displaySideToRegionType(info.side)); } } else { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(cmLine, com.google.gerrit.client.diff.UnifiedChunkManager.RegionType.COMMON); } } }",bb52ee3b605237fcaaee14ec865ad1cccc5eff1b,"com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo getLineRegionInfoFromCmLine(int cmLine) { int res = java.util.Collections.binarySearch(chunks, new com.google.gerrit.client.diff.UnifiedDiffChunkInfo(DisplaySide.A, 0, 0, 0, cmLine, false), getDiffChunkComparatorCmLine()); if (res >= 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get(res); return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(info.start, com.google.gerrit.client.diff.UnifiedChunkManager.displaySideToRegionType(info.side)); } else { res = (-res) - 1; if (res > 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get((res - 1)); int lineOnInfoSide = ((info.start) + cmLine) - (info.cmLine); if (lineOnInfoSide > (info.end)) { if ((info.side) == (DisplaySide.A)) { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(mapper.lineOnOther(DisplaySide.A, lineOnInfoSide).getLine(), com.google.gerrit.client.diff.UnifiedChunkManager.RegionType.COMMON); } else { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(lineOnInfoSide, com.google.gerrit.client.diff.UnifiedChunkManager.RegionType.COMMON); } } else { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(lineOnInfoSide, com.google.gerrit.client.diff.UnifiedChunkManager.displaySideToRegionType(info.side)); } } else { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(cmLine, com.google.gerrit.client.diff.UnifiedChunkManager.RegionType.COMMON); } } }",04b0c6cbdd1c933c1c5a863a92e60d0808d1ae6e,getLineRegionInfoFromCmLine(int),getLineRegionInfoFromCmLine(int),4,3,"com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo getLineRegionInfoFromCmLine(int cmLine) { int res = java.util.Collections.binarySearch(chunks, new com.google.gerrit.client.diff.UnifiedDiffChunkInfo(DisplaySide.A, 0, 0, 0, cmLine, false), getDiffChunkComparatorCmLine()); if (res >= 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get(res); return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(info.start, com.google.gerrit.client.diff.UnifiedChunkManager.displaySideToRegionType(info.side)); } else { res = (-res) - 1; if (res > 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get((res - 1)); int lineOnInfoSide = ((info.start) + cmLine) - (info.cmLine); if (lineOnInfoSide > (info.end)) { if ((info.side) == (DisplaySide.A)) { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(lineMapper.lineOnOther(DisplaySide.A, lineOnInfoSide).getLine(), com.google.gerrit.client.diff.UnifiedChunkManager.RegionType.COMMON); } else { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(lineOnInfoSide, com.google.gerrit.client.diff.UnifiedChunkManager.RegionType.COMMON); } } else { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(lineOnInfoSide, com.google.gerrit.client.diff.UnifiedChunkManager.displaySideToRegionType(info.side)); } } else { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(cmLine, com.google.gerrit.client.diff.UnifiedChunkManager.RegionType.COMMON); } } }",9feea7f70d74969908c7032f0f7e867a78b17d57,getLineRegionInfoFromCmLine(int),135467,472,473
93409,gerrit-server_src_main_java_com_google_gerrit_server_account_ExternalIdsUpdate.java,,,,"public synchronized void replace(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.ExternalId.Key> toDelete, java.util.Collection<com.google.gerrit.server.account.ExternalId> toAdd) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.ExternalIdsUpdate.checkSameAccount(toAdd, accountId); db.accountExternalIds().deleteKeys(com.google.gerrit.server.account.ExternalIdsUpdate.toAccountExternalIdKeys(toDelete)); db.accountExternalIds().insert(com.google.gerrit.server.account.ExternalIdsUpdate.toAccountExternalIds(toAdd)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectInserter ins = repo.newObjectInserter()) { org.eclipse.jgit.lib.ObjectId rev = com.google.gerrit.server.account.ExternalIds.readRevision(repo); org.eclipse.jgit.notes.NoteMap noteMap = com.google.gerrit.server.account.ExternalIds.readNoteMap(rw, rev); for (com.google.gerrit.server.account.ExternalId.Key extIdKey : toDelete) { com.google.gerrit.server.account.ExternalIdsUpdate.remove(rw, noteMap, accountId, extIdKey); } for (com.google.gerrit.server.account.ExternalId extId : toAdd) { com.google.gerrit.server.account.ExternalIdsUpdate.insert(ins, noteMap, extId); } commit(repo, rw, ins, rev, noteMap); } externalIdCache.replaceByKeys(accountId, toDelete, toAdd); }",6cb64fb179be4ca33910304a0bd402d996a776c5,,"replace(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection,java.util.Collection)",27,1,"public void replace(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.ExternalId.Key> toDelete, java.util.Collection<com.google.gerrit.server.account.ExternalId> toAdd) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.ExternalIdsUpdate.checkSameAccount(toAdd, accountId); db.accountExternalIds().deleteKeys(Key.toAccountExternalIdKeys(toDelete)); db.accountExternalIds().insert(com.google.gerrit.server.account.ExternalId.toAccountExternalIds(toAdd)); updateNoteMap(( o) -> { for (com.google.gerrit.server.account.ExternalId.Key extIdKey : toDelete) { com.google.gerrit.server.account.ExternalIdsUpdate.remove(o.rw(), o.noteMap(), accountId, extIdKey); } for (com.google.gerrit.server.account.ExternalId extId : toAdd) { com.google.gerrit.server.account.ExternalIdsUpdate.insert(o.rw(), o.ins(), o.noteMap(), extId); } }); }",a152e2835f205a9e8ed712c05f384c3a8dd0d170,"replace(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection,java.util.Collection)",179281,489,321
74492,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotes.java,29.0,"public com.google.gerrit.reviewdb.client.PatchSet getCurrentPatchSet() { com.google.gerrit.reviewdb.client.PatchSet.Id psId = change.currentPatchSetId(); return checkNotNull(patchSets.get(psId), ""missing current patch set %s"", psId.get()); }",1488cabaa9e36489385c68ce4361650658d46f82,"public com.google.gerrit.reviewdb.client.PatchSet getCurrentPatchSet() { checkState(((change) != null), ""getCurrentPatchSet() only valid after loading the change notes""); com.google.gerrit.reviewdb.client.PatchSet.Id psId = change.currentPatchSetId(); return checkNotNull(patchSets.get(psId), ""missing current patch set %s"", psId.get()); }",66ecf0b50bbb532e46079d73dc9b925ad8be9662,getCurrentPatchSet(),getCurrentPatchSet(),14,29,"public com.google.gerrit.reviewdb.client.PatchSet getCurrentPatchSet() { com.google.gerrit.reviewdb.client.PatchSet.Id psId = change.currentPatchSetId(); return checkNotNull(patchSets.get(psId), ""missing current patch set %s"", psId.get()); }",1488cabaa9e36489385c68ce4361650658d46f82,getCurrentPatchSet(),158243,93,73
30024,gerrit-server_src_main_java_com_google_gerrit_server_account_PerformVisibleGroups.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.common.data.GroupList createGroupList(final java.util.List<com.google.gerrit.reviewdb.AccountGroup> groups) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.client.OrmException { final java.util.List<com.google.gerrit.common.data.GroupDetail> groupDetailList = new java.util.ArrayList<com.google.gerrit.common.data.GroupDetail>(); for (final com.google.gerrit.reviewdb.AccountGroup group : groups) { groupDetailList.add(groupDetailFactory.create(group.getId()).call()); } final com.google.gerrit.common.data.GroupList groupList = new com.google.gerrit.common.data.GroupList(); groupList.setGroups(groupDetailList); groupList.setCanCreateGroup(identifiedUser.get().getCapabilities().canCreateGroup()); return groupList; }",6bd9b96b1fa7ae3aa84ee40dad52df1e541d6e28,,createGroupList(java.util.List),3,5,"private com.google.gerrit.common.data.GroupList createGroupList(final java.util.List<com.google.gerrit.reviewdb.AccountGroup> groups) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.client.OrmException { final java.util.List<com.google.gerrit.common.data.GroupDetail> groupDetailList = new java.util.ArrayList<com.google.gerrit.common.data.GroupDetail>(); for (final com.google.gerrit.reviewdb.AccountGroup group : groups) { groupDetailList.add(groupDetailFactory.create(group.getId()).call()); } return new com.google.gerrit.common.data.GroupList(groupDetailList, identifiedUser.get().getCapabilities().canCreateGroup()); }",05de51a417a10c6a360358408369282099abeb26,createGroupList(java.util.List),212778,226,191
92436,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_mail_MailProcessorIT.java,,,,"private java.lang.String createChangeForTest() throws java.lang.Exception { java.lang.String file = ""gerrit-server/test.txt""; java.lang.String contents = ""contents \nlorem \nipsum \nlorem""; com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo, ""first subject"", file, contents); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(""refs/for/master""); java.lang.String changeId = r.getChangeId(); ReviewInput input = new ReviewInput(); input.message = ""I have two comments""; input.comments = new java.util.HashMap(); CommentInput c1 = com.google.gerrit.acceptance.server.mail.MailProcessorIT.newComment(file, Side.REVISION, 0, ""comment on file""); CommentInput c2 = com.google.gerrit.acceptance.server.mail.MailProcessorIT.newComment(file, Side.REVISION, 2, ""inline comment""); input.comments.put(c1.path, ImmutableList.of(c1, c2)); revision(r).review(input); return changeId; }",766999e71dd0db39b96aaadfa7ffcb963976ae68,,createChangeForTest(),3,2,"private java.lang.String createChangeWithReview() throws java.lang.Exception { java.lang.String file = ""gerrit-server/test.txt""; java.lang.String contents = ""contents \nlorem \nipsum \nlorem""; com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo, ""first subject"", file, contents); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(""refs/for/master""); java.lang.String changeId = r.getChangeId(); ReviewInput input = new ReviewInput(); input.message = ""I have two comments""; input.comments = new java.util.HashMap(); CommentInput c1 = com.google.gerrit.acceptance.server.mail.MailProcessorIT.newComment(file, Side.REVISION, 0, ""comment on file""); CommentInput c2 = com.google.gerrit.acceptance.server.mail.MailProcessorIT.newComment(file, Side.REVISION, 2, ""inline comment""); input.comments.put(c1.path, ImmutableList.of(c1, c2)); revision(r).review(input); return changeId; }",3b1de53db4750a95d8f9cf8d8f1f0c4e78d6d16d,createChangeWithReview(),109995,275,275
73842,gerrit-server_src_test_java_com_google_gerrit_server_query_change_AbstractQueryChangesTest.java,23.0,"@org.junit.Test public void byStatus() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testutil.InMemoryRepositoryManager.Repo> repo = createProject(""repo""); com.google.gerrit.server.change.ChangeInserter ins1 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change1 = ins1.getChange(); change1.setStatus(Change.Status.NEW); insert(ins1); com.google.gerrit.server.change.ChangeInserter ins2 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change2 = ins2.getChange(); change2.setStatus(Change.Status.MERGED); insert(ins2); assertQuery(""status:new"", change1); assertQuery(""status:NEW"", change1); assertQuery(""is:new"", change1); assertQuery(""status:merged"", change2); assertQuery(""is:merged"", change2); }",734aab4696fd5c18372bd5547ee66895207a8c87,"@org.junit.Test public void byStatus() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testutil.InMemoryRepositoryManager.Repo> repo = createProject(""repo""); com.google.gerrit.server.change.ChangeInserter ins1 = newChange(repo, Change.Status.NEW); com.google.gerrit.reviewdb.client.Change change1 = insert(ins1); com.google.gerrit.server.change.ChangeInserter ins2 = newChange(repo, Change.Status.MERGED); com.google.gerrit.reviewdb.client.Change change2 = insert(ins2); assertQuery(""status:new"", change1); assertQuery(""status:NEW"", change1); assertQuery(""is:new"", change1); assertQuery(""status:merged"", change2); assertQuery(""is:merged"", change2); }",8811cad62cf01cedcfb767585ffce914159e2560,byStatus(),byStatus(),5,23,"@org.junit.Test public void byStatus() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testutil.InMemoryRepositoryManager.Repo> repo = createProject(""repo""); com.google.gerrit.server.change.ChangeInserter ins1 = newChangeWithStatus(repo, Change.Status.NEW); com.google.gerrit.reviewdb.client.Change change1 = insert(ins1); com.google.gerrit.server.change.ChangeInserter ins2 = newChangeWithStatus(repo, Change.Status.MERGED); com.google.gerrit.reviewdb.client.Change change2 = insert(ins2); assertQuery(""status:new"", change1); assertQuery(""status:NEW"", change1); assertQuery(""is:new"", change1); assertQuery(""status:merged"", change2); assertQuery(""is:merged"", change2); }",3e22840cd5c9f05b18674a425d272f0253354b41,byStatus(),152709,200,204
77542,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_git_AbstractSubmoduleSubscription.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected org.eclipse.jgit.junit.TestRepository<?> createProjectWithPush(java.lang.String name, com.google.gerrit.reviewdb.client.Project.NameKey parent) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project = createProject(name, parent); grant(Permission.PUSH, project, ""refs/heads/*""); grant(Permission.SUBMIT, project, ""refs/for/refs/heads/*""); return cloneProject(project); }",f08d70c798bd28b939c1af57addda5b253205e21,,"createProjectWithPush(java.lang.String,com.google.gerrit.reviewdb.client.Project$NameKey)",12,1,"protected org.eclipse.jgit.junit.TestRepository<?> createProjectWithPush(java.lang.String name, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey parent) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project = createProject(name, parent); grant(Permission.PUSH, project, ""refs/heads/*""); grant(Permission.SUBMIT, project, ""refs/for/refs/heads/*""); return cloneProject(project); }",e9791f854bb7d55d71f038798bd390a06613f3b9,"createProjectWithPush(java.lang.String,com.google.gerrit.reviewdb.client.Project$NameKey)",76846,119,130
54044,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_project_LabelTypeIT.java,12.0,"@org.junit.Test public void noCopyMaxScoreOnRework() throws java.lang.Exception { java.lang.String subject = ""test commit""; java.lang.String file = ""a.txt""; com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent(), subject, file, ""first contents""); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(git, ""refs/for/master""); review(r, 2); assertApproval(r, 2); push = pushFactory.create(db, user.getIdent(), subject, file, ""second contents"", r.getChangeId()); r = push.to(git, ""refs/for/master""); assertApproval(r, 0); }",c8eefb0ac14559682702e4e3239a626175a65c9e,"@org.junit.Test public void noCopyMaxScoreOnRework() throws java.lang.Exception { java.lang.String subject = ""test commit""; java.lang.String file = ""a.txt""; com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent(), subject, file, ""first contents""); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(git, ""refs/for/master""); revision(r).approve(); assertApproval(r, 2); push = pushFactory.create(db, user.getIdent(), subject, file, ""second contents"", r.getChangeId()); r = push.to(git, ""refs/for/master""); assertApproval(r, 0); }",44872a051102d5c7fe04d936c50e4315bca8b41b,noCopyMaxScoreOnRework(),noCopyMaxScoreOnRework(),3,12,"@org.junit.Test public void noCopyMaxScoreOnRework() throws java.lang.Exception { java.lang.String subject = ""test commit""; java.lang.String file = ""a.txt""; com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent(), subject, file, ""first contents""); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(git, ""refs/for/master""); revision(r).review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); assertApproval(r, 2); push = pushFactory.create(db, user.getIdent(), subject, file, ""second contents"", r.getChangeId()); r = push.to(git, ""refs/for/master""); assertApproval(r, 0); }",4f662da23e0e8644327538fdf0f09f047e540ded,noCopyMaxScoreOnRework(),39649,175,195
148032,java_com_google_gerrit_server_restapi_project_CommitIncludedIn.java,0.0,"@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc.getCommit(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProjectState().getNameKey(); return includedIn.apply(project, commit.getId().getName()); }",dc91da5e784b02c042247e2d1241098c2777d3c9,"@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server.restapi.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc.getCommit(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProjectState().getNameKey(); return includedIn.apply(project, commit.getId().getName()); }",a938e75d57d6aef132c35fb9981c5f71c82cda12,apply(com.google.gerrit.server.project.CommitResource),apply(com.google.gerrit.server.restapi.project.CommitResource),17,0,"@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc.getCommit(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProjectState().getNameKey(); return includedIn.apply(project, commit.getId().getName()); }",dc91da5e784b02c042247e2d1241098c2777d3c9,apply(com.google.gerrit.server.project.CommitResource),216363,143,140
154493,java_com_google_gerrit_server_restapi_account_GetPreferences.java,0.0,"@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).getGeneralPreferences(); }",52051306787d9650c04d63d699b768827c9202fb,"@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.maybeGet(id).map(AccountState::getGeneralPreferences).orElseThrow(ResourceNotFoundException::new); }",57f42b449b3b6dec8fb58c7c154ea95071545afc,apply(com.google.gerrit.server.account.AccountResource),apply(com.google.gerrit.server.account.AccountResource),2,0,"@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.maybeGet(id).map(AccountState::getGeneralPreferences).orElseThrow(() -> new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.extensions.restapi.IdString.fromDecoded(id.toString()))); }",66a63b99b775f4dbd7358a4102e8d9ad4737be02,apply(com.google.gerrit.server.account.AccountResource),10819,153,188
68724,src_main_java_com_googlesource_gerrit_plugins_serviceuser_PutHttpPassword.java,,,,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.googlesource.gerrit.plugins.serviceuser.ServiceUserResource rsrc, com.googlesource.gerrit.plugins.serviceuser.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.googlesource.gerrit.plugins.serviceuser.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.Boolean httpPasswordAllowed = getConfig.get().apply(new com.google.gerrit.server.config.ConfigResource()).allowHttpPassword; java.lang.String newPassword; if (input.generate) { if (((httpPasswordAllowed == null) || (!httpPasswordAllowed)) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""not allowed to generate HTTP password""); } newPassword = com.googlesource.gerrit.plugins.serviceuser.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { if (((httpPasswordAllowed == null) || (!httpPasswordAllowed)) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""not allowed to clear HTTP password""); } newPassword = null; } else { if (!(self.get().getCapabilities().canAdministrateServer())) { throw new com.google.gerrit.extensions.restapi.AuthException((""not allowed to set HTTP password directly, "" + ""requires the Administrate Server permission"")); } newPassword = input.httpPassword; } return putHttpPassword.apply(rsrc.getUser(), newPassword); }",74bc10e9857a6c45a7372020fa145e9102ed1870,,"apply(com.googlesource.gerrit.plugins.serviceuser.ServiceUserResource,com.googlesource.gerrit.plugins.serviceuser.PutHttpPassword$Input)",4,0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.googlesource.gerrit.plugins.serviceuser.ServiceUserResource rsrc, com.googlesource.gerrit.plugins.serviceuser.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.googlesource.gerrit.plugins.serviceuser.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.Boolean httpPasswordAllowed = getConfig.get().apply(new com.google.gerrit.server.config.ConfigResource()).allowHttpPassword; if ((input.generate) || ((input.httpPassword) == null)) { if (((httpPasswordAllowed == null) || (!httpPasswordAllowed)) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""not allowed to generate HTTP password""); } } else { if (!(self.get().getCapabilities().canAdministrateServer())) { throw new com.google.gerrit.extensions.restapi.AuthException((""not allowed to set HTTP password directly, "" + ""requires the Administrate Server permission"")); } } java.lang.String newPassword = (input.generate) ? com.googlesource.gerrit.plugins.serviceuser.PutHttpPassword.generate() : input.httpPassword; return putHttpPassword.apply(rsrc.getUser(), newPassword); }",65b6b7cf895158c3b1c4b754750cfbae64de76d6,"apply(com.googlesource.gerrit.plugins.serviceuser.ServiceUserResource,com.googlesource.gerrit.plugins.serviceuser.PutHttpPassword$Input)",3241,469,408
76470,gerrit-pgm_src_main_java_com_google_gerrit_pgm_Init.java,2.0,"@java.lang.Override protected boolean beforeInit(com.google.gerrit.pgm.SiteInit init) throws java.lang.Exception { com.google.gerrit.pgm.util.ErrorLogFile.errorOnlyConsole(); if (!(skipPlugins)) { final java.util.List<com.google.gerrit.common.PluginData> plugins = com.google.gerrit.pgm.init.InitPlugins.listPluginsAndRemoveTempFiles(init.site, pluginsDistribution); com.google.gerrit.pgm.init.api.ConsoleUI ui = com.google.gerrit.pgm.init.api.ConsoleUI.getInstance(false); verifyInstallPluginList(ui, plugins); if (listPlugins) { if (!(plugins.isEmpty())) { ui.message(""Available plugins:\n""); for (com.google.gerrit.common.PluginData plugin : plugins) { ui.message("" * %s version %s\n"", plugin.name, plugin.version); } } else { ui.message(""No plugins found.\n""); } return true; } } return false; }",b3145007628d416542fdff5dd3392778419db316,"@java.lang.Override protected boolean beforeInit(com.google.gerrit.pgm.SiteInit init) throws java.lang.Exception { com.google.gerrit.pgm.util.ErrorLogFile.errorOnlyConsole(); if (!(skipPlugins)) { final java.util.List<com.google.gerrit.common.PluginData> plugins = com.google.gerrit.pgm.init.InitPlugins.listPluginsAndRemoveTempFiles(init.site, pluginsDistribution); com.google.gerrit.pgm.init.api.ConsoleUI ui = com.google.gerrit.pgm.init.api.ConsoleUI.getInstance(false); if ((installAllPlugins) && (!(com.google.gerrit.pgm.Init.nullOrEmpty(installPlugins)))) { ui.message(""Conflicting plugin installation options.\n""); return true; } verifyInstallPluginList(ui, plugins); if (listPlugins) { if (!(plugins.isEmpty())) { ui.message(""Available plugins:\n""); for (com.google.gerrit.common.PluginData plugin : plugins) { ui.message("" * %s version %s\n"", plugin.name, plugin.version); } } else { ui.message(""No plugins found.\n""); } return true; } } return false; }",e8cfca80875f95ade266f36abffe339ec31af9c0,beforeInit(com.google.gerrit.pgm.SiteInit),beforeInit(com.google.gerrit.pgm.SiteInit),2,2,"@java.lang.Override protected boolean beforeInit(com.google.gerrit.pgm.SiteInit init) throws java.lang.Exception { com.google.gerrit.pgm.util.ErrorLogFile.errorOnlyConsole(); if (!(skipPlugins)) { final java.util.List<com.google.gerrit.common.PluginData> plugins = com.google.gerrit.pgm.init.InitPlugins.listPluginsAndRemoveTempFiles(init.site, pluginsDistribution); com.google.gerrit.pgm.init.api.ConsoleUI ui = com.google.gerrit.pgm.init.api.ConsoleUI.getInstance(false); if ((installAllPlugins) && (!(com.google.gerrit.pgm.Init.nullOrEmpty(installPlugins)))) { ui.message(""Cannot use --install-plugin together with --install-all-plugins.\n""); return true; } verifyInstallPluginList(ui, plugins); if (listPlugins) { if (!(plugins.isEmpty())) { ui.message(""Available plugins:\n""); for (com.google.gerrit.common.PluginData plugin : plugins) { ui.message("" * %s version %s\n"", plugin.name, plugin.version); } } else { ui.message(""No plugins found.\n""); } return true; } } return false; }",f05e8072d9eee20ee6538973fb8d2762672587bf,beforeInit(com.google.gerrit.pgm.SiteInit),123090,288,297
114490,src_main_java_com_googlesource_gerrit_plugins_its_base_util_IssueExtractor.java,1.0,"public java.util.Map<java.lang.String, java.util.Set<java.lang.String>> getIssueIds(java.lang.String projectName, java.lang.String commitId, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId) { java.util.Map<java.lang.String, java.util.Set<java.lang.String>> current = getIssueIds(projectName, commitId); if (patchSetId != null) { java.util.Map<java.lang.String, java.util.Set<java.lang.String>> previous = com.google.common.collect.Maps.newHashMap(); if ((patchSetId.get()) != 1) { com.google.gerrit.reviewdb.client.PatchSet.Id previousPatchSetId = new com.google.gerrit.reviewdb.client.PatchSet.Id(patchSetId.getParentKey(), ((patchSetId.get()) - 1)); try { com.google.gerrit.reviewdb.client.PatchSet previousPatchSet = db.patchSets().get(previousPatchSetId); if (previousPatchSet != null) { previous = getIssueIds(projectName, previousPatchSet.getRevision().get()); } } catch (com.google.gwtorm.server.OrmException e) { } } for (java.lang.String issue : current.keySet()) { java.util.Set<java.lang.String> currentOccurrences = current.get(issue); java.util.Set<java.lang.String> previousOccurrences = previous.get(issue); java.util.Set<java.lang.String> newOccurrences; if ((previousOccurrences == null) || (previousOccurrences.isEmpty())) { newOccurrences = com.google.common.collect.Sets.newHashSet(currentOccurrences); } else { newOccurrences = com.google.common.collect.Sets.newHashSet(currentOccurrences); newOccurrences.removeAll(previousOccurrences); } for (java.lang.String occurrence : newOccurrences) { currentOccurrences.add((""added@"" + occurrence)); } } } return current; }",da59b8782a89816225801bb5e4928b56bf6934f8,"public java.util.Map<java.lang.String, java.util.Set<java.lang.String>> getIssueIds(java.lang.String projectName, java.lang.String commitId, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId) { java.util.Map<java.lang.String, java.util.Set<java.lang.String>> current = getIssueIds(projectName, commitId); if (patchSetId != null) { java.util.Map<java.lang.String, java.util.Set<java.lang.String>> previous = com.google.common.collect.Maps.newHashMap(); if ((patchSetId.get()) != 1) { try { java.lang.String previousRevision = getPreviousRevision(patchSetId); if (previousRevision != null) { previous = getIssueIds(projectName, previousRevision); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { } } for (java.lang.String issue : current.keySet()) { java.util.Set<java.lang.String> currentOccurrences = current.get(issue); java.util.Set<java.lang.String> previousOccurrences = previous.get(issue); java.util.Set<java.lang.String> newOccurrences; if ((previousOccurrences == null) || (previousOccurrences.isEmpty())) { newOccurrences = com.google.common.collect.Sets.newHashSet(currentOccurrences); } else { newOccurrences = com.google.common.collect.Sets.newHashSet(currentOccurrences); newOccurrences.removeAll(previousOccurrences); } for (java.lang.String occurrence : newOccurrences) { currentOccurrences.add((""added@"" + occurrence)); } } } return current; }",ee9c8b16fe6ac8810addbe0e55b3e364c8f7ec25,"getIssueIds(java.lang.String,java.lang.String,com.google.gerrit.reviewdb.client.PatchSet$Id)","getIssueIds(java.lang.String,java.lang.String,com.google.gerrit.reviewdb.client.PatchSet$Id)",5,0,"public java.util.Map<java.lang.String, java.util.Set<java.lang.String>> getIssueIds(java.lang.String projectName, java.lang.String commitId, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId) { java.util.Map<java.lang.String, java.util.Set<java.lang.String>> current = getIssueIds(projectName, commitId); if (patchSetId != null) { java.util.Map<java.lang.String, java.util.Set<java.lang.String>> previous = com.google.common.collect.Maps.newHashMap(); if ((patchSetId.get()) != 1) { com.google.gerrit.reviewdb.client.PatchSet.Id previousPatchSetId = new com.google.gerrit.reviewdb.client.PatchSet.Id(patchSetId.getParentKey(), ((patchSetId.get()) - 1)); java.lang.String previousPatchSet = db.getRevision(previousPatchSetId); if (previousPatchSet != null) { previous = getIssueIds(projectName, previousPatchSet); } } for (java.lang.String issue : current.keySet()) { java.util.Set<java.lang.String> currentOccurrences = current.get(issue); java.util.Set<java.lang.String> previousOccurrences = previous.get(issue); java.util.Set<java.lang.String> newOccurrences; if ((previousOccurrences == null) || (previousOccurrences.isEmpty())) { newOccurrences = com.google.common.collect.Sets.newHashSet(currentOccurrences); } else { newOccurrences = com.google.common.collect.Sets.newHashSet(currentOccurrences); newOccurrences.removeAll(previousOccurrences); } for (java.lang.String occurrence : newOccurrences) { currentOccurrences.add((""added@"" + occurrence)); } } } return current; }",ebd55ea9a345ed51b55223b7352977d64233a1e0,"getIssueIds(java.lang.String,java.lang.String,com.google.gerrit.reviewdb.client.PatchSet$Id)",150675,390,429
105856,src_main_java_com_googlesource_gerrit_plugins_lfs_locks_LfsLocksModule.java,0.0,@java.lang.Override protected void configure() { factory(LfsGetLocksAction.Factory.class); factory(LfsPutLocksAction.Factory.class); },68ad4c44be7b5cee879d2151bb7ab1aec00eb54a,@java.lang.Override protected void configure() { factory(LfsGetLocksAction.Factory.class); factory(LfsPutLocksAction.Factory.class); factory(LfsProjectLocks.Factory.class); },bf0e4787447521901f4626cb4833d9c4847512a7,configure(),configure(),16,0,@java.lang.Override protected void configure() { factory(LfsGetLocksAction.Factory.class); factory(LfsPutLocksAction.Factory.class); factory(LfsProjectLocks.Factory.class); install(com.googlesource.gerrit.plugins.lfs.locks.LfsLocksHandler.module()); },17f4af863530843ac9506e5e3dedaadb79a11dab,configure(),63702,47,71
75171,gerrit-server_src_main_java_com_google_gerrit_server_notedb_NoteDbUpdateManager.java,9.0,com.google.gerrit.server.git.ChainedReceiveCommands getChangeCommands() throws java.io.IOException { initChangeRepo(); return changeRepo.cmds; },cbf48b618c7e0a93dfc044350255e599699f620a,com.google.gerrit.server.git.ChainedReceiveCommands getChangeCommands() throws java.io.IOException { initChangeRepo(null); return changeRepo.cmds; },4fba67cf6fabc395afe3e6d7b1d1ddff6b2e5935,getChangeCommands(),getChangeCommands(),6,7,com.google.gerrit.server.git.ChainedReceiveCommands getChangeCommands() throws java.io.IOException { initChangeRepo(); return changeRepo.cmds; },cbf48b618c7e0a93dfc044350255e599699f620a,getChangeCommands(),7294,39,37
47302,gerrit-lucene_src_main_java_com_google_gerrit_lucene_LuceneChangeIndex.java,24.0,private org.apache.lucene.search.Query fieldQuery(com.google.gerrit.server.index.IndexPredicate<com.google.gerrit.server.query.change.ChangeData> p) throws com.google.gerrit.server.query.QueryParseException { if ((p.getType()) == (com.google.gerrit.server.index.FieldType.INTEGER)) { return intQuery(p); } else if ((p.getType()) == (com.google.gerrit.server.index.FieldType.EXACT)) { return exactQuery(p); } else { throw com.google.gerrit.lucene.LuceneChangeIndex.badFieldType(p.getType()); } },6634742245c0ec2e41682e64e858c702ecc00519,private org.apache.lucene.search.Query fieldQuery(com.google.gerrit.server.index.IndexPredicate<com.google.gerrit.server.query.change.ChangeData> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.change.RegexFilePredicate) { return regexQuery(p); } else if ((p.getType()) == (com.google.gerrit.server.index.FieldType.INTEGER)) { return intQuery(p); } else if ((p.getType()) == (com.google.gerrit.server.index.FieldType.EXACT)) { return exactQuery(p); } else { throw com.google.gerrit.lucene.LuceneChangeIndex.badFieldType(p.getType()); } },d251917a71255e6b1852e0344e4e78e05826ef46,fieldQuery(com.google.gerrit.server.index.IndexPredicate),fieldQuery(com.google.gerrit.server.index.IndexPredicate),3,27,private org.apache.lucene.search.Query fieldQuery(com.google.gerrit.server.index.IndexPredicate<com.google.gerrit.server.query.change.ChangeData> p) throws com.google.gerrit.server.query.QueryParseException { if ((p.getType()) == (com.google.gerrit.server.index.FieldType.INTEGER)) { return intQuery(p); } else if ((p.getType()) == (com.google.gerrit.server.index.FieldType.TIMESTAMP)) { return com.google.gerrit.lucene.LuceneChangeIndex.timestampQuery(p); } else if ((p.getType()) == (com.google.gerrit.server.index.FieldType.EXACT)) { return exactQuery(p); } else { throw com.google.gerrit.lucene.LuceneChangeIndex.badFieldType(p.getType()); } },466784e612d4d156db98bcc2f6f919cde98f5e03,fieldQuery(com.google.gerrit.server.index.IndexPredicate),178696,181,197
140535,java_com_google_gerrit_server_patch_PatchScriptFactory.java,13.0,"private com.google.gerrit.server.patch.PatchScriptBuilder newBuilder(com.google.gerrit.server.patch.PatchList list, org.eclipse.jgit.lib.Repository git) { final com.google.gerrit.server.patch.PatchScriptBuilder b = builderFactory.get(); b.setRepository(git, notes.getProjectName()); b.setChange(notes.getChange()); b.setDiffPrefs(diffPrefs); b.setTrees(list.getComparisonType(), list.getOldId(), list.getNewId()); return b; }",4d22abf6ccd826b8fdb758514566e4729fc34223,"private com.google.gerrit.server.patch.PatchScriptBuilder newBuilder(com.google.gerrit.server.patchlib.PatchList list, org.eclipse.jgit.lib.Repository git) { final com.google.gerrit.server.patch.PatchScriptBuilder b = builderFactory.get(); b.setRepository(git, notes.getProjectName()); b.setChange(notes.getChange()); b.setDiffPrefs(diffPrefs); b.setTrees(list.getComparisonType(), list.getOldId(), list.getNewId()); return b; }",43a31ee5b469a7581923ca8f9d337478243ef779,"newBuilder(com.google.gerrit.server.patch.PatchList,org.eclipse.jgit.lib.Repository)","newBuilder(com.google.gerrit.server.patchlib.PatchList,org.eclipse.jgit.lib.Repository)",11,1,"private com.google.gerrit.server.patch.PatchScriptBuilder newBuilder(com.google.gerrit.server.diff.PatchList list, org.eclipse.jgit.lib.Repository git) { final com.google.gerrit.server.patch.PatchScriptBuilder b = builderFactory.get(); b.setRepository(git, notes.getProjectName()); b.setChange(notes.getChange()); b.setDiffPrefs(diffPrefs); b.setTrees(list.getComparisonType(), list.getOldId(), list.getNewId()); return b; }",25c544becc1b16736d5e876b5a105a94b37031f7,"newBuilder(com.google.gerrit.server.diff.PatchList,org.eclipse.jgit.lib.Repository)",15368,127,126
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ReviewerSuggestOracle.java,2.0,public void setChange(com.google.gerrit.reviewdb.client.Change.Id changeId) { this.changeId = changeId; },e01c6f1f0be5e5653e6dbb868467d74e7079b8c3,"public void setChange(com.google.gerrit.reviewdb.client.Change.Id changeId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project) { this.changeId = changeId; this.project = project; }",a181b0eca50a287175d7c794f1b174312bbc3929,setChange(com.google.gerrit.reviewdb.client.Change$Id),"setChange(com.google.gerrit.reviewdb.client.Change$Id,com.google.gerrit.reviewdb.client.Project$NameKey)",7,8,"public void setChange(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id changeId) { this.project = project; this.changeId = changeId; }",e744bae5cc31b59faaec3af17b8367a05ab28ff7,"setChange(com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.reviewdb.client.Change$Id)",210381,70,59
101861,gerrit-server_src_main_java_com_google_gerrit_server_mail_send_ReplacePatchSetSender.java,6.0,"@java.lang.Override protected void init() throws com.google.gerrit.common.errors.EmailException { super.init(); if ((fromId) != null) { reviewers.remove(fromId); } add(RecipientType.TO, reviewers); add(RecipientType.CC, extraCC); rcptToAuthors(RecipientType.CC); bccStarredBy(); removeUsersThatIgnoredTheChange(); includeWatchers(NotifyType.NEW_PATCHSETS, (!(change.isPrivate()))); }",08a3c2ea1ef8663499b5430e724cfcd7e819c11c,"@java.lang.Override protected void init() throws com.google.gerrit.common.errors.EmailException { super.init(); if ((fromId) != null) { reviewers.remove(fromId); } add(RecipientType.TO, reviewers); add(RecipientType.CC, extraCC); rcptToAuthors(RecipientType.CC); bccStarredBy(); removeUsersThatIgnoredTheChange(); includeWatchers(NotifyType.NEW_PATCHSETS, ((!(change.isWorkInProgress())) && (!(change.isPrivate())))); }",4320b1383d5960b7c093eac3f6f88b85c00eb37f,init(),init(),25,6,"@java.lang.Override protected void init() throws com.google.gerrit.common.errors.EmailException { super.init(); if ((fromId) != null) { reviewers.remove(fromId); } add(RecipientType.TO, reviewers); add(RecipientType.CC, extraCC); rcptToAuthors(RecipientType.CC); bccStarredBy(); includeWatchers(NotifyType.NEW_PATCHSETS, (((!(patchSet.isDraft())) && (!(change.isWorkInProgress()))) && (!(change.isPrivate())))); removeUsersThatIgnoredTheChange(); }",63441ba6623d656c468c5c3c63af93d3fc2c0e65,init(),85749,120,129
34953,gerrit-server_src_main_java_com_google_gerrit_server_auth_ldap_LdapModule.java,0.0,"@java.lang.Override protected void configure() { final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<java.lang.String, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>> groups = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<java.lang.String, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>>() {}; core(groups, com.google.gerrit.server.auth.ldap.LdapModule.GROUP_CACHE).maxAge(1, java.util.concurrent.TimeUnit.HOURS).populateWith(LdapRealm.MemberLoader.class); final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id>> usernames = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id>>() {}; core(usernames, com.google.gerrit.server.auth.ldap.LdapModule.USERNAME_CACHE).populateWith(LdapRealm.UserLoader.class); bind(com.google.gerrit.server.account.Realm.class).to(com.google.gerrit.server.auth.ldap.LdapRealm.class).in(Scopes.SINGLETON); bind(com.google.gerrit.server.auth.ldap.Helper.class); }",5bbe725d9b599c13c32e14f6181f3c425d8f2e52,"@java.lang.Override protected void configure() { final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<java.lang.String, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>> groups = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<java.lang.String, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>>() {}; core(groups, com.google.gerrit.server.auth.ldap.LdapModule.GROUP_CACHE).maxAge(1, java.util.concurrent.TimeUnit.HOURS).populateWith(LdapRealm.MemberLoader.class); final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id>> usernames = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id>>() {}; core(usernames, com.google.gerrit.server.auth.ldap.LdapModule.USERNAME_CACHE).populateWith(LdapRealm.UserLoader.class); bind(com.google.gerrit.server.account.Realm.class).to(com.google.gerrit.server.auth.ldap.LdapRealm.class).in(Scopes.SINGLETON); bind(com.google.gerrit.server.auth.ldap.Helper.class); com.google.inject.multibindings.Multibinder.newSetBinder(binder(), com.google.gerrit.server.account.GroupBackend.class).addBinding().to(com.google.gerrit.server.auth.ldap.LdapGroupBackend.class); }",5faf7465aee66698f6741711a007471749da1c2e,configure(),configure(),25,0,"@java.lang.Override protected void configure() { cache(com.google.gerrit.server.auth.ldap.LdapModule.GROUP_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).expireAfterWrite(1, java.util.concurrent.TimeUnit.HOURS).loader(LdapRealm.MemberLoader.class); cache(com.google.gerrit.server.auth.ldap.LdapModule.USERNAME_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<com.google.common.base.Optional<com.google.gerrit.reviewdb.client.Account.Id>>() {}).loader(LdapRealm.UserLoader.class); cache(com.google.gerrit.server.auth.ldap.LdapModule.GROUP_EXIST_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<java.lang.Boolean>() {}).expireAfterWrite(1, java.util.concurrent.TimeUnit.HOURS).loader(LdapRealm.ExistenceLoader.class); bind(com.google.gerrit.server.account.Realm.class).to(com.google.gerrit.server.auth.ldap.LdapRealm.class).in(Scopes.SINGLETON); bind(com.google.gerrit.server.auth.ldap.Helper.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.account.GroupBackend.class).to(com.google.gerrit.server.auth.ldap.LdapGroupBackend.class); }",22a8c768e9082c55958d2d33e23c09bae01ffd71,configure(),76485,416,365
53916,gerrit-gwtdebug_src_main_java_com_google_gerrit_gwtdebug_GerritDebugLauncher.java,25.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void escape(java.lang.StringBuilder builder, java.lang.String string) { if (com.google.gerrit.gwtdebug.GerritDebugLauncher.JettyTreeLogger.__escape) { for (int i = 0; i < (string.length()); ++i) { char c = string.charAt(i); if (java.lang.Character.isISOControl(c)) { if (c == '\n') { builder.append('|'); } else if (c == '\r') { builder.append('<'); } else { builder.append('?'); } } else { builder.append(c); } } } else { builder.append(string); } }",c37835c73027d879b3f4b1203223108661d15e78,,"escape(java.lang.StringBuilder,java.lang.String)",6,17,"private void escape(java.lang.StringBuilder builder, java.lang.String string) { if (com.google.gerrit.gwtdebug.GerritDebugLauncher.__escape) { for (int i = 0; i < (string.length()); ++i) { char c = string.charAt(i); if (java.lang.Character.isISOControl(c)) { if (c == '\n') { builder.append('|'); } else if (c == '\r') { builder.append('<'); } else { builder.append('?'); } } else { builder.append(c); } } } else { builder.append(string); } }",f75c07039982a7db0f34d08371b05b4da28f7d03,"escape(java.lang.StringBuilder,java.lang.String)",204974,148,144
47970,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_ReviewedPanel.java,0.0,"void setReviewed(boolean reviewed) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(patchId).view(""files"").id(fileId).view(""reviewed""); if (reviewed) { api.put(com.google.gerrit.client.rpc.CallbackGroup.<com.google.gerrit.client.changes.ReviewInfo>emptyCallback()); } else { api.delete(com.google.gerrit.client.rpc.CallbackGroup.<com.google.gerrit.client.changes.ReviewInfo>emptyCallback()); } toggleReviewedBox(reviewed); }",13b4bdd004d1b3e41a6df7a0aafd84456e62ceca,"void setReviewed(boolean reviewed) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(patchId).view(""files"").id(fileId).view(""reviewed""); if (reviewed) { api.put(com.google.gerrit.client.rpc.CallbackGroup.<com.google.gerrit.client.changes.ReviewInfo>emptyCallback()); } else { api.delete(com.google.gerrit.client.rpc.CallbackGroup.<com.google.gerrit.client.changes.ReviewInfo>emptyCallback()); } }",fbcca67ebf1fb158139891909c89d78561e36ec3,setReviewed(boolean),setReviewed(boolean),2,0,"void setReviewed(boolean reviewed) { checkBox.setValue(true, true); }",2748292895f015998971f42fff9d9a4f545dd3f1,setReviewed(boolean),165603,145,19
9518,src_main_java_com_google_gerrit_client_changes_PublishCommentScreen.java,14.0,public void onSuccess(final com.google.gerrit.client.changes.PatchSetPublishDetail result) { send.setEnabled(true); display(result); },d66e51f2afdea385657419e7956109782e3326b4,@java.lang.Override protected void prepare(final com.google.gerrit.client.changes.PatchSetPublishDetail result) { send.setEnabled(true); display(result); },d35027eb4d7a7ef4eea900aaaaa46349cb16cd2f,onSuccess(com.google.gerrit.client.changes.PatchSetPublishDetail),prepare(com.google.gerrit.client.changes.PatchSetPublishDetail),2,2,@java.lang.Override protected void preDisplay(final com.google.gerrit.client.changes.PatchSetPublishDetail result) { send.setEnabled(true); display(result); },038fc68d3acc964731c4a3560bf31257ed6fd8de,preDisplay(com.google.gerrit.client.changes.PatchSetPublishDetail),932,41,42
166331,javatests_com_google_gerrit_acceptance_api_group_GroupRebuilderIT.java,8.0,"@org.junit.Test public void basicGroupProperties() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo createdGroup = gApi.groups().create(name(""group"")).get(); try (com.google.gerrit.acceptance.api.group.GroupRebuilderIT.BlockReviewDbUpdatesForGroups ctx = new com.google.gerrit.acceptance.api.group.GroupRebuilderIT.BlockReviewDbUpdatesForGroups()) { com.google.gerrit.server.group.InternalGroup reviewDbGroup = groups.getGroup(db, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(createdGroup.id)).get(); deleteGroupRefs(reviewDbGroup); assertThat(com.google.gerrit.acceptance.api.group.GroupRebuilderIT.removeRefState(rebuild(reviewDbGroup))).isEqualTo(roundToSecond(reviewDbGroup)); } }",613d646d55cdb457c84274a432f970c0002005ce,"@org.junit.Test public void basicGroupProperties() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo createdGroup = gApi.groups().create(name(""group"")).get(); com.google.gerrit.server.group.InternalGroup reviewDbGroup = groups.getGroup(db, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(createdGroup.id)).get(); deleteGroupRefs(reviewDbGroup); assertThat(com.google.gerrit.acceptance.api.group.GroupRebuilderIT.removeRefState(rebuild(reviewDbGroup))).isEqualTo(roundToSecond(reviewDbGroup)); }",54e7acf75c8e76bfb1aafc2538ef10db0212f195,basicGroupProperties(),basicGroupProperties(),3,8,"@org.junit.Test public void basicGroupProperties() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo createdGroup = gApi.groups().create(name(""group"")).get(); com.google.gerrit.server.group.db.GroupBundle reviewDbBundle = bundleFactory.fromReviewDb(db, new com.google.gerrit.reviewdb.client.AccountGroup.Id(createdGroup.groupId)); deleteGroupRefs(reviewDbBundle); assertMigratedCleanly(rebuild(reviewDbBundle), reviewDbBundle); }",58a725a8ae123bec15b0138f75d1e1378bd4733f,basicGroupProperties(),93454,153,128
91332,gerrit-server_src_test_java_com_google_gerrit_server_git_LocalDiskRepositoryManagerTest.java,24.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test(expected = com.google.gerrit.server.git.RepositoryCaseMismatchException.class) public void testNameCaseMismatchWithSymlink() throws java.lang.Exception { assume().that(((com.google.gerrit.server.util.HostPlatform.isWin32()) || (com.google.gerrit.server.util.HostPlatform.isMac()))); com.google.gerrit.reviewdb.client.Project.NameKey name = new com.google.gerrit.reviewdb.client.Project.NameKey(""a""); repoManager.createRepository(name); createSymLink(name, ""b.git""); repoManager.createRepository(new com.google.gerrit.reviewdb.client.Project.NameKey(""B"")); }",a3e5024f690956466b9ef80c9802c7e288a81df6,,testNameCaseMismatchWithSymlink(),3,1,"@org.junit.Test(expected = com.google.gerrit.server.git.RepositoryCaseMismatchException.class) public void testNameCaseMismatchWithSymlink() throws java.lang.Exception { assume().that(((com.google.gerrit.server.util.HostPlatform.isWin32()) || (com.google.gerrit.server.util.HostPlatform.isMac()))).isTrue(); com.google.gerrit.reviewdb.client.Project.NameKey name = new com.google.gerrit.reviewdb.client.Project.NameKey(""a""); repoManager.createRepository(name); createSymLink(name, ""b.git""); repoManager.createRepository(new com.google.gerrit.reviewdb.client.Project.NameKey(""B"")); }",5294e4da749381137d822b6c3c53e01fb44996f4,testNameCaseMismatchWithSymlink(),32921,172,175
47412,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_CodeMirrorDemo.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void run() { if (cm.hasActiveLine()) { cm.removeLineClass(cm.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); cm.removeLineClass(cm.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } if (other.hasActiveLine()) { other.removeLineClass(other.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); other.removeLineClass(other.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } int line = cm.getCursor(""head"").getLine(); int oLine = mapper.lineOnOther((cm == (cmA) ? com.google.gerrit.common.changes.Side.PARENT : com.google.gerrit.common.changes.Side.REVISION), line); cm.setActiveLine(line); other.setActiveLine(oLine); cm.addLineClass(line, LineClassWhere.WRAP, diffTable.style.activeLine()); cm.addLineClass(line, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); other.addLineClass(oLine, LineClassWhere.WRAP, diffTable.style.activeLine()); other.addLineClass(oLine, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); }",c4f85900796b0719db86a435897753dd516785cf,,run(),10,26,"public void run() { if (cm.hasActiveLine()) { cm.removeLineClass(cm.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); cm.removeLineClass(cm.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } if (other.hasActiveLine()) { other.removeLineClass(other.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); other.removeLineClass(other.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } int line = cm.getCursor(""head"").getLine(); com.google.gerrit.client.diff.LineMapper.LineOnOtherInfo info = mapper.lineOnOther((cm == (cmA) ? com.google.gerrit.common.changes.Side.PARENT : com.google.gerrit.common.changes.Side.REVISION), line); int oLine = info.getLine(); cm.setActiveLine(line); cm.addLineClass(line, LineClassWhere.WRAP, diffTable.style.activeLine()); cm.addLineClass(line, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); if (info.isAligned()) { other.setActiveLine(oLine); other.addLineClass(oLine, LineClassWhere.WRAP, diffTable.style.activeLine()); other.addLineClass(oLine, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } }",9ce552f93b151fd0a0d173f11cb18a6935da6690,run(),25303,312,345
15828,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_MyIdentitiesScreen.java,1.0,@java.lang.Override protected void onLoad() { super.onLoad(); Util.ACCOUNT_SEC.myExternalIds(new com.google.gerrit.client.rpc.GerritCallback<java.util.List<com.google.gerrit.reviewdb.AccountExternalId>>() { public void onSuccess(final java.util.List<com.google.gerrit.reviewdb.AccountExternalId> result) { identites.display(result); } }); },074299c7ead63c24c43f79294b1273a0fe84d639,@java.lang.Override protected void onLoad() { super.onLoad(); Util.ACCOUNT_SEC.myExternalIds(new com.google.gerrit.client.rpc.GerritCallback<java.util.List<com.google.gerrit.reviewdb.AccountExternalId>>() { public void onSuccess(final java.util.List<com.google.gerrit.reviewdb.AccountExternalId> result) { identites.display(result); display(); } }); },01973d44a52f21e3ea3734a6410444847ec89c88,onLoad(),onLoad(),2,1,@java.lang.Override protected void onLoad() { super.onLoad(); Util.ACCOUNT_SEC.myExternalIds(new com.google.gerrit.client.rpc.ScreenLoadCallback<java.util.List<com.google.gerrit.reviewdb.AccountExternalId>>(this) { public void preDisplay(final java.util.List<com.google.gerrit.reviewdb.AccountExternalId> result) { identites.display(result); } }); },d0a03bd2b5f1cbaee36da89452817d452a27f8a8,onLoad(),128328,109,110
46281,gerrit-server_src_main_java_com_google_gerrit_server_account_GetSshKey.java,,,,@java.lang.Override public com.google.gerrit.server.account.GetSshKeys.SshKeyInfo apply(com.google.gerrit.server.account.AccountResource.SshKey rsrc) { com.google.gerrit.server.account.GetSshKeys.SshKeyInfo info = new com.google.gerrit.server.account.GetSshKeys.SshKeyInfo(); com.google.gerrit.reviewdb.client.AccountSshKey sshKey = rsrc.getSshKey(); info.id = sshKey.getKey().get(); info.sshPublicKey = sshKey.getSshPublicKey(); info.encodedKey = sshKey.getEncodedKey(); info.algorithm = sshKey.getAlgorithm(); info.comment = com.google.common.base.Strings.emptyToNull(sshKey.getComment()); info.valid = sshKey.isValid(); return info; },9c3ee15719b52032719eef1d10c8638e34d67223,,apply(com.google.gerrit.server.account.AccountResource.SshKey),4,0,@java.lang.Override public com.google.gerrit.server.account.GetSshKeys.SshKeyInfo apply(com.google.gerrit.server.account.AccountResource.SshKey rsrc) { return new com.google.gerrit.server.account.GetSshKeys.SshKeyInfo(rsrc.getSshKey()); },b70d3ffae5e98dbf6d9f45a124af8d94286f09dd,apply(com.google.gerrit.server.account.AccountResource.SshKey),14290,192,76
47311,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeStatusPredicate.java,4.0,@java.lang.Override public boolean match(final com.google.gerrit.server.query.change.ChangeData object) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = object.change(dbProvider); return (change != null) && (status.equals(change.getStatus())); },032956d4ff67589c2b64505f91a42505c6913df8,@java.lang.Override public boolean match(final com.google.gerrit.server.query.change.ChangeData object) throws com.google.gwtorm.server.OrmException { if (object.isFromQuery(getQueryRoot())) { return true; } com.google.gerrit.reviewdb.client.Change change = object.change(dbProvider); return (change != null) && (status.equals(change.getStatus())); },ca01c91d4ca1cce7848d8078a63b10ba7bbab80b,match(com.google.gerrit.server.query.change.ChangeData),match(com.google.gerrit.server.query.change.ChangeData),6,4,@java.lang.Override public boolean match(final com.google.gerrit.server.query.change.ChangeData object) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = object.change(dbProvider); return (change != null) && (status.equals(change.getStatus())); },032956d4ff67589c2b64505f91a42505c6913df8,match(com.google.gerrit.server.query.change.ChangeData),144931,98,82
10275,src_main_java_com_google_gerrit_server_patch_PatchCommentAction.java,1.0,"public com.google.gerrit.client.patches.CommentDetail run(final com.google.gerrit.client.reviewdb.ReviewDb db) throws com.google.gerrit.client.rpc.BaseServiceImplementation.Failure, com.google.gwtorm.client.OrmException { validatePatchSetId(psa); validatePatchSetId(psb); me = com.google.gerrit.client.rpc.Common.getAccountId(); change = db.changes().get(changeId); patch = db.patches().get(patchKey); if ((((change) == null) || ((patch) == null)) || (!(canRead(change)))) { throw new com.google.gerrit.client.rpc.BaseServiceImplementation.Failure(new com.google.gerrit.client.rpc.NoSuchEntityException()); } final java.lang.String pn = patch.getFileName(); final com.google.gerrit.client.data.AccountInfoCacheFactory aic = new com.google.gerrit.client.data.AccountInfoCacheFactory(db); final com.google.gerrit.client.patches.CommentDetail r; r = new com.google.gerrit.client.patches.CommentDetail(psa, ((psb) != null ? psb : patchSetId)); for (com.google.gerrit.client.reviewdb.PatchLineComment p : db.patchComments().published(changeId, pn)) { if (r.include(p)) { aic.want(p.getAuthor()); } } if ((me) != null) { aic.want(me); for (com.google.gerrit.client.reviewdb.PatchLineComment p : db.patchComments().draft(changeId, pn, me)) { r.include(p); } } r.setHistory(db.patches().history(changeId, pn).toList()); r.setAccountInfoCache(aic.create()); return r; }",bcce91021782be5b75735b259809595e16beb2b2,"public com.google.gerrit.client.patches.CommentDetail run(final com.google.gerrit.client.reviewdb.ReviewDb db) throws com.google.gerrit.client.rpc.BaseServiceImplementation.Failure, com.google.gwtorm.client.OrmException { validatePatchSetId(psa); validatePatchSetId(psb); me = com.google.gerrit.client.rpc.Common.getAccountId(); change = db.changes().get(changeId); patch = db.patches().get(patchKey); if ((((change) == null) || ((patch) == null)) || (!(canRead(change)))) { throw new com.google.gerrit.client.rpc.BaseServiceImplementation.Failure(new com.google.gerrit.client.rpc.NoSuchEntityException()); } final java.lang.String pn = patch.getFileName(); final com.google.gerrit.client.data.AccountInfoCacheFactory aic = new com.google.gerrit.client.data.AccountInfoCacheFactory(db); final com.google.gerrit.client.patches.CommentDetail r; r = new com.google.gerrit.client.patches.CommentDetail(psa, ((psb) != null ? psb : patchSetId), com.google.gerrit.client.reviewdb.SafeFile.isSafeInline(null, patch.getFileName())); for (com.google.gerrit.client.reviewdb.PatchLineComment p : db.patchComments().published(changeId, pn)) { if (r.include(p)) { aic.want(p.getAuthor()); } } if ((me) != null) { aic.want(me); for (com.google.gerrit.client.reviewdb.PatchLineComment p : db.patchComments().draft(changeId, pn, me)) { r.include(p); } } r.setHistory(db.patches().history(changeId, pn).toList()); r.setAccountInfoCache(aic.create()); return r; }",cdc9b9ce3dcbaa90fbbded2c8e4d891bd9752073,run(com.google.gerrit.client.reviewdb.ReviewDb),run(com.google.gerrit.client.reviewdb.ReviewDb),9,1,"public com.google.gerrit.client.patches.CommentDetail run(final com.google.gerrit.client.reviewdb.ReviewDb db) throws com.google.gerrit.client.rpc.BaseServiceImplementation.Failure, com.google.gwtorm.client.OrmException { validatePatchSetId(psa); validatePatchSetId(psb); me = com.google.gerrit.client.rpc.Common.getAccountId(); change = db.changes().get(changeId); patch = db.patches().get(patchKey); if ((((change) == null) || ((patch) == null)) || (!(canRead(change)))) { throw new com.google.gerrit.client.rpc.BaseServiceImplementation.Failure(new com.google.gerrit.client.rpc.NoSuchEntityException()); } final java.lang.String pn = patch.getFileName(); final com.google.gerrit.client.data.AccountInfoCacheFactory aic = new com.google.gerrit.client.data.AccountInfoCacheFactory(db); final com.google.gerrit.client.patches.CommentDetail r; r = new com.google.gerrit.client.patches.CommentDetail(psa, ((psb) != null ? psb : patchSetId)); for (com.google.gerrit.client.reviewdb.PatchLineComment p : db.patchComments().published(changeId, pn)) { if (r.include(p)) { aic.want(p.getAuthor()); } } if ((me) != null) { aic.want(me); for (com.google.gerrit.client.reviewdb.PatchLineComment p : db.patchComments().draft(changeId, pn, me)) { r.include(p); } } r.setHistory(db.patches().history(changeId, pn).toList()); r.setAccountInfoCache(aic.create()); return r; }",bcce91021782be5b75735b259809595e16beb2b2,run(com.google.gerrit.client.reviewdb.ReviewDb),36094,466,440
46290,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_SshPanel.java,21.0,public void onSuccess(final com.google.gwtjsonrpc.common.VoidResult result) { for (int row = 1; row < (table.getRowCount());) { final com.google.gerrit.reviewdb.client.AccountSshKey k = getRowItem(row); if ((k != null) && (ids.contains(k.getKey()))) { table.removeRow(row); } else { row++; } } if ((table.getRowCount()) == 1) { display(java.util.Collections.<com.google.gerrit.reviewdb.client.AccountSshKey>emptyList()); } else { updateDeleteButton(); } },c6d64a01ff87e3e8233db605ea68fafb526289f9,"public void onSuccess(final com.google.gwtjsonrpc.common.VoidResult result) { for (int row = 1; row < (table.getRowCount());) { final com.google.gerrit.client.account.SshKeyInfo k = getRowItem(row); if ((k != null) && (ids.contains(new com.google.gerrit.reviewdb.client.AccountSshKey.Id(com.google.gerrit.client.Gerrit.getUserAccount().getId(), k.id())))) { table.removeRow(row); } else { row++; } } if ((table.getRowCount()) == 1) { display(java.util.Collections.<com.google.gerrit.client.account.SshKeyInfo>emptyList()); } else { updateDeleteButton(); } }",7ca3ca4f26d4a9e563c6f0b096dbb369d744990c,onSuccess(com.google.gwtjsonrpc.common.VoidResult),onSuccess(com.google.gwtjsonrpc.common.VoidResult),4,21,"public void onSuccess(final com.google.gwtjsonrpc.common.VoidResult result) { for (int row = 1; row < (table.getRowCount());) { final com.google.gerrit.client.account.SshKeyInfo k = getRowItem(row); if ((k != null) && (ids.contains(new com.google.gerrit.reviewdb.client.AccountSshKey.Id(com.google.gerrit.client.Gerrit.getUserAccount().getId(), k.seq())))) { table.removeRow(row); } else { row++; } } if ((table.getRowCount()) == 1) { display(java.util.Collections.<com.google.gerrit.client.account.SshKeyInfo>emptyList()); } else { updateDeleteButton(); } }",24797d13d0acca5e01a6935bba635c7a2bba1f46,onSuccess(com.google.gwtjsonrpc.common.VoidResult),200209,174,174
16293,src_test_java_com_google_gwtorm_data_PhoneBookDb.java,1.0,@com.google.gwtorm.client.Relation com.google.gwtorm.data.AddressAccess addresses();,ad4bcbceb39e5b14fa476cd18ddf74d726a9a8fa,@com.google.gwtorm.client.Relation(id = 1) com.google.gwtorm.data.AddressAccess addresses();,494e68134948e68f1988ebcf9504c60846f95e8b,addresses(),addresses(),2,1,@com.google.gwtorm.client.Relation(id = 2) com.google.gwtorm.data.AddressAccess addresses();,673906c04827fad7621661d3c3904afe514c8d36,addresses(),169095,28,28
36250,src_main_java_com_google_gwtexpui_clippy_client_CopyableLabel.java,2.0,"private void embedMovie() { if ((com.google.gwtexpui.clippy.client.CopyableLabel.flashEnabled) && (com.google.gwtexpui.user.client.UserAgent.hasFlash)) { final java.lang.String flashVars = ""text="" + (com.google.gwt.http.client.URL.encodeQueryString(getText())); final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder h = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder(); h.openElement(""span""); h.setStyleName(ClippyResources.I.css().control()); h.openElement(""object""); h.setWidth(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_WIDTH); h.setHeight(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_HEIGHT); h.setAttribute(""classid"", ""clsid:d27cdb6e-ae6d-11cf-96b8-444553540000""); h.paramElement(""movie"", com.google.gwtexpui.clippy.client.CopyableLabel.swfUrl()); h.paramElement(""FlashVars"", flashVars); h.openElement(""embed""); h.setWidth(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_WIDTH); h.setHeight(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_HEIGHT); h.setAttribute(""wmode"", ""transparent""); h.setAttribute(""type"", ""application/x-shockwave-flash""); h.setAttribute(""src"", com.google.gwtexpui.clippy.client.CopyableLabel.swfUrl()); h.setAttribute(""FlashVars"", flashVars); h.closeSelf(); h.closeElement(""object""); h.closeElement(""span""); if ((swf) != null) { com.google.gwt.user.client.DOM.removeChild(getElement(), swf); } com.google.gwt.user.client.DOM.appendChild(getElement(), (swf = com.google.gwtexpui.safehtml.client.SafeHtml.parse(h))); } }",f9cc0c5750de2b1e4c0bb386f61909a6c6eccc13,"private void embedMovie() { if ((com.google.gwtexpui.clippy.client.CopyableLabel.flashEnabled) && (com.google.gwtexpui.user.client.UserAgent.hasFlash)) { final java.lang.String flashVars = ""text="" + (com.google.gwt.http.client.URL.encodeQueryString(getText())); final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder h = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder(); h.openElement(""div""); h.setStyleName(ClippyResources.I.css().control()); h.openElement(""object""); h.setWidth(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_WIDTH); h.setHeight(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_HEIGHT); h.setAttribute(""classid"", ""clsid:d27cdb6e-ae6d-11cf-96b8-444553540000""); h.paramElement(""movie"", com.google.gwtexpui.clippy.client.CopyableLabel.swfUrl()); h.paramElement(""FlashVars"", flashVars); h.openElement(""embed""); h.setWidth(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_WIDTH); h.setHeight(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_HEIGHT); h.setAttribute(""wmode"", ""transparent""); h.setAttribute(""type"", ""application/x-shockwave-flash""); h.setAttribute(""src"", com.google.gwtexpui.clippy.client.CopyableLabel.swfUrl()); h.setAttribute(""FlashVars"", flashVars); h.closeSelf(); h.closeElement(""object""); h.closeElement(""span""); if ((swf) != null) { com.google.gwt.user.client.DOM.removeChild(getElement(), swf); } com.google.gwt.user.client.DOM.appendChild(getElement(), (swf = com.google.gwtexpui.safehtml.client.SafeHtml.parse(h))); } }",9281fa579677f16b2f8d193b62dd0f822e1dbd4c,embedMovie(),embedMovie(),3,2,"private void embedMovie() { if ((com.google.gwtexpui.clippy.client.CopyableLabel.flashEnabled) && (com.google.gwtexpui.user.client.UserAgent.hasFlash)) { final java.lang.String flashVars = ""text="" + (com.google.gwt.http.client.URL.encodeQueryString(getText())); final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder h = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder(); h.openElement(""div""); h.setStyleName(ClippyResources.I.css().control()); h.openElement(""object""); h.setWidth(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_WIDTH); h.setHeight(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_HEIGHT); h.setAttribute(""classid"", ""clsid:d27cdb6e-ae6d-11cf-96b8-444553540000""); h.paramElement(""movie"", com.google.gwtexpui.clippy.client.CopyableLabel.swfUrl()); h.paramElement(""FlashVars"", flashVars); h.openElement(""embed""); h.setWidth(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_WIDTH); h.setHeight(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_HEIGHT); h.setAttribute(""wmode"", ""transparent""); h.setAttribute(""type"", ""application/x-shockwave-flash""); h.setAttribute(""src"", com.google.gwtexpui.clippy.client.CopyableLabel.swfUrl()); h.setAttribute(""FlashVars"", flashVars); h.closeSelf(); h.closeElement(""object""); h.closeElement(""div""); if ((swf) != null) { com.google.gwt.user.client.DOM.removeChild(getElement(), swf); } com.google.gwt.user.client.DOM.appendChild(getElement(), (swf = com.google.gwtexpui.safehtml.client.SafeHtml.parse(h))); } }",64b2d54d8ca5f77e5269fa6e64dbb0dcf51aac4d,embedMovie(),154985,481,481
62372,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private java.util.List<com.google.gerrit.client.ui.InlineHyperlink> getLinks() { com.google.gerrit.client.ui.InlineHyperlink toUnifiedDiffLink = new com.google.gerrit.client.ui.InlineHyperlink(); toUnifiedDiffLink.setHTML(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.unifiedDiff())); toUnifiedDiffLink.setTargetHistoryToken(getUnifiedDiffUrl()); toUnifiedDiffLink.setTitle(PatchUtil.C.unifiedDiff()); return java.util.Collections.singletonList(toUnifiedDiffLink); },ee19ce856d6cea5bc3c673ee7258f706dc71736a,,getLinks(),7,76,private java.util.List<com.google.gerrit.client.ui.InlineHyperlink> getLinks() { if ((revision.get()) > 0) { com.google.gerrit.client.ui.InlineHyperlink toUnifiedDiffLink = new com.google.gerrit.client.ui.InlineHyperlink(); toUnifiedDiffLink.setHTML(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.unifiedDiff())); toUnifiedDiffLink.setTargetHistoryToken(getUnifiedDiffUrl()); toUnifiedDiffLink.setTitle(PatchUtil.C.unifiedDiff()); return java.util.Collections.singletonList(toUnifiedDiffLink); } else { return java.util.Collections.emptyList(); } },4666fc2058a51aaa7f2705a97e74cba17325392f,getLinks(),145955,140,164
90738,gerrit-server_src_test_java_com_google_gerrit_server_mail_receive_data_Base64HeaderMessage.java,,,,"@java.lang.Override public com.google.gerrit.server.mail.receive.MailMessage expectedMailMessage() { com.google.gerrit.server.mail.receive.MailMessage.Builder expect = com.google.gerrit.server.mail.receive.MailMessage.builder(); expect.id(""<001a114da7ae26e2eb053fe0c29c@google.com>"").from(new com.google.gerrit.server.mail.Address(""Jonathan Nieder (Gerrit)"", ""noreply-gerritcodereview-CtTy0igsBrnvL7dKoWEIEg@google.com"")).addTo(new com.google.gerrit.server.mail.Address(""ekempin"", ""ekempin@google.com"")).textContent(com.google.gerrit.server.mail.receive.data.Base64HeaderMessage.textContent).subject(""\ud83d\ude1b test"").dateReceived(new org.joda.time.DateTime(2016, 10, 25, 9, 11, 35, 0)); return expect.build(); }",12be12e2a0d108fbe92a6dcb41160addcecbe9fc,,expectedMailMessage(),9,1,"@java.lang.Override public com.google.gerrit.server.mail.receive.MailMessage expectedMailMessage() { com.google.gerrit.server.mail.receive.MailMessage.Builder expect = com.google.gerrit.server.mail.receive.MailMessage.builder(); expect.id(""<001a114da7ae26e2eb053fe0c29c@google.com>"").from(new com.google.gerrit.server.mail.Address(""Jonathan Nieder (Gerrit)"", ""noreply-gerritcodereview-CtTy0igsBrnvL7dKoWEIEg@google.com"")).addTo(new com.google.gerrit.server.mail.Address(""ekempin"", ""ekempin@google.com"")).textContent(com.google.gerrit.server.mail.receive.data.Base64HeaderMessage.textContent).subject(""\ud83d\ude1b test"").dateReceived(new org.joda.time.DateTime(2016, 10, 25, 9, 11, 35, 0, org.joda.time.DateTimeZone.UTC)); return expect.build(); }",53359d14e20f83032c5016fea4ea2c8844f6c6d3,expectedMailMessage(),5685,245,257
20355,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ValueEditor.java,,,,void onEdit() { textPanel.removeFromParent(); textPanel = null; textLabel = null; editIcon.removeFromParent(); editIcon = null; startHandlers = null; editPanel.setVisible(true); },30f27ba8fee498225e91edf43cc027dd0135c153,,onEdit(),14,14,public void edit() { textPanel.removeFromParent(); textPanel = null; textLabel = null; editIcon.removeFromParent(); editIcon = null; startHandlers = null; editPanel.setVisible(true); },8e07452a2c5aa6c11e0dc0e2fbf96cd8d2953a91,edit(),6244,43,43
20045,gerrit-server_src_main_java_com_google_gerrit_server_git_ReviewNoteHeaderFormatter.java,,,,"public void appendSubmittedBy(com.google.gerrit.reviewdb.Account user) { sb.append(""Submitted-by: ""); appendUserData(user); sb.append(""\n""); }",a38eb98520301346539cc0beb4aabd335be3633c,,appendSubmittedBy(com.google.gerrit.reviewdb.Account),10,6,"void appendSubmittedBy(com.google.gerrit.reviewdb.Account user) { sb.append(""Submitted-by: ""); appendUserData(user); sb.append(""\n""); }",af67de6f41d20f89ac9d6838543218498b78051a,appendSubmittedBy(com.google.gerrit.reviewdb.Account),81057,45,44
109295,src_test_java_com_ericsson_gerrit_plugins_highavailability_ConfigurationTest.java,15.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testGetWebsessionSynchronize() throws java.lang.Exception { when(configMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, com.ericsson.gerrit.plugins.highavailability.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.DEFAULT_SYNCHRONIZE)).thenReturn(true); initializeConfiguration(); assertThat(configuration.websession().synchronize()).isTrue(); when(configMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, com.ericsson.gerrit.plugins.highavailability.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.DEFAULT_SYNCHRONIZE)).thenReturn(false); initializeConfiguration(); assertThat(configuration.websession().synchronize()).isFalse(); when(configMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, com.ericsson.gerrit.plugins.highavailability.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.DEFAULT_SYNCHRONIZE)).thenThrow(new java.lang.IllegalArgumentException(com.ericsson.gerrit.plugins.highavailability.ConfigurationTest.ERROR_MESSAGE)); initializeConfiguration(); assertThat(configuration.websession().synchronize()).isTrue(); }",71a04f8810503b788c02399d22b5cb11ece35bfb,,testGetWebsessionSynchronize(),5,8,"@org.junit.Test public void testGetWebsessionSynchronize() throws java.lang.Exception { when(configMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SYNCHRONIZE)).thenReturn(true); initializeConfiguration(); assertThat(configuration.websession().synchronize()).isTrue(); when(configMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SYNCHRONIZE)).thenReturn(false); initializeConfiguration(); assertThat(configuration.websession().synchronize()).isFalse(); when(configMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SYNCHRONIZE)).thenThrow(new java.lang.IllegalArgumentException(com.ericsson.gerrit.plugins.highavailability.ConfigurationTest.ERROR_MESSAGE)); initializeConfiguration(); assertThat(configuration.websession().synchronize()).isTrue(); }",e655b845941f8b355b9c5e7253a5926cddbf718d,testGetWebsessionSynchronize(),110874,333,345
109873,src_main_java_com_googlesource_gerrit_plugins_repositoryuse_ScanningQueue.java,2.0,@java.lang.Override public void stop() { if ((threadPool) != null) { threadPool.unregisterWorkQueue(); threadPool = null; } },709d13badd2c277428e0fc8b906c9313a27e3dfe,@java.lang.Override public void stop() { if ((threadPool) != null) { threadPool = null; } },f5b05aea8a9bf034e3a40724d302ff5cf4d243f8,stop(),stop(),4,2,@java.lang.Override public void stop() { threadPool = null; },94c216b3796583753b4c9323e9db2910c2aa0079,stop(),212849,26,16
78681,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_EventRecorder.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.util.List<com.google.gerrit.server.events.RefEvent> getRefUpdates(java.lang.String project, java.lang.String refName, int expectedSize) { java.lang.String key = java.lang.String.format(""%s-%s-%s"", RefUpdatedEvent.TYPE, project, refName); assertThat(recordedEvents).containsKey(key); java.util.List<com.google.gerrit.server.events.RefEvent> events = recordedEvents.get(key); assertThat(events).hasSize(expectedSize); return com.google.common.collect.ImmutableList.copyOf(events); }",34131c6967107bb09eacd81786e49251d80d27c3,,"getRefUpdates(java.lang.String,java.lang.String,int)",12,1,"public com.google.common.collect.ImmutableList<com.google.gerrit.server.events.RefEvent> getRefUpdates(java.lang.String project, java.lang.String refName, int expectedSize) { java.lang.String key = com.google.gerrit.acceptance.EventRecorder.key(RefUpdatedEvent.TYPE, project, refName); assertThat(recordedEvents).containsKey(key); java.util.Collection<com.google.gerrit.server.events.RefEvent> events = recordedEvents.get(key); assertThat(events).hasSize(expectedSize); return com.google.common.collect.ImmutableList.copyOf(events); }",90a0811bf80148f41107f2c86bf707ffafd67a49,"getRefUpdates(java.lang.String,java.lang.String,int)",8327,145,147
96992,src_main_java_com_googlesource_gerrit_plugins_reviewers_DefaultReviewers.java,2.0,"com.googlesource.gerrit.plugins.reviewers.DefaultReviewers create(com.google.gerrit.reviewdb.client.Change change, java.util.Set<com.google.gerrit.reviewdb.client.Account> reviewers);",5d0f1d903e4328a0faf3ffaaaebd905ef2d9a46a,"com.googlesource.gerrit.plugins.reviewers.DefaultReviewers create(com.google.gerrit.reviewdb.client.PatchSet ps, java.util.Set<com.google.gerrit.reviewdb.client.Account> reviewers);",dae5ff6aa52e9d9ca74f4e7040295f61ac6b4e06,"create(com.google.gerrit.reviewdb.client.Change,java.util.Set)","create(com.google.gerrit.reviewdb.client.PatchSet,java.util.Set)",4,2,"com.googlesource.gerrit.plugins.reviewers.DefaultReviewers create(com.google.gerrit.reviewdb.client.Change change, java.util.Set<com.google.gerrit.reviewdb.client.Account> reviewers);",5d0f1d903e4328a0faf3ffaaaebd905ef2d9a46a,"create(com.google.gerrit.reviewdb.client.Change,java.util.Set)",141846,60,59
39401,gerrit-server_src_main_java_com_google_gerrit_server_dashboard_ListDashboards.java,1.0,"public void display(java.io.OutputStream out) { final java.io.PrintWriter stdout; try { stdout = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(out, ""UTF-8""))); } catch (java.io.UnsupportedEncodingException e) { throw new java.lang.RuntimeException(""JVM lacks UTF-8 encoding"", e); } try { final java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> output; if ((level) != null) { switch (level) { case PROJECT : output = projectDashboards(new com.google.gerrit.reviewdb.client.Project.NameKey(entityName)); break; default : throw new java.lang.IllegalStateException((""unsupported dashboard level: "" + (level))); } } else { output = com.google.common.collect.Maps.newTreeMap(); } format.newGson().toJson(output, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo>>() {}.getType(), stdout); stdout.print('\n'); } finally { stdout.flush(); } }",577a811b6bd4a57ad68edf4529e66d7680a3ee48,"public void display(java.io.OutputStream out) { final java.io.PrintWriter stdout; try { stdout = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(out, ""UTF-8""))); } catch (java.io.UnsupportedEncodingException e) { throw new java.lang.RuntimeException(""JVM lacks UTF-8 encoding"", e); } try { final java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> output; if ((level) != null) { switch (level) { case PROJECT : output = allDashboardsFor(new com.google.gerrit.reviewdb.client.Project.NameKey(entityName)); break; default : throw new java.lang.IllegalStateException((""unsupported dashboard level: "" + (level))); } } else { output = com.google.common.collect.Maps.newTreeMap(); } format.newGson().toJson(output, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo>>() {}.getType(), stdout); stdout.print('\n'); } finally { stdout.flush(); } }",79d3a92cf3518f4e0a9733c4e7aa87add3797e8b,display(java.io.OutputStream),display(java.io.OutputStream),11,1,"public void display(java.io.OutputStream out) { final java.io.PrintWriter stdout; try { stdout = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(out, ""UTF-8""))); } catch (java.io.UnsupportedEncodingException e) { throw new java.lang.RuntimeException(""JVM lacks UTF-8 encoding"", e); } try { final java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> dashboards; if ((level) != null) { switch (level) { case PROJECT : final com.google.gerrit.reviewdb.client.Project.NameKey projectName = new com.google.gerrit.reviewdb.client.Project.NameKey(entityName); final com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectName); com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo defaultInfo = findProjectDefaultDashboard(projectState); if (defaultDashboard) { dashboards = com.google.common.collect.Maps.newTreeMap(); if (defaultInfo != null) { dashboards.put(defaultInfo.id, defaultInfo); } } else { dashboards = allDashboardsFor(projectState, (defaultInfo != null ? defaultInfo.id : null)); } break; default : throw new java.lang.IllegalStateException((""unsupported dashboard level: "" + (level))); } } else { dashboards = com.google.common.collect.Maps.newTreeMap(); } format.newGson().toJson(dashboards, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo>>() {}.getType(), stdout); stdout.print('\n'); } finally { stdout.flush(); } }",d18d4b460964f8b2771ca5cc9fa6ccd43ad80a39,display(java.io.OutputStream),153577,280,422
64350,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_edit_ChangeEditIT.java,22.0,"@org.junit.Test public void getFileContentRest() throws java.lang.Exception { com.google.gerrit.server.change.ChangeEdits.Put.Input in = new com.google.gerrit.server.change.ChangeEdits.Put.Input(); in.content = com.google.gerrit.acceptance.RestSession.newRawInput(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW); assertThat(adminSession.putRaw(urlEditFile(), in.content).getStatusCode()).isEqualTo(com.google.gerrit.acceptance.edit.SC_NO_CONTENT); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); assertThat(modifier.modifyFile(edit.get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.RestSession.newRawInput(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW2))).isEqualTo(RefUpdate.Result.FORCED); edit = editUtil.byChange(change); com.google.gerrit.acceptance.RestResponse r = adminSession.getJsonAccept(urlEditFile()); assertThat(r.getStatusCode()).isEqualTo(com.google.gerrit.acceptance.edit.SC_OK); assertThat(readContentFromJson(r)).isEqualTo(org.apache.commons.codec.binary.StringUtils.newStringUtf8(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW2)); }",1625512199d16f26468e6b89dc505bceae598c6d,"@org.junit.Test public void getFileContentRest() throws java.lang.Exception { com.google.gerrit.server.change.ChangeEdits.Put.Input in = new com.google.gerrit.server.change.ChangeEdits.Put.Input(); in.content = com.google.gerrit.acceptance.RestSession.newRawInput(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW); assertThat(adminSession.putRaw(urlEditFile(), in.content).getStatusCode()).isEqualTo(com.google.gerrit.acceptance.edit.SC_NO_CONTENT); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); assertThat(modifier.modifyFile(edit.get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.RestSession.newRawInput(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW2))).isEqualTo(RefUpdate.Result.FORCED); edit = editUtil.byChange(change); com.google.gerrit.acceptance.RestResponse r = adminSession.getJsonAccept(urlEditFile()); assertThat(r.getStatusCode()).isEqualTo(com.google.gerrit.acceptance.edit.SC_OK); assertThat(readContentFromJson(r)).isEqualTo(org.apache.commons.codec.binary.StringUtils.newStringUtf8(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW2.getBytes(""UTF-8""))); }",96221d1a8354388d1062e041be40edf05b43abe0,getFileContentRest(),getFileContentRest(),4,22,"@org.junit.Test public void getFileContentRest() throws java.lang.Exception { com.google.gerrit.server.change.ChangeEdits.Put.Input in = new com.google.gerrit.server.change.ChangeEdits.Put.Input(); in.content = com.google.gerrit.acceptance.RestSession.newRawInput(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW); assertThat(adminSession.putRaw(urlEditFile(), in.content).getStatusCode()).isEqualTo(com.google.gerrit.acceptance.edit.SC_NO_CONTENT); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); assertThat(modifier.modifyFile(edit.get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.RestSession.newRawInput(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW2))).isEqualTo(RefUpdate.Result.FORCED); edit = editUtil.byChange(change); com.google.gerrit.acceptance.RestResponse r = adminSession.getJsonAccept(urlEditFile()); assertThat(r.getStatusCode()).isEqualTo(com.google.gerrit.acceptance.edit.SC_OK); assertThat(readContentFromJson(r)).isEqualTo(org.apache.commons.codec.binary.StringUtils.newStringUtf8(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW2)); }",1625512199d16f26468e6b89dc505bceae598c6d,getFileContentRest(),172771,365,360
53352,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,54.0,"@java.lang.Override public void onSuccess(com.google.gerrit.client.diff.DiffInfo diffInfo) { if ((id == (reloadVersionId)) && (isAttached())) { diff = diffInfo; operation(new java.lang.Runnable() { @java.lang.Override public void run() { skipManager.removeAll(); clearMarkers(); diffTable.sidePanel.clearDiffGutters(); setShowIntraline(prefs.intralineDifference()); render(diff); skipManager.render(prefs.context(), diff); } }); } }",2f2029bb7b489c883f476d9e95b3a4edba0f9e06,"@java.lang.Override public void onSuccess(com.google.gerrit.client.diff.DiffInfo diffInfo) { if ((id == (reloadVersionId)) && (isAttached())) { diff = diffInfo; operation(new java.lang.Runnable() { @java.lang.Override public void run() { skipManager.removeAll(); coloringManager.reset(); diffTable.sidePanel.clearDiffGutters(); setShowIntraline(prefs.intralineDifference()); render(diff); skipManager.render(prefs.context(), diff); } }); } }",5bc8c648335f15f3507e2a29a21c267a78404b32,onSuccess(com.google.gerrit.client.diff.DiffInfo),onSuccess(com.google.gerrit.client.diff.DiffInfo),5,55,"@java.lang.Override public void onSuccess(com.google.gerrit.client.diff.DiffInfo diffInfo) { if ((id == (reloadVersionId)) && (isAttached())) { diff = diffInfo; operation(new java.lang.Runnable() { @java.lang.Override public void run() { skipManager.removeAll(); chunkManager.reset(); diffTable.sidePanel.clearDiffGutters(); setShowIntraline(prefs.intralineDifference()); render(diff); skipManager.render(prefs.context(), diff); } }); } }",2db0541de18832e00ec6484ed2cce8233f8e4006,onSuccess(com.google.gerrit.client.diff.DiffInfo),199298,124,123
164952,javatests_com_google_gerrit_server_project_SubmitRulesEvaluatorTest.java,,,,"private com.google.gerrit.server.project.SubmitRuleEvaluator makeEvaluator() { com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey(""project""); com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeData.createForTest(project, new com.google.gerrit.reviewdb.client.Change.Id(1), 1); cd.setChange(com.google.gerrit.testing.TestChanges.newChange(project, com.google.gerrit.server.project.SubmitRulesEvaluatorTest.ADMIN_USER)); return evaluatorFactory.create(cd); }",f7f64301b299ec266711d5ac05e3c5800ee7b1f3,,makeEvaluator(),4,2,"private com.google.gerrit.server.project.SubmitRuleEvaluator makeEvaluator() { com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeData.createForTest(project, new com.google.gerrit.reviewdb.client.Change.Id(1), 1); cd.setChange(com.google.gerrit.testing.TestChanges.newChange(project, admin.id)); return evaluatorFactory.create(cd); }",ceeae14ec642baae9d9361bdd8dc110b9421e254,makeEvaluator(),40644,168,112
71648,src_main_java_com_googlesource_gerrit_plugins_cfoauth_UAAClient.java,12.0,"public com.googlesource.gerrit.plugins.cfoauth.AccessToken getAccessToken(java.lang.String authorizationCode) throws com.googlesource.gerrit.plugins.cfoauth.UAAClientException { org.scribe.model.OAuthRequest request = new org.scribe.model.OAuthRequest(POST, accessTokenEndpoint); request.addHeader(com.googlesource.gerrit.plugins.cfoauth.UAAClient.AUTHORIZATION_HEADER, clientCredentials); request.addBodyParameter(com.googlesource.gerrit.plugins.cfoauth.UAAClient.GRANT_TYPE, com.googlesource.gerrit.plugins.cfoauth.UAAClient.BY_AUTHORIZATION_CODE); request.addBodyParameter(com.googlesource.gerrit.plugins.cfoauth.CODE, authorizationCode); request.addBodyParameter(com.googlesource.gerrit.plugins.cfoauth.REDIRECT_URI, redirectUrl); org.scribe.model.Response response = request.send(); if ((response.getCode()) != (java.net.HttpURLConnection.HTTP_OK)) { throw new com.googlesource.gerrit.plugins.cfoauth.UAAClientException(java.text.MessageFormat.format(""POST /oauth/token failed with status {0}"", response.getCode())); } return parseAccessTokenResponse(response.getBody()); }",1569e0e14462a605447caafae71efd1afc2070fa,"public com.googlesource.gerrit.plugins.cfoauth.AccessToken getAccessToken(java.lang.String authorizationCode) throws com.googlesource.gerrit.plugins.cfoauth.UAAClientException { if (authorizationCode == null) { throw new com.googlesource.gerrit.plugins.cfoauth.UAAClientException(""Must provide an authorization code""); } org.scribe.model.OAuthRequest request = new org.scribe.model.OAuthRequest(POST, accessTokenEndpoint); request.addHeader(com.googlesource.gerrit.plugins.cfoauth.UAAClient.AUTHORIZATION_HEADER, clientCredentials); request.addBodyParameter(com.googlesource.gerrit.plugins.cfoauth.UAAClient.GRANT_TYPE, com.googlesource.gerrit.plugins.cfoauth.UAAClient.BY_AUTHORIZATION_CODE); request.addBodyParameter(com.googlesource.gerrit.plugins.cfoauth.CODE, authorizationCode); request.addBodyParameter(com.googlesource.gerrit.plugins.cfoauth.REDIRECT_URI, redirectUrl); org.scribe.model.Response response = request.send(); if ((response.getCode()) != (java.net.HttpURLConnection.HTTP_OK)) { throw new com.googlesource.gerrit.plugins.cfoauth.UAAClientException(java.text.MessageFormat.format(""POST /oauth/token failed with status {0}"", response.getCode())); } return parseAccessTokenResponse(response.getBody()); }",d0704bfb3d6182a469390409bb2fe4f0134073f8,getAccessToken(java.lang.String),getAccessToken(java.lang.String),4,12,"public com.googlesource.gerrit.plugins.cfoauth.AccessToken getAccessToken(java.lang.String authorizationCode) throws com.googlesource.gerrit.plugins.cfoauth.UAAClientException { org.scribe.model.OAuthRequest request = new org.scribe.model.OAuthRequest(POST, accessTokenEndpoint); request.addHeader(com.googlesource.gerrit.plugins.cfoauth.UAAClient.AUTHORIZATION_HEADER, clientCredentials); request.addBodyParameter(com.googlesource.gerrit.plugins.cfoauth.UAAClient.GRANT_TYPE, com.googlesource.gerrit.plugins.cfoauth.UAAClient.BY_AUTHORIZATION_CODE); request.addBodyParameter(com.googlesource.gerrit.plugins.cfoauth.CODE, authorizationCode); request.addBodyParameter(com.googlesource.gerrit.plugins.cfoauth.REDIRECT_URI, redirectUrl); org.scribe.model.Response response = request.send(); if ((response.getCode()) != (java.net.HttpURLConnection.HTTP_OK)) { throw new com.googlesource.gerrit.plugins.cfoauth.UAAClientException(java.text.MessageFormat.format(""POST /oauth/token failed with status {0}"", response.getCode())); } return parseAccessTokenResponse(response.getBody()); }",1569e0e14462a605447caafae71efd1afc2070fa,getAccessToken(java.lang.String),185145,321,287
139731,java_com_google_gerrit_server_index_group_StalenessChecker.java,,,,"public boolean isStale(com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (!(config.getBoolean(""user"", ""readGroupsFromNoteDb"", false))) { return false; } com.google.gerrit.server.index.group.GroupIndex i = indexes.getSearchIndex(); if (i == null) { return false; } if (!(i.getSchema().hasField(GroupField.REF_STATE))) { return false; } java.util.Optional<com.google.gerrit.server.group.InternalGroup> result = i.get(id, com.google.gerrit.server.index.group.IndexedGroupQuery.createOptions(indexConfig, 0, 1, com.google.gerrit.server.index.group.StalenessChecker.FIELDS)); if (!(result.isPresent())) { return true; } com.google.gerrit.server.group.InternalGroup group = result.get(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ref = repo.findRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(id)); org.eclipse.jgit.lib.ObjectId head = (ref == null) ? org.eclipse.jgit.lib.ObjectId.zeroId() : ref.getObjectId(); return !(head.equals(group.getRefState())); } }",b6c40a5b139646f87e05ce1a3b2922655539dab0,,isStale(com.google.gerrit.reviewdb.client.AccountGroup$UUID),10,0,"public boolean isStale(com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (!(config.getBoolean(""user"", ""readGroupsFromNoteDb"", false))) { return false; } com.google.gerrit.server.index.group.GroupIndex i = indexes.getSearchIndex(); if (i == null) { return false; } if (!(i.getSchema().hasField(GroupField.REF_STATE))) { return false; } java.util.Optional<com.google.gerrit.index.query.FieldBundle> result = i.getRaw(id, com.google.gerrit.server.index.group.IndexedGroupQuery.createOptions(indexConfig, 0, 1, com.google.gerrit.server.index.group.StalenessChecker.FIELDS)); if (!(result.isPresent())) { return true; } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(id)); org.eclipse.jgit.lib.ObjectId head = (ref == null) ? org.eclipse.jgit.lib.ObjectId.zeroId() : ref.getObjectId(); return !(head.equals(org.eclipse.jgit.lib.ObjectId.fromString(result.get().getValue(GroupField.REF_STATE), 0))); } }",1adcf2e560e2f58b529835653c6f80684ab2ff56,isStale(com.google.gerrit.reviewdb.client.AccountGroup$UUID),23629,337,341
71820,gerrit-gwtexpui_src_main_java_com_google_gwtexpui_clippy_client_ClippyResources.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.google.gwt.resources.client.ClientBundle.Source(""clipboard-16.png"") com.google.gwt.resources.client.ImageResource clipboard();",9933ec426afad0eeb1c38db1614652f2b1142714,,clipboard(),10,2,"@com.google.gwtexpui.clippy.client.Source(""clipboard-16.png"") com.google.gwt.resources.client.ImageResource clipboard();",8df43fc578c49b52e096639003a2a7164a6521ac,clipboard(),185687,36,36
77763,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_AbstractSubmit.java,14.0,"protected org.eclipse.jgit.revwalk.RevCommit getRemoteHead(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String branch) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { return getHead(repo, (""refs/heads/"" + branch)); } }",64afb4072a37742bf00d1d2b3acc5cf9d8de52d9,"protected org.eclipse.jgit.revwalk.RevCommit getRemoteHead(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String branch) throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { return getHead(repo, (""refs/heads/"" + branch)); } }",b60ba2fc686afa8b48c4635111708a5c255148b3,"getRemoteHead(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)","getRemoteHead(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)",6,11,"protected org.eclipse.jgit.revwalk.RevCommit getRemoteHead(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String branch) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { return getHead(repo, (""refs/heads/"" + branch)); } }",64afb4072a37742bf00d1d2b3acc5cf9d8de52d9,"getRemoteHead(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)",38160,92,92
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,32.0,"public static com.google.gerrit.client.rpc.RestApi hashtags(int changeId) { return com.google.gerrit.client.changes.ChangeApi.change(changeId).view(""hashtags""); }",7e2675f4f7dba385ac81de0834f96750bd3d56a3,"public static com.google.gerrit.client.rpc.RestApi hashtags(int changeId, @com.google.gerrit.common.Nullable java.lang.String project) { return com.google.gerrit.client.changes.ChangeApi.change(changeId, project).view(""hashtags""); }",0f0cb313b94ee80b8ecb6ee9f5ce0b8bd078ede9,hashtags(int),"hashtags(int,java.lang.String)",7,25,"public static com.google.gerrit.client.rpc.RestApi hashtags(@com.google.gerrit.common.Nullable java.lang.String project, int changeId) { return com.google.gerrit.client.changes.ChangeApi.change(project, changeId).view(""hashtags""); }",f79e93e83630b4e7e7976ebb9ebd5b7f8744f74d,"hashtags(java.lang.String,int)",211106,69,68
61573,gerrit-server_src_test_java_com_google_gerrit_server_query_change_AbstractQueryChangesTest.java,32.0,"@org.junit.Test public void byStatusClosed() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = createProject(""repo""); com.google.gerrit.server.change.ChangeInserter ins1 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change1 = ins1.getChange(); change1.setStatus(Change.Status.MERGED); ins1.insert(); com.google.gerrit.server.change.ChangeInserter ins2 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change2 = ins2.getChange(); change2.setStatus(Change.Status.ABANDONED); ins2.insert(); com.google.gerrit.server.change.ChangeInserter ins3 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change3 = ins3.getChange(); change3.setStatus(Change.Status.NEW); ins3.insert(); java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo> results; results = query(""status:closed""); assertEquals(2, results.size()); assertResultEquals(change2, results.get(0)); assertResultEquals(change1, results.get(1)); assertEquals(2, query(""status:CLOSED"").size()); assertEquals(2, query(""status:c"").size()); assertEquals(2, query(""status:cl"").size()); assertEquals(2, query(""status:clo"").size()); assertEquals(2, query(""status:clos"").size()); assertEquals(2, query(""status:close"").size()); assertEquals(2, query(""status:closed"").size()); results = query(""is:closed""); assertEquals(2, results.size()); assertResultEquals(change2, results.get(0)); assertResultEquals(change1, results.get(1)); }",de369270f5aaaf7f5ad26bbc7dbfc1788d29f610,"@org.junit.Test public void byStatusClosed() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = createProject(""repo""); com.google.gerrit.server.change.ChangeInserter ins1 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change1 = ins1.getChange(); change1.setStatus(Change.Status.MERGED); ins1.insert(); com.google.gerrit.server.change.ChangeInserter ins2 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change2 = ins2.getChange(); change2.setStatus(Change.Status.ABANDONED); ins2.insert(); com.google.gerrit.server.change.ChangeInserter ins3 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change3 = ins3.getChange(); change3.setStatus(Change.Status.NEW); ins3.insert(); java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo> results; results = query(""status:closed""); assertThat(results).hasSize(2); assertResultEquals(change2, results.get(0)); assertResultEquals(change1, results.get(1)); assertThat(query(""status:CLOSED"")).hasSize(2); assertThat(query(""status:c"")).hasSize(2); assertThat(query(""status:cl"")).hasSize(2); assertThat(query(""status:clo"")).hasSize(2); assertThat(query(""status:clos"")).hasSize(2); assertThat(query(""status:close"")).hasSize(2); assertThat(query(""status:closed"")).hasSize(2); results = query(""is:closed""); assertThat(results).hasSize(2); assertResultEquals(change2, results.get(0)); assertResultEquals(change1, results.get(1)); }",1190c280f957e7a832e208fde3fad87c22c5b9fc,byStatusClosed(),byStatusClosed(),15,31,"@org.junit.Test public void byStatusClosed() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = createProject(""repo""); com.google.gerrit.server.change.ChangeInserter ins1 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change1 = ins1.getChange(); change1.setStatus(Change.Status.MERGED); ins1.insert(); com.google.gerrit.server.change.ChangeInserter ins2 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change2 = ins2.getChange(); change2.setStatus(Change.Status.ABANDONED); ins2.insert(); com.google.gerrit.server.change.ChangeInserter ins3 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change3 = ins3.getChange(); change3.setStatus(Change.Status.NEW); ins3.insert(); java.util.List<com.google.gerrit.extensions.common.ChangeInfo> results; results = query(""status:closed""); assertThat(results).hasSize(2); assertResultEquals(change2, results.get(0)); assertResultEquals(change1, results.get(1)); assertThat(query(""status:CLOSED"")).hasSize(2); assertThat(query(""status:c"")).hasSize(2); assertThat(query(""status:cl"")).hasSize(2); assertThat(query(""status:clo"")).hasSize(2); assertThat(query(""status:clos"")).hasSize(2); assertThat(query(""status:close"")).hasSize(2); assertThat(query(""status:closed"")).hasSize(2); results = query(""is:closed""); assertThat(results).hasSize(2); assertResultEquals(change2, results.get(0)); assertResultEquals(change1, results.get(1)); }",caf14fd4a54335b4dc5a2c5d2ac35e4802de2404,byStatusClosed(),77450,441,438
94513,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_api_changes_ChangeEditApi.java,,,,"@java.lang.Override public void renameFile(java.lang.String oldFilePath, java.lang.String newFilePath) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); }",025517a0b756669969999a7f5d5fb9599c59049c,,"renameFile(java.lang.String,java.lang.String)",5,1,"@java.lang.Override public void renameFile(java.lang.String oldFilePath, java.lang.String newFilePath) { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); }",4fd179b5ba483ea20f600f4e64b30b510de9154a,"renameFile(java.lang.String,java.lang.String)",123470,61,46
54609,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_InitPlugins.java,7.0,"public static java.util.List<com.google.gerrit.pgm.init.InitPlugins.PluginData> listPluginsAndRemoveTempFiles(com.google.gerrit.server.config.SitePaths site) throws java.io.IOException { return com.google.gerrit.pgm.init.InitPlugins.listPlugins(site, true); }",c8ccd1db2a8ae9f954b5546e6f174a132dde5dc5,"public static java.util.List<com.google.gerrit.pgm.init.InitPlugins.PluginData> listPluginsAndRemoveTempFiles(com.google.gerrit.server.config.SitePaths site, com.google.gerrit.pgm.init.GerritDistributionLocator distroLocator) throws java.io.IOException { return com.google.gerrit.pgm.init.InitPlugins.listPlugins(site, true, distroLocator); }",c137dded365823272f6c23443e872880a3956feb,listPluginsAndRemoveTempFiles(com.google.gerrit.server.config.SitePaths),"listPluginsAndRemoveTempFiles(com.google.gerrit.server.config.SitePaths,com.google.gerrit.pgm.init.GerritDistributionLocator)",5,1,"public static java.util.List<com.google.gerrit.pgm.init.InitPlugins.PluginData> listPluginsAndRemoveTempFiles(com.google.gerrit.server.config.SitePaths site, com.google.gerrit.pgm.init.PluginsDistribution pluginsDistribution) throws java.io.IOException { return com.google.gerrit.pgm.init.InitPlugins.listPlugins(site, true, pluginsDistribution); }",1a8d5343cbfeab7e29ed3c9ab360a92fd3f04586,"listPluginsAndRemoveTempFiles(com.google.gerrit.server.config.SitePaths,com.google.gerrit.pgm.init.PluginsDistribution)",168022,102,99
48101,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DraftBox.java,20.0,"@com.google.gwt.uibinder.client.UiHandler(""editArea"") void onKeyDown(com.google.gwt.event.dom.client.KeyDownEvent e) { if ((((e.isControlKeyDown()) || (e.isMetaKeyDown())) && (!(e.isAltKeyDown()))) && (!(e.isShiftKeyDown()))) { switch (e.getNativeKeyCode()) { case 's' : case 'S' : e.preventDefault(); onSave(); return; } } else if ((((e.getNativeKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE)) && ((comment.id()) == null)) && ((editArea.getValue().length()) == 0)) { removeUI(); return; } expandTimer.schedule(250); }",3c0cbe64af0a7fbd816aa149e2251d79c8993017,"@com.google.gwt.uibinder.client.UiHandler(""editArea"") void onKeyDown(com.google.gwt.event.dom.client.KeyDownEvent e) { if ((((e.isControlKeyDown()) || (e.isMetaKeyDown())) && (!(e.isAltKeyDown()))) && (!(e.isShiftKeyDown()))) { switch (e.getNativeKeyCode()) { case 's' : case 'S' : e.preventDefault(); onSave(); return; } } else if (((e.getNativeKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE)) && (!(isDirty()))) { if (isNew()) { removeUI(); } else { setEdit(false); cm.focus(); } } }",b9753ee0af6f0240066a1e9fd6bc0e6543e21a34,onKeyDown(com.google.gwt.event.dom.client.KeyDownEvent),onKeyDown(com.google.gwt.event.dom.client.KeyDownEvent),2,21,"@com.google.gwt.uibinder.client.UiHandler(""editArea"") void onKeyDown(com.google.gwt.event.dom.client.KeyDownEvent e) { if ((((e.isControlKeyDown()) || (e.isMetaKeyDown())) && (!(e.isAltKeyDown()))) && (!(e.isShiftKeyDown()))) { switch (e.getNativeKeyCode()) { case 's' : case 'S' : e.preventDefault(); onSave(); return; } } else if (((e.getNativeKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE)) && (!(isDirty()))) { if (isNew()) { removeUI(); return; } else { setEdit(false); cm.focus(); return; } } expandTimer.schedule(250); }",75837ae491744ca0bf1ec8176dd588d67db399aa,onKeyDown(com.google.gwt.event.dom.client.KeyDownEvent),41300,169,180
75967,gerrit-gwtui_src_main_java_com_google_gerrit_client_editor_EditScreen.java,12.0,@java.lang.Override protected void onUnload() { super.onUnload(); if ((cm) != null) { cm.getWrapperElement().removeFromParent(); } if ((resizeHandler) != null) { resizeHandler.removeHandler(); } if ((closeHandler) != null) { closeHandler.removeHandler(); } com.google.gwt.user.client.Window.enableScrolling(true); com.google.gerrit.client.Gerrit.setHeaderVisible(true); com.google.gerrit.client.JumpKeys.enable(true); },9dc2ef187b2bbb000f07f66b80b6fb5acb0cdcd6,@java.lang.Override protected void onUnload() { super.onUnload(); if ((cmOrig) != null) { cmOrig.getWrapperElement().removeFromParent(); } if ((cmEdit) != null) { cmEdit.getWrapperElement().removeFromParent(); } if ((resizeHandler) != null) { resizeHandler.removeHandler(); } if ((closeHandler) != null) { closeHandler.removeHandler(); } com.google.gwt.user.client.Window.enableScrolling(true); com.google.gerrit.client.Gerrit.setHeaderVisible(true); com.google.gerrit.client.JumpKeys.enable(true); },751261691428a8324035bebbc931457dbcbf790d,onUnload(),onUnload(),43,13,@java.lang.Override protected void onUnload() { super.onUnload(); if ((cmBase) != null) { cmBase.getWrapperElement().removeFromParent(); } if ((cmEdit) != null) { cmEdit.getWrapperElement().removeFromParent(); } if ((resizeHandler) != null) { resizeHandler.removeHandler(); } if ((closeHandler) != null) { closeHandler.removeHandler(); } com.google.gwt.user.client.Window.enableScrolling(true); com.google.gerrit.client.Gerrit.setHeaderVisible(true); com.google.gerrit.client.JumpKeys.enable(true); },347a2516d4bd51f96002663b6c6cb03b0cebcc7b,onUnload(),191657,145,145
66793,gerrit-server_src_main_java_com_google_gerrit_server_change_Submit.java,6.0,"private java.lang.String problemsForSubmittingChanges(java.util.List<com.google.gerrit.server.query.change.ChangeData> changes, com.google.gerrit.server.IdentifiedUser identifiedUser) { for (com.google.gerrit.server.query.change.ChangeData c : changes) { try { com.google.gerrit.server.project.ChangeControl changeControl = c.changeControl().forUser(identifiedUser); if (!(changeControl.isVisible(dbProvider.get()))) { return com.google.gerrit.server.change.Submit.BLOCKED_HIDDEN_TOPIC_TOOLTIP; } if (!(changeControl.canSubmit())) { return com.google.gerrit.server.change.Submit.BLOCKED_TOPIC_TOOLTIP; } checkSubmitRule(c, c.currentPatchSet(), false); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.change.Submit.log.error(""Error checking if change is submittable"", e); throw new com.google.gwtorm.server.OrmRuntimeException(e); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { return com.google.gerrit.server.change.Submit.BLOCKED_TOPIC_TOOLTIP; } } return null; }",fb4b7b7b4df9657bf5d33b556de48af1621aa7b4,"private java.lang.String problemsForSubmittingChanges(com.google.gerrit.server.change.RevisionResource resource, java.util.List<com.google.gerrit.server.query.change.ChangeData> changes, com.google.gerrit.server.IdentifiedUser identifiedUser) { try { if (!(mergeableProvider.get().apply(resource).mergeable)) { return Util.C.mergeConflict(); } } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gwtorm.server.OrmRuntimeException(""Could not determine mergeability"", e); } for (com.google.gerrit.server.query.change.ChangeData c : changes) { try { com.google.gerrit.server.project.ChangeControl changeControl = c.changeControl().forUser(identifiedUser); if (!(changeControl.isVisible(dbProvider.get()))) { return com.google.gerrit.server.change.Submit.BLOCKED_HIDDEN_TOPIC_TOOLTIP; } if (!(changeControl.canSubmit())) { return com.google.gerrit.server.change.Submit.BLOCKED_TOPIC_TOOLTIP; } checkSubmitRule(c, c.currentPatchSet(), false); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.change.Submit.log.error(""Error checking if change is submittable"", e); throw new com.google.gwtorm.server.OrmRuntimeException(e); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { return com.google.gerrit.server.change.Submit.BLOCKED_TOPIC_TOOLTIP; } } return null; }",4edf2148fad53282a315592e1fa7916c1474b036,"problemsForSubmittingChanges(java.util.List,com.google.gerrit.server.IdentifiedUser)","problemsForSubmittingChanges(com.google.gerrit.server.change.RevisionResource,java.util.List,com.google.gerrit.server.IdentifiedUser)",7,12,"private java.lang.String problemsForSubmittingChanges(com.google.gerrit.server.change.RevisionResource resource, java.util.List<com.google.gerrit.server.query.change.ChangeData> changeList, com.google.gerrit.server.IdentifiedUser identifiedUser) { try { if (!(mergeableProvider.get().apply(resource).mergeable)) { return com.google.gerrit.server.change.Submit.CLICK_FAILURE_TOOLTIP; } for (com.google.gerrit.server.query.change.ChangeData c : changeList) { if (!(c.isMergeable())) { return com.google.gerrit.server.change.Submit.CLICK_FAILURE_OTHER_TOOLTIP; } com.google.gerrit.server.project.ChangeControl changeControl = c.changeControl().forUser(identifiedUser); if (!(changeControl.isVisible(dbProvider.get()))) { return com.google.gerrit.server.change.Submit.BLOCKED_HIDDEN_TOPIC_TOOLTIP; } if (!(changeControl.canSubmit())) { return com.google.gerrit.server.change.Submit.BLOCKED_TOPIC_TOOLTIP; } checkSubmitRule(c, c.currentPatchSet(), false); } } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gwtorm.server.OrmException | java.io.IOException e) { com.google.gerrit.server.change.Submit.log.error(""Error checking if change is submittable"", e); throw new com.google.gwtorm.server.OrmRuntimeException(""Could not determine problems for the change"", e); } return null; }",571fb7aec55218d5e4602780b2957d37dfb50e0d,"problemsForSubmittingChanges(com.google.gerrit.server.change.RevisionResource,java.util.List,com.google.gerrit.server.IdentifiedUser)",205859,406,376
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Message.java,4.0,"private void renderComments(java.util.List<com.google.gerrit.client.changes.CommentInfo> list) { com.google.gerrit.client.ui.CommentLinkProcessor clp = history.getCommentLinkProcessor(); com.google.gerrit.reviewdb.client.PatchSet.Id ps = new com.google.gerrit.reviewdb.client.PatchSet.Id(history.getChangeId(), info._revisionNumber()); java.util.TreeMap<java.lang.String, java.util.List<com.google.gerrit.client.changes.CommentInfo>> m = com.google.gerrit.client.change.Message.byPath(list); java.util.List<com.google.gerrit.client.changes.CommentInfo> l = m.remove(Patch.COMMIT_MSG); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, ps, Util.C.commitMessage(), l)); } l = m.remove(Patch.MERGE_LIST); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, ps, Util.C.mergeList(), l)); } for (java.util.Map.Entry<java.lang.String, java.util.List<com.google.gerrit.client.changes.CommentInfo>> e : m.entrySet()) { comments.add(new com.google.gerrit.client.change.FileComments(clp, ps, e.getKey(), e.getValue())); } }",abd6214cdbc0c9f7a214e39b93dcd72b2a6ad22f,"private void renderComments(java.util.List<com.google.gerrit.client.changes.CommentInfo> list) { com.google.gerrit.client.ui.CommentLinkProcessor clp = history.getCommentLinkProcessor(); com.google.gerrit.reviewdb.client.PatchSet.Id ps = new com.google.gerrit.reviewdb.client.PatchSet.Id(history.getChangeId(), info._revisionNumber()); java.util.TreeMap<java.lang.String, java.util.List<com.google.gerrit.client.changes.CommentInfo>> m = com.google.gerrit.client.change.Message.byPath(list); java.util.List<com.google.gerrit.client.changes.CommentInfo> l = m.remove(Patch.COMMIT_MSG); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, ps, history.getProject(), Util.C.commitMessage(), l)); } l = m.remove(Patch.MERGE_LIST); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, ps, history.getProject(), Util.C.mergeList(), l)); } for (java.util.Map.Entry<java.lang.String, java.util.List<com.google.gerrit.client.changes.CommentInfo>> e : m.entrySet()) { comments.add(new com.google.gerrit.client.change.FileComments(clp, ps, history.getProject(), e.getKey(), e.getValue())); } }",1518baeb2831ce8fe5bb7ef593ba4a22622c632b,renderComments(java.util.List),renderComments(java.util.List),7,4,"private void renderComments(java.util.List<com.google.gerrit.client.changes.CommentInfo> list) { com.google.gerrit.client.ui.CommentLinkProcessor clp = history.getCommentLinkProcessor(); com.google.gerrit.reviewdb.client.PatchSet.Id ps = new com.google.gerrit.reviewdb.client.PatchSet.Id(history.getChangeId(), info._revisionNumber()); java.util.TreeMap<java.lang.String, java.util.List<com.google.gerrit.client.changes.CommentInfo>> m = com.google.gerrit.client.change.Message.byPath(list); java.util.List<com.google.gerrit.client.changes.CommentInfo> l = m.remove(Patch.COMMIT_MSG); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, history.getProject(), ps, Util.C.commitMessage(), l)); } l = m.remove(Patch.MERGE_LIST); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, history.getProject(), ps, Util.C.mergeList(), l)); } for (java.util.Map.Entry<java.lang.String, java.util.List<com.google.gerrit.client.changes.CommentInfo>> e : m.entrySet()) { comments.add(new com.google.gerrit.client.change.FileComments(clp, history.getProject(), ps, e.getKey(), e.getValue())); } }",ca60f1bbb2c125570f9680a77695f47aec10fd1f,renderComments(java.util.List),211081,375,375
24054,gerrit-server_src_main_java_com_google_gerrit_server_git_VisibleRefFilter.java,0.0,"@java.lang.Override public java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> filter(java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { final java.util.Set<com.google.gerrit.reviewdb.Change.Id> visibleChanges = visibleChanges(); final java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> result = new java.util.HashMap<java.lang.String, org.eclipse.jgit.lib.Ref>(); final java.util.List<org.eclipse.jgit.lib.Ref> deferredTags = new java.util.ArrayList<org.eclipse.jgit.lib.Ref>(); for (org.eclipse.jgit.lib.Ref ref : refs.values()) { if (com.google.gerrit.reviewdb.PatchSet.isRef(ref.getName())) { if (visibleChanges.contains(Change.Id.fromRef(ref.getName()))) { result.put(ref.getName(), ref); } } else if (com.google.gerrit.server.git.VisibleRefFilter.isTag(ref)) { deferredTags.add(ref); } else if (projectCtl.controlForRef(ref.getLeaf().getName()).isVisible()) { result.put(ref.getName(), ref); } } if ((!(deferredTags.isEmpty())) && (!(result.isEmpty()))) { addVisibleTags(result, deferredTags); } return result; }",570d6f088cd607aa745c6399afdb87738a409761,"@java.lang.Override public java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> filter(java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { final java.util.Set<com.google.gerrit.reviewdb.Change.Id> visibleChanges = visibleChanges(); final java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> result = new java.util.HashMap<java.lang.String, org.eclipse.jgit.lib.Ref>(); final java.util.List<org.eclipse.jgit.lib.Ref> deferredTags = new java.util.ArrayList<org.eclipse.jgit.lib.Ref>(); for (org.eclipse.jgit.lib.Ref ref : refs.values()) { if (com.google.gerrit.reviewdb.PatchSet.isRef(ref.getName())) { if (visibleChanges.contains(Change.Id.fromRef(ref.getName()))) { result.put(ref.getName(), ref); } } else if (com.google.gerrit.server.git.VisibleRefFilter.isTag(ref)) { deferredTags.add(ref); } else if (projectCtl.controlForRef(ref.getLeaf().getName()).isVisible()) { result.put(ref.getName(), ref); } } if ((!(deferredTags.isEmpty())) && (!(result.isEmpty()))) { java.util.Map<org.eclipse.jgit.lib.Ref, java.util.List<org.eclipse.jgit.lib.Ref>> reachableTags = tagCache.get(db); for (org.eclipse.jgit.lib.Ref tag : reachableTags.keySet()) { for (org.eclipse.jgit.lib.Ref ref : reachableTags.get(tag)) { if (projectCtl.controlForRef(ref.getName()).isVisible()) { result.put(tag.getName(), tag); break; } } } } return result; }",e123942d69ca75e00e577a3d56b5a5cee1c0637d,filter(java.util.Map),filter(java.util.Map),4,0,"@java.lang.Override public java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> filter(java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { final java.util.Set<com.google.gerrit.reviewdb.Change.Id> visibleChanges = visibleChanges(); final java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> result = new java.util.HashMap<java.lang.String, org.eclipse.jgit.lib.Ref>(); final java.util.List<org.eclipse.jgit.lib.Ref> deferredTags = new java.util.ArrayList<org.eclipse.jgit.lib.Ref>(); for (org.eclipse.jgit.lib.Ref ref : refs.values()) { if (com.google.gerrit.reviewdb.PatchSet.isRef(ref.getName())) { if (visibleChanges.contains(Change.Id.fromRef(ref.getName()))) { result.put(ref.getName(), ref); } } else if (com.google.gerrit.server.git.VisibleRefFilter.isTag(ref)) { if ((ref.getObjectId()) != null) { deferredTags.add(ref); } } else if (projectCtl.controlForRef(ref.getLeaf().getName()).isVisible()) { result.put(ref.getName(), ref); } } if ((!(deferredTags.isEmpty())) && (!(result.isEmpty()))) { com.google.gerrit.server.git.TagMatcher tags = tagCache.get(projectName).matcher(db, result.values()); for (org.eclipse.jgit.lib.Ref tag : deferredTags) { if (tags.isReachable(tag)) { result.put(tag.getName(), tag); } } } return result; }",b4e2a1fb3e9218de7f21413f0d740cfd3b73410d,filter(java.util.Map),146492,460,423
73888,gerrit-server_src_main_java_com_google_gerrit_server_ChangeUtil.java,1.0,"public java.lang.String getMessage(com.google.gerrit.reviewdb.client.Change change) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { com.google.gerrit.reviewdb.client.Change.Id changeId = change.getId(); com.google.gerrit.reviewdb.client.PatchSet ps = db.get().patchSets().get(change.currentPatchSetId()); if (ps == null) { throw new com.google.gerrit.server.project.NoSuchChangeException(changeId); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(change.getProject());org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(git)) { org.eclipse.jgit.revwalk.RevCommit commit = revWalk.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get())); return commit.getFullMessage(); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.server.project.NoSuchChangeException(changeId, e); } }",4d64e497ae5f8e755c15c7bb49b16242c23e2c49,"public java.lang.String getMessage(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { com.google.gerrit.reviewdb.client.Change.Id changeId = notes.getChangeId(); com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.latest(db.get(), notes); if (ps == null) { throw new com.google.gerrit.server.project.NoSuchChangeException(changeId); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(notes.getChange().getProject());org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(git)) { org.eclipse.jgit.revwalk.RevCommit commit = revWalk.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get())); return commit.getFullMessage(); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.server.project.NoSuchChangeException(changeId, e); } }",a58b848d1ba3e4bffe08a277cc14c97e027210b2,getMessage(com.google.gerrit.reviewdb.client.Change),getMessage(com.google.gerrit.server.notedb.ChangeNotes),4,8,"public java.lang.String getMessage(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { com.google.gerrit.reviewdb.client.Change.Id changeId = notes.getChangeId(); com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.current(db.get(), notes); if (ps == null) { throw new com.google.gerrit.server.project.NoSuchChangeException(changeId); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(notes.getChange().getProject());org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(git)) { org.eclipse.jgit.revwalk.RevCommit commit = revWalk.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get())); return commit.getFullMessage(); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.server.project.NoSuchChangeException(changeId, e); } }",551a247a21a5aa4cde445e829b02669d507065e5,getMessage(com.google.gerrit.server.notedb.ChangeNotes),7796,313,313
69599,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_Preferences.java,21.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private final native java.lang.String urlAlias(java.lang.String n);,24902b40f7506db8b443a78e71bdf14751aeda1a,,urlAlias(java.lang.String),24,50,private final native java.lang.String urlAliasToken(java.lang.String m);,47780581a9dbf950b3eea839ee0843da5f53d8ac,urlAliasToken(java.lang.String),195738,18,19
122251,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeInserter.java,3.0,"private void validate(com.google.gerrit.server.update.RepoContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, java.io.IOException { if (!(validate)) { return; } com.google.gerrit.server.permissions.PermissionBackend.ForRef perm = permissionBackend.user(ctx.getUser()).project(ctx.getProject()).ref(refName); try { com.google.gerrit.server.project.RefControl refControl = projectControlFactory.controlFor(ctx.getProject(), ctx.getUser()).controlForRef(refName); try (com.google.gerrit.server.events.CommitReceivedEvent event = new com.google.gerrit.server.events.CommitReceivedEvent(cmd, refControl.getProjectControl().getProject(), change.getDest().get(), ctx.getRevWalk().getObjectReader(), commitId, ctx.getIdentifiedUser())) { commitValidatorsFactory.forGerritCommits(perm, refControl, new com.google.gerrit.server.ssh.NoSshInfo(), ctx.getRevWalk()).validate(event); } } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getFullMessage()); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }",3022f30a7c2ab2057785e07b23dbe5307794dfcf,"private void validate(com.google.gerrit.server.update.RepoContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, java.io.IOException { if (!(validate)) { return; } com.google.gerrit.server.permissions.PermissionBackend.ForRef perm = permissionBackend.user(ctx.getUser()).project(ctx.getProject()).ref(refName); try { try (com.google.gerrit.server.events.CommitReceivedEvent event = new com.google.gerrit.server.events.CommitReceivedEvent(cmd, projectControlFactory.controlFor(ctx.getProject(), ctx.getUser()).getProject(), change.getDest().get(), ctx.getRevWalk().getObjectReader(), commitId, ctx.getIdentifiedUser())) { commitValidatorsFactory.forGerritCommits(perm, new com.google.gerrit.reviewdb.client.Branch.NameKey(ctx.getProject(), refName), ctx.getIdentifiedUser(), new com.google.gerrit.server.ssh.NoSshInfo(), ctx.getRevWalk()).validate(event); } } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getFullMessage()); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }",9135047796766735ed06e9b5dd9492fd6d9f3e01,validate(com.google.gerrit.server.update.RepoContext),validate(com.google.gerrit.server.update.RepoContext),2,3,"private void validate(com.google.gerrit.server.update.RepoContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, java.io.IOException { if (!(validate)) { return; } com.google.gerrit.server.permissions.PermissionBackend.ForRef perm = permissionBackend.user(ctx.getUser()).project(ctx.getProject()).ref(refName); try { try (com.google.gerrit.server.events.CommitReceivedEvent event = new com.google.gerrit.server.events.CommitReceivedEvent(cmd, projectCache.checkedGet(ctx.getProject()).getProject(), change.getDest().get(), ctx.getRevWalk().getObjectReader(), commitId, ctx.getIdentifiedUser())) { commitValidatorsFactory.forGerritCommits(perm, new com.google.gerrit.reviewdb.client.Branch.NameKey(ctx.getProject(), refName), ctx.getIdentifiedUser(), new com.google.gerrit.server.ssh.NoSshInfo(), ctx.getRevWalk()).validate(event); } } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getFullMessage()); } }",b0d62a6e94969806758fdedd8aa00d8bf1b80244,validate(com.google.gerrit.server.update.RepoContext),135039,338,291
47959,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_FileTable.java,19.0,private void setTable(com.google.gerrit.client.change.FileTable.MyTable table) { clear(); add(table); this.table = table; if (register) { table.setRegisterKeys(true); } },be6dfd55d306cc8e8c8afa06c33fc27dde0df6ec,private void setTable(com.google.gerrit.client.change.FileTable.MyTable table) { clear(); add(table); this.table = table; if (register) { table.setRegisterKeys(true); } if ((scrollToPath) != null) { table.scrollToPath(scrollToPath); scrollToPath = null; } },c6c37c849d1739af8c5f6bcabfe86bff7629132f,setTable(com.google.gerrit.client.change.FileTable$MyTable),setTable(com.google.gerrit.client.change.FileTable$MyTable),2,27,private void setTable(com.google.gerrit.client.change.FileTable.MyTable table) { clear(); add(table); this.table = table; if (register) { table.setRegisterKeys(true); } if ((reviewed) != null) { table.markReviewed(reviewed); reviewed = null; } if ((scrollToPath) != null) { table.scrollToPath(scrollToPath); scrollToPath = null; } },8b562cfe04ebcea39eb80a172c3448582f999fee,setTable(com.google.gerrit.client.change.FileTable$MyTable),171857,76,103
163935,gerrit-server_src_main_java_com_google_gerrit_server_config_AuthConfig.java,11.0,public boolean isIdentityTrustable(java.util.Collection<com.google.gerrit.server.account.ExternalId> ids) { switch (getAuthType()) { case DEVELOPMENT_BECOME_ANY_ACCOUNT : case HTTP : case HTTP_LDAP : case LDAP : case LDAP_BIND : case CLIENT_SSL_CERT_LDAP : case CUSTOM_EXTENSION : case OAUTH : return true; case OPENID_SSO : return true; case OPENID : for (com.google.gerrit.server.account.ExternalId e : ids) { if (!(isTrusted(e))) { return false; } } return true; default : return false; } },4217e4bbb38440661ff591eb433d257ca23d8dc3,public boolean isIdentityTrustable(final java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { switch (getAuthType()) { case DEVELOPMENT_BECOME_ANY_ACCOUNT : case HTTP : case HTTP_LDAP : case LDAP : case LDAP_BIND : case CLIENT_SSL_CERT_LDAP : case CUSTOM_EXTENSION : case OAUTH : return true; case OPENID_SSO : return true; case OPENID : for (final com.google.gerrit.reviewdb.client.AccountExternalId e : ids) { if (!(isTrusted(e))) { return false; } } return true; default : return false; } },4d7c9c622d470c680916af4fc05bf614fb6da8e5,isIdentityTrustable(java.util.Collection),isIdentityTrustable(java.util.Collection),3,10,public boolean isIdentityTrustable(java.util.Collection<com.google.gerrit.server.account.ExternalId> ids) { switch (getAuthType()) { case DEVELOPMENT_BECOME_ANY_ACCOUNT : case HTTP : case HTTP_LDAP : case LDAP : case LDAP_BIND : case CLIENT_SSL_CERT_LDAP : case CUSTOM_EXTENSION : case OAUTH : return true; case OPENID_SSO : return true; case OPENID : for (com.google.gerrit.server.account.ExternalId e : ids) { if (!(isTrusted(e))) { return false; } } return true; default : return false; } },4217e4bbb38440661ff591eb433d257ca23d8dc3,isIdentityTrustable(java.util.Collection),64156,169,161
73033,gerrit-sshd_src_main_java_com_google_gerrit_sshd_SshDaemon.java,18.0,"private void initUserAuth(final org.apache.sshd.server.PublickeyAuthenticator pubkey, final org.apache.sshd.server.auth.gss.GSSAuthenticator kerberosAuthenticator, java.lang.String kerberosKeytab, java.lang.String kerberosPrincipal) { java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.server.UserAuth>> authFactories = com.google.common.collect.Lists.newArrayList(); if (kerberosKeytab != null) { authFactories.add(new org.apache.sshd.server.auth.gss.UserAuthGSS.Factory()); com.google.gerrit.sshd.SshDaemon.log.info((""Enabling kerberos with keytab "" + kerberosKeytab)); if (!(new java.io.File(kerberosKeytab).canRead())) { com.google.gerrit.sshd.SshDaemon.log.error(((""Keytab "" + kerberosKeytab) + "" does not exist or is not readable; further errors are possible"")); } kerberosAuthenticator.setKeytabFile(kerberosKeytab); if (kerberosPrincipal == null) { try { kerberosPrincipal = ""host/"" + (java.net.InetAddress.getLocalHost().getCanonicalHostName()); } catch (java.net.UnknownHostException e) { kerberosPrincipal = ""host/localhost""; } } com.google.gerrit.sshd.SshDaemon.log.info((""Using kerberos principal "" + kerberosPrincipal)); if (!(kerberosPrincipal.startsWith(""host/""))) { com.google.gerrit.sshd.SshDaemon.log.warn((""Host principal does not start with host/ "" + ""which most SSH clients will supply automatically"")); } kerberosAuthenticator.setServicePrincipalName(kerberosPrincipal); setGSSAuthenticator(kerberosAuthenticator); } authFactories.add(new org.apache.sshd.server.auth.UserAuthPublicKey.Factory()); setUserAuthFactories(authFactories); setPublickeyAuthenticator(pubkey); }",4decda8828b1ac6588f258edb569f3edcbd74e28,"private void initUserAuth(final org.apache.sshd.server.auth.pubkey.PublickeyAuthenticator pubkey, final org.apache.sshd.server.auth.gss.GSSAuthenticator kerberosAuthenticator, java.lang.String kerberosKeytab, java.lang.String kerberosPrincipal) { java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.server.auth.UserAuth>> authFactories = com.google.common.collect.Lists.newArrayList(); if (kerberosKeytab != null) { authFactories.add(new org.apache.sshd.server.auth.gss.UserAuthGSS.Factory()); com.google.gerrit.sshd.SshDaemon.log.info((""Enabling kerberos with keytab "" + kerberosKeytab)); if (!(new java.io.File(kerberosKeytab).canRead())) { com.google.gerrit.sshd.SshDaemon.log.error(((""Keytab "" + kerberosKeytab) + "" does not exist or is not readable; further errors are possible"")); } kerberosAuthenticator.setKeytabFile(kerberosKeytab); if (kerberosPrincipal == null) { try { kerberosPrincipal = ""host/"" + (java.net.InetAddress.getLocalHost().getCanonicalHostName()); } catch (java.net.UnknownHostException e) { kerberosPrincipal = ""host/localhost""; } } com.google.gerrit.sshd.SshDaemon.log.info((""Using kerberos principal "" + kerberosPrincipal)); if (!(kerberosPrincipal.startsWith(""host/""))) { com.google.gerrit.sshd.SshDaemon.log.warn((""Host principal does not start with host/ "" + ""which most SSH clients will supply automatically"")); } kerberosAuthenticator.setServicePrincipalName(kerberosPrincipal); setGSSAuthenticator(kerberosAuthenticator); } authFactories.add(new org.apache.sshd.server.auth.UserAuthPublicKey.Factory()); setUserAuthFactories(authFactories); setPublickeyAuthenticator(pubkey); }",db3086a5f47fbc739bb75664c50179d9e3418d1a,"initUserAuth(org.apache.sshd.server.PublickeyAuthenticator,org.apache.sshd.server.auth.gss.GSSAuthenticator,java.lang.String,java.lang.String)","initUserAuth(org.apache.sshd.server.auth.pubkey.PublickeyAuthenticator,org.apache.sshd.server.auth.gss.GSSAuthenticator,java.lang.String,java.lang.String)",6,39,"private void initUserAuth(final org.apache.sshd.server.auth.pubkey.PublickeyAuthenticator pubkey, final org.apache.sshd.server.auth.gss.GSSAuthenticator kerberosAuthenticator, java.lang.String kerberosKeytab, java.lang.String kerberosPrincipal) { java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.server.auth.UserAuth>> authFactories = com.google.common.collect.Lists.newArrayList(); if (kerberosKeytab != null) { authFactories.add(UserAuthGSSFactory.INSTANCE); log.info((""Enabling kerberos with keytab "" + kerberosKeytab)); if (!(new java.io.File(kerberosKeytab).canRead())) { com.google.gerrit.sshd.SshDaemon.sshDaemonLog.error(((""Keytab "" + kerberosKeytab) + "" does not exist or is not readable; further errors are possible"")); } kerberosAuthenticator.setKeytabFile(kerberosKeytab); if (kerberosPrincipal == null) { try { kerberosPrincipal = ""host/"" + (java.net.InetAddress.getLocalHost().getCanonicalHostName()); } catch (java.net.UnknownHostException e) { kerberosPrincipal = ""host/localhost""; } } com.google.gerrit.sshd.SshDaemon.sshDaemonLog.info((""Using kerberos principal "" + kerberosPrincipal)); if (!(kerberosPrincipal.startsWith(""host/""))) { com.google.gerrit.sshd.SshDaemon.sshDaemonLog.warn((""Host principal does not start with host/ "" + ""which most SSH clients will supply automatically"")); } kerberosAuthenticator.setServicePrincipalName(kerberosPrincipal); setGSSAuthenticator(kerberosAuthenticator); } authFactories.add(UserAuthPublicKeyFactory.INSTANCE); setUserAuthFactories(authFactories); setPublickeyAuthenticator(pubkey); }",69b94803d916918316ab762128e71923a8c8e359,"initUserAuth(org.apache.sshd.server.auth.pubkey.PublickeyAuthenticator,org.apache.sshd.server.auth.gss.GSSAuthenticator,java.lang.String,java.lang.String)",42108,445,413
76894,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_CommentManager.java,6.0,abstract java.lang.Runnable openCloseAll(final net.codemirror.lib.CodeMirror cm);,3f97fc8fa4e9b04d15275a3e6a6116bb8558a02b,java.lang.Runnable openCloseAll(final net.codemirror.lib.CodeMirror cm) { return new java.lang.Runnable() { @java.lang.Override public void run() { if (cm.extras().hasActiveLine()) { com.google.gerrit.client.diff.CommentGroup w = map(cm.side()).get(((cm.getLineNumber(cm.extras().activeLine())) + 1)); if (w != null) { w.openCloseAll(); } } } }; },b6363fd58edce20872ef65c186873c068c050a5a,openCloseAll(net.codemirror.lib.CodeMirror),openCloseAll(net.codemirror.lib.CodeMirror),9,5,java.lang.Runnable openCloseAll(final net.codemirror.lib.CodeMirror cm) { return new java.lang.Runnable() { @java.lang.Override public void run() { com.google.gerrit.client.diff.CommentGroup group = getCommentGroupOnActiveLine(cm); if (group != null) { group.openCloseAll(); } } }; },a3aef6882a7472b41672c120b79656d7f7c48eb1,openCloseAll(net.codemirror.lib.CodeMirror),67761,109,84
167673,java_com_google_gerrit_server_mail_send_OutgoingEmail.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private java.lang.String getInstanceName() { java.lang.System.out.println(args.instanceNameProvider); java.lang.System.out.println(args.instanceNameProvider.get()); return args.instanceNameProvider.get(); },3bd2e5c87cda18ac3c6370def56580baeb4bd33d,,getInstanceName(),8,5,private java.lang.String getInstanceName() { return args.instanceNameProvider.get(); },11dbde24afd621aa3e24922996dc443b3df69f46,getInstanceName(),68274,55,21
38722,src_main_java_com_googlesource_gerrit_plugins_replication_ReplicationState.java,,,,public void writeStdOut(final java.lang.String message) { pushProcessing.writeStdOut(message); },d36d17aa4c925690d07325d1f612e67cb3723906,,writeStdOut(java.lang.String),9,5,public void writeStdOut(final java.lang.String message) { pushResultProcessing.writeStdOut(message); },461045000fc639084765b35a8b62c437eacea10b,writeStdOut(java.lang.String),206236,25,26
45112,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_GerritServer.java,2.0,"private static java.lang.String initSite() throws java.lang.Exception { java.text.DateFormat df = new java.text.SimpleDateFormat(""yyyyMMddHHmmss""); java.lang.String path = ""target/test_site_"" + (df.format(new java.util.Date())); com.google.gerrit.pgm.Init init = new com.google.gerrit.pgm.Init(); int rc = init.main(new java.lang.String[]{ ""-d"", path, ""--batch"", ""--no-auto-start"" }); if (rc != 0) { throw new java.lang.RuntimeException(""Couldn't initialize site""); } return path; }",3ae0fac3e1ffbf50369a5033405d2573d86cf1db,"private static java.lang.String initSite() throws java.lang.Exception { java.lang.String dt = new java.text.SimpleDateFormat(""yyyyMMdd_HHmmss"").format(new java.util.Date()); java.io.File tmp = java.io.File.createTempFile(((""gerrit_test_"" + dt) + ""_""), ""_site""); java.lang.String path = tmp.getPath(); if ((!(tmp.delete())) || (!(tmp.mkdir()))) { throw new java.io.IOException((""Cannot create "" + path)); } com.google.gerrit.pgm.Init init = new com.google.gerrit.pgm.Init(); int rc = init.main(new java.lang.String[]{ ""-d"", path, ""--batch"", ""--no-auto-start"" }); if (rc != 0) { throw new java.lang.RuntimeException(""Couldn't initialize site""); } return path; }",1f9389690612cbc98555d1e87b965faa64d9cd9c,initSite(),initSite(),13,2,"private static java.io.File initSite() throws java.lang.Exception { java.io.File tmp = com.google.gerrit.acceptance.TempFileUtil.createTempDirectory(); com.google.gerrit.pgm.Init init = new com.google.gerrit.pgm.Init(); int rc = init.main(new java.lang.String[]{ ""-d"", tmp.getPath(), ""--batch"", ""--no-auto-start"" }); if (rc != 0) { throw new java.lang.RuntimeException(""Couldn't initialize site""); } return tmp; }",39ed1783a7959915ada21e927bc7a62341d9ccd6,initSite(),81729,201,124
49172,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_RevisionBox.java,,,,"private void revision(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb, int index, com.google.gerrit.client.changes.ChangeInfo.RevisionInfo r) { com.google.gerrit.client.changes.ChangeInfo.CommitInfo c = r.commit(); sb.openTr(); if (revision.equals(r.name())) { sb.setStyleName(style.current()); } sb.openTd().setStyleName(style.legacy_id()).append(r._number()).closeTd(); sb.openTd().setStyleName(style.commit()).openAnchor().setAttribute(""href"", (""#"" + (url(r)))).setAttribute(""onclick"", ((((com.google.gerrit.client.change.RevisionBox.OPEN) + ""(event,"") + index) + "")"")).append(r.name().substring(0, 10)).closeAnchor().closeTd(); sb.openTd().append(com.google.gerrit.client.FormatUtil.shortFormatDayTime(c.committer().date())).closeTd(); java.lang.String an = com.google.gerrit.client.change.RevisionBox.shortName(c.author()); java.lang.String cn = com.google.gerrit.client.change.RevisionBox.shortName(c.committer()); sb.openTd(); sb.append(an); if (((!("""".equals(an))) && (!("""".equals(cn)))) && (!(an.equals(cn)))) { sb.append("" / "").append(cn); } sb.closeTd(); sb.closeTr(); }",8f35c56833d72d0c1e36260ad23d241f1e4b73b9,,"revision(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder,int,com.google.gerrit.client.changes.ChangeInfo.RevisionInfo)",4,10,"private void revision(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb, int index, com.google.gerrit.client.changes.ChangeInfo.RevisionInfo r) { com.google.gerrit.client.changes.ChangeInfo.CommitInfo c = r.commit(); sb.openTr(); if (revision.equals(r.name())) { sb.setStyleName(style.current()); } sb.openTd().setStyleName(style.legacy_id()).append(r._number()).closeTd(); sb.openTd().setStyleName(style.commit()).openAnchor().setAttribute(""href"", (""#"" + (url(r)))).setAttribute(""onclick"", ((((com.google.gerrit.client.change.RevisionsBox.OPEN) + ""(event,"") + index) + "")"")).append(r.name().substring(0, 10)).closeAnchor().closeTd(); sb.openTd().append(com.google.gerrit.client.FormatUtil.shortFormatDayTime(c.committer().date())).closeTd(); java.lang.String an = ((c.author()) != null) ? c.author().name() : null; java.lang.String cn = ((c.committer()) != null) ? c.committer().name() : null; sb.openTd(); sb.append(an); if (((!("""".equals(an))) && (!("""".equals(cn)))) && (!(an.equals(cn)))) { sb.append("" / "").append(cn); } sb.closeTd(); sb.closeTr(); }",fc02b6d3caaae16abb713b59338ce48807ab1a8a,"revision(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder,int,com.google.gerrit.client.changes.ChangeInfo.RevisionInfo)",53307,365,364
67545,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeRebuilder.java,14.0,"@java.lang.Override void apply(com.google.gerrit.server.notedb.ChangeUpdate update) throws com.google.gwtorm.server.OrmException { checkUpdate(update); if ((c.getRevId()) == null) { com.google.gerrit.server.PatchLineCommentsUtil.setCommentRevId(c, cache, change, ps); } update.insertComment(c); }",808b8dbbb02fb5f2933634b5aa1ad23770fca46c,"@java.lang.Override void apply(com.google.gerrit.server.notedb.ChangeUpdate update) throws com.google.gwtorm.server.OrmException { checkUpdate(update); if ((c.getRevId()) == null) { com.google.gerrit.server.PatchLineCommentsUtil.getRevId(c, cache, change, ps); } update.insertComment(c); }",5e4eab3617cc7cd31738cfe1003151b4cd4b5e29,apply(com.google.gerrit.server.notedb.ChangeUpdate),apply(com.google.gerrit.server.notedb.ChangeUpdate),5,14,"@java.lang.Override void apply(com.google.gerrit.server.notedb.ChangeUpdate update) throws com.google.gwtorm.server.OrmException { checkUpdate(update); if ((c.getRevId()) == null) { com.google.gerrit.server.PatchLineCommentsUtil.setCommentRevId(c, cache, change, ps); } update.insertComment(c); }",808b8dbbb02fb5f2933634b5aa1ad23770fca46c,apply(com.google.gerrit.server.notedb.ChangeUpdate),141393,92,93
86577,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_GerritServer.java,19.0,"static com.google.gerrit.acceptance.GerritServer.Description forTestClass(org.junit.runner.Description testDesc, java.lang.String configName) { return new com.google.gerrit.acceptance.AutoValue_GerritServer_Description(configName, true, (!(com.google.gerrit.acceptance.GerritServer.Description.hasNoHttpd(testDesc.getTestClass()))), null, null); }",44c6c8fe5b08d9cbd2826e8d038693923f06b7c8,"static com.google.gerrit.acceptance.GerritServer.Description forTestClass(org.junit.runner.Description testDesc, java.lang.String configName) { return new com.google.gerrit.acceptance.AutoValue_GerritServer_Description(configName, true, (!(com.google.gerrit.acceptance.GerritServer.Description.has(com.google.gerrit.acceptance.NoHttpd.class, testDesc.getTestClass()))), (!(com.google.gerrit.acceptance.GerritServer.Description.has(com.google.gerrit.acceptance.Hermethic.class, testDesc.getTestClass()))), null, null); }",62308f37c31b13213b249472fdde94e0bc839386,"forTestClass(org.junit.runner.Description,java.lang.String)","forTestClass(org.junit.runner.Description,java.lang.String)",6,20,"static com.google.gerrit.acceptance.GerritServer.Description forTestClass(org.junit.runner.Description testDesc, java.lang.String configName) { return new com.google.gerrit.acceptance.AutoValue_GerritServer_Description(configName, true, (!(com.google.gerrit.acceptance.GerritServer.Description.has(com.google.gerrit.acceptance.NoHttpd.class, testDesc.getTestClass()))), com.google.gerrit.acceptance.GerritServer.Description.has(com.google.gerrit.acceptance.Sandboxed.class, testDesc.getTestClass()), null, null); }",3838c10ea7db7867b58f0f29bda9614b6dccd3bf,"forTestClass(org.junit.runner.Description,java.lang.String)",82274,158,155
56252,gerrit-server_src_main_java_com_google_gerrit_common_ChangeHookRunner.java,41.0,"public void doReviewerAddedHook(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.Account account, final com.google.gerrit.reviewdb.client.PatchSet patchSet, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.server.events.ReviewerAddedEvent event = new com.google.gerrit.server.events.ReviewerAddedEvent(); event.change = eventFactory.asChangeAttribute(change); event.patchSet = eventFactory.asPatchSetAttribute(patchSet); event.reviewer = eventFactory.asAccountAttribute(account); fireEvent(change, event, db); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); addArg(args, ""--change"", event.change.id); addArg(args, ""--change-url"", event.change.url); addArg(args, ""--project"", event.change.project); addArg(args, ""--branch"", event.change.branch); addArg(args, ""--reviewer"", getDisplayName(account)); runHook(change.getProject(), reviewerAddedHook, args); }",94cca48b392aff040e632108e5c4f0659b18d739,"public void doReviewerAddedHook(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.Account account, final com.google.gerrit.reviewdb.client.PatchSet patchSet, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.server.events.ReviewerAddedEvent event = new com.google.gerrit.server.events.ReviewerAddedEvent(); event.change = eventFactory.asChangeAttribute(change); event.patchSet = eventFactory.asPatchSetAttribute(patchSet); event.reviewer = eventFactory.asAccountAttribute(account); fireEvent(change, event, db); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); addArg(args, ""--change"", event.change.id); addArg(args, ""--change-url"", event.change.url); addArg(args, ""--change-owner"", ((((event.change.owner.name) + "" ("") + (event.change.owner.email)) + "")"")); addArg(args, ""--project"", event.change.project); addArg(args, ""--branch"", event.change.branch); addArg(args, ""--reviewer"", getDisplayName(account)); runHook(change.getProject(), reviewerAddedHook, args); }",4b3739a2f2893924ca7fa7a644c577d2360ae6fc,"doReviewerAddedHook(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.Account,com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.reviewdb.server.ReviewDb)","doReviewerAddedHook(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.Account,com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.reviewdb.server.ReviewDb)",3,41,"public void doReviewerAddedHook(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.Account account, final com.google.gerrit.reviewdb.client.PatchSet patchSet, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.server.events.ReviewerAddedEvent event = new com.google.gerrit.server.events.ReviewerAddedEvent(); final com.google.gerrit.server.account.AccountState owner = accountCache.get(change.getOwner()); event.change = eventFactory.asChangeAttribute(change); event.patchSet = eventFactory.asPatchSetAttribute(patchSet); event.reviewer = eventFactory.asAccountAttribute(account); fireEvent(change, event, db); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); addArg(args, ""--change"", event.change.id); addArg(args, ""--change-url"", event.change.url); addArg(args, ""--change-owner"", getDisplayName(owner.getAccount())); addArg(args, ""--project"", event.change.project); addArg(args, ""--branch"", event.change.branch); addArg(args, ""--reviewer"", getDisplayName(account)); runHook(change.getProject(), reviewerAddedHook, args); }",e7336ded73908bdf56e3676277afd92f62b9d306,"doReviewerAddedHook(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.Account,com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.reviewdb.server.ReviewDb)",40184,334,337
158791,gerrit-pgm_src_main_java_com_google_gerrit_pgm_MigrateToNoteDb.java,0.0,"private java.lang.Module getIndexModule() { switch (com.google.gerrit.server.index.IndexModule.getIndexType(dbInjector)) { case LUCENE : return com.google.gerrit.lucene.LuceneIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), threads); case ELASTICSEARCH : return com.google.gerrit.elasticsearch.ElasticIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), threads); default : throw new java.lang.IllegalStateException(""unsupported index.type""); } }",1ba3f9b949e37a24422bd2a4418708e00bc3e49f,"private java.lang.Module getIndexModule(int actualThreads) { switch (com.google.gerrit.server.index.IndexModule.getIndexType(dbInjector)) { case LUCENE : return com.google.gerrit.lucene.LuceneIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), actualThreads); case ELASTICSEARCH : return com.google.gerrit.elasticsearch.ElasticIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), actualThreads); default : throw new java.lang.IllegalStateException(""unsupported index.type""); } }",bc2138af985501fb21a325f86f48f2f4f9ce3f02,getIndexModule(),getIndexModule(int),3,0,"private java.lang.Module getIndexModule() { switch (com.google.gerrit.server.index.IndexModule.getIndexType(dbInjector)) { case LUCENE : return com.google.gerrit.lucene.LuceneIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), threads); case ELASTICSEARCH : return com.google.gerrit.elasticsearch.ElasticIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), threads); default : throw new java.lang.IllegalStateException(""unsupported index.type""); } }",1ba3f9b949e37a24422bd2a4418708e00bc3e49f,getIndexModule(),135019,139,133
99672,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_ChangeApiImpl.java,12.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void setReadyForReview(java.lang.String message) throws com.google.gerrit.extensions.restapi.RestApiException { try { setReady.apply(change, new com.google.gerrit.server.change.WorkInProgressOp.Input(message)); } catch (com.google.gerrit.server.git.UpdateException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot set ready for review state"", e); } }",72beda8d99de6207a68f03cfabd0bd0feb316232,,setReadyForReview(java.lang.String),37,40,"@java.lang.Override public void setReadyForReview(java.lang.String message) throws com.google.gerrit.extensions.restapi.RestApiException { try { setReady.apply(change, new com.google.gerrit.server.change.WorkInProgressOp.Input(message)); } catch (com.google.gerrit.server.update.UpdateException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot set ready for review state"", e); } }",de3d9d0ccccf4fad8449aec9fac2813ac26f1459,setReadyForReview(java.lang.String),133630,112,112
160490,gerrit-common_src_main_java_com_google_gerrit_common_SiteLibraryLoaderUtil.java,1.0,"public static void loadSiteLib(java.nio.file.Path libdir) { try { com.google.gerrit.common.IoUtil.loadJARs(com.google.gerrit.common.SiteLibraryLoaderUtil.listJars(libdir)); } catch (java.io.IOException e) { com.google.gerrit.common.SiteLibraryLoaderUtil.log.error((""Error scanning lib directory "" + libdir), e); } }",164357b43ea82257272e35f6859800142d653277,"public static void loadSiteLib(java.nio.file.Path libdir) { try { java.util.List<java.nio.file.Path> jars = com.google.gerrit.common.SiteLibraryLoaderUtil.listJars(libdir); com.google.gerrit.common.IoUtil.loadJARs(jars); com.google.gerrit.common.SiteLibraryLoaderUtil.log.info(""Loaded site libraries: {}"", com.google.gerrit.common.SiteLibraryLoaderUtil.jarList(jars)); } catch (java.io.IOException e) { com.google.gerrit.common.SiteLibraryLoaderUtil.log.error((""Error scanning lib directory "" + libdir), e); } }",3805b4d0e7d2a48ec06bef4fe6141c9d97ce8253,loadSiteLib(java.nio.file.Path),loadSiteLib(java.nio.file.Path),2,2,"public static void loadSiteLib(java.nio.file.Path libdir) { try { java.util.List<java.nio.file.Path> jars = com.google.gerrit.common.SiteLibraryLoaderUtil.listJars(libdir); com.google.gerrit.common.IoUtil.loadJARs(jars); com.google.gerrit.common.SiteLibraryLoaderUtil.log.debug(""Loaded site libraries: {}"", com.google.gerrit.common.SiteLibraryLoaderUtil.jarList(jars)); } catch (java.io.IOException e) { com.google.gerrit.common.SiteLibraryLoaderUtil.log.error((""Error scanning lib directory "" + libdir), e); } }",54e140afe4df35a433536f3b5ff7aa1468f8d96a,loadSiteLib(java.nio.file.Path),144729,159,159
42531,gerrit-server_src_main_java_com_google_gerrit_server_change_PostReviewers.java,2.0,"private com.google.gerrit.reviewdb.client.PatchSetApproval dummyApproval(com.google.gerrit.server.project.ChangeControl ctl, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.reviewdb.client.Account.Id reviewerId) { com.google.gerrit.reviewdb.client.ApprovalCategory.Id id = new com.google.gerrit.reviewdb.client.ApprovalCategory.Id(com.google.common.collect.Iterables.getLast(ctl.getLabelTypes().getLabelTypes()).getId()); com.google.gerrit.reviewdb.client.PatchSetApproval dummyApproval = new com.google.gerrit.reviewdb.client.PatchSetApproval(new com.google.gerrit.reviewdb.client.PatchSetApproval.Key(patchSetId, reviewerId, id), ((short) (0))); dummyApproval.cache(ctl.getChange()); return dummyApproval; }",d0eb6a3413ef7ee892b23f5f65f0c2e0dde978dc,"private com.google.gerrit.reviewdb.client.PatchSetApproval dummyApproval(com.google.gerrit.server.project.ChangeControl ctl, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.reviewdb.client.Account.Id reviewerId) { com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId id = new com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId(com.google.common.collect.Iterables.getLast(ctl.getLabelTypes().getLabelTypes()).getId()); com.google.gerrit.reviewdb.client.PatchSetApproval dummyApproval = new com.google.gerrit.reviewdb.client.PatchSetApproval(new com.google.gerrit.reviewdb.client.PatchSetApproval.Key(patchSetId, reviewerId, id), ((short) (0))); dummyApproval.cache(ctl.getChange()); return dummyApproval; }",31b73bef0420c8e4fa000456cbbc1427addc325e,"dummyApproval(com.google.gerrit.server.project.ChangeControl,com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.reviewdb.client.Account$Id)","dummyApproval(com.google.gerrit.server.project.ChangeControl,com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.reviewdb.client.Account$Id)",18,2,"private com.google.gerrit.reviewdb.client.PatchSetApproval dummyApproval(com.google.gerrit.server.project.ChangeControl ctl, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.reviewdb.client.Account.Id reviewerId) { com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId id = com.google.common.collect.Iterables.getLast(ctl.getLabelTypes().getLabelTypes()).getLabelId(); com.google.gerrit.reviewdb.client.PatchSetApproval dummyApproval = new com.google.gerrit.reviewdb.client.PatchSetApproval(new com.google.gerrit.reviewdb.client.PatchSetApproval.Key(patchSetId, reviewerId, id), ((short) (0))); dummyApproval.cache(ctl.getChange()); return dummyApproval; }",419a9a7754db55c6aad68c267aea79469fff79ac,"dummyApproval(com.google.gerrit.server.project.ChangeControl,com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.reviewdb.client.Account$Id)",82630,233,213
71131,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeOp.java,31.0,"private com.google.gerrit.reviewdb.client.Change setMergedPatchSet(com.google.gerrit.reviewdb.client.Change.Id changeId, final com.google.gerrit.reviewdb.client.PatchSet.Id merged) throws com.google.gwtorm.server.OrmException { return db.changes().atomicUpdate(changeId, new com.google.gwtorm.server.AtomicUpdate<com.google.gerrit.reviewdb.client.Change>() { @java.lang.Override public com.google.gerrit.reviewdb.client.Change update(com.google.gerrit.reviewdb.client.Change c) { c.setStatus(Change.Status.MERGED); if (!(merged.equals(c.currentPatchSetId()))) { try { c.setCurrentPatchSet(patchSetInfoFactory.get(db, merged)); } catch (com.google.gerrit.server.patch.PatchSetInfoNotAvailableException e1) { logError((""Cannot read merged patch set "" + merged), e1); } } com.google.gerrit.server.ChangeUtil.updated(c); return c; } }); }",20d9bb87fac59702e1d713d93d589a51c31bd66f,"private com.google.gerrit.reviewdb.client.Change setMergedPatchSet(com.google.gerrit.reviewdb.client.Change.Id changeId, final com.google.gerrit.reviewdb.client.PatchSet.Id merged) throws com.google.gwtorm.server.OrmException { return db.changes().atomicUpdate(changeId, new com.google.gwtorm.server.AtomicUpdate<com.google.gerrit.reviewdb.client.Change>() { @java.lang.Override public com.google.gerrit.reviewdb.client.Change update(com.google.gerrit.reviewdb.client.Change c) { c.setStatus(Change.Status.MERGED); c.setChangeSet(logPrefix); if (!(merged.equals(c.currentPatchSetId()))) { try { c.setCurrentPatchSet(patchSetInfoFactory.get(db, merged)); } catch (com.google.gerrit.server.patch.PatchSetInfoNotAvailableException e1) { logError((""Cannot read merged patch set "" + merged), e1); } } com.google.gerrit.server.ChangeUtil.updated(c); return c; } }); }",1e0b78ae27e8197d869ae6ef1f3e775c37fd1868,"setMergedPatchSet(com.google.gerrit.reviewdb.client.Change$Id,com.google.gerrit.reviewdb.client.PatchSet$Id)","setMergedPatchSet(com.google.gerrit.reviewdb.client.Change$Id,com.google.gerrit.reviewdb.client.PatchSet$Id)",7,32,"private com.google.gerrit.reviewdb.client.Change setMergedPatchSet(com.google.gerrit.reviewdb.client.Change.Id changeId, final com.google.gerrit.reviewdb.client.PatchSet.Id merged) throws com.google.gwtorm.server.OrmException { return db.changes().atomicUpdate(changeId, new com.google.gwtorm.server.AtomicUpdate<com.google.gerrit.reviewdb.client.Change>() { @java.lang.Override public com.google.gerrit.reviewdb.client.Change update(com.google.gerrit.reviewdb.client.Change c) { c.setStatus(Change.Status.MERGED); c.setSubmissionId(submissionId); if (!(merged.equals(c.currentPatchSetId()))) { try { c.setCurrentPatchSet(patchSetInfoFactory.get(db, merged)); } catch (com.google.gerrit.server.patch.PatchSetInfoNotAvailableException e1) { logError((""Cannot read merged patch set "" + merged), e1); } } com.google.gerrit.server.ChangeUtil.updated(c); return c; } }); }",ee77428d388e7f680d43f1ba7144154aea2fb484,"setMergedPatchSet(com.google.gerrit.reviewdb.client.Change$Id,com.google.gerrit.reviewdb.client.PatchSet$Id)",57170,267,269
140535,javatests_com_google_gerrit_server_patch_IntraLineLoaderTest.java,8.0,"private static java.util.List<org.eclipse.jgit.diff.Edit> intraline(java.lang.String a, java.lang.String b, org.eclipse.jgit.diff.Edit lines) throws java.lang.Exception { com.google.gerrit.server.patch.Text aText = new com.google.gerrit.server.patch.Text(a.getBytes(java.nio.charset.StandardCharsets.UTF_8)); com.google.gerrit.server.patch.Text bText = new com.google.gerrit.server.patch.Text(b.getBytes(java.nio.charset.StandardCharsets.UTF_8)); com.google.gerrit.server.patch.IntraLineDiff diff = com.google.gerrit.server.patch.IntraLineLoader.compute(aText, bText, com.google.common.collect.ImmutableList.of(lines)); assertThat(diff.getStatus()).isEqualTo(IntraLineDiff.Status.EDIT_LIST); java.util.List<org.eclipse.jgit.diff.Edit> actualEdits = diff.getEdits(); assertThat(actualEdits).hasSize(1); org.eclipse.jgit.diff.Edit actualEdit = actualEdits.get(0); assertThat(actualEdit.getBeginA()).isEqualTo(lines.getBeginA()); assertThat(actualEdit.getEndA()).isEqualTo(lines.getEndA()); assertThat(actualEdit.getBeginB()).isEqualTo(lines.getBeginB()); assertThat(actualEdit.getEndB()).isEqualTo(lines.getEndB()); assertThat(actualEdit).isInstanceOf(org.eclipse.jgit.diff.ReplaceEdit.class); return ((org.eclipse.jgit.diff.ReplaceEdit) (actualEdit)).getInternalEdits(); }",ae26f7997d4d5f7cc22a7e12596e5720afee9966,"private static java.util.List<org.eclipse.jgit.diff.Edit> intraline(java.lang.String a, java.lang.String b, org.eclipse.jgit.diff.Edit lines) throws java.lang.Exception { com.google.gerrit.server.patchlib.Text aText = new com.google.gerrit.server.patchlib.Text(a.getBytes(java.nio.charset.StandardCharsets.UTF_8)); com.google.gerrit.server.patchlib.Text bText = new com.google.gerrit.server.patchlib.Text(b.getBytes(java.nio.charset.StandardCharsets.UTF_8)); com.google.gerrit.server.patchlib.IntraLineDiff diff = com.google.gerrit.server.patch.IntraLineLoader.compute(aText, bText, com.google.common.collect.ImmutableList.of(lines)); assertThat(diff.getStatus()).isEqualTo(IntraLineDiff.Status.EDIT_LIST); java.util.List<org.eclipse.jgit.diff.Edit> actualEdits = diff.getEdits(); assertThat(actualEdits).hasSize(1); org.eclipse.jgit.diff.Edit actualEdit = actualEdits.get(0); assertThat(actualEdit.getBeginA()).isEqualTo(lines.getBeginA()); assertThat(actualEdit.getEndA()).isEqualTo(lines.getEndA()); assertThat(actualEdit.getBeginB()).isEqualTo(lines.getBeginB()); assertThat(actualEdit.getEndB()).isEqualTo(lines.getEndB()); assertThat(actualEdit).isInstanceOf(org.eclipse.jgit.diff.ReplaceEdit.class); return ((org.eclipse.jgit.diff.ReplaceEdit) (actualEdit)).getInternalEdits(); }",2ba7bef6a12a87eca8bf98a10308565e400553a6,"intraline(java.lang.String,java.lang.String,org.eclipse.jgit.diff.Edit)","intraline(java.lang.String,java.lang.String,org.eclipse.jgit.diff.Edit)",11,8,"private static java.util.List<org.eclipse.jgit.diff.Edit> intraline(java.lang.String a, java.lang.String b, org.eclipse.jgit.diff.Edit lines) throws java.lang.Exception { com.google.gerrit.server.diff.Text aText = new com.google.gerrit.server.diff.Text(a.getBytes(java.nio.charset.StandardCharsets.UTF_8)); com.google.gerrit.server.diff.Text bText = new com.google.gerrit.server.diff.Text(b.getBytes(java.nio.charset.StandardCharsets.UTF_8)); com.google.gerrit.server.diff.IntraLineDiff diff = com.google.gerrit.server.patch.IntraLineLoader.compute(aText, bText, com.google.common.collect.ImmutableList.of(lines)); assertThat(diff.getStatus()).isEqualTo(IntraLineDiff.Status.EDIT_LIST); java.util.List<org.eclipse.jgit.diff.Edit> actualEdits = diff.getEdits(); assertThat(actualEdits).hasSize(1); org.eclipse.jgit.diff.Edit actualEdit = actualEdits.get(0); assertThat(actualEdit.getBeginA()).isEqualTo(lines.getBeginA()); assertThat(actualEdit.getEndA()).isEqualTo(lines.getEndA()); assertThat(actualEdit.getBeginB()).isEqualTo(lines.getBeginB()); assertThat(actualEdit.getEndB()).isEqualTo(lines.getEndB()); assertThat(actualEdit).isInstanceOf(org.eclipse.jgit.diff.ReplaceEdit.class); return ((org.eclipse.jgit.diff.ReplaceEdit) (actualEdit)).getInternalEdits(); }",c69d6c154e7ba60b38c919de7c63fd1d21d382af,"intraline(java.lang.String,java.lang.String,org.eclipse.jgit.diff.Edit)",15509,387,382
59044,gerrit-server_src_main_java_com_google_gerrit_server_PatchLineCommentsUtil.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> sort(java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments) { java.util.Collections.sort(comments, ChangeNotes.PatchLineCommentComparator); return comments; }",f336e8a421a1a1ee290723c9f7df31bd13b8cde2,,sort(java.util.List),12,6,"private static java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> sort(java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments) { java.util.Collections.sort(comments, ChangeNotes.PatchLineCommentComparator); return comments; }",82fe7235425c22170633af712dedbb4895bc6144,sort(java.util.List),98143,74,75
147210,javatests_com_google_gerrit_server_query_change_AbstractQueryChangesTest.java,111.0,"protected void setUpDatabase() throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(""user"")).getAccountId(); java.lang.String email = ""user@example.com""; externalIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().update(userId, ( a) -> a.setPreferredEmail(email)); user = userFactory.create(userId); requestContext.setContext(newRequestContext(userId)); }",243d5e69e0d751429e1e9e3f77316ac5fb8ece5e,"protected void setUpDatabase() throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(""user"")).getAccountId(); java.lang.String email = ""user@example.com""; externalIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().update(userId, ( u) -> u.update().setPreferredEmail(email)); user = userFactory.create(userId); requestContext.setContext(newRequestContext(userId)); }",3eac62b14217e8daf4931b2a9d95e9cc4ef71164,setUpDatabase(),setUpDatabase(),10,111,"protected void setUpDatabase() throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(""user"")).getAccountId(); java.lang.String email = ""user@example.com""; externalIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().update(userId, ( u) -> u.setPreferredEmail(email)); user = userFactory.create(userId); requestContext.setContext(newRequestContext(userId)); }",240d2ab97231c178d34fa0d80f7767dd00d0ecce,setUpDatabase(),63032,172,170
47311,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,29.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean isFromQuery(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p) { return ((queries) != null) && (queries.contains(p)); },e381635c58429af070e978e29884961611ac05f3,,isFromQuery(com.google.gerrit.server.query.Predicate),6,20,public boolean isFromSource(com.google.gerrit.server.query.change.ChangeDataSource s) { return s == (returnedBySource); },f66df804b412729db86ba481e85aebae4239b9ed,isFromSource(com.google.gerrit.server.query.change.ChangeDataSource),144895,55,35
78984,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeSuperSet.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.extensions.client.SubmitType submitType(com.google.gerrit.server.query.change.ChangeData cd, boolean visible) throws com.google.gwtorm.server.OrmException { if (visible) { com.google.gerrit.common.data.SubmitTypeRecord str = cd.submitTypeRecord(); if (!(str.isOk())) { logErrorAndThrow((((""Failed to get submit type for "" + (cd.getId())) + "": "") + (str.errorMessage))); } return str.type; } else { return cd.changeControl().getProject().getSubmitType(); } }",a628559395047bcf55a850bbe761b140e5f244e8,,"submitType(com.google.gerrit.server.query.change.ChangeData,boolean)",3,2,"private com.google.gerrit.extensions.client.SubmitType submitType(com.google.gerrit.server.query.change.ChangeData cd, boolean visible) throws com.google.gwtorm.server.OrmException { if (!visible) { return cd.changeControl().getProject().getSubmitType(); } com.google.gerrit.common.data.SubmitTypeRecord str = cd.submitTypeRecord(); if (!(str.isOk())) { logErrorAndThrow((((""Failed to get submit type for "" + (cd.getId())) + "": "") + (str.errorMessage))); } return str.type; }",2cbf0fba185740e278b8f8a4e69019f77bd365b2,"submitType(com.google.gerrit.server.query.change.ChangeData,boolean)",70197,138,135
89872,gerrit-server_src_main_java_com_google_gerrit_server_git_BatchUpdate.java,32.0,"private com.google.gerrit.server.notedb.NoteDbUpdateManager stageNoteDbUpdate(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, boolean deleted) throws com.google.gwtorm.server.OrmException, java.io.IOException { logDebug(""Staging NoteDb update""); com.google.gerrit.server.notedb.NoteDbUpdateManager updateManager = updateManagerFactory.create(ctx.getProject()).setChangeRepo(ctx.getRepository(), ctx.getRevWalk(), null, new com.google.gerrit.server.git.ChainedReceiveCommands(repo)); for (com.google.gerrit.server.notedb.ChangeUpdate u : ctx.updates.values()) { updateManager.add(u); } com.google.gerrit.reviewdb.client.Change c = ctx.getChange(); if (deleted) { updateManager.deleteChange(c.getId()); } try { updateManager.stageAndApplyDelta(c); } catch (com.google.gerrit.server.notedb.NoteDbUpdateManager.MismatchedStateException ex) { logDebug(""Ignoring MismatchedStateException while staging""); } return updateManager; }",150c4520ce437613ab4244aa9548bc84babbd6e5,"private com.google.gerrit.server.notedb.NoteDbUpdateManager stageNoteDbUpdate(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, boolean deleted) throws com.google.gwtorm.server.OrmException, java.io.IOException { logDebug(""Staging NoteDb update""); com.google.gerrit.server.notedb.NoteDbUpdateManager updateManager = updateManagerFactory.create(ctx.getProject()).setCheckReadOnly(true, db).setChangeRepo(ctx.getRepository(), ctx.getRevWalk(), null, new com.google.gerrit.server.git.ChainedReceiveCommands(repo)); for (com.google.gerrit.server.notedb.ChangeUpdate u : ctx.updates.values()) { updateManager.add(u); } com.google.gerrit.reviewdb.client.Change c = ctx.getChange(); if (deleted) { updateManager.deleteChange(c.getId()); } try { updateManager.stageAndApplyDelta(c); } catch (com.google.gerrit.server.notedb.NoteDbUpdateManager.MismatchedStateException ex) { logDebug(""Ignoring MismatchedStateException while staging""); } return updateManager; }",dacaf9d266448a2d4ed4a934d4d8cfb17d8acd02,"stageNoteDbUpdate(com.google.gerrit.server.git.BatchUpdate$ChangeContext,boolean)","stageNoteDbUpdate(com.google.gerrit.server.git.BatchUpdate$ChangeContext,boolean)",14,32,"private com.google.gerrit.server.notedb.NoteDbUpdateManager stageNoteDbUpdate(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, boolean deleted) throws com.google.gwtorm.server.OrmException, java.io.IOException { logDebug(""Staging NoteDb update""); com.google.gerrit.server.notedb.NoteDbUpdateManager updateManager = updateManagerFactory.create(ctx.getProject()).setChangeRepo(ctx.getRepository(), ctx.getRevWalk(), null, new com.google.gerrit.server.git.ChainedReceiveCommands(repo)); if (ctx.getUser().isIdentifiedUser()) { updateManager.setRefLogIdent(ctx.getUser().asIdentifiedUser().newRefLogIdent(ctx.getWhen(), tz)); } for (com.google.gerrit.server.notedb.ChangeUpdate u : ctx.updates.values()) { updateManager.add(u); } com.google.gerrit.reviewdb.client.Change c = ctx.getChange(); if (deleted) { updateManager.deleteChange(c.getId()); } try { updateManager.stageAndApplyDelta(c); } catch (com.google.gerrit.server.notedb.NoteDbUpdateManager.MismatchedStateException ex) { logDebug(""Ignoring MismatchedStateException while staging""); } return updateManager; }",8437d9cbe2ce6b047fc990d789bea22aab83ea6d,"stageNoteDbUpdate(com.google.gerrit.server.git.BatchUpdate$ChangeContext,boolean)",206890,268,302
51244,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommitsAdvertiseRefsHook.java,3.0,"@java.lang.Override public void advertiseRefs(org.eclipse.jgit.transport.BaseReceivePack rp) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> oldRefs = rp.getAdvertisedRefs(); if (oldRefs == null) { try { oldRefs = rp.getRepository().getRefDatabase().getRefs(com.google.gerrit.server.git.ALL); } catch (java.io.IOException e) { org.eclipse.jgit.transport.ServiceMayNotContinueException ex = new org.eclipse.jgit.transport.ServiceMayNotContinueException(e.getMessage()); ex.initCause(e); throw ex; } } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> r = com.google.common.collect.Maps.newHashMapWithExpectedSize(oldRefs.size()); for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> e : oldRefs.entrySet()) { java.lang.String name = e.getKey(); if (!(com.google.gerrit.server.git.ReceiveCommitsAdvertiseRefsHook.skip(name))) { r.put(name, e.getValue()); } } rp.setAdvertisedRefs(r, advertiseHistory(r.values(), rp)); }",6dc10851697a12c5ed5c3497ad25d0d90a61fbac,"@java.lang.Override public void advertiseRefs(org.eclipse.jgit.transport.BaseReceivePack rp) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> oldRefs = rp.getAdvertisedRefs(); if (oldRefs == null) { try { oldRefs = rp.getRepository().getRefDatabase().getRefs(com.google.gerrit.server.git.ALL); } catch (org.eclipse.jgit.transport.ServiceMayNotContinueException e) { throw e; } catch (java.io.IOException e) { throw new org.eclipse.jgit.transport.ServiceMayNotContinueException().initCause(e); } } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> r = com.google.common.collect.Maps.newHashMapWithExpectedSize(oldRefs.size()); for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> e : oldRefs.entrySet()) { java.lang.String name = e.getKey(); if (!(com.google.gerrit.server.git.ReceiveCommitsAdvertiseRefsHook.skip(name))) { r.put(name, e.getValue()); } } rp.setAdvertisedRefs(r, advertiseHistory(r.values(), rp)); }",efc182c479e5280f59befc4052ae60be4cfe8ad3,advertiseRefs(org.eclipse.jgit.transport.BaseReceivePack),advertiseRefs(org.eclipse.jgit.transport.BaseReceivePack),2,3,"@java.lang.Override public void advertiseRefs(org.eclipse.jgit.transport.BaseReceivePack rp) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> oldRefs = rp.getAdvertisedRefs(); if (oldRefs == null) { try { oldRefs = rp.getRepository().getRefDatabase().getRefs(com.google.gerrit.server.git.ALL); } catch (org.eclipse.jgit.transport.ServiceMayNotContinueException e) { throw e; } catch (java.io.IOException e) { org.eclipse.jgit.transport.ServiceMayNotContinueException ex = new org.eclipse.jgit.transport.ServiceMayNotContinueException(); ex.initCause(e); throw ex; } } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> r = com.google.common.collect.Maps.newHashMapWithExpectedSize(oldRefs.size()); for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> e : oldRefs.entrySet()) { java.lang.String name = e.getKey(); if (!(com.google.gerrit.server.git.ReceiveCommitsAdvertiseRefsHook.skip(name))) { r.put(name, e.getValue()); } } rp.setAdvertisedRefs(r, advertiseHistory(r.values(), rp)); }",01e069e5bd184751cccb9faa3aaa717729038e94,advertiseRefs(org.eclipse.jgit.transport.BaseReceivePack),110494,323,343
52200,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DraftBox.java,21.0,"@com.google.gwt.uibinder.client.UiHandler(""editArea"") void onKeyDown(com.google.gwt.event.dom.client.KeyDownEvent e) { if ((((e.isControlKeyDown()) || (e.isMetaKeyDown())) && (!(e.isAltKeyDown()))) && (!(e.isShiftKeyDown()))) { switch (e.getNativeKeyCode()) { case 's' : case 'S' : e.preventDefault(); onSave(); return; } } else if (((e.getNativeKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE)) && (!(isDirty()))) { if (isNew()) { removeUI(); return; } else { setEdit(false); if (autoClosed) { setOpen(false); } getCm().focus(); return; } } expandTimer.schedule(250); }",fc552271f7fdf9c04e9df82e48ae22904902abba,"@com.google.gwt.uibinder.client.UiHandler(""editArea"") void onKeyDown(com.google.gwt.event.dom.client.KeyDownEvent e) { if ((((e.isControlKeyDown()) || (e.isMetaKeyDown())) && (!(e.isAltKeyDown()))) && (!(e.isShiftKeyDown()))) { switch (e.getNativeKeyCode()) { case 's' : case 'S' : e.preventDefault(); save(); return; } } else if (((e.getNativeKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE)) && (!(isDirty()))) { if (isNew()) { removeUI(); return; } else { setEdit(false); if (autoClosed) { setOpen(false); } getCm().focus(); return; } } expandTimer.schedule(250); }",e3e38a0559c873bed288770dcb0bc6e8d535e789,onKeyDown(com.google.gwt.event.dom.client.KeyDownEvent),onKeyDown(com.google.gwt.event.dom.client.KeyDownEvent),3,20,"@com.google.gwt.uibinder.client.UiHandler(""editArea"") void onKeyDown(com.google.gwt.event.dom.client.KeyDownEvent e) { if ((((e.isControlKeyDown()) || (e.isMetaKeyDown())) && (!(e.isAltKeyDown()))) && (!(e.isShiftKeyDown()))) { switch (e.getNativeKeyCode()) { case 's' : case 'S' : e.preventDefault(); save(null); return; } } else if (((e.getNativeKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE)) && (!(isDirty()))) { if (isNew()) { removeUI(); return; } else { setEdit(false); if (autoClosed) { setOpen(false); } getCm().focus(); return; } } expandTimer.schedule(250); }",02bb0716656e098c7a6b30d695d917ff96b7065e,onKeyDown(com.google.gwt.event.dom.client.KeyDownEvent),178322,193,195
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_SubmitAction.java,3.0,"static void call(com.google.gerrit.client.info.ChangeInfo changeInfo, com.google.gerrit.client.info.ChangeInfo.RevisionInfo revisionInfo) { if (com.google.gerrit.client.api.ChangeGlue.onSubmitChange(changeInfo, revisionInfo)) { final com.google.gerrit.reviewdb.client.Change.Id changeId = changeInfo.legacyId(); com.google.gerrit.client.changes.ChangeApi.submit(changeId.get(), revisionInfo.name(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.SubmitInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.SubmitInfo result) { redisplay(); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); } else { super.onFailure(err); } redisplay(); } private void redisplay() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId)); } }); } }",80c6b70f4cced8a829e0abb625c7f53aff89d327,"static void call(com.google.gerrit.client.info.ChangeInfo changeInfo, com.google.gerrit.client.info.ChangeInfo.RevisionInfo revisionInfo) { if (com.google.gerrit.client.api.ChangeGlue.onSubmitChange(changeInfo, revisionInfo)) { final com.google.gerrit.reviewdb.client.Change.Id changeId = changeInfo.legacyId(); com.google.gerrit.client.changes.ChangeApi.submit(changeId.get(), changeInfo.project(), revisionInfo.name(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.SubmitInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.SubmitInfo result) { redisplay(); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); } else { super.onFailure(err); } redisplay(); } private void redisplay() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, changeInfo.projectNameKey())); } }); } }",c202362dbad3e6014436661b1ea068efd52df064,"call(com.google.gerrit.client.info.ChangeInfo,com.google.gerrit.client.info.ChangeInfo.RevisionInfo)","call(com.google.gerrit.client.info.ChangeInfo,com.google.gerrit.client.info.ChangeInfo.RevisionInfo)",7,3,"static void call(com.google.gerrit.client.info.ChangeInfo changeInfo, com.google.gerrit.client.info.ChangeInfo.RevisionInfo revisionInfo) { if (com.google.gerrit.client.api.ChangeGlue.onSubmitChange(changeInfo, revisionInfo)) { final com.google.gerrit.reviewdb.client.Change.Id changeId = changeInfo.legacyId(); com.google.gerrit.client.changes.ChangeApi.submit(changeInfo.project(), changeId.get(), revisionInfo.name(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.SubmitInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.SubmitInfo result) { redisplay(); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); } else { super.onFailure(err); } redisplay(); } private void redisplay() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeInfo.projectNameKey(), changeId)); } }); } }",f11f4a6ff2d5c0a260420e30f0b60ee9ee13c8dd,"call(com.google.gerrit.client.info.ChangeInfo,com.google.gerrit.client.info.ChangeInfo.RevisionInfo)",211377,316,316
72338,gerrit-server_src_main_java_com_google_gerrit_common_ChangeHookApiListener.java,,,,"@java.lang.Override public void onHashtagsEdited(com.google.gerrit.extensions.events.HashtagsEditedListener.Event ev) { try { ch.doHashtagsChangedHook(getChange(ev.getChange()), getAccount(ev.getEditor()), new java.util.HashSet<java.lang.String>(ev.getAddedHashtags()), new java.util.HashSet<java.lang.String>(ev.getRemovedHashtags()), new java.util.HashSet<java.lang.String>(ev.getHashtags()), db.get()); } catch (com.google.gwtorm.server.OrmException e) { } }",22e91222293a74eaf21522807155f640b136839c,,onHashtagsEdited(com.google.gerrit.extensions.events.HashtagsEditedListener$Event),43,12,"@java.lang.Override public void onHashtagsEdited(com.google.gerrit.extensions.events.HashtagsEditedListener.Event ev) { try { hooks.doHashtagsChangedHook(getNotes(ev.getChange()).getChange(), getAccount(ev.getEditor()), new java.util.HashSet(ev.getAddedHashtags()), new java.util.HashSet(ev.getRemovedHashtags()), new java.util.HashSet(ev.getHashtags()), db.get()); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.common.ChangeHookApiListener.log.error((""HashtagsChanged hook failed to run "" + (ev.getChange()._number)), e); } }",6c820a927b3d8ed001f932c08fe705438b46d9b8,onHashtagsEdited(com.google.gerrit.extensions.events.HashtagsEditedListener$Event),204365,150,172
48047,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_FileCommentPanel.java,,,,void onRemoveDraftBox(com.google.gerrit.client.diff.DraftBox box) { boxes.remove(box); table.updateVisibility(false); },589a3c72436f2cb2a6f367299014f94e11e76399,,onRemoveDraftBox(com.google.gerrit.client.diff.DraftBox),21,0,void onRemoveDraftBox(com.google.gerrit.client.diff.DraftBox box) { boxes.remove(box); table.updateFileCommentVisibility(false); },5b682db80207387349e7191e2b1e4216c81ae6fd,onRemoveDraftBox(com.google.gerrit.client.diff.DraftBox),53952,36,38
85291,gerrit-server_src_main_java_com_google_gerrit_server_mail_EmailSender.java,2.0,"void send(com.google.gerrit.server.mail.Address from, java.util.Collection<com.google.gerrit.server.mail.Address> rcpt, java.util.Map<java.lang.String, com.google.gerrit.server.mail.EmailHeader> headers, java.lang.String body) throws com.google.gerrit.common.errors.EmailException;",ee6fa84101107a6d1fea485490efcb38027af04f,"void send(com.google.gerrit.server.mail.Address from, java.util.Collection<com.google.gerrit.server.mail.Address> rcpt, java.util.Map<java.lang.String, com.google.gerrit.server.mail.EmailHeader> headers, java.lang.String textBody, java.lang.String htmlBody) throws com.google.gerrit.common.errors.EmailException;",26aafa7d4f2f2d9aeb40096e0d0c4c4e7be98277,"send(com.google.gerrit.server.mail.Address,java.util.Collection,java.util.Map,java.lang.String)","send(com.google.gerrit.server.mail.Address,java.util.Collection,java.util.Map,java.lang.String,java.lang.String)",10,2,"void send(com.google.gerrit.server.mail.Address from, java.util.Collection<com.google.gerrit.server.mail.Address> rcpt, java.util.Map<java.lang.String, com.google.gerrit.server.mail.EmailHeader> headers, java.lang.String body) throws com.google.gerrit.common.errors.EmailException;",ee6fa84101107a6d1fea485490efcb38027af04f,"send(com.google.gerrit.server.mail.Address,java.util.Collection,java.util.Map,java.lang.String)",72028,98,89
148032,java_com_google_gerrit_server_git_receive_ReceiveCommits.java,73.0,"@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { java.lang.String refName = cmd.getRefName(); if ((cmd.getType()) == (ReceiveCommand.Type.UPDATE)) { logDebug(""Updating tag cache on fast-forward of {}"", cmd.getRefName()); tagCache.updateFastForward(project.getNameKey(), refName, cmd.getOldId(), cmd.getNewId()); } if (com.google.gerrit.server.git.receive.ReceiveCommits.isConfig(cmd)) { logDebug(""Reloading project in cache""); try { projectCache.evict(project); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn((""Cannot evict from project cache, name key: "" + (project.getName())), e); } com.google.gerrit.server.project.ProjectState ps = projectCache.get(project.getNameKey()); try { logDebug(""Updating project description""); repo.setGitwebDescription(ps.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn((""cannot update description of "" + (project.getName())), e); } if (allProjectsName.equals(project.getNameKey())) { try { createGroupPermissionSyncer.syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.error(""Can't sync create group permissions"", e); } } } }",869a58a94913f52368a4939bdbec49c557ff8d12,"@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { java.lang.String refName = cmd.getRefName(); if ((cmd.getType()) == (ReceiveCommand.Type.UPDATE)) { logDebug(""Updating tag cache on fast-forward of {}"", cmd.getRefName()); tagCache.updateFastForward(project.getNameKey(), refName, cmd.getOldId(), cmd.getNewId()); } if (com.google.gerrit.server.git.receive.ReceiveCommits.isConfig(cmd)) { logDebug(""Reloading project in cache""); try { projectCache.evict(project); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn((""Cannot evict from project cache, name key: "" + (project.getName())), e); } com.google.gerrit.server.project.ProjectState ps = projectCache.get(project.getNameKey()); try { logDebug(""Updating project description""); repo.setGitwebDescription(ps.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn((""cannot update description of "" + (project.getName())), e); } if (allProjectsName.equals(project.getNameKey())) { try { createGroupPermissionSyncer.syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.error(""Can't sync create account permissions"", e); } } } }",8b6c2c82aaa7f77e0f45ee8abeeeda9f24b6aa03,postUpdate(com.google.gerrit.server.update.Context),postUpdate(com.google.gerrit.server.update.Context),17,73,"@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { java.lang.String refName = cmd.getRefName(); if ((cmd.getType()) == (ReceiveCommand.Type.UPDATE)) { logDebug(""Updating tag cache on fast-forward of {}"", cmd.getRefName()); tagCache.updateFastForward(project.getNameKey(), refName, cmd.getOldId(), cmd.getNewId()); } if (com.google.gerrit.server.git.receive.ReceiveCommits.isConfig(cmd)) { logDebug(""Reloading project in cache""); try { projectCache.evict(project); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn((""Cannot evict from project cache, name key: "" + (project.getName())), e); } com.google.gerrit.server.project.ProjectState ps = projectCache.get(project.getNameKey()); try { logDebug(""Updating project description""); repo.setGitwebDescription(ps.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn((""cannot update description of "" + (project.getName())), e); } if (allProjectsName.equals(project.getNameKey())) { try { createGroupPermissionSyncer.syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.error(""Can't sync create group permissions"", e); } } } }",869a58a94913f52368a4939bdbec49c557ff8d12,postUpdate(com.google.gerrit.server.update.Context),216225,376,376
30726,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_project_ProjectModule.java,0.0,@java.lang.Override protected void configureServlets() { install(new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { factory(AddBranch.Factory.class); factory(ChangeProjectAccess.Factory.class); factory(CreateProjectHandler.Factory.class); factory(ChangeProjectSettings.Factory.class); factory(DeleteBranches.Factory.class); factory(ListBranches.Factory.class); factory(VisibleProjects.Factory.class); factory(ProjectAccessFactory.Factory.class); factory(ProjectDetailFactory.Factory.class); } }); rpc(com.google.gerrit.httpd.rpc.project.ProjectAdminServiceImpl.class); },32426bf2012580b143fadf5d6811cc07c657ded9,@java.lang.Override protected void configureServlets() { install(new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { factory(AddBranch.Factory.class); factory(ChangeProjectAccess.Factory.class); factory(CreateProjectHandler.Factory.class); factory(ChangeProjectSettings.Factory.class); factory(DeleteBranches.Factory.class); factory(ListBranches.Factory.class); factory(VisibleProjects.Factory.class); factory(ProjectAccessFactory.Factory.class); factory(ProjectDetailFactory.Factory.class); factory(RetrieveParentCandidatesHandler.Factory.class); } }); rpc(com.google.gerrit.httpd.rpc.project.ProjectAdminServiceImpl.class); },fd973177ef3fea41d4c2dceb07b0708c0af87df7,configureServlets(),configureServlets(),9,0,@java.lang.Override protected void configureServlets() { install(new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { factory(AddBranch.Factory.class); factory(ChangeProjectAccess.Factory.class); factory(CreateProjectHandler.Factory.class); factory(ChangeProjectSettings.Factory.class); factory(DeleteBranches.Factory.class); factory(ListBranches.Factory.class); factory(VisibleProjects.Factory.class); factory(VisibleProjectDetails.Factory.class); factory(ProjectAccessFactory.Factory.class); factory(ProjectDetailFactory.Factory.class); factory(SuggestParentCandidatesHandler.Factory.class); } }); rpc(com.google.gerrit.httpd.rpc.project.ProjectAdminServiceImpl.class); },4c9151b2bb850345f4fbfec560ac4e3a5b49d2dc,configureServlets(),207410,165,175
42705,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_group_CreateGroupIT.java,2.0,"@org.junit.Test public void testCreateGroupWhenGroupAlreadyExists_PreconditionFailed() throws com.google.gwtorm.server.OrmException, com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.acceptance.RestResponse r = session.put(""/groups/Administrators""); assertEquals(HttpStatus.SC_PRECONDITION_FAILED, r.getStatusCode()); }",6384a9a5a4469ca54c49d85e6908b178c2358aac,"@org.junit.Test public void testCreateGroupWhenGroupAlreadyExists_PreconditionFailed() throws com.google.gwtorm.server.OrmException, com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.acceptance.RestResponse r = session.put(""/groups/Administrators""); assertEquals(HttpStatus.SC_CONFLICT, r.getStatusCode()); }",ad54c81089f717590cbe9f1be3d6d2254574894a,testCreateGroupWhenGroupAlreadyExists_PreconditionFailed(),testCreateGroupWhenGroupAlreadyExists_PreconditionFailed(),2,2,"@org.junit.Test public void testCreateGroupWhenGroupAlreadyExists_Conflict() throws com.google.gwtorm.server.OrmException, com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.acceptance.RestResponse r = session.put(""/groups/Administrators""); assertEquals(HttpStatus.SC_CONFLICT, r.getStatusCode()); }",98624e9214dff20bd53a6d08fe07bbde334838ee,testCreateGroupWhenGroupAlreadyExists_Conflict(),184518,85,84
50410,gerrit-server_src_main_java_com_google_gerrit_server_index_ChangeIndexer.java,4.0,@java.lang.Override public java.util.concurrent.Callable<?> deleteTask(com.google.gerrit.server.query.change.ChangeData cd) { return new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() { return null; } }; },2a5576e35e2ebfa7eed185a3fcf0956a0917e3a4,@java.lang.Override protected java.util.concurrent.Callable<?> deleteTask(com.google.gerrit.server.query.change.ChangeData cd) { return new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() { return null; } }; },da25ceea9ce6013005af4dbffd450708211a7293,deleteTask(com.google.gerrit.server.query.change.ChangeData),deleteTask(com.google.gerrit.server.query.change.ChangeData),6,4,@java.lang.Override protected java.util.concurrent.Callable<?> deleteTask(com.google.gerrit.server.query.change.ChangeData cd) { return com.google.common.util.concurrent.Callables.returning(null); },a3745c65cb5e469c70073cc595fb2f0e3ba3666c,deleteTask(com.google.gerrit.server.query.change.ChangeData),11529,75,56
46154,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeQueryRewriter.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> rewrite(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> in) { return super.rewrite(new com.google.gerrit.server.query.change.IndexRewrite(index).rewrite(in)); },a489d324bc71e7f24a79f3335c61146efe2e1858,,rewrite(com.google.gerrit.server.query.Predicate),4,86,@java.lang.Override public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> rewrite(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> in) { return super.rewrite(indexRewrite.rewrite(in)); },e60fcba0e730d11e2091367ac3e65675851f10a7,rewrite(com.google.gerrit.server.query.Predicate),1906,99,83
62701,gerrit-server_src_main_java_com_google_gerrit_server_IdentifiedUser.java,1.0,public boolean hasEmailAddress(java.lang.String email) { return getEmailAddresses().contains(email); },b734faf7a84dbe729057a5e0e280fc08ac65fa3b,"public boolean hasEmailAddress(java.lang.String email) { initValidEmails(); if (validEmails.contains(email)) { return true; } else if (((invalidEmails) != null) && (invalidEmails.contains(email))) { return false; } else if (realm.hasEmailAddress(this, email)) { validEmails.add(email); return true; } else if ((invalidEmails) == null) { invalidEmails = com.google.common.collect.Sets.newHashSetWithExpectedSize(4); } invalidEmails.add(email); return false; }",8821cacebe008ddd11210181cb4f90f5806d6723,hasEmailAddress(java.lang.String),hasEmailAddress(java.lang.String),4,1,"public boolean hasEmailAddress(java.lang.String email) { if (validEmails.contains(email)) { return true; } else if (((invalidEmails) != null) && (invalidEmails.contains(email))) { return false; } else if (realm.hasEmailAddress(this, email)) { validEmails.add(email); return true; } else if ((invalidEmails) == null) { invalidEmails = com.google.common.collect.Sets.newHashSetWithExpectedSize(4); } invalidEmails.add(email); return false; }",f0adc1dac593f736bf4f259d3a63d231d800c186,hasEmailAddress(java.lang.String),130836,127,122
35231,gerrit-server_src_main_java_com_google_gerrit_server_git_AsyncReceiveCommits.java,7.0,@java.lang.Override public void configure() { install(new com.google.inject.assistedinject.FactoryModuleBuilder().build(com.google.gerrit.server.git.AsyncReceiveCommits.Factory.class)); expose(com.google.gerrit.server.git.AsyncReceiveCommits.Factory.class); install(new com.google.inject.assistedinject.FactoryModuleBuilder().build(ReceiveCommits.Factory.class)); },e04328406edba1b892385aabae3183324c9014ca,@java.lang.Override public void configure() { install(new com.google.inject.assistedinject.FactoryModuleBuilder().build(com.google.gerrit.server.git.AsyncReceiveCommits.Factory.class)); expose(com.google.gerrit.server.git.AsyncReceiveCommits.Factory.class); install(new com.google.inject.assistedinject.FactoryModuleBuilder().build(ReceiveCommits.Factory.class)); install(new com.google.gerrit.server.git.validators.ValidationModule()); },0ea721547aaf61363320cb17029a347c24ed7a5c,configure(),configure(),23,7,@java.lang.Override public void configure() { install(new com.google.inject.assistedinject.FactoryModuleBuilder().build(com.google.gerrit.server.git.AsyncReceiveCommits.Factory.class)); expose(com.google.gerrit.server.git.AsyncReceiveCommits.Factory.class); install(new com.google.inject.assistedinject.FactoryModuleBuilder().build(ReceiveCommits.Factory.class)); },e04328406edba1b892385aabae3183324c9014ca,configure(),136885,120,100
117351,gerrit-server_src_main_java_com_google_gerrit_server_project_ProjectControl.java,37.0,"boolean isMergedIntoVisibleRef(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit, java.util.Collection<org.eclipse.jgit.lib.Ref> unfilteredRefs) throws java.io.IOException { com.google.gerrit.server.git.VisibleRefFilter filter = refFilter.create(state, repo); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> m = com.google.common.collect.Maps.newHashMapWithExpectedSize(unfilteredRefs.size()); for (org.eclipse.jgit.lib.Ref r : unfilteredRefs) { m.put(r.getName(), r); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = filter.filter(m, true); return (!(refs.isEmpty())) && (com.google.gerrit.server.change.IncludedInResolver.includedInOne(repo, rw, commit, refs.values())); }",805a6c12daa91b468c7be0e9a76776639986d5b8,"boolean isMergedIntoVisibleRef(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit, java.util.Collection<org.eclipse.jgit.lib.Ref> unfilteredRefs) throws java.io.IOException { com.google.gerrit.server.git.VisibleRefFilter filter = refFilter.create(state, repo); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> m = com.google.common.collect.Maps.newHashMapWithExpectedSize(unfilteredRefs.size()); for (org.eclipse.jgit.lib.Ref r : unfilteredRefs) { m.put(r.getName(), r); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = filter.filter(m, true); return (!(refs.isEmpty())) && (com.google.gerrit.server.change.IncludedInResolver.includedInAny(repo, rw, commit, refs.values())); }",e93c643526cdaf06c294159be9f2c5cdc136e460,"isMergedIntoVisibleRef(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit,java.util.Collection)","isMergedIntoVisibleRef(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit,java.util.Collection)",2,37,"boolean isMergedIntoVisibleRef(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit, java.util.Collection<org.eclipse.jgit.lib.Ref> unfilteredRefs) throws java.io.IOException { com.google.gerrit.server.git.VisibleRefFilter filter = refFilter.create(state, repo); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> m = com.google.common.collect.Maps.newHashMapWithExpectedSize(unfilteredRefs.size()); for (org.eclipse.jgit.lib.Ref r : unfilteredRefs) { m.put(r.getName(), r); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = filter.filter(m, true); return com.google.gerrit.server.change.IncludedInResolver.includedInAny(repo, rw, commit, refs.values()); }",108c8a3c70a1a93f6753ab220ef049e91c3d9d57,"isMergedIntoVisibleRef(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit,java.util.Collection)",58824,252,244
62281,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,47.0,"@java.lang.Override public com.google.gerrit.reviewdb.client.Change update(com.google.gerrit.reviewdb.client.Change change) { if (change.getStatus().isClosed()) { return null; } if (!(change.currentPatchSetId().equals(priorPatchSet))) { return change; } if (((magicBranch) != null) && ((magicBranch.topic) != null)) { change.setTopic(magicBranch.topic); } if (((change.getStatus()) == (Change.Status.DRAFT)) && (newPatchSet.isDraft())) { } else { change.setStatus(Change.Status.NEW); } change.setCurrentPatchSet(info); final java.util.List<java.lang.String> idList = newCommit.getFooterLines(com.google.gerrit.server.git.ReceiveCommits.CHANGE_ID); if (idList.isEmpty()) { change.setKey(new com.google.gerrit.reviewdb.client.Change.Key((""I"" + (newCommit.name())))); } else { change.setKey(new com.google.gerrit.reviewdb.client.Change.Key(idList.get(((idList.size()) - 1)).trim())); } com.google.gerrit.server.ChangeUtil.updated(change); return change; }",b2c801b855dc2da56442677ae0ed11f964ac1342,"@java.lang.Override public com.google.gerrit.reviewdb.client.Change update(com.google.gerrit.reviewdb.client.Change change) { if (change.getStatus().isClosed()) { return null; } if (!(change.currentPatchSetId().equals(priorPatchSet))) { return change; } if (((magicBranch) != null) && ((magicBranch.topic) != null)) { change.setTopic(magicBranch.topic); } if (((change.getStatus()) == (Change.Status.DRAFT)) && (newPatchSet.isDraft())) { } else { change.setStatus(Change.Status.NEW); } change.setCurrentPatchSet(info); final java.util.List<java.lang.String> idList = newCommit.getFooterLines(FooterConstants.CHANGE_ID); if (idList.isEmpty()) { change.setKey(new com.google.gerrit.reviewdb.client.Change.Key((""I"" + (newCommit.name())))); } else { change.setKey(new com.google.gerrit.reviewdb.client.Change.Key(idList.get(((idList.size()) - 1)).trim())); } com.google.gerrit.server.ChangeUtil.updated(change); return change; }",864a9f96e73a7555440878b6392a567000e41389,update(com.google.gerrit.reviewdb.client.Change),update(com.google.gerrit.reviewdb.client.Change),6,78,"@java.lang.Override public com.google.gerrit.reviewdb.client.Change update(com.google.gerrit.reviewdb.client.Change change) { if (change.getStatus().isClosed()) { return null; } if (!(change.currentPatchSetId().equals(priorPatchSet))) { return change; } if (((magicBranch) != null) && ((magicBranch.topic) != null)) { change.setTopic(magicBranch.topic); } if (((change.getStatus()) == (Change.Status.DRAFT)) && (newPatchSet.isDraft())) { } else { change.setStatus(Change.Status.NEW); } change.setCurrentPatchSet(info); final java.util.List<java.lang.String> idList = newCommit.getFooterLines(com.google.gerrit.server.git.CHANGE_ID); if (idList.isEmpty()) { change.setKey(new com.google.gerrit.reviewdb.client.Change.Key((""I"" + (newCommit.name())))); } else { change.setKey(new com.google.gerrit.reviewdb.client.Change.Key(idList.get(((idList.size()) - 1)).trim())); } com.google.gerrit.server.ChangeUtil.updated(change); return change; }",6cf51abc3057a1b6290b399940921e7e2fbd7684,update(com.google.gerrit.reviewdb.client.Change),113326,284,292
63936,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_FileTable.java,37.0,"private void columnPath(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb, com.google.gerrit.client.diff.FileInfo info) { sb.openTd().setStyleName(com.google.gerrit.client.change.FileTable.R.css().pathColumn()).openAnchor(); java.lang.String path = info.path(); if (((mode) == (com.google.gerrit.client.change.FileTable.Mode.EDIT)) && (!(isEditable(info)))) { sb.setAttribute(""onclick"", ((((com.google.gerrit.client.change.FileTable.RESTORE) + ""(event,"") + (info._row())) + "")"")); } else { sb.setAttribute(""href"", (""#"" + (url(info)))).setAttribute(""onclick"", ((((com.google.gerrit.client.change.FileTable.OPEN) + ""(event,"") + (info._row())) + "")"")); } if (Patch.COMMIT_MSG.equals(path)) { sb.append(Util.C.commitMessage()); } else { int commonPrefixLen = commonPrefix(path); if (commonPrefixLen > 0) { sb.openSpan().setStyleName(com.google.gerrit.client.change.FileTable.R.css().commonPrefix()).append(path.substring(0, commonPrefixLen)).closeSpan(); } sb.append(path.substring(commonPrefixLen)); lastPath = path; } sb.closeAnchor(); if ((info.old_path()) != null) { sb.br(); sb.openSpan().setStyleName(com.google.gerrit.client.change.FileTable.R.css().renameCopySource()).append(info.old_path()).closeSpan(); } sb.closeTd(); }",89f054866faba002e4468dfc899528b76ca63105,"private void columnPath(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb, com.google.gerrit.client.diff.FileInfo info) { sb.openTd().setStyleName(com.google.gerrit.client.change.FileTable.R.css().pathColumn()).openAnchor(); java.lang.String path = info.path(); if (((mode) == (com.google.gerrit.client.change.FileTable.Mode.EDIT)) && (!(isEditable(info)))) { sb.setAttribute(""onclick"", ((((com.google.gerrit.client.change.FileTable.RESTORE) + ""(event,"") + (info._row())) + "")"")); } else { sb.setAttribute(""href"", (""#"" + (url(info)))).setAttribute(""onclick"", ((((com.google.gerrit.client.change.FileTable.OPEN) + ""(event,"") + (info._row())) + "")"")); } if (Patch.COMMIT_MSG.equals(path)) { sb.append(Util.C.commitMessage()); } else if (com.google.gerrit.client.Gerrit.getConfig().getMuteCommonPathsInFileTable()) { int commonPrefixLen = commonPrefix(path); if (commonPrefixLen > 0) { sb.openSpan().setStyleName(com.google.gerrit.client.change.FileTable.R.css().commonPrefix()).append(path.substring(0, commonPrefixLen)).closeSpan(); } sb.append(path.substring(commonPrefixLen)); lastPath = path; } else { sb.append(path); } sb.closeAnchor(); if ((info.old_path()) != null) { sb.br(); sb.openSpan().setStyleName(com.google.gerrit.client.change.FileTable.R.css().renameCopySource()).append(info.old_path()).closeSpan(); } sb.closeTd(); }",d5760e68e2790269e20f7b23e8dd5e08ecc38c66,"columnPath(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder,com.google.gerrit.client.diff.FileInfo)","columnPath(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder,com.google.gerrit.client.diff.FileInfo)",3,37,"private void columnPath(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb, com.google.gerrit.client.diff.FileInfo info) { sb.openTd().setStyleName(com.google.gerrit.client.change.FileTable.R.css().pathColumn()).openAnchor(); java.lang.String path = info.path(); if (((mode) == (com.google.gerrit.client.change.FileTable.Mode.EDIT)) && (!(isEditable(info)))) { sb.setAttribute(""onclick"", ((((com.google.gerrit.client.change.FileTable.RESTORE) + ""(event,"") + (info._row())) + "")"")); } else { sb.setAttribute(""href"", (""#"" + (url(info)))).setAttribute(""onclick"", ((((com.google.gerrit.client.change.FileTable.OPEN) + ""(event,"") + (info._row())) + "")"")); } if (Patch.COMMIT_MSG.equals(path)) { sb.append(Util.C.commitMessage()); } else if ((!(hasUser)) || (com.google.gerrit.client.Gerrit.getUserAccount().getGeneralPreferences().isMuteCommonPathPrefixes())) { int commonPrefixLen = commonPrefix(path); if (commonPrefixLen > 0) { sb.openSpan().setStyleName(com.google.gerrit.client.change.FileTable.R.css().commonPrefix()).append(path.substring(0, commonPrefixLen)).closeSpan(); } sb.append(path.substring(commonPrefixLen)); lastPath = path; } else { sb.append(path); } sb.closeAnchor(); if ((info.old_path()) != null) { sb.br(); sb.openSpan().setStyleName(com.google.gerrit.client.change.FileTable.R.css().renameCopySource()).append(info.old_path()).closeSpan(); } sb.closeTd(); }",74a26d0a10439908b6507d1ace5c199a451683d6,"columnPath(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder,com.google.gerrit.client.diff.FileInfo)",132828,434,444
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,59.0,"public com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSetApproval> approvals() throws com.google.gwtorm.server.OrmException { if ((allApprovals) == null) { if (!(lazyLoad)) { return com.google.common.collect.ImmutableListMultimap.of(); } allApprovals = approvalsUtil.byChange(db, notes()); } return allApprovals; }",c6f5d266d023d40a72653e332f03851ec011f15d,"public com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSetApproval> approvals() throws com.google.gwtorm.server.OrmException { if ((allApprovals) == null) { if (!(lazyLoad)) { return com.google.common.collect.ImmutableListMultimap.of(); } allApprovals = a.approvalsUtil.byChange(db, notes()); } return allApprovals; }",01808a813c4531a553f443d29051abc02082898f,approvals(),approvals(),5,58,"public com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSetApproval> approvals() throws com.google.gwtorm.server.OrmException { if ((allApprovals) == null) { if (!(lazyLoad)) { return com.google.common.collect.ImmutableListMultimap.of(); } allApprovals = approvalsUtil.byChange(db, notes()); } return allApprovals; }",c6f5d266d023d40a72653e332f03851ec011f15d,approvals(),94339,121,120
156032,src_main_java_com_googlesource_gerrit_plugins_lfs_locks_LfsLocksAction.java,8.0,"private void throwUnauthorizedOp(java.lang.String op, com.google.gerrit.server.project.ProjectState state, com.google.gerrit.server.CurrentUser user) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { java.lang.String project = state.getProject().getName(); java.lang.String userName = (com.google.common.base.Strings.isNullOrEmpty(user.getUserName())) ? ""anonymous"" : user.getUserName(); com.googlesource.gerrit.plugins.lfs.locks.LfsLocksAction.log.debug(java.lang.String.format(""operation %s unauthorized for user %s on project %s"", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); }",8c00cc0483d81cf7873ef330606abf777d9351bf,"private void throwUnauthorizedOp(java.lang.String op, com.google.gerrit.server.project.ProjectState state, com.google.gerrit.server.CurrentUser user) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { java.lang.String project = state.getProject().getName(); java.lang.String userName = (user.getUserName().isPresent()) ? user.getUserName().get() : ""anonymous""; com.googlesource.gerrit.plugins.lfs.locks.LfsLocksAction.log.debug(java.lang.String.format(""operation %s unauthorized for user %s on project %s"", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); }",d56585045555ee25769a881199ff96824c37992e,"throwUnauthorizedOp(java.lang.String,com.google.gerrit.server.project.ProjectState,com.google.gerrit.server.CurrentUser)","throwUnauthorizedOp(java.lang.String,com.google.gerrit.server.project.ProjectState,com.google.gerrit.server.CurrentUser)",6,8,"private void throwUnauthorizedOp(java.lang.String op, com.google.gerrit.server.project.ProjectState state, com.google.gerrit.server.CurrentUser user) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { java.lang.String project = state.getProject().getName(); java.lang.String userName = user.getUserName().orElse(""anonymous""); com.googlesource.gerrit.plugins.lfs.locks.LfsLocksAction.log.debug(java.lang.String.format(""operation %s unauthorized for user %s on project %s"", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); }",ee28e2c28040c809ebd1a15fd767aeb7b7ba55c3,"throwUnauthorizedOp(java.lang.String,com.google.gerrit.server.project.ProjectState,com.google.gerrit.server.CurrentUser)",8464,171,160
89321,gerrit-server_src_main_java_com_google_gerrit_server_project_CommitIncludedIn.java,,,,"@java.lang.Override public IncludedIn.IncludedInInfo apply(com.google.gerrit.server.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc.getCommit(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProject().getProject().getNameKey(); return includedIn.apply(project, commit.getId().getName()); }",66f6348fb0453033c00b58153103c845174de54a,,apply(com.google.gerrit.server.project.CommitResource),7,0,"@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc.getCommit(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProject().getProject().getNameKey(); return includedIn.apply(project, commit.getId().getName()); }",ef2a3fbd679ac71e687dc75d7009395a240cf173,apply(com.google.gerrit.server.project.CommitResource),120001,148,141
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,32.0,"@org.junit.Test public void createDuplicateSystemGroupCaseSensitiveName_Conflict() throws java.lang.Exception { java.lang.String newGroupName = ""Registered Users""; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""group 'Registered Users' already exists""); gApi.groups().create(newGroupName); }",f08033f31973db0e7afcf967e94683ed74cf3c0f,"@org.junit.Test public void createDuplicateSystemGroupCaseSensitiveName_Conflict() throws java.lang.Exception { java.lang.String newGroupName = ""Registered Users""; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""account 'Registered Users' already exists""); gApi.groups().create(newGroupName); }",f4eb9f23377f700ce3d3865ae3b74e26038399cc,createDuplicateSystemGroupCaseSensitiveName_Conflict(),createDuplicateSystemGroupCaseSensitiveName_Conflict(),17,32,"@org.junit.Test public void createDuplicateSystemGroupCaseSensitiveName_Conflict() throws java.lang.Exception { java.lang.String newGroupName = ""Registered Users""; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""group 'Registered Users' already exists""); gApi.groups().create(newGroupName); }",f08033f31973db0e7afcf967e94683ed74cf3c0f,createDuplicateSystemGroupCaseSensitiveName_Conflict(),217391,85,85
74239,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Labels.java,3.0,"private static void onRemoveReviewer(com.google.gwt.dom.client.NativeEvent event) { java.lang.Integer user = com.google.gerrit.client.change.Labels.getDataId(event); if (user != null) { final com.google.gerrit.client.change.ChangeScreen screen = com.google.gerrit.client.change.ChangeScreen.get(event); com.google.gerrit.client.changes.ChangeApi.reviewer(screen.getChangeId().get(), user).delete(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(screen.getChangeId())); } } }); } }",37cdee53427074c26f237f2137ac2b7d589fbf5d,"private static void onRemoveReviewer(com.google.gwt.dom.client.NativeEvent event) { java.lang.Integer user = com.google.gerrit.client.change.Labels.getDataId(event); if (user != null) { final com.google.gerrit.client.change.ChangeScreen screen = com.google.gerrit.client.change.ChangeScreen.get(event); com.google.gerrit.client.changes.ChangeApi.reviewer(screen.getPatchSetId().getParentKey().get(), user).delete(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(screen.getPatchSetId().getParentKey())); } } }); } }",30c27e8b6ee42703fed6c75a54fe6feb926f1b5d,onRemoveReviewer(com.google.gwt.dom.client.NativeEvent),onRemoveReviewer(com.google.gwt.dom.client.NativeEvent),2,3,"private static void onRemoveReviewer(com.google.gwt.dom.client.NativeEvent event) { java.lang.Integer user = com.google.gerrit.client.change.Labels.getDataId(event); if (user != null) { final com.google.gerrit.client.change.ChangeScreen screen = com.google.gerrit.client.change.ChangeScreen.get(event); final com.google.gerrit.reviewdb.client.Change.Id changeId = screen.getPatchSetId().getParentKey(); com.google.gerrit.client.changes.ChangeApi.reviewer(changeId.get(), user).delete(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId)); } } }); } }",4bd8054af7aa15aff0df700be75e449578810210,onRemoveReviewer(com.google.gwt.dom.client.NativeEvent),188870,233,249
38722,src_main_java_com_googlesource_gerrit_plugins_replication_PushAll.java,2.0,"@java.lang.Override public void run() { try { for (com.google.gerrit.reviewdb.client.Project.NameKey nameKey : projectCache.all()) { replication.scheduleFullSync(nameKey, urlMatch); } } catch (java.lang.Exception e) { com.googlesource.gerrit.plugins.replication.PushAll.log.error(""Cannot enumerate known projects"", e); } }",e88269900e9bdba93c852c0abaa86b3cec87233c,"@java.lang.Override public void run() { try { for (com.google.gerrit.reviewdb.client.Project.NameKey nameKey : projectCache.all()) { replication.scheduleFullSync(nameKey, urlMatch, state); } } catch (java.lang.Exception e) { com.googlesource.gerrit.plugins.replication.PushAll.wrappedLog.error(""Cannot enumerate known projects"", e, state); } state.allTaskScheduled(); }",d042c25b417afbd04ca0d933dede00c92d85a8cc,run(),run(),9,3,"@java.lang.Override public void run() { try { for (com.google.gerrit.reviewdb.client.Project.NameKey nameKey : projectCache.all()) { replication.scheduleFullSync(nameKey, urlMatch, state); } } catch (java.lang.Exception e) { com.googlesource.gerrit.plugins.replication.PushAll.wrappedLog.error(""Cannot enumerate known projects"", e, state); } state.markAllPushTasksScheduled(); }",77b7cf79b52377bbd7f6a4de7019df6a8fb4e563,run(),206211,105,107
67656,gerrit-server_src_main_java_com_google_gerrit_server_change_ListRevisionDrafts.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.util.List<com.google.gerrit.extensions.common.CommentInfo> getComments(com.google.gerrit.server.change.RevisionResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().setFillAccounts(includeAuthorInfo()).format2(listComments(rsrc)); },0732f2dc6763cb6f98cc39afdbec06a7d7c555aa,,getComments(com.google.gerrit.server.change.RevisionResource),6,0,public java.util.List<com.google.gerrit.extensions.common.CommentInfo> getComments(com.google.gerrit.server.change.RevisionResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().setFillAccounts(includeAuthorInfo()).formatAsList(listComments(rsrc)); },bc389f241b6cabfea9f2ba8878a754f4cc0afa71,getComments(com.google.gerrit.server.change.RevisionResource),465,78,78
77891,gitiles-servlet_src_main_java_com_google_gitiles_doc_MarkdownToHtml.java,24.0,"@java.lang.Override public void visit(org.pegdown.ast.MailLinkNode node) { java.lang.String addr = node.getText(); html.open(""a"").attribute(""href"", (""mailto:"" + addr)).appendAndEscape(addr).close(""a""); }",8a913aa6bd83ad0cc3ef9734506135fd1e5d357b,"public void visit(org.commonmark.ext.gfm.strikethrough.Strikethrough node) { wrapChildren(""del"", node); }",c07feddd2eae3ec3f34b03ebb26bd977bda681bb,visit(org.pegdown.ast.MailLinkNode),visit(org.commonmark.ext.gfm.strikethrough.Strikethrough),9,30,"private void visit(org.commonmark.ext.gfm.tables.TableRow node) { wrapChildren(""tr"", node); }",a42fa45915f99177963a8ca982a3c71b948aa9d0,visit(org.commonmark.ext.gfm.tables.TableRow),90760,30,28
74992,gerrit-server_src_main_java_com_google_gerrit_server_git_ReplaceOp.java,15.0,"private org.eclipse.jgit.lib.Ref findMergedInto(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, java.lang.String first, org.eclipse.jgit.revwalk.RevCommit commit) { try { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = ctx.getRepository().getRefDatabase().getRefs(com.google.gerrit.server.git.ALL); org.eclipse.jgit.lib.Ref firstRef = all.get(first); if ((firstRef != null) && (com.google.gerrit.server.git.ReplaceOp.isMergedInto(ctx.getRevWalk(), commit, firstRef))) { return firstRef; } for (org.eclipse.jgit.lib.Ref ref : all.values()) { if (com.google.gerrit.server.git.ReplaceOp.isBranch(ref)) { if (com.google.gerrit.server.git.ReplaceOp.isMergedInto(ctx.getRevWalk(), commit, ref)) { return ref; } } } return null; } catch (java.io.IOException e) { com.google.gerrit.server.git.ReplaceOp.log.warn(""Can't check for already submitted change"", e); return null; } }",2dad474c425387522c6ce81780ca2ee32ff3f784,"private org.eclipse.jgit.lib.Ref findMergedInto(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, java.lang.String first, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.RefDatabase refDatabase = ctx.getRepository().getRefDatabase(); org.eclipse.jgit.lib.Ref firstRef = refDatabase.getRef(first); if ((firstRef != null) && (com.google.gerrit.server.git.ReplaceOp.isMergedInto(ctx.getRevWalk(), commit, firstRef))) { return firstRef; } for (org.eclipse.jgit.lib.Ref ref : refDatabase.getRefs(Constants.R_HEADS).values()) { if (com.google.gerrit.server.git.ReplaceOp.isMergedInto(ctx.getRevWalk(), commit, ref)) { return ref; } } return null; } catch (java.io.IOException e) { com.google.gerrit.server.git.ReplaceOp.log.warn(""Can't check for already submitted change"", e); return null; } }",c5c63ce1da7dd8c13ebabceb8966798c8469443b,"findMergedInto(com.google.gerrit.server.git.BatchUpdate.ChangeContext,java.lang.String,org.eclipse.jgit.revwalk.RevCommit)","findMergedInto(com.google.gerrit.server.git.BatchUpdate.ChangeContext,java.lang.String,org.eclipse.jgit.revwalk.RevCommit)",2,15,"private org.eclipse.jgit.lib.Ref findMergedInto(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, java.lang.String first, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.RefDatabase refDatabase = ctx.getRepository().getRefDatabase(); org.eclipse.jgit.lib.Ref firstRef = refDatabase.exactRef(first); if ((firstRef != null) && (com.google.gerrit.server.git.ReplaceOp.isMergedInto(ctx.getRevWalk(), commit, firstRef))) { return firstRef; } for (org.eclipse.jgit.lib.Ref ref : refDatabase.getRefs(Constants.R_HEADS).values()) { if (com.google.gerrit.server.git.ReplaceOp.isMergedInto(ctx.getRevWalk(), commit, ref)) { return ref; } } return null; } catch (java.io.IOException e) { com.google.gerrit.server.git.ReplaceOp.log.warn(""Can't check for already submitted change"", e); return null; } }",7d0877b3f06b6403f6ac41c48acd3cf4c3eabfe4,"findMergedInto(com.google.gerrit.server.git.BatchUpdate.ChangeContext,java.lang.String,org.eclipse.jgit.revwalk.RevCommit)",145665,258,259
76904,gerrit-server_src_main_java_com_google_gerrit_server_index_change_AllChangesIndexer.java,2.0,@java.lang.Override public java.lang.Void call() throws java.lang.Exception { walk = new org.eclipse.jgit.revwalk.RevWalk(repo); try { for (org.eclipse.jgit.lib.Ref ref : repo.getRefDatabase().getRefs(Constants.R_HEADS).values()) { org.eclipse.jgit.revwalk.RevObject o = walk.parseAny(ref.getObjectId()); if (o instanceof org.eclipse.jgit.revwalk.RevCommit) { walk.markStart(((org.eclipse.jgit.revwalk.RevCommit) (o))); } } org.eclipse.jgit.revwalk.RevCommit bCommit; while (((bCommit = walk.next()) != null) && (!(byId.isEmpty()))) { if (byId.containsKey(bCommit)) { getPathsAndIndex(bCommit); byId.removeAll(bCommit); } } for (org.eclipse.jgit.lib.ObjectId id : byId.keySet()) { getPathsAndIndex(id); } } finally { walk.close(); } return null; },9ff27ec895cb21d06342958e6eaff29b8d9582fb,@java.lang.Override public java.lang.Void call() throws java.lang.Exception { ins = repo.newObjectInserter(); walk = new org.eclipse.jgit.revwalk.RevWalk(ins.newReader()); try { for (org.eclipse.jgit.lib.Ref ref : repo.getRefDatabase().getRefs(Constants.R_HEADS).values()) { org.eclipse.jgit.revwalk.RevObject o = walk.parseAny(ref.getObjectId()); if (o instanceof org.eclipse.jgit.revwalk.RevCommit) { walk.markStart(((org.eclipse.jgit.revwalk.RevCommit) (o))); } } org.eclipse.jgit.revwalk.RevCommit bCommit; while (((bCommit = walk.next()) != null) && (!(byId.isEmpty()))) { if (byId.containsKey(bCommit)) { getPathsAndIndex(bCommit); byId.removeAll(bCommit); } } for (org.eclipse.jgit.lib.ObjectId id : byId.keySet()) { getPathsAndIndex(id); } } finally { walk.close(); ins.close(); } return null; },f58216521113bc6ca6f2fc642999354b38cd8853,call(),call(),4,2,"@java.lang.Override public java.lang.Void call() throws java.lang.Exception { try (org.eclipse.jgit.lib.ObjectInserter ins = repo.newObjectInserter();org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(ins.newReader())) { for (org.eclipse.jgit.lib.Ref ref : repo.getRefDatabase().getRefs(Constants.R_HEADS).values()) { org.eclipse.jgit.revwalk.RevObject o = walk.parseAny(ref.getObjectId()); if (o instanceof org.eclipse.jgit.revwalk.RevCommit) { walk.markStart(((org.eclipse.jgit.revwalk.RevCommit) (o))); } } org.eclipse.jgit.revwalk.RevCommit bCommit; while (((bCommit = walk.next()) != null) && (!(byId.isEmpty()))) { if (byId.containsKey(bCommit)) { getPathsAndIndex(walk, ins, bCommit); byId.removeAll(bCommit); } } for (org.eclipse.jgit.lib.ObjectId id : byId.keySet()) { getPathsAndIndex(walk, ins, id); } } return null; }",b099d4b858bf32393cd204bdfc8e4320c85980f8,call(),34393,262,285
73188,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ConflictsPredicate.java,3.0,"@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData object) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change otherChange = object.change(); if (otherChange == null) { return false; } if (!(otherChange.getDest().equals(c.getDest()))) { return false; } com.google.gerrit.extensions.client.SubmitType submitType = getSubmitType(object); if (submitType == null) { return false; } org.eclipse.jgit.lib.ObjectId other = org.eclipse.jgit.lib.ObjectId.fromString(object.currentPatchSet().getRevision().get()); com.google.gerrit.server.query.change.ConflictKey conflictsKey = new com.google.gerrit.server.query.change.ConflictKey(changeDataCache.getTestAgainst(), other, submitType, changeDataCache.getProjectState().isUseContentMerge()); java.lang.Boolean conflicts = args.conflictsCache.getIfPresent(conflictsKey); if (conflicts != null) { return conflicts; } try (org.eclipse.jgit.lib.Repository repo = args.repoManager.openRepository(otherChange.getProject());com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw = com.google.gerrit.server.git.CodeReviewCommit.newRevWalk(repo)) { org.eclipse.jgit.revwalk.RevFlag canMergeFlag = rw.newFlag(""CAN_MERGE""); com.google.gerrit.server.git.CodeReviewCommit commit = rw.parseCommit(changeDataCache.getTestAgainst()); com.google.gerrit.server.git.strategy.SubmitStrategy strategy = args.submitStrategyFactory.create(submitType, db.get(), repo, rw, null, canMergeFlag, getAlreadyAccepted(repo, rw, commit), otherChange.getDest(), null); com.google.gerrit.server.git.CodeReviewCommit otherCommit = rw.parseCommit(other); otherCommit.add(canMergeFlag); conflicts = !(strategy.dryRun(commit, otherCommit)); args.conflictsCache.put(conflictsKey, conflicts); return conflicts; } catch (com.google.gerrit.server.git.IntegrationException | com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { throw new java.lang.IllegalStateException(e); } }",fd7a27f0edc4aacb6685267367bee1b05469e25a,"@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData object) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change otherChange = object.change(); if (otherChange == null) { return false; } if (!(otherChange.getDest().equals(c.getDest()))) { return false; } com.google.gerrit.extensions.client.SubmitType submitType = getSubmitType(object); if (submitType == null) { return false; } org.eclipse.jgit.lib.ObjectId other = org.eclipse.jgit.lib.ObjectId.fromString(object.currentPatchSet().getRevision().get()); com.google.gerrit.server.query.change.ConflictKey conflictsKey = new com.google.gerrit.server.query.change.ConflictKey(changeDataCache.getTestAgainst(), other, submitType, changeDataCache.getProjectState().isUseContentMerge()); java.lang.Boolean conflicts = args.conflictsCache.getIfPresent(conflictsKey); if (conflicts != null) { return conflicts; } try (org.eclipse.jgit.lib.Repository repo = args.repoManager.openRepository(otherChange.getProject());com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw = com.google.gerrit.server.git.CodeReviewCommit.newRevWalk(repo)) { conflicts = !(args.submitDryRun.dryRun(submitType, repo, rw, otherChange.getDest(), changeDataCache.getTestAgainst(), other, getAlreadyAccepted(repo, rw))); args.conflictsCache.put(conflictsKey, conflicts); return conflicts; } catch (com.google.gerrit.server.git.IntegrationException | com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { throw new java.lang.IllegalStateException(e); } }",5bf676dd610be9e30a28689d6dd06ead1cc7f0ba,match(com.google.gerrit.server.query.change.ChangeData),match(com.google.gerrit.server.query.change.ChangeData),4,3,"@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData object) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change otherChange = object.change(); if (otherChange == null) { return false; } if (!(otherChange.getDest().equals(c.getDest()))) { return false; } com.google.gerrit.extensions.client.SubmitType submitType = getSubmitType(object); if (submitType == null) { return false; } org.eclipse.jgit.lib.ObjectId other = org.eclipse.jgit.lib.ObjectId.fromString(object.currentPatchSet().getRevision().get()); com.google.gerrit.server.query.change.ConflictKey conflictsKey = new com.google.gerrit.server.query.change.ConflictKey(changeDataCache.getTestAgainst(), other, submitType, changeDataCache.getProjectState().isUseContentMerge()); java.lang.Boolean conflicts = args.conflictsCache.getIfPresent(conflictsKey); if (conflicts != null) { return conflicts; } try (org.eclipse.jgit.lib.Repository repo = args.repoManager.openRepository(otherChange.getProject());com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw = com.google.gerrit.server.git.CodeReviewCommit.newRevWalk(repo)) { conflicts = !(args.submitDryRun.run(submitType, repo, rw, otherChange.getDest(), changeDataCache.getTestAgainst(), other, getAlreadyAccepted(repo, rw))); args.conflictsCache.put(conflictsKey, conflicts); return conflicts; } catch (com.google.gerrit.server.git.IntegrationException | com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { throw new java.lang.IllegalStateException(e); } }",7a8772229a968141c85631271991ccc2183e2876,match(com.google.gerrit.server.query.change.ChangeData),48815,437,435
140535,java_com_google_gerrit_server_patch_PatchListLoader.java,2.0,"private org.eclipse.jgit.revwalk.RevObject aFor(com.google.gerrit.server.patch.PatchListKey key, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.revwalk.RevCommit b) throws java.io.IOException { if ((key.getOldId()) != null) { return rw.parseAny(key.getOldId()); } switch (b.getParentCount()) { case 0 : return rw.parseAny(com.google.gerrit.server.patch.PatchListLoader.emptyTree(ins)); case 1 : { org.eclipse.jgit.revwalk.RevCommit r = b.getParent(0); rw.parseBody(r); return r; } case 2 : if ((key.getParentNum()) != null) { org.eclipse.jgit.revwalk.RevCommit r = b.getParent(((key.getParentNum()) - 1)); rw.parseBody(r); return r; } return autoMerger.merge(repo, rw, ins, b, mergeStrategy); default : return null; } }",8e355c42685ec6669e5e5dc6ce6b14a8539aee55,"private org.eclipse.jgit.revwalk.RevObject aFor(com.google.gerrit.server.patchlib.PatchListKey key, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.revwalk.RevCommit b) throws java.io.IOException { if ((key.getOldId()) != null) { return rw.parseAny(key.getOldId()); } switch (b.getParentCount()) { case 0 : return rw.parseAny(com.google.gerrit.server.patch.PatchListLoader.emptyTree(ins)); case 1 : { org.eclipse.jgit.revwalk.RevCommit r = b.getParent(0); rw.parseBody(r); return r; } case 2 : if ((key.getParentNum()) != null) { org.eclipse.jgit.revwalk.RevCommit r = b.getParent(((key.getParentNum()) - 1)); rw.parseBody(r); return r; } return autoMerger.merge(repo, rw, ins, b, mergeStrategy); default : return null; } }",dcc5ee8da3626b8205a0bae0d7a09a519818ed92,"aFor(com.google.gerrit.server.patch.PatchListKey,org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ObjectInserter,org.eclipse.jgit.revwalk.RevCommit)","aFor(com.google.gerrit.server.patchlib.PatchListKey,org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ObjectInserter,org.eclipse.jgit.revwalk.RevCommit)",11,19,"private org.eclipse.jgit.revwalk.RevObject aFor(com.google.gerrit.server.diff.PatchListKey key, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.revwalk.RevCommit b) throws java.io.IOException { if ((key.getOldId()) != null) { return rw.parseAny(key.getOldId()); } switch (b.getParentCount()) { case 0 : return rw.parseAny(com.google.gerrit.server.patch.PatchListLoader.emptyTree(ins)); case 1 : { org.eclipse.jgit.revwalk.RevCommit r = b.getParent(0); rw.parseBody(r); return r; } case 2 : if ((key.getParentNum()) != null) { org.eclipse.jgit.revwalk.RevCommit r = b.getParent(((key.getParentNum()) - 1)); rw.parseBody(r); return r; } return autoMerger.merge(repo, rw, ins, b, mergeStrategy); default : return null; } }",fa885d15c63e152f81d16b807eac22a14ded7664,"aFor(com.google.gerrit.server.diff.PatchListKey,org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ObjectInserter,org.eclipse.jgit.revwalk.RevCommit)",15343,271,270
49159,gerrit-server_src_test_java_com_google_gerrit_server_project_Util.java,,,,"private com.google.gerrit.server.project.ProjectState newProjectState(com.google.gerrit.server.git.ProjectConfig local) { com.google.gerrit.rules.PrologEnvironment.Factory envFactory = null; com.google.gerrit.server.git.GitRepositoryManager gitMgr = null; com.google.gerrit.server.project.ProjectControl.AssistedFactory projectControlFactory = null; com.google.gerrit.rules.RulesCache rulesCache = null; com.google.gerrit.server.config.SitePaths sitePaths = null; java.util.List<com.google.gerrit.server.project.CommentLinkInfo> commentLinks = null; all.put(local.getProject().getNameKey(), new com.google.gerrit.server.project.ProjectState(sitePaths, projectCache, allProjectsName, projectControlFactory, envFactory, gitMgr, rulesCache, commentLinks, local)); return all.get(local.getProject().getNameKey()); }",80441fc53fb406e9e43d8281401ee9a57bee693e,,newProjectState(com.google.gerrit.server.git.ProjectConfig),16,17,private com.google.gerrit.server.project.ProjectState newProjectState(com.google.gerrit.server.git.ProjectConfig local) { add(local); return all.get(local.getProject().getNameKey()); },66142abd9c4cb14ac53076bccaf6384a2e4374bf,newProjectState(com.google.gerrit.server.git.ProjectConfig),145406,221,51
146690,src_main_java_com_googlesource_gerrit_plugins_findowners_Config.java,5.0,"static int getMinOwnerVoteLevel(com.google.gerrit.server.query.change.ChangeData changeData) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Project.NameKey project = changeData.change().getProject(); try { return ((com.googlesource.gerrit.plugins.findowners.Config.config) == null) || (project == null) ? com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel : com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(project, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getInt(com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER_VOTE_LEVEL, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.findowners.Config.log.error((((""Cannot find project "" + project) + "" for "") + (com.googlesource.gerrit.plugins.findowners.Config.getChangeId(changeData))), e); return com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel; } }",174630327e6e7d78cb9ee38ed8b55a4344ef50db,"static int getMinOwnerVoteLevel(com.google.gerrit.server.project.ProjectState projectState) throws com.google.gwtorm.server.OrmException { return ((com.googlesource.gerrit.plugins.findowners.Config.config) == null) || (projectState == null) ? com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel : com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(projectState, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getInt(com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER_VOTE_LEVEL, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel); }",5683f5d38eabdbaafe35f536fa169a8418f26749,getMinOwnerVoteLevel(com.google.gerrit.server.query.change.ChangeData),getMinOwnerVoteLevel(com.google.gerrit.server.project.ProjectState),2,5,"static int getMinOwnerVoteLevel(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.query.change.ChangeData c) throws com.google.gwtorm.server.OrmException { if (projectState == null) { com.googlesource.gerrit.plugins.findowners.Config.log.error((""Null projectState for change "" + (com.googlesource.gerrit.plugins.findowners.Config.getChangeId(c)))); return com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel; } else if ((com.googlesource.gerrit.plugins.findowners.Config.config) == null) { return com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel; } else { return com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(projectState, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getInt(com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER_VOTE_LEVEL, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel); } }",e1530ebca267b2a7db52cc1c9bfa3fbbd46a0f12,"getMinOwnerVoteLevel(com.google.gerrit.server.project.ProjectState,com.google.gerrit.server.query.change.ChangeData)",90174,188,286
24116,gerrit-gwtui_src_main_java_com_google_gerrit_client_Dispatcher.java,25.0,"private static com.google.gerrit.client.ui.Screen all(final java.lang.String token) { java.lang.String p; p = ""all,abandoned,""; if (token.startsWith(p)) { return com.google.gerrit.client.changes.QueryScreen.forQuery(""status:abandoned"", com.google.gerrit.client.Dispatcher.skip(p, token)); } p = ""all,merged,""; if (token.startsWith(p)) { return com.google.gerrit.client.changes.QueryScreen.forQuery(""status:merged"", com.google.gerrit.client.Dispatcher.skip(p, token)); } p = ""all,open,""; if (token.startsWith(p)) { return com.google.gerrit.client.changes.QueryScreen.forQuery(""status:open"", com.google.gerrit.client.Dispatcher.skip(p, token)); } return new com.google.gerrit.client.NotFoundScreen(); }",9cc40fe588bd35e4396ec8d6967748e6242e700c,"private static com.google.gerrit.client.ui.Screen legacyAll(final java.lang.String token) { if (com.google.gerrit.client.Dispatcher.matchPrefix(""all,abandoned,"", token)) { return com.google.gerrit.client.changes.QueryScreen.forQuery(""status:abandoned"", com.google.gerrit.client.Dispatcher.skip(token)); } if (com.google.gerrit.client.Dispatcher.matchPrefix(""all,merged,"", token)) { return com.google.gerrit.client.changes.QueryScreen.forQuery(""status:merged"", com.google.gerrit.client.Dispatcher.skip(token)); } if (com.google.gerrit.client.Dispatcher.matchPrefix(""all,open,"", token)) { return com.google.gerrit.client.changes.QueryScreen.forQuery(""status:open"", com.google.gerrit.client.Dispatcher.skip(token)); } return new com.google.gerrit.client.NotFoundScreen(); }",7b66f0bb89c9b997c7c7644348a7288a88fcfaa4,all(java.lang.String),legacyAll(java.lang.String),2,27,"private static java.lang.String legacyAll(final java.lang.String token) { if (com.google.gerrit.client.Dispatcher.matchPrefix(""all,abandoned,"", token)) { return com.google.gerrit.common.PageLinks.toChangeQuery(""status:abandoned"", com.google.gerrit.client.Dispatcher.skip(token)); } if (com.google.gerrit.client.Dispatcher.matchPrefix(""all,merged,"", token)) { return com.google.gerrit.common.PageLinks.toChangeQuery(""status:merged"", com.google.gerrit.client.Dispatcher.skip(token)); } if (com.google.gerrit.client.Dispatcher.matchPrefix(""all,open,"", token)) { return com.google.gerrit.common.PageLinks.toChangeQuery(""status:open"", com.google.gerrit.client.Dispatcher.skip(token)); } return null; }",a4c21930dec02560a04444974f756d7245d587a5,legacyAll(java.lang.String),101950,236,212
131290,src_test_java_com_googlesource_gerrit_plugins_webhooks_PostTaskTest.java,2.0,"@org.junit.Test public void rescheduleOnError() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.ERR_RESULT); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",b89104f95b2109bb5772848dc66692a06217b515,"@org.junit.Test public void rescheduleOnError() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, remote, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.ERR_RESULT); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",b7917034cbe37d5aae4b352618286c5f0f6ec49f,rescheduleOnError(),rescheduleOnError(),10,2,"@org.junit.Test public void rescheduleOnError() throws java.io.IOException { when(session.post(eq(remote), eq(content))).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.ERR_RESULT); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",0a1516336d23f897605653123a5be452866a20a3,rescheduleOnError(),65285,163,106
50851,src_main_java_com_googlesource_gerrit_plugins_download_scheme_HttpScheme.java,4.0,"@java.lang.Override public java.lang.String getUrl(java.lang.String project) { if (!(isEnabled())) { return null; } final java.lang.StringBuilder r = new java.lang.StringBuilder(); if ((gitHttpUrl) != null) { r.append(gitHttpUrl); } else if ((canonicalWebUrl) != null) { java.lang.String base = canonicalWebUrl; int p = base.indexOf(""://""); int s = base.indexOf('/', (p + 3)); if (s < 0) { s = base.length(); } java.lang.String host = base.substring((p + 3), s); r.append(base.substring(0, (p + 3))); r.append(""${username}@""); r.append(host); r.append(base.substring(s)); } else { return null; } r.append(project); return r.toString(); }",9b8e677ab952b108305d79895686cec2d67c8f16,"@java.lang.Override public java.lang.String getUrl(java.lang.String project) { if ((!(isEnabled())) || ((userProvider.get()) instanceof com.google.gerrit.server.AnonymousUser)) { return null; } final java.lang.StringBuilder r = new java.lang.StringBuilder(); if ((gitHttpUrl) != null) { r.append(gitHttpUrl); } else if ((canonicalWebUrl) != null) { java.lang.String base = canonicalWebUrl; int p = base.indexOf(""://""); int s = base.indexOf('/', (p + 3)); if (s < 0) { s = base.length(); } java.lang.String host = base.substring((p + 3), s); r.append(base.substring(0, (p + 3))); r.append(userProvider.get().getUserName()); r.append(""@""); r.append(host); r.append(base.substring(s)); } else { return null; } r.append(project); return r.toString(); }",0f74f6fa1fa760d1b120bc26e1d6900eefff9c14,getUrl(java.lang.String),getUrl(java.lang.String),3,3,"@java.lang.Override public java.lang.String getUrl(java.lang.String project) { if ((!(isEnabled())) || (!(userProvider.get().isIdentifiedUser()))) { return null; } final java.lang.StringBuilder r = new java.lang.StringBuilder(); if ((gitHttpUrl) != null) { r.append(gitHttpUrl); } else if ((canonicalWebUrl) != null) { java.lang.String base = canonicalWebUrl; int p = base.indexOf(""://""); int s = base.indexOf('/', (p + 3)); if (s < 0) { s = base.length(); } java.lang.String host = base.substring((p + 3), s); r.append(base.substring(0, (p + 3))); r.append(userProvider.get().getUserName()); r.append(""@""); r.append(host); r.append(base.substring(s)); } else { return null; } r.append(project); return r.toString(); }",4e688f982b73279f2d097c778643e70e5bbe6cce,getUrl(java.lang.String),214630,230,221
69853,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_SubmitByFastForwardIT.java,1.0,@org.junit.Test public void submitTwoChangesWithFastForward_missingDependency() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); createChange(); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange(); submitWithConflict(change2.getChangeId()); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getId()).isEqualTo(oldHead.getId()); },c49faaad6409e89b3040fa1d5f0352237d7bbb0c,"@org.junit.Test public void submitTwoChangesWithFastForward_missingDependency() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); createChange(); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange(); submitWithConflict(change2.getChangeId(), ""because it depends on change""); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getId()).isEqualTo(oldHead.getId()); }",4fb84c7ffde45791e3c1d457f1e1a44507f5c61a,submitTwoChangesWithFastForward_missingDependency(),submitTwoChangesWithFastForward_missingDependency(),4,1,"@org.junit.Test public void submitTwoChangesWithFastForward_missingDependency() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change1 = createChange(); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange(); com.google.gerrit.reviewdb.client.Change.Id id1 = change1.getPatchSetId().getParentKey(); submitWithConflict(change2.getChangeId(), ((((""The change could not be submitted because it depends on change(s) ["" + id1) + ""], which could not be submitted because:\n"") + id1) + "": needs Code-Review;"")); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getId()).isEqualTo(oldHead.getId()); }",e14b72af66aa5468f94a2cf83c87fcee9f10aa25,submitTwoChangesWithFastForward_missingDependency(),68357,118,202
105472,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_ChangeApiImpl.java,12.0,"@java.lang.Override public void abandon(com.google.gerrit.extensions.api.changes.AbandonInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { abandon.apply(change, in); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.update.UpdateException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot abandon change"", e); } }",fd29de211ecd6552f811f7e808b6b7b9feae07b0,"@java.lang.Override public void abandon(com.google.gerrit.extensions.api.changes.AbandonInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { abandon.apply(change, in); } catch (java.lang.Exception e) { com.google.gerrit.server.api.changes.ChangeApiImpl.throwRestApiException(""Cannot abandon change"", e); } }",7ad1790ad27d7e8c1b22ff7ad584dfd5a773973f,abandon(com.google.gerrit.extensions.api.changes.AbandonInput),abandon(com.google.gerrit.extensions.api.changes.AbandonInput),6,12,"@java.lang.Override public void abandon(com.google.gerrit.extensions.api.changes.AbandonInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { abandon.apply(change, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot abandon change"", e); } }",1e6a125df3d074cc1958d237b10504d467116511,abandon(com.google.gerrit.extensions.api.changes.AbandonInput),18800,97,94
152294,java_com_google_gerrit_server_project_ChangeControl.java,3.0,private boolean canEditTopicName() { if (getChange().getStatus().isOpen()) { return ((((isOwner()) || (refControl.isOwner())) || (getProjectControl().isOwner())) || (refControl.canEditTopicName())) || (getProjectControl().isAdmin()); } return refControl.canForceEditTopicName(); },471302166ddc0f565b984b99ca4c6580a4ac4103,private boolean canEditTopicName() { if (getChange().getStatus().isOpen()) { return ((((isOwner()) || (refControl.isOwner())) || (getProjectControl().isOwner())) || (refControl.canPerform(Permission.EDIT_TOPIC_NAME))) || (getProjectControl().isAdmin()); } return refControl.canPerform(Permission.EDIT_TOPIC_NAME); },22f38808bcf2948ded67b84648778de699877ae9,canEditTopicName(),canEditTopicName(),5,3,private boolean canEditTopicName() { if (getChange().getStatus().isOpen()) { return ((((isOwner()) || (refControl.isOwner())) || (getProjectControl().isOwner())) || (refControl.canPerform(Permission.EDIT_TOPIC_NAME))) || (getProjectControl().isAdmin()); } return refControl.canForceEditTopicName(); },6a035b080a5cf8d02c6eacfa487d5f9551937c5f,canEditTopicName(),96997,81,76
40341,gerrit-server_src_main_java_com_google_gerrit_server_git_VersionedMetaData.java,21.0,"@java.lang.Override public org.eclipse.jgit.revwalk.RevCommit createRef(java.lang.String refName) throws java.io.IOException { if (com.google.common.base.Objects.equal(src, revision)) { return revision; } org.eclipse.jgit.lib.RefUpdate ru = db.updateRef(refName); ru.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); ru.setNewObjectId(src); ru.disableRefLog(); inserter.flush(); org.eclipse.jgit.lib.RefUpdate.Result result = ru.update(); switch (result) { case NEW : revision = rw.parseCommit(ru.getNewObjectId()); update.replicate(ru); return revision; default : throw new java.io.IOException((((((""Cannot update "" + (ru.getName())) + "" in "") + (db.getDirectory())) + "": "") + (ru.getResult()))); } }",f842d22af21b9c551bed25b9d1f3e4a75f7ee845,"@java.lang.Override public org.eclipse.jgit.revwalk.RevCommit createRef(java.lang.String refName) throws java.io.IOException { if (com.google.common.base.Objects.equal(src, revision)) { return revision; } org.eclipse.jgit.lib.RefUpdate ru = db.updateRef(refName); ru.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); ru.setNewObjectId(src); ru.disableRefLog(); inserter.flush(); org.eclipse.jgit.lib.RefUpdate.Result result = ru.update(); switch (result) { case NEW : revision = rw.parseCommit(ru.getNewObjectId()); update.fireRefUpdatedEvent(ru); return revision; default : throw new java.io.IOException((((((""Cannot update "" + (ru.getName())) + "" in "") + (db.getDirectory())) + "": "") + (ru.getResult()))); } }",79e491f834b8a247773db46d94803c5081bf67a1,createRef(java.lang.String),createRef(java.lang.String),7,21,"@java.lang.Override public org.eclipse.jgit.revwalk.RevCommit createRef(java.lang.String refName) throws java.io.IOException { if (com.google.common.base.Objects.equal(src, revision)) { return revision; } org.eclipse.jgit.lib.RefUpdate ru = db.updateRef(refName); ru.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); ru.setNewObjectId(src); ru.disableRefLog(); inserter.flush(); org.eclipse.jgit.lib.RefUpdate.Result result = ru.update(); switch (result) { case NEW : revision = rw.parseCommit(ru.getNewObjectId()); update.fireGitRefUpdatedEvent(ru); return revision; default : throw new java.io.IOException((((((""Cannot update "" + (ru.getName())) + "" in "") + (db.getDirectory())) + "": "") + (ru.getResult()))); } }",685dafc4d8394520d9c55b0249dc1db68c725158,createRef(java.lang.String),121584,225,226
57930,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_FileApiImpl.java,,,,"@java.lang.Override public java.lang.String content() throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.BinaryResult bin = getContent.apply(file); java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream(); bin.writeTo(os); return new java.lang.String(os.toByteArray(), com.google.common.base.Charsets.UTF_8); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot retrieve file content"", e); } }",91d90ad004e007ba73811f9bac9655156982b80d,,content(),16,0,"@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult content() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getContent.apply(file); } catch (com.google.gerrit.server.project.NoSuchChangeException | java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot retrieve file content"", e); } }",2b68ff7320a42d79e77818fb77979b2ba5d51ccc,content(),127480,139,114
106431,src_main_java_com_googlesource_gerrit_plugins_automerger_DownstreamCreator.java,14.0,"public void createMergesAndHandleConflicts(com.googlesource.gerrit.plugins.automerger.MultipleDownstreamMergeInput mdsMergeInput) throws com.google.gerrit.extensions.restapi.RestApiException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.extensions.api.changes.ReviewInput reviewInput = new com.google.gerrit.extensions.api.changes.ReviewInput(); java.util.Map<java.lang.String, java.lang.Short> labels = new java.util.HashMap<java.lang.String, java.lang.Short>(); short vote = 0; try { createDownstreamMerges(mdsMergeInput); reviewInput.message = (""Automerging to "" + (com.google.common.base.Joiner.on("", "").join(mdsMergeInput.dsBranchMap.keySet()))) + "" succeeded!""; reviewInput.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.NONE; } catch (com.googlesource.gerrit.plugins.automerger.FailedMergeException e) { reviewInput.message = e.getDisplayString(); reviewInput.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; vote = config.getMinAutomergeVote(); } labels.put(config.getAutomergeLabel(), vote); reviewInput.labels = labels; gApi.changes().id(mdsMergeInput.sourceId).revision(mdsMergeInput.currentRevision).review(reviewInput); }",f46aedd245f9d1c86f27a2fb7ccb4ee0340521a9,"public void createMergesAndHandleConflicts(com.googlesource.gerrit.plugins.automerger.MultipleDownstreamMergeInput mdsMergeInput) throws com.google.gerrit.extensions.restapi.RestApiException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.extensions.api.changes.ReviewInput reviewInput = new com.google.gerrit.extensions.api.changes.ReviewInput(); java.util.Map<java.lang.String, java.lang.Short> labels = new java.util.HashMap<java.lang.String, java.lang.Short>(); try { createDownstreamMerges(mdsMergeInput); reviewInput.message = (""Automerging to "" + (com.google.common.base.Joiner.on("", "").join(mdsMergeInput.dsBranchMap.keySet()))) + "" succeeded!""; reviewInput.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.NONE; } catch (com.googlesource.gerrit.plugins.automerger.FailedMergeException e) { reviewInput.message = e.getDisplayString(); reviewInput.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; labels.put(config.getAutomergeLabel(), config.getMinAutomergeVote()); } reviewInput.labels = labels; gApi.changes().id(mdsMergeInput.sourceId).revision(mdsMergeInput.currentRevision).review(reviewInput); }",404b424cd9cdc5d59b21028eddaf6dbdc82fe21a,createMergesAndHandleConflicts(com.googlesource.gerrit.plugins.automerger.MultipleDownstreamMergeInput),createMergesAndHandleConflicts(com.googlesource.gerrit.plugins.automerger.MultipleDownstreamMergeInput),5,14,"public void createMergesAndHandleConflicts(com.googlesource.gerrit.plugins.automerger.MultipleDownstreamMergeInput mdsMergeInput) throws com.google.gerrit.extensions.restapi.RestApiException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.extensions.api.changes.ReviewInput reviewInput = new com.google.gerrit.extensions.api.changes.ReviewInput(); java.util.Map<java.lang.String, java.lang.Short> labels = new java.util.HashMap<java.lang.String, java.lang.Short>(); try { createDownstreamMerges(mdsMergeInput); reviewInput.message = (""Automerging to "" + (com.google.common.base.Joiner.on("", "").join(mdsMergeInput.dsBranchMap.keySet()))) + "" succeeded!""; reviewInput.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.NONE; } catch (com.googlesource.gerrit.plugins.automerger.FailedMergeException e) { reviewInput.message = e.getDisplayString(); reviewInput.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; reviewInput.tag = com.googlesource.gerrit.plugins.automerger.DownstreamCreator.MERGE_CONFLICT_TAG; labels.put(config.getAutomergeLabel(), config.getMinAutomergeVote()); } reviewInput.labels = labels; gApi.changes().id(mdsMergeInput.sourceId).revision(mdsMergeInput.currentRevision).review(reviewInput); }",ba71e95f889e9efdd2f1a6bb1744659133fe05f7,createMergesAndHandleConflicts(com.googlesource.gerrit.plugins.automerger.MultipleDownstreamMergeInput),87287,339,368
41760,gerrit-server_src_main_java_com_google_gerrit_server_group_IncludedGroupResource.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.google.gerrit.server.group.GroupResource getParentGroup() { return parentGroup; },15d297be0b4232b8b80db0152809c41475a60ff7,,getParentGroup(),4,1,public AccountGroup.UUID getMember() { return getMemberDescription().getGroupUUID(); },034710611bdf0fc788323a9ee1db95c75005120e,getMember(),41202,23,18
98216,gerrit-server_src_main_java_com_google_gerrit_server_project_ProjectControl.java,0.0,"private boolean can(com.google.gerrit.server.permissions.ProjectPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isReadable(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",56f947c003ec53d92c12de2299b2435c69eb0dcf,"private boolean can(com.google.gerrit.server.permissions.ProjectPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case ACCESS : return (isReadable()) || (isOwner()); case READ : return (allRefsAreVisible()) || (isOwner()); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",fc5b17555f4c9ba2eb6d4c3f97e4d683895f97fc,can(com.google.gerrit.server.permissions.ProjectPermission),can(com.google.gerrit.server.permissions.ProjectPermission),8,0,"private boolean can(com.google.gerrit.server.permissions.ProjectPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case ACCESS : return ((!(isHidden())) && (isReadable())) || (isOwner()); case READ : return ((!(isHidden())) && (allRefsAreVisible())) || (isOwner()); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",804bf0645a91e8937787fdfc46a57e3d656748c1,can(com.google.gerrit.server.permissions.ProjectPermission),130710,96,108
61573,gerrit-server_src_test_java_com_google_gerrit_server_query_change_AbstractQueryChangesTest.java,21.0,"protected void assertResultEquals(java.lang.String message, com.google.gerrit.reviewdb.client.Change expected, com.google.gerrit.server.change.ChangeJson.ChangeInfo actual) { assertEquals(message, expected.getId().get(), actual._number); }",dfe4cdf975f78e434844ab1a48b92a18304ce3e8,"protected void assertResultEquals(java.lang.String message, com.google.gerrit.reviewdb.client.Change expected, com.google.gerrit.server.change.ChangeJson.ChangeInfo actual) { assert_().withFailureMessage(message).that(actual._number).isEqualTo(expected.getId().get()); }",564ec78eef6d0f6c84bc193adbb1fe84b7085e58,"assertResultEquals(java.lang.String,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.server.change.ChangeJson.ChangeInfo)","assertResultEquals(java.lang.String,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.server.change.ChangeJson.ChangeInfo)",15,33,"protected void assertResultEquals(java.lang.String message, com.google.gerrit.reviewdb.client.Change expected, com.google.gerrit.extensions.common.ChangeInfo actual) { assert_().withFailureMessage(message).that(actual._number).isEqualTo(expected.getId().get()); }",554a947f1c30d3af5a4e94dc1fcd7cf44419d77e,"assertResultEquals(java.lang.String,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.extensions.common.ChangeInfo)",77444,73,70
70822,gerrit-server_src_main_java_com_google_gerrit_server_api_projects_ProjectApiImpl.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> listTags() throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.project.ListTags list = listTagsProvider.get(); try { return list.apply(checkExists()); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot list tags"", e); } }",4bb7d92c8f39061e67f957c21a62f01a6b2db3e7,,listTags(),6,12,"private java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> listTags() throws com.google.gerrit.extensions.restapi.RestApiException { try { return listTags.apply(checkExists()); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot list tags"", e); } }",82a8eaaab22c38b43d18ef4457b8d5675fa0b0be,listTags(),73968,109,89
38570,gerrit-server_src_main_java_com_google_gerrit_server_auth_ldap_LdapModule.java,0.0,"@java.lang.Override protected void configure() { cache(com.google.gerrit.server.auth.ldap.LdapModule.GROUP_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).expireAfterWrite(1, java.util.concurrent.TimeUnit.HOURS).loader(LdapRealm.MemberLoader.class); cache(com.google.gerrit.server.auth.ldap.LdapModule.USERNAME_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<com.google.common.base.Optional<com.google.gerrit.reviewdb.client.Account.Id>>() {}).loader(LdapRealm.UserLoader.class); cache(com.google.gerrit.server.auth.ldap.LdapModule.GROUP_EXIST_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<java.lang.Boolean>() {}).expireAfterWrite(1, java.util.concurrent.TimeUnit.HOURS).loader(LdapRealm.ExistenceLoader.class); bind(com.google.gerrit.server.account.Realm.class).to(com.google.gerrit.server.auth.ldap.LdapRealm.class).in(Scopes.SINGLETON); bind(com.google.gerrit.server.auth.ldap.Helper.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.account.GroupBackend.class).to(com.google.gerrit.server.auth.ldap.LdapGroupBackend.class); }",22a8c768e9082c55958d2d33e23c09bae01ffd71,"@java.lang.Override protected void configure() { cache(com.google.gerrit.server.auth.ldap.LdapModule.GROUP_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).expireAfterWrite(1, java.util.concurrent.TimeUnit.HOURS).loader(LdapRealm.MemberLoader.class); cache(com.google.gerrit.server.auth.ldap.LdapModule.USERNAME_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<com.google.common.base.Optional<com.google.gerrit.reviewdb.client.Account.Id>>() {}).loader(LdapRealm.UserLoader.class); cache(com.google.gerrit.server.auth.ldap.LdapModule.GROUP_EXIST_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<java.lang.Boolean>() {}).expireAfterWrite(1, java.util.concurrent.TimeUnit.HOURS).loader(LdapRealm.ExistenceLoader.class); cache(com.google.gerrit.server.auth.ldap.LdapModule.GROUPS_BY_INCLUDED, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Set<java.lang.String>>() {}).expireAfterWrite(1, java.util.concurrent.TimeUnit.HOURS); bind(com.google.gerrit.server.account.Realm.class).to(com.google.gerrit.server.auth.ldap.LdapRealm.class).in(Scopes.SINGLETON); bind(com.google.gerrit.server.auth.ldap.Helper.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.account.GroupBackend.class).to(com.google.gerrit.server.auth.ldap.LdapGroupBackend.class); }",d386e7569f543c7ecb03190c431d3bc746d4cda1,configure(),configure(),2,0,"@java.lang.Override protected void configure() { cache(com.google.gerrit.server.auth.ldap.LdapModule.GROUP_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).expireAfterWrite(1, java.util.concurrent.TimeUnit.HOURS).loader(LdapRealm.MemberLoader.class); cache(com.google.gerrit.server.auth.ldap.LdapModule.USERNAME_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<com.google.common.base.Optional<com.google.gerrit.reviewdb.client.Account.Id>>() {}).loader(LdapRealm.UserLoader.class); cache(com.google.gerrit.server.auth.ldap.LdapModule.GROUP_EXIST_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<java.lang.Boolean>() {}).expireAfterWrite(1, java.util.concurrent.TimeUnit.HOURS).loader(LdapRealm.ExistenceLoader.class); cache(com.google.gerrit.server.auth.ldap.LdapModule.GROUPS_BYINCLUDE_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<com.google.common.collect.ImmutableSet<java.lang.String>>() {}).expireAfterWrite(1, java.util.concurrent.TimeUnit.HOURS); bind(com.google.gerrit.server.account.Realm.class).to(com.google.gerrit.server.auth.ldap.LdapRealm.class).in(Scopes.SINGLETON); bind(com.google.gerrit.server.auth.ldap.Helper.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.account.GroupBackend.class).to(com.google.gerrit.server.auth.ldap.LdapGroupBackend.class); }",e93db35c72e20da5c83dab16a1a587157971d309,configure(),65425,433,438
73992,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeInserter.java,14.0,"@java.lang.Override public com.google.gerrit.reviewdb.client.Change createChange(com.google.gerrit.server.git.BatchUpdate.Context ctx) throws java.io.IOException { change = new com.google.gerrit.reviewdb.client.Change(com.google.gerrit.server.change.ChangeInserter.getChangeKey(commit), changeId, ctx.getUser().getAccountId(), new com.google.gerrit.reviewdb.client.Branch.NameKey(ctx.getProject(), refName), ctx.getWhen()); change.setStatus(com.google.common.base.MoreObjects.firstNonNull(status, Change.Status.NEW)); change.setTopic(topic); patchSet.setCreatedOn(ctx.getWhen()); patchSet.setUploader(ctx.getUser().getAccountId()); return change; }",a69cfab4255a7b1a1f8d94deec2835144054728c,"@java.lang.Override public com.google.gerrit.reviewdb.client.Change createChange(com.google.gerrit.server.git.BatchUpdate.Context ctx) { try { change = new com.google.gerrit.reviewdb.client.Change(com.google.gerrit.server.change.ChangeInserter.getChangeKey(commit), changeId, ctx.getUser().getAccountId(), new com.google.gerrit.reviewdb.client.Branch.NameKey(ctx.getProject(), refName), ctx.getWhen()); change.setStatus(com.google.common.base.MoreObjects.firstNonNull(status, Change.Status.NEW)); change.setTopic(topic); patchSet.setCreatedOn(ctx.getWhen()); patchSet.setUploader(ctx.getUser().getAccountId()); return change; } catch (java.io.IOException e) { throw new java.lang.IllegalStateException(e); } }",023a615011c66206db43c5ac5b6f03d602950d45,createChange(com.google.gerrit.server.git.BatchUpdate.Context),createChange(com.google.gerrit.server.git.BatchUpdate.Context),2,14,"@java.lang.Override public com.google.gerrit.reviewdb.client.Change createChange(com.google.gerrit.server.git.BatchUpdate.Context ctx) { change = new com.google.gerrit.reviewdb.client.Change(com.google.gerrit.server.change.ChangeInserter.getChangeKey(commit), changeId, ctx.getUser().getAccountId(), new com.google.gerrit.reviewdb.client.Branch.NameKey(ctx.getProject(), refName), ctx.getWhen()); change.setStatus(com.google.common.base.MoreObjects.firstNonNull(status, Change.Status.NEW)); change.setTopic(topic); patchSet.setCreatedOn(ctx.getWhen()); patchSet.setUploader(ctx.getUser().getAccountId()); return change; }",5b118cb84fd3767a512634d00838fb6f7d629d08,createChange(com.google.gerrit.server.git.BatchUpdate.Context),9277,207,182
71131,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_client_Change.java,25.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setChangeSet(java.lang.String cs) { this.changeSet = cs; },ed9bb720bea62f0db84623145dff2097141f24b1,,setChangeSet(java.lang.String),7,19,public void setSubmissionId(java.lang.String id) { this.submissionId = id; },ab0f05b79d02bd43f886839295198af813ce3175,setSubmissionId(java.lang.String),57214,20,23
85338,gerrit-server_src_main_java_com_google_gerrit_server_git_ProjectConfig.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean hasLegacyPermissions() { return hasLagacyPermissions; },eabe762c26eafe494853cdfcb2a4860a5e63c35d,,hasLegacyPermissions(),9,47,public boolean hasLegacyPermissions() { return hasLegacyPermissions; },36ea7152bf30144117300e61dcfe08ff9eb04ea2,hasLegacyPermissions(),124572,15,13
74586,gerrit-server_src_main_java_com_google_gerrit_server_ChangeFinder.java,,,,"public java.util.List<com.google.gerrit.server.project.ChangeControl> findChanges(com.google.gerrit.reviewdb.client.Change.Id id, com.google.gerrit.server.CurrentUser user) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.InternalChangeQuery query = queryProvider.get().setRequestedFields(com.google.common.collect.ImmutableSet.<java.lang.String>of()); return asChangeControls(query.byLegacyChangeId(id), user); }",4cf10f1cf959077868265b2cab219ca609b299a5,,"findChanges(com.google.gerrit.reviewdb.client.Change$Id,com.google.gerrit.server.CurrentUser)",2,0,"public java.util.List<com.google.gerrit.server.project.ChangeControl> find(com.google.gerrit.reviewdb.client.Change.Id id, com.google.gerrit.server.CurrentUser user) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.InternalChangeQuery query = queryProvider.get().setRequestedFields(com.google.common.collect.ImmutableSet.<java.lang.String>of()); return asChangeControls(query.byLegacyChangeId(id), user); }",bfc1aea2bb024d5cdab26bf92a92d2104441246e,"find(com.google.gerrit.reviewdb.client.Change$Id,com.google.gerrit.server.CurrentUser)",209018,132,131
44362,gerrit-server_src_main_java_com_google_gerrit_server_project_GetConfig.java,,,,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.project.ProjectResource resource) { com.google.gerrit.server.project.GetConfig.ConfigInfo result = new com.google.gerrit.server.project.GetConfig.ConfigInfo(); com.google.gerrit.server.project.RefControl refConfig = resource.getControl().controlForRef(GitRepositoryManager.REF_CONFIG); if (refConfig.isVisible()) { com.google.gerrit.server.project.ProjectState project = resource.getControl().getProjectState(); if (want(""usecontributoragreements"")) { result.useContributorAgreements = project.isUseContributorAgreements(); } if (want(""usecontentmerge"")) { result.useContentMerge = project.isUseContentMerge(); } if (want(""usesignedoffby"")) { result.useSignedOffBy = project.isUseSignedOffBy(); } if (want(""requirechangeid"")) { result.requireChangeID = project.isRequireChangeID(); } } return result; }",a4112b7d759bd7050c7ff00b01e9095ed1411e97,,apply(com.google.gerrit.server.project.ProjectResource),9,0,@java.lang.Override public com.google.gerrit.server.project.GetConfig.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource resource) { com.google.gerrit.server.project.GetConfig.ConfigInfo result = new com.google.gerrit.server.project.GetConfig.ConfigInfo(); com.google.gerrit.server.project.RefControl refConfig = resource.getControl().controlForRef(GitRepositoryManager.REF_CONFIG); com.google.gerrit.server.project.ProjectState project = resource.getControl().getProjectState(); if (refConfig.isVisible()) { result.useContributorAgreements = project.isUseContributorAgreements(); result.useContentMerge = project.isUseContentMerge(); result.useSignedOffBy = project.isUseSignedOffBy(); result.requireChangeId = project.isRequireChangeID(); } return result; },cb9a06cc9aaff00cbc2a1b82249e03368d3e1a3b,apply(com.google.gerrit.server.project.ProjectResource),208165,228,197
72006,gerrit-gwtui-common_src_main_java_com_google_gerrit_client_info_AccountPreferencesInfo.java,21.0,public final void timeFormat(com.google.gerrit.reviewdb.client.AccountGeneralPreferences.TimeFormat f) { timeFormatRaw((f != null ? f.toString() : null)); },09b04c40a56b3c03aa967f3bdc54dd7b26b9f9a9,public final void timeFormat(com.google.gerrit.extensions.client.AccountGeneralPreferencesInfo.TimeFormat f) { timeFormatRaw((f != null ? f.toString() : null)); },b8fab4a13e1a641ce114cc917e6898ffaa37e4c0,timeFormat(com.google.gerrit.reviewdb.client.AccountGeneralPreferences.TimeFormat),timeFormat(com.google.gerrit.extensions.client.AccountGeneralPreferencesInfo.TimeFormat),14,51,public final void timeFormat(com.google.gerrit.extensions.client.GeneralPreferencesInfo.TimeFormat f) { timeFormatRaw((f != null ? f.toString() : null)); },2723fcab600b0a0ea487ebb6bf249f7bb650f486,timeFormat(com.google.gerrit.extensions.client.GeneralPreferencesInfo.TimeFormat),178238,45,44
41100,gerrit-sshd_src_main_java_com_google_gerrit_sshd_DispatchCommand.java,0.0,"@java.lang.Override protected java.lang.String usage() { final java.lang.StringBuilder usage = new java.lang.StringBuilder(); usage.append(""Available commands""); if (!(getName().isEmpty())) { usage.append("" of ""); usage.append(getName()); } usage.append("" are:\n""); usage.append(""\n""); for (java.lang.String name : com.google.common.collect.Sets.newTreeSet(commands.keySet())) { usage.append("" ""); usage.append(name); usage.append(""\n""); } usage.append(""\n""); usage.append(""See '""); if ((getName().indexOf(' ')) < 0) { usage.append(getName()); usage.append(' '); } usage.append(""COMMAND --help\' for more information.\n""); usage.append(""\n""); return usage.toString(); }",77e072e188e684912f89f1120127048f4e3814a8,"@java.lang.Override protected java.lang.String usage() { final java.lang.StringBuilder usage = new java.lang.StringBuilder(); usage.append(""Available commands""); if (!(getName().isEmpty())) { usage.append("" of ""); usage.append(getName()); } usage.append("" are:\n""); usage.append(""\n""); int maxLength = -1; for (java.lang.String name : commands.keySet()) { maxLength = java.lang.Math.max(maxLength, name.length()); } java.lang.String format = (""%-"" + maxLength) + ""s %s""; for (java.lang.String name : com.google.common.collect.Sets.newTreeSet(commands.keySet())) { final org.apache.sshd.server.Command cmd = commands.get(name).get(); usage.append("" ""); if (cmd instanceof com.google.gerrit.sshd.BaseCommand) { com.google.gerrit.sshd.BaseCommand bc = ((com.google.gerrit.sshd.BaseCommand) (cmd)); java.lang.String descr = bc.getDescription(); if (name.equals(""plugin"")) { descr = ""Install, reload, remove and list plugins""; } usage.append(java.lang.String.format(format, name, descr)); } else { usage.append(name); } usage.append(""\n""); } usage.append(""\n""); usage.append(""See '""); if ((getName().indexOf(' ')) < 0) { usage.append(getName()); usage.append(' '); } usage.append(""COMMAND --help\' for more information.\n""); usage.append(""\n""); return usage.toString(); }",95b64f402319d090c28d7ce3635fbd74d8f440dc,usage(),usage(),4,0,"@java.lang.Override protected java.lang.String usage() { final java.lang.StringBuilder usage = new java.lang.StringBuilder(); usage.append(""Available commands""); if (!(getName().isEmpty())) { usage.append("" of ""); usage.append(getName()); } usage.append("" are:\n""); usage.append(""\n""); int maxLength = -1; for (java.lang.String name : commands.keySet()) { maxLength = java.lang.Math.max(maxLength, name.length()); } java.lang.String format = (""%-"" + maxLength) + ""s %s""; for (java.lang.String name : com.google.common.collect.Sets.newTreeSet(commands.keySet())) { final com.google.gerrit.sshd.CommandProvider p = commands.get(name); usage.append("" ""); usage.append(java.lang.String.format(format, name, com.google.common.base.Strings.nullToEmpty(p.getDescription()))); usage.append(""\n""); } usage.append(""\n""); usage.append(""See '""); if ((getName().indexOf(' ')) < 0) { usage.append(getName()); usage.append(' '); } usage.append(""COMMAND --help\' for more information.\n""); usage.append(""\n""); return usage.toString(); }",bf6c38a6c8bfe1123a70597ece25ce075a1d6df7,usage(),142596,375,294
17441,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectInfoScreen.java,10.0,void display(final com.google.gerrit.common.data.ProjectDetail result) { project = result.project; final boolean isall = com.google.gerrit.client.Gerrit.getConfig().getWildProject().equals(project.getNameKey()); projectOptionsPanel.setVisible((!isall)); agreementsPanel.setVisible((!isall)); useContributorAgreements.setVisible(com.google.gerrit.client.Gerrit.getConfig().isUseContributorAgreements()); descTxt.setText(project.getDescription()); useContributorAgreements.setValue(project.isUseContributorAgreements()); useSignedOffBy.setValue(project.isUseSignedOffBy()); requireChangeID.setValue(project.isRequireChangeID()); setSubmitType(project.getSubmitType()); },1a8bfb649ea79b3b3f9ceebf09d81e8cfee218bd,void display(final com.google.gerrit.common.data.ProjectDetail result) { project = result.project; final boolean isall = com.google.gerrit.client.Gerrit.getConfig().getWildProject().equals(project.getNameKey()); projectOptionsPanel.setVisible((!isall)); agreementsPanel.setVisible((!isall)); useContributorAgreements.setVisible(com.google.gerrit.client.Gerrit.getConfig().isUseContributorAgreements()); descTxt.setText(project.getDescription()); useContributorAgreements.setValue(project.isUseContributorAgreements()); useSignedOffBy.setValue(project.isUseSignedOffBy()); useContentMerge.setValue(project.isUseContentMerge()); requireChangeID.setValue(project.isRequireChangeID()); setSubmitType(project.getSubmitType()); },75a0651eb5c5da14f06d1f2552c09bfc3f57cc8b,display(com.google.gerrit.common.data.ProjectDetail),display(com.google.gerrit.common.data.ProjectDetail),3,8,void display(final com.google.gerrit.common.data.ProjectDetail result) { project = result.project; final boolean isall = com.google.gerrit.client.Gerrit.getConfig().getWildProject().equals(project.getNameKey()); projectOptionsPanel.setVisible((!isall)); agreementsPanel.setVisible((!isall)); useContributorAgreements.setVisible(com.google.gerrit.client.Gerrit.getConfig().isUseContributorAgreements()); descTxt.setText(project.getDescription()); useContributorAgreements.setValue(project.isUseContributorAgreements()); useSignedOffBy.setValue(project.isUseSignedOffBy()); useContentMerge.setValue(project.isUseContentMerge()); requireChangeID.setValue(project.isRequireChangeID()); setSubmitType(project.getSubmitType()); saveProject.setEnabled(false); },f12540e196557f35725bfc9e64f555657221c21b,display(com.google.gerrit.common.data.ProjectDetail),62484,177,184
16294,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_ReviewDb.java,5.0,@com.google.gwtorm.client.Relation com.google.gerrit.reviewdb.ProjectAccess projects();,f9536b65fd347bb09be6af92bc862339c204715e,@com.google.gwtorm.client.Relation(id = 18) com.google.gerrit.reviewdb.ProjectAccess projects();,72f2372b7bd38409f8b1bfc6928502057c51b7f9,projects(),projects(),2,5,@com.google.gwtorm.client.Relation(id = 19) com.google.gerrit.reviewdb.ProjectAccess projects();,e0bfaa34fb9940e17cd5be2c836ddfaea17105a3,projects(),97500,31,31
74211,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeUpdate.java,4.0,public void setSubject(java.lang.String subject) { this.subject = subject; },6e0f7396a3bd2be9f98f8b04349005d9344069f3,@com.google.common.annotations.VisibleForTesting void setSubject(java.lang.String subject) { this.subject = subject; },d30c134d62e2eaf1971aaf8c8d92cc05c7029388,setSubject(java.lang.String),setSubject(java.lang.String),10,4,void setSubject(java.lang.String subject) { this.subject = subject; },96eb67aa68b408bbc6202761efdaaae31dd9c2d4,setSubject(java.lang.String),96366,30,19
15940,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeQueryRewriter.java,69.0,"@com.google.gerrit.server.query.change.Rewrite(""status:abandoned S=(sortkey_after:*) L=(limit:*)"") public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> r20_byAbandonedPrev(@com.google.inject.name.Named(""S"") final com.google.gerrit.server.query.change.SortKeyPredicate.After s, @com.google.inject.name.Named(""L"") final com.google.gerrit.server.query.IntPredicate<com.google.gerrit.server.query.change.ChangeData> l) { return new com.google.gerrit.server.query.change.ChangeQueryRewriter.PaginatedSource(50000, s.getValue(), l.intValue()) { @java.lang.Override com.google.gwtorm.client.ResultSet<com.google.gerrit.reviewdb.Change> scan(com.google.gerrit.reviewdb.ChangeAccess a, java.lang.String key, int limit) throws com.google.gwtorm.client.OrmException { return a.allClosedPrev(Change.Status.ABANDONED.getCode(), key, limit); } @java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.client.OrmException { return ((cd.change(dbProvider).getStatus()) == (Change.Status.ABANDONED)) && (s.match(cd)); } }; }",35426783ea832b57048a6b61c623657638ce6dae,"@com.google.gerrit.server.query.change.Rewrite(""status:abandoned S=(sortkey_after:*) L=(limit:*)"") public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> r20_byAbandonedPrev(@com.google.inject.name.Named(""S"") final com.google.gerrit.server.query.change.SortKeyPredicate.After s, @com.google.inject.name.Named(""L"") final com.google.gerrit.server.query.IntPredicate<com.google.gerrit.server.query.change.ChangeData> l) { return new com.google.gerrit.server.query.change.ChangeQueryRewriter.PaginatedSource(50000, s, l.intValue()) { @java.lang.Override com.google.gwtorm.client.ResultSet<com.google.gerrit.reviewdb.Change> scan(com.google.gerrit.reviewdb.ChangeAccess a, java.lang.String key, int limit) throws com.google.gwtorm.client.OrmException { return a.allClosedPrev(Change.Status.ABANDONED.getCode(), key, limit); } @java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.client.OrmException { return ((cd.change(dbProvider).getStatus()) == (Change.Status.ABANDONED)) && (s.match(cd)); } }; }",a77cbc1267bece000b27f7a5a91b0a9bf6bdb024,"r20_byAbandonedPrev(com.google.gerrit.server.query.change.SortKeyPredicate$After,com.google.gerrit.server.query.IntPredicate)","r20_byAbandonedPrev(com.google.gerrit.server.query.change.SortKeyPredicate$After,com.google.gerrit.server.query.IntPredicate)",3,69,"@java.lang.SuppressWarnings(""unchecked"") @com.google.gerrit.server.query.change.Rewrite(""status:abandoned S=(sortkey_after:*) L=(limit:*)"") public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> r20_byAbandonedPrev(@com.google.inject.name.Named(""S"") final com.google.gerrit.server.query.change.SortKeyPredicate.After s, @com.google.inject.name.Named(""L"") final com.google.gerrit.server.query.IntPredicate<com.google.gerrit.server.query.change.ChangeData> l) { return new com.google.gerrit.server.query.change.ChangeQueryRewriter.PaginatedSource(50000, s, l.intValue()) { { init(""r20_byAbandonedPrev"", s, l); } @java.lang.Override com.google.gwtorm.client.ResultSet<com.google.gerrit.reviewdb.Change> scan(com.google.gerrit.reviewdb.ChangeAccess a, java.lang.String key, int limit) throws com.google.gwtorm.client.OrmException { return a.allClosedPrev(Change.Status.ABANDONED.getCode(), key, limit); } @java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.client.OrmException { return ((cd.change(dbProvider).getStatus()) == (Change.Status.ABANDONED)) && (s.match(cd)); } }; }",27bd6ae699c8527d3be0b60d2530383ffe35403c,"r20_byAbandonedPrev(com.google.gerrit.server.query.change.SortKeyPredicate$After,com.google.gerrit.server.query.IntPredicate)",22133,361,389
50775,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_RelatedChanges.java,27.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeList result) { if ((result.length()) > 0) { getTab().setTitle(Resources.M.sameTopic(result.length())); getTab().setChanges(info.project(), revision, convertChangeList(result)); } }",fb8a174febc1113fe8126e24e96c02788d98fdb8,,onSuccess(com.google.gerrit.client.changes.ChangeList),9,4,"@java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeList result) { if ((result.length()) > 0) { getTab().setTitle(Resources.M.cherryPicks(result.length())); getTab().setChanges(info.project(), revision, convertChangeList(result)); } }",90fb968a02d7a5444fbc0b3cd80a16ff05277384,onSuccess(com.google.gerrit.client.changes.ChangeList),103078,74,76
103373,gerrit-server_src_main_java_com_google_gerrit_server_schema_JdbcAccountPatchReviewStore.java,,,,"private static javax.sql.DataSource createDataSource(java.lang.String url) { org.apache.commons.dbcp.BasicDataSource datasource = new org.apache.commons.dbcp.BasicDataSource(); if (url.contains(""postgresql"")) { datasource.setDriverClassName(""org.postgresql.Driver""); } else if (url.contains(""h2"")) { datasource.setDriverClassName(""org.h2.Driver""); } else if (url.contains(""mysql"")) { datasource.setDriverClassName(""com.mysql.jdbc.Driver""); } datasource.setUrl(url); datasource.setMaxActive(50); datasource.setMinIdle(4); datasource.setMaxIdle(16); long evictIdleTimeMs = 1000 * 60; datasource.setMinEvictableIdleTimeMillis(evictIdleTimeMs); datasource.setTimeBetweenEvictionRunsMillis((evictIdleTimeMs / 2)); return datasource; }",24b35e62ccdd32314b694812df03e0bedf029bb8,,createDataSource(java.lang.String),23,4,"protected static javax.sql.DataSource createDataSource(java.lang.String url) { org.apache.commons.dbcp.BasicDataSource datasource = new org.apache.commons.dbcp.BasicDataSource(); if (url.contains(""postgresql"")) { datasource.setDriverClassName(""org.postgresql.Driver""); } else if (url.contains(""h2"")) { datasource.setDriverClassName(""org.h2.Driver""); } else if (url.contains(""mysql"")) { datasource.setDriverClassName(""com.mysql.jdbc.Driver""); } datasource.setUrl(url); datasource.setMaxActive(50); datasource.setMinIdle(4); datasource.setMaxIdle(16); long evictIdleTimeMs = 1000 * 60; datasource.setMinEvictableIdleTimeMillis(evictIdleTimeMs); datasource.setTimeBetweenEvictionRunsMillis((evictIdleTimeMs / 2)); return datasource; }",7790123871b188a6b8a388171eca779d6739912f,createDataSource(java.lang.String),1976,169,169
52837,gerrit-gwtui_src_main_java_com_google_gerrit_client_Gerrit.java,8.0,"private static void populateBottomMenu(com.google.gwt.user.client.ui.RootPanel btmmenu, com.google.gerrit.common.data.HostPageData hpd) { java.lang.String vs = hpd.version; if ((vs == null) || (vs.isEmpty())) { vs = ""dev""; } btmmenu.add(new com.google.gwt.user.client.ui.InlineLabel(com.google.gerrit.client.Gerrit.C.keyHelp())); btmmenu.add(new com.google.gwt.user.client.ui.InlineLabel("" | "")); btmmenu.add(new com.google.gwt.user.client.ui.InlineHTML(com.google.gerrit.client.Gerrit.M.poweredBy(vs))); if ((com.google.gerrit.client.Gerrit.getConfig().getReportBugUrl()) != null) { com.google.gwt.user.client.ui.Anchor a = new com.google.gwt.user.client.ui.Anchor(com.google.gerrit.client.Gerrit.C.reportBug(), com.google.gerrit.client.Gerrit.getConfig().getReportBugUrl()); a.setTarget(""_blank""); a.setStyleName(""""); btmmenu.add(new com.google.gwt.user.client.ui.InlineLabel("" | "")); btmmenu.add(a); } }",f3918c91524fd0c3c9a122a9a24dc2c66c50ffde,"private static void populateBottomMenu(com.google.gwt.user.client.ui.RootPanel btmmenu, com.google.gerrit.common.data.HostPageData hpd) { java.lang.String vs = hpd.version; if ((vs == null) || (vs.isEmpty())) { vs = ""dev""; } btmmenu.add(new com.google.gwt.user.client.ui.InlineLabel(com.google.gerrit.client.Gerrit.C.keyHelp())); btmmenu.add(new com.google.gwt.user.client.ui.InlineLabel("" | "")); btmmenu.add(new com.google.gwt.user.client.ui.InlineHTML(com.google.gerrit.client.Gerrit.M.poweredBy(vs))); final java.lang.String reportBugUrl = com.google.gerrit.client.Gerrit.getConfig().getReportBugUrl(); final java.lang.String reportBugTitle = com.google.gerrit.client.Gerrit.getConfig().getReportBugText(); if (reportBugUrl != null) { com.google.gwt.user.client.ui.Anchor a = new com.google.gwt.user.client.ui.Anchor((reportBugTitle == null ? com.google.gerrit.client.Gerrit.C.reportBug() : reportBugTitle), reportBugUrl); a.setTarget(""_blank""); a.setStyleName(""""); btmmenu.add(new com.google.gwt.user.client.ui.InlineLabel("" | "")); btmmenu.add(a); } }",b79241cfe688fcfb090279a755c69acf465b6cff,"populateBottomMenu(com.google.gwt.user.client.ui.RootPanel,com.google.gerrit.common.data.HostPageData)","populateBottomMenu(com.google.gwt.user.client.ui.RootPanel,com.google.gerrit.common.data.HostPageData)",3,8,"private static void populateBottomMenu(com.google.gwt.user.client.ui.RootPanel btmmenu, com.google.gerrit.common.data.HostPageData hpd) { java.lang.String vs = hpd.version; if ((vs == null) || (vs.isEmpty())) { vs = ""dev""; } btmmenu.add(new com.google.gwt.user.client.ui.InlineLabel(com.google.gerrit.client.Gerrit.C.keyHelp())); btmmenu.add(new com.google.gwt.user.client.ui.InlineLabel("" | "")); btmmenu.add(new com.google.gwt.user.client.ui.InlineHTML(com.google.gerrit.client.Gerrit.M.poweredBy(vs))); final java.lang.String reportBugText = com.google.gerrit.client.Gerrit.getConfig().getReportBugText(); com.google.gwt.user.client.ui.Anchor a = new com.google.gwt.user.client.ui.Anchor((reportBugText == null ? com.google.gerrit.client.Gerrit.C.reportBug() : reportBugText), com.google.gerrit.client.Gerrit.getConfig().getReportBugUrl()); a.setTarget(""_blank""); a.setStyleName(""""); btmmenu.add(new com.google.gwt.user.client.ui.InlineLabel("" | "")); btmmenu.add(a); }",81e6b495e15345efc0c3eeb98d50791282ea8e0a,"populateBottomMenu(com.google.gwt.user.client.ui.RootPanel,com.google.gerrit.common.data.HostPageData)",58950,368,344
41610,gerrit-server_src_main_java_com_google_gerrit_server_group_PutGroup.java,,,,"@java.lang.Override public com.google.gerrit.server.group.GroupInfo apply(com.google.gerrit.extensions.restapi.TopLevelResource resource, com.google.gerrit.server.group.PutGroup.Input input) throws com.google.gerrit.common.errors.NameAlreadyUsedException, com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { final com.google.gerrit.server.IdentifiedUser me = ((com.google.gerrit.server.IdentifiedUser) (self.get())); if (!(me.getCapabilities().canCreateGroup())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Cannot create group""); } com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(id)); if (group != null) { return new com.google.gerrit.server.group.GroupInfo(com.google.gerrit.common.data.GroupDescriptions.forAccountGroup(group)); } try { group = performCreateGroupFactory.create().createGroup(id, null, visibleToAll, null, java.util.Collections.singleton(me.getAccountId()), null); } catch (com.google.gerrit.common.errors.PermissionDeniedException e) { throw new com.google.gerrit.extensions.restapi.AuthException(e.getMessage()); } return new com.google.gerrit.server.group.GroupInfo(com.google.gerrit.common.data.GroupDescriptions.forAccountGroup(group)); }",7ff780d3e3553cdf48ff5a2c49ba21a49f76d172,,"apply(com.google.gerrit.extensions.restapi.TopLevelResource,com.google.gerrit.server.group.PutGroup$Input)",2,1,"@java.lang.Override public com.google.gerrit.server.group.GroupInfo apply(com.google.gerrit.extensions.restapi.TopLevelResource resource, com.google.gerrit.server.group.CreateGroup.Input input) throws com.google.gerrit.common.errors.NameAlreadyUsedException, com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { final com.google.gerrit.server.IdentifiedUser me = ((com.google.gerrit.server.IdentifiedUser) (self.get())); if (!(me.getCapabilities().canCreateGroup())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Cannot create group""); } if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""group name missing""); } com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(input.name)); if (group != null) { return new com.google.gerrit.server.group.GroupInfo(com.google.gerrit.common.data.GroupDescriptions.forAccountGroup(group)); } try { group = performCreateGroupFactory.create().createGroup(input.name, null, visibleToAll, null, java.util.Collections.singleton(me.getAccountId()), null); } catch (com.google.gerrit.common.errors.PermissionDeniedException e) { throw new com.google.gerrit.extensions.restapi.AuthException(e.getMessage()); } return new com.google.gerrit.server.group.GroupInfo(com.google.gerrit.common.data.GroupDescriptions.forAccountGroup(group)); }",a698a6ac4363641926fcb861e1ef92712abcddc4,"apply(com.google.gerrit.extensions.restapi.TopLevelResource,com.google.gerrit.server.group.CreateGroup$Input)",182182,375,445
49603,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static void deleteDraftChange(int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.call(id, ""draft"").delete(cb); }",4e48611815692a038e713a58f60a13c43325b9ca,,"deleteDraftChange(int,com.google.gwt.user.client.rpc.AsyncCallback)",20,12,"public static void deleteChange(int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.change(id).delete(cb); }",b9afe20ea2d1ad64f854422b57e7a37c7702c050,"deleteChange(int,com.google.gwt.user.client.rpc.AsyncCallback)",173946,68,64
73441,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeOp.java,46.0,"private void checkSubmitRulesAndState(com.google.gerrit.server.git.ChangeSet cs) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { java.lang.StringBuilder msgbuf = new java.lang.StringBuilder(); java.util.List<com.google.gerrit.reviewdb.client.Change.Id> problemChanges = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.Change.Id id : cs.ids()) { try { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db, id); if ((cd.change().getStatus()) != (Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((((""Change "" + (cd.change().getChangeId())) + "" is in state "") + (cd.change().getStatus()))); } else { records.put(cd.change().getId(), com.google.gerrit.server.git.MergeOp.checkSubmitRule(cd)); } } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { msgbuf.append(((e.getMessage()) + ""\n"")); problemChanges.add(id); } } java.lang.String reason = msgbuf.toString(); if (!(reason.isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((((((""The change could not be "" + ""submitted because it depends on change(s) "") + (problemChanges.toString())) + "", which could not be submitted "") + ""because:\n"") + reason)); } }",21e3ea777592a2c5019f9acd6c1d1e36c65fcdc8,"private void checkSubmitRulesAndState(com.google.gerrit.server.git.ChangeSet cs) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { java.lang.StringBuilder msgbuf = new java.lang.StringBuilder(); java.util.List<com.google.gerrit.reviewdb.client.Change.Id> problemChanges = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.Change.Id id : cs.ids()) { try { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db, id); if ((cd.change().getStatus()) != (Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((((""Change "" + (cd.change().getChangeId())) + "" is in state "") + (cd.change().getStatus()))); } else { com.google.gerrit.server.git.MergeOp.checkSubmitRule(cd); } } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { msgbuf.append(((e.getMessage()) + ""\n"")); problemChanges.add(id); } } java.lang.String reason = msgbuf.toString(); if (!(reason.isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((((((""The change could not be "" + ""submitted because it depends on change(s) "") + (problemChanges.toString())) + "", which could not be submitted "") + ""because:\n"") + reason)); } }",38360386920a139431705beabd32c4ca43c75151,checkSubmitRulesAndState(com.google.gerrit.server.git.ChangeSet),checkSubmitRulesAndState(com.google.gerrit.server.git.ChangeSet),4,47,"private void checkSubmitRulesAndState(com.google.gerrit.server.git.ChangeSet cs) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { java.lang.StringBuilder msgbuf = new java.lang.StringBuilder(); java.util.List<com.google.gerrit.reviewdb.client.Change.Id> problemChanges = new java.util.ArrayList<>(); for (com.google.gerrit.server.query.change.ChangeData cd : cs.changes()) { try { if ((cd.change().getStatus()) != (Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((((""Change "" + (cd.change().getChangeId())) + "" is in state "") + (cd.change().getStatus()))); } else { com.google.gerrit.server.git.MergeOp.checkSubmitRule(cd); } } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { msgbuf.append(((e.getMessage()) + ""\n"")); problemChanges.add(cd.getId()); } } java.lang.String reason = msgbuf.toString(); if (!(reason.isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((((((""The change could not be "" + ""submitted because it depends on change(s) "") + (problemChanges.toString())) + "", which could not be submitted "") + ""because:\n"") + reason)); } }",8df16082b538ca6468536a3540dcb4392c00b03e,checkSubmitRulesAndState(com.google.gerrit.server.git.ChangeSet),80986,374,349
47846,gerrit-gwtexpui_src_main_java_com_google_gwtexpui_clippy_client_CopyableLabel.java,5.0,"private void showTextBox() { if ((textBox) == null) { textBox = new com.google.gwt.user.client.ui.TextBox(); textBox.setText(getText()); textBox.setVisibleLength(visibleLen); textBox.addKeyPressHandler(new com.google.gwt.event.dom.client.KeyPressHandler() { @java.lang.Override public void onKeyPress(final com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.isControlKeyDown()) || (event.isMetaKeyDown())) { switch (event.getCharCode()) { case 'c' : case 'x' : com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.user.client.Command() { public void execute() { hideTextBox(); } }); break; } } } }); textBox.addBlurHandler(new com.google.gwt.event.dom.client.BlurHandler() { @java.lang.Override public void onBlur(final com.google.gwt.event.dom.client.BlurEvent event) { hideTextBox(); } }); content.insert(textBox, 1); } textLabel.setVisible(false); textBox.setVisible(true); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { textBox.selectAll(); textBox.setFocus(true); } }); }",97e285535da5820fd9d85a4e22ab7389893f5414,"private void showTextBox() { if ((textBox) == null) { textBox = new com.google.gwt.user.client.ui.TextBox(); textBox.setText(getText()); textBox.setVisibleLength(visibleLen); textBox.setReadOnly(readOnly); textBox.addKeyPressHandler(new com.google.gwt.event.dom.client.KeyPressHandler() { @java.lang.Override public void onKeyPress(final com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.isControlKeyDown()) || (event.isMetaKeyDown())) { switch (event.getCharCode()) { case 'c' : case 'x' : com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.user.client.Command() { public void execute() { hideTextBox(); } }); break; } } } }); textBox.addBlurHandler(new com.google.gwt.event.dom.client.BlurHandler() { @java.lang.Override public void onBlur(final com.google.gwt.event.dom.client.BlurEvent event) { hideTextBox(); } }); content.insert(textBox, 1); } textLabel.setVisible(false); textBox.setVisible(true); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { textBox.selectAll(); textBox.setFocus(true); } }); }",93cdde115399b793fb0f7a319f5ce4b3ab799487,showTextBox(),showTextBox(),3,5,"private void showTextBox() { if ((textBox) == null) { textBox = new com.google.gwt.user.client.ui.TextBox(); textBox.setText(getText()); textBox.setVisibleLength(visibleLen); textBox.setReadOnly(true); textBox.addKeyPressHandler(new com.google.gwt.event.dom.client.KeyPressHandler() { @java.lang.Override public void onKeyPress(final com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.isControlKeyDown()) || (event.isMetaKeyDown())) { switch (event.getCharCode()) { case 'c' : case 'x' : com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.user.client.Command() { public void execute() { hideTextBox(); } }); break; } } } }); textBox.addBlurHandler(new com.google.gwt.event.dom.client.BlurHandler() { @java.lang.Override public void onBlur(final com.google.gwt.event.dom.client.BlurEvent event) { hideTextBox(); } }); content.insert(textBox, 1); } textLabel.setVisible(false); textBox.setVisible(true); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { textBox.selectAll(); textBox.setFocus(true); } }); }",62e977f148734a0397f4fdf3c69ed0b964c261de,showTextBox(),175028,342,342
131290,src_main_java_com_googlesource_gerrit_plugins_webhooks_RemoteConfig.java,,,,public org.eclipse.jgit.lib.Config getConfig() { return config; },462dba915400569bdaa45d48f3df3551dc89eebd,,getConfig(),10,2,public org.eclipse.jgit.lib.Config getEffective() { return config; },8c9eafd04cf4ab755285ea25f8b6020b6399a685,getEffective(),65309,19,19
78989,gerrit-server_src_main_java_com_google_gerrit_server_git_SubmoduleOp.java,7.0,"public void updateSuperProjects() throws com.google.gerrit.server.git.SubmoduleException { com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Branch.NameKey> dst = branchesByProject(); java.util.Set<com.google.gerrit.reviewdb.client.Project.NameKey> projects = dst.keySet(); try { for (com.google.gerrit.reviewdb.client.Project.NameKey project : projects) { orm.openRepo(project, false); orm.getRepo(project).resetUpdate(); for (com.google.gerrit.reviewdb.client.Branch.NameKey branch : dst.get(project)) { com.google.gerrit.server.git.SubmoduleOp.RepoOnlyOp op = new com.google.gerrit.server.git.SubmoduleOp.RepoOnlyOp(this, branch); orm.getRepo(project).getUpdate().addRepoOnlyOp(op); } } com.google.gerrit.server.git.BatchUpdate.execute(orm.batchUpdates(projects), new com.google.gerrit.server.git.BatchUpdate.Listener()); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gerrit.server.git.UpdateException | java.io.IOException | com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.server.git.SubmoduleException(""Cannot update gitlinks"", e); } }",7e2b693048be9c1f03c4ebde0c71acd80f113672,"public void updateSuperProjects() throws com.google.gerrit.server.git.SubmoduleException { com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Branch.NameKey> dst = branchesByProject(); java.util.LinkedHashSet<com.google.gerrit.reviewdb.client.Project.NameKey> projects = getOrdedProjects(); try { for (com.google.gerrit.reviewdb.client.Project.NameKey project : projects) { orm.openRepo(project, false); orm.getRepo(project).resetUpdate(); for (com.google.gerrit.reviewdb.client.Branch.NameKey branch : dst.get(project)) { com.google.gerrit.server.git.SubmoduleOp.RepoOnlyOp op = new com.google.gerrit.server.git.SubmoduleOp.RepoOnlyOp(this, branch); orm.getRepo(project).getUpdate().addRepoOnlyOp(op); } } com.google.gerrit.server.git.BatchUpdate.execute(orm.batchUpdates(projects), new com.google.gerrit.server.git.BatchUpdate.Listener()); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gerrit.server.git.UpdateException | java.io.IOException | com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.server.git.SubmoduleException(""Cannot update gitlinks"", e); } }",c3d1fd14f3df9883bf2df560eb8158716030c0e3,updateSuperProjects(),updateSuperProjects(),9,6,"public void updateSuperProjects() throws com.google.gerrit.server.git.SubmoduleException { com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Project.NameKey> projects = getProjectsInOrder(); if (projects == null) { return; } com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Branch.NameKey> dst = branchesByProject(); java.util.LinkedHashSet<com.google.gerrit.reviewdb.client.Project.NameKey> superProjects = new java.util.LinkedHashSet<>(); try { for (com.google.gerrit.reviewdb.client.Project.NameKey project : projects) { if (dst.containsKey(project)) { superProjects.add(project); orm.openRepo(project, false); orm.getRepo(project).resetUpdate(); for (com.google.gerrit.reviewdb.client.Branch.NameKey branch : dst.get(project)) { com.google.gerrit.server.git.SubmoduleOp.GitlinkOp op = new com.google.gerrit.server.git.SubmoduleOp.GitlinkOp(branch); orm.getRepo(project).getUpdate().addRepoOnlyOp(op); } } } com.google.gerrit.server.git.BatchUpdate.execute(orm.batchUpdates(superProjects), Listener.NONE); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gerrit.server.git.UpdateException | java.io.IOException | com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.server.git.SubmoduleException(""Cannot update gitlinks"", e); } }",d4a6ea536018431dbea8299de0decd0a5b973bc8,updateSuperProjects(),28070,369,421
53505,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,3.0,"private void loadCommitData() throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException, org.eclipse.jgit.errors.RepositoryNotFoundException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = change().currentPatchSetId(); java.lang.String sha1 = db.patchSets().get(psId).getRevision().get(); org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(change().getProject()); try { org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo); try { org.eclipse.jgit.revwalk.RevCommit c = walk.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(sha1)); commitMessage = c.getFullMessage(); commitFooters = c.getFooterLines(); } finally { walk.release(); } } finally { repo.close(); } }",a550006d4c290f3ce2b02aea439620800af025ec,"private void loadCommitData() throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException, org.eclipse.jgit.errors.RepositoryNotFoundException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = change().currentPatchSetId(); com.google.gerrit.reviewdb.client.PatchSet ps = db.patchSets().get(psId); if (ps == null) { throw new com.google.gerrit.server.project.NoSuchChangeException(legacyId); } java.lang.String sha1 = db.patchSets().get(psId).getRevision().get(); org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(change().getProject()); try { org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo); try { org.eclipse.jgit.revwalk.RevCommit c = walk.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(sha1)); commitMessage = c.getFullMessage(); commitFooters = c.getFooterLines(); } finally { walk.release(); } } finally { repo.close(); } }",d9a40fce827ece521d8617cf38da1aad3f980e9d,loadCommitData(),loadCommitData(),3,3,"private void loadCommitData() throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException, org.eclipse.jgit.errors.RepositoryNotFoundException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = change().currentPatchSetId(); com.google.gerrit.reviewdb.client.PatchSet ps = db.patchSets().get(psId); if (ps == null) { throw new com.google.gerrit.server.project.NoSuchChangeException(legacyId); } java.lang.String sha1 = ps.getRevision().get(); org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(change().getProject()); try { org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo); try { org.eclipse.jgit.revwalk.RevCommit c = walk.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(sha1)); commitMessage = c.getFullMessage(); commitFooters = c.getFooterLines(); } finally { walk.release(); } } finally { repo.close(); } }",09d46cc31c75f1711e4fc4cc291869874defe71f,loadCommitData(),136041,294,301
91991,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeUtil.java,38.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.lang.String generate(org.eclipse.jgit.revwalk.RevCommit original, org.eclipse.jgit.revwalk.RevCommit mergeTip, com.google.gerrit.server.project.ChangeControl ctl, java.lang.String current) { checkNotNull(original.getRawBuffer()); if (mergeTip != null) checkNotNull(mergeTip.getRawBuffer()); for (com.google.gerrit.server.git.ChangeMessageModifier changeMessageModifier : changeMessageModifiers) { current = changeMessageModifier.onCommitBeingCreated(current, original, mergeTip, ctl); checkState((current != null)); } return current; }",6cfca697ecb80aef4d73192298eaeaa705c1cf36,,"generate(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,com.google.gerrit.server.project.ChangeControl,java.lang.String)",16,32,"public java.lang.String generate(org.eclipse.jgit.revwalk.RevCommit original, org.eclipse.jgit.revwalk.RevCommit mergeTip, com.google.gerrit.server.project.ChangeControl ctl, java.lang.String current) { checkNotNull(original.getRawBuffer()); if (mergeTip != null) { checkNotNull(mergeTip.getRawBuffer()); } for (com.google.gerrit.server.git.ChangeMessageModifier changeMessageModifier : changeMessageModifiers) { current = changeMessageModifier.onSubmit(current, original, mergeTip, ctl); checkNotNull(current, ((changeMessageModifier.getClass().getName()) + "".OnSubmit returned null instead of new commit message"")); } return current; }",7bcb19b5871cf7a941bca0d8f6c57556b0b34f95,"generate(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,com.google.gerrit.server.project.ChangeControl,java.lang.String)",122649,142,162
59960,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_FileTextBox.java,5.0,"void set(com.google.gerrit.reviewdb.client.PatchSet.Id id, com.google.gwtexpui.globalkey.client.NpTextArea content) { this.id = id; this.textArea = content; }",921352c34a658e6d8cce01d53441a56e72691352,"void set(com.google.gerrit.reviewdb.client.PatchSet.Id id, com.google.gwtexpui.globalkey.client.NpTextArea content, boolean editExists) { this.id = id; this.textArea = content; this.editExists = editExists; }",dc4150a5e5cc969fe5e724eaeacf83fe1cf20ad8,"set(com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gwtexpui.globalkey.client.NpTextArea)","set(com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gwtexpui.globalkey.client.NpTextArea,boolean)",5,5,"void set(com.google.gerrit.reviewdb.client.PatchSet.Id id, com.google.gwtexpui.globalkey.client.NpTextArea content) { this.id = id; this.textArea = content; }",921352c34a658e6d8cce01d53441a56e72691352,"set(com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gwtexpui.globalkey.client.NpTextArea)",147805,66,54
58142,gerrit-server_src_main_java_com_google_gerrit_server_WebLinks.java,1.0,"public java.lang.Iterable<com.google.gerrit.server.WebLinks.Link> getPatchSetLinks(java.lang.String project, java.lang.String commit) { java.util.List<com.google.gerrit.server.WebLinks.Link> links = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.extensions.webui.PatchSetWebLink webLink : patchSetLinks) { links.add(new com.google.gerrit.server.WebLinks.Link(webLink.getLinkName(), webLink.getPatchSetUrl(project, commit))); } return links; }",b01feb60e6cc2ffb7db69ed97eed3090d1e2e694,"public java.lang.Iterable<com.google.gerrit.server.WebLinks.Link> getPatchSetLinks(java.lang.String project, java.lang.String commit) { java.util.List<com.google.gerrit.server.WebLinks.Link> links = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.extensions.webui.PatchSetWebLink webLink : patchSetLinks) { links.add(new com.google.gerrit.server.WebLinks.Link(webLink.getLinkName(), webLink.getImageUrl(), webLink.getPatchSetUrl(project, commit))); } return links; }",bb47c7f18f1ebefba0b96aeeba239d013ca06ddf,"getPatchSetLinks(java.lang.String,java.lang.String)","getPatchSetLinks(java.lang.String,java.lang.String)",19,1,"public java.lang.Iterable<com.google.gerrit.extensions.common.WebLinkInfo> getPatchSetLinks(java.lang.String project, java.lang.String commit) { java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.extensions.webui.PatchSetWebLink webLink : patchSetLinks) { links.add(new com.google.gerrit.extensions.common.WebLinkInfo(webLink.getLinkName(), webLink.getImageUrl(), webLink.getPatchSetUrl(project, commit))); } return links; }",21a7bb0c17f839e2382c1141fcbadbebb8dfbdb4,"getPatchSetLinks(java.lang.String,java.lang.String)",139731,151,154
109611,gerrit-httpd_src_main_java_com_google_gerrit_httpd_CacheBasedWebSession.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private java.lang.String getQueryParameter(java.lang.String param) { java.lang.String queryString = request.getQueryString(); if ((!(com.google.common.base.Strings.isNullOrEmpty(queryString))) && (queryString.contains(param))) { for (java.lang.String kvPair : com.google.common.base.Splitter.on('&').split(queryString)) { java.util.Iterator<java.lang.String> i = com.google.common.base.Splitter.on('=').limit(2).split(kvPair).iterator(); java.lang.String key = com.google.gerrit.extensions.restapi.Url.decode(i.next()); if (param.equals(key)) { return i.hasNext() ? com.google.gerrit.extensions.restapi.Url.decode(i.next()) : null; } } } return null; },6e51324bd18592081af0f61b35c17cf659ab72bb,,getQueryParameter(java.lang.String),12,4,private void authFromQueryParameter(java.lang.String accessToken) { key = new com.google.gerrit.httpd.WebSessionManager.Key(accessToken); val = manager.get(key); if ((val) != null) { okPaths.add(AccessPath.REST_API); } },3d3375f946735673096dd032fcda95436e891319,authFromQueryParameter(java.lang.String),187416,195,65
76055,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_notedb_ChangeRebuilderIT.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@org.junit.After public void tearDown() { com.google.gerrit.testutil.TestTimeUtil.useSystemTime(); if ((hookHandle) != null) { hookHandle.remove(); } },e00351b816ebb71e53275054b414405f77bbd487,,tearDown(),10,3,@org.junit.After public void tearDown() { com.google.gerrit.testutil.TestTimeUtil.useSystemTime(); },34dea911b27c21034f7b453bf6c843d7295dd54b,tearDown(),138269,46,30
72097,src_main_java_com_googlesource_gerrit_plugins_replication_PushOne.java,20.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void logCanceledWhileRunningException(org.eclipse.jgit.errors.TransportException e) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.info(((""Cannot replicate to "" + (uri)) + "" it was canceled while running""), e); }",2cb625440d171d137b894c4ac335ae5d5d4e80cf,,logCanceledWhileRunningException(org.eclipse.jgit.errors.TransportException),11,33,"private void logCanceledWhileRunningException(org.eclipse.jgit.errors.TransportException e) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.info((((""Cannot replicate to "" + (uri)) + ""."") + "" It was canceled while running""), e); }",e548f9a3032c2323428c82e15fd7a50b1766e924,logCanceledWhileRunningException(org.eclipse.jgit.errors.TransportException),180017,63,65
92850,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeJson.java,14.0,"com.google.gerrit.extensions.common.CommitInfo toCommit(com.google.gerrit.server.project.ChangeControl ctl, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit, boolean addLinks, boolean fillCommit) throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = ctl.getProject().getNameKey(); com.google.gerrit.extensions.common.CommitInfo info = new com.google.gerrit.extensions.common.CommitInfo(); if (fillCommit) { info.commit = commit.name(); } info.parents = new java.util.ArrayList(commit.getParentCount()); info.author = com.google.gerrit.server.CommonConverters.toGitPerson(commit.getAuthorIdent()); info.committer = com.google.gerrit.server.CommonConverters.toGitPerson(commit.getCommitterIdent()); info.subject = commit.getShortMessage(); info.message = commit.getFullMessage(); if (addLinks) { com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getPatchSetLinks(project, commit.name()); info.webLinks = (links.isEmpty()) ? null : links.toList(); } for (org.eclipse.jgit.revwalk.RevCommit parent : commit.getParents()) { rw.parseBody(parent); com.google.gerrit.extensions.common.CommitInfo i = new com.google.gerrit.extensions.common.CommitInfo(); i.commit = parent.name(); i.subject = parent.getShortMessage(); info.parents.add(i); } return info; }",bdd03cda45fe5b8f1f07f4dfbf2f908677ed3868,"com.google.gerrit.extensions.common.CommitInfo toCommit(com.google.gerrit.server.project.ChangeControl ctl, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit, boolean addLinks, boolean fillCommit) throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = ctl.getProject().getNameKey(); com.google.gerrit.extensions.common.CommitInfo info = new com.google.gerrit.extensions.common.CommitInfo(); if (fillCommit) { info.commit = commit.name(); } info.parents = new java.util.ArrayList(commit.getParentCount()); info.author = com.google.gerrit.server.CommonConverters.toGitPerson(commit.getAuthorIdent()); info.committer = com.google.gerrit.server.CommonConverters.toGitPerson(commit.getCommitterIdent()); info.subject = commit.getShortMessage(); info.message = commit.getFullMessage(); if (addLinks) { com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getPatchSetLinks(project, commit.name()); info.webLinks = (links.isEmpty()) ? null : links.toList(); } for (org.eclipse.jgit.revwalk.RevCommit parent : commit.getParents()) { rw.parseBody(parent); com.google.gerrit.extensions.common.CommitInfo i = new com.google.gerrit.extensions.common.CommitInfo(); i.commit = parent.name(); i.subject = parent.getShortMessage(); if (addLinks) { java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> parentLinks = webLinks.getParentLinks(project, parent.name()); i.webLinks = (parentLinks.isEmpty()) ? null : parentLinks; } info.parents.add(i); } return info; }",01f683030f2876bc5d7b5b22271b596439340590,"toCommit(com.google.gerrit.server.project.ChangeControl,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit,boolean,boolean)","toCommit(com.google.gerrit.server.project.ChangeControl,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit,boolean,boolean)",8,14,"com.google.gerrit.extensions.common.CommitInfo toCommit(com.google.gerrit.server.project.ChangeControl ctl, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit, boolean addLinks, boolean fillCommit) throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = ctl.getProject().getNameKey(); com.google.gerrit.extensions.common.CommitInfo info = new com.google.gerrit.extensions.common.CommitInfo(); if (fillCommit) { info.commit = commit.name(); } info.parents = new java.util.ArrayList(commit.getParentCount()); info.author = com.google.gerrit.server.CommonConverters.toGitPerson(commit.getAuthorIdent()); info.committer = com.google.gerrit.server.CommonConverters.toGitPerson(commit.getCommitterIdent()); info.subject = commit.getShortMessage(); info.message = commit.getFullMessage(); if (addLinks) { com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getPatchSetLinks(project, commit.name()); info.webLinks = (links.isEmpty()) ? null : links.toList(); } for (org.eclipse.jgit.revwalk.RevCommit parent : commit.getParents()) { rw.parseBody(parent); com.google.gerrit.extensions.common.CommitInfo i = new com.google.gerrit.extensions.common.CommitInfo(); i.commit = parent.name(); i.subject = parent.getShortMessage(); if (addLinks) { com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> parentLinks = webLinks.getParentLinks(project, parent.name()); i.webLinks = (parentLinks.isEmpty()) ? null : parentLinks.toList(); } info.parents.add(i); } return info; }",58d5819038eb9befc582b0c4ebd46700cd4eccdc,"toCommit(com.google.gerrit.server.project.ChangeControl,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit,boolean,boolean)",190510,455,462
59044,gerrit-server_src_main_java_com_google_gerrit_server_PatchLineCommentsUtil.java,13.0,"public java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> byPatchSet(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet.Id psId) throws com.google.gwtorm.server.OrmException { if (!(migration.readComments())) { return db.patchComments().byPatchSet(psId).toList(); } java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments = com.google.common.collect.Lists.newArrayList(); comments.addAll(publishedByPatchSet(db, notes, psId)); java.lang.Iterable<java.lang.String> filtered = getDraftRefs(notes.getChangeId()); for (java.lang.String refName : filtered) { com.google.gerrit.reviewdb.client.Account.Id account = Account.Id.fromRefPart(refName); if (account != null) { comments.addAll(draftByPatchSetAuthor(db, psId, account, notes)); } } return comments; }",9c53d01109bf35611025df3fe89b8090fc39389a,"public java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> byPatchSet(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet.Id psId) throws com.google.gwtorm.server.OrmException { if (!(migration.readComments())) { return sort(db.patchComments().byPatchSet(psId).toList()); } java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments = com.google.common.collect.Lists.newArrayList(); comments.addAll(publishedByPatchSet(db, notes, psId)); java.lang.Iterable<java.lang.String> filtered = getDraftRefs(notes.getChangeId()); for (java.lang.String refName : filtered) { com.google.gerrit.reviewdb.client.Account.Id account = Account.Id.fromRefPart(refName); if (account != null) { comments.addAll(draftByPatchSetAuthor(db, psId, account, notes)); } } return sort(comments); }",20836cc44fa4085007b860188678570317ef210b,"byPatchSet(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes,com.google.gerrit.reviewdb.client.PatchSet$Id)","byPatchSet(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes,com.google.gerrit.reviewdb.client.PatchSet$Id)",12,13,"public java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> byPatchSet(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet.Id psId) throws com.google.gwtorm.server.OrmException { if (!(migration.readComments())) { return com.google.gerrit.server.PatchLineCommentsUtil.sort(db.patchComments().byPatchSet(psId).toList()); } java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments = com.google.common.collect.Lists.newArrayList(); comments.addAll(publishedByPatchSet(db, notes, psId)); java.lang.Iterable<java.lang.String> filtered = getDraftRefs(notes.getChangeId()); for (java.lang.String refName : filtered) { com.google.gerrit.reviewdb.client.Account.Id account = Account.Id.fromRefPart(refName); if (account != null) { comments.addAll(draftByPatchSetAuthor(db, psId, account, notes)); } } return com.google.gerrit.server.PatchLineCommentsUtil.sort(comments); }",34603c62d31a5e83390d7087b9c402c36a571418,"byPatchSet(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes,com.google.gerrit.reviewdb.client.PatchSet$Id)",98142,276,304
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsConsistencyIT.java,3.0,"@org.junit.Test public void missingNameEntry() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefRename ru = repo.renameRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID))); org.eclipse.jgit.lib.RefUpdate.Result result = ru.rename(); assertThat(result).isEqualTo(Result.RENAMED); } assertError(((""group "" + (com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID)) + "" has no entry in name map"")); }",8112f321e7c88bacd973463b3343f981ba57cc83,"@org.junit.Test public void missingNameEntry() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefRename ru = repo.renameRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID))); org.eclipse.jgit.lib.RefUpdate.Result result = ru.rename(); assertThat(result).isEqualTo(Result.RENAMED); } assertError(((""account "" + (com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID)) + "" has no entry in name map"")); }",a030bd6b1a8a3e82579c7d946dbe7b7bbaaa19ab,missingNameEntry(),missingNameEntry(),17,3,"@org.junit.Test public void missingNameEntry() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefRename ru = repo.renameRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID))); org.eclipse.jgit.lib.RefUpdate.Result result = ru.rename(); assertThat(result).isEqualTo(Result.RENAMED); } assertError(((""group "" + (com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID)) + "" has no entry in name map"")); }",8112f321e7c88bacd973463b3343f981ba57cc83,missingNameEntry(),215245,247,247
9518,src_main_java_com_google_gerrit_client_account_AccountSettings.java,0.0,public void onSuccess(final com.google.gerrit.client.reviewdb.Account result) { if (isAttached()) { display(result); } },eba3b905feff7ab58935bdf9c41fe75343e252a3,@java.lang.Override protected void prepare(final com.google.gerrit.client.reviewdb.Account result) { display(result); },060695d649d561083daea391806954d80e41481a,onSuccess(com.google.gerrit.client.reviewdb.Account),prepare(com.google.gerrit.client.reviewdb.Account),2,10,@java.lang.Override protected void preDisplay(final com.google.gerrit.client.reviewdb.Account result) { display(result); },c42cc632ec286d97cdc3ecd66579d30163c8b5f0,preDisplay(com.google.gerrit.client.reviewdb.Account),847,33,34
86871,gerrit-elasticsearch_src_test_java_com_google_gerrit_elasticsearch_ElasticQueryChangesTest.java,0.0,"@org.junit.After public void cleanupIndex() { com.google.gerrit.elasticsearch.ElasticQueryChangesTest.node.client().admin().indices().prepareDelete(""gerrit"").execute(); com.google.gerrit.elasticsearch.ElasticQueryChangesTest.createIndexes(); }",d56e51e2753d6a577ffed3e41cab9e8e62fd76c5,@org.junit.After public void cleanupIndex() { if ((com.google.gerrit.elasticsearch.ElasticQueryChangesTest.nodeInfo) != null) { com.google.gerrit.elasticsearch.ElasticTestUtils.deleteIndexes(com.google.gerrit.elasticsearch.ElasticQueryChangesTest.nodeInfo.node); com.google.gerrit.elasticsearch.ElasticTestUtils.createIndexes(com.google.gerrit.elasticsearch.ElasticQueryChangesTest.nodeInfo.node); } },586eb4207f58dddaca2650bdaad179f3d6c4f601,cleanupIndex(),cleanupIndex(),15,0,"@org.junit.After public void cleanupIndex() { if ((com.google.gerrit.elasticsearch.ElasticQueryChangesTest.nodeInfo) != null) { com.google.gerrit.elasticsearch.ElasticTestUtils.deleteIndexes(com.google.gerrit.elasticsearch.ElasticQueryChangesTest.nodeInfo.node, com.google.gerrit.elasticsearch.ElasticQueryChangesTest.INDEX_NAME); com.google.gerrit.elasticsearch.ElasticQueryChangesTest.createIndexes(); } }",592e5d8dcb8b5e57c2502742a7090c8b5c1d47c5,cleanupIndex(),141954,108,108
75938,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_UnifiedChunkManager.java,9.0,"@java.lang.Override int getCmLine(int line, com.google.gerrit.client.diff.DisplaySide side) { int res = java.util.Collections.binarySearch(chunks, new com.google.gerrit.client.diff.UnifiedDiffChunkInfo(side, line, 0, 0, false), getDiffChunkComparator()); if (res >= 0) { return chunks.get(res).getCmLine(); } else { res = (-res) - 1; if (res > 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get((res - 1)); if ((side == (DisplaySide.A)) && (info.isEdit())) { info = chunks.get((res - 2)); } if ((info.getSide()) == side) { return ((info.getCmLine()) + line) - (info.getStart()); } else { return ((info.getCmLine()) + (getLineMapper().lineOnOther(side, line).getLine())) - (info.getStart()); } } else { return line; } } }",addf6e8b2aeb7c283fb2c9c2656b3e90421090b7,"@java.lang.Override int getCmLine(int line, com.google.gerrit.client.diff.DisplaySide side) { int res = java.util.Collections.binarySearch(chunks, new com.google.gerrit.client.diff.UnifiedDiffChunkInfo(side, line, 0, 0, false), getDiffChunkComparator()); if (res >= 0) { return chunks.get(res).getCmLine(); } else { res = (-res) - 1; if (res > 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get((res - 1)); if (((side == (DisplaySide.A)) && (info.isEdit())) && ((info.getSide()) == (DisplaySide.B))) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo delete = chunks.get((res - 2)); if (((delete.getStart()) <= line) && (line <= (delete.getEnd()))) { return ((delete.getCmLine()) + line) - (delete.getStart()); } else { return (((((delete.getCmLine()) + line) - (delete.getStart())) + (info.getEnd())) - (info.getStart())) + 1; } } else if (side == (info.getSide())) { return ((info.getCmLine()) + line) - (info.getStart()); } else { return ((info.getCmLine()) + (getLineMapper().lineOnOther(side, line).getLine())) - (info.getStart()); } } else { return line; } } }",e5cd606da177a627baae4ffef4fb3ac9041e327b,"getCmLine(int,com.google.gerrit.client.diff.DisplaySide)","getCmLine(int,com.google.gerrit.client.diff.DisplaySide)",3,9,"@java.lang.Override int getCmLine(int line, com.google.gerrit.client.diff.DisplaySide side) { int res = java.util.Collections.binarySearch(chunks, new com.google.gerrit.client.diff.UnifiedDiffChunkInfo(side, line, 0, 0, false), getDiffChunkComparator()); if (res >= 0) { return chunks.get(res).getCmLine(); } else { res = (-res) - 1; if (res > 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get((res - 1)); if (((side == (DisplaySide.A)) && (info.isEdit())) && ((info.getSide()) == (DisplaySide.B))) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo delete = chunks.get((res - 2)); if (line <= (delete.getEnd())) { return ((delete.getCmLine()) + line) - (delete.getStart()); } else { return (((((delete.getCmLine()) + line) - (delete.getStart())) + (info.getEnd())) - (info.getStart())) + 1; } } else if (side == (info.getSide())) { return ((info.getCmLine()) + line) - (info.getStart()); } else { return ((info.getCmLine()) + (getLineMapper().lineOnOther(side, line).getLine())) - (info.getStart()); } } else { return line; } } }",6ed925a77f37eb69a955669fb4de438bbe847595,"getCmLine(int,com.google.gerrit.client.diff.DisplaySide)",41018,341,332
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> byGroup(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },d93a335e78fb841ee2f1e77c8b54c18f7e3f0790,,byGroup(com.google.gerrit.reviewdb.client.AccountGroup$Id),3,27,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> byGroup(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },b7e916f9915a9d886ab8bdae98b25226dcc5d2ea,byGroup(com.google.gerrit.reviewdb.client.AccountGroup$Id),205064,106,93
128112,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeJson.java,41.0,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> revisions(com.google.gerrit.server.query.change.ChangeData cd, java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> map, java.util.Optional<com.google.gerrit.reviewdb.client.PatchSet.Id> limitToPsId, com.google.gerrit.extensions.common.ChangeInfo changeInfo) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> res = new java.util.LinkedHashMap<>(); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { for (com.google.gerrit.reviewdb.client.PatchSet in : map.values()) { com.google.gerrit.reviewdb.client.PatchSet.Id id = in.getId(); boolean want = false; if (has(com.google.gerrit.server.change.ALL_REVISIONS)) { want = true; } else if (limitToPsId.isPresent()) { want = id.equals(limitToPsId.get()); } else { want = id.equals(cd.change().currentPatchSetId()); } if (want && (cd.changeControl().isPatchVisible(in, db.get()))) { res.put(in.getRevision().get(), toRevisionInfo(cd, in, repo, rw, false, changeInfo)); } } return res; } }",fb6d1eeab419a5fcfcf3212c98e1c906618fc7f9,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> revisions(com.google.gerrit.server.query.change.ChangeData cd, java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> map, java.util.Optional<com.google.gerrit.reviewdb.client.PatchSet.Id> limitToPsId, com.google.gerrit.extensions.common.ChangeInfo changeInfo) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> res = new java.util.LinkedHashMap<>(); com.google.gerrit.server.project.ChangeControl ctl = changeControlFactory.controlFor(db.get(), cd.change(), userProvider.get()); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { for (com.google.gerrit.reviewdb.client.PatchSet in : map.values()) { com.google.gerrit.reviewdb.client.PatchSet.Id id = in.getId(); boolean want = false; if (has(com.google.gerrit.server.change.ALL_REVISIONS)) { want = true; } else if (limitToPsId.isPresent()) { want = id.equals(limitToPsId.get()); } else { want = id.equals(cd.change().currentPatchSetId()); } if (want && (ctl.isPatchVisible(in, db.get()))) { res.put(in.getRevision().get(), toRevisionInfo(cd, in, repo, rw, false, changeInfo)); } } return res; } }",680cec8f73effb42aacd4c3e32acdd889b2af681,"revisions(com.google.gerrit.server.query.change.ChangeData,java.util.Map,java.util.Optional,com.google.gerrit.extensions.common.ChangeInfo)","revisions(com.google.gerrit.server.query.change.ChangeData,java.util.Map,java.util.Optional,com.google.gerrit.extensions.common.ChangeInfo)",5,48,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> revisions(com.google.gerrit.server.project.ChangeControl ctl, com.google.gerrit.server.query.change.ChangeData cd, java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> map, java.util.Optional<com.google.gerrit.reviewdb.client.PatchSet.Id> limitToPsId, com.google.gerrit.extensions.common.ChangeInfo changeInfo) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> res = new java.util.LinkedHashMap<>(); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { for (com.google.gerrit.reviewdb.client.PatchSet in : map.values()) { com.google.gerrit.reviewdb.client.PatchSet.Id id = in.getId(); boolean want = false; if (has(com.google.gerrit.server.change.ALL_REVISIONS)) { want = true; } else if (limitToPsId.isPresent()) { want = id.equals(limitToPsId.get()); } else { want = id.equals(cd.change().currentPatchSetId()); } if (want && (ctl.isPatchVisible(in, db.get()))) { res.put(in.getRevision().get(), toRevisionInfo(cd, in, repo, rw, false, changeInfo)); } } return res; } }",24f975f6ace41fd7420ddef6111fa67ab6787355,"revisions(com.google.gerrit.server.project.ChangeControl,com.google.gerrit.server.query.change.ChangeData,java.util.Map,java.util.Optional,com.google.gerrit.extensions.common.ChangeInfo)",109780,473,453
153630,java_com_google_gerrit_server_group_db_GroupsUpdate.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.server.group.InternalGroup createGroupInNoteDbWithRetry(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryHelper.ActionType.GROUP_UPDATE, () -> createGroupInNoteDb(groupCreation, groupUpdate), com.google.gerrit.server.git.LockFailureException.class::isInstance); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmDuplicateKeyException.class); throw new java.io.IOException(e); } }",92b94eaa4b0fa758991b029adfe21b97b2191e07,,"createGroupInNoteDbWithRetry(com.google.gerrit.server.group.db.InternalGroupCreation,com.google.gerrit.server.group.db.InternalGroupUpdate)",6,14,"private com.google.gerrit.server.group.InternalGroup createGroupInNoteDbWithRetry(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryHelper.ActionType.GROUP_UPDATE, () -> createGroupInNoteDb(groupCreation, groupUpdate), com.google.gerrit.server.git.LockFailureException.class::isInstance); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmDuplicateKeyException.class); throw new java.io.IOException(e); } }",684684e6b516880d7abc30b2ecfe0791841040be,"createGroupInNoteDbWithRetry(com.google.gerrit.server.group.db.InternalGroupCreation,com.google.gerrit.server.group.db.InternalGroupUpdate)",213203,255,271
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,8.0,"com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit create(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit, int shiftedAmount, java.lang.String adjustedFilePath);",2e0cc43efb4a91a6f08e31787d1f0ab9926c5610,"com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit create(com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit edit, int shiftedAmount, java.lang.String adjustedFilePath);",9b5611d954e54cabfeab2e8fc4819366855f4b3b,"create(com.google.gerrit.server.patch.EditTransformer$ContextAwareEdit,int,java.lang.String)","create(com.google.gerrit.server.patchlib.EditTransformer$ContextAwareEdit,int,java.lang.String)",11,11,"com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit create(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit, int shiftedAmount, java.lang.String adjustedFilePath);",2e0cc43efb4a91a6f08e31787d1f0ab9926c5610,"create(com.google.gerrit.server.patch.EditTransformer$ContextAwareEdit,int,java.lang.String)",15686,50,48
34477,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectListScreen.java,2.0,"private java.lang.String link(final com.google.gerrit.reviewdb.client.Project item) { return com.google.gerrit.client.Dispatcher.toProjectAdmin(item.getNameKey(), ProjectScreen.INFO); }",45c2933e8ab5e5a989c146950507b3d22347d2c3,"private java.lang.String link(final com.google.gerrit.client.projects.ProjectInfo item) { return com.google.gerrit.client.Dispatcher.toProjectAdmin(item.getNameKey(), ProjectScreen.INFO); }",c65f24655e58dcd8ebf428456840486dbd506a49,link(com.google.gerrit.reviewdb.client.Project),link(com.google.gerrit.client.projects.ProjectInfo),13,2,"private java.lang.String link(final com.google.gerrit.client.projects.ProjectInfo item) { return com.google.gerrit.client.Dispatcher.toProjectAdmin(item.name_key(), ProjectScreen.INFO); }",17089b897dd46403d9c2bf4aaa92649fb81fb02c,link(com.google.gerrit.client.projects.ProjectInfo),19443,53,54
13402,gerrit-server_src_test_java_com_google_gerrit_server_util_SocketUtilTest.java,2.0,"public void testResolve() throws java.net.UnknownHostException { assertEquals(new java.net.InetSocketAddress(1234), com.google.gerrit.server.util.SocketUtil.resolve(""*:1234"", 80)); assertEquals(new java.net.InetSocketAddress(80), com.google.gerrit.server.util.SocketUtil.resolve(""*"", 80)); assertEquals(new java.net.InetSocketAddress(1234), com.google.gerrit.server.util.SocketUtil.resolve("":1234"", 80)); assertEquals(new java.net.InetSocketAddress(80), com.google.gerrit.server.util.SocketUtil.resolve("""", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName(""1:2:3:4:5:6:7:8""), 1234), com.google.gerrit.server.util.SocketUtil.resolve(""[1:2:3:4:5:6:7:8]:1234"", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName(""1:2:3:4:5:6:7:8""), 80), com.google.gerrit.server.util.SocketUtil.resolve(""[1:2:3:4:5:6:7:8]"", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName(""localhost""), 1234), com.google.gerrit.server.util.SocketUtil.resolve(""[localhost]:1234"", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName(""localhost""), 80), com.google.gerrit.server.util.SocketUtil.resolve(""[localhost]"", 80)); try { com.google.gerrit.server.util.SocketUtil.resolve(""invalid.name.localdomain:12"", 80); fail(""did not throw exception""); } catch (java.lang.IllegalArgumentException e) { assertEquals(""unknown host: invalid.name.localdomain:12"", e.getMessage()); } }",127f5b53d509e9f4eb61b13f4527ec806a5b380b,"public void testResolve() throws java.net.UnknownHostException { assertEquals(new java.net.InetSocketAddress(1234), com.google.gerrit.server.util.SocketUtil.resolve(""*:1234"", 80)); assertEquals(new java.net.InetSocketAddress(80), com.google.gerrit.server.util.SocketUtil.resolve(""*"", 80)); assertEquals(new java.net.InetSocketAddress(1234), com.google.gerrit.server.util.SocketUtil.resolve("":1234"", 80)); assertEquals(new java.net.InetSocketAddress(80), com.google.gerrit.server.util.SocketUtil.resolve("""", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName(""1:2:3:4:5:6:7:8""), 1234), com.google.gerrit.server.util.SocketUtil.resolve(""[1:2:3:4:5:6:7:8]:1234"", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName(""1:2:3:4:5:6:7:8""), 80), com.google.gerrit.server.util.SocketUtil.resolve(""[1:2:3:4:5:6:7:8]"", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName(""localhost""), 1234), com.google.gerrit.server.util.SocketUtil.resolve(""[localhost]:1234"", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName(""localhost""), 80), com.google.gerrit.server.util.SocketUtil.resolve(""[localhost]"", 80)); try { com.google.gerrit.server.util.SocketUtil.resolve(""invalid.name.test.:12"", 80); fail(""did not throw exception""); } catch (java.lang.IllegalArgumentException e) { assertEquals(""unknown host: invalid.name.test.:12"", e.getMessage()); } }",3b575c11ab7230828e41b9f04618f6bae156f3df,testResolve(),testResolve(),2,2,"public void testResolve() throws java.net.UnknownHostException { assertEquals(new java.net.InetSocketAddress(1234), com.google.gerrit.server.util.SocketUtil.resolve(""*:1234"", 80)); assertEquals(new java.net.InetSocketAddress(80), com.google.gerrit.server.util.SocketUtil.resolve(""*"", 80)); assertEquals(new java.net.InetSocketAddress(1234), com.google.gerrit.server.util.SocketUtil.resolve("":1234"", 80)); assertEquals(new java.net.InetSocketAddress(80), com.google.gerrit.server.util.SocketUtil.resolve("""", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName(""1:2:3:4:5:6:7:8""), 1234), com.google.gerrit.server.util.SocketUtil.resolve(""[1:2:3:4:5:6:7:8]:1234"", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName(""1:2:3:4:5:6:7:8""), 80), com.google.gerrit.server.util.SocketUtil.resolve(""[1:2:3:4:5:6:7:8]"", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName(""localhost""), 1234), com.google.gerrit.server.util.SocketUtil.resolve(""[localhost]:1234"", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName(""localhost""), 80), com.google.gerrit.server.util.SocketUtil.resolve(""[localhost]"", 80)); java.lang.String badname = ""this-name-is-not-supposed-to-resolve-on-your-network""; try { com.google.gerrit.server.util.SocketUtil.resolve((badname + "":12""), 80); fail(""did not throw exception""); } catch (java.lang.IllegalArgumentException e) { assertEquals(((""unknown host: "" + badname) + "":12""), e.getMessage()); } }",96a89428c1e8013a93e91cfb741ac68538d03827,testResolve(),100258,431,463
75198,gerrit-server_src_main_java_com_google_gerrit_server_change_Restore.java,2.0,"private com.google.gerrit.reviewdb.client.ChangeMessage newMessage(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append(""Restored""); if (!(com.google.common.base.Strings.nullToEmpty(input.message).trim().isEmpty())) { msg.append(""\n\n""); msg.append(input.message.trim()); } com.google.gerrit.reviewdb.client.ChangeMessage message = new com.google.gerrit.reviewdb.client.ChangeMessage(new com.google.gerrit.reviewdb.client.ChangeMessage.Key(change.getId(), com.google.gerrit.server.ChangeUtil.messageUUID(db)), caller.getAccountId(), change.getLastUpdatedOn(), change.currentPatchSetId()); message.setMessage(msg.toString()); return message; }",3fd400cc040c3c7ed88d0eea908fb40b1477a428,"private com.google.gerrit.reviewdb.client.ChangeMessage newMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append(""Restored""); if (!(com.google.common.base.Strings.nullToEmpty(input.message).trim().isEmpty())) { msg.append(""\n\n""); msg.append(input.message.trim()); } com.google.gerrit.reviewdb.client.ChangeMessage message = new com.google.gerrit.reviewdb.client.ChangeMessage(new com.google.gerrit.reviewdb.client.ChangeMessage.Key(change.getId(), com.google.gerrit.server.ChangeUtil.messageUUID(ctx.getDb())), ctx.getUser().getAccountId(), ctx.getWhen(), change.currentPatchSetId()); message.setMessage(msg.toString()); return message; }",bfcd777bfa87cdda93f9d62df660024f7b424595,newMessage(com.google.gerrit.reviewdb.server.ReviewDb),newMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext),2,2,"private com.google.gerrit.reviewdb.client.ChangeMessage newMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append(""Restored""); if (!(com.google.common.base.Strings.nullToEmpty(input.message).trim().isEmpty())) { msg.append(""\n\n""); msg.append(input.message.trim()); } com.google.gerrit.reviewdb.client.ChangeMessage message = new com.google.gerrit.reviewdb.client.ChangeMessage(new com.google.gerrit.reviewdb.client.ChangeMessage.Key(change.getId(), com.google.gerrit.server.ChangeUtil.messageUUID(ctx.getDb())), caller.getAccountId(), ctx.getWhen(), change.currentPatchSetId()); message.setMessage(msg.toString()); return message; }",284c414b4070df80b62005d25e2ff4c790ccdd19,newMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext),10245,222,220
74132,gerrit-server_src_main_java_com_google_gerrit_server_change_RebaseChangeOp.java,12.0,"private org.eclipse.jgit.revwalk.RevCommit rebaseCommit(com.google.gerrit.server.git.BatchUpdate.RepoContext ctx, org.eclipse.jgit.revwalk.RevCommit original, org.eclipse.jgit.lib.ObjectId base) throws com.google.gerrit.extensions.restapi.MergeConflictException, com.google.gerrit.extensions.restapi.ResourceConflictException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit parentCommit = original.getParent(0); if (base.equals(parentCommit)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""Change is already up to date.""); } org.eclipse.jgit.merge.ThreeWayMerger merger = newMergeUtil().newThreeWayMerger(ctx.getRepository(), ctx.getInserter()); merger.setBase(parentCommit); merger.merge(original, base); if ((merger.getResultTreeId()) == null) { throw new com.google.gerrit.extensions.restapi.MergeConflictException(""The change could not be rebased due to a conflict during merge.""); } org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(merger.getResultTreeId()); cb.setParentId(base); cb.setAuthor(original.getAuthorIdent()); cb.setMessage(original.getFullMessage()); if ((committerIdent) != null) { cb.setCommitter(committerIdent); } else { cb.setCommitter(ctx.getUser().asIdentifiedUser().newCommitterIdent(ctx.getWhen(), ctx.getTimeZone())); } org.eclipse.jgit.lib.ObjectId objectId = ctx.getInserter().insert(cb); ctx.getInserter().flush(); return ctx.getRevWalk().parseCommit(objectId); }",c4570069af84ae49d16874dd223b5d75ffc925fc,"private org.eclipse.jgit.revwalk.RevCommit rebaseCommit(com.google.gerrit.server.git.BatchUpdate.RepoContext ctx, org.eclipse.jgit.revwalk.RevCommit original, org.eclipse.jgit.lib.ObjectId base) throws com.google.gerrit.extensions.restapi.MergeConflictException, com.google.gerrit.extensions.restapi.ResourceConflictException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit parentCommit = original.getParent(0); if (base.equals(parentCommit)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""Change is already up to date.""); } org.eclipse.jgit.merge.ThreeWayMerger merger = newMergeUtil().newThreeWayMerger(ctx.getRepository(), ctx.getInserter()); merger.setBase(parentCommit); merger.merge(original, base); if ((merger.getResultTreeId()) == null) { throw new com.google.gerrit.extensions.restapi.MergeConflictException(""The change could not be rebased due to a conflict during merge.""); } org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(merger.getResultTreeId()); cb.setParentId(base); cb.setAuthor(original.getAuthorIdent()); cb.setMessage(original.getFullMessage()); if ((committerIdent) != null) { cb.setCommitter(committerIdent); } else { cb.setCommitter(ctx.getUser().asIdentifiedUser().newCommitterIdent(ctx.getWhen(), ctx.getTimeZone())); } org.eclipse.jgit.lib.ObjectId objectId = ctx.getInserter().insert(cb); ctx.getInserter().flush(); org.eclipse.jgit.revwalk.RevCommit rebasedCommit = ctx.getRevWalk().parseCommit(objectId); ctx.getRevWalk().parseBody(rebasedCommit); return rebasedCommit; }",e7ae0b24fc423f6d3737b99705ecbdaeada4c92d,"rebaseCommit(com.google.gerrit.server.git.BatchUpdate.RepoContext,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.lib.ObjectId)","rebaseCommit(com.google.gerrit.server.git.BatchUpdate.RepoContext,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.lib.ObjectId)",6,13,"private org.eclipse.jgit.revwalk.RevCommit rebaseCommit(com.google.gerrit.server.git.BatchUpdate.RepoContext ctx, org.eclipse.jgit.revwalk.RevCommit original, org.eclipse.jgit.lib.ObjectId base) throws com.google.gerrit.extensions.restapi.MergeConflictException, com.google.gerrit.extensions.restapi.ResourceConflictException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit parentCommit = original.getParent(0); if (base.equals(parentCommit)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""Change is already up to date.""); } org.eclipse.jgit.merge.ThreeWayMerger merger = newMergeUtil().newThreeWayMerger(ctx.getRepository(), ctx.getInserter()); merger.setBase(parentCommit); merger.merge(original, base); if ((merger.getResultTreeId()) == null) { throw new com.google.gerrit.extensions.restapi.MergeConflictException(""The change could not be rebased due to a conflict during merge.""); } org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(merger.getResultTreeId()); cb.setParentId(base); cb.setAuthor(original.getAuthorIdent()); cb.setMessage(original.getFullMessage()); if ((committerIdent) != null) { cb.setCommitter(committerIdent); } else { cb.setCommitter(ctx.getUser().asIdentifiedUser().newCommitterIdent(ctx.getWhen(), ctx.getTimeZone())); } org.eclipse.jgit.lib.ObjectId objectId = ctx.getInserter().insert(cb); ctx.getInserter().flush(); return ctx.getRevWalk().parseCommit(objectId); }",c4570069af84ae49d16874dd223b5d75ffc925fc,"rebaseCommit(com.google.gerrit.server.git.BatchUpdate.RepoContext,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.lib.ObjectId)",31264,454,421
95291,gerrit-server_src_main_java_com_google_gerrit_server_edit_ChangeEditModifier.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void ensurePermitted(com.google.gerrit.server.project.ChangeControl changeControl) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if (!(changeControl.canAddPatchSet(reviewDb.get()))) { throw new com.google.gerrit.extensions.restapi.AuthException((""Adding patch sets and hence creation or"" + "" modification of change edits is not permitted."")); } }",6c25e217b19690e5e049c3f6a70507f9e9c25302,,ensurePermitted(com.google.gerrit.server.project.ChangeControl),3,23,"private void ensurePermitted(com.google.gerrit.server.project.ChangeControl changeControl) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if (!(changeControl.canAddPatchSet(reviewDb.get()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""Not allowed to edit a change.""); } }",96d58bee79db3adfb63ba830b3bea17a7367e544,ensurePermitted(com.google.gerrit.server.project.ChangeControl),180097,107,94
33370,gerrit-server_src_main_java_com_google_gerrit_server_events_EventFactory.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.server.events.DependencyAttribute newDependsOn(com.google.gerrit.reviewdb.Change c, com.google.gerrit.reviewdb.PatchSet ps) { com.google.gerrit.server.events.DependencyAttribute d = newDependencyAttribute(c, ps); if (c.currPatchSetId().equals(ps.getId())) { d.isCurrentPatchSet = ""true""; } else { d.isCurrentPatchSet = ""false""; } return d; }",9e93922eb5f17c5ef10575ce5620466dbe258dd2,,"newDependsOn(com.google.gerrit.reviewdb.Change,com.google.gerrit.reviewdb.PatchSet)",5,23,"private com.google.gerrit.server.events.DependencyAttribute newDependsOn(com.google.gerrit.reviewdb.client.Change c, com.google.gerrit.reviewdb.client.PatchSet ps) { com.google.gerrit.server.events.DependencyAttribute d = newDependencyAttribute(c, ps); d.isCurrentPatchSet = c.currPatchSetId().equals(ps.getId()); return d; }",77c6953221c64af80ac4766474e01f40c2103d0d,"newDependsOn(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet)",108492,118,101
94050,gerrit-pgm_src_main_java_com_google_gerrit_pgm_SetPasswd.java,,,,"public void run(java.lang.String section, java.lang.String key, java.lang.String password) throws java.lang.Exception { com.google.gerrit.pgm.init.api.Section passwordSection = sections.get(section, null); if (ui.isBatch()) { passwordSection.setSecure(key, password); } else { ui.header(""Set password for [%s]"", section); passwordSection.passwordForKey((""Enter "" + key), key); } }",83ef430dee25f9ef66ac257a333d0ebb8a7e7a39,,"run(java.lang.String,java.lang.String,java.lang.String)",4,0,"public void run(java.lang.String section, java.lang.String key, java.lang.String password) throws java.lang.Exception { com.google.gerrit.pgm.init.api.Section passwordSection = sections.get(section, null); if (ui.isBatch()) { passwordSection.setSecure(key, password); } else { ui.header(""Set password for [%s]"", section); passwordSection.passwordForKey(""Enter password"", key); } }",ba40096e474ab663e9ec23256b13895d8d4111d9,"run(java.lang.String,java.lang.String,java.lang.String)",93903,108,105
15873,gerrit-server_src_main_java_com_google_gerrit_server_mail_OutgoingEmail.java,8.0,"protected void bccWatchesNotifyAllComments() { if ((db) != null) { try { final com.google.gerrit.server.project.ProjectState ps = getProjectState(); if (ps != null) { for (final com.google.gerrit.reviewdb.AccountProjectWatch w : db.accountProjectWatches().notifyAllComments(ps.getProject().getNameKey())) { add(RecipientType.BCC, w.getAccountId()); } } } catch (com.google.gwtorm.client.OrmException err) { } } }",e5ca30cfc85256783dadf2107a596609141e9b28,"protected void bccWatchesNotifyAllComments(java.util.List<java.lang.String> specificFileName) { if ((db) != null) { if (specificFileName == null) { final java.util.List<com.google.gerrit.reviewdb.Patch> patches = getPatches(patchSet.getId()); specificFileName = getPatchesFileNames(patches); } try { final com.google.gerrit.server.project.ProjectState ps = getProjectState(); if (ps != null) { for (final com.google.gerrit.reviewdb.AccountProjectWatch w : db.accountProjectWatches().notifyAllComments(ps.getProject().getNameKey())) { if (canAddRecipient(w, specificFileName)) { add(RecipientType.BCC, w.getAccountId()); } } } } catch (com.google.gwtorm.client.OrmException err) { } } }",8e0764f125ea601e60e96fdf89ea35be16f54a48,bccWatchesNotifyAllComments(),bccWatchesNotifyAllComments(java.util.List),2,28,"protected void bccWatchesNotifyAllComments() { try { for (final com.google.gerrit.reviewdb.AccountProjectWatch w : getWatches()) { if (w.isNotifyAllComments()) { add(RecipientType.BCC, w.getAccountId()); } } } catch (com.google.gwtorm.client.OrmException err) { } }",599e0ec65af58a41e6d617e6e425700c09d76030,bccWatchesNotifyAllComments(),125958,202,81
105474,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_RevisionReviewerApiImpl.java,4.0,"@java.lang.Override public void deleteVote(com.google.gerrit.extensions.api.changes.DeleteVoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteVote.apply(new com.google.gerrit.server.change.VoteResource(reviewer, input.label), input); } catch (com.google.gerrit.server.update.UpdateException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete vote"", e); } }",0b464c5d9838dc56523ffbca212e3e657a964e35,"@java.lang.Override public void deleteVote(com.google.gerrit.extensions.api.changes.DeleteVoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteVote.apply(new com.google.gerrit.server.change.VoteResource(reviewer, input.label), input); } catch (java.lang.Exception e) { com.google.gerrit.server.api.changes.RevisionReviewerApiImpl.throwRestApiException(""Cannot delete vote"", e); } }",3245a9dc7cf5532fd10de9a0ce793cdee5a04dff,deleteVote(com.google.gerrit.extensions.api.changes.DeleteVoteInput),deleteVote(com.google.gerrit.extensions.api.changes.DeleteVoteInput),6,3,"@java.lang.Override public void deleteVote(com.google.gerrit.extensions.api.changes.DeleteVoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteVote.apply(new com.google.gerrit.server.change.VoteResource(reviewer, input.label), input); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot delete vote"", e); } }",f5e9ac6b4a9b63eb34b015df1283fff3c5087e57,deleteVote(com.google.gerrit.extensions.api.changes.DeleteVoteInput),55462,120,115
125451,gerrit-server_src_main_java_com_google_gerrit_server_git_validators_CommitValidators.java,13.0,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { return java.util.Collections.emptyList(); } com.google.gerrit.reviewdb.client.Account.Id accountId = Account.Id.fromRef(receiveEvent.refName); if (accountId == null) { return java.util.Collections.emptyList(); } try { java.util.List<java.lang.String> errorMessages = accountValidator.validate(accountId, receiveEvent.revWalk, receiveEvent.command.getOldId(), receiveEvent.commit); if (!(errorMessages.isEmpty())) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""invalid account configuration"", errorMessages.stream().map(( m) -> new com.google.gerrit.server.git.validators.CommitValidationMessage(m, true)).collect(java.util.stream.Collectors.toList())); } } catch (java.io.IOException e) { java.lang.String m = java.lang.String.format(""Validating update for account %s failed"", accountId.get()); com.google.gerrit.server.git.validators.CommitValidators.log.error(m, e); throw new com.google.gerrit.server.git.validators.CommitValidationException(m, e); } return java.util.Collections.emptyList(); }",5197c12840424003003d3d6e6f33c9fc9854a951,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { return java.util.Collections.emptyList(); } com.google.gerrit.reviewdb.client.Account.Id accountId = Account.Id.fromRef(receiveEvent.refName); if (accountId == null) { return java.util.Collections.emptyList(); } try { java.util.List<java.lang.String> errorMessages = accountValidator.validate(accountId, receiveEvent.revWalk, receiveEvent.command.getOldId(), receiveEvent.commit); if (!(errorMessages.isEmpty())) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""invalid account configuration"", errorMessages.stream().map(( m) -> new com.google.gerrit.server.git.validators.CommitValidationMessage(m, true)).collect(java.util.stream.Collectors.toList())); } } catch (java.io.IOException e) { java.lang.String m = java.lang.String.format(""Validating update for account %s failed"", accountId.get()); com.google.gerrit.server.git.validators.CommitValidators.log.error(m, e); throw new com.google.gerrit.server.git.validators.CommitValidationException(m, e); } return java.util.Collections.emptyList(); }",e2da9f85de411dc96fc2486f92118f0b09281cf0,onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent),onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent),3,21,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { return java.util.Collections.emptyList(); } com.google.gerrit.reviewdb.client.Account.Id accountId = Account.Id.fromRef(receiveEvent.refName); if (accountId == null) { return java.util.Collections.emptyList(); } try { java.util.List<java.lang.String> errorMessages = accountValidator.validate(accountId, receiveEvent.revWalk, receiveEvent.command.getOldId(), receiveEvent.commit); if (!(errorMessages.isEmpty())) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""invalid account configuration"", errorMessages.stream().map(( m) -> new com.google.gerrit.server.git.validators.CommitValidationMessage(m, true)).collect(java.util.stream.Collectors.toList())); } } catch (java.io.IOException e) { java.lang.String m = java.lang.String.format(""Validating update for account %s failed"", accountId.get()); com.google.gerrit.server.git.validators.CommitValidators.log.error(m, e); throw new com.google.gerrit.server.git.validators.CommitValidationException(m, e); } return java.util.Collections.emptyList(); }",5197c12840424003003d3d6e6f33c9fc9854a951,onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent),197047,384,387
92147,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectTagsScreen.java,31.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"java.util.Set<java.lang.String> getCheckedRefs() { java.util.Set<java.lang.String> refs = new java.util.HashSet<>(); for (int row = 1; row < (table.getRowCount()); row++) { final com.google.gerrit.client.projects.TagInfo k = getRowItem(row); if (((k != null) && ((table.getWidget(row, 1)) instanceof com.google.gwt.user.client.ui.CheckBox)) && (((com.google.gwt.user.client.ui.CheckBox) (table.getWidget(row, 1))).getValue())) { refs.add(k.ref()); } } return refs; }",7b1303ac0fb08c0a707fad9249f1c1555e50bb37,,getCheckedRefs(),60,26,"java.util.Set<java.lang.String> getCheckedRefs() { java.util.Set<java.lang.String> refs = new java.util.HashSet<>(); for (int row = 1; row < (table.getRowCount()); row++) { com.google.gerrit.client.projects.TagInfo k = getRowItem(row); if (((k != null) && ((table.getWidget(row, 1)) instanceof com.google.gwt.user.client.ui.CheckBox)) && (((com.google.gwt.user.client.ui.CheckBox) (table.getWidget(row, 1))).getValue())) { refs.add(k.ref()); } } return refs; }",34908d9b4c98685577f56cdb3d9628ddf5bd2a5d,getCheckedRefs(),21678,152,151
87420,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Assignee.java,12.0,"private void editAssignee(final java.lang.String assignee) { if (assignee.isEmpty()) { com.google.gerrit.client.changes.ChangeApi.deleteAssignee(changeId.get(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); assigneeLink.setText(""""); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } else { com.google.gerrit.client.changes.ChangeApi.setAssignee(changeId.get(), assignee, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); assigneeLink.setText(result.name()); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } }",bbd9f29d5ffddca89dd621d14aa23681484d7f5b,"private void editAssignee(final java.lang.String assignee) { if (assignee.isEmpty()) { com.google.gerrit.client.changes.ChangeApi.deleteAssignee(changeId.get(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); assigneeLink.setText(""""); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } else { com.google.gerrit.client.changes.ChangeApi.setAssignee(changeId.get(), assignee, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); assigneeLink.setText(result.name()); getReviewers().updateReviewerList(); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } }",1af1d2629322850527a256b47ede29bbb355886c,editAssignee(java.lang.String),editAssignee(java.lang.String),5,13,"private void editAssignee(final java.lang.String assignee) { if (assignee.isEmpty()) { com.google.gerrit.client.changes.ChangeApi.deleteAssignee(changeId.get(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); setAssignee(null); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } else { com.google.gerrit.client.changes.ChangeApi.setAssignee(changeId.get(), assignee, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); setAssignee(result); com.google.gerrit.client.change.Reviewers reviewers = getReviewers(); if (reviewers != null) { reviewers.updateReviewerList(); } } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } }",d7464c5886dc6011cbf403f04aef8a673fc4f790,editAssignee(java.lang.String),105178,483,508
30400,gerrit-gwtui_src_main_java_com_google_gerrit_client_auth_userpass_UserPassSignInDialog.java,4.0,"private void onLogin() { hideError(); final java.lang.String user = username.getText(); if ((user == null) || (user.equals(""""))) { showError(Util.C.usernameRequired()); username.setFocus(true); return; } final java.lang.String pass = password.getText(); if ((pass == null) || (pass.equals(""""))) { showError(Util.C.passwordRequired()); password.setFocus(true); return; } enable(false); Util.SVC.authenticate(user, pass, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.common.auth.userpass.LoginResult>() { public void onSuccess(final com.google.gerrit.common.auth.userpass.LoginResult result) { if (result.success) { java.lang.String to = token; if (!(to.startsWith(""/""))) { to = ""/"" + to; } if ((result.isNew) && (!(token.startsWith(((com.google.gerrit.common.PageLinks.REGISTER) + ""/""))))) { to = (com.google.gerrit.common.PageLinks.REGISTER) + to; } com.google.gwt.user.client.Window.Location.replace((((com.google.gwt.user.client.Window.Location.getPath()) + ""login"") + to)); } else { showError(Util.C.invalidLogin()); enable(true); password.selectAll(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { password.setFocus(true); } }); } } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { super.onFailure(caught); enable(true); } }); }",653b00ed3a0c24068da31712fd1435b1c3bcd1a1,"private void onLogin() { hideError(); final java.lang.String user = username.getText(); if ((user == null) || (user.equals(""""))) { showError(Util.C.usernameRequired()); username.setFocus(true); return; } final java.lang.String pass = password.getText(); if ((pass == null) || (pass.equals(""""))) { showError(Util.C.passwordRequired()); password.setFocus(true); return; } enable(false); Util.SVC.authenticate(user, pass, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.common.auth.userpass.LoginResult>() { public void onSuccess(final com.google.gerrit.common.auth.userpass.LoginResult result) { if (result.success) { java.lang.String to = token; if (!(to.startsWith(""/""))) { to = ""/"" + to; } if ((result.isNew) && (!(token.startsWith(((com.google.gerrit.common.PageLinks.REGISTER) + ""/""))))) { to = (com.google.gerrit.common.PageLinks.REGISTER) + to; } com.google.gwt.user.client.Window.Location.replace((((com.google.gwt.user.client.Window.Location.getPath()) + ""login"") + to)); } else { final java.lang.String message; switch (result.getError()) { case LDAP_SERVER_UNAVAILABLE : message = Util.C.ldapServerUnavailable(); break; case INVALID_LOGIN : default : message = Util.C.invalidLogin(); } showError(message); enable(true); password.selectAll(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { password.setFocus(true); } }); } } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { super.onFailure(caught); enable(true); } }); }",2e51b0567014844b095d055b654694658cfb52cd,onLogin(),onLogin(),4,4,"private void onLogin() { hideError(); final java.lang.String user = username.getText(); if ((user == null) || (user.equals(""""))) { showError(Util.C.usernameRequired()); username.setFocus(true); return; } final java.lang.String pass = password.getText(); if ((pass == null) || (pass.equals(""""))) { showError(Util.C.passwordRequired()); password.setFocus(true); return; } enable(false); Util.SVC.authenticate(user, pass, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.common.auth.userpass.LoginResult>() { public void onSuccess(final com.google.gerrit.common.auth.userpass.LoginResult result) { if (result.success) { java.lang.String to = token; if (!(to.startsWith(""/""))) { to = ""/"" + to; } if ((result.isNew) && (!(token.startsWith(((com.google.gerrit.common.PageLinks.REGISTER) + ""/""))))) { to = (com.google.gerrit.common.PageLinks.REGISTER) + to; } com.google.gwt.user.client.Window.Location.replace((((com.google.gwt.user.client.Window.Location.getPath()) + ""login"") + to)); } else { final java.lang.String message; switch (result.getError()) { case AUTHENTICATION_UNAVAILABLE : message = Util.M.authenticationUnavailable(result.getAuthType()); break; case INVALID_LOGIN : default : message = Util.C.invalidLogin(); } showError(message); enable(true); password.selectAll(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { password.setFocus(true); } }); } } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { super.onFailure(caught); enable(true); } }); }",90a77131052275dc1ccf70be507c8733daf03654,onLogin(),197151,460,464
76871,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_ssh_GarbageCollectionIT.java,1.0,"@org.junit.Test public void testGcWithoutCapability_Error() throws java.lang.Exception { com.google.gerrit.acceptance.SshSession s = new com.google.gerrit.acceptance.SshSession(server, user); s.exec(""gerrit gc --all""); assertError((""One of the following capabilities is required to access this"" + "" resource: [runGC, maintainServer]""), s.getError()); s.close(); }",28f213a917658e7b7ea3bacbbaf5e70d2d338f35,"@org.junit.Test public void testGcWithoutCapability_Error() throws java.lang.Exception { userSshSession.exec(""gerrit gc --all""); assertThat(userSshSession.hasError()).isTrue(); assertError((""One of the following capabilities is required to access this"" + "" resource: [runGC, maintainServer]""), userSshSession.getError()); }",8704968f55c90c501826895a422896d3812cebed,testGcWithoutCapability_Error(),testGcWithoutCapability_Error(),3,1,"@org.junit.Test public void testGcWithoutCapability_Error() throws java.lang.Exception { userSshSession.exec(""gerrit gc --all""); assertThat(userSshSession.hasError()).isTrue(); java.lang.String error = userSshSession.getError(); assertThat(error).isNotNull(); assertError((""One of the following capabilities is required to access this"" + "" resource: [runGC, maintainServer]""), error); }",4c3204899e40eaf29416d2658f1b1c4984a5d219,testGcWithoutCapability_Error(),127422,82,97
23703,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_ModifyReviewersCommand.java,,,,"@org.kohsuke.args4j.Argument(index = 1, required = true, multiValued = true, metaVar = ""{EMAIL}"", usage = ""users to add (+name@example.com) or remove (-name@example.com)"") void addAnnotatedNameOrEmail(final java.lang.String token) { try { parseAnnotatedNameOrEmail(token); } catch (com.google.gerrit.sshd.commands.UnloggedFailure e) { throw new java.lang.IllegalArgumentException(e.getMessage(), e); } catch (com.google.gwtorm.client.OrmException e) { throw new java.lang.IllegalArgumentException(""database error"", e); } }",5befe26179c116b0eb98988ad18c16e6cad2cb01,,addAnnotatedNameOrEmail(java.lang.String),7,7,"@org.kohsuke.args4j.Argument(index = 0, required = true, multiValued = true, metaVar = ""COMMIT"", usage = ""changes to modify"") void addChange(java.lang.String token) { try { changes.addAll(parseChangeId(token)); } catch (com.google.gerrit.sshd.commands.UnloggedFailure e) { throw new java.lang.IllegalArgumentException(e.getMessage(), e); } catch (com.google.gwtorm.client.OrmException e) { throw new java.lang.IllegalArgumentException(""database is down"", e); } }",8a82dc7ca372ab99fd8d716eae4d771dc1d844ae,addChange(java.lang.String),56893,153,135
79762,gerrit-server_src_main_java_com_google_gerrit_server_account_WatchConfig.java,17.0,"public void deleteProjectWatches(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey> projectWatchKeys) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (com.google.gerrit.server.account.WatchConfig watchConfig = open(accountId)) { java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Collection<com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType>> projectWatches = watchConfig.getProjectWatches(); for (com.google.gerrit.server.account.WatchConfig.ProjectWatchKey key : projectWatchKeys) { projectWatches.remove(key); } commit(watchConfig); } }",de3512343904613e1b149dde00232498795f623b,"public void deleteProjectWatches(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey> projectWatchKeys) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (com.google.gerrit.server.account.WatchConfig watchConfig = open(accountId)) { java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Collection<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = watchConfig.getProjectWatches(); for (com.google.gerrit.server.account.WatchConfig.ProjectWatchKey key : projectWatchKeys) { projectWatches.remove(key); } commit(watchConfig); } }",be47b61498e4170b0cc808aeefb23de609c6abe7,"deleteProjectWatches(com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection)","deleteProjectWatches(com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection)",33,15,"public synchronized void deleteProjectWatches(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey> projectWatchKeys) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.WatchConfig watchConfig = read(accountId); java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = watchConfig.getProjectWatches(); boolean commit = false; for (com.google.gerrit.server.account.WatchConfig.ProjectWatchKey key : projectWatchKeys) { if ((projectWatches.remove(key)) != null) { commit = true; } } if (commit) { commit(watchConfig); } }",e0ae3a7cf80ef8b1f999e85a46295b392a05cf88,"deleteProjectWatches(com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection)",155646,197,217
140535,java_com_google_gerrit_server_patchlib_PatchListKey.java,10.0,"public static com.google.gerrit.server.patch.PatchListKey againstCommit(org.eclipse.jgit.lib.AnyObjectId otherCommitId, org.eclipse.jgit.lib.AnyObjectId newId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace) { return new com.google.gerrit.server.patch.PatchListKey(otherCommitId, newId, whitespace, com.google.gerrit.server.patch.PatchListKey.Algorithm.OPTIMIZED_DIFF); }",3b142ea0a8be1a7525d66f778094bb08f2950b8c,"public static com.google.gerrit.server.patchlib.PatchListKey againstCommit(org.eclipse.jgit.lib.AnyObjectId otherCommitId, org.eclipse.jgit.lib.AnyObjectId newId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace) { return new com.google.gerrit.server.patchlib.PatchListKey(otherCommitId, newId, whitespace, com.google.gerrit.server.patchlib.PatchListKey.Algorithm.OPTIMIZED_DIFF); }",16aa34346d9941c9f0a23b76d8ff078aa405b6ea,"againstCommit(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace)","againstCommit(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace)",11,10,"public static com.google.gerrit.server.diff.PatchListKey againstCommit(org.eclipse.jgit.lib.AnyObjectId otherCommitId, org.eclipse.jgit.lib.AnyObjectId newId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace) { return new com.google.gerrit.server.diff.PatchListKey(otherCommitId, newId, whitespace, com.google.gerrit.server.diff.PatchListKey.Algorithm.OPTIMIZED_DIFF); }",3c8e75dbcd605380b6bd7da9f91b76b6629c6c3f,"againstCommit(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace)",15558,122,119
140535,java_com_google_gerrit_server_patch_PatchListLoader.java,17.0,"public static com.google.gerrit.server.patch.PatchListLoader.EditsDueToRebaseResult create(java.util.List<org.eclipse.jgit.diff.DiffEntry> relevantDiffEntries, com.google.common.collect.Multimap<java.lang.String, com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> editsDueToRebasePerFilePath) { return new com.google.gerrit.server.patch.AutoValue_PatchListLoader_EditsDueToRebaseResult(relevantDiffEntries, editsDueToRebasePerFilePath); }",c70b5cc6a40ee9719ffc60c3169e901855939858,"public static com.google.gerrit.server.patch.PatchListLoader.EditsDueToRebaseResult create(java.util.List<org.eclipse.jgit.diff.DiffEntry> relevantDiffEntries, com.google.common.collect.Multimap<java.lang.String, com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit> editsDueToRebasePerFilePath) { return new com.google.gerrit.server.patch.AutoValue_PatchListLoader_EditsDueToRebaseResult(relevantDiffEntries, editsDueToRebasePerFilePath); }",87073c65f5009af03038cb5960ebc23d63dc4380,"create(java.util.List,com.google.common.collect.Multimap)","create(java.util.List,com.google.common.collect.Multimap)",11,15,"public static com.google.gerrit.server.patch.PatchListLoader.EditsDueToRebaseResult create(java.util.List<org.eclipse.jgit.diff.DiffEntry> relevantDiffEntries, com.google.common.collect.Multimap<java.lang.String, com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> editsDueToRebasePerFilePath) { return new com.google.gerrit.server.patch.AutoValue_PatchListLoader_EditsDueToRebaseResult(relevantDiffEntries, editsDueToRebasePerFilePath); }",c70b5cc6a40ee9719ffc60c3169e901855939858,"create(java.util.List,com.google.common.collect.Multimap)",15345,134,133
73390,src_main_java_com_googlesource_gerrit_plugins_replication_ReplicationQueue.java,18.0,"private void updateHead(org.eclipse.jgit.transport.URIish replicateURI, java.lang.String newHead) { if (!(replicateURI.isRemote())) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.updateHeadLocally(replicateURI, newHead); } else if (com.googlesource.gerrit.plugins.replication.ReplicationQueue.isSSH(replicateURI)) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.updateHeadRemoteSsh(replicateURI, newHead); } else { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn(java.lang.String.format((""Cannot update HEAD of project on remote site %s."" + ("" Only local paths and SSH URLs are supported"" + "" for remote HEAD update."")), replicateURI)); } }",6bf14bd5d1220ce8f0a085e511c5b30b5cbfe2b4,"void updateHead(org.eclipse.jgit.transport.URIish replicateURI, java.lang.String newHead) { if (!(replicateURI.isRemote())) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.updateHeadLocally(replicateURI, newHead); } else if (com.googlesource.gerrit.plugins.replication.ReplicationQueue.isSSH(replicateURI)) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.updateHeadRemoteSsh(replicateURI, newHead); } else { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn(java.lang.String.format((""Cannot update HEAD of project on remote site %s."" + ("" Only local paths and SSH URLs are supported"" + "" for remote HEAD update."")), replicateURI)); } }",6838e60cd7b6cb86cace30525d24f154c3e9e70e,"updateHead(org.eclipse.jgit.transport.URIish,java.lang.String)","updateHead(org.eclipse.jgit.transport.URIish,java.lang.String)",3,19,"private void updateHead(org.eclipse.jgit.transport.URIish replicateURI, java.lang.String newHead) { if (!(replicateURI.isRemote())) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.updateHeadLocally(replicateURI, newHead); } else if (com.googlesource.gerrit.plugins.replication.ReplicationQueue.isSSH(replicateURI)) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.updateHeadRemoteSsh(replicateURI, newHead); } else { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn(java.lang.String.format((""Cannot update HEAD of project on remote site %s."" + ("" Only local paths and SSH URLs are supported"" + "" for remote HEAD update."")), replicateURI)); } }",6bf14bd5d1220ce8f0a085e511c5b30b5cbfe2b4,"updateHead(org.eclipse.jgit.transport.URIish,java.lang.String)",213749,190,191
101151,src_main_java_com_googlesource_gerrit_plugins_verifystatus_client_VerifyStatusPlugin.java,1.0,"@java.lang.Override public void onSuccess(com.googlesource.gerrit.plugins.verifystatus.client.ConfigInfo info) { if (info.showJobsSummaryPanel()) { com.google.gerrit.plugin.client.Plugin.get().panel(GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK, new com.googlesource.gerrit.plugins.verifystatus.client.JobsSummaryPanel.Factory()); } if (info.showJobsPanel()) { com.google.gerrit.plugin.client.Plugin.get().panel(GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK, new com.googlesource.gerrit.plugins.verifystatus.client.JobsPanel.Factory(info)); } if (info.showJobsDropDownPanel()) { com.google.gerrit.plugin.client.Plugin.get().panel(GerritUiExtensionPoint.CHANGE_SCREEN_HEADER_RIGHT_OF_POP_DOWNS, new com.googlesource.gerrit.plugins.verifystatus.client.JobsDropDownPanel.Factory(info)); } }",964a64bc6cf101be132ef035bbc1a5047c4dfe00,"@java.lang.Override public void onSuccess(com.googlesource.gerrit.plugins.verifystatus.client.ConfigInfo info) { if (info.showJobsSummaryPanel()) { com.google.gerrit.plugin.client.Plugin.get().panel(GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK, new com.googlesource.gerrit.plugins.verifystatus.client.JobsSummaryPanel.Factory()); } if (info.showJobsPanel()) { if (info.showJobsPanelBelowTabPanel()) { com.google.gerrit.plugin.client.Plugin.get().panel(GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_RELATED_INFO_BLOCK, new com.googlesource.gerrit.plugins.verifystatus.client.JobsPanel.Factory(info)); } else { com.google.gerrit.plugin.client.Plugin.get().panel(GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK, new com.googlesource.gerrit.plugins.verifystatus.client.JobsPanel.Factory(info)); } } if (info.showJobsDropDownPanel()) { com.google.gerrit.plugin.client.Plugin.get().panel(GerritUiExtensionPoint.CHANGE_SCREEN_HEADER_RIGHT_OF_POP_DOWNS, new com.googlesource.gerrit.plugins.verifystatus.client.JobsDropDownPanel.Factory(info)); } }",2c65986580a7c9b332d536f93a8db4aab55aa30a,onSuccess(com.googlesource.gerrit.plugins.verifystatus.client.ConfigInfo),onSuccess(com.googlesource.gerrit.plugins.verifystatus.client.ConfigInfo),3,1,"@java.lang.Override public void onSuccess(com.googlesource.gerrit.plugins.verifystatus.client.ConfigInfo info) { if (info.showJobsSummaryPanel()) { com.google.gerrit.plugin.client.Plugin.get().panel(GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK, new com.googlesource.gerrit.plugins.verifystatus.client.JobsSummaryPanel.Factory()); } if (info.showJobsPanel()) { com.google.gerrit.plugin.client.Plugin.get().panel((info.showJobsBelowRelatedInfoBlock() ? com.google.gerrit.client.GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_RELATED_INFO_BLOCK : com.google.gerrit.client.GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK), new com.googlesource.gerrit.plugins.verifystatus.client.JobsPanel.Factory(info)); } if (info.showJobsDropDownPanel()) { com.google.gerrit.plugin.client.Plugin.get().panel(GerritUiExtensionPoint.CHANGE_SCREEN_HEADER_RIGHT_OF_POP_DOWNS, new com.googlesource.gerrit.plugins.verifystatus.client.JobsDropDownPanel.Factory(info)); } }",28bfbff111a2dd3364decab4dfdaeec46453a7c2,onSuccess(com.googlesource.gerrit.plugins.verifystatus.client.ConfigInfo),70141,321,295
18395,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_GroupListScreen.java,8.0,"@java.lang.Override protected void onInitUI() { super.onInitUI(); setPageTitle(Util.C.groupListTitle()); groups = new com.google.gerrit.client.admin.GroupTable(true, com.google.gerrit.common.PageLinks.ADMIN_GROUPS); add(groups); final com.google.gwt.user.client.ui.VerticalPanel fp = new com.google.gwt.user.client.ui.VerticalPanel(); fp.setStyleName(Gerrit.RESOURCES.css().addSshKeyPanel()); fp.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingCreateGroup())); addTxt = new com.google.gwtexpui.globalkey.client.NpTextBox(); addTxt.setVisibleLength(60); addTxt.addKeyPressHandler(new com.google.gwt.event.dom.client.KeyPressHandler() { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.getCharCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { doCreateGroup(); } } }); fp.add(addTxt); addNew = new com.google.gwt.user.client.ui.Button(Util.C.buttonCreateGroup()); addNew.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { doCreateGroup(); } }); fp.add(addNew); add(fp); }",8e1686464b8b638dee960c84ddcf01ff36099f00,"@java.lang.Override protected void onInitUI() { super.onInitUI(); setPageTitle(Util.C.groupListTitle()); groups = new com.google.gerrit.client.admin.GroupTable(true, com.google.gerrit.common.PageLinks.ADMIN_GROUPS); add(groups); final com.google.gwt.user.client.ui.VerticalPanel fp = new com.google.gwt.user.client.ui.VerticalPanel(); fp.setStyleName(Gerrit.RESOURCES.css().addSshKeyPanel()); fp.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingCreateGroup())); addTxt = new com.google.gwtexpui.globalkey.client.NpTextBox(); addTxt.setVisibleLength(60); addTxt.addKeyPressHandler(new com.google.gwt.event.dom.client.KeyPressHandler() { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.getCharCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { doCreateGroup(); } } }); addTxt.addKeyUpHandler(new com.google.gwt.event.dom.client.KeyUpHandler() { @java.lang.Override public void onKeyUp(com.google.gwt.event.dom.client.KeyUpEvent event) { addNew.setEnabled((!(addTxt.getText().trim().isEmpty()))); } }); fp.add(addTxt); addNew = new com.google.gwt.user.client.ui.Button(Util.C.buttonCreateGroup()); addNew.setEnabled(false); addNew.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { doCreateGroup(); } }); fp.add(addNew); add(fp); }",2a459cf633f6cac6a5e7670f7183dc5f79442294,onInitUI(),onInitUI(),2,7,"@java.lang.Override protected void onInitUI() { super.onInitUI(); setPageTitle(Util.C.groupListTitle()); groups = new com.google.gerrit.client.admin.GroupTable(true, com.google.gerrit.common.PageLinks.ADMIN_GROUPS); add(groups); final com.google.gwt.user.client.ui.VerticalPanel fp = new com.google.gwt.user.client.ui.VerticalPanel(); fp.setStyleName(Gerrit.RESOURCES.css().addSshKeyPanel()); fp.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingCreateGroup())); addTxt = new com.google.gwtexpui.globalkey.client.NpTextBox(); addTxt.setVisibleLength(60); addTxt.addKeyPressHandler(new com.google.gwt.event.dom.client.KeyPressHandler() { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.getCharCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { doCreateGroup(); } } }); fp.add(addTxt); addNew = new com.google.gwt.user.client.ui.Button(Util.C.buttonCreateGroup()); addNew.setEnabled(false); addNew.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { doCreateGroup(); } }); fp.add(addNew); add(fp); new com.google.gerrit.client.ui.OnEditEnabler(addNew, addTxt); }",dfee7ab949fb3a620a99def142b1b3e686b589cb,onInitUI(),41365,454,402
99230,src_test_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_EvictCacheRestApiServletTest.java,3.0,@org.junit.Test public void evictProjectList() throws java.lang.Exception { configureMocksFor(Constants.PROJECT_LIST); verifyResponseIsOK(); },fab94cf5c7d027bf11f38634c10aa41f2a9d6dbf,@org.junit.Test public void evictProjectList() throws java.lang.Exception { configureMocksFor(CacheContants.PROJECT_LIST); verifyResponseIsOK(); },6c3fb6bde13f50fabc26cb9d0a359368b5d1ecc2,evictProjectList(),evictProjectList(),6,3,@org.junit.Test public void evictProjectList() throws java.lang.Exception { configureMocksFor(Constants.PROJECT_LIST); verifyResponseIsOK(); },fab94cf5c7d027bf11f38634c10aa41f2a9d6dbf,evictProjectList(),188590,39,36
86297,gerrit-server_src_main_java_com_google_gerrit_server_config_GetServerInfo.java,1.0,"private com.google.gerrit.extensions.common.GerritInfo getGerritInfo(org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.config.AllProjectsName allProjectsName, com.google.gerrit.server.config.AllUsersName allUsersName) { com.google.gerrit.extensions.common.GerritInfo info = new com.google.gerrit.extensions.common.GerritInfo(); info.allProjects = allProjectsName.get(); info.allUsers = allUsersName.get(); info.reportBugUrl = cfg.getString(""gerrit"", null, ""reportBugUrl""); info.reportBugText = cfg.getString(""gerrit"", null, ""reportBugText""); info.docUrl = getDocUrl(cfg); info.docSearch = docSearcher.isAvailable(); info.editGpgKeys = com.google.gerrit.server.config.GetServerInfo.toBoolean(((enableSignedPush) && (cfg.getBoolean(""gerrit"", null, ""editGpgKeys"", true)))); return info; }",172aac3ee42fd7111df0f712af80d02aaed11c79,"private com.google.gerrit.extensions.common.GerritInfo getGerritInfo(org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.config.AllProjectsName allProjectsName, com.google.gerrit.server.config.AllUsersName allUsersName) { com.google.gerrit.extensions.common.GerritInfo info = new com.google.gerrit.extensions.common.GerritInfo(); info.allProjects = allProjectsName.get(); info.allUsers = allUsersName.get(); info.reportBugUrl = cfg.getString(""gerrit"", null, ""reportBugUrl""); info.reportBugText = cfg.getString(""gerrit"", null, ""reportBugText""); info.docUrl = getDocUrl(cfg); info.docSearch = docSearcher.isAvailable(); info.editGpgKeys = com.google.gerrit.server.config.GetServerInfo.toBoolean(((enableSignedPush) && (cfg.getBoolean(""gerrit"", null, ""editGpgKeys"", true)))); info.uis = java.util.EnumSet.noneOf(com.google.gerrit.extensions.client.UiType.class); if (gerritOptions.enableGwtUi()) { info.uis.add(UiType.GWT); } if (gerritOptions.enablePolyGerrit()) { info.uis.add(UiType.POLYGERRIT); } return info; }",cc45cb88decadeb3dcebe0eecb7967551a28806f,"getGerritInfo(org.eclipse.jgit.lib.Config,com.google.gerrit.server.config.AllProjectsName,com.google.gerrit.server.config.AllUsersName)","getGerritInfo(org.eclipse.jgit.lib.Config,com.google.gerrit.server.config.AllProjectsName,com.google.gerrit.server.config.AllUsersName)",4,1,"private com.google.gerrit.extensions.common.GerritInfo getGerritInfo(org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.config.AllProjectsName allProjectsName, com.google.gerrit.server.config.AllUsersName allUsersName) { com.google.gerrit.extensions.common.GerritInfo info = new com.google.gerrit.extensions.common.GerritInfo(); info.allProjects = allProjectsName.get(); info.allUsers = allUsersName.get(); info.reportBugUrl = cfg.getString(""gerrit"", null, ""reportBugUrl""); info.reportBugText = cfg.getString(""gerrit"", null, ""reportBugText""); info.docUrl = getDocUrl(cfg); info.docSearch = docSearcher.isAvailable(); info.editGpgKeys = com.google.gerrit.server.config.GetServerInfo.toBoolean(((enableSignedPush) && (cfg.getBoolean(""gerrit"", null, ""editGpgKeys"", true)))); info.webUis = java.util.EnumSet.noneOf(com.google.gerrit.extensions.client.UiType.class); if (gerritOptions.enableGwtUi()) { info.webUis.add(UiType.GWT); } if (gerritOptions.enablePolyGerrit()) { info.webUis.add(UiType.POLYGERRIT); } return info; }",d9cf45f046d806c6a4d955c6244dbb013aa47cc8,"getGerritInfo(org.eclipse.jgit.lib.Config,com.google.gerrit.server.config.AllProjectsName,com.google.gerrit.server.config.AllUsersName)",1307,324,327
94813,owners-common_src_test_java_com_vmware_gerrit_owners_common_Config.java,,,,"public void setup() throws java.lang.Exception { org.powermock.api.easymock.PowerMock.mockStatic(com.vmware.gerrit.owners.common.JgitWrapper.class); db = org.powermock.api.easymock.PowerMock.createMock(com.google.gerrit.reviewdb.server.ReviewDb.class); repository = org.powermock.api.easymock.PowerMock.createMock(org.eclipse.jgit.lib.Repository.class); resolver = org.powermock.api.easymock.PowerMock.createMock(com.google.gerrit.server.account.AccountResolver.class); parser = new com.vmware.gerrit.owners.common.ConfigurationParser(resolver, db); resolvingEmailToAccountIdMocking(); }",c6c5a04a61461cb4c67e5d3a4335c257133f61da,,setup(),8,5,public void setup() throws java.lang.Exception { org.powermock.api.easymock.PowerMock.mockStatic(com.vmware.gerrit.owners.common.JgitWrapper.class); db = org.powermock.api.easymock.PowerMock.createMock(com.google.gerrit.reviewdb.server.ReviewDb.class); repository = org.powermock.api.easymock.PowerMock.createMock(org.eclipse.jgit.lib.Repository.class); resolver = org.powermock.api.easymock.PowerMock.createMock(com.google.gerrit.server.account.AccountResolver.class); parser = new com.vmware.gerrit.owners.common.ConfigurationParser(); resolvingEmailToAccountIdMocking(); },72338440cc7985fdf091c0c8adb491914932c9bf,setup(),45578,173,169
61604,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_PatchScriptSettingsPanel.java,4.0,private void setIgnoreWhitespace(com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace s) { for (int i = 0; i < (ignoreWhitespace.getItemCount()); i++) { if (ignoreWhitespace.getValue(i).equals(s.name())) { ignoreWhitespace.setSelectedIndex(i); return; } } ignoreWhitespace.setSelectedIndex(0); },b7993dbad3d9c5ca8651511f6cdd3d85e5ff799f,private void setIgnoreWhitespace(com.google.gerrit.extensions.common.DiffPreferencesInfo.Whitespace s) { for (int i = 0; i < (ignoreWhitespace.getItemCount()); i++) { if (ignoreWhitespace.getValue(i).equals(s.name())) { ignoreWhitespace.setSelectedIndex(i); return; } } ignoreWhitespace.setSelectedIndex(0); },f68c8d7c03824193c8e532e7f485a18564ed7652,setIgnoreWhitespace(com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace),setIgnoreWhitespace(com.google.gerrit.extensions.common.DiffPreferencesInfo.Whitespace),40,9,private void setIgnoreWhitespace(com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace s) { for (int i = 0; i < (ignoreWhitespace.getItemCount()); i++) { if (ignoreWhitespace.getValue(i).equals(s.name())) { ignoreWhitespace.setSelectedIndex(i); return; } } ignoreWhitespace.setSelectedIndex(0); },1a9b0b6bbcd13ccaf13076a36f737bf3b3c89680,setIgnoreWhitespace(com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace),127968,76,76
94512,gerrit-server_src_main_java_com_google_gerrit_server_edit_tree_TreeCreator.java,,,,private java.util.List<org.eclipse.jgit.dircache.DirCacheEditor.PathEdit> getDesiredPathEdits(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException { java.util.List<org.eclipse.jgit.dircache.DirCacheEditor.PathEdit> pathEdits = new java.util.LinkedList<>(); for (com.google.gerrit.server.edit.tree.TreeModification treeModification : treeModifications) { pathEdits.addAll(treeModification.getNecessaryPathEdits(repository)); } return pathEdits; },4a018d28b7f759dcbea2dcf76b91c3c1113160ad,,getDesiredPathEdits(org.eclipse.jgit.lib.Repository),5,4,private java.util.List<org.eclipse.jgit.dircache.DirCacheEditor.PathEdit> getPathEdits(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException { java.util.List<org.eclipse.jgit.dircache.DirCacheEditor.PathEdit> pathEdits = new java.util.LinkedList<>(); for (com.google.gerrit.server.edit.tree.TreeModification treeModification : treeModifications) { pathEdits.addAll(treeModification.getPathEdits(repository)); } return pathEdits; },d000de71b988c1ed018c1076d6902f115c9b0821,getPathEdits(org.eclipse.jgit.lib.Repository),196327,134,129
48920,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen2.java,58.0,"private void renderChangeInfo(com.google.gerrit.client.changes.ChangeInfo info) { changeInfo = info; lastDisplayedUpdate = info.updated(); statusText.setInnerText(com.google.gerrit.client.changes.Util.toLongString(info.status())); boolean current = (info.status().isOpen()) && (revision.equals(info.current_revision())); boolean canSubmit = labels.set(info, current); renderOwner(info); renderReviewers(info); renderActionTextDate(info); renderRevisions(info); renderHistory(info); actions.display(info, revision); star.setValue(info.starred()); permalink.setHref(com.google.gerrit.client.ui.ChangeLink.permalink(changeId)); changeIdText.setInnerText(java.lang.String.valueOf(info.legacy_id())); projectText.setInnerText(info.project()); branchText.setInnerText(info.branch()); idText.setText((""Change-Id: "" + (info.change_id()))); idText.setPreviewText(info.change_id()); reload.set(info); topic.set(info); commit.set(commentLinkProcessor, info, revision); related.set(info, revision); quickApprove.set(info, revision); if (com.google.gerrit.client.Gerrit.isSignedIn()) { replyAction = new com.google.gerrit.client.change.ReplyAction(info, revision, style, reply); if (topic.canEdit()) { keysAction.add(new com.google.gwtexpui.globalkey.client.KeyCommand(0, 't', Util.C.keyEditTopic()) { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { topic.onEdit(); } }); } } if (current) { loadMergeable(info.status(), canSubmit); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(Util.M.changeScreenTitleId(info.id_abbreviated())); if ((info.subject()) != null) { sb.append("": ""); sb.append(info.subject()); } setWindowTitle(sb.toString()); }",79505529de0ceda63f71f263d45616b48a5f09fd,"private void renderChangeInfo(com.google.gerrit.client.changes.ChangeInfo info) { changeInfo = info; lastDisplayedUpdate = info.updated(); statusText.setInnerText(com.google.gerrit.client.changes.Util.toLongString(info.status())); boolean current = (info.status().isOpen()) && (revision.equals(info.current_revision())); boolean canSubmit = labels.set(info, current); renderOwner(info); renderReviewers(info); renderActionTextDate(info); renderRevisions(info); renderHistory(info); actions.display(info, revision); star.setValue(info.starred()); permalink.setHref(com.google.gerrit.client.ui.ChangeLink.permalink(changeId)); changeIdText.setInnerText(java.lang.String.valueOf(info.legacy_id())); projectText.setInnerText(info.project()); branchText.setInnerText(info.branch()); idText.setText((""Change-Id: "" + (info.change_id()))); idText.setPreviewText(info.change_id()); reload.set(info); topic.set(info); commit.set(commentLinkProcessor, info, revision); related.set(info, revision); quickApprove.set(info, revision); if (com.google.gerrit.client.Gerrit.isSignedIn()) { replyAction = new com.google.gerrit.client.change.ReplyAction(info, revision, style, reply); if (topic.canEdit()) { keysAction.add(new com.google.gwtexpui.globalkey.client.KeyCommand(0, 't', Util.C.keyEditTopic()) { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { topic.onEdit(); } }); } } if (current) { loadMergeable(info.status(), canSubmit); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(Util.M.changeScreenTitleId(info.id_abbreviated())); if ((info.subject()) != null) { sb.append("": ""); sb.append(info.subject()); } setWindowTitle(sb.toString()); initEditCommitMessageAction(); }",3bfc743b57c6b9d4c4b25ef3dd24788bcf1e8634,renderChangeInfo(com.google.gerrit.client.changes.ChangeInfo),renderChangeInfo(com.google.gerrit.client.changes.ChangeInfo),10,55,"private void renderChangeInfo(com.google.gerrit.client.changes.ChangeInfo info) { changeInfo = info; lastDisplayedUpdate = info.updated(); statusText.setInnerText(com.google.gerrit.client.changes.Util.toLongString(info.status())); boolean current = (info.status().isOpen()) && (revision.equals(info.current_revision())); boolean canSubmit = labels.set(info, current); renderOwner(info); renderReviewers(info); renderActionTextDate(info); renderRevisions(info); renderHistory(info); actions.display(info, revision); star.setValue(info.starred()); permalink.setHref(com.google.gerrit.client.ui.ChangeLink.permalink(changeId)); changeIdText.setInnerText(java.lang.String.valueOf(info.legacy_id())); projectText.setInnerText(info.project()); branchText.setInnerText(info.branch()); idText.setText((""Change-Id: "" + (info.change_id()))); idText.setPreviewText(info.change_id()); reload.set(info); topic.set(info); commit.set(commentLinkProcessor, info, revision); related.set(info, revision); quickApprove.set(info, revision); if (com.google.gerrit.client.Gerrit.isSignedIn()) { initEditMessageAction(); replyAction = new com.google.gerrit.client.change.ReplyAction(info, revision, style, reply); if (topic.canEdit()) { keysAction.add(new com.google.gwtexpui.globalkey.client.KeyCommand(0, 't', Util.C.keyEditTopic()) { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { topic.onEdit(); } }); } } if (current) { loadMergeable(info.status(), canSubmit); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(Util.M.changeScreenTitleId(info.id_abbreviated())); if ((info.subject()) != null) { sb.append("": ""); sb.append(info.subject()); } setWindowTitle(sb.toString()); }",38f0a912c22aabad495ab0ddfbf3c94501989465,renderChangeInfo(com.google.gerrit.client.changes.ChangeInfo),88482,512,511
79747,gerrit-server_src_main_java_com_google_gerrit_server_account_WatchConfig.java,,,,"java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Collection<com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType>> getProjectWatches() { checkLoaded(); return projectWatches; }",e84d9300bcd88c6ca50169b4712d118abb7a3ce1,,getProjectWatches(),21,8,"java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType>> getProjectWatches() { checkLoaded(); return projectWatches; }",fa52eef11f4dfbe9987707474f6a0dbdf83bbe84,getProjectWatches(),168633,65,65
76265,src_main_java_com_googlesource_gerrit_plugins_uploadvalidator_BlockedKeywordValidator.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,static boolean doCheckBlockedKeywords(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.KEY_CHECK_BLOCKED_KEYWORD_PATTERN).length) > 0; },b965afcc001138aa0e06cb83d21b148bd1b9d5e7,,doCheckBlockedKeywords(com.google.gerrit.server.config.PluginConfig),9,7,static boolean isActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.KEY_CHECK_BLOCKED_KEYWORD_PATTERN).length) > 0; },72d6893048f891e9b837be75902cdfc7665731ee,isActive(com.google.gerrit.server.config.PluginConfig),142063,63,61
47670,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DraftBox.java,13.0,void setEdit(boolean edit) { if (edit) { setOpen(true); removeStyleName(draftStyle.view()); addStyleName(draftStyle.edit()); editArea.setText(contentPanelMessage.getText()); editArea.setFocus(true); } else { removeStyleName(draftStyle.edit()); addStyleName(draftStyle.view()); } resizePaddingWidget(); },210446ac2033e587f23493078237fb1ac60848ee,void setEdit(boolean edit) { if (edit) { setOpen(true); removeStyleName(draftStyle.view()); addStyleName(draftStyle.edit()); editArea.setText(contentPanelMessage.getText()); editArea.setFocus(true); } else { removeStyleName(draftStyle.edit()); addStyleName(draftStyle.view()); } com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { resizePaddingWidget(); } }); },bf2cc99cdd5ff940e5f01af954faf9e66c3d3e1a,setEdit(boolean),setEdit(boolean),4,12,void setEdit(boolean edit) { if (edit) { setOpen(true); removeStyleName(draftStyle.view()); addStyleName(draftStyle.edit()); editArea.setText(contentPanelMessage.getText()); editArea.setFocus(true); } else { removeStyleName(draftStyle.edit()); addStyleName(draftStyle.view()); } resizePaddingWidget(); },210446ac2033e587f23493078237fb1ac60848ee,setEdit(boolean),115286,126,79
62836,gerrit-gwtui_src_main_java_com_google_gerrit_client_editor_EditScreen.java,9.0,"private net.codemirror.lib.Configuration getConfig() { return net.codemirror.lib.Configuration.create().set(""readOnly"", false).set(""cursorBlinkRate"", 0).set(""cursorHeight"", 0.85).set(""lineNumbers"", true).set(""tabSize"", 4).set(""lineWrapping"", false).set(""styleSelectedText"", true).set(""showTrailingSpace"", true).set(""keyMap"", ""default"").set(""mode"", net.codemirror.lib.ModeInjector.getContentType(type)); }",390cf5079723eb048531a3164bad25b9e877fe09,"private net.codemirror.lib.Configuration getConfig() { net.codemirror.mode.ModeInfo mode = net.codemirror.mode.ModeInfo.findMode(type, path); return net.codemirror.lib.Configuration.create().set(""readOnly"", false).set(""cursorBlinkRate"", 0).set(""cursorHeight"", 0.85).set(""lineNumbers"", true).set(""tabSize"", 4).set(""lineWrapping"", false).set(""styleSelectedText"", true).set(""showTrailingSpace"", true).set(""keyMap"", ""default"").set(""mode"", (mode != null ? mode.name() : null)); }",ac752d5b128d68edaf594fda0d7d69e6bce2b33d,getConfig(),getConfig(),5,9,"private net.codemirror.lib.Configuration getConfig() { return net.codemirror.lib.Configuration.create().set(""readOnly"", false).set(""cursorBlinkRate"", 0).set(""cursorHeight"", 0.85).set(""lineNumbers"", true).set(""tabSize"", 4).set(""lineWrapping"", false).set(""styleSelectedText"", true).set(""showTrailingSpace"", true).set(""keyMap"", ""default"").set(""mode"", type); }",a07ceb9ef72d62f2a8524333c6410ec868dc2356,getConfig(),112114,139,100
147190,java_com_google_gerrit_server_audit_AuditService.java,1.0,"public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteGroupsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log delete groups from group event"", e); } } }",c69e31d411013df57124f105ba30ff437d341391,"public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> removedSubgroups, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteGroupsFromGroup(actor, removedSubgroups, groupId, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log delete groups from group event"", e); } } }",a3b094a39d2f1337beb4715d3f2c495ea6ee4bf3,"dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection,java.sql.Timestamp)","dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection,com.google.gerrit.reviewdb.client.AccountGroup$Id,java.sql.Timestamp)",7,3,"public void dispatchDeleteSubgroups(com.google.gerrit.reviewdb.client.Account.Id actor, com.google.gerrit.reviewdb.client.AccountGroup.UUID updatedGroup, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> deletedSubgroups, java.sql.Timestamp deletedOn) { for (com.google.gerrit.server.audit.group.GroupAuditListener auditListener : groupAuditListeners) { try { com.google.gerrit.server.audit.group.GroupSubgroupAuditEvent event = com.google.gerrit.server.audit.group.GroupSubgroupAuditEvent.create(actor, updatedGroup, deletedSubgroups, deletedOn); auditListener.onDeleteSubgroups(event); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log delete groups from group event"", e); } } }",af5a8598e37373678a2d8ada2788f16a3bb7bb50,"dispatchDeleteSubgroups(com.google.gerrit.reviewdb.client.Account$Id,com.google.gerrit.reviewdb.client.AccountGroup$UUID,com.google.common.collect.ImmutableSet,java.sql.Timestamp)",118660,175,220
89872,gerrit-server_src_test_java_com_google_gerrit_server_notedb_ChangeNotesTest.java,24.0,"@org.junit.Test public void approvalsOnePatchSet() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.putApproval(""Verified"", ((short) (1))); update.putApproval(""Code-Review"", ((short) (-1))); update.commit(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); assertThat(notes.getApprovals().keySet()).containsExactly(c.currentPatchSetId()); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> psas = notes.getApprovals().get(c.currentPatchSetId()); assertThat(psas).hasSize(2); assertThat(psas.get(0).getPatchSetId()).isEqualTo(c.currentPatchSetId()); assertThat(psas.get(0).getAccountId().get()).isEqualTo(1); assertThat(psas.get(0).getLabel()).isEqualTo(""Code-Review""); assertThat(psas.get(0).getValue()).isEqualTo(((short) (-1))); assertThat(psas.get(0).getGranted()).isEqualTo(truncate(after(c, 2000))); assertThat(psas.get(1).getPatchSetId()).isEqualTo(c.currentPatchSetId()); assertThat(psas.get(1).getAccountId().get()).isEqualTo(1); assertThat(psas.get(1).getLabel()).isEqualTo(""Verified""); assertThat(psas.get(1).getValue()).isEqualTo(((short) (1))); assertThat(psas.get(1).getGranted()).isEqualTo(psas.get(0).getGranted()); }",121f460c80f30747fb69c40e7b0078d7df4c6286,"@org.junit.Test public void approvalsOnePatchSet() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.putApproval(""Verified"", ((short) (1))); update.putApproval(""Code-Review"", ((short) (-1))); update.commit(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); assertThat(notes.getApprovals().keySet()).containsExactly(c.currentPatchSetId()); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> psas = notes.getApprovals().get(c.currentPatchSetId()); assertThat(psas).hasSize(2); assertThat(psas.get(0).getPatchSetId()).isEqualTo(c.currentPatchSetId()); assertThat(psas.get(0).getAccountId().get()).isEqualTo(1); assertThat(psas.get(0).getLabel()).isEqualTo(""Code-Review""); assertThat(psas.get(0).getValue()).isEqualTo(((short) (-1))); assertThat(psas.get(0).getGranted()).isEqualTo(truncate(after(c, 3000))); assertThat(psas.get(1).getPatchSetId()).isEqualTo(c.currentPatchSetId()); assertThat(psas.get(1).getAccountId().get()).isEqualTo(1); assertThat(psas.get(1).getLabel()).isEqualTo(""Verified""); assertThat(psas.get(1).getValue()).isEqualTo(((short) (1))); assertThat(psas.get(1).getGranted()).isEqualTo(psas.get(0).getGranted()); }",9f4cdd276b018e8297e3b2e52b929b763d32de20,approvalsOnePatchSet(),approvalsOnePatchSet(),14,27,"@org.junit.Test public void approvalsOnePatchSet() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.putApproval(""Verified"", ((short) (1))); update.putApproval(""Code-Review"", ((short) (-1))); update.commit(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); assertThat(notes.getApprovals().keySet()).containsExactly(c.currentPatchSetId()); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> psas = notes.getApprovals().get(c.currentPatchSetId()); assertThat(psas).hasSize(2); assertThat(psas.get(0).getPatchSetId()).isEqualTo(c.currentPatchSetId()); assertThat(psas.get(0).getAccountId().get()).isEqualTo(1); assertThat(psas.get(0).getLabel()).isEqualTo(""Code-Review""); assertThat(psas.get(0).getValue()).isEqualTo(((short) (-1))); assertThat(psas.get(0).getGranted()).isEqualTo(truncate(after(c, 2000))); assertThat(psas.get(1).getPatchSetId()).isEqualTo(c.currentPatchSetId()); assertThat(psas.get(1).getAccountId().get()).isEqualTo(1); assertThat(psas.get(1).getLabel()).isEqualTo(""Verified""); assertThat(psas.get(1).getValue()).isEqualTo(((short) (1))); assertThat(psas.get(1).getGranted()).isEqualTo(psas.get(0).getGranted()); }",121f460c80f30747fb69c40e7b0078d7df4c6286,approvalsOnePatchSet(),206679,368,367
61683,src_main_java_com_google_gwtorm_jdbc_JdbcAccess.java,13.0,"private java.util.Collection<T> attemptUpdateAsBatch(final java.lang.Iterable<T> instances) throws com.google.gwtorm.server.OrmException { java.util.Collection<T> inserts = null; try { java.sql.PreparedStatement ps = null; try { int cnt = 0; java.util.List<T> allInstances = new java.util.ArrayList<>(); for (final T o : instances) { if (ps == null) { ps = schema.getConnection().prepareStatement(getUpdateOneSql()); } bindOneUpdate(ps, o); ps.addBatch(); allInstances.add(o); cnt++; } if (0 < cnt) { final int[] states = ps.executeBatch(); if (states == null) { inserts = allInstances; } else { int i = 0; for (T o : allInstances) { if (((states.length) <= i) || ((states[i]) != 1)) { if (inserts == null) { inserts = new java.util.ArrayList<>((cnt - i)); } inserts.add(o); } i++; } } } } finally { if (ps != null) { ps.close(); } } } catch (java.sql.SQLException e) { throw convertError(""update"", e); } return inserts; }",63e9d1f1a3b8e7d04f19e07aa880aa6fedaf5b06,"private java.util.Collection<T> attemptUpdateAsBatch(final java.lang.Iterable<T> instances) throws com.google.gwtorm.server.OrmException { java.util.Collection<T> inserts = null; try { java.sql.PreparedStatement ps = null; try { int cnt = 0; java.util.List<T> allInstances = new java.util.ArrayList<>(); for (final T o : instances) { if (ps == null) { ps = schema.getConnection().prepareStatement(getUpdateOneSql()); } bindOneUpdate(ps, o); ps.addBatch(); allInstances.add(o); cnt++; } if ((0 < cnt) && (ps != null)) { final int[] states = ps.executeBatch(); if (states == null) { inserts = allInstances; } else { int i = 0; for (T o : allInstances) { if (((states.length) <= i) || ((states[i]) != 1)) { if (inserts == null) { inserts = new java.util.ArrayList<>((cnt - i)); } inserts.add(o); } i++; } } } } finally { if (ps != null) { ps.close(); } } } catch (java.sql.SQLException e) { throw convertError(""update"", e); } return inserts; }",dbbd448316c60cfe53e8f024e4b1d5462e8f13a6,attemptUpdateAsBatch(java.lang.Iterable),attemptUpdateAsBatch(java.lang.Iterable),2,13,"private java.util.Collection<T> attemptUpdateAsBatch(final java.lang.Iterable<T> instances) throws com.google.gwtorm.server.OrmException { java.util.Collection<T> inserts = null; try { java.sql.PreparedStatement ps = null; try { int cnt = 0; java.util.List<T> allInstances = new java.util.ArrayList<>(); for (final T o : instances) { if (ps == null) { ps = schema.getConnection().prepareStatement(getUpdateOneSql()); } bindOneUpdate(ps, o); ps.addBatch(); allInstances.add(o); cnt++; } if (0 < cnt) { com.google.common.base.Preconditions.checkNotNull(ps); final int[] states = ps.executeBatch(); if (states == null) { inserts = allInstances; } else { int i = 0; for (T o : allInstances) { if (((states.length) <= i) || ((states[i]) != 1)) { if (inserts == null) { inserts = new java.util.ArrayList<>((cnt - i)); } inserts.add(o); } i++; } } } } finally { if (ps != null) { ps.close(); } } } catch (java.sql.SQLException e) { throw convertError(""update"", e); } return inserts; }",5c171a5021df4a99b7c3f70de3fa3a4d1c64d7a5,attemptUpdateAsBatch(java.lang.Iterable),51075,288,296
100690,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_ChangeReviewersByEmailIT.java,,,,"@org.junit.Test public void addedReviewersGetNotified() throws java.lang.Exception { assume().that(notesMigration.enabled()).isTrue(); com.google.gerrit.extensions.common.AccountInfo acc = new com.google.gerrit.extensions.common.AccountInfo(""Foo Bar"", ""foo.bar@gerritcodereview.com""); for (com.google.gerrit.extensions.client.ReviewerState state : com.google.common.collect.ImmutableList.of(ReviewerState.CC, ReviewerState.REVIEWER)) { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.AddReviewerInput input = new com.google.gerrit.extensions.api.changes.AddReviewerInput(); input.reviewer = com.google.gerrit.acceptance.rest.change.ChangeReviewersByEmailIT.toRFCAddressString(acc); input.state = state; gApi.changes().id(r.getChangeId()).addReviewer(input); java.util.List<com.google.gerrit.testutil.FakeEmailSender.Message> messages = sender.getMessages(); assertThat(messages).hasSize(1); assertThat(messages.get(0).rcpt()).containsExactly(com.google.gerrit.server.mail.Address.parse(input.reviewer)); sender.clear(); } }",902ef9b551fca142e23499c0feffeae12506e21b,,addedReviewersGetNotified(),5,5,"@org.junit.Test public void addedReviewersGetNotified() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.common.AccountInfo acc = new com.google.gerrit.extensions.common.AccountInfo(""Foo Bar"", ""foo.bar@gerritcodereview.com""); for (com.google.gerrit.extensions.client.ReviewerState state : com.google.common.collect.ImmutableList.of(ReviewerState.CC, ReviewerState.REVIEWER)) { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.AddReviewerInput input = new com.google.gerrit.extensions.api.changes.AddReviewerInput(); input.reviewer = com.google.gerrit.acceptance.rest.change.ChangeReviewersByEmailIT.toRfcAddressString(acc); input.state = state; gApi.changes().id(r.getChangeId()).addReviewer(input); java.util.List<com.google.gerrit.testutil.FakeEmailSender.Message> messages = sender.getMessages(); assertThat(messages).hasSize(1); assertThat(messages.get(0).rcpt()).containsExactly(com.google.gerrit.server.mail.Address.parse(input.reviewer)); sender.clear(); } }",49c83b560f1842d1d96c2c401e9238d73559f880,addedReviewersGetNotified(),87084,321,322
49603,gerrit-server_src_main_java_com_google_gerrit_server_change_Publish.java,,,,"@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.RevisionResource resource) { com.google.gerrit.reviewdb.client.PatchSet.Id current = resource.getChange().currentPatchSetId(); try { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(java.lang.String.format(""Publish Revision %d"", resource.getPatchSet().getPatchSetId())).setVisible((((resource.getPatchSet().isDraft()) && (resource.getPatchSet().getId().equals(current))) && (resource.getControl().canPublish(dbProvider.get())))); } catch (com.google.gwtorm.server.OrmException e) { throw new java.lang.IllegalStateException(e); } }",a6f96e0bd5f0fcb2f80ded2b0876f904c6191ee6,,getDescription(com.google.gerrit.server.change.RevisionResource),20,3,"@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.RevisionResource rsrc) { com.google.gerrit.reviewdb.client.PatchSet.Id current = rsrc.getChange().currentPatchSetId(); try { return new com.google.gerrit.extensions.webui.UiAction.Description().setTitle(java.lang.String.format(""Publish Revision %d"", rsrc.getPatchSet().getPatchSetId())).setVisible((((rsrc.getPatchSet().isDraft()) && (rsrc.getPatchSet().getId().equals(current))) && (rsrc.getControl().canPublish(dbProvider.get())))); } catch (com.google.gwtorm.server.OrmException e) { throw new java.lang.IllegalStateException(e); } }",c090243401a97ea783fdfee1bc5c0d86dfbc996a,getDescription(com.google.gerrit.server.change.RevisionResource),173953,181,187
60754,src_main_java_com_googlesource_gerrit_plugins_xdocs_formatter_AsciidoctorFormatter.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.lang.String readCss(java.util.concurrent.atomic.AtomicBoolean file) throws java.io.IOException { java.lang.String name = ""asciidoc.css""; java.net.URL url = com.googlesource.gerrit.plugins.xdocs.formatter.AsciidoctorFormatter.class.getResource(name); if (url == null) { throw new java.io.FileNotFoundException((""Resource "" + name)); } file.set(""file"".equals(url.getProtocol())); try (java.io.InputStream in = url.openStream()) { try (org.eclipse.jgit.util.TemporaryBuffer.Heap tmp = new org.eclipse.jgit.util.TemporaryBuffer.Heap((128 * 1024))) { tmp.copy(in); return new java.lang.String(tmp.toByteArray(), java.nio.charset.StandardCharsets.UTF_8); } } }",526a1ff770968fb9bf370db9bcb159e29bb2cc8b,,readCss(java.util.concurrent.atomic.AtomicBoolean),9,0,"private static java.util.Properties readAttributes() throws java.io.IOException { java.util.Properties attributes = new java.util.Properties(); try (java.io.InputStream in = com.googlesource.gerrit.plugins.xdocs.formatter.AsciidoctorFormatter.class.getResourceAsStream(""asciidoctor.properties"")) { attributes.load(in); } return attributes; }",43aaf78d04e202d06a8db17c50a8ea4f916e1e91,readAttributes(),1319,193,81
64561,gitiles-servlet_src_main_java_com_google_gitiles_GitilesFilter.java,6.0,"@java.lang.Override public synchronized void init(javax.servlet.FilterConfig config) throws javax.servlet.ServletException { super.init(config); setDefaultFields(config); for (com.google.gitiles.GitilesView.Type type : GitilesView.Type.values()) { if (!(servlets.containsKey(type))) { servlets.put(type, getDefaultHandler(type)); } } javax.servlet.Filter repositoryFilter = new org.eclipse.jgit.http.server.RepositoryFilter(resolver); javax.servlet.Filter viewFilter = new com.google.gitiles.ViewFilter(accessFactory, urls, visibilityCache); javax.servlet.Filter dispatchFilter = new com.google.gitiles.GitilesFilter.DispatchFilter(filters, servlets); org.eclipse.jgit.http.server.glue.ServletBinder root = serveRegex(com.google.gitiles.GitilesFilter.ROOT_REGEX).through(viewFilter); if ((gitwebRedirect) != null) { root.through(gitwebRedirect); } root.through(dispatchFilter); serveRegex(com.google.gitiles.GitilesFilter.REPO_REGEX).through(repositoryFilter).through(viewFilter).through(dispatchFilter); serveRegex(com.google.gitiles.GitilesFilter.REPO_PATH_REGEX).through(repositoryFilter).through(viewFilter).through(dispatchFilter); initialized = true; }",67573378e17d3db5044fc89002eba5b64cbbbca4,"@java.lang.Override public synchronized void init(javax.servlet.FilterConfig config) throws javax.servlet.ServletException { super.init(config); setDefaultFields(config); for (com.google.gitiles.GitilesView.Type type : GitilesView.Type.values()) { if ((!(servlets.containsKey(type))) && (type != (GitilesView.Type.SHOW))) { servlets.put(type, getDefaultHandler(type)); } } javax.servlet.Filter repositoryFilter = new org.eclipse.jgit.http.server.RepositoryFilter(resolver); javax.servlet.Filter viewFilter = new com.google.gitiles.ViewFilter(accessFactory, urls, visibilityCache); javax.servlet.Filter dispatchFilter = new com.google.gitiles.GitilesFilter.DispatchFilter(filters, servlets); org.eclipse.jgit.http.server.glue.ServletBinder root = serveRegex(com.google.gitiles.GitilesFilter.ROOT_REGEX).through(viewFilter); if ((gitwebRedirect) != null) { root.through(gitwebRedirect); } root.through(dispatchFilter); serveRegex(com.google.gitiles.GitilesFilter.REPO_REGEX).through(repositoryFilter).through(viewFilter).through(dispatchFilter); serveRegex(com.google.gitiles.GitilesFilter.REPO_PATH_REGEX).through(repositoryFilter).through(viewFilter).through(dispatchFilter); initialized = true; }",14f395b99d14344b3e7936561b9d595514d23e14,init(javax.servlet.FilterConfig),init(javax.servlet.FilterConfig),2,6,"@java.lang.Override public synchronized void init(javax.servlet.FilterConfig config) throws javax.servlet.ServletException { super.init(config); setDefaultFields(config); for (com.google.gitiles.GitilesView.Type type : GitilesView.Type.values()) { if (!(servlets.containsKey(type))) { servlets.put(type, getDefaultHandler(type)); } } javax.servlet.Filter repositoryFilter = new org.eclipse.jgit.http.server.RepositoryFilter(resolver); javax.servlet.Filter viewFilter = new com.google.gitiles.ViewFilter(accessFactory, urls, visibilityCache); javax.servlet.Filter dispatchFilter = new com.google.gitiles.GitilesFilter.DispatchFilter(filters, servlets); org.eclipse.jgit.http.server.glue.ServletBinder root = serveRegex(com.google.gitiles.GitilesFilter.ROOT_REGEX).through(viewFilter); if ((gitwebRedirect) != null) { root.through(gitwebRedirect); } root.through(dispatchFilter); serveRegex(com.google.gitiles.GitilesFilter.REPO_REGEX).through(repositoryFilter).through(viewFilter).through(dispatchFilter); serveRegex(com.google.gitiles.GitilesFilter.REPO_PATH_REGEX).through(repositoryFilter).through(viewFilter).through(dispatchFilter); initialized = true; }",67573378e17d3db5044fc89002eba5b64cbbbca4,init(javax.servlet.FilterConfig),169166,328,312
54411,gerrit-server_src_main_java_com_google_gerrit_server_git_RebaseSorter.java,1.0,java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sort(java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> incoming) throws java.io.IOException { final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sorted = new java.util.ArrayList<com.google.gerrit.server.git.CodeReviewCommit>(); final java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> sort = new java.util.HashSet<com.google.gerrit.server.git.CodeReviewCommit>(incoming); while (!(sort.isEmpty())) { final com.google.gerrit.server.git.CodeReviewCommit n = com.google.gerrit.server.git.RebaseSorter.removeOne(sort); rw.resetRetain(canMergeFlag); rw.markStart(n); for (org.eclipse.jgit.revwalk.RevCommit c : accepted) { rw.markUninteresting(c); } com.google.gerrit.server.git.CodeReviewCommit c; final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> contents = new java.util.ArrayList<com.google.gerrit.server.git.CodeReviewCommit>(); while ((c = ((com.google.gerrit.server.git.CodeReviewCommit) (rw.next()))) != null) { if ((!(c.has(canMergeFlag))) || (!(incoming.contains(c)))) { if ((n.missing) == null) { n.statusCode = CommitMergeStatus.MISSING_DEPENDENCY; n.missing = new java.util.ArrayList<com.google.gerrit.server.git.CodeReviewCommit>(); } n.missing.add(c); } else { contents.add(c); } } if ((n.statusCode) == (CommitMergeStatus.MISSING_DEPENDENCY)) { continue; } sort.removeAll(contents); java.util.Collections.reverse(contents); sorted.removeAll(contents); sorted.addAll(contents); } return sorted; },638051541558cb2e7668fa69d60da8d143730527,public java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sort(java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> incoming) throws java.io.IOException { final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sorted = new java.util.ArrayList<com.google.gerrit.server.git.CodeReviewCommit>(); final java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> sort = new java.util.HashSet<com.google.gerrit.server.git.CodeReviewCommit>(incoming); while (!(sort.isEmpty())) { final com.google.gerrit.server.git.CodeReviewCommit n = com.google.gerrit.server.git.RebaseSorter.removeOne(sort); rw.resetRetain(canMergeFlag); rw.markStart(n); for (org.eclipse.jgit.revwalk.RevCommit c : accepted) { rw.markUninteresting(c); } com.google.gerrit.server.git.CodeReviewCommit c; final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> contents = new java.util.ArrayList<com.google.gerrit.server.git.CodeReviewCommit>(); while ((c = ((com.google.gerrit.server.git.CodeReviewCommit) (rw.next()))) != null) { if ((!(c.has(canMergeFlag))) || (!(incoming.contains(c)))) { if ((n.missing) == null) { n.statusCode = CommitMergeStatus.MISSING_DEPENDENCY; n.missing = new java.util.ArrayList<com.google.gerrit.server.git.CodeReviewCommit>(); } n.missing.add(c); } else { contents.add(c); } } if ((n.statusCode) == (CommitMergeStatus.MISSING_DEPENDENCY)) { continue; } sort.removeAll(contents); java.util.Collections.reverse(contents); sorted.removeAll(contents); sorted.addAll(contents); } return sorted; },4e4bcea7deb320c7b93230bdc33598c69dee2009,sort(java.util.Collection),sort(java.util.Collection),4,1,public java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sort(java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> incoming) throws java.io.IOException { final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sorted = new java.util.ArrayList<com.google.gerrit.server.git.CodeReviewCommit>(); final java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> sort = new java.util.HashSet<com.google.gerrit.server.git.CodeReviewCommit>(incoming); while (!(sort.isEmpty())) { final com.google.gerrit.server.git.CodeReviewCommit n = com.google.gerrit.server.git.RebaseSorter.removeOne(sort); rw.resetRetain(canMergeFlag); rw.markStart(n); for (org.eclipse.jgit.revwalk.RevCommit c : accepted) { rw.markUninteresting(c); } com.google.gerrit.server.git.CodeReviewCommit c; final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> contents = new java.util.ArrayList<com.google.gerrit.server.git.CodeReviewCommit>(); while ((c = ((com.google.gerrit.server.git.CodeReviewCommit) (rw.next()))) != null) { if ((!(c.has(canMergeFlag))) || (!(incoming.contains(c)))) { if ((n.missing) == null) { n.setStatusCode(CommitMergeStatus.MISSING_DEPENDENCY); n.missing = new java.util.ArrayList<com.google.gerrit.server.git.CodeReviewCommit>(); } n.missing.add(c); } else { contents.add(c); } } if ((n.getStatusCode()) == (CommitMergeStatus.MISSING_DEPENDENCY)) { continue; } sort.removeAll(contents); java.util.Collections.reverse(contents); sorted.removeAll(contents); sorted.addAll(contents); } return sorted; },e52a39b1d7980273d95a7fbde977925e1300b5b8,sort(java.util.Collection),64615,483,483
39791,gerrit-server_src_main_java_com_google_gerrit_server_ChangeUtil.java,13.0,"public static java.lang.String messageUUID(final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final byte[] raw = new byte[8]; com.google.gerrit.server.ChangeUtil.fill(raw, db); return org.eclipse.jgit.util.Base64.encodeBytes(raw); }",71ecee9d2faac96eeca120c174f6ef741633b585,"public static java.lang.String messageUUID(final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final byte[] raw = new byte[8]; com.google.gerrit.server.ChangeUtil.fill(raw, db); java.lang.String r = org.eclipse.jgit.util.Base64.encodeBytes(raw); while (r.endsWith(""="")) { r = r.substring(0, ((r.length()) - 1)); } return r.replace('+', '.').replace('/', '-'); }",ab474d9ada2e8c7403076b8bf6a6db1dc8c92547,messageUUID(com.google.gerrit.reviewdb.server.ReviewDb),messageUUID(com.google.gerrit.reviewdb.server.ReviewDb),3,13,"public static java.lang.String messageUUID(final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final byte[] raw = new byte[8]; com.google.gerrit.server.ChangeUtil.fill(raw, db); return com.google.common.base.CharMatcher.is('A').trimLeadingFrom(com.google.common.base.CharMatcher.is('=').trimTrailingFrom(org.eclipse.jgit.util.Base64.encodeBytes(raw))).replace('+', '.').replace('/', '-'); }",b49cde6451c43bd0e906346701b98b12aae6ea1c,messageUUID(com.google.gerrit.reviewdb.server.ReviewDb),51790,127,132
43884,gerrit-server_src_main_java_com_google_gerrit_server_change_ListDrafts.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,protected boolean useAccountLoader() { return false; },4c4fc85d3822a0603036a9d2210ccf942c005c58,,useAccountLoader(),2,2,protected boolean includeAuthorInfo() { return false; },0484dbe4d86f53668a615938e26227497919196b,includeAuthorInfo(),51993,11,11
71940,gerrit-server_src_main_java_com_google_gerrit_server_git_strategy_MergeIfNecessary.java,1.0,"@java.lang.Override protected com.google.gerrit.server.git.MergeTip _run(com.google.gerrit.server.git.CodeReviewCommit branchTip, java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.MergeException { java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sorted = args.mergeUtil.reduceToMinimalMerge(args.mergeSorter, toMerge); com.google.gerrit.server.git.MergeTip mergeTip; if (branchTip == null) { mergeTip = new com.google.gerrit.server.git.MergeTip(sorted.get(0), toMerge); branchTip = sorted.remove(0); } else { mergeTip = new com.google.gerrit.server.git.MergeTip(branchTip, toMerge); branchTip = args.mergeUtil.getFirstFastForward(branchTip, args.rw, sorted); } mergeTip.moveTipTo(branchTip, branchTip); while (!(sorted.isEmpty())) { com.google.gerrit.server.git.CodeReviewCommit mergedFrom = sorted.remove(0); org.eclipse.jgit.lib.PersonIdent serverIdent = args.serverIdent.get(); org.eclipse.jgit.lib.PersonIdent caller = args.caller.newCommitterIdent(serverIdent.getWhen(), serverIdent.getTimeZone()); branchTip = args.mergeUtil.mergeOneCommit(caller, serverIdent, args.repo, args.rw, args.inserter, args.canMergeFlag, args.destBranch, branchTip, mergedFrom); mergeTip.moveTipTo(branchTip, mergedFrom); } args.mergeUtil.markCleanMerges(args.rw, args.canMergeFlag, branchTip, args.alreadyAccepted); setRefLogIdent(); return mergeTip; }",1175fe3dd32658e6b369cc50318bb9244b2fcfba,"@java.lang.Override protected com.google.gerrit.server.git.MergeTip _run(com.google.gerrit.server.git.CodeReviewCommit branchTip, java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.IntegrateException { java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sorted = args.mergeUtil.reduceToMinimalMerge(args.mergeSorter, toMerge); com.google.gerrit.server.git.MergeTip mergeTip; if (branchTip == null) { mergeTip = new com.google.gerrit.server.git.MergeTip(sorted.get(0), toMerge); branchTip = sorted.remove(0); } else { mergeTip = new com.google.gerrit.server.git.MergeTip(branchTip, toMerge); branchTip = args.mergeUtil.getFirstFastForward(branchTip, args.rw, sorted); } mergeTip.moveTipTo(branchTip, branchTip); while (!(sorted.isEmpty())) { com.google.gerrit.server.git.CodeReviewCommit mergedFrom = sorted.remove(0); org.eclipse.jgit.lib.PersonIdent serverIdent = args.serverIdent.get(); org.eclipse.jgit.lib.PersonIdent caller = args.caller.newCommitterIdent(serverIdent.getWhen(), serverIdent.getTimeZone()); branchTip = args.mergeUtil.mergeOneCommit(caller, serverIdent, args.repo, args.rw, args.inserter, args.canMergeFlag, args.destBranch, branchTip, mergedFrom); mergeTip.moveTipTo(branchTip, mergedFrom); } args.mergeUtil.markCleanMerges(args.rw, args.canMergeFlag, branchTip, args.alreadyAccepted); setRefLogIdent(); return mergeTip; }",a83bd5af1edceee9170403294fb75c4b6236e681,"_run(com.google.gerrit.server.git.CodeReviewCommit,java.util.Collection)","_run(com.google.gerrit.server.git.CodeReviewCommit,java.util.Collection)",2,1,"@java.lang.Override protected com.google.gerrit.server.git.MergeTip _run(com.google.gerrit.server.git.CodeReviewCommit branchTip, java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.IntegrationException { java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sorted = args.mergeUtil.reduceToMinimalMerge(args.mergeSorter, toMerge); com.google.gerrit.server.git.MergeTip mergeTip; if (branchTip == null) { mergeTip = new com.google.gerrit.server.git.MergeTip(sorted.get(0), toMerge); branchTip = sorted.remove(0); } else { mergeTip = new com.google.gerrit.server.git.MergeTip(branchTip, toMerge); branchTip = args.mergeUtil.getFirstFastForward(branchTip, args.rw, sorted); } mergeTip.moveTipTo(branchTip, branchTip); while (!(sorted.isEmpty())) { com.google.gerrit.server.git.CodeReviewCommit mergedFrom = sorted.remove(0); org.eclipse.jgit.lib.PersonIdent serverIdent = args.serverIdent.get(); org.eclipse.jgit.lib.PersonIdent caller = args.caller.newCommitterIdent(serverIdent.getWhen(), serverIdent.getTimeZone()); branchTip = args.mergeUtil.mergeOneCommit(caller, serverIdent, args.repo, args.rw, args.inserter, args.canMergeFlag, args.destBranch, branchTip, mergedFrom); mergeTip.moveTipTo(branchTip, mergedFrom); } args.mergeUtil.markCleanMerges(args.rw, args.canMergeFlag, branchTip, args.alreadyAccepted); setRefLogIdent(); return mergeTip; }",2a6a2b281c53c3fbd0709b3fe75596b42ab695c6,"_run(com.google.gerrit.server.git.CodeReviewCommit,java.util.Collection)",172415,423,422
41813,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,7.0,"public java.util.Collection<com.google.gerrit.reviewdb.client.PatchSetApproval> currentApprovals(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws com.google.gwtorm.server.OrmException { if ((currentApprovals) == null) { com.google.gerrit.reviewdb.client.Change c = change(db); if (c == null) { currentApprovals = java.util.Collections.emptyList(); } else if ((approvals) != null) { java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, java.util.Collection<com.google.gerrit.reviewdb.client.PatchSetApproval>> map = approvalsMap(db); currentApprovals = map.get(c.currentPatchSetId()); if ((currentApprovals) == null) { currentApprovals = java.util.Collections.emptyList(); map.put(c.currentPatchSetId(), currentApprovals); } } else { currentApprovals = db.get().patchSetApprovals().byPatchSet(c.currentPatchSetId()).toList(); } } return currentApprovals; }",75f4374c72b59d6ca4def1944251008ad04b262e,public java.util.Collection<com.google.gerrit.reviewdb.client.PatchSetApproval> currentApprovals(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws com.google.gwtorm.server.OrmException { if ((currentApprovals) == null) { com.google.gerrit.reviewdb.client.Change c = change(db); if (c == null) { currentApprovals = java.util.Collections.emptyList(); } else if ((approvalsMap) != null) { return approvalsMap.get(c.currentPatchSetId()); } else { currentApprovals = db.get().patchSetApprovals().byPatchSet(c.currentPatchSetId()).toList(); } } return currentApprovals; },f9a6fc8f4b6ebe14d4d44996a34640996391a757,currentApprovals(com.google.inject.Provider),currentApprovals(com.google.inject.Provider),10,16,public java.util.Collection<com.google.gerrit.reviewdb.client.PatchSetApproval> currentApprovals(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws com.google.gwtorm.server.OrmException { if ((currentApprovals) == null) { com.google.gerrit.reviewdb.client.Change c = change(db); if (c == null) { currentApprovals = java.util.Collections.emptyList(); } else if (((approvals) != null) && (((limitedIds) == null) || (limitedIds.contains(c.currentPatchSetId())))) { return approvals.get(c.currentPatchSetId()); } else { currentApprovals = db.get().patchSetApprovals().byPatchSet(c.currentPatchSetId()).toList(); } } return currentApprovals; },bada0b8742f7a16669651ab14868d3f2b8494701,currentApprovals(com.google.inject.Provider),79198,184,204
141732,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,26.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void expectWriteGroupToReviewDbBlockedException() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.RestApiException.class); exception.expectCause(new org.hamcrest.BaseMatcher<java.lang.Throwable>() { @java.lang.Override public boolean matches(java.lang.Object item) { return (item instanceof com.google.gwtorm.server.OrmException) && (""Updates to groups in ReviewDb are blocked"".equals(((com.google.gwtorm.server.OrmException) (item)).getMessage())); } @java.lang.Override public void describeTo(org.hamcrest.Description description) { description.appendText(""OrmException: Updates to groups in ReviewDb are blocked""); } }); }",4c4aff25611e0fdfe0b22b5cc6f87f1970515d4c,,expectWriteGroupToReviewDbBlockedException(),2,55,"private void assertWriteGroupToReviewDbBlockedException(java.lang.Exception e) throws java.lang.Exception { java.lang.Throwable t = com.google.common.base.Throwables.getRootCause(e); assertThat(t).isInstanceOf(com.google.gwtorm.server.OrmException.class); assertThat(t.getMessage()).isEqualTo(""Updates to groups in ReviewDb are blocked""); }",54b6df98024588e713c4924c64d536753fd402a0,assertWriteGroupToReviewDbBlockedException(java.lang.Exception),146266,171,90
163935,gerrit-server_src_main_java_com_google_gerrit_server_api_accounts_AccountApiImpl.java,6.0,"@java.lang.Override public void addEmail(com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), input.email); try { createEmailFactory.create(input.email).apply(rsrc, input); } catch (com.google.gerrit.common.errors.EmailException | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot add email"", e); } }",e910a4ff0b9f8f18449fb36f3a8719ebf3aa32ac,"@java.lang.Override public void addEmail(com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), input.email); try { createEmailFactory.create(input.email).apply(rsrc, input); } catch (com.google.gerrit.common.errors.EmailException | com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot add email"", e); } }",080c6c2c4f89e12446e34689fef23b9d61863263,addEmail(com.google.gerrit.extensions.api.accounts.EmailInput),addEmail(com.google.gerrit.extensions.api.accounts.EmailInput),3,6,"@java.lang.Override public void addEmail(com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), input.email); try { createEmailFactory.create(input.email).apply(rsrc, input); } catch (com.google.gerrit.common.errors.EmailException | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot add email"", e); } }",e910a4ff0b9f8f18449fb36f3a8719ebf3aa32ac,addEmail(com.google.gerrit.extensions.api.accounts.EmailInput),64213,169,182
46361,gerrit-server_src_main_java_com_google_gerrit_server_git_validators_MergeValidators.java,3.0,com.google.gerrit.server.git.validators.MergeValidators create();,99e3d7ff9f4d2d11982b74d98dbbc110d465dd6a,com.google.gerrit.server.git.validators.MergeValidators create(org.eclipse.jgit.lib.Repository repo);,357dd885eac52d66a64f55363babb750cc6d2f7b,create(),create(org.eclipse.jgit.lib.Repository),7,4,com.google.gerrit.server.git.validators.MergeValidators create();,99e3d7ff9f4d2d11982b74d98dbbc110d465dd6a,create(),45760,31,19
148032,java_com_google_gerrit_sshd_commands_CreateGroupCommand.java,1.0,"@org.kohsuke.args4j.Option(name = ""--member"", aliases = { ""-m"" }, metaVar = ""USERNAME"", usage = ""initial set of users to become members of the group"") void addMember(com.google.gerrit.reviewdb.client.Account.Id id) { initialMembers.add(id); }",1f624bc3c6ee283d9c0a0aa580e44048842003aa,"@org.kohsuke.args4j.Option(name = ""--member"", aliases = { ""-m"" }, metaVar = ""USERNAME"", usage = ""initial set of users to become members of the account"") void addMember(com.google.gerrit.reviewdb.client.Account.Id id) { initialMembers.add(id); }",113b785a1da9575b7f72de8a6e5436e9501b866b,addMember(com.google.gerrit.reviewdb.client.Account$Id),addMember(com.google.gerrit.reviewdb.client.Account$Id),17,1,"@org.kohsuke.args4j.Option(name = ""--member"", aliases = { ""-m"" }, metaVar = ""USERNAME"", usage = ""initial set of users to become members of the group"") void addMember(com.google.gerrit.reviewdb.client.Account.Id id) { initialMembers.add(id); }",1f624bc3c6ee283d9c0a0aa580e44048842003aa,addMember(com.google.gerrit.reviewdb.client.Account$Id),216439,78,78
79060,gerrit-server_src_main_java_com_google_gerrit_server_extensions_events_ReviewerDeleted.java,,,,"public void fire(com.google.gerrit.extensions.common.ChangeInfo change, com.google.gerrit.extensions.common.RevisionInfo revision, com.google.gerrit.extensions.common.AccountInfo reviewer, java.lang.String message, java.util.Map<java.lang.String, java.lang.Short> newApprovals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals) { com.google.gerrit.server.extensions.events.ReviewerDeleted.Event e = new com.google.gerrit.server.extensions.events.ReviewerDeleted.Event(change, revision, reviewer, message, newApprovals, oldApprovals); for (com.google.gerrit.extensions.events.ReviewerDeletedListener listener : listeners) { listener.onReviewerDeleted(e); } }",acaac84c47c0e3773a63aba499edc4fb65c133c3,,"fire(com.google.gerrit.extensions.common.ChangeInfo,com.google.gerrit.extensions.common.RevisionInfo,com.google.gerrit.extensions.common.AccountInfo,java.lang.String,java.util.Map,java.util.Map)",13,0,"public void fire(com.google.gerrit.extensions.common.ChangeInfo change, com.google.gerrit.extensions.common.RevisionInfo revision, com.google.gerrit.extensions.common.AccountInfo reviewer, java.lang.String message, java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ApprovalInfo> newApprovals, java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ApprovalInfo> oldApprovals) { if (!(listeners.iterator().hasNext())) { return; } com.google.gerrit.server.extensions.events.ReviewerDeleted.Event e = new com.google.gerrit.server.extensions.events.ReviewerDeleted.Event(change, revision, reviewer, message, newApprovals, oldApprovals); for (com.google.gerrit.extensions.events.ReviewerDeletedListener listener : listeners) { listener.onReviewerDeleted(e); } }",f5ebc5bffadfbde70e4a91e0ebb38300a0b2ab5c,"fire(com.google.gerrit.extensions.common.ChangeInfo,com.google.gerrit.extensions.common.RevisionInfo,com.google.gerrit.extensions.common.AccountInfo,java.lang.String,java.util.Map,java.util.Map)",182487,193,221
48000,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen2.java,34.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void showUpdates(com.google.gerrit.client.changes.ChangeInfo newInfo) { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.MessageInfo> om = changeInfo.messages(); com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.MessageInfo> nm = newInfo.messages(); if (om == null) { om = com.google.gwt.core.client.JsArray.createArray().cast(); } if (nm == null) { nm = com.google.gwt.core.client.JsArray.createArray().cast(); } if ((availableUpdate) == null) { availableUpdate = new com.google.gerrit.client.change.UpdatedBar() { @java.lang.Override void onShow() { reload.reload(); } void onIgnore(java.sql.Timestamp newTime) { lastDisplayedUpdate = newTime; } }; availableUpdate.addCloseHandler(new com.google.gwt.event.logical.shared.CloseHandler<com.google.gwt.user.client.ui.PopupPanel>() { @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { availableUpdate = null; } }); } availableUpdate.set(com.google.gerrit.client.rpc.Natives.asList(nm).subList(om.length(), nm.length()), newInfo.updated()); if (!(availableUpdate.isShowing())) { availableUpdate.popup(); } }",89a5f9655d6e34f4ba5754bd173346d68c07e8b7,,showUpdates(com.google.gerrit.client.changes.ChangeInfo),11,31,"void showUpdates(com.google.gerrit.client.changes.ChangeInfo newInfo) { if ((!(isAttached())) || (newInfo.updated().equals(lastDisplayedUpdate))) { return; } com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.MessageInfo> om = changeInfo.messages(); com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.MessageInfo> nm = newInfo.messages(); if (om == null) { om = com.google.gwt.core.client.JsArray.createArray().cast(); } if (nm == null) { nm = com.google.gwt.core.client.JsArray.createArray().cast(); } if ((updateAvailable) == null) { updateAvailable = new com.google.gerrit.client.change.UpdateAvailableBar() { @java.lang.Override void onShow() { reload.reload(); } void onIgnore(java.sql.Timestamp newTime) { lastDisplayedUpdate = newTime; } }; updateAvailable.addCloseHandler(new com.google.gwt.event.logical.shared.CloseHandler<com.google.gwt.user.client.ui.PopupPanel>() { @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { updateAvailable = null; } }); } updateAvailable.set(com.google.gerrit.client.rpc.Natives.asList(nm).subList(om.length(), nm.length()), newInfo.updated()); if (!(updateAvailable.isShowing())) { updateAvailable.popup(); } }",ee0d96e2e9cb4aac90f7a4092b50b1b25f1acd55,showUpdates(com.google.gerrit.client.changes.ChangeInfo),174540,368,392
148032,java_com_google_gerrit_server_api_groups_GroupApiImpl.java,18.0,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo get() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getGroup.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot retrieve group"", e); } }",2dc3715dc62cad0958e3db51d4d57f47dfb6a1dd,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo get() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getGroup.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot retrieve account"", e); } }",1d2eeb5bb7365e7cb4b210d16c28ea7c356b4ba0,get(),get(),17,18,"@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo get() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getGroup.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot retrieve group"", e); } }",2dc3715dc62cad0958e3db51d4d57f47dfb6a1dd,get(),217675,87,87
148032,java_com_google_gerrit_server_query_group_InternalGroupQuery.java,3.0,"public java.util.Optional<com.google.gerrit.server.group.InternalGroup> byId(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicates.id(groupId), ((""group id '"" + groupId) + ""'"")); }",8e59109a32d8cb10209a6b2b352d2e6a0ed22905,"public java.util.Optional<com.google.gerrit.server.group.InternalGroup> byId(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicates.id(groupId), ((""account id '"" + groupId) + ""'"")); }",40b3105476e16f44fcd05f2121e068715fa84fc9,byId(com.google.gerrit.reviewdb.client.AccountGroup$Id),byId(com.google.gerrit.reviewdb.client.AccountGroup$Id),17,3,"public java.util.Optional<com.google.gerrit.server.group.InternalGroup> byId(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicates.id(groupId), ((""group id '"" + groupId) + ""'"")); }",8e59109a32d8cb10209a6b2b352d2e6a0ed22905,byId(com.google.gerrit.reviewdb.client.AccountGroup$Id),215476,97,97
51200,src_main_java_com_googlesource_gerrit_plugins_replication_ReplicationState.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.googlesource.gerrit.plugins.replication.ReplicationState.RefReplicationInfo getRefReplicationInfo(java.lang.String project, java.lang.String ref) { java.util.AbstractMap.SimpleEntry<java.lang.String, java.lang.String> projectRefKey = new java.util.AbstractMap.SimpleEntry<java.lang.String, java.lang.String>(project, ref); if (!(replicationInfoPerProjectRef.containsKey(projectRefKey))) { com.googlesource.gerrit.plugins.replication.ReplicationState.RefReplicationInfo refReplicationInfo = new com.googlesource.gerrit.plugins.replication.ReplicationState.RefReplicationInfo(project, ref); replicationInfoPerProjectRef.put(projectRefKey, refReplicationInfo); return refReplicationInfo; } return replicationInfoPerProjectRef.get(projectRefKey); }",605f0db1c5cb57307886393b66dc5f4e185ab15e,,"getRefReplicationInfo(java.lang.String,java.lang.String)",6,8,"private com.googlesource.gerrit.plugins.replication.ReplicationState.RefReplicationStatus getRefStatus(java.lang.String project, java.lang.String ref) { if (!(statusByProjectRef.contains(project, ref))) { com.googlesource.gerrit.plugins.replication.ReplicationState.RefReplicationStatus refStatus = new com.googlesource.gerrit.plugins.replication.ReplicationState.RefReplicationStatus(project, ref); statusByProjectRef.put(project, ref, refStatus); return refStatus; } return statusByProjectRef.get(project, ref); }",4ae3e67aa21c80ee4c7562436eaa5c975f6fd26d,"getRefStatus(java.lang.String,java.lang.String)",84376,188,129
46240,gerrit-gwtui_src_main_java_net_codemirror_lib_LineCharacter.java,,,,public native final net.codemirror.lib.LineCharacter setCh(int ch);,18b8c6e65726f764fef3f94d4cbf860f604c70f8,,setCh(int),6,1,private native final net.codemirror.lib.LineCharacter setCh(int ch);,5d19154a265568d3eb4097ab9a89d36c04d4d3ed,setCh(int),193643,18,18
55569,gerrit-common_src_main_java_com_google_gerrit_common_data_GerritConfig.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setDownloadArchive(boolean a) { downloadArchive = a; },cccf08cb69852bb512b9899318dc086455abdfcd,,setDownloadArchive(boolean),4,15,public void setArchiveFormats(java.util.Set<com.google.gerrit.reviewdb.client.AccountGeneralPreferences.ArchiveFormat> formats) { archiveFormats = formats; },5b61135828435d05c837918c276b180d09224d2a,setArchiveFormats(java.util.Set),191197,16,41
35193,gerrit-server_src_main_java_com_google_gerrit_server_plugins_AutoRegisterModules.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override protected void configure() { for (java.lang.Class<?> clazz : sysSingletons) { bind(clazz).in(Scopes.SINGLETON); } for (java.util.Map.Entry<java.lang.Class<?>, java.lang.Class<?>> e : sysListen.entrySet()) { @java.lang.SuppressWarnings(""unchecked"") java.lang.Class<java.lang.Object> type = ((java.lang.Class<java.lang.Object>) (e.getKey())); @java.lang.SuppressWarnings(""unchecked"") java.lang.Class<java.lang.Object> impl = ((java.lang.Class<java.lang.Object>) (e.getValue())); java.lang.annotation.Annotation n = impl.getAnnotation(javax.inject.Named.class); if (n == null) { n = impl.getAnnotation(com.google.inject.name.Named.class); } if (n == null) { n = com.google.inject.internal.UniqueAnnotations.create(); } bind(type).annotatedWith(n).to(impl); } }",a3c14cce9dec95977e686f56e29b89d35c2f45b3,,configure(),6,8,"@java.lang.Override protected void configure() { for (java.lang.Class<?> clazz : sysSingletons) { bind(clazz).in(Scopes.SINGLETON); } for (java.util.Map.Entry<com.google.inject.TypeLiteral<?>, java.lang.Class<?>> e : sysListen.entrySet()) { @java.lang.SuppressWarnings(""unchecked"") com.google.inject.TypeLiteral<java.lang.Object> type = ((com.google.inject.TypeLiteral<java.lang.Object>) (e.getKey())); @java.lang.SuppressWarnings(""unchecked"") java.lang.Class<java.lang.Object> impl = ((java.lang.Class<java.lang.Object>) (e.getValue())); java.lang.annotation.Annotation n = impl.getAnnotation(com.google.gerrit.extensions.annotations.Export.class); if (n == null) { n = impl.getAnnotation(javax.inject.Named.class); } if (n == null) { n = impl.getAnnotation(com.google.inject.name.Named.class); } if (n == null) { n = com.google.inject.internal.UniqueAnnotations.create(); } bind(type).annotatedWith(n).to(impl); } }",089f13fc0e2443d0c7e5b642fc1fb023b2323118,configure(),135368,240,275
58862,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_util_ConsoleUI.java,23.0,public static com.google.gerrit.pgm.init.ConsoleUI getInstance() { return com.google.gerrit.pgm.init.ConsoleUI.getInstance(false); },2386be45760997cee41c321cc125c0877d410e6e,public static com.google.gerrit.pgm.init.util.ConsoleUI getInstance() { return com.google.gerrit.pgm.init.util.ConsoleUI.getInstance(false); },bdbe06b708ae1adbd54d1f0543f69f7a210f0223,getInstance(),getInstance(),3,23,public static com.google.gerrit.pgm.init.api.ConsoleUI getInstance() { return com.google.gerrit.pgm.init.api.ConsoleUI.getInstance(false); },4ae92b5836fe051c6441dda6279e38aa7b141e1d,getInstance(),187268,45,45
73732,gerrit-httpd_src_main_java_com_google_gerrit_httpd_raw_BowerComponentsServlet.java,0.0,"static java.nio.file.Path getZipPath(java.nio.file.Path buckOut) { if (buckOut == null) { return null; } return buckOut.resolve(""gen"").resolve(""polygerrit-ui"").resolve(""polygerrit_components"").resolve(""polygerrit_components.bower_components.zip""); }",18926c3fed465072c4f474dc1bf4483e1d76b96a,"private java.nio.file.Path getZipPath(java.nio.file.Path buckOut) { if (buckOut == null) { return null; } return buckOut.resolve(""gen"").resolve(""polygerrit-ui"").resolve(""polygerrit_components"").resolve(""polygerrit_components.bower_components.zip""); }",1a37f275700d6cfd98e074999c19a5754d712a5a,getZipPath(java.nio.file.Path),getZipPath(java.nio.file.Path),8,0,"private static java.nio.file.Path getZipPath(java.nio.file.Path buckOut) { if (buckOut == null) { return null; } return buckOut.resolve(""gen"").resolve(""polygerrit-ui"").resolve(""polygerrit_components"").resolve(""polygerrit_components.bower_components.zip""); }",18a205b1e64f4a0d32ef9c31369d017f27346bcf,getZipPath(java.nio.file.Path),159390,79,80
69594,gerrit-server_src_main_java_com_google_gerrit_server_change_GetCommit.java,0.0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommitInfo> apply(com.google.gerrit.server.change.RevisionResource rsrc) throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey p = rsrc.getChange().getProject(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(p);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.lang.String rev = rsrc.getPatchSet().getRevision().get(); org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(rev)); rw.parseBody(commit); com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommitInfo> r = com.google.gerrit.extensions.restapi.Response.ok(json.toCommit(rsrc.getControl(), rw, commit, addLinks)); if (rsrc.isCacheable()) { r.caching(com.google.gerrit.extensions.restapi.CacheControl.PRIVATE(7, java.util.concurrent.TimeUnit.DAYS)); } return r; } }",12c25fe757bc1f82907f899d692bf916173602ea,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommitInfo> apply(com.google.gerrit.server.change.RevisionResource rsrc) throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey p = rsrc.getChange().getProject(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(p);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.lang.String rev = rsrc.getPatchSet().getRevision().get(); org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(rev)); rw.parseBody(commit); com.google.gerrit.extensions.common.CommitInfo info = json.toCommit(rsrc.getControl(), rw, commit, addLinks); info.commit = commit.name(); com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommitInfo> r = com.google.gerrit.extensions.restapi.Response.ok(info); if (rsrc.isCacheable()) { r.caching(com.google.gerrit.extensions.restapi.CacheControl.PRIVATE(7, java.util.concurrent.TimeUnit.DAYS)); } return r; } }",563edf56c37a181be66acc514f54bb3e455d22ba,apply(com.google.gerrit.server.change.RevisionResource),apply(com.google.gerrit.server.change.RevisionResource),2,0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommitInfo> apply(com.google.gerrit.server.change.RevisionResource rsrc) throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey p = rsrc.getChange().getProject(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(p);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.lang.String rev = rsrc.getPatchSet().getRevision().get(); org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(rev)); rw.parseBody(commit); com.google.gerrit.extensions.common.CommitInfo info = json.create(ChangeJson.NO_OPTIONS).toCommit(rsrc.getControl(), rw, commit, addLinks); info.commit = commit.name(); com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommitInfo> r = com.google.gerrit.extensions.restapi.Response.ok(info); if (rsrc.isCacheable()) { r.caching(com.google.gerrit.extensions.restapi.CacheControl.PRIVATE(7, java.util.concurrent.TimeUnit.DAYS)); } return r; } }",7ca766c2535ed4e76836eb5f89bf590733d6261b,apply(com.google.gerrit.server.change.RevisionResource),12479,333,342
15873,gerrit-common_src_main_java_com_google_gerrit_common_data_AccountService.java,4.0,"@com.google.gerrit.common.auth.SignInRequired void addProjectWatch(java.lang.String projectName, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.common.data.AccountProjectWatchInfo> callback);",e0ae382ae4773a91b3541425623cedcfa8131d12,"@com.google.gerrit.common.auth.SignInRequired void addProjectWatch(java.lang.String projectName, java.lang.String fileMatch, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.common.data.AccountProjectWatchInfo> callback);",4e0a25df29b9582a994d4d9464f577019a79ae38,"addProjectWatch(java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)","addProjectWatch(java.lang.String,java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)",2,1,"@com.google.gerrit.common.auth.SignInRequired void addProjectWatch(java.lang.String projectName, java.lang.String filter, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.common.data.AccountProjectWatchInfo> callback);",6ab71727794990517e60b4ede38faafce18ca644,"addProjectWatch(java.lang.String,java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)",125922,67,66
46722,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeUtil.java,24.0,"public org.eclipse.jgit.merge.ThreeWayMerger newThreeWayMerger(final org.eclipse.jgit.lib.Repository repo, final org.eclipse.jgit.lib.ObjectInserter inserter) { org.eclipse.jgit.merge.ThreeWayMerger m; if (useContentMerge) { if (useRecursiveMerge) { m = MergeStrategy.RECURSIVE.newMerger(repo, true); } else { m = MergeStrategy.RESOLVE.newMerger(repo, true); } } else { m = MergeStrategy.SIMPLE_TWO_WAY_IN_CORE.newMerger(repo); } m.setObjectInserter(new org.eclipse.jgit.lib.ObjectInserter.Filter() { @java.lang.Override protected org.eclipse.jgit.lib.ObjectInserter delegate() { return inserter; } @java.lang.Override public void flush() { } @java.lang.Override public void release() { } }); return m; }",be2eac436a3d0ae578b5905fab20443c5f6e7f2a,"public org.eclipse.jgit.merge.ThreeWayMerger newThreeWayMerger(final org.eclipse.jgit.lib.Repository repo, final org.eclipse.jgit.lib.ObjectInserter inserter) { org.eclipse.jgit.merge.ThreeWayMerger m; if (useContentMerge) { if (useRecursiveMerge) { m = MergeStrategy.RECURSIVE.newMerger(repo, true); } else { m = MergeStrategy.RESOLVE.newMerger(repo, true); } } else { m = MergeStrategy.SIMPLE_TWO_WAY_IN_CORE.newMerger(repo); } m.setObjectInserter(inserter); return m; }",95a86e728f8d170ca7fb095da46c70318fbb0a64,"newThreeWayMerger(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.ObjectInserter)","newThreeWayMerger(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.ObjectInserter)",6,22,"public org.eclipse.jgit.merge.ThreeWayMerger newThreeWayMerger(final org.eclipse.jgit.lib.Repository repo, final org.eclipse.jgit.lib.ObjectInserter inserter) { return com.google.gerrit.server.git.MergeUtil.newThreeWayMerger(repo, inserter, mergeStrategyName()); }",bb4e705fe822ab647066a9227abc958facaa6418,"newThreeWayMerger(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.ObjectInserter)",206178,150,78
146191,gerrit-sshd_src_main_java_com_google_gerrit_sshd_BaseCommand.java,23.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setSensitiveParamaters(java.util.Set<java.lang.String> set) { this.sensitiveParameters = set; },0e485a0c1a9763e25754323adeef67db0233298f,,setSensitiveParamaters(java.util.Set),18,37,public boolean isSensitiveParameter(java.lang.String param) { return sensitiveParameters.contains(param); },c82965a2b6be700cb73e615ef785e5b575e0235b,isSensitiveParameter(java.lang.String),107521,31,24
44340,gerrit-server_src_main_java_com_google_gerrit_server_query_change_MessagePredicate.java,0.0,"@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData object) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.PatchSet patchSet = object.currentPatchSet(db); if (patchSet == null) { return false; } final com.google.gerrit.reviewdb.client.RevId revision = patchSet.getRevision(); if (revision == null) { return false; } final org.eclipse.jgit.lib.AnyObjectId objectId = org.eclipse.jgit.lib.ObjectId.fromString(revision.get()); if (objectId == null) { return false; } final com.google.gerrit.reviewdb.client.Change change = object.change(db); if (change == null) { return false; } final com.google.gerrit.reviewdb.client.Project.NameKey projectName = change.getProject(); if (projectName == null) { return false; } try { final org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(projectName); try { final org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo); try { return rFilter.include(rw, rw.parseCommit(objectId)); } finally { rw.release(); } } finally { repo.close(); } } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { com.google.gerrit.server.query.change.MessagePredicate.log.error(((""Repository \"""" + (projectName.get())) + ""\"" unknown.""), e); } catch (org.eclipse.jgit.errors.MissingObjectException e) { com.google.gerrit.server.query.change.MessagePredicate.log.error(((projectName.get()) + ""\"" commit does not exist.""), e); } catch (org.eclipse.jgit.errors.IncorrectObjectTypeException e) { com.google.gerrit.server.query.change.MessagePredicate.log.error(((projectName.get()) + ""\"" revision is not a commit.""), e); } catch (java.io.IOException e) { com.google.gerrit.server.query.change.MessagePredicate.log.error(((""Could not search for commit message in \"""" + (projectName.get())) + ""\"" repository.""), e); } return false; }",7a71e5c83c8f4d2773a6574924bdffca99050506,"@java.lang.Override public boolean match(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.AnyObjectId objectId) { try { return rFilter.include(rw, rw.parseCommit(objectId)); } catch (org.eclipse.jgit.errors.MissingObjectException e) { com.google.gerrit.server.query.change.MessagePredicate.log.error(((objectId.getName()) + "" commit does not exist.""), e); } catch (org.eclipse.jgit.errors.IncorrectObjectTypeException e) { com.google.gerrit.server.query.change.MessagePredicate.log.error(((objectId.getName()) + "" revision is not a commit.""), e); } catch (java.io.IOException e) { com.google.gerrit.server.query.change.MessagePredicate.log.error((""Could not search for commit message in "" + (objectId.getName())), e); } return false; }",e1d32c528f4f878d64f0c6ba5b6a2cd73713e849,match(com.google.gerrit.server.query.change.ChangeData),"match(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.AnyObjectId)",3,1,"@java.lang.Override public boolean match(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.server.query.change.Arguments args) { try { return rFilter.include(rw, rw.parseCommit(args.objectId)); } catch (org.eclipse.jgit.errors.MissingObjectException e) { com.google.gerrit.server.query.change.MessagePredicate.log.error(((args.projectName.get()) + ""\"" commit does not exist.""), e); } catch (org.eclipse.jgit.errors.IncorrectObjectTypeException e) { com.google.gerrit.server.query.change.MessagePredicate.log.error(((args.projectName.get()) + ""\"" revision is not a commit.""), e); } catch (java.io.IOException e) { com.google.gerrit.server.query.change.MessagePredicate.log.error(((""Could not search for commit message in \"""" + (args.projectName.get())) + ""\"" repository.""), e); } return false; }",84046310bbfa8ab9cf4ea9c5ec33bd80cb77220b,"match(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevWalk,com.google.gerrit.server.query.change.Arguments)",105124,231,243
48914,gerrit-server_src_main_java_com_google_gerrit_server_mail_CommentSender.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void appendParentSnippet(java.lang.StringBuilder cmts, com.google.gerrit.reviewdb.client.PatchLineComment childComment, com.google.gerrit.reviewdb.server.PatchLineCommentAccess commentAccess) { com.google.gerrit.reviewdb.client.PatchLineComment.Key parentKey = new com.google.gerrit.reviewdb.client.PatchLineComment.Key(childComment.getKey().getParentKey(), childComment.getParentUuid()); com.google.gerrit.reviewdb.client.PatchLineComment parentComment = null; try { parentComment = commentAccess.get(parentKey); } catch (com.google.gwtorm.server.OrmException e) { } if (parentComment != null) { java.lang.String parentCommentStr = parentComment.getMessage().trim(); int endIndex = java.lang.Math.min(75, parentCommentStr.length()); if (parentCommentStr.contains(""\n"")) { endIndex = java.lang.Math.min(endIndex, parentCommentStr.indexOf(""\n"")); } cmts.append(""> "").append(parentCommentStr.substring(0, endIndex)).append('\n'); } }",8fb63c998b5f689da6320f606243205b032d0d47,,"appendParentSnippet(java.lang.StringBuilder,com.google.gerrit.reviewdb.client.PatchLineComment,com.google.gerrit.reviewdb.server.PatchLineCommentAccess)",2,5,"private void appendQuotedParent(java.lang.StringBuilder out, com.google.gerrit.reviewdb.client.PatchLineComment child) { com.google.gerrit.reviewdb.client.PatchLineComment parent; try { parent = args.db.get().patchComments().get(new com.google.gerrit.reviewdb.client.PatchLineComment.Key(child.getKey().getParentKey(), child.getParentUuid())); } catch (com.google.gwtorm.server.OrmException e) { parent = null; } if (parent != null) { java.lang.String msg = parent.getMessage().trim(); if ((msg.length()) > 75) { msg = msg.substring(0, 75); } int lf = msg.indexOf('\n'); if (lf > 0) { msg = msg.substring(0, lf); } out.append(""> "").append(msg).append('\n'); } }",a3caad286346ae613f661cb940b3dd02662b667e,"appendQuotedParent(java.lang.StringBuilder,com.google.gerrit.reviewdb.client.PatchLineComment)",212690,266,208
163935,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_account_ExternalIdIT.java,2.0,"@org.junit.Test public void getExternalIDs() throws java.lang.Exception { java.util.Collection<com.google.gerrit.server.account.ExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = new java.util.ArrayList<>(); for (com.google.gerrit.server.account.ExternalId id : expectedIds) { com.google.gerrit.extensions.common.AccountExternalIdInfo info = new com.google.gerrit.extensions.common.AccountExternalIdInfo(); info.identity = id.key().get(); info.emailAddress = id.email(); info.canDelete = (!(id.isScheme(com.google.gerrit.acceptance.rest.account.SCHEME_USERNAME))) ? true : null; info.trusted = true; expectedIdInfos.add(info); } com.google.gerrit.acceptance.RestResponse response = userRestSession.get(""/accounts/self/external.ids""); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }",9dfe1078fee831998fa98bc34767d1e3b0a3229c,"@org.junit.Test public void getExternalIDs() throws java.lang.Exception { java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : expectedIds) { id.setCanDelete((!(id.getExternalId().equals((""username:"" + (user.username)))))); id.setTrusted(true); expectedIdInfos.add(com.google.gerrit.acceptance.rest.account.ExternalIdIT.toInfo(id)); } com.google.gerrit.acceptance.RestResponse response = userRestSession.get(""/accounts/self/external.ids""); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }",2bb302fdd0f02e9c5c4c911c43ceeaf67a8f6f4a,getExternalIDs(),getExternalIDs(),3,1,"@org.junit.Test public void getExternalIDs() throws java.lang.Exception { java.util.Collection<com.google.gerrit.server.account.ExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = new java.util.ArrayList<>(); for (com.google.gerrit.server.account.ExternalId id : expectedIds) { com.google.gerrit.extensions.common.AccountExternalIdInfo info = new com.google.gerrit.extensions.common.AccountExternalIdInfo(); info.identity = id.key().get(); info.emailAddress = id.email(); info.canDelete = (!(id.isScheme(com.google.gerrit.acceptance.rest.account.SCHEME_USERNAME))) ? true : null; info.trusted = true; expectedIdInfos.add(info); } com.google.gerrit.acceptance.RestResponse response = userRestSession.get(""/accounts/self/external.ids""); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }",9dfe1078fee831998fa98bc34767d1e3b0a3229c,getExternalIDs(),64340,319,352
70662,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_client_AccountGeneralPreferences.java,14.0,public com.google.gerrit.reviewdb.client.AccountGeneralPreferences.DownloadScheme getDownloadUrl() { if ((downloadUrl) == null) { return null; } return com.google.gerrit.reviewdb.client.AccountGeneralPreferences.DownloadScheme.valueOf(downloadUrl); },46041662508481cd4cebab3036481b7be46203c2,"public java.lang.String getDownloadUrl() { switch (downloadUrl) { case ""ANON_GIT"" : return CoreDownloadSchemes.ANON_GIT; case ""ANON_HTTP"" : return CoreDownloadSchemes.ANON_HTTP; case ""HTTP"" : return CoreDownloadSchemes.HTTP; case ""SSH"" : return CoreDownloadSchemes.SSH; case ""REPO_DOWNLOAD"" : return CoreDownloadSchemes.REPO_DOWNLOAD; } return downloadUrl; }",edf1e5651e6b05b181bc47873eb089b1d99e878a,getDownloadUrl(),getDownloadUrl(),4,14,"public java.lang.String getDownloadUrl() { if ((downloadUrl) != null) { switch (downloadUrl) { case ""ANON_GIT"" : return CoreDownloadSchemes.ANON_GIT; case ""ANON_HTTP"" : return CoreDownloadSchemes.ANON_HTTP; case ""HTTP"" : return CoreDownloadSchemes.HTTP; case ""SSH"" : return CoreDownloadSchemes.SSH; case ""REPO_DOWNLOAD"" : return CoreDownloadSchemes.REPO_DOWNLOAD; } } return downloadUrl; }",37604679df94e28ebe1aff376a09d4f60ea69df6,getDownloadUrl(),97225,111,122
99996,src_test_java_com_googlesource_gerrit_plugins_uploadvalidator_BlockedKeywordValidatorTest.java,3.0,"@org.junit.Test public void testKeywords() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommit(); com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator validator = new com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator(null, new com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE), com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE, null, null, null); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = validator.performValidation(repo, c, com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidatorTest.getPatterns().values(), com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG); java.util.Set<java.lang.String> expected = com.google.common.collect.ImmutableSet.of((""ERROR: blocked keyword(s) found in file: foo.txt (Line: 1)"" + "" (found: myp4ssw0rd, foobar)""), (""ERROR: blocked keyword(s) found in file: bar.txt (Line: 5)"" + "" (found: $Id: foo bar$)"")); assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); }",eab0f6141e576000f4aa54964f54792638e8043f,"@org.junit.Test public void testKeywords() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommit(); com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator validator = new com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator(null, new com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE), com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE, null, null, null); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = validator.performValidation(repo, c, com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidatorTest.getPatterns().values(), com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG); java.util.Set<java.lang.String> expected = com.google.common.collect.ImmutableSet.of((""ERROR: blocked keyword(s) found in: foo.txt (Line: 1)"" + "" (found: myp4ssw0rd, foobar)""), (""ERROR: blocked keyword(s) found in: bar.txt (Line: 5)"" + "" (found: $Id: foo bar$)""), (""ERROR: blocked keyword(s) found in: commit message (Line: 1)"" + "" (found: foobar)"")); assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); }",67c8b0b357ddd3489d09b05a7a8c551d87fb4b0d,testKeywords(),testKeywords(),4,3,"@org.junit.Test public void testKeywords() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommit(); com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator validator = new com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator(null, new com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE), com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE, null, null, null); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = validator.performValidation(repo, c, com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidatorTest.getPatterns().values(), com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG); java.util.Set<java.lang.String> expected = com.google.common.collect.ImmutableSet.of((""ERROR: blocked keyword(s) found in: foo.txt (Line: 1)"" + "" (found: myp4ssw0rd, foobar)""), (""ERROR: blocked keyword(s) found in: bar.txt (Line: 5)"" + "" (found: $Id: foo bar$)""), ((""ERROR: blocked keyword(s) found in: "" + (com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG)) + "" (Line: 1) (found: foobar)"")); assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); }",1100b9cf00aeaa9fd4783207a6ef9f5f24ed466d,testKeywords(),78147,373,392
93329,src_test_java_com_ericsson_gerrit_plugins_syncevents_HttpSessionTest.java,2.0,"@org.junit.Before public void setUp() throws java.lang.Exception { cfg = createMock(com.ericsson.gerrit.plugins.syncevents.Configuration.class); expect(cfg.getUrl()).andReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.URL).anyTimes(); expect(cfg.getUser()).andReturn(""user""); expect(cfg.getPassword()).andReturn(""pass""); expect(cfg.getMaxTries()).andReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.MAX_TRIES).anyTimes(); expect(cfg.getConnectionTimeout()).andReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.TIMEOUT).anyTimes(); expect(cfg.getSocketTimeout()).andReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.TIMEOUT).anyTimes(); expect(cfg.getRetryInterval()).andReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.RETRY_INTERVAL).anyTimes(); replayAll(); httpClient = new com.ericsson.gerrit.plugins.syncevents.HttpClientProvider(cfg).get(); httpSession = new com.ericsson.gerrit.plugins.syncevents.HttpSession(httpClient, com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.URL); }",64955802d40f7e62f539f03e4462b5c339bc39e0,"@org.junit.Before public void setUp() throws java.lang.Exception { com.ericsson.gerrit.plugins.syncevents.Configuration cfg = mock(com.ericsson.gerrit.plugins.syncevents.Configuration.class); when(cfg.getUrl()).thenReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.URL); when(cfg.getUser()).thenReturn(""user""); when(cfg.getPassword()).thenReturn(""pass""); when(cfg.getMaxTries()).thenReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.MAX_TRIES); when(cfg.getConnectionTimeout()).thenReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.TIMEOUT); when(cfg.getSocketTimeout()).thenReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.TIMEOUT); when(cfg.getRetryInterval()).thenReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.RETRY_INTERVAL); httpSession = new com.ericsson.gerrit.plugins.syncevents.HttpSession(new com.ericsson.gerrit.plugins.syncevents.HttpClientProvider(cfg).get(), com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.URL); }",f49508753d3ae884826411f3788344bdfc4bfb6f,setUp(),setUp(),3,2,"@org.junit.Before public void setUp() throws java.lang.Exception { java.lang.String url = ""http://localhost:"" + (wireMockRule.port()); com.ericsson.gerrit.plugins.syncevents.Configuration cfg = mock(com.ericsson.gerrit.plugins.syncevents.Configuration.class); when(cfg.getUrl()).thenReturn(url); when(cfg.getUser()).thenReturn(""user""); when(cfg.getPassword()).thenReturn(""pass""); when(cfg.getMaxTries()).thenReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.MAX_TRIES); when(cfg.getConnectionTimeout()).thenReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.TIMEOUT); when(cfg.getSocketTimeout()).thenReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.TIMEOUT); when(cfg.getRetryInterval()).thenReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.RETRY_INTERVAL); httpSession = new com.ericsson.gerrit.plugins.syncevents.HttpSession(new com.ericsson.gerrit.plugins.syncevents.HttpClientProvider(cfg).get(), url); }",d51161ba36ba12d7597117ba83af11d8da55fa4c,setUp(),205451,289,276
76120,gerrit-server_src_main_java_com_google_gerrit_server_notedb_NoteDbUpdateManager.java,12.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.common.collect.Table<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.ObjectId> getDraftIds() { com.google.common.collect.Table<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.ObjectId> draftIds = com.google.common.collect.HashBasedTable.create(); if ((allUsersRepo) == null) { return draftIds; } for (org.eclipse.jgit.transport.ReceiveCommand cmd : allUsersRepo.cmds.getCommands().values()) { java.lang.String r = cmd.getRefName(); if (r.startsWith(com.google.gerrit.server.notedb.REFS_DRAFT_COMMENTS)) { java.lang.String msg = ""invalid draft ref: %s""; com.google.gerrit.reviewdb.client.Account.Id accountId = Account.Id.fromRefPart(r.substring(com.google.gerrit.server.notedb.REFS_DRAFT_COMMENTS.length())); checkState((accountId != null), msg, r); int s = r.lastIndexOf('/'); checkState(((s >= 0) && (s < ((r.length()) - 1))), msg, r); com.google.gerrit.reviewdb.client.Change.Id changeId = Change.Id.parse(r.substring((s + 1))); draftIds.put(changeId, accountId, cmd.getNewId()); } } return draftIds; }",c194d0cfcc82480f0fe1084b81f7b52ce0243885,,getDraftIds(),9,16,"private com.google.common.collect.Table<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.ObjectId> getDraftIds() { com.google.common.collect.Table<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.ObjectId> draftIds = com.google.common.collect.HashBasedTable.create(); if ((allUsersRepo) == null) { return draftIds; } for (org.eclipse.jgit.transport.ReceiveCommand cmd : allUsersRepo.cmds.getCommands().values()) { java.lang.String r = cmd.getRefName(); if (r.startsWith(com.google.gerrit.server.notedb.REFS_DRAFT_COMMENTS)) { com.google.gerrit.reviewdb.client.Account.Id accountId = Account.Id.fromRefPart(r.substring(com.google.gerrit.server.notedb.REFS_DRAFT_COMMENTS.length())); com.google.gerrit.server.notedb.NoteDbUpdateManager.checkDraftRef((accountId != null), r); int s = r.lastIndexOf('/'); com.google.gerrit.server.notedb.NoteDbUpdateManager.checkDraftRef(((s >= 0) && (s < ((r.length()) - 1))), r); com.google.gerrit.reviewdb.client.Change.Id changeId = Change.Id.parse(r.substring((s + 1))); draftIds.put(changeId, accountId, cmd.getNewId()); } } return draftIds; }",63b3717c3edb9e83c12ce3cdfd058770caf1dfb7,getDraftIds(),37189,386,405
159510,java_com_google_gerrit_server_config_ScheduleConfig.java,3.0,"private static long initialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String keyStartTime, java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start != null) { java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern(""[E ]HH:mm"").withLocale(java.util.Locale.US); java.time.LocalTime firstStartTime = java.time.LocalTime.parse(start, formatter); java.time.ZonedDateTime startTime = now.with(firstStartTime); try { java.time.DayOfWeek dayOfWeek = formatter.parse(start, java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } else { com.google.gerrit.server.config.ScheduleConfig.log.info(java.text.MessageFormat.format(""{0} schedule parameter \""{0}.{1}\"" is not configured"", section, keyStartTime)); } } catch (java.lang.IllegalArgumentException e2) { com.google.gerrit.server.config.ScheduleConfig.log.error(java.text.MessageFormat.format(""Invalid {0} schedule parameter \""{0}.{1}\"""", section, keyStartTime), e2); delay = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }",08130dfdf5a2aeeb14b438cb7ed4e8c1f1157abb,"private static long initialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String keyStartTime, java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start != null) { java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern(""[E ]HH:mm"").withLocale(java.util.Locale.US); java.time.LocalTime firstStartTime = java.time.LocalTime.parse(start, formatter); java.time.ZonedDateTime startTime = now.with(firstStartTime); try { java.time.DayOfWeek dayOfWeek = formatter.parse(start, java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } } catch (java.lang.IllegalArgumentException e2) { delay = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }",f103a2594134e8762ad5742cea28c96d147faa81,"initialDelay(org.eclipse.jgit.lib.Config,java.lang.String,java.lang.String,java.lang.String,java.time.ZonedDateTime,long)","initialDelay(org.eclipse.jgit.lib.Config,java.lang.String,java.lang.String,java.lang.String,java.time.ZonedDateTime,long)",3,0,"private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String keyStartTime, java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start != null) { java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern(""[E ]HH:mm"").withLocale(java.util.Locale.US); java.time.LocalTime firstStartTime = java.time.LocalTime.parse(start, formatter); java.time.ZonedDateTime startTime = now.with(firstStartTime); try { java.time.DayOfWeek dayOfWeek = formatter.parse(start, java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } } catch (java.lang.IllegalArgumentException e2) { delay = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }",0d5ef59ed32c520b8a1c1d8c5563865057497e3f,"computeInitialDelay(org.eclipse.jgit.lib.Config,java.lang.String,java.lang.String,java.lang.String,java.time.ZonedDateTime,long)",140147,309,311
55514,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeQueryBuilder.java,32.0,"@java.lang.Override protected com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> defaultField(java.lang.String query) throws com.google.gerrit.server.query.QueryParseException { if (query.startsWith(""refs/"")) { return ref(query); } else if (com.google.gerrit.server.query.change.ChangeQueryBuilder.DEF_CHANGE.matcher(query).matches()) { return change(query); } else if (com.google.gerrit.server.query.change.ChangeQueryBuilder.PAT_COMMIT.matcher(query).matches()) { return commit(query); } else if (com.google.gerrit.server.query.change.ChangeQueryBuilder.PAT_EMAIL.matcher(query).find()) { try { return com.google.gerrit.server.query.Predicate.or(owner(query), reviewer(query)); } catch (com.google.gwtorm.server.OrmException err) { throw error(""Cannot lookup user"", err); } } else if (com.google.gerrit.server.query.change.ChangeQueryBuilder.PAT_LABEL.matcher(query).find()) { try { return label(query); } catch (com.google.gwtorm.server.OrmException err) { throw error(""Cannot lookup user"", err); } } else { final java.util.List<com.google.gerrit.server.query.change.ProjectPredicate> predicate = new java.util.ArrayList<com.google.gerrit.server.query.change.ProjectPredicate>(); for (com.google.gerrit.reviewdb.client.Project.NameKey name : args.projectCache.all()) { if (name.get().toLowerCase().contains(query.toLowerCase())) { predicate.add(new com.google.gerrit.server.query.change.ProjectPredicate(name.get())); } } if ((predicate.size()) == 1) { return predicate.get(0); } else if ((predicate.size()) > 1) { return com.google.gerrit.server.query.Predicate.or(predicate); } throw error((""Unsupported query:"" + query)); } }",237d9f6fb1a16c6e2becbb6c7d508d02e4dc116f,"@java.lang.Override protected com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> defaultField(java.lang.String query) { if (query.startsWith(""refs/"")) { return ref(query); } else if (com.google.gerrit.server.query.change.ChangeQueryBuilder.DEF_CHANGE.matcher(query).matches()) { return change(query); } java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates = com.google.common.collect.Lists.newArrayListWithCapacity(9); try { predicates.add(owner(query)); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(reviewer(query)); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(file(query)); } catch (com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(label(query)); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(message(query)); } catch (com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(comment(query)); } catch (com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(projects(query)); } catch (com.google.gerrit.server.query.QueryParseException e) { } predicates.add(ref(query)); predicates.add(branch(query)); predicates.add(topic(query)); return com.google.gerrit.server.query.Predicate.or(predicates); }",e61aaf1ceb2a4571ed77f02dccb867ff27e276da,defaultField(java.lang.String),defaultField(java.lang.String),3,32,"@java.lang.Override protected com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> defaultField(java.lang.String query) { if (query.startsWith(""refs/"")) { return ref(query); } else if (com.google.gerrit.server.query.change.ChangeQueryBuilder.DEF_CHANGE.matcher(query).matches()) { return change(query); } java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates = com.google.common.collect.Lists.newArrayListWithCapacity(9); try { predicates.add(commit(query)); } catch (java.lang.IllegalArgumentException e) { } try { predicates.add(owner(query)); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(reviewer(query)); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(file(query)); } catch (com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(label(query)); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(message(query)); } catch (com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(comment(query)); } catch (com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(projects(query)); } catch (com.google.gerrit.server.query.QueryParseException e) { } predicates.add(ref(query)); predicates.add(branch(query)); predicates.add(topic(query)); return com.google.gerrit.server.query.Predicate.or(predicates); }",e3fc889c6a737ccad1702ca007d779b3d69152fa,defaultField(java.lang.String),207142,448,471
106271,gerrit-server_src_main_java_com_google_gerrit_server_git_strategy_SubmitStrategy.java,4.0,"com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create(com.google.gerrit.extensions.client.SubmitType submitType, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.server.git.MergeOp.CommitStatus commitStatus, com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw, com.google.gerrit.server.IdentifiedUser caller, com.google.gerrit.server.git.MergeTip mergeTip, org.eclipse.jgit.revwalk.RevFlag canMergeFlag, com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Set<org.eclipse.jgit.revwalk.RevCommit> alreadyAccepted, java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> incoming, com.google.gerrit.server.util.RequestId submissionId, com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling, com.google.common.collect.ListMultimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify, com.google.gerrit.server.git.SubmoduleOp submoduleOp, boolean dryrun);",f2daf947f63c7f95a298ab91105687e479504772,"com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create(com.google.gerrit.extensions.client.SubmitType submitType, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.server.git.MergeOp.CommitStatus commitStatus, com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw, com.google.gerrit.server.IdentifiedUser caller, com.google.gerrit.server.git.strategy.MergeTip mergeTip, org.eclipse.jgit.revwalk.RevFlag canMergeFlag, com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Set<org.eclipse.jgit.revwalk.RevCommit> alreadyAccepted, java.util.Set<com.google.gerrit.server.git.strategy.CodeReviewCommit> incoming, com.google.gerrit.server.util.RequestId submissionId, com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling, com.google.common.collect.ListMultimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify, com.google.gerrit.server.git.strategy.SubmoduleOp submoduleOp, boolean dryrun);",7839db403f6a13f31b0bf8f3d15b55e37883e1d6,"create(com.google.gerrit.extensions.client.SubmitType,com.google.gerrit.reviewdb.client.Branch$NameKey,com.google.gerrit.server.git.MergeOp.CommitStatus,com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk,com.google.gerrit.server.IdentifiedUser,com.google.gerrit.server.git.MergeTip,org.eclipse.jgit.revwalk.RevFlag,com.google.gerrit.reviewdb.server.ReviewDb,java.util.Set,java.util.Set,com.google.gerrit.server.util.RequestId,com.google.gerrit.extensions.api.changes.NotifyHandling,com.google.common.collect.ListMultimap,com.google.gerrit.server.git.SubmoduleOp,boolean)","create(com.google.gerrit.extensions.client.SubmitType,com.google.gerrit.reviewdb.client.Branch$NameKey,com.google.gerrit.server.git.MergeOp.CommitStatus,com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk,com.google.gerrit.server.IdentifiedUser,com.google.gerrit.server.git.strategy.MergeTip,org.eclipse.jgit.revwalk.RevFlag,com.google.gerrit.reviewdb.server.ReviewDb,java.util.Set,java.util.Set,com.google.gerrit.server.util.RequestId,com.google.gerrit.extensions.api.changes.NotifyHandling,com.google.common.collect.ListMultimap,com.google.gerrit.server.git.strategy.SubmoduleOp,boolean)",5,4,"com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create(com.google.gerrit.extensions.client.SubmitType submitType, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.server.git.MergeOp.CommitStatus commitStatus, com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw, com.google.gerrit.server.IdentifiedUser caller, com.google.gerrit.server.git.MergeTip mergeTip, org.eclipse.jgit.revwalk.RevFlag canMergeFlag, com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Set<org.eclipse.jgit.revwalk.RevCommit> alreadyAccepted, java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> incoming, com.google.gerrit.server.util.RequestId submissionId, com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling, com.google.common.collect.ListMultimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify, com.google.gerrit.server.git.SubmoduleOp submoduleOp, boolean dryrun);",f2daf947f63c7f95a298ab91105687e479504772,"create(com.google.gerrit.extensions.client.SubmitType,com.google.gerrit.reviewdb.client.Branch$NameKey,com.google.gerrit.server.git.MergeOp.CommitStatus,com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk,com.google.gerrit.server.IdentifiedUser,com.google.gerrit.server.git.MergeTip,org.eclipse.jgit.revwalk.RevFlag,com.google.gerrit.reviewdb.server.ReviewDb,java.util.Set,java.util.Set,com.google.gerrit.server.util.RequestId,com.google.gerrit.extensions.api.changes.NotifyHandling,com.google.common.collect.ListMultimap,com.google.gerrit.server.git.SubmoduleOp,boolean)",155657,314,308
148032,java_com_google_gerrit_server_schema_Schema_164.java,0.0,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git)) { md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); md.setMessage(com.google.gerrit.server.schema.Schema_164.COMMIT_MSG); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.AccessSection groups = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), true); com.google.gerrit.server.schema.AclUtil.grant(config, groups, Permission.READ, false, true, systemGroupBackend.getGroup(com.google.gerrit.server.schema.REGISTERED_USERS)); config.commit(md); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException(""Failed to grant read permissions on group branches"", e); } }",4ae7c7245c4d94294e51567ed3f682e403e1e7a7,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git)) { md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); md.setMessage(com.google.gerrit.server.schema.Schema_164.COMMIT_MSG); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.AccessSection groups = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), true); com.google.gerrit.server.schema.AclUtil.grant(config, groups, Permission.READ, false, true, systemGroupBackend.getGroup(com.google.gerrit.server.schema.REGISTERED_USERS)); config.commit(md); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException(""Failed to grant read permissions on account branches"", e); } }",e6c17ee683c11dda3df456dbe0bbb435c4849896,"migrateData(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.schema.UpdateUI)","migrateData(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.schema.UpdateUI)",17,0,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git)) { md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); md.setMessage(com.google.gerrit.server.schema.Schema_164.COMMIT_MSG); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.AccessSection groups = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), true); com.google.gerrit.server.schema.AclUtil.grant(config, groups, Permission.READ, false, true, systemGroupBackend.getGroup(com.google.gerrit.server.schema.REGISTERED_USERS)); config.commit(md); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException(""Failed to grant read permissions on group branches"", e); } }",4ae7c7245c4d94294e51567ed3f682e403e1e7a7,"migrateData(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.schema.UpdateUI)",215143,378,378
76268,src_test_java_com_googlesource_gerrit_plugins_uploadvalidator_ContentTypeUtilTest.java,,,,"@org.junit.Test public void testDoesTypeMatch() throws java.util.concurrent.ExecutionException { com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil ctu = new com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.getPatternCache()); java.lang.String[] listOfTypes = new java.lang.String[]{ ""text/*"", ""^application/(pdf|xml)"", ""application/zip"" }; assertThat(ctu.doesTypeMatch(""text/xml"", listOfTypes)).isTrue(); assertThat(ctu.doesTypeMatch(""text/html"", listOfTypes)).isTrue(); assertThat(ctu.doesTypeMatch(""text/plain"", listOfTypes)).isTrue(); assertThat(ctu.doesTypeMatch(""application/pdf"", listOfTypes)).isTrue(); assertThat(ctu.doesTypeMatch(""application/xml"", listOfTypes)).isTrue(); assertThat(ctu.doesTypeMatch(""application/zip"", listOfTypes)).isTrue(); assertThat(ctu.doesTypeMatch(""foo/bar"", listOfTypes)).isFalse(); assertThat(ctu.doesTypeMatch(""application/msword"", listOfTypes)).isFalse(); }",2b8f33a6ccfb5bf265591d4771e7b8958f178bfc,,testDoesTypeMatch(),14,1,"@org.junit.Test public void testMatchesAny() throws java.util.concurrent.ExecutionException { java.lang.String[] patterns = new java.lang.String[]{ ""text/*"", ""^application/(pdf|xml)"", ""application/zip"" }; matchesAny(""text/xml"", patterns); matchesAny(""text/html"", patterns); matchesAny(""text/plain"", patterns); matchesAny(""application/pdf"", patterns); matchesAny(""application/xml"", patterns); matchesAny(""application/zip"", patterns); noMatch(""foo/bar"", patterns); noMatch(""application/msword"", patterns); }",5c6795d31db442f968f243e8f28c22f3f5eea2ff,testMatchesAny(),172581,271,132
78634,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_git_AbstractPushForReview.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testAccidentallyPushNewPatchSetDirectlyToBranchAndCantRecoverByPushingToRefsFor() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); org.eclipse.jgit.revwalk.RevCommit ps1Commit = r.getCommit(); org.eclipse.jgit.revwalk.RevCommit ps2Commit; try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { java.lang.String changeId = com.google.common.collect.Iterables.getOnlyElement(ps1Commit.getFooterLines(FooterConstants.CHANGE_ID)).substring(1); org.eclipse.jgit.junit.TestRepository<?> tr = new org.eclipse.jgit.junit.TestRepository(repo); ps2Commit = tr.branch(""refs/heads/master"").commit().message(((ps1Commit.getShortMessage()) + "" v2"")).insertChangeId(changeId).create(); } testRepo.git().fetch().setRefSpecs(new org.eclipse.jgit.transport.RefSpec(""refs/heads/master"")).call(); testRepo.reset(ps2Commit); com.google.gerrit.server.query.change.ChangeData cd = com.google.common.collect.Iterables.getOnlyElement(queryProvider.get().byCommit(ps1Commit.name())); assertThat(cd.change().getStatus()).isEqualTo(Change.Status.NEW); assertThat(com.google.gerrit.acceptance.git.AbstractPushForReview.getPatchSetRevisions(cd)).containsExactlyEntriesIn(com.google.common.collect.ImmutableMap.of(1, ps1Commit.name())); org.eclipse.jgit.transport.PushResult pr = com.google.gerrit.acceptance.GitUtil.pushHead(testRepo, ""refs/for/master"", false); assertThat(pr.getRemoteUpdate(""refs/for/master"").getMessage()).isEqualTo(""no new changes""); }",762bc6a6ce9462f8e60fb0e20179b7133dc129cc,,testAccidentallyPushNewPatchSetDirectlyToBranchAndCantRecoverByPushingToRefsFor(),4,5,"@org.junit.Test public void testAccidentallyPushNewPatchSetDirectlyToBranchAndCantRecoverByPushingToRefsFor() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change.Id id = accidentallyPushNewPatchSetDirectlyToBranch(); com.google.gerrit.server.query.change.ChangeData cd = byChangeId(id); java.lang.String ps1Rev = com.google.common.collect.Iterables.getOnlyElement(cd.patchSets()).getRevision().get(); java.lang.String r = ""refs/for/master""; com.google.gerrit.acceptance.GitUtil.assertPushRejected(com.google.gerrit.acceptance.GitUtil.pushHead(testRepo, r, false), r, ""no new changes""); cd = byChangeId(id); assertThat(cd.change().getStatus()).isEqualTo(Change.Status.NEW); assertThat(com.google.gerrit.acceptance.git.AbstractPushForReview.getPatchSetRevisions(cd)).containsExactlyEntriesIn(com.google.common.collect.ImmutableMap.of(1, ps1Rev)); }",799adf868dfdc4ab8c9aeb164c383f21d5979795,testAccidentallyPushNewPatchSetDirectlyToBranchAndCantRecoverByPushingToRefsFor(),175439,451,257
63932,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_FileTable.java,48.0,"private void columnDelta1(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb, com.google.gerrit.client.diff.FileInfo info) { sb.openTd().setStyleName(com.google.gerrit.client.change.FileTable.R.css().deltaColumn1()); if ((!(Patch.COMMIT_MSG.equals(info.path()))) && (!(info.binary()))) { sb.append(((info.lines_inserted()) + (info.lines_deleted()))); } sb.closeTd(); }",05c65f709abad6ad44ad0b443526c417fa2cbaa3,"private void columnDelta1(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb, com.google.gerrit.client.diff.FileInfo info) { sb.openTd().setStyleName(com.google.gerrit.client.change.FileTable.R.css().deltaColumn1()); if (((!(Patch.COMMIT_MSG.equals(info.path()))) && (!(info.binary()))) && (!(ChangeType.DELETED.matches(info.status())))) { if (ChangeType.ADDED.matches(info.status())) { sb.append(info.lines_inserted()).append("" lines""); } else { sb.append(""+"").append(info.lines_inserted()).append("", -"").append(info.lines_deleted()); } } sb.closeTd(); }",77da98e6dfe50dee8fd761a10ce9faf775fc54e0,"columnDelta1(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder,com.google.gerrit.client.diff.FileInfo)","columnDelta1(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder,com.google.gerrit.client.diff.FileInfo)",9,48,"private void columnDelta1(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb, com.google.gerrit.client.diff.FileInfo info) { sb.openTd().setStyleName(com.google.gerrit.client.change.FileTable.R.css().deltaColumn1()); if ((!(Patch.COMMIT_MSG.equals(info.path()))) && (!(info.binary()))) { if (showChangeSizeBars) { sb.append(((info.lines_inserted()) + (info.lines_deleted()))); } else if (!(ChangeType.DELETED.matches(info.status()))) { if (ChangeType.ADDED.matches(info.status())) { sb.append(info.lines_inserted()).append("" lines""); } else { sb.append(""+"").append(info.lines_inserted()).append("", -"").append(info.lines_deleted()); } } } sb.closeTd(); }",39d86c19f7a3c364c87fdfd6c0c2bc95729040db,"columnDelta1(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder,com.google.gerrit.client.diff.FileInfo)",39437,178,208
77850,gerrit-server_src_main_java_com_google_gerrit_server_project_SetAccess.java,1.0,"private void updateProjectConfig(com.google.gerrit.server.CurrentUser user, com.google.gerrit.server.git.ProjectConfig config, com.google.gerrit.server.git.MetaDataUpdate md, org.eclipse.jgit.lib.ObjectId base) throws java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = config.commit(md); gitRefUpdated.fire(config.getProject().getNameKey(), RefNames.REFS_CONFIG, base, commit.getId()); projectCache.evict(config.getProject()); hooks.doRefUpdatedHook(new com.google.gerrit.reviewdb.client.Branch.NameKey(config.getProject().getNameKey(), com.google.gerrit.reviewdb.client.RefNames.REFS_CONFIG), base, commit.getId(), user.asIdentifiedUser().getAccount()); }",ded0596dba23fbe289d3655ff64f2953a1f25c3f,"private void updateProjectConfig(com.google.gerrit.server.CurrentUser user, com.google.gerrit.server.git.ProjectConfig config, com.google.gerrit.server.git.MetaDataUpdate md, org.eclipse.jgit.lib.ObjectId base) throws java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = config.commit(md); com.google.gerrit.reviewdb.client.Account account = (user.isIdentifiedUser()) ? ((com.google.gerrit.server.IdentifiedUser) (user)).getAccount() : null; gitRefUpdated.fire(config.getProject().getNameKey(), RefNames.REFS_CONFIG, base, commit.getId(), account); projectCache.evict(config.getProject()); hooks.doRefUpdatedHook(new com.google.gerrit.reviewdb.client.Branch.NameKey(config.getProject().getNameKey(), com.google.gerrit.reviewdb.client.RefNames.REFS_CONFIG), base, commit.getId(), user.asIdentifiedUser().getAccount()); }",8c49372c2a230686eba1bf59e23a5ec092b8362e,"updateProjectConfig(com.google.gerrit.server.CurrentUser,com.google.gerrit.server.git.ProjectConfig,com.google.gerrit.server.git.MetaDataUpdate,org.eclipse.jgit.lib.ObjectId)","updateProjectConfig(com.google.gerrit.server.CurrentUser,com.google.gerrit.server.git.ProjectConfig,com.google.gerrit.server.git.MetaDataUpdate,org.eclipse.jgit.lib.ObjectId)",2,1,"private void updateProjectConfig(com.google.gerrit.server.CurrentUser user, com.google.gerrit.server.git.ProjectConfig config, com.google.gerrit.server.git.MetaDataUpdate md, org.eclipse.jgit.lib.ObjectId base) throws java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = config.commit(md); com.google.gerrit.reviewdb.client.Account account = (user.isIdentifiedUser()) ? user.asIdentifiedUser().getAccount() : null; gitRefUpdated.fire(config.getProject().getNameKey(), RefNames.REFS_CONFIG, base, commit.getId(), account); projectCache.evict(config.getProject()); hooks.doRefUpdatedHook(new com.google.gerrit.reviewdb.client.Branch.NameKey(config.getProject().getNameKey(), com.google.gerrit.reviewdb.client.RefNames.REFS_CONFIG), base, commit.getId(), user.asIdentifiedUser().getAccount()); }",748ad510e01e6a5c086d3f66d1e839f989643080,"updateProjectConfig(com.google.gerrit.server.CurrentUser,com.google.gerrit.server.git.ProjectConfig,com.google.gerrit.server.git.MetaDataUpdate,org.eclipse.jgit.lib.ObjectId)",75333,246,234
69853,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_SubmitByCherryPickIT.java,3.0,"@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitWithContentMerge_Conflict() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit initialHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(""Change 1"", ""a.txt"", ""content""); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); testRepo.reset(initialHead); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange(""Change 2"", ""a.txt"", ""other content""); submitWithConflict(change2.getChangeId()); assertThat(getRemoteHead()).isEqualTo(oldHead); assertCurrentRevision(change2.getChangeId(), 1, change2.getCommitId()); assertNoSubmitter(change2.getChangeId(), 1); }",e477f89e9fe954f56ae486f0515d9206005a60e7,"@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitWithContentMerge_Conflict() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit initialHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(""Change 1"", ""a.txt"", ""content""); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); testRepo.reset(initialHead); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange(""Change 2"", ""a.txt"", ""other content""); submitWithConflict(change2.getChangeId(), ""due to a path conflict""); assertThat(getRemoteHead()).isEqualTo(oldHead); assertCurrentRevision(change2.getChangeId(), 1, change2.getCommitId()); assertNoSubmitter(change2.getChangeId(), 1); }",20bb6288991dc8027c1ab903ac4a9915de367043,submitWithContentMerge_Conflict(),submitWithContentMerge_Conflict(),4,3,"@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitWithContentMerge_Conflict() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit initialHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(""Change 1"", ""a.txt"", ""content""); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); testRepo.reset(initialHead); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange(""Change 2"", ""a.txt"", ""other content""); submitWithConflict(change2.getChangeId(), (((((""Cannot merge "" + (change2.getCommitId().name())) + ""\n"") + ""Change could not be merged due to a path conflict.\n\n"") + ""Please rebase the change locally and "") + ""upload the rebased commit for review."")); assertThat(getRemoteHead()).isEqualTo(oldHead); assertCurrentRevision(change2.getChangeId(), 1, change2.getCommitId()); assertNoSubmitter(change2.getChangeId(), 1); }",5fc0f52bb89709688f81b4cba8362052b82c0a07,submitWithContentMerge_Conflict(),68371,233,286
75658,gerrit-server_src_main_java_com_google_gerrit_server_git_strategy_SubmitStrategyOp.java,20.0,"private void saveApprovals(com.google.gerrit.server.git.LabelNormalizer.Result normalized, com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, com.google.gerrit.server.notedb.ChangeUpdate update, boolean includeUnchanged) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = update.getPatchSetId(); ctx.getDb().patchSetApprovals().upsert(com.google.gerrit.server.git.strategy.SubmitStrategyOp.convertPatchSet(normalized.getNormalized(), psId)); ctx.getDb().patchSetApprovals().delete(com.google.gerrit.server.git.strategy.SubmitStrategyOp.convertPatchSet(normalized.deleted(), psId)); for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : normalized.updated()) { update.putApprovalFor(psa.getAccountId(), psa.getLabel(), psa.getValue()); } for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : normalized.deleted()) { update.removeApprovalFor(psa.getAccountId(), psa.getLabel()); } for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : normalized.unchanged()) { if (includeUnchanged || (psa.isSubmit())) { logDebug((""Adding submit label "" + psa)); update.putApprovalFor(psa.getAccountId(), psa.getLabel(), psa.getValue()); } } }",aa67288323f8eab7d626f275ff6c7c86bd85bd60,"private void saveApprovals(com.google.gerrit.server.git.LabelNormalizer.Result normalized, com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, com.google.gerrit.server.notedb.ChangeUpdate update, boolean includeUnchanged) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = update.getPatchSetId(); ctx.getDb().patchSetApprovals().upsert(com.google.gerrit.server.git.strategy.SubmitStrategyOp.convertPatchSet(normalized.getNormalized(), psId)); for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : normalized.updated()) { update.putApprovalFor(psa.getAccountId(), psa.getLabel(), psa.getValue()); } for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : normalized.unchanged()) { if (includeUnchanged || (psa.isSubmit())) { logDebug((""Adding submit label "" + psa)); update.putApprovalFor(psa.getAccountId(), psa.getLabel(), psa.getValue()); } } }",776cbc6df3bd1cf777dada0bdf0c9c0cb5acebe4,"saveApprovals(com.google.gerrit.server.git.LabelNormalizer$Result,com.google.gerrit.server.git.BatchUpdate.ChangeContext,com.google.gerrit.server.notedb.ChangeUpdate,boolean)","saveApprovals(com.google.gerrit.server.git.LabelNormalizer$Result,com.google.gerrit.server.git.BatchUpdate.ChangeContext,com.google.gerrit.server.notedb.ChangeUpdate,boolean)",5,21,"private void saveApprovals(com.google.gerrit.server.git.LabelNormalizer.Result normalized, com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, com.google.gerrit.server.notedb.ChangeUpdate update, boolean includeUnchanged) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = update.getPatchSetId(); ctx.getDb().patchSetApprovals().upsert(SubmitStrategyOp.convertPatchSet(normalized.getNormalized(), psId)); ctx.getDb().patchSetApprovals().update(SubmitStrategyOp.zero(SubmitStrategyOp.convertPatchSet(normalized.deleted(), psId))); for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : normalized.updated()) { update.putApprovalFor(psa.getAccountId(), psa.getLabel(), psa.getValue()); } for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : normalized.deleted()) { update.removeApprovalFor(psa.getAccountId(), psa.getLabel()); } for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : normalized.unchanged()) { if (includeUnchanged || (psa.isLegacySubmit())) { logDebug((""Adding submit label "" + psa)); update.putApprovalFor(psa.getAccountId(), psa.getLabel(), psa.getValue()); } } }",a8655fe78b8711ae44cce190e8db41a22ce7aadb,"saveApprovals(com.google.gerrit.server.git.LabelNormalizer$Result,com.google.gerrit.server.git.BatchUpdate.ChangeContext,com.google.gerrit.server.notedb.ChangeUpdate,boolean)",113016,270,334
48664,gerrit-server_src_main_java_com_google_gerrit_server_api2_changes_ChangeApiImpl.java,,,,com.google.gerrit.server.api2.changes.ChangeApiImpl create(com.google.gerrit.server.change.ChangeResource change);,5582a84ad010eb4930dbb4e21b4c0a738b86f72c,,create(com.google.gerrit.server.change.ChangeResource),9,0,com.google.gerrit.server.api.changes.ChangeApiImpl create(com.google.gerrit.server.change.ChangeResource change);,76fff9399ad614b3f019a75ed9f47b0c2bf25bcd,create(com.google.gerrit.server.change.ChangeResource),55717,34,34
93409,gerrit-server_src_main_java_com_google_gerrit_server_account_ExternalIdsUpdate.java,,,,public static java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> toAccountExternalIds(java.util.Collection<com.google.gerrit.server.account.ExternalId> extIds) { return extIds.stream().map(( e) -> e.asAccountExternalId()).collect(java.util.stream.Collectors.toSet()); },46822a55878290617177c8c15e92234a59135758,,toAccountExternalIds(java.util.Collection),27,30,"private void updateNoteMap(com.google.gerrit.server.account.ExternalIdsUpdate.MyConsumer<com.google.gerrit.server.account.ExternalIdsUpdate.OpenRepo> update) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectInserter ins = repo.newObjectInserter()) { retryer.call(new com.google.gerrit.server.account.ExternalIdsUpdate.TryNoteMapUpdate(repo, rw, ins, update)); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { if ((e.getCause()) != null) { com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), com.google.gwtorm.server.OrmException.class); } throw new com.google.gwtorm.server.OrmException(e); } }",b31011d3e6641b8dd53ec58876b51b06d5c23492,updateNoteMap(com.google.gerrit.server.account.ExternalIdsUpdate$MyConsumer),179279,87,338
140535,java_com_google_gerrit_server_patchlib_Text.java,6.0,"@java.lang.Override protected java.lang.String decode(int s, int e) { if ((charset) == null) { charset = com.google.gerrit.server.patch.Text.charset(content, null); } return org.eclipse.jgit.util.RawParseUtils.decode(charset, content, s, e); }",7bb1d1388bb7ec699731ed0c28b1f51ea452e7d1,"@java.lang.Override protected java.lang.String decode(int s, int e) { if ((charset) == null) { charset = com.google.gerrit.server.patchlib.Text.charset(content, null); } return org.eclipse.jgit.util.RawParseUtils.decode(charset, content, s, e); }",368b9b2a4cf0879c576b7cd4b3254d9906ea3251,"decode(int,int)","decode(int,int)",11,5,"@java.lang.Override protected java.lang.String decode(int s, int e) { if ((charset) == null) { charset = com.google.gerrit.server.diff.Text.charset(content, null); } return org.eclipse.jgit.util.RawParseUtils.decode(charset, content, s, e); }",e571c6c4d6ce5dbb091d4557a61453c12ce45768,"decode(int,int)",15593,80,79
73888,gerrit-server_src_main_java_com_google_gerrit_server_PatchSetUtil.java,,,,"public com.google.gerrit.reviewdb.client.PatchSet latest(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gwtorm.server.OrmException { return get(db, notes, notes.getChange().currentPatchSetId()); }",b87ad1cf0819e483e00cfd9f93cb136083abf00e,,"latest(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes)",4,1,"public com.google.gerrit.reviewdb.client.PatchSet current(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gwtorm.server.OrmException { return get(db, notes, notes.getChange().currentPatchSetId()); }",3b678e02409d7f85d32314ec18298b0adc489ee5,"current(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes)",7866,83,83
20355,gerrit-gwtui_src_main_java_com_google_gerrit_client_Dispatcher.java,17.0,"private com.google.gerrit.client.ui.Screen select() { java.lang.String p; p = ""admin,group,""; if (token.startsWith(p)) return new com.google.gerrit.client.admin.AccountGroupScreen(AccountGroup.Id.parse(com.google.gerrit.client.Dispatcher.skip(p, token))); p = ""admin,project,""; if (token.startsWith(p)) { p = com.google.gerrit.client.Dispatcher.skip(p, token); final int c = p.indexOf(','); final com.google.gerrit.reviewdb.Project.NameKey k = Project.NameKey.parse(p.substring(0, c)); final boolean isWild = k.equals(com.google.gerrit.client.Gerrit.getConfig().getWildProject()); p = p.substring((c + 1)); if (ProjectScreen.INFO.equals(p)) { return new com.google.gerrit.client.admin.ProjectInfoScreen(k); } if ((!isWild) && (ProjectScreen.BRANCH.equals(p))) { return new com.google.gerrit.client.admin.ProjectBranchesScreen(k); } if (ProjectScreen.ACCESS.equals(p)) { return new com.google.gerrit.client.NotFoundScreen(); } return new com.google.gerrit.client.NotFoundScreen(); } if (com.google.gerrit.client.ADMIN_GROUPS.equals(token)) { return new com.google.gerrit.client.admin.GroupListScreen(); } if (com.google.gerrit.client.ADMIN_PROJECTS.equals(token)) { return new com.google.gerrit.client.admin.ProjectListScreen(); } return new com.google.gerrit.client.NotFoundScreen(); }",e8569dea318065d8a6f33c18aa8e18fce1a8d382,"private com.google.gerrit.client.ui.Screen select() { java.lang.String p; p = ""admin,group,""; if (token.startsWith(p)) return new com.google.gerrit.client.admin.AccountGroupScreen(AccountGroup.Id.parse(com.google.gerrit.client.Dispatcher.skip(p, token))); p = ""admin,project,""; if (token.startsWith(p)) { p = com.google.gerrit.client.Dispatcher.skip(p, token); final int c = p.indexOf(','); final com.google.gerrit.reviewdb.Project.NameKey k = Project.NameKey.parse(p.substring(0, c)); final boolean isWild = k.equals(com.google.gerrit.client.Gerrit.getConfig().getWildProject()); p = p.substring((c + 1)); if (ProjectScreen.INFO.equals(p)) { return new com.google.gerrit.client.admin.ProjectInfoScreen(k); } if ((!isWild) && (ProjectScreen.BRANCH.equals(p))) { return new com.google.gerrit.client.admin.ProjectBranchesScreen(k); } if (ProjectScreen.ACCESS.equals(p)) { return new com.google.gerrit.client.admin.ProjectAccessScreen(k); } return new com.google.gerrit.client.NotFoundScreen(); } if (com.google.gerrit.client.ADMIN_GROUPS.equals(token)) { return new com.google.gerrit.client.admin.GroupListScreen(); } if (com.google.gerrit.client.ADMIN_PROJECTS.equals(token)) { return new com.google.gerrit.client.admin.ProjectListScreen(); } return new com.google.gerrit.client.NotFoundScreen(); }",b365200dd5b557df42d135f8b93ef8bf5c44ac7f,select(),select(),14,18,"private com.google.gerrit.client.ui.Screen select() { java.lang.String p; p = ""admin,group,uuid-""; if (token.startsWith(p)) return new com.google.gerrit.client.admin.AccountGroupScreen(AccountGroup.UUID.parse(com.google.gerrit.client.Dispatcher.skip(p, token))); p = ""admin,group,""; if (token.startsWith(p)) return new com.google.gerrit.client.admin.AccountGroupScreen(AccountGroup.Id.parse(com.google.gerrit.client.Dispatcher.skip(p, token))); p = ""admin,project,""; if (token.startsWith(p)) { p = com.google.gerrit.client.Dispatcher.skip(p, token); final int c = p.indexOf(','); final com.google.gerrit.reviewdb.Project.NameKey k = Project.NameKey.parse(p.substring(0, c)); final boolean isWild = k.equals(com.google.gerrit.client.Gerrit.getConfig().getWildProject()); p = p.substring((c + 1)); if (ProjectScreen.INFO.equals(p)) { return new com.google.gerrit.client.admin.ProjectInfoScreen(k); } if ((!isWild) && (ProjectScreen.BRANCH.equals(p))) { return new com.google.gerrit.client.admin.ProjectBranchesScreen(k); } if (ProjectScreen.ACCESS.equals(p)) { return new com.google.gerrit.client.admin.ProjectAccessScreen(k); } return new com.google.gerrit.client.NotFoundScreen(); } if (com.google.gerrit.client.ADMIN_GROUPS.equals(token)) { return new com.google.gerrit.client.admin.GroupListScreen(); } if (com.google.gerrit.client.ADMIN_PROJECTS.equals(token)) { return new com.google.gerrit.client.admin.ProjectListScreen(); } return new com.google.gerrit.client.NotFoundScreen(); }",04004fe032b83e9c4687c265225e86f5220a58df,select(),6293,402,461
159510,java_com_google_gerrit_server_config_ScheduleConfig.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean isInvalidOrMissing(long interval, long initialDelay) { java.lang.String key = (section()) + ((subsection()) != null ? ""."" + (subsection()) : """"); if ((interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) && (initialDelay == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG))) { com.google.gerrit.server.config.ScheduleConfig.log.info(""No schedule configuration for \""{}\""."", key); return true; } if (interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) { com.google.gerrit.server.config.ScheduleConfig.log.error(""Incomplete schedule configuration for \""{}\"" is ignored. Missing value for \""{}\""."", key, ((key + ""."") + (keyInterval()))); return true; } if (initialDelay == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) { com.google.gerrit.server.config.ScheduleConfig.log.error(""Incomplete schedule configuration for \""{}\"" is ignored. Missing value for \""{}\""."", key, ((key + ""."") + (keyStartTime()))); return true; } if ((interval <= 0) && (initialDelay < 0)) { com.google.gerrit.server.config.ScheduleConfig.log.error(""Invalid schedule configuration for \""{}\"" is ingnored. "", key); return true; } return false; }",57645b99e8ce7e82da7a4afee874082e5666f365,,"isInvalidOrMissing(long,long)",3,15,"private boolean isInvalidOrMissing(long interval, long initialDelay) { java.lang.String key = (section()) + ((subsection()) != null ? ""."" + (subsection()) : """"); if ((interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) && (initialDelay == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG))) { com.google.gerrit.server.config.ScheduleConfig.log.info(""No schedule configuration for \""{}\""."", key); return true; } if (interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) { com.google.gerrit.server.config.ScheduleConfig.log.error(""Incomplete schedule configuration for \""{}\"" is ignored. Missing value for \""{}\""."", key, ((key + ""."") + (keyInterval()))); return true; } if (initialDelay == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) { com.google.gerrit.server.config.ScheduleConfig.log.error(""Incomplete schedule configuration for \""{}\"" is ignored. Missing value for \""{}\""."", key, ((key + ""."") + (keyStartTime()))); return true; } if ((interval <= 0) || (initialDelay < 0)) { com.google.gerrit.server.config.ScheduleConfig.log.error(""Invalid schedule configuration for \""{}\"" is ignored. "", key); return true; } return false; }",0a3fe2eda5d5aa6f94184f9a636cc95291dab55c,"isInvalidOrMissing(long,long)",140144,337,334
161551,src_test_java_com_cisco_gerrit_plugins_slack_message_PrivateStateChangedGeneratorTest.java,,,,"@org.junit.Test public void publishesWhenExpected() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",90b583cd2e300971cd501437908bca8630165bf1,,publishesWhenExpected(),7,2,"@org.junit.Test public void publishesWhenExpected() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",26329e03f02fcd97ab960502c413e0511f9d22dc,publishesWhenExpected(),200984,137,129
155394,src_main_java_com_googlesource_gerrit_plugins_its_jira_JiraConfig.java,,,,public java.lang.String getUrl() { return jiraUrl; },8cdea5175fe9393eaf7815e1cb72eabbf71213c9,,getUrl(),7,1,public java.lang.String getJiraUrl() { return jiraUrl; },b55eccfcc1c5775d0b6fcbf07734ff787d2857d0,getJiraUrl(),41556,16,17
67777,gerrit-gwtui_src_main_java_com_google_gerrit_client_config_GitWebInfo.java,,,,"public final java.lang.String toBranch(com.google.gerrit.reviewdb.client.Branch.NameKey branch) { com.google.gerrit.common.data.ParameterizedString pattern = new com.google.gerrit.common.data.ParameterizedString(type().getBranch()); java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<>(); p.put(""project"", encode(branch.getParentKey().get())); p.put(""branch"", encode(branch.get())); return (url()) + (pattern.replace(p)); }",0ed99338cb94dfee11b1fe455b53505620a1e9e5,,toBranch(com.google.gerrit.reviewdb.client.Branch$NameKey),16,11,"public final java.lang.String toBranch(com.google.gerrit.reviewdb.client.Branch.NameKey branch) { com.google.gerrit.common.data.ParameterizedString pattern = new com.google.gerrit.common.data.ParameterizedString(type().branch()); java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<>(); p.put(""project"", encode(branch.getParentKey().get())); p.put(""branch"", encode(branch.get())); return (url()) + (pattern.replace(p)); }",07d45e72ee8b3f24af1f51bef295658c49bde761,toBranch(com.google.gerrit.reviewdb.client.Branch$NameKey),124334,132,131
60324,src_main_java_com_googlesource_gerrit_plugins_xdocs_XDocConfig.java,,,,"java.lang.String getIndexFile() { return com.google.common.base.MoreObjects.firstNonNull(cfg.getString(com.googlesource.gerrit.plugins.xdocs.XDocConfig.WEB_SECTION, null, com.googlesource.gerrit.plugins.xdocs.XDocConfig.KEY_INDEX_FILE), com.googlesource.gerrit.plugins.xdocs.XDocConfig.DEFAULT_INDEX_FILE); }",0c69177de68bcce99f20d2ebc5d87a40f076b8b3,,getIndexFile(),3,0,"java.lang.String getIndexFile() { return com.google.common.base.MoreObjects.firstNonNull(cfg.getString(com.googlesource.gerrit.plugins.xdocs.XDocConfig.SECTION_WEB, null, com.googlesource.gerrit.plugins.xdocs.XDocConfig.KEY_INDEX_FILE), com.googlesource.gerrit.plugins.xdocs.XDocConfig.DEFAULT_INDEX_FILE); }",cd81f83d64aa4c11df197ebf3c0dbc72ebf2a6a8,getIndexFile(),209007,99,99
78610,src_main_java_com_googlesource_gerrit_plugins_deleteproject_database_DatabaseDeleteHandler.java,1.0,"public void assertCanDelete(com.google.gerrit.reviewdb.client.Project project) throws com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException { com.google.gerrit.server.git.SubmoduleOp sub = subOpProvider.get(); com.google.gerrit.reviewdb.client.Project.NameKey proj = project.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(proj);com.google.gerrit.server.git.MergeOpRepoManager orm = ormProvider.get()) { for (org.eclipse.jgit.lib.Ref ref : repo.getRefDatabase().getRefs(RefNames.REFS_HEADS).values()) { com.google.gerrit.reviewdb.client.Branch.NameKey b = new com.google.gerrit.reviewdb.client.Branch.NameKey(proj, ref.getName()); if (!(sub.superProjectSubscriptionsForSubmoduleBranch(b, orm).isEmpty())) { throw new com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException(""Project is subscribed by other projects.""); } } } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { } catch (java.io.IOException e) { throw new com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException(""Project is subscribed by other projects.""); } }",f87ddfba1ff389ae78b694bd3b0569f0a8d54384,"public void assertCanDelete(com.google.gerrit.reviewdb.client.Project project) throws com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException { com.google.gerrit.server.git.SubmoduleOp sub = subOpProvider.get(); com.google.gerrit.reviewdb.client.Project.NameKey proj = project.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(proj)) { for (org.eclipse.jgit.lib.Ref ref : repo.getRefDatabase().getRefs(RefNames.REFS_HEADS).values()) { com.google.gerrit.reviewdb.client.Branch.NameKey b = new com.google.gerrit.reviewdb.client.Branch.NameKey(proj, ref.getName()); if (!(sub.superProjectSubscriptionsForSubmoduleBranch(b).isEmpty())) { throw new com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException(""Project is subscribed by other projects.""); } } } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { } catch (java.io.IOException e) { throw new com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException(""Project is subscribed by other projects.""); } }",bc236180c7a68fd0cad6a589efcdc40bcbee4b1f,assertCanDelete(com.google.gerrit.reviewdb.client.Project),assertCanDelete(com.google.gerrit.reviewdb.client.Project),4,1,"public void assertCanDelete(com.google.gerrit.reviewdb.client.Project project) throws com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException { com.google.gerrit.reviewdb.client.Project.NameKey proj = project.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(proj);com.google.gerrit.server.git.MergeOpRepoManager orm = ormProvider.get()) { com.google.gerrit.server.git.SubmoduleOp sub = subOpFactory.create(orm); for (org.eclipse.jgit.lib.Ref ref : repo.getRefDatabase().getRefs(RefNames.REFS_HEADS).values()) { com.google.gerrit.reviewdb.client.Branch.NameKey b = new com.google.gerrit.reviewdb.client.Branch.NameKey(proj, ref.getName()); if (!(sub.superProjectSubscriptionsForSubmoduleBranch(b).isEmpty())) { throw new com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException(""Project is subscribed by other projects.""); } } } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { } catch (java.io.IOException e) { throw new com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException(""Project is subscribed by other projects.""); } }",17804ad0d3338717c4fcc3c02f7721a7da82fae8,assertCanDelete(com.google.gerrit.reviewdb.client.Project),186372,295,321
14033,gerrit-sshd_src_main_java_com_google_gerrit_sshd_AbstractGitCommand.java,0.0,"protected abstract void runImpl() throws com.google.gerrit.sshd.Failure, java.io.IOException;",14c7fc3319223b09535f35866a696f3e539fb5a6,"protected abstract void runImpl() throws com.google.gerrit.sshd.Failure, com.google.gwtorm.client.OrmException, java.io.IOException;",81a11f267ec7fb42fa8314e8bf7fc7cb89a608cf,runImpl(),runImpl(),18,0,"protected abstract void runImpl() throws com.google.gerrit.sshd.Failure, java.io.IOException;",14c7fc3319223b09535f35866a696f3e539fb5a6,runImpl(),34357,38,25
34486,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_PagedSingleListScreen.java,1.0,protected com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.common.data.SingleListChangeInfo> loadCallback() { return new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.SingleListChangeInfo>(this) { @java.lang.Override protected void preDisplay(final com.google.gerrit.common.data.SingleListChangeInfo result) { display(result); } }; },44b042a8958ab62d1bd5e59378f577aa2047a34b,protected com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.ChangeList> loadCallback() { return new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.changes.ChangeList>(this) { @java.lang.Override protected void preDisplay(com.google.gerrit.client.changes.ChangeList result) { display(result); } }; },ff8e65943c5dc4fb7071882867df333b30d47049,loadCallback(),loadCallback(),11,2,protected com.google.gwtjsonrpc.common.AsyncCallback<com.google.gerrit.common.data.SingleListChangeInfo> loadCallback() { return new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.SingleListChangeInfo>(this) { @java.lang.Override protected void preDisplay(final com.google.gerrit.common.data.SingleListChangeInfo result) { display(result); } }; },f1c8d524dfd89a7afda06600cfd4371544e59e1a,loadCallback(),17702,107,109
77003,src_main_java_com_googlesource_gerrit_plugins_replication_ReplicationState.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.lang.String toStatusString() { return name().toLowerCase().replace(""_"", ""-""); }",a86749ab86bdf4d3574f97af9e82d0532b59bed3,,toStatusString(),3,0,"@java.lang.Override public java.lang.String toString() { return name().toLowerCase().replace(""_"", ""-""); }",7e7d110b63b453ca2ca1eb0df366cf3efb134f1e,toString(),167509,23,28
65700,gerrit-oauth_src_main_java_com_google_gerrit_httpd_auth_oauth_OAuthSession.java,,,,"private void authenticateAndRedirect(javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { com.google.gerrit.server.account.AuthRequest areq = new com.google.gerrit.server.account.AuthRequest(user.getId()); areq.setDisplayName(user.getName()); areq.setEmailAddress(user.getEmail()); com.google.gerrit.server.account.AuthResult arsp; try { arsp = accountManager.authenticate(areq); } catch (com.google.gerrit.server.account.AccountException e) { com.google.gerrit.httpd.auth.oauth.OAuthSession.log.error(((""Unable to authenticate user \"""" + (user)) + ""\""""), e); rsp.sendError(HttpServletResponse.SC_FORBIDDEN); return; } webSession.get().login(arsp, true); java.lang.String suffix = redirectUrl.substring(((OAuthWebFilter.GERRIT_LOGIN.length()) + 1)); suffix = java.net.URLDecoder.decode(suffix, java.nio.charset.StandardCharsets.UTF_8.name()); rsp.sendRedirect(suffix); }",57deaea3e85cb53efe31454f2a09d81f1dfbc1e9,,authenticateAndRedirect(javax.servlet.http.HttpServletResponse),2,0,"private void authenticateAndRedirect(javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { com.google.gerrit.server.account.AuthRequest areq = new com.google.gerrit.server.account.AuthRequest(user.getExternalId()); areq.setUserName(user.getUserName()); areq.setEmailAddress(user.getEmailAddress()); areq.setDisplayName(user.getDisplayName()); com.google.gerrit.server.account.AuthResult arsp; try { arsp = accountManager.authenticate(areq); } catch (com.google.gerrit.server.account.AccountException e) { com.google.gerrit.httpd.auth.oauth.OAuthSession.log.error(((""Unable to authenticate user \"""" + (user)) + ""\""""), e); rsp.sendError(HttpServletResponse.SC_FORBIDDEN); return; } webSession.get().login(arsp, true); java.lang.String suffix = redirectUrl.substring(((OAuthWebFilter.GERRIT_LOGIN.length()) + 1)); suffix = java.net.URLDecoder.decode(suffix, java.nio.charset.StandardCharsets.UTF_8.name()); rsp.sendRedirect(suffix); }",cd5730e13981a2982d202814ab79b0bb6b8534d1,authenticateAndRedirect(javax.servlet.http.HttpServletResponse),121971,249,261
101012,gerrit-lucene_src_main_java_com_google_gerrit_lucene_AbstractLuceneIndex.java,7.0,"com.google.common.util.concurrent.ListenableFuture<?> delete(final org.apache.lucene.index.Term term) { return submit(new java.util.concurrent.Callable<java.lang.Long>() { @java.lang.Override public java.lang.Long call() throws java.io.IOException, java.lang.InterruptedException { return writer.deleteDocuments(term); } }); }",278b894fe51688d3374500eb18614b6ae5fec83c,com.google.common.util.concurrent.ListenableFuture<?> delete(final org.apache.lucene.index.Term term) { return submit(() -> { return writer.deleteDocuments(term); }); },2d6040160ec943dbf5c61571a225c8889efddbcc,delete(org.apache.lucene.index.Term),delete(org.apache.lucene.index.Term),5,7,com.google.common.util.concurrent.ListenableFuture<?> delete(final org.apache.lucene.index.Term term) { return submit(() -> writer.deleteDocuments(term)); },1f027fd8dfae0ed448310453198af5ec5174c9c4,delete(org.apache.lucene.index.Term),159786,43,40
92436,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_mail_MailProcessorIT.java,,,,"@org.junit.Test public void testParseAndPersistInlineComment() throws java.lang.Exception { java.lang.String changeId = createChangeForTest(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); java.lang.String ts = MailUtil.rfcDateformatter.format(java.time.ZonedDateTime.ofInstant(comments.get(0).updated.toInstant(), java.time.ZoneId.of(""UTC""))); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields(); java.lang.String txt = com.google.gerrit.acceptance.server.mail.MailProcessorIT.newPlaintextBody(((((canonicalWebUrl.get()) + ""#/c/"") + (changeInfo._number)) + ""/1""), null, ""Some Inline Comment"", null, null); b.textContent((txt + (com.google.gerrit.acceptance.server.mail.MailProcessorIT.textFooterForChange(changeId, ts)))); mailProcessor.process(b.build()); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeId).get().messages; assertThat(messages).hasSize(3); assertThat(com.google.common.collect.Iterables.getLast(messages).message).isEqualTo(""Patch Set 1:\n(1 comment)""); assertThat(com.google.common.collect.Iterables.getLast(messages).tag).isEqualTo(""mailMessageId=some id""); comments = gApi.changes().id(changeId).current().commentsAsList(); assertThat(comments).hasSize(3); assertThat(comments.get(2).message).isEqualTo(""Some Inline Comment""); assertThat(comments.get(2).tag).isEqualTo(""mailMessageId=some id""); assertThat(comments.get(2).inReplyTo).isEqualTo(comments.get(1).id); }",cbf1a4be286770e4d0c984817789ec2485b46f6c,,testParseAndPersistInlineComment(),3,7,"@org.junit.Test public void parseAndPersistInlineComment() throws java.lang.Exception { java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); java.lang.String ts = MailUtil.rfcDateformatter.format(java.time.ZonedDateTime.ofInstant(comments.get(0).updated.toInstant(), java.time.ZoneId.of(""UTC""))); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields(); java.lang.String txt = com.google.gerrit.acceptance.server.mail.MailProcessorIT.newPlaintextBody(((((canonicalWebUrl.get()) + ""#/c/"") + (changeInfo._number)) + ""/1""), null, ""Some Inline Comment"", null, null); b.textContent((txt + (com.google.gerrit.acceptance.server.mail.MailProcessorIT.textFooterForChange(changeId, ts)))); mailProcessor.process(b.build()); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeId).get().messages; assertThat(messages).hasSize(3); assertThat(com.google.common.collect.Iterables.getLast(messages).message).isEqualTo(""Patch Set 1:\n(1 comment)""); assertThat(com.google.common.collect.Iterables.getLast(messages).tag).isEqualTo(""mailMessageId=some id""); comments = gApi.changes().id(changeId).current().commentsAsList(); assertThat(comments).hasSize(3); assertThat(comments.get(2).message).isEqualTo(""Some Inline Comment""); assertThat(comments.get(2).tag).isEqualTo(""mailMessageId=some id""); assertThat(comments.get(2).inReplyTo).isEqualTo(comments.get(1).id); }",080cdcd8464ec4266ba6d99f2b121d73f0763184,parseAndPersistInlineComment(),109989,467,466
15247,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_ReviewCommand.java,6.0,"@java.lang.Override public void run() throws com.google.gerrit.sshd.commands.Failure { initOptionList(); parseCommandLine(); boolean ok = true; for (final com.google.gerrit.reviewdb.PatchSet.Id patchSetId : patchSetIds) { try { approveOne(patchSetId); } catch (com.google.gerrit.sshd.commands.UnloggedFailure e) { ok = false; writeError(((""error: "" + (e.getMessage())) + ""\n"")); } catch (java.lang.Exception e) { ok = false; writeError(((""fatal: internal server error while approving "" + patchSetId) + ""\n"")); com.google.gerrit.sshd.commands.ReviewCommand.log.error((""internal error while approving "" + patchSetId)); } } if (!ok) { throw new com.google.gerrit.sshd.commands.UnloggedFailure(1, (""one or more approvals failed;"" + "" review output above"")); } }",03115f2aa232c86c7883fe43f60afb99af42bdcb,"@java.lang.Override public void run() throws com.google.gerrit.sshd.commands.Failure { initOptionList(); parseCommandLine(); boolean ok = true; for (final com.google.gerrit.reviewdb.PatchSet.Id patchSetId : patchSetIds) { try { approveOne(patchSetId); } catch (com.google.gerrit.sshd.commands.UnloggedFailure e) { ok = false; writeError(((""error: "" + (e.getMessage())) + ""\n"")); } catch (java.lang.Exception e) { ok = false; java.lang.String err = (((""internal server error while approving "" + patchSetId) + ""\n\t"") + (e.getMessage())) + ""\n""; writeError((""fatal: "" + err)); com.google.gerrit.sshd.commands.ReviewCommand.log.error(err); } } if (!ok) { throw new com.google.gerrit.sshd.commands.UnloggedFailure(1, (""one or more approvals failed;"" + "" review output above"")); } }",f800dbd9a26c6aaa34ce2a87157db84e1395d46d,run(),run(),2,7,"@java.lang.Override public void run() throws com.google.gerrit.sshd.commands.Failure { initOptionList(); parseCommandLine(); boolean ok = true; for (final com.google.gerrit.reviewdb.PatchSet.Id patchSetId : patchSetIds) { try { approveOne(patchSetId); } catch (com.google.gerrit.sshd.commands.UnloggedFailure e) { ok = false; writeError(((""error: "" + (e.getMessage())) + ""\n"")); } catch (java.lang.Exception e) { ok = false; writeError(((""fatal: internal server error while approving "" + patchSetId) + ""\n"")); com.google.gerrit.sshd.commands.ReviewCommand.log.error((""internal error while approving "" + patchSetId)); } } if (!ok) { throw new com.google.gerrit.sshd.commands.UnloggedFailure(1, (""one or more approvals failed;"" + "" review output above"")); } }",03115f2aa232c86c7883fe43f60afb99af42bdcb,run(),100551,248,235
63196,gerrit-server_src_main_java_com_google_gerrit_server_change_Rebase.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private boolean canRebase(final com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId) { try { return (dbProvider.get().patchSetAncestors().ancestorsOf(patchSetId).toList().size()) == 1; } catch (com.google.gwtorm.server.OrmException e) { return false; } },4c7ec6ef84b7bde36df6a582f2b28695cb3526b5,,canRebase(com.google.gerrit.reviewdb.client.PatchSet$Id),15,4,private com.google.gerrit.reviewdb.client.PatchSet parseBase(final java.lang.String base) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.get(); com.google.gerrit.reviewdb.client.PatchSet.Id basePatchSetId = PatchSet.Id.fromRef(base); if (basePatchSetId != null) { return db.patchSets().get(basePatchSetId); } com.google.gerrit.reviewdb.client.PatchSet basePatchSet = null; try { com.google.gerrit.reviewdb.client.Change.Id baseChangeId = Change.Id.parse(base); if (baseChangeId != null) { for (com.google.gerrit.reviewdb.client.PatchSet ps : db.patchSets().byChange(baseChangeId)) { if ((basePatchSet == null) || ((basePatchSet.getId().get()) < (ps.getId().get()))) { basePatchSet = ps; } } } } catch (java.lang.NumberFormatException e) { } if (basePatchSet == null) { for (com.google.gerrit.reviewdb.client.PatchSet ps : db.patchSets().byRevision(new com.google.gerrit.reviewdb.client.RevId(base))) { if ((basePatchSet == null) || ((basePatchSet.getId().get()) < (ps.getId().get()))) { basePatchSet = ps; } } } return basePatchSet; },3e93d580c92f6ea2ea9ccb1f1034dc2092bde018,parseBase(java.lang.String),113248,80,365
54310,gerrit-server_src_main_java_com_google_gerrit_server_change_TestSubmitType.java,0.0,"@java.lang.Override public com.google.gerrit.reviewdb.client.Project.SubmitType apply(com.google.gerrit.server.change.RevisionResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException { return test.apply(resource, null); }",a18cbcb428bae7a85fec8d6e62a7b85fa6ee78e7,"@java.lang.Override public com.google.gerrit.extensions.common.ProjectSubmitType apply(com.google.gerrit.server.change.RevisionResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException { return test.apply(resource, null); }",279e109927ef7e1d79e469cdbcbba1c29a290e5b,apply(com.google.gerrit.server.change.RevisionResource),apply(com.google.gerrit.server.change.RevisionResource),14,0,"@java.lang.Override public com.google.gerrit.extensions.common.SubmitType apply(com.google.gerrit.server.change.RevisionResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException { return test.apply(resource, null); }",72df649b8a16e01c8a5fe3f935212d6c352d6b23,apply(com.google.gerrit.server.change.RevisionResource),163928,80,79
159431,javatests_com_google_gerrit_server_config_ScheduleConfigTest.java,0.0,"@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString(""a"", ""b"", ""i"", ""1h""); rc.setString(""a"", ""b"", ""s"", ""01:00""); com.google.gerrit.server.config.ScheduleConfig s = new com.google.gerrit.server.config.ScheduleConfig(rc, ""a"", ""b"", ""i"", ""s"", com.google.gerrit.server.config.ScheduleConfigTest.NOW); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.getInterval()); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); s = new com.google.gerrit.server.config.ScheduleConfig(rc, ""a"", ""b"", ""myInterval"", ""myStart"", com.google.gerrit.server.config.ScheduleConfigTest.NOW); assertEquals(s.getInterval(), ScheduleConfig.MISSING_CONFIG); assertEquals(s.getInitialDelay(), ScheduleConfig.MISSING_CONFIG); }",d5dd3f6a5c7fcb05c4190655a47a327cd884a644,"@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString(""a"", ""b"", ""i"", ""1h""); rc.setString(""a"", ""b"", ""s"", ""01:00""); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"", ""b"").setKeyInterval(""i"").setKeyStartTime(""s"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.getInterval()); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"", ""b"").setKeyInterval(""myInterval"").setKeyStartTime(""myStart"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(s.getInterval(), ScheduleConfig.MISSING_CONFIG); assertEquals(s.getInitialDelay(), ScheduleConfig.MISSING_CONFIG); }",b1fc1aabce00e7ebcca8fab488cd0d4c3a9d0660,customKeys(),customKeys(),4,0,"@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString(""a"", ""b"", ""i"", ""1h""); rc.setString(""a"", ""b"", ""s"", ""01:00""); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"").setSubsection(""b"").setKeyInterval(""i"").setKeyStartTime(""s"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.interval()); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.initialDelay()); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, ""a"").setSubsection(""b"").setKeyInterval(""myInterval"").setKeyStartTime(""myStart"").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(s.interval(), ScheduleConfig.MISSING_CONFIG); assertEquals(s.initialDelay(), ScheduleConfig.MISSING_CONFIG); }",02d92b9fc2de642d1773059e6bdbc15af1d1c00a,customKeys(),138015,303,307
48921,gerrit-gwtui_src_main_java_com_google_gerrit_client_api_DefaultActions.java,0.0,@java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject msg) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange2(id)); },3d1ad30d8d6669886cfd0ac34b08575e9c06bcdf,@java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject msg) { if (msg instanceof com.google.gerrit.client.rpc.NativeString) { com.google.gerrit.client.rpc.NativeString str = ((com.google.gerrit.client.rpc.NativeString) (msg)); if ((str != null) && (!(str.asString().isEmpty()))) { com.google.gwt.user.client.Window.alert(str.asString()); } } com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange2(id)); },479fd0839bbd1c6a84b065291ab851d49bc0310d,onSuccess(com.google.gwt.core.client.JavaScriptObject),onSuccess(com.google.gwt.core.client.JavaScriptObject),8,0,@java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject msg) { if (com.google.gerrit.client.rpc.NativeString.is(msg)) { com.google.gerrit.client.rpc.NativeString str = ((com.google.gerrit.client.rpc.NativeString) (msg)); if (!(str.asString().isEmpty())) { com.google.gwt.user.client.Window.alert(str.asString()); } } com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange2(id)); },089de88321d5b2604c99683118dd64d53d486816,onSuccess(com.google.gwt.core.client.JavaScriptObject),212384,148,143
52825,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotes.java,,,,"@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId rev = getRevision(); if (rev == null) { return; } approvals = com.google.common.collect.ArrayListMultimap.create(); org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(reader); walk.markStart(walk.parseCommit(rev)); for (org.eclipse.jgit.revwalk.RevCommit commit : walk) { walk.parseBody(commit); parse(commit); } for (java.util.Collection<com.google.gerrit.reviewdb.client.PatchSetApproval> v : approvals.asMap().values()) { java.util.Collections.reverse(((java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval>) (v))); } }",744b42a7f31e7467722b74bb1a6726a650a2a38e,,onLoad(),13,2,"@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId rev = getRevision(); if (rev == null) { return; } approvals = com.google.common.collect.ArrayListMultimap.create(); org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(reader); walk.markStart(walk.parseCommit(rev)); for (org.eclipse.jgit.revwalk.RevCommit commit : walk) { parse(commit); } for (java.util.Collection<com.google.gerrit.reviewdb.client.PatchSetApproval> v : approvals.asMap().values()) { java.util.Collections.sort(((java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval>) (v)), com.google.gerrit.server.notedb.ChangeNotes.PSA_BY_TIME); } }",4123c7d74e2bf5b263d5a719601211c3a9063472,onLoad(),194693,221,237
23048,gerrit-server_src_main_java_com_google_gerrit_server_project_RefControl.java,27.0,public boolean canSubmit() { return canPerform(Permission.SUBMIT); },018556d8342d57d3fc762918c799d2350ed446ac,"public boolean canSubmit() { if (""refs/meta/config"".equals(refName)) { return getProjectControl().isOwner(); } return canPerform(Permission.SUBMIT); }",bc51ec153129f8ddce16a6f3f5b195bb1c49af9a,canSubmit(),canSubmit(),3,27,public boolean canSubmit() { if (GitRepositoryManager.REF_CONFIG.equals(refName)) { return getProjectControl().isOwner(); } return canPerform(Permission.SUBMIT); },f939441d8daceed9678a7e225cd5e7fbc0803a0a,canSubmit(),91387,41,40
148032,java_com_google_gerrit_server_account_UniversalGroupBackend.java,8.0,"@java.lang.Override public void check() throws com.google.gerrit.server.StartupException { java.lang.String invalid = cfg.getSubsections(""groups"").stream().filter(( sub) -> { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(sub); com.google.gerrit.server.account.GroupBackend groupBackend = universalGroupBackend.backend(uuid); return (groupBackend == null) || ((groupBackend.get(uuid)) == null); }).map(( u) -> (""'"" + u) + ""'"").collect(java.util.stream.Collectors.joining("","")); if (!(invalid.isEmpty())) { throw new com.google.gerrit.server.StartupException(java.lang.String.format(((((""Subsections for 'groups' in gerrit.config must be valid group"" + "" UUIDs. The following group UUIDs could not be resolved: "") + invalid) + "" Please remove/fix these 'groups' subsections in"") + "" gerrit.config.""))); } }",5053040dca71b593105e46c9fa84bd2be13671d4,"@java.lang.Override public void check() throws com.google.gerrit.server.StartupException { java.lang.String invalid = cfg.getSubsections(""groups"").stream().filter(( sub) -> { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(sub); com.google.gerrit.server.account.GroupBackend groupBackend = universalGroupBackend.backend(uuid); return (groupBackend == null) || ((groupBackend.get(uuid)) == null); }).map(( u) -> (""'"" + u) + ""'"").collect(java.util.stream.Collectors.joining("","")); if (!(invalid.isEmpty())) { throw new com.google.gerrit.server.StartupException(java.lang.String.format(((((""Subsections for 'groups' in gerrit.config must be valid account"" + "" UUIDs. The following account UUIDs could not be resolved: "") + invalid) + "" Please remove/fix these 'groups' subsections in"") + "" gerrit.config.""))); } }",96af629282016f9191735c38c69e5ca9b908571c,check(),check(),17,8,"@java.lang.Override public void check() throws com.google.gerrit.server.StartupException { java.lang.String invalid = cfg.getSubsections(""groups"").stream().filter(( sub) -> { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(sub); com.google.gerrit.server.account.GroupBackend groupBackend = universalGroupBackend.backend(uuid); return (groupBackend == null) || ((groupBackend.get(uuid)) == null); }).map(( u) -> (""'"" + u) + ""'"").collect(java.util.stream.Collectors.joining("","")); if (!(invalid.isEmpty())) { throw new com.google.gerrit.server.StartupException(java.lang.String.format(((((""Subsections for 'groups' in gerrit.config must be valid group"" + "" UUIDs. The following group UUIDs could not be resolved: "") + invalid) + "" Please remove/fix these 'groups' subsections in"") + "" gerrit.config.""))); } }",5053040dca71b593105e46c9fa84bd2be13671d4,check(),215137,261,261
148032,java_com_google_gerrit_server_auth_ldap_Helper.java,10.0,"private void recursivelyExpandGroups(final java.util.Set<java.lang.String> groupDNs, final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema, final javax.naming.directory.DirContext ctx, final java.lang.String groupDN) { if (((groupDNs.add(groupDN)) && ((schema.accountMemberField) != null)) && (schema.accountMemberExpandGroups)) { com.google.common.collect.ImmutableSet<java.lang.String> cachedParentsDNs = parentGroups.getIfPresent(groupDN); if (cachedParentsDNs == null) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> dns = com.google.common.collect.ImmutableSet.builder(); try { final javax.naming.Name compositeGroupName = new javax.naming.CompositeName().add(groupDN); final javax.naming.directory.Attribute in = ctx.getAttributes(compositeGroupName, schema.accountMemberFieldArray).get(schema.accountMemberField); if (in != null) { final javax.naming.NamingEnumeration<?> groups = in.getAll(); try { while (groups.hasMore()) { dns.add(((java.lang.String) (groups.next()))); } } catch (javax.naming.PartialResultException e) { } } } catch (javax.naming.NamingException e) { LdapRealm.log.warn((""Could not find group "" + groupDN), e); } cachedParentsDNs = dns.build(); parentGroups.put(groupDN, cachedParentsDNs); } for (java.lang.String dn : cachedParentsDNs) { recursivelyExpandGroups(groupDNs, schema, ctx, dn); } } }",7bf7687b90fdb0f67d4ebbad1995cee4e3cf0b00,"private void recursivelyExpandGroups(final java.util.Set<java.lang.String> groupDNs, final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema, final javax.naming.directory.DirContext ctx, final java.lang.String groupDN) { if (((groupDNs.add(groupDN)) && ((schema.accountMemberField) != null)) && (schema.accountMemberExpandGroups)) { com.google.common.collect.ImmutableSet<java.lang.String> cachedParentsDNs = parentGroups.getIfPresent(groupDN); if (cachedParentsDNs == null) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> dns = com.google.common.collect.ImmutableSet.builder(); try { final javax.naming.Name compositeGroupName = new javax.naming.CompositeName().add(groupDN); final javax.naming.directory.Attribute in = ctx.getAttributes(compositeGroupName, schema.accountMemberFieldArray).get(schema.accountMemberField); if (in != null) { final javax.naming.NamingEnumeration<?> groups = in.getAll(); try { while (groups.hasMore()) { dns.add(((java.lang.String) (groups.next()))); } } catch (javax.naming.PartialResultException e) { } } } catch (javax.naming.NamingException e) { LdapRealm.log.warn((""Could not find account "" + groupDN), e); } cachedParentsDNs = dns.build(); parentGroups.put(groupDN, cachedParentsDNs); } for (java.lang.String dn : cachedParentsDNs) { recursivelyExpandGroups(groupDNs, schema, ctx, dn); } } }",981cb15cd4998fca062ac446c3162b1f3d8d3696,"recursivelyExpandGroups(java.util.Set,com.google.gerrit.server.auth.ldap.Helper$LdapSchema,javax.naming.directory.DirContext,java.lang.String)","recursivelyExpandGroups(java.util.Set,com.google.gerrit.server.auth.ldap.Helper$LdapSchema,javax.naming.directory.DirContext,java.lang.String)",17,10,"private void recursivelyExpandGroups(final java.util.Set<java.lang.String> groupDNs, final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema, final javax.naming.directory.DirContext ctx, final java.lang.String groupDN) { if (((groupDNs.add(groupDN)) && ((schema.accountMemberField) != null)) && (schema.accountMemberExpandGroups)) { com.google.common.collect.ImmutableSet<java.lang.String> cachedParentsDNs = parentGroups.getIfPresent(groupDN); if (cachedParentsDNs == null) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> dns = com.google.common.collect.ImmutableSet.builder(); try { final javax.naming.Name compositeGroupName = new javax.naming.CompositeName().add(groupDN); final javax.naming.directory.Attribute in = ctx.getAttributes(compositeGroupName, schema.accountMemberFieldArray).get(schema.accountMemberField); if (in != null) { final javax.naming.NamingEnumeration<?> groups = in.getAll(); try { while (groups.hasMore()) { dns.add(((java.lang.String) (groups.next()))); } } catch (javax.naming.PartialResultException e) { } } } catch (javax.naming.NamingException e) { LdapRealm.log.warn((""Could not find group "" + groupDN), e); } cachedParentsDNs = dns.build(); parentGroups.put(groupDN, cachedParentsDNs); } for (java.lang.String dn : cachedParentsDNs) { recursivelyExpandGroups(groupDNs, schema, ctx, dn); } } }",7bf7687b90fdb0f67d4ebbad1995cee4e3cf0b00,"recursivelyExpandGroups(java.util.Set,com.google.gerrit.server.auth.ldap.Helper$LdapSchema,javax.naming.directory.DirContext,java.lang.String)",218747,380,380
36780,gerrit-cache-h2_src_main_java_com_google_gerrit_server_cache_h2_DefaultCacheFactory.java,0.0,"@java.lang.SuppressWarnings(""unchecked"") <K, V> com.google.common.cache.CacheBuilder<K, V> create(com.google.gerrit.server.cache.CacheBinding<K, V> def, boolean unwrapValueHolder) { com.google.common.cache.CacheBuilder<K, V> builder = com.google.gerrit.server.cache.h2.DefaultCacheFactory.newCacheBuilder(); builder.recordStats(); builder.maximumWeight(cfg.getLong(""cache"", def.name(), ""memoryLimit"", def.maximumWeight())); com.google.common.cache.Weigher<K, V> weigher = def.weigher(); if ((weigher != null) && unwrapValueHolder) { final com.google.common.cache.Weigher<K, V> impl = weigher; weigher = ((com.google.common.cache.Weigher<K, V>) (new com.google.common.cache.Weigher<K, com.google.gerrit.server.cache.h2.H2CacheImpl.ValueHolder<V>>() { @java.lang.Override public int weigh(K key, com.google.gerrit.server.cache.h2.H2CacheImpl.ValueHolder<V> value) { return impl.weigh(key, value.value); } })); } else if (weigher == null) { weigher = com.google.gerrit.server.cache.h2.DefaultCacheFactory.unitWeight(); } builder.weigher(weigher); java.lang.Long age = def.expireAfterWrite(java.util.concurrent.TimeUnit.SECONDS); if (has(def.name(), ""maxAge"")) { builder.expireAfterWrite(com.google.gerrit.server.config.ConfigUtil.getTimeUnit(cfg, ""cache"", def.name(), ""maxAge"", (age != null ? age : 0), java.util.concurrent.TimeUnit.SECONDS), java.util.concurrent.TimeUnit.SECONDS); } else if (age != null) { builder.expireAfterWrite(age, java.util.concurrent.TimeUnit.SECONDS); } return builder; }",6f621e9c9d15aae9d46e9a5da99bcb215f21d2bf,"@java.lang.SuppressWarnings(""unchecked"") <K, V> com.google.common.cache.CacheBuilder<K, V> create(com.google.gerrit.server.cache.CacheBinding<K, V> def, boolean unwrapValueHolder) { com.google.common.cache.CacheBuilder<K, V> builder = com.google.gerrit.server.cache.h2.DefaultCacheFactory.newCacheBuilder(); builder.recordStats(); builder.maximumWeight(cfg.getLong(""cache"", def.name(), ""memoryLimit"", def.maximumWeight())); builder.removalListener(masterRemovalListenerFactory.get(def.name())); com.google.common.cache.Weigher<K, V> weigher = def.weigher(); if ((weigher != null) && unwrapValueHolder) { final com.google.common.cache.Weigher<K, V> impl = weigher; weigher = ((com.google.common.cache.Weigher<K, V>) (new com.google.common.cache.Weigher<K, com.google.gerrit.server.cache.h2.H2CacheImpl.ValueHolder<V>>() { @java.lang.Override public int weigh(K key, com.google.gerrit.server.cache.h2.H2CacheImpl.ValueHolder<V> value) { return impl.weigh(key, value.value); } })); } else if (weigher == null) { weigher = com.google.gerrit.server.cache.h2.DefaultCacheFactory.unitWeight(); } builder.weigher(weigher); java.lang.Long age = def.expireAfterWrite(java.util.concurrent.TimeUnit.SECONDS); if (has(def.name(), ""maxAge"")) { builder.expireAfterWrite(com.google.gerrit.server.config.ConfigUtil.getTimeUnit(cfg, ""cache"", def.name(), ""maxAge"", (age != null ? age : 0), java.util.concurrent.TimeUnit.SECONDS), java.util.concurrent.TimeUnit.SECONDS); } else if (age != null) { builder.expireAfterWrite(age, java.util.concurrent.TimeUnit.SECONDS); } return builder; }",d3da7c1c8f72a67e44cda4ee136311f6e2df6350,"create(com.google.gerrit.server.cache.CacheBinding,boolean)","create(com.google.gerrit.server.cache.CacheBinding,boolean)",7,0,"@java.lang.SuppressWarnings(""unchecked"") <K, V> com.google.common.cache.CacheBuilder<K, V> create(com.google.gerrit.server.cache.CacheBinding<K, V> def, boolean unwrapValueHolder) { com.google.common.cache.CacheBuilder<K, V> builder = com.google.gerrit.server.cache.h2.DefaultCacheFactory.newCacheBuilder(); builder.recordStats(); builder.maximumWeight(cfg.getLong(""cache"", def.name(), ""memoryLimit"", def.maximumWeight())); builder.removalListener(forwardingRemovalListenerFactory.create(def.name())); com.google.common.cache.Weigher<K, V> weigher = def.weigher(); if ((weigher != null) && unwrapValueHolder) { final com.google.common.cache.Weigher<K, V> impl = weigher; weigher = ((com.google.common.cache.Weigher<K, V>) (new com.google.common.cache.Weigher<K, com.google.gerrit.server.cache.h2.H2CacheImpl.ValueHolder<V>>() { @java.lang.Override public int weigh(K key, com.google.gerrit.server.cache.h2.H2CacheImpl.ValueHolder<V> value) { return impl.weigh(key, value.value); } })); } else if (weigher == null) { weigher = com.google.gerrit.server.cache.h2.DefaultCacheFactory.unitWeight(); } builder.weigher(weigher); java.lang.Long age = def.expireAfterWrite(java.util.concurrent.TimeUnit.SECONDS); if (has(def.name(), ""maxAge"")) { builder.expireAfterWrite(com.google.gerrit.server.config.ConfigUtil.getTimeUnit(cfg, ""cache"", def.name(), ""maxAge"", (age != null ? age : 0), java.util.concurrent.TimeUnit.SECONDS), java.util.concurrent.TimeUnit.SECONDS); } else if (age != null) { builder.expireAfterWrite(age, java.util.concurrent.TimeUnit.SECONDS); } return builder; }",d315395a05b909d10c9ad0cfc1183d37dc2f83fd,"create(com.google.gerrit.server.cache.CacheBinding,boolean)",130918,494,495
71882,gitiles-servlet_src_test_java_com_google_gitiles_LogServletTest.java,0.0,"@org.junit.Test public void basicLog() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit commit = repo.branch(""HEAD"").commit().create(); repo.getRevWalk().parseBody(commit); Log log = buildJson(""/repo/+log"", com.google.gitiles.LogServletTest.LOG, """"); assertThat(log.log).hasSize(1); verifyJsonCommit(log.log.get(0), commit); assertThat(log.log.get(0).treeDiff).isNull(); }",0ae31835c320c47ff6d543ab49beaf8c215032bc,"@org.junit.Test public void basicLog() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit commit = repo.branch(""HEAD"").commit().create(); repo.getRevWalk().parseBody(commit); Log log = buildJson(com.google.gitiles.LogServletTest.LOG, ""/repo/+log""); assertThat(log.log).hasSize(1); verifyJsonCommit(log.log.get(0), commit); assertThat(log.log.get(0).treeDiff).isNull(); }",33cddb67ed469edd34197d0349d2db265ddd4887,basicLog(),basicLog(),5,0,"@org.junit.Test public void basicLog() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit commit = repo.branch(""HEAD"").commit().create(); Log response = buildJson(com.google.gitiles.LogServletTest.LOG, ""/repo/+log""); assertThat(response.log).hasSize(1); verifyJsonCommit(response.log.get(0), commit); assertThat(response.log.get(0).treeDiff).isNull(); }",b0c93a4522f0ce5a123c68afff6907fb0882851c,basicLog(),154349,113,102
79646,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountState.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static java.util.List<java.lang.String> getSecondaryEmails(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { java.util.List<java.lang.String> emails = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_MAILTO)) { emails.add(id.getSchemeRest()); } } return emails; },8b79463aeddd1f56a4a7a73d347a7cbacb2c20c3,,getSecondaryEmails(java.util.Collection),6,3,public static java.util.Set<java.lang.String> getEmails(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { java.util.Set<java.lang.String> emails = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_MAILTO)) { emails.add(id.getSchemeRest()); } } return emails; },bfce625226f344079f72ce509643607685fde95e,getEmails(java.util.Collection),176096,129,128
55382,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_webui_UiResult.java,,,,public static com.google.gerrit.extensions.webui.UiResult redirectUrl(java.lang.String url) { com.google.gerrit.extensions.webui.UiResult r = new com.google.gerrit.extensions.webui.UiResult(); r.redirectUrl = url; return r; },cc72d8c5bc12aeaf9797c32b21fe67194e96bf5d,,redirectUrl(java.lang.String),4,1,public static com.google.gerrit.extensions.webui.UiResult redirectUrl(java.lang.String url) { com.google.gerrit.extensions.webui.UiResult r = new com.google.gerrit.extensions.webui.UiResult(); r.url = url; return r; },a654bb163088cdbd9a94c434703f4efacd200cf8,redirectUrl(java.lang.String),151621,70,69
129873,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,44.0,"@org.junit.Test public void cannotMuteOwnChange() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(""cannot mute own change""); gApi.changes().id(changeId).mute(true); }",04777a1d64af73db63778c8f8c0bf95ad30c9593,"@org.junit.Test public void cannotMarkChangeThatWasMarkedAsReviewedAsUnreviewed() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); setApiUser(user); gApi.changes().id(changeId).markAsReviewed(true); assertThat(gApi.changes().id(changeId).get().reviewed).isTrue(); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(((((""The labels "" + (com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL)) + "" and "") + (com.google.gerrit.server.StarredChangesUtil.UNREVIEWED_LABEL)) + "" are mutually exclusive. Only one of them can be set."")); gApi.accounts().self().setStars(changeId, new com.google.gerrit.extensions.api.changes.StarsInput(com.google.common.collect.ImmutableSet.of(((com.google.gerrit.server.StarredChangesUtil.UNREVIEWED_LABEL) + ""/1"")))); }",1cfdec4988ca9a7a1ab1286a4f42e493caa267cf,cannotMuteOwnChange(),cannotMarkChangeThatWasMarkedAsReviewedAsUnreviewed(),6,47,"@org.junit.Test public void cannotSetReviewedLabelForPatchSetThatAlreadyHasUnreviewedLabel() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); setApiUser(user); gApi.changes().id(changeId).markAsReviewed(false); assertThat(gApi.changes().id(changeId).get().reviewed).isNull(); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(((((((((""The labels "" + (com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL)) + ""/"") + 1) + "" and "") + (com.google.gerrit.server.StarredChangesUtil.UNREVIEWED_LABEL)) + ""/"") + 1) + "" are mutually exclusive. Only one of them can be set."")); gApi.accounts().self().setStars(changeId, new com.google.gerrit.extensions.api.changes.StarsInput(com.google.common.collect.ImmutableSet.of(((com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL) + ""/1"")))); }",4ded5f285fa186896a7091e137b10a125e348f60,cannotSetReviewedLabelForPatchSetThatAlreadyHasUnreviewedLabel(),74567,256,269
100331,gerrit-server_src_main_java_com_google_gerrit_server_config_GetServerInfo.java,3.0,"private com.google.gerrit.extensions.common.PluginConfigInfo getPluginInfo() { com.google.gerrit.extensions.common.PluginConfigInfo info = new com.google.gerrit.extensions.common.PluginConfigInfo(); info.hasAvatars = com.google.gerrit.server.config.GetServerInfo.toBoolean(((avatar.get()) != null)); info.jsResourcePaths = new java.util.ArrayList(); for (com.google.gerrit.extensions.webui.WebUiPlugin u : plugins) { info.jsResourcePaths.add(java.lang.String.format(""plugins/%s/%s"", u.getPluginName(), u.getJavaScriptResourcePath())); } return info; }",619a402ec250b63060c45bf664fc195b98deb2e0,"private com.google.gerrit.extensions.common.PluginConfigInfo getPluginInfo() { com.google.gerrit.extensions.common.PluginConfigInfo info = new com.google.gerrit.extensions.common.PluginConfigInfo(); info.hasAvatars = com.google.gerrit.server.config.GetServerInfo.toBoolean(((avatar.get()) != null)); info.jsResourcePaths = new java.util.ArrayList(); info.htmlResourcePaths = new java.util.ArrayList(); for (com.google.gerrit.extensions.webui.WebUiPlugin u : plugins) { java.lang.String path = u.getJavaScriptResourcePath(); if (path.endsWith("".html"")) { info.htmlResourcePaths.add(java.lang.String.format(""plugins/%s/%s"", u.getPluginName(), path)); } else { info.jsResourcePaths.add(java.lang.String.format(""plugins/%s/%s"", u.getPluginName(), path)); } } return info; }",bf6e2b2bf92a3547e1c20b109055e594a1df3532,getPluginInfo(),getPluginInfo(),4,3,"private com.google.gerrit.extensions.common.PluginConfigInfo getPluginInfo() { com.google.gerrit.extensions.common.PluginConfigInfo info = new com.google.gerrit.extensions.common.PluginConfigInfo(); info.hasAvatars = com.google.gerrit.server.config.GetServerInfo.toBoolean(((avatar.get()) != null)); info.jsResourcePaths = new java.util.ArrayList(); info.htmlResourcePaths = new java.util.ArrayList(); for (com.google.gerrit.extensions.webui.WebUiPlugin u : plugins) { java.lang.String path = java.lang.String.format(""plugins/%s/%s"", u.getPluginName(), u.getJavaScriptResourcePath()); if (path.endsWith("".html"")) { info.htmlResourcePaths.add(path); } else { info.jsResourcePaths.add(path); } } return info; }",0ce7d27e6ae0a8c6ea70d990c022b741b3c5a676,getPluginInfo(),83792,222,203
68803,src_main_java_com_ericsson_gerrit_plugins_eventslog_SQLStore.java,0.0,"private void copyFile() { java.nio.file.Path localPath = java.nio.file.Paths.get(localUrl.substring(com.ericsson.gerrit.plugins.eventslog.SQLStore.H2_DB_PREFIX.length())); java.io.File file = localPath.resolve(((com.ericsson.gerrit.plugins.eventslog.SQLTable.TABLE_NAME) + (com.ericsson.gerrit.plugins.eventslog.SQLStore.H2_DB_SUFFIX))).toFile(); java.io.File copyFile = localPath.resolve((((com.ericsson.gerrit.plugins.eventslog.SQLTable.TABLE_NAME) + (java.util.concurrent.TimeUnit.MILLISECONDS.toSeconds(com.google.gerrit.common.TimeUtil.nowMs()))) + (com.ericsson.gerrit.plugins.eventslog.SQLStore.H2_DB_SUFFIX))).toFile(); try { com.google.common.io.Files.copy(file, copyFile); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn(""Could not copy local database file with timestamp"", e); } }",525a3adbe707f3a06e751a5938fd02412bea4509,"private void copyFileIfConfigured(java.io.File file) { if (!(copyLocal)) { return; } java.io.File copyFile = cfg.getLocalCopyFile(); try { com.google.common.io.Files.copy(file, copyFile); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn(""Could not copy local database file with timestamp"", e); } }",71a874d2bae5cb88396e373451ba254492e2c175,copyFile(),copyFileIfConfigured(java.io.File),10,11,"private void copyFile() { java.io.File file = localPath.resolve(((com.ericsson.gerrit.plugins.eventslog.SQLTable.TABLE_NAME) + (com.ericsson.gerrit.plugins.eventslog.SQLStore.H2_DB_SUFFIX))).toFile(); java.io.File copyFile = localPath.resolve((((com.ericsson.gerrit.plugins.eventslog.SQLTable.TABLE_NAME) + (java.util.concurrent.TimeUnit.MILLISECONDS.toSeconds(com.google.gerrit.common.TimeUtil.nowMs()))) + (com.ericsson.gerrit.plugins.eventslog.SQLStore.H2_DB_SUFFIX))).toFile(); try { com.google.common.io.Files.copy(file, copyFile); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn(""Could not copy local database file with timestamp"", e); } }",1e2a754498b30dc9e0d589fc19d24399858cbf28,copyFile(),35743,102,225
61361,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_UpdatePrimaryKeys.java,,,,@com.google.inject.Inject(optional = true) void setPrimaryKeyFix(com.google.gerrit.server.schema.PrimaryKeyFix fix) { this.fix = fix; },5fa375df18e81af5956fd1b15036aab4d2814200,,setPrimaryKeyFix(com.google.gerrit.server.schema.PrimaryKeyFix),6,5,@com.google.inject.Inject(optional = true) void setSchemaFactory(com.google.gwtorm.server.SchemaFactory<com.google.gerrit.reviewdb.server.ReviewDb> dbFactory) { this.dbFactory = dbFactory; },196ab7a59efa6f2944082a0f976fcde8cc8b9535,setSchemaFactory(com.google.gwtorm.server.SchemaFactory),36799,41,59
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,74.0,"public java.util.Collection<com.google.gerrit.reviewdb.client.PatchSet> patchSets() throws com.google.gwtorm.server.OrmException { if ((patchSets) == null) { patchSets = psUtil.byChange(db, notes()); } return patchSets; }",906d690798ed6492beb47efcac356e6534bca9cc,"public java.util.Collection<com.google.gerrit.reviewdb.client.PatchSet> patchSets() throws com.google.gwtorm.server.OrmException { if ((patchSets) == null) { patchSets = a.psUtil.byChange(db, notes()); } return patchSets; }",f2d981bc63bf3ababff0644aa12ca59f2df9806b,patchSets(),patchSets(),5,74,"public java.util.Collection<com.google.gerrit.reviewdb.client.PatchSet> patchSets() throws com.google.gwtorm.server.OrmException { if ((patchSets) == null) { patchSets = psUtil.byChange(db, notes()); } return patchSets; }",906d690798ed6492beb47efcac356e6534bca9cc,patchSets(),94376,71,69
86197,gerrit-gwtui_src_main_java_com_google_gerrit_client_Dispatcher.java,14.0,"private static void patch(java.lang.String token, com.google.gerrit.reviewdb.client.PatchSet.Id baseId, com.google.gerrit.reviewdb.client.Patch.Key id, com.google.gerrit.client.diff.DisplaySide side, int line, java.lang.String panelType) { java.lang.String panel = panelType; if (panel == null) { int c = token.lastIndexOf(','); panel = (0 <= c) ? token.substring((c + 1)) : """"; } if (("""".equals(panel)) || (""cm"".equals(panel))) { if (com.google.gerrit.client.Dispatcher.preferUnified()) { com.google.gerrit.client.Dispatcher.unified(token, baseId, id, side, line); } else { com.google.gerrit.client.Dispatcher.codemirror(token, baseId, id, side, line); } } else if (""sidebyside"".equals(panel)) { com.google.gerrit.client.Dispatcher.codemirror(token, baseId, id, side, line); } else if (""unified"".equals(panel)) { com.google.gerrit.client.Dispatcher.unified(token, baseId, id, side, line); } else if (""edit"".equals(panel)) { com.google.gerrit.client.Dispatcher.codemirrorForEdit(token, id, line); } else { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); } }",36057214c128bd6559a6dbce731e94e7d9e172fc,"private static void patch(java.lang.String token, com.google.gerrit.client.DiffObject base, com.google.gerrit.reviewdb.client.Patch.Key id, com.google.gerrit.client.diff.DisplaySide side, int line, java.lang.String panelType) { java.lang.String panel = panelType; if (panel == null) { int c = token.lastIndexOf(','); panel = (0 <= c) ? token.substring((c + 1)) : """"; } if (("""".equals(panel)) || (""cm"".equals(panel))) { if (com.google.gerrit.client.Dispatcher.preferUnified()) { com.google.gerrit.client.Dispatcher.unified(token, base, id, side, line); } else { com.google.gerrit.client.Dispatcher.codemirror(token, base, id, side, line); } } else if (""sidebyside"".equals(panel)) { com.google.gerrit.client.Dispatcher.codemirror(token, base, id, side, line); } else if (""unified"".equals(panel)) { com.google.gerrit.client.Dispatcher.unified(token, base, id, side, line); } else if (""edit"".equals(panel)) { com.google.gerrit.client.Dispatcher.codemirrorForEdit(token, id, line); } else { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); } }",1b3fcc92c7d1a1906433a5aa138ea1a59a098f45,"patch(java.lang.String,com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.reviewdb.client.Patch$Key,com.google.gerrit.client.diff.DisplaySide,int,java.lang.String)","patch(java.lang.String,com.google.gerrit.client.DiffObject,com.google.gerrit.reviewdb.client.Patch$Key,com.google.gerrit.client.diff.DisplaySide,int,java.lang.String)",3,16,"private static void patch(java.lang.String token, com.google.gerrit.client.DiffObject base, com.google.gerrit.reviewdb.client.Patch.Key id, com.google.gerrit.client.diff.DisplaySide side, int line, java.lang.String panelType) { java.lang.String panel = panelType; if (panel == null) { int c = token.lastIndexOf(','); panel = (0 <= c) ? token.substring((c + 1)) : """"; } if (("""".equals(panel)) || (""cm"".equals(panel))) { if (com.google.gerrit.client.Dispatcher.preferUnified()) { com.google.gerrit.client.Dispatcher.unified(token, base, id, side, line); } else { com.google.gerrit.client.Dispatcher.codemirror(token, base, id, side, line); } } else if (""sidebyside"".equals(panel)) { com.google.gerrit.client.Dispatcher.codemirror(token, base, id, side, line); } else if (""unified"".equals(panel)) { com.google.gerrit.client.Dispatcher.unified(token, base, id, side, line); } else if (""edit"".equals(panel)) { if ((!(com.google.gerrit.reviewdb.client.Patch.isMagic(id.get()))) || (Patch.COMMIT_MSG.equals(id.get()))) { com.google.gerrit.client.Dispatcher.codemirrorForEdit(token, id, line); } else { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); } } else { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); } }",0a7fef654c7f6403b931d739df34619e9c53128a,"patch(java.lang.String,com.google.gerrit.client.DiffObject,com.google.gerrit.reviewdb.client.Patch$Key,com.google.gerrit.client.diff.DisplaySide,int,java.lang.String)",70934,349,424
61078,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_api_AllProjectsConfig.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void error(com.google.gerrit.server.git.ValidationError error) { com.google.gerrit.pgm.init.api.AllProjectsConfig.log.error((((""Error pasring file "" + (com.google.gerrit.server.git.GroupList.FILE_NAME)) + "": "") + (error.getMessage()))); }",b55ba8f2e41518d2d94abb90c7dabdd4d1448f06,,error(com.google.gerrit.server.git.ValidationError),5,13,"@java.lang.Override public void error(com.google.gerrit.server.git.ValidationError error) { com.google.gerrit.pgm.init.api.AllProjectsConfig.log.error((((""Error parsing file "" + (com.google.gerrit.server.git.GroupList.FILE_NAME)) + "": "") + (error.getMessage()))); }",87bc202c794fb759abef1f793b5550268a6b654a,error(com.google.gerrit.server.git.ValidationError),9250,86,84
48172,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,64.0,"private void registerCmEvents(final net.codemirror.lib.CodeMirror cm) { cm.on(""cursorActivity"", updateActiveLine(cm)); cm.on(""gutterClick"", onGutterClick(cm)); cm.on(""scroll"", doScroll(cm)); scrollTimerA = new com.google.gwt.user.client.Timer() { @java.lang.Override public void run() { fixScroll(cmA); } }; scrollTimerB = new com.google.gwt.user.client.Timer() { @java.lang.Override public void run() { fixScroll(cmB); } }; cm.on(""viewportChange"", adjustGutters(cm)); cm.on(""renderLine"", resizeEmptyLine(getSideFromCm(cm))); cm.addKeyMap(net.codemirror.lib.KeyMap.create().on(""'j'"", moveCursorDown(cm, 1)).on(""'k'"", moveCursorDown(cm, (-1))).on(""'u'"", upToChange()).on(""'r'"", toggleReviewed()).on(""'o'"", toggleOpenBox(cm)).on(""Enter"", toggleOpenBox(cm)).on(""'c'"", insertNewDraft(cm))); }",d6982c9d7df1ebc1843e18766afac593ca0a0ae6,"private void registerCmEvents(final net.codemirror.lib.CodeMirror cm) { cm.on(""cursorActivity"", updateActiveLine(cm)); cm.on(""gutterClick"", onGutterClick(cm)); cm.on(""scroll"", doScroll(cm)); scrollTimerA = new com.google.gwt.user.client.Timer() { @java.lang.Override public void run() { fixScroll(cmA); } }; scrollTimerB = new com.google.gwt.user.client.Timer() { @java.lang.Override public void run() { fixScroll(cmB); } }; cm.on(""viewportChange"", adjustGutters(cm)); cm.on(""renderLine"", resizeLinePadding(getSideFromCm(cm))); cm.addKeyMap(net.codemirror.lib.KeyMap.create().on(""'j'"", moveCursorDown(cm, 1)).on(""'k'"", moveCursorDown(cm, (-1))).on(""'u'"", upToChange()).on(""'r'"", toggleReviewed()).on(""'o'"", toggleOpenBox(cm)).on(""Enter"", toggleOpenBox(cm)).on(""'c'"", insertNewDraft(cm))); }",8d7fac681144318b90259a53a2e06ea94773837f,registerCmEvents(net.codemirror.lib.CodeMirror),registerCmEvents(net.codemirror.lib.CodeMirror),7,59,"private void registerCmEvents(final net.codemirror.lib.CodeMirror cm) { cm.on(""cursorActivity"", updateActiveLine(cm)); cm.on(""gutterClick"", onGutterClick(cm)); cm.on(""scroll"", doScroll(cm)); scrollTimerA = new com.google.gwt.user.client.Timer() { @java.lang.Override public void run() { fixScroll(cmA); } }; scrollTimerB = new com.google.gwt.user.client.Timer() { @java.lang.Override public void run() { fixScroll(cmB); } }; cm.on(""renderLine"", resizeLinePadding(getSideFromCm(cm))); cm.addKeyMap(net.codemirror.lib.KeyMap.create().on(""'j'"", moveCursorDown(cm, 1)).on(""'k'"", moveCursorDown(cm, (-1))).on(""'u'"", upToChange()).on(""'r'"", toggleReviewed()).on(""'o'"", toggleOpenBox(cm)).on(""Enter"", toggleOpenBox(cm)).on(""'c'"", insertNewDraft(cm))); }",4096d6ffe7fcef0f08c505813485a7f37d3ebdb0,registerCmEvents(net.codemirror.lib.CodeMirror),146736,275,261
46523,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_CommentInfo.java,,,,public final native boolean hasField(java.lang.String field);,323188a39629319eae98d82b75be720fceb12440,,hasField(java.lang.String),6,0,public final native boolean has_line();,de5880eef6da9267a62147e77f858f01f96c94b5,has_line(),130883,14,8
51238,gerrit-server_src_main_java_com_google_gerrit_server_config_PluginConfigFactory.java,2.0,"public org.eclipse.jgit.lib.Config getFromPluginConfig(com.google.gerrit.reviewdb.client.Project.NameKey projectName, java.lang.String pluginName) throws com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectName); if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(projectName); } return projectState.getConfig((pluginName + "".config"")).get(); }",ab5c9755de5ca3fe709c72014124ed61b408915c,"public org.eclipse.jgit.lib.Config getFromPluginConfig(com.google.gerrit.reviewdb.client.Project.NameKey projectName, java.lang.String pluginName) throws com.google.gerrit.server.project.NoSuchProjectException { return getProjectPluginConfig(projectName, pluginName).get(); }",4457ea2d37522c5390120136092475c5083a701f,"getFromPluginConfig(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)","getFromPluginConfig(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)",2,3,"public org.eclipse.jgit.lib.Config getProjectPluginConfigWithInheritance(com.google.gerrit.reviewdb.client.Project.NameKey projectName, java.lang.String pluginName) throws com.google.gerrit.server.project.NoSuchProjectException { return getPluginConfig(projectName, pluginName).getWithInheritance(); }",ef8d076fd6899d0ea727ee992b841cf6cb745401,"getProjectPluginConfigWithInheritance(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)",48487,73,76
12535,gerrit-pgm_src_main_java_com_google_gerrit_pgm_http_jetty_JettyServer.java,,,,"@java.lang.Override public void start() { try { httpd.start(); } catch (java.lang.Exception e) { throw new java.lang.IllegalStateException(""Cannot start HTTP daemon"", e); } }",ccf36d0432c15ff6dfa8918bea63c668ccdf0c89,,start(),2,7,"@java.lang.Override public void start() { try { server.httpd.start(); } catch (java.lang.Exception e) { throw new java.lang.IllegalStateException(""Cannot start HTTP daemon"", e); } }",ac9d72c81fe34e9a462c876fdd4c852548b4dad7,start(),86110,47,49
93299,gerrit-server_src_main_java_com_google_gerrit_server_account_ExternalIdCacheImpl.java,,,,"@java.lang.Override public java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> byAccount(com.google.gerrit.reviewdb.client.Account.Id accountId) { try { return com.google.common.collect.ImmutableSet.copyOf(extIdsByAccount.get(com.google.gerrit.server.account.ExternalIdCacheImpl.ListKey.ALL).get(accountId)); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.ExternalIdCacheImpl.log.warn(""Cannot list external ids"", e); return java.util.Collections.emptySet(); } }",20cf03ff803d1b554216dca046cf411f6ec60ec7,,byAccount(com.google.gerrit.reviewdb.client.Account$Id),13,6,"@java.lang.Override public java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> byAccount(com.google.gerrit.reviewdb.client.Account.Id accountId) { try { return extIdsByAccount.get(com.google.gerrit.server.account.ExternalIdCacheImpl.AllKey.ALL).get(accountId); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.ExternalIdCacheImpl.log.warn(""Cannot list external ids"", e); return java.util.Collections.emptySet(); } }",c725a6d94322eb0d21d1b0c7833053f2ecee4038,byAccount(com.google.gerrit.reviewdb.client.Account$Id),162044,152,139
62784,gerrit-server_src_main_java_com_google_gerrit_server_query_change_QueryProcessor.java,8.0,boolean isDisabled() { return (permittedLimit) <= 0; },302a9a9617573f48300b1c211255d3ea56a412dc,boolean isDisabled() { return (getPermittedLimit()) <= 0; },9c137fe2569c7d04d25ecaf3e2047eac9c4f779a,isDisabled(),isDisabled(),3,8,boolean isDisabled() { return (permittedLimit) <= 0; },302a9a9617573f48300b1c211255d3ea56a412dc,isDisabled(),10927,14,14
34477,gerrit-gwtui_src_main_java_com_google_gerrit_client_projects_ProjectInfo.java,,,,public Project.NameKey getNameKey() { return new com.google.gerrit.reviewdb.client.Project.NameKey(getName()); },306b620ebdba2d4bba59a8fadbc98b733c90d06a,,getNameKey(),13,0,public final Project.NameKey name_key() { return new com.google.gerrit.reviewdb.client.Project.NameKey(name()); },c80cb6d5f736c672e7a2e4a23cd0a375f3098484,name_key(),19489,33,34
159431,java_com_google_gerrit_server_config_ScheduleConfig.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static com.google.gerrit.server.config.ScheduleConfig create(org.eclipse.jgit.lib.Config config, java.lang.String section, java.lang.String subsection) { return com.google.gerrit.server.config.ScheduleConfig.builder(config, section, subsection).build(); }",ad90ddc41c3424effdffa4ed5d0457af5b031a8d,,"create(org.eclipse.jgit.lib.Config,java.lang.String,java.lang.String)",4,8,"@com.google.auto.value.extension.memoized.Memoized public long interval() { return com.google.gerrit.server.config.ScheduleConfig.computeInterval(config(), section(), subsection(), keyInterval()); }",5782358881e74de61c89d5119122445e1c61d237,interval(),138032,72,50
75805,src_main_java_com_googlesource_gerrit_plugins_replication_Destination.java,22.0,boolean wouldPushRef(java.lang.String ref) { if ((!(replicatePermissions)) && (RefNames.REFS_CONFIG.equals(ref))) { return false; } for (org.eclipse.jgit.transport.RefSpec s : remote.getPushRefSpecs()) { if (s.matchSource(ref)) { return true; } } return false; },00dcff5b26406ae9157c844322e5c853ac3bc2a5,boolean wouldPushRef(java.lang.String ref) { if ((!(config.replicatePermissions())) && (RefNames.REFS_CONFIG.equals(ref))) { return false; } for (org.eclipse.jgit.transport.RefSpec s : remote.getPushRefSpecs()) { if (s.matchSource(ref)) { return true; } } return false; },990e0d7176cfe8ea77c4504ee4b579e6e5307acb,wouldPushRef(java.lang.String),wouldPushRef(java.lang.String),7,22,boolean wouldPushRef(java.lang.String ref) { if ((!(config.replicatePermissions())) && (RefNames.REFS_CONFIG.equals(ref))) { return false; } for (org.eclipse.jgit.transport.RefSpec s : config.getRemoteConfig().getPushRefSpecs()) { if (s.matchSource(ref)) { return true; } } return false; },b59cfc34743aa6d5e047f3bbcf77f8e35b5cd950,wouldPushRef(java.lang.String),74240,86,89
13138,gerrit-pgm_src_main_java_com_google_gerrit_pgm_Init.java,10.0,private com.google.inject.Injector createSysInjector(final com.google.gerrit.pgm.Init.SiteInit init) { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.pgm.util.ConsoleUI.class).toInstance(init.ui); bind(com.google.gerrit.pgm.init.InitFlags.class).toInstance(init.flags); bind(com.google.gerrit.server.git.GitRepositoryManager.class).to(com.google.gerrit.server.git.LocalDiskRepositoryManager.class); bind(com.google.gerrit.server.git.GitProjectImporter.class); } }); return createDbInjector(com.google.gerrit.pgm.SINGLE_USER).createChildInjector(modules); },bfae57a3f18fda995351da292e985dafea4dac27,private com.google.inject.Injector createSysInjector(final com.google.gerrit.pgm.Init.SiteInit init) { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.pgm.util.ConsoleUI.class).toInstance(init.ui); bind(com.google.gerrit.pgm.init.InitFlags.class).toInstance(init.flags); bind(com.google.gerrit.GitRepositoryManager.class).to(com.google.gerrit.server.git.LocalDiskRepositoryManager.class); bind(com.google.gerrit.server.git.GitProjectImporter.class); } }); return createDbInjector(com.google.gerrit.pgm.SINGLE_USER).createChildInjector(modules); },07511080f73c5b2ef456648bf71ea5116eb94d43,createSysInjector(com.google.gerrit.pgm.Init$SiteInit),createSysInjector(com.google.gerrit.pgm.Init$SiteInit),7,10,private com.google.inject.Injector createSysInjector(final com.google.gerrit.pgm.Init.SiteInit init) { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.pgm.util.ConsoleUI.class).toInstance(init.ui); bind(com.google.gerrit.pgm.init.InitFlags.class).toInstance(init.flags); bind(com.google.gerrit.server.git.GitRepositoryManager.class).to(com.google.gerrit.server.git.LocalDiskRepositoryManager.class); bind(com.google.gerrit.server.git.GitProjectImporter.class); } }); return createDbInjector(com.google.gerrit.pgm.SINGLE_USER).createChildInjector(modules); },bfae57a3f18fda995351da292e985dafea4dac27,createSysInjector(com.google.gerrit.pgm.Init$SiteInit),194962,218,222
67743,gerrit-gwtui_src_main_java_com_google_gerrit_client_download_DownloadUrlLink.java,3.0,"public static java.util.List<com.google.gerrit.client.download.DownloadUrlLink> createDownloadUrlLinks(java.lang.String project, boolean allowAnonymous) { java.util.List<com.google.gerrit.client.download.DownloadUrlLink> urls = new java.util.ArrayList<>(); java.util.Set<java.lang.String> allowedSchemes = com.google.gerrit.client.Gerrit.getInfo().download().schemes(); if ((allowAnonymous && ((com.google.gerrit.client.Gerrit.getConfig().getGitDaemonUrl()) != null)) && (allowedSchemes.contains(""git""))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.AnonGitLink(project)); } if (allowAnonymous && (allowedSchemes.contains(""anonymous http""))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.AnonHttpLink(project)); } if ((((com.google.gerrit.client.Gerrit.getConfig().getSshdAddress()) != null) && (com.google.gerrit.client.download.DownloadUrlLink.hasUserName())) && (allowedSchemes.contains(""ssh""))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.SshLink(project)); } if (((com.google.gerrit.client.download.DownloadUrlLink.hasUserName()) || (com.google.gerrit.client.download.DownloadUrlLink.siteReliesOnHttp())) && (allowedSchemes.contains(""http""))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.HttpLink(project, allowAnonymous)); } return urls; }",2452bdf9faa479dae5043138a35505b332e1510d,"public static java.util.List<com.google.gerrit.client.download.DownloadUrlLink> createDownloadUrlLinks(java.lang.String project, boolean allowAnonymous) { java.util.List<com.google.gerrit.client.download.DownloadUrlLink> urls = new java.util.ArrayList<>(); for (java.lang.String s : com.google.gerrit.client.Gerrit.getInfo().download().schemes()) { com.google.gerrit.client.config.DownloadInfo.DownloadSchemeInfo scheme = com.google.gerrit.client.Gerrit.getInfo().download().scheme(s); if ((scheme.isAuthRequired()) && (!allowAnonymous)) { continue; } com.google.gerrit.client.download.DownloadUrlLink.KnownScheme knownScheme = com.google.gerrit.client.download.DownloadUrlLink.KnownScheme.get(s); if (knownScheme != null) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink(knownScheme.downloadScheme, knownScheme.text, scheme.getUrl(project))); } else { urls.add(new com.google.gerrit.client.download.DownloadUrlLink(s, scheme.getUrl(project))); } } return urls; }",f5cfd940f62b982079c735ea8782178626273305,"createDownloadUrlLinks(java.lang.String,boolean)","createDownloadUrlLinks(java.lang.String,boolean)",10,2,"public static java.util.List<com.google.gerrit.client.download.DownloadUrlLink> createDownloadUrlLinks(java.lang.String project, boolean allowAnonymous) { java.util.List<com.google.gerrit.client.download.DownloadUrlLink> urls = new java.util.ArrayList<>(); for (java.lang.String s : com.google.gerrit.client.Gerrit.info().download().schemes()) { com.google.gerrit.client.config.DownloadInfo.DownloadSchemeInfo scheme = com.google.gerrit.client.Gerrit.info().download().scheme(s); if ((scheme.isAuthRequired()) && (!allowAnonymous)) { continue; } com.google.gerrit.client.download.DownloadUrlLink.KnownScheme knownScheme = com.google.gerrit.client.download.DownloadUrlLink.KnownScheme.get(s); if (knownScheme != null) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink(knownScheme.downloadScheme, knownScheme.text, scheme.getUrl(project))); } else { urls.add(new com.google.gerrit.client.download.DownloadUrlLink(s, scheme.getUrl(project))); } } return urls; }",4fb8b7d8b164d29d22067f048587c0ee007e0470,"createDownloadUrlLinks(java.lang.String,boolean)",18008,284,284
113893,src_main_java_com_googlesource_gerrit_plugins_findowners_Checker.java,0.0,"int findApproval(com.google.gerrit.server.account.AccountCache accountCache) throws com.google.gwtorm.server.OrmException { if (com.googlesource.gerrit.plugins.findowners.Checker.isExemptFromOwnerApproval(changeData)) { return 0; } com.googlesource.gerrit.plugins.findowners.OwnersDb db = com.googlesource.gerrit.plugins.findowners.Cache.getInstance().get(repository, changeData); if ((db.getNumOwners()) <= 0) { return 0; } if ((minVoteLevel) <= 0) { minVoteLevel = com.googlesource.gerrit.plugins.findowners.Config.getMinOwnerVoteLevel(changeData); } com.googlesource.gerrit.plugins.findowners.Checker.log.trace((""findApproval db key = "" + (db.key))); return findApproval(accountCache, db); }",6c08282655d6450c6c618fb0ab867070c8bee901,"int findApproval(com.google.gerrit.server.account.AccountByEmailCache accountByEmailCache, com.google.gerrit.server.account.AccountCache accountCache) throws com.google.gwtorm.server.OrmException { if (com.googlesource.gerrit.plugins.findowners.Checker.isExemptFromOwnerApproval(changeData)) { return 0; } com.googlesource.gerrit.plugins.findowners.OwnersDb db = com.googlesource.gerrit.plugins.findowners.Cache.getInstance().get(accountByEmailCache, accountCache, repository, changeData); if ((db.getNumOwners()) <= 0) { return 0; } if ((minVoteLevel) <= 0) { minVoteLevel = com.googlesource.gerrit.plugins.findowners.Config.getMinOwnerVoteLevel(changeData); } com.googlesource.gerrit.plugins.findowners.Checker.log.trace((""findApproval db key = "" + (db.key))); return findApproval(accountCache, db); }",cdd098ac0673cba690590ae898e62eb7d87030dc,findApproval(com.google.gerrit.server.account.AccountCache),"findApproval(com.google.gerrit.server.account.AccountByEmailCache,com.google.gerrit.server.account.AccountCache)",4,5,"int findApproval(com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.server.account.Accounts accounts) throws com.google.gwtorm.server.OrmException { if (com.googlesource.gerrit.plugins.findowners.Checker.isExemptFromOwnerApproval(changeData)) { return 0; } com.googlesource.gerrit.plugins.findowners.OwnersDb db = com.googlesource.gerrit.plugins.findowners.Cache.getInstance().get(accountCache, accounts, repository, changeData); if ((db.getNumOwners()) <= 0) { return 0; } if ((minVoteLevel) <= 0) { minVoteLevel = com.googlesource.gerrit.plugins.findowners.Config.getMinOwnerVoteLevel(changeData); } com.googlesource.gerrit.plugins.findowners.Checker.log.trace((""findApproval db key = "" + (db.key))); return findApproval(accountCache, db); }",b49608ff92cf09801a22f80f372e2e96ebea5e69,"findApproval(com.google.gerrit.server.account.AccountCache,com.google.gerrit.server.account.Accounts)",41417,236,227
64411,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,87.0,"private void renderChangeInfo(com.google.gerrit.client.changes.ChangeInfo info) { changeInfo = info; lastDisplayedUpdate = info.updated(); com.google.gerrit.client.changes.ChangeInfo.RevisionInfo revisionInfo = info.revision(revision); boolean current = ((info.status().isOpen()) && (revision.equals(info.current_revision()))) && (!(revisionInfo.is_edit())); if (revisionInfo.is_edit()) { statusText.setInnerText(Util.C.changeEdit()); } else if ((!current) && ((info.status()) == (com.google.gerrit.reviewdb.client.Change.Status.NEW))) { statusText.setInnerText(Util.C.notCurrent()); labels.setVisible(false); } else { statusText.setInnerText(com.google.gerrit.client.changes.Util.toLongString(info.status())); } labels.set(info); renderOwner(info); renderActionTextDate(info); renderDiffBaseListBox(info); initReplyButton(info, revision); initIncludedInAction(info); initChangeAction(info); initRevisionsAction(info, revision); initDownloadAction(info, revision); initProjectLinks(info); initBranchLink(info); initEditMode(info, revision); actions.display(info, revision); star.setValue(info.starred()); permalink.setHref(com.google.gerrit.client.ui.ChangeLink.permalink(changeId)); permalink.setText(java.lang.String.valueOf(info.legacy_id())); topic.set(info, revision); commit.set(commentLinkProcessor, info, revision); related.set(info, revision); reviewers.set(info); if (com.google.gerrit.client.Gerrit.isNoteDbEnabled()) { hashtags.set(info); } else { setVisible(hashtagTableRow, false); } if (com.google.gerrit.client.Gerrit.isSignedIn()) { replyAction = new com.google.gerrit.client.change.ReplyAction(info, revision, style, commentLinkProcessor, reply, quickApprove); if (topic.canEdit()) { keysAction.add(new com.google.gwtexpui.globalkey.client.KeyCommand(0, 't', Util.C.keyEditTopic()) { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { topic.onEdit(); } }); } } history.set(commentLinkProcessor, replyAction, changeId, info); if (current) { quickApprove.set(info, revision, replyAction); loadSubmitType(info.status(), isSubmittable(info)); } else { quickApprove.setVisible(false); setVisible(strategy, false); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(Util.M.changeScreenTitleId(info.id_abbreviated())); if ((info.subject()) != null) { sb.append("": ""); sb.append(info.subject()); } setWindowTitle(sb.toString()); }",f870c9d367f87089a7bfcf3d6f95492e27b04dc4,"private void renderChangeInfo(com.google.gerrit.client.changes.ChangeInfo info) { changeInfo = info; lastDisplayedUpdate = info.updated(); labels.set(info); renderOwner(info); renderActionTextDate(info); renderDiffBaseListBox(info); initReplyButton(info, revision); initIncludedInAction(info); initDownloadAction(info, revision); initProjectLinks(info); initBranchLink(info); initEditMode(info, revision); actions.display(info, revision); star.setValue(info.starred()); permalink.setHref(com.google.gerrit.client.ui.ChangeLink.permalink(changeId)); permalink.setText(java.lang.String.valueOf(info.legacy_id())); topic.set(info, revision); commit.set(commentLinkProcessor, info, revision); related.set(info, revision); reviewers.set(info); if (com.google.gerrit.client.Gerrit.isNoteDbEnabled()) { hashtags.set(info); } else { setVisible(hashtagTableRow, false); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(Util.M.changeScreenTitleId(info.id_abbreviated())); if ((info.subject()) != null) { sb.append("": ""); sb.append(info.subject()); } setWindowTitle(sb.toString()); renderRevisionInfo(info, com.google.gerrit.client.rpc.NativeMap.<com.google.gerrit.client.actions.ActionInfo>create()); }",a43570e2cac45795a2e81d9c3c21140ff00b240b,renderChangeInfo(com.google.gerrit.client.changes.ChangeInfo),renderChangeInfo(com.google.gerrit.client.changes.ChangeInfo),13,90,"private void renderChangeInfo(com.google.gerrit.client.changes.ChangeInfo info) { changeInfo = info; lastDisplayedUpdate = info.updated(); labels.set(info); renderOwner(info); renderActionTextDate(info); renderDiffBaseListBox(info); initReplyButton(info, revision); initIncludedInAction(info); initChangeAction(info); initDownloadAction(info, revision); initProjectLinks(info); initBranchLink(info); initEditMode(info, revision); actions.display(info, revision); star.setValue(info.starred()); permalink.setHref(com.google.gerrit.client.ui.ChangeLink.permalink(changeId)); permalink.setText(java.lang.String.valueOf(info.legacy_id())); topic.set(info, revision); commit.set(commentLinkProcessor, info, revision); related.set(info, revision); reviewers.set(info); if (com.google.gerrit.client.Gerrit.isNoteDbEnabled()) { hashtags.set(info); } else { setVisible(hashtagTableRow, false); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(Util.M.changeScreenTitleId(info.id_abbreviated())); if ((info.subject()) != null) { sb.append("": ""); sb.append(info.subject()); } setWindowTitle(sb.toString()); com.google.gerrit.client.changes.ChangeInfo.RevisionInfo revInfo = info.revision(revision); com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.actions.ActionInfo> actionMap = (revInfo.has_actions()) ? info.actions() : com.google.gerrit.client.rpc.NativeMap.<com.google.gerrit.client.actions.ActionInfo>create(); actionMap.copyKeysIntoChildren(""id""); renderRevisionInfo(info, actionMap); }",c424e18642e226acb87936974eb4b46fa9c1fce0,renderChangeInfo(com.google.gerrit.client.changes.ChangeInfo),185605,352,443
100690,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_ChangeReviewersByEmailIT.java,,,,"@org.junit.Test public void convertFromCCToReviewer() throws java.lang.Exception { assume().that(notesMigration.enabled()).isTrue(); com.google.gerrit.extensions.common.AccountInfo acc = new com.google.gerrit.extensions.common.AccountInfo(""Foo Bar"", ""foo.bar@gerritcodereview.com""); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.AddReviewerInput addInput = new com.google.gerrit.extensions.api.changes.AddReviewerInput(); addInput.reviewer = com.google.gerrit.acceptance.rest.change.ChangeReviewersByEmailIT.toRFCAddressString(acc); addInput.state = com.google.gerrit.extensions.client.ReviewerState.CC; gApi.changes().id(r.getChangeId()).addReviewer(addInput); com.google.gerrit.extensions.api.changes.AddReviewerInput modifyInput = new com.google.gerrit.extensions.api.changes.AddReviewerInput(); modifyInput.reviewer = addInput.reviewer; modifyInput.state = com.google.gerrit.extensions.client.ReviewerState.REVIEWER; gApi.changes().id(r.getChangeId()).addReviewer(modifyInput); com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().id(r.getChangeId()).get(java.util.EnumSet.of(ListChangesOption.DETAILED_LABELS)); assertThat(info.reviewers).isEqualTo(com.google.common.collect.ImmutableMap.of(ReviewerState.REVIEWER, com.google.common.collect.ImmutableList.of(acc))); }",673af159cd79c4874b39670eda1687782cfaef2c,,convertFromCCToReviewer(),5,6,"@org.junit.Test public void convertFromCCToReviewer() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.common.AccountInfo acc = new com.google.gerrit.extensions.common.AccountInfo(""Foo Bar"", ""foo.bar@gerritcodereview.com""); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.AddReviewerInput addInput = new com.google.gerrit.extensions.api.changes.AddReviewerInput(); addInput.reviewer = com.google.gerrit.acceptance.rest.change.ChangeReviewersByEmailIT.toRfcAddressString(acc); addInput.state = com.google.gerrit.extensions.client.ReviewerState.CC; gApi.changes().id(r.getChangeId()).addReviewer(addInput); com.google.gerrit.extensions.api.changes.AddReviewerInput modifyInput = new com.google.gerrit.extensions.api.changes.AddReviewerInput(); modifyInput.reviewer = addInput.reviewer; modifyInput.state = com.google.gerrit.extensions.client.ReviewerState.REVIEWER; gApi.changes().id(r.getChangeId()).addReviewer(modifyInput); com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().id(r.getChangeId()).get(java.util.EnumSet.of(ListChangesOption.DETAILED_LABELS)); assertThat(info.reviewers).isEqualTo(com.google.common.collect.ImmutableMap.of(ReviewerState.REVIEWER, com.google.common.collect.ImmutableList.of(acc))); }",d0fb01b3603867ea3d8ea8a7d8e4e9a5ffb44679,convertFromCCToReviewer(),87088,411,412
60753,gerrit-server_src_main_java_com_google_gerrit_server_WebLinks.java,3.0,"public java.lang.Iterable<com.google.gerrit.extensions.common.WebLinkInfo> getPatchSetLinks(java.lang.String project, java.lang.String commit) { java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.extensions.webui.PatchSetWebLink webLink : patchSetLinks) { links.add(new com.google.gerrit.extensions.common.WebLinkInfo(webLink.getLinkName(), webLink.getImageUrl(), webLink.getPatchSetUrl(project, commit), webLink.getTarget())); } return links; }",60224d1cbb0ce4b9312c6c7c8398182fafe42bbe,"public java.lang.Iterable<com.google.gerrit.extensions.common.WebLinkInfo> getPatchSetLinks(java.lang.String project, java.lang.String commit) { java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.extensions.webui.PatchSetWebLink webLink : patchSetLinks) { links.add(webLink.getPathSetWebLink(project, commit)); } return links; }",2f6f7227bf4812605033ca30cacf940b218952c2,"getPatchSetLinks(java.lang.String,java.lang.String)","getPatchSetLinks(java.lang.String,java.lang.String)",9,3,"public java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> getPatchSetLinks(java.lang.String project, java.lang.String commit) { java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = new java.util.ArrayList<>(4); for (com.google.gerrit.extensions.webui.PatchSetWebLink webLink : patchSetLinks) { links.add(webLink.getPathSetWebLink(project, commit)); } return links; }",03e691f44178ff1cac97a9f0108a172f4fb6bdd3,"getPatchSetLinks(java.lang.String,java.lang.String)",56903,126,121
148032,java_com_google_gerrit_server_restapi_project_ListBranches.java,0.0,"private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId()) != null) ? ref.getObjectId().name() : null; info.canDelete = ((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE))) ? true : null; com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = new java.util.TreeMap(); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty()) ? null : links; return info; }",86747ac21af0f9742742fed522488f21cb8890a2,"private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId()) != null) ? ref.getObjectId().name() : null; info.canDelete = ((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE))) ? true : null; com.google.gerrit.server.restapi.project.BranchResource rsrc = new com.google.gerrit.server.restapi.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = new java.util.TreeMap(); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty()) ? null : links; return info; }",54928301cf1d7f45fb24db86807e4950283162db,"createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend$ForRef,org.eclipse.jgit.lib.Ref,com.google.gerrit.server.project.ProjectState,com.google.gerrit.server.CurrentUser,java.util.Set)","createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend$ForRef,org.eclipse.jgit.lib.Ref,com.google.gerrit.server.project.ProjectState,com.google.gerrit.server.CurrentUser,java.util.Set)",17,0,"private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId()) != null) ? ref.getObjectId().name() : null; info.canDelete = ((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE))) ? true : null; com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = new java.util.TreeMap(); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty()) ? null : links; return info; }",86747ac21af0f9742742fed522488f21cb8890a2,"createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend$ForRef,org.eclipse.jgit.lib.Ref,com.google.gerrit.server.project.ProjectState,com.google.gerrit.server.CurrentUser,java.util.Set)",217649,386,380
43205,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeInserter.java,,,,"public void insertChange(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, org.eclipse.jgit.revwalk.RevCommit commit, java.util.List<org.eclipse.jgit.revwalk.FooterLine> footerLines, com.google.gerrit.reviewdb.client.PatchSetInfo info, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers) throws com.google.gwtorm.server.OrmException { db.changes().beginTransaction(change.getId()); try { com.google.gerrit.server.ChangeUtil.insertAncestors(db, ps.getId(), commit); db.patchSets().insert(java.util.Collections.singleton(ps)); db.changes().insert(java.util.Collections.singleton(change)); com.google.gerrit.server.ChangeUtil.updateTrackingIds(db, change, trackingFooters, footerLines); approvalsUtil.addReviewers(db, change, ps, info, reviewers, java.util.Collections.<com.google.gerrit.reviewdb.client.Account.Id>emptySet()); db.commit(); } finally { db.rollback(); } gitRefUpdated.fire(change.getProject(), ps.getRefName(), org.eclipse.jgit.lib.ObjectId.zeroId(), commit); hooks.doPatchsetCreatedHook(change, ps, db); }",bc3db881f48b0c7d8cb1d4e3bc512a5ed65de15e,,"insertChange(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,org.eclipse.jgit.revwalk.RevCommit,java.util.List,com.google.gerrit.reviewdb.client.PatchSetInfo,java.util.Set)",3,0,"public void insertChange(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, org.eclipse.jgit.revwalk.RevCommit commit, com.google.gerrit.common.data.LabelTypes labelTypes, java.util.List<org.eclipse.jgit.revwalk.FooterLine> footerLines, com.google.gerrit.reviewdb.client.PatchSetInfo info, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers) throws com.google.gwtorm.server.OrmException { db.changes().beginTransaction(change.getId()); try { com.google.gerrit.server.ChangeUtil.insertAncestors(db, ps.getId(), commit); db.patchSets().insert(java.util.Collections.singleton(ps)); db.changes().insert(java.util.Collections.singleton(change)); com.google.gerrit.server.ChangeUtil.updateTrackingIds(db, change, trackingFooters, footerLines); approvalsUtil.addReviewers(db, labelTypes, change, ps, info, reviewers, java.util.Collections.<com.google.gerrit.reviewdb.client.Account.Id>emptySet()); db.commit(); } finally { db.rollback(); } gitRefUpdated.fire(change.getProject(), ps.getRefName(), org.eclipse.jgit.lib.ObjectId.zeroId(), commit); hooks.doPatchsetCreatedHook(change, ps, db); }",2f71bc9107df71ff84096eac24ebf99ab8d25ba6,"insertChange(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,org.eclipse.jgit.revwalk.RevCommit,com.google.gerrit.common.data.LabelTypes,java.util.List,com.google.gerrit.reviewdb.client.PatchSetInfo,java.util.Set)",10917,351,370
54609,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_InitPlugins.java,0.0,"public static java.util.List<com.google.gerrit.pgm.init.InitPlugins.PluginData> listPlugins(com.google.gerrit.server.config.SitePaths site) throws java.io.IOException { return com.google.gerrit.pgm.init.InitPlugins.listPlugins(site, false); }",0c507b4ea3b7cee743b2b327d601e577417a9e53,"public static java.util.List<com.google.gerrit.pgm.init.InitPlugins.PluginData> listPlugins(com.google.gerrit.server.config.SitePaths site, com.google.gerrit.pgm.init.GerritDistributionLocator distroLocator) throws java.io.IOException { return com.google.gerrit.pgm.init.InitPlugins.listPlugins(site, false, distroLocator); }",69a53fa604c53d7d0267f1316574b496d96ed1be,listPlugins(com.google.gerrit.server.config.SitePaths),"listPlugins(com.google.gerrit.server.config.SitePaths,com.google.gerrit.pgm.init.GerritDistributionLocator)",5,0,"public static java.util.List<com.google.gerrit.pgm.init.InitPlugins.PluginData> listPlugins(com.google.gerrit.server.config.SitePaths site, com.google.gerrit.pgm.init.PluginsDistribution pluginsDistribution) throws java.io.IOException { return com.google.gerrit.pgm.init.InitPlugins.listPlugins(site, false, pluginsDistribution); }",10a8fd2362a255ec20d36dc9c2f1fd1c6bae1434,"listPlugins(com.google.gerrit.server.config.SitePaths,com.google.gerrit.pgm.init.PluginsDistribution)",168025,98,95
77937,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_git_SubmoduleSectionParserIT.java,2.0,"@org.junit.Test public void testWithRelativeURI() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p1 = createProject(""a""); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); java.lang.String gitmodules = ((("""" + ((""[submodule \""a\""]\n"" + ""path = a\n"") + ""url = ../"")) + (p1.get())) + ""\n"") + ""branch = master\n""; cfg.fromText(gitmodules); java.lang.String thisServer = com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER; com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey(""project""), ""master""); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> res = new com.google.gerrit.server.util.SubmoduleSectionParser(projectCache, cfg, thisServer, targetBranch).parseAllSections(); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> expected = com.google.common.collect.Sets.newHashSet(new com.google.gerrit.reviewdb.client.SubmoduleSubscription(targetBranch, new com.google.gerrit.reviewdb.client.Branch.NameKey(p1, ""master""), ""a"")); assertThat(res).containsExactlyElementsIn(expected); }",ce9b471a2261dc4e617c562d8b1625c0824e36c6,"@org.junit.Test public void testWithRelativeURI() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p1 = createProject(""a""); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); java.lang.String gitmodules = ((("""" + ((""[submodule \""a\""]\n"" + ""path = a\n"") + ""url = ../"")) + (p1.get())) + ""\n"") + ""branch = master\n""; cfg.fromText(gitmodules); java.lang.String thisServer = com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER; com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey(""project""), ""master""); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> res = new com.google.gerrit.server.util.SubmoduleSectionParser(cfg, thisServer, targetBranch).parseAllSections(); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> expected = com.google.common.collect.Sets.newHashSet(new com.google.gerrit.reviewdb.client.SubmoduleSubscription(targetBranch, new com.google.gerrit.reviewdb.client.Branch.NameKey(p1, ""master""), ""a"")); assertThat(res).containsExactlyElementsIn(expected); }",a68d5c16f62a37094e2182d419db13b568abf79c,testWithRelativeURI(),testWithRelativeURI(),4,2,"@org.junit.Test public void testWithRelativeURI() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p1 = createProject(""a""); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText((((("""" + ((""[submodule \""a\""]\n"" + ""path = a\n"") + ""url = ../"")) + (p1.get())) + ""\n"") + ""branch = master\n"")); com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey(""project""), ""master""); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> res = new com.google.gerrit.server.util.SubmoduleSectionParser(cfg, com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER, targetBranch).parseAllSections(); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> expected = com.google.common.collect.Sets.newHashSet(new com.google.gerrit.reviewdb.client.SubmoduleSubscription(targetBranch, new com.google.gerrit.reviewdb.client.Branch.NameKey(p1, ""master""), ""a"")); assertThat(res).containsExactlyElementsIn(expected); }",e8a3d4337df730416b64a4def4afe431e21470d9,testWithRelativeURI(),39358,379,356
62686,gerrit-server_src_main_java_com_google_gerrit_server_query_change_QueryProcessor.java,29.0,void setLimit(int n) { limit = n; },4a1ae8ce9626cf2bda41431a0fa6c1713a3420b3,public void setLimit(int n) { limit = n; },0233f55d6912282a8b051807f40776bb6c9aca67,setLimit(int),setLimit(int),5,6,public void setLimit(int n) { limitFromCaller = n; },801e2ef2e3b7a87954cf717b969204efe5fdbbef,setLimit(int),148327,14,16
148032,java_com_google_gerrit_server_api_groups_GroupApiImpl.java,4.0,"@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(rsrc, new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot index group"", e); } }",894d2f4a106a701bd5618c91d98b391a246d2c6a,"@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(rsrc, new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot index account"", e); } }",faa6d6968666494e0d76e99e9a685df776c1a58c,index(),index(),17,4,"@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(rsrc, new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot index group"", e); } }",894d2f4a106a701bd5618c91d98b391a246d2c6a,index(),217684,87,87
106271,gerrit-server_src_main_java_com_google_gerrit_server_git_strategy_SubmitStrategy.java,3.0,"public final void addOps(com.google.gerrit.server.update.BatchUpdate bu, java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.IntegrationException { java.util.List<com.google.gerrit.server.git.strategy.SubmitStrategyOp> ops = buildOps(toMerge); java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> added = com.google.common.collect.Sets.newHashSetWithExpectedSize(ops.size()); for (com.google.gerrit.server.git.strategy.SubmitStrategyOp op : ops) { added.add(op.getCommit()); } java.util.List<com.google.gerrit.server.git.CodeReviewCommit> difference = new java.util.ArrayList(com.google.common.collect.Sets.difference(toMerge, added)); java.util.Collections.reverse(difference); for (com.google.gerrit.server.git.CodeReviewCommit c : difference) { bu.addOp(c.change().getId(), new com.google.gerrit.server.git.strategy.ImplicitIntegrateOp(args, c)); } for (com.google.gerrit.server.git.strategy.SubmitStrategyOp op : ops) { bu.addOp(op.getId(), op); } }",2b63faf45954016e8d4985431e23d6a28e2e6228,"public final void addOps(com.google.gerrit.server.update.BatchUpdate bu, java.util.Set<com.google.gerrit.server.git.strategy.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.strategy.IntegrationException { java.util.List<com.google.gerrit.server.git.strategy.SubmitStrategyOp> ops = buildOps(toMerge); java.util.Set<com.google.gerrit.server.git.strategy.CodeReviewCommit> added = com.google.common.collect.Sets.newHashSetWithExpectedSize(ops.size()); for (com.google.gerrit.server.git.strategy.SubmitStrategyOp op : ops) { added.add(op.getCommit()); } java.util.List<com.google.gerrit.server.git.strategy.CodeReviewCommit> difference = new java.util.ArrayList(com.google.common.collect.Sets.difference(toMerge, added)); java.util.Collections.reverse(difference); for (com.google.gerrit.server.git.strategy.CodeReviewCommit c : difference) { bu.addOp(c.change().getId(), new com.google.gerrit.server.git.strategy.ImplicitIntegrateOp(args, c)); } for (com.google.gerrit.server.git.strategy.SubmitStrategyOp op : ops) { bu.addOp(op.getId(), op); } }",9204c91dcbcc374ec5f78ab355ef42c3d3b09482,"addOps(com.google.gerrit.server.update.BatchUpdate,java.util.Set)","addOps(com.google.gerrit.server.update.BatchUpdate,java.util.Set)",5,3,"public final void addOps(com.google.gerrit.server.update.BatchUpdate bu, java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.IntegrationException { java.util.List<com.google.gerrit.server.git.strategy.SubmitStrategyOp> ops = buildOps(toMerge); java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> added = com.google.common.collect.Sets.newHashSetWithExpectedSize(ops.size()); for (com.google.gerrit.server.git.strategy.SubmitStrategyOp op : ops) { added.add(op.getCommit()); } java.util.List<com.google.gerrit.server.git.CodeReviewCommit> difference = new java.util.ArrayList(com.google.common.collect.Sets.difference(toMerge, added)); java.util.Collections.reverse(difference); for (com.google.gerrit.server.git.CodeReviewCommit c : difference) { bu.addOp(c.change().getId(), new com.google.gerrit.server.git.strategy.ImplicitIntegrateOp(args, c)); } for (com.google.gerrit.server.git.strategy.SubmitStrategyOp op : ops) { bu.addOp(op.getId(), op); } }",2b63faf45954016e8d4985431e23d6a28e2e6228,"addOps(com.google.gerrit.server.update.BatchUpdate,java.util.Set)",155655,331,321
9941,src_main_java_com_google_gwtjsonrpc_client_JsonUtil.java,1.0,static void fireOnCallStart() { for (final com.google.gwtjsonrpc.client.RpcStatusListener l : com.google.gwtjsonrpc.client.JsonUtil.listeners) { l.onCallStart(); } },bb002730101a13d11fbaba049937bb2871f9e819,static void fireEvent(com.google.gwtjsonrpc.client.BaseRpcEvent<?> event) { com.google.gwtjsonrpc.client.JsonUtil.globalHandlers.fireEvent(event); event.service = null; },030aa48cffda369a90f767f8ecc5086f51cfa39f,fireOnCallStart(),fireEvent(com.google.gwtjsonrpc.client.BaseRpcEvent),2,2,static void fireEvent(com.google.gwtjsonrpc.client.BaseRpcEvent<?> event) { com.google.gwtjsonrpc.client.JsonUtil.globalHandlers.fireEvent(event); event.call = null; },af1612be7adf7e44dfa9df66c073df90b46b99ce,fireEvent(com.google.gwtjsonrpc.client.BaseRpcEvent),213459,49,49
139730,javatests_com_google_gerrit_acceptance_rest_project_CreateBranchIT.java,3.0,"@org.junit.Test public void createBranchByProjectOwnerCreateReferenceBlocked_Forbidden() throws java.lang.Exception { grantOwner(); blockCreateReference(); setApiUser(user); assertCreateFails(com.google.gerrit.extensions.restapi.AuthException.class, ""create not permitted for refs/heads/test""); }",f2c508376b4059c4054efd3e8e3679520c7e684a,"@org.junit.Test public void createBranchByProjectOwnerCreateReferenceBlocked_Forbidden() throws java.lang.Exception { grantOwner(); blockCreateReference(); setApiUser(user); assertCreateFails(branch, com.google.gerrit.extensions.restapi.AuthException.class, ""create not permitted for refs/heads/test""); }",e11ca3358151a9d138589edbedab3a75f0092ec4,createBranchByProjectOwnerCreateReferenceBlocked_Forbidden(),createBranchByProjectOwnerCreateReferenceBlocked_Forbidden(),3,2,"@org.junit.Test public void createBranchByProjectOwnerCreateReferenceBlocked_Forbidden() throws java.lang.Exception { grantOwner(); blockCreateReference(); setApiUser(user); assertCreateFails(testBranch, com.google.gerrit.extensions.restapi.AuthException.class, ""create not permitted for refs/heads/test""); }",27acf988c40667e4439d3449516bbdc0836fb5b0,createBranchByProjectOwnerCreateReferenceBlocked_Forbidden(),126687,77,78
18397,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectInfoScreen.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void onChange(com.google.gwt.event.dom.client.ChangeEvent event) { if (SubmitType.FAST_FORWARD_ONLY.equals(Project.SubmitType.valueOf(submitType.getValue(submitType.getSelectedIndex())))) { useContentMerge.setEnabled(false); useContentMerge.setValue(false); } else { useContentMerge.setEnabled(true); } },8f99ddf867f491d3ee6bd5bcd9c544ad51c8e9fe,,onChange(com.google.gwt.event.dom.client.ChangeEvent),4,11,@java.lang.Override public void onChange(com.google.gwt.event.dom.client.ChangeEvent event) { setEnabledForUseContentMerge(); },a376a334d144158a68a1f0d09a89868cd8de5a20,onChange(com.google.gwt.event.dom.client.ChangeEvent),23923,88,35
69743,gerrit-server_src_main_java_com_google_gerrit_server_edit_ChangeEditUtil.java,7.0,"public com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> byChange(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.IdentifiedUser user) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = gitManager.openRepository(change.getProject())) { java.lang.String editRefPrefix = com.google.gerrit.reviewdb.client.RefNames.refsEditPrefix(user.getAccountId(), change.getId()); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(editRefPrefix); if (refs.isEmpty()) { return com.google.common.base.Optional.absent(); } org.eclipse.jgit.lib.Ref ref = com.google.common.collect.Iterables.getOnlyElement(refs.values()); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(ref.getObjectId()); com.google.gerrit.reviewdb.client.PatchSet basePs = getBasePatchSet(change, ref); return com.google.common.base.Optional.of(new com.google.gerrit.server.edit.ChangeEdit(user, change, ref, commit, basePs)); } } }",b2d8cb825924521b37db799c9b024320198de25a,"public com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> byChange(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.IdentifiedUser user) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = gitManager.openRepository(change.getProject())) { int n = change.currentPatchSetId().get(); java.lang.String[] refNames = new java.lang.String[n]; for (int i = n; i > 0; i--) { refNames[i] = com.google.gerrit.reviewdb.client.RefNames.refsEdit(user.getAccountId(), change.getId(), new com.google.gerrit.reviewdb.client.PatchSet.Id(change.getId(), i)); } org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().firstExactRef(refNames); if (ref == null) { return com.google.common.base.Optional.absent(); } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(ref.getObjectId()); com.google.gerrit.reviewdb.client.PatchSet basePs = getBasePatchSet(change, ref); return com.google.common.base.Optional.of(new com.google.gerrit.server.edit.ChangeEdit(user, change, ref, commit, basePs)); } } }",cbe0a52795683e6dc0b004fb5eb27a25ca105126,"byChange(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.server.IdentifiedUser)","byChange(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.server.IdentifiedUser)",2,7,"public com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> byChange(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.IdentifiedUser user) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = gitManager.openRepository(change.getProject())) { int n = change.currentPatchSetId().get(); java.lang.String[] refNames = new java.lang.String[n]; for (int i = n; i > 0; i--) { refNames[(i - 1)] = com.google.gerrit.reviewdb.client.RefNames.refsEdit(user.getAccountId(), change.getId(), new com.google.gerrit.reviewdb.client.PatchSet.Id(change.getId(), i)); } org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().firstExactRef(refNames); if (ref == null) { return com.google.common.base.Optional.absent(); } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(ref.getObjectId()); com.google.gerrit.reviewdb.client.PatchSet basePs = getBasePatchSet(change, ref); return com.google.common.base.Optional.of(new com.google.gerrit.server.edit.ChangeEdit(user, change, ref, commit, basePs)); } } }",b69bd9f68bb1c2ac37f7b7d61bb621277eb3c53e,"byChange(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.server.IdentifiedUser)",207903,367,370
112225,gerrit-server_src_main_java_com_google_gerrit_server_mail_send_SmtpEmailSender.java,5.0,"private void setMissingHeader(final java.util.Map<java.lang.String, com.google.gerrit.server.mail.send.EmailHeader> hdrs, java.lang.String name, java.lang.String value) { if ((!(hdrs.containsKey(name))) || (hdrs.get(name).isEmpty())) { hdrs.put(name, new com.google.gerrit.server.mail.send.EmailHeader.String(value)); } }",86f4ee9d4888836330c6b9d2bd076405ed832cc7,"private static void setMissingHeader(final java.util.Map<java.lang.String, com.google.gerrit.server.mail.send.EmailHeader> hdrs, java.lang.String name, java.lang.String value) { if ((!(hdrs.containsKey(name))) || (hdrs.get(name).isEmpty())) { hdrs.put(name, new com.google.gerrit.server.mail.send.EmailHeader.String(value)); } }",9edceeb71f515e6c4987f6038e51fd72c5aa61a7,"setMissingHeader(java.util.Map,java.lang.String,java.lang.String)","setMissingHeader(java.util.Map,java.lang.String,java.lang.String)",3,5,"private static void setMissingHeader(java.util.Map<java.lang.String, com.google.gerrit.server.mail.send.EmailHeader> hdrs, java.lang.String name, java.lang.String value) { if ((!(hdrs.containsKey(name))) || (hdrs.get(name).isEmpty())) { hdrs.put(name, new com.google.gerrit.server.mail.send.EmailHeader.String(value)); } }",b2190cab62d9b22d1db10660c64910aa580a25cb,"setMissingHeader(java.util.Map,java.lang.String,java.lang.String)",154577,109,108
53381,gerrit-server_src_test_java_com_google_gerrit_server_notedb_ChangeNotesTest.java,3.0,"@org.junit.Test public void oneReviewerMultipleTypes() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, com.google.gerrit.server.notedb.ChangeNotesTest.CHANGE_OWNER); update.putReviewer(com.google.gerrit.server.notedb.ChangeNotesTest.OTHER_ACCOUNT.getId(), ReviewerState.REVIEWER); commit(update); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); assertEquals(com.google.common.collect.ImmutableSetMultimap.of(ReviewerState.REVIEWER, new com.google.gerrit.reviewdb.client.Account.Id(2)), notes.getReviewers()); update = newUpdate(c, com.google.gerrit.server.notedb.ChangeNotesTest.OTHER_ACCOUNT); update.putReviewer(com.google.gerrit.server.notedb.ChangeNotesTest.OTHER_ACCOUNT.getId(), ReviewerState.CC); commit(update); notes = newNotes(c); assertEquals(com.google.common.collect.ImmutableSetMultimap.of(ReviewerState.CC, new com.google.gerrit.reviewdb.client.Account.Id(2)), notes.getReviewers()); }",6125f690d37f148e2d6e8954cbf3761f3f2b5442,"@org.junit.Test public void oneReviewerMultipleTypes() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newNotes(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, com.google.gerrit.server.notedb.ChangeNotesTest.CHANGE_OWNER); update.putReviewer(com.google.gerrit.server.notedb.ChangeNotesTest.OTHER_ACCOUNT.getId(), ReviewerState.REVIEWER); commit(update); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); assertEquals(com.google.common.collect.ImmutableSetMultimap.of(ReviewerState.REVIEWER, new com.google.gerrit.reviewdb.client.Account.Id(2)), notes.getReviewers()); update = newUpdate(c, com.google.gerrit.server.notedb.ChangeNotesTest.OTHER_ACCOUNT); update.putReviewer(com.google.gerrit.server.notedb.ChangeNotesTest.OTHER_ACCOUNT.getId(), ReviewerState.CC); commit(update); notes = newNotes(c); assertEquals(com.google.common.collect.ImmutableSetMultimap.of(ReviewerState.CC, new com.google.gerrit.reviewdb.client.Account.Id(2)), notes.getReviewers()); }",1e576f5eab41150e45ba5016ab228e8d6f5a52e2,oneReviewerMultipleTypes(),oneReviewerMultipleTypes(),9,3,"@org.junit.Test public void oneReviewerMultipleTypes() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.putReviewer(otherUser.getAccount().getId(), com.google.gerrit.server.notedb.ReviewerState.REVIEWER); commit(update); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); assertEquals(com.google.common.collect.ImmutableSetMultimap.of(com.google.gerrit.server.notedb.ReviewerState.REVIEWER, new com.google.gerrit.reviewdb.client.Account.Id(2)), notes.getReviewers()); update = newUpdate(c, otherUser); update.putReviewer(otherUser.getAccount().getId(), com.google.gerrit.server.notedb.ReviewerState.CC); commit(update); notes = newNotes(c); assertEquals(com.google.common.collect.ImmutableSetMultimap.of(com.google.gerrit.server.notedb.ReviewerState.CC, new com.google.gerrit.reviewdb.client.Account.Id(2)), notes.getReviewers()); }",81ec83f9728d54950ef62ce609f2d7f1ea9f48f9,oneReviewerMultipleTypes(),19243,313,295
115643,gerrit-server_src_main_java_com_google_gerrit_server_group_GroupsUpdate.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void removeGroupMembers(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds) throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> foundGroup = groups.get(db, groupUuid); if (!(foundGroup.isPresent())) { return; } com.google.gerrit.reviewdb.client.AccountGroup group = foundGroup.get(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> existingMembers = groups.getMembers(db, group.getId()).collect(toImmutableSet()); com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroupMember> membersToRemove = accountIds.stream().distinct().filter(existingMembers::contains).map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new).collect(toImmutableList()); if ((currentUser) != null) { auditService.dispatchDeleteAccountsFromGroup(currentUser.getAccountId(), membersToRemove); } db.accountGroupMembers().delete(membersToRemove); for (com.google.gerrit.reviewdb.client.AccountGroupMember member : membersToRemove) { accountCache.evict(member.getAccountId()); } }",d57223a4d4d74864c744598d39f348ff1b3e9645,,"removeGroupMembers(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.AccountGroup$UUID,java.util.Set)",8,1,"public void removeGroupMembers(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds) throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> foundGroup = groups.get(db, groupUuid); if (!(foundGroup.isPresent())) { return; } com.google.gerrit.reviewdb.client.AccountGroup group = foundGroup.get(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> membersToRemove = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.Account.Id accountId : accountIds) { boolean isMember = groups.isMember(db, group, accountId); if (isMember) { com.google.gerrit.reviewdb.client.AccountGroupMember.Key key = new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId); membersToRemove.add(new com.google.gerrit.reviewdb.client.AccountGroupMember(key)); } } if (membersToRemove.isEmpty()) { return; } if ((currentUser) != null) { auditService.dispatchDeleteAccountsFromGroup(currentUser.getAccountId(), membersToRemove); } db.accountGroupMembers().delete(membersToRemove); for (com.google.gerrit.reviewdb.client.AccountGroupMember member : membersToRemove) { accountCache.evict(member.getAccountId()); } }",4d6411c2148abade3bf6d96265caa58298b800a1,"removeGroupMembers(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.AccountGroup$UUID,java.util.Set)",35030,381,410
48047,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_PublishedBox.java,4.0,"@com.google.gwt.uibinder.client.UiHandler(""reply"") void onReply(com.google.gwt.event.dom.client.ClickEvent e) { if ((replyBox) == null) { com.google.gerrit.client.diff.DraftBox box = getDiffView().addReply(getOriginal(), """", false); registerReplyBox(box); } else { openReplyBox(); } }",4e768a738f5f355e7f55c62a2342cd501d254427,"@com.google.gwt.uibinder.client.UiHandler(""reply"") void onReply(com.google.gwt.event.dom.client.ClickEvent e) { checkAndAddReply("""", false); }",b27215e8e4d048073deb37faef9321ab56f6e62f,onReply(com.google.gwt.event.dom.client.ClickEvent),onReply(com.google.gwt.event.dom.client.ClickEvent),21,9,"@com.google.gwt.uibinder.client.UiHandler(""reply"") void onReply(com.google.gwt.event.dom.client.ClickEvent e) { e.stopPropagation(); doReply(); }",1ff69cd31fddad9ff1cf27d5b91d56d99e8d314c,onReply(com.google.gwt.event.dom.client.ClickEvent),53943,44,46
163935,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,0.0,"@org.junit.Test public void lookUpFromCacheByEmail() throws java.lang.Exception { assertEmail(byEmailCache.get(admin.email), admin); java.lang.String email = ""foo.bar@example.com""; externalIdsUpdateFactory.create().insert(db, com.google.gerrit.server.account.ExternalId.createWithEmail(ExternalId.Key.parse(""foo:bar""), admin.id, email)); accountCache.evict(admin.id); assertEmail(byEmailCache.get(email), admin); assertThat(byEmailCache.get(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(byEmailCache.get(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(byEmailCache.get(""non-existing@example.com"")).isEmpty(); }",5ca2d952a026e5ab271e805588f7df48675954a1,"@org.junit.Test public void lookUpFromCacheByEmail() throws java.lang.Exception { assertEmail(byEmailCache.get(admin.email), admin); java.lang.String email = ""foo.bar@example.com""; db.accountExternalIds().insert(com.google.common.collect.ImmutableList.of(createExternalIdWithEmail(""foo:bar"", email))); accountCache.evict(admin.id); assertEmail(byEmailCache.get(email), admin); assertThat(byEmailCache.get(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(byEmailCache.get(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(byEmailCache.get(""non-existing@example.com"")).isEmpty(); }",190b68ddd5322be9c044e50d2651b6fd2a9beeff,lookUpFromCacheByEmail(),lookUpFromCacheByEmail(),3,0,"@org.junit.Test public void lookUpFromCacheByEmail() throws java.lang.Exception { assertEmail(byEmailCache.get(admin.email), admin); java.lang.String email = ""foo.bar@example.com""; externalIdsUpdateFactory.create().insert(db, com.google.gerrit.server.account.ExternalId.createWithEmail(ExternalId.Key.parse(""foo:bar""), admin.id, email)); assertEmail(byEmailCache.get(email), admin); assertThat(byEmailCache.get(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(byEmailCache.get(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(byEmailCache.get(""non-existing@example.com"")).isEmpty(); }",8a730e4b14e759176380379286658764556a19e6,lookUpFromCacheByEmail(),64593,175,180
107532,src_main_java_com_googlesource_gerrit_plugins_automerger_DownstreamCreator.java,13.0,"public void createSingleDownstreamMerge(com.googlesource.gerrit.plugins.automerger.SingleDownstreamMergeInput sdsMergeInput) throws com.google.gerrit.extensions.restapi.RestApiException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String currentTopic = setTopic(sdsMergeInput.sourceId, sdsMergeInput.topic); com.google.gerrit.extensions.common.MergeInput mergeInput = new com.google.gerrit.extensions.common.MergeInput(); mergeInput.source = sdsMergeInput.currentRevision; mergeInput.strategy = ""recursive""; com.googlesource.gerrit.plugins.automerger.DownstreamCreator.log.debug(""Creating downstream merge for {}"", sdsMergeInput.currentRevision); com.google.gerrit.extensions.common.ChangeInput downstreamChangeInput = new com.google.gerrit.extensions.common.ChangeInput(); downstreamChangeInput.project = sdsMergeInput.project; downstreamChangeInput.branch = sdsMergeInput.downstreamBranch; downstreamChangeInput.subject = ((sdsMergeInput.subject) + "" am: "") + (sdsMergeInput.currentRevision.substring(0, 10)); downstreamChangeInput.topic = currentTopic; downstreamChangeInput.merge = mergeInput; downstreamChangeInput.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.NONE; if (!(sdsMergeInput.doMerge)) { mergeInput.strategy = ""ours""; downstreamChangeInput.subject = ((sdsMergeInput.subject) + "" skipped: "") + (sdsMergeInput.currentRevision.substring(0, 10)); com.googlesource.gerrit.plugins.automerger.DownstreamCreator.log.debug(""Skipping merge for {} to {}"", sdsMergeInput.currentRevision, sdsMergeInput.downstreamBranch); } com.google.gerrit.extensions.api.changes.ChangeApi downstreamChange = gApi.changes().create(downstreamChangeInput); updateVote(downstreamChange.get(), config.getAutomergeLabel(), config.getMaxAutomergeVote()); }",7dfdc50e10c6338b46c5c4bcb8da59007d9f6f54,"public void createSingleDownstreamMerge(com.googlesource.gerrit.plugins.automerger.SingleDownstreamMergeInput sdsMergeInput) throws com.google.gerrit.extensions.restapi.RestApiException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String currentTopic = setTopic(sdsMergeInput.number, sdsMergeInput.topic); com.google.gerrit.extensions.common.MergeInput mergeInput = new com.google.gerrit.extensions.common.MergeInput(); mergeInput.source = sdsMergeInput.currentRevision; mergeInput.strategy = ""recursive""; com.googlesource.gerrit.plugins.automerger.DownstreamCreator.log.debug(""Creating downstream merge for {}"", sdsMergeInput.currentRevision); com.google.gerrit.extensions.common.ChangeInput downstreamChangeInput = new com.google.gerrit.extensions.common.ChangeInput(); downstreamChangeInput.project = sdsMergeInput.project; downstreamChangeInput.branch = sdsMergeInput.downstreamBranch; downstreamChangeInput.subject = ((sdsMergeInput.subject) + "" am: "") + (sdsMergeInput.currentRevision.substring(0, 10)); downstreamChangeInput.topic = currentTopic; downstreamChangeInput.merge = mergeInput; downstreamChangeInput.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.NONE; if (!(sdsMergeInput.doMerge)) { mergeInput.strategy = ""ours""; downstreamChangeInput.subject = ((sdsMergeInput.subject) + "" skipped: "") + (sdsMergeInput.currentRevision.substring(0, 10)); com.googlesource.gerrit.plugins.automerger.DownstreamCreator.log.debug(""Skipping merge for {} to {}"", sdsMergeInput.currentRevision, sdsMergeInput.downstreamBranch); } com.google.gerrit.extensions.api.changes.ChangeApi downstreamChange = gApi.changes().create(downstreamChangeInput); updateVote(downstreamChange.get(), config.getAutomergeLabel(), config.getMaxAutomergeVote()); }",4f6d4070241544ae59840e90616960ca0b9961ce,createSingleDownstreamMerge(com.googlesource.gerrit.plugins.automerger.SingleDownstreamMergeInput),createSingleDownstreamMerge(com.googlesource.gerrit.plugins.automerger.SingleDownstreamMergeInput),3,12,"public void createSingleDownstreamMerge(com.googlesource.gerrit.plugins.automerger.SingleDownstreamMergeInput sdsMergeInput) throws com.google.gerrit.extensions.restapi.RestApiException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String currentTopic = getOrSetTopic(sdsMergeInput.changeNumber, sdsMergeInput.topic); com.google.gerrit.extensions.common.MergeInput mergeInput = new com.google.gerrit.extensions.common.MergeInput(); mergeInput.source = sdsMergeInput.currentRevision; mergeInput.strategy = ""recursive""; com.googlesource.gerrit.plugins.automerger.DownstreamCreator.log.debug(""Creating downstream merge for {}"", sdsMergeInput.currentRevision); com.google.gerrit.extensions.common.ChangeInput downstreamChangeInput = new com.google.gerrit.extensions.common.ChangeInput(); downstreamChangeInput.project = sdsMergeInput.project; downstreamChangeInput.branch = sdsMergeInput.downstreamBranch; downstreamChangeInput.subject = ((sdsMergeInput.subject) + "" am: "") + (sdsMergeInput.currentRevision.substring(0, 10)); downstreamChangeInput.topic = currentTopic; downstreamChangeInput.merge = mergeInput; downstreamChangeInput.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.NONE; if (!(sdsMergeInput.doMerge)) { mergeInput.strategy = ""ours""; downstreamChangeInput.subject = ((sdsMergeInput.subject) + "" skipped: "") + (sdsMergeInput.currentRevision.substring(0, 10)); com.googlesource.gerrit.plugins.automerger.DownstreamCreator.log.debug(""Skipping merge for {} to {}"", sdsMergeInput.currentRevision, sdsMergeInput.downstreamBranch); } com.google.gerrit.extensions.api.changes.ChangeApi downstreamChange = gApi.changes().create(downstreamChangeInput); updateVote(downstreamChange.get(), config.getAutomergeLabel(), config.getMaxAutomergeVote()); }",13ebf9f95035dfeafbc311e36cfb116efd999252,createSingleDownstreamMerge(com.googlesource.gerrit.plugins.automerger.SingleDownstreamMergeInput),50910,466,469
47360,gerrit-pgm_src_main_java_com_google_gerrit_pgm_Reindex.java,2.0,"@java.lang.Override public java.lang.Void call() throws java.lang.Exception { com.google.gerrit.reviewdb.server.ReviewDb db = sysInjector.getInstance(com.google.gerrit.reviewdb.server.ReviewDb.class); com.google.gerrit.server.git.GitRepositoryManager mgr = sysInjector.getInstance(com.google.gerrit.server.git.GitRepositoryManager.class); repo = mgr.openRepository(project); try { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getAllRefs(); for (com.google.gerrit.reviewdb.client.Change c : db.changes().byProject(project)) { org.eclipse.jgit.lib.Ref r = refs.get(c.currentPatchSetId().toRefName()); if (r != null) { byId.put(r.getObjectId(), new com.google.gerrit.server.query.change.ChangeData(c)); } } walk(); } finally { repo.close(); org.eclipse.jgit.lib.RepositoryCache.close(repo); } return null; }",1e87ee3ae2fc5c95bf73cdc86734dfcd3f00927e,"@java.lang.Override public java.lang.Void call() throws java.lang.Exception { com.google.gerrit.reviewdb.server.ReviewDb db = sysInjector.getInstance(com.google.gerrit.reviewdb.server.ReviewDb.class); com.google.gerrit.server.git.GitRepositoryManager mgr = sysInjector.getInstance(com.google.gerrit.server.git.GitRepositoryManager.class); repo = mgr.openRepository(project); try { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getAllRefs(); for (com.google.gerrit.reviewdb.client.Change c : db.changes().byProject(project)) { java.lang.String refName = c.currentPatchSetId().toRefName(); org.eclipse.jgit.lib.Ref r = refs.get(refName); if (r != null) { byId.put(r.getObjectId(), new com.google.gerrit.server.query.change.ChangeData(c)); } else { java.lang.String error = (((""Failed to index change "" + (c.getId())) + "" ("") + refName) + "" not found)""; com.google.gerrit.pgm.Reindex.log.warn(error); failed.update(1); if (verbose) { java.lang.System.out.println(error); } } } walk(); } finally { repo.close(); org.eclipse.jgit.lib.RepositoryCache.close(repo); } return null; }",a884106de1143ce4f2f94673bf52e070b9790756,call(),call(),3,2,"@java.lang.Override public java.lang.Void call() throws java.lang.Exception { com.google.gerrit.reviewdb.server.ReviewDb db = sysInjector.getInstance(com.google.gerrit.reviewdb.server.ReviewDb.class); com.google.gerrit.server.git.GitRepositoryManager mgr = sysInjector.getInstance(com.google.gerrit.server.git.GitRepositoryManager.class); repo = mgr.openRepository(project); try { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getAllRefs(); for (com.google.gerrit.reviewdb.client.Change c : db.changes().byProject(project)) { java.lang.String refName = c.currentPatchSetId().toRefName(); org.eclipse.jgit.lib.Ref r = refs.get(refName); if (r != null) { byId.put(r.getObjectId(), new com.google.gerrit.server.query.change.ChangeData(c)); } else { fail(((((""Failed to index change "" + (c.getId())) + "" ("") + refName) + "" not found)""), true, null); } } walk(); } finally { repo.close(); org.eclipse.jgit.lib.RepositoryCache.close(repo); } return null; }",71427e2ca6df7eaf952ad663520df6f0c9499c4c,call(),84748,360,317
105201,gerrit-server_src_main_java_com_google_gerrit_server_project_CommitsCollection.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean isReachableFrom(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { refs = refFilter.create(state, repo).filter(refs, true); return (!(refs.isEmpty())) && (com.google.gerrit.server.change.IncludedInResolver.includedInOne(repo, rw, commit, refs.values())); } catch (java.io.IOException e) { com.google.gerrit.server.project.CommitsCollection.log.error(java.lang.String.format(""Cannot verify permissions to commit object %s in repository %s"", commit.name(), state.getProject().getNameKey()), e); return false; } }",252e3eb8ba020316cb47909c020a8fa16ff94e37,,"isReachableFrom(com.google.gerrit.server.project.ProjectState,org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevCommit,java.util.Map)",8,2,"public boolean isReachableFrom(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { refs = refFilter.create(state, repo).filter(refs, true); return com.google.gerrit.server.change.IncludedInResolver.includedInAny(repo, rw, commit, refs.values()); } catch (java.io.IOException e) { com.google.gerrit.server.project.CommitsCollection.log.error(java.lang.String.format(""Cannot verify permissions to commit object %s in repository %s"", commit.name(), state.getProject().getNameKey()), e); return false; } }",d7c2cafb3e51b355fac8174d3c8200b610870f89,"isReachableFrom(com.google.gerrit.server.project.ProjectState,org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevCommit,java.util.Map)",25247,235,227
35163,gerrit-server_src_main_java_com_google_gerrit_server_git_PerThreadRequestScope.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"<T> java.util.concurrent.Callable<T> scope(com.google.gerrit.server.util.RequestContext requestContext, java.util.concurrent.Callable<T> callable) { final com.google.gerrit.server.git.PerThreadRequestScope.Context ctx = new com.google.gerrit.server.git.PerThreadRequestScope.Context(); final java.util.concurrent.Callable<T> wrapped = context(requestContext, cleanup(callable)); return new java.util.concurrent.Callable<T>() { @java.lang.Override public T call() throws java.lang.Exception { com.google.gerrit.server.git.PerThreadRequestScope.Context old = com.google.gerrit.server.git.PerThreadRequestScope.current.get(); com.google.gerrit.server.git.PerThreadRequestScope.current.set(ctx); try { return wrapped.call(); } finally { com.google.gerrit.server.git.PerThreadRequestScope.current.set(old); } } }; }",f65cefad3d807f2121713003b2850168003fcefe,,"scope(com.google.gerrit.server.util.RequestContext,java.util.concurrent.Callable)",8,7,"public <T> java.util.concurrent.Callable<T> scope(com.google.gerrit.server.util.RequestContext requestContext, java.util.concurrent.Callable<T> callable) { final com.google.gerrit.server.git.PerThreadRequestScope.Context ctx = new com.google.gerrit.server.git.PerThreadRequestScope.Context(); final java.util.concurrent.Callable<T> wrapped = context(requestContext, cleanup(callable)); return new java.util.concurrent.Callable<T>() { @java.lang.Override public T call() throws java.lang.Exception { com.google.gerrit.server.git.PerThreadRequestScope.Context old = com.google.gerrit.server.git.PerThreadRequestScope.current.get(); com.google.gerrit.server.git.PerThreadRequestScope.current.set(ctx); try { return wrapped.call(); } finally { com.google.gerrit.server.git.PerThreadRequestScope.current.set(old); } } }; }",eb1ad0941088e7e2342f96b666532cd01cdc0588,"scope(com.google.gerrit.server.util.RequestContext,java.util.concurrent.Callable)",40776,231,232
86807,gerrit-lucene_src_main_java_com_google_gerrit_lucene_LuceneChangeIndex.java,31.0,"private void decodeReviewers(com.google.common.collect.Multimap<java.lang.String, org.apache.lucene.index.IndexableField> doc, com.google.gerrit.server.query.change.ChangeData cd) { cd.setReviewers(com.google.gerrit.server.index.change.ChangeField.parseReviewerFieldValues(com.google.common.collect.FluentIterable.from(doc.get(com.google.gerrit.lucene.LuceneChangeIndex.REVIEWER_FIELD)).transform(IndexableField::stringValue))); }",76b7ec57d57fb003bcbfe373f828dbb8015a71ba,"private void decodeReviewers(com.google.common.collect.Multimap<java.lang.String, org.apache.lucene.index.IndexableField> doc, com.google.gerrit.server.query.change.ChangeData cd) { cd.setReviewers(com.google.gerrit.server.index.change.ChangeField.parseReviewerFieldValues(com.google.gerrit.lucene.LuceneChangeIndex.fieldsToStrings(doc.get(com.google.gerrit.lucene.LuceneChangeIndex.REVIEWER_FIELD)))); }",fc34e6382684cdb52e7f2ebfbc19ebb5ef132449,"decodeReviewers(com.google.common.collect.Multimap,com.google.gerrit.server.query.change.ChangeData)","decodeReviewers(com.google.common.collect.Multimap,com.google.gerrit.server.query.change.ChangeData)",6,31,"private void decodeReviewers(com.google.common.collect.Multimap<java.lang.String, org.apache.lucene.index.IndexableField> doc, com.google.gerrit.server.query.change.ChangeData cd) { cd.setReviewers(com.google.gerrit.server.index.change.ChangeField.parseReviewerFieldValues(com.google.common.collect.FluentIterable.from(doc.get(com.google.gerrit.lucene.LuceneChangeIndex.REVIEWER_FIELD)).transform(IndexableField::stringValue))); }",76b7ec57d57fb003bcbfe373f828dbb8015a71ba,"decodeReviewers(com.google.common.collect.Multimap,com.google.gerrit.server.query.change.ChangeData)",3969,121,125
46240,gerrit-gwtui_src_main_java_net_codemirror_lib_LineCharacter.java,,,,public native final net.codemirror.lib.LineCharacter setLine(int line);,93be5cba8248107c33bb0e4fa8da2779364ba2cc,,setLine(int),6,3,private native final net.codemirror.lib.LineCharacter setLine(int line);,664bdadf8a5c3481e88f1f98a15973f241940d12,setLine(int),193642,18,18
51200,src_main_java_com_googlesource_gerrit_plugins_replication_PushResultProcessing.java,12.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override void onRefReplicatedToAllNodes(java.lang.String project, java.lang.String ref, int nodesCount) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(""Replication of ""); sb.append(project); sb.append("" completed to ""); sb.append(nodesCount); sb.append("" nodes, ""); writeStdOut(sb.toString()); }",8b5568baafacc9089c2bf02fc333be5f4327336c,,"onRefReplicatedToAllNodes(java.lang.String,java.lang.String,int)",6,4,"@java.lang.Override void onRefReplicatedToAllNodes(java.lang.String project, java.lang.String ref, int nodesCount) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(""Replication of ""); sb.append(project); sb.append("" ref ""); sb.append(ref); sb.append("" completed to ""); sb.append(nodesCount); sb.append("" nodes, ""); writeStdOut(sb.toString()); }",6a258a759ceb578a20bd80837752dc46c4867f13,"onRefReplicatedToAllNodes(java.lang.String,java.lang.String,int)",84397,93,106
74360,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeOp.java,15.0,"public void merge(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.IdentifiedUser caller, boolean checkSubmitRules) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { updateSubmissionId(change); this.db = db; logDebug(""Beginning integration of {}"", change); try { com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.completeChangeSet(db, change); logDebug(""Calculated to merge {}"", cs); if (checkSubmitRules) { logDebug(""Checking submit rules and state""); checkSubmitRulesAndState(cs); } try { integrateIntoHistory(cs, caller); } catch (com.google.gerrit.server.git.IntegrationException e) { logError(""Merge Conflict"", e); throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""Merge Conflict"", e); } } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } }",aa650129362f34f33ee9822a2d6e77440a78d9b3,"public void merge(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.IdentifiedUser caller, boolean checkSubmitRules) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { updateSubmissionId(change); this.db = db; logDebug(""Beginning integration of {}"", change); try { com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.completeChangeSet(db, change); logDebug(""Calculated to merge {}"", cs); if (checkSubmitRules) { logDebug(""Checking submit rules and state""); checkSubmitRulesAndState(cs); } try { integrateIntoHistory(cs, caller); } catch (com.google.gerrit.server.git.IntegrationException e) { logError(""Merge Conflict"", e); throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage(), e); } } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } }",4b0562cbfd61a60c5f3ca2a66b1ce7442aaf8765,"merge(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.server.IdentifiedUser,boolean)","merge(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.server.IdentifiedUser,boolean)",2,15,"public void merge(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.IdentifiedUser caller, boolean checkSubmitRules) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { updateSubmissionId(change); this.db = db; logDebug(""Beginning integration of {}"", change); try { com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.completeChangeSet(db, change); logDebug(""Calculated to merge {}"", cs); if (checkSubmitRules) { logDebug(""Checking submit rules and state""); checkSubmitRulesAndState(cs); } try { integrateIntoHistory(cs, caller); } catch (com.google.gerrit.server.git.IntegrationException e) { logError(""Merge Conflict"", e); throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } }",ef9daa4c07401386b1cc7558f98591ffd60cc004,"merge(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.server.IdentifiedUser,boolean)",20623,276,274
71735,gerrit-httpd_src_main_java_com_google_gerrit_httpd_ProjectOAuthFilter.java,,,,"private java.lang.String encoding(javax.servlet.http.HttpServletRequest req) { return com.google.common.base.MoreObjects.firstNonNull(req.getCharacterEncoding(), ""UTF-8""); }",da19a983c89e8681fcd468dbd0f2ca999493b446,,encoding(javax.servlet.http.HttpServletRequest),6,6,"private static java.lang.String encoding(javax.servlet.http.HttpServletRequest req) { return com.google.common.base.MoreObjects.firstNonNull(req.getCharacterEncoding(), java.nio.charset.StandardCharsets.UTF_8.name()); }",bb650fa54a9d8823f38baeee334c72a5f02ef04d,encoding(javax.servlet.http.HttpServletRequest),53755,43,54
70550,gerrit-gpg_src_main_java_com_google_gerrit_gpg_PushCertificateChecker.java,2.0,"private void checkSignature(org.bouncycastle.openpgp.PGPSignature sig, org.eclipse.jgit.transport.PushCertificate cert, com.google.gerrit.gpg.PublicKeyStore store, java.util.List<java.lang.String> problems) throws java.io.IOException, org.bouncycastle.openpgp.PGPException { org.bouncycastle.openpgp.PGPPublicKeyRingCollection keys = store.get(sig.getKeyID()); if (!(keys.getKeyRings().hasNext())) { problems.add((""No public keys found for key ID "" + (com.google.gerrit.gpg.PublicKeyStore.keyIdToString(sig.getKeyID())))); return; } org.bouncycastle.openpgp.PGPPublicKey signer = com.google.gerrit.gpg.PublicKeyStore.getSigner(keys, sig, org.eclipse.jgit.lib.Constants.encode(cert.toText())); if (signer == null) { problems.add(((""Signature by "" + (com.google.gerrit.gpg.PublicKeyStore.keyIdToString(sig.getKeyID()))) + "" is not valid"")); return; } com.google.gerrit.gpg.CheckResult result = publicKeyChecker.check(signer, sig.getKeyID()); if (!(result.isOk())) { java.lang.StringBuilder err = new java.lang.StringBuilder(""Invalid public key "").append(com.google.gerrit.gpg.PublicKeyStore.keyToString(signer)).append("":""); for (int i = 0; i < (result.getProblems().size()); i++) { err.append('\n').append("" "").append(result.getProblems().get(i)); } problems.add(err.toString()); } }",881ed04975da69bf0d3f847170829aca65def7df,"private void checkSignature(org.bouncycastle.openpgp.PGPSignature sig, org.eclipse.jgit.transport.PushCertificate cert, com.google.gerrit.gpg.PublicKeyStore store, java.util.List<java.lang.String> problems) throws java.io.IOException, org.bouncycastle.openpgp.PGPException { org.bouncycastle.openpgp.PGPPublicKeyRingCollection keys = store.get(sig.getKeyID()); if (!(keys.getKeyRings().hasNext())) { problems.add((""No public keys found for key ID "" + (com.google.gerrit.gpg.PublicKeyStore.keyIdToString(sig.getKeyID())))); return; } org.bouncycastle.openpgp.PGPPublicKey signer = com.google.gerrit.gpg.PublicKeyStore.getSigner(keys, sig, org.eclipse.jgit.lib.Constants.encode(cert.toText())); if (signer == null) { problems.add(((""Signature by "" + (com.google.gerrit.gpg.PublicKeyStore.keyIdToString(sig.getKeyID()))) + "" is not valid"")); return; } com.google.gerrit.gpg.CheckResult result = publicKeyChecker.check(signer); if (!(result.isOk())) { java.lang.StringBuilder err = new java.lang.StringBuilder(""Invalid public key "").append(com.google.gerrit.gpg.PublicKeyStore.keyToString(signer)).append("":""); for (int i = 0; i < (result.getProblems().size()); i++) { err.append('\n').append("" "").append(result.getProblems().get(i)); } problems.add(err.toString()); } }",3499bf1efd106fb32559c6f766e45de08fef0293,"checkSignature(org.bouncycastle.openpgp.PGPSignature,org.eclipse.jgit.transport.PushCertificate,com.google.gerrit.gpg.PublicKeyStore,java.util.List)","checkSignature(org.bouncycastle.openpgp.PGPSignature,org.eclipse.jgit.transport.PushCertificate,com.google.gerrit.gpg.PublicKeyStore,java.util.List)",5,1,"private void checkSignature(org.bouncycastle.openpgp.PGPSignature sig, org.eclipse.jgit.transport.PushCertificate cert, org.bouncycastle.openpgp.PGPPublicKeyRingCollection keys, java.util.List<java.lang.String> problems) { java.util.List<java.lang.String> deferredProblems = new java.util.ArrayList<>(); boolean anyKeys = false; for (org.bouncycastle.openpgp.PGPPublicKeyRing kr : keys) { org.bouncycastle.openpgp.PGPPublicKey k = kr.getPublicKey(); anyKeys = true; try { sig.init(new org.bouncycastle.openpgp.operator.bc.BcPGPContentVerifierBuilderProvider(), k); sig.update(org.eclipse.jgit.lib.Constants.encode(cert.toText())); if (!(sig.verify())) { deferredProblems.add((""Signature not valid with public key: "" + (com.google.gerrit.gpg.PublicKeyStore.keyToString(k)))); continue; } com.google.gerrit.gpg.CheckResult result = publicKeyChecker.check(k); if (result.isOk()) { return; } java.lang.StringBuilder err = new java.lang.StringBuilder(""Invalid public key "").append(com.google.gerrit.gpg.PublicKeyStore.keyToString(k)).append("":""); for (java.lang.String problem : result.getProblems()) { err.append(""\n "").append(problem); } problems.add(err.toString()); return; } catch (org.bouncycastle.openpgp.PGPException e) { deferredProblems.add((((""Error checking signature with public key "" + (com.google.gerrit.gpg.PublicKeyStore.keyToString(k))) + "": "") + (e.getMessage()))); } } if (!anyKeys) { problems.add((""No public keys found for key ID "" + (com.google.gerrit.gpg.PublicKeyStore.keyIdToString(sig.getKeyID())))); } else { problems.addAll(deferredProblems); } }",8f50029ebd0fe21a8d2a7d3c98aef1efc0342ed9,"checkSignature(org.bouncycastle.openpgp.PGPSignature,org.eclipse.jgit.transport.PushCertificate,org.bouncycastle.openpgp.PGPPublicKeyRingCollection,java.util.List)",3330,374,459
79119,gerrit-server_src_main_java_com_google_gerrit_server_query_change_QueryProcessor.java,9.0,private int getEffectiveLimit(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p) { java.util.List<java.lang.Integer> possibleLimits = new java.util.ArrayList<>(4); possibleLimits.add(getBackendSupportedLimit()); possibleLimits.add(getPermittedLimit()); if ((limitFromCaller) > 0) { possibleLimits.add(limitFromCaller); } java.lang.Integer limitFromPredicate = com.google.gerrit.server.query.change.LimitPredicate.getLimit(p); if (limitFromPredicate != null) { possibleLimits.add(limitFromPredicate); } return com.google.common.collect.Ordering.natural().min(possibleLimits); },75c6951d82a8d844ec3cbfbfb4e43f33565f1ee6,"private int getEffectiveLimit(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p) { java.util.List<java.lang.Integer> possibleLimits = new java.util.ArrayList<>(4); possibleLimits.add(getBackendSupportedLimit()); possibleLimits.add(getPermittedLimit()); if ((limitFromCaller) > 0) { possibleLimits.add(limitFromCaller); } java.lang.Integer limitFromPredicate = com.google.gerrit.server.query.LimitPredicate.getLimit(ChangeQueryBuilder.FIELD_LIMIT, p); if (limitFromPredicate != null) { possibleLimits.add(limitFromPredicate); } return com.google.common.collect.Ordering.natural().min(possibleLimits); }",098fb0dd00973ef62e47247bb7b82328dd226e28,getEffectiveLimit(com.google.gerrit.server.query.Predicate),getEffectiveLimit(com.google.gerrit.server.query.Predicate),4,9,"private int getEffectiveLimit(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p) { java.util.List<java.lang.Integer> possibleLimits = new java.util.ArrayList<>(4); possibleLimits.add(getBackendSupportedLimit()); possibleLimits.add(getPermittedLimit()); if ((limitFromCaller) > 0) { possibleLimits.add(limitFromCaller); } java.lang.Integer limitFromPredicate = com.google.gerrit.server.query.LimitPredicate.getLimit(com.google.gerrit.server.query.change.ChangeQueryBuilder.FIELD_LIMIT, p); if (limitFromPredicate != null) { possibleLimits.add(limitFromPredicate); } return com.google.common.collect.Ordering.natural().min(possibleLimits); }",88460e9f48350246cee91d093765cb1bd92646bd,getEffectiveLimit(com.google.gerrit.server.query.Predicate),208008,173,186
16043,gerrit-server_src_main_java_com_google_gerrit_server_mail_AbandonedSender.java,1.0,"@java.lang.Override protected void formatChange() { appendText(getNameFor(fromId)); appendText((("" has abandoned change "" + (change.getKey().abbreviate())) + "":\n"")); appendText(""\n""); formatCoverLetter(); }",7491036bc4f5f0fb85f03a5fb512903549d4d351,"@java.lang.Override protected void formatChange() { appendText(velocifyFile(""Abandoned.vm"")); }",8b4eda7e79951f902713dcbe6666b0f8e222202e,formatChange(),formatChange(),6,0,"@java.lang.Override protected void formatChange() throws com.google.gerrit.server.mail.EmailException { appendText(velocifyFile(""Abandoned.vm"")); }",062ff688e0d6620cfa797a43a7514ae646557fef,formatChange(),168878,29,43
159711,src_main_java_com_googlesource_gerrit_plugins_reviewers_ReviewersConfig.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getReviewerFilterSections() { com.google.common.collect.ImmutableList.Builder<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> b = com.google.common.collect.ImmutableList.builder(); for (java.lang.String f : cfg.getSubsections(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER)) { b.add(newReviewerFilterSection(f)); } return b.build(); },9af706b6737cc0010f1aaa8535a598381d667da4,,getReviewerFilterSections(),4,10,java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getReviewerFilterSections() { com.google.common.collect.ImmutableList.Builder<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> b = com.google.common.collect.ImmutableList.builder(); for (java.lang.String f : cfg.getSubsections(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.SECTION_FILTER)) { b.add(newReviewerFilterSection(f)); } return b.build(); },287a151ab07a96e66aa5b9d98de0667d4e5e2932,getReviewerFilterSections(),176455,136,135
52370,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectInfoScreen.java,10.0,"private java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> getPluginConfigValues() { java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> pluginConfigValues = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, java.lang.String>>(pluginConfigWidgets.size()); for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String, com.google.gwt.user.client.ui.Widget>> e : pluginConfigWidgets.entrySet()) { java.util.Map<java.lang.String, java.lang.String> values = new java.util.HashMap<java.lang.String, java.lang.String>(e.getValue().size()); pluginConfigValues.put(e.getKey(), values); for (java.util.Map.Entry<java.lang.String, com.google.gwt.user.client.ui.Widget> e2 : e.getValue().entrySet()) { com.google.gwt.user.client.ui.Widget widget = e2.getValue(); if (widget instanceof com.google.gwt.user.client.ui.TextBox) { values.put(e2.getKey(), ((com.google.gwt.user.client.ui.TextBox) (widget)).getValue().trim()); } else if (widget instanceof com.google.gwt.user.client.ui.CheckBox) { values.put(e2.getKey(), java.lang.Boolean.toString(((com.google.gwt.user.client.ui.CheckBox) (widget)).getValue())); } } } return pluginConfigValues; }",d14b1f67afe784aded36a306d110d84d2149c657,"private java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> getPluginConfigValues() { java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> pluginConfigValues = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, java.lang.String>>(pluginConfigWidgets.size()); for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String, com.google.gwt.user.client.ui.Widget>> e : pluginConfigWidgets.entrySet()) { java.util.Map<java.lang.String, java.lang.String> values = new java.util.HashMap<java.lang.String, java.lang.String>(e.getValue().size()); pluginConfigValues.put(e.getKey(), values); for (java.util.Map.Entry<java.lang.String, com.google.gwt.user.client.ui.Widget> e2 : e.getValue().entrySet()) { com.google.gwt.user.client.ui.Widget widget = e2.getValue(); if (widget instanceof com.google.gwt.user.client.ui.TextBox) { values.put(e2.getKey(), ((com.google.gwt.user.client.ui.TextBox) (widget)).getValue().trim()); } else if (widget instanceof com.google.gwt.user.client.ui.CheckBox) { values.put(e2.getKey(), java.lang.Boolean.toString(((com.google.gwt.user.client.ui.CheckBox) (widget)).getValue())); } else if (widget instanceof com.google.gwt.user.client.ui.ListBox) { com.google.gwt.user.client.ui.ListBox listBox = ((com.google.gwt.user.client.ui.ListBox) (widget)); java.lang.String value = listBox.getValue(listBox.getSelectedIndex()); values.put(e2.getKey(), value); } } } return pluginConfigValues; }",c07dfba5dbb8693bbe2f4618c85b93430c5876da,getPluginConfigValues(),getPluginConfigValues(),15,12,"private java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> getPluginConfigValues() { java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> pluginConfigValues = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, java.lang.String>>(pluginConfigWidgets.size()); for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String, com.google.gwt.user.client.ui.FocusWidget>> e : pluginConfigWidgets.entrySet()) { java.util.Map<java.lang.String, java.lang.String> values = new java.util.HashMap<java.lang.String, java.lang.String>(e.getValue().size()); pluginConfigValues.put(e.getKey(), values); for (java.util.Map.Entry<java.lang.String, com.google.gwt.user.client.ui.FocusWidget> e2 : e.getValue().entrySet()) { com.google.gwt.user.client.ui.FocusWidget widget = e2.getValue(); if (widget instanceof com.google.gwt.user.client.ui.TextBox) { values.put(e2.getKey(), ((com.google.gwt.user.client.ui.TextBox) (widget)).getValue().trim()); } else if (widget instanceof com.google.gwt.user.client.ui.CheckBox) { values.put(e2.getKey(), java.lang.Boolean.toString(((com.google.gwt.user.client.ui.CheckBox) (widget)).getValue())); } else if (widget instanceof com.google.gwt.user.client.ui.ListBox) { com.google.gwt.user.client.ui.ListBox listBox = ((com.google.gwt.user.client.ui.ListBox) (widget)); java.lang.String value = listBox.getValue(listBox.getSelectedIndex()); values.put(e2.getKey(), value); } } } return pluginConfigValues; }",fb894adbce222b14a99aaff01e3c8766cc8c6a01,getPluginConfigValues(),173171,482,485
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_RebaseAction.java,3.0,@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); },f000ef9686a414f07944510299e301bf374252c9,"@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id, project)); }",58691e7bd0f6327878a08e2e3e2a42e3f672d223,onSuccess(com.google.gerrit.client.info.ChangeInfo),onSuccess(com.google.gerrit.client.info.ChangeInfo),7,2,"@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, id)); }",a2eec20a3c7043dbdc6393507bdfe6ebb93cae53,onSuccess(com.google.gerrit.client.info.ChangeInfo),210744,67,67
66613,gerrit-lucene_src_main_java_com_google_gerrit_lucene_SubIndex.java,10.0,"void close() { reopenThread.close(); try { searcherManager.maybeRefreshBlocking(); } catch (java.io.IOException e) { com.google.gerrit.lucene.SubIndex.log.warn(""error finishing pending Lucene writes"", e); } try { writer.getIndexWriter().commit(); try { writer.getIndexWriter().close(); } catch (org.apache.lucene.store.AlreadyClosedException e) { } } catch (java.io.IOException e) { com.google.gerrit.lucene.SubIndex.log.warn(""error closing Lucene writer"", e); } try { dir.close(); } catch (java.io.IOException e) { com.google.gerrit.lucene.SubIndex.log.warn(""error closing Lucene directory"", e); } }",3f1825b6ad89d436c304b0ecead8101b06210ac2,"void close() { reopenThread.close(); try { searcherManager.maybeRefreshBlocking(); } catch (java.io.IOException e) { com.google.gerrit.lucene.SubIndex.log.warn(""error finishing pending Lucene writes"", e); } try { try { writer.getIndexWriter().close(); } catch (org.apache.lucene.store.AlreadyClosedException e) { } } catch (java.io.IOException e) { com.google.gerrit.lucene.SubIndex.log.warn(""error closing Lucene writer"", e); } try { dir.close(); } catch (java.io.IOException e) { com.google.gerrit.lucene.SubIndex.log.warn(""error closing Lucene directory"", e); } }",3754ddd0f976117fc80f727d4d6eb8a33043bb94,close(),close(),7,10,"void close() { reopenThread.close(); try { searcherManager.maybeRefreshBlocking(); } catch (java.io.IOException e) { com.google.gerrit.lucene.SubIndex.log.warn(""error finishing pending Lucene writes"", e); } try { writer.getIndexWriter().close(); } catch (org.apache.lucene.store.AlreadyClosedException e) { } catch (java.io.IOException e) { com.google.gerrit.lucene.SubIndex.log.warn(""error closing Lucene writer"", e); } try { dir.close(); } catch (java.io.IOException e) { com.google.gerrit.lucene.SubIndex.log.warn(""error closing Lucene directory"", e); } }",1144f7ff0ae0c732957a3b72c91d1d76b5361a15,close(),162929,160,157
148032,javatests_com_google_gerrit_server_query_group_AbstractQueryGroupsTest.java,33.0,"@org.junit.Test public void byDefaultField() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name(""foo-group"")); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name(""group2"")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name(""group3""), (""decription that contains foo and the UUID of group2: "" + (group2.id))); assertQuery(""non-existing""); assertQuery(""foo"", group1, group3); assertQuery(group2.id, group2, group3); }",069440872697f3805ccd5377892f469eef95c6e3,"@org.junit.Test public void byDefaultField() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name(""foo-account"")); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name(""group2"")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name(""group3""), (""decription that contains foo and the UUID of group2: "" + (group2.id))); assertQuery(""non-existing""); assertQuery(""foo"", group1, group3); assertQuery(group2.id, group2, group3); }",d59112d7e9c89c31c8b5a196c103aedb4f1211a2,byDefaultField(),byDefaultField(),17,33,"@org.junit.Test public void byDefaultField() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name(""foo-group"")); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name(""group2"")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name(""group3""), (""decription that contains foo and the UUID of group2: "" + (group2.id))); assertQuery(""non-existing""); assertQuery(""foo"", group1, group3); assertQuery(group2.id, group2, group3); }",069440872697f3805ccd5377892f469eef95c6e3,byDefaultField(),217199,141,141
126072,gerrit-server_src_main_java_com_google_gerrit_server_config_GerritServerConfigProvider.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void load(org.eclipse.jgit.storage.file.FileBasedConfig cfg) { try { cfg.load(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.inject.ProvisionException(e.getMessage(), e); } }",8f8d7b61ee401b583169e2bf7088506662ba56e9,,load(org.eclipse.jgit.storage.file.FileBasedConfig),6,1,"private static org.eclipse.jgit.storage.file.FileBasedConfig loadConfig(@com.google.gerrit.common.Nullable org.eclipse.jgit.lib.Config base, java.nio.file.Path path) { org.eclipse.jgit.storage.file.FileBasedConfig cfg = new org.eclipse.jgit.storage.file.FileBasedConfig(base, path.toFile(), org.eclipse.jgit.util.FS.DETECTED); try { cfg.load(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.inject.ProvisionException(e.getMessage(), e); } return cfg; }",17719f5069f28d84443241f9c302673aecee639a,"loadConfig(org.eclipse.jgit.lib.Config,java.nio.file.Path)",57588,71,155
74994,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,101.0,"private void readChangesForReplace() throws com.google.gwtorm.server.OrmException { java.util.List<com.google.common.util.concurrent.CheckedFuture<com.google.gerrit.reviewdb.client.Change, com.google.gwtorm.server.OrmException>> futures = com.google.common.collect.Lists.newArrayListWithCapacity(replaceByChange.size()); for (com.google.gerrit.server.git.ReceiveCommits.ReplaceRequest request : replaceByChange.values()) { futures.add(db.changes().getAsync(request.ontoChange)); } for (com.google.common.util.concurrent.CheckedFuture<com.google.gerrit.reviewdb.client.Change, com.google.gwtorm.server.OrmException> f : futures) { com.google.gerrit.reviewdb.client.Change c = f.checkedGet(); if (c != null) { replaceByChange.get(c.getId()).change = c; } } }",8abb4d0e4d4ba32e96de0e273922eac78e694599,"private void readChangesForReplace() throws com.google.gwtorm.server.OrmException { java.util.List<com.google.common.util.concurrent.CheckedFuture<com.google.gerrit.server.notedb.ChangeNotes, com.google.gwtorm.server.OrmException>> futures = com.google.common.collect.Lists.newArrayListWithCapacity(replaceByChange.size()); for (com.google.gerrit.server.git.ReceiveCommits.ReplaceRequest request : replaceByChange.values()) { futures.add(notesFactory.createAsync(db, project.getNameKey(), request.ontoChange)); } for (com.google.common.util.concurrent.CheckedFuture<com.google.gerrit.server.notedb.ChangeNotes, com.google.gwtorm.server.OrmException> f : futures) { com.google.gerrit.server.notedb.ChangeNotes notes = f.checkedGet(); if ((notes.getChange()) != null) { replaceByChange.get(notes.getChangeId()).change = notes.getChange(); } } }",83ae5f1fbd7f6dc097c5008d5234919c9671512a,readChangesForReplace(),readChangesForReplace(),4,92,"private void readChangesForReplace() throws com.google.gwtorm.server.OrmException { java.util.List<com.google.common.util.concurrent.CheckedFuture<com.google.gerrit.server.notedb.ChangeNotes, com.google.gwtorm.server.OrmException>> futures = com.google.common.collect.Lists.newArrayListWithCapacity(replaceByChange.size()); for (com.google.gerrit.server.git.ReceiveCommits.ReplaceRequest request : replaceByChange.values()) { futures.add(notesFactory.createAsync(changeUpdateExector, db, project.getNameKey(), request.ontoChange)); } for (com.google.common.util.concurrent.CheckedFuture<com.google.gerrit.server.notedb.ChangeNotes, com.google.gwtorm.server.OrmException> f : futures) { com.google.gerrit.server.notedb.ChangeNotes notes = f.checkedGet(); if ((notes.getChange()) != null) { replaceByChange.get(notes.getChangeId()).change = notes.getChange(); } } }",8d16f9d9f141196981496057c89dbf950bb6e691,readChangesForReplace(),166369,249,254
87439,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Assignee.java,7.0,@java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); assigneeLink.setText(result.name()); },d0025172834c498efdc6ac81e632bdbb80ccbc1d,@java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); assigneeLink.setText(getName(result)); },30540341d74ed14f93d9b6e50f3199125ad49fd9,onSuccess(com.google.gerrit.client.info.AccountInfo),onSuccess(com.google.gerrit.client.info.AccountInfo),7,8,@java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); setAssignee(result); com.google.gerrit.client.change.Reviewers reviewers = getReviewers(); if (reviewers != null) { reviewers.updateReviewerList(); } },c24a6512725b13aac15fa61860fe89f8de23ee92,onSuccess(com.google.gerrit.client.info.AccountInfo),28580,41,75
54940,github-oauth_src_main_java_com_googlesource_gerrit_plugins_github_oauth_GitHubLogin.java,0.0,"private java.lang.String getScopesKey(javax.servlet.http.HttpServletRequest request) { java.lang.String scopeRequested = request.getParameter(""scope""); return com.google.common.base.Objects.firstNonNull(scopeRequested, ""scopes""); }",31e48045abc0edb9ed3b783550ff9fa1d6d7519b,"private java.lang.String getScopesKey(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) { java.lang.String scopeRequested = request.getParameter(""scope""); if (scopeRequested == null) { scopeRequested = getScopesKeyFromCookie(request); } if (scopeRequested != null) { javax.servlet.http.Cookie scopeCookie = new javax.servlet.http.Cookie(""scope"", scopeRequested); scopeCookie.setPath(""/""); scopeCookie.setMaxAge(com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.SCOPE_COOKIE_NEVER_EXPIRES); response.addCookie(scopeCookie); } return com.google.common.base.Objects.firstNonNull(scopeRequested, ""scopes""); }",15b46e27a739ed376b3ca43c28f24c30450c4d38,getScopesKey(javax.servlet.http.HttpServletRequest),"getScopesKey(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",5,0,"private java.lang.String getScopesKey(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) { java.lang.String scopeRequested = request.getParameter(""scope""); if (scopeRequested == null) { scopeRequested = getScopesKeyFromCookie(request); } if (scopeRequested != null) { javax.servlet.http.Cookie scopeCookie = new javax.servlet.http.Cookie(""scope"", scopeRequested); scopeCookie.setPath(""/""); scopeCookie.setMaxAge(((int) (com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.SCOPE_COOKIE_NEVER_EXPIRES))); response.addCookie(scopeCookie); } return com.google.common.base.Objects.firstNonNull(scopeRequested, ""scopes""); }",6cd29ab6fe6000fb59caede2cd5836d5ef584e68,"getScopesKey(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",150543,164,167
20045,gerrit-server_src_main_java_com_google_gerrit_server_git_CreateCodeReviewNotes.java,,,,"private void setOurs() throws java.io.IOException { if ((baseCommit) != null) { ours = org.eclipse.jgit.notes.NoteMap.read(db.newObjectReader(), baseCommit); } else { ours = org.eclipse.jgit.notes.NoteMap.newEmptyMap(); } java.lang.StringBuilder message = new java.lang.StringBuilder(""Submitted the following changes:""); for (com.google.gerrit.server.git.CodeReviewCommit c : commits) { if (ours.contains(c)) { throw new java.lang.IllegalStateException(((""Review summary note already exists for commit: "" + c) + "". Merging of notes not yet supported"")); } org.eclipse.jgit.lib.ObjectId id = inserter.insert(Constants.OBJ_BLOB, createNoteContent(c)); inserter.flush(); org.eclipse.jgit.revwalk.RevBlob blob = revWalk.lookupBlob(id); ours.set(c, blob); message.append("" ""); message.append(c.change.getId()); } if ((baseCommit) != null) { oursCommit = createCommit(ours, author, message.toString(), baseCommit); } else { oursCommit = createCommit(ours, author, message.toString()); } }",65fee7ac4264a5a78199c1fa1eed01cef8d4b902,,setOurs(),10,2,"private void setOurs() throws com.google.gerrit.server.git.CodeReviewNoteCreationException, java.io.IOException { if ((baseCommit) != null) { ours = org.eclipse.jgit.notes.NoteMap.read(db.newObjectReader(), baseCommit); } else { ours = org.eclipse.jgit.notes.NoteMap.newEmptyMap(); } java.lang.StringBuilder message = new java.lang.StringBuilder(""Update notes for submitted changes\n\n""); for (com.google.gerrit.server.git.CodeReviewCommit c : commits) { org.eclipse.jgit.lib.ObjectId noteContent = createNoteContent(c); if (ours.contains(c)) { org.eclipse.jgit.notes.DefaultNoteMerger noteMerger = new org.eclipse.jgit.notes.DefaultNoteMerger(); org.eclipse.jgit.notes.Note newNote = new org.eclipse.jgit.notes.Note(c, noteContent); noteContent = noteMerger.merge(null, newNote, base.getNote(c), reader, inserter).getData(); } ours.set(c, noteContent); message.append(""* "").append(c.getShortMessage()).append(""\n""); } if ((baseCommit) != null) { oursCommit = createCommit(ours, author, message.toString(), baseCommit); } else { oursCommit = createCommit(ours, author, message.toString()); } }",cb8a22f776d27810456d5d9628b9fc73d18ca027,setOurs(),81054,291,330
56097,gerrit-server_src_main_java_com_google_gerrit_server_plugins_JsPlugin.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public com.google.gerrit.server.plugins.PluginScanner getScanner() { return this; },0eb4aed3fe69e14673ae5b702638abf615d2225a,,getScanner(),21,5,@java.lang.Override public com.google.gerrit.server.plugins.PluginContentScanner getContentScanner() { return PluginContentScanner.EMPTY; },9bdd4ea12734a18092b87de327857705ad3ccbb0,getContentScanner(),63483,28,34
49740,gerrit-server_src_main_java_com_google_gerrit_server_index_IndexModule.java,1.0,"@java.lang.Override protected void configure() { bind(com.google.gerrit.server.query.change.ChangeQueryRewriter.class).to(com.google.gerrit.server.index.IndexRewriteImpl.class); bind(IndexRewriteImpl.BasicRewritesImpl.class); bind(com.google.gerrit.server.index.IndexCollection.class); listener().to(com.google.gerrit.server.index.IndexCollection.class); install(new com.google.inject.assistedinject.FactoryModuleBuilder().implement(com.google.gerrit.server.index.ChangeIndexer.class, com.google.gerrit.server.index.ChangeIndexerImpl.class).build(ChangeIndexer.Factory.class)); if ((indexExecutor) != null) { bind(com.google.common.util.concurrent.ListeningScheduledExecutorService.class).annotatedWith(com.google.gerrit.server.index.IndexExecutor.class).toInstance(indexExecutor); } else { install(new com.google.gerrit.server.index.IndexModule.IndexExecutorModule(threads)); } }",6f70eda300a3b73f0d071f5fc95a361afda999e8,"@java.lang.Override protected void configure() { bind(com.google.gerrit.server.query.change.ChangeQueryRewriter.class).to(com.google.gerrit.server.index.IndexRewriteImpl.class); bind(com.google.gerrit.server.index.IndexCollection.class); listener().to(com.google.gerrit.server.index.IndexCollection.class); install(new com.google.inject.assistedinject.FactoryModuleBuilder().implement(com.google.gerrit.server.index.ChangeIndexer.class, com.google.gerrit.server.index.ChangeIndexerImpl.class).build(ChangeIndexer.Factory.class)); if ((indexExecutor) != null) { bind(com.google.common.util.concurrent.ListeningScheduledExecutorService.class).annotatedWith(com.google.gerrit.server.index.IndexExecutor.class).toInstance(indexExecutor); } else { install(new com.google.gerrit.server.index.IndexModule.IndexExecutorModule(threads)); } }",29732b4dbbe71aebac9e20c9a480d61d568d267e,configure(),configure(),2,1,"@java.lang.Override protected void configure() { bind(com.google.gerrit.server.query.change.ChangeQueryRewriter.class).to(com.google.gerrit.server.index.IndexRewriteImpl.class); bind(IndexRewriteImpl.BasicRewritesImpl.class); bind(com.google.gerrit.server.index.IndexCollection.class); listener().to(com.google.gerrit.server.index.IndexCollection.class); install(new com.google.inject.assistedinject.FactoryModuleBuilder().implement(com.google.gerrit.server.index.ChangeIndexer.class, com.google.gerrit.server.index.ChangeIndexerImpl.class).build(ChangeIndexer.Factory.class)); if ((indexExecutor) != null) { bind(com.google.common.util.concurrent.ListeningScheduledExecutorService.class).annotatedWith(com.google.gerrit.server.index.IndexExecutor.class).toInstance(indexExecutor); } else { install(new com.google.gerrit.server.index.IndexModule.IndexExecutorModule(threads)); } }",6f70eda300a3b73f0d071f5fc95a361afda999e8,configure(),79149,230,243
109870,gerrit-server_src_main_java_com_google_gerrit_server_query_change_SubmittablePredicate.java,0.0,@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { return cd.submitRecords(ChangeField.SUBMIT_RULE_OPTIONS_STRICT).stream().anyMatch(( r) -> r.status == (status)); },de5fcad0a82c078f69555ad2eb896091f499e8dd,"@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { return cd.submitRecords(args.accounts, ChangeField.SUBMIT_RULE_OPTIONS_STRICT).stream().anyMatch(( r) -> r.status == (status)); }",e73c9e79a63a9aa1fc046762909b99dab93fc781,match(com.google.gerrit.server.query.change.ChangeData),match(com.google.gerrit.server.query.change.ChangeData),2,0,@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { return cd.submitRecords(ChangeField.SUBMIT_RULE_OPTIONS_STRICT).stream().anyMatch(( r) -> r.status == (status)); },de5fcad0a82c078f69555ad2eb896091f499e8dd,match(com.google.gerrit.server.query.change.ChangeData),25940,78,74
97931,gerrit-server_src_main_java_com_google_gerrit_server_api_accounts_AccountApiImpl.java,8.0,"@java.lang.Override public void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), email); try { deleteEmail.apply(rsrc, null); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete email"", e); } }",1ac2d81f2ed0a700478fdfb59e088c1227c27660,"@java.lang.Override public void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), email); try { deleteEmail.apply(rsrc, null); } catch (com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete email"", e); } }",78a57820d3bdb74a7a27dfa70168949e6ffc0c77,deleteEmail(java.lang.String),deleteEmail(java.lang.String),12,8,"@java.lang.Override public void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), email); try { deleteEmail.apply(rsrc, null); } catch (com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete email"", e); } }",d3d84c538dccd7b495f4421a6586800e3e76be79,deleteEmail(java.lang.String),69740,151,164
53152,gerrit-gwtui_src_main_java_com_google_gerrit_client_GitwebLink.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.lang.String toFile(java.lang.String project, java.lang.String commit, java.lang.String file) { com.google.gerrit.common.data.ParameterizedString pattern = new com.google.gerrit.common.data.ParameterizedString(type.getFile()); java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<java.lang.String, java.lang.String>(); p.put(""project"", encode(project)); p.put(""commit"", encode(commit)); p.put(""file"", encode(file)); return (baseUrl) + (pattern.replace(p)); }",3e49dea1124a1aaf83e14bf5bd125322d7cef299,,"toFile(java.lang.String,java.lang.String,java.lang.String)",6,6,"public java.lang.String toFile(java.lang.String project, java.lang.String commit, java.lang.String file) { java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<java.lang.String, java.lang.String>(); p.put(""project"", encode(project)); p.put(""commit"", encode(commit)); p.put(""file"", encode(file)); com.google.gerrit.common.data.ParameterizedString pattern = ((file == null) || (file.isEmpty())) ? new com.google.gerrit.common.data.ParameterizedString(type.getRootTree()) : new com.google.gerrit.common.data.ParameterizedString(type.getFile()); return (baseUrl) + (pattern.replace(p)); }",0623bd39139041f03f08fb4121e1492a22a577fe,"toFile(java.lang.String,java.lang.String,java.lang.String)",214771,147,182
23526,gerrit-server_src_main_java_com_google_gerrit_rules_PrologEnvironment.java,,,,"private void init() { if (!(intialized)) { intialized = true; if (!(initialize(Prolog.BUILTIN, ""com.google.gerrit.rules.common""))) { throw new com.googlecode.prolog_cafe.lang.SystemException(""Prolog initialization failed""); } } }",7a844a1cd916d6680723497cf1cd8c903b35437b,,init(),4,3,"private void init() { if (!(intialized)) { intialized = true; if (!(initialize(com.google.gerrit.rules.PrologEnvironment.PACKAGE_LIST))) { throw new com.googlecode.prolog_cafe.lang.SystemException(""Prolog initialization failed""); } } }",08c6de911791bf9d988d457feef203adc8bb31c1,init(),129538,67,64
50217,gerrit-server_src_main_java_com_google_gerrit_server_events_EventFactory.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void currentreviewers(com.google.gerrit.server.data.ChangeAttribute a, com.google.gerrit.server.change.ChangeResource rsrc, java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, java.util.Collection<com.google.gerrit.reviewdb.client.PatchSetApproval>> approvals) throws com.google.gwtorm.server.OrmException { a.currentReviewers = new java.util.ArrayList<com.google.gerrit.server.data.AccountAttribute>(); com.google.gerrit.reviewdb.client.PatchSet.Id psid = rsrc.getChange().currentPatchSetId(); java.util.Collection<com.google.gerrit.reviewdb.client.PatchSetApproval> list = approvals.get(psid); if (list != null) { for (com.google.gerrit.reviewdb.client.PatchSetApproval p : list) { a.currentReviewers.add(asAccountAttribute(p.getAccountId())); } } }",d767c0e6795d6e2f6fa76ec967258551d6f722ec,,"currentreviewers(com.google.gerrit.server.data.ChangeAttribute,com.google.gerrit.server.change.ChangeResource,java.util.Map)",13,19,"public void addAllReviewers(com.google.gerrit.server.data.ChangeAttribute a, com.google.gerrit.reviewdb.client.Change change) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = db.get().patchSetApprovals().byChange(change.getId()).toList(); if (!(approvals.isEmpty())) { a.allReviewers = com.google.common.collect.Lists.newArrayList(); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> seen = com.google.common.collect.Sets.newHashSet(); for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : approvals) { com.google.gerrit.reviewdb.client.Account.Id id = psa.getAccountId(); if (!(seen.contains(id))) { seen.add(id); a.allReviewers.add(asAccountAttribute(id)); } } } }",6bd05b9a1df3e5eebffab039607c575758ca822d,"addAllReviewers(com.google.gerrit.server.data.ChangeAttribute,com.google.gerrit.reviewdb.client.Change)",158064,245,245
35102,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectAccessScreen.java,6.0,private void enable(boolean enabled) { commitMessage.setEnabled(enabled); commit.setEnabled(enabled); cancel1.setEnabled(enabled); cancel2.setEnabled(enabled); },dec3876ab9e9951db398df357df5533f5ea4b49a,private void enable(boolean enabled) { commitMessage.setEnabled(enabled); commit.setEnabled(enabled); review.setEnabled(enabled); cancel1.setEnabled(enabled); cancel2.setEnabled(enabled); },08b0088c240eb0451c25e09e3f7b4471b63080d1,enable(boolean),enable(boolean),6,10,private void enable(boolean enabled) { commitMessage.setEnabled(enabled); commit.setEnabled((enabled ? !(access.getOwnerOf().isEmpty()) : false)); review.setEnabled((enabled ? access.canUpload() : false)); cancel1.setEnabled(enabled); cancel2.setEnabled(enabled); },076d886ba372ea2497789ce3e622f2e01b597338,enable(boolean),88782,40,63
44192,src_main_java_com_google_gwtexpui_safehtml_client_SafeHtml.java,4.0,"public com.google.gwtexpui.safehtml.client.SafeHtml replaceAll(java.util.List<? extends com.google.gwtexpui.safehtml.client.FindReplace> findReplaceList) { if (findReplaceList == null) { return this; } java.lang.String html = this.asString(); for (com.google.gwtexpui.safehtml.client.FindReplace findReplace : findReplaceList) { html = html.replaceAll(findReplace.find(), findReplace.replace()); } return new com.google.gwtexpui.safehtml.client.SafeHtmlString(html); }",926a0800b33280cfb3d10a09c61010b6dec8b7ff,"public com.google.gwtexpui.safehtml.client.SafeHtml replaceAll(java.util.List<? extends com.google.gwtexpui.safehtml.client.FindReplace> findReplaceList) { if (findReplaceList == null) { return this; } java.util.List<com.google.gwtexpui.safehtml.client.SafeHtml.RegExpReplacement> repls = new java.util.ArrayList<com.google.gwtexpui.safehtml.client.SafeHtml.RegExpReplacement>(findReplaceList.size()); java.lang.StringBuilder pat = new java.lang.StringBuilder(); for (int i = 0; i < (findReplaceList.size()); i++) { com.google.gwtexpui.safehtml.client.FindReplace fr = findReplaceList.get(i); repls.add(new com.google.gwtexpui.safehtml.client.SafeHtml.RegExpReplacement(fr.find(), fr.replace())); pat.append(fr.find()); if (i != ((findReplaceList.size()) - 1)) { pat.append('|'); } } java.lang.StringBuilder result = new java.lang.StringBuilder(); com.google.gwt.regexp.shared.RegExp re = com.google.gwt.regexp.shared.RegExp.compile(pat.toString(), ""g""); java.lang.String orig = asString(); int index = 0; com.google.gwt.regexp.shared.MatchResult mat; while ((mat = re.exec(orig)) != null) { java.lang.String g = mat.getGroup(0); for (com.google.gwtexpui.safehtml.client.SafeHtml.RegExpReplacement repl : repls) { if ((repl.re.exec(g)) != null) { result.append(orig.substring(index, mat.getIndex())); result.append(repl.re.replace(g, repl.repl)); index = (mat.getIndex()) + (g.length()); break; } } } result.append(orig.substring(index, orig.length())); return com.google.gwtexpui.safehtml.client.SafeHtml.asis(result.toString()); }",4614359bb7864276b7651a54ed6d42a4565e3a03,replaceAll(java.util.List),replaceAll(java.util.List),4,4,"public com.google.gwtexpui.safehtml.client.SafeHtml replaceAll(final java.util.List<com.google.gwtexpui.safehtml.client.RegexFindReplace> findReplaceList) { if (findReplaceList == null) { return this; } java.util.List<com.google.gwtexpui.safehtml.client.SafeHtml.RegExpReplacement> repls = new java.util.ArrayList<com.google.gwtexpui.safehtml.client.SafeHtml.RegExpReplacement>(findReplaceList.size()); java.lang.StringBuilder pat = new java.lang.StringBuilder(); java.util.Iterator<com.google.gwtexpui.safehtml.client.RegexFindReplace> it = findReplaceList.iterator(); while (it.hasNext()) { com.google.gwtexpui.safehtml.client.RegexFindReplace fr = it.next(); repls.add(new com.google.gwtexpui.safehtml.client.SafeHtml.RegExpReplacement(fr.find(), fr.replace())); pat.append(fr.find()); if (it.hasNext()) { pat.append('|'); } } java.lang.StringBuilder result = new java.lang.StringBuilder(); com.google.gwt.regexp.shared.RegExp re = com.google.gwt.regexp.shared.RegExp.compile(pat.toString(), ""g""); java.lang.String orig = asString(); int index = 0; com.google.gwt.regexp.shared.MatchResult mat; while ((mat = re.exec(orig)) != null) { java.lang.String g = mat.getGroup(0); for (com.google.gwtexpui.safehtml.client.SafeHtml.RegExpReplacement repl : repls) { if ((repl.re.exec(g)) != null) { result.append(orig.substring(index, mat.getIndex())); result.append(repl.re.replace(g, repl.repl)); index = (mat.getIndex()) + (g.length()); break; } } } result.append(orig.substring(index, orig.length())); return com.google.gwtexpui.safehtml.client.SafeHtml.asis(result.toString()); }",c90c1a8a00597a31174d9b1eca1e11ba4e639378,replaceAll(java.util.List),202119,471,481
47412,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_CodeMirrorDemo.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.Runnable updateActiveLine(final net.codemirror.lib.CodeMirror cm) { final net.codemirror.lib.CodeMirror other = otherCM(cm); return new java.lang.Runnable() { public void run() { if (cm.hasActiveLine()) { cm.removeLineClass(cm.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); cm.removeLineClass(cm.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } if (other.hasActiveLine()) { other.removeLineClass(other.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); other.removeLineClass(other.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } int line = cm.getCursor(""head"").getLine(); int oLine = mapper.lineOnOther((cm == (cmA) ? com.google.gerrit.common.changes.Side.PARENT : com.google.gerrit.common.changes.Side.REVISION), line); cm.setActiveLine(line); other.setActiveLine(oLine); cm.addLineClass(line, LineClassWhere.WRAP, diffTable.style.activeLine()); cm.addLineClass(line, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); other.addLineClass(oLine, LineClassWhere.WRAP, diffTable.style.activeLine()); other.addLineClass(oLine, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } }; }",7640fe2e889649aee052e8b15f89739b9d159a12,,updateActiveLine(net.codemirror.lib.CodeMirror),10,30,"private java.lang.Runnable updateActiveLine(final net.codemirror.lib.CodeMirror cm) { final net.codemirror.lib.CodeMirror other = otherCM(cm); return new java.lang.Runnable() { public void run() { if (cm.hasActiveLine()) { cm.removeLineClass(cm.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); cm.removeLineClass(cm.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } if (other.hasActiveLine()) { other.removeLineClass(other.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); other.removeLineClass(other.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } int line = cm.getCursor(""head"").getLine(); com.google.gerrit.client.diff.LineMapper.LineOnOtherInfo info = mapper.lineOnOther((cm == (cmA) ? com.google.gerrit.common.changes.Side.PARENT : com.google.gerrit.common.changes.Side.REVISION), line); int oLine = info.getLine(); cm.setActiveLine(line); cm.addLineClass(line, LineClassWhere.WRAP, diffTable.style.activeLine()); cm.addLineClass(line, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); if (info.isAligned()) { other.setActiveLine(oLine); other.addLineClass(oLine, LineClassWhere.WRAP, diffTable.style.activeLine()); other.addLineClass(oLine, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } } }; }",d8041b2bf50c31f2c1171a4aed40614c59fa7175,updateActiveLine(net.codemirror.lib.CodeMirror),25308,364,397
70893,gerrit-gpg_src_main_java_com_google_gerrit_gpg_server_PostGpgKeys.java,5.0,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> toJson(java.util.Collection<org.bouncycastle.openpgp.PGPPublicKeyRing> keys, java.util.Set<com.google.gerrit.gpg.Fingerprint> deleted, com.google.gerrit.gpg.PublicKeyStore store) throws java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> infos = com.google.common.collect.Maps.newHashMapWithExpectedSize(((keys.size()) + (deleted.size()))); for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : keys) { com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing, checker, store); infos.put(info.id, info); info.id = null; } for (com.google.gerrit.gpg.Fingerprint fp : deleted) { infos.put(com.google.gerrit.gpg.PublicKeyStore.keyIdToString(fp.getId()), new com.google.gerrit.extensions.common.GpgKeyInfo()); } return infos; }",e25f9d58ef7b50210003f74df10c16d7f97bb047,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> toJson(java.util.Collection<org.bouncycastle.openpgp.PGPPublicKeyRing> keys, java.util.Set<com.google.gerrit.gpg.Fingerprint> deleted, com.google.gerrit.gpg.PublicKeyStore store) throws java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> infos = com.google.common.collect.Maps.newHashMapWithExpectedSize(((keys.size()) + (deleted.size()))); for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : keys) { com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing.getPublicKey(), checker, store); infos.put(info.id, info); info.id = null; } for (com.google.gerrit.gpg.Fingerprint fp : deleted) { infos.put(com.google.gerrit.gpg.PublicKeyStore.keyIdToString(fp.getId()), new com.google.gerrit.extensions.common.GpgKeyInfo()); } return infos; }",70e6319d5cbc6f9192959a039817ac13ddce8e38,"toJson(java.util.Collection,java.util.Set,com.google.gerrit.gpg.PublicKeyStore)","toJson(java.util.Collection,java.util.Set,com.google.gerrit.gpg.PublicKeyStore)",11,4,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> toJson(java.util.Collection<org.bouncycastle.openpgp.PGPPublicKeyRing> keys, java.util.Set<com.google.gerrit.gpg.Fingerprint> deleted, com.google.gerrit.gpg.PublicKeyStore store, com.google.gerrit.server.IdentifiedUser user) throws java.io.IOException { com.google.gerrit.gpg.GerritPublicKeyChecker checker = checkerFactory.create(user); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> infos = com.google.common.collect.Maps.newHashMapWithExpectedSize(((keys.size()) + (deleted.size()))); for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : keys) { org.bouncycastle.openpgp.PGPPublicKey key = keyRing.getPublicKey(); com.google.gerrit.gpg.CheckResult result = checker.check(key, store); com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(key, result); infos.put(info.id, info); info.id = null; } for (com.google.gerrit.gpg.Fingerprint fp : deleted) { infos.put(com.google.gerrit.gpg.PublicKeyStore.keyIdToString(fp.getId()), new com.google.gerrit.extensions.common.GpgKeyInfo()); } return infos; }",93e777c33e15a1b6e6fb022c296c0cdb518ca6ff,"toJson(java.util.Collection,java.util.Set,com.google.gerrit.gpg.PublicKeyStore,com.google.gerrit.server.IdentifiedUser)",105522,302,374
34953,gerrit-server_src_main_java_com_google_gerrit_server_account_GroupDetailFactory.java,1.0,"@java.lang.Override public com.google.gerrit.common.data.GroupDetail call() throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { control = groupControl.validateFor(groupId); final com.google.gerrit.reviewdb.client.AccountGroup group = control.getAccountGroup(); final com.google.gerrit.common.data.GroupDetail detail = new com.google.gerrit.common.data.GroupDetail(); detail.setGroup(group); detail.setOwnerGroup(groupCache.get(group.getOwnerGroupId())); switch (group.getType()) { case INTERNAL : detail.setMembers(loadMembers()); detail.setIncludes(loadIncludes()); break; } detail.setAccounts(aic.create()); detail.setCanModify(control.isOwner()); detail.setGroups(gic.create()); return detail; }",5ff58e29bfc8d46f44f67f2fc81c7097b7b7601a,"@java.lang.Override public com.google.gerrit.common.data.GroupDetail call() throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { control = groupControl.validateFor(groupId); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupId); final com.google.gerrit.common.data.GroupDetail detail = new com.google.gerrit.common.data.GroupDetail(); detail.setGroup(group); detail.setOwnerGroup(groupCache.get(group.getOwnerGroupId())); switch (group.getType()) { case INTERNAL : detail.setMembers(loadMembers()); detail.setIncludes(loadIncludes()); break; } detail.setAccounts(aic.create()); detail.setCanModify(control.isOwner()); detail.setGroups(gic.create()); return detail; }",2697c70c848a1e4984d57a37c8d29e0a62209a98,call(),call(),25,1,"@java.lang.Override public com.google.gerrit.common.data.GroupDetail call() throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { control = groupControl.validateFor(groupId); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupId); final com.google.gerrit.common.data.GroupDetail detail = new com.google.gerrit.common.data.GroupDetail(); detail.setGroup(group); com.google.gerrit.common.data.GroupDescription.Basic ownerGroup = groupBackend.get(group.getOwnerGroupUUID()); if (ownerGroup != null) { detail.setOwnerGroup(com.google.gerrit.common.data.GroupReference.forGroup(ownerGroup)); } switch (group.getType()) { case INTERNAL : detail.setMembers(loadMembers()); detail.setIncludes(loadIncludes()); break; } detail.setAccounts(aic.create()); detail.setCanModify(control.isOwner()); detail.setGroups(gic.create()); return detail; }",26b0ccd34530d1d39808e48be7ae6b7eb27d2f84,call(),76470,205,253
77324,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_MyWatchedProjectsScreen.java,2.0,"protected void doAddNew() { final java.lang.String projectName = nameBox.getText().trim(); if ("""".equals(projectName)) { return; } java.lang.String filter = filterTxt.getText(); if (((filter == null) || (filter.isEmpty())) || (filter.equals(Util.C.defaultFilter()))) { filter = null; } addNew.setEnabled(false); nameBox.setEnabled(false); filterTxt.setEnabled(false); Util.ACCOUNT_SVC.addProjectWatch(projectName, filter, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.common.data.AccountProjectWatchInfo>() { @java.lang.Override public void onSuccess(final com.google.gerrit.common.data.AccountProjectWatchInfo result) { addNew.setEnabled(true); nameBox.setEnabled(true); filterTxt.setEnabled(true); nameBox.setText(""""); watchesTab.insertWatch(result); } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { addNew.setEnabled(true); nameBox.setEnabled(true); filterTxt.setEnabled(true); super.onFailure(caught); } }); }",34bfa120dd4cb030fedaf6d4bb1505cd9e5d491c,"protected void doAddNew() { final java.lang.String projectName = nameBox.getText().trim(); if ("""".equals(projectName)) { return; } java.lang.String filter = filterTxt.getText(); if (((filter == null) || (filter.isEmpty())) || (filter.equals(Util.C.defaultFilter()))) { filter = null; } addNew.setEnabled(false); nameBox.setEnabled(false); filterTxt.setEnabled(false); com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.ProjectWatchInfo> projectWatchInfos = com.google.gwt.core.client.JsArray.createArray().cast(); final com.google.gerrit.client.account.ProjectWatchInfo projectWatchInfo = com.google.gwt.core.client.JavaScriptObject.createObject().cast(); projectWatchInfo.project(projectName); projectWatchInfo.filter(filterTxt.getText()); projectWatchInfos.push(projectWatchInfo); com.google.gerrit.client.account.AccountApi.updateWatchedProjects(""self"", projectWatchInfos, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.ProjectWatchInfo>>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.ProjectWatchInfo> watchedProjects) { addNew.setEnabled(true); nameBox.setEnabled(true); filterTxt.setEnabled(true); nameBox.setText(""""); watchesTab.insertWatch(projectWatchInfo); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { addNew.setEnabled(true); nameBox.setEnabled(true); filterTxt.setEnabled(true); } }); }",650a31439fddda2bb01465c788d458bac15484aa,doAddNew(),doAddNew(),9,4,"protected void doAddNew() { final java.lang.String projectName = nameBox.getText().trim(); if ("""".equals(projectName)) { return; } java.lang.String filter = filterTxt.getText(); if (((filter == null) || (filter.isEmpty())) || (filter.equals(Util.C.defaultFilter()))) { filter = null; } addNew.setEnabled(false); nameBox.setEnabled(false); filterTxt.setEnabled(false); final com.google.gerrit.client.account.ProjectWatchInfo projectWatchInfo = com.google.gwt.core.client.JavaScriptObject.createObject().cast(); projectWatchInfo.project(projectName); projectWatchInfo.filter(filterTxt.getText()); com.google.gerrit.client.account.AccountApi.updateWatchedProject(""self"", projectWatchInfo, new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.ProjectWatchInfo>>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.ProjectWatchInfo> watchedProjects) { addNew.setEnabled(true); nameBox.setEnabled(true); filterTxt.setEnabled(true); nameBox.setText(""""); watchesTab.insertWatch(projectWatchInfo); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { addNew.setEnabled(true); nameBox.setEnabled(true); filterTxt.setEnabled(true); super.onFailure(caught); } }); }",f6741f93da27deecbd80309877a75b4a78c3524c,doAddNew(),159126,406,353
54692,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_DownloadBox.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void insertArchive() { java.lang.String id = revision.substring(0, 7); com.google.gwt.user.client.ui.Anchor archive = new com.google.gwt.user.client.ui.Anchor((id + "".tar.gz"")); archive.setHref(new com.google.gerrit.client.rpc.RestApi(""/changes/"").id(psId.getParentKey().get()).view(""revisions"").id(revision).view(""patch"").addParameterTrue(""archive"").url()); com.google.gwt.user.client.ui.HorizontalPanel p = new com.google.gwt.user.client.ui.HorizontalPanel(); p.add(archive); insertCommand(""Archive"", p); }",a383a43b3c5b61213ff6acaf15449ba0a5d9ff48,,insertArchive(),13,5,"private void insertArchive() { java.util.List<com.google.gwt.user.client.ui.Anchor> formats = new java.util.ArrayList<>(com.google.gerrit.client.change.DownloadBox.ARCHIVE.length); for (java.lang.String f : com.google.gerrit.client.change.DownloadBox.ARCHIVE) { com.google.gwt.user.client.ui.Anchor archive = new com.google.gwt.user.client.ui.Anchor(f); archive.setHref(new com.google.gerrit.client.rpc.RestApi(""/changes/"").id(psId.getParentKey().get()).view(""revisions"").id(revision).view(""archive"").addParameter(""format"", f).url()); formats.add(archive); } com.google.gwt.user.client.ui.HorizontalPanel p = new com.google.gwt.user.client.ui.HorizontalPanel(); java.util.Iterator<com.google.gwt.user.client.ui.Anchor> it = formats.iterator(); while (it.hasNext()) { com.google.gwt.user.client.ui.Anchor a = it.next(); p.add(a); if (it.hasNext()) { com.google.gwt.user.client.ui.InlineLabel spacer = new com.google.gwt.user.client.ui.InlineLabel(""|""); spacer.setStyleName(Gerrit.RESOURCES.css().downloadBoxSpacer()); p.add(spacer); } } insertCommand(""Archive"", p); }",25878aab5917942d6395c890bb9b8ac90bb1871c,insertArchive(),154587,158,341
22194,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_account_GroupAdminServiceImpl.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.google.gwtjsonrpc.client.VoidResult run(final com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.httpd.rpc.account.Failure, com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.AccountGroup group = db.accountGroups().get(groupId); assertAmGroupOwner(db, group); group.setVisibleToAll(visibleToAll); db.accountGroups().update(java.util.Collections.singleton(group)); groupCache.evict(group); return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }",828590b8090dc831457cd737f7415303b9d8cec5,,run(com.google.gerrit.reviewdb.ReviewDb),3,17,"public com.google.gwtjsonrpc.client.VoidResult run(final com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.httpd.rpc.account.Failure, com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.AccountGroup group = db.accountGroups().get(groupId); assertAmGroupOwner(db, group); group.setVisibleToAll(groupOptions.isVisibleToAll()); db.accountGroups().update(java.util.Collections.singleton(group)); groupCache.evict(group); return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }",928e13a56a8635f145fa617d6a63474e5c7f590f,run(com.google.gerrit.reviewdb.ReviewDb),46252,146,149
46890,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_CommentBox.java,,,,private boolean isOpen() { return com.google.gwt.user.client.ui.UIObject.isVisible(contentPanel); },527725f153fc7a0e19b9e53695ce8104e4142672,,isOpen(),19,9,private boolean isOpen() { return getStyleName().contains(style.open()); },69f759c3b94ca0b48e80faf397cb6067a487d1e4,isOpen(),193264,28,18
13210,gerrit-sshd_src_main_java_com_google_gerrit_sshd_SshKeyCacheImpl.java,5.0,public void evict(java.lang.String username) { self.remove(username); },0a1dc59fac46f5f70992e18ddbe16f62396edcae,public void evict(java.lang.String username) { self.remove(username); accountCache.evictByUsername(username); },9dab4732ee3e0297c6cd896657dd5fce1ce95eef,evict(java.lang.String),evict(java.lang.String),2,5,public void evict(java.lang.String username) { self.remove(username); },0a1dc59fac46f5f70992e18ddbe16f62396edcae,evict(java.lang.String),28471,29,20
107257,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_AbstractNotificationTest.java,,,,"protected com.google.gerrit.acceptance.AbstractNotificationTest.Notifications notificationsForReviewableChange(com.google.gerrit.acceptance.AbstractNotificationTest.ChangeInteraction interaction, com.google.gerrit.server.account.WatchConfig.NotifyType... watches) throws java.lang.Exception { com.google.gerrit.acceptance.AbstractNotificationTest.Participants participants = new com.google.gerrit.acceptance.AbstractNotificationTest.Participants(com.google.common.collect.ImmutableList.copyOf(watches)); java.lang.String changeId = participants.stageChange(""refs/for/master"").getChangeId(); sender.clear(); setApiUser(participants.owner); interaction.apply(changeId); try { return new com.google.gerrit.acceptance.AbstractNotificationTest.Notifications(sender, participants); } finally { sender.clear(); } }",5656ca529b750944ac99cc49019831a07c1bc5a9,,"notificationsForReviewableChange(com.google.gerrit.acceptance.AbstractNotificationTest$ChangeInteraction,com.google.gerrit.server.account.WatchConfig.NotifyType[])",24,10,"protected com.google.gerrit.acceptance.AbstractNotificationTest.StagedPreChange stagePreChange(java.lang.String ref, @com.google.gerrit.common.Nullable com.google.gerrit.acceptance.AbstractNotificationTest.PushOptionGenerator pushOptionGenerator, com.google.gerrit.server.account.WatchConfig.NotifyType... watches) throws java.lang.Exception { return new com.google.gerrit.acceptance.AbstractNotificationTest.StagedPreChange(ref, pushOptionGenerator, com.google.common.collect.ImmutableList.copyOf(watches)); }",c0e4df1bcb99b87fee12c6ba94d79fd63c8007e6,"stagePreChange(java.lang.String,com.google.gerrit.acceptance.AbstractNotificationTest$PushOptionGenerator,com.google.gerrit.server.account.WatchConfig.NotifyType[])",14940,195,132
66646,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_AbstractDaemonTest.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,protected java.lang.String getProjectPrefix() { return projectPrefix; },bf006a11d283bb061c43607d0368d2f0fcb9c49a,,getProjectPrefix(),3,26,protected java.lang.String name(java.lang.String name) { return (resourcePrefix) + name; },450e8898ba24e6f21226a1364c9b3ceb53ca91df,name(java.lang.String),202612,16,25
93409,gerrit-server_src_main_java_com_google_gerrit_server_account_ExternalIdsUpdate.java,,,,"public void deleteAll(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { delete(db, externalIdCache.byAccount(accountId)); }",e2733b94ea13169c9eb9ed6ca0d62b524a6328a5,,"deleteAll(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Account$Id)",27,31,"public void deleteAll(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { delete(db, com.google.gerrit.server.account.ExternalId.from(db.accountExternalIds().byAccount(accountId).toList())); }",17903a03c2985fa856843fdafb6236708f61da2d,"deleteAll(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Account$Id)",179270,87,107
35193,gerrit-server_src_main_java_com_google_gerrit_server_plugins_AutoRegisterModules.java,15.0,"private void export(com.google.gerrit.server.plugins.AutoRegisterModules.ClassData def) throws com.google.gerrit.server.plugins.InvalidPluginException { java.lang.Class<?> clazz; try { clazz = java.lang.Class.forName(def.className, false, classLoader); } catch (java.lang.ClassNotFoundException err) { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format(""Cannot load %s with @Export(\""%s\"")"", def.className, def.exportedAsName), err); } com.google.gerrit.extensions.Export export = clazz.getAnnotation(com.google.gerrit.extensions.Export.class); if (export == null) { PluginLoader.log.warn(java.lang.String.format(""In plugin %s asm incorrectly parsed %s with @Export(\""%s\"")"", pluginName, clazz.getName(), def.exportedAsName)); return; } if (com.google.gerrit.server.plugins.PluginGuiceEnvironment.is(""org.apache.sshd.server.Command"", clazz)) { if ((sshGen) != null) { sshGen.export(export, clazz); } } else if (com.google.gerrit.server.plugins.PluginGuiceEnvironment.is(""javax.servlet.http.HttpServlet"", clazz)) { if ((httpGen) != null) { httpGen.export(export, clazz); } } else { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format(""Class %s with @Export(\""%s\"") not supported"", clazz.getName(), export.value())); } }",611fc55a7ef84baba63a4625b72b2bf3608886f6,"private void export(com.google.gerrit.server.plugins.AutoRegisterModules.ClassData def) throws com.google.gerrit.server.plugins.InvalidPluginException { java.lang.Class<?> clazz; try { clazz = java.lang.Class.forName(def.className, false, classLoader); } catch (java.lang.ClassNotFoundException err) { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format(""Cannot load %s with @Export(\""%s\"")"", def.className, def.exportedAsName), err); } com.google.gerrit.extensions.annotations.Export export = clazz.getAnnotation(com.google.gerrit.extensions.annotations.Export.class); if (export == null) { PluginLoader.log.warn(java.lang.String.format(""In plugin %s asm incorrectly parsed %s with @Export(\""%s\"")"", pluginName, clazz.getName(), def.exportedAsName)); return; } if (com.google.gerrit.server.plugins.PluginGuiceEnvironment.is(""org.apache.sshd.server.Command"", clazz)) { if ((sshGen) != null) { sshGen.export(export, clazz); } } else if (com.google.gerrit.server.plugins.PluginGuiceEnvironment.is(""javax.servlet.http.HttpServlet"", clazz)) { if ((httpGen) != null) { httpGen.export(export, clazz); } } else { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format(""Class %s with @Export(\""%s\"") not supported"", clazz.getName(), export.value())); } }",9d4e239439b6a127700f9e6d74ef772fd09d7644,export(com.google.gerrit.server.plugins.AutoRegisterModules$ClassData),export(com.google.gerrit.server.plugins.AutoRegisterModules$ClassData),6,14,"private void export(com.google.gerrit.server.plugins.AutoRegisterModules.ClassData def) throws com.google.gerrit.server.plugins.InvalidPluginException { java.lang.Class<?> clazz; try { clazz = java.lang.Class.forName(def.className, false, classLoader); } catch (java.lang.ClassNotFoundException err) { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format(""Cannot load %s with @Export(\""%s\"")"", def.className, def.exportedAsName), err); } com.google.gerrit.extensions.annotations.Export export = clazz.getAnnotation(com.google.gerrit.extensions.annotations.Export.class); if (export == null) { PluginLoader.log.warn(java.lang.String.format(""In plugin %s asm incorrectly parsed %s with @Export(\""%s\"")"", pluginName, clazz.getName(), def.exportedAsName)); return; } if (com.google.gerrit.server.plugins.PluginGuiceEnvironment.is(""org.apache.sshd.server.Command"", clazz)) { if ((sshGen) != null) { sshGen.export(export, clazz); } } else if (com.google.gerrit.server.plugins.PluginGuiceEnvironment.is(""javax.servlet.http.HttpServlet"", clazz)) { if ((httpGen) != null) { httpGen.export(export, clazz); listen(clazz, clazz); } } else { int cnt = sysListen.size(); listen(clazz, clazz); if (cnt == (sysListen.size())) { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format(""Class %s with @Export(\""%s\"") not supported"", clazz.getName(), export.value())); } } }",1b9f8c4bd8d8586ef0d894b15b0819020b70b3d9,export(com.google.gerrit.server.plugins.AutoRegisterModules$ClassData),135355,377,409
159431,java_com_google_gerrit_server_config_ScheduleConfig.java,4.0,public long getInitialDelay() { return initialDelay; },aa9d2fdedbe6bcc52f3cc990a9af60854523ab71,public long getInitialDelay() { if ((initialDelay) == null) { load(); } return initialDelay; },fec2d34990b9342b5ba4c14240ff2311d8c8ef8a,getInitialDelay(),getInitialDelay(),4,0,"@com.google.auto.value.extension.memoized.Memoized public long initialDelay() { long interval = interval(); if (interval <= 0) { return interval; } return com.google.gerrit.server.config.ScheduleConfig.computeInitialDelay(config(), section(), subsection(), keyStartTime(), now(), interval); }",dd14cd39cd1f9790c0a5e737a336a9812730489a,initialDelay(),138034,24,70
148032,java_com_google_gerrit_server_restapi_project_ListDashboards.java,0.0,"private java.util.Collection<com.google.gerrit.server.project.ProjectState> tree(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.project.ProjectState> tree = new java.util.LinkedHashMap<>(); for (com.google.gerrit.server.project.ProjectState ps : rsrc.getProjectState().tree()) { tree.put(ps.getNameKey(), ps); } tree.keySet().retainAll(permissionBackend.user(user).filter(ProjectPermission.ACCESS, tree.keySet())); return tree.values(); }",8769cd3f539749e16cfdd9ddd50a45294267d598,"private java.util.Collection<com.google.gerrit.server.project.ProjectState> tree(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.project.ProjectState> tree = new java.util.LinkedHashMap<>(); for (com.google.gerrit.server.project.ProjectState ps : rsrc.getProjectState().tree()) { tree.put(ps.getNameKey(), ps); } tree.keySet().retainAll(permissionBackend.user(user).filter(ProjectPermission.ACCESS, tree.keySet())); return tree.values(); }",37164576d629850957c8cf754abddb5a8551bdd8,tree(com.google.gerrit.server.project.ProjectResource),tree(com.google.gerrit.server.restapi.project.ProjectResource),17,0,"private java.util.Collection<com.google.gerrit.server.project.ProjectState> tree(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.project.ProjectState> tree = new java.util.LinkedHashMap<>(); for (com.google.gerrit.server.project.ProjectState ps : rsrc.getProjectState().tree()) { tree.put(ps.getNameKey(), ps); } tree.keySet().retainAll(permissionBackend.user(user).filter(ProjectPermission.ACCESS, tree.keySet())); return tree.values(); }",8769cd3f539749e16cfdd9ddd50a45294267d598,tree(com.google.gerrit.server.project.ProjectResource),216721,174,171
77324,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_ProjectWatchInfo.java,,,,private native final void notifyNewChanges(boolean b);,4193ec31966e608010fb6732d437a581d9cd6429,,notifyNewChanges(boolean),9,14,private native void notifyNewChanges(boolean b);,bee1a8f3ad1e495cf8226f726d5c64efe06812d6,notifyNewChanges(boolean),159102,11,10
68002,src_main_java_com_googlesource_gerrit_plugins_rabbitmq_config_section_Sections.java,4.0,"public static final <T extends com.googlesource.gerrit.plugins.rabbitmq.config.section.Section> T initialize(T section) { java.lang.reflect.Field[] fs = section.getClass().getFields(); for (java.lang.reflect.Field f : fs) { try { if (f.isAnnotationPresent(com.googlesource.gerrit.plugins.rabbitmq.annotation.Default.class)) { com.googlesource.gerrit.plugins.rabbitmq.annotation.Default a = f.getAnnotation(com.googlesource.gerrit.plugins.rabbitmq.annotation.Default.class); java.lang.Class<?> type = f.getType(); if (type == (java.lang.String.class)) { f.set(section, new java.lang.String(a.value())); } else if (type == (java.lang.Integer.class)) { f.set(section, new java.lang.Integer(a.value())); } else if (type == (java.lang.Long.class)) { f.set(section, new java.lang.Long(a.value())); } else if (type == (java.lang.Boolean.class)) { f.set(section, new java.lang.Boolean(a.value())); } } } catch (java.lang.Exception ex) { com.googlesource.gerrit.plugins.rabbitmq.config.section.Sections.LOGGER.warn(""Exception during initialize: {}"", f.getName()); } } return section; }",f1471d0a7dc7645b13b176a9b7224b973696fe84,"public static final <T extends com.googlesource.gerrit.plugins.rabbitmq.config.section.Section> T initialize(T section) { java.lang.reflect.Field[] fs = section.getClass().getFields(); for (java.lang.reflect.Field f : fs) { try { if (f.isAnnotationPresent(com.googlesource.gerrit.plugins.rabbitmq.annotation.Default.class)) { com.googlesource.gerrit.plugins.rabbitmq.annotation.Default a = f.getAnnotation(com.googlesource.gerrit.plugins.rabbitmq.annotation.Default.class); java.lang.Class<?> type = f.getType(); if (type == (java.lang.String.class)) { f.set(section, a.value()); } else if (type == (java.lang.Integer.class)) { f.set(section, a.value()); } else if (type == (java.lang.Long.class)) { f.set(section, a.value()); } else if (type == (java.lang.Boolean.class)) { f.set(section, a.value()); } } } catch (java.lang.Exception ex) { com.googlesource.gerrit.plugins.rabbitmq.config.section.Sections.LOGGER.warn(""Exception during initialize: {}"", f.getName()); } } return section; }",8267d3034d1b74be99229114d1a9f610c52756f2,initialize(com.googlesource.gerrit.plugins.rabbitmq.config.section.Section),initialize(com.googlesource.gerrit.plugins.rabbitmq.config.section.Section),3,4,"public static final <T extends com.googlesource.gerrit.plugins.rabbitmq.config.section.Section> T initialize(T section) { java.lang.reflect.Field[] fs = section.getClass().getFields(); for (java.lang.reflect.Field f : fs) { try { if (f.isAnnotationPresent(com.googlesource.gerrit.plugins.rabbitmq.annotation.Default.class)) { com.googlesource.gerrit.plugins.rabbitmq.annotation.Default a = f.getAnnotation(com.googlesource.gerrit.plugins.rabbitmq.annotation.Default.class); java.lang.Class<?> type = f.getType(); if (type == (java.lang.String.class)) { f.set(section, a.value()); } else if (type == (java.lang.Integer.class)) { f.set(section, java.lang.Integer.valueOf(a.value())); } else if (type == (java.lang.Long.class)) { f.set(section, java.lang.Long.valueOf(a.value())); } else if (type == (java.lang.Boolean.class)) { f.set(section, java.lang.Boolean.valueOf(a.value())); } } } catch (java.lang.Exception ex) { com.googlesource.gerrit.plugins.rabbitmq.config.section.Sections.LOGGER.warn(""Exception during initialize: {}"", f.getName()); } } return section; }",9f9aedcf8c16cf6d106cb46495b433142bda9983,initialize(com.googlesource.gerrit.plugins.rabbitmq.config.section.Section),168386,293,317
67777,gerrit-gwtui_src_main_java_com_google_gerrit_client_config_GitWebInfo.java,,,,"public final java.lang.String toFileHistory(com.google.gerrit.reviewdb.client.Branch.NameKey branch, java.lang.String file) { com.google.gerrit.common.data.ParameterizedString pattern = new com.google.gerrit.common.data.ParameterizedString(type().getFileHistory()); java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<>(); p.put(""project"", encode(branch.getParentKey().get())); p.put(""branch"", encode(branch.get())); p.put(""file"", encode(file)); return (url()) + (pattern.replace(p)); }",651e6e4fe230d7cf2f56a5fa7b901df07282fd0f,,"toFileHistory(com.google.gerrit.reviewdb.client.Branch$NameKey,java.lang.String)",16,8,"public final java.lang.String toFileHistory(com.google.gerrit.reviewdb.client.Branch.NameKey branch, java.lang.String file) { com.google.gerrit.common.data.ParameterizedString pattern = new com.google.gerrit.common.data.ParameterizedString(type().fileHistory()); java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<>(); p.put(""project"", encode(branch.getParentKey().get())); p.put(""branch"", encode(branch.get())); p.put(""file"", encode(file)); return (url()) + (pattern.replace(p)); }",d4134113b9af2e555781d300f3d3c619211c3e65,"toFileHistory(com.google.gerrit.reviewdb.client.Branch$NameKey,java.lang.String)",124340,150,150
120592,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotes.java,42.0,"private static com.google.gerrit.server.notedb.ChangeNotes.Factory.ScanResult scanChangeIds(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.Change.Id> fromPs = com.google.common.collect.ImmutableSet.builder(); com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.Change.Id> fromMeta = com.google.common.collect.ImmutableSet.builder(); for (org.eclipse.jgit.lib.Ref r : repo.getRefDatabase().getRefs(RefNames.REFS_CHANGES).values()) { com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.fromRef(r.getName()); if (id != null) { (r.getName().endsWith(RefNames.META_SUFFIX) ? fromMeta : fromPs).add(id); } } return new com.google.gerrit.server.notedb.AutoValue_ChangeNotes_Factory_ScanResult(fromPs.build(), fromMeta.build()); }",8f5310c66969b9d4aaf86e907e09d01b1ba9b4fb,"static com.google.gerrit.server.notedb.ChangeNotes.Factory.ScanResult scanChangeIds(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.Change.Id> fromPs = com.google.common.collect.ImmutableSet.builder(); com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.Change.Id> fromMeta = com.google.common.collect.ImmutableSet.builder(); for (org.eclipse.jgit.lib.Ref r : repo.getRefDatabase().getRefs(RefNames.REFS_CHANGES).values()) { com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.fromRef(r.getName()); if (id != null) { (r.getName().endsWith(RefNames.META_SUFFIX) ? fromMeta : fromPs).add(id); } } return new com.google.gerrit.server.notedb.AutoValue_ChangeNotes_Factory_ScanResult(fromPs.build(), fromMeta.build()); }",d897180393f068c924737a8f05700d56b18137bd,scanChangeIds(org.eclipse.jgit.lib.Repository),scanChangeIds(org.eclipse.jgit.lib.Repository),4,48,"private static com.google.gerrit.server.notedb.ChangeNotes.Factory.ScanResult scanChangeIds(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.Change.Id> fromPs = com.google.common.collect.ImmutableSet.builder(); com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.Change.Id> fromMeta = com.google.common.collect.ImmutableSet.builder(); for (org.eclipse.jgit.lib.Ref r : repo.getRefDatabase().getRefs(RefNames.REFS_CHANGES).values()) { com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.fromRef(r.getName()); if (id != null) { (r.getName().endsWith(RefNames.META_SUFFIX) ? fromMeta : fromPs).add(id); } } return new com.google.gerrit.server.notedb.AutoValue_ChangeNotes_Factory_ScanResult(fromPs.build(), fromMeta.build()); }",8f5310c66969b9d4aaf86e907e09d01b1ba9b4fb,scanChangeIds(org.eclipse.jgit.lib.Repository),32078,271,272
56477,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DiffTable.java,20.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,boolean isVisibleA() { return aVisible; },2a4adfbd78d2a6189109936e3cd7c87c913d3152,,isVisibleA(),2,7,boolean isVisibleA() { return visibleA; },5dee731cc93f71c0b2a74628485486d77d3b4427,isVisibleA(),94491,11,11
20017,gerrit-server_src_main_java_com_google_gerrit_server_project_ProjectState.java,5.0,public java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> getOwners() { return owners; },393c6d083a6cf07ecc028d5484b32cf7b4eae156,public java.util.Set<com.google.gerrit.reviewdb.AccountGroup.UUID> getOwners() { return owners; },1031347a82936ce790c67db2d03a92d69c364fe5,getOwners(),getOwners(),12,5,public java.util.Set<com.google.gerrit.reviewdb.AccountGroup.UUID> getOwners() { if (((!(localOwners.isEmpty())) || (isSpecialWildProject())) || ((project.getParent()) == null)) { return localOwners; } final com.google.gerrit.server.project.ProjectState parent = projectCache.get(project.getParent()); if (parent != null) { return parent.getOwners(); } return java.util.Collections.emptySet(); },2867b702327704c6988a90023bf3c05efce3d5e3,getOwners(),154775,33,112
35184,gerrit-server_src_main_java_com_google_gerrit_audit_AuditEvent.java,,,,public long elapsed() { return elapsed; },0f6dc01b326d92f512c320d860e8d2282481b476,,elapsed(),19,6,@java.lang.Override public int hashCode() { return uuid.hashCode(); },b67f0f8fa066d727c5ba4a515fd01d49af07c4c5,hashCode(),88199,9,17
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_RebaseAction.java,0.0,"static void call(final com.google.gwt.user.client.ui.Button b, final java.lang.String project, final java.lang.String branch, final com.google.gerrit.reviewdb.client.Change.Id id, final java.lang.String revision, final boolean enabled) { b.setEnabled(false); new com.google.gerrit.client.ui.RebaseDialog(project, branch, id, enabled) { @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.rebase(id.get(), revision, getBase(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { super.onClose(event); b.setEnabled(true); } }.center(); }",ee4b768a58f5ee99ae63afe8ccf8cf00bc78b787,"static void call(final com.google.gwt.user.client.ui.Button b, final com.google.gerrit.reviewdb.client.Project.NameKey project, final java.lang.String branch, final com.google.gerrit.reviewdb.client.Change.Id id, final java.lang.String revision, final boolean enabled) { b.setEnabled(false); new com.google.gerrit.client.ui.RebaseDialog(project, branch, id, enabled) { @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.rebase(id.get(), project.get(), revision, getBase(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id, project)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { super.onClose(event); b.setEnabled(true); } }.center(); }",607f6bc47789d2e5d269ae6da795564f6f32c3de,"call(com.google.gwt.user.client.ui.Button,java.lang.String,java.lang.String,com.google.gerrit.reviewdb.client.Change$Id,java.lang.String,boolean)","call(com.google.gwt.user.client.ui.Button,com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String,com.google.gerrit.reviewdb.client.Change$Id,java.lang.String,boolean)",7,4,"static void call(final com.google.gwt.user.client.ui.Button b, final com.google.gerrit.reviewdb.client.Project.NameKey project, final java.lang.String branch, final com.google.gerrit.reviewdb.client.Change.Id id, final java.lang.String revision, final boolean enabled) { b.setEnabled(false); new com.google.gerrit.client.ui.RebaseDialog(project, branch, id, enabled) { @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.rebase(project.get(), id.get(), revision, getBase(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, id)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { super.onClose(event); b.setEnabled(true); } }.center(); }",22d4882f411af9be8d8d24af8263fcd4a3ca5b1d,"call(com.google.gwt.user.client.ui.Button,com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String,com.google.gerrit.reviewdb.client.Change$Id,java.lang.String,boolean)",210742,347,347
21458,gerrit-server_src_main_java_com_google_gerrit_server_config_AuthConfig.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.lang.Boolean getCookieSecure() { return cookieSecure; },a2d5d236264907f828e9fb8c9bbe654049db25db,,getCookieSecure(),2,4,public boolean getCookieSecure() { return cookieSecure; },3de611db9afc1c85a3d54df94ea99ffacfa2f49e,getCookieSecure(),16320,16,12
87594,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Assignee.java,10.0,"void set(com.google.gerrit.client.info.ChangeInfo info) { this.changeId = info.legacyId(); this.currentAssignee = ((info.assignee()) != null) ? info.assignee().name() : """"; assigneeLink.setText(currentAssignee); assigneeSuggestOracle.setChange(changeId); editAssigneeIcon.setVisible(com.google.gerrit.client.Gerrit.isSignedIn()); }",82b426a8ab273af7a88189412b1841aa709f83ab,"void set(com.google.gerrit.client.info.ChangeInfo info) { this.changeId = info.legacyId(); this.canEdit = (info.hasActions()) && (info.actions().containsKey(""topic"")); this.currentAssignee = ((info.assignee()) != null) ? info.assignee().name() : """"; assigneeLink.setText(currentAssignee); assigneeSuggestOracle.setChange(changeId); editAssigneeIcon.setVisible(canEdit); }",aa26e4a27b268c61304fb8589ea3305256616d0e,set(com.google.gerrit.client.info.ChangeInfo),set(com.google.gerrit.client.info.ChangeInfo),3,10,"void set(com.google.gerrit.client.info.ChangeInfo info) { this.changeId = info.legacyId(); this.canEdit = (info.hasActions()) && (info.actions().containsKey(""assignee"")); assigneeLink.setText(((info.assignee()) != null ? info.assignee().name() : """")); assigneeSuggestOracle.setChange(changeId); editAssigneeIcon.setVisible(canEdit); }",3da0867fb1acc3a9d669190b8888c16797f98896,set(com.google.gerrit.client.info.ChangeInfo),142685,109,97
87093,gerrit-server_src_main_java_com_google_gerrit_server_change_ListRevisionDrafts.java,0.0,public java.util.List<com.google.gerrit.extensions.common.CommentInfo> getComments(com.google.gerrit.server.change.RevisionResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().setFillAccounts(includeAuthorInfo()).formatAsList(listComments(rsrc)); },bc389f241b6cabfea9f2ba8878a754f4cc0afa71,public java.util.List<com.google.gerrit.extensions.common.CommentInfo> getComments(com.google.gerrit.server.change.RevisionResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().setFillAccounts(includeAuthorInfo()).formatCommentsAsList(listComments(rsrc)); },077d4a83187ef9e7213fa8dbafacaf75fc4f1191,getComments(com.google.gerrit.server.change.RevisionResource),getComments(com.google.gerrit.server.change.RevisionResource),12,0,public java.util.List<com.google.gerrit.extensions.common.CommentInfo> getComments(com.google.gerrit.server.change.RevisionResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().setFillAccounts(includeAuthorInfo()).newCommentFormatter().formatAsList(listComments(rsrc)); },b7a87ef975b1e12cab2520e2c33ca3bfaec7977b,getComments(com.google.gerrit.server.change.RevisionResource),56236,79,82
73470,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeQueryBuilder.java,65.0,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> draftby(java.lang.String who) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = parseAccount(who); java.util.List<com.google.gerrit.server.query.change.HasDraftByPredicate> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { p.add(new com.google.gerrit.server.query.change.HasDraftByPredicate(args, id)); } return com.google.gerrit.server.query.Predicate.or(p); }",17dba1f866ee8090270211efda16db505a939550,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> draftby(java.lang.String who) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = parseAccount(who); java.util.List<com.google.gerrit.server.query.change.HasDraftByPredicate> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { p.add(new com.google.gerrit.server.query.change.HasDraftByPredicate(id)); } return com.google.gerrit.server.query.Predicate.or(p); }",69672e6f735cd7be3f9c6a88166b56e220ebae3e,draftby(java.lang.String),draftby(java.lang.String),3,66,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> draftby(java.lang.String who) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = parseAccount(who); java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { p.add(draftby(id)); } return com.google.gerrit.server.query.Predicate.or(p); }",6058fb498182fa36b6fdb6437019e7b6acc7a985,draftby(java.lang.String),50885,227,222
93409,gerrit-server_src_main_java_com_google_gerrit_server_account_ExternalIdsBatchUpdate.java,,,,"public void commit(com.google.gerrit.reviewdb.server.ReviewDb db, java.lang.String commitMessage) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((toDelete.isEmpty()) && (toAdd.isEmpty())) { return; } db.accountExternalIds().delete(com.google.gerrit.server.account.ExternalIdsUpdate.toAccountExternalIds(toDelete)); db.accountExternalIds().insert(com.google.gerrit.server.account.ExternalIdsUpdate.toAccountExternalIds(toAdd)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectInserter ins = repo.newObjectInserter()) { org.eclipse.jgit.lib.ObjectId rev = com.google.gerrit.server.account.ExternalIds.readRevision(repo); org.eclipse.jgit.notes.NoteMap noteMap = com.google.gerrit.server.account.ExternalIds.readNoteMap(rw, rev); for (com.google.gerrit.server.account.ExternalId extId : toDelete) { com.google.gerrit.server.account.ExternalIdsUpdate.remove(rw, noteMap, extId); } for (com.google.gerrit.server.account.ExternalId extId : toAdd) { com.google.gerrit.server.account.ExternalIdsUpdate.insert(ins, noteMap, extId); } com.google.gerrit.server.account.ExternalIdsUpdate.commit(repo, rw, ins, rev, noteMap, commitMessage, serverIdent, serverIdent); } toAdd.clear(); toDelete.clear(); }",e6d757e9e9c9ffa33432ae43e5e81016dc8eb1ce,,"commit(com.google.gerrit.reviewdb.server.ReviewDb,java.lang.String)",27,1,"public void commit(com.google.gerrit.reviewdb.server.ReviewDb db, java.lang.String commitMessage) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((toDelete.isEmpty()) && (toAdd.isEmpty())) { return; } db.accountExternalIds().delete(com.google.gerrit.server.account.ExternalId.toAccountExternalIds(toDelete)); db.accountExternalIds().insert(com.google.gerrit.server.account.ExternalId.toAccountExternalIds(toAdd)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectInserter ins = repo.newObjectInserter()) { org.eclipse.jgit.lib.ObjectId rev = com.google.gerrit.server.account.ExternalIds.readRevision(repo); org.eclipse.jgit.notes.NoteMap noteMap = com.google.gerrit.server.account.ExternalIds.readNoteMap(rw, rev); for (com.google.gerrit.server.account.ExternalId extId : toDelete) { com.google.gerrit.server.account.ExternalIdsUpdate.remove(rw, noteMap, extId); } for (com.google.gerrit.server.account.ExternalId extId : toAdd) { com.google.gerrit.server.account.ExternalIdsUpdate.insert(rw, ins, noteMap, extId); } com.google.gerrit.server.account.ExternalIdsUpdate.commit(repo, rw, ins, rev, noteMap, commitMessage, serverIdent, serverIdent); } toAdd.clear(); toDelete.clear(); }",ba8f295d6b5884996fc126ec9c40a0370b070ec6,"commit(com.google.gerrit.reviewdb.server.ReviewDb,java.lang.String)",179311,435,436
59909,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectInfoScreen.java,22.0,"private void doSave() { enableForm(false); saveProject.setEnabled(false); com.google.gerrit.client.projects.ProjectApi.setConfig(getProjectKey(), descTxt.getText().trim(), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(contributorAgreements), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(contentMerge), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(signedOffBy), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(requireChangeID), maxObjectSizeLimit.getText().trim(), com.google.gerrit.extensions.common.SubmitType.valueOf(submitType.getValue(submitType.getSelectedIndex())), com.google.gerrit.extensions.api.projects.ProjectState.valueOf(state.getValue(state.getSelectedIndex())), getPluginConfigValues(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.projects.ConfigInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ConfigInfo result) { enableForm(); display(result); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableForm(); super.onFailure(caught); } }); }",5b76235905ca6ae7072864be2756fa04e88223a4,"private void doSave() { enableForm(false); saveProject.setEnabled(false); com.google.gerrit.client.projects.ProjectApi.setConfig(getProjectKey(), descTxt.getText().trim(), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(contributorAgreements), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(contentMerge), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(signedOffBy), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(autoBase), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(requireChangeID), maxObjectSizeLimit.getText().trim(), com.google.gerrit.extensions.common.SubmitType.valueOf(submitType.getValue(submitType.getSelectedIndex())), com.google.gerrit.extensions.api.projects.ProjectState.valueOf(state.getValue(state.getSelectedIndex())), getPluginConfigValues(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.projects.ConfigInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ConfigInfo result) { enableForm(); display(result); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableForm(); super.onFailure(caught); } }); }",38b886db287b27a2ed011f2d19a3bb0d30851f87,doSave(),doSave(),14,22,"private void doSave() { enableForm(false); saveProject.setEnabled(false); com.google.gerrit.client.projects.ProjectApi.setConfig(getProjectKey(), descTxt.getText().trim(), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(contributorAgreements), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(contentMerge), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(signedOffBy), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(newChangeForAllNotInTarget), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(requireChangeID), maxObjectSizeLimit.getText().trim(), com.google.gerrit.extensions.common.SubmitType.valueOf(submitType.getValue(submitType.getSelectedIndex())), com.google.gerrit.extensions.api.projects.ProjectState.valueOf(state.getValue(state.getSelectedIndex())), getPluginConfigValues(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.projects.ConfigInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ConfigInfo result) { enableForm(); display(result); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableForm(); super.onFailure(caught); } }); }",f592980f88eb13205885e57ddb8226a314816d62,doSave(),87607,316,320
122310,gerrit-server_src_main_java_com_google_gerrit_server_change_Abandon.java,0.0,"@java.lang.Override protected com.google.gerrit.extensions.common.ChangeInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource req, com.google.gerrit.extensions.api.changes.AbandonInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { req.permissions().database(dbProvider).check(ChangePermission.ABANDON); com.google.gerrit.extensions.api.changes.NotifyHandling notify = ((input.notify) == null) ? defaultNotify(req.getControl()) : input.notify; com.google.gerrit.reviewdb.client.Change change = abandon(updateFactory, req.getControl(), input.message, notify, notifyUtil.resolveAccounts(input.notifyDetails)); return json.noOptions().format(change); }",c85887b85a7dc5055b1ce9ffc75a88e494c6e091,"@java.lang.Override protected com.google.gerrit.extensions.common.ChangeInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource req, com.google.gerrit.extensions.api.changes.AbandonInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { req.permissions().database(dbProvider).check(ChangePermission.ABANDON); com.google.gerrit.extensions.api.changes.NotifyHandling notify = ((input.notify) == null) ? defaultNotify(req.getChange()) : input.notify; com.google.gerrit.reviewdb.client.Change change = abandon(updateFactory, req.getControl(), input.message, notify, notifyUtil.resolveAccounts(input.notifyDetails)); return json.noOptions().format(change); }",7a5bd8f5ab5177228d8d2efdb6c5b180d97f01a4,"applyImpl(com.google.gerrit.server.update.BatchUpdate$Factory,com.google.gerrit.server.change.ChangeResource,com.google.gerrit.extensions.api.changes.AbandonInput)","applyImpl(com.google.gerrit.server.update.BatchUpdate$Factory,com.google.gerrit.server.change.ChangeResource,com.google.gerrit.extensions.api.changes.AbandonInput)",4,0,"@java.lang.Override protected com.google.gerrit.extensions.common.ChangeInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource req, com.google.gerrit.extensions.api.changes.AbandonInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { req.permissions().database(dbProvider).check(ChangePermission.ABANDON); com.google.gerrit.extensions.api.changes.NotifyHandling notify = ((input.notify) == null) ? defaultNotify(req.getChange()) : input.notify; com.google.gerrit.reviewdb.client.Change change = abandon(updateFactory, req.getNotes(), req.getUser(), input.message, notify, notifyUtil.resolveAccounts(input.notifyDetails)); return json.noOptions().format(change); }",759035c28e92a4f1c961f42fb5bef91506ea77eb,"applyImpl(com.google.gerrit.server.update.BatchUpdate$Factory,com.google.gerrit.server.change.ChangeResource,com.google.gerrit.extensions.api.changes.AbandonInput)",153948,266,271
57522,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_FlushCaches.java,1.0,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { if (list) { if ((all) || ((caches.size()) > 0)) { throw com.google.gerrit.sshd.commands.FlushCaches.error(""error: cannot use --list with --all or --cache""); } doList(); return; } if ((all) && ((caches.size()) > 0)) { throw com.google.gerrit.sshd.commands.FlushCaches.error(""error: cannot combine --all and --cache""); } else if (((!(all)) && ((caches.size()) == 1)) && (caches.contains(""all""))) { caches.clear(); all = true; } else if ((!(all)) && (caches.isEmpty())) { all = true; } if (all) { postCaches.get().apply(new com.google.gerrit.server.config.ConfigResource(), new com.google.gerrit.server.config.PostCaches.Input(FLUSH_ALL)); } else { java.util.List<java.lang.String> names = cacheNames(); for (java.lang.String n : caches) { if (!(names.contains(n))) { throw com.google.gerrit.sshd.commands.FlushCaches.error(((""error: cache \"""" + n) + ""\"" not recognized"")); } } doBulkFlush(); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }",d80f6499a09d32a048e66c2e3e8ed474deae483c,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { if (list) { if ((all) || ((caches.size()) > 0)) { throw com.google.gerrit.sshd.commands.FlushCaches.error(""error: cannot use --list with --all or --cache""); } doList(); return; } if ((all) && ((caches.size()) > 0)) { throw com.google.gerrit.sshd.commands.FlushCaches.error(""error: cannot combine --all and --cache""); } else if (((!(all)) && ((caches.size()) == 1)) && (caches.contains(""all""))) { caches.clear(); all = true; } else if ((!(all)) && (caches.isEmpty())) { all = true; } if (all) { postCaches.get().apply(new com.google.gerrit.server.config.ConfigResource(), new com.google.gerrit.server.config.PostCaches.Input(FLUSH_ALL)); } else { postCaches.get().apply(new com.google.gerrit.server.config.ConfigResource(), new com.google.gerrit.server.config.PostCaches.Input(FLUSH, caches)); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }",6236d7cab2bcdc9aa6ffa83e3071fc3dad08ac31,run(),run(),9,1,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { if (list) { if ((all) || ((caches.size()) > 0)) { throw com.google.gerrit.sshd.commands.FlushCaches.error(""error: cannot use --list with --all or --cache""); } doList(); return; } if ((all) && ((caches.size()) > 0)) { throw com.google.gerrit.sshd.commands.FlushCaches.error(""error: cannot combine --all and --cache""); } else if (((!(all)) && ((caches.size()) == 1)) && (caches.contains(""all""))) { caches.clear(); all = true; } else if ((!(all)) && (caches.isEmpty())) { all = true; } if (all) { postCaches.apply(new com.google.gerrit.server.config.ConfigResource(), new com.google.gerrit.server.config.PostCaches.Input(FLUSH_ALL)); } else { postCaches.apply(new com.google.gerrit.server.config.ConfigResource(), new com.google.gerrit.server.config.PostCaches.Input(FLUSH, caches)); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }",ddb6a42c1107b96558d3f58bae77759f3263397f,run(),16438,320,316
80930,gerrit-server_src_main_java_com_google_gerrit_server_change_DeleteDraftPatchSet.java,3.0,"private void deleteDraftPatchSet(com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { psUtil.delete(ctx.getDb(), ctx.getUpdate(patchSet.getId()), patchSet); accountPatchReviewStore.get().clearReviewed(psId); com.google.gerrit.reviewdb.server.ReviewDb db = com.google.gerrit.server.change.DeleteDraftChangeOp.unwrap(ctx.getDb()); db.changeMessages().delete(db.changeMessages().byPatchSet(psId)); db.patchComments().delete(db.patchComments().byPatchSet(psId)); db.patchSetApprovals().delete(db.patchSetApprovals().byPatchSet(psId)); }",5baa192831c4f35bb08591ba4a04a52ec3488093,"private void deleteDraftPatchSet(com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { psUtil.delete(ctx.getDb(), ctx.getUpdate(patchSet.getId()), patchSet); accountPatchReviewStore.get().clearReviewed(psId); if (com.google.gerrit.server.notedb.NoteDbChangeState.PrimaryStorage.of(ctx.getChange()).writeToReviewDb()) { com.google.gerrit.reviewdb.server.ReviewDb db = com.google.gerrit.server.change.DeleteDraftChangeOp.unwrap(ctx.getDb()); db.changeMessages().delete(db.changeMessages().byPatchSet(psId)); db.patchComments().delete(db.patchComments().byPatchSet(psId)); db.patchSetApprovals().delete(db.patchSetApprovals().byPatchSet(psId)); } }",6b9924708e733659bf24cba4445edeb25229a8ee,"deleteDraftPatchSet(com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.server.git.BatchUpdate.ChangeContext)","deleteDraftPatchSet(com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.server.git.BatchUpdate.ChangeContext)",8,3,"private void deleteDraftPatchSet(com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { psUtil.delete(ctx.getDb(), ctx.getUpdate(patchSet.getId()), patchSet); accountPatchReviewStore.get().clearReviewed(psId); if ((com.google.gerrit.server.notedb.NoteDbChangeState.PrimaryStorage.of(ctx.getChange())) == (REVIEW_DB)) { com.google.gerrit.reviewdb.server.ReviewDb db = com.google.gerrit.server.change.DeleteChangeOp.unwrap(ctx.getDb()); db.changeMessages().delete(db.changeMessages().byPatchSet(psId)); db.patchComments().delete(db.patchComments().byPatchSet(psId)); db.patchSetApprovals().delete(db.patchSetApprovals().byPatchSet(psId)); } }",3965571cd6ff1bff5e3f4c54e412149fc5fe2347,"deleteDraftPatchSet(com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.server.git.BatchUpdate.ChangeContext)",157855,231,232
97813,gerrit-server_src_main_java_com_google_gerrit_server_change_Submit.java,7.0,"private com.google.gerrit.server.change.RevisionResource onBehalfOf(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.api.changes.SubmitInput in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.project.ChangeControl caller = rsrc.getControl(); if (!(caller.canSubmit())) { throw new com.google.gerrit.extensions.restapi.AuthException(""submit not permitted""); } if (!(caller.canSubmitAs())) { throw new com.google.gerrit.extensions.restapi.AuthException(""submit on behalf of not permitted""); } com.google.gerrit.server.project.ChangeControl target = caller.forUser(accounts.parseOnBehalfOf(caller.getUser(), in.onBehalfOf)); if (!(target.getRefControl().isVisible())) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""on_behalf_of account %s cannot see destination ref"", target.getUser().getAccountId())); } return new com.google.gerrit.server.change.RevisionResource(changes.parse(target), rsrc.getPatchSet()); }",00cd31d0cb1415e4de4cf7a107355f4b4f17529e,"private com.google.gerrit.server.IdentifiedUser onBehalfOf(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.api.changes.SubmitInput in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions(); perm.check(ChangePermission.SUBMIT); perm.check(ChangePermission.SUBMIT_AS); com.google.gerrit.server.CurrentUser caller = rsrc.getUser(); com.google.gerrit.server.IdentifiedUser submitter = accounts.parseOnBehalfOf(caller, in.onBehalfOf); try { perm.user(submitter).check(ChangePermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""on_behalf_of account %s cannot see change"", submitter.getAccountId())); } return submitter; }",1bd52db27919238672a703a7be3beef182dc337e,"onBehalfOf(com.google.gerrit.server.change.RevisionResource,com.google.gerrit.extensions.api.changes.SubmitInput)","onBehalfOf(com.google.gerrit.server.change.RevisionResource,com.google.gerrit.extensions.api.changes.SubmitInput)",15,7,"private com.google.gerrit.server.IdentifiedUser onBehalfOf(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.api.changes.SubmitInput in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions().database(dbProvider); perm.check(ChangePermission.SUBMIT); perm.check(ChangePermission.SUBMIT_AS); com.google.gerrit.server.CurrentUser caller = rsrc.getUser(); com.google.gerrit.server.IdentifiedUser submitter = accounts.parseOnBehalfOf(caller, in.onBehalfOf); try { perm.user(submitter).check(ChangePermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""on_behalf_of account %s cannot see change"", submitter.getAccountId())); } return submitter; }",ef8636477817c87e2372bc2ee23f766a81c7e4a3,"onBehalfOf(com.google.gerrit.server.change.RevisionResource,com.google.gerrit.extensions.api.changes.SubmitInput)",10752,294,299
87439,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Assignee.java,11.0,"private void editAssignee(final java.lang.String assignee) { if (assignee.isEmpty()) { com.google.gerrit.client.changes.ChangeApi.deleteAssignee(changeId.get(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); assigneeLink.setText(""""); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } else { com.google.gerrit.client.changes.ChangeApi.setAssignee(changeId.get(), assignee, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); assigneeLink.setText(result.name()); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } }",bbd9f29d5ffddca89dd621d14aa23681484d7f5b,"private void editAssignee(final java.lang.String assignee) { if (assignee.isEmpty()) { com.google.gerrit.client.changes.ChangeApi.deleteAssignee(changeId.get(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); assigneeLink.setText(""""); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } else { com.google.gerrit.client.changes.ChangeApi.setAssignee(changeId.get(), assignee, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); assigneeLink.setText(getName(result)); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } }",1f26df6f3e0810f0eeb08c59f2a90f94c00ad31f,editAssignee(java.lang.String),editAssignee(java.lang.String),7,14,"private void editAssignee(final java.lang.String assignee) { if (assignee.isEmpty()) { com.google.gerrit.client.changes.ChangeApi.deleteAssignee(changeId.get(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); setAssignee(null); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } else { com.google.gerrit.client.changes.ChangeApi.setAssignee(changeId.get(), assignee, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); setAssignee(result); com.google.gerrit.client.change.Reviewers reviewers = getReviewers(); if (reviewers != null) { reviewers.updateReviewerList(); } } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } }",d7464c5886dc6011cbf403f04aef8a673fc4f790,editAssignee(java.lang.String),28574,474,508
119050,src_main_java_com_googlesource_gerrit_plugins_supermanifest_JiriProjects.java,,,,"public java.lang.String toSubmodules() { java.lang.StringBuffer buf = new java.lang.StringBuffer(); sortByPath(); for (com.googlesource.gerrit.plugins.supermanifest.Project p : projects) { buf.append(p.toSubmodules()); buf.append(""\n""); } return buf.toString(); }",ebee2dfec5bd0155a53613ebab73380f4521cd69,,toSubmodules(),7,2,"public java.lang.String toSubmodules() { java.lang.StringBuffer buf = new java.lang.StringBuffer(); sortByPath(); for (com.googlesource.gerrit.plugins.supermanifest.JiriProjects.Project p : projects) { buf.append(p.toSubmodules()); buf.append(""\n""); } return buf.toString(); }",72d4bb5b22589a4da07a2107e28b5d2643928063,toSubmodules(),170029,73,78
71764,gerrit-gpg_src_main_java_com_google_gerrit_gpg_PublicKeyChecker.java,6.0,"private void checkRevocations(org.bouncycastle.openpgp.PGPPublicKey key, java.util.List<org.bouncycastle.openpgp.PGPSignature> revocations, java.util.Map<java.lang.Long, org.bouncycastle.bcpg.sig.RevocationKey> revokers, java.util.List<java.lang.String> problems) throws java.io.IOException, org.bouncycastle.openpgp.PGPException { for (org.bouncycastle.openpgp.PGPSignature revocation : revocations) { org.bouncycastle.bcpg.sig.RevocationKey revoker = revokers.get(revocation.getKeyID()); if (revoker == null) { continue; } org.bouncycastle.openpgp.PGPPublicKeyRing rkr = store.get(revoker.getFingerprint()); if ((rkr == null) || ((rkr.getPublicKey().getAlgorithm()) != (revoker.getAlgorithm()))) { continue; } revocation.init(new org.bouncycastle.openpgp.operator.bc.BcPGPContentVerifierBuilderProvider(), rkr.getPublicKey()); if (revocation.verifyCertification(key)) { problems.add(com.google.gerrit.gpg.PublicKeyChecker.reasonToString(com.google.gerrit.gpg.PublicKeyChecker.getRevocationReason(revocation))); } } }",effc95c340aef93f51ffb6f10782ad321d89e2ef,"private void checkRevocations(org.bouncycastle.openpgp.PGPPublicKey key, java.util.List<org.bouncycastle.openpgp.PGPSignature> revocations, java.util.Map<java.lang.Long, org.bouncycastle.bcpg.sig.RevocationKey> revokers, java.util.List<java.lang.String> problems) throws java.io.IOException, org.bouncycastle.openpgp.PGPException { for (org.bouncycastle.openpgp.PGPSignature revocation : revocations) { org.bouncycastle.bcpg.sig.RevocationKey revoker = revokers.get(revocation.getKeyID()); if (revoker == null) { continue; } org.bouncycastle.openpgp.PGPPublicKeyRing revokerKeyRing = store.get(revoker.getFingerprint()); if (revokerKeyRing == null) { continue; } org.bouncycastle.openpgp.PGPPublicKey rk = revokerKeyRing.getPublicKey(); if ((rk.getAlgorithm()) != (revoker.getAlgorithm())) { continue; } if (!(checkBasic(rk, revocation.getCreationTime()).isOk())) { continue; } revocation.init(new org.bouncycastle.openpgp.operator.bc.BcPGPContentVerifierBuilderProvider(), rk); if (revocation.verifyCertification(key)) { problems.add(com.google.gerrit.gpg.PublicKeyChecker.reasonToString(com.google.gerrit.gpg.PublicKeyChecker.getRevocationReason(revocation))); } } }",e49d7a12795776ef3636dac761e497253ceef80a,"checkRevocations(org.bouncycastle.openpgp.PGPPublicKey,java.util.List,java.util.Map,java.util.List)","checkRevocations(org.bouncycastle.openpgp.PGPPublicKey,java.util.List,java.util.Map,java.util.List)",5,4,"private void checkRevocations(org.bouncycastle.openpgp.PGPPublicKey key, java.util.List<org.bouncycastle.openpgp.PGPSignature> revocations, java.util.Map<java.lang.Long, org.bouncycastle.bcpg.sig.RevocationKey> revokers, java.util.List<java.lang.String> problems) throws java.io.IOException, org.bouncycastle.openpgp.PGPException { for (org.bouncycastle.openpgp.PGPSignature revocation : revocations) { org.bouncycastle.bcpg.sig.RevocationKey revoker = revokers.get(revocation.getKeyID()); if (revoker == null) { continue; } byte[] rfp = revoker.getFingerprint(); org.bouncycastle.openpgp.PGPPublicKeyRing revokerKeyRing = store.get(rfp); if (revokerKeyRing == null) { com.google.gerrit.gpg.PublicKeyChecker.log.info(((((""Key "" + (com.google.gerrit.gpg.Fingerprint.toString(key.getFingerprint()))) + "" is revoked by "") + (com.google.gerrit.gpg.Fingerprint.toString(rfp))) + "", which is not in the store. Assuming revocation is valid."")); problems.add(com.google.gerrit.gpg.PublicKeyChecker.reasonToString(com.google.gerrit.gpg.PublicKeyChecker.getRevocationReason(revocation))); continue; } org.bouncycastle.openpgp.PGPPublicKey rk = revokerKeyRing.getPublicKey(); if ((rk.getAlgorithm()) != (revoker.getAlgorithm())) { continue; } if (!(checkBasic(rk, revocation.getCreationTime()).isOk())) { continue; } revocation.init(new org.bouncycastle.openpgp.operator.bc.BcPGPContentVerifierBuilderProvider(), rk); if (revocation.verifyCertification(key)) { problems.add(com.google.gerrit.gpg.PublicKeyChecker.reasonToString(com.google.gerrit.gpg.PublicKeyChecker.getRevocationReason(revocation))); } } }",1daa24cf9b99cbfc6a025b02b04849c1a44bfe09,"checkRevocations(org.bouncycastle.openpgp.PGPPublicKey,java.util.List,java.util.Map,java.util.List)",8260,345,481
68604,gerrit-httpd_src_main_java_com_google_gerrit_httpd_auth_become_BecomeAnyAccountLoginServlet.java,1.0,"@java.lang.Override protected void doPost(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException, javax.servlet.ServletException { com.google.gwtexpui.server.CacheHeaders.setNotCacheable(rsp); final com.google.gerrit.server.account.AuthResult res; if (""create_account"".equals(req.getParameter(""action""))) { res = create(); } else if ((req.getParameter(""user_name"")) != null) { res = byUserName(req.getParameter(""user_name"")); } else if ((req.getParameter(""preferred_email"")) != null) { res = byPreferredEmail(req.getParameter(""preferred_email"")); } else if ((req.getParameter(""account_id"")) != null) { res = byAccountId(req.getParameter(""account_id"")); } else { byte[] raw; try { raw = prepareHtmlOutput(); } catch (com.google.gwtorm.server.OrmException e) { throw new javax.servlet.ServletException(e); } rsp.setContentType(""text/html""); rsp.setCharacterEncoding(HtmlDomUtil.ENC.name()); rsp.setContentLength(raw.length); final java.io.OutputStream out = rsp.getOutputStream(); try { out.write(raw); } finally { out.close(); } return; } if (res != null) { webSession.get().login(res, false); final java.lang.StringBuilder rdr = new java.lang.StringBuilder(); rdr.append(req.getContextPath()); rdr.append(""/""); if (res.isNew()) { rdr.append(('#' + (com.google.gerrit.common.PageLinks.REGISTER))); } else { rdr.append(com.google.gerrit.httpd.LoginUrlToken.getToken(req)); } rsp.sendRedirect(rdr.toString()); } else { rsp.setContentType(""text/html""); rsp.setCharacterEncoding(HtmlDomUtil.ENC.name()); final java.io.Writer out = rsp.getWriter(); out.write(""<html>""); out.write(""<body>""); out.write(""<h1>Account Not Found</h1>""); out.write(""</body>""); out.write(""</html>""); out.close(); } }",695486af07d6d39f9d9f67a071a750e7d8139d79,"@java.lang.Override protected void doPost(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException, javax.servlet.ServletException { com.google.gwtexpui.server.CacheHeaders.setNotCacheable(rsp); final com.google.gerrit.server.account.AuthResult res; if (""create_account"".equals(req.getParameter(""action""))) { res = create(); } else if ((req.getParameter(""user_name"")) != null) { res = byUserName(req.getParameter(""user_name"")); } else if ((req.getParameter(""preferred_email"")) != null) { res = byPreferredEmail(req.getParameter(""preferred_email"")); } else if ((req.getParameter(""account_id"")) != null) { res = byAccountId(req.getParameter(""account_id"")); } else { byte[] raw; try { raw = prepareHtmlOutput(); } catch (com.google.gwtorm.server.OrmException e) { throw new javax.servlet.ServletException(e); } rsp.setContentType(""text/html""); rsp.setCharacterEncoding(HtmlDomUtil.ENC.name()); rsp.setContentLength(raw.length); try (java.io.OutputStream out = rsp.getOutputStream()) { out.write(raw); } return; } if (res != null) { webSession.get().login(res, false); final java.lang.StringBuilder rdr = new java.lang.StringBuilder(); rdr.append(req.getContextPath()); rdr.append(""/""); if (res.isNew()) { rdr.append(('#' + (com.google.gerrit.common.PageLinks.REGISTER))); } else { rdr.append(com.google.gerrit.httpd.LoginUrlToken.getToken(req)); } rsp.sendRedirect(rdr.toString()); } else { rsp.setContentType(""text/html""); rsp.setCharacterEncoding(HtmlDomUtil.ENC.name()); final java.io.Writer out = rsp.getWriter(); out.write(""<html>""); out.write(""<body>""); out.write(""<h1>Account Not Found</h1>""); out.write(""</body>""); out.write(""</html>""); out.close(); } }",0de0121d6ce1f43bb6e44674f948b44c1a901a0c,"doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)","doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",5,1,"@java.lang.Override protected void doPost(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException, javax.servlet.ServletException { com.google.gwtexpui.server.CacheHeaders.setNotCacheable(rsp); final com.google.gerrit.server.account.AuthResult res; if (""create_account"".equals(req.getParameter(""action""))) { res = create(); } else if ((req.getParameter(""user_name"")) != null) { res = byUserName(req.getParameter(""user_name"")); } else if ((req.getParameter(""preferred_email"")) != null) { res = byPreferredEmail(req.getParameter(""preferred_email"")); } else if ((req.getParameter(""account_id"")) != null) { res = byAccountId(req.getParameter(""account_id"")); } else { byte[] raw; try { raw = prepareHtmlOutput(); } catch (com.google.gwtorm.server.OrmException e) { throw new javax.servlet.ServletException(e); } rsp.setContentType(""text/html""); rsp.setCharacterEncoding(HtmlDomUtil.ENC.name()); rsp.setContentLength(raw.length); try (java.io.OutputStream out = rsp.getOutputStream()) { out.write(raw); } return; } if (res != null) { webSession.get().login(res, false); final java.lang.StringBuilder rdr = new java.lang.StringBuilder(); rdr.append(req.getContextPath()); rdr.append(""/""); if (res.isNew()) { rdr.append(('#' + (com.google.gerrit.common.PageLinks.REGISTER))); } else { rdr.append(com.google.gerrit.httpd.LoginUrlToken.getToken(req)); } rsp.sendRedirect(rdr.toString()); } else { rsp.setContentType(""text/html""); rsp.setCharacterEncoding(HtmlDomUtil.ENC.name()); try (java.io.Writer out = rsp.getWriter()) { out.write(""<html>""); out.write(""<body>""); out.write(""<h1>Account Not Found</h1>""); out.write(""</body>""); out.write(""</html>""); } } }",740f3626625921d5ad43c71cd216812f95073f00,"doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",114205,481,480
140535,java_com_google_gerrit_server_mail_send_ChangeEmail.java,27.0,"public java.lang.String getChangeDetail() { try { java.lang.StringBuilder detail = new java.lang.StringBuilder(); if ((patchSetInfo) != null) { detail.append(patchSetInfo.getMessage().trim()).append(""\n""); } else { detail.append(change.getSubject().trim()).append(""\n""); } if ((patchSet) != null) { detail.append(""---\n""); com.google.gerrit.server.patch.PatchList patchList = getPatchList(); for (com.google.gerrit.server.patch.PatchListEntry p : patchList.getPatches()) { if (com.google.gerrit.reviewdb.client.Patch.isMagic(p.getNewName())) { continue; } detail.append(p.getChangeType().getCode()).append("" "").append(p.getNewName()).append(""\n""); } detail.append(java.text.MessageFormat.format(("""" + (((""{0,choice,0#0 files|1#1 file|1<{0} files} changed, "" + ""{1,choice,0#0 insertions|1#1 insertion|1<{1} insertions}(+), "") + ""{2,choice,0#0 deletions|1#1 deletion|1<{2} deletions}(-)"") + ""\n"")), ((patchList.getPatches().size()) - 1), patchList.getInsertions(), patchList.getDeletions())); detail.append(""\n""); } return detail.toString(); } catch (java.lang.Exception err) { com.google.gerrit.server.mail.send.ChangeEmail.log.warn(""Cannot format change detail"", err); return """"; } }",43e4c56feda30215fdafb26b8cd9f7a9491fabc0,"public java.lang.String getChangeDetail() { try { java.lang.StringBuilder detail = new java.lang.StringBuilder(); if ((patchSetInfo) != null) { detail.append(patchSetInfo.getMessage().trim()).append(""\n""); } else { detail.append(change.getSubject().trim()).append(""\n""); } if ((patchSet) != null) { detail.append(""---\n""); com.google.gerrit.server.patchlib.PatchList patchList = getPatchList(); for (com.google.gerrit.server.patchlib.PatchListEntry p : patchList.getPatches()) { if (com.google.gerrit.reviewdb.client.Patch.isMagic(p.getNewName())) { continue; } detail.append(p.getChangeType().getCode()).append("" "").append(p.getNewName()).append(""\n""); } detail.append(java.text.MessageFormat.format(("""" + (((""{0,choice,0#0 files|1#1 file|1<{0} files} changed, "" + ""{1,choice,0#0 insertions|1#1 insertion|1<{1} insertions}(+), "") + ""{2,choice,0#0 deletions|1#1 deletion|1<{2} deletions}(-)"") + ""\n"")), ((patchList.getPatches().size()) - 1), patchList.getInsertions(), patchList.getDeletions())); detail.append(""\n""); } return detail.toString(); } catch (java.lang.Exception err) { com.google.gerrit.server.mail.send.ChangeEmail.log.warn(""Cannot format change detail"", err); return """"; } }",b83d1e89d2343e2f14ae483f16f2cb23fa0b281c,getChangeDetail(),getChangeDetail(),11,27,"public java.lang.String getChangeDetail() { try { java.lang.StringBuilder detail = new java.lang.StringBuilder(); if ((patchSetInfo) != null) { detail.append(patchSetInfo.getMessage().trim()).append(""\n""); } else { detail.append(change.getSubject().trim()).append(""\n""); } if ((patchSet) != null) { detail.append(""---\n""); com.google.gerrit.server.diff.PatchList patchList = getPatchList(); for (com.google.gerrit.server.diff.PatchListEntry p : patchList.getPatches()) { if (com.google.gerrit.reviewdb.client.Patch.isMagic(p.getNewName())) { continue; } detail.append(p.getChangeType().getCode()).append("" "").append(p.getNewName()).append(""\n""); } detail.append(java.text.MessageFormat.format(("""" + (((""{0,choice,0#0 files|1#1 file|1<{0} files} changed, "" + ""{1,choice,0#0 insertions|1#1 insertion|1<{1} insertions}(+), "") + ""{2,choice,0#0 deletions|1#1 deletion|1<{2} deletions}(-)"") + ""\n"")), ((patchList.getPatches().size()) - 1), patchList.getInsertions(), patchList.getDeletions())); detail.append(""\n""); } return detail.toString(); } catch (java.lang.Exception err) { com.google.gerrit.server.mail.send.ChangeEmail.log.warn(""Cannot format change detail"", err); return """"; } }",07fff27e07de01e2a7e3cfe33425d7bb17a6498a,getChangeDetail(),15917,376,374
97813,gerrit-server_src_main_java_com_google_gerrit_server_project_ChangeControl.java,57.0,"private boolean can(com.google.gerrit.server.permissions.ChangePermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { try { switch (perm) { case READ : return isVisible(db(), cd); case ABANDON : return canAbandon(db()); case DELETE : return canDelete(db(), getChange().getStatus()); case ADD_PATCH_SET : return canAddPatchSet(db()); case EDIT_ASSIGNEE : return canEditAssignee(); case EDIT_DESCRIPTION : return canEditDescription(); case EDIT_HASHTAGS : return canEditHashtags(); case EDIT_TOPIC_NAME : return canEditTopicName(); case REBASE : return canRebase(db()); case REMOVE_REVIEWER : return getRefControl().canRemoveReviewer(); case RESTORE : return canRestore(db()); case SUBMIT : return canSubmit(); } } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.permissions.PermissionBackendException(""unavailable"", e); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",3cad76325d527d8b2eb414c8a3f6e55fd62d6924,"private boolean can(com.google.gerrit.server.permissions.ChangePermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { try { switch (perm) { case READ : return isVisible(db(), cd); case ABANDON : return canAbandon(db()); case DELETE : return canDelete(db(), getChange().getStatus()); case ADD_PATCH_SET : return canAddPatchSet(db()); case EDIT_ASSIGNEE : return canEditAssignee(); case EDIT_DESCRIPTION : return canEditDescription(); case EDIT_HASHTAGS : return canEditHashtags(); case EDIT_TOPIC_NAME : return canEditTopicName(); case REBASE : return canRebase(db()); case REMOVE_REVIEWER : return getRefControl().canRemoveReviewer(); case RESTORE : return canRestore(db()); case SUBMIT : return getRefControl().canSubmit(isOwner()); case SUBMIT_AS : return getRefControl().canPerform(perm.permissionName().get()); } } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.permissions.PermissionBackendException(""unavailable"", e); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",71d23265489c514310b784f5ca594231a3848c28,can(com.google.gerrit.server.permissions.ChangePermission),can(com.google.gerrit.server.permissions.ChangePermission),15,58,"private boolean can(com.google.gerrit.server.permissions.ChangePermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { try { switch (perm) { case READ : return isVisible(db(), changeData()); case ABANDON : return canAbandon(db()); case DELETE : return canDelete(db(), getChange().getStatus()); case ADD_PATCH_SET : return canAddPatchSet(db()); case EDIT_ASSIGNEE : return canEditAssignee(); case EDIT_DESCRIPTION : return canEditDescription(); case EDIT_HASHTAGS : return canEditHashtags(); case EDIT_TOPIC_NAME : return canEditTopicName(); case REBASE : return canRebase(db()); case RESTORE : return canRestore(db()); case SUBMIT : return getRefControl().canSubmit(isOwner()); case REMOVE_REVIEWER : case SUBMIT_AS : return getRefControl().canPerform(perm.permissionName().get()); } } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.permissions.PermissionBackendException(""unavailable"", e); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",2a68399f897541996202e4d43dedb486ef45bd15,can(com.google.gerrit.server.permissions.ChangePermission),10705,300,291
93410,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_ChangeApiImpl.java,12.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.RobotCommentInfo>> robotComments() throws com.google.gerrit.extensions.restapi.RestApiException { try { return listChangeRobotComments.apply(change); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot get comments"", e); } }",49466eae10d4805b41627c01fe05d80569e3b610,,robotComments(),4,10,"@java.lang.Override public java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.RobotCommentInfo>> robotComments() throws com.google.gerrit.extensions.restapi.RestApiException { try { return listChangeRobotComments.apply(change); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot get robot comments"", e); } }",5a8e77f1c2ae58093b53a019872eb5522ad657a1,robotComments(),192956,114,115
95351,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_git_AbstractPushForReview.java,40.0,"@org.junit.Test public void pushSameCommitTwice() throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig config = projectCache.checkedGet(project).getConfig(); config.getProject().setCreateNewChangeForAllNotInTarget(InheritableBoolean.TRUE); saveProjectConfig(project, config); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, ""a.txt"", ""content""); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(""refs/for/master""); r.assertOkStatus(); push = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, ""b.txt"", ""anotherContent""); r = push.to(""refs/for/master""); r.assertOkStatus(); com.google.gerrit.acceptance.GitUtil.assertPushRejected(com.google.gerrit.acceptance.GitUtil.pushHead(testRepo, ""refs/for/master"", false), ""refs/for/master"", ""commit(s) already exists (as current patchset)""); }",3b856251e5cabd35fdabff48a46f62642e7aade7,"@org.junit.Test public void pushSameCommitTwice() throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig config = projectCache.checkedGet(project).getConfig(); config.getProject().setCreateNewChangeForAllNotInTarget(InheritableBoolean.TRUE); saveProjectConfig(project, config); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, ""a.txt"", ""content""); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(""refs/for/master""); r.assertOkStatus(); push = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, ""b.txt"", ""anotherContent""); r = push.to(""refs/for/master""); r.assertOkStatus(); com.google.gerrit.acceptance.GitUtil.assertPushRejected(com.google.gerrit.acceptance.GitUtil.pushHead(testRepo, ""refs/for/master"", false), ""refs/for/master"", ""no new changes""); }",54ed36c5498fe63687d5b7c42b878e0c35fdf001,pushSameCommitTwice(),pushSameCommitTwice(),9,52,"@org.junit.Test public void pushSameCommitTwice() throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig config = projectCache.checkedGet(project).getConfig(); config.getProject().setCreateNewChangeForAllNotInTarget(InheritableBoolean.TRUE); saveProjectConfig(project, config); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, ""a.txt"", ""content""); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(""refs/for/master""); r.assertOkStatus(); push = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, ""b.txt"", ""anotherContent""); r = push.to(""refs/for/master""); r.assertOkStatus(); com.google.gerrit.acceptance.GitUtil.assertPushRejected(com.google.gerrit.acceptance.GitUtil.pushHead(testRepo, ""refs/for/master"", false), ""refs/for/master"", ""commit(s) already exists (as current patchset)""); }",3b856251e5cabd35fdabff48a46f62642e7aade7,pushSameCommitTwice(),140500,263,272
67438,src_main_java_com_googlesource_gerrit_plugins_importer_GitFetchStep.java,0.0,"private void updateNonChangeRefs(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(ConfigureRepositoryStep.R_IMPORTS); for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> e : refs.entrySet()) { java.lang.String name = e.getKey(); if (name.startsWith(""changes/"")) { continue; } if ((name.startsWith(""users/"")) && (name.contains(""/edit""))) { continue; } java.lang.String targetRef = (org.eclipse.jgit.lib.Constants.R_REFS) + (e.getKey()); org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(targetRef); ru.setNewObjectId(e.getValue().getObjectId()); org.eclipse.jgit.lib.RefUpdate.Result result = ru.forceUpdate(); switch (result) { case NEW : case FAST_FORWARD : case FORCED : case NO_CHANGE : break; default : throw new java.io.IOException(java.lang.String.format(""Failed to update %s, RefUpdate.Result = %s"", targetRef, result)); } } }",3a57fbf8c60ae52c28ac94d99f37356fb2150005,"private void updateNonChangeRefs(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(ConfigureRepositoryStep.R_IMPORTS); for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> e : refs.entrySet()) { java.lang.String name = e.getKey(); if (name.startsWith(""imports/"")) { continue; } if (name.startsWith(""cache-automerge/"")) { continue; } if (name.startsWith(""changes/"")) { continue; } if ((name.startsWith(""users/"")) && (name.contains(""/edit""))) { continue; } java.lang.String targetRef = (org.eclipse.jgit.lib.Constants.R_REFS) + (e.getKey()); org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(targetRef); ru.setNewObjectId(e.getValue().getObjectId()); org.eclipse.jgit.lib.RefUpdate.Result result = ru.forceUpdate(); switch (result) { case NEW : case FAST_FORWARD : case FORCED : case NO_CHANGE : break; default : throw new java.io.IOException(java.lang.String.format(""Failed to update %s, RefUpdate.Result = %s"", targetRef, result)); } } }",49c75b322c300d09f1ad03ac7c3ffc764400b617,updateNonChangeRefs(org.eclipse.jgit.lib.Repository),updateNonChangeRefs(org.eclipse.jgit.lib.Repository),2,0,"private void updateNonChangeRefs(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(ConfigureRepositoryStep.R_IMPORTS); for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> e : refs.entrySet()) { java.lang.String name = e.getKey(); if (name.startsWith(""imports/"")) { continue; } if (name.startsWith(""cache-automerge/"")) { continue; } if (name.startsWith(""changes/"")) { continue; } if ((name.startsWith(""users/"")) && (name.contains(""/edit""))) { continue; } java.lang.String targetRef = (org.eclipse.jgit.lib.Constants.R_REFS) + name; org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(targetRef); ru.setNewObjectId(e.getValue().getObjectId()); org.eclipse.jgit.lib.RefUpdate.Result result = ru.forceUpdate(); switch (result) { case NEW : case FAST_FORWARD : case FORCED : case NO_CHANGE : break; default : throw new java.io.IOException(java.lang.String.format(""Failed to update %s, RefUpdate.Result = %s"", targetRef, result)); } } }",d2e25418caa476dbfefe2978c435e18827f66fdc,updateNonChangeRefs(org.eclipse.jgit.lib.Repository),178277,342,339
92634,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_revision_RobotCommentsIT.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testReplacementStringOfFixReplacement() throws java.lang.Exception { assume().that(notesMigration.enabled()).isTrue(); addRobotComment(changeId, withFixRobotCommentInput); java.util.List<com.google.gerrit.extensions.common.RobotCommentInfo> robotCommentInfos = getRobotComments(); com.google.gerrit.acceptance.api.revision.RobotCommentInfoSubject.assertThatList(robotCommentInfos).singleElement().singleFixSuggestion().singleReplacement().replacement().isEqualTo(fixReplacementInfo.replacement); }",70d97fdfe88806f4ad4265c338e9a1c9bfdbcdd8,,testReplacementStringOfFixReplacement(),2,21,"@org.junit.Test public void replacementStringOfFixReplacementIsAcceptedAsIs() throws java.lang.Exception { assume().that(notesMigration.enabled()).isTrue(); addRobotComment(changeId, withFixRobotCommentInput); java.util.List<com.google.gerrit.extensions.common.RobotCommentInfo> robotCommentInfos = getRobotComments(); com.google.gerrit.acceptance.api.revision.RobotCommentInfoSubject.assertThatList(robotCommentInfos).onlyElement().onlyFixSuggestion().onlyReplacement().replacement().isEqualTo(fixReplacementInfo.replacement); }",49dc95c05538e7ba2506d90af4e25000310709dc,replacementStringOfFixReplacementIsAcceptedAsIs(),78064,123,126
24586,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_account_AccountSecurityImpl.java,8.0,"public void registerEmail(final java.lang.String address, final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwtjsonrpc.client.VoidResult> cb) { try { final com.google.gerrit.server.mail.RegisterNewEmailSender sender; sender = registerNewEmailFactory.create(address); sender.send(); cb.onSuccess(VoidResult.INSTANCE); } catch (com.google.gerrit.server.mail.EmailException e) { log.error((""Cannot send email verification message to "" + address), e); cb.onFailure(e); } catch (java.lang.RuntimeException e) { log.error((""Cannot send email verification message to "" + address), e); cb.onFailure(e); } }",8afc70e2d12b283f679425c9330e91655dbe146c,"public void registerEmail(final java.lang.String address, final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwtjsonrpc.client.VoidResult> cb) { try { switch (authConfig.getAuthType()) { case OPENID : case HTTP : case HTTP_LDAP : case CLIENT_SSL_CERT_LDAP : case LDAP : case LDAP_BIND : final com.google.gerrit.server.mail.RegisterNewEmailSender sender; sender = registerNewEmailFactory.create(address); sender.send(); cb.onSuccess(VoidResult.INSTANCE); break; case DEVELOPMENT_BECOME_ANY_ACCOUNT : registerMail(address, cb); break; default : log.error((""Unsupported loginType: "" + (authConfig.getAuthType())), new com.google.inject.ProvisionException((""Unsupported loginType: "" + (authConfig.getAuthType())))); throw new com.google.inject.ProvisionException((""Unsupported loginType: "" + (authConfig.getAuthType()))); } } catch (com.google.gerrit.server.mail.EmailException e) { log.error((""Cannot send email verification message to "" + address), e); cb.onFailure(e); } catch (java.lang.RuntimeException e) { log.error((""Cannot send email verification message to "" + address), e); cb.onFailure(e); } }",02be981ca26271209ff7265a537d2d0fb1d67e60,"registerEmail(java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)","registerEmail(java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)",8,8,"public void registerEmail(final java.lang.String address, final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.reviewdb.Account> cb) { if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.AuthType.DEVELOPMENT_BECOME_ANY_ACCOUNT)) { try { accountManager.link(user.get().getAccountId(), com.google.gerrit.server.account.AuthRequest.forEmail(address)); cb.onSuccess(user.get().getAccount()); } catch (com.google.gerrit.server.account.AccountException e) { cb.onFailure(e); } } else { try { final com.google.gerrit.server.mail.RegisterNewEmailSender sender; sender = registerNewEmailFactory.create(address); sender.send(); } catch (com.google.gerrit.server.mail.EmailException e) { log.error((""Cannot send email verification message to "" + address), e); cb.onFailure(e); } catch (java.lang.RuntimeException e) { log.error((""Cannot send email verification message to "" + address), e); cb.onFailure(e); } } }",9d29bf17c37607943eeb0f46915d369e59745194,"registerEmail(java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)",186639,317,270
41743,gerrit-server_src_main_java_com_google_gerrit_server_change_PatchResource.java,,,,public com.google.gerrit.server.change.RevisionResource getRevision() { return rev; },03f5505b8c61e56611518d9e8d60ac8feaaeac4d,,getRevision(),5,1,public Patch.Key getPatchKey() { return key; },48b2bc79912ffb92887ad811033338601395df6d,getPatchKey(),131328,22,14
79637,gerrit-server_src_main_java_com_google_gerrit_server_git_ProjectConfig.java,48.0,public void remove(com.google.gerrit.common.data.AccessSection section) { if (section != null) { com.google.gerrit.common.data.AccessSection a = accessSections.get(section.getName()); if (sectionsWithUnknownPermissions.contains(a)) { accessSections.remove(a); } else { a.setPermissions(new java.util.ArrayList<com.google.gerrit.common.data.Permission>()); } } },9a4737b2994341ea7369e29dbcbb86d10dd73067,public void remove(com.google.gerrit.common.data.AccessSection section) { if (section != null) { java.lang.String name = section.getName(); if (sectionsWithUnknownPermissions.contains(name)) { accessSections.remove(name); } else { com.google.gerrit.common.data.AccessSection a = accessSections.get(name); a.setPermissions(new java.util.ArrayList<com.google.gerrit.common.data.Permission>()); } } },f4a01369e50d755c4f51484a14300fac311eae62,remove(com.google.gerrit.common.data.AccessSection),remove(com.google.gerrit.common.data.AccessSection),2,48,public void remove(com.google.gerrit.common.data.AccessSection section) { if (section != null) { java.lang.String name = section.getName(); if (sectionsWithUnknownPermissions.contains(name)) { com.google.gerrit.common.data.AccessSection a = accessSections.get(name); a.setPermissions(new java.util.ArrayList<com.google.gerrit.common.data.Permission>()); } else { accessSections.remove(name); } } },c16ae691b9483cc07ac6cc1f013922b779202811,remove(com.google.gerrit.common.data.AccessSection),4303,111,111
15913,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_Query.java,,,,"@java.lang.Override public void start(org.apache.sshd.server.Environment env) throws java.io.IOException { startThread(new com.google.gerrit.sshd.commands.CommandRunnable() { @java.lang.Override public void run() throws java.lang.Exception { parseCommandLine(); if ((limit) <= 0) throw new com.google.gerrit.sshd.commands.UnloggedFailure(1, ""fatal: --limit must be > 0""); query(); } }); }",e6b9033a92db8d104e2b22db0a14f57aee72e955,,start(org.apache.sshd.server.Environment),5,0,"@org.kohsuke.args4j.Option(name = ""--format"", metaVar = ""FMT"", usage = ""Output display format"") void setFormat(com.google.gerrit.server.query.change.QueryProcessor.OutputFormat format) { processor.setOutput(out, format); }",005b3a745d2ed5859851f2d1100bab90181520b5,setFormat(com.google.gerrit.server.query.change.QueryProcessor$OutputFormat),56691,110,65
151514,java_com_google_gerrit_server_util_RegexListSearcher.java,2.0,"private int find(java.util.List<T> list, java.lang.String p) { int r = java.util.Collections.binarySearch(com.google.common.collect.Lists.transform(list, this), p); return r < 0 ? -(r + 1) : r; }",9d135306db46a324993690435acc6661b96c4cf7,"private int find(java.util.List<T> list, java.lang.String p) { int r = java.util.Collections.binarySearch(com.google.common.collect.Lists.transform(list, toStringFunc), p); return r < 0 ? -(r + 1) : r; }",731e7109a4efc046bf43a2478ae3ab5c54af831c,"find(java.util.List,java.lang.String)","find(java.util.List,java.lang.String)",5,2,"private static int find(java.util.List<java.lang.String> list, java.lang.String p) { int r = java.util.Collections.binarySearch(list, p); return r < 0 ? -(r + 1) : r; }",7cd7c893a81f3f18b409edd5262eebbbb7cdb6b2,"find(java.util.List,java.lang.String)",56504,69,57
61604,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_PatchScriptSettingsPanel.java,7.0,"private void initContext(com.google.gwt.user.client.ui.ListBox context) { for (final short v : com.google.gerrit.reviewdb.client.AccountDiffPreference.CONTEXT_CHOICES) { final java.lang.String label; if (v == (com.google.gerrit.reviewdb.client.AccountDiffPreference.WHOLE_FILE_CONTEXT)) { label = Util.C.contextWholeFile(); } else { label = Util.M.lines(v); } context.addItem(label, java.lang.String.valueOf(v)); } }",d6f266dcfe57073ca0ad916d79cbc59f1c237165,"private void initContext(com.google.gwt.user.client.ui.ListBox context) { for (final short v : com.google.gerrit.extensions.common.DiffPreferencesInfo.CONTEXT_CHOICES) { final java.lang.String label; if (v == (com.google.gerrit.extensions.common.DiffPreferencesInfo.WHOLE_FILE_CONTEXT)) { label = Util.C.contextWholeFile(); } else { label = Util.M.lines(v); } context.addItem(label, java.lang.String.valueOf(v)); } }",65eba5617fb5c05367e0a47cc0371c46bec64dde,initContext(com.google.gwt.user.client.ui.ListBox),initContext(com.google.gwt.user.client.ui.ListBox),40,7,"private void initContext(com.google.gwt.user.client.ui.ListBox context) { for (final short v : com.google.gerrit.extensions.client.DiffPreferencesInfo.CONTEXT_CHOICES) { final java.lang.String label; if (v == (com.google.gerrit.extensions.client.DiffPreferencesInfo.WHOLE_FILE_CONTEXT)) { label = Util.C.contextWholeFile(); } else { label = Util.M.lines(v); } context.addItem(label, java.lang.String.valueOf(v)); } }",e4826d833034da95caf4af3c1fc6239fcf47ab9e,initContext(com.google.gwt.user.client.ui.ListBox),127974,130,130
67695,gerrit-server_src_main_java_com_google_gerrit_server_project_SubmitRuleEvaluator.java,21.0,"public java.util.List<com.google.gerrit.common.data.SubmitRecord> evaluate() { try { initPatchSet(); } catch (com.google.gwtorm.server.OrmException e) { return ruleError((""Error looking up patch set "" + (control.getChange().currentPatchSetId()))); } com.google.gerrit.reviewdb.client.Change c = control.getChange(); if ((!(allowClosed)) && (c.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } if ((((c.getStatus()) == (Change.Status.DRAFT)) || (patchSet.isDraft())) && (!(allowDraft))) { return cannotSubmitDraft(); } java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl(""locate_submit_rule"", ""can_submit"", ""locate_submit_filter"", ""filter_submit_results"", control.getCurrentUser()); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format((""Submit rule '%s' for change %s of %s has "" + ""no solution.""), getSubmitRule(), cd.getId(), getProjectName())); } return resultsToSubmitRecord(getSubmitRule(), results); }",994c6f2ab3e7ea2cdaf8c95ed2554364b73576a5,"public java.util.List<com.google.gerrit.common.data.SubmitRecord> evaluate() { com.google.gerrit.reviewdb.client.Change c = control.getChange(); if ((!(allowClosed)) && (c.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } if (!(allowDraft)) { try { initPatchSet(); } catch (com.google.gwtorm.server.OrmException e) { return ruleError((""Error looking up patch set "" + (control.getChange().currentPatchSetId()))); } if (((c.getStatus()) == (Change.Status.DRAFT)) || (patchSet.isDraft())) { return cannotSubmitDraft(); } } java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl(""locate_submit_rule"", ""can_submit"", ""locate_submit_filter"", ""filter_submit_results"", control.getCurrentUser()); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format((""Submit rule '%s' for change %s of %s has "" + ""no solution.""), getSubmitRule(), cd.getId(), getProjectName())); } return resultsToSubmitRecord(getSubmitRule(), results); }",b3d2702dba7d8c929c5936fa64acbb4f2fa8e6f9,evaluate(),evaluate(),3,21,"public java.util.List<com.google.gerrit.common.data.SubmitRecord> evaluate() { com.google.gerrit.reviewdb.client.Change c = control.getChange(); if ((!(allowClosed)) && (c.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } if (!(allowDraft)) { if ((c.getStatus()) == (Change.Status.DRAFT)) { return cannotSubmitDraft(); } try { initPatchSet(); } catch (com.google.gwtorm.server.OrmException e) { return ruleError((""Error looking up patch set "" + (control.getChange().currentPatchSetId()))); } if (patchSet.isDraft()) { return cannotSubmitDraft(); } } java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl(""locate_submit_rule"", ""can_submit"", ""locate_submit_filter"", ""filter_submit_results"", control.getCurrentUser()); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format((""Submit rule '%s' for change %s of %s has "" + ""no solution.""), getSubmitRule(), cd.getId(), getProjectName())); } return resultsToSubmitRecord(getSubmitRule(), results); }",3880d7c3d81249ff2f2a28b8e48de39bbc5dd0d0,evaluate(),185115,356,364
98050,gerrit-server_src_main_java_com_google_gerrit_server_index_FieldDef.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public T get(I input, com.google.gerrit.server.index.FieldDef.FillArgs args) throws com.google.gwtorm.server.OrmException { return getter.get(input, args); }",417370761499632cfb0ffb593d978395f594555b,,"get(java.lang.Object,com.google.gerrit.server.index.FieldDef$FillArgs)",4,10,"public static com.google.gerrit.server.index.FieldDef.Builder<java.lang.Integer> intRange(java.lang.String name) { return new com.google.gerrit.server.index.FieldDef.Builder(FieldType.INTEGER_RANGE, name).stored(); }",6cd065d2706f17bf646ff8507d12f9be3802cf5d,intRange(java.lang.String),116395,55,64
50774,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_RelatedChanges.java,20.0,"@java.lang.Override public void onFailure(java.lang.Throwable err) { getTab().setTitle(Resources.M.conflictingChanges(""na"")); getTab().setError(err.getMessage()); }",4c62228155c0e5c6dd566408f413961a72e7fdbe,"@java.lang.Override public void onFailure(java.lang.Throwable err) { getTab().setTitle(Resources.M.cherryPicks(""na"")); getTab().setError(err.getMessage()); }",3a6b4b8aa8a13d769442f2d4b8acd35d3b330618,onFailure(java.lang.Throwable),onFailure(java.lang.Throwable),9,18,@java.lang.Override public void onFailure(java.lang.Throwable err) { getTab().setTitle(Resources.M.cherryPicks(Resources.C.notAvailable())); getTab().setError(err.getMessage()); },01d61f01f2b08b9d00dfca7967b1a01ec5e2a8da,onFailure(java.lang.Throwable),79233,44,49
12535,gerrit-pgm_src_main_java_com_google_gerrit_pgm_Daemon.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private com.google.inject.Injector createSysInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(cfgInjector.getInstance(com.google.gerrit.server.config.GerritGlobalModule.class)); if (httpd) { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.httpd.HttpCanonicalWebUrlProvider.class; } }); } else { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.server.config.CanonicalWebUrlProvider.class; } }); } if (!(slave)) { modules.add(new com.google.gerrit.server.config.GerritMasterLifecycle()); } return cfgInjector.createChildInjector(modules); },f99984041337ad30e54e9834167d1e3b2535a1c1,,createSysInjector(),2,8,private com.google.inject.Injector createSysInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(cfgInjector.getInstance(com.google.gerrit.server.config.GerritGlobalModule.class)); if (httpd) { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.httpd.HttpCanonicalWebUrlProvider.class; } }); } else { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.server.config.CanonicalWebUrlProvider.class; } }); } if (!(slave)) { modules.add(new com.google.gerrit.server.config.MasterNodeStartup()); } return cfgInjector.createChildInjector(modules); },4ea2e683a378abf0f6e25d4d4872c2e10d1bfe11,createSysInjector(),86124,266,264
70893,gerrit-gpg_src_main_java_com_google_gerrit_gpg_PushCertificateChecker.java,6.0,"private static com.google.gerrit.gpg.CheckResult combine(com.google.gerrit.gpg.CheckResult sigResult, java.util.List<com.google.gerrit.gpg.CheckResult> results) { java.util.List<java.lang.String> problems = new java.util.ArrayList<>(); boolean bad = false; for (com.google.gerrit.gpg.CheckResult result : results) { problems.addAll(result.getProblems()); bad |= (result.getStatus()) == (BAD); } com.google.gerrit.extensions.common.GpgKeyInfo.Status status = (bad) ? BAD : OK; if (sigResult != null) { problems.addAll(sigResult.getProblems()); if ((sigResult.getStatus()) == (BAD)) { status = BAD; } else if ((sigResult.getStatus()) == (TRUSTED)) { status = TRUSTED; } } return com.google.gerrit.gpg.CheckResult.create(status, problems); }",e07881eac2c2122e6347517d8b8521a6ef2021ee,"private static com.google.gerrit.gpg.PushCertificateChecker.Result combine(com.google.gerrit.gpg.PushCertificateChecker.Result sigResult, java.util.List<com.google.gerrit.gpg.CheckResult> results) { java.util.List<java.lang.String> problems = new java.util.ArrayList<>(); boolean bad = false; for (com.google.gerrit.gpg.CheckResult result : results) { problems.addAll(result.getProblems()); bad |= (result.getStatus()) == (BAD); } com.google.gerrit.extensions.common.GpgKeyInfo.Status status = (bad) ? BAD : OK; org.bouncycastle.openpgp.PGPPublicKey key; if (sigResult != null) { key = sigResult.getPublicKey(); com.google.gerrit.gpg.CheckResult cr = sigResult.getCheckResult(); problems.addAll(cr.getProblems()); if ((cr.getStatus()) == (BAD)) { status = BAD; } else if ((cr.getStatus()) == (TRUSTED)) { status = TRUSTED; } } else { key = null; } return new com.google.gerrit.gpg.PushCertificateChecker.Result(key, com.google.gerrit.gpg.CheckResult.create(status, problems)); }",42ec2c98267942c845b58f1e8177d0344b76d475,"combine(com.google.gerrit.gpg.CheckResult,java.util.List)","combine(com.google.gerrit.gpg.PushCertificateChecker$Result,java.util.List)",11,1,"private static com.google.gerrit.gpg.PushCertificateChecker.Result combine(com.google.gerrit.gpg.PushCertificateChecker.Result sigResult, java.util.List<com.google.gerrit.gpg.CheckResult> results) { java.util.List<java.lang.String> problems = new java.util.ArrayList<>(); boolean bad = false; for (com.google.gerrit.gpg.CheckResult result : results) { problems.addAll(result.getProblems()); bad |= (result.getStatus()) == (BAD); } com.google.gerrit.extensions.common.GpgKeyInfo.Status status = (bad) ? BAD : OK; org.bouncycastle.openpgp.PGPPublicKey key; if (sigResult != null) { key = sigResult.getPublicKey(); com.google.gerrit.gpg.CheckResult cr = sigResult.getCheckResult(); problems.addAll(cr.getProblems()); if ((cr.getStatus()) == (BAD)) { status = BAD; } else if ((!bad) && ((cr.getStatus()) == (TRUSTED))) { status = TRUSTED; } } else { key = null; } return new com.google.gerrit.gpg.PushCertificateChecker.Result(key, com.google.gerrit.gpg.CheckResult.create(status, problems)); }",b39b5b358e442252dd741950b475b521e4d8e115,"combine(com.google.gerrit.gpg.PushCertificateChecker$Result,java.util.List)",105529,301,306
53381,gerrit-server_src_main_java_com_google_gerrit_server_mail_ChangeEmail.java,10.0,"protected com.google.gerrit.server.patch.PatchList getPatchList() throws com.google.gerrit.server.patch.PatchListNotAvailableException { if ((patchSet) != null) { return args.patchListCache.get(change, patchSet); } throw new com.google.gerrit.server.patch.PatchListNotAvailableException(""no patchSet specified""); }",6f1e70412c6f959f81f79367e540193195bbe83b,"protected com.google.gerrit.server.patch.PatchList getPatchList() throws com.google.gerrit.server.patch.PatchListNotAvailableException { if ((patchSet) != null) { return args.patchListCache.get(changeData.getChange(), patchSet); } throw new com.google.gerrit.server.patch.PatchListNotAvailableException(""no patchSet specified""); }",df748454b539b5017f23f43e2990c8a2eb0889c5,getPatchList(),getPatchList(),9,10,"protected com.google.gerrit.server.patch.PatchList getPatchList() throws com.google.gerrit.server.patch.PatchListNotAvailableException { if ((patchSet) != null) { return args.patchListCache.get(change, patchSet); } throw new com.google.gerrit.server.patch.PatchListNotAvailableException(""no patchSet specified""); }",6f1e70412c6f959f81f79367e540193195bbe83b,getPatchList(),19074,88,84
92438,gerrit-server_src_main_java_com_google_gerrit_server_mail_send_OutgoingEmail.java,28.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void setAccountsToNotify(com.google.common.collect.Multimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify) { this.accountsToNotify = (accountsToNotify != null) ? com.google.common.collect.ImmutableListMultimap.copyOf(accountsToNotify) : null; }",6ce88b2546df6b7902b1a35b4512a06f2ccdfcc5,,setAccountsToNotify(com.google.common.collect.Multimap),3,25,"public void setAccountsToNotify(com.google.common.collect.Multimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify) { this.accountsToNotify = checkNotNull(accountsToNotify); }",eead5ee505d60beef010de78b3961fa9fdbb3760,setAccountsToNotify(com.google.common.collect.Multimap),174206,91,68
92012,gerrit-server_src_test_java_com_google_gerrit_server_mail_send_CommentFormatterTest.java,12.0,"@org.junit.Test public void testParseMultiLineQuote() { java.lang.String comment = ""> Quote line 1\n> Quote line 2\n > Quote line 3\n""; java.util.List<com.google.gerrit.server.mail.send.CommentFormatter.Block> result = com.google.gerrit.server.mail.send.CommentFormatter.parse(comment); assertThat(result).hasSize(1); assertBlock(result, 0, BlockType.QUOTE, ""Quote line 1\nQuote line 2\nQuote line 3""); }",364edb10e4b566b827b5fb20768657a52bcb3a62,"@org.junit.Test public void testParseMultiLineQuote() { java.lang.String comment = ""> Quote line 1\n> Quote line 2\n > Quote line 3\n""; java.util.List<com.google.gerrit.server.mail.send.CommentFormatter.Block> result = com.google.gerrit.server.mail.send.CommentFormatter.parse(comment); assertThat(result).hasSize(1); assertQuoteBlock(result, 0, 1); assertBlock(result.get(0).blocks, 0, BlockType.PARAGRAPH, ""Quote line 1\nQuote line 2\nQuote line 3\n""); }",58c8e948b7b1fcec6e15d47ab5b65b19d64b8b34,testParseMultiLineQuote(),testParseMultiLineQuote(),4,11,"@org.junit.Test public void testParseMultiLineQuote() { java.lang.String comment = ""> Quote line 1\n> Quote line 2\n > Quote line 3\n""; java.util.List<com.google.gerrit.server.mail.send.CommentFormatter.Block> result = com.google.gerrit.server.mail.send.CommentFormatter.parse(comment); assertThat(result).hasSize(1); assertQuoteBlock(result, 0, 1); assertBlock(result.get(0).quotedBlocks, 0, BlockType.PARAGRAPH, ""Quote line 1\nQuote line 2\nQuote line 3\n""); }",6a82bae63b0c479b8313ec0d697703f85a1dba3a,testParseMultiLineQuote(),56558,141,142
30370,gerrit-common_src_main_java_com_google_gerrit_common_data_GitWebType.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.lang.String replacePathSeparator(java.lang.String newSeparator) { if ('/' != (pathSeparator)) { return newSeparator.replace('/', pathSeparator); } return newSeparator; }",610893c25de59879784d8f3de329b3bab4400658,,replacePathSeparator(java.lang.String),8,11,"public java.lang.String replacePathSeparator(java.lang.String urlSegment) { if ('/' != (pathSeparator)) { return urlSegment.replace('/', pathSeparator); } return urlSegment; }",456e9ffba2ff41bedc762ea74e1dc5d1f171af5f,replacePathSeparator(java.lang.String),61318,44,44
162992,java_com_google_gerrit_common_data_SubmitRequirement.java,,,,public abstract java.lang.String shortReason();,29ef36c51f8eea4d71be066b7b0db7c74688289e,,shortReason(),20,3,public java.lang.String shortReason() { return shortReason; },c4bb1e202c1cfc2a8cc74fe5bf8544f9468b767c,shortReason(),167926,10,15
86814,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,23.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.common.base.Optional<com.google.gerrit.server.patch.FilePathList> getFilePathList(com.google.gerrit.reviewdb.client.Change c, com.google.gerrit.reviewdb.client.PatchSet ps) { java.lang.Integer psId = ps.getId().get(); if ((filePathLists) == null) { filePathLists = new java.util.HashMap(); } com.google.common.base.Optional<com.google.gerrit.server.patch.FilePathList> r = filePathLists.get(psId); if (r == null) { if (!(lazyLoad)) { return com.google.common.base.Optional.absent(); } try { r = com.google.common.base.Optional.of(patchListCache.getFilePaths(c, ps)); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { r = com.google.common.base.Optional.absent(); } filePathLists.put(psId, r); } return r; }",203fd1e5558634f3646e964cd11a17654a1befe2,,"getFilePathList(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet)",5,51,"private com.google.common.base.Optional<com.google.gerrit.server.patch.FileList> getFileList(com.google.gerrit.reviewdb.client.Change c, com.google.gerrit.reviewdb.client.PatchSet ps) { java.lang.Integer psId = ps.getId().get(); if ((fileLists) == null) { fileLists = new java.util.HashMap(); } com.google.common.base.Optional<com.google.gerrit.server.patch.FileList> r = fileLists.get(psId); if (r == null) { if (!(lazyLoad)) { return com.google.common.base.Optional.absent(); } try { r = com.google.common.base.Optional.of(patchListCache.getFileList(c, ps)); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { r = com.google.common.base.Optional.absent(); } fileLists.put(psId, r); } return r; }",7117a237898e98bf0753b00aefe276babd896514,"getFileList(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet)",70702,241,240
61661,src_main_java_com_googlesource_gerrit_plugins_reviewers_client_AddReviewersScreen.java,,,,"@java.lang.Override public void onLoad(com.google.gerrit.plugin.client.screen.Screen screen) { screen.setPageTitle(""Reviewers""); screen.show(new com.googlesource.gerrit.plugins.reviewers.client.AddReviewersScreen(screen.getToken())); }",c900a02cd3d15203c91fca010b5caf932fb6913c,,onLoad(com.google.gerrit.plugin.client.screen.Screen),3,13,"@java.lang.Override public void onLoad(com.google.gerrit.plugin.client.screen.Screen screen) { screen.setPageTitle(""Reviewers""); screen.show(new com.googlesource.gerrit.plugins.reviewers.client.ReviewersScreen(screen.getToken())); }",fbb3ebe1049735f36a4254fcec8ffe438e57dd36,onLoad(com.google.gerrit.plugin.client.screen.Screen),183199,67,66
161470,src_test_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGeneratorTest.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void doesPublishWhenRework() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.REWORK; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",a66eb8c653d5996d5998da1b8262a7585395a24d,,doesPublishWhenRework(),4,7,"@org.junit.Test public void publishesWhenRework() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockPatchSet); mockPatchSet.kind = com.google.gerrit.extensions.client.ChangeKind.REWORK; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }",8ddead590c153c5972d9ca3719fc4a07c6a0564f,publishesWhenRework(),56061,175,177
39495,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectListScreen.java,2.0,"private com.google.gwt.user.client.ui.Widget createSearchLink(java.lang.String projectName) { com.google.gwt.user.client.ui.Image image = new com.google.gwt.user.client.ui.Image(Gerrit.RESOURCES.queryProjectLink()); com.google.gerrit.client.ui.InlineHyperlink h = new com.google.gerrit.client.ui.InlineHyperlink("" "", com.google.gerrit.common.PageLinks.toChangeQuery((""project:"" + projectName))); h.setTitle(Util.C.projectListQueryLink()); com.google.gwt.user.client.DOM.insertBefore(h.getElement(), image.getElement(), com.google.gwt.user.client.DOM.getFirstChild(h.getElement())); return h; }",b4754579231e50eb6a4cde0b4642836b040b3d1d,"private com.google.gwt.user.client.ui.Widget createSearchLink(java.lang.String projectName) { com.google.gwt.user.client.ui.Image image = new com.google.gwt.user.client.ui.Image(Gerrit.RESOURCES.queryProjectLink()); com.google.gerrit.client.admin.ProjectListScreen.ProjectSearchLink l = new com.google.gerrit.client.admin.ProjectListScreen.ProjectSearchLink(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName), "" "", com.google.gerrit.common.PageLinks.toChangeQuery((""project:"" + projectName))); l.setTitle(Util.C.projectListQueryLink()); com.google.gwt.user.client.DOM.insertBefore(l.getElement(), image.getElement(), com.google.gwt.user.client.DOM.getFirstChild(l.getElement())); return l; }",83608849c58e3192ff57d992ef91a58a164f5a20,createSearchLink(java.lang.String),createSearchLink(java.lang.String),7,4,"private com.google.gwt.user.client.ui.Widget createSearchLink(final com.google.gerrit.client.projects.ProjectInfo projectInfo) { com.google.gwt.user.client.ui.Image image = new com.google.gwt.user.client.ui.Image(Gerrit.RESOURCES.queryProjectLink()); com.google.gerrit.client.ui.InlineHyperlink h; if ((projectInfo.defaultDashboard()) != null) { h = new com.google.gerrit.client.ui.InlineHyperlink("" "", com.google.gerrit.common.PageLinks.toProjectDashboard(projectInfo.name_key(), projectInfo.defaultDashboard())); } else { h = new com.google.gerrit.client.ui.InlineHyperlink("" "", com.google.gerrit.common.PageLinks.toChangeQuery(com.google.gerrit.common.PageLinks.projectQuery(projectInfo.name_key()))); } h.setTitle(Util.C.projectListQueryLink()); com.google.gwt.user.client.DOM.insertBefore(h.getElement(), image.getElement(), com.google.gwt.user.client.DOM.getFirstChild(h.getElement())); return h; }",b0610ba083c951f892b7d62a5b9efaafb12e02a3,createSearchLink(com.google.gerrit.client.projects.ProjectInfo),108232,210,270
54310,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_CreateProjectIT.java,1.0,"@org.junit.Test public void testCreateProjectWithProperties() throws java.io.IOException { final java.lang.String newProjectName = ""newProject""; com.google.gerrit.server.project.CreateProject.Input in = new com.google.gerrit.server.project.CreateProject.Input(); in.description = ""Test description""; in.submitType = com.google.gerrit.reviewdb.client.Project.SubmitType.CHERRY_PICK; in.useContributorAgreements = com.google.gerrit.reviewdb.client.Project.InheritableBoolean.TRUE; in.useSignedOffBy = com.google.gerrit.reviewdb.client.Project.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.reviewdb.client.Project.InheritableBoolean.TRUE; in.requireChangeId = com.google.gerrit.reviewdb.client.Project.InheritableBoolean.TRUE; com.google.gerrit.acceptance.RestResponse r = adminSession.put((""/projects/"" + newProjectName), in); com.google.gerrit.server.project.ProjectJson.ProjectInfo p = newGson().fromJson(r.getReader(), com.google.gerrit.server.project.ProjectJson.ProjectInfo.class); assertEquals(newProjectName, p.name); com.google.gerrit.reviewdb.client.Project project = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(newProjectName)).getProject(); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjectInfo(project, p); assertEquals(in.description, project.getDescription()); assertEquals(in.submitType, project.getSubmitType()); assertEquals(in.useContributorAgreements, project.getUseContributorAgreements()); assertEquals(in.useSignedOffBy, project.getUseSignedOffBy()); assertEquals(in.useContentMerge, project.getUseContentMerge()); assertEquals(in.requireChangeId, project.getRequireChangeID()); }",662bb0bb39885bce2a77570857773dabe7390638,"@org.junit.Test public void testCreateProjectWithProperties() throws java.io.IOException { final java.lang.String newProjectName = ""newProject""; com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.description = ""Test description""; in.submitType = com.google.gerrit.extensions.common.ProjectSubmitType.CHERRY_PICK; in.useContributorAgreements = com.google.gerrit.extensions.common.InheritableBoolean.TRUE; in.useSignedOffBy = com.google.gerrit.extensions.common.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.extensions.common.InheritableBoolean.TRUE; in.requireChangeId = com.google.gerrit.extensions.common.InheritableBoolean.TRUE; com.google.gerrit.acceptance.RestResponse r = adminSession.put((""/projects/"" + newProjectName), in); com.google.gerrit.server.project.ProjectJson.ProjectInfo p = newGson().fromJson(r.getReader(), com.google.gerrit.server.project.ProjectJson.ProjectInfo.class); assertEquals(newProjectName, p.name); com.google.gerrit.reviewdb.client.Project project = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(newProjectName)).getProject(); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjectInfo(project, p); assertEquals(in.description, project.getDescription()); assertEquals(in.submitType, project.getSubmitType()); assertEquals(in.useContributorAgreements, project.getUseContributorAgreements()); assertEquals(in.useSignedOffBy, project.getUseSignedOffBy()); assertEquals(in.useContentMerge, project.getUseContentMerge()); assertEquals(in.requireChangeId, project.getRequireChangeID()); }",aa8087eb80f368f1154ab6453e69b4473d4302bf,testCreateProjectWithProperties(),testCreateProjectWithProperties(),14,1,"@org.junit.Test public void testCreateProjectWithProperties() throws java.io.IOException { final java.lang.String newProjectName = ""newProject""; com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.description = ""Test description""; in.submitType = com.google.gerrit.extensions.common.SubmitType.CHERRY_PICK; in.useContributorAgreements = com.google.gerrit.extensions.common.InheritableBoolean.TRUE; in.useSignedOffBy = com.google.gerrit.extensions.common.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.extensions.common.InheritableBoolean.TRUE; in.requireChangeId = com.google.gerrit.extensions.common.InheritableBoolean.TRUE; com.google.gerrit.acceptance.RestResponse r = adminSession.put((""/projects/"" + newProjectName), in); com.google.gerrit.server.project.ProjectJson.ProjectInfo p = newGson().fromJson(r.getReader(), com.google.gerrit.server.project.ProjectJson.ProjectInfo.class); assertEquals(newProjectName, p.name); com.google.gerrit.reviewdb.client.Project project = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(newProjectName)).getProject(); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjectInfo(project, p); assertEquals(in.description, project.getDescription()); assertEquals(in.submitType, project.getSubmitType()); assertEquals(in.useContributorAgreements, project.getUseContributorAgreements()); assertEquals(in.useSignedOffBy, project.getUseSignedOffBy()); assertEquals(in.useContentMerge, project.getUseContentMerge()); assertEquals(in.requireChangeId, project.getRequireChangeID()); }",278046f780acf3aa43e8c9d0b1f3fef67c739be1,testCreateProjectWithProperties(),164168,438,437
9518,src_main_java_com_google_gerrit_client_admin_ProjectListScreen.java,0.0,@java.lang.Override public void onLoad() { if ((projects) == null) { initUI(); } Util.PROJECT_SVC.ownedProjects(new com.google.gerrit.client.rpc.GerritCallback<java.util.List<com.google.gerrit.client.reviewdb.Project>>() { public void onSuccess(final java.util.List<com.google.gerrit.client.reviewdb.Project> result) { if (isAttached()) { projects.display(result); projects.finishDisplay(true); } } }); },a7f8d75569902bf68f217ada512a5e7ca063f340,@java.lang.Override public void onLoad() { if ((projects) == null) { initUI(); } Util.PROJECT_SVC.ownedProjects(new com.google.gerrit.client.rpc.ScreenLoadCallback<java.util.List<com.google.gerrit.client.reviewdb.Project>>(this) { @java.lang.Override protected void prepare(final java.util.List<com.google.gerrit.client.reviewdb.Project> result) { projects.display(result); projects.finishDisplay(true); } }); },a72aed19f98d39b0b3d974cd32c8ae9fa776c4c8,onLoad(),onLoad(),2,0,@java.lang.Override public void onLoad() { if ((projects) == null) { initUI(); } Util.PROJECT_SVC.ownedProjects(new com.google.gerrit.client.rpc.ScreenLoadCallback<java.util.List<com.google.gerrit.client.reviewdb.Project>>(this) { @java.lang.Override protected void preDisplay(final java.util.List<com.google.gerrit.client.reviewdb.Project> result) { projects.display(result); projects.finishDisplay(true); } }); },9fd47f0f9585da19e28093fb661a727613692315,onLoad(),910,128,129
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> byIncludeUUID(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },0b275d7757334e67440fb86a27710c1f0886a2e4,,byIncludeUUID(com.google.gerrit.reviewdb.client.AccountGroup$UUID),3,22,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> byIncludeUUID(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },3a89560861542fd7411eb9d60dd5dc17278b7909,byIncludeUUID(com.google.gerrit.reviewdb.client.AccountGroup$UUID),205038,106,93
20019,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_PublishCommentScreen.java,13.0,"private void initApprovals(final com.google.gerrit.common.data.PatchSetPublishDetail r, final com.google.gwt.user.client.ui.Panel body) { for (final com.google.gerrit.common.data.ApprovalType ct : com.google.gerrit.client.Gerrit.getConfig().getApprovalTypes().getApprovalTypes()) { if (r.isAllowed(ct.getCategory().getId())) { initApprovalType(r, body, ct); } } }",506663354db296fb76340aa8a22be529a3c86ee2,"private void initApprovals(final com.google.gerrit.common.data.PatchSetPublishDetail r, final com.google.gwt.user.client.ui.Panel body) { com.google.gerrit.common.data.ApprovalTypes types = com.google.gerrit.client.Gerrit.getConfig().getApprovalTypes(); for (com.google.gerrit.common.data.ApprovalType type : types.getApprovalTypes()) { java.lang.String permission = com.google.gerrit.common.data.AccessSection.Permission.forLabel(type.getCategory().getLabelName()); com.google.gerrit.common.data.AccessSection.Range range = r.getRange(permission); if ((range != null) && (!(range.isEmpty()))) { initApprovalType(r, body, type, range); } } for (com.google.gerrit.common.data.AccessSection.Range range : r.getLabels()) { if ((!(range.isEmpty())) && ((types.byLabel(range.getLabel())) == null)) { } } }",35ce274e13ccd0147b48d29583cb186f6e9f3144,"initApprovals(com.google.gerrit.common.data.PatchSetPublishDetail,com.google.gwt.user.client.ui.Panel)","initApprovals(com.google.gerrit.common.data.PatchSetPublishDetail,com.google.gwt.user.client.ui.Panel)",14,16,"private void initApprovals(final com.google.gerrit.common.data.PatchSetPublishDetail r, final com.google.gwt.user.client.ui.Panel body) { com.google.gerrit.common.data.ApprovalTypes types = com.google.gerrit.client.Gerrit.getConfig().getApprovalTypes(); for (com.google.gerrit.common.data.ApprovalType type : types.getApprovalTypes()) { java.lang.String permission = com.google.gerrit.common.data.Permission.forLabel(type.getCategory().getLabelName()); com.google.gerrit.common.data.PermissionRange range = r.getRange(permission); if ((range != null) && (!(range.isEmpty()))) { initApprovalType(r, body, type, range); } } for (com.google.gerrit.common.data.PermissionRange range : r.getLabels()) { if ((!(range.isEmpty())) && ((types.byLabel(range.getLabel())) == null)) { } } }",52c23b827e3ea33dabf9b3aa37cccb799b3fd9b1,"initApprovals(com.google.gerrit.common.data.PatchSetPublishDetail,com.google.gwt.user.client.ui.Panel)",10398,237,230
20355,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_AccessSectionEditor.java,,,,"@java.lang.Override public com.google.gerrit.client.admin.PermissionEditor create(int index) { com.google.gerrit.client.admin.PermissionEditor subEditor = new com.google.gerrit.client.admin.PermissionEditor(); permissionContainer.insert(subEditor, index); return subEditor; }",fac495646a2cdac01238ebc4aff1b49c862d00cf,,create(int),14,8,"@java.lang.Override public com.google.gerrit.client.admin.PermissionEditor create(int index) { com.google.gerrit.client.admin.PermissionEditor subEditor = new com.google.gerrit.client.admin.PermissionEditor(readOnly, value); permissionContainer.insert(subEditor, index); return subEditor; }",efd93f513823c56ec4e7d276420640d9cc7b3140,create(int),6343,72,76
55464,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_Preferences.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static com.google.gerrit.client.account.Preferences create(java.util.List<com.google.gerrit.client.extensions.TopMenuItem> myMenus) { com.google.gerrit.client.account.Preferences p = createObject().cast(); p.setMyMenus(myMenus); return p; },35225e9774285d9864dbd9bab766e2f0c7cef61d,,create(java.util.List),6,22,"public static com.google.gerrit.client.account.Preferences create(com.google.gerrit.reviewdb.client.AccountGeneralPreferences in, java.util.List<com.google.gerrit.client.extensions.TopMenuItem> myMenus) { com.google.gerrit.client.account.Preferences p = createObject().cast(); if (in == null) { in = com.google.gerrit.reviewdb.client.AccountGeneralPreferences.createDefault(); } p.changesPerPage(in.getMaximumPageSize()); p.showSiteHeader(in.isShowSiteHeader()); p.useFlashClipboard(in.isUseFlashClipboard()); p.downloadScheme(in.getDownloadUrl()); p.downloadCommand(in.getDownloadCommand()); p.copySelfOnEmail(in.isCopySelfOnEmails()); p.dateFormat(in.getDateFormat()); p.timeFormat(in.getTimeFormat()); p.reversePatchSetOrder(in.isReversePatchSetOrder()); p.showUsernameInReviewCategory(in.isShowUsernameInReviewCategory()); p.relativeDateInChangeTable(in.isRelativeDateInChangeTable()); p.sizeBarInChangeTable(in.isSizeBarInChangeTable()); p.commentVisibilityStrategy(in.getCommentVisibilityStrategy()); p.diffView(in.getDiffView()); p.changeScreen(in.getChangeScreen()); p.setMyMenus(myMenus); return p; }",00d9d5ff9f843ce1da137c62b0d23c8af270c488,"create(com.google.gerrit.reviewdb.client.AccountGeneralPreferences,java.util.List)",6679,75,315
74218,gerrit-server_src_test_java_com_google_gerrit_server_notedb_ChangeNotesParserTest.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void parsePatchSetGroups() throws java.lang.Exception { assertParseSucceeds((""Update change\n"" + ((((""\n"" + ""Patch-set: 1\n"") + ""Branch: refs/heads/master\n"") + ""Commit: abcd1234abcd1234abcd1234abcd1234abcd1234\n"") + ""Groups: a,b,c\n""))); assertParseFails((""Update change\n"" + (((""\n"" + ""Patch-set: 1\n"") + ""Branch: refs/heads/master\n"") + ""Groups: a,b,c\n""))); assertParseFails((""Update change\n"" + (((((""\n"" + ""Patch-set: 1\n"") + ""Branch: refs/heads/master\n"") + ""Commit: abcd1234abcd1234abcd1234abcd1234abcd1234\n"") + ""Groups: a,b,c\n"") + ""Groups: d,e,f\n""))); }",913ed597f73ab312c50e9ad8c9833b356dca7dac,,parsePatchSetGroups(),6,16,"@org.junit.Test public void parsePatchSetGroups() throws java.lang.Exception { assertParseSucceeds((""Update change\n"" + (((((""\n"" + ""Patch-set: 1\n"") + ""Branch: refs/heads/master\n"") + ""Commit: abcd1234abcd1234abcd1234abcd1234abcd1234\n"") + ""Subject: Change subject\n"") + ""Groups: a,b,c\n""))); assertParseFails((""Update change\n"" + ((((""\n"" + ""Patch-set: 1\n"") + ""Branch: refs/heads/master\n"") + ""Subject: Change subject\n"") + ""Groups: a,b,c\n""))); assertParseFails((""Update change\n"" + ((((((""\n"" + ""Patch-set: 1\n"") + ""Branch: refs/heads/master\n"") + ""Commit: abcd1234abcd1234abcd1234abcd1234abcd1234\n"") + ""Subject: Change subject\n"") + ""Groups: a,b,c\n"") + ""Groups: d,e,f\n""))); }",e0992b074ddc91b36eb5730418673ffbecad71c1,parsePatchSetGroups(),93273,231,259
93409,gerrit-server_src_main_java_com_google_gerrit_server_account_ExternalId.java,,,,"private static void invalidConfig(java.lang.String noteId, java.lang.String message) throws org.eclipse.jgit.errors.ConfigInvalidException { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format(""Invalid external id config for note %s: %s"", noteId, message)); }",db7f435ae5b7e8014c8857bc682e311029f41718,,"invalidConfig(java.lang.String,java.lang.String)",27,14,"private static org.eclipse.jgit.errors.ConfigInvalidException invalidConfig(java.lang.String noteId, java.lang.String message) { return new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format(""Invalid external id config for note %s: %s"", noteId, message)); }",69d9a73e9b4a4efed3f246a52f42496a73113c55,"invalidConfig(java.lang.String,java.lang.String)",179503,76,74
79546,gerrit-server_src_main_java_com_google_gerrit_server_api_accounts_AccountsImpl.java,1.0,@java.lang.Override public com.google.gerrit.server.api.accounts.SuggestAccountsRequest suggestAccounts(java.lang.String query) throws com.google.gerrit.extensions.restapi.RestApiException { return suggestAccounts().withQuery(query); },76b1a4ee6b6fb578af710229dfb84af5e575c437,@java.lang.Override @java.lang.Deprecated public com.google.gerrit.server.api.accounts.SuggestAccountsRequest suggestAccounts(java.lang.String query) throws com.google.gerrit.extensions.restapi.RestApiException { return suggestAccounts().withQuery(query); },caf6472fe1d40b62a0400df6f3710bdf474efbf5,suggestAccounts(java.lang.String),suggestAccounts(java.lang.String),5,1,@java.lang.Override public com.google.gerrit.server.api.accounts.SuggestAccountsRequest suggestAccounts(java.lang.String query) throws com.google.gerrit.extensions.restapi.RestApiException { return suggestAccounts().withQuery(query); },76b1a4ee6b6fb578af710229dfb84af5e575c437,suggestAccounts(java.lang.String),11020,65,59
91064,src_main_java_com_cisco_gerrit_plugins_slack_config_ProjectConfig.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean shouldNotifyOnChangeMerged() { return notifyOnChangeMerged; },3ab4ae5282c8c565ab900279ee1eda95dcd864bd,,shouldNotifyOnChangeMerged(),5,7,public boolean shouldPublishOnChangeMerged() { return publishOnChangeMerged; },cf929ed7f991e4400721427e837b889acfebf535,shouldPublishOnChangeMerged(),140450,16,16
48044,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,36.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange2(revision.getParentKey(), java.lang.String.valueOf(revision.get()))); }",8eb6c678ed1bb5b3e2c9ec51ca3e10fc86446d8f,,onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),2,9,@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { upToChange().run(); },a2b579ce5a0c8b9145ed1d3bb09ba2d09e89d132,onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),209396,79,37
42392,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeOp.java,27.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean isDuplicate(com.google.gerrit.reviewdb.client.ChangeMessage msg) { try { com.google.gerrit.reviewdb.client.ChangeMessage last = com.google.common.collect.Iterables.getLast(db.changeMessages().byChange(msg.getPatchSetId().getParentKey()), null); if (last != null) { long lastMs = last.getWrittenOn().getTime(); long msgMs = msg.getWrittenOn().getTime(); if ((((last.getAuthor()) == null) && (com.google.common.base.Objects.equal(last.getMessage(), msg.getMessage()))) && ((msgMs - lastMs) > (com.google.gerrit.server.git.MergeOp.DUPLICATE_MESSAGE_INTERVAL))) { return true; } } } catch (com.google.gwtorm.server.OrmException err) { com.google.gerrit.server.git.MergeOp.log.warn(""Cannot check previous merge failure message"", err); } return false; }",4331856ea27de9764c5e47fae4bbb806a753e853,,isDuplicate(com.google.gerrit.reviewdb.client.ChangeMessage),5,15,"private boolean isDuplicate(com.google.gerrit.reviewdb.client.ChangeMessage msg) { try { com.google.gerrit.reviewdb.client.ChangeMessage last = com.google.common.collect.Iterables.getLast(db.changeMessages().byChange(msg.getPatchSetId().getParentKey()), null); if (last != null) { long lastMs = last.getWrittenOn().getTime(); long msgMs = msg.getWrittenOn().getTime(); if (((com.google.common.base.Objects.equal(last.getAuthor(), msg.getAuthor())) && (com.google.common.base.Objects.equal(last.getMessage(), msg.getMessage()))) && ((msgMs - lastMs) < (com.google.gerrit.server.git.MergeOp.DUPLICATE_MESSAGE_INTERVAL))) { return true; } } } catch (com.google.gwtorm.server.OrmException err) { com.google.gerrit.server.git.MergeOp.log.warn(""Cannot check previous merge failure message"", err); } return false; }",fc3d0ecaac8e0b8af5e1cd3b57afd5421bccd2ef,isDuplicate(com.google.gerrit.reviewdb.client.ChangeMessage),107639,227,238
70571,gerrit-server_src_test_java_com_google_gerrit_server_git_DestinationListTest.java,,,,"@org.junit.Test public void testAsText() throws java.lang.Exception { java.lang.String text = ((com.google.gerrit.server.git.DestinationListTest.HEADER_PROPER) + ""#\n"") + (com.google.gerrit.server.git.DestinationListTest.F_PROPER); com.google.gerrit.server.git.DestinationList dl = new com.google.gerrit.server.git.DestinationList(); dl.parseLabel(com.google.gerrit.server.git.DestinationListTest.LABEL, com.google.gerrit.server.git.DestinationListTest.F_SIMPLE, null); java.lang.String asText = dl.asText(com.google.gerrit.server.git.DestinationListTest.LABEL); assertThat(text).isEqualTo(asText); dl.parseLabel(com.google.gerrit.server.git.DestinationListTest.LABEL2, asText, null); java.lang.String asText2 = dl.asText(com.google.gerrit.server.git.DestinationListTest.LABEL2); assertThat(text).isEqualTo(asText2); }",135006afc4078e632b297a2a8f70151157d4638c,,testAsText(),3,6,"@org.junit.Test public void testAsText() throws java.lang.Exception { java.lang.String text = ((com.google.gerrit.server.git.DestinationListTest.HEADER_PROPER) + ""#\n"") + (com.google.gerrit.server.git.DestinationListTest.F_PROPER); com.google.gerrit.server.git.DestinationList dl = new com.google.gerrit.server.git.DestinationList(); dl.parseLabel(com.google.gerrit.server.git.DestinationListTest.LABEL, com.google.gerrit.server.git.DestinationListTest.F_SIMPLE, null); java.lang.String asText = dl.asText(com.google.gerrit.server.git.DestinationListTest.LABEL); assertThat(text).isEqualTo(asText); dl.parseLabel(com.google.gerrit.server.git.DestinationListTest.LABEL2, asText, null); assertThat(text).isEqualTo(dl.asText(com.google.gerrit.server.git.DestinationListTest.LABEL2)); }",ee15031d1bc9d9de290a290fd94cc16eb65d2af7,testAsText(),124325,251,240
74218,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,30.0,@java.lang.Override public com.google.gerrit.reviewdb.client.PatchSet update(com.google.gerrit.reviewdb.client.PatchSet ps) { java.util.List<java.lang.String> oldGroups = ps.getGroups(); if (oldGroups == null) { if ((groups) == null) { return null; } } else if (com.google.common.collect.Sets.newHashSet(oldGroups).equals(groups)) { return null; } ps.setGroups(groups); return ps; },b4c23b670dce310e687ba124276177cec17ab2c9,"@java.lang.Override public boolean updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.get(ctx.getDb(), ctx.getNotes(), psId); java.util.List<java.lang.String> oldGroups = ps.getGroups(); if (oldGroups == null) { if ((groups) == null) { return false; } } else if (com.google.common.collect.Sets.newHashSet(oldGroups).equals(groups)) { return false; } psUtil.setGroups(ps, ctx.getUpdate(psId), groups); db.patchSets().update(java.util.Collections.singleton(ps)); return true; }",7ebbf482aec652e678fd5fc79e99d51d62ee2801,update(com.google.gerrit.reviewdb.client.PatchSet),updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext),6,74,"@java.lang.Override public boolean updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.get(ctx.getDb(), ctx.getNotes(), psId); java.util.List<java.lang.String> oldGroups = ps.getGroups(); if (oldGroups == null) { if ((groups) == null) { return false; } } else if (com.google.common.collect.Sets.newHashSet(oldGroups).equals(groups)) { return false; } psUtil.setGroups(ctx.getDb(), ctx.getUpdate(psId), ps, groups); return true; }",5265bc085bfd55fb5a113cc3299313ffb39b690b,updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext),93222,184,171
110915,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_notedb_OnlineNoteDbMigrationIT.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void enableSequencesWithGap() throws java.lang.Exception { testEnableSequences(null, 503, ""513""); }",1a39ba6bda01d4b77e04032a42738e760cbccf78,,enableSequencesWithGap(),6,0,"@org.junit.Test public void enableSequencesWithGap() throws java.lang.Exception { testEnableSequences((-1), 502, ""512""); }",08be39700e5f20a3a97801fde5c21b88bf594de6,enableSequencesWithGap(),92814,33,33
47325,gerrit-server_src_test_java_com_google_gerrit_server_query_change_IndexRewriteTest.java,29.0,@java.lang.Override public com.google.gerrit.server.query.change.ChangeDataSource getSource(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p) throws com.google.gerrit.server.query.QueryParseException { return new com.google.gerrit.server.query.change.IndexRewriteTest.Source(); },1f9d3c643abf1b2039e59450884dfde541bcb67d,@java.lang.Override public com.google.gerrit.server.query.change.ChangeDataSource getSource(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p) { return new com.google.gerrit.server.query.change.IndexRewriteTest.Source(); },119dc2aa6d80979b2ac138fad005b9bc0bd21b1c,getSource(com.google.gerrit.server.query.Predicate),getSource(com.google.gerrit.server.query.Predicate),9,32,@java.lang.Override public com.google.gerrit.server.query.change.ChangeDataSource getSource(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p) throws com.google.gerrit.server.query.QueryParseException { return new com.google.gerrit.server.index.IndexRewriteTest.Source(p); },8c079a729c727dbf7cceab00bdb5bf5f94278e2f,getSource(com.google.gerrit.server.query.Predicate),208757,79,93
35228,gerrit-httpd_src_main_java_com_google_gerrit_httpd_plugins_HttpPluginServlet.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void sendMarkdownAsHtml(java.util.jar.JarFile jar, java.util.jar.JarEntry entry, java.lang.String pluginName, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { byte[] rawmd = com.google.gerrit.httpd.plugins.HttpPluginServlet.readWholeEntry(jar, entry); java.lang.String encoding = null; java.util.jar.Attributes atts = entry.getAttributes(); if (atts != null) { encoding = com.google.common.base.Strings.emptyToNull(atts.getValue(""Character-Encoding"")); } java.lang.String txtmd = org.eclipse.jgit.util.RawParseUtils.decode(java.nio.charset.Charset.forName((encoding != null ? encoding : ""UTF-8"")), rawmd); long time = entry.getTime(); if (0 < time) { res.setDateHeader(""Last-Modified"", time); } sendMarkdownAsHtml(txtmd, pluginName, res); }",87bc7521bb7b57c6b961eb265d378a801faa859f,,"sendMarkdownAsHtml(java.util.jar.JarFile,java.util.jar.JarEntry,java.lang.String,javax.servlet.http.HttpServletResponse)",8,21,"private void sendMarkdownAsHtml(java.util.jar.JarFile jar, java.util.jar.JarEntry entry, java.lang.String pluginName, com.google.gerrit.httpd.plugins.HttpPluginServlet.ResourceKey key, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { byte[] rawmd = com.google.gerrit.httpd.plugins.HttpPluginServlet.readWholeEntry(jar, entry); java.lang.String encoding = null; java.util.jar.Attributes atts = entry.getAttributes(); if (atts != null) { encoding = com.google.common.base.Strings.emptyToNull(atts.getValue(""Character-Encoding"")); } java.lang.String txtmd = org.eclipse.jgit.util.RawParseUtils.decode(java.nio.charset.Charset.forName((encoding != null ? encoding : ""UTF-8"")), rawmd); long time = entry.getTime(); if (0 < time) { res.setDateHeader(""Last-Modified"", time); } sendMarkdownAsHtml(txtmd, pluginName, key, res); }",d0e227e59608410408e1d9e18d114e4288abc38d,"sendMarkdownAsHtml(java.util.jar.JarFile,java.util.jar.JarEntry,java.lang.String,com.google.gerrit.httpd.plugins.HttpPluginServlet$ResourceKey,javax.servlet.http.HttpServletResponse)",87995,223,245
72338,gerrit-server_src_main_java_com_google_gerrit_common_ChangeHookApiListener.java,,,,"@java.lang.Override public void onChangeAbandoned(com.google.gerrit.extensions.events.ChangeAbandonedListener.Event ev) { try { ch.doChangeAbandonedHook(getChange(ev.getChange()), getAccount(ev.getAbandoner()), getPatchSet(ev.getRevision()), ev.getReason(), db.get()); } catch (com.google.gwtorm.server.OrmException e) { } }",005914f221c5fcfa5397e1d53cb88450f8c786d6,,onChangeAbandoned(com.google.gerrit.extensions.events.ChangeAbandonedListener$Event),43,16,"@java.lang.Override public void onChangeAbandoned(com.google.gerrit.extensions.events.ChangeAbandonedListener.Event ev) { try { com.google.gerrit.server.notedb.ChangeNotes notes = getNotes(ev.getChange()); hooks.doChangeAbandonedHook(notes.getChange(), getAccount(ev.getAbandoner()), getPatchSet(notes, ev.getRevision()), ev.getReason(), db.get()); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.common.ChangeHookApiListener.log.error((""ChangeAbandoned hook failed to run "" + (ev.getChange()._number)), e); } }",e0bd36a7ff64729f8b71f3cd64a163b6729c3719,onChangeAbandoned(com.google.gerrit.extensions.events.ChangeAbandonedListener$Event),204360,107,171
96693,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_mail_MailProcessorIT.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void sendNotificationAfterPersistingComments() throws java.lang.Exception { java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); java.lang.String ts = MailUtil.rfcDateformatter.format(java.time.ZonedDateTime.ofInstant(comments.get(0).updated.toInstant(), java.time.ZoneId.of(""UTC""))); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields(); b.from(user.emailAddress); java.lang.String txt = com.google.gerrit.acceptance.server.mail.MailProcessorIT.newPlaintextBody(((((canonicalWebUrl.get()) + ""#/c/"") + (changeInfo._number)) + ""/1""), ""Test Message"", null, null, null); b.textContent((txt + (com.google.gerrit.acceptance.server.mail.MailProcessorIT.textFooterForChange(changeId, ts)))); sender.clear(); mailProcessor.process(b.build()); assertNotifyTo(admin); }",e851bf08ab3f7196916b0d3c134fe79c7efd1379,,sendNotificationAfterPersistingComments(),2,0,"@org.junit.Test public void sendNotificationAfterPersistingComments() throws java.lang.Exception { java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); assertThat(comments).hasSize(2); java.lang.String ts = MailUtil.rfcDateformatter.format(java.time.ZonedDateTime.ofInstant(comments.get(0).updated.toInstant(), java.time.ZoneId.of(""UTC""))); java.lang.String txt = com.google.gerrit.acceptance.server.mail.MailProcessorIT.newPlaintextBody(((((canonicalWebUrl.get()) + ""#/c/"") + (changeInfo._number)) + ""/1""), ""Test Message"", null, null, null); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields().from(user.emailAddress).textContent((txt + (com.google.gerrit.acceptance.server.mail.MailProcessorIT.textFooterForChange(changeId, ts)))); sender.clear(); mailProcessor.process(b.build()); assertNotifyTo(admin); }",7b62efee082c9203de1e362c9f9572f4cabf130c,sendNotificationAfterPersistingComments(),133903,306,309
40291,gerrit-server_src_main_java_com_google_gerrit_server_git_VersionedMetaData.java,12.0,"@java.lang.Override public org.eclipse.jgit.revwalk.RevCommit commitAt(org.eclipse.jgit.lib.ObjectId expected) throws java.io.IOException { if (com.google.common.base.Objects.equal(src, expected)) { return revision; } org.eclipse.jgit.lib.RefUpdate ru = db.updateRef(getRefName()); if (expected != null) { ru.setExpectedOldObjectId(expected); } else { ru.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); } ru.setNewObjectId(src); ru.disableRefLog(); inserter.flush(); switch (ru.update(rw)) { case NEW : case FAST_FORWARD : revision = rw.parseCommit(ru.getNewObjectId()); update.replicate(ru.getName()); return revision; default : throw new java.io.IOException((((((""Cannot update "" + (ru.getName())) + "" in "") + (db.getDirectory())) + "": "") + (ru.getResult()))); } }",d5fee0b195418f6e97216b30d485a06d7cb327c0,"@java.lang.Override public org.eclipse.jgit.revwalk.RevCommit commitAt(org.eclipse.jgit.lib.ObjectId expected) throws java.io.IOException { if (com.google.common.base.Objects.equal(src, expected)) { return revision; } org.eclipse.jgit.lib.RefUpdate ru = db.updateRef(getRefName()); if (expected != null) { ru.setExpectedOldObjectId(expected); } else { ru.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); } ru.setNewObjectId(src); ru.disableRefLog(); inserter.flush(); switch (ru.update(rw)) { case NEW : case FAST_FORWARD : revision = rw.parseCommit(ru.getNewObjectId()); update.replicate(ru.getName(), ru.getOldObjectId().name(), ru.getNewObjectId().name()); return revision; default : throw new java.io.IOException((((((""Cannot update "" + (ru.getName())) + "" in "") + (db.getDirectory())) + "": "") + (ru.getResult()))); } }",57b01d48b3c500e24f9f6e9d53d8d87faf6e848a,commitAt(org.eclipse.jgit.lib.ObjectId),commitAt(org.eclipse.jgit.lib.ObjectId),10,12,"@java.lang.Override public org.eclipse.jgit.revwalk.RevCommit commitAt(org.eclipse.jgit.lib.ObjectId expected) throws java.io.IOException { if (com.google.common.base.Objects.equal(src, expected)) { return revision; } org.eclipse.jgit.lib.RefUpdate ru = db.updateRef(getRefName()); if (expected != null) { ru.setExpectedOldObjectId(expected); } else { ru.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); } ru.setNewObjectId(src); ru.disableRefLog(); inserter.flush(); switch (ru.update(rw)) { case NEW : case FAST_FORWARD : revision = rw.parseCommit(ru.getNewObjectId()); update.replicate(ru); return revision; default : throw new java.io.IOException((((((""Cannot update "" + (ru.getName())) + "" in "") + (db.getDirectory())) + "": "") + (ru.getResult()))); } }",8b58f2b048affd24b0f7b7d66053ecf139533b8b,commitAt(org.eclipse.jgit.lib.ObjectId),61625,258,239
51821,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen2.java,2.0,"@java.lang.Override public void onShowView() { super.onShowView(); related.setMaxHeight(commit.getElement().getParentElement().getOffsetHeight()); if (openReplyBox) { onReply(); } else { java.lang.String prior = com.google.gerrit.client.Gerrit.getPriorView(); if ((prior != null) && (prior.startsWith(""/c/""))) { scrollToPath(prior.substring(3)); } } startPoller(); }",a5a235eb6a3355ed91ed88d8e1660abb9ce0a8d9,"@java.lang.Override public void onShowView() { super.onShowView(); commit.onShowView(); if (openReplyBox) { onReply(); } else { java.lang.String prior = com.google.gerrit.client.Gerrit.getPriorView(); if ((prior != null) && (prior.startsWith(""/c/""))) { scrollToPath(prior.substring(3)); } } startPoller(); }",1441ab6453b5310ecb3e308cf133663b2eafc642,onShowView(),onShowView(),2,2,"@java.lang.Override public void onShowView() { super.onShowView(); related.setMaxHeight(commit.getElement().getParentElement().getOffsetHeight()); if (openReplyBox) { onReply(); } else { java.lang.String prior = com.google.gerrit.client.Gerrit.getPriorView(); if ((prior != null) && (prior.startsWith(""/c/""))) { scrollToPath(prior.substring(3)); } } startPoller(); }",a5a235eb6a3355ed91ed88d8e1660abb9ce0a8d9,onShowView(),93735,94,103
58854,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeUpdate.java,5.0,private boolean isEmpty() { return ((((((approvals.isEmpty()) && (reviewers.isEmpty())) && (commentsForBase.isEmpty())) && (commentsForPs.isEmpty())) && ((status) == null)) && ((submitRecords) == null)) && ((changeMessage) == null); },af9e5f4a7d72e8ddeae20e095aef768670ca72c1,private boolean isEmpty() { return ((((((((subject) == null) && (approvals.isEmpty())) && (reviewers.isEmpty())) && (commentsForBase.isEmpty())) && (commentsForPs.isEmpty())) && ((status) == null)) && ((submitRecords) == null)) && ((changeMessage) == null); },d78f561dfc0af7f193dbf82c0bdbe33b988f5226,isEmpty(),isEmpty(),4,26,private boolean isEmpty() { return (((((((approvals.isEmpty()) && ((changeMessage) == null)) && (commentsForBase.isEmpty())) && (commentsForPs.isEmpty())) && (reviewers.isEmpty())) && ((status) == null)) && ((subject) == null)) && ((submitRecords) == null); },b021cc9ecc1ae866810fb144c3dd0a4c3f8d5c47,isEmpty(),65861,75,75
48071,gerrit-server_src_main_java_com_google_gerrit_server_project_ChangeControl.java,33.0,public com.google.gerrit.common.data.LabelTypes getLabelTypes() { return getProjectControl().getLabelTypes(); },86f9be4bb12e4ce2e43dc4b0e78502a2ab4c6436,public com.google.gerrit.common.data.LabelTypes getLabelTypes() { return getRefControl().getLabelTypes(); },c2a5958fc5fa6f43db0737ace1c4d17e1cc2a73b,getLabelTypes(),getLabelTypes(),23,34,"public com.google.gerrit.common.data.LabelTypes getLabelTypes() { java.lang.String destBranch = getChange().getDest().get(); java.util.List<com.google.gerrit.common.data.LabelType> all = getProjectControl().getLabelTypes().getLabelTypes(); java.util.List<com.google.gerrit.common.data.LabelType> r = com.google.common.collect.Lists.newArrayListWithCapacity(all.size()); for (com.google.gerrit.common.data.LabelType l : all) { java.util.List<java.lang.String> refs = l.getRefPatterns(); if (refs == null) { r.add(l); } else { for (java.lang.String refPattern : refs) { if ((com.google.gerrit.common.data.RefConfigSection.isValid(refPattern)) && (match(destBranch, refPattern))) { r.add(l); break; } } } } return new com.google.gerrit.common.data.LabelTypes(r); }",673be99630aca11e62fdc07c8ac0d6e2541a2f30,getLabelTypes(),103695,28,246
147210,java_com_google_gerrit_server_account_PutName.java,1.0,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.common.NameInput input) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.common.NameInput(); } if (!(realm.allowsEdit(AccountFieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""realm does not allow editing name""); } java.lang.String newName = input.name; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( a) -> a.setFullName(newName)); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return com.google.common.base.Strings.isNullOrEmpty(account.getFullName()) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getFullName()); }",189f2a025e7d5062530b443b5573da4bc9e2f413,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.common.NameInput input) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.common.NameInput(); } if (!(realm.allowsEdit(AccountFieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""realm does not allow editing name""); } java.lang.String newName = input.name; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> u.update().setFullName(com.google.common.base.Strings.nullToEmpty(newName))); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return com.google.common.base.Strings.isNullOrEmpty(account.getFullName()) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getFullName()); }",7cb1e898915605854642e5c0ff824ca64b310295,"apply(com.google.gerrit.server.IdentifiedUser,com.google.gerrit.extensions.common.NameInput)","apply(com.google.gerrit.server.IdentifiedUser,com.google.gerrit.extensions.common.NameInput)",10,1,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.common.NameInput input) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.common.NameInput(); } if (!(realm.allowsEdit(AccountFieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""realm does not allow editing name""); } java.lang.String newName = input.name; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> u.setFullName(newName)); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return com.google.common.base.Strings.isNullOrEmpty(account.getFullName()) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getFullName()); }",0fedf2cfeea5e4e9db1d214b2f9577de7d99f747,"apply(com.google.gerrit.server.IdentifiedUser,com.google.gerrit.extensions.common.NameInput)",62693,325,310
79546,gerrit-server_src_main_java_com_google_gerrit_server_api_accounts_AccountsImpl.java,0.0,@java.lang.Override public com.google.gerrit.server.api.accounts.SuggestAccountsRequest suggestAccounts() throws com.google.gerrit.extensions.restapi.RestApiException { return new com.google.gerrit.server.api.accounts.SuggestAccountsRequest() { @java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> get() throws com.google.gerrit.extensions.restapi.RestApiException { return com.google.gerrit.server.api.accounts.AccountsImpl.this.suggestAccounts(this); } }; },05c69069f3fe8b339e69377ba38c48fc11198efe,@java.lang.Override @java.lang.Deprecated public com.google.gerrit.server.api.accounts.SuggestAccountsRequest suggestAccounts() throws com.google.gerrit.extensions.restapi.RestApiException { return new com.google.gerrit.server.api.accounts.SuggestAccountsRequest() { @java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> get() throws com.google.gerrit.extensions.restapi.RestApiException { return com.google.gerrit.server.api.accounts.AccountsImpl.this.suggestAccounts(this); } }; },d418beb5625ffb3e2550a7569950abde7a59bc2d,suggestAccounts(),suggestAccounts(),5,0,@java.lang.Override public com.google.gerrit.server.api.accounts.SuggestAccountsRequest suggestAccounts() throws com.google.gerrit.extensions.restapi.RestApiException { return new com.google.gerrit.server.api.accounts.SuggestAccountsRequest() { @java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> get() throws com.google.gerrit.extensions.restapi.RestApiException { return com.google.gerrit.server.api.accounts.AccountsImpl.this.suggestAccounts(this); } }; },05c69069f3fe8b339e69377ba38c48fc11198efe,suggestAccounts(),11023,141,135
67846,gerrit-gwtui_src_main_java_com_google_gerrit_client_Gerrit.java,0.0,"@java.lang.Override public void onSuccess(final com.google.gerrit.common.data.HostPageData result) { com.google.gwt.dom.client.Document.get().getElementById(""gerrit_hostpagedata"").removeFromParent(); com.google.gerrit.client.Gerrit.myConfig = result.config; com.google.gerrit.client.Gerrit.myTheme = result.theme; com.google.gerrit.client.Gerrit.isNoteDbEnabled = result.isNoteDbEnabled; if ((result.account) != null) { com.google.gerrit.client.Gerrit.myAccount = result.account; com.google.gerrit.client.Gerrit.xGerritAuth = result.xGerritAuth; } if ((result.accountDiffPref) != null) { com.google.gerrit.client.Gerrit.myAccountDiffPref = result.accountDiffPref; com.google.gerrit.client.Gerrit.applyUserPreferences(); } RpcStatus.INSTANCE = new com.google.gerrit.client.RpcStatus(); com.google.gerrit.client.config.ConfigServerApi.serverInfo(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.config.ServerInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.config.ServerInfo info) { com.google.gerrit.client.Gerrit.myServerInfo = info; onModuleLoad2(result); } }); }",d18829dacb90e3d0b732704992b8a127c3841ac2,"@java.lang.Override public void onSuccess(final com.google.gerrit.common.data.HostPageData result) { com.google.gwt.dom.client.Document.get().getElementById(""gerrit_hostpagedata"").removeFromParent(); com.google.gerrit.client.Gerrit.myTheme = result.theme; com.google.gerrit.client.Gerrit.isNoteDbEnabled = result.isNoteDbEnabled; if ((result.account) != null) { com.google.gerrit.client.Gerrit.myAccount = result.account; com.google.gerrit.client.Gerrit.xGerritAuth = result.xGerritAuth; } if ((result.accountDiffPref) != null) { com.google.gerrit.client.Gerrit.myAccountDiffPref = result.accountDiffPref; com.google.gerrit.client.Gerrit.applyUserPreferences(); } RpcStatus.INSTANCE = new com.google.gerrit.client.RpcStatus(); com.google.gerrit.client.config.ConfigServerApi.serverInfo(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.config.ServerInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.config.ServerInfo info) { com.google.gerrit.client.Gerrit.myServerInfo = info; onModuleLoad2(result); } }); }",727224e17e0fccf972ecd15dd6523be0594ead84,onSuccess(com.google.gerrit.common.data.HostPageData),onSuccess(com.google.gerrit.common.data.HostPageData),16,0,"@java.lang.Override public void onSuccess(final com.google.gerrit.common.data.HostPageData result) { com.google.gwt.dom.client.Document.get().getElementById(""gerrit_hostpagedata"").removeFromParent(); com.google.gerrit.client.Gerrit.myTheme = result.theme; com.google.gerrit.client.Gerrit.isNoteDbEnabled = result.isNoteDbEnabled; if ((result.account) != null) { com.google.gerrit.client.Gerrit.myAccount = result.account; com.google.gerrit.client.Gerrit.xGerritAuth = result.xGerritAuth; } if ((result.accountDiffPref) != null) { com.google.gerrit.client.Gerrit.myAccountDiffPref = result.accountDiffPref; com.google.gerrit.client.Gerrit.applyUserPreferences(); } onModuleLoad2(result); }",08a45537369ad7a14c49cd542b64129904927aae,onSuccess(com.google.gerrit.common.data.HostPageData),173340,336,220
140535,java_com_google_gerrit_server_CommentsUtil.java,22.0,"public static void setCommentRevId(com.google.gerrit.reviewdb.client.Comment c, com.google.gerrit.server.patch.PatchListCache cache, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException { checkArgument(((c.key.patchSetId) == (ps.getId().get())), ""cannot set RevId for patch set %s on comment %s"", ps.getId(), c); if ((c.revId) == null) { try { if ((com.google.gerrit.extensions.client.Side.fromShort(c.side)) == (com.google.gerrit.extensions.client.Side.PARENT)) { if ((c.side) < 0) { c.revId = org.eclipse.jgit.lib.ObjectId.toString(cache.getOldId(change, ps, (-(c.side)))); } else { c.revId = org.eclipse.jgit.lib.ObjectId.toString(cache.getOldId(change, ps, null)); } } else { c.revId = ps.getRevision().get(); } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { throw new com.google.gwtorm.server.OrmException(e); } } }",0560591ec75ff7ea1a941a4da48d144c49b84464,"public static void setCommentRevId(com.google.gerrit.reviewdb.client.Comment c, com.google.gerrit.server.patchlib.PatchListCache cache, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException { checkArgument(((c.key.patchSetId) == (ps.getId().get())), ""cannot set RevId for patch set %s on comment %s"", ps.getId(), c); if ((c.revId) == null) { try { if ((com.google.gerrit.extensions.client.Side.fromShort(c.side)) == (com.google.gerrit.extensions.client.Side.PARENT)) { if ((c.side) < 0) { c.revId = org.eclipse.jgit.lib.ObjectId.toString(cache.getOldId(change, ps, (-(c.side)))); } else { c.revId = org.eclipse.jgit.lib.ObjectId.toString(cache.getOldId(change, ps, null)); } } else { c.revId = ps.getRevision().get(); } } catch (com.google.gerrit.server.patchlib.PatchListNotAvailableException e) { throw new com.google.gwtorm.server.OrmException(e); } } }",bd82ee3a69b0993b8bd7dddb4738d267c56f968a,"setCommentRevId(com.google.gerrit.reviewdb.client.Comment,com.google.gerrit.server.patch.PatchListCache,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet)","setCommentRevId(com.google.gerrit.reviewdb.client.Comment,com.google.gerrit.server.patchlib.PatchListCache,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet)",11,10,"public static void setCommentRevId(com.google.gerrit.reviewdb.client.Comment c, com.google.gerrit.server.diff.PatchListCache cache, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException { checkArgument(((c.key.patchSetId) == (ps.getId().get())), ""cannot set RevId for patch set %s on comment %s"", ps.getId(), c); if ((c.revId) == null) { try { if ((com.google.gerrit.extensions.client.Side.fromShort(c.side)) == (com.google.gerrit.extensions.client.Side.PARENT)) { if ((c.side) < 0) { c.revId = org.eclipse.jgit.lib.ObjectId.toString(cache.getOldId(change, ps, (-(c.side)))); } else { c.revId = org.eclipse.jgit.lib.ObjectId.toString(cache.getOldId(change, ps, null)); } } else { c.revId = ps.getRevision().get(); } } catch (com.google.gerrit.server.diff.PatchListNotAvailableException e) { throw new com.google.gwtorm.server.OrmException(e); } } }",5a70cc4a7228777fe5b6b12cd411b6a04d019b42,"setCommentRevId(com.google.gerrit.reviewdb.client.Comment,com.google.gerrit.server.diff.PatchListCache,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet)",15078,320,318
92438,gerrit-server_src_main_java_com_google_gerrit_server_change_NotifyUtil.java,,,,"public com.google.common.collect.Multimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> resolveAccounts(@com.google.gerrit.common.Nullable java.util.Map<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.extensions.api.changes.NotifyInfo> notifyDetails) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (com.google.gerrit.server.change.NotifyUtil.isNullOrEmpty(notifyDetails)) { return null; } com.google.common.collect.Multimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> m = null; for (java.util.Map.Entry<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.extensions.api.changes.NotifyInfo> e : notifyDetails.entrySet()) { java.util.List<java.lang.String> accounts = e.getValue().accounts; if (accounts != null) { if (m == null) { m = com.google.common.collect.ArrayListMultimap.create(); } m.putAll(e.getKey(), find(dbProvider.get(), accounts)); } } return m; }",276cdf14115134d68899902be75f4c37fb9f2bfb,,resolveAccounts(java.util.Map),3,3,"public com.google.common.collect.Multimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> resolveAccounts(@com.google.gerrit.common.Nullable java.util.Map<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.extensions.api.changes.NotifyInfo> notifyDetails) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (com.google.gerrit.server.change.NotifyUtil.isNullOrEmpty(notifyDetails)) { return com.google.common.collect.ImmutableListMultimap.of(); } com.google.common.collect.Multimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> m = null; for (java.util.Map.Entry<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.extensions.api.changes.NotifyInfo> e : notifyDetails.entrySet()) { java.util.List<java.lang.String> accounts = e.getValue().accounts; if (accounts != null) { if (m == null) { m = com.google.common.collect.ArrayListMultimap.create(); } m.putAll(e.getKey(), find(dbProvider.get(), accounts)); } } return m != null ? m : com.google.common.collect.ImmutableListMultimap.of(); }",6bc72367dfdab4378a07b2d74ead37e9d563dc21,resolveAccounts(java.util.Map),174301,327,356
76474,gerrit-server_src_main_java_com_google_gerrit_server_account_VersionedAuthorizedKeys.java,,,,"public com.google.gerrit.reviewdb.client.AccountSshKey addKey(java.lang.String pub) { checkState(((keys) != null), ""SSH keys not loaded yet""); int seq = (keys.isEmpty()) ? 1 : (keys.lastKey()) + 1; com.google.gerrit.reviewdb.client.AccountSshKey key = new com.google.gerrit.reviewdb.client.AccountSshKey(new com.google.gerrit.reviewdb.client.AccountSshKey.Id(accountId, seq), pub); keys.put(seq, com.google.common.base.Optional.of(key)); return key; }",5b217bbeac3a643e8a99fb576b825c298d832c22,,addKey(java.lang.String),9,22,"private com.google.gerrit.reviewdb.client.AccountSshKey addKey(java.lang.String pub) throws com.google.gerrit.common.errors.InvalidSshKeyException { checkLoaded(); int seq = (keys.size()) + 1; com.google.gerrit.reviewdb.client.AccountSshKey.Id keyId = new com.google.gerrit.reviewdb.client.AccountSshKey.Id(accountId, seq); com.google.gerrit.reviewdb.client.AccountSshKey key = sshKeyCreator.create(keyId, pub); keys.add(com.google.common.base.Optional.of(key)); return key; }",b4d59f45e8f7446e7d01da31aaba8cc24e23c900,addKey(java.lang.String),84811,147,153
80035,gerrit-server_src_main_java_com_google_gerrit_server_change_DeleteVote.java,2.0,"@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) { if ((changeMessage) == null) { return; } voteDeleted.fire(change, ps, newApprovals, oldApprovals, input.notify, changeMessage.getMessage(), ctx.getUser().asIdentifiedUser().getAccount(), ctx.getWhen()); }",8648bdefffac0b48f3c698b9b3ae56ad75320026,"@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) { if ((changeMessage) == null) { return; } voteDeleted.fire(change, ps, newApprovals, oldApprovals, input.notify, changeMessage.getMessage(), ctx.getAccount(), ctx.getWhen()); }",a7bb6cc36afaab75ed9fa877261a49c72dbdb78c,postUpdate(com.google.gerrit.server.git.BatchUpdate.Context),postUpdate(com.google.gerrit.server.git.BatchUpdate.Context),3,2,"@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) { if ((changeMessage) == null) { return; } com.google.gerrit.server.IdentifiedUser user = ctx.getIdentifiedUser(); if ((input.notify.compareTo(NotifyHandling.NONE)) > 0) { try { com.google.gerrit.server.mail.ReplyToChangeSender cm = deleteVoteSenderFactory.create(ctx.getProject(), change.getId()); cm.setFrom(user.getAccountId()); cm.setChangeMessage(changeMessage.getMessage(), ctx.getWhen()); cm.setNotify(input.notify); cm.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.change.DeleteVote.log.error((""Cannot email update for change "" + (change.getId())), e); } } commentAdded.fire(change, ps, user.getAccount(), changeMessage.getMessage(), newApprovals, oldApprovals, ctx.getWhen()); }",74ed219c0af9fa7925ae1bfacaa0fd0554f1fd94,postUpdate(com.google.gerrit.server.git.BatchUpdate.Context),131152,78,230
40151,gerrit-gwtui_src_main_java_com_google_gerrit_client_Dispatcher.java,24.0,"void display(java.lang.String token) { assert token != null; try { try { if (com.google.gerrit.client.Dispatcher.matchPrefix(com.google.gerrit.client.Dispatcher.RELOAD_UI, token)) { com.google.gerrit.client.Dispatcher.wasStartedByReloadUI = true; token = com.google.gerrit.client.Dispatcher.skip(token); } com.google.gerrit.client.Dispatcher.select(token); } finally { com.google.gerrit.client.Dispatcher.wasStartedByReloadUI = false; } } catch (java.lang.RuntimeException err) { com.google.gwt.core.client.GWT.log((""Error parsing history token: "" + token), err); com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); } }",0460737fe6fc9c537f1fa7978088966b16b0a005,"void display(java.lang.String token) { assert token != null; try { try { if (com.google.gerrit.client.Dispatcher.matchPrefix(com.google.gerrit.client.Dispatcher.RELOAD_UI, token)) { com.google.gerrit.client.Dispatcher.wasStartedByReloadUI = true; token = com.google.gerrit.client.Dispatcher.skip(token); } com.google.gerrit.client.Dispatcher.select(token); } finally { com.google.gerrit.client.Dispatcher.wasStartedByReloadUI = false; } } catch (java.lang.RuntimeException err) { err.printStackTrace(); com.google.gwt.core.client.GWT.log((""Error parsing history token: "" + token), err); com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); } }",394afbfe5ad2253c2dd77dea3a6f5bac4b14c148,display(java.lang.String),display(java.lang.String),2,24,"void display(java.lang.String token) { assert token != null; try { try { if (com.google.gerrit.client.Dispatcher.matchPrefix(com.google.gerrit.client.Dispatcher.RELOAD_UI, token)) { com.google.gerrit.client.Dispatcher.wasStartedByReloadUI = true; token = com.google.gerrit.client.Dispatcher.skip(token); } com.google.gerrit.client.Dispatcher.select(token); } finally { com.google.gerrit.client.Dispatcher.wasStartedByReloadUI = false; } } catch (java.lang.RuntimeException err) { com.google.gwt.core.client.GWT.log((""Error parsing history token: "" + token), err); com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); } }",0460737fe6fc9c537f1fa7978088966b16b0a005,display(java.lang.String),214570,203,199
140535,java_com_google_gerrit_server_patchlib_PatchListKey.java,11.0,public com.google.gerrit.server.patch.PatchListKey.Algorithm getAlgorithm() { return algorithm; },22842c3fb37aec8745a605ac78fecf5f181a6d54,public com.google.gerrit.server.patchlib.PatchListKey.Algorithm getAlgorithm() { return algorithm; },8d596334c6824f27c9fa11bbeb0be170fb567c93,getAlgorithm(),getAlgorithm(),11,11,public com.google.gerrit.server.diff.PatchListKey.Algorithm getAlgorithm() { return algorithm; },e66707cffdd1bdf5d75426d3c480c05534441eb8,getAlgorithm(),15548,26,25
37755,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeIfNecessary.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public boolean dryRun(final com.google.gerrit.server.git.CodeReviewCommit mergeTip, final com.google.gerrit.server.git.CodeReviewCommit toMerge) throws com.google.gerrit.server.git.MergeException { return (com.google.gerrit.server.git.MergeUtil.canFastForward(mergeSorter, mergeTip, rw, toMerge)) || (com.google.gerrit.server.git.MergeUtil.canMerge(mergeSorter, repo, useContentMerge, mergeTip, toMerge)); }",ee3c3039a96be6b9090416a8431bb925ebc56cf1,,"dryRun(com.google.gerrit.server.git.CodeReviewCommit,com.google.gerrit.server.git.CodeReviewCommit)",8,0,"@java.lang.Override public boolean dryRun(final com.google.gerrit.server.git.CodeReviewCommit mergeTip, final com.google.gerrit.server.git.CodeReviewCommit toMerge) throws com.google.gerrit.server.git.MergeException { return (com.google.gerrit.server.git.MergeUtil.canFastForward(args.mergeSorter, mergeTip, args.rw, toMerge)) || (com.google.gerrit.server.git.MergeUtil.canMerge(args.mergeSorter, args.repo, args.useContentMerge, mergeTip, toMerge)); }",ec84ca68b9b8977201c16fbae476bac7585b9656,"dryRun(com.google.gerrit.server.git.CodeReviewCommit,com.google.gerrit.server.git.CodeReviewCommit)",69140,127,137
74371,gerrit-server_src_test_java_com_google_gerrit_server_schema_HANATest.java,,,,"@org.junit.Before public void setup() throws org.eclipse.jgit.errors.ConfigInvalidException { config = new org.eclipse.jgit.lib.BlobBasedConfig(null, new byte[0]); config.setString(""database"", null, ""hostname"", ""my.host""); hana = new com.google.gerrit.server.schema.HANA(config); }",e083600c4a444489156a54cb35167370cac37086,,setup(),3,1,"@org.junit.Before public void setup() { config = new org.eclipse.jgit.lib.Config(); config.setString(""database"", null, ""hostname"", ""my.host""); hana = new com.google.gerrit.server.schema.HANA(config); }",0533eb3eb3ce9e1b818c792abbb81128d4fed2fe,setup(),200292,83,63
58869,gerrit-server_src_main_java_com_google_gerrit_server_notedb_AbstractChangeUpdate.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.google.gerrit.server.notedb.BatchMetaDataUpdate openUpdateInBatch(org.eclipse.jgit.lib.BatchRefUpdate bru) throws java.io.IOException { if (migration.write()) { load(); com.google.gerrit.server.git.MetaDataUpdate md = updateFactory.create(getProjectName(), getUser()); md.setAllowEmpty(true); md.setBatch(bru); return super.openUpdate(md); } return new com.google.gerrit.server.notedb.BatchMetaDataUpdate() { @java.lang.Override public void write(org.eclipse.jgit.lib.CommitBuilder commit) { } @java.lang.Override public void write(com.google.gerrit.server.git.VersionedMetaData config, org.eclipse.jgit.lib.CommitBuilder commit) { } @java.lang.Override public org.eclipse.jgit.revwalk.RevCommit createRef(java.lang.String refName) { return null; } @java.lang.Override public void removeRef(java.lang.String refName) { } @java.lang.Override public org.eclipse.jgit.revwalk.RevCommit commit() { return null; } @java.lang.Override public org.eclipse.jgit.revwalk.RevCommit commitAt(org.eclipse.jgit.lib.ObjectId revision) { return null; } @java.lang.Override public void close() { } }; }",b9bb04ad6a23b35ef03c9f0dddbdbf1edc5c87e4,,openUpdateInBatch(org.eclipse.jgit.lib.BatchRefUpdate),12,11,"public com.google.gerrit.server.notedb.BatchMetaDataUpdate openUpdateInBatch(org.eclipse.jgit.lib.BatchRefUpdate bru) throws java.io.IOException { if (migration.write()) { load(); com.google.gerrit.server.git.MetaDataUpdate md = updateFactory.create(getProjectName(), getUser(), bru); md.setAllowEmpty(true); return super.openUpdate(md); } return new com.google.gerrit.server.notedb.BatchMetaDataUpdate() { @java.lang.Override public void write(org.eclipse.jgit.lib.CommitBuilder commit) { } @java.lang.Override public void write(com.google.gerrit.server.git.VersionedMetaData config, org.eclipse.jgit.lib.CommitBuilder commit) { } @java.lang.Override public org.eclipse.jgit.revwalk.RevCommit createRef(java.lang.String refName) { return null; } @java.lang.Override public void removeRef(java.lang.String refName) { } @java.lang.Override public org.eclipse.jgit.revwalk.RevCommit commit() { return null; } @java.lang.Override public org.eclipse.jgit.revwalk.RevCommit commitAt(org.eclipse.jgit.lib.ObjectId revision) { return null; } @java.lang.Override public void close() { } }; }",4d857884b710e0dba32afcc3d2f75521d725af84,openUpdateInBatch(org.eclipse.jgit.lib.BatchRefUpdate),205351,321,316
64035,gerrit-httpd_src_main_java_com_google_gerrit_httpd_restapi_RestApiServlet.java,10.0,"@java.lang.Override public void writeTo(java.io.OutputStream out) throws java.io.IOException { java.io.OutputStream e = com.google.common.io.BaseEncoding.base64().encodingStream(new java.io.OutputStreamWriter(out, java.nio.charset.StandardCharsets.ISO_8859_1)); src.writeTo(e); e.flush(); }",929270b7e6f568908ae55d969456facde47475ac,"@java.lang.Override public void writeTo(java.io.OutputStream out) throws java.io.IOException { java.io.OutputStream e = com.google.common.io.BaseEncoding.base64().encodingStream(new java.io.OutputStreamWriter(out, java.nio.charset.StandardCharsets.ISO_8859_1)); src.writeTo(e); e.flush(); e.close(); }",2927ae7299ada0bd5603b630fb06e9f4747c3425,writeTo(java.io.OutputStream),writeTo(java.io.OutputStream),5,10,"@java.lang.Override public void writeTo(java.io.OutputStream out) throws java.io.IOException { try (java.io.OutputStreamWriter w = new java.io.OutputStreamWriter(out, java.nio.charset.StandardCharsets.ISO_8859_1);java.io.OutputStream e = com.google.common.io.BaseEncoding.base64().encodingStream(w)) { src.writeTo(e); e.flush(); } }",c0b5d51bf85140c3cfed7d726abc44a841c160dc,writeTo(java.io.OutputStream),6985,87,96
61604,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_PreferencesBox.java,3.0,@java.lang.Override public void onSuccess(com.google.gerrit.client.account.DiffPreferences result) { com.google.gerrit.reviewdb.client.AccountDiffPreference p = com.google.gerrit.client.Gerrit.getAccountDiffPreference(); if (p == null) { p = com.google.gerrit.reviewdb.client.AccountDiffPreference.createDefault(com.google.gerrit.client.Gerrit.getUserAccount().getId()); } result.copyTo(p); com.google.gerrit.client.Gerrit.setAccountDiffPreference(p); },88bac45a8595a254ec5e11fb4a481acff2c9cd7f,@java.lang.Override public void onSuccess(com.google.gerrit.client.account.DiffPreferences result) { com.google.gerrit.extensions.common.DiffPreferencesInfo p = com.google.gerrit.client.Gerrit.getDiffPreferences(); result.copyTo(p); com.google.gerrit.client.Gerrit.setDiffPreferences(p); },66ca721b861fa3e3b39cfb7a78ee4d7d8efb07f0,onSuccess(com.google.gerrit.client.account.DiffPreferences),onSuccess(com.google.gerrit.client.account.DiffPreferences),40,3,@java.lang.Override public void onSuccess(com.google.gerrit.client.account.DiffPreferences result) { com.google.gerrit.extensions.client.DiffPreferencesInfo p = com.google.gerrit.client.Gerrit.getDiffPreferences(); result.copyTo(p); com.google.gerrit.client.Gerrit.setDiffPreferences(p); },01b82ef323c28b898578daea3587dee536644a46,onSuccess(com.google.gerrit.client.account.DiffPreferences),127718,85,85
41837,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_GerritServer.java,,,,"static com.google.gerrit.acceptance.GerritServer start(final com.google.gerrit.acceptance.GerritSite site) throws java.lang.Exception { final java.util.concurrent.CyclicBarrier serverStarted = new java.util.concurrent.CyclicBarrier(2); final com.google.gerrit.pgm.Daemon daemon = new com.google.gerrit.pgm.Daemon(new java.lang.Runnable() { public void run() { try { serverStarted.await(); } catch (java.lang.InterruptedException e) { throw new java.lang.RuntimeException(e); } catch (java.util.concurrent.BrokenBarrierException e) { throw new java.lang.RuntimeException(e); } } }); java.util.concurrent.ExecutorService daemonService = java.util.concurrent.Executors.newSingleThreadExecutor(); daemonService.submit(new java.util.concurrent.Callable<java.lang.Void>() { public java.lang.Void call() throws java.lang.Exception { daemon.main(new java.lang.String[]{ ""-d"", site.getPath(), ""--headless"" }); return null; } }); serverStarted.await(); com.google.inject.Injector i = com.google.gerrit.acceptance.GerritServer.createTestInjector(daemon); return i.getInstance(com.google.gerrit.acceptance.GerritServer.Factory.class).create(daemon, daemonService); }",f9b3fd550b446a143c0006dee861c8bdc24149c6,,start(com.google.gerrit.acceptance.GerritSite),2,3,"static com.google.gerrit.acceptance.GerritServer start() throws java.lang.Exception { final java.lang.String sitePath = com.google.gerrit.acceptance.GerritServer.initSite(); final java.util.concurrent.CyclicBarrier serverStarted = new java.util.concurrent.CyclicBarrier(2); final com.google.gerrit.pgm.Daemon daemon = new com.google.gerrit.pgm.Daemon(new java.lang.Runnable() { public void run() { try { serverStarted.await(); } catch (java.lang.InterruptedException e) { throw new java.lang.RuntimeException(e); } catch (java.util.concurrent.BrokenBarrierException e) { throw new java.lang.RuntimeException(e); } } }); java.util.concurrent.ExecutorService daemonService = java.util.concurrent.Executors.newSingleThreadExecutor(); daemonService.submit(new java.util.concurrent.Callable<java.lang.Void>() { public java.lang.Void call() throws java.lang.Exception { int rc = daemon.main(new java.lang.String[]{ ""-d"", sitePath, ""--headless"" }); if (rc != 0) { serverStarted.reset(); } return null; } }); serverStarted.await(); java.lang.System.out.println(""Gerrit Server Started""); com.google.inject.Injector i = com.google.gerrit.acceptance.GerritServer.createTestInjector(daemon); return new com.google.gerrit.acceptance.GerritServer(i, daemon, daemonService); }",13ca1020bed46e02ff6ca47b68b375ea739be152,start(),59988,312,346
60580,src_main_java_com_googlesource_gerrit_plugins_replication_Destination.java,25.0,"boolean wouldPushProject(com.google.gerrit.reviewdb.client.Project.NameKey project) { if ((projects.length) < 1) { return true; } java.lang.String projectName = project.get(); for (final java.lang.String projectMatch : projects) { if (com.googlesource.gerrit.plugins.replication.Destination.isRE(projectMatch)) { if (projectName.matches(projectMatch)) { return true; } } else if (com.googlesource.gerrit.plugins.replication.Destination.isWildcard(projectMatch)) { if (projectName.startsWith(projectMatch.substring(0, ((projectMatch.length()) - 1)))) { return true; } } else { if (projectName.equals(projectMatch)) { return true; } } } return false; }",562bfe597a8e7da7782b7e6810c95b786499d656,"boolean wouldPushProject(com.google.gerrit.reviewdb.client.Project.NameKey project) { try { com.google.gerrit.server.project.ProjectControl pc = projectControlFactory.controlFor(project); if (!(pc.isVisible())) { return false; } } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.replication.Destination.log.warn(java.lang.String.format(""While replicating, project '%s' does not exist!"", project)); } if ((projects.length) < 1) { return true; } java.lang.String projectName = project.get(); for (final java.lang.String projectMatch : projects) { if (com.googlesource.gerrit.plugins.replication.Destination.isRE(projectMatch)) { if (projectName.matches(projectMatch)) { return true; } } else if (com.googlesource.gerrit.plugins.replication.Destination.isWildcard(projectMatch)) { if (projectName.startsWith(projectMatch.substring(0, ((projectMatch.length()) - 1)))) { return true; } } else { if (projectName.equals(projectMatch)) { return true; } } } return false; }",9c204d4959f54083dd0a07101f8320502a76f790,wouldPushProject(com.google.gerrit.reviewdb.client.Project$NameKey),wouldPushProject(com.google.gerrit.reviewdb.client.Project$NameKey),7,26,"boolean wouldPushProject(final com.google.gerrit.reviewdb.client.Project.NameKey project) { if (!(isVisible(project))) { return false; } if ((projects.length) < 1) { return true; } java.lang.String projectName = project.get(); for (final java.lang.String projectMatch : projects) { if (com.googlesource.gerrit.plugins.replication.Destination.isRE(projectMatch)) { if (projectName.matches(projectMatch)) { return true; } } else if (com.googlesource.gerrit.plugins.replication.Destination.isWildcard(projectMatch)) { if (projectName.startsWith(projectMatch.substring(0, ((projectMatch.length()) - 1)))) { return true; } } else { if (projectName.equals(projectMatch)) { return true; } } } return false; }",caf0338edf8269a3d9ef9da48d7e86c031954de4,wouldPushProject(com.google.gerrit.reviewdb.client.Project$NameKey),161507,274,188
70063,gerrit-server_src_main_java_com_google_gerrit_server_account_PostGpgKeys.java,5.0,"private java.util.List<org.bouncycastle.openpgp.PGPPublicKeyRing> readKeys(com.google.gerrit.server.account.PostGpgKeys.Input input) throws com.google.gerrit.extensions.restapi.BadRequestException, java.io.IOException { if (((input.add) == null) || (input.add.isEmpty())) { return com.google.common.collect.ImmutableList.of(); } java.util.List<org.bouncycastle.openpgp.PGPPublicKeyRing> keyRings = new java.util.ArrayList<>(input.add.size()); for (java.lang.String armored : input.add) { try (java.io.InputStream in = new java.io.ByteArrayInputStream(armored.getBytes(java.nio.charset.StandardCharsets.UTF_8));org.bouncycastle.bcpg.ArmoredInputStream ain = new org.bouncycastle.bcpg.ArmoredInputStream(in)) { @java.lang.SuppressWarnings(""unchecked"") java.util.List<java.lang.Object> objs = com.google.common.collect.Lists.newArrayList(new org.bouncycastle.openpgp.bc.BcPGPObjectFactory(ain)); if (((objs.size()) != 1) || (!((objs.get(0)) instanceof org.bouncycastle.openpgp.PGPPublicKeyRing))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""Expected exactly one PUBLIC KEY BLOCK""); } keyRings.add(((org.bouncycastle.openpgp.PGPPublicKeyRing) (objs.get(0)))); } } return keyRings; }",6b290cee55a9018d816529ecc547dc896cb9a60b,"private java.util.List<org.bouncycastle.openpgp.PGPPublicKeyRing> readKeysToAdd(com.google.gerrit.server.account.PostGpgKeys.Input input, java.util.Set<com.google.gerrit.server.git.gpg.Fingerprint> toRemove) throws com.google.gerrit.extensions.restapi.BadRequestException, java.io.IOException { if (((input.add) == null) || (input.add.isEmpty())) { return com.google.common.collect.ImmutableList.of(); } java.util.List<org.bouncycastle.openpgp.PGPPublicKeyRing> keyRings = new java.util.ArrayList<>(input.add.size()); for (java.lang.String armored : input.add) { try (java.io.InputStream in = new java.io.ByteArrayInputStream(armored.getBytes(java.nio.charset.StandardCharsets.UTF_8));org.bouncycastle.bcpg.ArmoredInputStream ain = new org.bouncycastle.bcpg.ArmoredInputStream(in)) { @java.lang.SuppressWarnings(""unchecked"") java.util.List<java.lang.Object> objs = com.google.common.collect.Lists.newArrayList(new org.bouncycastle.openpgp.bc.BcPGPObjectFactory(ain)); if (((objs.size()) != 1) || (!((objs.get(0)) instanceof org.bouncycastle.openpgp.PGPPublicKeyRing))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""Expected exactly one PUBLIC KEY BLOCK""); } org.bouncycastle.openpgp.PGPPublicKeyRing keyRing = ((org.bouncycastle.openpgp.PGPPublicKeyRing) (objs.get(0))); if (toRemove.contains(new com.google.gerrit.server.git.gpg.Fingerprint(keyRing.getPublicKey().getFingerprint()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""Cannot both add and remove key: "" + (keyToString(keyRing.getPublicKey())))); } keyRings.add(keyRing); } } return keyRings; }",2624110ac412482a2465e87a379f21c7cc625928,readKeys(com.google.gerrit.server.account.PostGpgKeys$Input),"readKeysToAdd(com.google.gerrit.server.account.PostGpgKeys$Input,java.util.Set)",13,5,"private java.util.List<org.bouncycastle.openpgp.PGPPublicKeyRing> readKeysToAdd(com.google.gerrit.server.account.PostGpgKeys.Input input, java.util.Set<com.google.gerrit.server.git.gpg.Fingerprint> toRemove) throws com.google.gerrit.extensions.restapi.BadRequestException, java.io.IOException { if (((input.add) == null) || (input.add.isEmpty())) { return com.google.common.collect.ImmutableList.of(); } java.util.List<org.bouncycastle.openpgp.PGPPublicKeyRing> keyRings = new java.util.ArrayList<>(input.add.size()); for (java.lang.String armored : input.add) { try (java.io.InputStream in = new java.io.ByteArrayInputStream(armored.getBytes(java.nio.charset.StandardCharsets.UTF_8));org.bouncycastle.bcpg.ArmoredInputStream ain = new org.bouncycastle.bcpg.ArmoredInputStream(in)) { @java.lang.SuppressWarnings(""unchecked"") java.util.List<java.lang.Object> objs = com.google.common.collect.Lists.newArrayList(new org.bouncycastle.openpgp.bc.BcPGPObjectFactory(ain)); if (((objs.size()) != 1) || (!((objs.get(0)) instanceof org.bouncycastle.openpgp.PGPPublicKeyRing))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""Expected exactly one PUBLIC KEY BLOCK""); } org.bouncycastle.openpgp.PGPPublicKeyRing keyRing = ((org.bouncycastle.openpgp.PGPPublicKeyRing) (objs.get(0))); if (toRemove.contains(new com.google.gerrit.server.git.gpg.Fingerprint(keyRing.getPublicKey().getFingerprint()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""Cannot both add and delete key: "" + (keyToString(keyRing.getPublicKey())))); } keyRings.add(keyRing); } } return keyRings; }",1120d73a690874a31128bb1e0d03116cebdbce55,"readKeysToAdd(com.google.gerrit.server.account.PostGpgKeys$Input,java.util.Set)",170778,475,475
46642,gerrit-server_src_main_java_com_google_gerrit_server_config_ConfigCollection.java,,,,@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.extensions.restapi.TopLevelResource> list() { return null; },4485172a75b8eb0f559b8070c77a06adfb6f27b2,,list(),4,1,@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.extensions.restapi.TopLevelResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); },8b1c531132f68b8d98c16b7cc1c54301f2e4b1ba,list(),28882,44,73
61112,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeEdits.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.lang.String apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getChange()); return edit.isPresent() ? edit.get().getEditCommit().getFullMessage() : changeUtil.getMessage(rsrc.getChange()); }",f93eb2a4d61d7801cb03316cfad9016be8306ec0,,apply(com.google.gerrit.server.change.ChangeResource),12,17,"@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getChange()); java.lang.String m = (edit.isPresent()) ? edit.get().getEditCommit().getFullMessage() : changeUtil.getMessage(rsrc.getChange()); return com.google.gerrit.extensions.restapi.BinaryResult.create(m).base64(); }",6005712cf832a1054ed2cf8c940ea538d436f5ac,apply(com.google.gerrit.server.change.ChangeResource),107291,165,188
115151,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,80.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void pushAccountConfigToUserBranchIsRejectedIfPreferredEmailIsInvalid() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, ((com.google.gerrit.reviewdb.client.RefNames.refsUsers(admin.id)) + "":userRef"")); allUsersRepo.reset(""userRef""); java.lang.String noEmail = ""no.email""; org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_PREFERRED_EMAIL, noEmail); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo, ""Update account config"", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(RefNames.REFS_USERS_SELF); r.assertErrorStatus(""invalid account configuration""); r.assertMessage(java.lang.String.format(""invalid preferred email '%s' for account '%s'"", noEmail, admin.id)); r.assertMessage(java.lang.String.format(""account '%s' has no external ID for its preferred email '%s'"", admin.id, noEmail)); accountIndexedCounter.assertNoReindex(); }",367ad32ff19d8494419b418e6e44b30b5b8b2069,,pushAccountConfigToUserBranchIsRejectedIfPreferredEmailIsInvalid(),14,26,"@org.junit.Test public void pushAccountConfigToUserBranchForReviewIsRejectedOnSubmitIfPreferredEmailIsInvalid() throws java.lang.Exception { java.lang.String userRef = com.google.gerrit.reviewdb.client.RefNames.refsUsers(admin.id); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, (userRef + "":userRef"")); allUsersRepo.reset(""userRef""); java.lang.String noEmail = ""no.email""; org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_PREFERRED_EMAIL, noEmail); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo, ""Update account config"", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + userRef)); r.assertOkStatus(); accountIndexedCounter.assertNoReindex(); assertThat(r.getChange().change().getDest().get()).isEqualTo(userRef); gApi.changes().id(r.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format(""invalid account configuration: invalid preferred email '%s' for account '%s'"", noEmail, admin.id)); gApi.changes().id(r.getChangeId()).current().submit(); }",25ed7e8ce31fb69624239652c2d4ed5cf418fd72,pushAccountConfigToUserBranchForReviewIsRejectedOnSubmitIfPreferredEmailIsInvalid(),83138,338,427
67483,gerrit-pgm_src_main_java_com_google_gerrit_pgm_Daemon.java,20.0,"@com.google.common.annotations.VisibleForTesting public void start() { if ((dbInjector) == null) { dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); } cfgInjector = createCfgInjector(); sysInjector = createSysInjector(); sysInjector.getInstance(com.google.gerrit.server.plugins.PluginGuiceEnvironment.class).setDbCfgInjector(dbInjector, cfgInjector); manager.add(dbInjector, cfgInjector, sysInjector); sshd &= !(sshdOff()); if (sshd) { initSshd(); } if (com.google.common.base.MoreObjects.firstNonNull(httpd, true)) { initHttpd(); } manager.start(); }",d48da5741cda3e8e764d412ad44fc50985556fd0,"@com.google.common.annotations.VisibleForTesting public void start() { sshd &= !(sshdOff()); if (sshd) { initSshd(); } if (com.google.common.base.MoreObjects.firstNonNull(httpd, true)) { initHttpd(); } manager.start(); }",a870eced953304882031eac349c5f799c8353c16,start(),start(),9,20,"@com.google.common.annotations.VisibleForTesting public void start() throws java.io.IOException { if ((dbInjector) == null) { dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); } cfgInjector = createCfgInjector(); sysInjector = createSysInjector(); sysInjector.getInstance(com.google.gerrit.server.plugins.PluginGuiceEnvironment.class).setDbCfgInjector(dbInjector, cfgInjector); manager.add(dbInjector, cfgInjector, sysInjector); if (!(consoleLog)) { manager.add(com.google.gerrit.pgm.util.ErrorLogFile.start(getSitePath(), cfgInjector.getInstance(com.google.inject.Key.get(org.eclipse.jgit.lib.Config.class, com.google.gerrit.server.config.GerritServerConfig.class)))); } sshd &= !(sshdOff()); if (sshd) { initSshd(); } if (com.google.common.base.MoreObjects.firstNonNull(httpd, true)) { initHttpd(); } manager.start(); }",585b7c60647f0c516cfd24d29c2f0c28e0d40d2d,start(),83864,67,241
69681,gerrit-gwtui_src_main_java_com_google_gerrit_client_Gerrit.java,74.0,public static void applyUserPreferences() { if ((com.google.gerrit.client.Gerrit.myAccount) != null) { final com.google.gerrit.reviewdb.client.AccountGeneralPreferences p = com.google.gerrit.client.Gerrit.myAccount.getGeneralPreferences(); com.google.gwtexpui.clippy.client.CopyableLabel.setFlashEnabled(p.isUseFlashClipboard()); if ((com.google.gerrit.client.Gerrit.siteHeader) != null) { com.google.gerrit.client.Gerrit.siteHeader.setVisible(p.isShowSiteHeader()); } if ((com.google.gerrit.client.Gerrit.siteFooter) != null) { com.google.gerrit.client.Gerrit.siteFooter.setVisible(p.isShowSiteHeader()); } com.google.gerrit.client.FormatUtil.setPreferences(com.google.gerrit.client.Gerrit.myAccount.getGeneralPreferences()); } },8e3dc899c746d9c06cc4cc639949ab8c166fcb79,public static void applyUserPreferences() { if ((com.google.gerrit.client.Gerrit.myAccount) != null) { final com.google.gerrit.reviewdb.client.AccountGeneralPreferences p = com.google.gerrit.client.Gerrit.myAccount.getGeneralPreferences(); if ((com.google.gerrit.client.Gerrit.siteHeader) != null) { com.google.gerrit.client.Gerrit.siteHeader.setVisible(p.isShowSiteHeader()); } if ((com.google.gerrit.client.Gerrit.siteFooter) != null) { com.google.gerrit.client.Gerrit.siteFooter.setVisible(p.isShowSiteHeader()); } com.google.gerrit.client.FormatUtil.setPreferences(com.google.gerrit.client.Gerrit.myAccount.getGeneralPreferences()); } },d9833712110dce5fa86a8774fbdf1ee5c5515184,applyUserPreferences(),applyUserPreferences(),8,74,public static void applyUserPreferences() { if ((com.google.gerrit.client.Gerrit.myAccount) != null) { final com.google.gerrit.reviewdb.client.AccountGeneralPreferences p = com.google.gerrit.client.Gerrit.myAccount.getGeneralPreferences(); com.google.gwtexpui.clippy.client.CopyableLabel.setFlashEnabled(p.isUseFlashClipboard()); if ((com.google.gerrit.client.Gerrit.siteHeader) != null) { com.google.gerrit.client.Gerrit.siteHeader.setVisible(p.isShowSiteHeader()); } if ((com.google.gerrit.client.Gerrit.siteFooter) != null) { com.google.gerrit.client.Gerrit.siteFooter.setVisible(p.isShowSiteHeader()); } com.google.gerrit.client.FormatUtil.setPreferences(com.google.gerrit.client.Gerrit.myAccount.getGeneralPreferences()); } },8e3dc899c746d9c06cc4cc639949ab8c166fcb79,applyUserPreferences(),155204,205,232
9533,src_main_java_com_google_gerrit_server_CatServlet.java,,,,"private java.lang.String safeFileName(java.lang.String fileName, final java.lang.String suffix) { final int slash = fileName.lastIndexOf('/'); if (slash >= 0) { fileName = fileName.substring((slash + 1)); } final java.lang.StringBuilder r = new java.lang.StringBuilder(fileName.length()); for (int i = 0; i < (fileName.length()); i++) { final char c = fileName.charAt(i); switch (c) { case ' ' : case '_' : case '-' : case '.' : case '@' : r.append(c); continue; } if (('0' <= c) && (c <= '9')) { r.append(c); continue; } if (('A' <= c) && (c <= 'Z')) { r.append(c); continue; } if (('a' <= c) && (c <= 'z')) { r.append(c); continue; } } fileName = r.toString(); final int dot = fileName.lastIndexOf('.'); if (dot < 0) { return (fileName + ""_"") + suffix; } else if (dot == 0) { return (fileName + ""_"") + suffix; } else { return (((fileName.substring(0, dot)) + ""_"") + suffix) + (fileName.substring(dot)); } }",82122a1238e8cfa65d58b4bde0bb9f5e1f2dce36,,"safeFileName(java.lang.String,java.lang.String)",2,0,"private static java.lang.String safeFileName(java.lang.String fileName, final java.lang.String suffix) { final int slash = fileName.lastIndexOf('/'); if (slash >= 0) { fileName = fileName.substring((slash + 1)); } final java.lang.StringBuilder r = new java.lang.StringBuilder(fileName.length()); for (int i = 0; i < (fileName.length()); i++) { final char c = fileName.charAt(i); if ((((c == '_') || (c == '-')) || (c == '.')) || (c == '@')) { r.append(c); } else if (('0' <= c) && (c <= '9')) { r.append(c); } else if (('A' <= c) && (c <= 'Z')) { r.append(c); } else if (('a' <= c) && (c <= 'z')) { r.append(c); } else if ((((c == ' ') || (c == '\n')) || (c == '\r')) || (c == '\t')) { r.append('-'); } else { r.append('_'); } } fileName = r.toString(); final int ext = fileName.lastIndexOf('.'); if (ext <= 0) { return (fileName + ""_"") + suffix; } else { return (((fileName.substring(0, ext)) + ""_"") + suffix) + (fileName.substring(ext)); } }",e59d64b05b24ddde3b5aa45db39c75e206fdbc9d,"safeFileName(java.lang.String,java.lang.String)",47120,288,315
110997,src_main_java_com_ericsson_gerrit_plugins_highavailability_Setup.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void createHAReplicaSite() throws java.lang.Exception { if (ui.yesno(true, ""Create a local HA replica site"")) { if ((sharedDir) == null) { ui.message(((SHARED_DIRECTORY_KEY) + "" not set. Cannot setup HA replica"")); return; } java.lang.String replicaPath = ui.readString(""ha/1"", ""Location of the HA replica""); java.nio.file.Path replica = site.site_path.resolve(java.nio.file.Paths.get(replicaPath)); if (java.nio.file.Files.exists(replica)) { ui.message(""%s already exists, exiting"", replica); return; } new com.ericsson.gerrit.plugins.highavailability.SetupLocalHAReplica(pluginName, site, flags, sharedDir, new com.google.gerrit.server.config.SitePaths(replica)).run(); } }",9cb056becdcc1650b19628d4f8044fd0a5065f88,,createHAReplicaSite(),5,11,"private boolean createHAReplicaSite(org.eclipse.jgit.storage.file.FileBasedConfig pluginConfig) throws java.lang.Exception { ui.header(""HA replica site setup""); ui.message((""It is possible to create a copy of the master site and configure both sites to run\n"" + (((((""in HA mode as peers. This is possible when the directory where the copy will be\n"" + ""created is accessible from this machine\n"") + ""\n"") + ""NOTE: This step is optional. If you want to create the other site manually, or\n"") + ""if the other site needs to be created in a directory not accessible from this\n"") + ""machine then please skip this step.\n""))); if (ui.yesno(true, ""Create a HA replica site"")) { java.lang.String replicaPath = ui.readString(""ha/1"", ""Location of the HA replica""); java.nio.file.Path replica = site.site_path.resolve(java.nio.file.Paths.get(replicaPath)); if (java.nio.file.Files.exists(replica)) { ui.message(""%s already exists, exiting"", replica); return true; } config.save(); setupLocalHAReplica.run(new com.google.gerrit.server.config.SitePaths(replica), pluginConfig); return true; } return false; }",fad1f1b12f8256ea032892733cd908591c06cf06,createHAReplicaSite(org.eclipse.jgit.storage.file.FileBasedConfig),73281,202,301
19442,gerrit-server_src_test_java_com_google_gerrit_testutil_InMemoryDatabase.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override protected void configure() { install(new com.google.gerrit.server.schema.SchemaVersion.Module()); bind(java.io.File.class).annotatedWith(com.google.gerrit.server.config.SitePath.class).toInstance(new java.io.File(""."")); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString(""gerrit"", null, ""basePath"", ""git""); bind(org.eclipse.jgit.lib.Config.class).annotatedWith(com.google.gerrit.server.config.GerritServerConfig.class).toInstance(cfg); bind(com.google.gerrit.server.git.GitRepositoryManager.class).to(com.google.gerrit.server.git.LocalDiskRepositoryManager.class); }",4803c993265dcdfd97da321f906b18936c0c7fd4,,configure(),12,0,"@java.lang.Override protected void configure() { install(new com.google.gerrit.server.schema.SchemaVersion.Module()); bind(java.io.File.class).annotatedWith(com.google.gerrit.server.config.SitePath.class).toInstance(new java.io.File(""."")); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString(""gerrit"", null, ""basePath"", ""git""); cfg.setString(""user"", null, ""name"", ""Gerrit Code Review""); cfg.setString(""user"", null, ""email"", ""gerrit@localhost""); bind(org.eclipse.jgit.lib.Config.class).annotatedWith(com.google.gerrit.server.config.GerritServerConfig.class).toInstance(cfg); bind(org.eclipse.jgit.lib.PersonIdent.class).annotatedWith(com.google.gerrit.server.GerritPersonIdent.class).toProvider(com.google.gerrit.server.GerritPersonIdentProvider.class); bind(com.google.gerrit.server.git.GitRepositoryManager.class).to(com.google.gerrit.server.git.LocalDiskRepositoryManager.class); }",77ac9a8b9483297f9dfe17c5b829c971d9025ad2,configure(),177064,188,280
45590,gerrit-server_src_main_java_com_google_gerrit_server_project_ProjectCacheImpl.java,6.0,@java.lang.Override public java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey> iterator() { return new java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey>() { private java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey> itr = src.iterator(); private Project.NameKey next; @java.lang.Override public boolean hasNext() { if ((next) != null) { return true; } if (!(itr.hasNext())) { return false; } com.google.gerrit.reviewdb.client.Project.NameKey r = itr.next(); if (r.get().startsWith(pfx)) { next = r; return true; } else { itr = java.util.Collections.<com.google.gerrit.reviewdb.client.Project.NameKey>emptyList().iterator(); return false; } } @java.lang.Override public Project.NameKey next() { if (!(hasNext())) { throw new java.util.NoSuchElementException(); } com.google.gerrit.reviewdb.client.Project.NameKey r = next; next = null; return r; } @java.lang.Override public void remove() { throw new java.lang.UnsupportedOperationException(); } }; },555f834aa40b31b8f0f19c1c3aa856a51f643944,@java.lang.Override public java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey> iterator() { return new java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey>() { private java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey> itr = src.iterator(); private com.google.gerrit.reviewdb.client.Project.NameKey next; @java.lang.Override public boolean hasNext() { if ((next) != null) { return true; } if (!(itr.hasNext())) { return false; } com.google.gerrit.reviewdb.client.Project.NameKey r = itr.next(); if (r.get().startsWith(pfx)) { next = r; return true; } else { itr = java.util.Collections.<com.google.gerrit.reviewdb.client.Project.NameKey>emptyList().iterator(); return false; } } @java.lang.Override public com.google.gerrit.reviewdb.client.Project.NameKey next() { if (!(hasNext())) { throw new java.util.NoSuchElementException(); } com.google.gerrit.reviewdb.client.Project.NameKey r = next; next = null; return r; } @java.lang.Override public void remove() { throw new java.lang.UnsupportedOperationException(); } }; },9498ba9568ba3edc6a0868c45de474d393fefdd5,iterator(),iterator(),2,6,@java.lang.Override public java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey> iterator() { return new java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey>() { private java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey> itr = src.iterator(); private Project.NameKey next; @java.lang.Override public boolean hasNext() { if ((next) != null) { return true; } if (!(itr.hasNext())) { return false; } com.google.gerrit.reviewdb.client.Project.NameKey r = itr.next(); if (r.get().startsWith(pfx)) { next = r; return true; } else { itr = java.util.Collections.<com.google.gerrit.reviewdb.client.Project.NameKey>emptyList().iterator(); return false; } } @java.lang.Override public Project.NameKey next() { if (!(hasNext())) { throw new java.util.NoSuchElementException(); } com.google.gerrit.reviewdb.client.Project.NameKey r = next; next = null; return r; } @java.lang.Override public void remove() { throw new java.lang.UnsupportedOperationException(); } }; },555f834aa40b31b8f0f19c1c3aa856a51f643944,iterator(),134229,324,298
11544,src_main_java_com_google_gerrit_client_patches_PatchDetailService.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.google.gerrit.client.rpc.SignInRequired void myApprovals(com.google.gerrit.client.reviewdb.Change.Id id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.data.ApprovalDetail> callback);",e692a23c167cab37f80578277ca62486f1cd7264,,"myApprovals(com.google.gerrit.client.reviewdb.Change$Id,com.google.gwt.user.client.rpc.AsyncCallback)",3,1,"void userApprovals(java.util.Set<com.google.gerrit.client.reviewdb.Change.Id> cids, com.google.gerrit.client.reviewdb.Account.Id aid, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.data.ApprovalSummarySet> callback);",b11c7f2a834b144f3dc9d8a5b1d98654516fc061,"userApprovals(java.util.Set,com.google.gerrit.client.reviewdb.Account$Id,com.google.gwt.user.client.rpc.AsyncCallback)",62321,68,82
77080,gerrit-server_src_main_java_com_google_gerrit_server_change_DeleteReviewer.java,5.0,"@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) { if ((changeMessage) == null) { return; } emailReviewers(ctx.getProject(), currChange, del, changeMessage); try { hooks.doReviewerDeletedHook(currChange, reviewer, currPs, changeMessage.getMessage(), newApprovals, oldApprovals, dbProvider.get()); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.change.DeleteReviewer.log.warn(""ChangeHook.doCommentAddedHook delivery failed"", e); } }",1f108e1f1b03190eb829d2738725653b6469844e,"@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) { emailReviewers(ctx.getProject(), currChange, del, changeMessage); try { hooks.doReviewerDeletedHook(currChange, reviewer, currPs, changeMessage.getMessage(), newApprovals, oldApprovals, dbProvider.get()); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.change.DeleteReviewer.log.warn(""ChangeHook.doCommentAddedHook delivery failed"", e); } }",17dc7a5d7de6762cbbe61365bea35a3516731ad7,postUpdate(com.google.gerrit.server.git.BatchUpdate.Context),postUpdate(com.google.gerrit.server.git.BatchUpdate.Context),5,5,"@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) { emailReviewers(ctx.getProject(), currChange, del, changeMessage); reviewerDeleted.fire(currChange, currPs, reviewer, ctx.getAccount(), changeMessage.getMessage(), newApprovals, oldApprovals, ctx.getWhen()); }",c3bf0285b9ef4a8ded2e251eb3c90901705ab134,postUpdate(com.google.gerrit.server.git.BatchUpdate.Context),103866,134,84
80042,gerrit-server_src_main_java_com_google_gerrit_server_mail_ChangeEmail.java,5.0,"protected void bccStarredBy() { if (!(NotifyHandling.ALL.equals(notify))) { return; } try { com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Account.Id, java.lang.String> stars = args.starredChangesUtil.byChangeFromIndex(change.getId()); for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, java.util.Collection<java.lang.String>> e : stars.asMap().entrySet()) { if (e.getValue().contains(StarredChangesUtil.DEFAULT_LABEL)) { super.add(RecipientType.BCC, e.getKey()); } if (e.getValue().contains(StarredChangesUtil.IGNORE_LABEL)) { com.google.gerrit.server.account.AccountState accountState = args.accountCache.get(e.getKey()); if (accountState != null) { removeUser(accountState.getAccount()); } } } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchChangeException err) { com.google.gerrit.server.mail.ChangeEmail.log.warn(""Cannot BCC users that starred updated change"", err); } }",ce9f49c6339ba1b5b76d3bfd036a91602a5f3d93,"protected void bccStarredBy() { if (!(ReviewNotification.ALL.equals(notify))) { return; } try { com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Account.Id, java.lang.String> stars = args.starredChangesUtil.byChangeFromIndex(change.getId()); for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, java.util.Collection<java.lang.String>> e : stars.asMap().entrySet()) { if (e.getValue().contains(StarredChangesUtil.DEFAULT_LABEL)) { super.add(RecipientType.BCC, e.getKey()); } if (e.getValue().contains(StarredChangesUtil.IGNORE_LABEL)) { com.google.gerrit.server.account.AccountState accountState = args.accountCache.get(e.getKey()); if (accountState != null) { removeUser(accountState.getAccount()); } } } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchChangeException err) { com.google.gerrit.server.mail.ChangeEmail.log.warn(""Cannot BCC users that starred updated change"", err); } }",3451b53a1e96875e9c54dc0162c6493c1327855c,bccStarredBy(),bccStarredBy(),3,5,"protected void bccStarredBy() { if (!(NotifyHandling.ALL.equals(notify))) { return; } try { com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Account.Id, java.lang.String> stars = args.starredChangesUtil.byChangeFromIndex(change.getId()); for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, java.util.Collection<java.lang.String>> e : stars.asMap().entrySet()) { if (e.getValue().contains(StarredChangesUtil.DEFAULT_LABEL)) { super.add(RecipientType.BCC, e.getKey()); } if (e.getValue().contains(StarredChangesUtil.IGNORE_LABEL)) { com.google.gerrit.server.account.AccountState accountState = args.accountCache.get(e.getKey()); if (accountState != null) { removeUser(accountState.getAccount()); } } } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchChangeException err) { com.google.gerrit.server.mail.ChangeEmail.log.warn(""Cannot BCC users that starred updated change"", err); } }",ce9f49c6339ba1b5b76d3bfd036a91602a5f3d93,bccStarredBy(),24905,287,287
24054,gerrit-server_src_main_java_com_google_gerrit_server_project_RefControl.java,22.0,"private int distance(java.lang.String pattern) { java.lang.String example; if (com.google.gerrit.server.project.RefControl.isRE(pattern)) { example = com.google.gerrit.server.project.RefControl.shortestExample(pattern); } else if (pattern.endsWith(""/*"")) { example = (pattern.substring(0, ((pattern.length()) - 1))) + '1'; } else if (pattern.equals(getRefName())) { return 0; } else { return java.lang.Math.max(pattern.length(), getRefName().length()); } return org.apache.commons.lang.StringUtils.getLevenshteinDistance(example, getRefName()); }",f5249bb4895303f19a966ac1ea93a1b81dee3b8a,"private int distance(java.lang.String pattern) { java.lang.String example; if (com.google.gerrit.server.project.RefControl.isRE(pattern)) { example = shortestExample(pattern); } else if (pattern.endsWith(""/*"")) { example = (pattern.substring(0, ((pattern.length()) - 1))) + '1'; } else if (pattern.equals(getRefName())) { return 0; } else { return java.lang.Math.max(pattern.length(), getRefName().length()); } return org.apache.commons.lang.StringUtils.getLevenshteinDistance(example, getRefName()); }",236be9dd9988a3d7b77a90d36add85147198a05d,distance(java.lang.String),distance(java.lang.String),4,22,"private int distance(java.lang.String pattern) { java.lang.String example; if (com.google.gerrit.server.project.RefControl.isRE(pattern)) { example = com.google.gerrit.server.project.RefControl.shortestExample(pattern); } else if (pattern.endsWith(""/*"")) { example = (pattern.substring(0, ((pattern.length()) - 1))) + '1'; } else if (pattern.equals(getRefName())) { return 0; } else { return java.lang.Math.max(pattern.length(), getRefName().length()); } return org.apache.commons.lang.StringUtils.getLevenshteinDistance(example, getRefName()); }",f5249bb4895303f19a966ac1ea93a1b81dee3b8a,distance(java.lang.String),146399,137,152
161370,src_main_java_com_googlesource_gerrit_plugins_readonly_ReadOnly.java,0.0,"@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if ((request instanceof javax.servlet.http.HttpServletRequest) && (response instanceof javax.servlet.http.HttpServletResponse)) { java.lang.String method = ((javax.servlet.http.HttpServletRequest) (request)).getMethod(); if (((method == ""POST"") || (method == ""PUT"")) || (method == ""DELETE"")) { ((javax.servlet.http.HttpServletResponse) (response)).sendError(com.googlesource.gerrit.plugins.readonly.SC_SERVICE_UNAVAILABLE, com.googlesource.gerrit.plugins.readonly.ReadOnly.READ_ONLY_MSG); return; } } chain.doFilter(request, response); }",c0f361a237b69adc2aa5ec22ca160e9b59dc46df,"@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if ((request instanceof javax.servlet.http.HttpServletRequest) && (response instanceof javax.servlet.http.HttpServletResponse)) { java.lang.String method = ((javax.servlet.http.HttpServletRequest) (request)).getMethod(); if (((method == ""POST"") || (method == ""PUT"")) || (method == ""DELETE"")) { ((javax.servlet.http.HttpServletResponse) (response)).sendError(com.googlesource.gerrit.plugins.readonly.SC_SERVICE_UNAVAILABLE, this.message); return; } } chain.doFilter(request, response); }",4287d3acabb0317c6adfd24114b37aedcd592e0f,"doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)","doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",2,0,"@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if ((request instanceof javax.servlet.http.HttpServletRequest) && (response instanceof javax.servlet.http.HttpServletResponse)) { java.lang.String method = ((javax.servlet.http.HttpServletRequest) (request)).getMethod(); if (((method == ""POST"") || (method == ""PUT"")) || (method == ""DELETE"")) { ((javax.servlet.http.HttpServletResponse) (response)).sendError(com.googlesource.gerrit.plugins.readonly.SC_SERVICE_UNAVAILABLE, message); return; } } chain.doFilter(request, response); }",abfdefbe38332e230fcbe71a79a04e9b16962d52,"doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",89542,171,169
48530,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_client_CommentRange.java,,,,public int getStartCh() { return startCh; },95d697a5e8720783085d34ebe5e3b895f44a200a,,getStartCh(),6,0,public int getStartCharacter() { return startCharacter; },c0b68cd097ca6e9783fccb898d8e3b1f6715cae8,getStartCharacter(),143264,12,12
51892,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_RevisionApiImpl.java,6.0,"@java.lang.Override public void review(com.google.gerrit.extensions.api.changes.ReviewInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { review.get().apply(revision, in); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot post review"", e); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot post review"", e); } }",9a02a4f0e237b74d1f2affdc3fb012d1d8c0f681,"@java.lang.Override public com.google.gerrit.extensions.api.changes.RevisionApi review(com.google.gerrit.extensions.api.changes.ReviewInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { review.get().apply(revision, in); return this; } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot post review"", e); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot post review"", e); } }",57d0cfe8ecc6352a9e354dd8a1b6e75e0877c5c3,review(com.google.gerrit.extensions.api.changes.ReviewInput),review(com.google.gerrit.extensions.api.changes.ReviewInput),7,5,"@java.lang.Override public void review(com.google.gerrit.extensions.api.changes.ReviewInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { review.get().apply(revision, in); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot post review"", e); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot post review"", e); } }",9a02a4f0e237b74d1f2affdc3fb012d1d8c0f681,review(com.google.gerrit.extensions.api.changes.ReviewInput),183222,151,133
66560,gerrit-server_src_main_java_com_google_gerrit_server_patch_PatchListLoader.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private org.eclipse.jgit.patch.FileHeader toFileHeader(com.google.gerrit.server.patch.PatchListKey key, final org.eclipse.jgit.diff.DiffFormatter diffFormatter, final org.eclipse.jgit.diff.DiffEntry diffEntry) throws java.io.IOException { java.util.concurrent.Future<org.eclipse.jgit.patch.FileHeader> result = diffExecutor.submit(new java.util.concurrent.Callable<org.eclipse.jgit.patch.FileHeader>() { @java.lang.Override public org.eclipse.jgit.patch.FileHeader call() throws java.io.IOException { return diffFormatter.toFileHeader(diffEntry); } }); org.eclipse.jgit.patch.FileHeader fileHeader; try { fileHeader = result.get(timeoutMillis, java.util.concurrent.TimeUnit.MILLISECONDS); } catch (java.lang.InterruptedException | java.util.concurrent.TimeoutException e) { com.google.gerrit.server.patch.PatchListLoader.log.warn(((((((((((((timeoutMillis) + "" ms timeout reached for Diff loader"") + "" in project "") + (key.projectKey.get())) + "" on commit "") + (key.getNewId())) + "" on path "") + (diffEntry.getNewPath())) + "" comparing "") + (diffEntry.getOldId())) + "".."") + (diffEntry.getNewId()))); result.cancel(true); return toFileHeaderWithoutMyersDiff(diffFormatter, diffEntry); } catch (java.util.concurrent.ExecutionException e) { java.lang.Throwable cause = e.getCause(); if (cause instanceof java.io.IOException) { throw ((java.io.IOException) (cause)); } else { throw new java.io.IOException(e.getMessage(), cause); } } return fileHeader; }",e1bdb179d08ef38de720c2e8e87ba0fff9535629,,"toFileHeader(com.google.gerrit.server.patch.PatchListKey,org.eclipse.jgit.diff.DiffFormatter,org.eclipse.jgit.diff.DiffEntry)",2,8,"private org.eclipse.jgit.patch.FileHeader toFileHeader(com.google.gerrit.server.patch.PatchListKey key, final org.eclipse.jgit.diff.DiffFormatter diffFormatter, final org.eclipse.jgit.diff.DiffEntry diffEntry) throws java.io.IOException { java.util.concurrent.Future<org.eclipse.jgit.patch.FileHeader> result = diffExecutor.submit(new java.util.concurrent.Callable<org.eclipse.jgit.patch.FileHeader>() { @java.lang.Override public org.eclipse.jgit.patch.FileHeader call() throws java.io.IOException { return diffFormatter.toFileHeader(diffEntry); } }); try { return result.get(timeoutMillis, java.util.concurrent.TimeUnit.MILLISECONDS); } catch (java.lang.InterruptedException | java.util.concurrent.TimeoutException e) { com.google.gerrit.server.patch.PatchListLoader.log.warn(((((((((((((timeoutMillis) + "" ms timeout reached for Diff loader"") + "" in project "") + (key.projectKey.get())) + "" on commit "") + (key.getNewId())) + "" on path "") + (diffEntry.getNewPath())) + "" comparing "") + (diffEntry.getOldId())) + "".."") + (diffEntry.getNewId()))); result.cancel(true); return toFileHeaderWithoutMyersDiff(diffFormatter, diffEntry); } catch (java.util.concurrent.ExecutionException e) { com.google.common.base.Throwables.propagateIfInstanceOf(e.getCause(), java.io.IOException.class); throw new java.io.IOException(e.getMessage(), e.getCause()); } }",7d5a59e07a1410c944c44f7809dcea7869a847fc,"toFileHeader(com.google.gerrit.server.patch.PatchListKey,org.eclipse.jgit.diff.DiffFormatter,org.eclipse.jgit.diff.DiffEntry)",181804,411,382
16692,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_AccountConstants.java,74.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,java.lang.String unwatchedProjectDescription();,f8d03f33ca54723244453cc1165b486d74bc3cf9,,unwatchedProjectDescription(),9,79,java.lang.String projectDescription();,1e7bc297ae9e6782bca0199f99d005dbf7e87a9b,projectDescription(),145009,11,8
73738,gerrit-launcher_src_main_java_com_google_gerrit_launcher_GerritLauncher.java,24.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static int daemonStart(final java.lang.String[] argv) throws java.lang.Exception { final java.lang.ClassLoader cl = com.google.gerrit.launcher.GerritLauncher.libClassLoader(false); java.lang.Thread.currentThread().setContextClassLoader(cl); java.lang.String[] daemonArgv = new java.lang.String[(argv.length) + 2]; daemonArgv[0] = ""daemon""; daemonArgv[1] = ""--start-only""; for (int i = 0; i < (argv.length); i++) { daemonArgv[(i + 2)] = argv[i]; } return com.google.gerrit.launcher.GerritLauncher.invokeProgram(cl, daemonArgv); }",5e1ea9925bfa50bf652acb62280a3735d6a334db,,daemonStart(java.lang.String[]),16,9,"public static void daemonStart(final java.lang.String[] argv) throws java.lang.Exception { if ((com.google.gerrit.launcher.GerritLauncher.daemonClassLoader) != null) { throw new java.lang.IllegalStateException(""daemonStart can be called only once per JVM instance""); } final java.lang.ClassLoader cl = com.google.gerrit.launcher.GerritLauncher.libClassLoader(false); java.lang.Thread.currentThread().setContextClassLoader(cl); com.google.gerrit.launcher.GerritLauncher.daemonClassLoader = cl; java.lang.String[] daemonArgv = new java.lang.String[(argv.length) + 1]; daemonArgv[0] = ""daemon""; for (int i = 0; i < (argv.length); i++) { daemonArgv[(i + 1)] = argv[i]; } int res = com.google.gerrit.launcher.GerritLauncher.invokeProgram(cl, daemonArgv); if (res != 0) { throw new java.lang.Exception((""Unexpected return value: "" + res)); } }",1b83e423c88705de288f3f7f1fb11b5e076c47a5,daemonStart(java.lang.String[]),122559,161,240
37753,gerrit-server_src_main_java_com_google_gerrit_server_git_CherryPick.java,,,,"private org.eclipse.jgit.lib.PersonIdent toCommitterIdent(final com.google.gerrit.reviewdb.client.PatchSetApproval audit) { if (audit != null) { return identifiedUserFactory.create(audit.getAccountId()).newCommitterIdent(audit.getGranted(), myIdent.getTimeZone()); } return myIdent; }",7eb6d0e625d0a845856dfcc15969c5fd43c40b09,,toCommitterIdent(com.google.gerrit.reviewdb.client.PatchSetApproval),5,7,"private org.eclipse.jgit.lib.PersonIdent toCommitterIdent(final com.google.gerrit.reviewdb.client.PatchSetApproval audit) { if (audit != null) { return args.identifiedUserFactory.create(audit.getAccountId()).newCommitterIdent(audit.getGranted(), args.myIdent.getTimeZone()); } return args.myIdent; }",fc34eab7bda850a1205b07d673a0b0d6139194f2,toCommitterIdent(com.google.gerrit.reviewdb.client.PatchSetApproval),120919,79,86
61941,gerrit-server_src_test_java_com_google_gerrit_server_config_RepositoryConfigTest.java,,,,"@org.junit.Test public void testDefaultSubmitTypeForStarFilter() { configureDefaultSubmitType(""*"", SubmitType.CHERRY_PICK); assertEquals(SubmitType.CHERRY_PICK, repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey(""someProject""))); configureDefaultSubmitType(""*"", SubmitType.FAST_FORWARD_ONLY); assertEquals(SubmitType.FAST_FORWARD_ONLY, repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey(""someProject""))); configureDefaultSubmitType(""*"", SubmitType.REBASE_IF_NECESSARY); assertEquals(SubmitType.REBASE_IF_NECESSARY, repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey(""someProject""))); }",cb4a851d0b94e10dc22b5cce93beb11726c2e5f9,,testDefaultSubmitTypeForStarFilter(),12,6,"@org.junit.Test public void testDefaultSubmitTypeForStarFilter() { configureDefaultSubmitType(""*"", SubmitType.CHERRY_PICK); assertThat(repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey(""someProject""))).isEqualTo(SubmitType.CHERRY_PICK); configureDefaultSubmitType(""*"", SubmitType.FAST_FORWARD_ONLY); assertThat(repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey(""someProject""))).isEqualTo(SubmitType.FAST_FORWARD_ONLY); configureDefaultSubmitType(""*"", SubmitType.REBASE_IF_NECESSARY); assertThat(repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey(""someProject""))).isEqualTo(SubmitType.REBASE_IF_NECESSARY); }",ae372b3975ea8236dd6908c0657d7d5d5038b155,testDefaultSubmitTypeForStarFilter(),177500,194,203
70892,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,46.0,"private void newPatchSet() { com.google.gerrit.reviewdb.client.PatchSet.Id id = com.google.gerrit.server.ChangeUtil.nextPatchSetId(allRefs, change.currentPatchSetId()); newPatchSet = new com.google.gerrit.reviewdb.client.PatchSet(id); newPatchSet.setCreatedOn(com.google.gerrit.common.TimeUtil.nowTs()); newPatchSet.setUploader(currentUser.getAccountId()); newPatchSet.setRevision(com.google.gerrit.server.git.ReceiveCommits.toRevId(newCommit)); newPatchSet.setGroups(groups); if (((magicBranch) != null) && (magicBranch.draft)) { newPatchSet.setDraft(true); } info = patchSetInfoFactory.get(newCommit, newPatchSet.getId()); cmd = new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), newCommit, newPatchSet.getRefName()); }",e2b7c353f369f49ae37025021e9ea39849d85b2c,"private void newPatchSet() { com.google.gerrit.reviewdb.client.PatchSet.Id id = com.google.gerrit.server.ChangeUtil.nextPatchSetId(allRefs, change.currentPatchSetId()); newPatchSet = new com.google.gerrit.reviewdb.client.PatchSet(id); newPatchSet.setCreatedOn(com.google.gerrit.common.TimeUtil.nowTs()); newPatchSet.setUploader(currentUser.getAccountId()); newPatchSet.setRevision(com.google.gerrit.server.git.ReceiveCommits.toRevId(newCommit)); newPatchSet.setGroups(groups); newPatchSet.setPushCertificate(rp.getPushCertificate().toTextWithSignature()); if (((magicBranch) != null) && (magicBranch.draft)) { newPatchSet.setDraft(true); } info = patchSetInfoFactory.get(newCommit, newPatchSet.getId()); cmd = new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), newCommit, newPatchSet.getRefName()); }",b56df0eba0b53f6fc4f0c404b9bd382358b1d56b,newPatchSet(),newPatchSet(),10,46,"private void newPatchSet() { com.google.gerrit.reviewdb.client.PatchSet.Id id = com.google.gerrit.server.ChangeUtil.nextPatchSetId(allRefs, change.currentPatchSetId()); newPatchSet = new com.google.gerrit.reviewdb.client.PatchSet(id); newPatchSet.setCreatedOn(com.google.gerrit.common.TimeUtil.nowTs()); newPatchSet.setUploader(currentUser.getAccountId()); newPatchSet.setRevision(com.google.gerrit.server.git.ReceiveCommits.toRevId(newCommit)); newPatchSet.setGroups(groups); if ((rp.getPushCertificate()) != null) { newPatchSet.setPushCertificate(rp.getPushCertificate().toTextWithSignature()); } if (((magicBranch) != null) && (magicBranch.draft)) { newPatchSet.setDraft(true); } info = patchSetInfoFactory.get(newCommit, newPatchSet.getId()); cmd = new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), newCommit, newPatchSet.getRefName()); }",28b6bca79771a2246404a3fd462699dbd7b61097,newPatchSet(),186182,252,266
109251,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_mail_DeleteReviewerSenderIT.java,18.0,private com.google.gerrit.acceptance.server.mail.StagedChange stageReviewableWipChange() throws java.lang.Exception { return stageChange(this::stageReviewableWipChange); },1f5af2bf683fba60b1405a490b74a0cb69ed75c7,@java.lang.Override protected com.google.gerrit.acceptance.server.mail.StagedChange stageReviewableWipChange() throws java.lang.Exception { return stageChange(() -> super.stageReviewableWipChange()); },96a167f31135a56ba0e9aca68c961d06a9e16389,stageReviewableWipChange(),stageReviewableWipChange(),16,9,private com.google.gerrit.acceptance.server.mail.StagedChange stageReviewableWipChangeWithExtraReviewer() throws java.lang.Exception { return stageChangeWithExtraReviewer(this::stageReviewableWipChange); },3eda316c39269a91c279718e5efdda0c28f53be9,stageReviewableWipChangeWithExtraReviewer(),39822,54,54
35174,gerrit-server_src_main_java_com_google_gerrit_server_plugins_ModuleGenerator.java,,,,"void export(com.google.gerrit.extensions.Export export, java.lang.Class<?> type) throws com.google.gerrit.server.plugins.InvalidPluginException;",489839604252b49e2c047bce81f32a6cdfa057e9,,"export(com.google.gerrit.extensions.Export,java.lang.Class)",4,2,"void export(com.google.gerrit.extensions.annotations.Export export, java.lang.Class<?> type) throws com.google.gerrit.server.plugins.InvalidPluginException;",5fb9514a820398d8d0549d7d9166900ec09c3f18,"export(com.google.gerrit.extensions.annotations.Export,java.lang.Class)",125527,39,41
129966,gerrit-server_src_main_java_com_google_gerrit_server_extensions_events_ChangeRestored.java,1.0,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account restorer, java.lang.String reason, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeRestored.Event event = new com.google.gerrit.server.extensions.events.ChangeRestored.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(restorer), reason, when); for (com.google.gerrit.extensions.events.ChangeRestoredListener l : listeners) { try { l.onChangeRestored(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.ChangeRestored.log.error(""Couldn't fire event"", e); } }",f2240941c3e051fb410df907b5acb17cae447527,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account restorer, java.lang.String reason, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeRestored.Event event = new com.google.gerrit.server.extensions.events.ChangeRestored.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(restorer), reason, when); for (com.google.gerrit.extensions.events.ChangeRestoredListener l : listeners) { try { l.onChangeRestored(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ChangeRestored.log.error(""Couldn't fire event"", e); } }",b8c8604ed1faf2726320039ddf2871844b86673a,"fire(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.reviewdb.client.Account,java.lang.String,java.sql.Timestamp)","fire(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.reviewdb.client.Account,java.lang.String,java.sql.Timestamp)",5,1,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account restorer, java.lang.String reason, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeRestored.Event event = new com.google.gerrit.server.extensions.events.ChangeRestored.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(restorer), reason, when); for (com.google.gerrit.extensions.events.ChangeRestoredListener l : listeners) { try { l.onChangeRestored(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ChangeRestored.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ChangeRestored.log.error(""Couldn't fire event"", e); } }",e8009de7255092a4a5ec7f7904254ffc83a87109,"fire(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.reviewdb.client.Account,java.lang.String,java.sql.Timestamp)",42236,314,372
128571,gerrit-server_src_main_java_com_google_gerrit_server_group_ListGroups.java,25.0,"public java.util.List<com.google.gerrit.extensions.common.GroupInfo> get() throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (!(com.google.common.base.Strings.isNullOrEmpty(suggest))) { return suggestGroups(); } if ((!(com.google.common.base.Strings.isNullOrEmpty(matchSubstring))) && (!(com.google.common.base.Strings.isNullOrEmpty(matchRegex)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""Specify one of m/r""); } if (owned) { return getGroupsOwnedBy(((user) != null ? userFactory.create(user) : identifiedUser.get())); } if ((user) != null) { return accountGetGroups.apply(new com.google.gerrit.server.account.AccountResource(userFactory.create(user))); } return getAllGroups(); }",39b718995f9c1f00dfa8c18d4f4e5abf3967e917,"public java.util.List<com.google.gerrit.extensions.common.GroupInfo> get() throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (!(com.google.common.base.Strings.isNullOrEmpty(suggest))) { return suggestGroups(); } if ((!(com.google.common.base.Strings.isNullOrEmpty(matchSubstring))) && (!(com.google.common.base.Strings.isNullOrEmpty(matchRegex)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""Specify one of m/r""); } if ((ownedBy) != null) { return getGroupsOwnedBy(ownedBy); } if (owned) { return getGroupsOwnedBy(((user) != null ? userFactory.create(user) : identifiedUser.get())); } if ((user) != null) { return accountGetGroups.apply(new com.google.gerrit.server.account.AccountResource(userFactory.create(user))); } return getAllGroups(); }",ee2e6262f8406028479cefe3091da91beccd33ea,get(),get(),10,27,"public java.util.List<com.google.gerrit.extensions.common.GroupInfo> get() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { if (!(com.google.common.base.Strings.isNullOrEmpty(suggest))) { return suggestGroups(); } if ((!(com.google.common.base.Strings.isNullOrEmpty(matchSubstring))) && (!(com.google.common.base.Strings.isNullOrEmpty(matchRegex)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""Specify one of m/r""); } if ((ownedBy) != null) { return getGroupsOwnedBy(ownedBy); } if (owned) { return getGroupsOwnedBy(((user) != null ? userFactory.create(user) : identifiedUser.get())); } if ((user) != null) { return accountGetGroups.apply(new com.google.gerrit.server.account.AccountResource(userFactory.create(user))); } return getAllGroups(); }",399d6bb169c4cfbb4a6bd4ff73f29154c3f783e6,get(),106359,238,237
162992,java_com_google_gerrit_common_data_SubmitRequirement.java,,,,public abstract com.google.gerrit.common.data.SubmitRequirement.Builder setLabel(@com.google.gerrit.common.Nullable java.lang.String label);,6fce0a79ed9426938d1d0865e4590ec54591d478,,setLabel(java.lang.String),20,0,"@java.lang.Override public int hashCode() { return java.util.Objects.hash(shortReason, fullReason, label); }",2f6d140659b4cdaea6bc1dd6f7f60d63563488ba,hashCode(),167929,37,29
77937,gerrit-server_src_main_java_com_google_gerrit_server_git_GitModules.java,2.0,"void load(com.google.gerrit.server.project.ProjectCache cache) throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = branch.getParentKey(); logDebug(""Loading .gitmodules of {} for project {}"", branch, project); try { orm.openRepo(project, false); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new java.io.IOException(e); } OpenRepo or = orm.getRepo(project); ObjectId id = or.repo.resolve(branch.get()); if (id == null) { throw new java.io.IOException((""Cannot open branch "" + (branch.get()))); } org.eclipse.jgit.revwalk.RevCommit commit = or.rw.parseCommit(id); org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or.repo, com.google.gerrit.server.git.GitModules.GIT_MODULES, commit.getTree()); if ((tw == null) || (((tw.getRawMode(0)) & (org.eclipse.jgit.lib.FileMode.TYPE_MASK)) != (org.eclipse.jgit.lib.FileMode.TYPE_FILE))) { return; } try { org.eclipse.jgit.lib.BlobBasedConfig bbc = new org.eclipse.jgit.lib.BlobBasedConfig(null, or.repo, commit, com.google.gerrit.server.git.GitModules.GIT_MODULES); subscriptions = new com.google.gerrit.server.util.SubmoduleSectionParser(cache, bbc, thisServer, branch).parseAllSections(); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException((""Could not read .gitmodule file of super project: "" + (branch.getParentKey())), e); } }",c6292d42c473722588c7ec66804e396ecd3d187b,"void load() throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = branch.getParentKey(); logDebug(""Loading .gitmodules of {} for project {}"", branch, project); try { orm.openRepo(project, false); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new java.io.IOException(e); } OpenRepo or = orm.getRepo(project); ObjectId id = or.repo.resolve(branch.get()); if (id == null) { throw new java.io.IOException((""Cannot open branch "" + (branch.get()))); } org.eclipse.jgit.revwalk.RevCommit commit = or.rw.parseCommit(id); org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or.repo, com.google.gerrit.server.git.GitModules.GIT_MODULES, commit.getTree()); if ((tw == null) || (((tw.getRawMode(0)) & (org.eclipse.jgit.lib.FileMode.TYPE_MASK)) != (org.eclipse.jgit.lib.FileMode.TYPE_FILE))) { return; } try { org.eclipse.jgit.lib.BlobBasedConfig bbc = new org.eclipse.jgit.lib.BlobBasedConfig(null, or.repo, commit, com.google.gerrit.server.git.GitModules.GIT_MODULES); subscriptions = new com.google.gerrit.server.util.SubmoduleSectionParser(bbc, thisServer, branch).parseAllSections(); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException((""Could not read .gitmodule file of super project: "" + (branch.getParentKey())), e); } }",cdce47c0bb68dce8f60d1464f9029de10e2c0068,load(com.google.gerrit.server.project.ProjectCache),load(),4,0,"void load() throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = branch.getParentKey(); logDebug(""Loading .gitmodules of {} for project {}"", branch, project); try { orm.openRepo(project, false); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new java.io.IOException(e); } OpenRepo or = orm.getRepo(project); ObjectId id = or.repo.resolve(branch.get()); if (id == null) { throw new java.io.IOException((""Cannot open branch "" + (branch.get()))); } org.eclipse.jgit.revwalk.RevCommit commit = or.rw.parseCommit(id); org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or.repo, com.google.gerrit.server.git.GitModules.GIT_MODULES, commit.getTree()); if ((tw == null) || (((tw.getRawMode(0)) & (org.eclipse.jgit.lib.FileMode.TYPE_MASK)) != (org.eclipse.jgit.lib.FileMode.TYPE_FILE))) { return; } try { org.eclipse.jgit.lib.BlobBasedConfig bbc = new org.eclipse.jgit.lib.BlobBasedConfig(null, or.repo, commit, com.google.gerrit.server.git.GitModules.GIT_MODULES); subscriptions = new com.google.gerrit.server.util.SubmoduleSectionParser(bbc, canonicalWebUrl, branch).parseAllSections(); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException((""Could not read .gitmodule file of super project: "" + (branch.getParentKey())), e); } }",d91a8651eb067190fd3358567c8538f7b770839d,load(),39345,424,425
79040,gerrit-server_src_main_java_com_google_gerrit_server_config_GetServerInfo.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.server.config.GetServerInfo.NoteDbInfo getNoteDbInfo(org.eclipse.jgit.lib.Config cfg) { com.google.gerrit.server.config.GetServerInfo.NoteDbInfo info = new com.google.gerrit.server.config.GetServerInfo.NoteDbInfo(); info.tables = new java.util.HashMap<>(); for (java.lang.String t : cfg.getSubsections(""noteDb"")) { com.google.gerrit.server.config.GetServerInfo.NoteDbTableInfo tableInfo = new com.google.gerrit.server.config.GetServerInfo.NoteDbTableInfo(); tableInfo.read = cfg.getBoolean(""notedb"", t, ""read"", false); tableInfo.write = cfg.getBoolean(""notedb"", t, ""write"", false); info.tables.put(t, tableInfo); } return info; }",87dc821003f363b48aa60f958550ca200fd373d3,,getNoteDbInfo(org.eclipse.jgit.lib.Config),3,7,private boolean isNoteDbEnabled(org.eclipse.jgit.lib.Config cfg) { return migration.readChanges(); },c8c3844f601b17e2677e578a416b89f8e484e9f4,isNoteDbEnabled(org.eclipse.jgit.lib.Config),151439,208,27
68172,gerrit-server_src_main_java_com_google_gerrit_server_index_ChangeField.java,36.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public Iterable<java.lang.String> get(com.google.gerrit.server.query.change.ChangeData input, com.google.gerrit.server.index.FillArgs args) throws com.google.gwtorm.server.OrmException { Set<com.google.gerrit.reviewdb.client.Account.Id> reviewedBy = input.reviewedBy(); if (reviewedBy.isEmpty()) { return com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.index.NOT_REVIEWED); } List<java.lang.String> result = new com.google.gerrit.server.index.ArrayList<>(reviewedBy.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : reviewedBy) { result.add(java.lang.Integer.toString(id.get())); } return result; }",ae8c0c79d30838a62caa11b7a0b1675920db2698,,"get(com.google.gerrit.server.query.change.ChangeData,com.google.gerrit.server.index.FillArgs)",4,10,"@java.lang.Override public Iterable<java.lang.Integer> get(com.google.gerrit.server.query.change.ChangeData input, com.google.gerrit.server.index.FillArgs args) throws com.google.gwtorm.server.OrmException { Set<com.google.gerrit.reviewdb.client.Account.Id> reviewedBy = input.reviewedBy(); if (reviewedBy.isEmpty()) { return com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.index.NOT_REVIEWED); } List<java.lang.Integer> result = new com.google.gerrit.server.index.ArrayList<>(reviewedBy.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : reviewedBy) { result.add(id.get()); } return result; }",9fe21a49ebb45492d415875b692b562373dc949b,"get(com.google.gerrit.server.query.change.ChangeData,com.google.gerrit.server.index.FillArgs)",3390,207,199
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_Header.java,1.0,"@java.lang.Override protected void onLoad() { com.google.gerrit.client.diff.DiffApi.list(patchSetId, base.asPatchSetId(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo> result) { files = result.values(); com.google.gerrit.client.info.FileInfo.sortFileInfoByPath(files); fileNumber.setInnerText(java.lang.Integer.toString(((com.google.gerrit.client.rpc.Natives.asList(files).indexOf(result.get(path))) + 1))); fileCount.setInnerText(java.lang.Integer.toString(files.length())); } }); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.changes.ChangeApi.revision(patchSetId).view(""files"").addParameterTrue(""reviewed"").get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { boolean b = com.google.gerrit.client.rpc.Natives.asList(result).contains(path); reviewed.setValue(b, false); if ((!b) && ((reviewedState) == (com.google.gerrit.client.diff.Header.ReviewedState.AUTO_REVIEW))) { postAutoReviewed(); } reviewedState = com.google.gerrit.client.diff.Header.ReviewedState.LOADED; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }",bac7b2947805b44534a7404ff1e5d4db7e6833cd,"@java.lang.Override protected void onLoad() { com.google.gerrit.client.diff.DiffApi.list(patchSetId, base.asPatchSetId(), Project.NameKey.asStringOrNull(projectKey), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo> result) { files = result.values(); com.google.gerrit.client.info.FileInfo.sortFileInfoByPath(files); fileNumber.setInnerText(java.lang.Integer.toString(((com.google.gerrit.client.rpc.Natives.asList(files).indexOf(result.get(path))) + 1))); fileCount.setInnerText(java.lang.Integer.toString(files.length())); } }); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.changes.ChangeApi.revision(patchSetId, Project.NameKey.asStringOrNull(projectKey)).view(""files"").addParameterTrue(""reviewed"").get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { boolean b = com.google.gerrit.client.rpc.Natives.asList(result).contains(path); reviewed.setValue(b, false); if ((!b) && ((reviewedState) == (com.google.gerrit.client.diff.Header.ReviewedState.AUTO_REVIEW))) { postAutoReviewed(); } reviewedState = com.google.gerrit.client.diff.Header.ReviewedState.LOADED; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }",e40e564fc3430846aeeeebbc68720bdfff8eff32,onLoad(),onLoad(),7,1,"@java.lang.Override protected void onLoad() { com.google.gerrit.client.diff.DiffApi.list(Project.NameKey.asStringOrNull(projectKey), patchSetId, base.asPatchSetId(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo> result) { files = result.values(); com.google.gerrit.client.info.FileInfo.sortFileInfoByPath(files); fileNumber.setInnerText(java.lang.Integer.toString(((com.google.gerrit.client.rpc.Natives.asList(files).indexOf(result.get(path))) + 1))); fileCount.setInnerText(java.lang.Integer.toString(files.length())); } }); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.changes.ChangeApi.revision(Project.NameKey.asStringOrNull(projectKey), patchSetId).view(""files"").addParameterTrue(""reviewed"").get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { boolean b = com.google.gerrit.client.rpc.Natives.asList(result).contains(path); reviewed.setValue(b, false); if ((!b) && ((reviewedState) == (com.google.gerrit.client.diff.Header.ReviewedState.AUTO_REVIEW))) { postAutoReviewed(); } reviewedState = com.google.gerrit.client.diff.Header.ReviewedState.LOADED; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }",3e93bd09a59d30830be0047b44f29452620e52dc,onLoad(),211395,473,472
39271,gerrit-server_src_main_java_com_google_gerrit_server_plugins_JsPlugin.java,,,,@java.lang.Override @javax.annotation.Nullable public com.google.inject.Injector getSshInjector() { return null; },3fb1f1fa0c9b3ac28234d7f85f56b392af482778,,getSshInjector(),20,0,@java.lang.Override @com.google.gerrit.common.Nullable public com.google.inject.Injector getSshInjector() { return null; },604b3fe87fe517985f1d382d6ce10ae8d68a0dcd,getSshInjector(),100813,29,34
74349,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeUpdate.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setChangeId(java.lang.String changeId) { this.changeId = changeId; },e2d1ce772bd9944406a0f0aa1619b4d17555e63d,,setChangeId(java.lang.String),4,29,"public void setChangeId(java.lang.String changeId) throws com.google.gwtorm.server.OrmException { if ((notes) == null) { notes = getChangeNotes().load(); } checkArgument(notes.getChange().getKey().get().equals(changeId), ""The Change-Id was already set to %s, so we cannot set this Change-Id: %s"", notes.getChange().getKey(), changeId); this.changeId = changeId; }",ebcfbd2c5f4dc9bd8787f76d74b8f68a7203ec4e,setChangeId(java.lang.String),39067,24,105
57512,gerrit-server_src_main_java_com_google_gerrit_server_config_PostCaches.java,0.0,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.config.ConfigResource rsrc, com.google.gerrit.server.config.PostCaches.Input input) throws com.google.gerrit.extensions.restapi.BadRequestException { if (!(com.google.gerrit.server.config.PostCaches.Operation.LIST.equals(input.operation))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""unsupported operation: "" + (input.operation))); } return listCaches.get().getCaches().keySet(); }",5a54de9338ef4c65bdfc2f54178994672eaf4380,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.config.ConfigResource rsrc, com.google.gerrit.server.config.PostCaches.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.server.CurrentUser user = self.get(); if (user instanceof com.google.gerrit.server.AnonymousUser) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } else if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } if ((input == null) || ((input.operation) == null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""operation must be specified""); } switch (input.operation) { case LIST : if (!(user.getCapabilities().canViewCaches())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to view caches""); } return listCaches.get().getCaches().keySet(); case FLUSH_ALL : if (!(user.getCapabilities().canFlushCaches())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to flush caches""); } for (java.util.Map.Entry<java.lang.String, com.google.inject.Provider<com.google.common.cache.Cache<?, ?>>> e : listCaches.get().getCaches().entrySet()) { if (FlushCache.WEB_SESSIONS.equals(e.getKey())) { continue; } flushCache.get().apply(new com.google.gerrit.server.config.CacheResource(e.getKey(), e.getValue()), new com.google.gerrit.server.config.FlushCache.Input()); } return com.google.gerrit.extensions.restapi.Response.ok(""ok""); default : throw new com.google.gerrit.extensions.restapi.BadRequestException((""unsupported operation: "" + (input.operation))); } }",df98d74289eacfa6ca6fead869762bb3c906cdce,"apply(com.google.gerrit.server.config.ConfigResource,com.google.gerrit.server.config.PostCaches$Input)","apply(com.google.gerrit.server.config.ConfigResource,com.google.gerrit.server.config.PostCaches$Input)",11,0,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.config.ConfigResource rsrc, com.google.gerrit.server.config.PostCaches.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((input == null) || ((input.operation) == null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""operation must be specified""); } switch (input.operation) { case FLUSH_ALL : for (DynamicMap.Entry<com.google.common.cache.Cache<?, ?>> e : cacheMap) { com.google.gerrit.server.config.CacheResource cacheResource = new com.google.gerrit.server.config.CacheResource(e.getPluginName(), e.getExportName(), e.getProvider()); if (FlushCache.WEB_SESSIONS.equals(cacheResource.getName())) { continue; } flushCache.apply(cacheResource, null); } return com.google.gerrit.extensions.restapi.Response.ok(""""); default : throw new com.google.gerrit.extensions.restapi.BadRequestException((""unsupported operation: "" + (input.operation))); } }",58cbfb736611859c7f9ccd173ebfb02e9cbd507a,"apply(com.google.gerrit.server.config.ConfigResource,com.google.gerrit.server.config.PostCaches$Input)",157130,498,305
78954,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotes.java,37.0,"private com.google.gerrit.server.notedb.LoadHandle rebuildAndOpen(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectId oldId) throws java.io.IOException { try { com.google.gerrit.server.notedb.NoteDbChangeState newState; try { newState = args.rebuilder.get().rebuild(args.db.get(), getChangeId()).newState(); repo.scanForRepoChanges(); } catch (java.io.IOException e) { newState = recheckUpToDate(repo, e); } if (newState == null) { return super.openHandle(repo, oldId); } return com.google.gerrit.server.notedb.LoadHandle.create(com.google.gerrit.server.notedb.ChangeNotesCommit.newRevWalk(repo), newState.getChangeMetaId()); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return super.openHandle(repo, oldId); } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException(e); } }",32b210b76d5f35ed08e64ce04a211a639e344a94,"private com.google.gerrit.server.notedb.LoadHandle rebuildAndOpen(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectId oldId) throws java.io.IOException { com.google.gerrit.reviewdb.client.Change.Id cid = getChangeId(); try { com.google.gerrit.server.notedb.NoteDbUpdateManager manager = args.rebuilder.get().stage(args.db.get(), cid); com.google.gerrit.server.notedb.NoteDbUpdateManager.Result r = manager.stageAndApplyDelta(change); try { manager.execute(); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { rebuildResult = checkNotNull(r); checkNotNull(r.newState()); checkNotNull(r.staged()); return com.google.gerrit.server.notedb.LoadHandle.create(com.google.gerrit.server.notedb.ChangeNotesCommit.newStagedRevWalk(repo, r.staged().changeObjects()), r.newState().getChangeMetaId()); } if ((r.newState()) == null) { return super.openHandle(repo, oldId); } return com.google.gerrit.server.notedb.LoadHandle.create(com.google.gerrit.server.notedb.ChangeNotesCommit.newRevWalk(repo), r.newState().getChangeMetaId()); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return super.openHandle(repo, oldId); } catch (com.google.gwtorm.server.OrmException e) { throw new java.io.IOException(e); } }",f0c3f7851c1591de0228ee6da76f9e106a43cb9c,"rebuildAndOpen(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.ObjectId)","rebuildAndOpen(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.ObjectId)",2,37,"private com.google.gerrit.server.notedb.LoadHandle rebuildAndOpen(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectId oldId) throws java.io.IOException { com.google.gerrit.reviewdb.client.Change.Id cid = getChangeId(); com.google.gerrit.reviewdb.server.ReviewDb db = args.db.get(); com.google.gerrit.server.notedb.ChangeRebuilder rebuilder = args.rebuilder.get(); try { com.google.gerrit.server.notedb.NoteDbUpdateManager manager = rebuilder.stage(db, cid); if (manager == null) { return super.openHandle(repo, oldId); } com.google.gerrit.server.notedb.NoteDbUpdateManager.Result r = manager.stageAndApplyDelta(change); try { rebuilder.execute(db, cid, manager); repo.scanForRepoChanges(); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { rebuildResult = checkNotNull(r); checkNotNull(r.newState()); checkNotNull(r.staged()); return com.google.gerrit.server.notedb.LoadHandle.create(com.google.gerrit.server.notedb.ChangeNotesCommit.newStagedRevWalk(repo, r.staged().changeObjects()), r.newState().getChangeMetaId()); } return com.google.gerrit.server.notedb.LoadHandle.create(com.google.gerrit.server.notedb.ChangeNotesCommit.newRevWalk(repo), r.newState().getChangeMetaId()); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return super.openHandle(repo, oldId); } catch (com.google.gwtorm.server.OrmException e) { throw new java.io.IOException(e); } }",533e9ff1b911900c051ef2591b95a3a188b3ac3d,"rebuildAndOpen(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.ObjectId)",153594,389,439
60621,gerrit-server_src_main_java_com_google_gerrit_server_project_GetTag.java,,,,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.project.TagResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, java.lang.Exception { return resource.getTagInfo(); }",4d7e0ce445df2cb9e6cded2b4c8a054221cf4eb6,,apply(com.google.gerrit.server.project.TagResource),18,0,@java.lang.Override public com.google.gerrit.extensions.common.TagInfo apply(com.google.gerrit.server.project.TagResource resource) { return resource.getTagInfo(); },b424b74b594f37fed69dc3c7034bdb44c5090d8a,apply(com.google.gerrit.server.project.TagResource),75303,90,45
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_Header.java,9.0,"private java.lang.String url(com.google.gerrit.client.info.FileInfo info) { return (diffScreenType) == (com.google.gerrit.extensions.client.GeneralPreferencesInfo.DiffView.UNIFIED_DIFF) ? com.google.gerrit.client.Dispatcher.toUnified(base, patchSetId, info.path()) : com.google.gerrit.client.Dispatcher.toSideBySide(base, patchSetId, info.path()); }",24257c66cbddd862f09a28e0059bd339ed258e85,"private java.lang.String url(com.google.gerrit.client.info.FileInfo info) { return (diffScreenType) == (com.google.gerrit.extensions.client.GeneralPreferencesInfo.DiffView.UNIFIED_DIFF) ? com.google.gerrit.client.Dispatcher.toUnified(base, patchSetId, projectKey, info.path()) : com.google.gerrit.client.Dispatcher.toSideBySide(base, patchSetId, projectKey, info.path()); }",66dc64d4cc91effb49317a86de447c4ea7847570,url(com.google.gerrit.client.info.FileInfo),url(com.google.gerrit.client.info.FileInfo),7,9,"private java.lang.String url(com.google.gerrit.client.info.FileInfo info) { return (diffScreenType) == (com.google.gerrit.extensions.client.GeneralPreferencesInfo.DiffView.UNIFIED_DIFF) ? com.google.gerrit.client.Dispatcher.toUnified(projectKey, base, patchSetId, info.path()) : com.google.gerrit.client.Dispatcher.toSideBySide(projectKey, base, patchSetId, info.path()); }",7e2d52b542538e99e8bf7b0c2f3982e3e66a53df,url(com.google.gerrit.client.info.FileInfo),211381,114,114
105472,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_ChangeApiImpl.java,27.0,"@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(change, new com.google.gerrit.server.change.Index.Input()); } catch (java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot index change"", e); } }",001645d77ccb2d06314ef26167ed17e77b50cf83,"@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(change, new com.google.gerrit.server.change.Index.Input()); } catch (java.lang.Exception e) { com.google.gerrit.server.api.changes.ChangeApiImpl.throwRestApiException(""Cannot index change"", e); } }",4cdb9780e670c870267878d53d5d15d6d87c88a9,index(),index(),6,26,"@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(change, new com.google.gerrit.server.change.Index.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot index change"", e); } }",f5f7c0ceeacf9c6e644f2692a70bbd71c5975ff3,index(),18780,91,88
166630,java_com_google_gerrit_server_rules_DefaultSubmitRule.java,,,,"private static java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> getApprovalsForLabel(java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals, com.google.gerrit.common.data.LabelType t) { return approvals.stream().filter(( input) -> input.getLabel().equals(t.getLabelId().get())).collect(java.util.stream.Collectors.toList()); }",34223f2d775b0915fbef7f54620c14348268c89a,,"getApprovalsForLabel(java.util.List,com.google.gerrit.common.data.LabelType)",7,2,"private static java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> getApprovalsForLabel(java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals, com.google.gerrit.common.data.LabelType t) { return approvals.stream().filter(( input) -> input.getLabel().equals(t.getLabelId().get())).collect(toImmutableList()); }",83892db0d4c3d6755fe7e780a46bd99755dc2cbe,"getApprovalsForLabel(java.util.List,com.google.gerrit.common.data.LabelType)",114538,114,107
52068,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeTable2.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.lang.String toHex(int i) { java.lang.String hex = java.lang.Integer.toHexString(i); if ((hex.length()) == 1) { hex = ""0"" + hex; } return hex; }",3ae71e34f863dd7e2ae062d366db5ee186f43e7d,,toHex(int),5,11,"private static java.lang.String toHex(int i) { java.lang.String hex = java.lang.Integer.toHexString(i); return (hex.length()) == 1 ? ""0"" + hex : hex; }",6c88a0b84fb32b68da76b04e1f794641642c85e5,toHex(int),185722,52,48
9700,src_main_java_com_google_gerrit_git_MergeOp.java,16.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private Account.Id getSubmitter(com.google.gerrit.client.reviewdb.Change c) { com.google.gerrit.client.reviewdb.ChangeApproval submitter = null; try { final java.util.List<com.google.gerrit.client.reviewdb.ChangeApproval> approvals = schema.changeApprovals().byChange(c.getId()).toList(); final com.google.gerrit.client.workflow.FunctionState fs = new com.google.gerrit.client.workflow.FunctionState(c, approvals); for (com.google.gerrit.client.reviewdb.ChangeApproval a : approvals) { if (((a.getValue()) > 0) && (ApprovalCategory.SUBMIT.equals(a.getCategoryId()))) { if ((submitter == null) || ((a.getGranted().compareTo(submitter.getGranted())) > 0)) { submitter = a; } } } } catch (com.google.gwtorm.client.OrmException e) { } return submitter != null ? submitter.getAccountId() : null; }",981ba9d7be6b2107ede785a97eb6e4e2bf36f399,,getSubmitter(com.google.gerrit.client.reviewdb.Change),4,2,private Account.Id getSubmitter(com.google.gerrit.client.reviewdb.Change c) { com.google.gerrit.client.reviewdb.ChangeApproval submitter = null; try { final java.util.List<com.google.gerrit.client.reviewdb.ChangeApproval> approvals = schema.changeApprovals().byChange(c.getId()).toList(); for (com.google.gerrit.client.reviewdb.ChangeApproval a : approvals) { if (((a.getValue()) > 0) && (ApprovalCategory.SUBMIT.equals(a.getCategoryId()))) { if ((submitter == null) || ((a.getGranted().compareTo(submitter.getGranted())) > 0)) { submitter = a; } } } } catch (com.google.gwtorm.client.OrmException e) { } return submitter != null ? submitter.getAccountId() : null; },323c446b8757bd93ca96daa83e30371f8ca44ef9,getSubmitter(com.google.gerrit.client.reviewdb.Change),23626,246,209
20017,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_account_GroupAdminServiceImpl.java,14.0,"public java.util.List<com.google.gerrit.reviewdb.AccountGroup> run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.server.IdentifiedUser user = identifiedUser.get(); final java.util.List<com.google.gerrit.reviewdb.AccountGroup> result; if (user.isAdministrator()) { result = db.accountGroups().all().toList(); } else { final java.util.HashSet<com.google.gerrit.reviewdb.AccountGroup.Id> seen = new java.util.HashSet<com.google.gerrit.reviewdb.AccountGroup.Id>(); result = new java.util.ArrayList<com.google.gerrit.reviewdb.AccountGroup>(); for (final com.google.gerrit.reviewdb.AccountGroup.Id myGroup : user.getEffectiveGroups()) { for (com.google.gerrit.reviewdb.AccountGroup group : db.accountGroups().ownedByGroup(myGroup)) { final com.google.gerrit.reviewdb.AccountGroup.Id id = group.getId(); if (!(seen.add(id))) { continue; } try { com.google.gerrit.server.account.GroupControl c = groupControlFactory.controlFor(id); if (c.isOwner()) { result.add(c.getAccountGroup()); } } catch (NoSuchGroupException e) { continue; } } } } java.util.Collections.sort(result, new java.util.Comparator<com.google.gerrit.reviewdb.AccountGroup>() { public int compare(final com.google.gerrit.reviewdb.AccountGroup a, final com.google.gerrit.reviewdb.AccountGroup b) { return a.getName().compareTo(b.getName()); } }); return result; }",fd585fbfdede2a55df9e22602105ec1a0d2b77f3,"public java.util.List<com.google.gerrit.reviewdb.AccountGroup> run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.server.IdentifiedUser user = identifiedUser.get(); final java.util.List<com.google.gerrit.reviewdb.AccountGroup> result; if (user.isAdministrator()) { result = db.accountGroups().all().toList(); } else { final java.util.HashSet<com.google.gerrit.reviewdb.AccountGroup.Id> seen = new java.util.HashSet<com.google.gerrit.reviewdb.AccountGroup.Id>(); result = new java.util.ArrayList<com.google.gerrit.reviewdb.AccountGroup>(); for (com.google.gerrit.reviewdb.AccountGroup.UUID myGroupUUID : user.getEffectiveGroups()) { com.google.gerrit.reviewdb.AccountGroup ag = groupCache.get(myGroupUUID); if (ag == null) { continue; } com.google.gerrit.reviewdb.AccountGroup.Id myGroup = ag.getId(); for (com.google.gerrit.reviewdb.AccountGroup group : db.accountGroups().ownedByGroup(myGroup)) { final com.google.gerrit.reviewdb.AccountGroup.Id id = group.getId(); if (!(seen.add(id))) { continue; } try { com.google.gerrit.server.account.GroupControl c = groupControlFactory.controlFor(id); if (c.isOwner()) { result.add(c.getAccountGroup()); } } catch (NoSuchGroupException e) { continue; } } } } java.util.Collections.sort(result, new java.util.Comparator<com.google.gerrit.reviewdb.AccountGroup>() { public int compare(final com.google.gerrit.reviewdb.AccountGroup a, final com.google.gerrit.reviewdb.AccountGroup b) { return a.getName().compareTo(b.getName()); } }); return result; }",a02ee84e891dfd8ca36e53c0e9e65af403fb9b10,run(com.google.gerrit.reviewdb.ReviewDb),run(com.google.gerrit.reviewdb.ReviewDb),12,10,"public java.util.List<com.google.gerrit.reviewdb.AccountGroup> run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.server.IdentifiedUser user = identifiedUser.get(); final java.util.List<com.google.gerrit.reviewdb.AccountGroup> result; if (user.isAdministrator()) { result = db.accountGroups().all().toList(); } else { result = new java.util.ArrayList<com.google.gerrit.reviewdb.AccountGroup>(); for (final com.google.gerrit.reviewdb.AccountGroup group : db.accountGroups().all().toList()) { final com.google.gerrit.server.account.GroupControl c = groupControlFactory.controlFor(group); if (c.isVisible()) { result.add(c.getAccountGroup()); } } } java.util.Collections.sort(result, new java.util.Comparator<com.google.gerrit.reviewdb.AccountGroup>() { public int compare(final com.google.gerrit.reviewdb.AccountGroup a, final com.google.gerrit.reviewdb.AccountGroup b) { return a.getName().compareTo(b.getName()); } }); return result; }",4a4cc9f9ea5a91fecbe641aff6a3b90145874844,run(com.google.gerrit.reviewdb.ReviewDb),154634,484,299
148032,java_com_google_gerrit_server_restapi_project_GetAccess.java,6.0,"private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo group = visibleGroups.get(id); if (group == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); group = com.google.gerrit.server.project.GetAccess.INVISIBLE_SENTINEL; if (control.isVisible()) { group = groupJson.format(control.getGroup()); group.id = null; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.project.GetAccess.LOG.warn((""NoSuchGroupException; ignoring group "" + id), e); group = com.google.gerrit.server.project.GetAccess.INVISIBLE_SENTINEL; } visibleGroups.put(id, group); } return group; }",00dd0d2db4db6e818f088ef87fac92213bd0b973,"private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo group = visibleGroups.get(id); if (group == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); group = com.google.gerrit.server.restapi.project.GetAccess.INVISIBLE_SENTINEL; if (control.isVisible()) { group = groupJson.format(control.getGroup()); group.id = null; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.restapi.project.GetAccess.LOG.warn((""NoSuchGroupException; ignoring account "" + id), e); group = com.google.gerrit.server.restapi.project.GetAccess.INVISIBLE_SENTINEL; } visibleGroups.put(id, group); } return group; }",8f525b6e98fff71c9f59d6a761dd9a08481456a2,"loadGroup(java.util.Map,com.google.gerrit.reviewdb.client.AccountGroup$UUID)","loadGroup(java.util.Map,com.google.gerrit.reviewdb.client.AccountGroup$UUID)",17,6,"private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo group = visibleGroups.get(id); if (group == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); group = com.google.gerrit.server.restapi.project.GetAccess.INVISIBLE_SENTINEL; if (control.isVisible()) { group = groupJson.format(control.getGroup()); group.id = null; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.restapi.project.GetAccess.LOG.warn((""NoSuchGroupException; ignoring group "" + id), e); group = com.google.gerrit.server.restapi.project.GetAccess.INVISIBLE_SENTINEL; } visibleGroups.put(id, group); } return group; }",57cc77fcdcb205a5c8fab06724ce4ad771507571,"loadGroup(java.util.Map,com.google.gerrit.reviewdb.client.AccountGroup$UUID)",214853,290,290
94512,gerrit-server_src_main_java_com_google_gerrit_server_edit_tree_TreeCreator.java,,,,"private org.eclipse.jgit.dircache.DirCache createNewTree(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException { org.eclipse.jgit.dircache.DirCache newTree = readBaseTree(repository); java.util.List<org.eclipse.jgit.dircache.DirCacheEditor.PathEdit> pathEdits = getDesiredPathEdits(repository); applyPathEdits(newTree, pathEdits); return newTree; }",c1c93180b7df3eb1e60a27c1b137264b52d0e5e5,,createNewTree(org.eclipse.jgit.lib.Repository),5,5,"private org.eclipse.jgit.dircache.DirCache createNewTree(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException { org.eclipse.jgit.dircache.DirCache newTree = readBaseTree(repository); java.util.List<org.eclipse.jgit.dircache.DirCacheEditor.PathEdit> pathEdits = getPathEdits(repository); com.google.gerrit.server.edit.tree.TreeCreator.applyPathEdits(newTree, pathEdits); return newTree; }",481f4ce401beb5652cdb79de411df0896f82e0df,createNewTree(org.eclipse.jgit.lib.Repository),196323,109,124
68187,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_edit_ChangeEditIT.java,36.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void assertPublishedEditMessage(com.google.gerrit.reviewdb.client.Change change) throws java.lang.Exception { assertChangeMessage(change, ""Published edit on patch set 1""); }",3f6eaf727fe54f829dcb886a9a0b7c448d656b02,,assertPublishedEditMessage(com.google.gerrit.reviewdb.client.Change),8,50,@org.junit.AfterClass public static void restoreTime() { org.joda.time.DateTimeUtils.setCurrentMillisSystem(); },83524e4e33f1ae202d6b78753492f01833c01695,restoreTime(),53598,45,28
170272,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,81.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void nonStrictLabelVotesPerDefault() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus(); java.lang.String changeId = r.getChangeId(); com.google.gerrit.extensions.api.changes.ReviewInput in = com.google.gerrit.extensions.api.changes.ReviewInput.approve(); in.label(""Verified"", (-1)); in.label(""Code-Style"", 1); in.label(""Library-Compliance"", (-1)); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().keySet()).containsExactly(""Code-Review""); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().values()).containsExactly(((short) (2))); assertThat(gApi.changes().id(changeId).get().submittable).isTrue(); in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.label(""Code-Review"", 42); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().values()).containsExactly(((short) (2))); }",d4362a29155dcc28c5b6126aed796dfe5d30f231,,nonStrictLabelVotesPerDefault(),5,140,"@org.junit.Test public void nonStrictLabelWithInvalidLabelPerDefault() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); com.google.gerrit.extensions.api.changes.ReviewInput input = com.google.gerrit.extensions.api.changes.ReviewInput.approve().label(""Code-Style"", 1); gApi.changes().id(changeId).current().review(input); java.util.Map<java.lang.String, java.lang.Short> votes = gApi.changes().id(changeId).current().reviewer(admin.email).votes(); assertThat(votes.keySet()).containsExactly(""Code-Review""); assertThat(votes.values()).containsExactly(((short) (2))); }",82380e81778f27be8e63782d71f1fca68b3ac862,nonStrictLabelWithInvalidLabelPerDefault(),89900,344,175
147651,gerrit-server_src_main_java_com_google_gerrit_server_change_DeletePrivate.java,1.0,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canDeletePrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to unmark private""); } if (!(rsrc.getChange().isPrivate())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is not private""); } com.google.gerrit.server.change.SetPrivateOp op = new com.google.gerrit.server.change.SetPrivateOp(cmUtil, false, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",af043385b8cc79bda5e080f0c68a8f31cc087bd7,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canDeletePrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to unmark private""); } if (!(rsrc.getChange().isPrivate())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is not private""); } com.google.gerrit.server.change.SetPrivateOp op = setPrivateOpFactory.create(cmUtil, false, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",63e091e8130b7a2e90038e70e590c93d7555ac05,"applyImpl(com.google.gerrit.server.update.BatchUpdate$Factory,com.google.gerrit.server.change.ChangeResource,com.google.gerrit.server.change.SetPrivateOp$Input)","applyImpl(com.google.gerrit.server.update.BatchUpdate$Factory,com.google.gerrit.server.change.ChangeResource,com.google.gerrit.server.change.SetPrivateOp$Input)",6,1,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canDeletePrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to unmark private""); } if (!(rsrc.getChange().isPrivate())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is not private""); } com.google.gerrit.server.change.SetPrivateOp op = new com.google.gerrit.server.change.SetPrivateOp(cmUtil, false, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",af043385b8cc79bda5e080f0c68a8f31cc087bd7,"applyImpl(com.google.gerrit.server.update.BatchUpdate$Factory,com.google.gerrit.server.change.ChangeResource,com.google.gerrit.server.change.SetPrivateOp$Input)",168132,302,311
72084,gerrit-httpd_src_main_java_com_google_gerrit_httpd_raw_ResourceServlet.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.concurrent.Callable<com.google.gerrit.httpd.raw.ResourceServlet.Resource> newLoader(final java.nio.file.Path p) { return new java.util.concurrent.Callable<com.google.gerrit.httpd.raw.ResourceServlet.Resource>() { @java.lang.Override public com.google.gerrit.httpd.raw.ResourceServlet.Resource call() throws java.io.IOException { return new com.google.gerrit.httpd.raw.ResourceServlet.Resource(java.nio.file.Files.getLastModifiedTime(p), com.google.gerrit.httpd.raw.ResourceServlet.contentType(p.toString()), java.nio.file.Files.readAllBytes(p)); } }; }",17b819a8cc2c95c2bcc9f0c15936a769a146d187,,newLoader(java.nio.file.Path),7,7,"private java.util.concurrent.Callable<com.google.gerrit.httpd.raw.ResourceServlet.Resource> newLoader(final java.nio.file.Path p) { return new java.util.concurrent.Callable<com.google.gerrit.httpd.raw.ResourceServlet.Resource>() { @java.lang.Override public com.google.gerrit.httpd.raw.ResourceServlet.Resource call() throws java.io.IOException { try { return new com.google.gerrit.httpd.raw.ResourceServlet.Resource(java.nio.file.Files.getLastModifiedTime(p), com.google.gerrit.httpd.raw.ResourceServlet.contentType(p.toString()), java.nio.file.Files.readAllBytes(p)); } catch (java.nio.file.NoSuchFileException e) { return com.google.gerrit.httpd.raw.ResourceServlet.Resource.NOT_FOUND; } } }; }",15aff410c8305c421b6786d7c8eee8e6c89abf93,newLoader(java.nio.file.Path),74363,170,210
51882,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen2.java,37.0,"private void renderHistory(com.google.gerrit.client.changes.ChangeInfo info) { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.MessageInfo> messages = info.messages(); if (messages != null) { for (int i = 0; i < (messages.length()); i++) { history.add(new com.google.gerrit.client.change.Message(commentLinkProcessor, messages.get(i))); } } }",adf64b5218b4ecd74190b45351204d9cedeae1d6,"private void renderHistory(com.google.gerrit.client.changes.ChangeInfo info) { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.MessageInfo> messages = info.messages(); if (messages != null) { for (int i = 0; i < (messages.length()); i++) { history.add(new com.google.gerrit.client.change.Message(commentLinkProcessor, messages.get(i), revision, info)); } } }",c192890401b929ab3fda52b2d15d142940e60749,renderHistory(com.google.gerrit.client.changes.ChangeInfo),renderHistory(com.google.gerrit.client.changes.ChangeInfo),6,3,private void renderCommitSubject(com.google.gerrit.client.changes.ChangeInfo info) { com.google.gerrit.client.changes.ChangeInfo.RevisionInfo rev = info.revision(revision); java.lang.String sub = rev.commit().subject(); commitSubjectText.setInnerSafeHtml(commentLinkProcessor.apply(new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().append(sub).linkify())); },2fe0cf9ad6c41b091b8f119696552b94549d1287,renderCommitSubject(com.google.gerrit.client.changes.ChangeInfo),185487,116,100
55120,gerrit-gwtui_src_main_java_com_google_gerrit_client_Gerrit.java,15.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static boolean isAbsolute(java.lang.String url) { java.lang.String pattern = ""^https?://.*""; return url.matches(pattern); }",e24ea1ec78ab24688cd2e259726af75070e80885,,isAbsolute(java.lang.String),2,36,"private static boolean isAbsolute(java.lang.String url) { return url.matches(""^https?://.*""); }",42f564cd496ff7098a98db3fbe3563de1d2a8626,isAbsolute(java.lang.String),183634,36,26
40563,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_registration_DynamicItem.java,,,,"public com.google.gerrit.extensions.registration.ReloadableRegistrationHandle<T> set(com.google.inject.Key<T> key, com.google.inject.Provider<T> item) { if (!(this.item.compareAndSet(null, item))) { throw new java.lang.RuntimeException((""Type already provided by "" + (this.item.get()))); } return new ReloadableHandle(key, item); }",80317c84ef6943b6677e54237a7912bf7123a432,,"set(com.google.inject.Key,com.google.inject.Provider)",3,10,"public com.google.gerrit.extensions.registration.ReloadableRegistrationHandle<T> set(com.google.inject.Key<T> key, com.google.inject.Provider<T> impl, java.lang.String pluginName) { final com.google.gerrit.extensions.registration.DynamicItem.NamedProvider<T> item = new com.google.gerrit.extensions.registration.DynamicItem.NamedProvider<T>(impl, pluginName); while (!(ref.compareAndSet(null, item))) { com.google.gerrit.extensions.registration.DynamicItem.NamedProvider<T> old = ref.get(); if (old != null) { throw new com.google.inject.ProvisionException(java.lang.String.format(""%s already provided by %s, ignoring plugin %s"", this.key.getTypeLiteral(), old.pluginName, pluginName)); } } return new ReloadableHandle(key, item); }",ee3da089c066df19076c7df70e11f080467f9b9e,"set(com.google.inject.Key,com.google.inject.Provider,java.lang.String)",28126,92,203
69817,gerrit-gwtui_src_test_java_com_google_gerrit_client_RelativeDateFormatterTest.java,2.0,"@org.junit.Test public void testFuture() { com.google.gerrit.client.RelativeDateFormatterTest.assertFormat((-100), com.google.gerrit.client.RelativeDateFormatter.YEAR_IN_MILLIS, ""in the future""); com.google.gerrit.client.RelativeDateFormatterTest.assertFormat((-1), com.google.gerrit.client.RelativeDateFormatter.SECOND_IN_MILLIS, ""in the future""); }",1726edb18fb9ae8aee7b6e210d1509b0b08ea220,"@org.junit.Test public void testFuture() { com.google.gerrit.client.RelativeDateFormatterTest.assertFormat((-100), com.google.gerrit.client.YEAR_IN_MILLIS, ""in the future""); com.google.gerrit.client.RelativeDateFormatterTest.assertFormat((-1), com.google.gerrit.client.SECOND_IN_MILLIS, ""in the future""); }",0378cb370246c490e50afd6bfb693bcbd3f693e6,testFuture(),testFuture(),9,2,"@org.junit.Test public void testFuture() { com.google.gerrit.client.RelativeDateFormatterTest.assertFormat((-100), com.google.gerrit.client.RelativeDateFormatter.YEAR_IN_MILLIS, ""in the future""); com.google.gerrit.client.RelativeDateFormatterTest.assertFormat((-1), com.google.gerrit.client.RelativeDateFormatter.SECOND_IN_MILLIS, ""in the future""); }",1726edb18fb9ae8aee7b6e210d1509b0b08ea220,testFuture(),193883,93,101
107257,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_AbstractNotificationTest.java,,,,"public com.google.gerrit.acceptance.AbstractNotificationTest.NotificationsSubject owner(@com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.RecipientType type) { return receives(actual().participants.owner, type); }",088aee18634c5e4ff597114dfe90c12a0049cf8d,,owner(com.google.gerrit.extensions.api.changes.RecipientType),24,0,"public com.google.gerrit.acceptance.AbstractNotificationTest.FakeEmailSenderSubject to(com.google.gerrit.acceptance.TestAccount... accounts) { return rcpt(com.google.gerrit.acceptance.TO, accounts); }",a2c75da3b36ae1e6d4e9c3894a607c3ddae18654,to(com.google.gerrit.acceptance.TestAccount[]),14938,60,56
80324,gerrit-server_src_main_java_com_google_gerrit_server_notedb_RepoSequence.java,1.0,"@java.lang.Override public RefUpdate.Result call() throws java.lang.Exception { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); afterReadRef.run(); org.eclipse.jgit.lib.ObjectId oldId; if (ref == null) { oldId = org.eclipse.jgit.lib.ObjectId.zeroId(); next = start; } else { oldId = ref.getObjectId(); next = parse(oldId); } return store(oldId, ((next) + (batchSize))); }",af9e6ba94d5c5512f245106d1ded6cdef5bc08af,"@java.lang.Override public RefUpdate.Result call() throws java.lang.Exception { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); afterReadRef.run(); org.eclipse.jgit.lib.ObjectId oldId; if (ref == null) { oldId = org.eclipse.jgit.lib.ObjectId.zeroId(); next = seed.get(); } else { oldId = ref.getObjectId(); next = parse(oldId); } return store(oldId, ((next) + (batchSize))); }",5c95266c833a6c746ed9023b0f8d3ee4f12a36ba,call(),call(),5,3,"@java.lang.Override public RefUpdate.Result call() throws java.lang.Exception { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); afterReadRef.run(); org.eclipse.jgit.lib.ObjectId oldId; if (ref == null) { oldId = org.eclipse.jgit.lib.ObjectId.zeroId(); next = seed.get(); } else { oldId = ref.getObjectId(); next = parse(oldId); } return store(repo, rw, oldId, ((next) + (batchSize))); }",2c4c0ec9beccfe266b2bd312208b5d2ad0783c0f,call(),83064,124,128
140535,javatests_com_google_gerrit_acceptance_server_change_PatchListCacheIT.java,4.0,"private java.util.List<com.google.gerrit.server.patch.PatchListEntry> getCurrentPatches(java.lang.String changeId) throws java.lang.Exception { return patchListCache.get(getKey(null, getCurrentRevisionId(changeId)), project).getPatches(); }",7846cc6efb58a211a5c9b59c54e41532a0258287,"private java.util.List<com.google.gerrit.server.patchlib.PatchListEntry> getCurrentPatches(java.lang.String changeId) throws java.lang.Exception { return patchListCache.get(getKey(null, getCurrentRevisionId(changeId)), project).getPatches(); }",6e0069d40c13898f036bb19c37fe8aa84940ff45,getCurrentPatches(java.lang.String),getCurrentPatches(java.lang.String),11,2,"private java.util.List<com.google.gerrit.server.diff.PatchListEntry> getCurrentPatches(java.lang.String changeId) throws java.lang.Exception { return patchListCache.get(getKey(null, getCurrentRevisionId(changeId)), project).getPatches(); }",d8dbba711b62d2d55acf7da80df97c8427f3930c,getCurrentPatches(java.lang.String),15527,68,67
24856,gerrit-server_src_main_java_com_google_gerrit_server_config_GerritRequestModule.java,0.0,@java.lang.Override protected void configure() { bind(com.google.gerrit.server.RequestCleanup.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.reviewdb.ReviewDb.class).toProvider(com.google.gerrit.server.config.RequestScopedReviewDbProvider.class).in(com.google.inject.servlet.RequestScoped.class); bind(IdentifiedUser.RequestFactory.class).in(com.google.gerrit.server.config.SINGLETON); bind(MetaDataUpdate.User.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.server.account.AccountResolver.class); bind(com.google.gerrit.server.query.change.ChangeQueryRewriter.class); bind(ChangeControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); bind(GroupControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); bind(ProjectControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); factory(ChangeQueryBuilder.Factory.class); factory(ReceiveCommits.Factory.class); factory(MergeOp.Factory.class); factory(CreateCodeReviewNotes.Factory.class); factory(AddReviewerSender.Factory.class); factory(CreateChangeSender.Factory.class); factory(PublishComments.Factory.class); factory(ReplacePatchSetSender.Factory.class); factory(AbandonedSender.Factory.class); factory(RevertedSender.Factory.class); factory(CommentSender.Factory.class); factory(MergedSender.Factory.class); factory(MergeFailSender.Factory.class); factory(RegisterNewEmailSender.Factory.class); factory(PerformCreateGroup.Factory.class); },aea3c3263fed5ab8240b8869f697a8f658a92109,@java.lang.Override protected void configure() { bind(com.google.gerrit.server.RequestCleanup.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.reviewdb.ReviewDb.class).toProvider(com.google.gerrit.server.config.RequestScopedReviewDbProvider.class).in(com.google.inject.servlet.RequestScoped.class); bind(IdentifiedUser.RequestFactory.class).in(com.google.gerrit.server.config.SINGLETON); bind(MetaDataUpdate.User.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.server.account.AccountResolver.class); bind(com.google.gerrit.server.query.change.ChangeQueryRewriter.class); bind(ChangeControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); bind(GroupControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); bind(ProjectControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); factory(ChangeQueryBuilder.Factory.class); factory(ReceiveCommits.Factory.class); factory(MergeOp.Factory.class); factory(CreateCodeReviewNotes.Factory.class); factory(AddReviewerSender.Factory.class); factory(CreateChangeSender.Factory.class); factory(PublishComments.Factory.class); factory(ReplacePatchSetSender.Factory.class); factory(AbandonedSender.Factory.class); factory(RevertedSender.Factory.class); factory(CommentSender.Factory.class); factory(MergedSender.Factory.class); factory(MergeFailSender.Factory.class); factory(RegisterNewEmailSender.Factory.class); factory(PerformCreateGroup.Factory.class); factory(BranchEmail.Factory.class); },7c197bddf0163b8c77a232299c7189c17a7fd7d9,configure(),configure(),11,0,@java.lang.Override protected void configure() { bind(com.google.gerrit.server.RequestCleanup.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.server.config.RequestScopedReviewDbProvider.class); bind(IdentifiedUser.RequestFactory.class).in(com.google.gerrit.server.config.SINGLETON); bind(MetaDataUpdate.User.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.server.ApprovalsUtil.class); bind(com.google.gerrit.server.project.PerRequestProjectControlCache.class).in(com.google.inject.servlet.RequestScoped.class); bind(ChangeControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); bind(ProjectControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); bind(AccountControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); factory(SubmoduleOp.Factory.class); factory(MergeOp.Factory.class); factory(CreateCodeReviewNotes.Factory.class); install(new com.google.gerrit.server.git.AsyncReceiveCommits.Module()); factory(AddReviewer.Factory.class); factory(AddReviewerSender.Factory.class); factory(CommitMessageEditedSender.Factory.class); factory(CreateChangeSender.Factory.class); factory(DeleteDraftPatchSet.Factory.class); factory(PublishDraft.Factory.class); factory(ReplacePatchSetSender.Factory.class); factory(RebasedPatchSetSender.Factory.class); factory(RemoveReviewer.Factory.class); factory(MergedSender.Factory.class); factory(MergeFailSender.Factory.class); factory(PerformCreateGroup.Factory.class); factory(PerformRenameGroup.Factory.class); factory(GroupDetailFactory.Factory.class); factory(GroupMembers.Factory.class); factory(CreateProject.Factory.class); factory(SuggestParentCandidates.Factory.class); factory(BanCommit.Factory.class); factory(CommitValidators.Factory.class); },77a6fe2441f9502acad0b9b2d0c1bb2209023bb6,configure(),84708,415,478
57693,src_main_java_com_googlesource_gerrit_plugins_quota_Publisher.java,,,,"@java.lang.Override public java.lang.String getName() { return ""reposize""; }",507e3a160177ff068e6e62267b6da4ff53fa9ef7,,getName(),9,4,"@java.lang.Override public java.lang.String getName() { return ""repoSize""; }",715ad803e8ea2db16eec48d67f1dfb9f9cb836e2,getName(),185802,22,22
148032,java_com_google_gerrit_server_restapi_access_AccessCollection.java,0.0,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.access.AccessResource>> views() { return views; },3c2f3a3f8aaf8c1b00c54b0e69774cc748788e0c,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.access.AccessResource>> views() { return views; },e6bf58525280dd93c0bc6c80b00472274e2a680b,views(),views(),17,0,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.access.AccessResource>> views() { return views; },3c2f3a3f8aaf8c1b00c54b0e69774cc748788e0c,views(),215352,60,57
49392,gerrit-server_src_main_java_com_google_gerrit_server_change_SuggestReviewers.java,,,,"@java.lang.Override public boolean isVisible(com.google.gerrit.reviewdb.client.Account account) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser who = identifiedUserFactory.create(dbProvider, account.getId()); return changeControl.forUser(who).isRefVisible(); }",cb2ac9ef875734f05ea0f72e71d7023b855e3263,,isVisible(com.google.gerrit.reviewdb.client.Account),19,3,"@java.lang.Override public boolean isVisibleTo(com.google.gerrit.reviewdb.client.Account account) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser who = identifiedUserFactory.create(dbProvider, account.getId()); return rsrc.getControl().forUser(who).isRefVisible(); }",0474420a4150f6982f003374c29882f526b33359,isVisibleTo(com.google.gerrit.reviewdb.client.Account),131358,82,85
39650,gerrit-gwtui_src_main_java_com_google_gerrit_client_dashboards_DashboardInfo.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public final native java.lang.String allQueries();,a160c999da4a849c5ebd428aafbedfc98fbe8925,,allQueries(),4,5,public final native java.lang.String foreach();,0bacf761e7cae386bec5a2942c25f3ad8540a145,foreach(),188406,11,10
34484,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_account_AccountCapabilitiesServlet.java,,,,"@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { com.google.gerrit.httpd.rpc.account.AccountCapabilitiesServlet.Impl impl = factory.get(); if (acceptsJson(req)) { impl.format = com.google.gerrit.server.OutputFormat.JSON_COMPACT; } if (paramParser.parse(impl, req, res)) { impl.compute(); java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream(); java.io.OutputStreamWriter out = new java.io.OutputStreamWriter(buf, ""UTF-8""); if (impl.format.isJson()) { res.setContentType(com.google.gerrit.httpd.rpc.account.JSON_TYPE); res.setCharacterEncoding(""UTF-8""); buf.write(com.google.gerrit.httpd.rpc.account.JSON_MAGIC); impl.format.newGson().toJson(impl.have, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.Object>>() {}.getType(), out); out.flush(); buf.write('\n'); } else { res.setContentType(""text/plain""); res.setCharacterEncoding(""UTF-8""); for (java.util.Map.Entry<java.lang.String, java.lang.Object> e : impl.have.entrySet()) { out.write(e.getKey()); if (!((e.getValue()) instanceof java.lang.Boolean)) { out.write("": ""); out.write(e.getValue().toString()); } out.write('\n'); } out.flush(); } send(req, res, buf.toByteArray()); } }",86e5a06448b540edae422f69e8d212c40ac3ad6a,,"doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",9,2,"@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { com.google.gerrit.httpd.rpc.account.AccountCapabilitiesServlet.Impl impl = factory.get(); if (acceptsJson(req)) { impl.format = com.google.gerrit.server.OutputFormat.JSON_COMPACT; } if (paramParser.parse(impl, req, res)) { impl.compute(); java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream(); java.io.OutputStreamWriter out = new java.io.OutputStreamWriter(buf, ""UTF-8""); if (impl.format.isJson()) { res.setContentType(com.google.gerrit.httpd.rpc.account.JSON_TYPE); buf.write(com.google.gerrit.httpd.rpc.account.JSON_MAGIC); impl.format.newGson().toJson(impl.have, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.Object>>() {}.getType(), out); out.flush(); buf.write('\n'); } else { res.setContentType(""text/plain""); for (java.util.Map.Entry<java.lang.String, java.lang.Object> e : impl.have.entrySet()) { out.write(e.getKey()); if (!((e.getValue()) instanceof java.lang.Boolean)) { out.write("": ""); out.write(e.getValue().toString()); } out.write('\n'); } out.flush(); } res.setCharacterEncoding(""UTF-8""); send(req, res, buf.toByteArray()); } }",f79e9dc1070c7591c166b2ac6c7c38450f050520,"doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",161942,384,377
14787,gerrit-sshd_src_main_java_com_google_gerrit_sshd_CommandExecutorProvider.java,0.0,"@java.lang.Override public WorkQueue.Executor get() { final com.google.gerrit.server.git.WorkQueue.Executor executor; executor = queues.createQueue(poolSize, ""SSH-Worker""); final java.util.concurrent.ThreadFactory parent = executor.getThreadFactory(); executor.setThreadFactory(new java.util.concurrent.ThreadFactory() { @java.lang.Override public java.lang.Thread newThread(final java.lang.Runnable task) { final java.lang.Thread t = parent.newThread(task); t.setPriority(java.lang.Thread.MIN_PRIORITY); return t; } }); return executor; }",bd7ff7fdf1354744c0c994be3526952912815970,@java.lang.Override public WorkQueue.Executor get() { com.google.gerrit.server.CurrentUser user = userProvider.get(); com.google.gerrit.server.git.WorkQueue.Executor executor = queues.getInteractiveQueue(); if (user.isBatchUser()) { executor = queues.getBatchQueue(); } return executor; },b25ae436226d9966151fc49b3e7d7d9c91e77c98,get(),get(),5,0,@java.lang.Override public WorkQueue.Executor get() { com.google.gerrit.server.git.WorkQueue.Executor executor; if (user.isBatchUser()) { executor = queues.getBatchQueue(); } else { executor = queues.getInteractiveQueue(); } return executor; },6f3a66122917a5e15b616837c7256dda1e567d1e,get(),116303,75,63
76649,gerrit-server_src_main_java_com_google_gerrit_server_StarredChangesUtil.java,1.0,"public java.lang.Iterable<com.google.gerrit.reviewdb.client.Account.Id> byChange(final com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException { if (!(readFromGit)) { return com.google.common.collect.FluentIterable.from(dbProvider.get().starredChanges().byChange(changeId)).transform(new com.google.common.base.Function<com.google.gerrit.reviewdb.client.StarredChange, com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public Account.Id apply(com.google.gerrit.reviewdb.client.StarredChange in) { return in.getAccountId(); } }); } return com.google.common.collect.FluentIterable.from(getRefNames(RefNames.REFS_STARRED_CHANGES)).filter(new com.google.common.base.Predicate<java.lang.String>() { @java.lang.Override public boolean apply(java.lang.String refPart) { return refPart.endsWith((""/"" + (changeId.get()))); } }).transform(new com.google.common.base.Function<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public Account.Id apply(java.lang.String refPart) { return Account.Id.fromRefPart(refPart); } }); }",2f558a2fd98013de72e018f57827db66e363f084,"public java.lang.Iterable<com.google.gerrit.reviewdb.client.Account.Id> byChange(final com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.FluentIterable.from(getRefNames(RefNames.REFS_STARRED_CHANGES)).filter(new com.google.common.base.Predicate<java.lang.String>() { @java.lang.Override public boolean apply(java.lang.String refPart) { return refPart.endsWith((""/"" + (changeId.get()))); } }).transform(new com.google.common.base.Function<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public Account.Id apply(java.lang.String refPart) { return Account.Id.fromRefPart(refPart); } }); }",995b8af64da3c2f3f807a7fa603d39f7fe5b55d9,byChange(com.google.gerrit.reviewdb.client.Change$Id),byChange(com.google.gerrit.reviewdb.client.Change$Id),6,2,"public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> byChange(com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.FluentIterable.from(getRefNames(com.google.gerrit.reviewdb.client.RefNames.refsStarredChangesPrefix(changeId))).transform(new com.google.common.base.Function<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public Account.Id apply(java.lang.String refPart) { return Account.Id.parse(refPart); } }).toSet(); }",78d05c5a15c956201c1df854f57dd28cfde58edb,byChange(com.google.gerrit.reviewdb.client.Change$Id),67972,221,178
71761,gerrit-gpg_src_main_java_com_google_gerrit_gpg_PublicKeyChecker.java,9.0,"public final com.google.gerrit.gpg.CheckResult check(org.bouncycastle.openpgp.PGPPublicKey key) { return check(key, null, 0, false, null); }",4b6e36216038f4d3901562590ef0eff4acd51146,"public final com.google.gerrit.gpg.CheckResult check(org.bouncycastle.openpgp.PGPPublicKey key) { if (((store) == null) && ((trusted) != null)) { throw new java.lang.IllegalStateException(""PublicKeyStore is required""); } else if (((store) != null) && ((trusted) == null)) { throw new java.lang.IllegalStateException(""at least one trusted key is required""); } return check(key, 0, true, ((store) != null ? new java.util.HashSet<com.google.gerrit.gpg.Fingerprint>() : null)); }",28178c0e322c0b39975ca587e2742eb81f704970,check(org.bouncycastle.openpgp.PGPPublicKey),check(org.bouncycastle.openpgp.PGPPublicKey),4,9,"public final com.google.gerrit.gpg.CheckResult check(org.bouncycastle.openpgp.PGPPublicKey key) { if (((store) == null) && ((trusted) != null)) { throw new java.lang.IllegalStateException(""PublicKeyStore is required""); } return check(key, 0, true, ((trusted) != null ? new java.util.HashSet<com.google.gerrit.gpg.Fingerprint>() : null)); }",8c7df6e48be6a7f11bfac6d8ecb6bf8ef4b5e984,check(org.bouncycastle.openpgp.PGPPublicKey),213075,134,99
37011,gerrit-gwtui_src_main_java_com_google_gerrit_client_rpc_RestApi.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onResponseReceived(com.google.gwt.http.client.Request req, com.google.gwt.http.client.Response res) { java.lang.String text = res.getText(); if (text.startsWith(""token="")) { this.sendPost(cb, text); return; } RpcStatus.INSTANCE.onRpcComplete(); int status = res.getStatusCode(); if (status != 200) { if (((400 <= status) && (status < 500)) && (com.google.gerrit.client.rpc.RestApi.isTextBody(res))) { cb.onFailure(new com.google.gwtjsonrpc.client.RemoteJsonException(res.getText(), status, null)); } else { cb.onFailure(new com.google.gwt.user.client.rpc.StatusCodeException(status, res.getStatusText())); } return; } if (!(com.google.gerrit.client.rpc.RestApi.isJsonBody(res))) { cb.onFailure(new com.google.gwtjsonrpc.client.RemoteJsonException(""Invalid JSON"")); return; } java.lang.String json = res.getText(); if (!(json.startsWith(com.google.gerrit.client.rpc.RestApi.JSON_MAGIC))) { cb.onFailure(new com.google.gwtjsonrpc.client.RemoteJsonException(""Invalid JSON"")); return; } T data; try { data = com.google.gerrit.client.rpc.Natives.<T>parseJSON(json.substring(com.google.gerrit.client.rpc.RestApi.JSON_MAGIC.length())); } catch (java.lang.RuntimeException e) { cb.onFailure(new com.google.gwtjsonrpc.client.RemoteJsonException(""Invalid JSON"")); return; } cb.onSuccess(data); }",0cb7656a30ed696236024b75d10f79c7c4383deb,,"onResponseReceived(com.google.gwt.http.client.Request,com.google.gwt.http.client.Response)",6,2,"@java.lang.Override public void onResponseReceived(com.google.gwt.http.client.Request req, com.google.gwt.http.client.Response res) { int status = res.getStatusCode(); if (status != 200) { RpcStatus.INSTANCE.onRpcComplete(); if (((400 <= status) && (status < 600)) && (com.google.gerrit.client.rpc.RestApi.isTextBody(res))) { cb.onFailure(new com.google.gwtjsonrpc.client.RemoteJsonException(res.getText(), status, null)); } else { cb.onFailure(new com.google.gwt.user.client.rpc.StatusCodeException(status, res.getStatusText())); } return; } if (!(com.google.gerrit.client.rpc.RestApi.isJsonBody(res))) { RpcStatus.INSTANCE.onRpcComplete(); cb.onFailure(new com.google.gwtjsonrpc.client.RemoteJsonException(""Invalid JSON"")); return; } java.lang.String json = res.getText(); if (!(json.startsWith(com.google.gerrit.client.rpc.RestApi.JSON_MAGIC))) { RpcStatus.INSTANCE.onRpcComplete(); cb.onFailure(new com.google.gwtjsonrpc.client.RemoteJsonException(""Invalid JSON"")); return; } json = json.substring(com.google.gerrit.client.rpc.RestApi.JSON_MAGIC.length()); if ((wasGet) && (json.startsWith(""{\""_authkey\"":""))) { this.resendPost(cb, json); return; } T data; try { data = com.google.gerrit.client.rpc.Natives.<T>parseJSON(json); } catch (java.lang.RuntimeException e) { RpcStatus.INSTANCE.onRpcComplete(); cb.onFailure(new com.google.gwtjsonrpc.client.RemoteJsonException(""Invalid JSON"")); return; } cb.onSuccess(data); RpcStatus.INSTANCE.onRpcComplete(); }",9f4dd536f4f950fcdccf3f000ff5a25fe9d0f807,"onResponseReceived(com.google.gwt.http.client.Request,com.google.gwt.http.client.Response)",93090,389,431
104501,gerrit-server_src_main_java_com_google_gerrit_server_schema_H2AccountPatchReviewStore.java,11.0,"@java.lang.Override public com.google.common.base.Optional<com.google.gerrit.server.schema.PatchSetWithReviewedFiles> findReviewed(com.google.gerrit.reviewdb.client.PatchSet.Id psId, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { java.sql.Connection con = ds.getConnection(); java.sql.PreparedStatement stmt; }",c6b21a9502fbae0917d225f7fef8c0aeb69b627f,"@java.lang.Override public com.google.common.base.Optional<com.google.gerrit.server.schema.PatchSetWithReviewedFiles> findReviewed(com.google.gerrit.reviewdb.client.PatchSet.Id psId, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { try (java.sql.Connection con = ds.getConnection();java.sql.PreparedStatement stmt = con.prepareStatement((""SELECT patch_set_id, file_name FROM account_patch_reviews APR1 "" + ((((""WHERE account_id = ? AND change_id = ? AND patch_set_id = "" + ""(SELECT MAX(patch_set_id) FROM account_patch_reviews APR2 WHERE "") + ""APR1.account_id = APR2.account_id "") + ""AND APR1.change_id = APR2.change_id "") + ""AND patch_set_id <= ?)"")))) { stmt.setInt(1, accountId.get()); stmt.setInt(2, psId.getParentKey().get()); stmt.setInt(3, psId.get()); try (java.sql.ResultSet rs = stmt.executeQuery()) { if (rs.next()) { com.google.gerrit.reviewdb.client.PatchSet.Id id = new com.google.gerrit.reviewdb.client.PatchSet.Id(psId.getParentKey(), rs.getInt(""PATCH_SET_ID"")); com.google.common.collect.ImmutableSet.Builder<java.lang.String> builder = com.google.common.collect.ImmutableSet.builder(); do { builder.add(rs.getString(""FILE_NAME"")); } while (rs.next() ); return com.google.common.base.Optional.of(AccountPatchReviewStore.PatchSetWithReviewedFiles.create(id, builder.build())); } return com.google.common.base.Optional.absent(); } } catch (java.sql.SQLException e) { throw com.google.gerrit.server.schema.H2AccountPatchReviewStore.convertError(""select"", e); } }",5af3e5edb20d39236d57e27be825403f8d7362c3,"findReviewed(com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.reviewdb.client.Account$Id)","findReviewed(com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.reviewdb.client.Account$Id)",3,11,"@java.lang.Override public java.util.Optional<com.google.gerrit.server.schema.PatchSetWithReviewedFiles> findReviewed(com.google.gerrit.reviewdb.client.PatchSet.Id psId, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { try (java.sql.Connection con = ds.getConnection();java.sql.PreparedStatement stmt = con.prepareStatement((""SELECT patch_set_id, file_name FROM account_patch_reviews APR1 "" + ((((""WHERE account_id = ? AND change_id = ? AND patch_set_id = "" + ""(SELECT MAX(patch_set_id) FROM account_patch_reviews APR2 WHERE "") + ""APR1.account_id = APR2.account_id "") + ""AND APR1.change_id = APR2.change_id "") + ""AND patch_set_id <= ?)"")))) { stmt.setInt(1, accountId.get()); stmt.setInt(2, psId.getParentKey().get()); stmt.setInt(3, psId.get()); try (java.sql.ResultSet rs = stmt.executeQuery()) { if (rs.next()) { com.google.gerrit.reviewdb.client.PatchSet.Id id = new com.google.gerrit.reviewdb.client.PatchSet.Id(psId.getParentKey(), rs.getInt(""PATCH_SET_ID"")); com.google.common.collect.ImmutableSet.Builder<java.lang.String> builder = com.google.common.collect.ImmutableSet.builder(); do { builder.add(rs.getString(""FILE_NAME"")); } while (rs.next() ); return java.util.Optional.of(AccountPatchReviewStore.PatchSetWithReviewedFiles.create(id, builder.build())); } return java.util.Optional.empty(); } } catch (java.sql.SQLException e) { throw com.google.gerrit.server.schema.H2AccountPatchReviewStore.convertError(""select"", e); } }",0e2204bbbf7d71efcd6f3f7b0abdbae0b2d71301,"findReviewed(com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.reviewdb.client.Account$Id)",167166,483,471
69983,gerrit-server_src_main_java_com_google_gerrit_server_git_gpg_SignedPushModule.java,0.0,"@java.lang.Override protected void configure() { if (com.google.gerrit.server.util.BouncyCastleUtil.havePGP()) { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.ReceivePackInitializer.class).to(com.google.gerrit.server.git.gpg.SignedPushModule.Initializer.class); } else { com.google.gerrit.server.git.gpg.SignedPushModule.log.info((""BouncyCastle PGP not installed; signed push verification is"" + "" disabled"")); } }",c6a68365ef81e11c5f4b1bfbcd9fb7bff09a6b12,"@java.lang.Override protected void configure() { if (!(com.google.gerrit.server.util.BouncyCastleUtil.havePGP())) { com.google.gerrit.server.git.gpg.SignedPushModule.log.info((""BouncyCastle PGP not installed; signed push verification is"" + "" disabled"")); return; } com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.ReceivePackInitializer.class).to(com.google.gerrit.server.git.gpg.SignedPushModule.Initializer.class); factory(GerritPublicKeyChecker.Factory.class); }",0438b7711d4a2bfb375626308c5169eaf2af8061,configure(),configure(),10,0,"@java.lang.Override protected void configure() { if (!(com.google.gerrit.server.util.BouncyCastleUtil.havePGP())) { com.google.gerrit.server.git.gpg.SignedPushModule.log.info((""BouncyCastle PGP not installed; signed push verification is"" + "" disabled"")); return; } bind(com.google.gerrit.server.git.gpg.PublicKeyChecker.class).to(com.google.gerrit.server.git.gpg.GerritPublicKeyChecker.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.ReceivePackInitializer.class).to(com.google.gerrit.server.git.gpg.SignedPushModule.Initializer.class); }",df6c65ee093a10f02946d0813f7a40c46a8ab2b9,configure(),3085,144,177
35193,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_registration_ReloadableRegistrationHandle.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.google.inject.Key<?> getKey();,f1785b26e5b66132475c8a877ddaf15ad218d98f,,getKey(),6,0,public com.google.inject.Key<T> getKey();,4cc6547093e75c6528f38ee88140e87c208eba8d,getKey(),135400,12,14
68983,gerrit-gwtui_src_main_java_com_google_gerrit_client_config_DownloadInfo.java,3.0,private java.lang.String projectBaseName(java.lang.String project) { int i = project.lastIndexOf('/'); if (i < 0) { return project; } else { return project.substring((i + 1)); } },92186ee1d877ef48751f454324be523a70e4fec8,private java.lang.String projectBaseName(java.lang.String project) { return project.substring(((project.lastIndexOf('/')) + 1)); },c21dc159dda343fd7ee32a16c6ad2a15620a0a96,projectBaseName(java.lang.String),projectBaseName(java.lang.String),2,3,private static java.lang.String projectBaseName(java.lang.String project) { return project.substring(((project.lastIndexOf('/')) + 1)); },139b206d9690a6b2799e720fa73eeb281c28189a,projectBaseName(java.lang.String),24414,31,32
47712,gerrit-gwtui_src_main_java_net_codemirror_lib_Loader.java,4.0,"static void initLibrary(com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Void> cb) { if (net.codemirror.lib.Loader.isLibLoaded()) { cb.onSuccess(null); } else { com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); net.codemirror.lib.Loader.injectCss(Lib.I.css()); net.codemirror.lib.Loader.injectScript(Lib.I.js().getSafeUri(), group.add(com.google.gerrit.client.rpc.CallbackGroup.<java.lang.Void>emptyCallback())); net.codemirror.lib.Loader.injectScript(Addons.I.mark_selection().getSafeUri(), group.add(com.google.gerrit.client.rpc.CallbackGroup.<java.lang.Void>emptyCallback())); net.codemirror.lib.Loader.injectScript(Addons.I.foldcode().getSafeUri(), group.addFinal(cb)); } }",f3e9fe0eab104d1c69100ef0564959dd06c8aef3,"static void initLibrary(com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Void> cb) { if (net.codemirror.lib.Loader.isLibLoaded()) { cb.onSuccess(null); } else { com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); net.codemirror.lib.Loader.injectCss(Lib.I.css()); net.codemirror.lib.Loader.injectScript(Lib.I.js().getSafeUri(), group.add(com.google.gerrit.client.rpc.CallbackGroup.<java.lang.Void>emptyCallback())); net.codemirror.lib.Loader.injectScript(Addons.I.mark_selection().getSafeUri(), group.add(com.google.gerrit.client.rpc.CallbackGroup.<java.lang.Void>emptyCallback())); net.codemirror.lib.Loader.injectScript(Addons.I.trailingspace().getSafeUri(), group.add(com.google.gerrit.client.rpc.CallbackGroup.<java.lang.Void>emptyCallback())); net.codemirror.lib.Loader.injectScript(Addons.I.foldcode().getSafeUri(), group.addFinal(cb)); } }",35fa9ed3b9ce0b1e52f9fc0ef37f56974baefb8a,initLibrary(com.google.gwt.user.client.rpc.AsyncCallback),initLibrary(com.google.gwt.user.client.rpc.AsyncCallback),3,4,"static void initLibrary(com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Void> cb) { if (net.codemirror.lib.Loader.isLibLoaded()) { cb.onSuccess(null); } else { com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); net.codemirror.lib.Loader.injectCss(Lib.I.css()); net.codemirror.lib.Loader.injectScript(Lib.I.js().getSafeUri(), group.add(com.google.gerrit.client.rpc.CallbackGroup.<java.lang.Void>emptyCallback())); net.codemirror.lib.Loader.injectScript(Addons.I.mark_selection().getSafeUri(), group.add(com.google.gerrit.client.rpc.CallbackGroup.<java.lang.Void>emptyCallback())); net.codemirror.lib.Loader.injectScript(Addons.I.trailingspace().getSafeUri(), group.addFinal(cb)); } }",ed7f12dc1741cf5f2fe53e2f53309718d7dc18e5,initLibrary(com.google.gwt.user.client.rpc.AsyncCallback),174932,290,238
60042,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_PatchSetSelectBox2.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gwt.user.client.ui.Widget createEditIcon() { com.google.gwt.user.client.ui.Anchor anchor = new com.google.gwt.user.client.ui.Anchor(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.edit())); anchor.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { final com.google.gerrit.reviewdb.client.PatchSet.Id id = ((idActive) == null) ? other.idActive : idActive; com.google.gerrit.client.changes.ChangeFileApi.getContent(id, path, new com.google.gerrit.client.rpc.GerritCallback<java.lang.String>() { @java.lang.Override public void onSuccess(java.lang.String result) { com.google.gerrit.client.change.EditFileAction edit = new com.google.gerrit.client.change.EditFileAction(id, result, path, style.replyBox(), null, icon); edit.onEdit(); } }); } }); return anchor; }",16a3fd852556cf8a59a8cb9c0490962f9819e296,,createEditIcon(),9,7,"private com.google.gwt.user.client.ui.Widget createEditIcon() { com.google.gwt.user.client.ui.Anchor anchor = new com.google.gwt.user.client.ui.Anchor(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.edit())); anchor.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { final com.google.gerrit.reviewdb.client.PatchSet.Id id = ((idActive) == null) ? other.idActive : idActive; com.google.gerrit.client.changes.ChangeFileApi.getContent(id, path, new com.google.gerrit.client.rpc.GerritCallback<java.lang.String>() { @java.lang.Override public void onSuccess(java.lang.String result) { com.google.gerrit.client.change.EditFileAction edit = new com.google.gerrit.client.change.EditFileAction(id, result, path, style.replyBox(), null, icon); edit.onEdit(); } }); } }); anchor.setTitle(PatchUtil.C.edit()); return anchor; }",c3ff4f12f2b6dcd8b9697cb3c3c63a7ac6ae4bd1,createEditIcon(),202639,284,295
142151,java_com_google_gerrit_lucene_LuceneProjectIndex.java,3.0,"@java.lang.Override public com.google.gerrit.index.query.DataSource<com.google.gerrit.server.project.ProjectData> getSource(com.google.gerrit.index.query.Predicate<com.google.gerrit.server.project.ProjectData> p, com.google.gerrit.index.QueryOptions opts) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.lucene.LuceneProjectIndex.QuerySource(opts, queryBuilder.toQuery(p), new org.apache.lucene.search.Sort(new org.apache.lucene.search.SortField(com.google.gerrit.lucene.LuceneProjectIndex.NAME_SORT_FIELD, SortField.Type.STRING, false))); }",b7af2f586f40b400e3ed792c1e4f2633e8b92099,"@java.lang.Override public com.google.gerrit.index.query.DataSource<com.google.gerrit.server.project.ProjectData> getSource(com.google.gerrit.index.query.Predicate<com.google.gerrit.server.project.ProjectData> p, com.google.gerrit.index.QueryOptions opts) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.lucene.LuceneQuerySource(opts.filterFields(IndexUtils::projectFields), queryBuilder.toQuery(p), new org.apache.lucene.search.Sort(new org.apache.lucene.search.SortField(com.google.gerrit.lucene.LuceneProjectIndex.NAME_SORT_FIELD, SortField.Type.STRING, false)), this::toProjectData); }",47f1687c822c3bb34d2d1bddc63fc535721d8322,"getSource(com.google.gerrit.index.query.Predicate,com.google.gerrit.index.QueryOptions)","getSource(com.google.gerrit.index.query.Predicate,com.google.gerrit.index.QueryOptions)",2,2,"@java.lang.Override public com.google.gerrit.index.query.DataSource<com.google.gerrit.server.project.ProjectData> getSource(com.google.gerrit.index.query.Predicate<com.google.gerrit.server.project.ProjectData> p, com.google.gerrit.index.QueryOptions opts) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.lucene.LuceneQuerySource(opts.filterFields(IndexUtils::projectFields), queryBuilder.toQuery(p), new org.apache.lucene.search.Sort(new org.apache.lucene.search.SortField(com.google.gerrit.lucene.LuceneProjectIndex.NAME_SORT_FIELD, SortField.Type.STRING, false))); }",a3ed28ec483f67b3b664661cc4e7a5c0d6b01192,"getSource(com.google.gerrit.index.query.Predicate,com.google.gerrit.index.QueryOptions)",54801,185,178
98615,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_client_Change.java,15.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean isWip() { return wip; },8a90cbc773cb3822d9e3a54c8978be588e7ca191,,isWip(),43,0,public boolean isWorkInProgress() { return workInProgress; },114e15f8d4a9101df80d8aac7c130828572c233e,isWorkInProgress(),158814,12,12
51411,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ReplyBox.java,5.0,"@com.google.gwt.uibinder.client.UiHandler(""message"") void onMessageKey(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((((event.getCharCode()) == '\n') || ((event.getCharCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER))) && (event.isControlKeyDown())) { event.preventDefault(); event.stopPropagation(); onSend(null); } else if ((((lgtm) != null) && ((event.getCharCode()) == 'M')) && (message.getValue().equals(""LGT""))) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { if (message.getValue().startsWith(""LGTM"")) { for (java.lang.Runnable r : lgtm) { r.run(); } } } }); } }",dbc22f71a43f10a23a8ad9bb29e9f334952e71f3,"@com.google.gwt.uibinder.client.UiHandler(""message"") void onMessageKey(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((((event.getCharCode()) == '\n') || ((event.getCharCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER))) && (event.isControlKeyDown())) { event.preventDefault(); event.stopPropagation(); onSend(null); } }",b41a7099b70aa9080890b4305d9a3b939cf4e6e7,onMessageKey(com.google.gwt.event.dom.client.KeyPressEvent),onMessageKey(com.google.gwt.event.dom.client.KeyPressEvent),2,5,"@com.google.gwt.uibinder.client.UiHandler(""message"") void onMessageKey(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((((event.getCharCode()) == '\n') || ((event.getCharCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER))) && (event.isControlKeyDown())) { event.preventDefault(); event.stopPropagation(); onSend(null); } else if ((((lgtm) != null) && ((event.getCharCode()) == 'M')) && (message.getValue().equals(""LGT""))) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { lgtm.run(); } }); } }",f36e64f2c0f0f4b825db51e341dbd1d275cd787d,onMessageKey(com.google.gwt.event.dom.client.KeyPressEvent),52884,108,199
54310,gerrit-common_src_main_java_com_google_gerrit_common_data_SubmitTypeRecord.java,1.0,public static com.google.gerrit.common.data.SubmitTypeRecord OK(com.google.gerrit.reviewdb.client.Project.SubmitType type) { com.google.gerrit.common.data.SubmitTypeRecord r = new com.google.gerrit.common.data.SubmitTypeRecord(); r.status = com.google.gerrit.common.data.SubmitTypeRecord.Status.OK; r.type = type; return r; },49f3f2533d08fedeb60fc4f565828f7c0ab13a54,public static com.google.gerrit.common.data.SubmitTypeRecord OK(com.google.gerrit.extensions.common.ProjectSubmitType type) { com.google.gerrit.common.data.SubmitTypeRecord r = new com.google.gerrit.common.data.SubmitTypeRecord(); r.status = com.google.gerrit.common.data.SubmitTypeRecord.Status.OK; r.type = type; return r; },fa3e2eee6076854c484a62ebcd9c8ff9a3e297b9,OK(com.google.gerrit.reviewdb.client.Project$SubmitType),OK(com.google.gerrit.extensions.common.ProjectSubmitType),14,1,public static com.google.gerrit.common.data.SubmitTypeRecord OK(com.google.gerrit.extensions.common.SubmitType type) { com.google.gerrit.common.data.SubmitTypeRecord r = new com.google.gerrit.common.data.SubmitTypeRecord(); r.status = com.google.gerrit.common.data.SubmitTypeRecord.Status.OK; r.type = type; return r; },41028220bdcab81b3749c25de24d061ed9459f23,OK(com.google.gerrit.extensions.common.SubmitType),164031,100,99
34953,gerrit-server_src_main_java_com_google_gerrit_server_IdentifiedUser.java,0.0,@java.lang.Override public com.google.gerrit.server.account.GroupMembership getEffectiveGroups() { if ((effectiveGroups) == null) { if (authConfig.isIdentityTrustable(state().getExternalIds())) { effectiveGroups = realm.groups(state()); } else { effectiveGroups = groupMembershipFactory.create(com.google.gerrit.server.IdentifiedUser.registeredGroups); } } return effectiveGroups; },be906eb30c7b5808545402677819d3567272a2af,@java.lang.Override public com.google.gerrit.server.account.GroupMembership getEffectiveGroups() { if ((effectiveGroups) == null) { if (authConfig.isIdentityTrustable(state().getExternalIds())) { effectiveGroups = groupBackend.membershipsOf(state()); } else { effectiveGroups = com.google.gerrit.server.IdentifiedUser.registeredGroups; } } return effectiveGroups; },76204e173d0f375e6a60de3626717e3e0ac21a6f,getEffectiveGroups(),getEffectiveGroups(),25,0,@java.lang.Override public com.google.gerrit.server.account.GroupMembership getEffectiveGroups() { if ((effectiveGroups) == null) { if (authConfig.isIdentityTrustable(state().getExternalIds())) { effectiveGroups = groupBackend.membershipsOf(this); } else { effectiveGroups = com.google.gerrit.server.IdentifiedUser.registeredGroups; } } return effectiveGroups; },1a7c1d4258699cccb522a64ca9f1ceab3e5db5b3,getEffectiveGroups(),76444,91,91
79546,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_api_accounts_Accounts.java,15.0,com.google.gerrit.extensions.api.accounts.Accounts.SuggestAccountsRequest suggestAccounts() throws com.google.gerrit.extensions.restapi.RestApiException;,9e0ceff1b5f25885296260758fbde52bb2715bff,@java.lang.Deprecated com.google.gerrit.extensions.api.accounts.Accounts.SuggestAccountsRequest suggestAccounts() throws com.google.gerrit.extensions.restapi.RestApiException;,440879b9d70647bd4bc9dfda0514d70d990cd485,suggestAccounts(),suggestAccounts(),5,10,com.google.gerrit.extensions.api.accounts.Accounts.SuggestAccountsRequest suggestAccounts() throws com.google.gerrit.extensions.restapi.RestApiException;,9e0ceff1b5f25885296260758fbde52bb2715bff,suggestAccounts(),11043,43,37
77763,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_AbstractSubmit.java,36.0,"private org.eclipse.jgit.revwalk.RevCommit getHead(org.eclipse.jgit.lib.Repository repo, java.lang.String name) throws java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { return rw.parseCommit(repo.getRef(name).getObjectId()); } }",5d881d51e48c23365a328399d6746591940e6c57,"private org.eclipse.jgit.revwalk.RevCommit getHead(org.eclipse.jgit.lib.Repository repo) throws java.lang.Exception { return getHead(repo, ""HEAD""); }",a40cf0e10c2886e2303ce37b933884466792f83b,"getHead(org.eclipse.jgit.lib.Repository,java.lang.String)",getHead(org.eclipse.jgit.lib.Repository),6,8,"private org.eclipse.jgit.revwalk.RevCommit getHead(org.eclipse.jgit.lib.Repository repo, java.lang.String name) throws java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { return rw.parseCommit(repo.getRef(name).getObjectId()); } }",5d881d51e48c23365a328399d6746591940e6c57,"getHead(org.eclipse.jgit.lib.Repository,java.lang.String)",38174,45,92
63196,gerrit-gwtui_src_main_java_com_google_gerrit_client_ui_RebaseDialog.java,,,,public java.lang.String getBase() { return base.getText(); },cc62da0e9839c217c5be46b75911552955e00e90,,getBase(),15,4,public java.lang.String getBase() { return cb.getValue() ? base.getText() : null; },f998ec8895bb44c3a392effe1d6d1b2dc11565b5,getBase(),113254,16,25
69929,gerrit-server_src_main_java_com_google_gerrit_server_index_ChangeField.java,36.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.lang.String get(com.google.gerrit.server.query.change.ChangeData input, com.google.gerrit.server.index.FillArgs args) throws com.google.gwtorm.server.OrmException { try { return input.getAuthor().getEmailAddress(); } catch ( e) { throw new <com.google.gerrit.server.index.e>com.google.gwtorm.server.OrmException(); } }",e573cee72054ea82b913a9c91183264fbc213481,,"get(com.google.gerrit.server.query.change.ChangeData,com.google.gerrit.server.index.FillArgs)",15,25,"@java.lang.Override public Iterable<java.lang.String> get(com.google.gerrit.server.query.change.ChangeData input, com.google.gerrit.server.index.FillArgs args) throws com.google.gwtorm.server.OrmException { return getAuthorParts(input); }",26da229195b90dbb669b9432561caec5ebb287c0,"get(com.google.gerrit.server.query.change.ChangeData,com.google.gerrit.server.index.FillArgs)",124741,107,71
148032,java_com_google_gerrit_server_restapi_project_DeleteRef.java,9.0,com.google.gerrit.server.project.DeleteRef create(com.google.gerrit.server.project.ProjectResource r);,648f2b8eb7035198dfa9a7ba4794cf2dc939642a,com.google.gerrit.server.restapi.project.DeleteRef create(com.google.gerrit.server.restapi.project.ProjectResource r);,a56507c42bf6b5cc92df2f181c03a1e41fa0c9b0,create(com.google.gerrit.server.project.ProjectResource),create(com.google.gerrit.server.restapi.project.ProjectResource),17,2,com.google.gerrit.server.restapi.project.DeleteRef create(com.google.gerrit.server.project.ProjectResource r);,b8955f44a95e461b95b192676a4de423d206d751,create(com.google.gerrit.server.project.ProjectResource),216328,36,33
105052,gerrit-server_src_main_java_com_google_gerrit_server_change_DeleteComment.java,,,,"@java.lang.Override public boolean updateChange(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Comment.Key commentKey = rsrc.getComment().key; java.util.Optional<com.google.gerrit.reviewdb.client.Comment> maybeComment = commentsUtil.get(ctx.getDb(), ctx.getNotes(), commentKey); if (!(maybeComment.isPresent())) { return false; } com.google.gerrit.reviewdb.client.PatchSet.Id psId = ctx.getChange().currentPatchSetId(); commentsUtil.deleteCommentByRewritingHistory(ctx.getDb(), ctx.getUpdate(psId), commentKey, rsrc.getPatchSet().getId(), newMessage); ctx.rewriteHistory(); return true; }",45328bffdc3e05f2a9babd029fa6fce3afa6bdcb,,updateChange(com.google.gerrit.server.update.ChangeContext),16,2,"@java.lang.Override public boolean updateChange(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = ctx.getChange().currentPatchSetId(); commentsUtil.deleteCommentByRewritingHistory(ctx.getDb(), ctx.getUpdate(psId), rsrc.getComment().key, rsrc.getPatchSet().getId(), newMessage); return true; }",c75e928850cd890b9101d8664e4c5906a8c318f0,updateChange(com.google.gerrit.server.update.ChangeContext),76055,226,146
110346,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_NoteDbMigrator.java,4.0,"private void checkPreconditions() { checkState((!(started)), ""SiteRebuilder may only be used once""); }",2a461b698d53c8cd86f14753aae3bb146667755e,"private void checkPreconditions() { checkState((!(started)), ""%s may only be used once"", getClass().getSimpleName()); }",fc4b2280ad3a1f3ab6f098e1528f7ab4f9d04d78,checkPreconditions(),checkPreconditions(),4,12,"public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator build() { return new com.google.gerrit.server.notedb.rebuild.NoteDbMigrator(sitePaths, schemaFactory, updateManagerFactory, rebuilder, bundleReader, ((threads) > 1 ? com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(threads, ""RebuildChange"")) : com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService()), projects, changes, progressOut, trial, forceRebuild); }",2ffb5532c1a02b34defcf346dd08b3951f5a35a7,build(),101171,28,132
166513,javatests_com_google_gitiles_ConfigUtilTest.java,2.0,"@org.junit.Test public void getDurationReturnsDuration() throws java.lang.Exception { org.joda.time.Duration def = org.joda.time.Duration.standardSeconds(2); org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); org.joda.time.Duration t; config.setString(""core"", ""dht"", ""timeout"", ""500 ms""); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", ""dht"", ""timeout"", def); assertThat(t.getMillis()).isEqualTo(500); config.setString(""core"", ""dht"", ""timeout"", ""5.2 sec""); try { com.google.gitiles.ConfigUtil.getDuration(config, ""core"", ""dht"", ""timeout"", def); fail(""expected IllegalArgumentException""); } catch (java.lang.IllegalArgumentException e) { assertThat(e).hasMessageThat().isEqualTo(""Invalid time unit value: core.dht.timeout=5.2 sec""); } config.setString(""core"", ""dht"", ""timeout"", ""1 min""); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", ""dht"", ""timeout"", def); assertThat(t.getMillis()).isEqualTo(60000); }",de9c973e52a400991537c22c0677c41653651b1a,"@org.junit.Test public void getDurationReturnsDuration() throws java.lang.Exception { java.lang.Long def = 2 * 1000L; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.lang.Long t; config.setString(""core"", ""dht"", ""timeout"", ""500 ms""); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", ""dht"", ""timeout"", def); assertThat(t).isEqualTo(500); config.setString(""core"", ""dht"", ""timeout"", ""5.2 sec""); try { com.google.gitiles.ConfigUtil.getDuration(config, ""core"", ""dht"", ""timeout"", def); fail(""expected IllegalArgumentException""); } catch (java.lang.IllegalArgumentException e) { assertThat(e).hasMessageThat().isEqualTo(""Invalid time unit value: core.dht.timeout=5.2 sec""); } config.setString(""core"", ""dht"", ""timeout"", ""1 min""); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", ""dht"", ""timeout"", def); assertThat(t).isEqualTo(60000); }",b1b148200a6b13249337a10303c97e5ea85a2818,getDurationReturnsDuration(),getDurationReturnsDuration(),3,2,"@org.junit.Test public void getDurationReturnsDuration() throws java.lang.Exception { java.time.Duration def = java.time.Duration.ofSeconds(2); org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.time.Duration t; config.setString(""core"", ""dht"", ""timeout"", ""500 ms""); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", ""dht"", ""timeout"", def); assertThat(t.toMillis()).isEqualTo(500); config.setString(""core"", ""dht"", ""timeout"", ""5.2 sec""); try { com.google.gitiles.ConfigUtil.getDuration(config, ""core"", ""dht"", ""timeout"", def); fail(""expected IllegalArgumentException""); } catch (java.lang.IllegalArgumentException e) { assertThat(e).hasMessageThat().isEqualTo(""Invalid time unit value: core.dht.timeout=5.2 sec""); } config.setString(""core"", ""dht"", ""timeout"", ""1 min""); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", ""dht"", ""timeout"", def); assertThat(t.toMillis()).isEqualTo(60000); }",2350a00452ea6afadde9c71a7605e30cfb81a817,getDurationReturnsDuration(),57053,261,270
67332,src_main_java_com_googlesource_gerrit_plugins_rabbitmq_config_AMQProperties.java,0.0,"public AMQP.BasicProperties getBasicProperties() { if ((amqpProperties) == null) { java.util.Map<java.lang.String, java.lang.Object> headers = new java.util.HashMap<>(); for (com.googlesource.gerrit.plugins.rabbitmq.config.section.Section section : properties.getSections()) { for (java.lang.reflect.Field f : section.getClass().getFields()) { if (f.isAnnotationPresent(com.googlesource.gerrit.plugins.rabbitmq.annotation.MessageHeader.class)) { com.googlesource.gerrit.plugins.rabbitmq.annotation.MessageHeader mh = f.getAnnotation(com.googlesource.gerrit.plugins.rabbitmq.annotation.MessageHeader.class); try { switch (f.getType().getSimpleName()) { case ""String"" : headers.put(mh.value(), f.get(section).toString()); break; case ""Integer"" : headers.put(mh.value(), f.getInt(section)); break; case ""Long"" : headers.put(mh.value(), f.getLong(section)); break; case ""Boolean"" : headers.put(mh.value(), f.getBoolean(section)); break; default : break; } } catch (java.lang.Exception ex) { com.googlesource.gerrit.plugins.rabbitmq.config.AMQProperties.LOGGER.info(ex.getMessage()); } } } } com.googlesource.gerrit.plugins.rabbitmq.config.section.Message message = properties.getSection(com.googlesource.gerrit.plugins.rabbitmq.config.section.Message.class); amqpProperties = new com.rabbitmq.client.AMQP.BasicProperties.Builder().appId(com.googlesource.gerrit.plugins.rabbitmq.config.AMQProperties.EVENT_APPID).contentEncoding(CharEncoding.UTF_8).contentType(com.googlesource.gerrit.plugins.rabbitmq.config.AMQProperties.CONTENT_TYPE_JSON).deliveryMode(message.deliveryMode).priority(message.priority).headers(headers).build(); } return amqpProperties; }",354951616648d869cf2fa031b8a3a725000af623,"public AMQP.BasicProperties getBasicProperties() { if ((amqpProperties) == null) { java.util.Map<java.lang.String, java.lang.Object> headers = new java.util.HashMap<>(); for (com.googlesource.gerrit.plugins.rabbitmq.config.section.Section section : properties.getSections()) { for (java.lang.reflect.Field f : section.getClass().getFields()) { if (f.isAnnotationPresent(com.googlesource.gerrit.plugins.rabbitmq.annotation.MessageHeader.class)) { com.googlesource.gerrit.plugins.rabbitmq.annotation.MessageHeader mh = f.getAnnotation(com.googlesource.gerrit.plugins.rabbitmq.annotation.MessageHeader.class); try { switch (f.getType().getSimpleName()) { case ""String"" : headers.put(mh.value(), f.get(section).toString()); break; case ""Integer"" : headers.put(mh.value(), f.getInt(section)); break; case ""Long"" : headers.put(mh.value(), f.getLong(section)); break; case ""Boolean"" : headers.put(mh.value(), f.getBoolean(section)); break; default : break; } } catch (java.lang.Exception ex) { com.googlesource.gerrit.plugins.rabbitmq.config.AMQProperties.LOGGER.info(ex.getMessage()); } } } } com.googlesource.gerrit.plugins.rabbitmq.config.section.Message message = properties.getSection(com.googlesource.gerrit.plugins.rabbitmq.config.section.Message.class); amqpProperties = new com.rabbitmq.client.AMQP.BasicProperties.Builder().appId(com.googlesource.gerrit.plugins.rabbitmq.config.AMQProperties.EVENT_APPID).contentEncoding(CharEncoding.UTF_8).contentType(com.googlesource.gerrit.plugins.rabbitmq.config.AMQProperties.CONTENT_TYPE_JSON).deliveryMode(message.deliveryMode).priority(message.priority).headers(headers).timestamp(new java.util.Date()).build(); } return amqpProperties; }",8f75b5ec83febb5d7de3114b884869448f4afca8,getBasicProperties(),getBasicProperties(),4,0,"public AMQP.BasicProperties getBasicProperties() { if ((amqpProperties) == null) { java.util.Map<java.lang.String, java.lang.Object> headers = new java.util.HashMap<>(); for (com.googlesource.gerrit.plugins.rabbitmq.config.section.Section section : properties.getSections()) { for (java.lang.reflect.Field f : section.getClass().getFields()) { if (f.isAnnotationPresent(com.googlesource.gerrit.plugins.rabbitmq.annotation.MessageHeader.class)) { com.googlesource.gerrit.plugins.rabbitmq.annotation.MessageHeader mh = f.getAnnotation(com.googlesource.gerrit.plugins.rabbitmq.annotation.MessageHeader.class); try { switch (f.getType().getSimpleName()) { case ""String"" : headers.put(mh.value(), f.get(section).toString()); break; case ""Integer"" : headers.put(mh.value(), f.getInt(section)); break; case ""Long"" : headers.put(mh.value(), f.getLong(section)); break; case ""Boolean"" : headers.put(mh.value(), f.getBoolean(section)); break; default : break; } } catch (java.lang.Exception ex) { com.googlesource.gerrit.plugins.rabbitmq.config.AMQProperties.LOGGER.info(ex.getMessage()); } } } } com.googlesource.gerrit.plugins.rabbitmq.config.section.Message message = properties.getSection(com.googlesource.gerrit.plugins.rabbitmq.config.section.Message.class); amqpProperties = new com.rabbitmq.client.AMQP.BasicProperties.Builder().appId(com.googlesource.gerrit.plugins.rabbitmq.config.AMQProperties.EVENT_APPID).contentEncoding(CharEncoding.UTF_8).contentType(com.googlesource.gerrit.plugins.rabbitmq.config.AMQProperties.CONTENT_TYPE_JSON).deliveryMode(message.deliveryMode).priority(message.priority).headers(headers).timestamp(new java.util.Date(com.google.gerrit.server.util.TimeUtil.nowMs())).build(); } return amqpProperties; }",e75ad67d70c85566b3f3d6e6a22218d3025a0f07,getBasicProperties(),79161,472,489
59725,gerrit-server_src_main_java_com_google_gerrit_server_project_RefPatternMatcher.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String evaluate(java.lang.String parameterizedRef, java.lang.String userName) { if (parameterizedRef.contains(""${"")) { return evaluate(new com.google.gerrit.common.data.ParameterizedString(parameterizedRef), userName); } return parameterizedRef; }",89419bde97ec658b6df7b8c58b79fed35ee13cfe,,"evaluate(java.lang.String,java.lang.String)",7,7,"private java.lang.String expand(java.lang.String parameterizedRef, java.lang.String userName) { if (parameterizedRef.contains(""${"")) { return expand(new com.google.gerrit.common.data.ParameterizedString(parameterizedRef), userName); } return parameterizedRef; }",cb1ea4792dd8b3929c01cf8e51802bf142d63b1b,"expand(java.lang.String,java.lang.String)",23503,64,64
73033,gerrit-sshd_src_main_java_com_google_gerrit_sshd_SshDaemon.java,39.0,"private void initProviderBouncyCastle(org.eclipse.jgit.lib.Config cfg) { setKeyExchangeFactories(java.util.Arrays.<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.KeyExchange>>asList(new org.apache.sshd.server.kex.DHG14.Factory(), new org.apache.sshd.server.kex.DHG1.Factory())); org.apache.sshd.common.NamedFactory<org.apache.sshd.common.Random> factory; if (cfg.getBoolean(""sshd"", null, ""testUseInsecureRandom"", false)) { factory = new com.google.gerrit.sshd.SshDaemon.InsecureBouncyCastleRandom.Factory(); } else { factory = new org.apache.sshd.common.random.BouncyCastleRandom.Factory(); } setRandomFactory(new org.apache.sshd.common.random.SingletonRandomFactory(factory)); }",f8d820e0a586003918d9c1054612f4a6d30fea1d,"private void initProviderBouncyCastle(org.eclipse.jgit.lib.Config cfg) { setKeyExchangeFactories(java.util.Arrays.<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.kex.KeyExchange>>asList(new org.apache.sshd.server.kex.DHG14.Factory(), new org.apache.sshd.server.kex.DHG1.Factory())); org.apache.sshd.common.NamedFactory<org.apache.sshd.common.random.Random> factory; if (cfg.getBoolean(""sshd"", null, ""testUseInsecureRandom"", false)) { factory = new com.google.gerrit.sshd.SshDaemon.InsecureBouncyCastleRandom.Factory(); } else { factory = new org.apache.sshd.common.random.BouncyCastleRandom.Factory(); } setRandomFactory(new org.apache.sshd.common.random.SingletonRandomFactory(factory)); }",8a74ba4b089fb9bb0601cc58c1a876b524278c8d,initProviderBouncyCastle(org.eclipse.jgit.lib.Config),initProviderBouncyCastle(org.eclipse.jgit.lib.Config),6,40,"private void initProviderBouncyCastle(org.eclipse.jgit.lib.Config cfg) { setKeyExchangeFactories(NamedFactory.Utils.setUpTransformedFactories(true, java.util.Collections.unmodifiableList(java.util.Arrays.asList(BuiltinDHFactories.dhg14, BuiltinDHFactories.dhg1)), ServerBuilder.DH2KEX)); org.apache.sshd.common.NamedFactory<org.apache.sshd.common.random.Random> factory; if (cfg.getBoolean(""sshd"", null, ""testUseInsecureRandom"", false)) { factory = new com.google.gerrit.sshd.SshDaemon.InsecureBouncyCastleRandom.Factory(); } else { factory = org.apache.sshd.common.util.SecurityUtils.getRandomFactory(); } setRandomFactory(new org.apache.sshd.common.random.SingletonRandomFactory(factory)); }",f828580b2eda5be7d6c152df15490a0da0ad1a32,initProviderBouncyCastle(org.eclipse.jgit.lib.Config),42088,214,195
67870,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_client_PatchSet.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.lang.String getGroups() { return groups; },9cafb1aaa0fd789f31d118f22111e74edf5778cc,,getGroups(),5,22,public java.util.List<java.lang.String> getGroups() { return com.google.gerrit.reviewdb.client.PatchSet.splitGroups(groups); },3e606cf011defdad7dbbd7ac8cb6f9c18a5bfc6c,getGroups(),27196,14,40
148032,java_com_google_gerrit_server_restapi_project_ListBranches.java,3.0,"private java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> allBranches(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { java.util.List<org.eclipse.jgit.lib.Ref> refs; try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) { java.util.Collection<org.eclipse.jgit.lib.Ref> heads = db.getRefDatabase().getRefs(Constants.R_HEADS).values(); refs = new java.util.ArrayList(((heads.size()) + 3)); refs.addAll(heads); refs.addAll(db.getRefDatabase().exactRef(Constants.HEAD, RefNames.REFS_CONFIG, RefNames.REFS_USERS_DEFAULT).values()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noGitRepository) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, refs); }",7dec9ee3f14073332d414c5b0a2325f52635e99e,"private java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> allBranches(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { java.util.List<org.eclipse.jgit.lib.Ref> refs; try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) { java.util.Collection<org.eclipse.jgit.lib.Ref> heads = db.getRefDatabase().getRefs(Constants.R_HEADS).values(); refs = new java.util.ArrayList(((heads.size()) + 3)); refs.addAll(heads); refs.addAll(db.getRefDatabase().exactRef(Constants.HEAD, RefNames.REFS_CONFIG, RefNames.REFS_USERS_DEFAULT).values()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noGitRepository) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, refs); }",c4f92f147272dd07ad48a81af38f44b7642652a7,allBranches(com.google.gerrit.server.project.ProjectResource),allBranches(com.google.gerrit.server.restapi.project.ProjectResource),17,4,"private java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> allBranches(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { java.util.List<org.eclipse.jgit.lib.Ref> refs; try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) { java.util.Collection<org.eclipse.jgit.lib.Ref> heads = db.getRefDatabase().getRefs(Constants.R_HEADS).values(); refs = new java.util.ArrayList(((heads.size()) + 3)); refs.addAll(heads); refs.addAll(db.getRefDatabase().exactRef(Constants.HEAD, RefNames.REFS_CONFIG, RefNames.REFS_USERS_DEFAULT).values()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noGitRepository) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, refs); }",7dec9ee3f14073332d414c5b0a2325f52635e99e,allBranches(com.google.gerrit.server.project.ProjectResource),217646,281,278
75171,gerrit-server_src_main_java_com_google_gerrit_server_notedb_NoteDbUpdateManager.java,8.0,private void initChangeRepo() throws java.io.IOException { if ((changeRepo) == null) { checkState((!(changeUpdates.isEmpty()))); changeRepo = openRepo(changeUpdates.values().iterator().next().getProjectName()); } },53585974e7d92f59c2d6405cdb396de67415abd5,"private void initChangeRepo(com.google.gerrit.reviewdb.client.Project.NameKey project) throws java.io.IOException { if ((changeRepo) == null) { com.google.gerrit.reviewdb.client.Project.NameKey fromUpdates = com.google.gerrit.server.notedb.NoteDbUpdateManager.projectFromUpdates(changeUpdates.values()); if (project == null) { checkArgument((!(changeUpdates.isEmpty())), ""either one update or a project name is required""); project = fromUpdates; } else if (!(changeUpdates.isEmpty())) { checkArgument(project.equals(fromUpdates), ""project %s does not match project %s from update list"", project, fromUpdates); } changeRepo = openRepo(project); } }",b0a44e480e53f692061a1af994ff626fa623db74,initChangeRepo(),initChangeRepo(com.google.gerrit.reviewdb.client.Project$NameKey),6,5,private void initChangeRepo() throws java.io.IOException { if ((changeRepo) == null) { changeRepo = openRepo(projectName); } },bd11addb9a138c2a5f02edef6414f99a8c7b403b,initChangeRepo(),7290,170,33
58213,gerrit-server_src_main_java_com_google_gerrit_server_project_SubmitRuleEvaluator.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public java.util.List<com.googlecode.prolog_cafe.lang.Term> call() throws java.lang.Exception { return evaluateImpl(); },d6ccc7f64ad2c5d349d8f5ac7a98c8dd76cc4436,,call(),10,9,"public java.util.List<com.google.gerrit.common.data.SubmitRecord> canSubmit() { try { initPatchSet(); } catch (com.google.gwtorm.server.OrmException e) { return ruleError((""Error looking up patch set "" + (control.getChange().currentPatchSetId()))); } com.google.gerrit.reviewdb.client.Change c = control.getChange(); if ((!(allowClosed)) && (c.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } if ((((c.getStatus()) == (Change.Status.DRAFT)) || (patchSet.isDraft())) && (!(allowDraft))) { return cannotSubmitDraft(); } java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl(""locate_submit_rule"", ""can_submit"", ""locate_submit_filter"", ""filter_submit_results"", control.getCurrentUser()); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format((""Submit rule '%s' for change %s of %s has "" + ""no solution.""), getSubmitRule(), cd.getId(), getProjectName())); } return resultsToSubmitRecord(getSubmitRule(), results); }",38b530f5c0619323fa40d12b6edff90f2d7725f2,canSubmit(),140963,42,356
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,,@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroup get(com.google.gerrit.reviewdb.client.AccountGroup.Id id) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },2d549deda6e0b111f6e4ec815bda909c400f9603,,get(com.google.gerrit.reviewdb.client.AccountGroup$Id),3,41,@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroup get(com.google.gerrit.reviewdb.client.AccountGroup.Id id) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },88eb37f75f1f3d85b5e512e20a6e295d64f3ddb9,get(com.google.gerrit.reviewdb.client.AccountGroup$Id),205032,91,78
61604,gerrit-common_src_main_java_com_google_gerrit_common_data_ChangeDetailService.java,0.0,"@com.google.gerrit.common.audit.Audit void patchSetDetail2(com.google.gerrit.reviewdb.client.PatchSet.Id baseId, com.google.gerrit.reviewdb.client.PatchSet.Id key, com.google.gerrit.reviewdb.client.AccountDiffPreference diffPrefs, com.google.gwtjsonrpc.common.AsyncCallback<com.google.gerrit.common.data.PatchSetDetail> callback);",2f1067b6f5014e6451d37d65a092f8845820b217,"@com.google.gerrit.common.audit.Audit void patchSetDetail2(com.google.gerrit.reviewdb.client.PatchSet.Id baseId, com.google.gerrit.reviewdb.client.PatchSet.Id key, com.google.gerrit.extensions.common.DiffPreferencesInfo diffPrefs, com.google.gwtjsonrpc.common.AsyncCallback<com.google.gerrit.common.data.PatchSetDetail> callback);",05dca9fc374d3d39d9930b5535a93f282274e019,"patchSetDetail2(com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.reviewdb.client.AccountDiffPreference,com.google.gwtjsonrpc.common.AsyncCallback)","patchSetDetail2(com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.extensions.common.DiffPreferencesInfo,com.google.gwtjsonrpc.common.AsyncCallback)",40,1,"@com.google.gerrit.common.audit.Audit void patchSetDetail2(com.google.gerrit.reviewdb.client.PatchSet.Id baseId, com.google.gerrit.reviewdb.client.PatchSet.Id key, com.google.gerrit.extensions.client.DiffPreferencesInfo diffPrefs, com.google.gwtjsonrpc.common.AsyncCallback<com.google.gerrit.common.data.PatchSetDetail> callback);",c94555a5a68dcce951d2a2491c26357430fa4786,"patchSetDetail2(com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.extensions.client.DiffPreferencesInfo,com.google.gwtjsonrpc.common.AsyncCallback)",127909,105,105
61604,gerrit-server_src_main_java_com_google_gerrit_server_change_GetDiff.java,3.0,"@java.lang.Override public final int parseArguments(final org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { final java.lang.String value = params.getParameter(0); short context; if (""all"".equalsIgnoreCase(value)) { context = com.google.gerrit.reviewdb.client.AccountDiffPreference.WHOLE_FILE_CONTEXT; } else { try { context = java.lang.Short.parseShort(value, 10); if (context < 0) { throw new java.lang.NumberFormatException(); } } catch (java.lang.NumberFormatException e) { throw new org.kohsuke.args4j.CmdLineException(owner, java.lang.String.format(""\""%s\"" is not a valid value for \""%s\"""", value, ((org.kohsuke.args4j.NamedOptionDef) (option)).name())); } } setter.addValue(context); return 1; }",679b7b2500ab9b7c8897e6a51c84b75daee35b35,"@java.lang.Override public final int parseArguments(final org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { final java.lang.String value = params.getParameter(0); short context; if (""all"".equalsIgnoreCase(value)) { context = com.google.gerrit.extensions.common.DiffPreferencesInfo.WHOLE_FILE_CONTEXT; } else { try { context = java.lang.Short.parseShort(value, 10); if (context < 0) { throw new java.lang.NumberFormatException(); } } catch (java.lang.NumberFormatException e) { throw new org.kohsuke.args4j.CmdLineException(owner, java.lang.String.format(""\""%s\"" is not a valid value for \""%s\"""", value, ((org.kohsuke.args4j.NamedOptionDef) (option)).name())); } } setter.addValue(context); return 1; }",3ec3bc51154e882732fe3698a8b1b20d052e817f,parseArguments(org.kohsuke.args4j.spi.Parameters),parseArguments(org.kohsuke.args4j.spi.Parameters),40,2,"@java.lang.Override public final int parseArguments(final org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { final java.lang.String value = params.getParameter(0); short context; if (""all"".equalsIgnoreCase(value)) { context = com.google.gerrit.extensions.client.DiffPreferencesInfo.WHOLE_FILE_CONTEXT; } else { try { context = java.lang.Short.parseShort(value, 10); if (context < 0) { throw new java.lang.NumberFormatException(); } } catch (java.lang.NumberFormatException e) { throw new org.kohsuke.args4j.CmdLineException(owner, java.lang.String.format(""\""%s\"" is not a valid value for \""%s\"""", value, ((org.kohsuke.args4j.NamedOptionDef) (option)).name())); } } setter.addValue(context); return 1; }",e75ca6156131a316d0c586ad3f42ec84951db879,parseArguments(org.kohsuke.args4j.spi.Parameters),127908,212,212
48550,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DraftBox.java,2.0,"private void removeUI() { if ((replyToBox) != null) { replyToBox.unregisterReplyBox(); } com.google.gerrit.common.changes.Side side = comment.side(); removeFromParent(); if (!(getCommentInfo().has_line())) { parent.removeFileCommentBox(this, side); return; } com.google.gerrit.client.diff.PaddingManager manager = getPaddingManager(); manager.remove(this); parent.removeDraft(this, side, ((comment.line()) - 1)); cm.focus(); getSelfWidgetWrapper().getWidget().clear(); getGutterWrapper().remove(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { resizePaddingWidget(); } }); }",0b706385c1ff020966f1eb4658493ec07c2c6a72,"private void removeUI() { if ((replyToBox) != null) { replyToBox.unregisterReplyBox(); } clearRange(); setRangeHighlight(false); com.google.gerrit.common.changes.Side side = comment.side(); removeFromParent(); if (!(getCommentInfo().has_line())) { parent.removeFileCommentBox(this, side); return; } com.google.gerrit.client.diff.PaddingManager manager = getPaddingManager(); manager.remove(this); parent.removeDraft(this, side, ((comment.line()) - 1)); getCm().focus(); getSelfWidgetWrapper().getWidget().clear(); getGutterWrapper().remove(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { resizePaddingWidget(); } }); }",3dcb673798c87b620e2816a2366ceb4af8fc6307,removeUI(),removeUI(),5,2,"private void removeUI() { if ((replyToBox) != null) { replyToBox.unregisterReplyBox(); } clearRange(); setRangeHighlight(false); removeFromParent(); if (!(getCommentInfo().has_line())) { parent.removeFileCommentBox(this); return; } com.google.gerrit.client.diff.PaddingManager manager = getPaddingManager(); manager.remove(this); parent.removeDraft(this, ((comment.line()) - 1)); getCm().focus(); getSelfWidgetWrapper().getWidget().clear(); getGutterWrapper().remove(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { resizePaddingWidget(); } }); }",232a2a5fa819f659ddc3bba50173f1378ee53930,removeUI(),131237,197,174
142972,src_main_java_com_googlesource_gerrit_plugins_its_base_its_ItsConfig.java,3.0,"public java.lang.String getCommentLinkName() { java.lang.String ret; ret = getPluginConfigString(""commentlink""); if (ret == null) { ret = pluginName; } return ret; }",8f96b434cc38c8a40abe99337e1a361ad34a315e,"public java.lang.String getCommentLinkName() { java.lang.String ret; ret = getPluginConfigString(""commentlink"", null); if (ret == null) { ret = pluginName; } return ret; }",e8d1e20226cc9f8936ddcbe439f69a61f4719175,getCommentLinkName(),getCommentLinkName(),6,3,"public java.lang.String getCommentLinkName() { java.lang.String ret; ret = getPluginConfigString(""commentlink""); if (ret == null) { ret = pluginName; } return ret; }",8f96b434cc38c8a40abe99337e1a361ad34a315e,getCommentLinkName(),7355,48,46
40433,gerrit-server_src_main_java_com_google_gerrit_server_project_RefControl.java,16.0,"public boolean canCreate(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevObject object) { if (!(canWrite())) { return false; } boolean owner; switch (getCurrentUser().getAccessPath()) { case REST_API : case JSON_RPC : owner = isOwner(); break; default : owner = false; } if (object instanceof org.eclipse.jgit.revwalk.RevCommit) { return owner || (canPerform(Permission.CREATE)); } else if (object instanceof org.eclipse.jgit.revwalk.RevTag) { final org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); try { rw.parseBody(tag); } catch (java.io.IOException e) { return false; } final org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); if (tagger != null) { boolean valid; if ((getCurrentUser()) instanceof com.google.gerrit.server.IdentifiedUser) { final com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (getCurrentUser())); final java.lang.String addr = tagger.getEmailAddress(); valid = user.getEmailAddresses().contains(addr); } else { valid = false; } if (((!valid) && (!owner)) && (!(canForgeCommitter()))) { return false; } } if (tag.getFullMessage().contains(""-----BEGIN PGP SIGNATURE-----\n"")) { return owner || (canPerform(Permission.PUSH_TAG)); } else { return owner || (canPerform(Permission.PUSH_TAG)); } } else { return false; } }",212048ef6efe34ae2f62121bfd56ee60c2c848a2,"public boolean canCreate(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevObject object) { if (!(canWrite())) { return false; } boolean owner; switch (getCurrentUser().getAccessPath()) { case REST_API : case JSON_RPC : owner = isOwner(); break; default : owner = false; } if (object instanceof org.eclipse.jgit.revwalk.RevCommit) { return owner || (canPerform(Permission.CREATE)); } else if (object instanceof org.eclipse.jgit.revwalk.RevTag) { final org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); try { rw.parseBody(tag); } catch (java.io.IOException e) { return false; } final org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); if (tagger != null) { boolean valid; if ((getCurrentUser()) instanceof com.google.gerrit.server.IdentifiedUser) { final com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (getCurrentUser())); final java.lang.String addr = tagger.getEmailAddress(); valid = user.getEmailAddresses().contains(addr); } else { valid = false; } if (((!valid) && (!owner)) && (!(canForgeCommitter()))) { return false; } } return owner || (canPerform(Permission.PUSH_TAG)); } else { return false; } }",26de34feb91fc9463094db1d73f03c307808a387,"canCreate(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevObject)","canCreate(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevObject)",2,16,"public boolean canCreate(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevObject object) { if (!(canWrite())) { return false; } boolean owner; switch (getCurrentUser().getAccessPath()) { case REST_API : case JSON_RPC : owner = isOwner(); break; default : owner = false; } if (object instanceof org.eclipse.jgit.revwalk.RevCommit) { return owner || (canPerform(Permission.CREATE)); } else if (object instanceof org.eclipse.jgit.revwalk.RevTag) { final org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); try { rw.parseBody(tag); } catch (java.io.IOException e) { return false; } final org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); if (tagger != null) { boolean valid; if ((getCurrentUser()) instanceof com.google.gerrit.server.IdentifiedUser) { final com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (getCurrentUser())); final java.lang.String addr = tagger.getEmailAddress(); valid = user.getEmailAddresses().contains(addr); } else { valid = false; } if (((!valid) && (!owner)) && (!(canForgeCommitter()))) { return false; } } if (tag.getFullMessage().contains(""-----BEGIN PGP SIGNATURE-----\n"")) { return owner || (canPerform(Permission.PUSH_SIGNED_TAG)); } else { return owner || (canPerform(Permission.PUSH_TAG)); } } else { return false; } }",a4c12afc8fe6eb77c13a5105677bae1c612926cf,"canCreate(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevObject)",137671,349,388
48044,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,37.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { reviewedTop.setReviewed((!(reviewedTop.isReviewed()))); },075b1da5bf76df5c3e14b4081f1294bb23ffba93,,onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),2,10,@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { toggleReviewed().run(); },f24a0ad018d10072cceee7f0563a16774e3f26b0,onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),209450,50,37
143053,src_main_java_com_googlesource_gerrit_plugins_quota_Module.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithBurstyRateLimiter(com.google.gerrit.reviewdb.client.Account.Id key) throws java.lang.Exception { return createWithBurstyRateLimiter(finder.firstMatching(limitsConfigType, userFactory.create(key))); }",9d2dc85d7ff8a9dc5460a6cd2e2356a03d2cea24,,createWithBurstyRateLimiter(com.google.gerrit.reviewdb.client.Account$Id),12,3,@java.lang.Override public final com.googlesource.gerrit.plugins.quota.Module.Holder load(com.google.gerrit.reviewdb.client.Account.Id key) throws java.lang.Exception { return createWithBurstyRateLimiter(key); },465559c241c6b0dce0ed0cd612e027bf08b9b3a6,load(com.google.gerrit.reviewdb.client.Account$Id),79667,76,62
107422,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_change_CommentsIT.java,43.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.List<com.google.gerrit.extensions.common.CommentInfo> getChangeSortedComments(java.lang.String changeId) throws java.lang.Exception { java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> commentsMap = getPublishedComments(changeId); for (java.util.Map.Entry<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> e : commentsMap.entrySet()) { for (com.google.gerrit.extensions.common.CommentInfo c : e.getValue()) { c.path = e.getKey(); comments.add(c); } } java.util.Collections.sort(comments, ( c1, c2) -> c1.id.compareTo(c2.id)); return comments; }",f992f2752dd98a0341affd950a25bf6a07fac4af,,getChangeSortedComments(java.lang.String),5,24,"private java.util.List<com.google.gerrit.extensions.common.CommentInfo> getChangeSortedComments(java.lang.String changeId) throws java.lang.Exception { java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> commentsMap = getPublishedComments(changeId); for (java.util.Map.Entry<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> e : commentsMap.entrySet()) { for (com.google.gerrit.extensions.common.CommentInfo c : e.getValue()) { c.path = e.getKey(); comments.add(c); } } comments.sort(java.util.Comparator.comparing(( c) -> c.id)); return comments; }",eef6a69e52398eb4201531f9f64e5ccda1bc9af5,getChangeSortedComments(java.lang.String),194582,226,220
91971,gerrit-server_src_main_java_com_google_gerrit_server_index_change_StalenessChecker.java,,,,"@com.google.common.annotations.VisibleForTesting static com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern> parsePatterns(java.lang.Iterable<byte[]> patterns) { com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern.check((patterns != null), null); com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern> result = com.google.common.collect.ArrayListMultimap.create(); for (byte[] b : patterns) { com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern.check((b != null), null); java.lang.String s = new java.lang.String(b, java.nio.charset.StandardCharsets.UTF_8); java.util.List<java.lang.String> parts = com.google.common.base.Splitter.on(':').splitToList(s); com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern.check(((parts.size()) == 2), s); result.put(new com.google.gerrit.reviewdb.client.Project.NameKey(parts.get(0)), com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern.create(parts.get(1))); } return result; }",d4c929c251e5b2ef1d22444936838bc8be2a60d7,,parsePatterns(java.lang.Iterable),5,7,"public static com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern> parsePatterns(java.lang.Iterable<byte[]> patterns) { com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern.check((patterns != null), null); com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern> result = com.google.common.collect.ArrayListMultimap.create(); for (byte[] b : patterns) { com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern.check((b != null), null); java.lang.String s = new java.lang.String(b, java.nio.charset.StandardCharsets.UTF_8); java.util.List<java.lang.String> parts = com.google.common.base.Splitter.on(':').splitToList(s); com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern.check(((parts.size()) == 2), s); result.put(new com.google.gerrit.reviewdb.client.Project.NameKey(parts.get(0)), com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern.create(parts.get(1))); } return result; }",8ae6cc99168b6bed6216b04bdbc8dc2091b92e54,parsePatterns(java.lang.Iterable),167354,364,354
15948,gerrit-server_src_main_java_com_google_gerrit_server_patch_PatchListEntry.java,13.0,"void writeTo(final java.io.OutputStream out) throws java.io.IOException { writeEnum(out, changeType); writeEnum(out, patchType); writeString(out, oldName); writeString(out, newName); writeBytes(out, header); writeVarInt32(out, edits.size()); for (final org.eclipse.jgit.diff.Edit e : edits) { write(out, e); if (e instanceof org.eclipse.jgit.diff.ReplaceEdit) { org.eclipse.jgit.diff.ReplaceEdit r = ((org.eclipse.jgit.diff.ReplaceEdit) (e)); writeVarInt32(out, r.getInternalEdits().size()); for (org.eclipse.jgit.diff.Edit i : r.getInternalEdits()) { write(out, i); } } else { writeVarInt32(out, 0); } } }",ed05ae874cda0c98a99bd88aa5d611fcd49249f0,"void writeTo(final java.io.OutputStream out) throws java.io.IOException { writeEnum(out, getChangeType()); writeEnum(out, getPatchType()); writeString(out, oldName); writeString(out, newName); writeBytes(out, header); writeVarInt32(out, edits.size()); for (final com.google.gerrit.server.patch.GwtOrmBaseEdit e : edits) { write(out, e); if (e instanceof com.google.gerrit.server.patch.GwtOrmReplaceEdit) { java.util.List<com.google.gerrit.server.patch.GwtOrmBaseEdit> intlEdits = ((com.google.gerrit.server.patch.GwtOrmReplaceEdit) (e)).getInternalEdits(); writeVarInt32(out, intlEdits.size()); for (com.google.gerrit.server.patch.GwtOrmBaseEdit i : intlEdits) { write(out, i); } } else { writeVarInt32(out, 0); } } }",1794534587826e3c6ddb690db4ec6b24549f54fc,writeTo(java.io.OutputStream),writeTo(java.io.OutputStream),9,12,"void writeTo(final java.io.OutputStream out) throws java.io.IOException { writeEnum(out, getChangeType()); writeEnum(out, getPatchType()); writeString(out, oldName); writeString(out, newName); writeBytes(out, header); writeVarInt32(out, edits.size()); for (final com.google.gerrit.prettify.common.LineEdit e : edits) { write(out, e); if ((e.getEdits()) != null) { java.util.List<com.google.gerrit.prettify.common.BaseEdit> intlEdits = e.getEdits(); writeVarInt32(out, intlEdits.size()); for (com.google.gerrit.prettify.common.BaseEdit i : intlEdits) { write(out, i); } } else { writeVarInt32(out, 0); } } }",0ffe25c6ba6e284defeaca140df7a5dd48a4fe36,writeTo(java.io.OutputStream),52638,243,210
39113,gerrit-server_src_main_java_com_google_gerrit_server_mail_CreateChangeSender.java,2.0,"@java.lang.Override protected void init() throws com.google.gerrit.server.mail.EmailException { super.init(); try { com.google.gerrit.server.mail.Watchers matching = getWatches(NotifyType.NEW_CHANGES); for (com.google.gerrit.reviewdb.client.Account.Id user : com.google.common.collect.Iterables.concat(matching.to.accounts, matching.cc.accounts, matching.bcc.accounts)) { if (isOwnerOfProjectOrBranch(user)) { add(RecipientType.TO, user); } } add(RecipientType.TO, matching.to); add(RecipientType.CC, matching.cc); add(RecipientType.BCC, matching.bcc); } catch (com.google.gwtorm.server.OrmException err) { com.google.gerrit.server.mail.CreateChangeSender.log.warn(""Cannot notify watchers for new change"", err); } }",e83227a88c2c9275b458e7c5306cc5b2d475b16f,"@java.lang.Override protected void init() throws com.google.gerrit.server.mail.EmailException { super.init(); try { com.google.gerrit.server.mail.ProjectWatch.Watchers matching = getWatches(NotifyType.NEW_CHANGES); for (com.google.gerrit.reviewdb.client.Account.Id user : com.google.common.collect.Iterables.concat(matching.to.accounts, matching.cc.accounts, matching.bcc.accounts)) { if (isOwnerOfProjectOrBranch(user)) { add(RecipientType.TO, user); } } add(RecipientType.TO, matching.to); add(RecipientType.CC, matching.cc); add(RecipientType.BCC, matching.bcc); } catch (com.google.gwtorm.server.OrmException err) { com.google.gerrit.server.mail.CreateChangeSender.log.warn(""Cannot notify watchers for new change"", err); } }",3c49c2c97cabd6466f6f313511bdf05d68876a02,init(),init(),6,2,"@java.lang.Override protected void init() throws com.google.gerrit.common.errors.EmailException { super.init(); try { com.google.gerrit.server.mail.ProjectWatch.Watchers matching = getWatchers(NotifyType.NEW_CHANGES); for (com.google.gerrit.reviewdb.client.Account.Id user : com.google.common.collect.Iterables.concat(matching.to.accounts, matching.cc.accounts, matching.bcc.accounts)) { if (isOwnerOfProjectOrBranch(user)) { add(RecipientType.TO, user); } } add(RecipientType.TO, matching.to); add(RecipientType.CC, matching.cc); add(RecipientType.BCC, matching.bcc); } catch (com.google.gwtorm.server.OrmException err) { com.google.gerrit.server.mail.CreateChangeSender.log.warn(""Cannot notify watchers for new change"", err); } includeWatchers(NotifyType.NEW_PATCHSETS); }",f0adff6d12aa771028c3b358b01a985d4ea74d58,init(),33846,216,229
25647,src_main_java_com_google_gwtorm_schema_sql_SqlDialect.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public int executeBatch(java.sql.PreparedStatement ps) throws java.sql.SQLException { final int[] updateCounts = ps.executeBatch(); if (updateCounts == null) { throw new java.sql.SQLException(""No rows affected""); } int totalUpdateCount = 0; for (int i = 0; i < (updateCounts.length); i++) { int updateCount = updateCounts[i]; if (updateCount > 0) { totalUpdateCount += updateCount; } } return totalUpdateCount; }",1368a8cbd495c2c819bf467120c0eef485e10aea,,executeBatch(java.sql.PreparedStatement),13,8,"public static com.google.gwtorm.schema.sql.SqlDialect getDialectFor(java.sql.Connection c) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { java.lang.String url = c.getMetaData().getURL(); for (com.google.gwtorm.schema.sql.SqlDialect d : com.google.gwtorm.schema.sql.SqlDialect.DIALECTS) { if (d.handles(url, c)) { return d.refine(c); } } throw new com.google.gwtorm.server.OrmException((""No dialect known for "" + url)); }",dea466dc40725fb926bdbffe826883e2a711cf99,getDialectFor(java.sql.Connection),140334,106,146
16169,gerrit-ehcache_src_main_java_com_google_gerrit_ehcache_EhcachePoolImpl.java,9.0,"private void start() { synchronized(lock) { if ((manager) != null) { throw new java.lang.IllegalStateException(""Cache pool has already been started""); } try { java.lang.System.setProperty(""net.sf.ehcache.skipUpdateCheck"", ("""" + true)); } catch (java.lang.SecurityException e) { } manager = new net.sf.ehcache.CacheManager(new com.google.gerrit.ehcache.EhcachePoolImpl.Factory().toConfiguration()); for (com.google.gerrit.server.cache.CacheProvider<?, ?> p : caches.values()) { net.sf.ehcache.Ehcache eh = manager.getEhcache(p.getName()); com.google.gerrit.server.cache.EntryCreator<?, ?> c = p.getEntryCreator(); if (c != null) { p.bind(new com.google.gerrit.ehcache.PopulatingCache(eh, c)); } else { p.bind(new com.google.gerrit.ehcache.SimpleCache(eh)); } } } }",50d9d6433469969d32a2e0303d3dec64874f67aa,"private void start() { synchronized(lock) { if ((manager) != null) { throw new java.lang.IllegalStateException(""Cache pool has already been started""); } try { java.lang.System.setProperty(""net.sf.ehcache.skipUpdateCheck"", ("""" + true)); } catch (java.lang.SecurityException e) { } manager = new net.sf.ehcache.CacheManager(new com.google.gerrit.ehcache.EhcachePoolImpl.Factory().toConfiguration()); for (com.google.gerrit.server.cache.CacheProvider<?, ?> p : caches.values()) { net.sf.ehcache.Ehcache eh = manager.getEhcache(p.getName()); com.google.gerrit.server.cache.EntryCreator<?, ?> c = p.getEntryCreator(); if (c != null) { if (p.disk()) { p.bind(new com.google.gerrit.ehcache.PopulatingProtobufCache(eh, c, p.getKeyClass(), p.getValueClass(), p.getValueProvider())); } else { p.bind(new com.google.gerrit.ehcache.PopulatingCache(eh, c)); } } else { if (p.disk()) { p.bind(new com.google.gerrit.ehcache.SimpleProtobufCache(eh, p.getKeyClass(), p.getValueClass(), p.getValueProvider())); } else { p.bind(new com.google.gerrit.ehcache.SimpleCache(eh)); } } } } }",43956519e013987157ed228ef9ceabff23233513,start(),start(),5,9,"private void start() { synchronized(lock) { if ((manager) != null) { throw new java.lang.IllegalStateException(""Cache pool has already been started""); } try { java.lang.System.setProperty(""net.sf.ehcache.skipUpdateCheck"", ("""" + true)); } catch (java.lang.SecurityException e) { } manager = new net.sf.ehcache.CacheManager(new com.google.gerrit.ehcache.EhcachePoolImpl.Factory().toConfiguration()); for (com.google.gerrit.server.cache.CacheProvider<?, ?> p : caches.values()) { net.sf.ehcache.Ehcache eh = manager.getEhcache(p.getName()); com.google.gerrit.server.cache.EntryCreator<?, ?> c = p.getEntryCreator(); if ((c != null) && (p.disk())) { c = new com.google.gerrit.ehcache.ProtobufEntryCreator(c, p.getKeyClass(), p.getValueClass()); } com.google.gerrit.server.cache.Cache m; if (c != null) { m = new com.google.gerrit.ehcache.PopulatingCache(eh, c); } else { m = new com.google.gerrit.ehcache.SimpleCache(eh); } if (p.disk()) { m = new com.google.gerrit.ehcache.ProtobufCache(m, p.getKeyClass(), p.getValueClass(), p.getValueProvider()); } p.bind(m); } } }",bc8f1241c565d74c659ec9191446e844c901eabb,start(),112973,323,326
67159,gerrit-server_src_test_java_com_google_gerrit_server_edit_ChangeEditTest.java,0.0,"@org.junit.Test public void changeEditRef() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1000042); com.google.gerrit.reviewdb.client.Change.Id changeId = new com.google.gerrit.reviewdb.client.Change.Id(56414); com.google.gerrit.reviewdb.client.PatchSet.Id psId = new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, 50); java.lang.String refName = com.google.gerrit.server.edit.ChangeEditUtil.editRefName(accountId, changeId, psId); assertEquals(""refs/users/42/1000042/edit-56414/50"", refName); }",0749ea28fd3af208eacf45455ba6bff85bfa1910,"@org.junit.Test public void changeEditRef() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1000042); com.google.gerrit.reviewdb.client.Change.Id changeId = new com.google.gerrit.reviewdb.client.Change.Id(56414); com.google.gerrit.reviewdb.client.PatchSet.Id psId = new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, 50); java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.editRefName(accountId, changeId, psId); assertEquals(""refs/users/42/1000042/edit-56414/50"", refName); }",dd030a0ac9867aa1144bea87fba74f177b8a7e59,changeEditRef(),changeEditRef(),4,0,"@org.junit.Test public void changeEditRef() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1000042); com.google.gerrit.reviewdb.client.Change.Id changeId = new com.google.gerrit.reviewdb.client.Change.Id(56414); com.google.gerrit.reviewdb.client.PatchSet.Id psId = new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, 50); java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsEdit(accountId, changeId, psId); assertEquals(""refs/users/42/1000042/edit-56414/50"", refName); }",addf04b0215463ffd9251e45cdeac2705b1a09be,changeEditRef(),108093,201,201
60118,gerrit-gwtui_src_main_java_com_google_gerrit_client_Gerrit.java,18.0,"@java.lang.Override protected void onScreenLoad(com.google.gerrit.reviewdb.client.Project.NameKey project) { java.lang.String p = panel.replace(""${projectName}"", project.get()); if (panel.startsWith(""/x/"")) { setTargetHistoryToken(p); } else if (com.google.gerrit.client.Gerrit.isAbsolute(panel)) { getElement().setPropertyString(""href"", p); } else { getElement().setPropertyString(""href"", com.google.gerrit.client.Gerrit.selfRedirect(p)); } }",7a57ea58bf76828f85c6c2bf413289fd6a7c25a6,"@java.lang.Override protected void onScreenLoad(com.google.gerrit.reviewdb.client.Project.NameKey project) { java.lang.String p = panel.replace(""${projectName}"", com.google.gwt.http.client.URL.encodeQueryString(project.get())); if ((!(panel.startsWith(""/x/""))) && (!(com.google.gerrit.client.Gerrit.isAbsolute(panel)))) { com.google.gwt.http.client.UrlBuilder builder = new com.google.gwt.http.client.UrlBuilder(); builder.setProtocol(com.google.gwt.user.client.Window.Location.getProtocol()); builder.setHost(com.google.gwt.user.client.Window.Location.getHost()); java.lang.String port = com.google.gwt.user.client.Window.Location.getPort(); if ((port != null) && (!(port.isEmpty()))) { builder.setPort(java.lang.Integer.parseInt(port)); } p = (builder.buildString()) + p; } getElement().setPropertyString(""href"", p); }",969472b6987212f2405ff9ad792ae834902068a4,onScreenLoad(com.google.gerrit.reviewdb.client.Project$NameKey),onScreenLoad(com.google.gerrit.reviewdb.client.Project$NameKey),2,18,"@java.lang.Override protected void onScreenLoad(com.google.gerrit.reviewdb.client.Project.NameKey project) { java.lang.String p = panel.replace(""${projectName}"", com.google.gwt.http.client.URL.encodeQueryString(project.get())); if ((!(panel.startsWith(""/x/""))) && (!(com.google.gerrit.client.Gerrit.isAbsolute(panel)))) { com.google.gwt.http.client.UrlBuilder builder = new com.google.gwt.http.client.UrlBuilder(); builder.setProtocol(com.google.gwt.user.client.Window.Location.getProtocol()); builder.setHost(com.google.gwt.user.client.Window.Location.getHost()); java.lang.String port = com.google.gwt.user.client.Window.Location.getPort(); if ((port != null) && (!(port.isEmpty()))) { builder.setPort(java.lang.Integer.parseInt(port)); } builder.setPath(com.google.gwt.user.client.Window.Location.getPath()); p = (builder.buildString()) + p; } getElement().setPropertyString(""href"", p); }",e3c1dea67ce4c695bad67bafc2e54bd370a6a683,onScreenLoad(com.google.gerrit.reviewdb.client.Project$NameKey),101386,241,261
91971,gerrit-server_src_main_java_com_google_gerrit_server_index_change_StalenessChecker.java,,,,"static byte[] toByteArray(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String pat) { return (((project.toString()) + ':') + pat).getBytes(java.nio.charset.StandardCharsets.UTF_8); }",468a11debb877f1f7151a17daccd44cd696b75cb,,"toByteArray(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)",5,15,byte[] toByteArray(com.google.gerrit.reviewdb.client.Project.NameKey project) { return (((project.toString()) + ':') + (pattern())).getBytes(java.nio.charset.StandardCharsets.UTF_8); },45e0e523d872d8d1dc3f41eec8e500532eaa6ce5,toByteArray(com.google.gerrit.reviewdb.client.Project$NameKey),167359,58,52
92634,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_revision_RobotCommentsIT.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testCreationOfFixIdForFixSuggestion() throws java.lang.Exception { assume().that(notesMigration.enabled()).isTrue(); addRobotComment(changeId, withFixRobotCommentInput); java.util.List<com.google.gerrit.extensions.common.RobotCommentInfo> robotCommentInfos = getRobotComments(); com.google.gerrit.acceptance.api.revision.RobotCommentInfoSubject.assertThatList(robotCommentInfos).singleElement().singleFixSuggestion().fixId().isNotEmpty(); com.google.gerrit.acceptance.api.revision.RobotCommentInfoSubject.assertThatList(robotCommentInfos).singleElement().singleFixSuggestion().fixId().isNotEqualTo(fixSuggestionInfo.fixId); }",b92480d21c875266b167ea0e96580be13fab80ff,,testCreationOfFixIdForFixSuggestion(),2,3,"@org.junit.Test public void fixIdIsGeneratedForFixSuggestion() throws java.lang.Exception { assume().that(notesMigration.enabled()).isTrue(); addRobotComment(changeId, withFixRobotCommentInput); java.util.List<com.google.gerrit.extensions.common.RobotCommentInfo> robotCommentInfos = getRobotComments(); com.google.gerrit.acceptance.api.revision.RobotCommentInfoSubject.assertThatList(robotCommentInfos).onlyElement().onlyFixSuggestion().fixId().isNotEmpty(); com.google.gerrit.acceptance.api.revision.RobotCommentInfoSubject.assertThatList(robotCommentInfos).onlyElement().onlyFixSuggestion().fixId().isNotEqualTo(fixSuggestionInfo.fixId); }",76c4fb8378f0793b667457412de48a12f4767f6e,fixIdIsGeneratedForFixSuggestion(),78065,164,163
153612,javatests_com_google_gerrit_extensions_conditions_BooleanConditionTest.java,,,,@org.junit.Test public void reduceNot() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION)); },a007a4badd389d5fe77f56649163c9bbb6813cf5,,reduceNot(),5,16,"@org.junit.Test public void reduceNot_ReduceIrrelevant() throws java.lang.Exception { com.google.gerrit.extensions.conditions.BooleanCondition nonReduced = com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); com.google.gerrit.extensions.conditions.BooleanCondition reduced = com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false); assertEquals(nonReduced.reduce(), reduced); }",ca6f531ab34517c557416cf75a94e0d89cce97a3,reduceNot_ReduceIrrelevant(),137231,228,118
47325,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_registration_DynamicItemProvider.java,0.0,"private static <T> com.google.inject.Provider<T> find(com.google.inject.Injector src, com.google.inject.TypeLiteral<T> type) { java.util.List<com.google.inject.Binding<T>> bindings = src.findBindingsByType(type); if ((bindings != null) && ((bindings.size()) == 1)) { return bindings.get(0).getProvider(); } else if ((bindings != null) && ((bindings.size()) > 1)) { throw new com.google.inject.ProvisionException(java.lang.String.format((""Multiple providers bound for DynamicItem<%s>\n"" + ""This is not allowed; check the server configuration.""), type)); } else { return null; } }",4a9d377f28c7578eae2c38be9d0bef3b74121d51,"private static <T> com.google.inject.Provider<T> find(com.google.inject.Injector src, com.google.inject.TypeLiteral<T> type) { java.util.List<com.google.inject.Binding<T>> bindings = src.findBindingsByType(type); if ((bindings != null) && ((bindings.size()) == 1)) { return bindings.get(0).getProvider(); } else if ((bindings != null) && ((bindings.size()) > 1)) { com.google.inject.ProvisionException e = new com.google.inject.ProvisionException(java.lang.String.format((""Multiple providers bound for DynamicItem<%s>\n"" + ""This is not allowed; check the server configuration.""), type)); e.printStackTrace(); throw e; } else { return null; } }",3c9e9db4ce192a8460204b5ea3fda24359e31e75,"find(com.google.inject.Injector,com.google.inject.TypeLiteral)","find(com.google.inject.Injector,com.google.inject.TypeLiteral)",9,0,"private static <T> com.google.inject.Provider<T> find(com.google.inject.Injector src, com.google.inject.TypeLiteral<T> type) { java.util.List<com.google.inject.Binding<T>> bindings = src.findBindingsByType(type); if ((bindings != null) && ((bindings.size()) == 1)) { return bindings.get(0).getProvider(); } else if ((bindings != null) && ((bindings.size()) > 1)) { throw new com.google.inject.ProvisionException(java.lang.String.format((""Multiple providers bound for DynamicItem<%s>\n"" + ""This is not allowed; check the server configuration.""), type)); } else { return null; } }",4a9d377f28c7578eae2c38be9d0bef3b74121d51,"find(com.google.inject.Injector,com.google.inject.TypeLiteral)",208734,180,164
84437,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsConfigSection.java,,,,"public java.lang.Boolean getEnabled() { return cfg.getBoolean(com.googlesource.gerrit.plugins.lfs.LfsConfigSection.LFS, namespace, com.googlesource.gerrit.plugins.lfs.LfsConfigSection.KEY_ENABLED, false); }",0c5bc076eda116214ec2977432cab4f8d9e74411,,getEnabled(),10,1,"public boolean isEnabled() { return cfg.getBoolean(com.googlesource.gerrit.plugins.lfs.LfsConfigSection.LFS, namespace, com.googlesource.gerrit.plugins.lfs.LfsConfigSection.KEY_ENABLED, false); }",78ec222049bf1269fc5764d1d343a26a3c822d77,isEnabled(),159314,63,59
31553,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_patch_PatchDetailServiceImpl.java,11.0,"public com.google.gwtjsonrpc.client.VoidResult run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.httpd.rpc.patch.Failure, com.google.gwtorm.client.OrmException { try { final com.google.gerrit.server.project.ChangeControl cc = changeControlFactory.validateFor(psid.getParentKey()); if (!(cc.isOwner())) { throw new com.google.gerrit.httpd.rpc.patch.Failure(new com.google.gerrit.common.errors.NoSuchEntityException()); } com.google.gerrit.server.ChangeUtil.deleteDraftPatchSet(psid, gitManager, replication, patchSetInfoFactory, db); } catch (NoSuchChangeException e) { throw new com.google.gerrit.httpd.rpc.patch.Failure(new NoSuchChangeException(psid.getParentKey())); } catch (PatchSetInfoNotAvailableException e) { throw new com.google.gerrit.httpd.rpc.patch.Failure(e); } catch (IOException e) { throw new com.google.gerrit.httpd.rpc.patch.Failure(e); } return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }",15c0322b129f864cc0c7da5c64f3af230f9ab3a2,"public com.google.gwtjsonrpc.client.VoidResult run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.httpd.rpc.patch.Failure, com.google.gwtorm.client.OrmException { com.google.gerrit.common.data.ReviewResult result = null; try { result = deleteDraftFactory.create(psid).call(); } catch (NoSuchChangeException e) { throw new com.google.gerrit.httpd.rpc.patch.Failure(new NoSuchChangeException(result.getChangeId())); } if ((result.getErrors().size()) > 0) { throw new com.google.gerrit.httpd.rpc.patch.Failure(new com.google.gerrit.common.errors.NoSuchEntityException()); } return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }",92f8ec77acf75ae15b1dc02a7cd83a12558793c5,run(com.google.gerrit.reviewdb.ReviewDb),run(com.google.gerrit.reviewdb.ReviewDb),6,11,"public com.google.gwtjsonrpc.client.VoidResult run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.httpd.rpc.patch.Failure, com.google.gwtorm.client.OrmException { com.google.gerrit.common.data.ReviewResult result = null; try { result = deleteDraftPatchSetFactory.create(psid).call(); } catch (NoSuchChangeException e) { throw new com.google.gerrit.httpd.rpc.patch.Failure(new NoSuchChangeException(result.getChangeId())); } if ((result.getErrors().size()) > 0) { throw new com.google.gerrit.httpd.rpc.patch.Failure(new com.google.gerrit.common.errors.NoSuchEntityException()); } return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }",f3308043b43e1c261e97e920397388c79011dd4a,run(com.google.gerrit.reviewdb.ReviewDb),53340,197,199
62862,gerrit-gwtui_src_main_java_com_google_gerrit_client_rpc_RestApi.java,26.0,@java.lang.Override public void execute() { try { cb.onSuccess(data); } finally { if (!(background)) { RpcStatus.INSTANCE.onRpcComplete(); } } },8abbc939d03cc6ee09a339c2c1ebbcc772922ba8,"@java.lang.SuppressWarnings(""unchecked"") @java.lang.Override public void execute() { try { if (withResponse) { ((com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.HttpResponse<T>>) (cb)).onSuccess(com.google.gerrit.client.rpc.HttpResponse.wrap(res, data)); } else { cb.onSuccess(data); } } finally { if (!(background)) { RpcStatus.INSTANCE.onRpcComplete(); } } }",fc92666f9b96f575ca8ccf968c20213fa0fbebc3,execute(),execute(),7,11,"@java.lang.Override public void execute() { try { cb.onSuccess(new com.google.gerrit.client.rpc.HttpResponse(res, type, data)); } finally { if (!(background)) { RpcStatus.INSTANCE.onRpcComplete(); } } }",c5a7e65c699ae7115cde4ecb1ffc2073dde99f4e,execute(),67161,117,58
97779,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_ShowQueue.java,1.0,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { maxCommandWidth = (wide) ? java.lang.Integer.MAX_VALUE : (((((columns) - 8) - 12) - 12) - 4) - 4; stdout.print(java.lang.String.format(""%-8s %-12s %-12s %-4s %s\n"", ""Task"", ""State"", ""StartTime"", """", ""Command"")); stdout.print(""------------------------------------------------------------------------------\n""); java.util.List<com.google.gerrit.server.config.ListTasks.TaskInfo> tasks; try { tasks = listTasks.apply(new com.google.gerrit.server.config.ConfigResource()); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw die(e); } boolean viewAll = currentUser.getCapabilities().canViewQueue(); long now = com.google.gerrit.common.TimeUtil.nowMs(); if (groupByQueue) { com.google.common.collect.ListMultimap<java.lang.String, com.google.gerrit.server.config.ListTasks.TaskInfo> byQueue = byQueue(tasks); for (java.lang.String queueName : byQueue.keySet()) { com.google.gerrit.server.git.WorkQueue.Executor e = workQueue.getExecutor(queueName); stdout.print(java.lang.String.format(""Queue: %s\n"", queueName)); print(byQueue.get(queueName), now, viewAll, e.getCorePoolSize()); } } else { print(tasks, now, viewAll, 0); } }",18835e11dab7e4ea439e1bbf6797fda39c058974,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { maxCommandWidth = (wide) ? java.lang.Integer.MAX_VALUE : (((((columns) - 8) - 12) - 12) - 4) - 4; stdout.print(java.lang.String.format(""%-8s %-12s %-12s %-4s %s\n"", ""Task"", ""State"", ""StartTime"", """", ""Command"")); stdout.print(""------------------------------------------------------------------------------\n""); java.util.List<com.google.gerrit.server.config.ListTasks.TaskInfo> tasks; boolean viewAll; try { try { tasks = listTasks.apply(new com.google.gerrit.server.config.ConfigResource()); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw die(e); } viewAll = permissionBackend.user(currentUser).test(GlobalPermission.VIEW_QUEUE); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.sshd.commands.Failure(1, ""queue unavailable"", e); } long now = com.google.gerrit.common.TimeUtil.nowMs(); if (groupByQueue) { com.google.common.collect.ListMultimap<java.lang.String, com.google.gerrit.server.config.ListTasks.TaskInfo> byQueue = byQueue(tasks); for (java.lang.String queueName : byQueue.keySet()) { com.google.gerrit.server.git.WorkQueue.Executor e = workQueue.getExecutor(queueName); stdout.print(java.lang.String.format(""Queue: %s\n"", queueName)); print(byQueue.get(queueName), now, viewAll, e.getCorePoolSize()); } } else { print(tasks, now, viewAll, 0); } }",ceea4dd9d7193f5a72c5418a61595107247cd5fe,run(),run(),13,1,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { maxCommandWidth = (wide) ? java.lang.Integer.MAX_VALUE : (((((columns) - 8) - 12) - 12) - 4) - 4; stdout.print(java.lang.String.format(""%-8s %-12s %-12s %-4s %s\n"", ""Task"", ""State"", ""StartTime"", """", ""Command"")); stdout.print(""------------------------------------------------------------------------------\n""); java.util.List<com.google.gerrit.server.config.ListTasks.TaskInfo> tasks; try { tasks = listTasks.apply(new com.google.gerrit.server.config.ConfigResource()); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw die(e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.sshd.commands.Failure(1, ""permission backend unavailable"", e); } boolean viewAll = permissionBackend.user(currentUser).testOrFalse(GlobalPermission.VIEW_QUEUE); long now = com.google.gerrit.common.TimeUtil.nowMs(); if (groupByQueue) { com.google.common.collect.ListMultimap<java.lang.String, com.google.gerrit.server.config.ListTasks.TaskInfo> byQueue = byQueue(tasks); for (java.lang.String queueName : byQueue.keySet()) { com.google.gerrit.server.git.WorkQueue.Executor e = workQueue.getExecutor(queueName); stdout.print(java.lang.String.format(""Queue: %s\n"", queueName)); print(byQueue.get(queueName), now, viewAll, e.getCorePoolSize()); } } else { print(tasks, now, viewAll, 0); } }",ac1b88b5af105e99324fdfcbecb02aff4f755eb3,run(),100432,420,417
38980,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectListScreen.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,protected void initPageHeader() { },9a660b62595634c0d9b85a0af44fc434f10bc5d4,,initPageHeader(),5,7,private void initPageHeader() { final com.google.gwt.user.client.ui.HorizontalPanel hp = new com.google.gwt.user.client.ui.HorizontalPanel(); hp.setStyleName(Gerrit.RESOURCES.css().projectFilterPanel()); final com.google.gwt.user.client.ui.Label filterLabel = new com.google.gwt.user.client.ui.Label(Util.C.projectFilter()); filterLabel.setStyleName(Gerrit.RESOURCES.css().projectFilterLabel()); hp.add(filterLabel); filterTxt = new com.google.gwtexpui.globalkey.client.NpTextBox(); filterTxt.setValue(subname); filterTxt.addKeyUpHandler(new com.google.gwt.event.dom.client.KeyUpHandler() { @java.lang.Override public void onKeyUp(com.google.gwt.event.dom.client.KeyUpEvent event) { subname = filterTxt.getValue(); refresh(); } }); hp.add(filterTxt); add(hp); },924a16351491882161a96dec6719eea9da4f3203,initPageHeader(),198715,8,234
87570,lib_asciidoctor_java_AsciiDoctor.java,5.0,private org.asciidoctor.Options createOptions(java.io.File outputFile) { org.asciidoctor.OptionsBuilder optionsBuilder = org.asciidoctor.OptionsBuilder.options(); optionsBuilder.backend(backend).docType(AsciiDoctor.DOCTYPE).eruby(AsciiDoctor.ERUBY).safe(SafeMode.UNSAFE).baseDir(basedir); optionsBuilder.toFile(outputFile); org.asciidoctor.AttributesBuilder attributesBuilder = org.asciidoctor.AttributesBuilder.attributes(); attributesBuilder.attributes(getAttributes()); optionsBuilder.attributes(attributesBuilder.get()); return optionsBuilder.get(); },c1588018e4b81a5525d8c2d5d8b2ad0c7aa73dca,"private org.asciidoctor.Options createOptions(java.io.File base, java.io.File outputFile) { org.asciidoctor.OptionsBuilder optionsBuilder = org.asciidoctor.OptionsBuilder.options(); optionsBuilder.backend(backend).docType(AsciiDoctor.DOCTYPE).eruby(AsciiDoctor.ERUBY).safe(SafeMode.UNSAFE).baseDir(base).toFile(outputFile); org.asciidoctor.AttributesBuilder attributesBuilder = org.asciidoctor.AttributesBuilder.attributes(); attributesBuilder.attributes(getAttributes()); optionsBuilder.attributes(attributesBuilder.get()); return optionsBuilder.get(); }",7d336cb8071f78f8bb82bdb796842ce4b2c47e78,createOptions(java.io.File),"createOptions(java.io.File,java.io.File)",17,5,"private org.asciidoctor.Options createOptions(java.io.File base, java.io.File outputFile) { org.asciidoctor.OptionsBuilder optionsBuilder = org.asciidoctor.OptionsBuilder.options(); optionsBuilder.backend(backend).docType(AsciiDoctor.DOCTYPE).eruby(AsciiDoctor.ERUBY).safe(SafeMode.UNSAFE).baseDir(base).toFile(outputFile); org.asciidoctor.AttributesBuilder attributesBuilder = org.asciidoctor.AttributesBuilder.attributes(); attributesBuilder.attributes(getAttributes()); if ((revnumber) != null) { attributesBuilder.attribute(AsciiDoctor.REVNUMBER_NAME, revnumber); } optionsBuilder.attributes(attributesBuilder.get()); return optionsBuilder.get(); }",eec128e46d707db5ab34c92aa11e86abf1020c65,"createOptions(java.io.File,java.io.File)",93116,129,156
115151,gerrit-server_src_main_java_com_google_gerrit_server_git_validators_CommitValidators.java,6.0,"public com.google.gerrit.server.git.validators.CommitValidators forGerritCommits(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, com.google.gerrit.server.project.RefControl refctl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.revwalk.RevWalk rw) { com.google.gerrit.server.IdentifiedUser user = refctl.getUser().asIdentifiedUser(); return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(perm), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(perm, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(user, perm, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(user, perm, refctl.getProjectControl().getProjectState()), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refctl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refctl, rw, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators), new com.google.gerrit.server.git.validators.CommitValidators.ExternalIdUpdateListener(allUsers, externalIdsConsistencyChecker), new com.google.gerrit.server.git.validators.CommitValidators.AccountValidator(allUsers))); }",7311970a0ddb9471126563f3b424e3e0febedb39,"public com.google.gerrit.server.git.validators.CommitValidators forGerritCommits(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, com.google.gerrit.server.project.RefControl refctl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.revwalk.RevWalk rw) { com.google.gerrit.server.IdentifiedUser user = refctl.getUser().asIdentifiedUser(); return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(perm), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(perm, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(user, perm, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(user, perm, refctl.getProjectControl().getProjectState()), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refctl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refctl, rw, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators), new com.google.gerrit.server.git.validators.CommitValidators.ExternalIdUpdateListener(allUsers, externalIdsConsistencyChecker), new com.google.gerrit.server.git.validators.CommitValidators.AccountCommitValidator(allUsers, accountValidator))); }",9d2c4e975bcded141a1de9a3164e36ad5a4cb3e3,"forGerritCommits(com.google.gerrit.server.permissions.PermissionBackend$ForRef,com.google.gerrit.server.project.RefControl,com.google.gerrit.server.ssh.SshInfo,org.eclipse.jgit.revwalk.RevWalk)","forGerritCommits(com.google.gerrit.server.permissions.PermissionBackend$ForRef,com.google.gerrit.server.project.RefControl,com.google.gerrit.server.ssh.SshInfo,org.eclipse.jgit.revwalk.RevWalk)",14,5,"public com.google.gerrit.server.git.validators.CommitValidators forGerritCommits(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, com.google.gerrit.reviewdb.client.Branch.NameKey branch, com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.revwalk.RevWalk rw) throws java.io.IOException { return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(perm), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(perm, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(user, perm, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(user, perm, projectCache.checkedGet(branch.getParentKey())), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(projectCache.checkedGet(branch.getParentKey()), user, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(branch, user, rw, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators), new com.google.gerrit.server.git.validators.CommitValidators.ExternalIdUpdateListener(allUsers, externalIdsConsistencyChecker), new com.google.gerrit.server.git.validators.CommitValidators.AccountCommitValidator(allUsers, accountValidator))); }",ce574e427430bdd884c2c3d57d028da896ab3ee4,"forGerritCommits(com.google.gerrit.server.permissions.PermissionBackend$ForRef,com.google.gerrit.reviewdb.client.Branch$NameKey,com.google.gerrit.server.IdentifiedUser,com.google.gerrit.server.ssh.SshInfo,org.eclipse.jgit.revwalk.RevWalk)",83075,436,449
53682,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_OverviewBar.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.google.gwt.uibinder.client.UiHandler(""viewport"") void onMouseMove(com.google.gwt.event.dom.client.MouseMoveEvent e) { if (dragging) { int y = (e.getRelativeY(getElement())) - (startY); double top = java.lang.Math.max(0, (y / (ratio))); com.google.gerrit.client.diff.OverviewBar.log((((((""drag s:"" + (startY)) + "" y:"") + y) + "" top:"") + top)); cmB.scrollToY(top); } }",7c8791b0b61d1358645dab3704d8cee1a9e6d624,,onMouseMove(com.google.gwt.event.dom.client.MouseMoveEvent),5,11,"@com.google.gwt.uibinder.client.UiHandler(""viewport"") void onMouseMove(com.google.gwt.event.dom.client.MouseMoveEvent e) { if (dragging) { int y = (e.getRelativeY(getElement())) - (startY); cmB.scrollToY(java.lang.Math.max(0, (y / (ratio)))); e.preventDefault(); e.stopPropagation(); } }",60fddbf2e43a0734d5a742be701895885866a7fc,onMouseMove(com.google.gwt.event.dom.client.MouseMoveEvent),173732,135,94
14750,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_ChangeListServiceImpl.java,45.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.Set<com.google.gerrit.reviewdb.Change.Id> changesReferencingTr(final com.google.gerrit.reviewdb.ReviewDb db, final java.lang.String trackingId) throws com.google.gwtorm.client.OrmException { final java.util.Set<com.google.gerrit.reviewdb.Change.Id> resultChanges = new java.util.HashSet<com.google.gerrit.reviewdb.Change.Id>(); for (final com.google.gerrit.reviewdb.TrackingId tr : db.trackingIds().getTrackingId(new com.google.gerrit.reviewdb.TrackingId.Id(trackingId))) { resultChanges.add(tr.getChangeId()); } return resultChanges; }",7fb259400a0f280d1ad520efcc7cf7579f7320ed,,"changesReferencingTr(com.google.gerrit.reviewdb.ReviewDb,java.lang.String)",2,47,"private java.util.Set<com.google.gerrit.reviewdb.Change.Id> changesReferencingTr(final com.google.gerrit.reviewdb.ReviewDb db, final java.lang.String trackingId) throws com.google.gwtorm.client.OrmException { final java.util.Set<com.google.gerrit.reviewdb.Change.Id> resultChanges = new java.util.HashSet<com.google.gerrit.reviewdb.Change.Id>(); for (final com.google.gerrit.reviewdb.TrackingId tr : db.trackingIds().byTrackingId(new com.google.gerrit.reviewdb.TrackingId.Id(trackingId))) { resultChanges.add(tr.getChangeId()); } return resultChanges; }",e1b85f0331ff1b0aff5d3ea1a6ac232f060fbb33,"changesReferencingTr(com.google.gerrit.reviewdb.ReviewDb,java.lang.String)",51349,180,180
84437,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsConfig.java,,,,"public com.googlesource.gerrit.plugins.lfs.LfsConfigSection getForProject(com.google.gerrit.reviewdb.client.Project.NameKey project) { org.eclipse.jgit.lib.Config cfg = projectCache.getAllProjects().getConfig(""lfs.config"").get(); java.util.Set<java.lang.String> namespaces = cfg.getSubsections(LfsConfigSection.LFS); java.lang.String p = project.get(); for (java.lang.String n : namespaces) { if ((""?/*"".equals(n)) || (n.endsWith(""/?/*""))) { java.lang.String prefix = n.substring(0, ((n.length()) - 3)); java.util.regex.Matcher m = java.util.regex.Pattern.compile(((""^"" + prefix) + ""([^/]+)/.*$"")).matcher(p); if (m.matches()) { return new com.googlesource.gerrit.plugins.lfs.LfsConfigSection(cfg, n, ((prefix + (m.group(1))) + ""/*"")); } } else if (n.endsWith(""/*"")) { if (p.startsWith(n.substring(0, ((n.length()) - 1)))) { return new com.googlesource.gerrit.plugins.lfs.LfsConfigSection(cfg, n); } } else if (n.startsWith(""^"")) { if (p.matches(n.substring(1))) { return new com.googlesource.gerrit.plugins.lfs.LfsConfigSection(cfg, n); } } else if (p.equals(n)) { return new com.googlesource.gerrit.plugins.lfs.LfsConfigSection(cfg, n); } } return null; }",cfbe60eabad0b526fce03e6cf0044938b04fa501,,getForProject(com.google.gerrit.reviewdb.client.Project$NameKey),10,0,"public com.googlesource.gerrit.plugins.lfs.LfsConfigSection getForProject(com.google.gerrit.reviewdb.client.Project.NameKey project) { org.eclipse.jgit.lib.Config cfg = projectCache.getAllProjects().getConfig(((pluginName) + "".config"")).get(); java.util.Set<java.lang.String> namespaces = cfg.getSubsections(LfsConfigSection.LFS); java.lang.String p = project.get(); for (java.lang.String n : namespaces) { if ((""?/*"".equals(n)) || (n.endsWith(""/?/*""))) { java.lang.String prefix = n.substring(0, ((n.length()) - 3)); java.util.regex.Matcher m = java.util.regex.Pattern.compile(((""^"" + prefix) + ""([^/]+)/.*$"")).matcher(p); if (m.matches()) { return new com.googlesource.gerrit.plugins.lfs.LfsConfigSection(cfg, n); } } else if (n.endsWith(""/*"")) { if (p.startsWith(n.substring(0, ((n.length()) - 1)))) { return new com.googlesource.gerrit.plugins.lfs.LfsConfigSection(cfg, n); } } else if (n.startsWith(""^"")) { if (p.matches(n.substring(1))) { return new com.googlesource.gerrit.plugins.lfs.LfsConfigSection(cfg, n); } } else if (p.equals(n)) { return new com.googlesource.gerrit.plugins.lfs.LfsConfigSection(cfg, n); } } return null; }",f3b70ef36a9e2f13caebde1daecb80c752c8e88c,getForProject(com.google.gerrit.reviewdb.client.Project$NameKey),159313,393,382
5216,webapp_src_com_google_gerrit_server_HtmlDomUtil.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static java.lang.String readFile(final java.io.File parentDir, final java.lang.String name) throws javax.servlet.ServletException { if (parentDir == null) { return null; } final java.io.File path = new java.io.File(parentDir, name); try { final java.io.InputStream in = new java.io.FileInputStream(path); try { final java.io.StringWriter w = new java.io.StringWriter(); final java.io.InputStreamReader r = new java.io.InputStreamReader(in, com.google.gerrit.server.HtmlDomUtil.ENC); final char[] buf = new char[512]; int n; while ((n = r.read(buf)) > 0) { w.write(buf, 0, n); } return w.toString(); } finally { in.close(); } } catch (java.io.FileNotFoundException e) { return null; } catch (java.io.IOException e) { throw new javax.servlet.ServletException((""Error reading "" + path), e); } }",8de21cf9615886bda42fa6a046c859cd451acced,,"readFile(java.io.File,java.lang.String)",2,2,"public static java.lang.String readFile(final java.io.File parentDir, final java.lang.String name) throws javax.servlet.ServletException { if (parentDir == null) { return null; } final java.io.File path = new java.io.File(parentDir, name); try { final java.io.InputStream in = new java.io.FileInputStream(path); try { final java.lang.StringBuilder w = new java.lang.StringBuilder(); final java.io.InputStreamReader r = new java.io.InputStreamReader(in, com.google.gerrit.server.HtmlDomUtil.ENC); final char[] buf = new char[512]; int n; while ((n = r.read(buf)) > 0) { w.append(buf, 0, n); } return w.toString(); } finally { in.close(); } } catch (java.io.FileNotFoundException e) { return null; } catch (java.io.IOException e) { throw new javax.servlet.ServletException((""Error reading "" + path), e); } }",91fa910114489382c8b00ef9f705fc5292771f84,"readFile(java.io.File,java.lang.String)",87981,232,230
34490,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_project_ListProjectsServlet.java,2.0,"@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { res.setHeader(""Expires"", ""Fri, 01 Jan 1980 00:00:00 GMT""); res.setHeader(""Pragma"", ""no-cache""); res.setHeader(""Cache-Control"", ""no-cache, must-revalidate""); res.setContentType(""text/plain""); res.setCharacterEncoding(""UTF-8""); com.google.gerrit.server.project.ListProjects impl = factory.get(); com.google.gerrit.util.cli.CmdLineParser clp = parser.create(impl); try { @java.lang.SuppressWarnings(""unchecked"") java.util.Map<java.lang.String, java.lang.String[]> parameterMap = req.getParameterMap(); clp.parseOptionMap(parameterMap); } catch (org.kohsuke.args4j.CmdLineException e) { if (!(clp.wasHelpRequestedByOption())) { res.setStatus(HttpServletResponse.SC_BAD_REQUEST); send(res, e.getMessage().getBytes(""UTF-8"")); return; } } byte[] data; if (clp.wasHelpRequestedByOption()) { java.io.StringWriter msg = new java.io.StringWriter(); clp.printDetailedUsage(req.getRequestURI(), msg); data = msg.toString().getBytes(""UTF-8""); } else { java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream(); impl.display(buf); data = buf.toByteArray(); } if (com.google.gwt.user.server.rpc.RPCServletUtils.acceptsGzipEncoding(req)) { res.setHeader(""Content-Encoding"", ""gzip""); data = com.google.gerrit.httpd.HtmlDomUtil.compress(data); } send(res, data); }",0bf605bf214323107939767a16d412c903fea630,"@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { res.setHeader(""Expires"", ""Fri, 01 Jan 1980 00:00:00 GMT""); res.setHeader(""Pragma"", ""no-cache""); res.setHeader(""Cache-Control"", ""no-cache, must-revalidate""); com.google.gerrit.server.project.ListProjects impl = factory.get(); if (com.google.gerrit.httpd.rpc.project.ListProjectsServlet.acceptsJson(req)) { impl.setFormat(ListProjects.OutputFormat.JSON_COMPACT); } com.google.gerrit.util.cli.CmdLineParser clp = parser.create(impl); try { @java.lang.SuppressWarnings(""unchecked"") java.util.Map<java.lang.String, java.lang.String[]> parameterMap = req.getParameterMap(); clp.parseOptionMap(parameterMap); } catch (org.kohsuke.args4j.CmdLineException e) { if (!(clp.wasHelpRequestedByOption())) { res.setStatus(HttpServletResponse.SC_BAD_REQUEST); send(res, e.getMessage().getBytes(""UTF-8"")); return; } } byte[] data; if (clp.wasHelpRequestedByOption()) { java.io.StringWriter msg = new java.io.StringWriter(); clp.printDetailedUsage(req.getRequestURI(), msg); data = msg.toString().getBytes(""UTF-8""); res.setContentType(""text/plain""); } else { java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream(); if (impl.isFormatJson()) { res.setContentType(JsonUtil.JSON_TYPE); buf.write("")]}\'\n"".getBytes(""UTF-8"")); } else { res.setContentType(""text/plain""); } impl.display(buf); data = buf.toByteArray(); } res.setCharacterEncoding(""UTF-8""); if (com.google.gwt.user.server.rpc.RPCServletUtils.acceptsGzipEncoding(req)) { res.setHeader(""Content-Encoding"", ""gzip""); data = com.google.gerrit.httpd.HtmlDomUtil.compress(data); } send(res, data); }",f33a3800fa4624f37e7d0294336b263dd79ef0d9,"doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)","doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",10,0,"@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { com.google.gerrit.server.project.ListProjects impl = factory.get(); if (acceptsJson(req)) { impl.setFormat(OutputFormat.JSON_COMPACT); } if (paramParser.parse(impl, req, res)) { java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream(); if (impl.getFormat().isJson()) { res.setContentType(com.google.gerrit.httpd.rpc.project.JSON_TYPE); buf.write(com.google.gerrit.httpd.rpc.project.JSON_MAGIC); } else { res.setContentType(""text/plain""); } impl.display(buf); res.setCharacterEncoding(""UTF-8""); send(req, res, buf.toByteArray()); } }",ecb6c0d4320c93bf39010ef84f034e915dacfa3f,"doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",144412,485,199
73753,gerrit-server_src_main_java_com_google_gerrit_server_auth_oauth_OAuthTokenCache.java,,,,"public static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { cache(com.google.gerrit.server.auth.oauth.OAuthTokenCache.OAUTH_TOKENS, java.lang.String.class, com.google.gerrit.extensions.auth.oauth.OAuthToken.class); } }; }",6237b49f3b2b7b9273c83cac7e1bc0428e1b9c7b,,module(),5,0,"public static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { persist(com.google.gerrit.server.auth.oauth.OAuthTokenCache.OAUTH_TOKENS, java.lang.String.class, com.google.gerrit.extensions.auth.oauth.OAuthToken.class); } }; }",a68c9c3fb331b7b9d3c2121edea60ec45e6318af,module(),168647,92,92
73033,gerrit-sshd_src_main_java_com_google_gerrit_sshd_SshDaemon.java,7.0,"private void initSignatures() { setSignatureFactories(java.util.Arrays.<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.Signature>>asList(new org.apache.sshd.common.signature.SignatureDSA.Factory(), new org.apache.sshd.common.signature.SignatureRSA.Factory(), new org.apache.sshd.common.signature.SignatureECDSA.NISTP256Factory(), new org.apache.sshd.common.signature.SignatureECDSA.NISTP384Factory(), new org.apache.sshd.common.signature.SignatureECDSA.NISTP521Factory())); }",5c9dd4c738c44164c52a5cd714993ab6b25b3c0e,"private void initSignatures() { setSignatureFactories(java.util.Arrays.<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.signature.Signature>>asList(new org.apache.sshd.common.signature.SignatureDSA.Factory(), new org.apache.sshd.common.signature.SignatureRSA.Factory(), new org.apache.sshd.common.signature.SignatureECDSA.NISTP256Factory(), new org.apache.sshd.common.signature.SignatureECDSA.NISTP384Factory(), new org.apache.sshd.common.signature.SignatureECDSA.NISTP521Factory())); }",f082eb5a2281b6ea194bf6d0d8a704443085d854,initSignatures(),initSignatures(),6,5,private void initSignatures() { setSignatureFactories(org.apache.sshd.common.BaseBuilder.setUpDefaultSignatures(true)); },047b590c205903a59b431b8394be1a7dbd2eefa9,initSignatures(),42099,144,32
84900,src_main_java_com_googlesource_gerrit_plugins_forcedraft_ForceDraft.java,7.0,"private void updatePatchSet() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change.Status changeStatus = parentChange.getStatus(); switch (changeStatus) { case NEW : setPatchSetAsDraft(); updateChange(); break; default : sendUserInfo((""Unable to set patch set as draft, change is "" + (getStatusName(changeStatus)))); break; } }",9802c79dbe1b4fdd8e00a2186ba523ce24333a30,"private void updatePatchSet() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change.Status changeStatus = parentChange.getStatus(); switch (changeStatus) { case NEW : setPatchSetAsDraft(); updateChange(); break; case ABANDONED : case DRAFT : case MERGED : default : sendUserInfo((""Unable to set patch set as draft, change is "" + (getStatusName(changeStatus)))); break; } }",f63ef9540b37791b83793e9cd37e6102f38fadd5,updatePatchSet(),updatePatchSet(),2,7,"private void updatePatchSet() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change.Status changeStatus = parentChange.getStatus(); if (changeStatus == (Change.Status.NEW)) { setPatchSetAsDraft(); updateChange(); } else { sendUserInfo((""Unable to set patch set as draft, change is "" + (getStatusName(changeStatus)))); } }",5806503989623ad9714ba71b9a328cf84b1e8466,updatePatchSet(),1719,116,94
79068,gerrit-server_src_main_java_com_google_gerrit_common_StreamEventsApiListener.java,,,,private com.google.gerrit.reviewdb.client.Change getChange(com.google.gerrit.extensions.common.ChangeInfo info) throws com.google.gwtorm.server.OrmException { return unwrap(db.get()).changes().get(new com.google.gerrit.reviewdb.client.Change.Id(info._number)); },d52672dab2c843804bf44d160cde73a1da6553f7,,getChange(com.google.gerrit.extensions.common.ChangeInfo),13,3,private com.google.gerrit.reviewdb.client.Change getChange(com.google.gerrit.extensions.common.ChangeInfo info) throws com.google.gwtorm.server.OrmException { return getNotes(info).getChange(); },523c8605152d4977bb1885e1fbebe83947690512,getChange(com.google.gerrit.extensions.common.ChangeInfo),194821,84,57
108592,gerrit-httpd_src_main_java_com_google_gerrit_httpd_UrlModule.java,7.0,"private com.google.inject.Key<javax.servlet.http.HttpServlet> directChangeById() { return key(new javax.servlet.http.HttpServlet() { private static final long serialVersionUID = 1L; @java.lang.Override protected void doGet(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { try { java.lang.String idString = req.getPathInfo(); if (idString.endsWith(""/"")) { idString = idString.substring(0, ((idString.length()) - 1)); } com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.parse(idString); com.google.gerrit.httpd.UrlModule.toGerrit(com.google.gerrit.common.PageLinks.toChange(id), req, rsp); } catch (java.lang.IllegalArgumentException err) { rsp.sendError(HttpServletResponse.SC_NOT_FOUND); } } }); }",3156c1d84252b84670a98f37bb940d7a50faefa6,"private com.google.inject.Key<javax.servlet.http.HttpServlet> directChangeById() { return key(new javax.servlet.http.HttpServlet() { private static final long serialVersionUID = 1L; @java.lang.Override protected void doGet(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { try { java.lang.String idString = req.getPathInfo(); if (idString.endsWith(""/"")) { idString = idString.substring(0, ((idString.length()) - 1)); } com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.parse(idString); com.google.gerrit.httpd.UrlModule.toGerrit(com.google.gerrit.common.PageLinks.toChange(id, null), req, rsp); } catch (java.lang.IllegalArgumentException err) { rsp.sendError(HttpServletResponse.SC_NOT_FOUND); } } }); }",f65433d36dad0606f1cd71d712c194c2fce7e9c2,directChangeById(),directChangeById(),7,7,"private com.google.inject.Key<javax.servlet.http.HttpServlet> directChangeById() { return key(new javax.servlet.http.HttpServlet() { private static final long serialVersionUID = 1L; @java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { try { java.lang.String idString = req.getPathInfo(); if (idString.endsWith(""/"")) { idString = idString.substring(0, ((idString.length()) - 1)); } com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.parse(idString); com.google.gerrit.httpd.UrlModule.toGerrit(com.google.gerrit.common.PageLinks.toChange(null, id), req, rsp); } catch (java.lang.IllegalArgumentException err) { rsp.sendError(HttpServletResponse.SC_NOT_FOUND); } } }); }",f79c37503317d07cf66714cff59792fd166cf467,directChangeById(),211493,221,219
52825,gerrit-server_src_test_java_com_google_gerrit_server_notedb_ChangeNotesTest.java,,,,"private org.eclipse.jgit.revwalk.RevCommit commit(com.google.gerrit.server.notedb.ChangeUpdate update) throws java.io.IOException { com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, project, repo); md.getCommitBuilder().setAuthor(new org.eclipse.jgit.lib.PersonIdent(""Example User"", ""user@example.com"")); md.getCommitBuilder().setCommitter(new org.eclipse.jgit.lib.PersonIdent(""Gerrit Test"", ""test@gerrit.com"")); return update.commit(md); }",616f4f841ba7918b753d370ae985ca44f81a71db,,commit(com.google.gerrit.server.notedb.ChangeUpdate),13,14,"private org.eclipse.jgit.revwalk.RevCommit commit(com.google.gerrit.server.notedb.ChangeUpdate update) throws java.io.IOException { com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, project, repo); java.sql.Timestamp ts = com.google.gerrit.server.util.TimeUtil.nowTs(); md.getCommitBuilder().setAuthor(new org.eclipse.jgit.lib.PersonIdent(""Example User"", ""user@example.com"", ts, com.google.gerrit.server.notedb.ChangeNotesTest.TZ)); md.getCommitBuilder().setCommitter(new org.eclipse.jgit.lib.PersonIdent(""Gerrit Test"", ""notthis@email.com"", ts, com.google.gerrit.server.notedb.ChangeNotesTest.TZ)); return update.commit(md); }",661fc7042be20825228e572a5cb21848316e15d4,commit(com.google.gerrit.server.notedb.ChangeUpdate),194704,167,240
50441,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_IncludedInBox.java,,,,"private com.google.gwt.safehtml.shared.SafeHtml formatList(com.google.gwt.core.client.JsArrayString l) { com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder(); int size = l.length(); for (int i = 0; i < size; i++) { sb.openSpan().addStyleName(style.includedInElement()).append(l.get(i)).closeSpan(); if (i < (size - 1)) { sb.append("", ""); } } return sb; }",5264a6a410de6aeae6da7d185061eb277cf15dc5,,formatList(com.google.gwt.core.client.JsArrayString),3,3,"private com.google.gwt.safehtml.shared.SafeHtml formatList(com.google.gwt.core.client.JsArrayString l) { com.google.gwtexpui.safehtml.client.SafeHtmlBuilder html = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder(); int size = l.length(); for (int i = 0; i < size; i++) { html.openSpan().addStyleName(style.includedInElement()).append(l.get(i)).closeSpan(); if (i < (size - 1)) { html.append("", ""); } } return html; }",d62ca23084b1bf07d5b19ebda52042d216d40e70,formatList(com.google.gwt.core.client.JsArrayString),57138,134,134
58572,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeDraftUpdate.java,,,,"@java.lang.Override protected java.lang.String getRefName() { return com.google.gerrit.server.notedb.ChangeDraftNotesUtil.draftRefName(accountId, getChange().getId()); }",39004306c007c7e9a457ce2261355514b6be792d,,getRefName(),21,7,"@java.lang.Override protected java.lang.String getRefName() { return com.google.gerrit.reviewdb.client.RefNames.refsDraftComments(accountId, getChange().getId()); }",539e6daadb7b79b036397e353a966d42b74f694b,getRefName(),49304,47,47
76474,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_VersionedAuthorizedKeysOnInit.java,,,,"private void save(org.eclipse.jgit.lib.PersonIdent ident, java.lang.String msg) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.io.File path = getPath(); if (path == null) { throw new java.io.IOException(((project) + "" does not exist."")); } try (org.eclipse.jgit.lib.Repository repo = new org.eclipse.jgit.internal.storage.file.FileRepository(path)) { inserter = repo.newObjectInserter(); reader = repo.newObjectReader(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(reader)) { org.eclipse.jgit.revwalk.RevTree srcTree = ((revision) != null) ? rw.parseTree(revision) : null; newTree = readTree(srcTree); org.eclipse.jgit.lib.CommitBuilder commit = new org.eclipse.jgit.lib.CommitBuilder(); commit.setAuthor(ident); commit.setCommitter(ident); commit.setMessage(msg); super.onSave(commit); org.eclipse.jgit.lib.ObjectId res = newTree.writeTree(inserter); if (res.equals(srcTree)) { return; } commit.setTreeId(res); if ((revision) != null) { commit.addParentId(revision); } org.eclipse.jgit.lib.ObjectId newRevision = inserter.insert(commit); updateRef(repo, ident, newRevision, (""commit: "" + msg)); revision = newRevision; } finally { if ((inserter) != null) { inserter.close(); inserter = null; } if ((reader) != null) { reader.close(); reader = null; } } } }",8089fc45814074d4011779cb63e5d4281ac84fbd,,"save(org.eclipse.jgit.lib.PersonIdent,java.lang.String)",9,2,"private void save(org.eclipse.jgit.lib.PersonIdent ident, java.lang.String msg) throws java.io.IOException { java.io.File path = getPath(); if (path == null) { throw new java.io.IOException(((project) + "" does not exist."")); } try (org.eclipse.jgit.lib.Repository repo = new org.eclipse.jgit.internal.storage.file.FileRepository(path);org.eclipse.jgit.lib.ObjectInserter i = repo.newObjectInserter();org.eclipse.jgit.lib.ObjectReader r = repo.newObjectReader();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(reader)) { inserter = i; reader = r; org.eclipse.jgit.revwalk.RevTree srcTree = ((revision) != null) ? rw.parseTree(revision) : null; newTree = readTree(srcTree); org.eclipse.jgit.lib.CommitBuilder commit = new org.eclipse.jgit.lib.CommitBuilder(); commit.setAuthor(ident); commit.setCommitter(ident); commit.setMessage(msg); onSave(commit); org.eclipse.jgit.lib.ObjectId res = newTree.writeTree(inserter); if (res.equals(srcTree)) { return; } commit.setTreeId(res); if ((revision) != null) { commit.addParentId(revision); } org.eclipse.jgit.lib.ObjectId newRevision = inserter.insert(commit); updateRef(repo, ident, newRevision, (""commit: "" + msg)); revision = newRevision; } finally { inserter = null; reader = null; } }",2961080b34311a1e3f103e1bd091c09306f7dd88,"save(org.eclipse.jgit.lib.PersonIdent,java.lang.String)",84842,411,393
76606,gerrit-gwtui_src_main_java_com_google_gerrit_client_editor_EditScreen.java,21.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void setIndentUnit(int indentunit) { cm.setOption(""indentUnit"", (Patch.COMMIT_MSG.equals(path) ? 2 : indentunit)); }",ac8a06063ddd8c98af42c478a05a0044d5990a8c,,setIndentUnit(int),5,11,"void setIndentUnit(int indent) { cm.setOption(""indentUnit"", (Patch.COMMIT_MSG.equals(path) ? 2 : indent)); }",bf5ab30db0ea1665ea1a84a3dfc216966350c2e8,setIndentUnit(int),60179,37,35
16037,gerrit-server_src_main_java_com_google_gerrit_server_mail_NewChangeSender.java,1.0,"@java.lang.Override protected void formatChange() { formatSalutation(); formatChangeDetail(); appendText(""\n""); appendText((("" "" + (getPullUrl())) + ""\n"")); }",b7fb05b7fb1d61438bd5ae77a46e80018321f48b,"@java.lang.Override protected void formatChange() { appendText(velocifyFile(""NewChange.vm"")); }",dfe80c6ece6c28d8052d999888c72e859065125d,formatChange(),formatChange(),4,1,"@java.lang.Override protected void formatChange() throws com.google.gerrit.server.mail.EmailException { appendText(velocifyFile(""NewChange.vm"")); }",38740aafcd37ec1148a633f1b0e5ed0c4d96003c,formatChange(),75349,27,41
79089,gerrit-server_src_main_java_com_google_gerrit_server_index_IndexModule.java,1.0,@java.lang.Override protected void configure() { bind(com.google.gerrit.server.index.change.IndexRewriter.class); bind(com.google.gerrit.server.index.change.ChangeIndexCollection.class); listener().to(com.google.gerrit.server.index.change.ChangeIndexCollection.class); factory(ChangeIndexer.Factory.class); },193918df28c95b942a970f04f353d4337b55fef6,@java.lang.Override protected void configure() { bind(com.google.gerrit.server.index.change.IndexRewriter.class); bind(com.google.gerrit.server.index.account.AccountIndexCollection.class); listener().to(com.google.gerrit.server.index.account.AccountIndexCollection.class); factory(AccountIndexer.Factory.class); bind(com.google.gerrit.server.index.change.ChangeIndexCollection.class); listener().to(com.google.gerrit.server.index.change.ChangeIndexCollection.class); factory(ChangeIndexer.Factory.class); },1e2a5f3b1ed4b98d96e8b2a57bba9eabcd5c6fc2,configure(),configure(),3,1,@java.lang.Override protected void configure() { bind(com.google.gerrit.server.index.change.IndexRewriter.class); bind(com.google.gerrit.server.index.account.AccountIndexCollection.class); listener().to(com.google.gerrit.server.index.account.AccountIndexCollection.class); bind(com.google.gerrit.server.index.change.ChangeIndexCollection.class); listener().to(com.google.gerrit.server.index.change.ChangeIndexCollection.class); factory(ChangeIndexer.Factory.class); },c0aa7b238a3d4a984c7a0ddfb6f7887b673e6a40,configure(),122355,138,129
71262,gerrit-server_src_main_java_com_google_gerrit_server_schema_Schema_108.java,1.0,"private com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Change.Id> getOpenChangesByProject(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Change.Id> openByProject = com.google.common.collect.HashMultimap.create(); for (com.google.gerrit.reviewdb.client.Change c : db.changes().all()) { if (c.getStatus().isOpen()) { openByProject.put(c.getProject(), c.getId()); } } return openByProject; }",f355cbd70cf65bcfc0fe8c35d9027e6dd61dc321,"private com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Change.Id> getOpenChangesByProject(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Change.Id> openByProject = com.google.common.collect.HashMultimap.create(); for (com.google.gerrit.reviewdb.client.Change c : db.changes().all()) { com.google.gerrit.reviewdb.client.Change.Status status = c.getStatus(); if (status == null) { ui.message(((""Skipping migration of Change "" + (c.getChangeId())) + "" as it is not in an obsolete/unsupported state"")); } else if (status.isOpen()) { openByProject.put(c.getProject(), c.getId()); } } return openByProject; }",44cf1b898346e998dfdcac9613f1a4e6fd55e2c6,getOpenChangesByProject(com.google.gerrit.reviewdb.server.ReviewDb),"getOpenChangesByProject(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.schema.UpdateUI)",6,4,"private com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Change.Id> getOpenChangesByProject(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Change.Id> openByProject = com.google.common.collect.HashMultimap.create(); for (com.google.gerrit.reviewdb.client.Change c : db.changes().all()) { com.google.gerrit.reviewdb.client.Change.Status status = c.getStatus(); if ((status != null) && (status.isClosed())) { continue; } openByProject.put(c.getProject(), c.getId()); } return openByProject; }",e450392d6927f0b19ad5175154cafadf5f30a5c3,getOpenChangesByProject(com.google.gerrit.reviewdb.server.ReviewDb),100251,281,234
61604,gerrit-server_src_main_java_com_google_gerrit_server_account_SetDiffPreferences.java,0.0,"@java.lang.Override public com.google.gerrit.server.account.GetDiffPreferences.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.SetDiffPreferences.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""restricted to members of Modify Accounts""); } if (input == null) { input = new com.google.gerrit.server.account.SetDiffPreferences.Input(); } com.google.gerrit.reviewdb.client.Account.Id accountId = rsrc.getUser().getAccountId(); com.google.gerrit.reviewdb.client.AccountDiffPreference p; db.get().accounts().beginTransaction(accountId); try { p = db.get().accountDiffPreferences().get(accountId); if (p == null) { p = new com.google.gerrit.reviewdb.client.AccountDiffPreference(accountId); } if ((input.context) != null) { p.setContext(input.context); } if ((input.ignoreWhitespace) != null) { p.setIgnoreWhitespace(input.ignoreWhitespace); } if ((input.expandAllComments) != null) { p.setExpandAllComments(input.expandAllComments); } if ((input.intralineDifference) != null) { p.setIntralineDifference(input.intralineDifference); } if ((input.lineLength) != null) { p.setLineLength(input.lineLength); } if ((input.manualReview) != null) { p.setManualReview(input.manualReview); } if ((input.retainHeader) != null) { p.setRetainHeader(input.retainHeader); } if ((input.showLineEndings) != null) { p.setShowLineEndings(input.showLineEndings); } if ((input.showTabs) != null) { p.setShowTabs(input.showTabs); } if ((input.showWhitespaceErrors) != null) { p.setShowWhitespaceErrors(input.showWhitespaceErrors); } if ((input.skipDeleted) != null) { p.setSkipDeleted(input.skipDeleted); } if ((input.skipUncommented) != null) { p.setSkipUncommented(input.skipUncommented); } if ((input.syntaxHighlighting) != null) { p.setSyntaxHighlighting(input.syntaxHighlighting); } if ((input.hideTopMenu) != null) { p.setHideTopMenu(input.hideTopMenu); } if ((input.autoHideDiffTableHeader) != null) { p.setAutoHideDiffTableHeader(input.autoHideDiffTableHeader); } if ((input.hideLineNumbers) != null) { p.setHideLineNumbers(input.hideLineNumbers); } if ((input.renderEntireFile) != null) { p.setRenderEntireFile(input.renderEntireFile); } if ((input.tabSize) != null) { p.setTabSize(input.tabSize); } if ((input.theme) != null) { p.setTheme(input.theme); } if ((input.hideEmptyPane) != null) { p.setHideEmptyPane(input.hideEmptyPane); } db.get().accountDiffPreferences().upsert(java.util.Collections.singleton(p)); db.get().commit(); } finally { db.get().rollback(); } return com.google.gerrit.server.account.GetDiffPreferences.DiffPreferencesInfo.parse(p); }",5101f4171bd2cd35e35c1415a7e0717b90aa5864,"@java.lang.Override public com.google.gerrit.extensions.common.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.common.DiffPreferencesInfo in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""restricted to members of Modify Accounts""); } if (in == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""input must be provided""); } com.google.gerrit.reviewdb.client.Account.Id accountId = rsrc.getUser().getAccountId(); com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(allUsersName); com.google.gerrit.server.account.VersionedAccountPreferences prefs; com.google.gerrit.extensions.common.DiffPreferencesInfo out = new com.google.gerrit.extensions.common.DiffPreferencesInfo(); try { prefs = com.google.gerrit.server.account.VersionedAccountPreferences.forUser(accountId); prefs.load(md); storeSection(prefs.getConfig(), ""diff"", null, in); prefs.commit(md); loadSection(prefs.getConfig(), ""diff"", null, out); } finally { md.close(); } return out; }",f2401ea8113107ef7f34363b996c9e1da3902e8d,"apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.server.account.SetDiffPreferences$Input)","apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.extensions.common.DiffPreferencesInfo)",40,5,"@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.DiffPreferencesInfo in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""restricted to members of Modify Accounts""); } if (in == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""input must be provided""); } com.google.gerrit.reviewdb.client.Account.Id userId = rsrc.getUser().getAccountId(); com.google.gerrit.extensions.client.DiffPreferencesInfo n = (readFromGit) ? com.google.gerrit.server.account.GetDiffPreferences.readFromGit(userId, gitMgr, allUsersName, in) : merge(com.google.gerrit.server.account.GetDiffPreferences.initFromDb(db.get().accountDiffPreferences().get(userId)), in); com.google.gerrit.extensions.client.DiffPreferencesInfo out = writeToGit(n, userId); writeToDb(n, userId); return out; }",c8a1e35fb0d18dc202aacd1b04fe16e1997e43ea,"apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.extensions.client.DiffPreferencesInfo)",128065,377,365
154472,java_com_google_gerrit_server_notedb_rebuild_ChangeRebuilderImpl.java,20.0,"private org.eclipse.jgit.lib.PersonIdent newAuthorIdent(com.google.gerrit.server.notedb.rebuild.EventList<?> events) { com.google.gerrit.reviewdb.client.Account.Id id = events.getAccountId(); if (id == null) { return new org.eclipse.jgit.lib.PersonIdent(serverIdent, events.getWhen()); } return changeNoteUtil.newIdent(accountCache.get(id).getAccount(), events.getWhen(), serverIdent); }",a6f7fa550362b247f817d21944a9f990621da81d,"private org.eclipse.jgit.lib.PersonIdent newAuthorIdent(com.google.gerrit.server.notedb.rebuild.EventList<?> events) { com.google.gerrit.reviewdb.client.Account.Id id = events.getAccountId(); if (id == null) { return new org.eclipse.jgit.lib.PersonIdent(serverIdent, events.getWhen()); } return changeNoteUtil.newIdent(accountCache.getEvenIfMissing(id).getAccount(), events.getWhen(), serverIdent); }",637c36cf456017a6a091916d4b8f847090b95e8f,newAuthorIdent(com.google.gerrit.server.notedb.rebuild.EventList),newAuthorIdent(com.google.gerrit.server.notedb.rebuild.EventList),8,20,"private org.eclipse.jgit.lib.PersonIdent newAuthorIdent(com.google.gerrit.server.notedb.rebuild.EventList<?> events) { com.google.gerrit.reviewdb.client.Account.Id id = events.getAccountId(); if (id == null) { return new org.eclipse.jgit.lib.PersonIdent(serverIdent, events.getWhen()); } return changeNoteUtil.newIdent(id, events.getWhen(), serverIdent); }",e1a6a2d1d8ab7a8b354547dfe7d8b57e8f799416,newAuthorIdent(com.google.gerrit.server.notedb.rebuild.EventList),86643,117,108
49142,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Reviewers.java,,,,"@com.google.gwt.uibinder.client.UiHandler(""cancel"") void onCancel(com.google.gwt.event.dom.client.ClickEvent e) { com.google.gwt.user.client.ui.UIObject.setVisible(form, false); suggestBox.setFocus(false); }",813168925f311b3fe63d03c14237536caf23137e,,onCancel(com.google.gwt.event.dom.client.ClickEvent),19,3,"@com.google.gwt.uibinder.client.UiHandler(""cancel"") void onCancel(com.google.gwt.event.dom.client.ClickEvent e) { openForm.setVisible(true); com.google.gwt.user.client.ui.UIObject.setVisible(form, false); suggestBox.setFocus(false); }",9eaa4d781b4a1bb6d7d6ea3e5094dc8f1395c6f0,onCancel(com.google.gwt.event.dom.client.ClickEvent),174697,66,73
14739,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_ListProjects.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void printElement(final java.io.PrintWriter stdout, com.google.gerrit.sshd.commands.ListProjects.TreeNode node, int level, boolean isLast, final com.google.gerrit.sshd.commands.ListProjects.TreeNode lastParentNode) { if ((node.getProject()) != null) { if (!(currentTabSeparator.equals("" ""))) { final java.lang.String nodeProject = node.getProject().getName(); final java.lang.String lastParentProject = lastParentNode.getProject().getName(); if (nodeProject.equals(lastParentProject)) { currentTabSeparator = "" ""; } } if (level > 0) { stdout.print(java.lang.String.format(((""%-"" + (4 * level)) + ""s""), currentTabSeparator)); } final java.lang.String prefix = (isLast) ? com.google.gerrit.sshd.commands.ListProjects.LAST_NODE_PREFIX : com.google.gerrit.sshd.commands.ListProjects.NODE_PREFIX; java.lang.String printout; if (node.isVisible()) { printout = prefix + (node.getProject().getName()); } else { printout = prefix + (com.google.gerrit.sshd.commands.ListProjects.NOT_VISIBLE_PROJECT); } stdout.println(printout); stdout.flush(); } if (node.isLeaf()) { return; } else { final java.util.List<com.google.gerrit.sshd.commands.ListProjects.TreeNode> children = node.getChildren(); ++level; for (com.google.gerrit.sshd.commands.ListProjects.TreeNode treeNode : children) { final boolean isLastIndex = (children.indexOf(treeNode)) == ((children.size()) - 1); printElement(stdout, treeNode, level, isLastIndex, lastParentNode); } } }",f45223dcb000443f0a05fe52facda34903757ac7,,"printElement(java.io.PrintWriter,com.google.gerrit.sshd.commands.ListProjects$TreeNode,int,boolean,com.google.gerrit.sshd.commands.ListProjects$TreeNode)",2,0,"private void printElement(final java.io.PrintWriter stdout, com.google.gerrit.sshd.commands.ListProjects.TreeNode node, int level, boolean isLast, final com.google.gerrit.sshd.commands.ListProjects.TreeNode lastParentNode) { if ((node.getProject()) != null) { if (!(currentTabSeparator.equals("" ""))) { final java.lang.String nodeProject = node.getProject().getName(); final java.lang.String lastParentProject = lastParentNode.getProject().getName(); if (nodeProject.equals(lastParentProject)) { currentTabSeparator = "" ""; } } if (level > 0) { stdout.print(java.lang.String.format(((""%-"" + (4 * level)) + ""s""), currentTabSeparator)); } final java.lang.String prefix = (isLast) ? com.google.gerrit.sshd.commands.ListProjects.LAST_NODE_PREFIX : com.google.gerrit.sshd.commands.ListProjects.NODE_PREFIX; java.lang.String printout; if (node.isVisible()) { printout = prefix + (node.getProject().getName()); } else { printout = prefix + (com.google.gerrit.sshd.commands.ListProjects.NOT_VISIBLE_PROJECT); } stdout.print((printout + ""\n"")); } if (node.isLeaf()) { return; } else { final java.util.List<com.google.gerrit.sshd.commands.ListProjects.TreeNode> children = node.getChildren(); ++level; for (com.google.gerrit.sshd.commands.ListProjects.TreeNode treeNode : children) { final boolean isLastIndex = (children.indexOf(treeNode)) == ((children.size()) - 1); printElement(stdout, treeNode, level, isLastIndex, lastParentNode); } } }",914e3a20bb0a6c02b726cb6fa0844a8b7116aa72,"printElement(java.io.PrintWriter,com.google.gerrit.sshd.commands.ListProjects$TreeNode,int,boolean,com.google.gerrit.sshd.commands.ListProjects$TreeNode)",131384,411,411
154472,java_com_google_gerrit_server_mail_send_FromAddressGeneratorProvider.java,4.0,"@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { java.lang.String senderName; if (fromId != null) { com.google.gerrit.reviewdb.client.Account a = accountCache.get(fromId).getAccount(); java.lang.String fullName = a.getFullName(); java.lang.String userEmail = a.getPreferredEmail(); if (canRelay(userEmail)) { return new com.google.gerrit.server.mail.Address(fullName, userEmail); } if ((fullName == null) || ("""".equals(fullName.trim()))) { fullName = anonymousCowardName; } senderName = nameRewriteTmpl.replace(""user"", fullName).toString(); } else { senderName = serverAddress.getName(); } java.lang.String senderEmail; com.google.gerrit.common.data.ParameterizedString senderEmailPattern = new com.google.gerrit.common.data.ParameterizedString(serverAddress.getEmail()); if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace(""userHash"", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }",cd75d15d6c41dfa5db7e752a7cdfc04f6a2cc28d,"@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { java.lang.String senderName; if (fromId != null) { com.google.gerrit.reviewdb.client.Account a = accountCache.getEvenIfMissing(fromId).getAccount(); java.lang.String fullName = a.getFullName(); java.lang.String userEmail = a.getPreferredEmail(); if (canRelay(userEmail)) { return new com.google.gerrit.server.mail.Address(fullName, userEmail); } if ((fullName == null) || ("""".equals(fullName.trim()))) { fullName = anonymousCowardName; } senderName = nameRewriteTmpl.replace(""user"", fullName).toString(); } else { senderName = serverAddress.getName(); } java.lang.String senderEmail; com.google.gerrit.common.data.ParameterizedString senderEmailPattern = new com.google.gerrit.common.data.ParameterizedString(serverAddress.getEmail()); if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace(""userHash"", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }",cb41d86388b20291aecee4ff1fc4965d99af3639,from(com.google.gerrit.reviewdb.client.Account$Id),from(com.google.gerrit.reviewdb.client.Account$Id),8,4,"@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { java.lang.String senderName; if (fromId != null) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> a = accountCache.maybeGet(fromId).map(AccountState::getAccount); java.lang.String fullName = a.map(Account::getFullName).orElse(null); java.lang.String userEmail = a.map(Account::getPreferredEmail).orElse(null); if (canRelay(userEmail)) { return new com.google.gerrit.server.mail.Address(fullName, userEmail); } if ((fullName == null) || ("""".equals(fullName.trim()))) { fullName = anonymousCowardName; } senderName = nameRewriteTmpl.replace(""user"", fullName).toString(); } else { senderName = serverAddress.getName(); } java.lang.String senderEmail; com.google.gerrit.common.data.ParameterizedString senderEmailPattern = new com.google.gerrit.common.data.ParameterizedString(serverAddress.getEmail()); if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace(""userHash"", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }",4f0c7fa7e363b6848774fada4674291b64970952,from(com.google.gerrit.reviewdb.client.Account$Id),86670,325,352
76894,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_UnifiedCommentManager.java,6.0,"private com.google.gerrit.client.diff.UnifiedCommentGroup group(com.google.gerrit.client.diff.DisplaySide side, int cmLinePlusOne) { com.google.gerrit.client.diff.UnifiedCommentGroup w = map(side).get(cmLinePlusOne); if (w != null) { return w; } com.google.gerrit.client.diff.UnifiedCommentGroup g = new com.google.gerrit.client.diff.UnifiedCommentGroup(this, host.getCm(), side, cmLinePlusOne); if (side == (DisplaySide.A)) { sideA.put(cmLinePlusOne, g); } else { sideB.put(cmLinePlusOne, g); } if (isAttached()) { g.init(getDiffScreen().getDiffTable()); g.handleRedraw(); } return g; }",a82fdbd4294344fdaac0a168f74464a9905ba1c8,"@java.lang.Override com.google.gerrit.client.diff.CommentGroup group(com.google.gerrit.client.diff.DisplaySide side, int cmLinePlusOne) { java.util.Map<java.lang.Integer, com.google.gerrit.client.diff.CommentGroup> map = map(side); com.google.gerrit.client.diff.CommentGroup existing = map.get(cmLinePlusOne); if (existing != null) { return existing; } com.google.gerrit.client.diff.UnifiedCommentGroup g = new com.google.gerrit.client.diff.UnifiedCommentGroup(this, host.getCmFromSide(side), side, cmLinePlusOne); map.put(cmLinePlusOne, g); mergedMap.put(cmLinePlusOne, g); if (isAttached()) { g.init(host.getDiffTable()); g.handleRedraw(); } return g; }",a876adbaac94982f958b05b0401e631d06e3d9a6,"group(com.google.gerrit.client.diff.DisplaySide,int)","group(com.google.gerrit.client.diff.DisplaySide,int)",9,7,"@java.lang.Override com.google.gerrit.client.diff.CommentGroup group(com.google.gerrit.client.diff.DisplaySide side, int cmLinePlusOne) { java.util.Map<java.lang.Integer, com.google.gerrit.client.diff.CommentGroup> map = map(side); com.google.gerrit.client.diff.CommentGroup existing = map.get(cmLinePlusOne); if (existing != null) { return existing; } com.google.gerrit.client.diff.UnifiedCommentGroup g = new com.google.gerrit.client.diff.UnifiedCommentGroup(this, host.getCmFromSide(side), side, cmLinePlusOne); map.put(cmLinePlusOne, g); if (mergedMap.containsKey(cmLinePlusOne)) { duplicates.put(cmLinePlusOne, mergedMap.remove(cmLinePlusOne)); } mergedMap.put(cmLinePlusOne, g); if (isAttached()) { g.init(host.getDiffTable()); g.handleRedraw(); } return g; }",76df6d14379e197db57e841661c60cb98d2d34b6,"group(com.google.gerrit.client.diff.DisplaySide,int)",67747,210,243
119410,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_conditions_BooleanCondition.java,,,,"@java.lang.Override public java.lang.String toString() { return (((""("" + (a)) + "" || "") + (b)) + "")""; }",5fbcd6758a7e3e4e45b7f10520f172bf8ae07af5,,toString(),4,5,"@java.lang.Override public java.lang.String toString() { return (((""("" + (com.google.gerrit.extensions.conditions.BooleanCondition.maybeTrim(a, getClass()))) + "" || "") + (com.google.gerrit.extensions.conditions.BooleanCondition.maybeTrim(a, getClass()))) + "")""; }",9e3e22c6d9b79ff714885cb72ead841662fff08a,toString(),100843,37,77
93324,src_test_java_com_ericsson_gerrit_plugins_eventslog_EventHandlerTest.java,0.0,@org.junit.Before public void setUp() { storeMock = easyMock.createMock(com.ericsson.gerrit.plugins.eventslog.EventStore.class); },5843cba3593c1b80ba00dd24b71ed1eba1c74a8a,"@org.junit.Before public void setUp() { poolMock = new com.ericsson.gerrit.plugins.eventslog.EventHandlerTest.PoolMock(1); eventHandler = new com.ericsson.gerrit.plugins.eventslog.EventHandler(storeMock, poolMock); }",fd0b35e401c06ee9df829b6e4a20452bd03e3f47,setUp(),setUp(),7,0,"@org.junit.Before public void setUp() { java.util.concurrent.ScheduledThreadPoolExecutor poolMock = new com.ericsson.gerrit.plugins.eventslog.EventHandlerTest.PoolMock(); eventHandler = new com.ericsson.gerrit.plugins.eventslog.EventHandler(storeMock, poolMock); }",aee2e8c586a5780ab45be0dfcbe9a670afdf6843,setUp(),142094,62,71
91850,src_main_java_com_googlesource_gerrit_plugins_lfs_fs_LfsFsRequestAuthorizer.java,,,,"private javax.crypto.Cipher cipher(byte[] initVector, int mode) throws java.security.InvalidAlgorithmParameterException, java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.spec.InvalidParameterSpecException, javax.crypto.NoSuchPaddingException { javax.crypto.spec.IvParameterSpec spec = new javax.crypto.spec.IvParameterSpec(initVector); javax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance(""AES/CBC/PKCS5PADDING""); java.security.AlgorithmParameters params = java.security.AlgorithmParameters.getInstance(com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.ALGORITHM); params.init(spec); cipher.init(mode, key.get(), params); return cipher; }",14f280278ceeb6307065ce0222a4dbaea934245d,,"cipher(byte[],int)",10,2,"private javax.crypto.Cipher cipher(byte[] initVector, int mode) throws java.security.InvalidAlgorithmParameterException, java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.spec.InvalidParameterSpecException, javax.crypto.NoSuchPaddingException { javax.crypto.spec.IvParameterSpec spec = new javax.crypto.spec.IvParameterSpec(initVector); javax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance(""AES/CBC/PKCS5PADDING""); java.security.AlgorithmParameters params = java.security.AlgorithmParameters.getInstance(com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.ALGORITHM); params.init(spec); cipher.init(mode, key, params); return cipher; }",5271ab0b8fce8109ec861f3da09dd0d6459e9c05,"cipher(byte[],int)",47187,167,165
62862,gerrit-gwtui_src_main_java_com_google_gerrit_client_rpc_RestApi.java,11.0,"private <T extends com.google.gwt.core.client.JavaScriptObject> void send(com.google.gwt.http.client.RequestBuilder.Method method, com.google.gwt.user.client.rpc.AsyncCallback<T> cb) { com.google.gerrit.client.rpc.RestApi.HttpCallback<T> httpCallback = new com.google.gerrit.client.rpc.RestApi.HttpCallback(background, cb); try { if (!(background)) { RpcStatus.INSTANCE.onRpcStart(); } request(method).sendRequest(null, httpCallback); } catch (com.google.gwt.http.client.RequestException e) { httpCallback.onError(null, e); } }",b0497b2c7f48888fd7096eb5b82b5065e41af216,"private <T extends com.google.gwt.core.client.JavaScriptObject> void send(com.google.gwt.http.client.RequestBuilder.Method method, com.google.gwt.user.client.rpc.AsyncCallback<T> cb, boolean withResponse) { com.google.gerrit.client.rpc.RestApi.HttpCallback<T> httpCallback = new com.google.gerrit.client.rpc.RestApi.HttpCallback(background, cb, withResponse); try { if (!(background)) { RpcStatus.INSTANCE.onRpcStart(); } request(method).sendRequest(null, httpCallback); } catch (com.google.gwt.http.client.RequestException e) { httpCallback.onError(null, e); } }",405c6b9952ebf55393349e4278745b7a2ad44e4d,"send(com.google.gwt.http.client.RequestBuilder.Method,com.google.gwt.user.client.rpc.AsyncCallback)","send(com.google.gwt.http.client.RequestBuilder.Method,com.google.gwt.user.client.rpc.AsyncCallback,boolean)",7,44,"private <T extends com.google.gwt.core.client.JavaScriptObject> void send(com.google.gwt.http.client.RequestBuilder.Method method, com.google.gerrit.client.rpc.HttpCallback<T> cb) { com.google.gerrit.client.rpc.RestApi.HttpImpl<T> httpCallback = new com.google.gerrit.client.rpc.RestApi.HttpImpl(background, cb); try { if (!(background)) { RpcStatus.INSTANCE.onRpcStart(); } request(method).sendRequest(null, httpCallback); } catch (com.google.gwt.http.client.RequestException e) { httpCallback.onError(null, e); } }",45e61ad255ccc10229f3f380487fc517d0177e20,"send(com.google.gwt.http.client.RequestBuilder.Method,com.google.gerrit.client.rpc.HttpCallback)",67166,163,155
72320,gerrit-server_src_main_java_com_google_gerrit_metrics_dropwizard_DropWizardMetricMaker.java,11.0,"@java.lang.Override public synchronized com.google.gerrit.metrics.Timer newTimer(final java.lang.String name, com.google.gerrit.metrics.Description desc) { checkArgument((!(desc.isGauge())), ""timer must not be a gauge""); checkArgument((!(desc.isRate())), ""timer must not be a rate""); checkArgument(desc.isCumulative(), ""timer must be cumulative""); checkArgument(((desc.getTimeUnit()) != null), ""timer must have a unit""); checkNotDefined(name); descriptions.put(name, desc.getAnnotations()); final com.codahale.metrics.Timer metric = registry.timer(name); return new com.google.gerrit.metrics.Timer() { @java.lang.Override public void record(long value, java.util.concurrent.TimeUnit unit) { checkArgument((value >= 0), ""timer delta must be >= 0""); metric.update(value, unit); } @java.lang.Override public void remove() { descriptions.remove(name); registry.remove(name); } }; }",bbc4596bdee418ce5178735c16dda41165fdf222,"@java.lang.Override public synchronized com.google.gerrit.metrics.Timer newTimer(java.lang.String name, com.google.gerrit.metrics.Description desc) { checkArgument((!(desc.isGauge())), ""timer must not be a gauge""); checkArgument((!(desc.isRate())), ""timer must not be a rate""); checkArgument(desc.isCumulative(), ""timer must be cumulative""); checkArgument(((desc.getTimeUnit()) != null), ""timer must have a unit""); define(name, desc); return newTimerImpl(name); }",1af97fd6ecf3995f89608122ad6b410e66a79db4,"newTimer(java.lang.String,com.google.gerrit.metrics.Description)","newTimer(java.lang.String,com.google.gerrit.metrics.Description)",9,17,"@java.lang.Override public synchronized com.google.gerrit.metrics.Timer0 newTimer(java.lang.String name, com.google.gerrit.metrics.Description desc) { com.google.gerrit.metrics.dropwizard.DropWizardMetricMaker.checkTimerDescription(desc); define(name, desc); return newTimerImpl(name); }",9b5d3f15f2f4d16b6659f148897f0ee79fdbfeab,"newTimer(java.lang.String,com.google.gerrit.metrics.Description)",56885,122,78
21950,gerrit-server_src_main_java_com_google_gerrit_server_IdentifiedUser.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> getIncludedGroups(java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> seedGroups) { java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> includedGroups = new java.util.HashSet<com.google.gerrit.reviewdb.AccountGroup.Id>(seedGroups); java.util.Queue<com.google.gerrit.reviewdb.AccountGroup.Id> groupQueue = new java.util.LinkedList<com.google.gerrit.reviewdb.AccountGroup.Id>(seedGroups); while ((groupQueue.size()) > 0) { com.google.gerrit.reviewdb.AccountGroup.Id id = groupQueue.remove(); try { for (final com.google.gerrit.reviewdb.AccountGroupIncludedGroup i : dbProvider.get().accountGroupIncludedGroups().byIncludedGroup(id)) { com.google.gerrit.reviewdb.AccountGroup.Id groupId = i.getGroupId(); if (!(includedGroups.contains(groupId))) { includedGroups.add(groupId); groupQueue.add(groupId); } } } catch (com.google.gwtorm.client.OrmException e) { com.google.gerrit.server.IdentifiedUser.log.warn(""Cannot query included groups"", e); } } return includedGroups; }",2c541a2d28fb54abd96758e878308831cd5562c6,,getIncludedGroups(java.util.Set),9,0,private java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> getIncludedGroups(java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> seedGroups) { java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> includes = new java.util.HashSet<com.google.gerrit.reviewdb.AccountGroup.Id>(seedGroups); java.util.Queue<com.google.gerrit.reviewdb.AccountGroup.Id> groupQueue = new java.util.LinkedList<com.google.gerrit.reviewdb.AccountGroup.Id>(seedGroups); while ((groupQueue.size()) > 0) { com.google.gerrit.reviewdb.AccountGroup.Id id = groupQueue.remove(); for (final com.google.gerrit.reviewdb.AccountGroup.Id groupId : groupIncludeCache.getByInclude(id)) { if (includes.add(groupId)) { groupQueue.add(groupId); } } } return java.util.Collections.unmodifiableSet(includes); },62824507b50e1b44a1edf6122b4b099bb2e5a59f,getIncludedGroups(java.util.Set),189890,328,254
114273,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void lookUpByEmail() throws java.lang.Exception { assertEmail(accounts.byEmail(admin.email), admin); java.lang.String email = ""foo.bar@example.com""; externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(ExternalId.Key.parse(""foo:bar""), admin.id, email)); assertEmail(accounts.byEmail(email), admin); assertThat(accounts.byEmail(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(accounts.byEmail(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(accounts.byEmail(""non-existing@example.com"")).isEmpty(); java.util.Map<java.lang.String, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id>> byEmails = accounts.byEmails(admin.email, user.email); assertEmail(byEmails.get(admin.email), admin); assertEmail(byEmails.get(user.email), user); }",ab71544c7fa48c3f52c2fa152d368d4623e2ea05,,lookUpByEmail(),3,80,"@org.junit.Test public void lookUpByEmail() throws java.lang.Exception { assertEmail(accounts.byEmail(admin.email), admin); java.lang.String email = ""foo.bar@example.com""; externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(ExternalId.Key.parse(""foo:bar""), admin.id, email)); assertEmail(accounts.byEmail(email), admin); assertThat(accounts.byEmail(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(accounts.byEmail(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(accounts.byEmail(""non-existing@example.com"")).isEmpty(); com.google.common.collect.ImmutableSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id> byEmails = accounts.byEmails(admin.email, user.email); assertEmail(byEmails.get(admin.email), admin); assertEmail(byEmails.get(user.email), user); }",d7be2e8da8e12c9e70d5a86139f82ca7447fecca,lookUpByEmail(),18903,258,258
69983,gerrit-server_src_main_java_com_google_gerrit_server_git_gpg_GerritPublicKeyChecker.java,,,,private java.util.Set<java.lang.String> getAllowedUserIds() throws com.google.gwtorm.server.OrmException { java.util.Set<java.lang.String> result = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId extId : db.accountExternalIds().byAccount(user.getAccountId())) { result.add(extId.getExternalId()); if (!(com.google.common.base.Strings.isNullOrEmpty(extId.getEmailAddress()))) { result.add(extId.getEmailAddress()); } } return result; },b66c5e83183d473fd4eb2a914cecc4c47c281b0b,,getAllowedUserIds(),10,2,private java.util.Set<java.lang.String> getAllowedUserIds() { com.google.gerrit.server.IdentifiedUser user = userProvider.get(); java.util.Set<java.lang.String> result = new java.util.HashSet<>(); result.addAll(user.getEmailAddresses()); for (com.google.gerrit.reviewdb.client.AccountExternalId extId : user.state().getExternalIds()) { result.add(extId.getExternalId()); } return result; },39c5b6340b813f185135eee6960be38c726a770c,getAllowedUserIds(),3082,137,113
34560,gerrit-gwtui_src_main_java_com_google_gerrit_client_ui_ProjectListPopup.java,,,,@java.lang.Override protected void onOpenRow(final int row) { super.onOpenRow(row); handlerManager.fireEvent(new com.google.gerrit.client.ui.ProjectListPopup.ProjectListPopupOnOpenRowEvent(getRowItem(row).getName())); },f08e7625b525a5f957ec383befc31a75f0af15ae,,onOpenRow(int),10,5,@java.lang.Override protected void onOpenRow(final int row) { super.onOpenRow(row); openRow(getRowItem(row).name()); },f112c8c26ec49bde6ef8ff54bb3240c53b5ced01,onOpenRow(int),141482,62,36
75809,src_main_java_com_googlesource_gerrit_plugins_replication_Destination.java,4.0,"private void scheduleTask(com.googlesource.gerrit.plugins.replication.PushOne pushOp, int delay, java.util.concurrent.TimeUnit unit) { postEvent(pushOp); pool.schedule(pushOp, delay, unit); }",daf587bb77254b1a99cdd2448283f72ae4481eb8,"private void scheduleTask(com.googlesource.gerrit.plugins.replication.PushOne pushOp, int delay, java.util.concurrent.TimeUnit unit) { postReplicationScheduledEvent(pushOp); pool.schedule(pushOp, delay, unit); }",f76ff9016bb13ab7b8f1ea964421d19bac0f0fe2,"scheduleTask(com.googlesource.gerrit.plugins.replication.PushOne,int,java.util.concurrent.TimeUnit)","scheduleTask(com.googlesource.gerrit.plugins.replication.PushOne,int,java.util.concurrent.TimeUnit)",21,11,public int getMaxRetries() { return config.getMaxRetries(); },c0da8bcbde20563dedfefdf948469824f71108e2,getMaxRetries(),92039,55,14
116853,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_PrivateByDefaultIT.java,,,,"@org.junit.Test public void createChangeWithPrivateByDefaultDisabled() throws java.lang.Exception { assume().that(isPrivateByDefault()).isFalse(); com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().create(new com.google.gerrit.extensions.common.ChangeInput(project.get(), ""master"", ""empty change"")).get(); assertThat(info.isPrivate).isNull(); }",36145395ef8a55fecd8da0a7741b0dee899c4f1b,,createChangeWithPrivateByDefaultDisabled(),2,5,"@org.junit.Test public void createChangeWithPrivateByDefaultDisabled() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().create(new com.google.gerrit.extensions.common.ChangeInput(project.get(), ""master"", ""empty change"")).get(); assertThat(info.isPrivate).isNull(); }",8ee051c1ecb59319dca432382e2f1e8afa76c0c4,createChangeWithPrivateByDefaultDisabled(),49488,97,84
108164,gerrit-server_src_main_java_com_google_gerrit_server_change_GetRevisionActions.java,1.0,"@java.lang.Override public java.lang.String getETag(com.google.gerrit.server.change.RevisionResource rsrc) { com.google.common.hash.Hasher h = com.google.common.hash.Hashing.md5().newHasher(); com.google.gerrit.server.CurrentUser user = rsrc.getControl().getUser(); try { rsrc.getChangeResource().prepareETag(h, user); h.putBoolean(com.google.gerrit.server.change.Submit.wholeTopicEnabled(config)); com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.get(); com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.get().completeChangeSet(db, rsrc.getChange(), user); for (com.google.gerrit.server.query.change.ChangeData cd : cs.changes()) { changeResourceFactory.create(cd.changeControl()).prepareETag(h, user); } h.putBoolean(cs.furtherHiddenChanges()); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gwtorm.server.OrmRuntimeException(e); } return h.hash().toString(); }",86273744b70551393e4041916db14393d030a100,"@java.lang.Override public java.lang.String getETag(com.google.gerrit.server.change.RevisionResource rsrc) { @java.lang.SuppressWarnings(""deprecation"") com.google.common.hash.Hasher h = com.google.common.hash.Hashing.md5().newHasher(); com.google.gerrit.server.CurrentUser user = rsrc.getControl().getUser(); try { rsrc.getChangeResource().prepareETag(h, user); h.putBoolean(com.google.gerrit.server.change.Submit.wholeTopicEnabled(config)); com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.get(); com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.get().completeChangeSet(db, rsrc.getChange(), user); for (com.google.gerrit.server.query.change.ChangeData cd : cs.changes()) { changeResourceFactory.create(cd.changeControl()).prepareETag(h, user); } h.putBoolean(cs.furtherHiddenChanges()); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gwtorm.server.OrmRuntimeException(e); } return h.hash().toString(); }",974b6a6126e0a42c4ea29fe0f333c500cd53fb41,getETag(com.google.gerrit.server.change.RevisionResource),getETag(com.google.gerrit.server.change.RevisionResource),7,1,"@java.lang.Override public java.lang.String getETag(com.google.gerrit.server.change.RevisionResource rsrc) { com.google.common.hash.Hasher h = com.google.common.hash.Hashing.murmur3_128().newHasher(); com.google.gerrit.server.CurrentUser user = rsrc.getControl().getUser(); try { rsrc.getChangeResource().prepareETag(h, user); h.putBoolean(com.google.gerrit.server.change.Submit.wholeTopicEnabled(config)); com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.get(); com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.get().completeChangeSet(db, rsrc.getChange(), user); for (com.google.gerrit.server.query.change.ChangeData cd : cs.changes()) { changeResourceFactory.create(cd.changeControl()).prepareETag(h, user); } h.putBoolean(cs.furtherHiddenChanges()); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gwtorm.server.OrmRuntimeException(e); } return h.hash().toString(); }",a4a8e1fe9a42d793aa4c4aae8e77a38471149115,getETag(com.google.gerrit.server.change.RevisionResource),2950,292,286
66193,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_ListChildProjectsIT.java,0.0,"@org.junit.Test public void listChildren() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey existingProject = new com.google.gerrit.reviewdb.client.Project.NameKey(""p""); com.google.gerrit.reviewdb.client.Project.NameKey child1 = new com.google.gerrit.reviewdb.client.Project.NameKey(""p1""); com.google.gerrit.acceptance.GitUtil.createProject(sshSession, child1.get()); com.google.gerrit.reviewdb.client.Project.NameKey child2 = new com.google.gerrit.reviewdb.client.Project.NameKey(""p2""); com.google.gerrit.acceptance.GitUtil.createProject(sshSession, child2.get()); com.google.gerrit.acceptance.GitUtil.createProject(sshSession, ""p1.1"", child1); com.google.gerrit.acceptance.RestResponse r = GET(((""/projects/"" + (allProjects.get())) + ""/children/"")); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjects(java.util.Arrays.asList(new com.google.gerrit.reviewdb.client.Project.NameKey(""All-Users""), existingProject, child1, child2), com.google.gerrit.acceptance.rest.project.ListChildProjectsIT.toProjectInfoList(r)); }",051df4748406860751e8befa8524d01a33f637c9,"@org.junit.Test public void listChildren() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey existingProject = new com.google.gerrit.reviewdb.client.Project.NameKey(""p""); com.google.gerrit.reviewdb.client.Project.NameKey child1 = new com.google.gerrit.reviewdb.client.Project.NameKey(""p1""); createProject(child1.get()); com.google.gerrit.reviewdb.client.Project.NameKey child2 = new com.google.gerrit.reviewdb.client.Project.NameKey(""p2""); createProject(child2.get()); createProject(""p1.1"", child1); com.google.gerrit.acceptance.RestResponse r = GET(((""/projects/"" + (allProjects.get())) + ""/children/"")); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjects(java.util.Arrays.asList(new com.google.gerrit.reviewdb.client.Project.NameKey(""All-Users""), existingProject, child1, child2), com.google.gerrit.acceptance.rest.project.ListChildProjectsIT.toProjectInfoList(r)); }",03340146f60a7fb9e0b0ed42d4170826f7720f80,listChildren(),listChildren(),5,0,"@org.junit.Test public void listChildren() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey child1 = new com.google.gerrit.reviewdb.client.Project.NameKey(""p1""); createProject(child1.get()); com.google.gerrit.reviewdb.client.Project.NameKey child2 = new com.google.gerrit.reviewdb.client.Project.NameKey(""p2""); createProject(child2.get()); com.google.gerrit.reviewdb.client.Project.NameKey child1_1 = new com.google.gerrit.reviewdb.client.Project.NameKey(""p1.1""); createProject(child1_1.get(), child1); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertThatNameList(gApi.projects().name(allProjects.get()).children()).containsExactly(allUsers, project, child1, child2).inOrder(); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertThatNameList(gApi.projects().name(child1.get()).children()).containsExactly(child1_1); }",9e65db0bf1e3553db4854fa1e513f5b80cac491c,listChildren(),31378,295,263
62688,gerrit-server_src_main_java_com_google_gerrit_server_query_change_QueryProcessor.java,27.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.util.List<com.google.gerrit.server.query.change.ChangeData> queryChanges(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> query) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { return queryChanges(com.google.common.collect.ImmutableList.of(query)).get(0); }",62219906beca6350246a7e4ca8fb0743e52dfb1d,,queryChanges(com.google.gerrit.server.query.Predicate),4,1,"public com.google.gerrit.server.query.change.QueryResult queryChanges(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> query) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { return queryChanges(com.google.common.collect.ImmutableList.of(query)).get(0); }",c9ea1c868c349afda4a82961ea3e265f30961e27,queryChanges(com.google.gerrit.server.query.Predicate),12405,107,99
162992,java_com_google_gerrit_common_data_SubmitRequirement.java,,,,public abstract com.google.gerrit.common.data.SubmitRequirement.Builder setFullReason(java.lang.String fullReason);,d2fcd008b4bf59601a3eebaf956657902953ae27,,setFullReason(java.lang.String),20,2,"@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if (o instanceof com.google.gerrit.common.data.SubmitRequirement) { com.google.gerrit.common.data.SubmitRequirement that = ((com.google.gerrit.common.data.SubmitRequirement) (o)); return ((java.util.Objects.equals(shortReason, that.shortReason)) && (java.util.Objects.equals(fullReason, that.fullReason))) && (java.util.Objects.equals(label, that.label)); } return false; }",5aa2aee808aa14cbeeec09766ac6b36613c9ac6b,equals(java.lang.Object),167930,29,143
15353,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_PatchScriptSettingsPanel.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void persistDiffPreferences() { com.google.gerrit.reviewdb.AccountDiffPreference diffPref = new com.google.gerrit.reviewdb.AccountDiffPreference(); diffPref.setIgnoreWhitespace(getIgnoreWhitespace().getCode()); diffPref.setTabSize(tabWidth.getIntValue()); diffPref.setLineLength(colWidth.getIntValue()); diffPref.setSyntaxHighlighting(syntaxHighlighting.getValue()); diffPref.setShowWhitespaceErrors(whitespaceErrors.getValue()); diffPref.setIntralineDifference(intralineDifference.getValue()); diffPref.setShowTabs(showTabs.getValue()); Util.ACCOUNT_SVC.changeDiffPreferences(diffPref, new com.google.gerrit.client.rpc.GerritCallback<com.google.gwtjsonrpc.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gwtjsonrpc.client.VoidResult result) { } }); }",3ade7906785d5a0d1122925950f59a46f5be4a64,,persistDiffPreferences(),4,5,"private void persistDiffPreferences() { setEnabled(false); final com.google.gerrit.reviewdb.AccountDiffPreference diffPref = new com.google.gerrit.reviewdb.AccountDiffPreference(com.google.gerrit.client.Gerrit.getUserAccount().getId()); diffPref.setIgnoreWhitespace(getIgnoreWhitespace()); diffPref.setTabSize(tabWidth.getIntValue()); diffPref.setLineLength(colWidth.getIntValue()); diffPref.setSyntaxHighlighting(syntaxHighlighting.getValue()); diffPref.setShowWhitespaceErrors(whitespaceErrors.getValue()); diffPref.setIntralineDifference(intralineDifference.getValue()); diffPref.setShowTabs(showTabs.getValue()); diffPref.setContext(getContext()); Util.ACCOUNT_SVC.changeDiffPreferences(diffPref, new com.google.gerrit.client.rpc.GerritCallback<com.google.gwtjsonrpc.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gwtjsonrpc.client.VoidResult result) { com.google.gerrit.client.Gerrit.setAccountDiffPreference(diffPref); setEnabled(true); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { setEnabled(true); } }); }",d829e44c990535ed5f93c25cfd2c14539e412fd2,persistDiffPreferences(),108657,204,283
121630,gerrit-server_src_main_java_com_google_gerrit_server_group_ListMembers.java,2.0,"private java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.extensions.common.AccountInfo> getMembers(final com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seenGroups) throws com.google.gwtorm.server.OrmException { seenGroups.add(groupUUID); final java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.extensions.common.AccountInfo> members = new java.util.HashMap<>(); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupUUID); if (group == null) { return java.util.Collections.emptyMap(); } final com.google.gerrit.common.data.GroupDetail groupDetail; try { groupDetail = groupDetailFactory.create(group.getGroupUUID()).call(); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { return java.util.Collections.emptyMap(); } for (com.google.gerrit.reviewdb.client.Account.Id member : groupDetail.getMembers()) { if (!(members.containsKey(member))) { members.put(member, accountLoader.get(member)); } } if (recursive) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid : groupDetail.getIncludes()) { if (!(seenGroups.contains(includedGroupUuid))) { members.putAll(getMembers(includedGroupUuid, seenGroups)); } } } accountLoader.fill(); return members; }",a27f99fa5587743042c0dac132f601e13851873d,"private java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.extensions.common.AccountInfo> getMembers(final com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seenGroups) throws com.google.gwtorm.server.OrmException { seenGroups.add(groupUUID); final java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.extensions.common.AccountInfo> members = new java.util.HashMap<>(); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupUUID); if (group == null) { return java.util.Collections.emptyMap(); } final com.google.gerrit.common.data.GroupDetail groupDetail; try { groupDetail = groupDetailFactory.create(group.getGroupUUID()).call(); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { return java.util.Collections.emptyMap(); } for (com.google.gerrit.reviewdb.client.Account.Id member : groupDetail.getMembers()) { if (!(members.containsKey(member))) { members.put(member, accountLoader.get(member)); } } if (recursive) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : groupDetail.getSubgroups()) { if (!(seenGroups.contains(subgroupUuid))) { members.putAll(getMembers(subgroupUuid, seenGroups)); } } } accountLoader.fill(); return members; }",e44dfd7c81c22861fe6efebbb6a4c3467092cfad,"getMembers(com.google.gerrit.reviewdb.client.AccountGroup$UUID,java.util.HashSet)","getMembers(com.google.gerrit.reviewdb.client.AccountGroup$UUID,java.util.HashSet)",7,3,"private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> getMembers(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seenGroups) { seenGroups.add(groupUUID); java.util.Optional<com.google.gerrit.server.group.InternalGroup> internalGroup = groupCache.get(groupUUID); if (!(internalGroup.isPresent())) { return com.google.common.collect.ImmutableSet.of(); } com.google.gerrit.server.group.InternalGroup group = internalGroup.get(); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.server.group.InternalGroupDescription(group)); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> directMembers = group.getMembers().stream().filter(groupControl::canSeeMember).collect(toImmutableSet()); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> indirectMembers = new java.util.HashSet<>(); if ((recursive) && (groupControl.canSeeGroup())) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : group.getSubgroups()) { if (!(seenGroups.contains(subgroupUuid))) { indirectMembers.addAll(getMembers(subgroupUuid, seenGroups)); } } } return com.google.common.collect.Sets.union(directMembers, indirectMembers); }",9722a2b84ee94563c1f5e386ce27ff86c7ae9b70,"getMembers(com.google.gerrit.reviewdb.client.AccountGroup$UUID,java.util.HashSet)",41106,391,372
80042,gerrit-server_src_main_java_com_google_gerrit_server_git_strategy_SubmitStrategy.java,3.0,"com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create(com.google.gerrit.extensions.client.SubmitType submitType, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.server.git.MergeOp.CommitStatus commits, com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw, com.google.gerrit.server.IdentifiedUser caller, com.google.gerrit.server.git.MergeTip mergeTip, org.eclipse.jgit.lib.ObjectInserter inserter, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevFlag canMergeFlag, com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Set<org.eclipse.jgit.revwalk.RevCommit> alreadyAccepted, java.lang.String submissionId, com.google.gerrit.extensions.api.changes.ReviewInput.NotifyHandling notifyHandling);",cf033c1934547c7c38cf0e1ea082036b1033df69,"com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create(com.google.gerrit.extensions.client.SubmitType submitType, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.server.git.MergeOp.CommitStatus commits, com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw, com.google.gerrit.server.IdentifiedUser caller, com.google.gerrit.server.git.MergeTip mergeTip, org.eclipse.jgit.lib.ObjectInserter inserter, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevFlag canMergeFlag, com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Set<org.eclipse.jgit.revwalk.RevCommit> alreadyAccepted, java.lang.String submissionId, com.google.gerrit.extensions.api.changes.ReviewNotification notifyHandling);",b9fedd81431fe3e204b8bb99ea09a22f089817f9,"create(com.google.gerrit.extensions.client.SubmitType,com.google.gerrit.reviewdb.client.Branch$NameKey,com.google.gerrit.server.git.MergeOp.CommitStatus,com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk,com.google.gerrit.server.IdentifiedUser,com.google.gerrit.server.git.MergeTip,org.eclipse.jgit.lib.ObjectInserter,org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevFlag,com.google.gerrit.reviewdb.server.ReviewDb,java.util.Set,java.lang.String,com.google.gerrit.extensions.api.changes.ReviewInput.NotifyHandling)","create(com.google.gerrit.extensions.client.SubmitType,com.google.gerrit.reviewdb.client.Branch$NameKey,com.google.gerrit.server.git.MergeOp.CommitStatus,com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk,com.google.gerrit.server.IdentifiedUser,com.google.gerrit.server.git.MergeTip,org.eclipse.jgit.lib.ObjectInserter,org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevFlag,com.google.gerrit.reviewdb.server.ReviewDb,java.util.Set,java.lang.String,com.google.gerrit.extensions.api.changes.ReviewNotification)",3,4,"com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create(com.google.gerrit.extensions.client.SubmitType submitType, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.server.git.MergeOp.CommitStatus commits, com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw, com.google.gerrit.server.IdentifiedUser caller, com.google.gerrit.server.git.MergeTip mergeTip, org.eclipse.jgit.lib.ObjectInserter inserter, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevFlag canMergeFlag, com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Set<org.eclipse.jgit.revwalk.RevCommit> alreadyAccepted, java.lang.String submissionId, com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling);",444d471b8210a23dfa8f31901d0ba899578f1e83,"create(com.google.gerrit.extensions.client.SubmitType,com.google.gerrit.reviewdb.client.Branch$NameKey,com.google.gerrit.server.git.MergeOp.CommitStatus,com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk,com.google.gerrit.server.IdentifiedUser,com.google.gerrit.server.git.MergeTip,org.eclipse.jgit.lib.ObjectInserter,org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevFlag,com.google.gerrit.reviewdb.server.ReviewDb,java.util.Set,java.lang.String,com.google.gerrit.extensions.api.changes.NotifyHandling)",24844,233,233
158892,gerrit-server_src_main_java_com_google_gerrit_server_index_IndexModule.java,2.0,"@com.google.inject.Provides @com.google.inject.Singleton @com.google.gerrit.server.index.IndexExecutor(BATCH) com.google.common.util.concurrent.ListeningExecutorService getBatchIndexExecutor(@com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config, com.google.gerrit.server.git.WorkQueue workQueue) { if ((batchExecutor) != null) { return batchExecutor; } int threads = config.getInt(""index"", null, ""batchThreads"", 0); if (threads <= 0) { threads = java.lang.Runtime.getRuntime().availableProcessors(); } return com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(threads, ""Index-Batch"")); }",dd185cf4a9b1bed5003c69e9647a6c35156b286e,"@com.google.inject.Provides @com.google.inject.Singleton @com.google.gerrit.server.index.IndexExecutor(BATCH) com.google.common.util.concurrent.ListeningExecutorService getBatchIndexExecutor(@com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config, com.google.gerrit.server.git.WorkQueue workQueue) { if ((batchExecutor) != null) { return batchExecutor; } int batchThreads = this.threads; if (batchThreads <= 0) batchThreads = config.getInt(""index"", null, ""batchThreads"", 0); if (batchThreads <= 0) { batchThreads = java.lang.Runtime.getRuntime().availableProcessors(); } return com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(batchThreads, ""Index-Batch"")); }",04418e510645c15f0287a63a6c89a5fcd6d611df,"getBatchIndexExecutor(org.eclipse.jgit.lib.Config,com.google.gerrit.server.git.WorkQueue)","getBatchIndexExecutor(org.eclipse.jgit.lib.Config,com.google.gerrit.server.git.WorkQueue)",5,2,"@com.google.inject.Provides @com.google.inject.Singleton @com.google.gerrit.server.index.IndexExecutor(BATCH) com.google.common.util.concurrent.ListeningExecutorService getBatchIndexExecutor(@com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config, com.google.gerrit.server.git.WorkQueue workQueue) { if ((batchExecutor) != null) { return batchExecutor; } int batchThreads = this.threads; if (batchThreads <= 0) { batchThreads = config.getInt(""index"", null, ""batchThreads"", 0); } if (batchThreads <= 0) { batchThreads = java.lang.Runtime.getRuntime().availableProcessors(); } return com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(batchThreads, ""Index-Batch"")); }",58449dbfe01d0cbd2f7a3857038ae55c1844aab6,"getBatchIndexExecutor(org.eclipse.jgit.lib.Config,com.google.gerrit.server.git.WorkQueue)",125015,193,195
46890,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_CodeMirrorDemo.java,21.0,"private void insertEmptyLines(net.codemirror.lib.CodeMirror cm, int line, int cnt) { com.google.gwt.dom.client.Element div = com.google.gwt.user.client.DOM.createDiv(); div.setClassName(diffTable.style.padding()); div.getStyle().setHeight(cnt, Unit.EM); net.codemirror.lib.Configuration config = net.codemirror.lib.Configuration.create().set(""coverGutter"", true).set(""above"", (line == 0)); cm.addLineWidget((line == 0 ? 0 : line - 1), div, config); }",b27cf083b1a92247c5701b2eeea49800d32e06c7,"private void insertEmptyLines(net.codemirror.lib.CodeMirror cm, int line, int cnt) { addPaddingWidget(cm, diffTable.style.padding(), line, cnt, Unit.EM); }",e379c77c9334c6894f009ed45b295de2ac6494ec,"insertEmptyLines(net.codemirror.lib.CodeMirror,int,int)","insertEmptyLines(net.codemirror.lib.CodeMirror,int,int)",19,20,"private void insertEmptyLines(net.codemirror.lib.CodeMirror cm, int nextLine, int cnt) { addPaddingWidget(cm, diffTable.style.padding(), (nextLine - 1), cnt, Unit.EM); }",b5d8f3699ae6aea3b8fafa73ec20aa8a97c6fede,"insertEmptyLines(net.codemirror.lib.CodeMirror,int,int)",193274,46,50
67678,gerrit-gwtui_src_main_java_com_google_gerrit_client_config_AuthInfo.java,,,,public final Account.FieldName get() { return Account.FieldName.valueOf(getRaw()); },2cccce15ff0cd2cc743515a3a67868f95778c6a8,,get(),9,12,final Account.FieldName get() { return Account.FieldName.valueOf(getRaw()); },233e2b57a972461dd35cde9a9d175098d34b3781,get(),9079,18,17
39530,gerrit-sshd_src_main_java_com_google_gerrit_sshd_SshLog.java,4.0,"private java.lang.String extractWhat(java.lang.String commandName, java.lang.String[] args) { java.lang.String result = commandName; if (""gerrit"".equals(commandName)) { if ((args.length) > 1) result = (""gerrit"" + ""."") + (args[1]); } return result; }",fdedaa7018268bab1a846c52ccfb5fd5e72fdbb7,"void audit(com.google.gerrit.sshd.SshScope.Context ctx, java.lang.Object result, com.google.gerrit.sshd.DispatchCommand cmd) { final java.lang.String sid = extractSessionId(ctx); final long created = extractCreated(ctx); auditService.dispatch(new com.google.gerrit.audit.AuditEvent(sid, extractCurrentUser(ctx), (""ssh:"" + (extractWhat(cmd))), created, extractParameters(cmd), result)); }",6f1ffa77a620a974cfb6ebf624137be3a830253a,"extractWhat(java.lang.String,java.lang.String[])","audit(com.google.gerrit.sshd.SshScope.Context,java.lang.Object,com.google.gerrit.sshd.DispatchCommand)",8,13,"void audit(com.google.gerrit.sshd.SshScope.Context ctx, java.lang.Object result, com.google.gerrit.sshd.DispatchCommand cmd) { final java.lang.String sid = extractSessionId(ctx); final long created = extractCreated(ctx); auditService.dispatch(new com.google.gerrit.audit.SshAuditEvent(sid, extractCurrentUser(ctx), extractWhat(cmd), created, extractParameters(cmd), result)); }",8fd1b252fc72ddbd99a553be4ba0176b3d2eef50,"audit(com.google.gerrit.sshd.SshScope.Context,java.lang.Object,com.google.gerrit.sshd.DispatchCommand)",120753,113,106
39530,gerrit-sshd_src_main_java_com_google_gerrit_sshd_SshLog.java,3.0,"void audit(com.google.gerrit.sshd.SshScope.Context ctx, java.lang.Object result, java.lang.String commandName, java.lang.String[] args) { final java.lang.String sid = extractSessionId(ctx); final long created = extractCreated(ctx); final java.lang.String what = extractWhat(commandName, args); auditService.dispatch(new com.google.gerrit.audit.AuditEvent(sid, extractCurrentUser(ctx), (""ssh:"" + what), created, java.util.Arrays.asList(args), result)); }",d6449628e1218a52e2edd0e99c6ffec281e57c63,"void audit(com.google.gerrit.sshd.SshScope.Context ctx, java.lang.Object result, java.lang.String cmd) { final java.lang.String sid = extractSessionId(ctx); final long created = extractCreated(ctx); auditService.dispatch(new com.google.gerrit.audit.AuditEvent(sid, extractCurrentUser(ctx), (""ssh:"" + cmd), created, null, result)); }",f9660a3a41b78dfb05b7318b42e626dbbea5ef61,"audit(com.google.gerrit.sshd.SshScope.Context,java.lang.Object,java.lang.String,java.lang.String[])","audit(com.google.gerrit.sshd.SshScope.Context,java.lang.Object,java.lang.String)",8,6,"void audit(com.google.gerrit.sshd.SshScope.Context ctx, java.lang.Object result, java.lang.String cmd) { final java.lang.String sid = extractSessionId(ctx); final long created = extractCreated(ctx); auditService.dispatch(new com.google.gerrit.audit.SshAuditEvent(sid, extractCurrentUser(ctx), cmd, created, null, result)); }",6afab3ae0ffb80ea762f703e14a796dd0280130f,"audit(com.google.gerrit.sshd.SshScope.Context,java.lang.Object,java.lang.String)",120754,98,93
59044,gerrit-server_src_main_java_com_google_gerrit_server_PatchLineCommentsUtil.java,1.0,"public java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> publishedByChange(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gwtorm.server.OrmException { if (!(migration.readComments())) { return byCommentStatus(db.patchComments().byChange(notes.getChangeId()), Status.PUBLISHED); } notes.load(); java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments = com.google.common.collect.Lists.newArrayList(); comments.addAll(notes.getBaseComments().values()); comments.addAll(notes.getPatchSetComments().values()); return comments; }",ad36b56bdce6ee5e9d902591b63aa8c099106241,"public java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> publishedByChange(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gwtorm.server.OrmException { if (!(migration.readComments())) { return sort(byCommentStatus(db.patchComments().byChange(notes.getChangeId()), Status.PUBLISHED)); } notes.load(); java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments = com.google.common.collect.Lists.newArrayList(); comments.addAll(notes.getBaseComments().values()); comments.addAll(notes.getPatchSetComments().values()); return sort(comments); }",a7e3dd4ca270da4054ab290e5bf0dda3c8e85b2f,"publishedByChange(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes)","publishedByChange(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes)",12,1,"public java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> publishedByChange(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gwtorm.server.OrmException { if (!(migration.readComments())) { return com.google.gerrit.server.PatchLineCommentsUtil.sort(com.google.gerrit.server.PatchLineCommentsUtil.byCommentStatus(db.patchComments().byChange(notes.getChangeId()), Status.PUBLISHED)); } notes.load(); java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments = com.google.common.collect.Lists.newArrayList(); comments.addAll(notes.getBaseComments().values()); comments.addAll(notes.getPatchSetComments().values()); return com.google.gerrit.server.PatchLineCommentsUtil.sort(comments); }",15c07a065e767755ffd1c34e029a9c8a891ae204,"publishedByChange(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes)",98145,184,226
37870,gerrit-server_src_main_java_com_google_gerrit_server_project_ChangeControl.java,32.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.common.data.SubmitTypeRecord logActionRuleError(java.lang.String err) { com.google.gerrit.server.project.ChangeControl.log.error(err); return actionRuleError(""Error evaluating project action rules, check server log""); }",338d1ddc70fa8f418ab27151f65d15405020823e,,logActionRuleError(java.lang.String),7,3,"private com.google.gerrit.common.data.SubmitTypeRecord logTypeRuleError(java.lang.String err) { com.google.gerrit.server.project.ChangeControl.log.error(err); return typeRuleError(""Error evaluating project type rules, check server log""); }",28a00733976df17328ca5a82357b0ab1592ce421,logTypeRuleError(java.lang.String),23827,64,64
54650,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_PluginInstallCommand.java,0.0,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { if (com.google.common.base.Strings.isNullOrEmpty(source)) { throw die(""Argument \""-|URL\"" is required""); } if ((com.google.common.base.Strings.isNullOrEmpty(name)) && (""-"".equalsIgnoreCase(source))) { throw die(""--name required when source is stdin""); } if (com.google.common.base.Strings.isNullOrEmpty(name)) { int s = source.lastIndexOf('/'); if (0 <= s) { name = source.substring((s + 1)); } else { name = source; } } java.io.InputStream data; if (""-"".equalsIgnoreCase(source)) { data = in; } else if ((new java.io.File(source).isFile()) && (source.equals(new java.io.File(source).getAbsolutePath()))) { try { data = new java.io.FileInputStream(new java.io.File(source)); } catch (java.io.FileNotFoundException e) { throw die((""cannot read "" + (source))); } } else { try { data = new java.net.URL(source).openStream(); } catch (java.net.MalformedURLException e) { throw die((""invalid url "" + (source))); } catch (java.io.IOException e) { throw die((""cannot read "" + (source))); } } try { loader.installPluginFromStream(name, data); } catch (java.io.IOException e) { throw die(""cannot install plugin""); } catch (com.google.gerrit.server.plugins.PluginInstallException e) { e.printStackTrace(stderr); java.lang.String msg = java.lang.String.format(""Plugin failed to install. Cause: %s"", e.getMessage()); throw die(msg); } finally { try { data.close(); } catch (java.io.IOException err) { } } }",4bd9d86eb5eb4dc4bed3c66a9540ee33ad4ea4e4,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { if (!(loader.isRemoteInstallEnabled())) { throw die(""remote installation is disabled""); } if (com.google.common.base.Strings.isNullOrEmpty(source)) { throw die(""Argument \""-|URL\"" is required""); } if ((com.google.common.base.Strings.isNullOrEmpty(name)) && (""-"".equalsIgnoreCase(source))) { throw die(""--name required when source is stdin""); } if (com.google.common.base.Strings.isNullOrEmpty(name)) { int s = source.lastIndexOf('/'); if (0 <= s) { name = source.substring((s + 1)); } else { name = source; } } java.io.InputStream data; if (""-"".equalsIgnoreCase(source)) { data = in; } else if ((new java.io.File(source).isFile()) && (source.equals(new java.io.File(source).getAbsolutePath()))) { try { data = new java.io.FileInputStream(new java.io.File(source)); } catch (java.io.FileNotFoundException e) { throw die((""cannot read "" + (source))); } } else { try { data = new java.net.URL(source).openStream(); } catch (java.net.MalformedURLException e) { throw die((""invalid url "" + (source))); } catch (java.io.IOException e) { throw die((""cannot read "" + (source))); } } try { loader.installPluginFromStream(name, data); } catch (java.io.IOException e) { throw die(""cannot install plugin""); } catch (com.google.gerrit.server.plugins.PluginInstallException e) { e.printStackTrace(stderr); java.lang.String msg = java.lang.String.format(""Plugin failed to install. Cause: %s"", e.getMessage()); throw die(msg); } finally { try { data.close(); } catch (java.io.IOException err) { } } }",03ac3ae520442def6827573dc62adcfc58ce46bb,run(),run(),4,0,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { if (!(loader.isRemoteAdminEnabled())) { throw die(""remote installation is disabled""); } if (com.google.common.base.Strings.isNullOrEmpty(source)) { throw die(""Argument \""-|URL\"" is required""); } if ((com.google.common.base.Strings.isNullOrEmpty(name)) && (""-"".equalsIgnoreCase(source))) { throw die(""--name required when source is stdin""); } if (com.google.common.base.Strings.isNullOrEmpty(name)) { int s = source.lastIndexOf('/'); if (0 <= s) { name = source.substring((s + 1)); } else { name = source; } } java.io.InputStream data; if (""-"".equalsIgnoreCase(source)) { data = in; } else if ((new java.io.File(source).isFile()) && (source.equals(new java.io.File(source).getAbsolutePath()))) { try { data = new java.io.FileInputStream(new java.io.File(source)); } catch (java.io.FileNotFoundException e) { throw die((""cannot read "" + (source))); } } else { try { data = new java.net.URL(source).openStream(); } catch (java.net.MalformedURLException e) { throw die((""invalid url "" + (source))); } catch (java.io.IOException e) { throw die((""cannot read "" + (source))); } } try { loader.installPluginFromStream(name, data); } catch (java.io.IOException e) { throw die(""cannot install plugin""); } catch (com.google.gerrit.server.plugins.PluginInstallException e) { e.printStackTrace(stderr); java.lang.String msg = java.lang.String.format(""Plugin failed to install. Cause: %s"", e.getMessage()); throw die(msg); } finally { try { data.close(); } catch (java.io.IOException err) { } } }",03d2e6c13cb82449cf96302b04fbc03125d1d748,run(),124045,449,449
90738,gerrit-server_src_test_java_com_google_gerrit_server_mail_receive_data_QuotedPrintableHeaderMessage.java,,,,"@java.lang.Override public com.google.gerrit.server.mail.receive.MailMessage expectedMailMessage() { java.lang.System.out.println(""\ud83d\ude1b test""); com.google.gerrit.server.mail.receive.MailMessage.Builder expect = com.google.gerrit.server.mail.receive.MailMessage.builder(); expect.id(""<001a114da7ae26e2eb053fe0c29c@google.com>"").from(new com.google.gerrit.server.mail.Address(""Jonathan Nieder (Gerrit)"", ""noreply-gerritcodereview-CtTy0igsBrnvL7dKoWEIEg@google.com"")).addTo(new com.google.gerrit.server.mail.Address(""ekempin"", ""ekempin@google.com"")).textContent(com.google.gerrit.server.mail.receive.data.QuotedPrintableHeaderMessage.textContent).subject(""âme vulgaire"").dateReceived(new org.joda.time.DateTime(2016, 10, 25, 9, 11, 35, 0)); return expect.build(); }",fc91a0e8d86890d44a373dbaaf6a3a497aadd398,,expectedMailMessage(),9,1,"@java.lang.Override public com.google.gerrit.server.mail.receive.MailMessage expectedMailMessage() { java.lang.System.out.println(""\ud83d\ude1b test""); com.google.gerrit.server.mail.receive.MailMessage.Builder expect = com.google.gerrit.server.mail.receive.MailMessage.builder(); expect.id(""<001a114da7ae26e2eb053fe0c29c@google.com>"").from(new com.google.gerrit.server.mail.Address(""Jonathan Nieder (Gerrit)"", ""noreply-gerritcodereview-CtTy0igsBrnvL7dKoWEIEg@google.com"")).addTo(new com.google.gerrit.server.mail.Address(""ekempin"", ""ekempin@google.com"")).textContent(com.google.gerrit.server.mail.receive.data.QuotedPrintableHeaderMessage.textContent).subject(""âme vulgaire"").dateReceived(new org.joda.time.DateTime(2016, 10, 25, 9, 11, 35, 0, org.joda.time.DateTimeZone.UTC)); return expect.build(); }",a676841d27823e899eeb9d9e857102ed50b88458,expectedMailMessage(),5697,262,274
53021,gerrit-server_src_test_java_com_google_gerrit_server_notedb_ChangeNotesTest.java,15.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void multipleReviewers() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(5); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, c.getOwner()); update.putReviewer(new com.google.gerrit.reviewdb.client.Account.Id(1234), ReviewerState.REVIEWER); update.putReviewer(new com.google.gerrit.reviewdb.client.Account.Id(2345), ReviewerState.REVIEWER); commit(update); com.google.gerrit.server.notedb.ChangeNotes notes = new com.google.gerrit.server.notedb.ChangeNotes(repo, c); assertEquals(com.google.common.collect.ImmutableMap.of(new com.google.gerrit.reviewdb.client.Account.Id(1234), ReviewerState.REVIEWER, new com.google.gerrit.reviewdb.client.Account.Id(2345), ReviewerState.REVIEWER), notes.getReviewers()); }",c372db729960555a43d6ca775c6d7fec614ff7aa,,multipleReviewers(),11,0,"@org.junit.Test public void multipleReviewers() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, com.google.gerrit.server.notedb.ChangeNotesTest.CHANGE_OWNER); update.putReviewer(com.google.gerrit.server.notedb.ChangeNotesTest.CHANGE_OWNER.getId(), ReviewerState.REVIEWER); update.putReviewer(com.google.gerrit.server.notedb.ChangeNotesTest.OTHER_ACCOUNT.getId(), ReviewerState.REVIEWER); commit(update); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); assertEquals(com.google.common.collect.ImmutableSetMultimap.of(ReviewerState.REVIEWER, new com.google.gerrit.reviewdb.client.Account.Id(1), ReviewerState.REVIEWER, new com.google.gerrit.reviewdb.client.Account.Id(2)), notes.getReviewers()); }",6958d86a16e8f1913f829b8f6f79c5aaa9b414ee,multipleReviewers(),23468,250,252
116853,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,86.0,"private void setChangeId(int id) { changeId = new com.google.gerrit.reviewdb.client.Change.Id(id); ins = changeInserterFactory.create(changeId, commit, refName).setTopic(magicBranch.topic).setPrivate(magicBranch.isPrivate).setWorkInProgress(magicBranch.workInProgress).setValidate(false); if (magicBranch.draft) { ins.setDraft(magicBranch.draft); } else if (magicBranch.merged) { ins.setStatus(Change.Status.MERGED); } cmd = new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), commit, ins.getPatchSetId().toRefName()); if ((rp.getPushCertificate()) != null) { ins.setPushCertificate(rp.getPushCertificate().toTextWithSignature()); } }",ca03afe979f0ff5ff29b27a34b6619028d9bb7a9,"private void setChangeId(int id) { changeId = new com.google.gerrit.reviewdb.client.Change.Id(id); ins = changeInserterFactory.create(changeId, commit, refName).setTopic(magicBranch.topic).setPrivate(((receiveConfig.privateByDefault) || (magicBranch.isPrivate))).setWorkInProgress(magicBranch.workInProgress).setValidate(false); if (magicBranch.draft) { ins.setDraft(magicBranch.draft); } else if (magicBranch.merged) { ins.setStatus(Change.Status.MERGED); } cmd = new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), commit, ins.getPatchSetId().toRefName()); if ((rp.getPushCertificate()) != null) { ins.setPushCertificate(rp.getPushCertificate().toTextWithSignature()); } }",64699cb912f82e8a9b2411aeb0a93c628815aa01,setChangeId(int),setChangeId(int),2,86,"private void setChangeId(int id) { changeId = new com.google.gerrit.reviewdb.client.Change.Id(id); ins = changeInserterFactory.create(changeId, commit, refName).setTopic(magicBranch.topic).setPrivate(((magicBranch.isPrivate) || ((receiveConfig.privateByDefault) && (!(magicBranch.removePrivate))))).setWorkInProgress(magicBranch.workInProgress).setValidate(false); if (magicBranch.draft) { ins.setDraft(magicBranch.draft); } else if (magicBranch.merged) { ins.setStatus(Change.Status.MERGED); } cmd = new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), commit, ins.getPatchSetId().toRefName()); if ((rp.getPushCertificate()) != null) { ins.setPushCertificate(rp.getPushCertificate().toTextWithSignature()); } }",b0c5525aebd6858b96eecf9a7fed571170b280f0,setChangeId(int),49563,211,220
57693,src_main_java_com_googlesource_gerrit_plugins_quota_Publisher.java,,,,@java.lang.Override public com.google.gerrit.extensions.events.UsageDataPublishedListener.MetaData getMetaData() { return com.googlesource.gerrit.plugins.quota.Publisher.KIND; },b7f647d20562a3499feaef64d6f5ec50da04cb6d,,getMetaData(),9,3,@java.lang.Override public com.google.gerrit.extensions.events.UsageDataPublishedListener.MetaData getMetaData() { return com.googlesource.gerrit.plugins.quota.Publisher.REPO_SIZE; },a9b763af46754b0aa72ab63fb70c1aae5e17fd82,getMetaData(),185799,47,51
25644,src_test_java_com_google_gwtorm_schema_sql_DialectH2Test.java,4.0,"public void testListTables() throws com.google.gwtorm.client.OrmException, java.sql.SQLException { assertTrue(dialect.listTables(db).isEmpty()); execute(""CREATE SEQUENCE cnt""); execute(""CREATE TABLE foo (cnt INT)""); java.util.Set<java.lang.String> s = dialect.listTables(db); assertEquals(1, s.size()); assertFalse(s.contains(""cnt"")); assertTrue(s.contains(""foo"")); }",9e44701dfbf89057d47f9f9cb78cc67371471758,"@org.junit.Test public void testListTables() throws com.google.gwtorm.client.OrmException, java.sql.SQLException { assertTrue(dialect.listTables(db).isEmpty()); execute(""CREATE SEQUENCE cnt""); execute(""CREATE TABLE foo (cnt INT)""); java.util.Set<java.lang.String> s = dialect.listTables(db); assertEquals(1, s.size()); assertFalse(s.contains(""cnt"")); assertTrue(s.contains(""foo"")); }",b951cb8aa5a98f743ea6f527b57906024a9911df,testListTables(),testListTables(),4,4,"@org.junit.Test public void testListTables() throws com.google.gwtorm.server.OrmException, java.sql.SQLException { assertTrue(dialect.listTables(db).isEmpty()); execute(""CREATE SEQUENCE cnt""); execute(""CREATE TABLE foo (cnt INT)""); java.util.Set<java.lang.String> s = dialect.listTables(db); assertEquals(1, s.size()); assertFalse(s.contains(""cnt"")); assertTrue(s.contains(""foo"")); }",7fd934346a28c7e89536595d00f879d838bfe852,testListTables(),54647,108,108
61630,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeOp.java,7.0,"private void setMerged(com.google.gerrit.reviewdb.client.Change c, com.google.gerrit.reviewdb.client.ChangeMessage msg) throws com.google.gwtorm.server.OrmException, java.io.IOException { logDebug(""Setting change {} merged"", c.getId()); com.google.gerrit.server.notedb.ChangeUpdate update = null; try { db.changes().beginTransaction(c.getId()); com.google.gerrit.server.git.CodeReviewCommit commit = commits.get(c.getId()); com.google.gerrit.reviewdb.client.PatchSet.Id merged = commit.change().currentPatchSetId(); c = setMergedPatchSet(c.getId(), merged); com.google.gerrit.reviewdb.client.PatchSetApproval submitter = approvalsUtil.getSubmitter(db, commit.notes(), merged); com.google.gerrit.server.project.ChangeControl control = commit.getControl(); update = updateFactory.create(control, c.getLastUpdatedOn()); if (msg != null) { cmUtil.addChangeMessage(db, update, msg); } db.commit(); sendMergedEmail(c, submitter); indexer.index(db, c); if (submitter != null) { try { hooks.doChangeMergedHook(c, accountCache.get(submitter.getAccountId()).getAccount(), db.patchSets().get(merged), db); } catch (com.google.gwtorm.server.OrmException ex) { logError((""Cannot run hook for submitted patch set "" + (c.getId())), ex); } } } finally { db.rollback(); } indexer.index(db, c); update.commit(); }",89d92b272f058d4c733975e958907515c33652a3,"private void setMerged(com.google.gerrit.reviewdb.client.Change c, com.google.gerrit.reviewdb.client.ChangeMessage msg) throws com.google.gwtorm.server.OrmException, java.io.IOException { logDebug(""Setting change {} merged"", c.getId()); com.google.gerrit.server.notedb.ChangeUpdate update = null; com.google.gerrit.reviewdb.client.PatchSetApproval submitter; com.google.gerrit.reviewdb.client.PatchSet merged; try { db.changes().beginTransaction(c.getId()); com.google.gerrit.server.git.CodeReviewCommit commit = commits.get(c.getId()); com.google.gerrit.reviewdb.client.PatchSet.Id mergedId = commit.change().currentPatchSetId(); merged = db.patchSets().get(mergedId); c = setMergedPatchSet(c.getId(), mergedId); submitter = approvalsUtil.getSubmitter(db, commit.notes(), mergedId); com.google.gerrit.server.project.ChangeControl control = commit.getControl(); update = updateFactory.create(control, c.getLastUpdatedOn()); if (msg != null) { cmUtil.addChangeMessage(db, update, msg); } db.commit(); } finally { db.rollback(); } sendMergedEmail(c, submitter); indexer.index(db, c); if (submitter != null) { try { hooks.doChangeMergedHook(c, accountCache.get(submitter.getAccountId()).getAccount(), merged, db); } catch (com.google.gwtorm.server.OrmException ex) { logError((""Cannot run hook for submitted patch set "" + (c.getId())), ex); } } update.commit(); }",de7deae826c05af72f848ff6c94844cb9ed3762b,"setMerged(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.ChangeMessage)","setMerged(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.ChangeMessage)",2,7,"private void setMerged(com.google.gerrit.reviewdb.client.Change c, com.google.gerrit.reviewdb.client.ChangeMessage msg) throws com.google.gwtorm.server.OrmException, java.io.IOException { logDebug(""Setting change {} merged"", c.getId()); com.google.gerrit.server.notedb.ChangeUpdate update = null; com.google.gerrit.reviewdb.client.PatchSetApproval submitter; com.google.gerrit.reviewdb.client.PatchSet merged; try { db.changes().beginTransaction(c.getId()); com.google.gerrit.server.git.CodeReviewCommit commit = commits.get(c.getId()); com.google.gerrit.reviewdb.client.PatchSet.Id mergedId = commit.change().currentPatchSetId(); merged = db.patchSets().get(mergedId); c = setMergedPatchSet(c.getId(), mergedId); submitter = approvalsUtil.getSubmitter(db, commit.notes(), mergedId); com.google.gerrit.server.project.ChangeControl control = commit.getControl(); update = updateFactory.create(control, c.getLastUpdatedOn()); if (msg != null) { cmUtil.addChangeMessage(db, update, msg); } db.commit(); } finally { db.rollback(); } update.commit(); sendMergedEmail(c, submitter); indexer.index(db, c); if (submitter != null) { try { hooks.doChangeMergedHook(c, accountCache.get(submitter.getAccountId()).getAccount(), merged, db); } catch (com.google.gwtorm.server.OrmException ex) { logError((""Cannot run hook for submitted patch set "" + (c.getId())), ex); } } }",05f85d1690d928d4deb8f896cbd68832abf5c42a,"setMerged(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.ChangeMessage)",18030,403,403
129919,gerrit-server_src_main_java_com_google_gerrit_server_DynamicOptions.java,0.0,"@java.lang.SuppressWarnings(""unchecked"") public com.google.gerrit.server.DynamicOptions.DynamicBean getDynamicBean(java.lang.Object bean, com.google.gerrit.server.DynamicOptions.DynamicBean dynamicBean) { java.lang.ClassLoader coreCl = getClass().getClassLoader(); java.lang.ClassLoader beanCl = bean.getClass().getClassLoader(); java.lang.ClassLoader loader = beanCl; if (beanCl != coreCl) { java.lang.ClassLoader dynamicBeanCl = dynamicBean.getClass().getClassLoader(); if (beanCl != dynamicBeanCl) { loader = new com.google.gerrit.server.plugins.DelegatingClassLoader(beanCl, dynamicBeanCl); } } java.lang.String className = null; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ClassNameProvider) { className = ((com.google.gerrit.server.DynamicOptions.ClassNameProvider) (dynamicBean)).getClassName(); } else if (loader != beanCl) { className = dynamicBean.getClass().getCanonicalName(); } if (className != null) { com.google.gerrit.server.List<java.lang.Module> modules = new java.util.ArrayList(); try { if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) { for (java.lang.String moduleName : ((com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) (dynamicBean)).getModulesClassNames()) { try { java.lang.Class<?> moduleClass = loader.loadClass(moduleName); modules.add(((java.lang.Module) (moduleClass.getConstructor().newInstance()))); } catch (java.lang.NoSuchMethodException | java.lang.InstantiationException | java.lang.IllegalAccessException | java.lang.reflect.InvocationTargetException e) { } } } return injector.createChildInjector(modules).getInstance(((java.lang.Class<com.google.gerrit.server.DynamicOptions.DynamicBean>) (loader.loadClass(className)))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.RuntimeException(e); } } return dynamicBean; }",dd92ca6b387d8b45902134bec0f465c581a64dff,"@java.lang.SuppressWarnings(""unchecked"") public com.google.gerrit.server.DynamicOptions.DynamicBean getDynamicBean(java.lang.Object bean, com.google.gerrit.server.DynamicOptions.DynamicBean dynamicBean) { java.lang.ClassLoader coreCl = getClass().getClassLoader(); java.lang.ClassLoader beanCl = bean.getClass().getClassLoader(); java.lang.ClassLoader loader = beanCl; if (beanCl != coreCl) { java.lang.ClassLoader dynamicBeanCl = dynamicBean.getClass().getClassLoader(); if (beanCl != dynamicBeanCl) { loader = new com.google.gerrit.server.plugins.DelegatingClassLoader(beanCl, dynamicBeanCl); } } java.lang.String className = null; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ClassNameProvider) { className = ((com.google.gerrit.server.DynamicOptions.ClassNameProvider) (dynamicBean)).getClassName(); } else if (loader != beanCl) { className = dynamicBean.getClass().getCanonicalName(); } if (className != null) { try { com.google.gerrit.server.List<java.lang.Module> modules = new java.util.ArrayList(); com.google.inject.Injector modulesInjector = injector; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) { modulesInjector = injector.createChildInjector(); for (java.lang.String moduleName : ((com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) (dynamicBean)).getModulesClassNames()) { java.lang.Class<java.lang.Module> mClass = ((java.lang.Class<java.lang.Module>) (loader.loadClass(moduleName))); modules.add(modulesInjector.getInstance(mClass)); } } return modulesInjector.createChildInjector(modules).getInstance(((java.lang.Class<com.google.gerrit.server.DynamicOptions.DynamicBean>) (loader.loadClass(className)))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.RuntimeException(e); } } return dynamicBean; }",2f25ef782860bf47600f0d10b4e15d6ea603af9f,"getDynamicBean(java.lang.Object,com.google.gerrit.server.DynamicOptions$DynamicBean)","getDynamicBean(java.lang.Object,com.google.gerrit.server.DynamicOptions$DynamicBean)",2,0,"@java.lang.SuppressWarnings(""unchecked"") public com.google.gerrit.server.DynamicOptions.DynamicBean getDynamicBean(java.lang.Object bean, com.google.gerrit.server.DynamicOptions.DynamicBean dynamicBean) { java.lang.ClassLoader coreCl = getClass().getClassLoader(); java.lang.ClassLoader beanCl = bean.getClass().getClassLoader(); java.lang.ClassLoader loader = beanCl; if (beanCl != coreCl) { java.lang.ClassLoader dynamicBeanCl = dynamicBean.getClass().getClassLoader(); if (beanCl != dynamicBeanCl) { loader = new com.google.gerrit.server.plugins.DelegatingClassLoader(beanCl, dynamicBeanCl); } } java.lang.String className = null; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ClassNameProvider) { className = ((com.google.gerrit.server.DynamicOptions.ClassNameProvider) (dynamicBean)).getClassName(); } else if (loader != beanCl) { className = dynamicBean.getClass().getCanonicalName(); } if (className != null) { try { java.util.List<java.lang.Module> modules = new java.util.ArrayList<>(); com.google.inject.Injector modulesInjector = injector; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) { modulesInjector = injector.createChildInjector(); for (java.lang.String moduleName : ((com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) (dynamicBean)).getModulesClassNames()) { java.lang.Class<java.lang.Module> mClass = ((java.lang.Class<java.lang.Module>) (loader.loadClass(moduleName))); modules.add(modulesInjector.getInstance(mClass)); } } return modulesInjector.createChildInjector(modules).getInstance(((java.lang.Class<com.google.gerrit.server.DynamicOptions.DynamicBean>) (loader.loadClass(className)))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.RuntimeException(e); } } return dynamicBean; }",b9e061c597106db80f31e2c62305bc32c6a5ac80,"getDynamicBean(java.lang.Object,com.google.gerrit.server.DynamicOptions$DynamicBean)",144838,467,462
38240,gerrit-server_src_main_java_com_google_gerrit_server_patch_IntraLineDiffKey.java,0.0,@java.lang.Override public boolean equals(final java.lang.Object o) { if (o instanceof com.google.gerrit.server.patch.IntraLineDiffKey) { final com.google.gerrit.server.patch.IntraLineDiffKey k = ((com.google.gerrit.server.patch.IntraLineDiffKey) (o)); return (aId.equals(k.aId)) && (bId.equals(k.bId)); } return false; },039af2d998530a74bf0e78e00e7d59c4eaa035a4,@java.lang.Override public boolean equals(final java.lang.Object o) { if (o instanceof com.google.gerrit.server.patch.IntraLineDiffKey) { final com.google.gerrit.server.patch.IntraLineDiffKey k = ((com.google.gerrit.server.patch.IntraLineDiffKey) (o)); return ((aId.equals(k.aId)) && (bId.equals(k.bId))) && (ignoreWhitespace.equals(k.ignoreWhitespace)); } return false; },10793de2ce695259aab98e25d62df135fd35ecb9,equals(java.lang.Object),equals(java.lang.Object),3,0,@java.lang.Override public boolean equals(final java.lang.Object o) { if (o instanceof com.google.gerrit.server.patch.IntraLineDiffKey) { final com.google.gerrit.server.patch.IntraLineDiffKey k = ((com.google.gerrit.server.patch.IntraLineDiffKey) (o)); return ((aId.equals(k.aId)) && (bId.equals(k.bId))) && ((ignoreWhitespace) == (k.ignoreWhitespace)); } return false; },0e7b98eae23f1f8dcb96ec640a7eee99778633a1,equals(java.lang.Object),141857,125,126
56097,gerrit-server_src_main_java_com_google_gerrit_server_plugins_AutoRegisterModules.java,3.0,"private void scan() throws com.google.gerrit.server.plugins.InvalidPluginException { java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Iterable<com.google.gerrit.server.plugins.JarScanner.ExtensionMetaData>> extensions = com.google.gerrit.server.plugins.JarScanner.scan(jarFile, pluginName, java.util.Arrays.asList(com.google.gerrit.extensions.annotations.Export.class, com.google.gerrit.extensions.annotations.Listen.class)); for (com.google.gerrit.server.plugins.JarScanner.ExtensionMetaData export : extensions.get(com.google.gerrit.extensions.annotations.Export.class)) { export(export); } for (com.google.gerrit.server.plugins.JarScanner.ExtensionMetaData listener : extensions.get(com.google.gerrit.extensions.annotations.Listen.class)) { listen(listener); } }",b541e0b2f93939f1402cb122d492db8b44678abd,"private void scan() throws com.google.gerrit.server.plugins.InvalidPluginException { java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Iterable<com.google.gerrit.server.plugins.JarScanner.ExtensionMetaData>> extensions = scanner.scan(pluginName, java.util.Arrays.asList(com.google.gerrit.extensions.annotations.Export.class, com.google.gerrit.extensions.annotations.Listen.class)); for (com.google.gerrit.server.plugins.JarScanner.ExtensionMetaData export : extensions.get(com.google.gerrit.extensions.annotations.Export.class)) { export(export); } for (com.google.gerrit.server.plugins.JarScanner.ExtensionMetaData listener : extensions.get(com.google.gerrit.extensions.annotations.Listen.class)) { listen(listener); } }",a49378ee0432611fe25a762e52875bf8c27e2b82,scan(),scan(),21,3,"private void scan() throws com.google.gerrit.server.plugins.InvalidPluginException { java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Iterable<com.google.gerrit.server.plugins.PluginContentScanner.ExtensionMetaData>> extensions = scanner.scan(pluginName, java.util.Arrays.asList(com.google.gerrit.extensions.annotations.Export.class, com.google.gerrit.extensions.annotations.Listen.class)); for (com.google.gerrit.server.plugins.PluginContentScanner.ExtensionMetaData export : extensions.get(com.google.gerrit.extensions.annotations.Export.class)) { export(export); } for (com.google.gerrit.server.plugins.PluginContentScanner.ExtensionMetaData listener : extensions.get(com.google.gerrit.extensions.annotations.Listen.class)) { listen(listener); } }",ad97a34dd31bd696420b2c9849dfd7af5c0f8603,scan(),63377,205,208
51670,gerrit-server_src_main_java_com_google_gerrit_server_api_projects_ProjectApiImpl.java,,,,"@java.lang.Override public void createBranch(com.google.gerrit.extensions.api.projects.BranchInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { createBranchFactory.create(in.ref).apply(project, in); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot create branch"", e); } }",d8f70c95d416096d20c478d6c528f08f02b15d95,,createBranch(com.google.gerrit.extensions.api.projects.BranchInput),5,1,"@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchApi branch(java.lang.String ref) { return branchApi.create(project, ref); }",b07d8ff22039d5ab50fd2a2ce5c0ca0118e3913e,branch(java.lang.String),211591,98,43
131551,gerrit-server_src_main_java_com_google_gerrit_server_project_RefControl.java,39.0,"private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case UPDATE_BY_SUBMIT : return projectControl.controlForRef((""refs/for/"" + (getRefName()))).canSubmit(true); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().isUseSignedOffBy())); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",2ec6f87789359b21e3b9e041951c8e93ebba540f,"private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case UPDATE_BY_SUBMIT : return projectControl.controlForRef((""refs/for/"" + (getRefName()))).canSubmit(true); case READ_PRIVATE_CHANGES : return canViewPrivateChanges(); case READ_ACCESS : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_ACCESS : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().isUseSignedOffBy())); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",244fe81611fe981ee0ecff5cd0cd1920d24bd713,can(com.google.gerrit.server.permissions.RefPermission),can(com.google.gerrit.server.permissions.RefPermission),4,39,"private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case UPDATE_BY_SUBMIT : return projectControl.controlForRef((""refs/for/"" + (getRefName()))).canSubmit(true); case READ_PRIVATE_CHANGES : return canViewPrivateChanges(); case READ_CONFIG : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().isUseSignedOffBy())); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + "" unsupported"")); }",46e38c78be766eccb2df16b85ab387e2dd559f7d,can(com.google.gerrit.server.permissions.RefPermission),45300,330,330
48252,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_NavLinks2.java,,,,"@java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.diff.FileInfo> result) { result.copyKeysIntoChildren(""path""); files = result.values(); int index = 0; for (int i = 0; i < (result.size()); i++) { if (path.equals(files.get(i).path())) { index = i; } } setupNav(com.google.gerrit.client.diff.NavLinks2.Nav.PREV, (index == 0 ? null : files.get((index - 1)))); setupNav(com.google.gerrit.client.diff.NavLinks2.Nav.NEXT, (index == ((files.length()) - 1) ? null : files.get((index + 1)))); }",ba2879bf0d59dcbbc0b94f90f116f82f9b64e4c4,,onSuccess(com.google.gerrit.client.rpc.NativeMap),9,2,"@java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.diff.FileInfo> result) { result.copyKeysIntoChildren(""path""); com.google.gwt.core.client.JsArray<com.google.gerrit.client.diff.FileInfo> files = result.values(); com.google.gerrit.client.diff.FileInfo.sortFileInfoByPath(files); int index = 0; for (int i = 0; i < (files.length()); i++) { if (path.equals(files.get(i).path())) { index = i; } } setupNav('[', PatchUtil.C.previousFileHelp(), (index == 0 ? null : files.get((index - 1)))); setupNav(']', PatchUtil.C.nextFileHelp(), (index == ((files.length()) - 1) ? null : files.get((index + 1)))); }",401a9f0963f564cda7f6d3f8f6102005cff195a5,onSuccess(com.google.gerrit.client.rpc.NativeMap),192991,181,217
140535,java_com_google_gerrit_server_events_EventFactory.java,6.0,"public void addPatchSetFileNames(com.google.gerrit.server.data.PatchSetAttribute patchSetAttribute, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet) { try { com.google.gerrit.server.patch.PatchList patchList = patchListCache.get(change, patchSet); for (com.google.gerrit.server.patch.PatchListEntry patch : patchList.getPatches()) { if ((patchSetAttribute.files) == null) { patchSetAttribute.files = new java.util.ArrayList(); } com.google.gerrit.server.data.PatchAttribute p = new com.google.gerrit.server.data.PatchAttribute(); p.file = patch.getNewName(); p.fileOld = patch.getOldName(); p.type = patch.getChangeType(); p.deletions -= patch.getDeletions(); p.insertions = patch.getInsertions(); patchSetAttribute.files.add(p); } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.events.EventFactory.log.warn((""Cannot get patch list: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { com.google.gerrit.server.events.EventFactory.log.warn(""Cannot get patch list"", e); } }",184c02b3331902ce14988b36c509ce6bddf8f036,"public void addPatchSetFileNames(com.google.gerrit.server.data.PatchSetAttribute patchSetAttribute, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet) { try { com.google.gerrit.server.patchlib.PatchList patchList = patchListCache.get(change, patchSet); for (com.google.gerrit.server.patchlib.PatchListEntry patch : patchList.getPatches()) { if ((patchSetAttribute.files) == null) { patchSetAttribute.files = new java.util.ArrayList(); } com.google.gerrit.server.data.PatchAttribute p = new com.google.gerrit.server.data.PatchAttribute(); p.file = patch.getNewName(); p.fileOld = patch.getOldName(); p.type = patch.getChangeType(); p.deletions -= patch.getDeletions(); p.insertions = patch.getInsertions(); patchSetAttribute.files.add(p); } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.events.EventFactory.log.warn((""Cannot get patch list: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patchlib.PatchListNotAvailableException e) { com.google.gerrit.server.events.EventFactory.log.warn(""Cannot get patch list"", e); } }",d24dbdf470f6c3f86cf4e22616cfa5ce7dc2b9e5,"addPatchSetFileNames(com.google.gerrit.server.data.PatchSetAttribute,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet)","addPatchSetFileNames(com.google.gerrit.server.data.PatchSetAttribute,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet)",11,6,"public void addPatchSetFileNames(com.google.gerrit.server.data.PatchSetAttribute patchSetAttribute, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet) { try { com.google.gerrit.server.diff.PatchList patchList = patchListCache.get(change, patchSet); for (com.google.gerrit.server.diff.PatchListEntry patch : patchList.getPatches()) { if ((patchSetAttribute.files) == null) { patchSetAttribute.files = new java.util.ArrayList(); } com.google.gerrit.server.data.PatchAttribute p = new com.google.gerrit.server.data.PatchAttribute(); p.file = patch.getNewName(); p.fileOld = patch.getOldName(); p.type = patch.getChangeType(); p.deletions -= patch.getDeletions(); p.insertions = patch.getInsertions(); patchSetAttribute.files.add(p); } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.events.EventFactory.log.warn((""Cannot get patch list: "" + (e.getMessage()))); } catch (com.google.gerrit.server.diff.PatchListNotAvailableException e) { com.google.gerrit.server.events.EventFactory.log.warn(""Cannot get patch list"", e); } }",f105a9729b751a2bad67fd3c465573059317e24e,"addPatchSetFileNames(com.google.gerrit.server.data.PatchSetAttribute,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet)",15618,342,339
34880,gerrit-server_src_main_java_com_google_gerrit_server_git_NotifyConfig.java,,,,public void addEmail(com.google.gerrit.reviewdb.client.AccountGroup.UUID group) { groups.add(group); },c389011cfd9a53a68f2fd9db288dd59bb6238c38,,addEmail(com.google.gerrit.reviewdb.client.AccountGroup$UUID),11,6,public void addEmail(com.google.gerrit.common.data.GroupReference group) { groups.add(group); },746ed18d11cc5ee1f18eea7e226d96e248ff7b88,addEmail(com.google.gerrit.common.data.GroupReference),95432,32,28
68604,gerrit-cache-h2_src_main_java_com_google_gerrit_server_cache_h2_H2CacheImpl.java,44.0,"@java.lang.Override public void funnel(K from, com.google.common.hash.PrimitiveSink into) { try { java.io.ObjectOutputStream ser = new java.io.ObjectOutputStream(new com.google.gerrit.server.cache.h2.H2CacheImpl.SinkOutputStream(into)); try { ser.writeObject(from); ser.flush(); } finally { ser.close(); } } catch (java.io.IOException err) { throw new java.lang.RuntimeException(""Cannot hash as Serializable"", err); } }",22ed579db8b6acd54549705f81e8714914342d0f,"@java.lang.Override public void funnel(K from, com.google.common.hash.PrimitiveSink into) { try { try (java.io.ObjectOutputStream ser = new java.io.ObjectOutputStream(new com.google.gerrit.server.cache.h2.H2CacheImpl.SinkOutputStream(into))) { ser.writeObject(from); ser.flush(); } } catch (java.io.IOException err) { throw new java.lang.RuntimeException(""Cannot hash as Serializable"", err); } }",2faac0fc8ff25e9744e90c16201b4b258f6be1ca,"funnel(java.lang.Object,com.google.common.hash.PrimitiveSink)","funnel(java.lang.Object,com.google.common.hash.PrimitiveSink)",5,44,"@java.lang.Override public void funnel(K from, com.google.common.hash.PrimitiveSink into) { try (java.io.ObjectOutputStream ser = new java.io.ObjectOutputStream(new com.google.gerrit.server.cache.h2.H2CacheImpl.SinkOutputStream(into))) { ser.writeObject(from); ser.flush(); } catch (java.io.IOException err) { throw new java.lang.RuntimeException(""Cannot hash as Serializable"", err); } }",f342db4e3f0299cb02355a3db641a32e768e531b,"funnel(java.lang.Object,com.google.common.hash.PrimitiveSink)",114235,111,108
78208,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_ActionsIT.java,10.0,"@org.junit.Test public void revisionActionsTwoChangesInTopic_conflicting() throws java.lang.Exception { java.lang.String changeId = createChangeWithTopic().getChangeId(); approve(changeId); java.lang.String changeId2 = createChangeWithTopic(testRepo, ""foo2"", ""touching b"", ""b.txt"", ""real content"").getChangeId(); approve(changeId2); testRepo.reset(""HEAD~2""); java.lang.String collidingChange = createChangeWithTopic(testRepo, ""off_topic"", ""rewriting file b"", ""b.txt"", ""garbage\ngarbage\ngarbage"").getChangeId(); gApi.changes().id(collidingChange).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(collidingChange).current().submit(); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> actions = getActions(changeId); commonActionsAssertions(actions); if (isSubmitWholeTopicEnabled()) { com.google.gerrit.extensions.common.ActionInfo info = actions.get(""submit""); assertThat(info.enabled).isNull(); assertThat(info.label).isEqualTo(""Submit whole topic""); assertThat(info.method).isEqualTo(""POST""); assertThat(info.title).isEqualTo(""See the \""Submitted Together\"" tab for problems, specifically see: 2""); } else { noSubmitWholeTopicAssertions(actions, 1); } }",a97f1b16c97a2701211f088015684524347671d3,"@org.junit.Test public void revisionActionsTwoChangesInTopic_conflicting() throws java.lang.Exception { java.lang.String changeId = createChangeWithTopic().getChangeId(); approve(changeId); java.lang.String changeId2 = createChangeWithTopic(testRepo, ""foo2"", ""touching b"", ""b.txt"", ""real content"").getChangeId(); approve(changeId2); testRepo.reset(""HEAD~2""); java.lang.String collidingChange = createChangeWithTopic(testRepo, ""off_topic"", ""rewriting file b"", ""b.txt"", ""garbage\ngarbage\ngarbage"").getChangeId(); gApi.changes().id(collidingChange).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(collidingChange).current().submit(); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> actions = getActions(changeId); commonActionsAssertions(actions); if (isSubmitWholeTopicEnabled()) { com.google.gerrit.extensions.common.ActionInfo info = actions.get(""submit""); assertThat(info.enabled).isNull(); assertThat(info.label).isEqualTo(""Submit whole topic""); assertThat(info.method).isEqualTo(""POST""); assertThat(info.title).isEqualTo(""Problems with: 2""); } else { noSubmitWholeTopicAssertions(actions, 1); } }",52638f289c0662a6df33e1b0c85518601b9a22e3,revisionActionsTwoChangesInTopic_conflicting(),revisionActionsTwoChangesInTopic_conflicting(),3,10,"@org.junit.Test public void revisionActionsTwoChangesInTopic_conflicting() throws java.lang.Exception { java.lang.String changeId = createChangeWithTopic().getChangeId(); approve(changeId); java.lang.String changeId2 = createChangeWithTopic(testRepo, ""foo2"", ""touching b"", ""b.txt"", ""real content"").getChangeId(); approve(changeId2); testRepo.reset(""HEAD~2""); java.lang.String collidingChange = createChangeWithTopic(testRepo, ""off_topic"", ""rewriting file b"", ""b.txt"", ""garbage\ngarbage\ngarbage"").getChangeId(); gApi.changes().id(collidingChange).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(collidingChange).current().submit(); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> actions = getActions(changeId); commonActionsAssertions(actions); if (isSubmitWholeTopicEnabled()) { com.google.gerrit.extensions.common.ActionInfo info = actions.get(""submit""); assertThat(info.enabled).isNull(); assertThat(info.label).isEqualTo(""Submit whole topic""); assertThat(info.method).isEqualTo(""POST""); assertThat(info.title).isEqualTo(""Problems with change(s): 2""); } else { noSubmitWholeTopicAssertions(actions, 1); } }",8bf36fde5839b8077da0d2979e4462229cf25b42,revisionActionsTwoChangesInTopic_conflicting(),137731,327,331
73595,gerrit-server_src_main_java_com_google_gerrit_server_events_EventFactory.java,31.0,"public com.google.gerrit.server.data.PatchSetAttribute asPatchSetAttribute(org.eclipse.jgit.revwalk.RevWalk revWalk, com.google.gerrit.reviewdb.client.PatchSet patchSet) { return asPatchSetAttribute(revWalk, patchSet); }",880d273d6ad72ff4add55c40cae3090e144008cc,"public com.google.gerrit.server.data.PatchSetAttribute asPatchSetAttribute(org.eclipse.jgit.revwalk.RevWalk revWalk, com.google.gerrit.reviewdb.client.PatchSet patchSet) { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { return asPatchSetAttribute(db, revWalk, patchSet); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.events.EventFactory.log.error(""Cannot open database connection"", e); return new com.google.gerrit.server.data.PatchSetAttribute(); } }",8f453cb5f43b3c7ab9237617d2fc87299671b1ec,"asPatchSetAttribute(org.eclipse.jgit.revwalk.RevWalk,com.google.gerrit.reviewdb.client.PatchSet)","asPatchSetAttribute(org.eclipse.jgit.revwalk.RevWalk,com.google.gerrit.reviewdb.client.PatchSet)",3,31,"public com.google.gerrit.server.data.PatchSetAttribute asPatchSetAttribute(org.eclipse.jgit.revwalk.RevWalk revWalk, com.google.gerrit.reviewdb.client.PatchSet patchSet) { return asPatchSetAttribute(revWalk, patchSet); }",880d273d6ad72ff4add55c40cae3090e144008cc,"asPatchSetAttribute(org.eclipse.jgit.revwalk.RevWalk,com.google.gerrit.reviewdb.client.PatchSet)",209136,154,67
24383,gerrit-common_src_main_java_com_google_gerrit_common_data_GitWebType.java,2.0,"public static com.google.gerrit.common.data.GitWebType fromName(final java.lang.String name) { final com.google.gerrit.common.data.GitWebType type; if (((name == null) || (name.isEmpty())) || (name.equalsIgnoreCase(""gitweb""))) { type = new com.google.gerrit.common.data.GitWebType(); type.setProject(""?p=${project}.git;a=summary""); type.setRevision(""?p=${project}.git;a=commit;h=${commit}""); type.setBranch(""?p=${project}.git;a=shortlog;h=${branch}""); } else if (name.equalsIgnoreCase(""cgit"")) { type = new com.google.gerrit.common.data.GitWebType(); type.setProject(""${project}/summary""); type.setRevision(""${project}/commit/?id=${commit}""); type.setBranch(""${project}/log/?h=${branch}""); } else if (name.equalsIgnoreCase(""custom"")) { type = new com.google.gerrit.common.data.GitWebType(); } else { type = null; } return type; }",de34c032988aa04a3fad29da05c2692913e0fe56,"public static com.google.gerrit.common.data.GitWebType fromName(final java.lang.String name) { final com.google.gerrit.common.data.GitWebType type; if (((name == null) || (name.isEmpty())) || (name.equalsIgnoreCase(""gitweb""))) { type = new com.google.gerrit.common.data.GitWebType(); type.setProject(""?p=${project}.git;a=summary""); type.setRevision(""?p=${project}.git;a=commit;h=${commit}""); type.setBranch(""?p=${project}.git;a=shortlog;h=${branch}""); type.setFileHistory(""?p=${project}.git;a=history;hb=${branch};f=${file}""); } else if (name.equalsIgnoreCase(""cgit"")) { type = new com.google.gerrit.common.data.GitWebType(); type.setProject(""${project}/summary""); type.setRevision(""${project}/commit/?id=${commit}""); type.setBranch(""${project}/log/?h=${branch}""); type.setFileHistory(""${project}/history/?hb=${branch};f=${file}""); } else if (name.equalsIgnoreCase(""custom"")) { type = new com.google.gerrit.common.data.GitWebType(); } else { type = null; } return type; }",d51331e41223397a11d4b44be5e29116552f804c,fromName(java.lang.String),fromName(java.lang.String),5,4,"public static com.google.gerrit.common.data.GitWebType fromName(final java.lang.String name) { final com.google.gerrit.common.data.GitWebType type; if (((name == null) || (name.isEmpty())) || (name.equalsIgnoreCase(""gitweb""))) { type = new com.google.gerrit.common.data.GitWebType(); type.setLinkName(""gitweb""); type.setProject(""?p=${project}.git;a=summary""); type.setRevision(""?p=${project}.git;a=commit;h=${commit}""); type.setBranch(""?p=${project}.git;a=shortlog;h=${branch}""); type.setFileHistory(""?p=${project}.git;a=history;hb=${branch};f=${file}""); } else if (name.equalsIgnoreCase(""cgit"")) { type = new com.google.gerrit.common.data.GitWebType(); type.setLinkName(""cgit""); type.setProject(""${project}/summary""); type.setRevision(""${project}/commit/?id=${commit}""); type.setBranch(""${project}/log/?h=${branch}""); type.setFileHistory(""${project}/log/${file}?h=${branch}""); } else if (name.equalsIgnoreCase(""custom"")) { type = new com.google.gerrit.common.data.GitWebType(); type.setLinkName(""gitweb""); } else if (name.equalsIgnoreCase(""disabled"")) { type = null; } else { type = null; } return type; }",bd6852558c8143cf3c1958763b282e9a8a69a3b1,fromName(java.lang.String),136348,324,363
110344,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_SiteRebuilder.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.google.gerrit.server.notedb.rebuild.SiteRebuilder setThreads(int threads) { executor = (threads > 1) ? com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(threads, ""RebuildChange"")) : com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService(); return this; }",937320b53ed462e866eaeec5c8d05c636561b7b9,,setThreads(int),4,4,public com.google.gerrit.server.notedb.rebuild.SiteRebuilder.Builder setThreads(int threads) { this.threads = threads; return this; },87fd42ec7ede56dacabb0400fbe7410836d61cd9,setThreads(int),166101,86,38
47302,gerrit-server_src_main_java_com_google_gerrit_server_mail_ProjectWatch.java,1.0,"@java.lang.SuppressWarnings(""unchecked"") private boolean filterMatch(com.google.gerrit.server.CurrentUser user, java.lang.String filter) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeQueryBuilder qb; com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p = null; if (user == null) { qb = args.queryBuilder.create(args.anonymousUser); } else { qb = args.queryBuilder.create(user); p = qb.is_visible(); } if (filter != null) { qb.setAllowFileRegex(true); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> filterPredicate = qb.parse(filter); if (p == null) { p = filterPredicate; } else { p = com.google.gerrit.server.query.Predicate.and(filterPredicate, p); } p = args.queryRewriter.get().rewrite(p); } return p == null ? true : p.match(changeData); }",9f6caf18f591a86cf6bdca86ed999bf8de789526,"@java.lang.SuppressWarnings(""unchecked"") private boolean filterMatch(com.google.gerrit.server.CurrentUser user, java.lang.String filter) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeQueryBuilder qb; com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p = null; if (user == null) { qb = args.queryBuilder.create(args.anonymousUser); } else { qb = args.queryBuilder.create(user); p = qb.is_visible(); } if (filter != null) { qb.setAllowFileRegexWithoutLucene(true); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> filterPredicate = qb.parse(filter); if (p == null) { p = filterPredicate; } else { p = com.google.gerrit.server.query.Predicate.and(filterPredicate, p); } p = args.queryRewriter.get().rewrite(p); } return p == null ? true : p.match(changeData); }",a997df5086c74fb646de374962009dbf2dd3e9ad,"filterMatch(com.google.gerrit.server.CurrentUser,java.lang.String)","filterMatch(com.google.gerrit.server.CurrentUser,java.lang.String)",3,1,"@java.lang.SuppressWarnings(""unchecked"") private boolean filterMatch(com.google.gerrit.server.CurrentUser user, java.lang.String filter) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeQueryBuilder qb; com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p = null; if (user == null) { qb = args.queryBuilder.create(args.anonymousUser); } else { qb = args.queryBuilder.create(user); p = qb.is_visible(); } if (filter != null) { qb.setAllowFileRegex(true); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> filterPredicate = qb.parse(filter); if (p == null) { p = filterPredicate; } else { p = com.google.gerrit.server.query.Predicate.and(filterPredicate, p); } p = args.queryRewriter.get().rewrite(p); } return p == null ? true : p.match(changeData); }",9f6caf18f591a86cf6bdca86ed999bf8de789526,"filterMatch(com.google.gerrit.server.CurrentUser,java.lang.String)",178666,278,276
47305,gerrit-lucene_src_main_java_com_google_gerrit_lucene_LuceneChangeIndex.java,13.0,private org.apache.lucene.search.Query fieldQuery(com.google.gerrit.server.index.IndexPredicate<com.google.gerrit.server.query.change.ChangeData> p) throws com.google.gerrit.server.query.QueryParseException { if ((p.getType()) == (com.google.gerrit.server.index.FieldType.INTEGER)) { return intQuery(p); } else if ((p.getType()) == (com.google.gerrit.server.index.FieldType.EXACT)) { return exactQuery(p); } else { throw com.google.gerrit.lucene.LuceneChangeIndex.badFieldType(p.getType()); } },6634742245c0ec2e41682e64e858c702ecc00519,private org.apache.lucene.search.Query fieldQuery(com.google.gerrit.server.index.IndexPredicate<com.google.gerrit.server.query.change.ChangeData> p) throws com.google.gerrit.server.query.QueryParseException { if ((p.getType()) == (com.google.gerrit.server.index.FieldType.INTEGER)) { return intQuery(p); } else if ((p.getType()) == (com.google.gerrit.server.index.FieldType.EXACT)) { return exactQuery(p); } else if ((p.getType()) == (com.google.gerrit.server.index.FieldType.FULL_TEXT)) { return fullTextQuery(p); } else { throw com.google.gerrit.lucene.LuceneChangeIndex.badFieldType(p.getType()); } },b570881ad6fb5644babd471c51ce88c293286c66,fieldQuery(com.google.gerrit.server.index.IndexPredicate),fieldQuery(com.google.gerrit.server.index.IndexPredicate),8,29,private org.apache.lucene.search.Query fieldQuery(com.google.gerrit.server.index.IndexPredicate<com.google.gerrit.server.query.change.ChangeData> p) throws com.google.gerrit.server.query.QueryParseException { if ((p.getType()) == (com.google.gerrit.server.index.FieldType.INTEGER)) { return intQuery(p); } else if ((p.getType()) == (com.google.gerrit.server.index.FieldType.TIMESTAMP)) { return com.google.gerrit.lucene.LuceneChangeIndex.timestampQuery(p); } else if ((p.getType()) == (com.google.gerrit.server.index.FieldType.EXACT)) { return exactQuery(p); } else if ((p.getType()) == (com.google.gerrit.server.index.FieldType.PREFIX)) { return prefixQuery(p); } else if ((p.getType()) == (com.google.gerrit.server.index.FieldType.FULL_TEXT)) { return fullTextQuery(p); } else if (p instanceof com.google.gerrit.server.query.change.SortKeyPredicate) { return com.google.gerrit.lucene.LuceneChangeIndex.sortKeyQuery(((com.google.gerrit.server.query.change.SortKeyPredicate) (p))); } else { throw com.google.gerrit.lucene.LuceneChangeIndex.badFieldType(p.getType()); } },89b9d811d8ababc8cd0bb0da403314692e062ce8,fieldQuery(com.google.gerrit.server.index.IndexPredicate),186331,187,328
10673,src_main_java_com_google_gerrit_server_FileTypeRegistry.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static boolean isSafe(org.spearce.jgit.lib.RepositoryConfig cfg, java.lang.String type, boolean d) { return cfg.getBoolean(com.google.gerrit.server.FileTypeRegistry.SECTION_MIMETYPE, type, com.google.gerrit.server.FileTypeRegistry.KEY_SAFE, d); }",17d7049d8efdbaa870ad0b350727cad0506303fd,,"isSafe(org.spearce.jgit.lib.RepositoryConfig,java.lang.String,boolean)",2,8,"private static boolean isSafe(org.spearce.jgit.lib.RepositoryConfig cfg, java.lang.String type, boolean def) { return cfg.getBoolean(com.google.gerrit.server.FileTypeRegistry.SECTION_MIMETYPE, type, com.google.gerrit.server.FileTypeRegistry.KEY_SAFE, def); }",4d6bca3ab84d94e68ba6384c6a943096448649d1,"isSafe(org.spearce.jgit.lib.RepositoryConfig,java.lang.String,boolean)",70074,77,75
70140,gerrit-server_src_main_java_com_google_gerrit_server_patch_IntraLineDiffArgs.java,,,,abstract java.util.List<org.eclipse.jgit.diff.Edit> edits();,6f9d72b510d4f5dbbaf4c394b1663cc111be8a8c,,edits(),6,1,public abstract java.util.List<org.eclipse.jgit.diff.Edit> edits();,a4fe4b3423a9a53667edf259773074ca77eef869,edits(),98109,21,22
101012,gerrit-server_src_main_java_com_google_gerrit_server_index_change_AllChangesIndexer.java,6.0,"public java.util.concurrent.Callable<java.lang.Void> reindexProject(final com.google.gerrit.server.index.change.ChangeIndexer indexer, final com.google.gerrit.reviewdb.client.Project.NameKey project, final com.google.gerrit.server.git.MultiProgressMonitor.Task done, final com.google.gerrit.server.git.MultiProgressMonitor.Task failed, final java.io.PrintWriter verboseWriter) { return new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { com.google.common.collect.ListMultimap<org.eclipse.jgit.lib.ObjectId, com.google.gerrit.server.query.change.ChangeData> byId = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(com.google.gerrit.server.index.change.ALL); for (com.google.gerrit.server.notedb.ChangeNotes cn : notesFactory.scan(repo, db, project)) { org.eclipse.jgit.lib.Ref r = refs.get(cn.getChange().currentPatchSetId().toRefName()); if (r != null) { byId.put(r.getObjectId(), changeDataFactory.create(db, cn)); } } new com.google.gerrit.server.index.change.AllChangesIndexer.ProjectIndexer(indexer, byId, repo, done, failed, verboseWriter).call(); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException rnfe) { com.google.gerrit.server.index.change.AllChangesIndexer.log.error(rnfe.getMessage()); } return null; } @java.lang.Override public java.lang.String toString() { return ""Index all changes of project "" + (project.get()); } }; }",25dcbe563b27f5c3603fd86e1e0ac1607d3d1af6,"public java.util.concurrent.Callable<java.lang.Void> reindexProject(com.google.gerrit.server.index.change.ChangeIndexer indexer, com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.git.MultiProgressMonitor.Task done, com.google.gerrit.server.git.MultiProgressMonitor.Task failed, java.io.PrintWriter verboseWriter) { return () -> { com.google.common.collect.ListMultimap<org.eclipse.jgit.lib.ObjectId, com.google.gerrit.server.query.change.ChangeData> byId = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(com.google.gerrit.server.index.change.ALL); for (com.google.gerrit.server.notedb.ChangeNotes cn : notesFactory.scan(repo, db, project)) { org.eclipse.jgit.lib.Ref r = refs.get(cn.getChange().currentPatchSetId().toRefName()); if (r != null) { byId.put(r.getObjectId(), changeDataFactory.create(db, cn)); } } new com.google.gerrit.server.index.change.AllChangesIndexer.ProjectIndexer(indexer, byId, repo, done, failed, verboseWriter).call(); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException rnfe) { com.google.gerrit.server.index.change.AllChangesIndexer.log.error(rnfe.getMessage()); } return null; }; }",9deeb1a7d06f9d3c295da19c5b8711da83532b98,"reindexProject(com.google.gerrit.server.index.change.ChangeIndexer,com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.server.git.MultiProgressMonitor.Task,com.google.gerrit.server.git.MultiProgressMonitor.Task,java.io.PrintWriter)","reindexProject(com.google.gerrit.server.index.change.ChangeIndexer,com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.server.git.MultiProgressMonitor.Task,com.google.gerrit.server.git.MultiProgressMonitor.Task,java.io.PrintWriter)",5,8,"public java.util.concurrent.Callable<java.lang.Void> reindexProject(final com.google.gerrit.server.index.change.ChangeIndexer indexer, final com.google.gerrit.reviewdb.client.Project.NameKey project, final com.google.gerrit.server.git.MultiProgressMonitor.Task done, final com.google.gerrit.server.git.MultiProgressMonitor.Task failed, final java.io.PrintWriter verboseWriter) { return new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { com.google.common.collect.ListMultimap<org.eclipse.jgit.lib.ObjectId, com.google.gerrit.server.query.change.ChangeData> byId = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(com.google.gerrit.server.index.change.ALL); for (com.google.gerrit.server.notedb.ChangeNotes cn : notesFactory.scan(repo, db, project)) { org.eclipse.jgit.lib.Ref r = refs.get(cn.getChange().currentPatchSetId().toRefName()); if (r != null) { byId.put(r.getObjectId(), changeDataFactory.create(db, cn)); } } new com.google.gerrit.server.index.change.AllChangesIndexer.ProjectIndexer(indexer, byId, repo, done, failed, verboseWriter).call(); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException rnfe) { com.google.gerrit.server.index.change.AllChangesIndexer.log.error(rnfe.getMessage()); } return null; } @java.lang.Override public java.lang.String toString() { return ""Index all changes of project "" + (project.get()); } }; }",25dcbe563b27f5c3603fd86e1e0ac1607d3d1af6,"reindexProject(com.google.gerrit.server.index.change.ChangeIndexer,com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.server.git.MultiProgressMonitor.Task,com.google.gerrit.server.git.MultiProgressMonitor.Task,java.io.PrintWriter)",159762,440,510
57810,gerrit-server_src_main_java_com_google_gerrit_server_ChangeMessagesUtil.java,,,,public static java.util.List<com.google.gerrit.reviewdb.client.ChangeMessage> sortChangeMessages(java.lang.Iterable<com.google.gerrit.reviewdb.client.ChangeMessage> changeMessage) { return ChangeNotes.MESSAGE_BY_TIME.sortedCopy(changeMessage); },375e7120c00e814dd060fd21db5ace477ed81d93,,sortChangeMessages(java.lang.Iterable),9,0,private static java.util.List<com.google.gerrit.reviewdb.client.ChangeMessage> sortChangeMessages(java.lang.Iterable<com.google.gerrit.reviewdb.client.ChangeMessage> changeMessage) { return ChangeNotes.MESSAGE_BY_TIME.sortedCopy(changeMessage); },d3d5a3aa865d0b869f1ad501714d4409fe24fc20,sortChangeMessages(java.lang.Iterable),47626,71,71
16294,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_ReviewDb.java,20.0,@com.google.gwtorm.client.Relation com.google.gerrit.reviewdb.TrackingIdAccess trackingIds();,ec54e7a63af47ef36cfbc3fc1b3b3e0abd69adaa,@com.google.gwtorm.client.Relation(id = 26) com.google.gerrit.reviewdb.TrackingIdAccess trackingIds();,073d1b80f6392fdb5e8bfe0bcf664db2d61bdbf2,trackingIds(),trackingIds(),2,20,@com.google.gwtorm.client.Relation(id = 27) com.google.gerrit.reviewdb.TrackingIdAccess trackingIds();,fc4eb89ab7d31cf20a4b7bf116d20f8b8c925b96,trackingIds(),97502,33,33
10644,src_main_java_com_google_gerrit_client_patches_PatchScreen.java,15.0,"protected void refresh(final boolean isFirst) { final int rpcseq = ++(rpcSequence); script = null; comments = null; PatchUtil.DETAIL_SVC.patchScript(patchKey, idSideA, idSideB, scriptSettings, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.data.PatchScript>() { public void onSuccess(final com.google.gerrit.client.data.PatchScript result) { if ((rpcSequence) == rpcseq) { script = result; onResult(); } } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { if ((rpcSequence) == rpcseq) { if ((isNoDifferences(caught)) && (!isFirst)) { historyTable.enableAll(true); showPatch(false); } else { super.onFailure(caught); } } } private boolean isNoDifferences(final java.lang.Throwable caught) { if (caught instanceof com.google.gerrit.client.rpc.NoDifferencesException) { return true; } return (caught instanceof com.google.gwtjsonrpc.client.RemoteJsonException) && (caught.getMessage().equals(NoDifferencesException.MESSAGE)); } }); PatchUtil.DETAIL_SVC.patchComments(patchKey, idSideA, idSideB, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.patches.CommentDetail>() { public void onSuccess(final com.google.gerrit.client.patches.CommentDetail result) { if ((rpcSequence) == rpcseq) { comments = result; onResult(); } } @java.lang.Override public void onFailure(java.lang.Throwable caught) { if ((!(isNoSuchEntity(caught))) && ((rpcSequence) == rpcseq)) { super.onFailure(caught); } } }); }",36c17c03eb7cd29f3f704f8a0a3b27009b7f2fbc,"protected void refresh(final boolean isFirst) { final int rpcseq = ++(rpcSequence); script = null; comments = null; PatchUtil.DETAIL_SVC.patchScript(patchKey, idSideA, idSideB, scriptSettings, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.data.PatchScript>() { public void onSuccess(final com.google.gerrit.client.data.PatchScript result) { if ((rpcSequence) == rpcseq) { script = result; onResult(); } } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { if ((rpcSequence) == rpcseq) { if ((caught instanceof com.google.gwtjsonrpc.client.RemoteJsonException) && (!isFirst)) { historyTable.enableAll(true); showPatch(false); } else { super.onFailure(caught); } } } }); PatchUtil.DETAIL_SVC.patchComments(patchKey, idSideA, idSideB, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.patches.CommentDetail>() { public void onSuccess(final com.google.gerrit.client.patches.CommentDetail result) { if ((rpcSequence) == rpcseq) { comments = result; onResult(); } } @java.lang.Override public void onFailure(java.lang.Throwable caught) { if ((!(isNoSuchEntity(caught))) && ((rpcSequence) == rpcseq)) { super.onFailure(caught); } } }); }",cd2ec9301430994b3dcc0534d6865800bb3bad38,refresh(boolean),refresh(boolean),7,16,"protected void refresh(final boolean isFirst) { final int rpcseq = ++(rpcSequence); script = null; comments = null; PatchUtil.DETAIL_SVC.patchScript(patchKey, idSideA, idSideB, scriptSettings, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.data.PatchScript>() { public void onSuccess(final com.google.gerrit.client.data.PatchScript result) { if ((rpcSequence) == rpcseq) { script = result; onResult(); } } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { if ((rpcSequence) == rpcseq) { super.onFailure(caught); } } }); PatchUtil.DETAIL_SVC.patchComments(patchKey, idSideA, idSideB, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.patches.CommentDetail>() { public void onSuccess(final com.google.gerrit.client.patches.CommentDetail result) { if ((rpcSequence) == rpcseq) { comments = result; onResult(); } } @java.lang.Override public void onFailure(java.lang.Throwable caught) { if ((!(isNoSuchEntity(caught))) && ((rpcSequence) == rpcseq)) { super.onFailure(caught); } } }); }",306b5f5dd39bdcb73b1718f934b2d0beb904ae94,refresh(boolean),114976,359,318
83350,src_test_java_com_googlesource_gerrit_plugins_verifystatus_VerifyStatusIT.java,,,,"@java.lang.Override protected void beforeTestServerStarts() throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { setPluginConfigString(""dbType"", ""h2""); setPluginConfigString(""database"", (((testSite) + ""/db/"") + ""TestCiDB"")); }",9b4fa8ae4d41a23742c6139ef4964cd347e8de40,,beforeTestServerStarts(),4,6,"@java.lang.Override protected void beforeTestServerStarts() throws java.lang.Exception { java.lang.String url = ""jdbc:h2:mem:TestCiDB;DB_CLOSE_DELAY=-1""; java.util.Properties p = new java.util.Properties(); p.setProperty(""driver"", ""org.h2.Driver""); p.setProperty(""url"", url); setPluginConfigString(""dbType"", ""h2""); setPluginConfigString(""dbUrl"", url); com.google.gwtorm.jdbc.SimpleDataSource sds = new com.google.gwtorm.jdbc.SimpleDataSource(p); try (java.sql.Connection c = sds.getConnection();java.sql.Statement s = c.createStatement()) { s.executeUpdate(com.googlesource.gerrit.plugins.verifystatus.VerifyStatusIT.CREATE_TABLE); s.execute(com.googlesource.gerrit.plugins.verifystatus.VerifyStatusIT.DELETE_TABLE); } }",8f11ef91fec9d8d752d62818934ba57af998d7ee,beforeTestServerStarts(),89629,82,214
79910,gerrit-server_src_main_java_com_google_gerrit_server_change_PostReviewers.java,1.0,"private com.google.gerrit.extensions.api.changes.AddReviewerResult putAccount(java.lang.String reviewer, com.google.gerrit.server.change.ReviewerResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account member = rsrc.getReviewerUser().getAccount(); com.google.gerrit.server.project.ChangeControl control = rsrc.getReviewerControl(); com.google.gerrit.extensions.api.changes.AddReviewerResult result = new com.google.gerrit.extensions.api.changes.AddReviewerResult(reviewer); if (isValidReviewer(member, control)) { addReviewers(rsrc.getChangeResource(), result, com.google.common.collect.ImmutableMap.of(member.getId(), control)); } return result; }",800265a7823ecd866fa8cf8f55583c4e520ae0e4,"private com.google.gerrit.extensions.api.changes.AddReviewerResult putAccount(java.lang.String reviewer, com.google.gerrit.server.change.ReviewerResource rsrc, boolean cc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account member = rsrc.getReviewerUser().getAccount(); com.google.gerrit.server.project.ChangeControl control = rsrc.getReviewerControl(); com.google.gerrit.extensions.api.changes.AddReviewerResult result = new com.google.gerrit.extensions.api.changes.AddReviewerResult(reviewer); if (isValidReviewer(member, control)) { addReviewers(rsrc.getChangeResource(), result, com.google.common.collect.ImmutableMap.of(member.getId(), control), cc); } return result; }",599a15338c706b299e58bf41bf0c8daac73d1d43,"putAccount(java.lang.String,com.google.gerrit.server.change.ReviewerResource)","putAccount(java.lang.String,com.google.gerrit.server.change.ReviewerResource,boolean)",15,2,"private com.google.gerrit.extensions.api.changes.AddReviewerResult putAccount(java.lang.String reviewer, com.google.gerrit.server.change.ReviewerResource rsrc, com.google.gerrit.extensions.client.ReviewerState state) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account member = rsrc.getReviewerUser().getAccount(); com.google.gerrit.server.project.ChangeControl control = rsrc.getReviewerControl(); com.google.gerrit.extensions.api.changes.AddReviewerResult result = new com.google.gerrit.extensions.api.changes.AddReviewerResult(reviewer); if (isValidReviewer(member, control)) { addReviewers(rsrc.getChangeResource(), result, com.google.common.collect.ImmutableMap.of(member.getId(), control), state); } return result; }",ee05914a04509e7844ba65462f2a7fc3a7ac3fb7,"putAccount(java.lang.String,com.google.gerrit.server.change.ReviewerResource,com.google.gerrit.extensions.client.ReviewerState)",162634,232,245
100958,gerrit-server_src_main_java_com_google_gerrit_server_git_ReplaceOp.java,0.0,"@java.lang.Override public void updateRepo(com.google.gerrit.server.update.RepoContext ctx) throws java.lang.Exception { commit = ctx.getRevWalk().parseCommit(commitId); ctx.getRevWalk().parseBody(commit); changeKind = changeKindCache.getChangeKind(projectControl.getProject().getNameKey(), ctx.getRepository(), ctx.getRevWalk(), priorCommitId, commitId); if (checkMergedInto) { org.eclipse.jgit.lib.Ref mergedInto = com.google.gerrit.server.git.ReplaceOp.findMergedInto(ctx, dest.get(), commit); if (mergedInto != null) { mergedByPushOp = mergedByPushOpFactory.create(requestScopePropagator, patchSetId, mergedInto.getName()); } } if (updateRef) { ctx.addRefUpdate(new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), commitId, patchSetId.toRefName())); } }",8b399d6c6d00e44e2b201a8d1ff2ed389c896793,"@java.lang.Override public void updateRepo(com.google.gerrit.server.update.RepoContext ctx) throws java.lang.Exception { commit = ctx.getRevWalk().parseCommit(commitId); ctx.getRevWalk().parseBody(commit); changeKind = changeKindCache.getChangeKind(projectControl.getProject().getNameKey(), ctx.getRepository(), ctx.getRevWalk(), priorCommitId, commitId); if (checkMergedInto) { java.lang.String mergedInto = com.google.gerrit.server.git.ReplaceOp.findMergedInto(ctx, dest.get(), commit); if (mergedInto != null) { mergedByPushOp = mergedByPushOpFactory.create(requestScopePropagator, patchSetId, mergedInto); } } if (updateRef) { ctx.addRefUpdate(new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), commitId, patchSetId.toRefName())); } }",a8b92d57d12cc1ede644af2445dbf26dd38b1317,updateRepo(com.google.gerrit.server.update.RepoContext),updateRepo(com.google.gerrit.server.update.RepoContext),8,0,"@java.lang.Override public void updateRepo(com.google.gerrit.server.update.RepoContext ctx) throws java.lang.Exception { commit = ctx.getRevWalk().parseCommit(commitId); ctx.getRevWalk().parseBody(commit); changeKind = changeKindCache.getChangeKind(projectControl.getProject().getNameKey(), ctx.getRevWalk(), ctx.getRepoView().getConfig(), priorCommitId, commitId); if (checkMergedInto) { java.lang.String mergedInto = com.google.gerrit.server.git.ReplaceOp.findMergedInto(ctx, dest.get(), commit); if (mergedInto != null) { mergedByPushOp = mergedByPushOpFactory.create(requestScopePropagator, patchSetId, mergedInto); } } if (updateRef) { ctx.addRefUpdate(new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), commitId, patchSetId.toRefName())); } }",88e96136427a9bbefbcae7a4934851484453782b,updateRepo(com.google.gerrit.server.update.RepoContext),33396,223,227
47310,gerrit-lucene_src_main_java_com_google_gerrit_lucene_LuceneChangeIndex.java,35.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private static boolean gtEq(com.google.gerrit.server.query.change.LabelPredicate p) { return LabelPredicate.Test.GT_EQ.equals(p); },b557bb5206301afcef03652b69a899b10497fc07,,gtEq(com.google.gerrit.server.query.change.LabelPredicate),7,33,"private org.apache.lucene.search.Query prefixQuery(com.google.gerrit.server.index.IndexPredicate<com.google.gerrit.server.query.change.ChangeData> p) { return new org.apache.lucene.search.PrefixQuery(new org.apache.lucene.index.Term(p.getField().getName(), p.getValue())); }",b385416261275e3b0d4c52b5060ebd32f437008e,prefixQuery(com.google.gerrit.server.index.IndexPredicate),119182,40,81
62862,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeFileApi.java,0.0,"public static void getContent(com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String filename, com.google.gwt.user.client.rpc.AsyncCallback<java.lang.String> cb) { com.google.gerrit.client.changes.ChangeFileApi.contentEditOrPs(id, filename).get(com.google.gerrit.client.changes.ChangeFileApi.wrapper(cb)); }",a93849a4e46b5249a447403716447a94d8596b59,"public static void getContent(com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String filename, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.ChangeFileApi.FileContent> cb) { com.google.gerrit.client.changes.ChangeFileApi.contentEditOrPs(id, filename).get(com.google.gerrit.client.changes.ChangeFileApi.decode(cb)); }",a825a10a8bf8aecad861ccc8819d17b1abe7d0fe,"getContent(com.google.gerrit.reviewdb.client.PatchSet$Id,java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)","getContent(com.google.gerrit.reviewdb.client.PatchSet$Id,java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)",7,6,"public static void getContent(com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String filename, com.google.gerrit.client.rpc.HttpCallback<com.google.gerrit.client.rpc.NativeString> cb) { com.google.gerrit.client.changes.ChangeFileApi.contentEditOrPs(id, filename).get(cb); }",645d4b99b4a92b7145a00afe67b3c68c8b116b4e,"getContent(com.google.gerrit.reviewdb.client.PatchSet$Id,java.lang.String,com.google.gerrit.client.rpc.HttpCallback)",67131,118,94
50030,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_MyPreferencesScreen.java,11.0,private void enable(final boolean on) { showSiteHeader.setEnabled(on); useFlashClipboard.setEnabled(on); copySelfOnEmails.setEnabled(on); reversePatchSetOrder.setEnabled(on); showUsernameInReviewCategory.setEnabled(on); maximumPageSize.setEnabled(on); dateFormat.setEnabled(on); timeFormat.setEnabled(on); relativeDateInChangeTable.setEnabled(on); commentVisibilityStrategy.setEnabled(on); diffView.setEnabled(on); },f2864b4ffbb3b122e0ae2ab008df676e05613d6f,private void enable(final boolean on) { showSiteHeader.setEnabled(on); useFlashClipboard.setEnabled(on); copySelfOnEmails.setEnabled(on); reversePatchSetOrder.setEnabled(on); showUsernameInReviewCategory.setEnabled(on); maximumPageSize.setEnabled(on); dateFormat.setEnabled(on); timeFormat.setEnabled(on); relativeDateInChangeTable.setEnabled(on); commentVisibilityStrategy.setEnabled(on); diffView.setEnabled(on); loser.setEnabled(on); },8a8c6f096e200f6436f78a49144824d11886cbc5,enable(boolean),enable(boolean),7,12,private void enable(final boolean on) { showSiteHeader.setEnabled(on); useFlashClipboard.setEnabled(on); copySelfOnEmails.setEnabled(on); reversePatchSetOrder.setEnabled(on); showUsernameInReviewCategory.setEnabled(on); maximumPageSize.setEnabled(on); dateFormat.setEnabled(on); timeFormat.setEnabled(on); relativeDateInChangeTable.setEnabled(on); commentVisibilityStrategy.setEnabled(on); changeScreen.setEnabled(on); diffView.setEnabled(on); },e2740877dd3ad6dc765aa03ae76a5b07a8684c5e,enable(boolean),132072,107,107
87442,gerrit-server_src_main_java_com_google_gerrit_server_git_MultiProgressMonitor.java,1.0,"private java.lang.StringBuilder format() { java.lang.StringBuilder s = new java.lang.StringBuilder().append(""\r"").append(taskName).append(':'); if (!(tasks.isEmpty())) { boolean first = true; for (com.google.gerrit.server.git.MultiProgressMonitor.Task t : tasks) { int count = t.count; if (count == 0) { continue; } if (!first) { s.append(','); } else { first = false; } s.append(' '); if (!(com.google.common.base.Strings.isNullOrEmpty(t.name))) { s.append(t.name).append("": ""); } if ((t.total) == (com.google.gerrit.server.git.MultiProgressMonitor.UNKNOWN)) { s.append(count); } else { s.append(java.lang.String.format(""%d%% (%d/%d)"", ((count * 100) / (t.total)), count, t.total)); } } } if ((spinnerState) != (com.google.gerrit.server.git.MultiProgressMonitor.NO_SPINNER)) { s.append("" ("").append(spinnerState).append(')'); } return s; }",ac3d0954fe7b58d31805b248d898e522e8990348,"private java.lang.StringBuilder format() { java.lang.StringBuilder s = new java.lang.StringBuilder().append(""\r"").append(taskName).append(':'); if (!(tasks.isEmpty())) { boolean first = true; for (com.google.gerrit.server.git.MultiProgressMonitor.Task t : tasks) { int count = t.count; if (count == 0) { continue; } if (!first) { s.append(','); } else { first = false; } s.append(' '); t.format(s); } } if ((spinnerState) != (com.google.gerrit.server.git.MultiProgressMonitor.NO_SPINNER)) { s.append("" ("").append(spinnerState).append(')'); } return s; }",5513820f4cc928c16a2dcd9e71236eff88e52b38,format(),format(),6,1,"private java.lang.StringBuilder format() { java.lang.StringBuilder s = new java.lang.StringBuilder().append(""\r"").append(taskName).append(':'); int firstLength = s.length(); for (com.google.gerrit.server.git.MultiProgressMonitor.Task t : tasks) { t.format(s, ((s.length()) == firstLength)); } if ((spinnerState) != (com.google.gerrit.server.git.MultiProgressMonitor.NO_SPINNER)) { s.append("" ("").append(spinnerState).append(')'); } return s; }",c6252f5ab6d02bf8737758d36a3067db126503be,format(),71769,174,136
128631,gerrit-server_src_test_java_com_google_gerrit_server_project_RefControlTest.java,91.0,"@org.junit.Test public void branchDelegation2() { com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.ADMIN, ""refs/*""); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.DEVS, ""refs/heads/x/*""); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, fixers, ""refs/heads/x/y/*""); com.google.gerrit.server.project.Util.doNotInherit(local, com.google.gerrit.server.project.OWNER, ""refs/heads/x/y/*""); com.google.gerrit.server.project.ProjectControl uDev = user(local, com.google.gerrit.server.project.Util.DEVS); assertNotOwner(uDev); assertOwnerAnyRef(uDev); assertOwner(""refs/heads/x/*"", uDev); assertOwner(""refs/heads/x/y"", uDev); assertOwner(""refs/heads/x/y/*"", uDev); assertNotOwner(""refs/*"", uDev); assertNotOwner(""refs/heads/master"", uDev); com.google.gerrit.server.project.ProjectControl uFix = user(local, fixers); assertNotOwner(uFix); assertOwnerAnyRef(uFix); assertOwner(""refs/heads/x/y/*"", uFix); assertOwner(""refs/heads/x/y/bar"", uFix); assertNotOwner(""refs/heads/x/*"", uFix); assertNotOwner(""refs/heads/x/y"", uFix); assertNotOwner(""refs/*"", uFix); assertNotOwner(""refs/heads/master"", uFix); }",055d618655f852e00ea647ea8f751712f457df7f,"@org.junit.Test public void branchDelegation2() { com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.ADMIN, ""refs/*""); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.DEVS, ""refs/heads/x/*""); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, fixers, ""refs/heads/x/y/*""); com.google.gerrit.server.project.Util.doNotInherit(local, com.google.gerrit.server.project.OWNER, ""refs/heads/x/y/*""); com.google.gerrit.server.project.ProjectControl uDev = user(local, com.google.gerrit.server.project.Util.DEVS); assertNotOwner(uDev); assertOwner(""refs/heads/x/*"", uDev); assertOwner(""refs/heads/x/y"", uDev); assertOwner(""refs/heads/x/y/*"", uDev); assertNotOwner(""refs/*"", uDev); assertNotOwner(""refs/heads/master"", uDev); com.google.gerrit.server.project.ProjectControl uFix = user(local, fixers); assertNotOwner(uFix); assertOwner(""refs/heads/x/y/*"", uFix); assertOwner(""refs/heads/x/y/bar"", uFix); assertNotOwner(""refs/heads/x/*"", uFix); assertNotOwner(""refs/heads/x/y"", uFix); assertNotOwner(""refs/*"", uFix); assertNotOwner(""refs/heads/master"", uFix); }",32874ae6a689dd0ef497d60145aeb032f5c5cab5,branchDelegation2(),branchDelegation2(),5,92,"@org.junit.Test public void branchDelegation2() { com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.ADMIN, ""refs/*""); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.DEVS, ""refs/heads/x/*""); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, fixers, ""refs/heads/x/y/*""); com.google.gerrit.server.project.Util.doNotInherit(local, com.google.gerrit.server.project.OWNER, ""refs/heads/x/y/*""); com.google.gerrit.server.project.ProjectControl uDev = user(local, com.google.gerrit.server.project.Util.DEVS); assertNotOwner(uDev); assertOwnerAnyRef(uDev); assertOwner(""refs/heads/x/*"", uDev); assertOwner(""refs/heads/x/y"", uDev); assertOwner(""refs/heads/x/y/*"", uDev); assertNotOwner(""refs/*"", uDev); assertNotOwner(""refs/heads/master"", uDev); com.google.gerrit.server.project.ProjectControl uFix = user(local, fixers); assertNotOwner(uFix); assertOwnerAnyRef(uFix); assertOwner(""refs/heads/x/y/*"", uFix); assertOwner(""refs/heads/x/y/bar"", uFix); assertNotOwner(""refs/heads/x/*"", uFix); assertNotOwner(""refs/heads/x/y"", uFix); assertNotOwner(""refs/*"", uFix); assertNotOwner(""refs/heads/master"", uFix); }",055d618655f852e00ea647ea8f751712f457df7f,branchDelegation2(),91275,445,461
61076,gerrit-server_src_test_java_com_google_gerrit_server_git_GroupListTest.java,,,,"@org.junit.Test public void testByUUID() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""d96b998f8a66ff433af50befb975d0e2bb6e0999""); com.google.gerrit.common.data.GroupReference groupReference = classUnderTest.byUUID(uuid); assertEquals(uuid, groupReference.getUUID()); assertEquals(""Non-Interactive Users"", groupReference.getName()); }",92b9e1b789c6f9eb663e758ed7086ca009e98198,,testByUUID(),3,1,"@org.junit.Test public void testByUUID() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""d96b998f8a66ff433af50befb975d0e2bb6e0999""); com.google.gerrit.common.data.GroupReference groupReference = groupList.byUUID(uuid); assertEquals(uuid, groupReference.getUUID()); assertEquals(""Non-Interactive Users"", groupReference.getName()); }",cba6ae11cefd5f5490b870a1efae8b779179fc3e,testByUUID(),135289,131,131
62030,gerrit-server_src_main_java_com_google_gerrit_server_config_RepositoryConfig.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.lang.String[] getAllBasePaths() { java.util.List<java.lang.String> basePaths = new java.util.ArrayList<>(); for (java.lang.String subSection : cfg.getSubsections(com.google.gerrit.server.config.RepositoryConfig.SECTION_NAME)) { java.lang.String basePath = cfg.getString(com.google.gerrit.server.config.RepositoryConfig.SECTION_NAME, subSection, com.google.gerrit.server.config.RepositoryConfig.BASE_PATH_NAME); if (basePath != null) { basePaths.add(basePath); } } return basePaths.toArray(new java.lang.String[basePaths.size()]); }",53f7f131ef25074b4c1b5309938c4c70c2cb4b25,,getAllBasePaths(),26,1,"public java.util.List<java.nio.file.Path> getAllBasePaths() { java.util.List<java.nio.file.Path> basePaths = new java.util.ArrayList<>(); for (java.lang.String subSection : cfg.getSubsections(com.google.gerrit.server.config.RepositoryConfig.SECTION_NAME)) { java.lang.String basePath = cfg.getString(com.google.gerrit.server.config.RepositoryConfig.SECTION_NAME, subSection, com.google.gerrit.server.config.RepositoryConfig.BASE_PATH_NAME); if (basePath != null) { basePaths.add(java.nio.file.Paths.get(basePath)); } } return basePaths; }",fa5b018a260a2f5c4254236347c5e01916e8d962,getAllBasePaths(),41135,158,164
66753,gerrit-server_src_main_java_com_google_gerrit_server_git_WorkQueue.java,5.0,@java.lang.Override public java.lang.String toString() { return runnable.toString(); },a606845f083f8968887649ecf4abed499ebfaa9d,"@java.lang.Override public java.lang.String toString() { if ((runnable) instanceof com.google.common.util.concurrent.ListenableFutureTask<?>) { java.lang.String errorMessage; try { for (java.lang.reflect.Field field : com.google.common.util.concurrent.ListenableFutureTask.class.getSuperclass().getDeclaredFields()) { if (field.getType().isAssignableFrom(java.util.concurrent.Callable.class)) { field.setAccessible(true); return ((java.util.concurrent.Callable<?>) (field.get(runnable))).toString(); } } errorMessage = ""Cannot find wrapped Callable field""; } catch (java.lang.SecurityException | java.lang.IllegalArgumentException | java.lang.IllegalAccessException e) { errorMessage = ""Cannot get call toString on Callable field""; } com.google.gerrit.server.git.WorkQueue.log.debug(""Cannot get a proper name for ListenableFutureTask: {}"", errorMessage); } return runnable.toString(); }",ba745597f40ea8f0fcf22130793f5b4acb6e91ac,toString(),toString(),2,5,"@java.lang.Override public java.lang.String toString() { if ((runnable) instanceof com.google.common.util.concurrent.ListenableFutureTask<?>) { java.lang.String errorMessage; try { for (java.lang.reflect.Field field : com.google.common.util.concurrent.ListenableFutureTask.class.getSuperclass().getDeclaredFields()) { if (field.getType().isAssignableFrom(java.util.concurrent.Callable.class)) { field.setAccessible(true); return ((java.util.concurrent.Callable<?>) (field.get(runnable))).toString(); } } errorMessage = ""Cannot find wrapped Callable field""; } catch (java.lang.SecurityException | java.lang.IllegalArgumentException | java.lang.IllegalAccessException e) { errorMessage = ""Cannot call toString on Callable field""; } com.google.gerrit.server.git.WorkQueue.log.debug(""Cannot get a proper name for ListenableFutureTask: {}"", errorMessage); } return runnable.toString(); }",46c67df71ff67a4425c3564f07a59565ff725912,toString(),212817,211,210
39475,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_CommitMessageBlock.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { new com.google.gerrit.client.changes.CommitMessageBlock.EditCommitMessageActionDialog() { { message.setText(commitMessage); } @java.lang.Override public void onSend() { Util.MANAGE_SVC.editCommitMessage(patchSetId, getMessageText(), createCallback()); } }.center(); }",7d3450d48c38d295c80f9b0b9336bef3ff923ed8,,onClick(com.google.gwt.event.dom.client.ClickEvent),11,1,"@java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { new com.google.gerrit.client.ui.CommentedActionDialog<com.google.gerrit.common.data.ChangeDetail>(Util.C.titleEditCommitMessage(), Util.C.headingEditCommitMessage(), new com.google.gerrit.client.changes.ChangeDetailCache.IgnoreErrorCallback() {}) { { message.setCharacterWidth(80); message.setVisibleLines(20); message.setText(commitMessage); } @java.lang.Override public void onSend() { Util.MANAGE_SVC.createNewPatchSet(patchSetId, getMessageText(), createCallback()); } }.center(); }",7dabb72b6e120c2af6e09fb78a173e4bee9ae8ea,onClick(com.google.gwt.event.dom.client.ClickEvent),28200,100,163
70072,gerrit-httpd_src_main_java_com_google_gerrit_httpd_AllRequestFilter.java,4.0,"@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse res) throws java.io.IOException, javax.servlet.ServletException { if (itr.hasNext()) { itr.next().doFilter(req, res, this); } else { last.doFilter(req, res); } }",0886dd35f8b4d09ad6e662ef9a84b5ab861c40f1,"@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse res) throws java.io.IOException, javax.servlet.ServletException { if (itr.hasNext()) { com.google.gerrit.httpd.AllRequestFilter filter = itr.next(); if (!(initializedFilters.contains(filter))) { initFilter(filter); } filter.doFilter(req, res, this); } else { last.doFilter(req, res); } }",fd47ea7a3d958bc64c8ca95f627a7f6c1eff380b,"doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)","doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",8,5,"@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse res) throws java.io.IOException, javax.servlet.ServletException { while (itr.hasNext()) { com.google.gerrit.httpd.AllRequestFilter filter = itr.next(); if ((initializedFilters.contains(filter)) || (initFilterIfNeeded(filter))) { filter.doFilter(req, res, this); return; } } last.doFilter(req, res); }",cd7e04a8aced7e47e51eecb219c18e1a26e263b9,"doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",123864,102,105
48254,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_group_SystemGroupsIT.java,0.0,"@org.junit.Test public void systemGroupsCreated_ssh() throws com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.acceptance.SshSession session = new com.google.gerrit.acceptance.SshSession(server, admin); java.lang.String result = session.exec(""gerrit ls-groups""); assertTrue(result.contains(""Administrators"")); assertTrue(result.contains(""Anonymous Users"")); assertTrue(result.contains(""Non-Interactive Users"")); assertTrue(result.contains(""Project Owners"")); assertTrue(result.contains(""Registered Users"")); session.close(); }",f0f155d6ee773a53a3b3d802137c4e4afea97aab,"@org.junit.Test public void systemGroupsCreated_ssh() throws com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.acceptance.SshSession session = new com.google.gerrit.acceptance.SshSession(server, admin); java.lang.String result = session.exec(""gerrit ls-groups""); assertTrue(result.contains(""Administrators"")); assertTrue(result.contains(""Anonymous Users"")); assertTrue(result.contains(""Change Owners"")); assertTrue(result.contains(""Non-Interactive Users"")); assertTrue(result.contains(""Project Owners"")); assertTrue(result.contains(""Registered Users"")); session.close(); }",364c6203cc1a94bf3a7adbe2b673026aad655c3f,systemGroupsCreated_ssh(),systemGroupsCreated_ssh(),30,0,"@org.junit.Test public void systemGroupsCreated_ssh() throws com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.acceptance.SshSession session = new com.google.gerrit.acceptance.SshSession(server, admin); java.lang.String result = session.exec(""gerrit ls-groups""); assertTrue(result.contains(""Administrators"")); assertTrue(result.contains(""Anonymous Users"")); assertTrue(result.contains(""Change Owner"")); assertTrue(result.contains(""Non-Interactive Users"")); assertTrue(result.contains(""Project Owners"")); assertTrue(result.contains(""Registered Users"")); session.close(); }",fc7180434004f1ce0b7be6606a1523438f4804fd,systemGroupsCreated_ssh(),134420,149,148
69783,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ExactCommitPredicate.java,0.0,"@java.lang.Override public boolean match(final com.google.gerrit.server.query.change.ChangeData object) throws com.google.gwtorm.server.OrmException { java.lang.String idStr = id.name(); for (com.google.gerrit.reviewdb.client.PatchSet p : object.patchSets()) { if (((p.getRevision()) != null) && ((p.getRevision().get()) != null)) { if (java.util.Objects.equals(p.getRevision().get(), idStr)) { return true; } } } return false; }",693c79e0a316ca3d0249fbeea120938cfdf6505d,"@java.lang.Override public boolean match(final com.google.gerrit.server.query.change.ChangeData object) throws com.google.gwtorm.server.OrmException { for (com.google.gerrit.reviewdb.client.PatchSet p : object.patchSets()) { if (((p.getRevision()) != null) && ((p.getRevision().get()) != null)) { if (java.util.Objects.equals(p.getRevision().get(), getValue())) { return true; } } } return false; }",113a9795a2167e8dcf05c81ce1ca48b7174d90bb,match(com.google.gerrit.server.query.change.ChangeData),match(com.google.gerrit.server.query.change.ChangeData),2,0,"@java.lang.Override public boolean match(final com.google.gerrit.server.query.change.ChangeData object) throws com.google.gwtorm.server.OrmException { java.lang.String id = getValue().toLowerCase(); for (com.google.gerrit.reviewdb.client.PatchSet p : object.patchSets()) { if (((p.getRevision()) != null) && (java.util.Objects.equals(p.getRevision().get(), id))) { return true; } } return false; }",f1f79f2154b76f63513f0063890cdb4869f8651a,match(com.google.gerrit.server.query.change.ChangeData),187645,120,117
99672,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,92.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void toggleWorkInProgressState() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); java.lang.String changeId = r.getChangeId(); gApi.changes().id(changeId).setWorkInProgress(""Needs some refactoring""); com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().id(changeId).get(); assertThat(info.wip).isTrue(); assertThat(com.google.common.collect.Iterables.getLast(info.messages).message).contains(""Needs some refactoring""); gApi.changes().id(changeId).setReadyForReview(""PTAL""); info = gApi.changes().id(changeId).get(); assertThat(info.wip).isFalse(); assertThat(com.google.common.collect.Iterables.getLast(info.messages).message).contains(""PTAL""); }",9e0155acdf0e1d3e7f56faf4bc1f4bc0e016ba9b,,toggleWorkInProgressState(),37,99,"@org.junit.Test public void toggleWorkInProgressState() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); java.lang.String changeId = r.getChangeId(); gApi.changes().id(changeId).setWorkInProgress(""Needs some refactoring""); com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().id(changeId).get(); assertThat(info.workInProgress).isTrue(); assertThat(com.google.common.collect.Iterables.getLast(info.messages).message).contains(""Needs some refactoring""); assertThat(com.google.common.collect.Iterables.getLast(info.messages).tag).contains(ChangeMessagesUtil.TAG_SET_WIP); gApi.changes().id(changeId).setReadyForReview(""PTAL""); info = gApi.changes().id(changeId).get(); assertThat(info.workInProgress).isFalse(); assertThat(com.google.common.collect.Iterables.getLast(info.messages).message).contains(""PTAL""); assertThat(com.google.common.collect.Iterables.getLast(info.messages).tag).contains(ChangeMessagesUtil.TAG_SET_READY); gApi.changes().id(changeId).setWorkInProgress(); info = gApi.changes().id(changeId).get(); assertThat(info.workInProgress).isTrue(); assertThat(com.google.common.collect.Iterables.getLast(info.messages).message).isEqualTo(""Set Work In Progress""); assertThat(com.google.common.collect.Iterables.getLast(info.messages).tag).contains(ChangeMessagesUtil.TAG_SET_WIP); gApi.changes().id(changeId).setReadyForReview(); info = gApi.changes().id(changeId).get(); assertThat(info.workInProgress).isFalse(); assertThat(com.google.common.collect.Iterables.getLast(info.messages).message).isEqualTo(""Set Ready For Review""); assertThat(com.google.common.collect.Iterables.getLast(info.messages).tag).contains(ChangeMessagesUtil.TAG_SET_READY); }",292d1f3c27ce47de7c31cd690394b65baca0df6d,toggleWorkInProgressState(),133623,206,480
144391,src_test_java_com_ericsson_gerrit_plugins_highavailability_health_HealthServletTest.java,4.0,@org.junit.Before public void setUp() throws java.lang.Exception { servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(tempFolder.getRoot().toPath()); },ae4b85bf1977fd1bf6b12c88e7f6545bb303fdec,"@org.junit.Before public void setUp() throws java.lang.Exception { when(currentUserProviderMock.get()).thenReturn(currentUserMock); when(currentUserMock.getCapabilities()).thenReturn(capabilityControlMock); when(capabilityControlMock.canAdministrateServer()).thenReturn(true); servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(tempFolder.getRoot().toPath(), currentUserProviderMock); }",457e2de605c3a7f5c32a8211461a6fb251b49d04,setUp(),setUp(),4,1,@org.junit.Before public void setUp() throws java.lang.Exception { when(currentUserProviderMock.get()).thenReturn(currentUserMock); when(currentUserMock.getCapabilities()).thenReturn(capabilityControlMock); when(capabilityControlMock.canAdministrateServer()).thenReturn(true); servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(currentUserProviderMock); },f4da1013e379bf79c09cc7af2fd28994dcedea45,setUp(),89482,98,90
61602,gerrit-gwtui_src_main_java_com_google_gerrit_client_editor_EditScreen.java,28.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void setLineLength(int columns) { double w = columns * (getCharWidthPx()); columnMargin.getStyle().setMarginLeft(w, Style.Unit.PX); }",d15ba58b6b8190fb57f598b8f23df74e8a71f665,,setLineLength(int),28,42,void setLineLength(int length) { cm.extras().lineLength((Patch.COMMIT_MSG.equals(path) ? 72 : length)); },aaa41418917bebee354b935131f104ef1f73dc90,setLineLength(int),109247,38,35
99997,src_main_java_com_googlesource_gerrit_plugins_uploadvalidator_ValidatorConfig.java,2.0,"public boolean isEnabledForRef(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.reviewdb.client.Project.NameKey projectName, java.lang.String refName, java.lang.String validatorOp) { com.google.gerrit.server.config.PluginConfig conf = configFactory.get(projectName); return (((conf != null) && (isValidConfig(conf, projectName))) && (activeForRef(conf, refName))) && ((((!(hasCriteria(conf, ""skipGroup""))) || (!(canSkipValidation(conf, validatorOp)))) || (!(canSkipRef(conf, refName)))) || (!(canSkipGroup(conf, user)))); }",217fa165b7960e37e3ae9af1514544d5beed05e2,"public boolean isEnabledForRef(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.reviewdb.client.Project.NameKey projectName, java.lang.String refName, java.lang.String validatorOp) { com.google.gerrit.server.config.PluginConfig conf = configFactory.get(projectName); return ((((conf != null) && (isValidConfig(conf, projectName))) && (activeForRef(conf, refName))) && (activeForProject(conf, projectName.get()))) && ((((!(hasCriteria(conf, ""skipGroup""))) || (!(canSkipValidation(conf, validatorOp)))) || (!(canSkipRef(conf, refName)))) || (!(canSkipGroup(conf, user)))); }",351fe013292daa971dd942c350c8652329fee29d,"isEnabledForRef(com.google.gerrit.server.IdentifiedUser,com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String,java.lang.String)","isEnabledForRef(com.google.gerrit.server.IdentifiedUser,com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String,java.lang.String)",5,7,"public boolean isEnabledForRef(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.reviewdb.client.Project.NameKey projectName, java.lang.String refName, java.lang.String validatorOp) { com.google.gerrit.server.config.PluginConfig conf = configFactory.get(projectName); return (((((conf != null) && (isValidConfig(conf, projectName))) && (activeForRef(conf, refName))) && (activeForEmail(conf, user.getAccount().getPreferredEmail()))) && (activeForProject(conf, projectName.get()))) && ((((!(hasCriteria(conf, ""skipGroup""))) || (!(canSkipValidation(conf, validatorOp)))) || (!(canSkipRef(conf, refName)))) || (!(canSkipGroup(conf, user)))); }",e0248e144dc3acbd12df95a89452498225c2f642,"isEnabledForRef(com.google.gerrit.server.IdentifiedUser,com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String,java.lang.String)",36776,164,180
45873,gerrit-server_src_main_java_com_google_gerrit_server_account_PutActive.java,,,,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutActive.Input input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account a = dbProvider.get().accounts().get(rsrc.getUser().getAccountId()); if (a == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""No such account: "" + (rsrc.getUser().getAccountId()))); } if (a.isActive()) { return com.google.gerrit.extensions.restapi.Response.ok(""""); } a.setActive(true); dbProvider.get().accounts().update(java.util.Collections.singleton(a)); byIdCache.evict(a.getId()); return com.google.gerrit.extensions.restapi.Response.created(""""); }",04676e2967388f0985a018f08678ebf5d223c7c3,,"apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.server.account.PutActive$Input)",6,0,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutActive.Input input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account a = dbProvider.get().accounts().get(rsrc.getUser().getAccountId()); if (a == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } if (a.isActive()) { return com.google.gerrit.extensions.restapi.Response.ok(""""); } a.setActive(true); dbProvider.get().accounts().update(java.util.Collections.singleton(a)); byIdCache.evict(a.getId()); return com.google.gerrit.extensions.restapi.Response.created(""""); }",1a728fcf17666314688c4f601f671b3d1010a7de,"apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.server.account.PutActive$Input)",121960,226,215
48012,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private net.codemirror.lib.CodeMirror.RenderLineHandler resizeEmptyLine(final com.google.gerrit.common.changes.Side side) { return new net.codemirror.lib.CodeMirror.RenderLineHandler() { @java.lang.Override public void handle(final net.codemirror.lib.CodeMirror instance, final net.codemirror.lib.CodeMirror.LineHandle handle, final com.google.gwt.dom.client.Element element) { if (linePaddingWidgetMap.containsKey(handle)) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { com.google.gerrit.client.diff.PaddingManager.LinePaddingWidgetWrapper pair = linePaddingWidgetMap.get(handle); int myLineHeight = element.getOffsetHeight(); com.google.gwt.dom.client.Element otherPadding = pair.getElement(); if (!(pair.isCommon())) { com.google.gerrit.client.diff.SideBySide2.setHeightInPx(otherPadding, myLineHeight); } else { lineElementMap.put(handle, element); int otherLine = mapper.lineOnOther(side, instance.getLineNumber(handle)).getLine(); net.codemirror.lib.CodeMirror.LineHandle other = otherCm(instance).getLineHandle(otherLine); if (lineElementMap.containsKey(other)) { com.google.gwt.dom.client.Element otherElement = lineElementMap.get(other); com.google.gwt.dom.client.Element myPadding = linePaddingWidgetMap.get(other).getElement(); int delta = myLineHeight - (otherElement.getOffsetHeight()); if (delta >= 0) { com.google.gerrit.client.diff.SideBySide2.setHeightInPx(otherPadding, delta); com.google.gerrit.client.diff.SideBySide2.setHeightInPx(myPadding, 0); } else { com.google.gerrit.client.diff.SideBySide2.setHeightInPx(otherPadding, 0); com.google.gerrit.client.diff.SideBySide2.setHeightInPx(myPadding, (-delta)); } } } } }); } } }; }",aac2c4dedc2761faa714a59d2ee63643d96211b5,,resizeEmptyLine(com.google.gerrit.common.changes.Side),4,6,"private net.codemirror.lib.CodeMirror.RenderLineHandler resizeEmptyLine(final com.google.gerrit.common.changes.Side side) { return new net.codemirror.lib.CodeMirror.RenderLineHandler() { @java.lang.Override public void handle(final net.codemirror.lib.CodeMirror instance, final net.codemirror.lib.CodeMirror.LineHandle handle, final com.google.gwt.dom.client.Element element) { if (linePaddingWidgetMap.containsKey(handle)) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { com.google.gerrit.client.diff.PaddingManager.LinePaddingWidgetWrapper wrapper = linePaddingWidgetMap.get(handle); int myLineHeight = element.getOffsetHeight(); com.google.gwt.dom.client.Element otherPadding = wrapper.getElement(); if (!(wrapper.isCommon())) { com.google.gerrit.client.diff.SideBySide2.setHeightInPx(otherPadding, myLineHeight); } else { lineElementMap.put(handle, element); int otherLine = mapper.lineOnOther(side, instance.getLineNumber(handle)).getLine(); net.codemirror.lib.CodeMirror.LineHandle other = otherCm(instance).getLineHandle(otherLine); if (lineElementMap.containsKey(other)) { com.google.gwt.dom.client.Element otherElement = lineElementMap.get(other); com.google.gwt.dom.client.Element myPadding = linePaddingWidgetMap.get(other).getElement(); int delta = myLineHeight - (otherElement.getOffsetHeight()); if (delta >= 0) { com.google.gerrit.client.diff.SideBySide2.setHeightInPx(otherPadding, delta); com.google.gerrit.client.diff.SideBySide2.setHeightInPx(myPadding, 0); } else { com.google.gerrit.client.diff.SideBySide2.setHeightInPx(otherPadding, 0); com.google.gerrit.client.diff.SideBySide2.setHeightInPx(myPadding, (-delta)); } } } } }); } } }; }",b233eada18b81f93eb30933e51e655ec3ccb5386,resizeEmptyLine(com.google.gerrit.common.changes.Side),117860,504,504
79298,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_config_GeneralPreferencesIT.java,,,,"@org.junit.After public void cleanUp() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); try { com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, ((com.google.gerrit.reviewdb.client.RefNames.REFS_USERS_DEFAULT) + "":defaults"")); } catch (org.eclipse.jgit.api.errors.TransportException e) { if (e.getMessage().equals(((""Remote does not have "" + (com.google.gerrit.reviewdb.client.RefNames.REFS_USERS_DEFAULT)) + "" available for fetch.""))) { return; } throw e; } allUsersRepo.reset(""defaults""); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), allUsersRepo, ""Delete default preferences"", VersionedAccountPreferences.PREFERENCES, """"); push.rm(RefNames.REFS_USERS_DEFAULT).assertOkStatus(); }",37e882b8505173f564781c89beef03e5ab4a2853,,cleanUp(),5,0,@org.junit.After public void cleanUp() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsers)) { if ((git.exactRef(RefNames.REFS_USERS_DEFAULT)) != null) { org.eclipse.jgit.lib.RefUpdate u = git.updateRef(RefNames.REFS_USERS_DEFAULT); u.setForceUpdate(true); assertThat(u.delete()).isEqualTo(RefUpdate.Result.FORCED); } } accountCache.evictAll(); },61c66be336d24fc39e41b7dd2d5bee6ba6cfd27d,cleanUp(),144824,254,126
46511,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_SshPanel.java,14.0,"void deleteChecked() { final java.util.HashSet<com.google.gerrit.reviewdb.client.AccountSshKey.Id> ids = new java.util.HashSet<com.google.gerrit.reviewdb.client.AccountSshKey.Id>(); for (int row = 1; row < (table.getRowCount()); row++) { final com.google.gerrit.client.account.SshKeyInfo k = getRowItem(row); if ((k != null) && (((com.google.gwt.user.client.ui.CheckBox) (table.getWidget(row, 1))).getValue())) { ids.add(new com.google.gerrit.reviewdb.client.AccountSshKey.Id(com.google.gerrit.client.Gerrit.getUserAccount().getId(), k.seq())); } } if (ids.isEmpty()) { updateDeleteButton(); } else { Util.ACCOUNT_SEC.deleteSshKeys(ids, new com.google.gerrit.client.rpc.GerritCallback<com.google.gwtjsonrpc.common.VoidResult>() { public void onSuccess(final com.google.gwtjsonrpc.common.VoidResult result) { for (int row = 1; row < (table.getRowCount());) { final com.google.gerrit.client.account.SshKeyInfo k = getRowItem(row); if ((k != null) && (ids.contains(new com.google.gerrit.reviewdb.client.AccountSshKey.Id(com.google.gerrit.client.Gerrit.getUserAccount().getId(), k.seq())))) { table.removeRow(row); } else { row++; } } if ((table.getRowCount()) == 1) { display(java.util.Collections.<com.google.gerrit.client.account.SshKeyInfo>emptyList()); } else { updateDeleteButton(); } } }); } }",aa25b9683c163d1af772861bc916215096bbb706,"void deleteChecked() { final java.util.HashSet<java.lang.Integer> sequenceNumbers = new java.util.HashSet<java.lang.Integer>(); for (int row = 1; row < (table.getRowCount()); row++) { final com.google.gerrit.client.account.SshKeyInfo k = getRowItem(row); if ((k != null) && (((com.google.gwt.user.client.ui.CheckBox) (table.getWidget(row, 1))).getValue())) { sequenceNumbers.add(k.seq()); } } if (sequenceNumbers.isEmpty()) { updateDeleteButton(); } else { com.google.gerrit.client.account.AccountApi.deleteSshKeys(""self"", sequenceNumbers, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.VoidResult>() { public void onSuccess(com.google.gerrit.client.VoidResult result) { for (int row = 1; row < (table.getRowCount());) { final com.google.gerrit.client.account.SshKeyInfo k = getRowItem(row); if ((k != null) && (sequenceNumbers.contains(k.seq()))) { table.removeRow(row); } else { row++; } } if ((table.getRowCount()) == 1) { display(java.util.Collections.<com.google.gerrit.client.account.SshKeyInfo>emptyList()); } else { updateDeleteButton(); } } @java.lang.Override public void onFailure(java.lang.Throwable caught) { refreshSshKeys(); super.onFailure(caught); } }); } }",bdf7c2bed7173254f079bd7e42563e729bcad9f9,deleteChecked(),deleteChecked(),5,11,"void deleteChecked() { final java.util.HashSet<java.lang.Integer> sequenceNumbers = new java.util.HashSet<java.lang.Integer>(); for (int row = 1; row < (table.getRowCount()); row++) { final com.google.gerrit.client.account.SshKeyInfo k = getRowItem(row); if ((k != null) && (((com.google.gwt.user.client.ui.CheckBox) (table.getWidget(row, 1))).getValue())) { sequenceNumbers.add(k.seq()); } } if (sequenceNumbers.isEmpty()) { updateDeleteButton(); } else { com.google.gerrit.client.account.AccountApi.deleteSshKeys(""self"", sequenceNumbers, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.VoidResult>() { public void onSuccess(com.google.gerrit.client.VoidResult result) { for (int row = 1; row < (table.getRowCount());) { final com.google.gerrit.client.account.SshKeyInfo k = getRowItem(row); if ((k != null) && (sequenceNumbers.contains(k.seq()))) { table.removeRow(row); } else { row++; } } if ((table.getRowCount()) == 1) { display(java.util.Collections.<com.google.gerrit.client.account.SshKeyInfo>emptyList()); } else { updateDeleteButton(); } } @java.lang.Override public void onFailure(java.lang.Throwable caught) { refreshSshKeys(); updateDeleteButton(); super.onFailure(caught); } }); } }",61e39206992cd2552bf113e217e0d65eb75fae54,deleteChecked(),209845,353,357
37754,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeOp.java,0.0,"private void preMerge() throws com.google.gerrit.server.git.MergeException { final com.google.gerrit.server.git.SubmitStrategy strategy = createStrategy(); mergeTip = strategy.run(branchTip, toMerge); refLogIdent = strategy.getRefLogIdent(); commits.putAll(strategy.getNewCommits()); }",f65d5be2816be8d53f99eda2a59139177aaadc30,"private void preMerge(final com.google.gerrit.reviewdb.client.Project.SubmitType submitType, final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.MergeException { final com.google.gerrit.server.git.SubmitStrategy strategy = createStrategy(submitType); mergeTip = strategy.run(branchTip, toMerge); refLogIdent = strategy.getRefLogIdent(); commits.putAll(strategy.getNewCommits()); }",53f922b42dad519616df31294687419703f4a846,preMerge(),"preMerge(com.google.gerrit.reviewdb.client.Project.SubmitType,java.util.List)",5,18,"private void preMerge(final com.google.gerrit.server.git.SubmitStrategy strategy, final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.MergeException { mergeTip = strategy.run(branchTip, toMerge); refLogIdent = strategy.getRefLogIdent(); commits.putAll(strategy.getNewCommits()); }",602aaf820d8384e8ef00b8ead50bd41b168a68c2,"preMerge(com.google.gerrit.server.git.SubmitStrategy,java.util.List)",138788,122,95
62372,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_Header.java,8.0,"void init(com.google.gerrit.client.diff.PreferencesAction pa, java.util.List<com.google.gerrit.client.DiffWebLinkInfo> webLinks) { prefsAction = pa; prefsAction.setPartner(preferences); if (webLinks != null) { for (com.google.gerrit.client.DiffWebLinkInfo webLink : webLinks) { webLinksPanel.add(webLink.toAnchor()); } } }",4c0c9abaeb0f9fd24a8b294010df27776cf5b731,"void init(com.google.gerrit.client.diff.PreferencesAction pa, java.util.List<com.google.gerrit.client.ui.InlineHyperlink> links, java.util.List<com.google.gerrit.client.DiffWebLinkInfo> webLinks) { prefsAction = pa; prefsAction.setPartner(preferences); if (webLinks != null) { for (com.google.gerrit.client.DiffWebLinkInfo webLink : webLinks) { webLinksPanel.add(webLink.toAnchor()); } } if (links != null) { for (com.google.gerrit.client.ui.InlineHyperlink link : links) { webLinksPanel.add(link); } } }",6416808b7fe2f2df00e7870545a414358a41761c,"init(com.google.gerrit.client.diff.PreferencesAction,java.util.List)","init(com.google.gerrit.client.diff.PreferencesAction,java.util.List,java.util.List)",7,3,"void init(com.google.gerrit.client.diff.PreferencesAction pa, java.util.List<com.google.gerrit.client.ui.InlineHyperlink> links) { prefsAction = pa; prefsAction.setPartner(preferences); for (com.google.gerrit.client.ui.InlineHyperlink link : links) { linkPanel.add(link); } }",d8a109e1569d79c8ded00826fbdea063acd28402,"init(com.google.gerrit.client.diff.PreferencesAction,java.util.List)",145983,163,86
65679,src_main_java_com_googlesource_gerrit_plugins_deleteproject_DeleteProject.java,0.0,"public void assertCanDelete(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { try { pcHandler.assertCanDelete(rsrc); dbHandler.assertCanDelete(rsrc.getControl().getProject()); } catch (com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }",42935185270edaec68365dcf13da396ba0258cf9,"public void assertCanDelete(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { try { pcHandler.assertCanDelete(rsrc); dbHandler.assertCanDelete(rsrc.getControl().getProject()); fsHandler.assertCanDelete(rsrc); } catch (com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }",f3bc651a461863ec332262ac00fc4e38e1ec714a,assertCanDelete(com.google.gerrit.server.project.ProjectResource),assertCanDelete(com.google.gerrit.server.project.ProjectResource),7,5,"public void assertCanDelete(com.google.gerrit.server.project.ProjectResource rsrc, com.googlesource.gerrit.plugins.deleteproject.DeleteProject.Input input) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { try { pcHandler.assertCanDelete(rsrc); dbHandler.assertCanDelete(rsrc.getControl().getProject()); fsHandler.assertCanDelete(rsrc, (input == null ? false : input.preserve)); } catch (com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }",3cef483c0d4b338e3814e888eda7358e6b7afbb3,"assertCanDelete(com.google.gerrit.server.project.ProjectResource,com.googlesource.gerrit.plugins.deleteproject.DeleteProject$Input)",175558,135,166
57932,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_client_PatchLineComment.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void fromRange(com.google.gerrit.extensions.common.Comment.Range r) { range = ((range) == null) ? null : new com.google.gerrit.reviewdb.client.CommentRange(range.startLine, range.startCharacter, range.endLine, range.endCharacter); }",54324c30c3128fc05173caf774ff8103a5a9cd32,,fromRange(com.google.gerrit.extensions.common.Comment.Range),13,21,"public void fromRange(com.google.gerrit.extensions.common.Comment.Range r) { range = (r == null) ? null : new com.google.gerrit.reviewdb.client.CommentRange(range.startLine, range.startCharacter, range.endLine, range.endCharacter); }",c4f0ae5ea971fe06d415cc27cfb55d05630a8ef5,fromRange(com.google.gerrit.extensions.common.Comment.Range),6447,73,71
35221,gerrit-pgm_src_main_java_com_google_gerrit_pgm_ExportReviewNotes.java,0.0,@java.lang.Override protected void configure() { install(com.google.gerrit.server.schema.SchemaVersionCheck.module()); bind(com.google.gerrit.common.data.ApprovalTypes.class).toProvider(com.google.gerrit.server.config.ApprovalTypesProvider.class).in(Scopes.SINGLETON); bind(java.lang.String.class).annotatedWith(com.google.gerrit.server.config.CanonicalWebUrl.class).toProvider(com.google.gerrit.server.config.CanonicalWebUrlProvider.class).in(Scopes.SINGLETON); bind(com.google.gerrit.server.cache.CachePool.class); install(com.google.gerrit.server.account.AccountCacheImpl.module()); install(com.google.gerrit.server.account.GroupCacheImpl.module()); install(new com.google.gerrit.ehcache.EhcachePoolImpl.Module()); install(new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { factory(CreateCodeReviewNotes.Factory.class); } }); install(new com.google.gerrit.lifecycle.LifecycleModule() { @java.lang.Override protected void configure() { listener().to(LocalDiskRepositoryManager.Lifecycle.class); } }); },6ed0386f0b658104fe48e6d6a139a91668c57299,@java.lang.Override protected void configure() { install(com.google.gerrit.server.schema.SchemaVersionCheck.module()); bind(com.google.gerrit.common.data.ApprovalTypes.class).toProvider(com.google.gerrit.server.config.ApprovalTypesProvider.class).in(Scopes.SINGLETON); bind(java.lang.String.class).annotatedWith(com.google.gerrit.server.config.CanonicalWebUrl.class).toProvider(com.google.gerrit.server.config.CanonicalWebUrlProvider.class).in(Scopes.SINGLETON); install(com.google.gerrit.server.account.AccountCacheImpl.module()); install(com.google.gerrit.server.account.GroupCacheImpl.module()); install(new com.google.gerrit.ehcache.EhcachePoolImpl.Module()); install(new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { factory(CreateCodeReviewNotes.Factory.class); factory(NotesBranchUtil.Factory.class); } }); install(new com.google.gerrit.lifecycle.LifecycleModule() { @java.lang.Override protected void configure() { listener().to(LocalDiskRepositoryManager.Lifecycle.class); } }); },71086feb593278f2e47a46e519e2586388c1a17b,configure(),configure(),7,0,@java.lang.Override protected void configure() { install(com.google.gerrit.server.schema.SchemaVersionCheck.module()); bind(com.google.gerrit.common.data.ApprovalTypes.class).toProvider(com.google.gerrit.server.config.ApprovalTypesProvider.class).in(Scopes.SINGLETON); bind(java.lang.String.class).annotatedWith(com.google.gerrit.server.config.CanonicalWebUrl.class).toProvider(com.google.gerrit.server.config.CanonicalWebUrlProvider.class).in(Scopes.SINGLETON); install(com.google.gerrit.server.account.AccountCacheImpl.module()); install(com.google.gerrit.server.account.GroupCacheImpl.module()); install(new com.google.gerrit.server.cache.h2.DefaultCacheFactory.Module()); install(new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { factory(CreateCodeReviewNotes.Factory.class); factory(NotesBranchUtil.Factory.class); } }); install(new com.google.gerrit.lifecycle.LifecycleModule() { @java.lang.Override protected void configure() { listener().to(LocalDiskRepositoryManager.Lifecycle.class); } }); },fd97461e549adc597945f0b71f7c1b0ab4bb6507,configure(),168751,281,285
47323,gitiles-servlet_src_main_java_com_google_gitiles_GitilesView.java,9.0,"public com.google.gitiles.GitilesView.Builder setPathPart(java.lang.String path) { switch (type) { case PATH : case DIFF : this.path = com.google.gitiles.GitilesView.maybeTrimLeadingAndTrailingSlash(checkNotNull(path)); break; case DESCRIBE : case REFS : case LOG : this.path = (path != null) ? com.google.gitiles.GitilesView.maybeTrimLeadingAndTrailingSlash(path) : null; break; default : checkState((path == null), ""cannot set path on %s view"", type); this.path = path; break; } return this; }",4a19c145905154f3a16e90eb2cc5209d9c8125e3,"public com.google.gitiles.GitilesView.Builder setPathPart(java.lang.String path) { switch (type) { case PATH : case DIFF : case DESCRIBE : case REFS : case LOG : break; default : checkState((path == null), ""cannot set path on %s view"", type); break; } this.path = (path != null) ? com.google.gitiles.GitilesView.maybeTrimLeadingAndTrailingSlash(path) : null; return this; }",f4a209ca15c040eaa1d934972e9417195fa9571e,setPathPart(java.lang.String),setPathPart(java.lang.String),2,9,"public com.google.gitiles.GitilesView.Builder setPathPart(java.lang.String path) { switch (type) { case PATH : case DIFF : checkState((path != null), ""cannot set null path on %s view"", type); break; case DESCRIBE : case REFS : case LOG : break; default : checkState((path == null), ""cannot set path on %s view"", type); break; } this.path = (path != null) ? com.google.gitiles.GitilesView.maybeTrimLeadingAndTrailingSlash(path) : null; return this; }",02a89cf369de6feb6090c9f55b55512037b189ad,setPathPart(java.lang.String),81567,122,143
76892,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySideChunkManager.java,0.0,"private void render(com.google.gerrit.client.diff.DiffInfo.Region region, java.lang.String diffColor) { com.google.gerrit.client.diff.LineMapper mapper = getLineMapper(); int startA = mapper.getLineA(); int startB = mapper.getLineB(); com.google.gwt.core.client.JsArrayString a = region.a(); com.google.gwt.core.client.JsArrayString b = region.b(); int aLen = (a != null) ? a.length() : 0; int bLen = (b != null) ? b.length() : 0; java.lang.String color = ((a == null) || (b == null)) ? diffColor : SideBySideTable.style.intralineBg(); colorLines(cmA, color, startA, aLen); colorLines(cmB, color, startB, bLen); markEdit(cmA, startA, a, region.editA()); markEdit(cmB, startB, b, region.editB()); addPadding(cmA, ((startA + aLen) - 1), (bLen - aLen)); addPadding(cmB, ((startB + bLen) - 1), (aLen - bLen)); addGutterTag(region, startA, startB); mapper.appendReplace(aLen, bLen); int endA = (mapper.getLineA()) - 1; int endB = (mapper.getLineB()) - 1; if (aLen > 0) { addDiffChunk(cmB, endB, endA, aLen, (bLen > 0)); } if (bLen > 0) { addDiffChunk(cmA, endA, endB, bLen, (aLen > 0)); } }",a777f2a859c880f01dce77309a0a4633a3fb9a9d,"private void render(com.google.gerrit.client.diff.DiffInfo.Region region, java.lang.String diffColor) { int startA = mapper.getLineA(); int startB = mapper.getLineB(); com.google.gwt.core.client.JsArrayString a = region.a(); com.google.gwt.core.client.JsArrayString b = region.b(); int aLen = (a != null) ? a.length() : 0; int bLen = (b != null) ? b.length() : 0; java.lang.String color = ((a == null) || (b == null)) ? diffColor : SideBySideTable.style.intralineBg(); colorLines(cmA, color, startA, aLen); colorLines(cmB, color, startB, bLen); markEdit(cmA, startA, a, region.editA()); markEdit(cmB, startB, b, region.editB()); addPadding(cmA, ((startA + aLen) - 1), (bLen - aLen)); addPadding(cmB, ((startB + bLen) - 1), (aLen - bLen)); addGutterTag(region, startA, startB); mapper.appendReplace(aLen, bLen); int endA = (mapper.getLineA()) - 1; int endB = (mapper.getLineB()) - 1; if (aLen > 0) { addDiffChunk(cmB, endB, endA, aLen, (bLen > 0)); } if (bLen > 0) { addDiffChunk(cmA, endA, endB, bLen, (aLen > 0)); } }",dba092b53c64f72f30053580d985f48832b0679d,"render(com.google.gerrit.client.diff.DiffInfo.Region,java.lang.String)","render(com.google.gerrit.client.diff.DiffInfo.Region,java.lang.String)",4,0,"private void render(com.google.gerrit.client.diff.DiffInfo.Region region, java.lang.String diffColor) { int startA = lineMapper.getLineA(); int startB = lineMapper.getLineB(); com.google.gwt.core.client.JsArrayString a = region.a(); com.google.gwt.core.client.JsArrayString b = region.b(); int aLen = (a != null) ? a.length() : 0; int bLen = (b != null) ? b.length() : 0; java.lang.String color = ((a == null) || (b == null)) ? diffColor : SideBySideTable.style.intralineBg(); colorLines(cmA, color, startA, aLen); colorLines(cmB, color, startB, bLen); markEdit(cmA, startA, a, region.editA()); markEdit(cmB, startB, b, region.editB()); addPadding(cmA, ((startA + aLen) - 1), (bLen - aLen)); addPadding(cmB, ((startB + bLen) - 1), (aLen - bLen)); addGutterTag(region, startA, startB); lineMapper.appendReplace(aLen, bLen); int endA = (lineMapper.getLineA()) - 1; int endB = (lineMapper.getLineB()) - 1; if (aLen > 0) { addDiffChunk(cmB, endB, endA, aLen, (bLen > 0)); } if (bLen > 0) { addDiffChunk(cmA, endA, endB, bLen, (aLen > 0)); } }",5a6530d5a9e75e83d5e6d18200c5255193f01a6d,"render(com.google.gerrit.client.diff.DiffInfo.Region,java.lang.String)",135504,376,381
148032,java_com_google_gerrit_server_restapi_group_ListMembers.java,10.0,"private static void checkSameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) { checkState(group.equals(groupControl.getGroup()), ""Specified group and groupControl do not match""); }",48d6d6c6c886127c52d6254c6cc304b5f9fb13b4,"private static void checkSameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) { checkState(group.equals(groupControl.getGroup()), ""Specified account and groupControl do not match""); }",b66ae4f17eadf8499c7567877520e572f92db43b,"checkSameGroup(com.google.gerrit.common.data.GroupDescription$Internal,com.google.gerrit.server.account.GroupControl)","checkSameGroup(com.google.gerrit.common.data.GroupDescription$Internal,com.google.gerrit.server.account.GroupControl)",17,10,"private static void checkSameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) { checkState(group.equals(groupControl.getGroup()), ""Specified group and groupControl do not match""); }",48d6d6c6c886127c52d6254c6cc304b5f9fb13b4,"checkSameGroup(com.google.gerrit.common.data.GroupDescription$Internal,com.google.gerrit.server.account.GroupControl)",215657,64,64
76182,app_src_main_java_com_google_reviewit_ReviewChangesFragment.java,0.0,"protected void postExecute(com.google.reviewit.ReviewChangesFragment.ChangeListData changeListData) { super.postExecute(changeListData); if ((getActivity()) == null) { return; } getActivity().invalidateOptionsMenu(); setInvisible(progress); setGone(initialProgress, reloadButton); if ((changeListData.error) != null) { statusText.setText(changeListData.error); return; } if (!(changeListData.changeList.isEmpty())) { setGone(statusText); for (com.google.reviewit.app.Change change : changeListData.changeList) { com.google.reviewit.widget.ChangeEntry changeEntry = new com.google.reviewit.widget.ChangeEntry(getContext()); changeEntry.init(getApp(), change); changeList.addView(changeEntry); addSeparator(changeList); } } else { statusText.setText(getString(R.string.no_changes_match)); } }",a2914b7368c5155d3108ee08d77afdfb32b75baa,"protected void postExecute(com.google.reviewit.ReviewChangesFragment.ChangeListData changeListData) { super.postExecute(changeListData); if ((getActivity()) == null) { return; } getActivity().invalidateOptionsMenu(); setInvisible(progress); setGone(reloadButton); if ((initialProgress.getVisibility()) != (android.view.View.GONE)) { setGone(initialProgress); com.google.reviewit.util.TaskObserver.enableProgressBar(getWindow()); } if ((changeListData.error) != null) { statusText.setText(changeListData.error); return; } if (!(changeListData.changeList.isEmpty())) { setGone(statusText); for (com.google.reviewit.app.Change change : changeListData.changeList) { com.google.reviewit.widget.ChangeEntry changeEntry = new com.google.reviewit.widget.ChangeEntry(getContext()); changeEntry.init(getApp(), change); changeList.addView(changeEntry); addSeparator(changeList); } } else { statusText.setText(getString(R.string.no_changes_match)); } }",df7ab3a7eab64bb2c4942f6f1f8200b26678c652,postExecute(com.google.reviewit.ReviewChangesFragment$ChangeListData),postExecute(com.google.reviewit.ReviewChangesFragment$ChangeListData),2,1,"@java.lang.Override protected void onPostExecute(com.google.reviewit.ReviewChangesFragment.ChangeListData changeListData) { super.onPostExecute(changeListData); if ((getActivity()) == null) { return; } getActivity().invalidateOptionsMenu(); setInvisible(progress); setGone(initialProgress, reloadButton); if ((changeListData.error) != null) { statusText.setText(changeListData.error); return; } if (!(changeListData.changeList.isEmpty())) { setGone(statusText); for (com.google.reviewit.app.Change change : changeListData.changeList) { com.google.reviewit.widget.ChangeEntry changeEntry = new com.google.reviewit.widget.ChangeEntry(getContext()); changeEntry.init(getApp(), change); changeList.addView(changeEntry); addSeparator(changeList); } } else { statusText.setText(getString(R.string.no_changes_match)); } }",d1cc0514de4bcc32406fbb6ec18a51888efa0ebe,onPostExecute(com.google.reviewit.ReviewChangesFragment$ChangeListData),195830,256,218
80285,src_main_java_com_googlesource_gerrit_plugins_lfs_s3_S3LargeFileRepository.java,0.0,"private static org.eclipse.jgit.lfs.server.s3.S3Config getS3Config(com.google.gerrit.server.config.PluginConfigFactory configFactory, java.lang.String pluginName) { com.google.gerrit.server.config.PluginConfig cfg = configFactory.getFromGerritConfig(pluginName); java.lang.String region = cfg.getString(""region"", null); java.lang.String bucket = cfg.getString(""bucket"", null); java.lang.String storageClass = cfg.getString(""storageClass"", ""REDUCED_REDUNDANCY""); java.lang.String accessKey = cfg.getString(""accessKey"", null); java.lang.String secretKey = cfg.getString(""secretKey"", null); int expirationSeconds = cfg.getInt(""expirationSeconds"", 60); boolean disableSslVerify = cfg.getBoolean(""disableSslVerify"", false); return new org.eclipse.jgit.lfs.server.s3.S3Config(region, bucket, storageClass, accessKey, secretKey, expirationSeconds, disableSslVerify); }",2abfe3c09eea32e1d3923a147c9560d6c94857e4,"private static org.eclipse.jgit.lfs.server.s3.S3Config getS3Config(com.google.gerrit.server.config.PluginConfigFactory configFactory, java.lang.String pluginName) { org.eclipse.jgit.lib.Config pluginCfg = configFactory.getGlobalPluginConfig(pluginName); java.lang.String section = ""s3""; java.lang.String region = pluginCfg.getString(section, null, ""region""); java.lang.String bucket = pluginCfg.getString(section, null, ""bucket""); java.lang.String storageClass = com.google.common.base.MoreObjects.firstNonNull(pluginCfg.getString(section, null, ""storageClass""), ""REDUCED_REDUNDANCY""); int expirationSeconds = pluginCfg.getInt(section, null, ""expirationSeconds"", 60); boolean disableSslVerify = pluginCfg.getBoolean(section, null, ""disableSslVerify"", false); com.google.gerrit.server.config.PluginConfig cfg = configFactory.getFromGerritConfig(pluginName); java.lang.String accessKey = cfg.getString(""accessKey"", null); java.lang.String secretKey = cfg.getString(""secretKey"", null); return new org.eclipse.jgit.lfs.server.s3.S3Config(region, bucket, storageClass, accessKey, secretKey, expirationSeconds, disableSslVerify); }",5d1ef637d76a866e34751d4eb00a187d8ec64145,"getS3Config(com.google.gerrit.server.config.PluginConfigFactory,java.lang.String)","getS3Config(com.google.gerrit.server.config.PluginConfigFactory,java.lang.String)",4,0,"private static org.eclipse.jgit.lfs.server.s3.S3Config getS3Config(com.google.gerrit.server.config.PluginConfigFactory configFactory, java.lang.String pluginName) { org.eclipse.jgit.lib.Config config = configFactory.getGlobalPluginConfig(pluginName); java.lang.String section = LfsBackend.S3.name(); java.lang.String region = config.getString(section, null, ""region""); java.lang.String bucket = config.getString(section, null, ""bucket""); java.lang.String storageClass = com.google.common.base.MoreObjects.firstNonNull(config.getString(section, null, ""storageClass""), ""REDUCED_REDUNDANCY""); int expirationSeconds = config.getInt(section, null, ""expirationSeconds"", 60); boolean disableSslVerify = config.getBoolean(section, null, ""disableSslVerify"", false); com.google.gerrit.server.config.PluginConfig pluginCfg = configFactory.getFromGerritConfig(pluginName); java.lang.String accessKey = pluginCfg.getString(""s3AccessKey"", null); java.lang.String secretKey = pluginCfg.getString(""s3SecretKey"", null); return new org.eclipse.jgit.lfs.server.s3.S3Config(region, bucket, storageClass, accessKey, secretKey, expirationSeconds, disableSslVerify); }",1bd4593184d1abfabaedae6c78c3182b9520d9d7,"getS3Config(com.google.gerrit.server.config.PluginConfigFactory,java.lang.String)",174602,304,310
63700,gerrit-server_src_main_java_com_google_gerrit_server_change_Submit.java,9.0,"private boolean areChangesSubmittable(java.util.List<com.google.gerrit.server.query.change.ChangeData> changes, com.google.gerrit.server.IdentifiedUser identifiedUser) { for (com.google.gerrit.server.query.change.ChangeData c : changes) { try { com.google.gerrit.server.project.ChangeControl changeControl = c.changeControl().forUser(identifiedUser); if (!(changeControl.canSubmit())) { return false; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.change.Submit.log.error((""Failed to get a ChangeControl for Change.Id "" + (java.lang.String.valueOf(c.getId()))), e); return false; } } return true; }",0758287bfdb1a62872c4e5df53fba57dbb5e3814,"private boolean areChangesSubmittable(java.util.List<com.google.gerrit.server.query.change.ChangeData> changes, com.google.gerrit.server.IdentifiedUser identifiedUser) { for (com.google.gerrit.server.query.change.ChangeData c : changes) { try { com.google.gerrit.server.project.ChangeControl changeControl = c.changeControl().forUser(identifiedUser); if (!(changeControl.canSubmit())) { return false; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.change.Submit.log.error((""Failed to get a ChangeControl for Change.Id "" + (java.lang.String.valueOf(c.getId()))), e); return false; } } for (com.google.gerrit.server.query.change.ChangeData c : changes) { try { checkSubmitRule(c, c.currentPatchSet(), false); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.extensions.restapi.ResourceConflictException e) { return false; } } return true; }",7b57ea71075298afaf9dc689aea8a3383a51dff2,"areChangesSubmittable(java.util.List,com.google.gerrit.server.IdentifiedUser)","areChangesSubmittable(java.util.List,com.google.gerrit.server.IdentifiedUser)",22,1,"private java.lang.String problemsForSubmittingChanges(java.util.List<com.google.gerrit.server.query.change.ChangeData> changes, com.google.gerrit.server.IdentifiedUser identifiedUser) { for (com.google.gerrit.server.query.change.ChangeData c : changes) { try { com.google.gerrit.server.project.ChangeControl changeControl = c.changeControl().forUser(identifiedUser); if (!(changeControl.isVisible(dbProvider.get()))) { return com.google.gerrit.server.change.Submit.BLOCKED_HIDDEN_TOPIC_TOOLTIP; } if (!(changeControl.canSubmit())) { return com.google.gerrit.server.change.Submit.BLOCKED_TOPIC_TOOLTIP; } checkSubmitRule(c, c.currentPatchSet(), false); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.change.Submit.log.error(""Error checking if change is submittable"", e); throw new com.google.gwtorm.server.OrmRuntimeException(e); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { return com.google.gerrit.server.change.Submit.BLOCKED_TOPIC_TOOLTIP; } } return null; }",fb4b7b7b4df9657bf5d33b556de48af1621aa7b4,"problemsForSubmittingChanges(java.util.List,com.google.gerrit.server.IdentifiedUser)",108217,264,300
30726,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_MyWatchedProjectsScreen.java,6.0,"protected void displayPopup() { popingUp = true; if (firstPopupLoad) { populateProjects(); } else { popup.setPopupPositionAndShow(popupPosition); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(popup); com.google.gwtexpui.globalkey.client.GlobalKey.addApplication(popup, new com.google.gwtexpui.globalkey.client.HidePopupPanelCommand(0, com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE, popup)); projectsTab.setRegisterKeys(true); projectsTab.finishDisplay(); if ((regWindowResize) == null) { regWindowResize = com.google.gwt.user.client.Window.addResizeHandler(this); } popingUp = false; } }",ded5e8e435b22234ac59c4980abbbf7965cd747a,protected void displayPopup() { calculatePopupCoordinates(); projectListPopup.display(); if ((regWindowResize) == null) { regWindowResize = com.google.gwt.user.client.Window.addResizeHandler(this); } },f9106cd633125d00b36fa3bd52299ed901374d87,displayPopup(),displayPopup(),9,7,"protected void displayPopup() { popingUp = true; if (firstPopupLoad) { populateProjects(); } else { popup.setPopupPositionAndShow(popupPosition); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(popup); com.google.gwtexpui.globalkey.client.GlobalKey.addApplication(popup, new com.google.gwtexpui.globalkey.client.HidePopupPanelCommand(0, com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE, popup)); projectsTab.setRegisterKeys(true); projectsTab.finishDisplay(); if ((regWindowResize) == null) { regWindowResize = com.google.gwt.user.client.Window.addResizeHandler(this); } popingUp = false; } }",ded5e8e435b22234ac59c4980abbbf7965cd747a,displayPopup(),207418,51,174
40123,gerrit-server_src_main_java_com_google_gerrit_server_account_GroupBackend.java,1.0,java.util.Collection<com.google.gerrit.common.data.GroupReference> suggest(java.lang.String name);,f71bc87b683b2ed99cc4521a15a43d0638207ea5,"java.util.Collection<com.google.gerrit.common.data.GroupReference> suggest(java.lang.String name, @javax.annotation.Nullable com.google.gerrit.reviewdb.client.Project project);",d4313a24415efc1a980ab1d8aa68eaaaa3f9fe49,suggest(java.lang.String),"suggest(java.lang.String,com.google.gerrit.reviewdb.client.Project)",3,2,"java.util.Collection<com.google.gerrit.common.data.GroupReference> suggest(java.lang.String name, @javax.annotation.Nullable com.google.gerrit.server.project.ProjectControl project);",a85546892bb718dd60265165b6dde4270b86140e,"suggest(java.lang.String,com.google.gerrit.server.project.ProjectControl)",14460,51,50
35235,gerrit-httpd_src_main_java_com_google_gerrit_httpd_RestApiServlet.java,2.0,"@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException, javax.servlet.ServletException { com.google.gerrit.httpd.RestApiServlet.noCache(res); try { super.service(req, res); } catch (java.lang.Error err) { com.google.gerrit.httpd.RestApiServlet.handleError(err, req, res); } catch (java.lang.RuntimeException err) { com.google.gerrit.httpd.RestApiServlet.handleError(err, req, res); } }",41c4c6b9f5772a10eea1039df28a19ff51555635,"@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException, javax.servlet.ServletException { com.google.gerrit.httpd.RestApiServlet.noCache(res); try { checkRequiresCapability(); super.service(req, res); } catch (java.lang.Error err) { com.google.gerrit.httpd.RestApiServlet.handleError(err, req, res); } catch (java.lang.RuntimeException err) { com.google.gerrit.httpd.RestApiServlet.handleError(err, req, res); } }",85c737a2859c38bb078ae421243172e01b9658c7,"service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)","service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",3,2,"@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException, javax.servlet.ServletException { com.google.gerrit.httpd.RestApiServlet.noCache(res); try { checkRequiresCapability(); super.service(req, res); } catch (com.google.gerrit.httpd.RestApiServlet.RequireCapabilityException err) { res.setStatus(HttpServletResponse.SC_FORBIDDEN); com.google.gerrit.httpd.RestApiServlet.noCache(res); com.google.gerrit.httpd.RestApiServlet.sendText(req, res, err.getMessage()); } catch (java.lang.Error err) { com.google.gerrit.httpd.RestApiServlet.handleError(err, req, res); } catch (java.lang.RuntimeException err) { com.google.gerrit.httpd.RestApiServlet.handleError(err, req, res); } }",1c4104741e067da9eeabdcf1d5f838e8d10ebf60,"service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",186803,143,218
60787,gerrit-server_src_main_java_com_google_gerrit_server_project_BranchesCollection.java,3.0,"@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.lang.String branchName = id.get(); if ((!(branchName.startsWith(Constants.R_REFS))) && (!(branchName.equals(Constants.HEAD)))) { branchName = (org.eclipse.jgit.lib.Constants.R_HEADS) + branchName; } java.util.List<com.google.gerrit.server.project.ListBranches.BranchInfo> branches = list.apply(parent); for (com.google.gerrit.server.project.ListBranches.BranchInfo b : branches) { if (branchName.equals(b.ref)) { return new com.google.gerrit.server.project.BranchResource(parent.getControl(), b); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }",48897be003494fc047a9daa2844bfa6d9f9e1304,"@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.lang.String branchName = id.get(); if ((!(branchName.startsWith(Constants.R_REFS))) && (!(branchName.equals(Constants.HEAD)))) { branchName = (org.eclipse.jgit.lib.Constants.R_HEADS) + branchName; } java.util.List<com.google.gerrit.server.project.ListBranches.BranchInfo> branches = list.apply(parent); for (com.google.gerrit.server.project.ListBranches.BranchInfo b : branches) { if (branchName.equals(b.ref)) { return new com.google.gerrit.server.project.BranchResource(parent.getControl(), b); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }",d9b92b01b5e1ce7a3b1304be840007ea4ee24493,"parse(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)","parse(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)",2,3,"@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.lang.String branchName = id.get(); if ((!(branchName.startsWith(Constants.R_REFS))) && (!(branchName.equals(Constants.HEAD)))) { branchName = (org.eclipse.jgit.lib.Constants.R_HEADS) + branchName; } java.util.List<com.google.gerrit.server.project.ListBranches.BranchInfo> branches = list.get().apply(parent); for (com.google.gerrit.server.project.ListBranches.BranchInfo b : branches) { if (branchName.equals(b.ref)) { return new com.google.gerrit.server.project.BranchResource(parent.getControl(), b); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }",402604058c539127cf69df9cedf96ce2efd31287,"parse(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)",190072,265,267
97931,gerrit-server_src_main_java_com_google_gerrit_server_account_CreateEmail.java,1.0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EmailInfo> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.common.errors.EmailException, com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to add email address""); } if (input == null) { input = new com.google.gerrit.extensions.api.accounts.EmailInput(); } if (!(com.google.gerrit.server.mail.send.OutgoingEmailValidator.isValid(email))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""invalid email address""); } if ((input.noConfirmation) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to use no_confirmation""); } if (!(realm.allowsEdit(AccountFieldName.REGISTER_NEW_EMAIL))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""realm does not allow adding emails""); } return apply(rsrc.getUser(), input); }",438924f6b0fc77e4bb15b422ab5517384435aeae,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EmailInfo> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.common.errors.EmailException, com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((self.get()) != (rsrc.getUser())) || (input.noConfirmation)) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { input = new com.google.gerrit.extensions.api.accounts.EmailInput(); } if (!(com.google.gerrit.server.mail.send.OutgoingEmailValidator.isValid(email))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""invalid email address""); } if (!(realm.allowsEdit(AccountFieldName.REGISTER_NEW_EMAIL))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""realm does not allow adding emails""); } return apply(rsrc.getUser(), input); }",13e296b41e3791541764955dc381f024402bb916,"apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.extensions.api.accounts.EmailInput)","apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.extensions.api.accounts.EmailInput)",12,1,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EmailInfo> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.common.errors.EmailException, com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (((self.get()) != (rsrc.getUser())) || (input.noConfirmation)) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { input = new com.google.gerrit.extensions.api.accounts.EmailInput(); } if (!(com.google.gerrit.server.mail.send.OutgoingEmailValidator.isValid(email))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""invalid email address""); } if (!(realm.allowsEdit(AccountFieldName.REGISTER_NEW_EMAIL))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""realm does not allow adding emails""); } return apply(rsrc.getUser(), input); }",4a424c67f205e69009635d590b0a274589041649,"apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.extensions.api.accounts.EmailInput)",69710,366,379
44015,gerrit-openid_src_main_java_com_google_gerrit_httpd_auth_openid_LoginForm.java,,,,"@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { if ((ssoUrl) != null) { java.lang.String token = com.google.gerrit.httpd.auth.openid.LoginForm.getToken(req); com.google.gerrit.httpd.auth.openid.SignInMode mode; if (PageLinks.REGISTER.equals(token)) { mode = SignInMode.REGISTER; token = com.google.gerrit.common.PageLinks.MINE; } else { mode = SignInMode.SIGN_IN; } discover(req, res, false, ssoUrl, false, token, mode); } else { boolean link = (req.getParameter(""link"")) != null; sendForm(req, res, link, null); } }",aa402f964394e9d4d565ac54684a888acd5a1393,,"doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",2,6,"@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { if ((ssoUrl) != null) { java.lang.String token = com.google.gerrit.httpd.auth.openid.LoginForm.getToken(req); com.google.gerrit.httpd.auth.openid.SignInMode mode; if (PageLinks.REGISTER.equals(token)) { mode = SignInMode.REGISTER; token = com.google.gerrit.common.PageLinks.MINE; } else { mode = SignInMode.SIGN_IN; } discover(req, res, false, ssoUrl, false, token, mode); } else { java.lang.String id = com.google.common.base.Strings.nullToEmpty(req.getParameter(""id"")).trim(); if (!(id.isEmpty())) { doPost(req, res); } else { boolean link = (req.getParameter(""link"")) != null; sendForm(req, res, link, null); } } }",23769db43e83677520bd4bf32ba982ce80fb525e,"doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",117232,195,240
54310,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ConflictsPredicate.java,3.0,"private com.google.gerrit.reviewdb.client.Project.SubmitType getSubmitType(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { try { final com.google.gerrit.common.data.SubmitTypeRecord r = args.changeControlGenericFactory.controlFor(change, args.userFactory.create(change.getOwner())).getSubmitTypeRecord(db.get(), cd.currentPatchSet(), cd); if ((r.status) != (SubmitTypeRecord.Status.OK)) { return null; } return r.type; } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return null; } }",4ac32118532329dc18c664a3cd922cf981d7c267,"private com.google.gerrit.extensions.common.ProjectSubmitType getSubmitType(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { try { final com.google.gerrit.common.data.SubmitTypeRecord r = args.changeControlGenericFactory.controlFor(change, args.userFactory.create(change.getOwner())).getSubmitTypeRecord(db.get(), cd.currentPatchSet(), cd); if ((r.status) != (SubmitTypeRecord.Status.OK)) { return null; } return r.type; } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return null; } }",6d378928c8ff36b252f5334ef07c25b1e9a0a438,"getSubmitType(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.server.query.change.ChangeData)","getSubmitType(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.server.query.change.ChangeData)",14,3,"private com.google.gerrit.extensions.common.SubmitType getSubmitType(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { try { final com.google.gerrit.common.data.SubmitTypeRecord r = args.changeControlGenericFactory.controlFor(change, args.userFactory.create(change.getOwner())).getSubmitTypeRecord(db.get(), cd.currentPatchSet(), cd); if ((r.status) != (SubmitTypeRecord.Status.OK)) { return null; } return r.type; } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return null; } }",c798d05bc37378beff2a5a77bd9a438033d139e1,"getSubmitType(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.server.query.change.ChangeData)",164059,178,177
74460,gerrit-server_src_main_java_com_google_gerrit_server_git_strategy_SubmitStrategyOp.java,17.0,"@java.lang.Override public final void updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext ctx) throws java.lang.Exception { com.google.gerrit.server.git.CodeReviewCommit tipBefore = args.mergeTip.getCurrentTip(); updateRepoImpl(ctx); com.google.gerrit.server.git.CodeReviewCommit tipAfter = args.mergeTip.getCurrentTip(); if (java.util.Objects.equals(tipBefore, tipAfter)) { return; } else if (tipAfter == null) { logDebug(""No merge tip, no update to perform""); return; } checkProjectConfig(ctx, tipAfter); command = new org.eclipse.jgit.transport.ReceiveCommand(firstNonNull(tipBefore, org.eclipse.jgit.lib.ObjectId.zeroId()), tipAfter, getDest().get()); ctx.addRefUpdate(command); }",22651414288ebf2b9d33cb6c46ee42b448d7f019,"@java.lang.Override public final void updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext ctx) throws java.lang.Exception { com.google.gerrit.server.git.CodeReviewCommit tipBefore = args.mergeTip.getCurrentTip(); alreadyMerged = getAlreadyMergedCommit(ctx); if ((alreadyMerged) == null) { updateRepoImpl(ctx); } com.google.gerrit.server.git.CodeReviewCommit tipAfter = args.mergeTip.getCurrentTip(); if (java.util.Objects.equals(tipBefore, tipAfter)) { return; } else if (tipAfter == null) { logDebug(""No merge tip, no update to perform""); return; } checkProjectConfig(ctx, tipAfter); command = new org.eclipse.jgit.transport.ReceiveCommand(firstNonNull(tipBefore, org.eclipse.jgit.lib.ObjectId.zeroId()), tipAfter, getDest().get()); ctx.addRefUpdate(command); }",6a994bdbe4705fa87b627a06fe0b81f18af62315,updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext),updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext),12,16,"@java.lang.Override public final void updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext ctx) throws java.lang.Exception { logDebug(""{}#updateRepo for change {}"", getClass().getSimpleName(), toMerge.change().getId()); com.google.gerrit.server.git.CodeReviewCommit tipBefore = args.mergeTip.getCurrentTip(); alreadyMerged = getAlreadyMergedCommit(ctx); if ((alreadyMerged) == null) { updateRepoImpl(ctx); } else { logDebug(""Already merged as {}"", alreadyMerged.name()); } com.google.gerrit.server.git.CodeReviewCommit tipAfter = args.mergeTip.getCurrentTip(); if (java.util.Objects.equals(tipBefore, tipAfter)) { logDebug(""Did not move tip"", getClass().getSimpleName()); return; } else if (tipAfter == null) { logDebug(""No merge tip, no update to perform""); return; } logDebug(""Moved tip from {} to {}"", tipBefore, tipAfter); checkProjectConfig(ctx, tipAfter); command = new org.eclipse.jgit.transport.ReceiveCommand(firstNonNull(tipBefore, org.eclipse.jgit.lib.ObjectId.zeroId()), tipAfter, getDest().get()); ctx.addRefUpdate(command); }",c136d9e08d4d7b57e603b8fc9269129a54351b10,updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext),83955,220,285
77763,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_AbstractSubmit.java,15.0,"private java.lang.String getLatestRemoteDiff() throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.ObjectId oldTreeId = repo.resolve(""refs/heads/master~1^{tree}""); org.eclipse.jgit.lib.ObjectId newTreeId = repo.resolve(""refs/heads/master^{tree}""); return getLatestDiff(repo, oldTreeId, newTreeId); } }",603de4c568c2c4d66056e6cd4e7dbe498e8afa73,"private java.lang.String getLatestRemoteDiff() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.ObjectId oldTreeId = repo.resolve(""refs/heads/master~1^{tree}""); org.eclipse.jgit.lib.ObjectId newTreeId = repo.resolve(""refs/heads/master^{tree}""); return getLatestDiff(repo, oldTreeId, newTreeId); } }",268b06543ede2f9784aeffc0d0ec2111705f5d83,getLatestRemoteDiff(),getLatestRemoteDiff(),6,12,"private java.lang.String getLatestRemoteDiff() throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.ObjectId oldTreeId = repo.resolve(""refs/heads/master~1^{tree}""); org.eclipse.jgit.lib.ObjectId newTreeId = repo.resolve(""refs/heads/master^{tree}""); return getLatestDiff(repo, oldTreeId, newTreeId); } }",603de4c568c2c4d66056e6cd4e7dbe498e8afa73,getLatestRemoteDiff(),38175,148,148
73809,gerrit-server_src_main_java_com_google_gerrit_server_git_strategy_SubmitStrategyListener.java,,,,"@java.lang.Override public void afterUpdateChange() throws com.google.gerrit.extensions.restapi.ResourceConflictException { commits.maybeFail(""Error updating status""); }",08936e3ce8a7d9b3532e32f8b536cb88d299cd72,,afterUpdateChange(),17,1,"@java.lang.Override public void afterUpdateChanges() throws com.google.gerrit.extensions.restapi.ResourceConflictException { commits.maybeFail(""Error updating status""); }",a57674899e3b5f2dfd2fc2c2caa2b7bb57363f80,afterUpdateChanges(),73189,39,39
57991,gerrit-gwtui_src_main_java_com_google_gerrit_client_FormatUtil.java,1.0,"public static com.google.gerrit.client.account.AccountInfo asInfo(com.google.gerrit.common.data.AccountInfo acct) { if (acct == null) { return com.google.gerrit.client.account.AccountInfo.create(0, null, null); } return com.google.gerrit.client.account.AccountInfo.create(((acct.getId()) != null ? acct.getId().get() : 0), acct.getFullName(), acct.getPreferredEmail()); }",0a579addcb630eea848aa156b2928f45f850f881,"public static com.google.gerrit.client.account.AccountInfo asInfo(com.google.gerrit.common.data.AccountInfo acct) { if (acct == null) { return com.google.gerrit.client.account.AccountInfo.create(0, null, null, null); } return com.google.gerrit.client.account.AccountInfo.create(((acct.getId()) != null ? acct.getId().get() : 0), acct.getFullName(), acct.getPreferredEmail(), acct.getPreferredUserName()); }",48fb5ea670706e2e97d45de94a8b03492c8b4373,asInfo(com.google.gerrit.common.data.AccountInfo),asInfo(com.google.gerrit.common.data.AccountInfo),4,1,"public static com.google.gerrit.client.account.AccountInfo asInfo(com.google.gerrit.common.data.AccountInfo acct) { if (acct == null) { return com.google.gerrit.client.account.AccountInfo.create(0, null, null, null); } return com.google.gerrit.client.account.AccountInfo.create(((acct.getId()) != null ? acct.getId().get() : 0), acct.getFullName(), acct.getPreferredEmail(), acct.getUsername()); }",9649813c79adc2f45e05429bec52a255fe35fc8d,asInfo(com.google.gerrit.common.data.AccountInfo),103100,119,118
70064,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_AccountApi.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,final native void add(java.lang.String k);,5339049bc00d507525b3073eaa102ea6c22b1f06,,add(java.lang.String),14,21,static com.google.gerrit.client.account.AccountApi.GpgKeysInput add(java.lang.String key) { return com.google.gerrit.client.account.AccountApi.GpgKeysInput.createAdd(com.google.gerrit.client.rpc.Natives.arrayOf(key)); },38418828397b28bdd40ecd50a96d9cae5d74427b,add(java.lang.String),207804,12,72
42382,gerrit-common_src_main_java_com_google_gerrit_common_data_LabelTypes.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.util.Comparator<java.lang.String> nameComparator() { final java.util.Map<java.lang.String, java.lang.Integer> positions = positions(); return new java.util.Comparator<java.lang.String>() { @java.lang.Override public int compare(java.lang.String left, java.lang.String right) { java.lang.Integer lp = positions.get(left); java.lang.Integer rp = positions.get(right); if (lp == rp) { return 0; } else if (lp == null) { return -1; } else if (rp == null) { return 1; } else { return lp - rp; } } }; }",c3bd9e6d25c8835b40f6028ae86e6251144f8bb1,,nameComparator(),16,3,"public java.util.Comparator<java.lang.String> nameComparator() { final java.util.Map<java.lang.String, java.lang.Integer> positions = positions(); return new java.util.Comparator<java.lang.String>() { @java.lang.Override public int compare(java.lang.String left, java.lang.String right) { int lp = position(left); int rp = position(right); int cmp = lp - rp; if (cmp == 0) { cmp = left.compareTo(right); } return cmp; } private int position(java.lang.String name) { java.lang.Integer p = positions.get(name); return p != null ? p : positions.size(); } }; }",66667111f592abc43b3ce29a327b6fca9fb31c54,nameComparator(),59940,153,163
127031,src_test_java_com_googlesource_gerrit_plugins_webhooks_PostTaskTest.java,0.0,"@org.junit.Test public void rescheduleOnRecoverableException() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenThrow(java.io.IOException.class); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",e1590546610f5eacd1a8ae350f7a2438047d8098,"@org.junit.Test public void rescheduleOnRecoverableException() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenThrow(java.io.IOException.class); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",c253b880c195f5f89bcb8de712c279047f388450,rescheduleOnRecoverableException(),rescheduleOnRecoverableException(),11,0,"@org.junit.Test public void rescheduleOnRecoverableException() throws java.io.IOException { when(session.post(eq(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL), eq(content))).thenThrow(java.io.IOException.class); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }",d6f2a6dfb3def9dbddd010c4cfb6a13c4db00db7,rescheduleOnRecoverableException(),40654,150,116
44162,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_client_AccountGeneralPreferences.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.google.gerrit.reviewdb.client.AccountGeneralPreferences.CommentVisibilityStrategy getDefaultCommentVisibilityStrategy() { if ((defaultCommentVisibilityStrategy) == null) { return com.google.gerrit.reviewdb.client.AccountGeneralPreferences.CommentVisibilityStrategy.EXPAND_MOST_RECENT; } return com.google.gerrit.reviewdb.client.AccountGeneralPreferences.CommentVisibilityStrategy.valueOf(defaultCommentVisibilityStrategy); },9a26b490d2a568723f9c5ef66674fc9cb422f89b,,getDefaultCommentVisibilityStrategy(),2,12,public com.google.gerrit.reviewdb.client.AccountGeneralPreferences.CommentVisibilityStrategy getCommentVisibilityStrategy() { if ((commentVisibilityStrategy) == null) { return com.google.gerrit.reviewdb.client.AccountGeneralPreferences.CommentVisibilityStrategy.EXPAND_MOST_RECENT; } return com.google.gerrit.reviewdb.client.AccountGeneralPreferences.CommentVisibilityStrategy.valueOf(commentVisibilityStrategy); },dfd5626816e5aa63be9e7f16eb478316408a694d,getCommentVisibilityStrategy(),21473,100,98
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,14.0,"public static void deleteEdit(int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.edit(id).delete(cb); }",285516f9301defe8abb4ca1df728f9e6f3011e22,"public static void deleteEdit(int id, @com.google.gerrit.common.Nullable java.lang.String project, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.edit(id, project).delete(cb); }",835ab7779fc3fda29b49bdab31073b1f35caac6e,"deleteEdit(int,com.google.gwt.user.client.rpc.AsyncCallback)","deleteEdit(int,java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)",7,6,"public static void deleteEdit(@com.google.gerrit.common.Nullable java.lang.String project, int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.edit(project, id).delete(cb); }",371058be8083fb2d732569d1f5a461b069ea6a25,"deleteEdit(java.lang.String,int,com.google.gwt.user.client.rpc.AsyncCallback)",211147,84,83
109251,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_AbstractNotificationTest.java,39.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.lang.String recipientMapToString(java.util.Map<com.google.gerrit.acceptance.RecipientType, java.util.List<java.lang.String>> recipients) { java.lang.StringBuilder buf = new java.lang.StringBuilder(); buf.append('['); for (com.google.gerrit.acceptance.RecipientType type : com.google.common.collect.ImmutableList.of(com.google.gerrit.acceptance.TO, com.google.gerrit.acceptance.CC, com.google.gerrit.acceptance.BCC)) { buf.append('\n'); buf.append(type); buf.append(':'); java.lang.String delim = "" ""; for (java.lang.String r : recipients.get(type)) { buf.append(delim); buf.append(com.google.gerrit.acceptance.AbstractNotificationTest.stripUniqueSuffix(r)); delim = "", ""; } } buf.append(""\n]""); return buf.toString(); }",145911440e0677669dc4c8f6058668f84aaea2e1,,recipientMapToString(java.util.Map),16,14,"private static java.lang.String recipientMapToString(java.util.Map<com.google.gerrit.acceptance.RecipientType, java.util.List<java.lang.String>> recipients, java.util.function.Function<java.lang.String, java.lang.String> emailToName) { java.lang.StringBuilder buf = new java.lang.StringBuilder(); buf.append('['); for (com.google.gerrit.acceptance.RecipientType type : com.google.common.collect.ImmutableList.of(com.google.gerrit.acceptance.TO, com.google.gerrit.acceptance.CC, com.google.gerrit.acceptance.BCC)) { buf.append('\n'); buf.append(type); buf.append(':'); java.lang.String delim = "" ""; for (java.lang.String r : recipients.get(type)) { buf.append(delim); buf.append(emailToName.apply(r)); delim = "", ""; } } buf.append(""\n]""); return buf.toString(); }",f2124ad44ef8961fd1f7ea432f020e6121878936,"recipientMapToString(java.util.Map,java.util.function.Function)",39858,224,236
113572,gerrit-httpd_src_main_java_com_google_gerrit_httpd_raw_IndexServlet.java,1.0,"static java.lang.String computeCanonicalPath(java.lang.String canonicalURL) throws java.net.URISyntaxException { java.net.URI uri = new java.net.URI(canonicalURL); return uri.getPath().replaceAll(""/$"", """"); }",16cd8f59ecbb6f55819f91ee5089e695544e3436,"static java.lang.String computeCanonicalPath(java.lang.String canonicalURL) throws java.net.URISyntaxException { if (canonicalURL == null) { return """"; } java.net.URI uri = new java.net.URI(canonicalURL); return uri.getPath().replaceAll(""/$"", """"); }",1988d343ba15cbd951dd778c597cc9ccbc1f367c,computeCanonicalPath(java.lang.String),computeCanonicalPath(java.lang.String),8,1,"static java.lang.String computeCanonicalPath(java.lang.String canonicalURL) throws java.net.URISyntaxException { if (com.google.common.base.Strings.isNullOrEmpty(canonicalURL)) { return """"; } java.net.URI uri = new java.net.URI(canonicalURL); return uri.getPath().replaceAll(""/$"", """"); }",9b4af7c0cf09d6b861ae99896c2a74a657b8efbf,computeCanonicalPath(java.lang.String),2301,65,76
33370,gerrit-server_src_main_java_com_google_gerrit_server_events_EventFactory.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.server.events.DependencyAttribute newNeededBy(com.google.gerrit.reviewdb.Change c, com.google.gerrit.reviewdb.PatchSet ps) { return newDependencyAttribute(c, ps); }",a959ea22db3144dccd623138cbb8f714e8883180,,"newNeededBy(com.google.gerrit.reviewdb.Change,com.google.gerrit.reviewdb.PatchSet)",5,18,"private com.google.gerrit.server.events.DependencyAttribute newNeededBy(com.google.gerrit.reviewdb.client.Change c, com.google.gerrit.reviewdb.client.PatchSet ps) { return newDependencyAttribute(c, ps); }",edd79932c95fe51a309c8e7ba1068ffb3abebb14,"newNeededBy(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet)",108486,58,62
13966,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,33.0,"private void parseCommands(final java.util.Collection<org.eclipse.jgit.transport.ReceiveCommand> commands) { for (final org.eclipse.jgit.transport.ReceiveCommand cmd : commands) { if ((cmd.getResult()) != (org.eclipse.jgit.transport.ReceiveCommand.Result.NOT_ATTEMPTED)) { continue; } if ((!(org.eclipse.jgit.lib.Repository.isValidRefName(cmd.getRefName()))) || (cmd.getRefName().contains(""//""))) { com.google.gerrit.server.git.ReceiveCommits.reject(cmd, ""not valid ref""); continue; } if (cmd.getRefName().startsWith(com.google.gerrit.server.git.ReceiveCommits.NEW_CHANGE)) { parseNewChangeCommand(cmd); continue; } final java.util.regex.Matcher m = com.google.gerrit.server.git.ReceiveCommits.NEW_PATCHSET.matcher(cmd.getRefName()); if (m.matches()) { final com.google.gerrit.reviewdb.Change.Id changeId = Change.Id.parse(m.group(1)); parseReplaceCommand(cmd, changeId); continue; } switch (cmd.getType()) { case CREATE : parseCreate(cmd); continue; case UPDATE : parseUpdate(cmd); continue; case DELETE : parseDelete(cmd); continue; case UPDATE_NONFASTFORWARD : parseRewind(cmd); continue; } com.google.gerrit.server.git.ReceiveCommits.reject(cmd); } }",f241bfcbde6a29f7b2177438c60edf78c89afdff,"private void parseCommands(final java.util.Collection<org.eclipse.jgit.transport.ReceiveCommand> commands) { for (final org.eclipse.jgit.transport.ReceiveCommand cmd : commands) { checkVisibility(cmd); if ((cmd.getResult()) != (org.eclipse.jgit.transport.ReceiveCommand.Result.NOT_ATTEMPTED)) { continue; } if ((!(org.eclipse.jgit.lib.Repository.isValidRefName(cmd.getRefName()))) || (cmd.getRefName().contains(""//""))) { com.google.gerrit.server.git.ReceiveCommits.reject(cmd, ""not valid ref""); continue; } if (cmd.getRefName().startsWith(com.google.gerrit.server.git.ReceiveCommits.NEW_CHANGE)) { parseNewChangeCommand(cmd); continue; } final java.util.regex.Matcher m = com.google.gerrit.server.git.ReceiveCommits.NEW_PATCHSET.matcher(cmd.getRefName()); if (m.matches()) { final com.google.gerrit.reviewdb.Change.Id changeId = Change.Id.parse(m.group(1)); parseReplaceCommand(cmd, changeId); continue; } switch (cmd.getType()) { case CREATE : parseCreate(cmd); continue; case UPDATE : parseUpdate(cmd); continue; case DELETE : parseDelete(cmd); continue; case UPDATE_NONFASTFORWARD : parseRewind(cmd); continue; } com.google.gerrit.server.git.ReceiveCommits.reject(cmd); } }",f4ced1425445e2ea5b33068596e3967b98ae9068,parseCommands(java.util.Collection),parseCommands(java.util.Collection),18,32,"private void parseCommands(final java.util.Collection<org.eclipse.jgit.transport.ReceiveCommand> commands) { for (final org.eclipse.jgit.transport.ReceiveCommand cmd : commands) { if ((cmd.getResult()) != (org.eclipse.jgit.transport.ReceiveCommand.Result.NOT_ATTEMPTED)) { continue; } if ((!(org.eclipse.jgit.lib.Repository.isValidRefName(cmd.getRefName()))) || (cmd.getRefName().contains(""//""))) { com.google.gerrit.server.git.ReceiveCommits.reject(cmd, ""not valid ref""); continue; } if (cmd.getRefName().startsWith(com.google.gerrit.server.git.ReceiveCommits.NEW_CHANGE)) { parseNewChangeCommand(cmd); continue; } final java.util.regex.Matcher m = com.google.gerrit.server.git.ReceiveCommits.NEW_PATCHSET.matcher(cmd.getRefName()); if (m.matches()) { final com.google.gerrit.reviewdb.Change.Id changeId = Change.Id.parse(m.group(1)); parseReplaceCommand(cmd, changeId); continue; } switch (cmd.getType()) { case CREATE : parseCreate(cmd); continue; case UPDATE : parseUpdate(cmd); continue; case DELETE : parseDelete(cmd); continue; case UPDATE_NONFASTFORWARD : parseRewind(cmd); continue; } com.google.gerrit.server.git.ReceiveCommits.reject(cmd); } }",f241bfcbde6a29f7b2177438c60edf78c89afdff,parseCommands(java.util.Collection),17184,349,344
40521,gitiles-servlet_src_main_java_com_google_gitiles_RepositoryIndexServlet.java,4.0,"@com.google.common.annotations.VisibleForTesting java.util.Map<java.lang.String, ?> buildData(javax.servlet.http.HttpServletRequest req) throws java.io.IOException { com.google.gitiles.RepositoryDescription desc = accessFactory.forRequest(req).getRepositoryDescription(); return com.google.common.collect.ImmutableMap.of(""cloneUrl"", desc.cloneUrl, ""description"", com.google.common.base.Strings.nullToEmpty(desc.description), ""branches"", getRefs(req, Constants.R_HEADS), ""tags"", getRefs(req, Constants.R_TAGS)); }",5c071b0d585a50f597146176f867a404ad82b3ce,"@com.google.common.annotations.VisibleForTesting java.util.Map<java.lang.String, ?> buildData(javax.servlet.http.HttpServletRequest req) throws java.io.IOException { com.google.gitiles.RepositoryDescription desc = accessFactory.forRequest(req).getRepositoryDescription(); return com.google.common.collect.ImmutableMap.of(""cloneUrl"", desc.cloneUrl, ""description"", com.google.common.base.Strings.nullToEmpty(desc.description), ""branches"", getRefs(req, Constants.R_HEADS, com.google.common.collect.Ordering.from(RefComparator.INSTANCE)), ""tags"", getRefs(req, Constants.R_TAGS, tagComparator(req))); }",c7c603ef025ca491242add96595d07d7595a54de,buildData(javax.servlet.http.HttpServletRequest),buildData(javax.servlet.http.HttpServletRequest),4,4,"@com.google.common.annotations.VisibleForTesting java.util.Map<java.lang.String, ?> buildData(javax.servlet.http.HttpServletRequest req) throws java.io.IOException { com.google.gitiles.RepositoryDescription desc = accessFactory.forRequest(req).getRepositoryDescription(); org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(org.eclipse.jgit.http.server.ServletUtils.getRepository(req)); java.util.List<java.util.Map<java.lang.String, java.lang.String>> tags; try { tags = getRefs(req, Constants.R_TAGS, tagComparator(walk)); } finally { walk.release(); } return com.google.common.collect.ImmutableMap.of(""cloneUrl"", desc.cloneUrl, ""description"", com.google.common.base.Strings.nullToEmpty(desc.description), ""branches"", getRefs(req, Constants.R_HEADS, com.google.common.collect.Ordering.from(RefComparator.INSTANCE)), ""tags"", tags); }",8a536498896c68d4ed214e717365374013c094f8,buildData(javax.servlet.http.HttpServletRequest),47676,160,246
129918,gerrit-server_src_main_java_com_google_gerrit_server_DynamicOptions.java,0.0,"@java.lang.SuppressWarnings(""unchecked"") public com.google.gerrit.server.DynamicOptions.DynamicBean getDynamicBean(java.lang.Object bean, com.google.gerrit.server.DynamicOptions.DynamicBean dynamicBean) { java.lang.ClassLoader coreCl = getClass().getClassLoader(); java.lang.ClassLoader beanCl = bean.getClass().getClassLoader(); java.lang.ClassLoader loader = beanCl; if (beanCl != coreCl) { java.lang.ClassLoader dynamicBeanCl = dynamicBean.getClass().getClassLoader(); if (beanCl != dynamicBeanCl) { loader = new com.google.gerrit.server.plugins.DelegatingClassLoader(beanCl, dynamicBeanCl); } } java.lang.String className = null; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ClassNameProvider) { className = ((com.google.gerrit.server.DynamicOptions.ClassNameProvider) (dynamicBean)).getClassName(); } else if (loader != beanCl) { className = dynamicBean.getClass().getCanonicalName(); } if (className != null) { try { return injector.createChildInjector().getInstance(((java.lang.Class<com.google.gerrit.server.DynamicOptions.DynamicBean>) (loader.loadClass(className)))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.RuntimeException(e); } } return dynamicBean; }",8766c081355e2791e70ba9b986450cf92a53f7b0,"@java.lang.SuppressWarnings(""unchecked"") public com.google.gerrit.server.DynamicOptions.DynamicBean getDynamicBean(java.lang.Object bean, com.google.gerrit.server.DynamicOptions.DynamicBean dynamicBean) { java.lang.ClassLoader coreCl = getClass().getClassLoader(); java.lang.ClassLoader beanCl = bean.getClass().getClassLoader(); java.lang.ClassLoader loader = beanCl; if (beanCl != coreCl) { java.lang.ClassLoader dynamicBeanCl = dynamicBean.getClass().getClassLoader(); if (beanCl != dynamicBeanCl) { loader = new com.google.gerrit.server.plugins.DelegatingClassLoader(beanCl, dynamicBeanCl); } } java.lang.String className = null; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ClassNameProvider) { className = ((com.google.gerrit.server.DynamicOptions.ClassNameProvider) (dynamicBean)).getClassName(); } else if (loader != beanCl) { className = dynamicBean.getClass().getCanonicalName(); } if (className != null) { com.google.gerrit.server.List<java.lang.Module> modules = new java.util.ArrayList(); try { if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) { for (java.lang.String moduleName : ((com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) (dynamicBean)).getModulesClassNames()) { try { java.lang.Class<?> moduleClass = loader.loadClass(moduleName); modules.add(((java.lang.Module) (moduleClass.getConstructor().newInstance()))); } catch (java.lang.NoSuchMethodException | java.lang.InstantiationException | java.lang.IllegalAccessException | java.lang.reflect.InvocationTargetException e) { } } } return injector.createChildInjector(modules).getInstance(((java.lang.Class<com.google.gerrit.server.DynamicOptions.DynamicBean>) (loader.loadClass(className)))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.RuntimeException(e); } } return dynamicBean; }",dd92ca6b387d8b45902134bec0f465c581a64dff,"getDynamicBean(java.lang.Object,com.google.gerrit.server.DynamicOptions$DynamicBean)","getDynamicBean(java.lang.Object,com.google.gerrit.server.DynamicOptions$DynamicBean)",2,0,"@java.lang.SuppressWarnings(""unchecked"") public com.google.gerrit.server.DynamicOptions.DynamicBean getDynamicBean(java.lang.Object bean, com.google.gerrit.server.DynamicOptions.DynamicBean dynamicBean) { java.lang.ClassLoader coreCl = getClass().getClassLoader(); java.lang.ClassLoader beanCl = bean.getClass().getClassLoader(); java.lang.ClassLoader loader = beanCl; if (beanCl != coreCl) { java.lang.ClassLoader dynamicBeanCl = dynamicBean.getClass().getClassLoader(); if (beanCl != dynamicBeanCl) { loader = new com.google.gerrit.server.plugins.DelegatingClassLoader(beanCl, dynamicBeanCl); } } java.lang.String className = null; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ClassNameProvider) { className = ((com.google.gerrit.server.DynamicOptions.ClassNameProvider) (dynamicBean)).getClassName(); } else if (loader != beanCl) { className = dynamicBean.getClass().getCanonicalName(); } if (className != null) { java.util.List<java.lang.Module> modules = new java.util.ArrayList<>(); try { if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) { for (java.lang.String moduleName : ((com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) (dynamicBean)).getModulesClassNames()) { try { java.lang.Class<?> moduleClass = loader.loadClass(moduleName); modules.add(((java.lang.Module) (moduleClass.getConstructor().newInstance()))); } catch (java.lang.NoSuchMethodException | java.lang.InstantiationException | java.lang.IllegalAccessException | java.lang.reflect.InvocationTargetException e) { com.google.gerrit.server.DynamicOptions.log.error((""ERROR loading/instantiating module "" + moduleName), e); } } } return injector.createChildInjector(modules).getInstance(((java.lang.Class<com.google.gerrit.server.DynamicOptions.DynamicBean>) (loader.loadClass(className)))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.RuntimeException(e); } } return dynamicBean; }",eacfb1e7f69d6f68daad1d3b636999cac2bdf7ff,"getDynamicBean(java.lang.Object,com.google.gerrit.server.DynamicOptions$DynamicBean)",213312,467,492
83749,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_NewAgreementScreen.java,11.0,"private void showCLA(final com.google.gerrit.common.data.ContributorAgreement cla) { current = cla; java.lang.String url = cla.getAgreementUrl(); if ((url != null) && ((url.length()) > 0)) { agreementGroup.setVisible(true); agreementHtml.setText(Gerrit.C.rpcStatusWorking()); if ((!(url.startsWith(""http:""))) && (!(url.startsWith(""https:"")))) { url = (com.google.gwt.core.client.GWT.getHostPageBaseURL()) + url; } final com.google.gwt.http.client.RequestBuilder rb = new com.google.gwt.http.client.RequestBuilder(com.google.gwt.http.client.RequestBuilder.GET, url); rb.setCallback(new com.google.gwt.http.client.RequestCallback() { @java.lang.Override public void onError(com.google.gwt.http.client.Request request, java.lang.Throwable exception) { new com.google.gerrit.client.ErrorDialog(exception).center(); } @java.lang.Override public void onResponseReceived(com.google.gwt.http.client.Request request, com.google.gwt.http.client.Response response) { final java.lang.String ct = response.getHeader(""Content-Type""); if ((((response.getStatusCode()) == 200) && (ct != null)) && ((ct.equals(""text/html"")) || (ct.startsWith(""text/html;"")))) { agreementHtml.setHTML(response.getText()); } else { new com.google.gerrit.client.ErrorDialog(response.getStatusText()).center(); } } }); try { rb.send(); } catch (com.google.gwt.http.client.RequestException e) { new com.google.gerrit.client.ErrorDialog(e).show(); } } else { agreementGroup.setVisible(false); } finalGroup.setVisible(((cla.getAutoVerify()) != null)); yesIAgreeBox.setText(""""); submit.setEnabled(false); }",0ccf6f58dc8fae0736000d96d1201522ea848135,"private void showCLA(com.google.gerrit.client.account.AgreementInfo cla) { current = cla; java.lang.String url = cla.url(); if ((url != null) && ((url.length()) > 0)) { agreementGroup.setVisible(true); agreementHtml.setText(Gerrit.C.rpcStatusWorking()); if ((!(url.startsWith(""http:""))) && (!(url.startsWith(""https:"")))) { url = (com.google.gwt.core.client.GWT.getHostPageBaseURL()) + url; } final com.google.gwt.http.client.RequestBuilder rb = new com.google.gwt.http.client.RequestBuilder(com.google.gwt.http.client.RequestBuilder.GET, url); rb.setCallback(new com.google.gwt.http.client.RequestCallback() { @java.lang.Override public void onError(com.google.gwt.http.client.Request request, java.lang.Throwable exception) { new com.google.gerrit.client.ErrorDialog(exception).center(); } @java.lang.Override public void onResponseReceived(com.google.gwt.http.client.Request request, com.google.gwt.http.client.Response response) { final java.lang.String ct = response.getHeader(""Content-Type""); if ((((response.getStatusCode()) == 200) && (ct != null)) && ((ct.equals(""text/html"")) || (ct.startsWith(""text/html;"")))) { agreementHtml.setHTML(response.getText()); } else { new com.google.gerrit.client.ErrorDialog(response.getStatusText()).center(); } } }); try { rb.send(); } catch (com.google.gwt.http.client.RequestException e) { new com.google.gerrit.client.ErrorDialog(e).show(); } } else { agreementGroup.setVisible(false); } finalGroup.setVisible(((cla.autoVerifyGroup()) != null)); yesIAgreeBox.setText(""""); submit.setEnabled(false); }",34991f46fc438068a43b128c13f15da5a320cdfc,showCLA(com.google.gerrit.common.data.ContributorAgreement),showCLA(com.google.gerrit.client.account.AgreementInfo),5,7,"private void showCLA(com.google.gerrit.client.info.AgreementInfo cla) { current = cla; java.lang.String url = cla.url(); if ((url != null) && ((url.length()) > 0)) { agreementGroup.setVisible(true); agreementHtml.setText(Gerrit.C.rpcStatusWorking()); if ((!(url.startsWith(""http:""))) && (!(url.startsWith(""https:"")))) { url = (com.google.gwt.core.client.GWT.getHostPageBaseURL()) + url; } final com.google.gwt.http.client.RequestBuilder rb = new com.google.gwt.http.client.RequestBuilder(com.google.gwt.http.client.RequestBuilder.GET, url); rb.setCallback(new com.google.gwt.http.client.RequestCallback() { @java.lang.Override public void onError(com.google.gwt.http.client.Request request, java.lang.Throwable exception) { new com.google.gerrit.client.ErrorDialog(exception).center(); } @java.lang.Override public void onResponseReceived(com.google.gwt.http.client.Request request, com.google.gwt.http.client.Response response) { final java.lang.String ct = response.getHeader(""Content-Type""); if ((((response.getStatusCode()) == 200) && (ct != null)) && ((ct.equals(""text/html"")) || (ct.startsWith(""text/html;"")))) { agreementHtml.setHTML(response.getText()); } else { new com.google.gerrit.client.ErrorDialog(response.getStatusText()).center(); } } }); try { rb.send(); } catch (com.google.gwt.http.client.RequestException e) { new com.google.gerrit.client.ErrorDialog(e).show(); } } else { agreementGroup.setVisible(false); } finalGroup.setVisible(((cla.autoVerifyGroup()) != null)); yesIAgreeBox.setText(""""); submit.setEnabled(false); }",c40833a404fd563825bb64287d39443b6f49050e,showCLA(com.google.gerrit.client.info.AgreementInfo),181026,448,448
148032,java_com_google_gerrit_server_group_SystemGroupBackend.java,9.0,"private static java.lang.String getAmbiguousNameMessage(java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.reviewdb.client.AccountGroup.UUID systemGroupUuid) { return java.lang.String.format((""The configured name '%s' for system group '%s' is ambiguous"" + (("" with the name '%s' of existing group '%s'."" + "" Please remove/change the value for groups.%s.name in"") + "" gerrit.config."")), groupName, systemGroupUuid.get(), groupName, groupUuid.get(), systemGroupUuid.get()); }",59c7ca46ced6af2ca84c3a3ba5b0128b587d4a38,"private static java.lang.String getAmbiguousNameMessage(java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.reviewdb.client.AccountGroup.UUID systemGroupUuid) { return java.lang.String.format((""The configured name '%s' for system account '%s' is ambiguous"" + (("" with the name '%s' of existing account '%s'."" + "" Please remove/change the value for groups.%s.name in"") + "" gerrit.config."")), groupName, systemGroupUuid.get(), groupName, groupUuid.get(), systemGroupUuid.get()); }",38a116dcdc69f3466a40d5a7e8f6d3fb9d2fe1f7,"getAmbiguousNameMessage(java.lang.String,com.google.gerrit.reviewdb.client.AccountGroup$UUID,com.google.gerrit.reviewdb.client.AccountGroup$UUID)","getAmbiguousNameMessage(java.lang.String,com.google.gerrit.reviewdb.client.AccountGroup$UUID,com.google.gerrit.reviewdb.client.AccountGroup$UUID)",17,9,"private static java.lang.String getAmbiguousNameMessage(java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.reviewdb.client.AccountGroup.UUID systemGroupUuid) { return java.lang.String.format((""The configured name '%s' for system group '%s' is ambiguous"" + (("" with the name '%s' of existing group '%s'."" + "" Please remove/change the value for groups.%s.name in"") + "" gerrit.config."")), groupName, systemGroupUuid.get(), groupName, groupUuid.get(), systemGroupUuid.get()); }",59c7ca46ced6af2ca84c3a3ba5b0128b587d4a38,"getAmbiguousNameMessage(java.lang.String,com.google.gerrit.reviewdb.client.AccountGroup$UUID,com.google.gerrit.reviewdb.client.AccountGroup$UUID)",218506,152,152
61470,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_project_CustomLabelIT.java,7.0,"@org.junit.Test public void customLabelMaxWithBlock_NegativeVoteBlock() throws java.lang.Exception { saveLabelConfig(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); revision(r).review(new com.google.gerrit.extensions.api.changes.ReviewInput().label(Q.getName(), (-1))); ChangeInfo c = get(r.getChangeId()); LabelInfo q = c.labels.get(Q.getName()); assertEquals(1, q.all.size()); assertNull(q.disliked); assertNotNull(q.rejected); assertTrue(q.blocking); }",42df09506c075ae8708aff06cd9cb6b398c96fc8,"@org.junit.Test public void customLabelMaxWithBlock_NegativeVoteBlock() throws java.lang.Exception { saveLabelConfig(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); revision(r).review(new com.google.gerrit.extensions.api.changes.ReviewInput().label(Q.getName(), (-1))); ChangeInfo c = get(r.getChangeId()); LabelInfo q = c.labels.get(Q.getName()); assertThat(q.all.size()).isEqualTo(1); assertThat(q.disliked).isNull(); assertThat(q.rejected).isNotNull(); assertThat(q.blocking).isTrue(); }",303413985d36ce07d48064532cb8aa5f82fc4472,customLabelMaxWithBlock_NegativeVoteBlock(),customLabelMaxWithBlock_NegativeVoteBlock(),6,7,"@org.junit.Test public void customLabelMaxWithBlock_NegativeVoteBlock() throws java.lang.Exception { saveLabelConfig(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); revision(r).review(new com.google.gerrit.extensions.api.changes.ReviewInput().label(Q.getName(), (-1))); ChangeInfo c = get(r.getChangeId()); com.google.gerrit.extensions.common.LabelInfo q = c.labels.get(Q.getName()); assertThat(q.all).hasSize(1); assertThat(q.disliked).isNull(); assertThat(q.rejected).isNotNull(); assertThat(q.blocking).isTrue(); }",85b16d474577feead7720291a42a27581d38694e,customLabelMaxWithBlock_NegativeVoteBlock(),23727,148,157
148032,javatests_com_google_gerrit_server_group_db_GroupsNoteDbConsistencyCheckerTest.java,5.0,"@org.junit.Test public void groupNameNoteHasDifferentNameAndUUID() throws java.lang.Exception { updateGroupNamesRef(""g-1"", ""[group]\n\tuuid = uuid-2\n\tname = g-2\n""); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, ""g-1"", new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""uuid-1"")); assertThat(problems).containsExactly(warning((""group with name 'g-1' has UUID 'uuid-1' in 'group.config' but 'uuid-2' in group "" + ""name notes"")), warning(""group note of name 'g-1' claims to represent name of 'g-2'"")).inOrder(); }",643f492ac4f9c2ae1894165da418409963b13813,"@org.junit.Test public void groupNameNoteHasDifferentNameAndUUID() throws java.lang.Exception { updateGroupNamesRef(""g-1"", ""[account]\n\tuuid = uuid-2\n\tname = g-2\n""); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, ""g-1"", new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""uuid-1"")); assertThat(problems).containsExactly(warning((""account with name 'g-1' has UUID 'uuid-1' in 'account.config' but 'uuid-2' in account "" + ""name notes"")), warning(""account note of name 'g-1' claims to represent name of 'g-2'"")).inOrder(); }",3cd08af29cc4066bb28849741b92a5074038506d,groupNameNoteHasDifferentNameAndUUID(),groupNameNoteHasDifferentNameAndUUID(),17,5,"@org.junit.Test public void groupNameNoteHasDifferentNameAndUUID() throws java.lang.Exception { updateGroupNamesRef(""g-1"", ""[group]\n\tuuid = uuid-2\n\tname = g-2\n""); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, ""g-1"", new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""uuid-1"")); assertThat(problems).containsExactly(warning((""group with name 'g-1' has UUID 'uuid-1' in 'group.config' but 'uuid-2' in group "" + ""name notes"")), warning(""group note of name 'g-1' claims to represent name of 'g-2'"")).inOrder(); }",643f492ac4f9c2ae1894165da418409963b13813,groupNameNoteHasDifferentNameAndUUID(),216063,209,209
15323,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_ActiveSessionAccess.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.google.gwtorm.client.Query("""") com.google.gwtorm.client.ResultSet<com.google.gerrit.reviewdb.ActiveSession> all() throws com.google.gwtorm.client.OrmException;",bf0585e8867cabba1d534b743cf391e271383472,,all(),5,1,@com.google.gwtorm.client.Query com.google.gwtorm.client.ResultSet<com.google.gerrit.reviewdb.ActiveSession> all() throws com.google.gwtorm.client.OrmException;,cc26542aef3e21044eda42f199783d991365696e,all(),106695,53,52
97614,gerrit-server_src_main_java_com_google_gerrit_server_change_PostReview.java,9.0,"private void ensureRangeIsValid(java.lang.String commentPath, com.google.gerrit.extensions.client.Comment.Range range) throws com.google.gerrit.extensions.restapi.BadRequestException { if (range == null) { return; } if (!(range.isValid())) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format((""Range (%s:%s - %s:%s) is not"" + "" valid for the replacement of the robot comment on %s""), range.startLine, range.startCharacter, range.endLine, range.endCharacter, commentPath)); } }",cb2690bb9708b6ec5af32e3eb64d614fe4d1b860,"private void ensureRangeIsValid(java.lang.String commentPath, com.google.gerrit.extensions.client.Comment.Range range) throws com.google.gerrit.extensions.restapi.BadRequestException { if (range == null) { return; } if (!(range.isValid())) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format((""Range (%s:%s - %s:%s) is not"" + "" valid for the comment on %s""), range.startLine, range.startCharacter, range.endLine, range.endCharacter, commentPath)); } }",a7dbefa2219aae354dd14356d71c8694adf3c7b2,"ensureRangeIsValid(java.lang.String,com.google.gerrit.extensions.client.Comment.Range)","ensureRangeIsValid(java.lang.String,com.google.gerrit.extensions.client.Comment.Range)",5,9,"private void ensureRangeIsValid(java.lang.String commentPath, com.google.gerrit.extensions.client.Comment.Range range) throws com.google.gerrit.extensions.restapi.BadRequestException { if (range == null) { return; } if (!(range.isValid())) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""Range (%s:%s - %s:%s) is not valid for the comment on %s"", range.startLine, range.startCharacter, range.endLine, range.endCharacter, commentPath)); } }",f61d0fa21d9aba18b123d0978b290e9f5fc6ba1c,"ensureRangeIsValid(java.lang.String,com.google.gerrit.extensions.client.Comment.Range)",29044,140,136
64311,gitiles-servlet_src_main_java_com_google_gitiles_doc_GitilesMarkdown.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public org.parboiled.Rule cols() { org.parboiled.support.StringBuilderVar body = new org.parboiled.support.StringBuilderVar(); return NodeSequence(colsTag(), Newline(), oneOrMore(testNot(colsTag(), Newline()), Line(body)), colsTag(), Newline(), push(new com.google.gitiles.doc.ColsNode(parse(body).getChildren()))); }",857bc44ae65825262fda64aea0795d38b04cc7ff,,cols(),20,5,"public org.parboiled.Rule cols() { org.parboiled.support.StringBuilderVar body = new org.parboiled.support.StringBuilderVar(); return NodeSequence(colsTag(), Newline(), oneOrMore(testNot(colsTag(), Newline()), Line(body)), colsTag(), Newline(), push(new com.google.gitiles.doc.ColsNode(parse(body)))); }",05dbf0899c3358eee8a5648614c6ed1f0b472829,cols(),51512,96,94
60170,gerrit-server_src_main_java_com_google_gerrit_server_change_HashtagsUtil.java,,,,"private java.util.Set<java.lang.String> extractTags(java.util.Set<java.lang.String> input) throws com.google.gerrit.extensions.restapi.BadRequestException { if (input == null) { return java.util.Collections.emptySet(); } else { java.util.HashSet<java.lang.String> result = new java.util.HashSet<>(); for (java.lang.String hashtag : input) { if (hashtag.contains("","")) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""Hashtags may not contain commas""); } if (!(hashtag.trim().isEmpty())) { result.add(hashtag.trim()); } } return result; } }",01da4ca23abcf861976440e82ff014a9316bed3c,,extractTags(java.util.Set),2,0,"private java.util.Set<java.lang.String> extractTags(java.util.Set<java.lang.String> input) throws java.lang.IllegalArgumentException { if (input == null) { return java.util.Collections.emptySet(); } else { java.util.HashSet<java.lang.String> result = new java.util.HashSet<>(); for (java.lang.String hashtag : input) { if (hashtag.contains("","")) { throw new java.lang.IllegalArgumentException(""Hashtags may not contain commas""); } if (!(hashtag.trim().isEmpty())) { result.add(hashtag.trim()); } } return result; } }",9f8aae32dcf9a457ea508ab21b3e4aea4eba989f,extractTags(java.util.Set),7431,161,143
23820,gerrit-server_src_main_java_com_google_gerrit_server_account_CapabilityControl.java,2.0,"private java.util.Map<java.lang.String, java.util.List<com.google.gerrit.common.data.PermissionRule>> permissions() { if ((permissions) == null) { permissions = new java.util.HashMap<java.lang.String, java.util.List<com.google.gerrit.common.data.PermissionRule>>(); com.google.gerrit.common.data.AccessSection section = state.getConfig().getAccessSection(AccessSection.GLOBAL_CAPABILITIES); for (com.google.gerrit.common.data.Permission permission : section.getPermissions()) { for (com.google.gerrit.common.data.PermissionRule rule : permission.getRules()) { if (matchGroup(rule.getGroup().getUUID())) { if (!(rule.getDeny())) { java.util.List<com.google.gerrit.common.data.PermissionRule> r = permissions.get(permission.getName()); if (r == null) { r = new java.util.ArrayList<com.google.gerrit.common.data.PermissionRule>(2); permissions.put(permission.getName(), r); } r.add(rule); } } } } } return permissions; }",68c89dc3d1aa24c2343dab1dc59b5bcbaaa8f69e,"private java.util.Map<java.lang.String, java.util.List<com.google.gerrit.common.data.PermissionRule>> permissions() { if ((permissions) == null) { permissions = new java.util.HashMap<java.lang.String, java.util.List<com.google.gerrit.common.data.PermissionRule>>(); com.google.gerrit.common.data.AccessSection section = state.getConfig().getAccessSection(AccessSection.GLOBAL_CAPABILITIES); if (section != null) { for (com.google.gerrit.common.data.Permission permission : section.getPermissions()) { for (com.google.gerrit.common.data.PermissionRule rule : permission.getRules()) { if (matchGroup(rule.getGroup().getUUID())) { if (!(rule.getDeny())) { java.util.List<com.google.gerrit.common.data.PermissionRule> r = permissions.get(permission.getName()); if (r == null) { r = new java.util.ArrayList<com.google.gerrit.common.data.PermissionRule>(2); permissions.put(permission.getName(), r); } r.add(rule); } } } } } } return permissions; }",84774e35efa6dd88ab5c130d72da4af78214a3f5,permissions(),permissions(),2,2,"private java.util.Map<java.lang.String, java.util.List<com.google.gerrit.common.data.PermissionRule>> permissions() { if ((permissions) == null) { permissions = indexPermissions(); } return permissions; }",2c048052f9de9174208b448efb2c0f6491363ec6,permissions(),48985,275,55
80012,gerrit-server_src_main_java_com_google_gerrit_server_extensions_events_EventUtil.java,4.0,"public com.google.gerrit.extensions.common.RevisionInfo revisionInfo(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db.get(), project, ps.getId().getParentKey()); com.google.gerrit.server.project.ChangeControl ctl = cd.changeControl(); return changeJson.getRevisionInfo(ctl, ps); }",3def40564af2c39488cbdb36bbf0a097d3abf034,"public com.google.gerrit.extensions.common.RevisionInfo revisionInfo(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db.get(), project, ps.getId().getParentKey()); com.google.gerrit.server.project.ChangeControl ctl = cd.changeControl(); return changeJson.getRevisionInfo(ctl, ps, true); }",e7094a6fb442df8d0533f671e332fc276f5a0e49,"revisionInfo(com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.reviewdb.client.PatchSet)","revisionInfo(com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.reviewdb.client.PatchSet)",3,4,"public com.google.gerrit.extensions.common.RevisionInfo revisionInfo(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db.get(), project, ps.getId().getParentKey()); com.google.gerrit.server.project.ChangeControl ctl = cd.changeControl(); return changeJson.getRevisionInfo(ctl, ps); }",3def40564af2c39488cbdb36bbf0a097d3abf034,"revisionInfo(com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.reviewdb.client.PatchSet)",57924,173,171
106139,src_main_java_com_ericsson_gerrit_plugins_highavailability_Configuration.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean getPreferIPv4() { return preferIPv4; },0dd80ac98dfcc7a557629c59c00145d760dd7fab,,getPreferIPv4(),25,6,"private static java.lang.String getString(org.eclipse.jgit.lib.Config cfg, java.lang.String section, java.lang.String subSection, java.lang.String name, java.lang.String defaultValue) { java.lang.String value = cfg.getString(section, subSection, name); return value == null ? defaultValue : value; }",b79c25a5c728dc56971aaad6385c057ee9719e54,"getString(org.eclipse.jgit.lib.Config,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",5420,14,81
10644,src_main_java_com_google_gerrit_client_patches_PatchScreen.java,20.0,@java.lang.Override public void onFailure(final java.lang.Throwable caught) { if ((rpcSequence) == rpcseq) { if ((isNoDifferences(caught)) && (!isFirst)) { historyTable.enableAll(true); showPatch(false); } else { super.onFailure(caught); } } },f492406f27485491c1ab77bbe971b7cc99691310,@java.lang.Override public void onFailure(final java.lang.Throwable caught) { if ((rpcSequence) == rpcseq) { if ((caught instanceof com.google.gwtjsonrpc.client.RemoteJsonException) && (!isFirst)) { historyTable.enableAll(true); showPatch(false); } else { super.onFailure(caught); } } },4c5863496335d83415e48b39646fb300e8d74237,onFailure(java.lang.Throwable),onFailure(java.lang.Throwable),7,21,@java.lang.Override public void onFailure(final java.lang.Throwable caught) { if ((rpcSequence) == rpcseq) { super.onFailure(caught); } },a52d8709e2beb97c6cb5897843bc5635fcb9dec9,onFailure(java.lang.Throwable),114970,80,39
118893,gerrit-server_src_main_java_com_google_gerrit_server_git_VisibleRefFilter.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean canReadRef(java.lang.String ref) { try { return permissionBackend.user(user).project(projectCtl.getProject().getNameKey()).ref(ref).test(RefPermission.READ); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.VisibleRefFilter.log.error(""unable to check permissions"", e); return false; } }",695154a18c9c651ca3f05afc5a319c33b948fa6d,,canReadRef(java.lang.String),3,7,"private boolean canReadRef(java.lang.String ref) { try { permissionBackend.user(user).project(projectCtl.getProject().getNameKey()).ref(ref).check(RefPermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.VisibleRefFilter.log.error(""unable to check permissions"", e); return false; } return true; }",9d444bcf04774da94cb4d0a76808eee1c1ddca7b,canReadRef(java.lang.String),146377,98,123
76930,gerrit-gwtui_src_main_java_com_google_gerrit_client_rpc_CallbackGroup.java,28.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private <T> com.google.gerrit.client.rpc.HttpCallback<T> handleAdd(com.google.gerrit.client.rpc.HttpCallback<T> cb) { checkFinalAdded(); if (failed) { cb.onFailure(failedThrowable); return new com.google.gerrit.client.rpc.HttpCallback<T>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.HttpResponse<T> result) { } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }; } com.google.gerrit.client.rpc.CallbackGroup.HttpCallbackImpl<T> w = new com.google.gerrit.client.rpc.CallbackGroup.HttpCallbackImpl(cb); callbacks.add(w); remaining.add(w); return w; },2a1c2b89423b9ec56d3dbb71fa6aea33a31629f9,,handleAdd(com.google.gerrit.client.rpc.HttpCallback),4,2,private <T> com.google.gerrit.client.rpc.HttpCallback<T> handleAdd(com.google.gerrit.client.rpc.HttpCallback<T> cb) { if (failed) { cb.onFailure(failedThrowable); return new com.google.gerrit.client.rpc.HttpCallback<T>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.HttpResponse<T> result) { } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }; } com.google.gerrit.client.rpc.CallbackGroup.HttpCallbackImpl<T> w = new com.google.gerrit.client.rpc.CallbackGroup.HttpCallbackImpl(cb); callbacks.add(w); remaining.add(w); return w; },8ed8937a1d18774867e9057036a93f2f1ac2fe90,handleAdd(com.google.gerrit.client.rpc.HttpCallback),103407,187,183
47981,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SidePanel.java,,,,void adjustGutters() { for (com.google.gerrit.client.diff.SidePanel.GutterWrapper info : gutters) { adjustGutter(info); } },6036a202a848393b30232030ddb2e0f95a6a7302,,adjustGutters(),10,4,void adjustGutters(net.codemirror.lib.CodeMirror cmB) { this.cmB = cmB; com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { for (com.google.gerrit.client.diff.SidePanel.GutterWrapper info : gutters) { adjustGutter(info); } } }); },823bdb28ab6de90876a0e9c597e0220f08e8d2ea,adjustGutters(net.codemirror.lib.CodeMirror),163324,42,109
53381,gerrit-server_src_main_java_com_google_gerrit_server_project_ChangeControl.java,46.0,"public boolean isReviewer(com.google.gerrit.reviewdb.server.ReviewDb db, @com.google.gerrit.common.Nullable com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { if (getCurrentUser().isIdentifiedUser()) { java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> results = (cd != null) ? cd.reviewers().values() : approvalsUtil.getReviewers(db, getChange().getId()).values(); com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (getCurrentUser())); return results.contains(user.getAccountId()); } return false; }",b0eb4040eaa71cbc87e3952a9c22f70e738e8978,"public boolean isReviewer(com.google.gerrit.reviewdb.server.ReviewDb db, @com.google.gerrit.common.Nullable com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { if (getCurrentUser().isIdentifiedUser()) { java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> results = (cd != null) ? cd.reviewers().values() : approvalsUtil.getReviewers(db, notes).values(); com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (getCurrentUser())); return results.contains(user.getAccountId()); } return false; }",3d2e8232727b3b8b94120bb2fb334707447e6dbc,"isReviewer(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.query.change.ChangeData)","isReviewer(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.query.change.ChangeData)",9,46,"public boolean isReviewer(com.google.gerrit.reviewdb.server.ReviewDb db, @com.google.gerrit.common.Nullable com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { if (getCurrentUser().isIdentifiedUser()) { java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> results = changeData(db, cd).reviewers().values(); com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (getCurrentUser())); return results.contains(user.getAccountId()); } return false; }",cc887b1b0761e892abdce4690b94e175a640e5ed,"isReviewer(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.query.change.ChangeData)",19266,177,159
93409,gerrit-server_src_main_java_com_google_gerrit_server_index_account_AccountField.java,1.0,"@java.lang.Override public Iterable<java.lang.String> get(com.google.gerrit.server.account.AccountState input, com.google.gerrit.server.index.account.FillArgs args) { return com.google.common.collect.Iterables.transform(input.getExternalIds(), ( id) -> id.getKey().get()); }",9dde784cbfc1ae604584d1d0ae0c4045347bb8bb,"@java.lang.Override public Iterable<java.lang.String> get(com.google.gerrit.server.account.AccountState input, com.google.gerrit.server.index.account.FillArgs args) { return com.google.common.collect.Iterables.transform(input.getExternalIds(), ( id) -> id.key().toString()); }",346bd0fb4b703c161220a51468a920dbfdaf1397,"get(com.google.gerrit.server.account.AccountState,com.google.gerrit.server.index.account.FillArgs)","get(com.google.gerrit.server.account.AccountState,com.google.gerrit.server.index.account.FillArgs)",27,1,"@java.lang.Override public Iterable<java.lang.String> get(com.google.gerrit.server.account.AccountState input, com.google.gerrit.server.index.account.FillArgs args) { return com.google.common.collect.Iterables.transform(input.getExternalIds(), ( id) -> id.key().get()); }",0fcd5825ab09404211b88717aca2eed4a07d04e9,"get(com.google.gerrit.server.account.AccountState,com.google.gerrit.server.index.account.FillArgs)",179130,80,80
30451,gerrit-server_src_main_java_com_google_gerrit_server_account_VisibleGroups.java,9.0,"public com.google.gerrit.common.data.GroupList get() throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.client.OrmException { final java.lang.Iterable<com.google.gerrit.reviewdb.AccountGroup> groups; if (((projects) != null) && (!(projects.isEmpty()))) { groups = getGroupsForProjects(); } else { groups = groupCache.all(); } return createGroupList(filterGroups(groups)); }",7214dbf55869f6b04376fcd79e35580fecb6ea01,"public com.google.gerrit.common.data.GroupList get() throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.client.OrmException { final java.lang.Iterable<com.google.gerrit.reviewdb.AccountGroup> groups; if (((projects) != null) && (!(projects.isEmpty()))) { groups = getGroupsForProjects(); } else if ((user) != null) { groups = getGroupsForUser(); } else { groups = groupCache.all(); } return createGroupList(filterGroups(groups)); }",a438c7ba90fe515b5cd67047f2e5ab76347eaca4,get(),get(),2,7,"public com.google.gerrit.common.data.GroupList get() throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.client.OrmException { final java.lang.Iterable<com.google.gerrit.reviewdb.AccountGroup> groups = groupCache.all(); return createGroupList(filterGroups(groups)); }",044d962ca2ac3ffe3161aafdfb51be996ab21ee5,get(),26762,128,84
41190,gerrit-server_src_main_java_com_google_gerrit_server_query_change_AndSource.java,3.0,"@java.lang.Override public int compare(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> a, com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> b) { int ai = (a instanceof com.google.gerrit.server.query.change.ChangeDataSource) ? 0 : 1; int bi = (b instanceof com.google.gerrit.server.query.change.ChangeDataSource) ? 0 : 1; int cmp = ai - bi; if (((cmp == 0) && (a instanceof com.google.gerrit.server.query.change.ChangeDataSource)) && (b instanceof com.google.gerrit.server.query.change.ChangeDataSource)) { ai = (((com.google.gerrit.server.query.change.ChangeDataSource) (a)).hasChange()) ? 0 : 1; bi = (((com.google.gerrit.server.query.change.ChangeDataSource) (b)).hasChange()) ? 0 : 1; cmp = ai - bi; } if (cmp == 0) { cmp = (a.getCost()) - (b.getCost()); } if (((cmp == 0) && (a instanceof com.google.gerrit.server.query.change.ChangeDataSource)) && (b instanceof com.google.gerrit.server.query.change.ChangeDataSource)) { com.google.gerrit.server.query.change.ChangeDataSource as = ((com.google.gerrit.server.query.change.ChangeDataSource) (a)); com.google.gerrit.server.query.change.ChangeDataSource bs = ((com.google.gerrit.server.query.change.ChangeDataSource) (b)); cmp = (as.getCardinality()) - (bs.getCardinality()); } return cmp; }",327be2f869d056c5a9a5212d0ba6b21d6e2f3a0a,"@java.lang.Override public int compare(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> a, com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> b) { int ai = (a instanceof com.google.gerrit.server.query.change.ChangeDataSource) ? 0 : 1; int bi = (b instanceof com.google.gerrit.server.query.change.ChangeDataSource) ? 0 : 1; int cmp = ai - bi; if (cmp == 0) { cmp = (a.getCost()) - (b.getCost()); } if (((cmp == 0) && (a instanceof com.google.gerrit.server.query.change.ChangeDataSource)) && (b instanceof com.google.gerrit.server.query.change.ChangeDataSource)) { com.google.gerrit.server.query.change.ChangeDataSource as = ((com.google.gerrit.server.query.change.ChangeDataSource) (a)); com.google.gerrit.server.query.change.ChangeDataSource bs = ((com.google.gerrit.server.query.change.ChangeDataSource) (b)); cmp = (as.getCardinality()) - (bs.getCardinality()); } if (((cmp == 0) && (a instanceof com.google.gerrit.server.query.change.ChangeDataSource)) && (b instanceof com.google.gerrit.server.query.change.ChangeDataSource)) { ai = (((com.google.gerrit.server.query.change.ChangeDataSource) (a)).hasChange()) ? 0 : 1; bi = (((com.google.gerrit.server.query.change.ChangeDataSource) (b)).hasChange()) ? 0 : 1; cmp = ai - bi; } return cmp; }",5794f2f4c41c114f5389adc582651109e0a1cce7,"compare(com.google.gerrit.server.query.Predicate,com.google.gerrit.server.query.Predicate)","compare(com.google.gerrit.server.query.Predicate,com.google.gerrit.server.query.Predicate)",2,3,"@java.lang.Override public int compare(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> a, com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> b) { int ai = (a instanceof com.google.gerrit.server.query.change.ChangeDataSource) ? 0 : 1; int bi = (b instanceof com.google.gerrit.server.query.change.ChangeDataSource) ? 0 : 1; int cmp = ai - bi; if (cmp == 0) { cmp = (a.getCost()) - (b.getCost()); } if (((cmp == 0) && (a instanceof com.google.gerrit.server.query.change.ChangeDataSource)) && (b instanceof com.google.gerrit.server.query.change.ChangeDataSource)) { com.google.gerrit.server.query.change.ChangeDataSource as = ((com.google.gerrit.server.query.change.ChangeDataSource) (a)); com.google.gerrit.server.query.change.ChangeDataSource bs = ((com.google.gerrit.server.query.change.ChangeDataSource) (b)); cmp = (as.getCardinality()) - (bs.getCardinality()); if (cmp == 0) { cmp = (as.hasChange() ? 0 : 1) - (bs.hasChange() ? 0 : 1); } } return cmp; }",49f29ce84074f78028e384ebbea921a6f3dfed4b,"compare(com.google.gerrit.server.query.Predicate,com.google.gerrit.server.query.Predicate)",179970,415,330
34953,gerrit-server_src_main_java_com_google_gerrit_server_account_GroupControl.java,5.0,public boolean isOwner() { if ((isOwner) == null) { com.google.gerrit.reviewdb.client.AccountGroup g = groupCache.get(group.getOwnerGroupId()); com.google.gerrit.reviewdb.client.AccountGroup.UUID ownerUUID = (g != null) ? g.getGroupUUID() : null; isOwner = (getCurrentUser().getEffectiveGroups().contains(ownerUUID)) || (getCurrentUser().getCapabilities().canAdministrateServer()); } return isOwner; },21fe7c590cedc49568485bee85e66f271b51849f,public boolean isOwner() { if (!(group.hasOwnerGroupId())) { isOwner = false; } else if ((isOwner) == null) { com.google.gerrit.reviewdb.client.AccountGroup g = groupCache.get(group.getOwnerGroupId()); com.google.gerrit.reviewdb.client.AccountGroup.UUID ownerUUID = (g != null) ? g.getGroupUUID() : null; isOwner = (getCurrentUser().getEffectiveGroups().contains(ownerUUID)) || (getCurrentUser().getCapabilities().canAdministrateServer()); } return isOwner; },74f96609ced0a1a1304bc72d03351c5edf856be4,isOwner(),isOwner(),25,5,public boolean isOwner() { com.google.gerrit.reviewdb.client.AccountGroup accountGroup = com.google.gerrit.common.data.GroupDescriptions.toAccountGroup(group); if (accountGroup == null) { isOwner = false; } else if ((isOwner) == null) { com.google.gerrit.reviewdb.client.AccountGroup.UUID ownerUUID = accountGroup.getOwnerGroupUUID(); isOwner = (getCurrentUser().getEffectiveGroups().contains(ownerUUID)) || (getCurrentUser().getCapabilities().canAdministrateServer()); } return isOwner; },5f59adc164cae248a40367b1a853b6ae3f4a2892,isOwner(),76392,127,129
157552,javatests_com_google_gerrit_server_account_AuthorizedKeysTest.java,4.0,"@org.junit.Test public void validity() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = new com.google.gerrit.server.account.AccountSshKey(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (-1)), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.isValid()).isFalse(); key = new com.google.gerrit.server.account.AccountSshKey(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 0), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.isValid()).isFalse(); key = new com.google.gerrit.server.account.AccountSshKey(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.isValid()).isTrue(); }",051c584eb5e412e7486dfcbf49f2b5b16987cb5f,"@org.junit.Test public void validity() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (-1)), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 0), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isTrue(); }",45f1f41740a0a7671b57947753f45b67ace2a47f,validity(),validity(),5,4,"@org.junit.Test public void validity() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(accountId, (-1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(accountId, 0, com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(accountId, 1, com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isTrue(); }",5e7979ebfcc68173ca5923891b82aaf2f7fa82f5,validity(),128197,236,180
30280,gerrit-server_src_main_java_com_google_gerrit_server_project_PerRequestProjectControlCache.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void evict(com.google.gerrit.reviewdb.Project.NameKey nameKey) { controls.remove(nameKey); },ab208db625c1bdfb905f04f9d8bee85dd7f09a1c,,evict(com.google.gerrit.reviewdb.Project$NameKey),2,0,public void evict(com.google.gerrit.reviewdb.Project project) { projectCache.evict(project); controls.remove(project.getNameKey()); },c32a717e26325010ae9f904d5f99c2f0e5955905,evict(com.google.gerrit.reviewdb.Project),50813,32,37
16257,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_SitePathInitializer.java,2.0,"public void run() throws java.lang.Exception { ui.header(""Gerrit Code Review %s"", com.google.gerrit.pgm.init.InitUtil.version()); if (site.isNew) { if (!(ui.yesno(true, ""Create '%s'"", site.site_path.getCanonicalPath()))) { throw com.google.gerrit.pgm.init.InitUtil.die(""aborted by user""); } if ((!(site.site_path.isDirectory())) && (!(site.site_path.mkdirs()))) { throw com.google.gerrit.pgm.init.InitUtil.die((""Cannot make directory "" + (site.site_path))); } flags.deleteOnFailure = true; } com.google.gerrit.pgm.init.InitUtil.mkdir(site.bin_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.etc_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.lib_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.logs_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.static_dir); for (com.google.gerrit.pgm.init.InitStep step : steps) { step.run(); } com.google.gerrit.pgm.init.InitUtil.savePublic(flags.cfg); com.google.gerrit.pgm.init.InitUtil.saveSecure(flags.sec); if (!(site.replication_config.exists())) { site.replication_config.createNewFile(); } com.google.gerrit.pgm.init.InitUtil.extract(site.gerrit_sh, com.google.gerrit.pgm.Init.class, ""gerrit.sh""); com.google.gerrit.pgm.init.InitUtil.chmod(493, site.gerrit_sh); if (!(ui.isBatch())) { java.lang.System.err.println(); } }",1322741c6b1029d18196cda2cb4d6880e2a4bbb7,"public void run() throws java.lang.Exception { ui.header(""Gerrit Code Review %s"", com.google.gerrit.pgm.init.InitUtil.version()); if (site.isNew) { if (!(ui.yesno(true, ""Create '%s'"", site.site_path.getCanonicalPath()))) { throw com.google.gerrit.pgm.init.InitUtil.die(""aborted by user""); } if ((!(site.site_path.isDirectory())) && (!(site.site_path.mkdirs()))) { throw com.google.gerrit.pgm.init.InitUtil.die((""Cannot make directory "" + (site.site_path))); } flags.deleteOnFailure = true; } com.google.gerrit.pgm.init.InitUtil.mkdir(site.bin_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.etc_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.lib_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.logs_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.mail_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.static_dir); for (com.google.gerrit.pgm.init.InitStep step : steps) { step.run(); } com.google.gerrit.pgm.init.InitUtil.savePublic(flags.cfg); com.google.gerrit.pgm.init.InitUtil.saveSecure(flags.sec); if (!(site.replication_config.exists())) { site.replication_config.createNewFile(); } com.google.gerrit.pgm.init.InitUtil.extract(site.gerrit_sh, com.google.gerrit.pgm.Init.class, ""gerrit.sh""); com.google.gerrit.pgm.init.InitUtil.chmod(493, site.gerrit_sh); extractMailExample(""Merged.vm""); if (!(ui.isBatch())) { java.lang.System.err.println(); } }",3fe9125e08966c21023934f7e09f36d557a4b03e,run(),run(),3,1,"public void run() throws java.lang.Exception { ui.header(""Gerrit Code Review %s"", com.google.gerrit.pgm.init.InitUtil.version()); if (site.isNew) { if (!(ui.yesno(true, ""Create '%s'"", site.site_path.getCanonicalPath()))) { throw com.google.gerrit.pgm.init.InitUtil.die(""aborted by user""); } if ((!(site.site_path.isDirectory())) && (!(site.site_path.mkdirs()))) { throw com.google.gerrit.pgm.init.InitUtil.die((""Cannot make directory "" + (site.site_path))); } flags.deleteOnFailure = true; } com.google.gerrit.pgm.init.InitUtil.mkdir(site.bin_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.etc_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.lib_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.logs_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.mail_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.static_dir); for (com.google.gerrit.pgm.init.InitStep step : steps) { step.run(); } com.google.gerrit.pgm.init.InitUtil.savePublic(flags.cfg); com.google.gerrit.pgm.init.InitUtil.saveSecure(flags.sec); if (!(site.replication_config.exists())) { site.replication_config.createNewFile(); } com.google.gerrit.pgm.init.InitUtil.extract(site.gerrit_sh, com.google.gerrit.pgm.Init.class, ""gerrit.sh""); com.google.gerrit.pgm.init.InitUtil.chmod(493, site.gerrit_sh); extractMailExample(""ChangeSubject.vm""); extractMailExample(""Merged.vm""); if (!(ui.isBatch())) { java.lang.System.err.println(); } }",ea9eec911b2bd66161bb7939a002004c96296479,run(),112140,488,497
127031,src_main_java_com_googlesource_gerrit_plugins_webhooks_PostTask.java,6.0,"@java.lang.Override public void run() { try { java.lang.String content = body.get(); if (com.google.common.base.Strings.isNullOrEmpty(content)) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug(""No content. Webhook [{}] skipped."", url); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.post(url, content); if ((!(result.successful)) && ((execCnt) < (cfg.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (cfg.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error(""Failed to post: {}"", toString(), e); } } }",4cc01a01916671fb2397f8197a3ef016969ae535,"@java.lang.Override public void run() { try { java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Output> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug(""No content. Webhook [{}] skipped."", url); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.post(url, content.get().headers, content.get().body); if ((!(result.successful)) && ((execCnt) < (cfg.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (cfg.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error(""Failed to post: {}"", toString(), e); } } }",414303006e8282a9129dbfe3e7b5ac6a31f7c28d,run(),run(),11,6,"@java.lang.Override public void run() { try { java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug(""No content. Webhook [{}] skipped."", url); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.post(url, content.get()); if ((!(result.successful)) && ((execCnt) < (cfg.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (cfg.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error(""Failed to post: {}"", toString(), e); } } }",3c2320c4132c21114eeaf3e866dc26755e4c04ab,run(),40663,244,236
91570,gerrit-server_src_main_java_com_google_gerrit_server_mail_send_CommentSender.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private java.lang.String getCommentTimestamp() { return MailUtil.rfcDateformatter.print(new org.joda.time.DateTime(timestamp)); },ef28b16355ac24c3ad73bef5a3fba8c3f4c3de0e,,getCommentTimestamp(),5,13,"private java.lang.String getCommentTimestamp() { return MailUtil.rfcDateformatter.format(java.time.ZonedDateTime.ofInstant(timestamp.toInstant(), java.time.ZoneId.of(""UTC""))); }",015e697ffcd1f7e883dbeb2f5e19e1c9a50366b3,getCommentTimestamp(),51188,33,46
76267,gerrit-server_src_main_java_com_google_gerrit_server_index_change_AllChangesIndexer.java,9.0,"private org.eclipse.jgit.revwalk.RevTree aFor(org.eclipse.jgit.revwalk.RevCommit b, org.eclipse.jgit.revwalk.RevWalk walk) throws java.io.IOException { switch (b.getParentCount()) { case 0 : return walk.parseTree(emptyTree()); case 1 : org.eclipse.jgit.revwalk.RevCommit a = b.getParent(0); walk.parseBody(a); return walk.parseTree(a.getTree()); case 2 : return com.google.gerrit.server.patch.PatchListLoader.automerge(repo, walk, b, mergeStrategy); default : return null; } }",8675be8fb3244e5aadbba425ff4bd0c90720c385,"private org.eclipse.jgit.revwalk.RevTree aFor(org.eclipse.jgit.revwalk.RevCommit b, org.eclipse.jgit.revwalk.RevWalk walk) throws java.io.IOException { switch (b.getParentCount()) { case 0 : return walk.parseTree(emptyTree()); case 1 : org.eclipse.jgit.revwalk.RevCommit a = b.getParent(0); walk.parseBody(a); return walk.parseTree(a.getTree()); case 2 : return autoMerger.merge(repo, walk, b, mergeStrategy).getTree(); default : return null; } }",4dd675bd1b0eb933df0778698b3af5f3f7be2eb1,"aFor(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk)","aFor(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk)",13,9,"private org.eclipse.jgit.revwalk.RevTree aFor(org.eclipse.jgit.revwalk.RevCommit b, org.eclipse.jgit.revwalk.RevWalk walk) throws java.io.IOException { switch (b.getParentCount()) { case 0 : return walk.parseTree(emptyTree()); case 1 : org.eclipse.jgit.revwalk.RevCommit a = b.getParent(0); walk.parseBody(a); return walk.parseTree(a.getTree()); case 2 : org.eclipse.jgit.revwalk.RevCommit am = autoMerger.merge(repo, walk, b, mergeStrategy); return am == null ? null : am.getTree(); default : return null; } }",083e4dd390c144b91637467d990001b3d638a20b,"aFor(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk)",32601,140,163
41405,gerrit-gwtui_src_main_java_com_google_gerrit_client_groups_GroupApi.java,1.0,"public static void addMembers(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, java.util.Set<java.lang.String> members, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeList<com.google.gerrit.client.groups.MemberInfo>> cb) { com.google.gerrit.client.rpc.RestApi call = new com.google.gerrit.client.rpc.RestApi(com.google.gerrit.client.groups.GroupApi.membersBase(groupUUID)); com.google.gerrit.client.groups.GroupApi.MemberInput input = com.google.gerrit.client.groups.GroupApi.MemberInput.create(); for (java.lang.String member : members) { input.add_member(member); } call.data(input).put(cb); }",777861872c3311ead8dbbe4a5bd5322c97796b21,"public static void addMembers(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, java.util.Set<java.lang.String> members, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeList<com.google.gerrit.client.groups.MemberInfo>> cb) { if ((members.size()) == 1) { java.lang.String m = members.iterator().next(); new com.google.gerrit.client.rpc.RestApi((((com.google.gerrit.client.groups.GroupApi.membersBase(groupUUID)) + ""/"") + m)).put(cb); } else { com.google.gerrit.client.rpc.RestApi call = new com.google.gerrit.client.rpc.RestApi(com.google.gerrit.client.groups.GroupApi.membersBase(groupUUID)); com.google.gerrit.client.groups.GroupApi.MemberInput input = com.google.gerrit.client.groups.GroupApi.MemberInput.create(); for (java.lang.String member : members) { input.add_member(member); } call.data(input).put(cb); } }",ee4b3a7ade20411fd1d8f27b1bda0160915a7808,"addMembers(com.google.gerrit.reviewdb.client.AccountGroup$UUID,java.util.Set,com.google.gwt.user.client.rpc.AsyncCallback)","addMembers(com.google.gerrit.reviewdb.client.AccountGroup$UUID,java.util.Set,com.google.gwt.user.client.rpc.AsyncCallback)",2,1,"public static void addMembers(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, java.util.Set<java.lang.String> members, final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeList<com.google.gerrit.client.groups.MemberInfo>> cb) { if ((members.size()) == 1) { com.google.gerrit.client.groups.GroupApi.addMember(groupUUID, members.iterator().next(), new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.groups.MemberInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.groups.MemberInfo result) { cb.onSuccess(com.google.gerrit.client.rpc.NativeList.of(result)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { cb.onFailure(caught); } }); } else { com.google.gerrit.client.rpc.RestApi call = new com.google.gerrit.client.rpc.RestApi(com.google.gerrit.client.groups.GroupApi.membersBase(groupUUID)); com.google.gerrit.client.groups.GroupApi.MemberInput input = com.google.gerrit.client.groups.GroupApi.MemberInput.create(); for (java.lang.String member : members) { input.add_member(member); } call.data(input).put(cb); } }",7bc9626c9162d6fc6dfdc8d18b97220aedf56d84,"addMembers(com.google.gerrit.reviewdb.client.AccountGroup$UUID,java.util.Set,com.google.gwt.user.client.rpc.AsyncCallback)",175411,277,350
59129,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_edit_ChangeEditIT.java,11.0,"@org.junit.Before public void setUp() throws java.lang.Exception { db = reviewDbProvider.open(); java.lang.String changeId = newChange(git, admin.getIdent()); change = getChange(changeId); ps = getCurrentPatchSet(changeId); assertNotNull(ps); changeId = newChange2(git, admin.getIdent()); change2 = getChange(changeId); assertNotNull(change2); ps2 = getCurrentPatchSet(changeId); assertNotNull(ps2); session = new com.google.gerrit.acceptance.RestSession(server, admin); atrScope.set(atrScope.newContext(reviewDbProvider, sshSession, identifiedUserFactory.create(com.google.inject.util.Providers.of(db), admin.getId()))); }",12c445b261090cde2c8a859576eb5bfbcc9b1a4b,"@org.junit.Before public void setUp() throws java.lang.Exception { db = reviewDbProvider.open(); changeId = newChange(git, admin.getIdent()); ps = getCurrentPatchSet(changeId); amendChange(changeId); change = getChange(changeId); assertNotNull(ps); java.lang.String changeId2 = newChange2(git, admin.getIdent()); change2 = getChange(changeId2); assertNotNull(change2); ps2 = getCurrentPatchSet(changeId2); assertNotNull(ps2); session = new com.google.gerrit.acceptance.RestSession(server, admin); atrScope.set(atrScope.newContext(reviewDbProvider, sshSession, identifiedUserFactory.create(com.google.inject.util.Providers.of(db), admin.getId()))); }",45ddea4f6d425d4bb13f08d62627fb33345aa6f1,setUp(),setUp(),6,14,"@org.junit.Before public void setUp() throws java.lang.Exception { db = reviewDbProvider.open(); changeId = newChange(git, admin.getIdent()); ps = getCurrentPatchSet(changeId); amendChange(git, admin.getIdent(), changeId); change = getChange(changeId); assertNotNull(ps); java.lang.String changeId2 = newChange2(git, admin.getIdent()); change2 = getChange(changeId2); assertNotNull(change2); ps2 = getCurrentPatchSet(changeId2); assertNotNull(ps2); session = new com.google.gerrit.acceptance.RestSession(server, admin); atrScope.set(atrScope.newContext(reviewDbProvider, sshSession, identifiedUserFactory.create(com.google.inject.util.Providers.of(db), admin.getId()))); final long clockStepMs = java.util.concurrent.TimeUnit.MILLISECONDS.convert(1, java.util.concurrent.TimeUnit.SECONDS); final java.util.concurrent.atomic.AtomicLong clockMs = new java.util.concurrent.atomic.AtomicLong(new org.joda.time.DateTime(2009, 9, 30, 17, 0, 0).getMillis()); org.joda.time.DateTimeUtils.setCurrentMillisProvider(new org.joda.time.DateTimeUtils.MillisProvider() { @java.lang.Override public long getMillis() { return clockMs.getAndAdd(clockStepMs); } }); }",bd5c97c8014b232fafb0b7c70ca74b9e02607727,setUp(),182817,179,312
68534,gerrit-server_src_main_java_com_google_gerrit_server_WebLinks.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> getFileHistoryLinks(final java.lang.String project, final java.lang.String revision, final java.lang.String file) { return filterLinks(fileLogLinks, new com.google.common.base.Function<com.google.gerrit.extensions.webui.WebLink, com.google.gerrit.extensions.common.WebLinkInfo>() { @java.lang.Override public com.google.gerrit.extensions.common.WebLinkInfo apply(com.google.gerrit.extensions.webui.WebLink webLink) { return ((com.google.gerrit.extensions.webui.FileHistoryWebLink) (webLink)).getFileHistoryWebLink(project, revision, file); } }); }",ebeb2bfe0a2ef9568388f83ac286bda932ab0b76,,"getFileHistoryLinks(java.lang.String,java.lang.String,java.lang.String)",11,3,"public com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> getFileHistoryLinks(final java.lang.String project, final java.lang.String revision, final java.lang.String file) { return filterLinks(fileHistoryLinks, new com.google.common.base.Function<com.google.gerrit.extensions.webui.WebLink, com.google.gerrit.extensions.common.WebLinkInfo>() { @java.lang.Override public com.google.gerrit.extensions.common.WebLinkInfo apply(com.google.gerrit.extensions.webui.WebLink webLink) { return ((com.google.gerrit.extensions.webui.FileHistoryWebLink) (webLink)).getFileHistoryWebLink(project, revision, file); } }); }",b85e43ddb5487bd5c259ad13c442abd945dd8b3b,"getFileHistoryLinks(java.lang.String,java.lang.String,java.lang.String)",66732,186,186
43361,gerrit-httpd_src_main_java_com_google_gerrit_httpd_auth_container_HttpAuthFilter.java,1.0,"@java.lang.Override public void doFilter(final javax.servlet.ServletRequest request, final javax.servlet.ServletResponse response, final javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if (!(webSession.get().isSignedIn())) { final javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (request)); final javax.servlet.http.HttpServletResponse rsp = ((javax.servlet.http.HttpServletResponse) (response)); final byte[] tosend; if (com.google.gwtjsonrpc.server.RPCServletUtils.acceptsGzipEncoding(req)) { rsp.setHeader(""Content-Encoding"", ""gzip""); tosend = signInGzip; } else { tosend = signInRaw; } com.google.gwtexpui.server.CacheHeaders.setNotCacheable(rsp); rsp.setContentType(""text/html""); rsp.setCharacterEncoding(HtmlDomUtil.ENC); rsp.setContentLength(tosend.length); final java.io.OutputStream out = rsp.getOutputStream(); try { out.write(tosend); } finally { out.close(); } } else { chain.doFilter(request, response); } }",ef9776afb4f7c2071f568ef29419c23a1631afd2,"@java.lang.Override public void doFilter(final javax.servlet.ServletRequest request, final javax.servlet.ServletResponse response, final javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if (isSessionValid(req)) { chain.doFilter(request, response); } else { final javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (request)); final javax.servlet.http.HttpServletResponse rsp = ((javax.servlet.http.HttpServletResponse) (response)); final byte[] tosend; if (com.google.gwtjsonrpc.server.RPCServletUtils.acceptsGzipEncoding(req)) { rsp.setHeader(""Content-Encoding"", ""gzip""); tosend = signInGzip; } else { tosend = signInRaw; } com.google.gwtexpui.server.CacheHeaders.setNotCacheable(rsp); rsp.setContentType(""text/html""); rsp.setCharacterEncoding(HtmlDomUtil.ENC); rsp.setContentLength(tosend.length); final java.io.OutputStream out = rsp.getOutputStream(); try { out.write(tosend); } finally { out.close(); } } }",4bdeb1f60b35a55b72c5a13d0447f932e046b0c1,"doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)","doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",2,0,"@java.lang.Override public void doFilter(final javax.servlet.ServletRequest request, final javax.servlet.ServletResponse response, final javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if (isSessionValid(((javax.servlet.http.HttpServletRequest) (request)))) { chain.doFilter(request, response); } else { final javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (request)); final javax.servlet.http.HttpServletResponse rsp = ((javax.servlet.http.HttpServletResponse) (response)); final byte[] tosend; if (com.google.gwtjsonrpc.server.RPCServletUtils.acceptsGzipEncoding(req)) { rsp.setHeader(""Content-Encoding"", ""gzip""); tosend = signInGzip; } else { tosend = signInRaw; } com.google.gwtexpui.server.CacheHeaders.setNotCacheable(rsp); rsp.setContentType(""text/html""); rsp.setCharacterEncoding(HtmlDomUtil.ENC); rsp.setContentLength(tosend.length); final java.io.OutputStream out = rsp.getOutputStream(); try { out.write(tosend); } finally { out.close(); } } }",1349d9177d9f460500ea922605937e7b5c1a3515,"doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",194545,254,264
69411,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_MyProfileScreen.java,1.0,@java.lang.Override protected void onLoad() { super.onLoad(); display(com.google.gerrit.client.Gerrit.getUserAccount()); display(); },7fdbec71214184937512fc344fc60c70dcc2c71e,@java.lang.Override protected void onLoad() { super.onLoad(); add(new com.google.gerrit.client.api.ExtensionPanel(com.google.gerrit.client.GerritUiExtensionPoint.PROFILE_SCREEN)); display(com.google.gerrit.client.Gerrit.getUserAccount()); display(); },9236aeb903116bf4f5cabdb9f8cbc0f8aec26d8a,onLoad(),onLoad(),7,1,@java.lang.Override protected void onLoad() { super.onLoad(); add(new com.google.gerrit.client.api.ExtensionPanel(com.google.gerrit.client.GerritUiExtensionPoint.PROFILE_SCREEN_BOTTOM)); display(com.google.gerrit.client.Gerrit.getUserAccount()); display(); },a587b8dff7baf7ede04ebd4d64ad0764be32b5f7,onLoad(),2196,74,76
68604,gerrit-server_src_main_java_com_google_gerrit_server_group_DbGroupMemberAuditListener.java,6.0,"@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = com.google.common.collect.Lists.newLinkedList(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, com.google.gerrit.common.TimeUtil.nowTs()); auditInserts.add(audit); } try { com.google.gerrit.reviewdb.server.ReviewDb db = schema.open(); try { db.accountGroupMembersAudit().insert(auditInserts); } finally { db.close(); } } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts(""Cannot log add accounts to group event performed by user"", me, added, e); } }",016ff18601f241bb24832e2765fe6412a2d6a9ec,"@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = com.google.common.collect.Lists.newLinkedList(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, com.google.gerrit.common.TimeUtil.nowTs()); auditInserts.add(audit); } try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { db.accountGroupMembersAudit().insert(auditInserts); } } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts(""Cannot log add accounts to group event performed by user"", me, added, e); } }",813d5e0c7859951db05e6ddff2f84cd729e09368,"onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection)","onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection)",5,6,"@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = com.google.common.collect.Lists.newLinkedList(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, com.google.gerrit.common.TimeUtil.nowTs()); auditInserts.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts(""Cannot log add accounts to group event performed by user"", me, added, e); } }",633dbc72555fce60294969fbb87fe0fc0a654ef2,"onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection)",114064,270,267
93323,src_main_java_com_googlesource_gerrit_plugins_secureconfig_SecureConfigStore.java,7.0,"@java.lang.Override public synchronized java.lang.String[] getListForPlugin(java.lang.String pluginName, java.lang.String section, java.lang.String subsection, java.lang.String name) { org.eclipse.jgit.storage.file.FileBasedConfig cfg = null; if (pluginSec.containsKey(pluginName)) { cfg = pluginSec.get(pluginName); } else { java.lang.String filename = pluginName + "".secure.config""; java.io.File pluginConfigFile = site.etc_dir.resolve(filename).toFile(); if (pluginConfigFile.exists()) { cfg = new org.eclipse.jgit.storage.file.FileBasedConfig(pluginConfigFile, org.eclipse.jgit.util.FS.DETECTED); try { cfg.load(); pluginSec.put(pluginName, cfg); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.lang.RuntimeException((""Cannot load "" + filename), e); } } } return cfg != null ? com.google.common.collect.FluentIterable.from(cfg.getStringList(section, subsection, name)).transform(codec::decode).toArray(java.lang.String.class) : null; }",38b3fa70c9a37e9b57def3028cd07de72fbe5387,"@java.lang.Override public synchronized java.lang.String[] getListForPlugin(java.lang.String pluginName, java.lang.String section, java.lang.String subsection, java.lang.String name) { org.eclipse.jgit.storage.file.FileBasedConfig cfg = null; if (pluginSec.containsKey(pluginName)) { cfg = pluginSec.get(pluginName); } else { java.lang.String filename = pluginName + "".secure.config""; java.io.File pluginConfigFile = site.etc_dir.resolve(filename).toFile(); if (pluginConfigFile.exists()) { cfg = new org.eclipse.jgit.storage.file.FileBasedConfig(pluginConfigFile, org.eclipse.jgit.util.FS.DETECTED); try { cfg.load(); pluginSec.put(pluginName, cfg); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.lang.RuntimeException((""Cannot load "" + filename), e); } } } return cfg != null ? com.google.common.collect.FluentIterable.from(java.util.Arrays.asList(cfg.getStringList(section, subsection, name))).transform(decode).toArray(java.lang.String.class) : null; }",71f30a29d535dfb05572e1083fd85cc5a3297db6,"getListForPlugin(java.lang.String,java.lang.String,java.lang.String,java.lang.String)","getListForPlugin(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",3,5,"@java.lang.Override public synchronized java.lang.String[] getListForPlugin(java.lang.String pluginName, java.lang.String section, java.lang.String subsection, java.lang.String name) { org.eclipse.jgit.storage.file.FileBasedConfig cfg = null; if (pluginSec.containsKey(pluginName)) { cfg = pluginSec.get(pluginName); } else { java.lang.String filename = pluginName + "".secure.config""; java.io.File pluginConfigFile = site.etc_dir.resolve(filename).toFile(); if (pluginConfigFile.exists()) { cfg = new org.eclipse.jgit.storage.file.FileBasedConfig(pluginConfigFile, org.eclipse.jgit.util.FS.DETECTED); try { cfg.load(); pluginSec.put(pluginName, cfg); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.lang.RuntimeException((""Cannot load "" + filename), e); } } } return cfg != null ? com.google.common.collect.FluentIterable.from(java.util.Arrays.asList(cfg.getStringList(section, subsection, name))).transform(codec.decodeFun).toArray(java.lang.String.class) : null; }",0d4fa92dff8110e1e3d8222eaaac759b14c03a90,"getListForPlugin(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",46872,288,291
101813,src_test_java_com_googlesource_gerrit_plugins_uploadvalidator_MaxPathLengthValidatorTest.java,1.0,"@org.junit.Test public void testAddTooLongPath() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommit(); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidator.performValidation(repo, c, com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidatorTest.getMaxPathLength()); java.util.Set<java.lang.String> expected = com.google.common.collect.ImmutableSet.of((""ERROR: path too long: "" + (com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidatorTest.TOO_LONG))); assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); }",bd73f5e2b945e79fb1ea2107eaa8950cb04b986b,"@org.junit.Test public void testAddTooLongPath() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommit(); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidator.performValidation(repo, c, new org.eclipse.jgit.revwalk.RevWalk(repo), com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidatorTest.getMaxPathLength()); java.util.Set<java.lang.String> expected = com.google.common.collect.ImmutableSet.of((""ERROR: path too long: "" + (com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidatorTest.TOO_LONG))); assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); }",74d7c3c35b8d44dae642c5eaa30a78bf22e1e90a,testAddTooLongPath(),testAddTooLongPath(),10,1,"@org.junit.Test public void testAddTooLongPath() throws java.lang.Exception { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit c = makeCommit(rw); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidator.performValidation(repo, c, rw, com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidatorTest.getMaxPathLength()); java.util.Set<java.lang.String> expected = com.google.common.collect.ImmutableSet.of((""ERROR: path too long: "" + (com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidatorTest.TOO_LONG))); assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); } }",6a7baa01c84efab4f821778ff662f00cdd4384b1,testAddTooLongPath(),47769,221,243
76826,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_UsernameField.java,7.0,@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.getNativeEvent().getKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { confirmSetUserName(); } },b7c58fffb3b19bc60176b8cde1f28a2adc83684d,@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.getNativeKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { confirmSetUserName(); } },c2e003387938bda41f5cc9bb1b60088de6d46f71,onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),4,7,@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.getNativeEvent().getKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { confirmSetUserName(); } },b7c58fffb3b19bc60176b8cde1f28a2adc83684d,onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),48383,66,68
105451,src_test_java_com_googlesource_gerrit_plugins_findowners_FindOwnersIT.java,20.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private org.eclipse.jgit.lib.Config readProjectConfig() throws java.lang.Exception { git().fetch().setRefSpecs(new org.eclipse.jgit.transport.RefSpec(""refs/meta/config:refs/meta/config"")).call(); testRepo.reset(RefNames.REFS_CONFIG); org.eclipse.jgit.revwalk.RevWalk rw = testRepo.getRevWalk(); org.eclipse.jgit.revwalk.RevTree tree = rw.parseTree(testRepo.getRepository().resolve(""HEAD"")); org.eclipse.jgit.revwalk.RevObject obj = rw.parseAny(testRepo.get(tree, ""project.config"")); org.eclipse.jgit.lib.ObjectLoader loader = rw.getObjectReader().open(obj); java.lang.String text = new java.lang.String(loader.getCachedBytes(), java.nio.charset.StandardCharsets.UTF_8); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(text); return cfg; }",1a1d32e30897b260185f5c34a9955ab831e51d56,,readProjectConfig(),3,15,"private org.eclipse.jgit.lib.Config readProjectConfig() throws java.lang.Exception { git().fetch().setRefSpecs(new org.eclipse.jgit.transport.RefSpec((((REFS_CONFIG) + "":"") + (REFS_CONFIG)))).call(); testRepo.reset(RefNames.REFS_CONFIG); org.eclipse.jgit.revwalk.RevWalk rw = testRepo.getRevWalk(); org.eclipse.jgit.revwalk.RevTree tree = rw.parseTree(testRepo.getRepository().resolve(""HEAD"")); org.eclipse.jgit.revwalk.RevObject obj = rw.parseAny(testRepo.get(tree, ""project.config"")); org.eclipse.jgit.lib.ObjectLoader loader = rw.getObjectReader().open(obj); java.lang.String text = new java.lang.String(loader.getCachedBytes(), java.nio.charset.StandardCharsets.UTF_8); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(text); return cfg; }",2a55edaf9a239357a03d5161b6fe5f74eeb33c09,readProjectConfig(),188832,238,241
148032,javatests_com_google_gerrit_server_group_db_GroupRebuilderTest.java,6.0,"@org.junit.Test public void membersAndSubgroups() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2)).byId(byId(g, ""x""), byId(g, ""y"")).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(2); assertServerCommit(log.get(0), ""Create group""); assertServerCommit(log.get(1), (""Update group\n"" + ((((""\n"" + ""Add: Account 1 <1@server-id>\n"") + ""Add: Account 2 <2@server-id>\n"") + ""Add-group: Group <x>\n"") + ""Add-group: Group <y>""))); }",3858ddcdf7e9ede50bb487cf9c835e9b88432193,"@org.junit.Test public void membersAndSubgroups() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2)).byId(byId(g, ""x""), byId(g, ""y"")).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(2); assertServerCommit(log.get(0), ""Create account""); assertServerCommit(log.get(1), (""Update account\n"" + ((((""\n"" + ""Add: Account 1 <1@server-id>\n"") + ""Add: Account 2 <2@server-id>\n"") + ""Add-account: Group <x>\n"") + ""Add-account: Group <y>""))); }",a5f91c466d6ef243f0fe498e43fb79f7056d7891,membersAndSubgroups(),membersAndSubgroups(),17,6,"@org.junit.Test public void membersAndSubgroups() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2)).byId(byId(g, ""x""), byId(g, ""y"")).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(2); assertServerCommit(log.get(0), ""Create group""); assertServerCommit(log.get(1), (""Update group\n"" + ((((""\n"" + ""Add: Account 1 <1@server-id>\n"") + ""Add: Account 2 <2@server-id>\n"") + ""Add-group: Group <x>\n"") + ""Add-group: Group <y>""))); }",3858ddcdf7e9ede50bb487cf9c835e9b88432193,membersAndSubgroups(),217995,268,268
35820,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_AbstractPatchContentTable.java,38.0,"private void styleLastCommentCell(final int row, final int col) { final com.google.gwt.user.client.ui.HTMLTable.CellFormatter fmt = table.getCellFormatter(); fmt.removeStyleName((row - 1), col, Gerrit.RESOURCES.css().commentPanelLast()); fmt.setStyleName(row, col, Gerrit.RESOURCES.css().commentHolder()); fmt.addStyleName(row, col, Gerrit.RESOURCES.css().commentPanelLast()); }",9023c9732cdf58e111d8b5b8a73b35843b7b265e,"private void styleLastCommentCell(final int row, final int col, boolean highlight) { final com.google.gwt.user.client.ui.HTMLTable.CellFormatter fmt = table.getCellFormatter(); fmt.removeStyleName((row - 1), col, Gerrit.RESOURCES.css().commentPanelLast()); fmt.setStyleName(row, col, Gerrit.RESOURCES.css().commentHolder()); fmt.addStyleName(row, col, Gerrit.RESOURCES.css().commentPanelLast()); if (highlight) { fmt.addStyleName(row, col, Gerrit.RESOURCES.css().publishedFileCommentHolder()); } }",e89e45d8fddb1ccbbf91f98a5a313f42b9634fe6,"styleLastCommentCell(int,int)","styleLastCommentCell(int,int,boolean)",11,25,"private void styleLastCommentCell(final int row, final int col) { final com.google.gwt.user.client.ui.HTMLTable.CellFormatter fmt = table.getCellFormatter(); fmt.removeStyleName((row - 1), col, Gerrit.RESOURCES.css().commentPanelLast()); fmt.setStyleName(row, col, Gerrit.RESOURCES.css().commentHolder()); fmt.addStyleName(row, col, Gerrit.RESOURCES.css().commentPanelLast()); if (!(fmt.getStyleName(row, (col - 1)).contains(Gerrit.RESOURCES.css().commentHolder()))) { fmt.addStyleName(row, col, Gerrit.RESOURCES.css().commentHolderLeftmost()); } }",8d15c46b4f8d79ee3721d6d9c1a3007263a8ff91,"styleLastCommentCell(int,int)",152797,138,157
43290,gerrit-server_src_main_java_com_google_gerrit_server_group_GroupsCollection.java,3.0,"public GroupDescription.Basic parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(id); if (groupBackend.handles(uuid)) { com.google.gerrit.common.data.GroupDescription.Basic d = groupBackend.get(uuid); if (d != null) { return d; } } if (id.matches(""^[1-9][0-9]*$"")) { try { com.google.gerrit.reviewdb.client.AccountGroup.Id legacyId = AccountGroup.Id.parse(id); return groupControlFactory.controlFor(legacyId).getGroup(); } catch (java.lang.IllegalArgumentException invalidId) { } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { } } com.google.gerrit.common.data.GroupReference ref = com.google.gerrit.server.account.GroupBackends.findExactSuggestion(groupBackend, id); if (ref != null) { com.google.gerrit.common.data.GroupDescription.Basic d = groupBackend.get(ref.getUUID()); if (d != null) { return d; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",aeb3044b0e1c55387e54c5679e9644f8366033f7,"public GroupDescription.Basic parse(java.lang.String id) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(id); if (groupBackend.handles(uuid)) { com.google.gerrit.common.data.GroupDescription.Basic d = groupBackend.get(uuid); if (d != null) { return d; } } if (id.matches(""^[1-9][0-9]*$"")) { try { com.google.gerrit.reviewdb.client.AccountGroup.Id legacyId = AccountGroup.Id.parse(id); return groupControlFactory.controlFor(legacyId).getGroup(); } catch (java.lang.IllegalArgumentException invalidId) { } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { } } com.google.gerrit.common.data.GroupReference ref = com.google.gerrit.server.account.GroupBackends.findExactSuggestion(groupBackend, id); if (ref != null) { com.google.gerrit.common.data.GroupDescription.Basic d = groupBackend.get(ref.getUUID()); if (d != null) { return d; } } return null; }",4885be63194ddafeae85bce27e41d5df619e021e,parse(java.lang.String),parse(java.lang.String),4,5,"public GroupDescription.Basic parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException { com.google.gerrit.common.data.GroupDescription.Basic group = _parse(id); if ((group == null) || (!(groupControlFactory.controlFor(group).isVisible()))) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""Group Not Found: %s"", id)); } return group; }",4323a243b8318af8bdd9464d22816e3d12e360c9,parse(java.lang.String),210189,287,120
50701,github-oauth_src_main_java_com_googlesource_gerrit_plugins_github_oauth_GitHubLogin.java,2.0,"public boolean isLoggedIn(java.util.Set<com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope> scopes) { boolean loggedIn = ((scopesSet.equals(scopes)) && ((token) != null)) && ((hub) != null); if (loggedIn) { try { myself = hub.getMyself(); } catch (java.lang.Throwable e) { com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.log.error(""Connection to GitHub broken: logging out"", e); logout(); loggedIn = false; } } return loggedIn; }",eee69ea197f55c24e61672355696956771395e36,public boolean isLoggedIn(java.util.Set<com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope> scopes) { boolean loggedIn = ((scopesSet.equals(scopes)) && ((token) != null)) && ((hub) != null); return loggedIn; },a150249b08ba599b42aed7837abc7277fdcd26ad,isLoggedIn(java.util.Set),isLoggedIn(java.util.Set),3,2,"public boolean isLoggedIn(java.util.Set<com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope> scopes) { boolean loggedIn = ((scopesSet.equals(scopes)) && ((token) != null)) && ((hub) != null); if (loggedIn && ((myself) == null)) { try { myself = hub.getMyself(); } catch (java.lang.Throwable e) { com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.log.error(""Connection to GitHub broken: logging out"", e); logout(); loggedIn = false; } } return loggedIn; }",363a8acea6ed7f7a369b2878996d3462ae6d7866,isLoggedIn(java.util.Set),54505,69,143
25368,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_patch_PatchDetailServiceImpl.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void deleteDraftPatchSet(final com.google.gerrit.reviewdb.PatchSet.Id psid, final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwtjsonrpc.client.VoidResult> callback) { run(callback, new com.google.gerrit.httpd.rpc.patch.Action<com.google.gwtjsonrpc.client.VoidResult>() { public com.google.gwtjsonrpc.client.VoidResult run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.httpd.rpc.patch.Failure, com.google.gwtorm.client.OrmException { try { final com.google.gerrit.server.project.ChangeControl cc = changeControlFactory.validateFor(psid.getParentKey()); if ((!(cc.isOwner())) || (!(cc.isVisible(db)))) { throw new com.google.gerrit.httpd.rpc.patch.Failure(new com.google.gerrit.common.errors.NoSuchEntityException()); } com.google.gerrit.server.ChangeUtil.deleteDraftPatchSet(psid, gitManager, replication, patchSetInfoFactory, db); } catch (NoSuchChangeException e) { throw new com.google.gerrit.httpd.rpc.patch.Failure(new NoSuchChangeException(psid.getParentKey())); } catch (PatchSetInfoNotAvailableException e) { throw new com.google.gerrit.httpd.rpc.patch.Failure(e); } catch (IOException e) { throw new com.google.gerrit.httpd.rpc.patch.Failure(e); } return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; } }); }",c39a86e5b0213b592ab421cd5e9e9560064cb25b,,"deleteDraftPatchSet(com.google.gerrit.reviewdb.PatchSet$Id,com.google.gwt.user.client.rpc.AsyncCallback)",3,9,"public void deleteDraftPatchSet(final com.google.gerrit.reviewdb.PatchSet.Id psid, final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwtjsonrpc.client.VoidResult> callback) { run(callback, new com.google.gerrit.httpd.rpc.patch.Action<com.google.gwtjsonrpc.client.VoidResult>() { public com.google.gwtjsonrpc.client.VoidResult run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.httpd.rpc.patch.Failure, com.google.gwtorm.client.OrmException { try { final com.google.gerrit.server.project.ChangeControl cc = changeControlFactory.validateFor(psid.getParentKey()); if (!(cc.isOwner())) { throw new com.google.gerrit.httpd.rpc.patch.Failure(new com.google.gerrit.common.errors.NoSuchEntityException()); } com.google.gerrit.server.ChangeUtil.deleteDraftPatchSet(psid, gitManager, replication, patchSetInfoFactory, db); } catch (NoSuchChangeException e) { throw new com.google.gerrit.httpd.rpc.patch.Failure(new NoSuchChangeException(psid.getParentKey())); } catch (PatchSetInfoNotAvailableException e) { throw new com.google.gerrit.httpd.rpc.patch.Failure(e); } catch (IOException e) { throw new com.google.gerrit.httpd.rpc.patch.Failure(e); } return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; } }); }",062e3514b8b58ab971e79fa7c5731f70cd5704bc,"deleteDraftPatchSet(com.google.gerrit.reviewdb.PatchSet$Id,com.google.gwt.user.client.rpc.AsyncCallback)",28037,385,375
16444,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeQueryRewriter.java,9.0,@java.lang.Override public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> and(java.util.Collection<? extends com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> l) { return com.google.gerrit.server.query.change.ChangeQueryRewriter.hasSource(l) ? new com.google.gerrit.server.query.change.AndSource(l) : super.and(l); },55921c82018ea5d85f039c28a6eee52ebbbd77af,@java.lang.Override public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> and(java.util.Collection<? extends com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> l) { return com.google.gerrit.server.query.change.ChangeQueryRewriter.hasSource(l) ? andSourceFactory.create(l) : super.and(l); },5ce63e8caf6b3612615a097d84413f21b2a007fa,and(java.util.Collection),and(java.util.Collection),4,9,@java.lang.Override public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> and(java.util.Collection<? extends com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> l) { return com.google.gerrit.server.query.change.ChangeQueryRewriter.hasSource(l) ? andSourceFactory.create(l) : new com.google.gerrit.server.query.change.PrefetchableAndPredicate(l); },84a915c291e40784f356966fb224d23c812c9fe4,and(java.util.Collection),27236,118,133
46600,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen2.java,,,,"@com.google.gwt.uibinder.client.UiHandler(""rebase"") void onRebase(com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.change.RebaseAction.call(changeId, revision); }",c5ece1cbbc2d597377dbf2985d9d69bdf65b4e9c,,onRebase(com.google.gwt.event.dom.client.ClickEvent),28,20,"@com.google.gwt.uibinder.client.UiHandler(""star"") void onToggleStar(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> e) { com.google.gerrit.client.changes.StarredChanges.toggleStar(changeId, e.getValue()); }",8f436df448f09e05579a0b834618571a95b04be4,onToggleStar(com.google.gwt.event.logical.shared.ValueChangeEvent),123587,62,72
144610,javatests_com_google_gerrit_acceptance_rest_group_GroupsIT.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void rebuild() throws java.lang.Exception { assume().that(groupsMigration.writeToNoteDb()).isTrue(); assume().that(groupsMigration.readFromNoteDb()).isFalse(); com.google.gerrit.extensions.common.GroupInfo g = gApi.groups().create(name(""group"")).get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g.id); java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid); org.eclipse.jgit.lib.ObjectId oldId; com.google.gerrit.server.group.db.GroupBundle oldBundle; try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { oldId = repo.exactRef(refName).getObjectId(); oldBundle = bundleFactory.fromNoteDb(repo, uuid); new org.eclipse.jgit.junit.TestRepository(repo).delete(refName); } assertThat(adminRestSession.postOK(((""/groups/"" + uuid) + ""/rebuild""), """").getEntityContent()).isEqualTo(""No differences between ReviewDb and NoteDb""); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); assertThat(ref).isNotNull(); assertThat(ref.getObjectId()).isNotEqualTo(oldId); com.google.gerrit.server.group.db.GroupBundle newBundle = bundleFactory.fromNoteDb(repo, uuid); assertThat(newBundle.group()).isEqualTo(oldBundle.group()); assertThat(newBundle.members()).isEqualTo(oldBundle.members()); assertThat(newBundle.memberAudit()).isEqualTo(oldBundle.memberAudit()); assertThat(newBundle.byId()).isEqualTo(oldBundle.byId()); assertThat(newBundle.byIdAudit()).isEqualTo(oldBundle.byIdAudit()); } }",1cc4ee5b380d13749823d80f3bd12366a7a12619,,rebuild(),9,6,"@org.junit.Test public void rebuild() throws java.lang.Exception { assume().that(groupsMigration.writeToNoteDb()).isTrue(); assume().that(groupsMigration.readFromNoteDb()).isFalse(); com.google.gerrit.extensions.common.GroupInfo g = gApi.groups().create(name(""group"")).get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g.id); java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid); org.eclipse.jgit.lib.ObjectId oldId; com.google.gerrit.server.group.db.GroupBundle oldBundle; try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { oldId = repo.exactRef(refName).getObjectId(); oldBundle = bundleFactory.fromNoteDb(repo, uuid); new org.eclipse.jgit.junit.TestRepository(repo).delete(refName); } assertThat(adminRestSession.postOK(((""/groups/"" + uuid) + ""/rebuild""), com.google.gerrit.acceptance.rest.group.GroupsIT.input(null)).getEntityContent()).isEqualTo(""No differences between ReviewDb and NoteDb""); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); assertThat(ref).isNotNull(); assertThat(ref.getObjectId()).isNotEqualTo(oldId); com.google.gerrit.acceptance.rest.group.GroupsIT.assertNoDifferences(oldBundle, bundleFactory.fromNoteDb(repo, uuid)); } }",3afae72213c5917e137d5f878e3fdfd4455eaf64,rebuild(),58786,467,412
126731,gerrit-server_src_main_java_com_google_gerrit_server_git_ChangeReportFormatter.java,8.0,public com.google.gerrit.server.git.ChangeReportFormatter.Input setWorkInProgress(boolean wip) { this.wip = wip; return this; },5624e2571f6b384aab934723fbe1881fa76c3094,@com.google.gerrit.common.Nullable public abstract java.lang.Boolean _private();,25a18860ef958876e7a4c0816943bf790f04d4c0,setWorkInProgress(boolean),_private(),6,11,@com.google.gerrit.common.Nullable public abstract java.lang.Boolean isPrivate();,fcebd0796c9e872eb6a0e4f9dcfc4f954a942264,isPrivate(),23182,22,21
59987,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen2.java,47.0,"private void initRevisionsAction(com.google.gerrit.client.changes.ChangeInfo info, java.lang.String revision) { java.lang.String currentPatchSet; if (((info.current_revision()) != null) && (info.revisions().containsKey(info.current_revision()))) { currentPatchSet = info.revision(info.current_revision()).id(); } else { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> revList = info.revisions().values(); com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.sortRevisionInfoByNumber(revList); currentPatchSet = revList.get(((revList.length()) - 1)).id(); } java.lang.String currentlyViewedPatchSet = info.revision(revision).id(); patchSetsText.setInnerText(Resources.M.patchSets(currentlyViewedPatchSet, currentPatchSet)); patchSetsAction = new com.google.gerrit.client.change.PatchSetsAction(info.legacy_id(), revision, style, headerLine, patchSets); }",f09056529f10f4428ab091560db8737ed21b6ee1,"private void initRevisionsAction(com.google.gerrit.client.changes.ChangeInfo info, java.lang.String revision) { int currentPatchSet; if (((info.current_revision()) != null) && (info.revisions().containsKey(info.current_revision()))) { currentPatchSet = info.revision(info.current_revision())._number(); } else { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> revList = info.revisions().values(); com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.sortRevisionInfoByNumber(revList); currentPatchSet = revList.get(((revList.length()) - 1))._number(); } java.lang.String currentlyViewedPatchSet; if (info.revision(revision).id().equals(""edit"")) { currentlyViewedPatchSet = (edit.basedOnPatchSet()) + ""[edit]""; currentPatchSet = (info.revisions().values().length()) - 1; } else { currentlyViewedPatchSet = info.revision(revision).id(); } patchSetsText.setInnerText(Resources.M.patchSets(currentlyViewedPatchSet, currentPatchSet)); patchSetsAction = new com.google.gerrit.client.change.PatchSetsAction(info.legacy_id(), revision, style, headerLine, patchSets); }",7a77ed1d2938adc4794b6ed347c478d2b8b8a970,"initRevisionsAction(com.google.gerrit.client.changes.ChangeInfo,java.lang.String)","initRevisionsAction(com.google.gerrit.client.changes.ChangeInfo,java.lang.String)",5,47,"private void initRevisionsAction(com.google.gerrit.client.changes.ChangeInfo info, java.lang.String revision) { int currentPatchSet; if (((info.current_revision()) != null) && (info.revisions().containsKey(info.current_revision()))) { currentPatchSet = info.revision(info.current_revision())._number(); } else { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> revList = info.revisions().values(); com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.sortRevisionInfoByNumber(revList); currentPatchSet = revList.get(((revList.length()) - 1))._number(); } java.lang.String currentlyViewedPatchSet; if (info.revision(revision).id().equals(""edit"")) { currentlyViewedPatchSet = Resources.M.editPatchSet(com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.findEditParent(info.revisions().values())); currentPatchSet = (info.revisions().values().length()) - 1; } else { currentlyViewedPatchSet = info.revision(revision).id(); } patchSetsText.setInnerText(Resources.M.patchSets(currentlyViewedPatchSet, currentPatchSet)); patchSetsAction = new com.google.gerrit.client.change.PatchSetsAction(info.legacy_id(), revision, style, headerLine, patchSets); }",b4e38cdbc0e8decaa810e974b6608cf7c2041884,"initRevisionsAction(com.google.gerrit.client.changes.ChangeInfo,java.lang.String)",155724,312,337
62800,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_group_GroupAssert.java,1.0,"public static void assertGroups(java.lang.Iterable<java.lang.String> expected, java.util.Set<java.lang.String> actual) { for (java.lang.String g : expected) { assertTrue((""missing group "" + g), actual.remove(g)); } assertTrue((""unexpected groups: "" + actual), actual.isEmpty()); }",b9873e947b8fd4d71191a19c56d1a4d515b33db7,"public static void assertGroups(java.lang.Iterable<java.lang.String> expected, java.util.Set<java.lang.String> actual) { for (java.lang.String g : expected) { assert_().withFailureMessage((""missing group "" + g)).that(actual.remove(g)).isTrue(); } assert_().withFailureMessage((""unexpected groups: "" + actual)).that(actual).isEmpty(); }",9cc68fbf3df8eba22d8be8fd9b07ff2bef91a59f,"assertGroups(java.lang.Iterable,java.util.Set)","assertGroups(java.lang.Iterable,java.util.Set)",4,1,"public static void assertGroups(java.lang.Iterable<java.lang.String> expected, java.util.Set<java.lang.String> actual) { for (java.lang.String g : expected) { assert_().withFailureMessage((""missing group "" + g)).that(actual.remove(g)).isTrue(); } assert_().withFailureMessage((""unexpected groups: "" + actual)).that(((java.lang.Iterable<?>) (actual))).isEmpty(); }",0977d29e644fb2a68d30133acd4dd822fb9d2cf7,"assertGroups(java.lang.Iterable,java.util.Set)",183538,98,106
60579,src_main_java_com_googlesource_gerrit_plugins_xdocs_formatter_AsciidocFormatter.java,,,,"@java.lang.Override public java.lang.String format(com.googlesource.gerrit.plugins.xdocs.ConfigSection cfg, java.lang.String raw) throws java.io.IOException { return Asciidoctor.Factory.create().convert(raw, new java.util.HashMap<java.lang.String, java.lang.Object>()); }",255063220ac7f53bab8ea1d1a9aff2647264d141,,"format(com.googlesource.gerrit.plugins.xdocs.ConfigSection,java.lang.String)",7,0,"@java.lang.Override public java.lang.String format(com.googlesource.gerrit.plugins.xdocs.ConfigSection cfg, java.lang.String raw) throws java.io.IOException { return Asciidoctor.Factory.create(com.googlesource.gerrit.plugins.xdocs.formatter.AsciidoctorFormatter.class.getClassLoader()).convert(raw, new java.util.HashMap<java.lang.String, java.lang.Object>()); }",41109f31b5c4b02cff6a272c6d63daa9327fdb15,"format(com.googlesource.gerrit.plugins.xdocs.ConfigSection,java.lang.String)",79255,79,103
35105,gerrit-server_src_main_java_com_google_gerrit_server_ApprovalsUtil.java,1.0,"public void copyVetosToLatestPatchSet(com.google.gerrit.reviewdb.client.Change change) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet.Id source; if ((change.getNumberOfPatchSets()) > 1) { source = new com.google.gerrit.reviewdb.client.PatchSet.Id(change.getId(), ((change.getNumberOfPatchSets()) - 1)); } else { throw new java.io.IOException(""Previous patch set could not be found""); } com.google.gerrit.reviewdb.client.PatchSet.Id dest = change.currPatchSetId(); for (com.google.gerrit.reviewdb.client.PatchSetApproval a : db.patchSetApprovals().byPatchSet(source)) { if (!(ApprovalCategory.SUBMIT.equals(a.getCategoryId()))) { final com.google.gerrit.common.data.ApprovalType type = approvalTypes.byId(a.getCategoryId()); if ((type.getCategory().isCopyMinScore()) && (type.isMaxNegative(a))) { db.patchSetApprovals().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.PatchSetApproval(dest, a))); } } } }",a7d69365f3883e02c54f3218472e44a6e47a7013,"public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.PatchSetApproval> copyVetosToLatestPatchSet(com.google.gerrit.reviewdb.client.Change change) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet.Id source; if ((change.getNumberOfPatchSets()) > 1) { source = new com.google.gerrit.reviewdb.client.PatchSet.Id(change.getId(), ((change.getNumberOfPatchSets()) - 1)); } else { throw new java.io.IOException(""Previous patch set could not be found""); } com.google.gerrit.reviewdb.client.PatchSet.Id dest = change.currPatchSetId(); com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.PatchSetApproval> patchSetApprovals = db.patchSetApprovals().byPatchSet(source); for (com.google.gerrit.reviewdb.client.PatchSetApproval a : patchSetApprovals) { if (!(ApprovalCategory.SUBMIT.equals(a.getCategoryId()))) { final com.google.gerrit.common.data.ApprovalType type = approvalTypes.byId(a.getCategoryId()); if ((type.getCategory().isCopyMinScore()) && (type.isMaxNegative(a))) { db.patchSetApprovals().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.PatchSetApproval(dest, a))); } } } return patchSetApprovals; }",6d8a63211e5258cf7f050b1767be43c32b34c037,copyVetosToLatestPatchSet(com.google.gerrit.reviewdb.client.Change),copyVetosToLatestPatchSet(com.google.gerrit.reviewdb.client.Change),4,1,"public java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> copyVetosToLatestPatchSet(com.google.gerrit.reviewdb.client.Change change) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet.Id source; if ((change.getNumberOfPatchSets()) > 1) { source = new com.google.gerrit.reviewdb.client.PatchSet.Id(change.getId(), ((change.getNumberOfPatchSets()) - 1)); } else { throw new java.io.IOException(""Previous patch set could not be found""); } com.google.gerrit.reviewdb.client.PatchSet.Id dest = change.currPatchSetId(); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> patchSetApprovals = db.patchSetApprovals().byChange(change.getId()).toList(); for (com.google.gerrit.reviewdb.client.PatchSetApproval a : patchSetApprovals) { if (!(ApprovalCategory.SUBMIT.equals(a.getCategoryId()))) { final com.google.gerrit.common.data.ApprovalType type = approvalTypes.byId(a.getCategoryId()); if (((a.getPatchSetId().equals(source)) && (type.getCategory().isCopyMinScore())) && (type.isMaxNegative(a))) { db.patchSetApprovals().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.PatchSetApproval(dest, a))); } } } return patchSetApprovals; }",8aa9e502d1d8213a13aac3ada62334fbda8d7f69,copyVetosToLatestPatchSet(com.google.gerrit.reviewdb.client.Change),192314,373,379
17793,gerrit-httpd_src_main_java_com_google_gerrit_httpd_auth_container_HttpsClientSslCertAuthFilter.java,,,,"@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse rsp, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { java.security.cert.X509Certificate[] certs = ((java.security.cert.X509Certificate[]) (req.getAttribute(""javax.servlet.request.X509Certificate""))); java.lang.String name = certs[0].getSubjectDN().getName(); java.util.regex.Matcher m = com.google.gerrit.httpd.auth.container.HttpsClientSslCertAuthFilter.REGEX_USERID.matcher(name); java.lang.String userName = null; if (m.matches()) { userName = m.group(1); } else { throw new javax.servlet.ServletException(""Couldn't extract username from your certificate""); } final com.google.gerrit.server.account.AuthRequest areq = com.google.gerrit.server.account.AuthRequest.forUser(userName); final com.google.gerrit.server.account.AuthResult arsp; try { arsp = accountManager.authenticate(areq); } catch (com.google.gerrit.server.account.AccountException e) { java.lang.String err = (""Unable to authenticate user \"""" + userName) + ""\""""; com.google.gerrit.httpd.auth.container.HttpsClientSslCertAuthFilter.log.error(err, e); throw new javax.servlet.ServletException(err, e); } webSession.get().login(arsp, true); chain.doFilter(req, rsp); }",0301ce1de6a561a0a22fb778fb629603a79af1a1,,"doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",3,0,"@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse rsp, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { java.security.cert.X509Certificate[] certs = ((java.security.cert.X509Certificate[]) (req.getAttribute(""javax.servlet.request.X509Certificate""))); if ((certs == null) || ((certs.length) == 0)) { throw new javax.servlet.ServletException(""Couldn't get the attribute javax.servlet.request.X509Certificate from the request""); } java.lang.String name = certs[0].getSubjectDN().getName(); java.util.regex.Matcher m = com.google.gerrit.httpd.auth.container.HttpsClientSslCertAuthFilter.REGEX_USERID.matcher(name); java.lang.String userName; if (m.matches()) { userName = m.group(1); } else { throw new javax.servlet.ServletException(""Couldn't extract username from your certificate""); } final com.google.gerrit.server.account.AuthRequest areq = com.google.gerrit.server.account.AuthRequest.forUser(userName); final com.google.gerrit.server.account.AuthResult arsp; try { arsp = accountManager.authenticate(areq); } catch (com.google.gerrit.server.account.AccountException e) { java.lang.String err = (""Unable to authenticate user \"""" + userName) + ""\""""; com.google.gerrit.httpd.auth.container.HttpsClientSslCertAuthFilter.log.error(err, e); throw new javax.servlet.ServletException(err, e); } webSession.get().login(arsp, true); chain.doFilter(req, rsp); }",d9bf6c191a958c6574ea337ded85a7a8d62016c5,"doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",190709,349,394
32782,gerrit-gwtui_src_main_java_com_google_gerrit_client_ui_CommentedActionDialog.java,,,,public abstract com.google.gwt.user.client.rpc.AsyncCallback<T> createCallback();,b2d739137ef466812ed69769928c2dad5dd2b1ca,,createCallback(),7,1,public com.google.gwt.user.client.rpc.AsyncCallback<T> createCallback() { return new com.google.gerrit.client.rpc.GerritCallback<T>() { @java.lang.Override public void onSuccess(T result) { sent = true; if ((callback) != null) { callback.onSuccess(result); } hide(); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }; },4a06a76fefb12e37c6ebd9ad84a7527a4838d57b,createCallback(),99976,22,113
44191,src_test_java_com_google_gwtexpui_safehtml_client_RawFindReplaceTest.java,0.0,"public void testCreate() { final java.lang.String find = ""find""; final java.lang.String replace = ""replace""; final com.google.gwtexpui.safehtml.client.RegexFindReplace a = new com.google.gwtexpui.safehtml.client.RegexFindReplace(find, replace); assertSame(find, a.find()); assertSame(replace, a.replace()); assertEquals((((""find = "" + find) + "", replace = "") + replace), a.toString()); }",780b710d84b29113802ba1a294ccb508fbe19979,"public void testFindReplace() { final java.lang.String find = ""find""; final java.lang.String replace = ""replace""; final com.google.gwtexpui.safehtml.client.RawFindReplace a = new com.google.gwtexpui.safehtml.client.RawFindReplace(find, replace); assertSame(find, a.find()); assertSame(replace, a.replace()); assertEquals((((""find = "" + find) + "", replace = "") + replace), a.toString()); }",ee1a7e4f741daabcf70791b79c86d85b2757a648,testCreate(),testFindReplace(),6,0,"public void testFindReplace() { final java.lang.String find = ""find""; final java.lang.String replace = ""replace""; final com.google.gwtexpui.safehtml.client.RawFindReplace a = new com.google.gwtexpui.safehtml.client.RawFindReplace(find, replace); assertEquals(find, a.pattern().getSource()); assertEquals(replace, a.replace(find)); assertEquals((((""find = "" + find) + "", replace = "") + replace), a.toString()); }",d1c87625bef7dc121b94caa2379cb9f08d94e92d,testFindReplace(),203571,112,114
35880,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeInfo.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public final native com.google.gwt.core.client.JsArrayInteger messageAuthorIds();,51a248fc3a7b79a2ce117d2b3a1b982ea325583c,,messageAuthorIds(),6,3,private final native java.sql.Timestamp _get_cts();,41d32501cfe4374988967d4fb81ae64b3bbc9b58,_get_cts(),82849,20,15
46221,src_main_java_com_googlesource_gerrit_plugins_gitblit_GerritWicketFilter.java,6.0,"@java.lang.Override public void init(javax.servlet.FilterConfig filterConfig) throws javax.servlet.ServletException { showGitBlitBanner(); try { java.io.InputStream resin = getClass().getResourceAsStream(com.googlesource.gerrit.plugins.gitblit.GerritWicketFilter.GITBLIT_GERRIT_PROPERTIES); java.util.Properties properties = null; try { properties = new java.util.Properties(); properties.load(resin); properties.put(""git.repositoriesFolder"", repoManager.getBasePath().getAbsolutePath()); properties.put(""realm.userService"", com.googlesource.gerrit.plugins.gitblit.auth.GerritToGitBlitUserService.class.getName()); properties.put(""web.otherUrls"", (((config.getGitHttpUrl()) + "" "") + (config.getGitSshUrl())).trim()); } finally { resin.close(); } com.gitblit.IStoredSettings settings = new com.googlesource.gerrit.plugins.gitblit.app.GitBlitSettings(properties); com.gitblit.GitBlit.self().configureContext(settings, repoManager.getBasePath(), false); com.gitblit.GitBlit.self().contextInitialized(new javax.servlet.ServletContextEvent(filterConfig.getServletContext())); super.init(new com.googlesource.gerrit.plugins.gitblit.GerritWicketFilter.CustomFilterConfig(filterConfig)); } catch (java.lang.Exception e) { throw new javax.servlet.ServletException(e); } }",a3484d1bfe15139b6351e26f9521bed4e8c70cb3,"@java.lang.Override public void init(javax.servlet.FilterConfig filterConfig) throws javax.servlet.ServletException { showGitBlitBanner(); try { java.io.InputStream resin = getClass().getResourceAsStream(com.googlesource.gerrit.plugins.gitblit.GerritWicketFilter.GITBLIT_GERRIT_PROPERTIES); java.util.Properties properties = null; try { properties = new java.util.Properties(); properties.load(resin); properties.put(""git.repositoriesFolder"", repoManager.getBasePath().getAbsolutePath()); properties.put(""realm.userService"", com.googlesource.gerrit.plugins.gitblit.auth.GerritToGitBlitUserService.class.getName()); properties.put(""web.otherUrls"", ((((((config.getGitHttpUrl()) + "" "") + (config.getGitSshUrl())).trim()) + "" "") + (properties.get(""web.otherUrls"")))); } finally { resin.close(); } com.gitblit.IStoredSettings settings = new com.googlesource.gerrit.plugins.gitblit.app.GitBlitSettings(properties); com.gitblit.GitBlit.self().configureContext(settings, repoManager.getBasePath(), false); com.gitblit.GitBlit.self().contextInitialized(new javax.servlet.ServletContextEvent(filterConfig.getServletContext())); super.init(new com.googlesource.gerrit.plugins.gitblit.GerritWicketFilter.CustomFilterConfig(filterConfig)); } catch (java.lang.Exception e) { throw new javax.servlet.ServletException(e); } }",f875750ec0c1964b978377c4e225c3e7a872eb19,init(javax.servlet.FilterConfig),init(javax.servlet.FilterConfig),2,6,"@java.lang.Override public void init(javax.servlet.FilterConfig filterConfig) throws javax.servlet.ServletException { showGitBlitBanner(); try { java.io.InputStream resin = getClass().getResourceAsStream(com.googlesource.gerrit.plugins.gitblit.GerritWicketFilter.GITBLIT_GERRIT_PROPERTIES); java.util.Properties properties = null; try { properties = new java.util.Properties(); properties.load(resin); properties.put(""git.repositoriesFolder"", repoManager.getBasePath().getAbsolutePath()); properties.put(""realm.userService"", com.googlesource.gerrit.plugins.gitblit.auth.GerritToGitBlitUserService.class.getName()); if ((properties.get(""web.otherUrls"")) != null) { properties.put(""web.otherUrls"", ((((((config.getGitHttpUrl()) + "" "") + (config.getGitSshUrl())).trim()) + "" "") + (properties.get(""web.otherUrls"")))); } else { properties.put(""web.otherUrls"", (((config.getGitHttpUrl()) + "" "") + (config.getGitSshUrl())).trim()); } } finally { resin.close(); } com.gitblit.IStoredSettings settings = new com.googlesource.gerrit.plugins.gitblit.app.GitBlitSettings(properties); com.gitblit.GitBlit.self().configureContext(settings, repoManager.getBasePath(), false); com.gitblit.GitBlit.self().contextInitialized(new javax.servlet.ServletContextEvent(filterConfig.getServletContext())); super.init(new com.googlesource.gerrit.plugins.gitblit.GerritWicketFilter.CustomFilterConfig(filterConfig)); } catch (java.lang.Exception e) { throw new javax.servlet.ServletException(e); } }",efe2799d629096b630de47e0ead5e1475ea18d4c,init(javax.servlet.FilterConfig),169020,362,414
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeEditApi.java,7.0,"public static void delete(int id, java.lang.String path, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult> cb) { com.google.gerrit.client.changes.ChangeEditApi.editFile(id, path).delete(cb); }",337c1cf013921fdcbafb2f020a694ea359e5afdf,"public static void delete(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String path, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult> cb) { com.google.gerrit.client.changes.ChangeEditApi.editFile(id, project, path).delete(cb); }",788d6ced65bd1e69829bd546ce4c74365a7772ac,"delete(int,java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)","delete(int,java.lang.String,java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)",7,12,"public static void delete(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String path, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult> cb) { com.google.gerrit.client.changes.ChangeEditApi.editFile(project, id, path).delete(cb); }",716c1748e8e04833d849caaec39a4fa48885b66d,"delete(java.lang.String,int,java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)",211372,93,92
164952,javatests_com_google_gerrit_server_project_SubmitRulesEvaluatorTest.java,,,,"private com.googlecode.prolog_cafe.lang.Term makeTerm(java.lang.String status, com.googlecode.prolog_cafe.lang.StructureTerm labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm(status, labels); }",538d62f522ffc0f05212872b5eb3202fbfd3c123,,"makeTerm(java.lang.String,com.googlecode.prolog_cafe.lang.StructureTerm)",4,4,"private static com.googlecode.prolog_cafe.lang.Term makeTerm(java.lang.String status, com.googlecode.prolog_cafe.lang.StructureTerm labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm(status, labels); }",cde67c443188781b032ecbf3ebe55f5885377e3a,"makeTerm(java.lang.String,com.googlecode.prolog_cafe.lang.StructureTerm)",40642,66,67
19442,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_CreateProject.java,4.0,"@java.lang.Override public void start(final org.apache.sshd.server.Environment env) { startThread(new com.google.gerrit.sshd.commands.CommandRunnable() { @java.lang.Override public void run() throws java.lang.Exception { java.io.PrintWriter p = toPrintWriter(out); parseCommandLine(); try { validateParameters(); if (!(permissionsOnly)) { final org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(projectName); try { org.eclipse.jgit.lib.RefUpdate u = repo.updateRef(Constants.HEAD); u.disableRefLog(); u.link(branch); repoManager.setProjectDescription(projectName, projectDescription); final com.google.gerrit.reviewdb.Project.NameKey project = new com.google.gerrit.reviewdb.Project.NameKey(projectName); rq.replicateNewProject(project, branch); if (createEmptyCommit) { createEmptyCommit(repo, project, branch); } } finally { repo.close(); } } createProject(); } catch (java.lang.Exception e) { p.print(((""Error when trying to create project: "" + (e.getMessage())) + ""\n"")); p.flush(); } } }); }",17467c29254486f603e54866cfd3b4bf4e1afcdf,"@java.lang.Override public void start(final org.apache.sshd.server.Environment env) { startThread(new com.google.gerrit.sshd.commands.CommandRunnable() { @java.lang.Override public void run() throws java.lang.Exception { java.io.PrintWriter p = toPrintWriter(out); parseCommandLine(); try { validateParameters(); if (!(permissionsOnly)) { final org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(projectName); try { org.eclipse.jgit.lib.RefUpdate u = repo.updateRef(Constants.HEAD); u.disableRefLog(); u.link(branch); createProject(repo); repoManager.setProjectDescription(projectName, projectDescription); final com.google.gerrit.reviewdb.Project.NameKey project = new com.google.gerrit.reviewdb.Project.NameKey(projectName); rq.replicateNewProject(project, branch); if (createEmptyCommit) { createEmptyCommit(repo, project, branch); } } finally { repo.close(); } } } catch (java.lang.Exception e) { p.print(((""Error when trying to create project: "" + (e.getMessage())) + ""\n"")); p.flush(); } } }); }",42229563fa5f874f29fd3271e242ed48c1e3d085,start(org.apache.sshd.server.Environment),start(org.apache.sshd.server.Environment),12,3,"@java.lang.Override public void start(final org.apache.sshd.server.Environment env) { startThread(new com.google.gerrit.sshd.commands.CommandRunnable() { @java.lang.Override public void run() throws java.lang.Exception { java.io.PrintWriter p = toPrintWriter(out); parseCommandLine(); try { validateParameters(); nameKey = new com.google.gerrit.reviewdb.Project.NameKey(projectName); final org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(nameKey); try { org.eclipse.jgit.lib.RefUpdate u = repo.updateRef(Constants.HEAD); u.disableRefLog(); u.link(branch); createProject(); repoManager.setProjectDescription(nameKey, projectDescription); if (createEmptyCommit) { createEmptyCommit(repo, nameKey, branch); } rq.replicateNewProject(nameKey, branch); } finally { repo.close(); } } catch (java.lang.Exception e) { p.print(((""Error when trying to create project: "" + (e.getMessage())) + ""\n"")); p.flush(); } } }); }",d570d82f4d3c087b859d75a0624d51cc44bf8e91,start(org.apache.sshd.server.Environment),177040,279,259
146191,gerrit-sshd_src_main_java_com_google_gerrit_sshd_SshLog.java,9.0,"private com.google.common.collect.ListMultimap<java.lang.String, ?> extractParameters(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return com.google.common.collect.MultimapBuilder.hashKeys(0).arrayListValues(0).build(); } java.lang.String[] cmdArgs = dcmd.getArguments(); java.lang.String paramName = null; int argPos = 0; com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> parms = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (int i = 2; i < (cmdArgs.length); i++) { java.lang.String arg = cmdArgs[i]; if (arg.equals(""--"")) { for (i++; i < (cmdArgs.length); i++) { parms.put((""$"" + (argPos++)), cmdArgs[i]); } break; } int eqPos = arg.indexOf('='); if ((arg.startsWith(""--"")) && (eqPos > 0)) { parms.put(arg.substring(0, eqPos), arg.substring((eqPos + 1))); continue; } if (arg.startsWith(""-"")) { if (paramName != null) { parms.put(paramName, null); } paramName = arg; continue; } if (paramName == null) { parms.put((""$"" + (argPos++)), arg); } else { parms.put(paramName, arg); paramName = null; } } if (paramName != null) { parms.put(paramName, null); } return parms; }",dea4fe8cb918ebab0951e4f489dc8636eacb6d60,"private com.google.common.collect.ListMultimap<java.lang.String, ?> extractParameters(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return com.google.common.collect.MultimapBuilder.hashKeys(0).arrayListValues(0).build(); } java.lang.String[] cmdArgs = dcmd.getArguments(); java.lang.String paramName = null; int argPos = 0; com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> parms = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (int i = 2; i < (cmdArgs.length); i++) { java.lang.String arg = cmdArgs[i]; if (arg.equals(""--"")) { for (i++; i < (cmdArgs.length); i++) { parms.put((""$"" + (argPos++)), cmdArgs[i]); } break; } int eqPos = arg.indexOf('='); if ((arg.startsWith(""--"")) && (eqPos > 0)) { java.lang.String parm = arg.substring(0, eqPos); parms.put(parm, (dcmd.isSensitiveParameters(parm) ? com.google.gerrit.sshd.SshLog.MASK : arg.substring((eqPos + 1)))); continue; } if (arg.startsWith(""-"")) { if (paramName != null) { parms.put(paramName, null); } paramName = arg; continue; } if (paramName == null) { parms.put((""$"" + (argPos++)), arg); } else { parms.put(paramName, (dcmd.isSensitiveParameters(paramName) ? com.google.gerrit.sshd.SshLog.MASK : arg)); paramName = null; } } if (paramName != null) { parms.put(paramName, null); } return parms; }",0784e159a00bdfb10019276903066ae5bce5b34b,extractParameters(com.google.gerrit.sshd.DispatchCommand),extractParameters(com.google.gerrit.sshd.DispatchCommand),18,1,"private com.google.common.collect.ListMultimap<java.lang.String, ?> extractParameters(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return com.google.common.collect.MultimapBuilder.hashKeys(0).arrayListValues(0).build(); } java.lang.String[] cmdArgs = dcmd.getArguments(); java.lang.String paramName = null; int argPos = 0; com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> parms = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (int i = 2; i < (cmdArgs.length); i++) { java.lang.String arg = cmdArgs[i]; if (arg.equals(""--"")) { for (i++; i < (cmdArgs.length); i++) { parms.put((""$"" + (argPos++)), cmdArgs[i]); } break; } int eqPos = arg.indexOf('='); if ((arg.startsWith(""--"")) && (eqPos > 0)) { java.lang.String param = arg.substring(0, eqPos); java.lang.String value = ((auditMask) && (dcmd.isSensitiveParameter(param))) ? com.google.gerrit.sshd.SshLog.MASK : arg.substring((eqPos + 1)); parms.put(param, value); continue; } if (arg.startsWith(""-"")) { if (paramName != null) { parms.put(paramName, null); } paramName = arg; continue; } if (paramName == null) { parms.put((""$"" + (argPos++)), arg); } else { parms.put(paramName, ((auditMask) && (dcmd.isSensitiveParameter(paramName)) ? com.google.gerrit.sshd.SshLog.MASK : arg)); paramName = null; } } if (paramName != null) { parms.put(paramName, null); } return parms; }",da44f47a6f6fd19ec7644bc5f0f41d522f06a7c7,extractParameters(com.google.gerrit.sshd.DispatchCommand),107565,433,453
52825,gerrit-server_src_test_java_com_google_gerrit_server_notedb_ChangeNotesTest.java,,,,"private com.google.gerrit.reviewdb.client.PatchSetInfo newPatchSet(com.google.gerrit.reviewdb.client.Change.Id changeId, int psId) { com.google.gerrit.reviewdb.client.PatchSetInfo ps = new com.google.gerrit.reviewdb.client.PatchSetInfo(new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, psId)); ps.setSubject(""Change subject""); return ps; }",653068d8965679dca61620cf2808b7287575f316,,"newPatchSet(com.google.gerrit.reviewdb.client.Change$Id,int)",13,9,"private static java.sql.Timestamp after(com.google.gerrit.reviewdb.client.Change c, long millis) { return new java.sql.Timestamp(((c.getCreatedOn().getTime()) + millis)); }",480ab3b8c840ba9abfc9810774fdfe432a5ed2f6,"after(com.google.gerrit.reviewdb.client.Change,long)",194703,117,49
46350,gerrit-server_src_main_java_com_google_gerrit_server_index_ChangeIndexerImpl.java,3.0,"@java.lang.Override public java.util.concurrent.Future<?> index(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.util.RequestScopePropagator prop) { java.lang.Runnable task = new com.google.gerrit.server.index.ChangeIndexerImpl.Task(change); if (prop != null) { task = prop.wrap(task); } return workQueue.getDefaultQueue().submit(task); }",eb8782f5a91ec3088ab05c686f850fd7c09a21e1,"@java.lang.Override public java.util.concurrent.Future<?> index(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.util.RequestScopePropagator prop) { java.lang.Runnable task = new com.google.gerrit.server.index.ChangeIndexerImpl.Task(change); if (prop != null) { task = prop.wrap(task); } return executor.submit(task); }",96a8456a1c23530967fa0ecd386924bf745af958,"index(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.server.util.RequestScopePropagator)","index(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.server.util.RequestScopePropagator)",3,3,"@java.lang.Override public com.google.common.util.concurrent.ListenableFuture<?> index(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.util.RequestScopePropagator prop) { java.lang.Runnable task = new com.google.gerrit.server.index.ChangeIndexerImpl.Task(change); if (prop != null) { task = prop.wrap(task); } return executor.submit(task); }",a0f62d9f213c6fbd6d9fedef6cae3037f9af162f,"index(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.server.util.RequestScopePropagator)",7160,103,107
91064,src_main_java_com_cisco_gerrit_plugins_slack_message_CommentAddedMessageGenerator.java,1.0,@java.lang.Override public boolean shouldPublish() { return config.isEnabled(); },56faf3c3c588f6c941645a0ab3bd0be415c70570,@java.lang.Override public boolean shouldPublish() { return (config.isEnabled()) && (config.shouldNotifyOnCommentAdded()); },47fb2f2484c2f79ff0965233e73caca627ff7517,shouldPublish(),shouldPublish(),5,1,@java.lang.Override public boolean shouldPublish() { return (config.isEnabled()) && (config.shouldPublishOnCommentAdded()); },c03173eb06c3ae9b068fed0a3c1662969829798e,shouldPublish(),140467,29,29
57740,gerrit-server_src_test_java_com_google_gerrit_server_notedb_ChangeNotesTest.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void changeMessageOnePatchSet() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.putReviewer(changeOwner.getAccount().getId(), com.google.gerrit.server.notedb.ReviewerState.REVIEWER); update.setChangeMessage(""Just a little code change.\nTesting new line""); update.commit(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); java.util.List<java.lang.String> changeMessages = notes.getChangeMessages(); assertEquals(1, changeMessages.size()); assertEquals(""Just a little code change.\nTesting new line"", changeMessages.get(0)); }",240b0eaf9641f6de78ec0de74f8ca812a839bea9,,changeMessageOnePatchSet(),11,34,"@org.junit.Test public void changeMessageOnePatchSet() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.putReviewer(changeOwner.getAccount().getId(), com.google.gerrit.server.notedb.ReviewerState.REVIEWER); update.setChangeMessage(""Just a little code change.\n""); update.commit(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); java.util.List<java.lang.String> changeMessages = notes.getChangeMessages(); assertEquals(1, changeMessages.size()); assertEquals(""Just a little code change.\n"", changeMessages.get(0)); }",a4d5ab9247f0eb1ea9b3ae53308576553121f385,changeMessageOnePatchSet(),36734,187,181
78481,gerrit-server_src_main_java_com_google_gerrit_server_index_change_AllChangesIndexer.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public int compareTo(com.google.gerrit.server.index.change.AllChangesIndexer.ProjectHolder other) { return (other.size) < (this.size) ? -1 : 1; },1d09bbbf1476ec8e34f57466a6cf0563fe38d871,,compareTo(com.google.gerrit.server.index.change.AllChangesIndexer$ProjectHolder),3,9,"@java.lang.Override public int compareTo(com.google.gerrit.server.index.change.AllChangesIndexer.ProjectHolder other) { return com.google.common.collect.ComparisonChain.start().compare(other.size, size).compare(other.name.get(), name.get()).result(); }",f0fcc6b40b4da0da2c65e5878cd69213fe8b1abf,compareTo(com.google.gerrit.server.index.change.AllChangesIndexer$ProjectHolder),59216,50,70
35260,gerrit-server_src_main_java_com_google_gerrit_lifecycle_LifecycleManager.java,5.0,"public void stop() { if (started) { final java.util.List<com.google.gerrit.lifecycle.LifecycleListener> t = new java.util.ArrayList<com.google.gerrit.lifecycle.LifecycleListener>(listeners.keySet()); for (int i = (t.size()) - 1; 0 <= i; i--) { final com.google.gerrit.lifecycle.LifecycleListener obj = t.get(i); try { obj.stop(); } catch (java.lang.Throwable err) { org.slf4j.LoggerFactory.getLogger(obj.getClass()).warn(""Failed to stop"", err); } } started = false; } }",100a7a56727dcc4dc5e5d0369c5834e5c903ae7d,"public void stop() { if (started) { final java.util.List<com.google.gerrit.extensions.events.LifecycleListener> t = new java.util.ArrayList<com.google.gerrit.extensions.events.LifecycleListener>(listeners.keySet()); for (int i = (t.size()) - 1; 0 <= i; i--) { final com.google.gerrit.extensions.events.LifecycleListener obj = t.get(i); try { obj.stop(); } catch (java.lang.Throwable err) { org.slf4j.LoggerFactory.getLogger(obj.getClass()).warn(""Failed to stop"", err); } } started = false; } }",ef48639c181e41fd043375387ce9d6a92b0c52c0,stop(),stop(),6,8,"public void stop() { for (int i = (handles.size()) - 1; 0 <= i; i--) { handles.get(i).remove(); } handles.clear(); for (int i = startedIndex; 0 <= i; i--) { com.google.gerrit.extensions.events.LifecycleListener obj = listeners.get(i).get(); try { obj.stop(); } catch (java.lang.Throwable err) { org.slf4j.LoggerFactory.getLogger(obj.getClass()).warn(""Failed to stop"", err); } startedIndex = i - 1; } }",604a3b10789778af898ce53f49a9ad52611592d5,stop(),113779,150,125
74829,src_main_java_com_googlesource_gerrit_plugins_its_jira_JiraItsFacade.java,6.0,"private java.lang.String healthCheckAccess() throws java.rmi.RemoteException { com.googlesource.gerrit.plugins.its.jira.JiraClient client = new com.googlesource.gerrit.plugins.its.jira.JiraClient(getUrl()); com.googlesource.gerrit.plugins.its.jira.JiraSession token = client.login(getUsername(), getPassword()); client.logout(token); final java.lang.String result = (""{\""status\""=\""ok\"",\""username\""=\"""" + (getUsername())) + ""\""}""; log.debug(""Healtheck on access result: {}"", result); return result; }",620baf02c08d2b666b7dc30fbde3d3bc3c9a946a,"private java.lang.String healthCheckAccess() throws java.io.IOException { try { new com.googlesource.gerrit.plugins.its.jira.JiraClient(getUrl(), getUsername(), getPassword()).sysInfo(); } catch (java.net.URISyntaxException e) { throw new java.io.IOException(e); } final java.lang.String result = (""{\""status\""=\""ok\"",\""username\""=\"""" + (getUsername())) + ""\""}""; log.debug(""Healtheck on access result: {}"", result); return result; }",124f43865029f07ec9a8a1bc9b80c613b80fc9cc,healthCheckAccess(),healthCheckAccess(),5,11,"private java.lang.String healthCheckAccess() throws java.io.IOException { client().sysInfo(); final java.lang.String result = (""{\""status\""=\""ok\"",\""username\""=\"""" + (getUsername())) + ""\""}""; log.debug(""Healtheck on access result: {}"", result); return result; }",3407687bdb89b2e5acd052b9c81d5b754ccf8e9b,healthCheckAccess(),168490,114,64
34477,gerrit-gwtui_src_main_java_com_google_gerrit_client_rpc_NativeList.java,,,,@java.lang.Override public T next() { return get(((index)++)); },19669a6a91ae7e6fed5add4cfcfa4b3f6689254c,,next(),13,6,@java.lang.Override public T get(int index) { return this.get(index); },f9d37d59657df36f367af9fe04cd1d632f437791,get(int),19478,19,22
61602,gerrit-gwtui_src_main_java_com_google_gerrit_client_Gerrit.java,63.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static void setEditPreferences(com.google.gerrit.extensions.common.EditPreferencesInfo p) { com.google.gerrit.client.Gerrit.editPrefs = p; },581a68b13afc118134f4418aaf768f61ba98acc9,,setEditPreferences(com.google.gerrit.extensions.common.EditPreferencesInfo),28,47,public static void setEditPreferences(com.google.gerrit.extensions.client.EditPreferencesInfo p) { com.google.gerrit.client.Gerrit.editPrefs = p; },096c0992c190068127cfb1b517e9cc5b10e58ec5,setEditPreferences(com.google.gerrit.extensions.client.EditPreferencesInfo),109160,43,43
115850,src_main_java_com_googlesource_gerrit_plugins_supermanifest_repo_RepoUpdater.java,,,,"@java.lang.Override public void update(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader reader, com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c, java.lang.String srcRef) throws java.lang.Exception { org.eclipse.jgit.lib.Repository destRepo = reader.openRepository(c.getDestRepoKey().toString()); org.eclipse.jgit.lib.Repository srcRepo = reader.openRepository(c.getSrcRepoKey().toString()); org.eclipse.jgit.gitrepo.RepoCommand cmd = new org.eclipse.jgit.gitrepo.RepoCommand(destRepo); if (c.getDestBranch().equals(""*"")) { cmd.setTargetBranch(srcRef.substring(com.googlesource.gerrit.plugins.supermanifest.repo.REFS_HEADS.length())); } else { cmd.setTargetBranch(c.getDestBranch()); } java.io.InputStream manifestStream = new java.io.ByteArrayInputStream(com.googlesource.gerrit.plugins.supermanifest.Utils.readBlob(srcRepo, ((srcRef + "":"") + (c.getXmlPath())))); cmd.setAuthor(serverIdent).setRecordRemoteBranch(true).setRecordSubmoduleLabels(c.isRecordSubmoduleLabels()).setInputStream(manifestStream).setRecommendShallow(true).setRemoteReader(reader).setTargetURI(c.getDestRepoKey().toString()).setURI(c.getBaseUri().toString()); cmd.setIncludedFileReader(new com.googlesource.gerrit.plugins.supermanifest.repo.RepoUpdater.GerritIncludeReader(srcRepo, srcRef)); cmd.call(); }",c93b5bc32cabeddd736784d558d4598eb2b5857c,,"update(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader,com.googlesource.gerrit.plugins.supermanifest.ConfigEntry,java.lang.String)",6,1,"@java.lang.Override public void update(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader reader, com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c, java.lang.String srcRef) throws java.lang.Exception { org.eclipse.jgit.lib.Repository destRepo = reader.openRepository(c.getDestRepoKey().toString()); org.eclipse.jgit.lib.Repository srcRepo = reader.openRepository(c.getSrcRepoKey().toString()); org.eclipse.jgit.gitrepo.RepoCommand cmd = new org.eclipse.jgit.gitrepo.RepoCommand(destRepo); if (c.getDestBranch().equals(""*"")) { cmd.setTargetBranch(srcRef.substring(com.googlesource.gerrit.plugins.supermanifest.REFS_HEADS.length())); } else { cmd.setTargetBranch(c.getDestBranch()); } java.io.InputStream manifestStream = new java.io.ByteArrayInputStream(com.googlesource.gerrit.plugins.supermanifest.Utils.readBlob(srcRepo, ((srcRef + "":"") + (c.getXmlPath())))); cmd.setAuthor(serverIdent).setRecordRemoteBranch(true).setRecordSubmoduleLabels(c.isRecordSubmoduleLabels()).setInputStream(manifestStream).setRecommendShallow(true).setRemoteReader(reader).setTargetURI(c.getDestRepoKey().toString()).setURI(c.getBaseUri().toString()); cmd.setIncludedFileReader(new com.googlesource.gerrit.plugins.supermanifest.RepoUpdater.GerritIncludeReader(srcRepo, srcRef)); cmd.call(); }",cc813dd2b3bde49596cdc769263786774d34eaae,"update(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader,com.googlesource.gerrit.plugins.supermanifest.ConfigEntry,java.lang.String)",71291,379,375
63481,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,77.0,"@java.lang.Override public PatchSet.Id call() throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { try { if (caller == (java.lang.Thread.currentThread())) { return insertPatchSet(db); } else { com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open(); try { return insertPatchSet(db); } finally { db.close(); } } } finally { synchronized(replaceProgress) { replaceProgress.update(1); } } }",cf41488d685221d073f6d6692f10c5d68d1bd428,"@java.lang.Override public PatchSet.Id call() throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { try { if ((caller == (java.lang.Thread.currentThread())) || (magicBranch.edit)) { return magicBranch.edit ? upsertEdit() : insertPatchSet(db); } else { com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open(); try { return insertPatchSet(db); } finally { db.close(); } } } finally { synchronized(replaceProgress) { replaceProgress.update(1); } } }",550d66772b76bf57ffcd29ad53e07904f8df6dcf,call(),call(),13,78,"@java.lang.Override public PatchSet.Id call() throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { try { if (magicBranch.edit) { return upsertEdit(); } else if (caller == (java.lang.Thread.currentThread())) { return insertPatchSet(db); } else { com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open(); try { return insertPatchSet(db); } finally { db.close(); } } } finally { synchronized(replaceProgress) { replaceProgress.update(1); } } }",24c279e3a4d12bbf668e24d10edb4fcc9766b3bd,call(),5000,151,147
57340,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_CommitBox.java,2.0,"private static void formatLink(com.google.gerrit.client.changes.ChangeInfo.GitPerson person, com.google.gerrit.client.ui.InlineHyperlink name, com.google.gwt.dom.client.Element date, com.google.gerrit.reviewdb.client.Change.Status status) { name.setText(com.google.gerrit.client.change.CommitBox.renderName(person)); name.setTargetHistoryToken(com.google.gerrit.common.PageLinks.toAccountQuery(com.google.gerrit.client.change.CommitBox.owner(person), status)); date.setInnerText(com.google.gerrit.client.FormatUtil.mediumFormat(person.date())); }",1fc2dd04eb9559631208eed1ef84827c45c22873,"private static void formatLink(com.google.gerrit.client.changes.ChangeInfo.GitPerson person, com.google.gwt.user.client.ui.FlowPanel p, com.google.gerrit.client.ui.InlineHyperlink name, com.google.gwt.dom.client.Element date, com.google.gerrit.client.changes.ChangeInfo change) { if (change.owner().has_avatar_info()) { p.insert(new com.google.gerrit.client.AvatarImage(com.google.gerrit.client.account.AccountInfo.create(0, person.name(), person.email())), 0); } name.setText(com.google.gerrit.client.change.CommitBox.renderName(person)); name.setTargetHistoryToken(com.google.gerrit.common.PageLinks.toAccountQuery(com.google.gerrit.client.change.CommitBox.owner(person), change.status())); date.setInnerText(com.google.gerrit.client.FormatUtil.mediumFormat(person.date())); }",13bec4f3e7caf66de70f05bb079ed2b0829b4b1e,"formatLink(com.google.gerrit.client.changes.ChangeInfo.GitPerson,com.google.gerrit.client.ui.InlineHyperlink,com.google.gwt.dom.client.Element,com.google.gerrit.reviewdb.client.Change.Status)","formatLink(com.google.gerrit.client.changes.ChangeInfo.GitPerson,com.google.gwt.user.client.ui.FlowPanel,com.google.gerrit.client.ui.InlineHyperlink,com.google.gwt.dom.client.Element,com.google.gerrit.client.changes.ChangeInfo)",5,2,"private static void formatLink(com.google.gerrit.client.changes.ChangeInfo.GitPerson person, com.google.gwt.user.client.ui.FlowPanel p, com.google.gerrit.client.ui.InlineHyperlink name, com.google.gwt.dom.client.Element date, com.google.gerrit.client.changes.ChangeInfo change) { if (change.owner().has_avatar_info()) { com.google.gerrit.client.AvatarImage avatar; if (change.owner().email().equals(person.email())) { avatar = new com.google.gerrit.client.AvatarImage(change.owner()); } else { avatar = new com.google.gerrit.client.AvatarImage(com.google.gerrit.client.account.AccountInfo.create(0, person.name(), person.email())); } p.insert(avatar, 0); } name.setText(com.google.gerrit.client.change.CommitBox.renderName(person)); name.setTargetHistoryToken(com.google.gerrit.common.PageLinks.toAccountQuery(com.google.gerrit.client.change.CommitBox.owner(person), change.status())); date.setInnerText(com.google.gerrit.client.FormatUtil.mediumFormat(person.date())); }",0c3b64881ec43c4e3cdd585759dcbaebce00a11f,"formatLink(com.google.gerrit.client.changes.ChangeInfo.GitPerson,com.google.gwt.user.client.ui.FlowPanel,com.google.gerrit.client.ui.InlineHyperlink,com.google.gwt.dom.client.Element,com.google.gerrit.client.changes.ChangeInfo)",72078,236,293
10275,src_main_java_com_google_gerrit_client_patches_CommentDetail.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean isSafeInline() { return isSafeInline; },1a716b774af087f80a20b4df09fff5c12cc6e373,,isSafeInline(),9,11,"private static void addChildren(java.util.Map<java.lang.String, java.util.List<com.google.gerrit.client.reviewdb.PatchLineComment>> parentMap, java.util.List<com.google.gerrit.client.reviewdb.PatchLineComment> children, java.util.List<com.google.gerrit.client.reviewdb.PatchLineComment> outResult) { if (children != null) { for (com.google.gerrit.client.reviewdb.PatchLineComment c : children) { outResult.add(c); com.google.gerrit.client.patches.CommentDetail.addChildren(parentMap, parentMap.get(c.getKey().get()), outResult); } } }",c54f837f7292b81282deadeaa8f4698a283581f1,"addChildren(java.util.Map,java.util.List,java.util.List)",36054,13,173
57909,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DiffTable.java,7.0,void setHideEmptyPane(boolean hide) { if ((changeType) == (com.google.gerrit.reviewdb.client.Patch.ChangeType.ADDED)) { setVisibleA((!hide)); } else if ((changeType) == (com.google.gerrit.reviewdb.client.Patch.ChangeType.DELETED)) { setVisibleB((!hide)); } },c1617111acd9f013c66b42eeda68f04c0b74c86a,void setHideEmptyPane(boolean hide) { if ((changeType) == (com.google.gerrit.extensions.api.changes.ChangeType.ADDED)) { setVisibleA((!hide)); } else if ((changeType) == (com.google.gerrit.extensions.api.changes.ChangeType.DELETED)) { setVisibleB((!hide)); } },5c3205ec9f2be56bdacfdf93af07299dc1c16dff,setHideEmptyPane(boolean),setHideEmptyPane(boolean),10,7,void setHideEmptyPane(boolean hide) { if ((changeType) == (com.google.gerrit.reviewdb.client.Patch.ChangeType.ADDED)) { setVisibleA((!hide)); } else if ((changeType) == (com.google.gerrit.reviewdb.client.Patch.ChangeType.DELETED)) { setVisibleB((!hide)); } },c1617111acd9f013c66b42eeda68f04c0b74c86a,setHideEmptyPane(boolean),214198,84,86
70063,gerrit-server_src_main_java_com_google_gerrit_server_account_GpgKeys.java,8.0,"@java.lang.Override public com.google.gerrit.server.account.AccountResource.GpgKey parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.bouncycastle.openpgp.PGPException { com.google.gerrit.server.account.GpgKeys.checkEnabled(); java.lang.String str = CharMatcher.WHITESPACE.removeFrom(id.get()).toUpperCase(); if ((((str.length()) != 8) && ((str.length()) != 40)) || (!(com.google.common.base.CharMatcher.anyOf(""0123456789ABCDEF"").matchesAllOf(str)))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } byte[] fp = null; for (com.google.gerrit.reviewdb.client.AccountExternalId extId : getGpgExtIds(parent)) { java.lang.String fpStr = extId.getSchemeRest(); if (!(fpStr.endsWith(str))) { continue; } else if (fp != null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple keys found for "" + id)); } fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); } if (fp == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } try (com.google.gerrit.server.git.gpg.PublicKeyStore store = storeProvider.get()) { long keyId = java.nio.ByteBuffer.wrap(fp).getLong(((fp.length) - 8)); for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : store.get(keyId)) { org.bouncycastle.openpgp.PGPPublicKey key = keyRing.getPublicKey(); if (java.util.Arrays.equals(key.getFingerprint(), fp)) { return new com.google.gerrit.server.account.AccountResource.GpgKey(parent.getUser(), keyRing); } } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",6309df9129d8035b9006f930d722cdae1f461ae7,"@java.lang.Override public com.google.gerrit.server.account.AccountResource.GpgKey parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.bouncycastle.openpgp.PGPException { com.google.gerrit.server.account.GpgKeys.checkEnabled(); java.lang.String str = CharMatcher.WHITESPACE.removeFrom(id.get()).toUpperCase(); if ((((str.length()) != 8) && ((str.length()) != 40)) || (!(com.google.common.base.CharMatcher.anyOf(""0123456789ABCDEF"").matchesAllOf(str)))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } byte[] fp = com.google.gerrit.server.account.GpgKeys.parseFingerprint(id.get(), getGpgExtIds(parent)); try (com.google.gerrit.server.git.gpg.PublicKeyStore store = storeProvider.get()) { long keyId = java.nio.ByteBuffer.wrap(fp).getLong(((fp.length) - 8)); for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : store.get(keyId)) { org.bouncycastle.openpgp.PGPPublicKey key = keyRing.getPublicKey(); if (java.util.Arrays.equals(key.getFingerprint(), fp)) { return new com.google.gerrit.server.account.AccountResource.GpgKey(parent.getUser(), keyRing); } } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",530e0a61ff9f2cfc1c75c2ed14adb1adafa7ea05,"parse(com.google.gerrit.server.account.AccountResource,com.google.gerrit.extensions.restapi.IdString)","parse(com.google.gerrit.server.account.AccountResource,com.google.gerrit.extensions.restapi.IdString)",13,8,"@java.lang.Override public com.google.gerrit.server.account.AccountResource.GpgKey parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.bouncycastle.openpgp.PGPException { com.google.gerrit.server.account.GpgKeys.checkEnabled(); java.lang.String str = CharMatcher.WHITESPACE.removeFrom(id.get()).toUpperCase(); if ((((str.length()) != 8) && ((str.length()) != 40)) || (!(com.google.common.base.CharMatcher.anyOf(""0123456789ABCDEF"").matchesAllOf(str)))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } byte[] fp = com.google.gerrit.server.account.GpgKeys.parseFingerprint(id.get(), getGpgExtIds(parent)); try (com.google.gerrit.server.git.gpg.PublicKeyStore store = storeProvider.get()) { long keyId = com.google.gerrit.server.account.GpgKeys.keyId(fp); for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : store.get(keyId)) { org.bouncycastle.openpgp.PGPPublicKey key = keyRing.getPublicKey(); if (java.util.Arrays.equals(key.getFingerprint(), fp)) { return new com.google.gerrit.server.account.AccountResource.GpgKey(parent.getUser(), keyRing); } } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",73de2552f68e13b53477e599feae5ca59cd890cb,"parse(com.google.gerrit.server.account.AccountResource,com.google.gerrit.extensions.restapi.IdString)",170801,402,403
76661,gerrit-server_src_main_java_com_google_gerrit_server_StarredChangesUtil.java,5.0,"public java.lang.Iterable<com.google.gerrit.reviewdb.client.Account.Id> byChange(final com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.FluentIterable.from(getRefNames(RefNames.REFS_STARRED_CHANGES)).filter(new com.google.common.base.Predicate<java.lang.String>() { @java.lang.Override public boolean apply(java.lang.String refPart) { return refPart.endsWith((""/"" + (changeId.get()))); } }).transform(new com.google.common.base.Function<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public Account.Id apply(java.lang.String refPart) { return Account.Id.fromRefPart(refPart); } }); }",995b8af64da3c2f3f807a7fa603d39f7fe5b55d9,"public java.lang.Iterable<com.google.gerrit.reviewdb.client.Account.Id> byChange(final com.google.gerrit.reviewdb.client.Change.Id changeId, final java.lang.String label) throws com.google.gwtorm.server.OrmException { try (final org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { return com.google.common.collect.FluentIterable.from(com.google.gerrit.server.StarredChangesUtil.getRefNames(repo, RefNames.REFS_STARRED_CHANGES)).filter(new com.google.common.base.Predicate<java.lang.String>() { @java.lang.Override public boolean apply(java.lang.String refPart) { return refPart.endsWith((""/"" + (changeId.get()))); } }).transform(new com.google.common.base.Function<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public Account.Id apply(java.lang.String refPart) { return Account.Id.fromRefPart(refPart); } }).filter(new com.google.common.base.Predicate<com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public boolean apply(com.google.gerrit.reviewdb.client.Account.Id accountId) { try { return com.google.gerrit.server.StarredChangesUtil.readLabels(repo, com.google.gerrit.reviewdb.client.RefNames.refsStarredChanges(accountId, changeId)).contains(label); } catch (java.io.IOException e) { com.google.gerrit.server.StarredChangesUtil.log.error(java.lang.String.format(""Cannot query stars by account %d on change %d"", accountId.get(), changeId.get()), e); return false; } } }); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format(""Get accounts that starred change %d failed"", changeId.get()), e); } }",f8e6b787873aab13b85772e5ba5f8554f3448bc7,byChange(com.google.gerrit.reviewdb.client.Change$Id),"byChange(com.google.gerrit.reviewdb.client.Change$Id,java.lang.String)",21,16,"public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> byChange(final com.google.gerrit.reviewdb.client.Change.Id changeId, final java.lang.String label) throws com.google.gwtorm.server.OrmException { try (final org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { return com.google.common.collect.FluentIterable.from(com.google.gerrit.server.StarredChangesUtil.getRefNames(repo, com.google.gerrit.reviewdb.client.RefNames.refsStarredChangesPrefix(changeId))).transform(new com.google.common.base.Function<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public Account.Id apply(java.lang.String refPart) { return Account.Id.parse(refPart); } }).filter(new com.google.common.base.Predicate<com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public boolean apply(com.google.gerrit.reviewdb.client.Account.Id accountId) { try { return com.google.gerrit.server.StarredChangesUtil.readLabels(repo, com.google.gerrit.reviewdb.client.RefNames.refsStarredChanges(changeId, accountId)).contains(label); } catch (java.io.IOException e) { com.google.gerrit.server.StarredChangesUtil.log.error(java.lang.String.format(""Cannot query stars by account %d on change %d"", accountId.get(), changeId.get()), e); return false; } } }).toSet(); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format(""Get accounts that starred change %d failed"", changeId.get()), e); } }",f7e8d65df448df6a74177db3f8be1e0012e1fdf4,"byChange(com.google.gerrit.reviewdb.client.Change$Id,java.lang.String)",23265,506,463
98952,gerrit-gwtui-common_src_main_java_com_google_gerrit_client_info_AuthInfo.java,18.0,public final boolean isHttpPasswordSettingsEnabled() { if ((isGitBasicAuth()) && ((gitBasicAuthPolicy()) == (com.google.gerrit.extensions.client.GitBasicAuthPolicy.LDAP))) { return false; } return true; },50523e5af3e34f7194f3c74602a0986ff59ef2fd,public final boolean isHttpPasswordSettingsEnabled() { if ((gitBasicAuthPolicy()) == (com.google.gerrit.extensions.client.GitBasicAuthPolicy.LDAP)) { return false; } return true; },c14582eb1d10f708efa267e76e306d091714b865,isHttpPasswordSettingsEnabled(),isHttpPasswordSettingsEnabled(),3,18,public final boolean isHttpPasswordSettingsEnabled() { return (gitBasicAuthPolicy()) != (com.google.gerrit.extensions.client.GitBasicAuthPolicy.LDAP); },8ff2f0891f4f0759bb575f7bc31b3923e8ded6b0,isHttpPasswordSettingsEnabled(),80751,45,36
53680,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,2.0,"@java.lang.Override public void onShowView() { super.onShowView(); com.google.gwt.user.client.Window.enableScrolling(false); if (prefs.hideTopMenu()) { com.google.gerrit.client.Gerrit.setHeaderVisible(false); } resizeHandler = com.google.gwt.user.client.Window.addResizeHandler(new com.google.gwt.event.logical.shared.ResizeHandler() { @java.lang.Override public void onResize(com.google.gwt.event.logical.shared.ResizeEvent event) { resizeCodeMirror(); } }); final int height = getCodeMirrorHeight(); operation(new java.lang.Runnable() { @java.lang.Override public void run() { cmA.setHeight(height); cmB.setHeight(height); cmA.refresh(); cmB.refresh(); } }); diffTable.sidePanel.adjustGutters(cmB); if (((startLine) == 0) && ((diff.meta_b()) != null)) { com.google.gerrit.client.diff.DiffChunkInfo d = chunkManager.getFirst(); if (d != null) { startSide = d.getSide(); startLine = (d.getStart()) + 1; } } if (((startSide) != null) && ((startLine) > 0)) { int line = (startLine) - 1; net.codemirror.lib.CodeMirror cm = getCmFromSide(startSide); if ((cm.lineAtHeight((height - 20))) < line) { cm.scrollToY(((cm.heightAtLine(line, ""local"")) - (0.5 * height))); } cm.setCursor(net.codemirror.lib.LineCharacter.create(line)); cm.focus(); } else { cmA.setCursor(net.codemirror.lib.LineCharacter.create(0)); cmA.focus(); } if ((com.google.gerrit.client.Gerrit.isSignedIn()) && (prefs.autoReview())) { header.autoReview(); } prefetchNextFile(); }",5ceb6e2ab528928865e01b4cb159ee6db0848e89,"@java.lang.Override public void onShowView() { super.onShowView(); com.google.gwt.user.client.Window.enableScrolling(false); if (prefs.hideTopMenu()) { com.google.gerrit.client.Gerrit.setHeaderVisible(false); } resizeHandler = com.google.gwt.user.client.Window.addResizeHandler(new com.google.gwt.event.logical.shared.ResizeHandler() { @java.lang.Override public void onResize(com.google.gwt.event.logical.shared.ResizeEvent event) { resizeCodeMirror(); } }); final int height = getCodeMirrorHeight(); operation(new java.lang.Runnable() { @java.lang.Override public void run() { cmA.setHeight(height); cmB.setHeight(height); columnMarginA.getStyle().setHeight(height, Unit.PX); columnMarginB.getStyle().setHeight(height, Unit.PX); cmA.refresh(); cmB.refresh(); } }); setLineLength(prefs.lineLength()); diffTable.sidePanel.adjustGutters(cmB); if (((startLine) == 0) && ((diff.meta_b()) != null)) { com.google.gerrit.client.diff.DiffChunkInfo d = chunkManager.getFirst(); if (d != null) { startSide = d.getSide(); startLine = (d.getStart()) + 1; } } if (((startSide) != null) && ((startLine) > 0)) { int line = (startLine) - 1; net.codemirror.lib.CodeMirror cm = getCmFromSide(startSide); if ((cm.lineAtHeight((height - 20))) < line) { cm.scrollToY(((cm.heightAtLine(line, ""local"")) - (0.5 * height))); } cm.setCursor(net.codemirror.lib.LineCharacter.create(line)); cm.focus(); } else { cmA.setCursor(net.codemirror.lib.LineCharacter.create(0)); cmA.focus(); } if ((com.google.gerrit.client.Gerrit.isSignedIn()) && (prefs.autoReview())) { header.autoReview(); } prefetchNextFile(); }",29c3971df6c8a3f41027312be4ca082ecccbed1f,onShowView(),onShowView(),3,2,"@java.lang.Override public void onShowView() { super.onShowView(); com.google.gwt.user.client.Window.enableScrolling(false); if (prefs.hideTopMenu()) { com.google.gerrit.client.Gerrit.setHeaderVisible(false); } resizeHandler = com.google.gwt.user.client.Window.addResizeHandler(new com.google.gwt.event.logical.shared.ResizeHandler() { @java.lang.Override public void onResize(com.google.gwt.event.logical.shared.ResizeEvent event) { resizeCodeMirror(); } }); final int height = getCodeMirrorHeight(); operation(new java.lang.Runnable() { @java.lang.Override public void run() { cmA.setHeight(height); cmB.setHeight(height); cmA.refresh(); cmB.refresh(); } }); setLineLength(prefs.lineLength()); diffTable.sidePanel.adjustGutters(cmB); if (((startLine) == 0) && ((diff.meta_b()) != null)) { com.google.gerrit.client.diff.DiffChunkInfo d = chunkManager.getFirst(); if (d != null) { startSide = d.getSide(); startLine = (d.getStart()) + 1; } } if (((startSide) != null) && ((startLine) > 0)) { int line = (startLine) - 1; net.codemirror.lib.CodeMirror cm = getCmFromSide(startSide); if ((cm.lineAtHeight((height - 20))) < line) { cm.scrollToY(((cm.heightAtLine(line, ""local"")) - (0.5 * height))); } cm.setCursor(net.codemirror.lib.LineCharacter.create(line)); cm.focus(); } else { cmA.setCursor(net.codemirror.lib.LineCharacter.create(0)); cmA.focus(); } if ((com.google.gerrit.client.Gerrit.isSignedIn()) && (prefs.autoReview())) { header.autoReview(); } prefetchNextFile(); }",ea481b08c9e5419296b455b0a2009e106af145cb,onShowView(),31611,486,458
30302,src_test_java_com_google_gwtorm_jdbc_TestJdbcAccess.java,37.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testUpsertTwoUpdateCountsAreNull() throws com.google.gwtorm.client.OrmException, java.sql.SQLException { stubExecuteBatchNull(com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE); java.sql.PreparedStatement insert = stubExecuteBatchOK(com.google.gwtorm.jdbc.TestJdbcAccess.INSERT, 1, 1); createClassUnderTest().upsert(twoRows); verifyIds(insert, 1, 2); }",782109fd2b2be6ec161582f65ed4d8a9a299405d,,testUpsertTwoUpdateCountsAreNull(),7,18,"@org.junit.Test public void testUpsertTwoUpdateCountsAreNull() throws com.google.gwtorm.server.OrmException, java.sql.SQLException { java.sql.PreparedStatement update = stubStatementWithUpdateCounts(com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE, null); java.sql.PreparedStatement insert = stubStatementWithUpdateCounts(com.google.gwtorm.jdbc.TestJdbcAccess.INSERT, 1, 1); createClassUnderTest().upsert(twoRows); com.google.gwtorm.jdbc.TestJdbcAccess.assertUsedBatchingOnly(update); com.google.gwtorm.jdbc.TestJdbcAccess.assertUsedBatchingOnly(insert); com.google.gwtorm.jdbc.TestJdbcAccess.assertExpectedIdsUsed(insert, 1, 2); }",5cd561747e06eebd6e66246f651d778fd84599e4,testUpsertTwoUpdateCountsAreNull(),157422,105,174
161470,src_test_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGeneratorTest.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void doesNotPublishWhenNoCodeChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }",3125fc1c77d06285403d771703c705058caf24e7,,doesNotPublishWhenNoCodeChange(),4,17,"@org.junit.Test public void doesNotPublishWhenNoCodeChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockPatchSet); mockPatchSet.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }",37db1928d609efe6e192f7c3f7a102cfeb1ff1b9,doesNotPublishWhenNoCodeChange(),56075,180,182
46081,gerrit-war_src_main_java_com_google_gerrit_httpd_WebAppInitializer.java,11.0,private com.google.inject.Injector createSysInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(new com.google.gerrit.server.git.WorkQueue.Module()); modules.add(new com.google.gerrit.common.ChangeHookRunner.Module()); modules.add(new com.google.gerrit.server.git.ReceiveCommitsExecutorModule()); modules.add(new com.google.gerrit.server.patch.IntraLineWorkerPool.Module()); modules.add(cfgInjector.getInstance(com.google.gerrit.server.config.GerritGlobalModule.class)); modules.add(new com.google.gerrit.server.cache.h2.DefaultCacheFactory.Module()); modules.add(new com.google.gerrit.server.mail.SmtpEmailSender.Module()); modules.add(new com.google.gerrit.server.mail.SignedTokenEmailTokenVerifier.Module()); modules.add(new com.google.gerrit.server.plugins.PluginModule()); modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.httpd.HttpCanonicalWebUrlProvider.class; } }); modules.add(com.google.gerrit.sshd.SshKeyCacheImpl.module()); modules.add(new com.google.gerrit.server.config.MasterNodeStartup()); modules.add(new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.httpd.GerritUiOptions.class).toInstance(new com.google.gerrit.httpd.GerritUiOptions(false)); } }); return cfgInjector.createChildInjector(modules); },7ea08c49b93dc259b9611bee5f65b0286d10f9ea,private com.google.inject.Injector createSysInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(new com.google.gerrit.server.git.WorkQueue.Module()); modules.add(new com.google.gerrit.common.ChangeHookRunner.Module()); modules.add(new com.google.gerrit.server.git.ReceiveCommitsExecutorModule()); modules.add(new com.google.gerrit.server.patch.IntraLineWorkerPool.Module()); modules.add(cfgInjector.getInstance(com.google.gerrit.server.config.GerritGlobalModule.class)); modules.add(new com.google.gerrit.server.cache.h2.DefaultCacheFactory.Module()); modules.add(new com.google.gerrit.server.mail.SmtpEmailSender.Module()); modules.add(new com.google.gerrit.server.mail.SignedTokenEmailTokenVerifier.Module()); modules.add(new com.google.gerrit.server.plugins.PluginModule()); modules.add(new com.google.gerrit.server.index.Module()); modules.add(com.google.gerrit.lucene.LuceneChangeIndex.module()); modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.httpd.HttpCanonicalWebUrlProvider.class; } }); modules.add(com.google.gerrit.sshd.SshKeyCacheImpl.module()); modules.add(new com.google.gerrit.server.config.MasterNodeStartup()); modules.add(new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.httpd.GerritUiOptions.class).toInstance(new com.google.gerrit.httpd.GerritUiOptions(false)); } }); return cfgInjector.createChildInjector(modules); },29435bd2c21a7166cb701222d01dd0b7e4054202,createSysInjector(),createSysInjector(),6,11,private com.google.inject.Injector createSysInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(new com.google.gerrit.server.git.WorkQueue.Module()); modules.add(new com.google.gerrit.common.ChangeHookRunner.Module()); modules.add(new com.google.gerrit.server.git.ReceiveCommitsExecutorModule()); modules.add(new com.google.gerrit.server.patch.IntraLineWorkerPool.Module()); modules.add(cfgInjector.getInstance(com.google.gerrit.server.config.GerritGlobalModule.class)); modules.add(new com.google.gerrit.server.cache.h2.DefaultCacheFactory.Module()); modules.add(new com.google.gerrit.server.mail.SmtpEmailSender.Module()); modules.add(new com.google.gerrit.server.mail.SignedTokenEmailTokenVerifier.Module()); modules.add(new com.google.gerrit.server.plugins.PluginModule()); if (com.google.gerrit.lucene.LuceneIndexModule.isEnabled(cfgInjector)) { modules.add(new com.google.gerrit.lucene.LuceneIndexModule()); } else { modules.add(new com.google.gerrit.server.index.NoIndexModule()); } modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.httpd.HttpCanonicalWebUrlProvider.class; } }); modules.add(com.google.gerrit.sshd.SshKeyCacheImpl.module()); modules.add(new com.google.gerrit.server.config.MasterNodeStartup()); modules.add(new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.httpd.GerritUiOptions.class).toInstance(new com.google.gerrit.httpd.GerritUiOptions(false)); } }); return cfgInjector.createChildInjector(modules); },92bd64c574a499818d3dab562cb8b901dad0ebc0,createSysInjector(),159440,476,502
47944,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectInfoScreen.java,1.0,"@java.lang.Override protected void onLoad() { super.onLoad(); Util.PROJECT_SVC.projectDetail(getProjectKey(), new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.ProjectDetail>(this) { public void preDisplay(final com.google.gerrit.common.data.ProjectDetail result) { enableForm(result.canModifyAgreements, result.canModifyDescription, result.canModifyMergeType, result.canModifyState, result.canModifyMaxObjectSizeLimit); saveProject.setVisible(((((result.canModifyAgreements) || (result.canModifyDescription)) || (result.canModifyMergeType)) || (result.canModifyState))); display(result); } }); savedPanel = INFO; }",5be8823ff2187788f53097e94b13508a49d210bd,"@java.lang.Override protected void onLoad() { super.onLoad(); com.google.gerrit.client.rpc.CallbackGroup cbg = new com.google.gerrit.client.rpc.CallbackGroup(); com.google.gerrit.client.access.AccessMap.get(getProjectKey(), cbg.add(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.access.ProjectAccessInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.access.ProjectAccessInfo result) { isOwner = result.isOwner(); enableForm(); saveProject.setVisible(isOwner); } })); com.google.gerrit.client.projects.ProjectApi.getParent(getProjectKey(), cbg.add(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.reviewdb.client.Project.NameKey>() { @java.lang.Override public void onSuccess(com.google.gerrit.reviewdb.client.Project.NameKey result) { parent = result; } })); com.google.gerrit.client.projects.ProjectApi.getConfig(getProjectKey(), cbg.add(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.projects.ConfigInfo>(this) { @java.lang.Override public void preDisplay(com.google.gerrit.client.projects.ConfigInfo result) { display(result); } })); cbg.done(); savedPanel = INFO; }",6d3c1e3c91b671d8cd95788d853e86192c03f70e,onLoad(),onLoad(),4,1,"@java.lang.Override protected void onLoad() { super.onLoad(); com.google.gerrit.reviewdb.client.Project.NameKey project = getProjectKey(); com.google.gerrit.client.rpc.CallbackGroup cbg = new com.google.gerrit.client.rpc.CallbackGroup(); com.google.gerrit.client.access.AccessMap.get(project, cbg.add(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.access.ProjectAccessInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.access.ProjectAccessInfo result) { isOwner = result.isOwner(); enableForm(); saveProject.setVisible(isOwner); } })); com.google.gerrit.client.projects.ProjectApi.getParent(project, cbg.add(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.reviewdb.client.Project.NameKey>() { @java.lang.Override public void onSuccess(com.google.gerrit.reviewdb.client.Project.NameKey result) { parent = result; } })); com.google.gerrit.client.projects.ProjectApi.getConfig(project, cbg.addFinal(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.projects.ConfigInfo>(this) { @java.lang.Override public void preDisplay(com.google.gerrit.client.projects.ConfigInfo result) { display(result); } })); savedPanel = INFO; }",b446e218331ce81b38250e9b7ff29a050c7118d2,onLoad(),24445,353,369
98615,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeInserter.java,21.0,"@java.lang.Override public com.google.gerrit.reviewdb.client.Change createChange(com.google.gerrit.server.git.BatchUpdate.Context ctx) { change = new com.google.gerrit.reviewdb.client.Change(com.google.gerrit.server.change.ChangeInserter.getChangeKey(commit), changeId, ctx.getAccountId(), new com.google.gerrit.reviewdb.client.Branch.NameKey(ctx.getProject(), refName), ctx.getWhen()); change.setStatus(com.google.common.base.MoreObjects.firstNonNull(status, Change.Status.NEW)); change.setTopic(topic); change.setPrivate(isPrivate); return change; }",53d7366c93ee4149f3857ad9898d87284728d6eb,"@java.lang.Override public com.google.gerrit.reviewdb.client.Change createChange(com.google.gerrit.server.git.BatchUpdate.Context ctx) { change = new com.google.gerrit.reviewdb.client.Change(com.google.gerrit.server.change.ChangeInserter.getChangeKey(commit), changeId, ctx.getAccountId(), new com.google.gerrit.reviewdb.client.Branch.NameKey(ctx.getProject(), refName), ctx.getWhen()); change.setStatus(com.google.common.base.MoreObjects.firstNonNull(status, Change.Status.NEW)); change.setTopic(topic); change.setPrivate(isPrivate); change.setWip(wip); return change; }",330dcb404109abd7b3c5900336e4ff97137e8050,createChange(com.google.gerrit.server.git.BatchUpdate.Context),createChange(com.google.gerrit.server.git.BatchUpdate.Context),43,21,"@java.lang.Override public com.google.gerrit.reviewdb.client.Change createChange(com.google.gerrit.server.update.Context ctx) throws java.io.IOException { change = new com.google.gerrit.reviewdb.client.Change(com.google.gerrit.server.change.ChangeInserter.getChangeKey(ctx.getRevWalk(), commitId), changeId, ctx.getAccountId(), new com.google.gerrit.reviewdb.client.Branch.NameKey(ctx.getProject(), refName), ctx.getWhen()); change.setStatus(com.google.common.base.MoreObjects.firstNonNull(status, Change.Status.NEW)); change.setTopic(topic); change.setPrivate(isPrivate); change.setWorkInProgress(workInProgress); return change; }",992c444afefe387f2e784689f2f6eee88ba201f4,createChange(com.google.gerrit.server.update.Context),158693,172,183
161551,src_test_java_com_cisco_gerrit_plugins_slack_message_CommentAddedMessageGeneratorTest.java,4.0,private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() throws java.lang.Exception { return getConfig(true); },14f72dc17061c82065711ef00008633e91b0eed6,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded, boolean ignoreWipPrivate) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean(""enabled"", false)).thenReturn(true); when(mockPluginConfig.getString(""webhookurl"", """")).thenReturn(""https://webook/""); when(mockPluginConfig.getString(""channel"", ""general"")).thenReturn(""testchannel""); when(mockPluginConfig.getString(""username"", ""gerrit"")).thenReturn(""testuser""); when(mockPluginConfig.getString(""ignore"", """")).thenReturn(""^WIP.*""); when(mockPluginConfig.getBoolean(""publish-on-comment-added"", true)).thenReturn(publishOnCommentAdded); when(mockPluginConfig.getBoolean(""ignore-wip-private"", true)).thenReturn(ignoreWipPrivate); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); }",9bef4f72f634c6b11f52d80ca0c46f7f5c7d35ad,getConfig(),"getConfig(boolean,boolean)",7,2,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded, boolean ignoreWorkInProgressPatchSet, boolean ignorePrivatePatchSet) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean(""enabled"", false)).thenReturn(true); when(mockPluginConfig.getString(""webhookurl"", """")).thenReturn(""https://webook/""); when(mockPluginConfig.getString(""channel"", ""general"")).thenReturn(""testchannel""); when(mockPluginConfig.getString(""username"", ""gerrit"")).thenReturn(""testuser""); when(mockPluginConfig.getString(""ignore"", """")).thenReturn(""^WIP.*""); when(mockPluginConfig.getBoolean(""publish-on-comment-added"", true)).thenReturn(publishOnCommentAdded); when(mockPluginConfig.getBoolean(""ignore-wip-patch-set"", true)).thenReturn(ignoreWorkInProgressPatchSet); when(mockPluginConfig.getBoolean(""ignore-private-patch-set"", true)).thenReturn(ignorePrivatePatchSet); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); }",fe38c993d170e0e334566ead2efcfcb08d0f6e5b,"getConfig(boolean,boolean,boolean)",200939,323,359
69681,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_AccountGroupInfoScreen.java,10.0,"private void initUUID() { final com.google.gwt.user.client.ui.VerticalPanel groupUUIDPanel = new com.google.gwt.user.client.ui.VerticalPanel(); groupUUIDPanel.setStyleName(Gerrit.RESOURCES.css().groupUUIDPanel()); groupUUIDPanel.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingGroupUUID())); groupUUIDLabel = new com.google.gwtexpui.clippy.client.CopyableLabel(""""); groupUUIDPanel.add(groupUUIDLabel); add(groupUUIDPanel); }",92493ed9c000716ef731c1498099cf66d40e96b2,"private void initUUID() { final com.google.gwt.user.client.ui.VerticalPanel groupUUIDPanel = new com.google.gwt.user.client.ui.VerticalPanel(); groupUUIDPanel.setStyleName(Gerrit.RESOURCES.css().groupUUIDPanel()); groupUUIDPanel.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingGroupUUID())); groupUUIDLabel = new com.google.gwtexpui.user.client.CopyableLabel(""""); groupUUIDPanel.add(groupUUIDLabel); add(groupUUIDPanel); }",c5d76c8697043fc81c6586270b4b6f0ace3f7e8d,initUUID(),initUUID(),8,10,"private void initUUID() { final com.google.gwt.user.client.ui.VerticalPanel groupUUIDPanel = new com.google.gwt.user.client.ui.VerticalPanel(); groupUUIDPanel.setStyleName(Gerrit.RESOURCES.css().groupUUIDPanel()); groupUUIDPanel.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingGroupUUID())); groupUUIDLabel = new com.google.gwtexpui.clippy.client.CopyableLabel(""""); groupUUIDPanel.add(groupUUIDLabel); add(groupUUIDPanel); }",92493ed9c000716ef731c1498099cf66d40e96b2,initUUID(),155374,127,128
86538,gerrit-server_src_test_java_com_google_gerrit_server_notedb_ChangeNotesTest.java,53.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void historicalAssigneesChangeNotes() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.setAssignee(otherUserId); update.commit(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); update = newUpdate(c, changeOwner); update.setAssignee(changeOwner.getAccountId()); update.commit(); update = newUpdate(c, changeOwner); update.setAssignee(otherUserId); update.commit(); update = newUpdate(c, changeOwner); update.deleteAssignee(); update.commit(); notes = newNotes(c); assertThat(notes.getHistoricalAssignees()).hasSize(2); }",68a0952ca5b9efd58d6174da7b64682955f52179,,historicalAssigneesChangeNotes(),6,40,"@org.junit.Test public void pastAssigneesChangeNotes() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.setAssignee(com.google.common.base.Optional.fromNullable(otherUserId)); update.commit(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); update = newUpdate(c, changeOwner); update.setAssignee(com.google.common.base.Optional.fromNullable(changeOwner.getAccountId())); update.commit(); update = newUpdate(c, changeOwner); update.setAssignee(com.google.common.base.Optional.fromNullable(otherUserId)); update.commit(); update = newUpdate(c, changeOwner); update.setAssignee(com.google.common.base.Optional.absent()); update.commit(); notes = newNotes(c); assertThat(notes.getPastAssignees()).hasSize(2); }",77e1b8586b7a888acb5b46640febfb2fd028b7e9,pastAssigneesChangeNotes(),117573,189,240
158131,java_com_googlesource_gerrit_plugins_supermanifest_SuperManifestRefUpdatedListener.java,1.0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource resource, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); update(resource.getProjectState().getProject().getName(), resource.getRef(), false); return com.google.gerrit.extensions.restapi.Response.none(); }",924915d60104b9800b8395dbdd1c9f6e1d2c4ab9,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource resource, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.log.info(""manual trigger for %s:%s by %d. Config: %s"", resource.getBranchKey().getParentKey().get(), resource.getBranchKey().get(), identifiedUser.get().getAccountId().get(), configurationToString()); update(resource.getProjectState().getProject().getName(), resource.getRef(), false); return com.google.gerrit.extensions.restapi.Response.none(); }",e9fe8e4d4a5d05ba011a64354c099abf6d927e73,"apply(com.google.gerrit.server.project.BranchResource,com.google.gerrit.extensions.api.projects.BranchInput)","apply(com.google.gerrit.server.project.BranchResource,com.google.gerrit.extensions.api.projects.BranchInput)",3,1,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource resource, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); info(""manual trigger for %s:%s by %d. Config: %s"", resource.getBranchKey().getParentKey().get(), resource.getBranchKey().get(), identifiedUser.get().getAccountId().get(), configurationToString()); update(resource.getProjectState().getProject().getName(), resource.getRef(), false); return com.google.gerrit.extensions.restapi.Response.none(); }",7adf23d99a354e5b3cead3163d370c26e7f52b15,"apply(com.google.gerrit.server.project.BranchResource,com.google.gerrit.extensions.api.projects.BranchInput)",103450,246,225
77542,gerrit-server_src_main_java_com_google_gerrit_server_project_ProjectState.java,26.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.util.Collection<com.google.gerrit.common.data.SubscribeSection> getInheritedSubscribeSections(com.google.gerrit.reviewdb.client.Branch.NameKey branch) { java.util.Collection<com.google.gerrit.common.data.SubscribeSection> ret = new java.util.ArrayList<>(); for (com.google.gerrit.server.project.ProjectState s : tree()) { ret.addAll(s.getConfig().getSubscribeSections(branch)); } return ret; },d3d07df08d1aa2e249e9cb9dbf739e9a4290c0bb,,getInheritedSubscribeSections(com.google.gerrit.reviewdb.client.Branch$NameKey),12,24,public java.util.Collection<com.google.gerrit.common.data.SubscribeSection> getSubscribeSections(com.google.gerrit.reviewdb.client.Branch.NameKey branch) { java.util.Collection<com.google.gerrit.common.data.SubscribeSection> ret = new java.util.ArrayList<>(); for (com.google.gerrit.server.project.ProjectState s : tree()) { ret.addAll(s.getConfig().getSubscribeSections(branch)); } return ret; },807a3bf4fcf392c89e029aac59d21d921edee10f,getSubscribeSections(com.google.gerrit.reviewdb.client.Branch$NameKey),76817,116,115
111551,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountManager.java,7.0,"public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, java.io.IOException { who = realm.authenticate(who); try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.externalids.ExternalId id = externalIds.get(who.getExternalIdKey()); if (id == null) { return create(db, who); } com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.accountId()).getAccount(); if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException(""Authentication error, account inactive""); } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.accountId(), who.getExternalIdKey(), false); } } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.server.account.AccountException(""Authentication error"", e); } }",fe17b426d3868c656b748bf3f3c97b502e2e06b3,"public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, java.io.IOException { com.google.gerrit.server.IdentifiedUser user; who = realm.authenticate(who); try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.externalids.ExternalId id = externalIds.get(who.getExternalIdKey()); if (id == null) { return create(db, who); } com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.accountId()).getAccount(); if (supportAutomaticAccountActivityUpdate.get()) { user = genericUserFactory.create(act.getId()); if ((who.isActive()) && (!(act.isActive()))) { try { setInactiveFlag.activate(user); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.server.account.AccountException(""Unable to activate account."", e); } } else if ((!(who.isActive())) && (act.isActive())) { try { setInactiveFlag.deactivate(user); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw new com.google.gerrit.server.account.AccountException(""Unable to deactivate account."", e); } } } act = byIdCache.get(id.accountId()).getAccount(); if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException(""Authentication error, account inactive""); } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.accountId(), who.getExternalIdKey(), false); } } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.server.account.AccountException(""Authentication error"", e); } }",d9f0491fbd9fd4f0a0de246bad63409493f68663,authenticate(com.google.gerrit.server.account.AuthRequest),authenticate(com.google.gerrit.server.account.AuthRequest),20,7,"public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, java.io.IOException { who = realm.authenticate(who); try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.externalids.ExternalId id = externalIds.get(who.getExternalIdKey()); if (id == null) { return create(db, who); } com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.accountId()).getAccount(); if ((autoUpdateAccountActiveStatus) && (who.authProvidesAccountActiveStatus())) { if ((who.isActive()) && (!(act.isActive()))) { try { setInactiveFlag.activate(act.getId()); act = byIdCache.get(id.accountId()).getAccount(); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.server.account.AccountException((""Unable to activate account "" + (act.getId())), e); } } else if ((!(who.isActive())) && (act.isActive())) { try { setInactiveFlag.deactivate(act.getId()); act = byIdCache.get(id.accountId()).getAccount(); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw new com.google.gerrit.server.account.AccountException((""Unable to deactivate account "" + (act.getId())), e); } } } if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException(""Authentication error, account inactive""); } update(who, id); return new com.google.gerrit.server.account.AuthResult(id.accountId(), who.getExternalIdKey(), false); } } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.server.account.AccountException(""Authentication error"", e); } }",5fea4cad8658e198d37ce8dc84d7b3bbdf8846dc,authenticate(com.google.gerrit.server.account.AuthRequest),120199,476,490
86871,gerrit-elasticsearch_src_test_java_com_google_gerrit_elasticsearch_ElasticTestUtils.java,,,,"static void configure(org.eclipse.jgit.lib.Config config, java.lang.String port) { config.setEnum(""index"", null, ""type"", IndexType.ELASTICSEARCH); config.setString(""index"", null, ""protocol"", ""http""); config.setString(""index"", null, ""hostname"", ""localhost""); config.setString(""index"", null, ""port"", port); config.setString(""index"", null, ""name"", ""gerrit""); config.setBoolean(""index"", ""elasticsearch"", ""test"", true); }",5ea6b1e03fcd6ffa4f7ea9bf43561f42f4d93e38,,"configure(org.eclipse.jgit.lib.Config,java.lang.String)",15,0,"static void configure(org.eclipse.jgit.lib.Config config, java.lang.String port) { config.setEnum(""index"", null, ""type"", IndexType.ELASTICSEARCH); config.setString(""index"", null, ""protocol"", ""http""); config.setString(""index"", null, ""hostname"", ""localhost""); config.setString(""index"", null, ""port"", port); config.setBoolean(""index"", ""elasticsearch"", ""test"", true); }",d310b48c3d37f6b647b8da964c5fe186c56cda8c,"configure(org.eclipse.jgit.lib.Config,java.lang.String)",141957,117,102
76813,gerrit-server_src_main_java_com_google_gerrit_server_access_ListAccess.java,1.0,"@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.server.access.ListAccess.ProjectAccessInfo> apply(com.google.gerrit.extensions.restapi.TopLevelResource resource) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.server.access.ListAccess.ProjectAccessInfo> access = com.google.common.collect.Maps.newTreeMap(); for (java.lang.String p : projects) { com.google.gerrit.reviewdb.client.Project.NameKey projectName = new com.google.gerrit.reviewdb.client.Project.NameKey(p); try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName)) { com.google.gerrit.server.project.ProjectControl pc = open(projectName); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); if (config.updateGroupNames(groupBackend)) { md.setMessage(""Update group names\n""); config.commit(md); projectCache.evict(config.getProject()); pc = open(projectName); } else if (((config.getRevision()) != null) && (!(config.getRevision().equals(pc.getProjectState().getConfig().getRevision())))) { projectCache.evict(config.getProject()); pc = open(projectName); } access.put(p, new com.google.gerrit.server.access.ListAccess.ProjectAccessInfo(pc, config)); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(p); } } return access; }",7904df12f65ec7fafdc38f083908cd2364b09eeb,"@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.api.access.ProjectAccessInfo> apply(com.google.gerrit.extensions.restapi.TopLevelResource resource) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.api.access.ProjectAccessInfo> access = com.google.common.collect.Maps.newTreeMap(); for (java.lang.String p : projects) { com.google.gerrit.reviewdb.client.Project.NameKey projectName = new com.google.gerrit.reviewdb.client.Project.NameKey(p); try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName)) { com.google.gerrit.server.project.ProjectControl pc = open(projectName); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); if (config.updateGroupNames(groupBackend)) { md.setMessage(""Update group names\n""); config.commit(md); projectCache.evict(config.getProject()); pc = open(projectName); } else if (((config.getRevision()) != null) && (!(config.getRevision().equals(pc.getProjectState().getConfig().getRevision())))) { projectCache.evict(config.getProject()); pc = open(projectName); } com.google.gerrit.server.project.GetAccess ga = new com.google.gerrit.server.project.GetAccess(groupControlFactory, allProjectsName, projectJson); access.put(p, ga.apply(new com.google.gerrit.server.project.ProjectResource(pc))); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(p); } } return access; }",ff4169d7153041c1e6a6991cd879a3ef1e1c0129,apply(com.google.gerrit.extensions.restapi.TopLevelResource),apply(com.google.gerrit.extensions.restapi.TopLevelResource),11,0,"@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.api.access.ProjectAccessInfo> apply(com.google.gerrit.extensions.restapi.TopLevelResource resource) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.api.access.ProjectAccessInfo> access = com.google.common.collect.Maps.newTreeMap(); for (java.lang.String p : projects) { com.google.gerrit.reviewdb.client.Project.NameKey projectName = new com.google.gerrit.reviewdb.client.Project.NameKey(p); access.put(p, getAccess.apply(projectName)); } return access; }",512ac78102faf186b99807ee272a592c03c95d2b,apply(com.google.gerrit.extensions.restapi.TopLevelResource),71627,510,208
113410,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotesParser.java,49.0,"private com.google.gerrit.server.notedb.ChangeNotesState buildState() { return com.google.gerrit.server.notedb.ChangeNotesState.create(tip.copy(), id, new com.google.gerrit.reviewdb.client.Change.Key(changeId), createdOn, lastUpdatedOn, ownerId, branch, buildCurrentPatchSetId(), subject, topic, originalSubject, submissionId, ((assignee) != null ? assignee.orElse(null) : null), status, com.google.common.collect.Sets.newLinkedHashSet(com.google.common.collect.Lists.reverse(pastAssignees)), hashtags, patchSets, buildApprovals(), com.google.gerrit.server.ReviewerSet.fromTable(com.google.common.collect.Tables.transpose(reviewers)), com.google.gerrit.server.ReviewerByEmailSet.fromTable(com.google.common.collect.Tables.transpose(reviewersByEmail)), pendingReviewers, pendingReviewersByEmail, allPastReviewers, buildReviewerUpdates(), submitRecords, buildAllMessages(), buildMessagesByPatchSet(), comments, readOnlyUntil, isPrivate, workInProgress, hasReviewStarted); }",e73e858a0c9138751f0220246409a9990a7fd7f5,"private com.google.gerrit.server.notedb.ChangeNotesState buildState() { return com.google.gerrit.server.notedb.ChangeNotesState.create(tip.copy(), id, new com.google.gerrit.reviewdb.client.Change.Key(changeId), createdOn, lastUpdatedOn, ownerId, branch, buildCurrentPatchSetId(), subject, topic, originalSubject, submissionId, ((assignee) != null ? assignee.orElse(null) : null), status, com.google.common.collect.Sets.newLinkedHashSet(com.google.common.collect.Lists.reverse(pastAssignees)), hashtags, patchSets, buildApprovals(), com.google.gerrit.server.ReviewerSet.fromTable(com.google.common.collect.Tables.transpose(reviewers)), com.google.gerrit.server.ReviewerByEmailSet.fromTable(com.google.common.collect.Tables.transpose(reviewersByEmail)), pendingReviewers, pendingReviewersByEmail, allPastReviewers, buildReviewerUpdates(), submitRecords, buildAllMessages(), buildMessagesByPatchSet(), comments, readOnlyUntil, isPrivate, workInProgress, hasReviewStarted, ((revertOf) != null ? new com.google.gerrit.reviewdb.client.Change.Id(revertOf) : null)); }",c8d040952b2436c6e724043bbf49ed2432348284,buildState(),buildState(),3,49,"private com.google.gerrit.server.notedb.ChangeNotesState buildState() { return com.google.gerrit.server.notedb.ChangeNotesState.create(tip.copy(), id, new com.google.gerrit.reviewdb.client.Change.Key(changeId), createdOn, lastUpdatedOn, ownerId, branch, buildCurrentPatchSetId(), subject, topic, originalSubject, submissionId, ((assignee) != null ? assignee.orElse(null) : null), status, com.google.common.collect.Sets.newLinkedHashSet(com.google.common.collect.Lists.reverse(pastAssignees)), hashtags, patchSets, buildApprovals(), com.google.gerrit.server.ReviewerSet.fromTable(com.google.common.collect.Tables.transpose(reviewers)), com.google.gerrit.server.ReviewerByEmailSet.fromTable(com.google.common.collect.Tables.transpose(reviewersByEmail)), pendingReviewers, pendingReviewersByEmail, allPastReviewers, buildReviewerUpdates(), submitRecords, buildAllMessages(), buildMessagesByPatchSet(), comments, readOnlyUntil, isPrivate, workInProgress, hasReviewStarted, revertOf); }",77d40e4bb95f85862f18e1a1469f8fa727d98ca4,buildState(),165257,311,279
52825,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeUpdate.java,,,,"public com.google.gerrit.server.notedb.ChangeUpdate load(com.google.gerrit.reviewdb.client.Change change) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return load(change, com.google.gerrit.server.util.TimeUtil.nowTs()); }",ecbdc29d3f050963f74c2b0060c1da96bf2ca0aa,,load(com.google.gerrit.reviewdb.client.Change),13,5,"public com.google.gerrit.server.notedb.ChangeUpdate create(com.google.gerrit.reviewdb.client.Change change) { return create(change, com.google.gerrit.server.util.TimeUtil.nowTs()); }",12a56f0d726b7b070020da56a46cea049a002bef,create(com.google.gerrit.reviewdb.client.Change),194695,92,58
15353,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_PatchScriptSettingsPanel.java,10.0,"@com.google.gwt.uibinder.client.UiHandler(""update"") void onUpdate(com.google.gwt.event.dom.client.ClickEvent event) { update(); }",04b30ec05fc9ea09e9ac8eec3fef9ee89533f8fd,"@com.google.gwt.uibinder.client.UiHandler(""update"") void onUpdate(com.google.gwt.event.dom.client.ClickEvent event) { update(); if (com.google.gerrit.client.Gerrit.isSignedIn()) { persistDiffPreferences(); } }",77eecbcac28c5b4f63c3258cb062d34488198fd3,onUpdate(com.google.gwt.event.dom.client.ClickEvent),onUpdate(com.google.gwt.event.dom.client.ClickEvent),4,11,"@com.google.gwt.uibinder.client.UiHandler(""update"") void onUpdate(com.google.gwt.event.dom.client.ClickEvent event) { update(); }",04b30ec05fc9ea09e9ac8eec3fef9ee89533f8fd,onUpdate(com.google.gwt.event.dom.client.ClickEvent),108660,65,40
70891,gerrit-gpg_src_main_java_com_google_gerrit_gpg_server_PostGpgKeys.java,4.0,"private static java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> toJson(java.util.Collection<org.bouncycastle.openpgp.PGPPublicKeyRing> keys, java.util.Set<com.google.gerrit.gpg.Fingerprint> deleted) throws java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> infos = com.google.common.collect.Maps.newHashMapWithExpectedSize(((keys.size()) + (deleted.size()))); for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : keys) { com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing); infos.put(info.id, info); info.id = null; } for (com.google.gerrit.gpg.Fingerprint fp : deleted) { infos.put(com.google.gerrit.gpg.PublicKeyStore.keyIdToString(fp.getId()), new com.google.gerrit.extensions.common.GpgKeyInfo()); } return infos; }",c756fe74c6c20de395ab78d4678faf6184d76e8c,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> toJson(java.util.Collection<org.bouncycastle.openpgp.PGPPublicKeyRing> keys, java.util.Set<com.google.gerrit.gpg.Fingerprint> deleted, com.google.gerrit.gpg.PublicKeyStore store) throws java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> infos = com.google.common.collect.Maps.newHashMapWithExpectedSize(((keys.size()) + (deleted.size()))); for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : keys) { com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing, checker, store); infos.put(info.id, info); info.id = null; } for (com.google.gerrit.gpg.Fingerprint fp : deleted) { infos.put(com.google.gerrit.gpg.PublicKeyStore.keyIdToString(fp.getId()), new com.google.gerrit.extensions.common.GpgKeyInfo()); } return infos; }",e25f9d58ef7b50210003f74df10c16d7f97bb047,"toJson(java.util.Collection,java.util.Set)","toJson(java.util.Collection,java.util.Set,com.google.gerrit.gpg.PublicKeyStore)",10,5,"private static java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> toJson(java.util.Collection<org.bouncycastle.openpgp.PGPPublicKeyRing> keys, java.util.Set<com.google.gerrit.gpg.Fingerprint> deleted, com.google.gerrit.gpg.PublicKeyStore store) throws java.io.IOException { com.google.gerrit.gpg.PublicKeyChecker checker = new com.google.gerrit.gpg.PublicKeyChecker(); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> infos = com.google.common.collect.Maps.newHashMapWithExpectedSize(((keys.size()) + (deleted.size()))); for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : keys) { com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing, checker, store); infos.put(info.id, info); info.id = null; } for (com.google.gerrit.gpg.Fingerprint fp : deleted) { infos.put(com.google.gerrit.gpg.PublicKeyStore.keyIdToString(fp.getId()), new com.google.gerrit.extensions.common.GpgKeyInfo()); } return infos; }",598a3d571f5d5dec1b8fded5cb05a534bc0c9481,"toJson(java.util.Collection,java.util.Set,com.google.gerrit.gpg.PublicKeyStore)",110205,300,329
55013,github-oauth_src_main_java_com_googlesource_gerrit_plugins_github_oauth_OAuthGitFilter.java,,,,"private java.lang.String getAuthenticateUsernameFromGitRequestUsingOAuthToken(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { final java.lang.String httpBasicAuth = getHttpBasicAuthenticationHeader(req); if (httpBasicAuth == null) { return """"; } if (isInvalidHttpAuthenticationHeader(httpBasicAuth)) { rsp.sendError(com.googlesource.gerrit.plugins.github.oauth.SC_UNAUTHORIZED); return null; } java.lang.String oauthToken = org.apache.commons.lang.StringUtils.substringBefore(httpBasicAuth, "":""); java.lang.String oauthKeyword = org.apache.commons.lang.StringUtils.substringAfter(httpBasicAuth, "":""); if ((com.google.common.base.Strings.isNullOrEmpty(oauthToken)) || (com.google.common.base.Strings.isNullOrEmpty(oauthKeyword))) { rsp.sendError(com.googlesource.gerrit.plugins.github.oauth.SC_UNAUTHORIZED); return null; } if (!(oauthKeyword.equalsIgnoreCase(com.googlesource.gerrit.plugins.github.oauth.OAuthGitFilter.GITHUB_X_OAUTH_BASIC))) { return """"; } boolean loginSuccessful = false; java.lang.String oauthLogin = null; try { oauthLogin = oauthCache.getLoginByAccessToken(new com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.AccessToken(oauthToken)); loginSuccessful = !(com.google.common.base.Strings.isNullOrEmpty(oauthLogin)); } catch (java.util.concurrent.ExecutionException e) { com.googlesource.gerrit.plugins.github.oauth.OAuthGitFilter.log.warn((""Login failed for OAuth token "" + oauthToken), e); loginSuccessful = false; } if (!loginSuccessful) { rsp.sendError(com.googlesource.gerrit.plugins.github.oauth.SC_FORBIDDEN); return null; } try { java.lang.String httpPassword = getUserHttpPassword(oauthLogin, oauthToken); } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.github.oauth.OAuthGitFilter.log.error((""Internal error whilst trying to access password for user "" + oauthLogin)); } return oauthLogin; }",5663e0857ab7017dd4fca294f348e4020d39efa3,,"getAuthenticateUsernameFromGitRequestUsingOAuthToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",5,0,"private com.googlesource.gerrit.plugins.github.oauth.OAuthCookie getAuthenticationCookieFromGitRequestUsingOAuthToken(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { final java.lang.String httpBasicAuth = getHttpBasicAuthenticationHeader(req); if (httpBasicAuth == null) { return OAuthCookie.ANONYMOUS; } if (isInvalidHttpAuthenticationHeader(httpBasicAuth)) { rsp.sendError(com.googlesource.gerrit.plugins.github.oauth.SC_UNAUTHORIZED); return null; } java.lang.String oauthToken = org.apache.commons.lang.StringUtils.substringBefore(httpBasicAuth, "":""); java.lang.String oauthKeyword = org.apache.commons.lang.StringUtils.substringAfter(httpBasicAuth, "":""); if ((com.google.common.base.Strings.isNullOrEmpty(oauthToken)) || (com.google.common.base.Strings.isNullOrEmpty(oauthKeyword))) { rsp.sendError(com.googlesource.gerrit.plugins.github.oauth.SC_UNAUTHORIZED); return null; } if (!(oauthKeyword.equalsIgnoreCase(com.googlesource.gerrit.plugins.github.oauth.OAuthGitFilter.GITHUB_X_OAUTH_BASIC))) { return OAuthCookie.ANONYMOUS; } boolean loginSuccessful = false; java.lang.String oauthLogin = null; try { oauthLogin = oauthCache.getLoginByAccessToken(new com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.AccessToken(oauthToken)); loginSuccessful = !(com.google.common.base.Strings.isNullOrEmpty(oauthLogin)); } catch (java.util.concurrent.ExecutionException e) { com.googlesource.gerrit.plugins.github.oauth.OAuthGitFilter.log.warn((""Login failed for OAuth token "" + oauthToken), e); loginSuccessful = false; } if (!loginSuccessful) { rsp.sendError(com.googlesource.gerrit.plugins.github.oauth.SC_FORBIDDEN); return null; } return cookieProvider.getFromUser(oauthLogin, """", """", new java.util.TreeSet<com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope>()); }",94613e69793369025c852ac3a1e5429aa240f0d8,"getAuthenticationCookieFromGitRequestUsingOAuthToken(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",183309,509,495
170190,javatests_com_google_gerrit_acceptance_edit_ChangeEditIT.java,75.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void editCannotBeCreatedOnMergedChange() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(changeId).current().submit(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format(""change %s is MERGED"", change._number)); createArbitraryEditFor(changeId); }",a209b227f85fe919264073cc97540965604661c0,,editCannotBeCreatedOnMergedChange(),2,37,"@org.junit.Test public void editCannotBeCreatedOnMergedChange() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(changeId).current().submit(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format(""change %s is merged"", change._number)); createArbitraryEditFor(changeId); }",a2df7dac52b7b97aba4d4c4ff37e4b271f305dc2,editCannotBeCreatedOnMergedChange(),24493,158,156
73033,gerrit-sshd_src_main_java_com_google_gerrit_sshd_SshDaemon.java,20.0,private void initCompression(boolean enableCompression) { java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.Compression>> compressionFactories = com.google.common.collect.Lists.newArrayList(); compressionFactories.add(new org.apache.sshd.common.compression.CompressionNone.Factory()); if (enableCompression) { compressionFactories.add(new org.apache.sshd.common.compression.CompressionZlib.Factory()); } setCompressionFactories(compressionFactories); },02068dc10ecb35b30054c1bb0defc055301b0675,private void initCompression(boolean enableCompression) { java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.compression.Compression>> compressionFactories = com.google.common.collect.Lists.newArrayList(); compressionFactories.add(new org.apache.sshd.common.compression.CompressionNone.Factory()); if (enableCompression) { compressionFactories.add(new org.apache.sshd.common.compression.CompressionZlib.Factory()); } setCompressionFactories(compressionFactories); },a864b65c10e205ae06d166b79842a1a41ce5f03c,initCompression(boolean),initCompression(boolean),6,17,private void initCompression(boolean enableCompression) { java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.compression.Compression>> compressionFactories = com.google.common.collect.Lists.newArrayList(); compressionFactories.add(BuiltinCompressions.none); if (enableCompression) { compressionFactories.add(BuiltinCompressions.zlib); } setCompressionFactories(compressionFactories); },012be5affb713e713e09797ac629258a76084df1,initCompression(boolean),42137,117,95
94912,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsAuthUserProvider.java,0.0,com.google.gerrit.server.CurrentUser getUser(java.lang.String auth) { if (((!(com.google.common.base.Strings.isNullOrEmpty(auth))) && (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX))) && (authCfg.isGitBasicAuth())) { return user.get(); } return anonymous.get(); },6902c570f0a5206828843ed9ca0cec77be32b4b0,"com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if ((auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) && (authCfg.isGitBasicAuth())) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { com.google.common.base.Optional<java.lang.String> user = sshAuth.verifyToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { com.google.gerrit.server.account.AccountState acc = accounts.getByUsername(user.get()); if (acc != null) { return userFactory.create(acc); } } } } return anonymous.get(); }",6eb0988c075c62075d3230ee9858a6221357df1b,getUser(java.lang.String),"getUser(java.lang.String,java.lang.String,java.lang.String)",12,0,"com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if ((auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) && (authCfg.isGitBasicAuth())) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { com.google.common.base.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { com.google.gerrit.server.account.AccountState acc = accounts.getByUsername(user.get()); if (acc != null) { return userFactory.create(acc); } } } } return anonymous.get(); }",1c1698d88d95e517d74770151b871cc6b68a6073,"getUser(java.lang.String,java.lang.String,java.lang.String)",10050,249,251
65674,src_main_java_com_googlesource_gerrit_plugins_deleteproject_DeleteLog.java,,,,"@java.lang.Override public void start() { if (!(com.googlesource.gerrit.plugins.deleteproject.DeleteLog.started)) { org.apache.log4j.Logger deleteLogger = org.apache.log4j.LogManager.getLogger(com.googlesource.gerrit.plugins.deleteproject.DeleteLog.DELETE_LOG_NAME); deleteLogger.removeAllAppenders(); deleteLogger.addAppender(systemLog.createAsyncAppender(deleteLogger.getName(), new com.googlesource.gerrit.plugins.deleteproject.DeleteLogLayout())); deleteLogger.setAdditivity(false); com.googlesource.gerrit.plugins.deleteproject.DeleteLog.started = true; } }",fa26fd810c6e5ed3b1689eb05c122bd0f35b33ed,,start(),8,1,"@java.lang.Override public void start() { if (!(started)) { org.apache.log4j.Logger deleteLogger = org.apache.log4j.LogManager.getLogger(com.googlesource.gerrit.plugins.deleteproject.DeleteLog.DELETE_LOG_NAME); deleteLogger.removeAllAppenders(); deleteLogger.addAppender(systemLog.createAsyncAppender(deleteLogger.getName(), new com.googlesource.gerrit.plugins.deleteproject.DeleteLogLayout())); deleteLogger.setAdditivity(false); started = true; } }",92d9e729f2925176bf1a9ae97da0a3b6293c82c9,start(),95720,152,120
76055,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotes.java,23.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.server.notedb.LoadHandle rebuildAndOpen(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { com.google.gerrit.reviewdb.client.Change.Id id = getChangeId(); java.util.List<org.eclipse.jgit.transport.ReceiveCommand> cmds; try { cmds = args.rebuilder.get().rebuild(args.db.get(), id); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return super.openHandle(repo); } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException(e); } java.lang.String refName = com.google.gerrit.server.notedb.ChangeNoteUtil.changeRefName(id); for (org.eclipse.jgit.transport.ReceiveCommand cmd : cmds) { if (cmd.getRefName().equals(refName)) { org.eclipse.jgit.lib.ObjectId newId = cmd.getNewId(); if (org.eclipse.jgit.lib.ObjectId.zeroId().equals(newId)) { newId = null; } return com.google.gerrit.server.notedb.LoadHandle.create(new org.eclipse.jgit.revwalk.RevWalk(repo), newId); } } throw new java.lang.IllegalStateException((((((""expected rebuild("" + id) + "") to contain ref update for "") + refName) + ""; got: "") + cmds)); }",91c71f70a953a306576e3e4535b73cbab211fbb1,,rebuildAndOpen(org.eclipse.jgit.lib.Repository),10,11,"private com.google.gerrit.server.notedb.LoadHandle rebuildAndOpen(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { try { com.google.gerrit.server.notedb.NoteDbChangeState newState = args.rebuilder.get().rebuild(args.db.get(), getChangeId()); if (newState == null) { return super.openHandle(repo); } repo.scanForRepoChanges(); return com.google.gerrit.server.notedb.LoadHandle.create(new org.eclipse.jgit.revwalk.RevWalk(repo), newState.getChangeMetaId()); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return super.openHandle(repo); } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException(e); } }",ca0f3fd3feb5510387bb4255a1163fdb4528571c,rebuildAndOpen(org.eclipse.jgit.lib.Repository),138225,366,216
73739,src_main_java_com_googlesource_gerrit_plugins_its_base_util_PropertyExtractor.java,3.0,"private java.util.Map<java.lang.String, java.util.Set<java.lang.String>> extractFrom(com.google.gerrit.server.events.ChangeAbandonedEvent event, java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> common) { common.add(propertyFactory.create(""event-type"", event.type)); common.addAll(propertyAttributeExtractor.extractFrom(event.change)); common.addAll(propertyAttributeExtractor.extractFrom(event.abandoner, ""abandoner"")); common.addAll(propertyAttributeExtractor.extractFrom(event.patchSet)); common.add(propertyFactory.create(""reason"", event.reason)); com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId = newPatchSetId(event.change.number, event.patchSet.number); return issueExtractor.getIssueIds(event.change.project, event.patchSet.revision, patchSetId); }",306933947f1e7b3edac1ce9a4407c70377461ba6,"private java.util.Map<java.lang.String, java.util.Set<java.lang.String>> extractFrom(DraftPublishedEvent event, java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> common) { common.addAll(propertyAttributeExtractor.extractFrom(event.uploader.get(), ""uploader"")); return extractFrom(((com.google.gerrit.server.events.PatchSetEvent) (event)), common); }",6aab65f8163e2cb1139ad075dddceb0cf8badb98,"extractFrom(com.google.gerrit.server.events.ChangeAbandonedEvent,java.util.Set)","extractFrom(com.google.gerrit.server.events.DraftPublishedEvent,java.util.Set)",2,1,"private java.util.Map<java.lang.String, java.util.Set<java.lang.String>> extractFrom(RefUpdatedEvent event, java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> common) { common.add(propertyFactory.create(""event-type"", event.type)); common.addAll(propertyAttributeExtractor.extractFrom(event.submitter.get(), ""submitter"")); common.addAll(propertyAttributeExtractor.extractFrom(event.refUpdate.get())); return issueExtractor.getIssueIds(event.refUpdate.get().project, event.refUpdate.get().newRev); }",a0b2816d2a6ad8b8f781c7a6fa906eb01604aa0d,"extractFrom(com.google.gerrit.server.events.RefUpdatedEvent,java.util.Set)",141571,108,145
51200,src_test_java_com_googlesource_gerrit_plugins_replication_ReplicationStateTest.java,,,,@org.junit.Test public void shouldFireOneReplicationEventWhenNothingToReplicate() { resetToStrict(pushResultProcessingMock); pushResultProcessingMock.onAllRefsReplicatedToAllNodes(0); replay(pushResultProcessingMock); replicationState.markAllPushTasksScheduled(); verify(pushResultProcessingMock); },961336386dfe43a6f5e22c74e1554200379abeeb,,shouldFireOneReplicationEventWhenNothingToReplicate(),6,6,@org.junit.Test public void shouldFireOneReplicationEventWhenNothingToReplicate() { resetToDefault(pushResultProcessingMock); pushResultProcessingMock.onAllRefsReplicatedToAllNodes(0); replay(pushResultProcessingMock); replicationState.markAllPushTasksScheduled(); verify(pushResultProcessingMock); },fdf436d44623c2516bba3cad4d59edd66436dfa0,shouldFireOneReplicationEventWhenNothingToReplicate(),84383,66,66
76485,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_Header.java,12.0,"void setupPrevNextFiles() { com.google.gerrit.client.info.FileInfo prevInfo = null; com.google.gerrit.client.info.FileInfo nextInfo = null; for (int i = (currIndex) - 1; i >= 0; i--) { com.google.gerrit.client.info.FileInfo curr = files.get(i); if ((prefs.skipDeleted()) && (curr.status().equals(""D""))) { continue; } else { prevInfo = curr; break; } } for (int i = (currIndex) + 1; i < (files.length()); i++) { com.google.gerrit.client.info.FileInfo curr = files.get(i); if ((prefs.skipDeleted()) && (curr.status().equals(""D""))) { continue; } else { nextInfo = curr; break; } } com.google.gwtexpui.globalkey.client.KeyCommand p = setupNav(prev, '[', PatchUtil.C.previousFileHelp(), prevInfo); com.google.gwtexpui.globalkey.client.KeyCommand n = setupNav(next, ']', PatchUtil.C.nextFileHelp(), nextInfo); if ((p != null) && (n != null)) { keys.pair(p, n); } nextPath = (nextInfo != null) ? nextInfo.path() : null; }",efea9e445e054b80b23d03bbe483d039aa19b56b,"void setupPrevNextFiles() { com.google.gerrit.client.info.FileInfo prevInfo = null; com.google.gerrit.client.info.FileInfo nextInfo = null; for (int i = (currIndex) - 1; i >= 0; i--) { com.google.gerrit.client.info.FileInfo curr = files.get(i); if (((prefs.skipDeleted()) && (curr.status().equals(""D""))) || ((prefs.skipUncommented()) && (!(hasComments)))) { continue; } else { prevInfo = curr; break; } } for (int i = (currIndex) + 1; i < (files.length()); i++) { com.google.gerrit.client.info.FileInfo curr = files.get(i); if (((prefs.skipDeleted()) && (curr.status().equals(""D""))) || ((prefs.skipUncommented()) && (!(hasComments)))) { continue; } else { nextInfo = curr; break; } } com.google.gwtexpui.globalkey.client.KeyCommand p = setupNav(prev, '[', PatchUtil.C.previousFileHelp(), prevInfo); com.google.gwtexpui.globalkey.client.KeyCommand n = setupNav(next, ']', PatchUtil.C.nextFileHelp(), nextInfo); if ((p != null) && (n != null)) { keys.pair(p, n); } nextPath = (nextInfo != null) ? nextInfo.path() : null; }",3ee534a96cf48d8d00f2dd72cd7690eccd2b1fe0,setupPrevNextFiles(),setupPrevNextFiles(),10,7,"void setupPrevNextFiles(com.google.gerrit.client.diff.CommentsCollections comments) { com.google.gerrit.client.info.FileInfo prevInfo = null; com.google.gerrit.client.info.FileInfo nextInfo = null; int currIndex = findCurrentFileIndex(files); for (int i = currIndex - 1; i >= 0; i--) { com.google.gerrit.client.info.FileInfo curr = files.get(i); if (shouldSkipFile(curr, comments)) { continue; } else { prevInfo = curr; break; } } for (int i = currIndex + 1; i < (files.length()); i++) { com.google.gerrit.client.info.FileInfo curr = files.get(i); if (shouldSkipFile(curr, comments)) { continue; } else { nextInfo = curr; break; } } com.google.gwtexpui.globalkey.client.KeyCommand p = setupNav(prev, '[', PatchUtil.C.previousFileHelp(), prevInfo); com.google.gwtexpui.globalkey.client.KeyCommand n = setupNav(next, ']', PatchUtil.C.nextFileHelp(), nextInfo); if ((p != null) && (n != null)) { keys.pair(p, n); } nextPath = (nextInfo != null) ? nextInfo.path() : null; }",51149ed0113e640066941044969ecfe17da5017e,setupPrevNextFiles(com.google.gerrit.client.diff.CommentsCollections),47102,330,308
72537,gerrit-httpd_src_main_java_com_google_gerrit_httpd_raw_RebuildBowerComponentsFilter.java,,,,"@java.lang.Override public synchronized void doFilter(javax.servlet.ServletRequest sreq, javax.servlet.ServletResponse sres, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { javax.servlet.http.HttpServletResponse res = ((javax.servlet.http.HttpServletResponse) (sres)); try { com.google.gerrit.httpd.raw.BuckBuildFilter.build(root, gen, com.google.gerrit.httpd.raw.RebuildBowerComponentsFilter.TARGET); } catch (com.google.gerrit.httpd.raw.BuckBuildFilter.BuildFailureException e) { com.google.gerrit.httpd.raw.BuckBuildFilter.displayFailure(com.google.gerrit.httpd.raw.RebuildBowerComponentsFilter.TARGET, e.why, res); return; } if (!(java.nio.file.Files.exists(zip))) { java.lang.String msg = ""`buck build` did not produce "" + (zip.toAbsolutePath()); com.google.gerrit.httpd.raw.BuckBuildFilter.displayFailure(com.google.gerrit.httpd.raw.RebuildBowerComponentsFilter.TARGET, msg.getBytes(java.nio.charset.StandardCharsets.UTF_8), res); } com.google.gerrit.launcher.GerritLauncher.reloadZipFileSystem(zip); chain.doFilter(sreq, sres); }",9e553f0bc0ab03de5e6d456227054630eb29f1e3,,"doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",5,0,"@java.lang.Override public synchronized void doFilter(javax.servlet.ServletRequest sreq, javax.servlet.ServletResponse sres, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { javax.servlet.http.HttpServletResponse res = ((javax.servlet.http.HttpServletResponse) (sres)); try { com.google.gerrit.httpd.raw.BuckUtils.build(root, gen, com.google.gerrit.httpd.raw.RebuildBowerComponentsFilter.TARGET); } catch (com.google.gerrit.httpd.raw.BuckUtils.BuildFailureException e) { com.google.gerrit.httpd.raw.BuckUtils.displayFailure(com.google.gerrit.httpd.raw.RebuildBowerComponentsFilter.TARGET, e.why, res); return; } if (!(java.nio.file.Files.exists(zip))) { java.lang.String msg = ""`buck build` did not produce "" + (zip.toAbsolutePath()); com.google.gerrit.httpd.raw.BuckUtils.displayFailure(com.google.gerrit.httpd.raw.RebuildBowerComponentsFilter.TARGET, msg.getBytes(java.nio.charset.StandardCharsets.UTF_8), res); } com.google.gerrit.launcher.GerritLauncher.reloadZipFileSystem(zip); chain.doFilter(sreq, sres); }",e6a73b1d6fb81e9796b3337616a8e11f2400ffa0,"doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",6114,322,318
88095,gerrit-server_src_main_java_com_google_gerrit_server_notedb_AbstractChangeUpdate.java,9.0,public Account.Id getNullableAccountId() { return accountId; },1088ddc2ed4560780255e657c0f779bed5171f1f,public Account.Id getNullableAccountId() { return effectiveAccountId; },24b2ad2769cb8133def7fab5ca671357183176c7,getNullableAccountId(),getNullableAccountId(),11,8,public Account.Id getNullableAccountId() { return accountId; },1088ddc2ed4560780255e657c0f779bed5171f1f,getNullableAccountId(),81262,14,13
114490,src_main_java_com_googlesource_gerrit_plugins_its_base_util_IssueExtractor.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String getPreviousRevision(com.google.gerrit.reviewdb.client.PatchSet.Id psId) throws com.google.gerrit.extensions.restapi.RestApiException { ChangeInfo info = gApi.changes().id(psId.getParentKey().get()).get(java.util.EnumSet.of(ListChangesOption.ALL_REVISIONS)); for (java.util.Map.Entry<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> e : info.revisions.entrySet()) { if ((e.getValue()._number) == ((psId.get()) - 1)) { return e.getKey(); } } return null; }",97cd2f01039ad0c896eac344d930744b65eb570a,,getPreviousRevision(com.google.gerrit.reviewdb.client.PatchSet$Id),5,3,"@java.lang.Override public java.lang.String getRevision(com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId) { try { com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().id(patchSetId.getParentKey().get()).get(java.util.EnumSet.of(ListChangesOption.ALL_REVISIONS)); for (java.util.Map.Entry<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> e : info.revisions.entrySet()) { if ((e.getValue()._number) == (patchSetId.get())) { return e.getKey(); } } return null; } catch (com.google.gerrit.extensions.restapi.RestApiException e) { } return null; }",16a87f54b4c828bc5a064f9f92ddc92c9726f506,getRevision(com.google.gerrit.reviewdb.client.PatchSet$Id),150673,159,186
74792,src_main_java_com_googlesource_gerrit_plugins_avatars_gravatar_GravatarAvatarProvider.java,0.0,"@java.lang.Override public java.lang.String getChangeAvatarUrl(com.google.gerrit.server.IdentifiedUser forUser) { return ""http://www.gravatar.com""; }",8f5182d71d5636e6be3f28651890e824639b7ecd,@java.lang.Override public java.lang.String getChangeAvatarUrl(com.google.gerrit.server.IdentifiedUser forUser) { return changeUrl; },993df1377c29835101efa5f00fb7f73f4df12307,getChangeAvatarUrl(com.google.gerrit.server.IdentifiedUser),getChangeAvatarUrl(com.google.gerrit.server.IdentifiedUser),4,0,@java.lang.Override public java.lang.String getChangeAvatarUrl(com.google.gerrit.server.IdentifiedUser forUser) { return changeAvatarUrl; },e1bee702b573f9519d683887ff7a84926501eb0b,getChangeAvatarUrl(com.google.gerrit.server.IdentifiedUser),175025,38,39
62372,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_NavLinks.java,0.0,"void display(int patchIndex, com.google.gerrit.client.patches.PatchScreen.Type type, com.google.gerrit.client.changes.PatchTable fileList) { if (fileList != null) { setupNav(com.google.gerrit.client.patches.NavLinks.Nav.PREV, fileList.getPreviousPatchLink(patchIndex, type)); setupNav(com.google.gerrit.client.patches.NavLinks.Nav.NEXT, fileList.getNextPatchLink(patchIndex, type)); } else { setupNav(com.google.gerrit.client.patches.NavLinks.Nav.PREV, null); setupNav(com.google.gerrit.client.patches.NavLinks.Nav.NEXT, null); } }",7b1877634b789a2b8f88c4459950238e6a0a5686,"void display(int patchIndex, com.google.gerrit.client.patches.PatchScreen.Type type, com.google.gerrit.client.changes.PatchTable fileList, java.util.List<com.google.gerrit.client.ui.InlineHyperlink> links) { if (fileList != null) { setupNav(com.google.gerrit.client.patches.NavLinks.Nav.PREV, fileList.getPreviousPatchLink(patchIndex, type)); setupNav(com.google.gerrit.client.patches.NavLinks.Nav.NEXT, fileList.getNextPatchLink(patchIndex, type)); } else { setupNav(com.google.gerrit.client.patches.NavLinks.Nav.PREV, null); setupNav(com.google.gerrit.client.patches.NavLinks.Nav.NEXT, null); } if (links != null) { com.google.gwt.user.client.ui.FlowPanel linkPanel = new com.google.gwt.user.client.ui.FlowPanel(); for (com.google.gerrit.client.ui.InlineHyperlink link : links) { linkPanel.add(link); } table.setWidget(0, 2, linkPanel); } }",a4e70d59b5ce1775f770e0e27a7b1b7a82e87ba6,"display(int,com.google.gerrit.client.patches.PatchScreen$Type,com.google.gerrit.client.changes.PatchTable)","display(int,com.google.gerrit.client.patches.PatchScreen$Type,com.google.gerrit.client.changes.PatchTable,java.util.List)",7,1,"void display(int patchIndex, com.google.gerrit.client.patches.PatchScreen.Type type, com.google.gerrit.client.changes.PatchTable fileList, java.util.List<com.google.gerrit.client.ui.InlineHyperlink> links) { if (fileList != null) { setupNav(com.google.gerrit.client.patches.NavLinks.Nav.PREV, fileList.getPreviousPatchLink(patchIndex, type)); setupNav(com.google.gerrit.client.patches.NavLinks.Nav.NEXT, fileList.getNextPatchLink(patchIndex, type)); } else { setupNav(com.google.gerrit.client.patches.NavLinks.Nav.PREV, null); setupNav(com.google.gerrit.client.patches.NavLinks.Nav.NEXT, null); } com.google.gwt.user.client.ui.FlowPanel linkPanel = new com.google.gwt.user.client.ui.FlowPanel(); for (com.google.gerrit.client.ui.InlineHyperlink link : links) { linkPanel.add(link); } table.setWidget(0, 2, linkPanel); }",429eeffbd25c2384dd0cea4a8bc88a585dc4c151,"display(int,com.google.gerrit.client.patches.PatchScreen$Type,com.google.gerrit.client.changes.PatchTable,java.util.List)",145969,280,271
119392,gerrit-httpd_src_main_java_com_google_gerrit_httpd_CanonicalWebUrl.java,1.0,static java.lang.String computeFromRequest(javax.servlet.http.HttpServletRequest req) { java.lang.StringBuffer url = req.getRequestURL(); url.setLength(((url.length()) - (req.getServletPath().length()))); if ((url.charAt(((url.length()) - 1))) != '/') { url.append('/'); } return url.toString(); },fb36e9ea49bb15377cc7d4194d6149dfcf911ceb,"static java.lang.String computeFromRequest(javax.servlet.http.HttpServletRequest req) { java.lang.StringBuffer url = req.getRequestURL(); try { url = new java.lang.StringBuffer(java.net.URLDecoder.decode(url.toString(), ""UTF-8"")); url.setLength(((url.length()) - (req.getServletPath().length()))); if ((url.charAt(((url.length()) - 1))) != '/') { url.append('/'); } return url.toString(); } catch (java.io.UnsupportedEncodingException e) { throw new java.lang.IllegalStateException((""Unsupported encoding for request URL "" + url), e); } }",0ed75aebda6c96888d52232e293ae5ff34f165f9,computeFromRequest(javax.servlet.http.HttpServletRequest),computeFromRequest(javax.servlet.http.HttpServletRequest),3,1,"static java.lang.String computeFromRequest(javax.servlet.http.HttpServletRequest req) { java.lang.StringBuffer url = req.getRequestURL(); try { url = new java.lang.StringBuffer(java.net.URLDecoder.decode(url.toString(), java.nio.charset.StandardCharsets.UTF_8.name())); url.setLength(((url.length()) - (req.getServletPath().length()))); if ((url.charAt(((url.length()) - 1))) != '/') { url.append('/'); } return url.toString(); } catch (java.io.UnsupportedEncodingException e) { throw new java.lang.IllegalStateException((""Unsupported encoding for request URL "" + url), e); } }",6c75b1a142c89a733f12e01c63cf9bbe2bc60f5f,computeFromRequest(javax.servlet.http.HttpServletRequest),51207,138,148
67067,gerrit-server_src_main_java_com_google_gerrit_server_api_groups_GroupApiImpl.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void deleteMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete group members"", e); } }",9741c961667ffb5466ae1964f641b27d2c90079a,,deleteMembers(java.lang.String[]),2,9,"@java.lang.Override public void removeMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot remove group members"", e); } }",517e4c549099fbabe59a65d0767f2cf517ec24aa,removeMembers(java.lang.String[]),124977,107,107
45860,gerrit-server_src_main_java_com_google_gerrit_server_account_PutName.java,,,,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutName.Input input) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { if (!(realm.allowsEdit(FieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""The realm doesn't allow editing names""); } if (input == null) { input = new com.google.gerrit.server.account.PutName.Input(); } com.google.gerrit.reviewdb.client.Account a = rsrc.getUser().getAccount(); a.setFullName(input.name); dbProvider.get().accounts().update(java.util.Collections.singleton(a)); byIdCache.evict(a.getId()); return com.google.common.base.Strings.isNullOrEmpty(a.getFullName()) ? com.google.gerrit.extensions.restapi.Response.none() : a.getFullName(); }",02df85cf9ee266d2ed2cc23908d0ee4c9332c0d3,,"apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.server.account.PutName$Input)",7,0,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutName.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser s = ((com.google.gerrit.server.IdentifiedUser) (self.get())); if (((s.getAccountId().get()) != (rsrc.getUser().getAccountId().get())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to change name""); } if (!(realm.allowsEdit(FieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""The realm doesn't allow editing names""); } if (input == null) { input = new com.google.gerrit.server.account.PutName.Input(); } com.google.gerrit.reviewdb.client.Account a = dbProvider.get().accounts().get(rsrc.getUser().getAccountId()); if (a == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""No such account: "" + (rsrc.getUser().getAccountId()))); } a.setFullName(input.name); dbProvider.get().accounts().update(java.util.Collections.singleton(a)); byIdCache.evict(a.getId()); return com.google.common.base.Strings.isNullOrEmpty(a.getFullName()) ? com.google.gerrit.extensions.restapi.Response.none() : a.getFullName(); }",8856e473b2bd711180ddff21c71a0980cf904e9b,"apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.server.account.PutName$Input)",3529,252,425
49274,src_main_java_com_googlesource_gerrit_plugins_deleteproject_database_Schema73DatabaseDeleteHandler.java,5.0,@java.lang.Override public void delete(com.google.gerrit.reviewdb.client.Project project) throws java.lang.Exception { java.sql.Connection conn = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection(); conn.setAutoCommit(false); try { atomicDelete(project); conn.commit(); } catch (java.lang.Exception e) { conn.rollback(); throw e; } finally { conn.setAutoCommit(true); } },083c5766669b2202fdf6f9a9fa53b97780555fcc,"@java.lang.Override public void delete(com.google.gerrit.reviewdb.client.Project project) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { java.sql.Connection conn = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection(); conn.setAutoCommit(false); try { atomicDelete(project); conn.commit(); } catch (java.sql.SQLException e) { conn.rollback(); throw e; } finally { conn.setAutoCommit(true); } }",c23c0aa42fbfbf0c48306baef892ec78017cfc6e,delete(com.google.gerrit.reviewdb.client.Project),delete(com.google.gerrit.reviewdb.client.Project),4,5,@java.lang.Override public void delete(com.google.gerrit.reviewdb.client.Project project) throws com.google.gwtorm.server.OrmException { java.sql.Connection conn = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection(); try { conn.setAutoCommit(false); try { atomicDelete(project); conn.commit(); } finally { conn.setAutoCommit(true); } } catch (java.sql.SQLException e) { try { conn.rollback(); } catch (java.sql.SQLException ex) { throw new com.google.gwtorm.server.OrmException(ex); } throw new com.google.gwtorm.server.OrmException(e); } },a1a87c0c2c235dcdc4257cb792e70e04cfe5ff46,delete(com.google.gerrit.reviewdb.client.Project),183689,119,161
105099,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeConstants.java,22.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,java.lang.String isWip();,7c56e1dbab9bbea386d1c2fb87f5dd2ec63d6278,,isWip(),2,0,java.lang.String isWorkInProgress();,010b0fd6eb2ef497afd86ce471d7ce2bbd44b39f,isWorkInProgress(),36871,9,9
58862,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_JDBCInitializer.java,1.0,"@java.lang.Override public void initConfig(com.google.gerrit.pgm.init.Section database) { boolean hasUrl = (com.google.common.base.Strings.emptyToNull(database.get(""url""))) != null; database.string(""URL"", ""url"", null); guessDriver(database); database.string(""Driver class name"", ""driver"", null); database.string(""Database username"", ""username"", (hasUrl ? null : com.google.gerrit.pgm.init.InitUtil.username())); database.password(""username"", ""password""); }",88c01eb340dc5fb5a97aa4bfb957185e50e4df36,"@java.lang.Override public void initConfig(com.google.gerrit.pgm.init.util.Section database) { boolean hasUrl = (com.google.common.base.Strings.emptyToNull(database.get(""url""))) != null; database.string(""URL"", ""url"", null); guessDriver(database); database.string(""Driver class name"", ""driver"", null); database.string(""Database username"", ""username"", (hasUrl ? null : com.google.gerrit.pgm.init.InitUtil.username())); database.password(""username"", ""password""); }",3ceeb2305a43868c7db55817167f8e8402ef2b84,initConfig(com.google.gerrit.pgm.init.Section),initConfig(com.google.gerrit.pgm.init.util.Section),3,0,"@java.lang.Override public void initConfig(com.google.gerrit.pgm.init.api.Section database) { boolean hasUrl = (com.google.common.base.Strings.emptyToNull(database.get(""url""))) != null; database.string(""URL"", ""url"", null); guessDriver(database); database.string(""Driver class name"", ""driver"", null); database.string(""Database username"", ""username"", (hasUrl ? null : com.google.gerrit.pgm.init.InitUtil.username())); database.password(""username"", ""password""); }",09a3e734d629a8dd8802ade33f66daa2e582a828,initConfig(com.google.gerrit.pgm.init.api.Section),187217,131,131
30026,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_ListGroups.java,2.0,"private void display() throws com.google.gerrit.sshd.commands.Failure { final java.io.PrintWriter stdout = toPrintWriter(out); try { final com.google.gerrit.server.account.PerformVisibleGroups performVisibleGroups = performVisibleGroupsFactory.create(); performVisibleGroups.setProjects(projects); performVisibleGroups.setOnlyVisibleToAll(visibleToAll); final com.google.gerrit.common.data.GroupList visibleGroups = performVisibleGroups.getVisibleGroups(); for (final GroupDetail groupDetail : visibleGroups.getGroups()) { stdout.print(((groupDetail.group.getName()) + ""\n"")); } } catch (com.google.gwtorm.client.OrmException e) { throw die(e); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw die(e); } finally { stdout.flush(); } }",d304485dbd67dd589aad9fa718a983bbd7f8cee8,"private void display() throws com.google.gerrit.sshd.commands.Failure { final java.io.PrintWriter stdout = toPrintWriter(out); try { final com.google.gerrit.server.account.PerformVisibleGroups performVisibleGroups = performVisibleGroupsFactory.create(); performVisibleGroups.setProjects(projects); performVisibleGroups.setOnlyVisibleToAll(visibleToAll); performVisibleGroups.setGroupType(groupType); final com.google.gerrit.common.data.GroupList visibleGroups = performVisibleGroups.getVisibleGroups(); for (final GroupDetail groupDetail : visibleGroups.getGroups()) { stdout.print(((groupDetail.group.getName()) + ""\n"")); } } catch (com.google.gwtorm.client.OrmException e) { throw die(e); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw die(e); } finally { stdout.flush(); } }",6bd1e6db53a1efc4c6b24df5c487da8b982cf9a7,display(),display(),3,1,"private void display() throws com.google.gerrit.sshd.commands.Failure { final java.io.PrintWriter stdout = toPrintWriter(out); try { final com.google.gerrit.server.account.VisibleGroups visibleGroups = visibleGroupsFactory.create(); visibleGroups.setProjects(projects); visibleGroups.setOnlyVisibleToAll(visibleToAll); visibleGroups.setGroupType(groupType); final com.google.gerrit.common.data.GroupList groupList = visibleGroups.get(); for (final GroupDetail groupDetail : groupList.getGroups()) { stdout.print(((groupDetail.group.getName()) + ""\n"")); } } catch (com.google.gwtorm.client.OrmException e) { throw die(e); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw die(e); } finally { stdout.flush(); } }",ba5db864f87321105467b833c6d1cf1a11908837,display(),121736,208,199
47872,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_ReviewedPanel.java,,,,"private void setReviewedAnchor() { com.google.gwtexpui.safehtml.client.SafeHtmlBuilder text = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder(); text.append(PatchUtil.C.next()); text.append(com.google.gwtexpui.safehtml.client.SafeHtml.asis(Util.C.nextPatchLinkIcon())); com.google.gwt.user.client.ui.Anchor reviewedAnchor = new com.google.gwt.user.client.ui.Anchor(""""); com.google.gwtexpui.safehtml.client.SafeHtml.set(reviewedAnchor, text); }",bceae7fb67dc5969c7b6155bca0da1b030a49437,,setReviewedAnchor(),6,5,boolean isReviewed() { return checkBox.getValue(); },245501d22b46f9e584223678db8d922e214f1cc4,isReviewed(),109278,141,12
22194,gerrit-server_src_main_java_com_google_gerrit_server_schema_Schema_48.java,,,,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.client.OrmException, java.sql.SQLException { final java.util.List<com.google.gerrit.reviewdb.AccountGroup> allGroups = db.accountGroups().all().toList(); for (final com.google.gerrit.reviewdb.AccountGroup group : allGroups) { group.setVisibleToAll(false); } db.accountGroups().update(allGroups); }",7c51f91d5a1be9a07b763c337a105b0291acee65,,"migrateData(com.google.gerrit.reviewdb.ReviewDb,com.google.gerrit.server.schema.UpdateUI)",3,0,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.client.OrmException, java.sql.SQLException { db.approvalCategoryValues().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.ApprovalCategoryValue(new com.google.gerrit.reviewdb.ApprovalCategoryValue.Id(com.google.gerrit.reviewdb.ApprovalCategory.READ, ((short) (3))), ""Upload merges permission""))); java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement(); try { stmt.execute((((""UPDATE ref_rights SET max_value = 3"" + "" WHERE category_id = '"") + (ApprovalCategory.READ.get())) + ""' AND max_value = 2"")); } finally { stmt.close(); } }",6b82689eb6144174565b3493d4b727fb8711b42e,"migrateData(com.google.gerrit.reviewdb.ReviewDb,com.google.gerrit.server.schema.UpdateUI)",46253,137,226
158950,src_test_java_com_googlesource_gerrit_plugins_lfs_LfsAuthTokenTest.java,2.0,@org.junit.Test public void testTokenOnTime() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(1); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier(token); assertThat(verifier.verify()).isTrue(); },d7d558c69e33060cbf693ea7f5d9f8f763c29ecb,"@org.junit.Test public void testTokenOnTime() throws java.lang.Exception { java.time.Instant when = java.time.Instant.now(); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier(token); assertThat(verifier.onTime(when.plusMillis(999))).isTrue(); }",2b33ccb132b28186966a00ab4e16ef1096ac287d,testTokenOnTime(),testTokenOnTime(),8,2,"@org.junit.Test public void testTokenOnTime() throws java.lang.Exception { java.time.Instant when = java.time.Instant.now(); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(when, 1L); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier(token); assertThat(verifier.onTime(when.plusMillis(999))).isTrue(); }",6db2e35cae3992dd9b157e9d321ea6d8f36911fc,testTokenOnTime(),56810,148,150
30872,gerrit-pgm_src_main_java_com_google_gerrit_pgm_Daemon.java,5.0,private com.google.inject.Injector createWebInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(sshInjector.getInstance(com.google.gerrit.httpd.WebModule.class)); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.GitOverHttpModule.class)); modules.add(sshInjector.getInstance(com.google.gerrit.httpd.WebSshGlueModule.class)); modules.add(com.google.gerrit.httpd.CacheBasedWebSession.module()); modules.add(com.google.gerrit.server.contact.HttpContactStoreConnection.module()); if (sshd) { modules.add(sshInjector.getInstance(com.google.inject.Module.class)); } return sysInjector.createChildInjector(modules); },786e8e1a57d8331a6aeede832fc25e8698e64bc5,private com.google.inject.Injector createWebInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.WebModule.class)); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.GitOverHttpModule.class)); modules.add(com.google.gerrit.httpd.CacheBasedWebSession.module()); modules.add(com.google.gerrit.server.contact.HttpContactStoreConnection.module()); if (sshd) { modules.add(sshInjector.getInstance(com.google.gerrit.httpd.WebSshGlueModule.class)); modules.add(sshInjector.getInstance(com.google.inject.Module.class)); } else { modules.add(new com.google.gerrit.server.ssh.NoSshModule()); } return sysInjector.createChildInjector(modules); },43ace6ad1b9d88b6253490a92ba6516ccd9fd87b,createWebInjector(),createWebInjector(),2,5,private com.google.inject.Injector createWebInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(com.google.gerrit.httpd.CacheBasedWebSession.module()); modules.add(com.google.gerrit.server.contact.HttpContactStoreConnection.module()); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.WebModule.class)); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.GitOverHttpModule.class)); if (sshd) { modules.add(sshInjector.getInstance(com.google.gerrit.httpd.WebSshGlueModule.class)); modules.add(new com.google.gerrit.pgm.http.jetty.ProjectQoSFilter.Module()); } else { modules.add(new com.google.gerrit.server.ssh.NoSshModule()); } return sysInjector.createChildInjector(modules); },85df941a2679824df9c9c285756bd6c3d63da075,createWebInjector(),101646,220,227
72584,src_main_java_com_amd_gerrit_plugins_manifestsubscription_ManifestSubscription.java,6.0,"private void loadStoreFromProjectConfig(java.lang.String projectName, com.google.gerrit.server.git.ProjectConfig config) { java.lang.String newStore = config.getPluginConfig(pluginName).getString(com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.KEY_STORE); if (newStore != null) { newStore = newStore.trim(); if (!(newStore.isEmpty())) { java.util.Set<java.lang.String> branches = com.google.common.collect.Sets.newHashSet(config.getPluginConfig(pluginName).getStringList(com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.KEY_BRANCH)); if ((branches.size()) > 0) { enabledManifestRepos.put(projectName, new com.amd.gerrit.plugins.manifestsubscription.PluginProjectConfig(newStore, branches)); stores.add(newStore); } } } }",d107b2e35a15c3cf4ed17c59ad8cc84d24e755ff,"private void loadStoreFromProjectConfig(java.lang.String projectName, com.google.gerrit.server.git.ProjectConfig config) { java.lang.String newStore = config.getPluginConfig(pluginName).getString(com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.KEY_STORE); if (newStore != null) { newStore = newStore.trim(); if (!(newStore.isEmpty())) { java.util.Set<java.lang.String> branches = com.amd.gerrit.plugins.manifestsubscription.Sets.newHashSet(config.getPluginConfig(pluginName).getStringList(com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.KEY_BRANCH)); if ((branches.size()) > 0) { enabledManifestRepos.put(projectName, new com.amd.gerrit.plugins.manifestsubscription.PluginProjectConfig(newStore, branches)); stores.add(newStore); } } } }",3dca77745aa19c6979983207cb64a47f70787676,"loadStoreFromProjectConfig(java.lang.String,com.google.gerrit.server.git.ProjectConfig)","loadStoreFromProjectConfig(java.lang.String,com.google.gerrit.server.git.ProjectConfig)",6,5,"private void loadStoreFromProjectConfig(java.lang.String projectName, com.google.gerrit.server.git.ProjectConfig config) throws java.io.IOException, javax.xml.bind.JAXBException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String newStore = config.getPluginConfig(pluginName).getString(com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.KEY_STORE); if (newStore != null) { newStore = newStore.trim(); if (!(newStore.isEmpty())) { java.util.Set<java.lang.String> branches = com.amd.gerrit.plugins.manifestsubscription.Sets.newHashSet(config.getPluginConfig(pluginName).getStringList(com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.KEY_BRANCH)); if ((branches.size()) > 0) { com.amd.gerrit.plugins.manifestsubscription.PluginProjectConfig ppc = new com.amd.gerrit.plugins.manifestsubscription.PluginProjectConfig(newStore, branches); enabledManifestSource.put(projectName, ppc); com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(projectName); com.amd.gerrit.plugins.manifestsubscription.VersionedManifests versionedManifests; for (java.lang.String branch : branches) { versionedManifests = parseManifests(nameKey, branch); processManifestChange(versionedManifests, projectName, branch); } } } } }",018f7487103483b78fc412bba58ae200cc19ed9f,"loadStoreFromProjectConfig(java.lang.String,com.google.gerrit.server.git.ProjectConfig)",123231,205,347
135830,gerrit-gwtui_src_main_java_com_google_gerrit_client_projects_ConfigInfo.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private native java.lang.String configuredSubmitTypeRaw();,dc8df37f97abef606b68b23315f5699881de3f1e,,configuredSubmitTypeRaw(),9,4,private native final java.lang.String configuredValueRaw();,68702e9b6dd69dac214cc0166b235b04be02514d,configuredValueRaw(),79008,12,12
39475,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_changedetail_EditCommitMessageHandler.java,,,,"@java.lang.Override public com.google.gerrit.common.data.ChangeDetail call() throws com.google.gerrit.common.errors.NoSuchEntityException, com.google.gerrit.server.mail.EmailException, com.google.gerrit.server.patch.PatchSetInfoNotAvailableException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { final com.google.gerrit.reviewdb.client.Change.Id changeId = patchSetId.getParentKey(); final com.google.gerrit.server.project.ChangeControl control = changeControlFactory.validateFor(changeId); if (!(control.canAddPatchSet())) { throw new com.google.gerrit.server.project.NoSuchChangeException(changeId); } com.google.gerrit.server.ChangeUtil.editCommitMessage(patchSetId, currentUser, message, db, hooks, gitManager, patchSetInfoFactory, replication, myIdent); return changeDetailFactory.create(changeId).call(); }",1d22f10a3f26c1e1f5943e513cc73f6c36283cdd,,call(),11,0,"@java.lang.Override public com.google.gerrit.common.data.ChangeDetail call() throws com.google.gerrit.common.errors.NoSuchEntityException, com.google.gerrit.server.mail.EmailException, com.google.gerrit.server.patch.PatchSetInfoNotAvailableException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { final com.google.gerrit.reviewdb.client.Change.Id changeId = patchSetId.getParentKey(); final com.google.gerrit.server.project.ChangeControl control = changeControlFactory.validateFor(changeId); if (!(control.canAddPatchSet())) { throw new com.google.gerrit.server.project.InvalidChangeOperationException((""Not allowed to add new Patch Sets to: "" + (changeId.toString()))); } com.google.gerrit.server.ChangeUtil.editCommitMessage(patchSetId, currentUser, message, db, hooks, gitManager, patchSetInfoFactory, replication, myIdent); return changeDetailFactory.create(changeId).call(); }",e0f5ea79fb40f972a7547c33a597e53733ab50e1,call(),28337,284,301
70261,src_main_java_com_googlesource_gerrit_plugins_importer_AccountUtil.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private com.google.gerrit.server.account.AccountState getByUserName(com.google.gerrit.extensions.common.AccountInfo acc) { com.google.gerrit.server.account.AccountState a = accountCache.getByUsername(acc.username); if (a == null) { a = accountCache.getByUsername(localUser(acc)); } return a; },f94eb446ff16fcffcbcebe78a837d7baf976b6d6,,getByUserName(com.google.gerrit.extensions.common.AccountInfo),5,7,"private void addToImportedUsersGroup(com.google.gerrit.reviewdb.client.Account.Id id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = getImportedUsersGroup(); com.google.gerrit.reviewdb.client.AccountGroupMember member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(id, group.getId())); db.get().accountGroupMembers().insert(java.util.Collections.singleton(member)); }",82a8bb86aa50d2e0815c62bfb6502e9b2508a6d3,addToImportedUsersGroup(com.google.gerrit.reviewdb.client.Account$Id),180526,85,141
152610,java_com_google_gerrit_server_restapi_project_ProjectsCollection.java,5.0,"@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }",3a362391c37b40bd19bc9ce392099795b2b2fb19,"@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }",6bdb18e45ca264197a98239cfad4c054333c7db8,"parse(com.google.gerrit.extensions.restapi.TopLevelResource,com.google.gerrit.extensions.restapi.IdString)","parse(com.google.gerrit.extensions.restapi.TopLevelResource,com.google.gerrit.extensions.restapi.IdString)",3,5,"@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }",1d2b3ea7a1db7141ea84ed01680035a0f069f1f2,"parse(com.google.gerrit.extensions.restapi.TopLevelResource,com.google.gerrit.extensions.restapi.IdString)",192428,166,150
58933,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_edit_ChangeEditIT.java,24.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void deleteEditRest() throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = session.post(urlCreateEdit()); assertEquals(HttpStatus.SC_NO_CONTENT, r.getStatusCode()); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); assertTrue(edit.isPresent()); assertEquals(RefUpdate.Result.FORCED, modifier.modifyFile(edit.get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, org.eclipse.jgit.lib.Constants.encode(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW))); edit = editUtil.byChange(change); assertTrue(edit.isPresent()); session.delete(urlDeleteEdit()); assertEquals(HttpStatus.SC_NO_CONTENT, r.getStatusCode()); edit = editUtil.byChange(change); assertFalse(edit.isPresent()); }",7daf3b1ac3184e376ae0acb8e5d1510535ad8574,,deleteEditRest(),21,0,"@org.junit.Test public void deleteEditRest() throws java.lang.Exception { assertEquals(RefUpdate.Result.NEW, modifier.createEdit(change, ps)); assertEquals(RefUpdate.Result.FORCED, modifier.modifyFile(editUtil.byChange(change).get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW)); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); com.google.gerrit.acceptance.RestResponse r = session.delete(urlEdit()); assertEquals(com.google.gerrit.acceptance.edit.SC_NO_CONTENT, r.getStatusCode()); edit = editUtil.byChange(change); assertFalse(edit.isPresent()); }",80561797331877ae7ddba544ce900e9245e79e43,deleteEditRest(),111033,223,199
52433,gerrit-server_src_main_java_com_google_gerrit_server_group_SystemGroupBackend.java,,,,"@java.lang.Override public java.util.Collection<com.google.gerrit.common.data.GroupReference> suggest(java.lang.String name, com.google.gerrit.server.project.ProjectControl project) { java.util.SortedMap<java.lang.String, com.google.gerrit.common.data.GroupReference> matches = com.google.gerrit.server.group.SystemGroupBackend.names.tailMap(name); if (matches.isEmpty()) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.common.data.GroupReference> r = new java.util.ArrayList(matches.size()); for (com.google.gerrit.common.data.GroupReference g : matches.values()) { if ((java.lang.String.CASE_INSENSITIVE_ORDER.compare(name, g.getName())) <= 0) { r.add(g); } else { break; } } return r; }",0965d00d5294e8e3ed9da2acbebe3e7d212a7027,,"suggest(java.lang.String,com.google.gerrit.server.project.ProjectControl)",4,1,"@java.lang.Override public java.util.Collection<com.google.gerrit.common.data.GroupReference> suggest(java.lang.String name, com.google.gerrit.server.project.ProjectControl project) { java.lang.String nameLC = name.toLowerCase(java.util.Locale.US); java.util.SortedMap<java.lang.String, com.google.gerrit.common.data.GroupReference> matches = com.google.gerrit.server.group.SystemGroupBackend.names.tailMap(nameLC); if (matches.isEmpty()) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.common.data.GroupReference> r = new java.util.ArrayList(matches.size()); for (java.util.Map.Entry<java.lang.String, com.google.gerrit.common.data.GroupReference> e : matches.entrySet()) { if (e.getKey().startsWith(nameLC)) { r.add(e.getValue()); } else { break; } } return r; }",82f38acc777e303a72cebe8b8a8530e89522ea1d,"suggest(java.lang.String,com.google.gerrit.server.project.ProjectControl)",16718,218,242
47322,gerrit-lucene_src_main_java_com_google_gerrit_lucene_SubIndex.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean isCancelled() { return false; },3f5ecd71b7c0e6495d9556889fda28a2a7bbc9d3,,isCancelled(),2,4,@java.lang.Override public void beforeRefresh() throws java.io.IOException { },2f42183dd3c05ad0ef820a2b28d5491c1abec3e7,beforeRefresh(),196271,16,19
58850,gerrit-server_src_main_java_com_google_gerrit_server_change_DeleteDraft.java,0.0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.server.change.CommentInfo> apply(com.google.gerrit.server.change.DraftResource rsrc, com.google.gerrit.server.change.DeleteDraft.Input input) throws com.google.gwtorm.server.OrmException { db.get().patchComments().delete(java.util.Collections.singleton(rsrc.getComment())); return com.google.gerrit.extensions.restapi.Response.none(); }",a04af96a17548858741c973dd0241412bd13f422,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.server.change.CommentInfo> apply(com.google.gerrit.server.change.DraftResource rsrc, com.google.gerrit.server.change.DeleteDraft.Input input) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.notedb.ChangeUpdate update = updateFactory.create(rsrc.getControl()); plcUtil.deleteComments(db.get(), update, java.util.Collections.singleton(rsrc.getComment())); update.commit(); return com.google.gerrit.extensions.restapi.Response.none(); }",955f00ed5b13ee2eab5d368dfcda5cea645c3edf,"apply(com.google.gerrit.server.change.DraftResource,com.google.gerrit.server.change.DeleteDraft$Input)","apply(com.google.gerrit.server.change.DraftResource,com.google.gerrit.server.change.DeleteDraft$Input)",17,0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.server.change.CommentInfo> apply(com.google.gerrit.server.change.DraftResource rsrc, com.google.gerrit.server.change.DeleteDraft.Input input) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.notedb.ChangeUpdate update = updateFactory.create(rsrc.getControl()); com.google.gerrit.reviewdb.client.PatchLineComment c = rsrc.getComment(); com.google.gerrit.server.PatchLineCommentsUtil.setCommentRevId(c, patchListCache, rsrc.getChange(), rsrc.getPatchSet()); plcUtil.deleteComments(db.get(), update, java.util.Collections.singleton(c)); update.commit(); return com.google.gerrit.extensions.restapi.Response.none(); }",343985c40bc4e23a239b978dd66cba3743d60600,"apply(com.google.gerrit.server.change.DraftResource,com.google.gerrit.server.change.DeleteDraft$Input)",167709,164,222
43900,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeInfo.java,27.0,public final native short value();,22b8c08cc2e29d8183f5a19d4f18c43c27e83996,public final native java.lang.Short value();,83ace787db8bbe0cd3bf6036756511ea6ad25636,value(),value(),3,27,public final native short value();,22b8c08cc2e29d8183f5a19d4f18c43c27e83996,value(),116212,10,6
76473,gerrit-server_src_main_java_com_google_gerrit_server_edit_ChangeEditModifier.java,12.0,@java.lang.Override public void apply(org.eclipse.jgit.dircache.DirCacheEntry ent) { if ((ent.getRawMode()) == 0) { ent.setFileMode(FileMode.REGULAR_FILE); } ent.setObjectId(content); },e3a17b88c508356b2e1c5451478b07328c48b0c3,"@java.lang.Override public void apply(org.eclipse.jgit.dircache.DirCacheEntry ent) { if ((ent.getRawMode()) == 0) { ent.setFileMode(FileMode.REGULAR_FILE); } org.eclipse.jgit.lib.FileMode mode = ent.getFileMode(); if ((org.eclipse.jgit.lib.FileMode.GITLINK) != mode) { ent.setObjectId(content); } else { ent.setLength(0); ent.setLastModified(0); try { org.eclipse.jgit.lib.ObjectId id = org.eclipse.jgit.lib.ObjectId.fromString(reader.open(content).getBytes(), 0); ent.setObjectId(id); } catch (org.eclipse.jgit.errors.LargeObjectException e) { e.printStackTrace(); } catch (org.eclipse.jgit.errors.MissingObjectException e) { e.printStackTrace(); } catch (java.io.IOException e) { e.printStackTrace(); } } }",7388546da4a639c8f99db560aea6bfaa142ae494,apply(org.eclipse.jgit.dircache.DirCacheEntry),apply(org.eclipse.jgit.dircache.DirCacheEntry),17,12,"@java.lang.Override public void apply(org.eclipse.jgit.dircache.DirCacheEntry ent) { try { if ((ent.getFileMode()) == (org.eclipse.jgit.lib.FileMode.GITLINK)) { ent.setLength(0); ent.setLastModified(0); ent.setObjectId(org.eclipse.jgit.lib.ObjectId.fromString(com.google.common.io.ByteStreams.toByteArray(content.getInputStream()), 0)); } else { if ((ent.getRawMode()) == 0) { ent.setFileMode(FileMode.REGULAR_FILE); } ent.setObjectId(com.google.gerrit.server.edit.ChangeEditModifier.toBlob(ins, content)); } } catch (java.io.IOException e) { ioe.set(e); } catch (org.eclipse.jgit.errors.InvalidObjectIdException e) { icoe.set(new com.google.gerrit.server.project.InvalidChangeOperationException((""Invalid object id in submodule link: "" + (e.getMessage())))); icoe.get().initCause(e); } }",715f232c26e18ec2042b888861a139eb85869a38,apply(org.eclipse.jgit.dircache.DirCacheEntry),66570,222,250
10296,src_main_java_com_google_gerrit_pgm_Daemon.java,0.0,"public static void main(final java.lang.String[] argv) throws com.google.gwtjsonrpc.server.XsrfException, com.google.gwtorm.client.OrmException, java.net.SocketException { com.google.gerrit.server.ssh.GerritSshDaemon.startSshd(); }",9d8067c996c2a765e3770c650b75c314482562cb,"public static void main(final java.lang.String[] argv) throws com.google.gwtjsonrpc.server.XsrfException, com.google.gwtorm.client.OrmException, java.net.SocketException { boolean slave = false; for (java.lang.String arg : argv) { if (""--slave"".equals(arg)) { slave = true; } } com.google.gerrit.server.ssh.GerritSshDaemon.startSshd(slave); }",955c7cf83974467236c7516377f31ac0f79161b6,main(java.lang.String[]),main(java.lang.String[]),6,0,private com.google.inject.Injector createSshInjector(final com.google.inject.Injector sysInjector) { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(new com.google.gerrit.server.ssh.SshModule()); if (slave) { modules.add(new com.google.gerrit.server.ssh.commands.SlaveCommandModule()); } else { modules.add(new com.google.gerrit.server.ssh.commands.MasterCommandModule()); } return sysInjector.createChildInjector(modules); },e4b616079d1d3babc1d2a09ff7b96c94560ad536,createSshInjector(com.google.inject.Injector),121806,109,135
34560,gerrit-gwtui_src_main_java_com_google_gerrit_client_ui_ProjectListPopup.java,,,,"public void addProjectListPopupOnOpenRowHandler(com.google.gerrit.client.ui.ProjectListPopup.ProjectListPopupOnOpenRowHandler handler) { handlerManager.addHandler(com.google.gerrit.client.ui.ProjectListPopup.ProjectListPopupOnOpenRowEvent.getType(), handler); }",021e308e8f5f616c92896b57d62c159f63601e4d,,addProjectListPopupOnOpenRowHandler(com.google.gerrit.client.ui.ProjectListPopup$ProjectListPopupOnOpenRowHandler),10,6,protected void onMovePointerTo(java.lang.String projectName) { },6c9c0a5ecb292bc6e4cea9f917ddd53f2a478fb7,onMovePointerTo(java.lang.String),141486,69,16
140535,java_com_google_gerrit_server_rules_PrologEnvironment.java,16.0,public com.google.gerrit.server.patch.PatchListCache getPatchListCache() { return patchListCache; },86307d2286e1b88c905ac042177b8c0c1e313006,public com.google.gerrit.server.patchlib.PatchListCache getPatchListCache() { return patchListCache; },3145030d8fe9286bf96990d156a4ee99bb8346d9,getPatchListCache(),getPatchListCache(),11,16,public com.google.gerrit.server.diff.PatchListCache getPatchListCache() { return patchListCache; },24bdf3d224a3e84fd70b393ee8129e7e5b585601,getPatchListCache(),15863,28,27
132331,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeIsVisibleToPredicate.java,0.0,"@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { if (cd.fastIsVisibleTo(user)) { return true; } com.google.gerrit.reviewdb.client.Change change = cd.change(); if (change == null) { return false; } com.google.gerrit.server.notedb.ChangeNotes notes = notesFactory.createFromIndexedChange(change); boolean visible; try { visible = permissionBackend.user(user).indexedChange(cd, notes).database(db).test(ChangePermission.READ); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gwtorm.server.OrmException(""unable to check permissions"", e); } if (visible) { cd.cacheVisibleTo(user); return true; } return false; }",8ed28530cb4278727ff384333ef2eec906234010,"@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { if (cd.fastIsVisibleTo(user)) { return true; } com.google.gerrit.reviewdb.client.Change change = cd.change(); if (change == null) { return false; } com.google.gerrit.server.notedb.ChangeNotes notes = notesFactory.createFromIndexedChange(change); boolean visible; try { visible = permissionBackend.user(user).indexedChange(cd, notes).database(db).test(ChangePermission.READ); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { if ((e.getCause()) instanceof com.google.gerrit.server.project.NoSuchProjectException) { com.google.gerrit.server.query.change.ChangeIsVisibleToPredicate.logger.info(java.lang.String.format(""No such project: %s. Index data might be stale."", cd.project())); return false; } throw new com.google.gwtorm.server.OrmException(""unable to check permissions"", e); } if (visible) { cd.cacheVisibleTo(user); return true; } return false; }",4ece1deec8ec42f9111b85203d1820e38ef124ef,match(com.google.gerrit.server.query.change.ChangeData),match(com.google.gerrit.server.query.change.ChangeData),2,0,"@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { if (cd.fastIsVisibleTo(user)) { return true; } com.google.gerrit.reviewdb.client.Change change = cd.change(); if (change == null) { return false; } com.google.gerrit.server.notedb.ChangeNotes notes = notesFactory.createFromIndexedChange(change); boolean visible; try { visible = permissionBackend.user(user).indexedChange(cd, notes).database(db).test(ChangePermission.READ); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { if ((e.getCause()) instanceof com.google.gerrit.server.project.NoSuchProjectException) { com.google.gerrit.server.query.change.ChangeIsVisibleToPredicate.logger.info(""No such project: {}"", cd.project()); return false; } throw new com.google.gwtorm.server.OrmException(""unable to check permissions"", e); } if (visible) { cd.cacheVisibleTo(user); return true; } return false; }",a85b550cfcb735285e0ca344b8804f5b0a3e5f81,match(com.google.gerrit.server.query.change.ChangeData),91071,287,269
69599,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_Preferences.java,28.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public final java.util.Map<java.lang.String, java.lang.String> urlAliases() { java.util.Map<java.lang.String, java.lang.String> urlAliases = new java.util.HashMap<>(); for (java.lang.String k : com.google.gerrit.client.rpc.Natives.keys(_urlAliases())) { urlAliases.put(k, urlAlias(k)); } return urlAliases; }",089d91d7f119079c46b28eb651bd6b94aece226d,,urlAliases(),24,35,"public final java.util.Map<java.lang.String, java.lang.String> urlAliases() { java.util.Map<java.lang.String, java.lang.String> urlAliases = new java.util.HashMap<>(); for (java.lang.String k : com.google.gerrit.client.rpc.Natives.keys(_urlAliases())) { urlAliases.put(k, urlAliasToken(k)); } return urlAliases; }",576ec1468e958f2f4464b55a6391137485092ada,urlAliases(),195732,101,102
58104,src_test_java_com_google_gwtorm_schema_sql_DialectPostgreSQLTest.java,9.0,"@org.junit.After public void tearDown() { if ((executor) != null) { executor.close(); } executor = null; if ((db) != null) { try { db.close(); } catch (java.sql.SQLException e) { throw new java.lang.RuntimeException(""Cannot close database"", e); } } db = null; }",8135a0e7f22991de0bf29197f0f7042d42116848,"@org.junit.After public void tearDown() { drop(""SEQUENCE address_id""); drop(""SEQUENCE cnt""); drop(""TABLE addresses""); drop(""TABLE foo""); drop(""TABLE people""); if ((executor) != null) { executor.close(); } executor = null; if ((db) != null) { try { db.close(); } catch (java.sql.SQLException e) { throw new java.lang.RuntimeException(""Cannot close database"", e); } } db = null; }",b70958e2a77e0ddf79ad87a27cb637541f2f2116,tearDown(),tearDown(),4,9,"@org.junit.After public void tearDown() { drop(""SEQUENCE address_id""); drop(""SEQUENCE cnt""); drop(""TABLE addresses""); drop(""TABLE foo""); drop(""TABLE bar""); drop(""TABLE people""); if ((executor) != null) { executor.close(); } executor = null; if ((db) != null) { try { db.close(); } catch (java.sql.SQLException e) { throw new java.lang.RuntimeException(""Cannot close database"", e); } } db = null; }",2b865df7a4c4d695b91c2ea5a6ee3dff71f5e8bb,tearDown(),219101,103,108
39270,gerrit-server_src_main_java_com_google_gerrit_server_plugins_JarPlugin.java,,,,@java.lang.Override @javax.annotation.Nullable public com.google.inject.Injector getSshInjector() { return sshInjector; },a0e732498beb9fea776c62664c9ca9b19bfeab6e,,getSshInjector(),5,10,@javax.annotation.Nullable public com.google.inject.Injector getSshInjector() { return sshInjector; },0ab7a4469608c46f6c1c4f75d2d9e751db2e551c,getSshInjector(),74038,30,24
59510,gitiles-servlet_src_test_java_com_google_gitiles_PaginatorTest.java,7.0,"@org.junit.Test public void moreThanOnePage() throws java.lang.Exception { java.util.List<org.eclipse.jgit.revwalk.RevCommit> commits = linearCommits(5); walk.markStart(commits.get(4)); com.google.gitiles.Paginator p = new com.google.gitiles.Paginator(walk, 3, null); assertEquals(com.google.common.collect.ImmutableList.of(commits.get(4), commits.get(3), commits.get(2)), com.google.common.collect.ImmutableList.copyOf(p)); assertNull(p.getPreviousStart()); assertEquals(commits.get(1), p.getNextStart()); }",5323ea50b0bf88abfab67ccfc831aab93696a188,"@org.junit.Test public void moreThanOnePage() throws java.lang.Exception { java.util.List<org.eclipse.jgit.revwalk.RevCommit> commits = linearCommits(5); walk.markStart(commits.get(4)); com.google.gitiles.Paginator p = new com.google.gitiles.Paginator(walk, 3, null, com.google.gitiles.PaginatorFilters.everything()); assertEquals(com.google.common.collect.ImmutableList.of(commits.get(4), commits.get(3), commits.get(2)), com.google.common.collect.ImmutableList.copyOf(p)); assertNull(p.getPreviousStart()); assertEquals(commits.get(1), p.getNextStart()); }",070f70a2d698fd46895cf6c37c10901c340795d0,moreThanOnePage(),moreThanOnePage(),9,6,"@org.junit.Test public void moreThanOnePage() throws java.lang.Exception { java.util.List<org.eclipse.jgit.revwalk.RevCommit> commits = linearCommits(5); walk.markStart(commits.get(4)); com.google.gitiles.Paginator p = new com.google.gitiles.Paginator(walk, 3, null); assertEquals(com.google.common.collect.ImmutableList.of(commits.get(4), commits.get(3), commits.get(2)), com.google.common.collect.ImmutableList.copyOf(p)); assertNull(p.getPreviousStart()); assertEquals(commits.get(1), p.getNextStart()); }",5323ea50b0bf88abfab67ccfc831aab93696a188,moreThanOnePage(),54296,164,150
157552,java_com_google_gerrit_server_account_AccountSshKey.java,8.0,"private java.lang.String getPublicKeyPart(int index, java.lang.String defaultValue) { java.lang.String s = getSshPublicKey(); if ((s != null) && ((s.length()) > 0)) { java.lang.String[] parts = s.split("" ""); if ((parts.length) > index) { return parts[index]; } } return defaultValue; }",d4b73c557b81a8eb07412b91b0060b15827c9a96,"public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id, java.lang.String sshPublicKey, boolean valid) { return new com.google.gerrit.server.account.AutoValue_AccountSshKey.Builder().setId(id).setSshPublicKey(com.google.gerrit.server.account.AccountSshKey.stripOffNewLines(sshPublicKey)).setValid((valid && (id.isValid()))).build(); }",5ec65dea4bb6edadab593603466aae9b676d0b9c,"getPublicKeyPart(int,java.lang.String)","create(com.google.gerrit.server.account.AccountSshKey$Id,java.lang.String,boolean)",5,4,"public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.reviewdb.client.Account.Id accountId, int seq, java.lang.String sshPublicKey, boolean valid) { return new com.google.gerrit.server.account.AutoValue_AccountSshKey.Builder().setAccountId(accountId).setSeq(seq).setSshPublicKey(com.google.gerrit.server.account.AccountSshKey.stripOffNewLines(sshPublicKey)).setValid((valid && (seq > 0))).build(); }",902fb8c83cd1d285093b143a84c7aadabc028a05,"create(com.google.gerrit.reviewdb.client.Account$Id,int,java.lang.String,boolean)",128143,116,126
78433,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNoteCache.java,,,,"static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.server.notedb.ChangeNoteCache.class); cache(com.google.gerrit.server.notedb.ChangeNoteCache.CHANGE_NOTES, com.google.gerrit.server.notedb.ChangeNoteCache.Key.class, com.google.gerrit.server.notedb.ChangeNotesState.class).maximumWeight(1000); } }; }",f0373237b340cda3cc2a1be625c556de4946bfb6,,module(),5,0,"static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.server.notedb.ChangeNotesCache.class); cache(com.google.gerrit.server.notedb.ChangeNotesCache.CACHE_NAME, com.google.gerrit.server.notedb.ChangeNotesCache.Key.class, com.google.gerrit.server.notedb.ChangeNotesState.class).maximumWeight(1000); } }; }",10ef8ac0b0021ef1f367d48e9f9536cf0945535f,module(),8728,125,124
62010,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeJson.java,24.0,"com.google.gerrit.extensions.common.CommitInfo toCommit(com.google.gerrit.reviewdb.client.PatchSet in) throws com.google.gerrit.server.patch.PatchSetInfoNotAvailableException { com.google.gerrit.reviewdb.client.PatchSetInfo info = patchSetInfoFactory.get(db.get(), in.getId()); com.google.gerrit.extensions.common.CommitInfo commit = new com.google.gerrit.extensions.common.CommitInfo(); commit.parents = com.google.common.collect.Lists.newArrayListWithCapacity(info.getParents().size()); commit.author = com.google.gerrit.server.change.ChangeJson.toGitPerson(info.getAuthor()); commit.committer = com.google.gerrit.server.change.ChangeJson.toGitPerson(info.getCommitter()); commit.subject = info.getSubject(); commit.message = info.getMessage(); for (ParentInfo parent : info.getParents()) { com.google.gerrit.extensions.common.CommitInfo i = new com.google.gerrit.extensions.common.CommitInfo(); i.commit = parent.id.get(); i.subject = parent.shortMessage; commit.parents.add(i); } return commit; }",f3aa30618e49f0b9d8d09a46ef267e0c5adb8889,"com.google.gerrit.extensions.common.CommitInfo toCommit(com.google.gerrit.reviewdb.client.PatchSet in, java.lang.String project) throws com.google.gerrit.server.patch.PatchSetInfoNotAvailableException { com.google.gerrit.reviewdb.client.PatchSetInfo info = patchSetInfoFactory.get(db.get(), in.getId()); com.google.gerrit.extensions.common.CommitInfo commit = new com.google.gerrit.extensions.common.CommitInfo(); commit.parents = com.google.common.collect.Lists.newArrayListWithCapacity(info.getParents().size()); commit.author = com.google.gerrit.server.change.ChangeJson.toGitPerson(info.getAuthor()); commit.committer = com.google.gerrit.server.change.ChangeJson.toGitPerson(info.getCommitter()); commit.subject = info.getSubject(); commit.message = info.getMessage(); com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getPatchSetLinks(project, in.getRevision().get()); commit.webLinks = (links.isEmpty()) ? null : links.toList(); for (ParentInfo parent : info.getParents()) { com.google.gerrit.extensions.common.CommitInfo i = new com.google.gerrit.extensions.common.CommitInfo(); i.commit = parent.id.get(); i.subject = parent.shortMessage; com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> parentLinks = webLinks.getPatchSetLinks(project, parent.id.get()); i.webLinks = (parentLinks.isEmpty()) ? null : parentLinks.toList(); commit.parents.add(i); } return commit; }",41b0b8f0e9293f7bbc781d1d8b9dcd3e6141996e,toCommit(com.google.gerrit.reviewdb.client.PatchSet),"toCommit(com.google.gerrit.reviewdb.client.PatchSet,java.lang.String)",14,20,"com.google.gerrit.extensions.common.CommitInfo toCommit(com.google.gerrit.reviewdb.client.PatchSet in, com.google.gerrit.reviewdb.client.Project.NameKey project, boolean addLinks) throws com.google.gerrit.server.patch.PatchSetInfoNotAvailableException { com.google.gerrit.reviewdb.client.PatchSetInfo info = patchSetInfoFactory.get(db.get(), in.getId()); com.google.gerrit.extensions.common.CommitInfo commit = new com.google.gerrit.extensions.common.CommitInfo(); commit.parents = com.google.common.collect.Lists.newArrayListWithCapacity(info.getParents().size()); commit.author = com.google.gerrit.server.change.ChangeJson.toGitPerson(info.getAuthor()); commit.committer = com.google.gerrit.server.change.ChangeJson.toGitPerson(info.getCommitter()); commit.subject = info.getSubject(); commit.message = info.getMessage(); if (addLinks) { com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getPatchSetLinks(project, in.getRevision().get()); commit.webLinks = (links.isEmpty()) ? null : links.toList(); } for (ParentInfo parent : info.getParents()) { com.google.gerrit.extensions.common.CommitInfo i = new com.google.gerrit.extensions.common.CommitInfo(); i.commit = parent.id.get(); i.subject = parent.shortMessage; if (addLinks) { com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> parentLinks = webLinks.getPatchSetLinks(project, parent.id.get()); i.webLinks = (parentLinks.isEmpty()) ? null : parentLinks.toList(); } commit.parents.add(i); } return commit; }",a9f6de6934fae31f0dd3bcc2dd0ea98b77adf5db,"toCommit(com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.reviewdb.client.Project$NameKey,boolean)",4822,423,453
52328,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectInfoScreen.java,18.0,"private void initPluginOptions(com.google.gerrit.client.projects.ConfigInfo info) { pluginOptionsPanel.clear(); pluginConfigWidgets = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, com.google.gwt.user.client.ui.Widget>>(); for (java.lang.String pluginName : com.google.gerrit.client.rpc.Natives.keys(info.pluginConfigParameters())) { java.util.Map<java.lang.String, com.google.gwt.user.client.ui.Widget> widgetMap = new java.util.HashMap<java.lang.String, com.google.gwt.user.client.ui.Widget>(); pluginConfigWidgets.put(pluginName, widgetMap); com.google.gerrit.client.admin.ProjectInfoScreen.LabeledWidgetsGrid g = new com.google.gerrit.client.admin.ProjectInfoScreen.LabeledWidgetsGrid(); g.addHeader(new com.google.gerrit.client.ui.SmallHeading(Util.M.pluginProjectOptionsTitle(pluginName))); pluginOptionsPanel.add(g); for (com.google.gerrit.client.projects.ConfigInfo.ConfigParameterInfo param : com.google.gerrit.client.rpc.Natives.asList(info.pluginConfigParameter(pluginName))) { if (""STRING"".equals(param.type())) { com.google.gwtexpui.globalkey.client.NpTextBox textBox = new com.google.gwtexpui.globalkey.client.NpTextBox(); textBox.setValue(param.value()); g.add(((param.displayName()) != null ? param.displayName() : param.name()), textBox); saveEnabler.listenTo(textBox); widgetMap.put(param.name(), textBox); } } } enableForm(); }",2dc5cdfb6e569bbbb220a0532b9fec1f99f9ad84,"private void initPluginOptions(com.google.gerrit.client.projects.ConfigInfo info) { pluginOptionsPanel.clear(); pluginConfigWidgets = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, com.google.gwt.user.client.ui.Widget>>(); for (java.lang.String pluginName : com.google.gerrit.client.rpc.Natives.keys(info.pluginConfigParameters())) { java.util.Map<java.lang.String, com.google.gwt.user.client.ui.Widget> widgetMap = new java.util.HashMap<java.lang.String, com.google.gwt.user.client.ui.Widget>(); pluginConfigWidgets.put(pluginName, widgetMap); com.google.gerrit.client.admin.ProjectInfoScreen.LabeledWidgetsGrid g = new com.google.gerrit.client.admin.ProjectInfoScreen.LabeledWidgetsGrid(); g.addHeader(new com.google.gerrit.client.ui.SmallHeading(Util.M.pluginProjectOptionsTitle(pluginName))); pluginOptionsPanel.add(g); for (com.google.gerrit.client.projects.ConfigInfo.ConfigParameterInfo param : com.google.gerrit.client.rpc.Natives.asList(info.pluginConfigParameter(pluginName))) { if (((""STRING"".equals(param.type())) || (""INT"".equals(param.type()))) || (""LONG"".equals(param.type()))) { com.google.gwtexpui.globalkey.client.NpTextBox textBox = new com.google.gwtexpui.globalkey.client.NpTextBox(); textBox.setValue(param.value()); g.add(((param.displayName()) != null ? param.displayName() : param.name()), textBox); saveEnabler.listenTo(textBox); widgetMap.put(param.name(), textBox); } } } enableForm(); }",4aec20e3a96b540a1e2a212da6f5fde940454ae6,initPluginOptions(com.google.gerrit.client.projects.ConfigInfo),initPluginOptions(com.google.gerrit.client.projects.ConfigInfo),13,18,"private void initPluginOptions(com.google.gerrit.client.projects.ConfigInfo info) { pluginOptionsPanel.clear(); pluginConfigWidgets = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, com.google.gwt.user.client.ui.FocusWidget>>(); for (java.lang.String pluginName : info.pluginConfig().keySet()) { java.util.Map<java.lang.String, com.google.gwt.user.client.ui.FocusWidget> widgetMap = new java.util.HashMap<java.lang.String, com.google.gwt.user.client.ui.FocusWidget>(); pluginConfigWidgets.put(pluginName, widgetMap); com.google.gerrit.client.admin.ProjectInfoScreen.LabeledWidgetsGrid g = new com.google.gerrit.client.admin.ProjectInfoScreen.LabeledWidgetsGrid(); g.addHeader(new com.google.gerrit.client.ui.SmallHeading(Util.M.pluginProjectOptionsTitle(pluginName))); pluginOptionsPanel.add(g); com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.projects.ConfigInfo.ConfigParameterInfo> pluginConfig = info.pluginConfig(pluginName); pluginConfig.copyKeysIntoChildren(""name""); for (com.google.gerrit.client.projects.ConfigInfo.ConfigParameterInfo param : com.google.gerrit.client.rpc.Natives.asList(pluginConfig.values())) { com.google.gwt.user.client.ui.FocusWidget w; if (""STRING"".equals(param.type())) { w = renderTextBox(g, param, false); } else if ((""INT"".equals(param.type())) || (""LONG"".equals(param.type()))) { w = renderTextBox(g, param, true); } else { continue; } widgetMap.put(param.name(), w); } } enableForm(); }",d48e8a7e4cc73c60a172135c4826ade21c7d9b84,initPluginOptions(com.google.gerrit.client.projects.ConfigInfo),91728,441,441
71590,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeInserter.java,21.0,"@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) throws com.google.gwtorm.server.OrmException { if (sendMail) { java.lang.Runnable sender = new java.lang.Runnable() { @java.lang.Override public void run() { try { com.google.gerrit.server.mail.CreateChangeSender cm = createChangeSenderFactory.create(change.getId()); cm.setFrom(change.getOwner()); cm.setPatchSet(patchSet, patchSetInfo); cm.addReviewers(reviewers); cm.addExtraCC(extraCC); cm.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.change.ChangeInserter.log.error((""Cannot send email for new change "" + (change.getId())), e); } } @java.lang.Override public java.lang.String toString() { return ""send-email newchange""; } }; if ((requestScopePropagator) != null) { workQueue.getDefaultQueue().submit(requestScopePropagator.wrap(sender)); } else { sender.run(); } } if (runHooks) { com.google.gerrit.reviewdb.server.ReviewDb db = ctx.getDb(); hooks.doPatchsetCreatedHook(change, patchSet, db); if (((hashtags) != null) && ((hashtags.size()) > 0)) { hooks.doHashtagsChangedHook(change, accountCache.get(change.getOwner()).getAccount(), hashtags, null, hashtags, db); } if (((approvals) != null) && (!(approvals.isEmpty()))) { hooks.doCommentAddedHook(change, ((com.google.gerrit.server.IdentifiedUser) (refControl.getCurrentUser())).getAccount(), patchSet, null, approvals, db); } } }",4e04e48a2daa67e34b8bf7a523f592eba8327a8d,"@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) throws com.google.gwtorm.server.OrmException { if (sendMail) { java.lang.Runnable sender = new java.lang.Runnable() { @java.lang.Override public void run() { try { com.google.gerrit.server.mail.CreateChangeSender cm = createChangeSenderFactory.create(change.getId()); cm.setFrom(change.getOwner()); cm.setPatchSet(patchSet, patchSetInfo); cm.addReviewers(reviewers); cm.addExtraCC(extraCC); cm.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.change.ChangeInserter.log.error((""Cannot send email for new change "" + (change.getId())), e); } } @java.lang.Override public java.lang.String toString() { return ""send-email newchange""; } }; if ((requestScopePropagator) != null) { workQueue.getDefaultQueue().submit(requestScopePropagator.wrap(sender)); } else { sender.run(); } } if (runHooks) { com.google.gerrit.reviewdb.server.ReviewDb db = ctx.getDb(); hooks.doPatchsetCreatedHook(change, patchSet, db); } }",7fed1b3233b160de704e968ffbd011770a9aa970,postUpdate(com.google.gerrit.server.git.BatchUpdate.Context),postUpdate(com.google.gerrit.server.git.BatchUpdate.Context),4,20,"@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) throws com.google.gwtorm.server.OrmException { if (sendMail) { java.lang.Runnable sender = new java.lang.Runnable() { @java.lang.Override public void run() { try { com.google.gerrit.server.mail.CreateChangeSender cm = createChangeSenderFactory.create(change.getId()); cm.setFrom(change.getOwner()); cm.setPatchSet(patchSet, patchSetInfo); cm.addReviewers(reviewers); cm.addExtraCC(extraCC); cm.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.change.ChangeInserter.log.error((""Cannot send email for new change "" + (change.getId())), e); } } @java.lang.Override public java.lang.String toString() { return ""send-email newchange""; } }; if ((requestScopePropagator) != null) { workQueue.getDefaultQueue().submit(requestScopePropagator.wrap(sender)); } else { sender.run(); } } if (runHooks) { com.google.gerrit.reviewdb.server.ReviewDb db = ctx.getDb(); hooks.doPatchsetCreatedHook(change, patchSet, db); if (((approvals) != null) && (!(approvals.isEmpty()))) { hooks.doCommentAddedHook(change, ((com.google.gerrit.server.IdentifiedUser) (refControl.getCurrentUser())).getAccount(), patchSet, null, approvals, db); } } }",04157e86c5e5b22831b54538e9be06f0441237ea,postUpdate(com.google.gerrit.server.git.BatchUpdate.Context),187695,307,368
164952,javatests_com_google_gerrit_server_project_SubmitRulesEvaluatorTest.java,,,,"private com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name, java.lang.String status, com.google.gerrit.reviewdb.client.Account.Id account) { com.googlecode.prolog_cafe.lang.StructureTerm user = new com.googlecode.prolog_cafe.lang.StructureTerm(""user"", new com.googlecode.prolog_cafe.lang.IntegerTerm(account.get())); return new com.googlecode.prolog_cafe.lang.StructureTerm(""label"", new com.googlecode.prolog_cafe.lang.StructureTerm(name), new com.googlecode.prolog_cafe.lang.StructureTerm(status, user)); }",2deaf7258e42f6b72645c9839d0a5fc9461d13b8,,"makeLabel(java.lang.String,java.lang.String,com.google.gerrit.reviewdb.client.Account$Id)",4,5,"private static com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name, java.lang.String status, TestAccount account) { com.googlecode.prolog_cafe.lang.StructureTerm user = new com.googlecode.prolog_cafe.lang.StructureTerm(""user"", new com.googlecode.prolog_cafe.lang.IntegerTerm(account.id.get())); return new com.googlecode.prolog_cafe.lang.StructureTerm(""label"", new com.googlecode.prolog_cafe.lang.StructureTerm(name), new com.googlecode.prolog_cafe.lang.StructureTerm(status, user)); }",4805305f9d328945a41c5cb130c29e4f8f57ec62,"makeLabel(java.lang.String,java.lang.String,com.google.gerrit.acceptance.TestAccount)",40638,170,159
116711,gerrit-server_src_main_java_com_google_gerrit_server_group_Groups.java,9.0,"public java.util.stream.Stream<com.google.gerrit.reviewdb.client.AccountGroup.UUID> getParentGroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID childGroupUuid) throws com.google.gwtorm.server.OrmException { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> accountGroupByIds = db.accountGroupById().byIncludeUUID(childGroupUuid); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.Id> foundParentGroupIds = com.google.common.collect.Streams.stream(accountGroupByIds).map(AccountGroupById::getGroupId).collect(toImmutableSet()); com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroup> existingParentGroups = db.accountGroups().get(foundParentGroupIds); return com.google.common.collect.Streams.stream(existingParentGroups).map(AccountGroup::getGroupUUID); }",e49eade34349a39269a4ea76de8f65cc0e389304,"public java.util.stream.Stream<com.google.gerrit.reviewdb.client.AccountGroup.UUID> getParentGroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid) throws com.google.gwtorm.server.OrmException { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> accountGroupByIds = db.accountGroupById().byIncludeUUID(includedGroupUuid); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.Id> foundParentGroupIds = com.google.common.collect.Streams.stream(accountGroupByIds).map(AccountGroupById::getGroupId).collect(toImmutableSet()); com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroup> existingParentGroups = db.accountGroups().get(foundParentGroupIds); return com.google.common.collect.Streams.stream(existingParentGroups).map(AccountGroup::getGroupUUID); }",9a44c501cc2a210d3db6e65d952b741c1e912672,"getParentGroups(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.AccountGroup$UUID)","getParentGroups(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.AccountGroup$UUID)",5,9,"public java.util.stream.Stream<com.google.gerrit.reviewdb.client.AccountGroup.Id> getParentGroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid) throws com.google.gwtorm.server.OrmException { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> accountGroupByIds = db.accountGroupById().byIncludeUUID(includedGroupUuid); return com.google.common.collect.Streams.stream(accountGroupByIds).map(AccountGroupById::getGroupId); }",256896ad5f09a0d341a91648cfaa53c25cbe9f7d,"getParentGroups(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.AccountGroup$UUID)",187944,261,154
46081,gerrit-lucene_src_main_java_com_google_gerrit_lucene_LuceneChangeIndex.java,,,,public static java.lang.Module module() { return new com.google.gerrit.lifecycle.LifecycleModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.server.index.ChangeIndex.class).to(com.google.gerrit.lucene.LuceneChangeIndex.class); listener().to(com.google.gerrit.lucene.LuceneChangeIndex.Lifecycle.class); } }; },6986161c312b08e7d14f368403c61d2c79f4fbce,,module(),6,13,"@java.lang.Override public void stop() { try { searcherManager.close(); } catch (java.io.IOException e) { com.google.gerrit.lucene.LuceneChangeIndex.log.warn(""error closing Lucene searcher"", e); } try { writer.close(true); } catch (java.io.IOException e) { com.google.gerrit.lucene.LuceneChangeIndex.log.warn(""error closing Lucene writer"", e); } try { dir.close(); } catch (java.io.IOException e) { com.google.gerrit.lucene.LuceneChangeIndex.log.warn(""error closing Lucene directory"", e); } }",e58a83c126d766108ed8f2c46863d10058625b4e,stop(),159567,96,141
86538,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotesState.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,abstract com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> historicalAssignees();,ef7ff3e21bed316465ed4056eebeb9b6daf5dab4,,historicalAssignees(),6,26,abstract com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> pastAssignees();,6ba7707f73d3d302bde6e731debdcd2d4259b116,pastAssignees(),117553,34,34
61661,src_main_java_com_googlesource_gerrit_plugins_reviewers_client_AddReviewersScreen.java,,,,"void resetInputBoxes() { this.filterBox.setText(""""); this.reviewerBox.setText(""""); }",e51c710a6e2cf3e56273c62551be71bec6a290bd,,resetInputBoxes(),3,1,void reset() { clear(); rEntries = new java.util.HashSet<>(); },c01969852fef68707d395d2c2292ab78c7507752,reset(),183202,22,17
76894,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_UnifiedCommentManager.java,5.0,"@java.lang.Override void insertNewDraft(com.google.gerrit.client.diff.DisplaySide side, int cmLinePlusOne) { if (cmLinePlusOne == 0) { getDiffScreen().skipManager.ensureFirstLineIsVisible(); } com.google.gerrit.client.diff.CommentGroup group = group(side, cmLinePlusOne); if (0 < (group.getBoxCount())) { com.google.gerrit.client.diff.CommentBox last = group.getCommentBox(((group.getBoxCount()) - 1)); if (last instanceof com.google.gerrit.client.diff.DraftBox) { ((com.google.gerrit.client.diff.DraftBox) (last)).setEdit(true); } else { ((com.google.gerrit.client.diff.PublishedBox) (last)).doReply(); } } else { com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo info = host.getLineRegionInfoFromCmLine((cmLinePlusOne - 1)); int line = info.line; if ((info.getSide()) != side) { line = host.lineOnOther(info.getSide(), line).getLine(); } addDraftBox(side, com.google.gerrit.client.changes.CommentInfo.create(getPath(), getStoredSideFromDisplaySide(side), (line + 1), null)).setEdit(true); } }",4fc5cb41466969df99ba184d763639886902b9bc,"@java.lang.Override void clearLine(com.google.gerrit.client.diff.DisplaySide side, int line, com.google.gerrit.client.diff.CommentGroup group) { clearLineHelper(side, line, group); if ((mergedMap.get(line)) == group) { mergedMap.remove(line); } }",5f5f13bd479872bdd1f9397e956cdf5d6fd8da0e,"insertNewDraft(com.google.gerrit.client.diff.DisplaySide,int)","clearLine(com.google.gerrit.client.diff.DisplaySide,int,com.google.gerrit.client.diff.CommentGroup)",9,2,"@java.lang.Override void clearLine(com.google.gerrit.client.diff.DisplaySide side, int line, com.google.gerrit.client.diff.CommentGroup group) { super.clearLine(side, line, group); if ((mergedMap.get(line)) == group) { mergedMap.remove(line); if (duplicates.containsKey(line)) { mergedMap.put(line, duplicates.remove(line)); } } }",8560c8c79615259b12a9eaf9b09414658de9a425,"clearLine(com.google.gerrit.client.diff.DisplaySide,int,com.google.gerrit.client.diff.CommentGroup)",67752,77,102
41110,gerrit-server_src_main_java_com_google_gerrit_server_group_DeleteMember.java,,,,@java.lang.Override public java.lang.Class<com.google.gerrit.server.group.PutMember.Input> inputType() { return com.google.gerrit.server.group.PutMember.Input.class; },ce1eb49a4cae1241e1c0521a12af0c5026f4fa07,,inputType(),5,1,@java.lang.Override public java.lang.Class<com.google.gerrit.server.group.PutMembers.Input> inputType() { return com.google.gerrit.server.group.PutMembers.Input.class; },45b9853c48c036bd8580349ce382e5e3cecd49f5,inputType(),46948,53,53
140535,java_com_google_gerrit_server_query_change_ChangeData.java,6.0,"public java.util.List<java.lang.String> currentFilePaths() throws com.google.gwtorm.server.OrmException, java.io.IOException { if ((currentFiles) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } java.util.Optional<com.google.gerrit.server.patch.DiffSummary> p = getDiffSummary(); currentFiles = p.map(DiffSummary::getPaths).orElse(java.util.Collections.emptyList()); } return currentFiles; }",1ac5f65674c71be3763a949462f851853889a4fe,"public java.util.List<java.lang.String> currentFilePaths() throws com.google.gwtorm.server.OrmException, java.io.IOException { if ((currentFiles) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } java.util.Optional<com.google.gerrit.server.patchlib.DiffSummary> p = getDiffSummary(); currentFiles = p.map(DiffSummary::getPaths).orElse(java.util.Collections.emptyList()); } return currentFiles; }",95a94ce9f7ae507caa2ce288f9854e8ddd4fe816,currentFilePaths(),currentFilePaths(),11,6,"public java.util.List<java.lang.String> currentFilePaths() throws com.google.gwtorm.server.OrmException, java.io.IOException { if ((currentFiles) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } java.util.Optional<com.google.gerrit.server.diff.DiffSummary> p = getDiffSummary(); currentFiles = p.map(DiffSummary::getPaths).orElse(java.util.Collections.emptyList()); } return currentFiles; }",c602329f925fa0b13a321b10088e1891718990ef,currentFilePaths(),15818,119,118
87970,gerrit-gwtui-common_src_main_java_com_google_gerrit_client_info_ChangeInfo.java,26.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public native final boolean hasMaxPermittedValue();,43b9a0a40aea72bde4d9c379d149dc1eadd6e651,,hasMaxPermittedValue(),10,26,public native final short min();,4dd8fe4d1e1eb6ea813ae6ca4cd5b2b00a6b195a,min(),1648,9,6
71764,gerrit-gpg_src_test_java_com_google_gerrit_gpg_PublicKeyCheckerTest.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void keyRevokedByExpiredKeyBeforeExpirationIsRevoked() throws java.lang.Exception { com.google.gerrit.gpg.testutil.TestKey k = add(keyRevokedByExpiredKeyBeforeExpiration()); add(com.google.gerrit.gpg.testutil.TestKeys.expiredKey()); save(); com.google.gerrit.gpg.PublicKeyChecker checker = new com.google.gerrit.gpg.PublicKeyChecker().setStore(store); assertProblems(checker, k, ""Key is revoked (retired and no longer valid): test9 not used""); checker.setEffectiveTime(com.google.gerrit.gpg.PublicKeyCheckerTest.parseDate(""2005-08-01 13:00:00 -0400"")); assertProblems(checker, k); }",7a3eb0583e62e4b6958070cca3e31a75865fcd3d,,keyRevokedByExpiredKeyBeforeExpirationIsRevoked(),5,25,"@org.junit.Test public void keyRevokedByExpiredKeyBeforeExpirationIsRevoked() throws java.lang.Exception { com.google.gerrit.gpg.testutil.TestKey k = add(keyRevokedByExpiredKeyBeforeExpiration()); add(expiredKey()); save(); com.google.gerrit.gpg.PublicKeyChecker checker = new com.google.gerrit.gpg.PublicKeyChecker().setStore(store); assertProblems(checker, k, ""Key is revoked (retired and no longer valid): test9 not used""); checker.setEffectiveTime(com.google.gerrit.gpg.PublicKeyCheckerTest.parseDate(""2005-08-01 13:00:00 -0400"")); assertProblems(checker, k); }",c482b5c85a21f598b9d8d99079175c4dee604171,keyRevokedByExpiredKeyBeforeExpirationIsRevoked(),8223,179,163
57933,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_DraftApiImpl.java,,,,"@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo update(com.google.gerrit.extensions.api.changes.DraftInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { return CommentInfoMapper.INSTANCE.apply(putDraft.apply(draft, in).value()); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot update draft"", e); } }",63d4707df8678e90044622098967106d2ae1bb1d,,update(com.google.gerrit.extensions.api.changes.DraftInput),17,2,"@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo update(com.google.gerrit.extensions.api.changes.DraftInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { return putDraft.apply(draft, in).value(); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot update draft"", e); } }",c10f265a9532808381469be7eadc5ed7f9a2b663,update(com.google.gerrit.extensions.api.changes.DraftInput),13967,121,119
76263,src_test_java_com_googlesource_gerrit_plugins_uploadvalidator_TestUtils.java,5.0,"public static boolean compareCommitValidationMessage(java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m1, java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m2) { for (com.google.gerrit.server.git.validators.CommitValidationMessage cvm1 : m1) { boolean found = false; for (com.google.gerrit.server.git.validators.CommitValidationMessage cvm2 : m2) { if (com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.compareCommitValidationMessage(cvm1, cvm2)) { found = true; } } if (!found) { return false; } } return true; }",f2fd35abad0d5e18e511d141f4a248a6e446c1a8,"public static java.util.Set<com.googlesource.gerrit.plugins.uploadvalidator.ComparableCommitValidationMessage> transformMessages(java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages) { return new java.util.HashSet(com.google.common.collect.Collections2.transform(messages, new com.google.common.base.Function<com.google.gerrit.server.git.validators.CommitValidationMessage, com.googlesource.gerrit.plugins.uploadvalidator.ComparableCommitValidationMessage>() { @java.lang.Override public com.googlesource.gerrit.plugins.uploadvalidator.ComparableCommitValidationMessage apply(com.google.gerrit.server.git.validators.CommitValidationMessage input) { return new com.googlesource.gerrit.plugins.uploadvalidator.ComparableCommitValidationMessage(input.getMessage(), input.isError()); } })); }",aa7d3b0b93fb36ee93e1b190070c13e6f8dd3e21,"compareCommitValidationMessage(java.util.List,java.util.List)",transformMessages(java.util.List),8,2,"public static java.util.List<java.lang.String> transformMessages(java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages) { return com.google.common.collect.Lists.transform(messages, new com.google.common.base.Function<com.google.gerrit.server.git.validators.CommitValidationMessage, java.lang.String>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.server.git.validators.CommitValidationMessage input) { java.lang.String pre = (input.isError()) ? ""ERROR: "" : ""MSG: ""; return pre + (input.getMessage()); } }); }",4a1ea8c2e8e28f6ae5b9535d1d1f02e8a2d53e4d,transformMessages(java.util.List),51936,205,166
148032,java_com_google_gerrit_server_restapi_change_Files.java,3.0,"@java.lang.Override public com.google.gerrit.server.change.FileResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.change.FileResource(rev, id.get()); }",1f8ecd6e412413f265efcdd22c2596d8d0e861a8,"@java.lang.Override public com.google.gerrit.server.restapi.change.FileResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.restapi.change.FileResource(rev, id.get()); }",04874b34c4cc33e98d9e9b49af5cf9131ddbdd79,"parse(com.google.gerrit.server.change.RevisionResource,com.google.gerrit.extensions.restapi.IdString)","parse(com.google.gerrit.server.change.RevisionResource,com.google.gerrit.extensions.restapi.IdString)",17,3,"@java.lang.Override public com.google.gerrit.server.change.FileResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.change.FileResource(rev, id.get()); }",1f8ecd6e412413f265efcdd22c2596d8d0e861a8,"parse(com.google.gerrit.server.change.RevisionResource,com.google.gerrit.extensions.restapi.IdString)",216106,83,77
92436,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_mail_MailProcessorIT.java,,,,"@org.junit.Test public void testParseAndPersistChangeMessage() throws java.lang.Exception { java.lang.String changeId = createChangeForTest(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); java.lang.String ts = MailUtil.rfcDateformatter.format(java.time.ZonedDateTime.ofInstant(comments.get(0).updated.toInstant(), java.time.ZoneId.of(""UTC""))); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields(); java.lang.String txt = com.google.gerrit.acceptance.server.mail.MailProcessorIT.newPlaintextBody(((((canonicalWebUrl.get()) + ""#/c/"") + (changeInfo._number)) + ""/1""), ""Test Message"", null, null, null); b.textContent((txt + (com.google.gerrit.acceptance.server.mail.MailProcessorIT.textFooterForChange(changeId, ts)))); mailProcessor.process(b.build()); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeId).get().messages; assertThat(messages).hasSize(3); assertThat(com.google.common.collect.Iterables.getLast(messages).message).isEqualTo(""Patch Set 1:\nTest Message""); assertThat(com.google.common.collect.Iterables.getLast(messages).tag).isEqualTo(""mailMessageId=some id""); }",cd52dc6505093c98dcff811195328addb5614bc3,,testParseAndPersistChangeMessage(),3,0,"@org.junit.Test public void parseAndPersistChangeMessage() throws java.lang.Exception { java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); java.lang.String ts = MailUtil.rfcDateformatter.format(java.time.ZonedDateTime.ofInstant(comments.get(0).updated.toInstant(), java.time.ZoneId.of(""UTC""))); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields(); java.lang.String txt = com.google.gerrit.acceptance.server.mail.MailProcessorIT.newPlaintextBody(((((canonicalWebUrl.get()) + ""#/c/"") + (changeInfo._number)) + ""/1""), ""Test Message"", null, null, null); b.textContent((txt + (com.google.gerrit.acceptance.server.mail.MailProcessorIT.textFooterForChange(changeId, ts)))); mailProcessor.process(b.build()); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeId).get().messages; assertThat(messages).hasSize(3); assertThat(com.google.common.collect.Iterables.getLast(messages).message).isEqualTo(""Patch Set 1:\nTest Message""); assertThat(com.google.common.collect.Iterables.getLast(messages).tag).isEqualTo(""mailMessageId=some id""); }",5963e92d02df8ef27ed14ba8eb00314ad81a7f98,parseAndPersistChangeMessage(),109994,389,388
103357,gerrit-server_src_main_java_com_google_gerrit_server_account_Accounts.java,1.0,public boolean hasAnyAccount() throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { for (org.eclipse.jgit.lib.Ref ref : repo.getRefDatabase().getRefs(RefNames.REFS_USERS).values()) { if (RefNames.REFS_USERS_DEFAULT.equals(ref.getName())) { continue; } return true; } return false; } },8818ec5caf1bb2ba4a77c6e8e8dea5aa8a5210dd,public boolean hasAnyAccount() throws java.io.IOException { java.util.concurrent.atomic.AtomicBoolean hasAnyAccount = new java.util.concurrent.atomic.AtomicBoolean(false); readUserRefs(( r) -> { hasAnyAccount.set(true); return false; }); return hasAnyAccount.get(); },88624dd514626f23346b3a4cf24649460ed3a52a,hasAnyAccount(),hasAnyAccount(),18,0,public boolean hasAnyAccount() throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.Accounts.hasAnyAccount(repo); } },bea3edb7c5097889c4d8e750f1a9060d0853bbca,hasAnyAccount(),151538,70,60
153612,javatests_com_google_gerrit_extensions_conditions_BooleanConditionTest.java,,,,"@org.junit.Test public void reduceComplexTreeToSingleValue() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true))).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); }",cba1719fcd0ced328def5d162d9050027ffaab24,,reduceComplexTreeToSingleValue(),5,13,"@org.junit.Test public void reduceComplexTreeToSingleValue() throws java.lang.Exception { com.google.gerrit.extensions.conditions.BooleanCondition nonReduced = com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true))); com.google.gerrit.extensions.conditions.BooleanCondition reduced = com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false); assertEquals(nonReduced.reduce(), reduced); }",e284b26bddd485b0db0e21f022d987034447ee94,reduceComplexTreeToSingleValue(),137229,165,199
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,120.0,"@com.google.gwt.uibinder.client.UiHandler(""deleteEdit"") void onDeleteEdit(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteChangeEdit())) { com.google.gerrit.client.change.EditActions.deleteEdit(changeId, publishEdit, rebaseEdit, deleteEdit); } }",33caab242f5dc49836fd28becfb02b6a50785e47,"@com.google.gwt.uibinder.client.UiHandler(""deleteEdit"") void onDeleteEdit(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteChangeEdit())) { com.google.gerrit.client.change.EditActions.deleteEdit(changeId, project, publishEdit, rebaseEdit, deleteEdit); } }",df0c9e17812d9695d213e612868f3818eaeb26d8,onDeleteEdit(com.google.gwt.event.dom.client.ClickEvent),onDeleteEdit(com.google.gwt.event.dom.client.ClickEvent),7,120,"@com.google.gwt.uibinder.client.UiHandler(""deleteEdit"") void onDeleteEdit(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteChangeEdit())) { com.google.gerrit.client.change.EditActions.deleteEdit(getProject(), changeId, publishEdit, rebaseEdit, deleteEdit); } }",712718cc437f7cd56d7de4e377882fed28791df5,onDeleteEdit(com.google.gwt.event.dom.client.ClickEvent),210934,106,106
76826,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_CreateGroupScreen.java,0.0,"private void addCreateGroupPanel() { com.google.gwt.user.client.ui.VerticalPanel addPanel = new com.google.gwt.user.client.ui.VerticalPanel(); addPanel.setStyleName(Gerrit.RESOURCES.css().addSshKeyPanel()); addPanel.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingCreateGroup())); addTxt = new com.google.gwtexpui.globalkey.client.NpTextBox() { @java.lang.Override public void onBrowserEvent(com.google.gwt.user.client.Event event) { super.onBrowserEvent(event); if ((event.getTypeInt()) == (com.google.gwt.user.client.Event.ONPASTE)) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { if ((addTxt.getValue().trim().length()) != 0) { addNew.setEnabled(true); } } }); } } }; addTxt.sinkEvents(Event.ONPASTE); addTxt.setVisibleLength(60); addTxt.addKeyPressHandler(new com.google.gwt.event.dom.client.KeyPressHandler() { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.getNativeEvent().getKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { doCreateGroup(); } } }); addPanel.add(addTxt); addNew = new com.google.gwt.user.client.ui.Button(Util.C.buttonCreateGroup()); addNew.setEnabled(false); addNew.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { doCreateGroup(); } }); addPanel.add(addNew); add(addPanel); new com.google.gerrit.client.ui.OnEditEnabler(addNew, addTxt); }",19d6e6b365ac19f25ce8a22e8acc2149e76a8900,"private void addCreateGroupPanel() { com.google.gwt.user.client.ui.VerticalPanel addPanel = new com.google.gwt.user.client.ui.VerticalPanel(); addPanel.setStyleName(Gerrit.RESOURCES.css().addSshKeyPanel()); addPanel.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingCreateGroup())); addTxt = new com.google.gwtexpui.globalkey.client.NpTextBox() { @java.lang.Override public void onBrowserEvent(com.google.gwt.user.client.Event event) { super.onBrowserEvent(event); if ((event.getTypeInt()) == (com.google.gwt.user.client.Event.ONPASTE)) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { if ((addTxt.getValue().trim().length()) != 0) { addNew.setEnabled(true); } } }); } } }; addTxt.sinkEvents(Event.ONPASTE); addTxt.setVisibleLength(60); addTxt.addKeyPressHandler(new com.google.gwt.event.dom.client.KeyPressHandler() { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.getNativeKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { doCreateGroup(); } } }); addPanel.add(addTxt); addNew = new com.google.gwt.user.client.ui.Button(Util.C.buttonCreateGroup()); addNew.setEnabled(false); addNew.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { doCreateGroup(); } }); addPanel.add(addNew); add(addPanel); new com.google.gerrit.client.ui.OnEditEnabler(addNew, addTxt); }",21fb6b6c5b1653361755c00e7ad7961d91ec390e,addCreateGroupPanel(),addCreateGroupPanel(),4,0,"private void addCreateGroupPanel() { com.google.gwt.user.client.ui.VerticalPanel addPanel = new com.google.gwt.user.client.ui.VerticalPanel(); addPanel.setStyleName(Gerrit.RESOURCES.css().addSshKeyPanel()); addPanel.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingCreateGroup())); addTxt = new com.google.gwtexpui.globalkey.client.NpTextBox() { @java.lang.Override public void onBrowserEvent(com.google.gwt.user.client.Event event) { super.onBrowserEvent(event); if ((event.getTypeInt()) == (com.google.gwt.user.client.Event.ONPASTE)) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { if ((addTxt.getValue().trim().length()) != 0) { addNew.setEnabled(true); } } }); } } }; addTxt.sinkEvents(Event.ONPASTE); addTxt.setVisibleLength(60); addTxt.addKeyPressHandler(new com.google.gwt.event.dom.client.KeyPressHandler() { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.getNativeEvent().getKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { doCreateGroup(); } } }); addPanel.add(addTxt); addNew = new com.google.gwt.user.client.ui.Button(Util.C.buttonCreateGroup()); addNew.setEnabled(false); addNew.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { doCreateGroup(); } }); addPanel.add(addNew); add(addPanel); new com.google.gerrit.client.ui.OnEditEnabler(addNew, addTxt); }",19d6e6b365ac19f25ce8a22e8acc2149e76a8900,addCreateGroupPanel(),48283,490,492
24856,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean branchExists(final org.eclipse.jgit.transport.ReceiveCommand cmd) { java.lang.String branchName = cmd.getRefName(); if (!(com.google.gerrit.server.git.ReceiveCommits.isHead(cmd))) { branchName = (org.eclipse.jgit.lib.Constants.R_HEADS) + branchName; } int split = branchName.length(); while (!(rp.getAdvertisedRefs().containsKey(branchName))) { split = branchName.lastIndexOf('/', (split - 1)); if (split <= (Constants.R_REFS.length())) { return false; } branchName = branchName.substring(0, split); } return true; }",386efa919a38ebd9669e632c95664415d0789f90,,branchExists(org.eclipse.jgit.transport.ReceiveCommand),11,35,"private java.lang.String buildError(com.google.gerrit.server.git.ReceiveCommits.Error error, java.util.List<java.lang.String> branches) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); if ((branches.size()) == 1) { sb.append(""Branch "").append(branches.get(0)).append("":\n""); sb.append(error.get()); return sb.toString(); } sb.append(""Branches""); java.lang.String delim = "" ""; for (java.lang.String branch : branches) { sb.append(delim).append(branch); delim = "", ""; } return sb.append("":\n"").append(error.get()).toString(); }",94c713ba144f92b1d9850e7a9e3a79078c420779,"buildError(com.google.gerrit.server.git.ReceiveCommits$Error,java.util.List)",84669,149,163
47670,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_CommentBox.java,2.0,"void setPadding(net.codemirror.lib.LineWidget widget, com.google.gwt.dom.client.Element element) { paddingWidget = widget; paddingWidgetEle = element; }",536d27dad22f97c9cabdf0e979d957e589444fc6,void setLineWidgetManager(com.google.gerrit.client.diff.CommentBoxManager manager) { widgetManager = manager; },03d1554a5372daea99f8af9f2426ae0693fdfa26,"setPadding(net.codemirror.lib.LineWidget,com.google.gwt.dom.client.Element)",setLineWidgetManager(com.google.gerrit.client.diff.CommentBoxManager),4,3,void setPaddingManager(com.google.gerrit.client.diff.PaddingManager manager) { widgetManager = manager; },1546dac71c861af83127d624e0aa94fe5c2b1988,setPaddingManager(com.google.gerrit.client.diff.PaddingManager),115261,29,27
73381,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_SubmitTypeRuleIT.java,,,,"@org.junit.Test public void submitTypeIsUsedForSubmit() throws java.lang.Exception { setRulesPl(com.google.gerrit.acceptance.rest.change.SubmitTypeRuleIT.SUBMIT_TYPE_FROM_SUBJECT); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(""master"", ""CHERRY_PICK 1""); gApi.changes().id(r.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(r.getChangeId()).current().submit(); java.util.List<org.eclipse.jgit.revwalk.RevCommit> log = log(""master"", 1); assertThat(log.get(0).getShortMessage()).isEqualTo(""CHERRY_PICK 1""); assertThat(log.get(0).name()).isNotEqualTo(r.getCommit().name()); assertThat(log.get(0).getFullMessage()).contains((""Change-Id: "" + (r.getChangeId()))); assertThat(log.get(0).getFullMessage()).contains(""Reviewed-on: ""); }",99f50b155429c4f71ea089558d12785a15517ac2,,submitTypeIsUsedForSubmit(),4,8,"@org.junit.Test public void submitTypeIsUsedForSubmit() throws java.lang.Exception { setRulesPl(com.google.gerrit.acceptance.api.change.SubmitTypeRuleIT.SUBMIT_TYPE_FROM_SUBJECT); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(""master"", ""CHERRY_PICK 1""); gApi.changes().id(r.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(r.getChangeId()).current().submit(); java.util.List<org.eclipse.jgit.revwalk.RevCommit> log = log(""master"", 1); assertThat(log.get(0).getShortMessage()).isEqualTo(""CHERRY_PICK 1""); assertThat(log.get(0).name()).isNotEqualTo(r.getCommit().name()); assertThat(log.get(0).getFullMessage()).contains((""Change-Id: "" + (r.getChangeId()))); assertThat(log.get(0).getFullMessage()).contains(""Reviewed-on: ""); }",45212e9ec14bef3008950de86f3616f11fcf81b6,submitTypeIsUsedForSubmit(),142984,252,252
47480,gerrit-gwtui_src_test_java_com_google_gerrit_client_diff_EditIteratorTest.java,3.0,"@org.junit.Test public void testSimpleAdvance() { com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator iter = new com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator(lines, 0); assertLineChsEqual(net.codemirror.lib.LineCharacter.create(0, 1), iter.advance(1)); }",92586eca0e248f9a0f92f8109b69cfe0acd7a049,"@org.junit.Test public void testSimpleAdvance() { com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator iter = new com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator(lines, 0); assertLineChsEqual(net.codemirror.lib.LineCharacter.create(0), iter.advance(1)); }",7e823c970b425f43502903ea6b9e3c3ddaf9aa67,testSimpleAdvance(),testSimpleAdvance(),14,3,"@org.junit.Test public void testSimpleAdvance() { com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator iter = new com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator(lines, 0); assertLineChsEqual(net.codemirror.lib.LineCharacter.create(0, 1), iter.advance(1)); }",92586eca0e248f9a0f92f8109b69cfe0acd7a049,testSimpleAdvance(),166595,77,79
68570,gitiles-dev_src_main_java_com_google_gitiles_dev_Main.java,0.0,public static void main(java.lang.String[] args) throws java.lang.Exception { new com.google.gitiles.dev.DevServer(com.google.gitiles.GitilesConfig.defaultFile()).start(); },81c2e95a5af61c84677dd8708be55d5d870536ef,"public static void main(java.lang.String[] args) throws java.lang.Exception { com.google.gitiles.dev.DevServer srv = new com.google.gitiles.dev.DevServer(com.google.gitiles.GitilesConfig.defaultFile()); if (((args.length) == 3) && (""-docroot"".equals(args[0]))) { srv.setDocRoot(new java.io.File(args[1]), args[2]); } srv.start(); }",27a7a08b93917e811182a7e3d444f524790ef21f,main(java.lang.String[]),main(java.lang.String[]),6,0,public static void main(java.lang.String[] args) throws java.lang.Exception { new com.google.gitiles.dev.DevServer(com.google.gitiles.GitilesConfig.defaultFile()).start(); },81c2e95a5af61c84677dd8708be55d5d870536ef,main(java.lang.String[]),134490,110,52
52825,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotes.java,,,,"private void parse(org.eclipse.jgit.revwalk.RevCommit commit) throws org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = parsePatchSetId(commit); for (java.lang.String line : commit.getFooterLines(com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_VOTE)) { approvals.put(psId, parseVote(psId, commit, line)); } }",1643f7c494eba22cd1566d4ff0cd75b199e04975,,parse(org.eclipse.jgit.revwalk.RevCommit),13,8,"private void parse(org.eclipse.jgit.revwalk.RevCommit commit) throws org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = parsePatchSetId(commit); com.google.gerrit.reviewdb.client.Account.Id accountId = parseIdent(commit); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> psas = approvals.get(psId); java.util.Map<java.lang.String, com.google.gerrit.reviewdb.client.PatchSetApproval> curr = com.google.common.collect.Maps.newHashMapWithExpectedSize(psas.size()); for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : psas) { if (psa.getAccountId().equals(accountId)) { curr.put(psa.getLabel(), psa); } } for (java.lang.String line : commit.getFooterLines(com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_LABEL)) { com.google.gerrit.reviewdb.client.PatchSetApproval psa = parseApproval(psId, accountId, commit, line); if (!(curr.containsKey(psa.getLabel()))) { curr.put(psa.getLabel(), psa); psas.add(psa); } } }",d9e6d78a102485ce246fa6343f27bea85c2bdadb,parse(org.eclipse.jgit.revwalk.RevCommit),194691,118,324
105856,src_main_java_com_googlesource_gerrit_plugins_lfs_locks_LfsLocksHandler.java,2.0,"com.googlesource.gerrit.plugins.lfs.locks.LfsLockResponse createLock(java.lang.String project, com.google.gerrit.server.CurrentUser user, com.googlesource.gerrit.plugins.lfs.locks.LfsCreateLockInput input) throws com.googlesource.gerrit.plugins.lfs.locks.LfsLocksHandler.LfsLockExistsException { com.googlesource.gerrit.plugins.lfs.locks.LfsLocksHandler.log.debug(""Create lock for {} in project {}"", input.path, project); java.lang.String lockId = toLockId.apply(input.path); com.google.common.cache.Cache<java.lang.String, com.googlesource.gerrit.plugins.lfs.locks.LfsLock> locks = projects.getUnchecked(project); com.googlesource.gerrit.plugins.lfs.locks.LfsLock lock = locks.getIfPresent(lockId); if (lock != null) { throw new com.googlesource.gerrit.plugins.lfs.locks.LfsLocksHandler.LfsLockExistsException(lock); } lock = new com.googlesource.gerrit.plugins.lfs.locks.LfsLock(lockId, input.path, now(), new com.googlesource.gerrit.plugins.lfs.locks.LfsLockOwner(user.getUserName())); locks.put(lockId, lock); return new com.googlesource.gerrit.plugins.lfs.locks.LfsLockResponse(lock); }",d9c91bb6baec6d395af6b44705d2930ed8fbfc1e,"com.googlesource.gerrit.plugins.lfs.locks.LfsLockResponse createLock(java.lang.String project, com.google.gerrit.server.CurrentUser user, com.googlesource.gerrit.plugins.lfs.locks.LfsCreateLockInput input) throws org.eclipse.jgit.lfs.errors.LfsException { com.googlesource.gerrit.plugins.lfs.locks.LfsLocksHandler.log.debug(""Create lock for {} in project {}"", input.path, project); com.googlesource.gerrit.plugins.lfs.locks.LfsProjectLocks locks = projects.getUnchecked(project); com.googlesource.gerrit.plugins.lfs.locks.LfsLock lock = locks.createLock(user, input); return new com.googlesource.gerrit.plugins.lfs.locks.LfsLockResponse(lock); }",051ed520d5c3c7fca595d8010a82431ef4bb2ba9,"createLock(java.lang.String,com.google.gerrit.server.CurrentUser,com.googlesource.gerrit.plugins.lfs.locks.LfsCreateLockInput)","createLock(java.lang.String,com.google.gerrit.server.CurrentUser,com.googlesource.gerrit.plugins.lfs.locks.LfsCreateLockInput)",16,2,"com.googlesource.gerrit.plugins.lfs.locks.LfsLockResponse createLock(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.CurrentUser user, com.googlesource.gerrit.plugins.lfs.locks.LfsCreateLockInput input) throws org.eclipse.jgit.lfs.errors.LfsException { com.googlesource.gerrit.plugins.lfs.locks.LfsLocksHandler.log.debug(""Create lock for {} in project {}"", input.path, project); com.googlesource.gerrit.plugins.lfs.locks.LfsProjectLocks locks = projectLocks.getUnchecked(project); com.googlesource.gerrit.plugins.lfs.locks.LfsLock lock = locks.createLock(user, input); return new com.googlesource.gerrit.plugins.lfs.locks.LfsLockResponse(lock); }",97ab018296ab86760eac1addd50fcdbc033c5fd9,"createLock(com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.server.CurrentUser,com.googlesource.gerrit.plugins.lfs.locks.LfsCreateLockInput)",63701,199,212
43948,gerrit-server_src_main_java_com_google_gerrit_server_change_GetPatch.java,,,,"private void writeHeader(java.io.OutputStream out) { org.eclipse.jgit.lib.PersonIdent author = commit.getAuthorIdent(); java.lang.StringBuilder b = new java.lang.StringBuilder(); b.append(""From "").append(commit.getId().getName()).append("" "").append(df.format(java.lang.Long.valueOf(java.lang.System.currentTimeMillis()))).append(""\n""); b.append(""From: "").append(author.getName()).append("" <"").append(author.getEmailAddress()).append("">\n""); b.append(""Date: "").append(df.format(author.getWhen())).append(""\n""); b.append(""Subject: [PATCH] "").append(commit.getShortMessage()); java.lang.String message = commit.getFullMessage().substring(commit.getShortMessage().length()); b.append(message).append(""\n\n""); java.io.PrintWriter w = new java.io.PrintWriter(new java.io.OutputStreamWriter(out, com.google.common.base.Charsets.UTF_8)); w.print(b.toString()); w.flush(); }",0750c0a30a8b01090be311e8f45f267d08689eb8,,writeHeader(java.io.OutputStream),2,1,"private void appendHeader(java.lang.StringBuilder b, org.eclipse.jgit.revwalk.RevCommit commit) { org.eclipse.jgit.lib.PersonIdent author = commit.getAuthorIdent(); b.append(""From "").append(commit.getId().getName()).append("" "").append(df.format(java.lang.Long.valueOf(java.lang.System.currentTimeMillis()))).append(""\n""); b.append(""From: "").append(author.getName()).append("" <"").append(author.getEmailAddress()).append("">\n""); b.append(""Date: "").append(df.format(author.getWhen())).append(""\n""); b.append(""Subject: [PATCH] "").append(commit.getShortMessage()); java.lang.String message = commit.getFullMessage().substring(commit.getShortMessage().length()); b.append(message).append(""\n\n""); }",241f37652ebacd0202190e547fa6f39811a298a7,"appendHeader(java.lang.StringBuilder,org.eclipse.jgit.revwalk.RevCommit)",182880,251,203
73220,gerrit-server_src_main_java_com_google_gerrit_server_mail_DeleteReviewerSender.java,,,,com.google.gerrit.server.mail.DeleteReviewerSender create(com.google.gerrit.reviewdb.client.Change.Id id);,f49a77e76711293d692c8ce2149547dd0fdf4690,,create(com.google.gerrit.reviewdb.client.Change$Id),19,0,"@java.lang.Override com.google.gerrit.server.mail.DeleteReviewerSender create(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id change);",4784c13a86755877a12f4eca2d441cd300fd7b91,"create(com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.reviewdb.client.Change$Id)",38338,35,60
163935,gerrit-gpg_src_test_java_com_google_gerrit_gpg_GerritPublicKeyCheckerTest.java,5.0,"@org.junit.Test public void noExternalIds() throws java.lang.Exception { com.google.gerrit.server.account.ExternalIdsUpdate externalIdsUpdate = externalIdsUpdateFactory.create(); externalIdsUpdate.deleteAll(db, user.getAccountId()); reloadUser(); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); com.google.gerrit.gpg.PublicKeyChecker checker = checkerFactory.create(user, store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, ""No identities found for user; check http://test/#/settings/web-identities""); checker = checkerFactory.create().setStore(store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, ""Key is not associated with any users""); externalIdsUpdate.insert(db, com.google.gerrit.server.account.ExternalId.create(com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key.getPublicKey()), user.getAccountId())); reloadUser(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, ""No identities found for user""); }",6a9913bba5c54607aea7fcb82da51636a2b2bf3c,"@org.junit.Test public void noExternalIds() throws java.lang.Exception { db.accountExternalIds().delete(db.accountExternalIds().byAccount(user.getAccountId())); reloadUser(); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); com.google.gerrit.gpg.PublicKeyChecker checker = checkerFactory.create(user, store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, ""No identities found for user; check http://test/#/settings/web-identities""); checker = checkerFactory.create().setStore(store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, ""Key is not associated with any users""); db.accountExternalIds().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key.getPublicKey())))); reloadUser(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, ""No identities found for user""); }",dcaf1e82d163d303e77da37e1db8b57170e62569,noExternalIds(),noExternalIds(),3,5,"@org.junit.Test public void noExternalIds() throws java.lang.Exception { com.google.gerrit.server.account.ExternalIdsUpdate externalIdsUpdate = externalIdsUpdateFactory.create(); externalIdsUpdate.deleteAll(db, user.getAccountId()); reloadUser(); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); com.google.gerrit.gpg.PublicKeyChecker checker = checkerFactory.create(user, store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, ""No identities found for user; check http://test/#/settings/web-identities""); checker = checkerFactory.create().setStore(store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, ""Key is not associated with any users""); externalIdsUpdate.insert(db, com.google.gerrit.server.account.ExternalId.create(com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key.getPublicKey()), user.getAccountId())); reloadUser(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, ""No identities found for user""); }",6a9913bba5c54607aea7fcb82da51636a2b2bf3c,noExternalIds(),64301,266,272
59081,gerrit-server_src_main_java_com_google_gerrit_server_project_ProjectControl.java,14.0,"public boolean canReadCommit(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(getProject().getNameKey()); try { com.google.gerrit.server.git.VisibleRefFilter filter = new com.google.gerrit.server.git.VisibleRefFilter(tagCache, changeCache, repo, this, db, true); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> visibleRefs = filter.filter(repo.getAllRefs(), true); if ((!(visibleRefs.isEmpty())) && (com.google.gerrit.server.change.IncludedInResolver.includedInOne(repo, rw, commit, visibleRefs.values()))) { return true; } } finally { repo.close(); } } catch (java.io.IOException e) { java.lang.String msg = java.lang.String.format(""Cannot verify permissions to commit object %s in repository %s"", commit.name(), getProject().getNameKey()); com.google.gerrit.server.project.ProjectControl.log.error(msg, e); } return false; }",2c6931492705895f08bd2107ce0335c029cf1b28,"public boolean canReadCommit(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(getProject().getNameKey()); try { return isMergedIntoVisibleRef(repo, db, rw, commit, repo.getAllRefs()); } finally { repo.close(); } } catch (java.io.IOException e) { java.lang.String msg = java.lang.String.format(""Cannot verify permissions to commit object %s in repository %s"", commit.name(), getProject().getNameKey()); com.google.gerrit.server.project.ProjectControl.log.error(msg, e); return false; } }",3f24f761387ce29a98a0ec0a0ca2b6713ebf01c9,"canReadCommit(com.google.gerrit.reviewdb.server.ReviewDb,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)","canReadCommit(com.google.gerrit.reviewdb.server.ReviewDb,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)",3,15,"public boolean canReadCommit(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.Repository repo = openRepository(); try { return isMergedIntoVisibleRef(repo, db, rw, commit, repo.getAllRefs()); } finally { repo.close(); } } catch (java.io.IOException e) { java.lang.String msg = java.lang.String.format(""Cannot verify permissions to commit object %s in repository %s"", commit.name(), getProject().getNameKey()); com.google.gerrit.server.project.ProjectControl.log.error(msg, e); return false; } }",3a9d7c2c97422bb9ac56e7ad7d3934310c7c6a12,"canReadCommit(com.google.gerrit.reviewdb.server.ReviewDb,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)",192226,183,175
103010,example-sshCommandDelegateDynamicBean_src_main_java_com_googlesource_gerrit_plugins_examples_sshcommanddelegatedynamicbean_AdminExampleOptions.java,,,,"@java.lang.Override public void onBeanParseEnd(java.lang.String plugin, java.lang.Object bean) { com.googlesource.gerrit.plugins.examples.adminsshcommand.AdminExampleCommand cmd = ((com.googlesource.gerrit.plugins.examples.adminsshcommand.AdminExampleCommand) (bean)); cmd.setRunCount(runCount); }",024ee7aec8929e1a46a251a196044e0e29b27930,,"onBeanParseEnd(java.lang.String,java.lang.Object)",4,1,"@java.lang.Override public void onBeanParseEnd(java.lang.String plugin, java.lang.Object bean) { com.googlesource.gerrit.plugins.examples.adminsshcommand.AdminExampleCommand cmd = ((com.googlesource.gerrit.plugins.examples.adminsshcommand.AdminExampleCommand) (bean)); if (countSet) { cmd.setCount(count); } }",6fa15828f25bfa7090f0bf5ab5db8ba7fba8bdd9,"onBeanParseEnd(java.lang.String,java.lang.Object)",11826,84,89
37041,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,11.0,"private void validateNewCommits(com.google.gerrit.server.project.RefControl ctl, org.eclipse.jgit.transport.ReceiveCommand cmd) { final org.eclipse.jgit.revwalk.RevWalk walk = rp.getRevWalk(); walk.reset(); walk.sort(RevSort.NONE); try { walk.markStart(walk.parseCommit(cmd.getNewId())); for (org.eclipse.jgit.lib.ObjectId id : existingObjects()) { try { walk.markUninteresting(walk.parseCommit(id)); } catch (java.io.IOException e) { continue; } } org.eclipse.jgit.revwalk.RevCommit c; while ((c = walk.next()) != null) { if (!(validCommit(ctl, cmd, c))) { break; } } } catch (java.io.IOException err) { cmd.setResult(com.google.gerrit.server.git.REJECTED_MISSING_OBJECT); com.google.gerrit.server.git.ReceiveCommits.log.error(""Invalid pack upload; one or more objects weren't sent"", err); } }",649460a6b8b657289bf68c780ae82e043743bdae,"private void validateNewCommits(com.google.gerrit.server.project.RefControl ctl, org.eclipse.jgit.transport.ReceiveCommand cmd) { if ((((ctl.canForgeAuthor()) && (ctl.canForgeCommitter())) && (ctl.canForgeGerritServerIdentity())) && (ctl.canUploadMerges())) { return; } final org.eclipse.jgit.revwalk.RevWalk walk = rp.getRevWalk(); walk.reset(); walk.sort(RevSort.NONE); try { walk.markStart(walk.parseCommit(cmd.getNewId())); for (org.eclipse.jgit.lib.ObjectId id : existingObjects()) { try { walk.markUninteresting(walk.parseCommit(id)); } catch (java.io.IOException e) { continue; } } org.eclipse.jgit.revwalk.RevCommit c; while ((c = walk.next()) != null) { if (!(validCommit(ctl, cmd, c))) { break; } } } catch (java.io.IOException err) { cmd.setResult(com.google.gerrit.server.git.REJECTED_MISSING_OBJECT); com.google.gerrit.server.git.ReceiveCommits.log.error(""Invalid pack upload; one or more objects weren't sent"", err); } }",fc9aa25e221e7b2a0224e828d982f782e1caa141,"validateNewCommits(com.google.gerrit.server.project.RefControl,org.eclipse.jgit.transport.ReceiveCommand)","validateNewCommits(com.google.gerrit.server.project.RefControl,org.eclipse.jgit.transport.ReceiveCommand)",2,11,"private void validateNewCommits(com.google.gerrit.server.project.RefControl ctl, org.eclipse.jgit.transport.ReceiveCommand cmd) { if ((((((((ctl.canForgeAuthor()) && (ctl.canForgeCommitter())) && (ctl.canForgeGerritServerIdentity())) && (ctl.canUploadMerges())) && (!(project.isUseSignedOffBy()))) && (com.google.common.collect.Iterables.isEmpty(rejectCommits))) && (!(GitRepositoryManager.REF_CONFIG.equals(ctl.getRefName())))) && (!((com.google.gerrit.server.util.MagicBranch.isMagicBranch(cmd.getRefName())) || (com.google.gerrit.server.git.ReceiveCommits.NEW_PATCHSET.matcher(cmd.getRefName()).matches())))) { return; } final org.eclipse.jgit.revwalk.RevWalk walk = rp.getRevWalk(); walk.reset(); walk.sort(RevSort.NONE); try { walk.markStart(walk.parseCommit(cmd.getNewId())); for (org.eclipse.jgit.lib.ObjectId id : existingObjects()) { try { walk.markUninteresting(walk.parseCommit(id)); } catch (java.io.IOException e) { continue; } } org.eclipse.jgit.revwalk.RevCommit c; while ((c = walk.next()) != null) { if (!(validCommit(ctl, cmd, c))) { break; } } } catch (java.io.IOException err) { cmd.setResult(com.google.gerrit.server.git.REJECTED_MISSING_OBJECT); com.google.gerrit.server.git.ReceiveCommits.log.error(""Invalid pack upload; one or more objects weren't sent"", err); } }",009ff01a5a146f5b855ea1bb9832e5db9551b0d1,"validateNewCommits(com.google.gerrit.server.project.RefControl,org.eclipse.jgit.transport.ReceiveCommand)",40947,299,406
46600,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_RevertAction.java,,,,"static void call(com.google.gwt.user.client.ui.Button b, final com.google.gerrit.reviewdb.client.Change.Id id, final java.lang.String revision, java.lang.String project, final java.lang.String commitSubject) { b.setEnabled(false); new com.google.gerrit.client.ui.ActionDialog(b, false, Util.C.revertChangeTitle(), Util.C.headingRevertMessage()) { { sendButton.setText(Util.C.buttonRevertChangeSend()); message.setText(Util.M.revertChangeDefaultMessage(commitSubject, revision)); } @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.revert(id.get(), getMessageText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeInfo result) { sent = true; com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange2(id)); hide(); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } }.center(); }",94cf823c32eafcb06bf0816ddd19666b8b1ed772,,"call(com.google.gwt.user.client.ui.Button,com.google.gerrit.reviewdb.client.Change$Id,java.lang.String,java.lang.String,java.lang.String)",28,3,"static void call(com.google.gwt.user.client.ui.Button b, final com.google.gerrit.reviewdb.client.Change.Id id, final java.lang.String revision, java.lang.String project, final java.lang.String commitSubject) { b.setEnabled(false); new com.google.gerrit.client.ui.ActionDialog(b, false, Util.C.revertChangeTitle(), Util.C.headingRevertMessage()) { { sendButton.setText(Util.C.buttonRevertChangeSend()); message.setText(Util.M.revertChangeDefaultMessage(commitSubject, revision)); } @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.revert(id.get(), getMessageText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange2(result.legacy_id())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } }.center(); }",f43485a5cef877183042fc47674bcc61488fef3a,"call(com.google.gwt.user.client.ui.Button,com.google.gerrit.reviewdb.client.Change$Id,java.lang.String,java.lang.String,java.lang.String)",123507,319,323
60542,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.google.common.base.Optional<java.lang.Boolean> isMergeable() throws com.google.gwtorm.server.OrmException { return mergeabilityCache.get(change()); },685bfdb10e0a03316a4794328246faa10c6b23d0,,isMergeable(),21,31,"public boolean isMergeable() throws com.google.gwtorm.server.OrmException { if ((mergeable) == null) { com.google.gerrit.reviewdb.client.Change c = change(); if ((c.getStatus()) == (Change.Status.MERGED)) { mergeable = true; } else { com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(); org.eclipse.jgit.lib.Repository repo = null; try { repo = repoManager.openRepository(c.getProject()); org.eclipse.jgit.lib.Ref ref = repo.getRef(c.getDest().get()); com.google.gerrit.common.data.SubmitTypeRecord rec = new com.google.gerrit.server.project.SubmitRuleEvaluator(this).getSubmitType(); if ((rec.status) != (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException((""Error in mergeability check: "" + (rec.errorMessage))); } java.lang.String mergeStrategy = mergeUtilFactory.create(projectCache.get(c.getProject())).mergeStrategyName(); mergeable = mergeabilityCache.get(org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get()), ref, rec.type, mergeStrategy, c.getDest(), repo, db); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } finally { if (repo != null) { repo.close(); } } } } return mergeable; }",b300bf24014b2221a9cbad386e23c2b1999e67cf,isMergeable(),21306,45,357
110346,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_NoteDbMigrator.java,1.0,"public void autoRebuild() throws com.google.gwtorm.server.OrmException, java.io.IOException { checkAutoRebuildPreconditions(); java.util.Optional<com.google.gerrit.server.notedb.NotesMigrationState> maybeState = loadState(); if (!(maybeState.isPresent())) { throw new com.google.gerrit.server.notedb.rebuild.MigrationException(""Could not determine initial migration state""); } com.google.gerrit.server.notedb.NotesMigrationState state = maybeState.get(); if ((trial) && ((state.compareTo(NotesMigrationState.READ_WRITE_NO_SEQUENCE)) > 0)) { throw new com.google.gerrit.server.notedb.rebuild.MigrationException((""Migration has already progressed past the endpoint of the \""trial mode\"" state;"" + "" NoteDb is already the primary storage for some changes"")); } boolean rebuilt = false; while ((state.compareTo(NotesMigrationState.NOTE_DB_UNFUSED)) < 0) { if ((trial) && ((state.compareTo(NotesMigrationState.READ_WRITE_NO_SEQUENCE)) >= 0)) { return; } switch (state) { case REVIEW_DB : state = turnOnWrites(state); break; case WRITE : state = rebuildAndEnableReads(state); rebuilt = true; break; case READ_WRITE_NO_SEQUENCE : if ((forceRebuild) && (!rebuilt)) { state = rebuildAndEnableReads(state); rebuilt = true; } state = enableSequences(); break; case READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY : if ((forceRebuild) && (!rebuilt)) { state = rebuildAndEnableReads(state); rebuilt = true; } state = setNoteDbPrimary(); break; case READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY : state = disableReviewDb(); break; case NOTE_DB_UNFUSED : break; case NOTE_DB : default : throw new com.google.gerrit.server.notedb.rebuild.MigrationException((""Migration out of the following state is not supported:\n"" + (state.toText()))); } } }",3d1e4334105b7e883d23719023d97c99a1d32252,"public void migrate() throws com.google.gwtorm.server.OrmException, java.io.IOException { checkAutoRebuildPreconditions(); java.util.Optional<com.google.gerrit.server.notedb.NotesMigrationState> maybeState = loadState(); if (!(maybeState.isPresent())) { throw new com.google.gerrit.server.notedb.rebuild.MigrationException(""Could not determine initial migration state""); } com.google.gerrit.server.notedb.NotesMigrationState state = maybeState.get(); if ((trial) && ((state.compareTo(NotesMigrationState.READ_WRITE_NO_SEQUENCE)) > 0)) { throw new com.google.gerrit.server.notedb.rebuild.MigrationException((""Migration has already progressed past the endpoint of the \""trial mode\"" state;"" + "" NoteDb is already the primary storage for some changes"")); } boolean rebuilt = false; while ((state.compareTo(NotesMigrationState.NOTE_DB_UNFUSED)) < 0) { if ((trial) && ((state.compareTo(NotesMigrationState.READ_WRITE_NO_SEQUENCE)) >= 0)) { return; } switch (state) { case REVIEW_DB : state = turnOnWrites(state); break; case WRITE : state = rebuildAndEnableReads(state); rebuilt = true; break; case READ_WRITE_NO_SEQUENCE : if ((forceRebuild) && (!rebuilt)) { state = rebuildAndEnableReads(state); rebuilt = true; } state = enableSequences(); break; case READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY : if ((forceRebuild) && (!rebuilt)) { state = rebuildAndEnableReads(state); rebuilt = true; } state = setNoteDbPrimary(); break; case READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY : state = disableReviewDb(); break; case NOTE_DB_UNFUSED : break; case NOTE_DB : default : throw new com.google.gerrit.server.notedb.rebuild.MigrationException((""Migration out of the following state is not supported:\n"" + (state.toText()))); } } }",d0d146e1adb6a18fe4aca104dcd7563b60035ff3,autoRebuild(),migrate(),4,1,"public void migrate() throws com.google.gwtorm.server.OrmException, java.io.IOException { checkState(((changes.isEmpty()) && (projects.isEmpty())), ""cannot set changes or projects during auto-migration; call rebuild() instead""); java.util.Optional<com.google.gerrit.server.notedb.NotesMigrationState> maybeState = loadState(); if (!(maybeState.isPresent())) { throw new com.google.gerrit.server.notedb.rebuild.MigrationException(""Could not determine initial migration state""); } com.google.gerrit.server.notedb.NotesMigrationState state = maybeState.get(); if ((trial) && ((state.compareTo(NotesMigrationState.READ_WRITE_NO_SEQUENCE)) > 0)) { throw new com.google.gerrit.server.notedb.rebuild.MigrationException((""Migration has already progressed past the endpoint of the \""trial mode\"" state;"" + "" NoteDb is already the primary storage for some changes"")); } boolean rebuilt = false; while ((state.compareTo(NotesMigrationState.NOTE_DB_UNFUSED)) < 0) { if ((trial) && ((state.compareTo(NotesMigrationState.READ_WRITE_NO_SEQUENCE)) >= 0)) { return; } switch (state) { case REVIEW_DB : state = turnOnWrites(state); break; case WRITE : state = rebuildAndEnableReads(state); rebuilt = true; break; case READ_WRITE_NO_SEQUENCE : if ((forceRebuild) && (!rebuilt)) { state = rebuildAndEnableReads(state); rebuilt = true; } state = enableSequences(); break; case READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY : if ((forceRebuild) && (!rebuilt)) { state = rebuildAndEnableReads(state); rebuilt = true; } state = setNoteDbPrimary(); break; case READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY : state = disableReviewDb(); break; case NOTE_DB_UNFUSED : break; case NOTE_DB : default : throw new com.google.gerrit.server.notedb.rebuild.MigrationException((""Migration out of the following state is not supported:\n"" + (state.toText()))); } } }",77a9b15ef184a8c036822877ae7a9978eaf28416,migrate(),101166,484,508
148032,javatests_com_google_gerrit_server_group_db_GroupRebuilderTest.java,31.0,"@org.junit.Test public void memberAuditLegacyRemoved() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 2)).memberAudit(addAndLegacyRemoveMember(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs()), addMember(g, 2, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), ""Create group""); assertCommit(log.get(1), ""Update group\n\nAdd: Account 1 <1@server-id>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(2), ""Update group\n\nRemove: Account 1 <1@server-id>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(3), ""Update group\n\nAdd: Account 2 <2@server-id>"", ""Account 8"", ""8@server-id""); }",84cbadc479ede55a13943931f35749a17ec9d56b,"@org.junit.Test public void memberAuditLegacyRemoved() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 2)).memberAudit(addAndLegacyRemoveMember(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs()), addMember(g, 2, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), ""Create account""); assertCommit(log.get(1), ""Update account\n\nAdd: Account 1 <1@server-id>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(2), ""Update account\n\nRemove: Account 1 <1@server-id>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(3), ""Update account\n\nAdd: Account 2 <2@server-id>"", ""Account 8"", ""8@server-id""); }",1cc2d1650be4d416bb037bb5be5fa6fc06aaa731,memberAuditLegacyRemoved(),memberAuditLegacyRemoved(),17,31,"@org.junit.Test public void memberAuditLegacyRemoved() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup(""a""); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 2)).memberAudit(addAndLegacyRemoveMember(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs()), addMember(g, 2, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), ""Create group""); assertCommit(log.get(1), ""Update group\n\nAdd: Account 1 <1@server-id>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(2), ""Update group\n\nRemove: Account 1 <1@server-id>"", ""Account 8"", ""8@server-id""); assertCommit(log.get(3), ""Update group\n\nAdd: Account 2 <2@server-id>"", ""Account 8"", ""8@server-id""); }",84cbadc479ede55a13943931f35749a17ec9d56b,memberAuditLegacyRemoved(),217986,334,334
63401,src_main_java_com_googlesource_gerrit_plugins_xdocs_client_ChangeApi.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static com.google.gerrit.plugin.client.rpc.RestApi edit(int id) { return com.googlesource.gerrit.plugins.xdocs.client.ChangeApi.change(id).view(""edit""); }",d5d7277b9714fd8f8ce9d39fa276b0018ce69757,,edit(int),4,0,"private static com.google.gerrit.plugin.client.rpc.RestApi edit(int id) { return com.googlesource.gerrit.plugins.xdocs.client.ChangeApi.change(id).view(""edit""); }",083d54821c89bd553cf8020a4c865f824e597018,edit(int),205961,50,50
148230,java_com_google_gerrit_testing_SchemaUpgradeTestEnvironment.java,0.0,"private void setUp() throws java.lang.Exception { injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testing.InMemoryModule()); injector.injectMembers(this); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); lifecycle.start(); try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); setApiUser(accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(""user"")).getAccountId()); }",6c4f2d829f91e4077ca1cad8c86dc74e975239f4,"private void setUp(java.lang.Object target) throws java.lang.Exception { injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testing.InMemoryModule()); injector.injectMembers(this); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); lifecycle.start(); try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); setApiUser(accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(""user"")).getAccountId()); injector.injectMembers(target); }",91d8c3a2ad6b84a6b444a1ce23d15fcfbe16702e,setUp(),setUp(java.lang.Object),2,0,"private void setUp(java.lang.Object target) throws java.lang.Exception { com.google.inject.Injector injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testing.InMemoryModule()); injector.injectMembers(this); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); lifecycle.start(); try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); setApiUser(accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(""user"")).getAccountId()); injector.injectMembers(target); }",00e5b2cb4b88dcfa02f49f505921221bc30f221f,setUp(java.lang.Object),128071,158,165
61866,src_main_java_com_googlesource_gerrit_plugins_xdocs_client_XDocSideBySideDiffScreen.java,,,,"@java.lang.Override protected void display(com.googlesource.gerrit.plugins.xdocs.client.ChangeInfo change) { java.lang.String frameIdA = ""xdoc_sidebyside_diff_a_iframe""; com.google.gwt.user.client.ui.Frame frameA = new com.google.gwt.user.client.ui.Frame(com.googlesource.gerrit.plugins.xdocs.client.XDocScreen.getUrl(change.project(), getRevisionSideA(), getFile())); frameA.getElement().setId(frameIdA); com.googlesource.gerrit.plugins.xdocs.client.XDocScreen.resize(frameA, frameIdA); java.lang.String frameIdB = ""xdoc_sidebyside_diff_b_iframe""; com.google.gwt.user.client.ui.Frame frameB = new com.google.gwt.user.client.ui.Frame(com.googlesource.gerrit.plugins.xdocs.client.XDocScreen.getUrl(change.project(), getRevisionSideB(), getFile())); frameB.getElement().setId(frameIdB); com.googlesource.gerrit.plugins.xdocs.client.XDocScreen.resize(frameB, frameIdB); com.google.gwt.user.client.ui.HorizontalPanel p = new com.google.gwt.user.client.ui.HorizontalPanel(); p.setVerticalAlignment(com.googlesource.gerrit.plugins.xdocs.client.ALIGN_MIDDLE); p.setStyleName(""xdocs-sidebyside-panel""); p.add(frameA); p.add(frameB); add(p); }",6e7cad04ee9247ce8d2e13e2042807fc5bc6402a,,display(com.googlesource.gerrit.plugins.xdocs.client.ChangeInfo),3,0,"@java.lang.Override protected void display(com.googlesource.gerrit.plugins.xdocs.client.ChangeInfo change) { java.lang.String frameIdA = ""xdoc_sidebyside_diff_a_iframe""; com.google.gwt.user.client.ui.Frame frameA = new com.google.gwt.user.client.ui.Frame(com.googlesource.gerrit.plugins.xdocs.client.XDocScreen.getUrl(change.project(), getRevisionSideA(), getPath())); frameA.getElement().setId(frameIdA); com.googlesource.gerrit.plugins.xdocs.client.XDocScreen.resize(frameA, frameIdA); java.lang.String frameIdB = ""xdoc_sidebyside_diff_b_iframe""; com.google.gwt.user.client.ui.Frame frameB = new com.google.gwt.user.client.ui.Frame(com.googlesource.gerrit.plugins.xdocs.client.XDocScreen.getUrl(change.project(), getRevisionSideB(), getPath())); frameB.getElement().setId(frameIdB); com.googlesource.gerrit.plugins.xdocs.client.XDocScreen.resize(frameB, frameIdB); com.google.gwt.user.client.ui.HorizontalPanel p = new com.google.gwt.user.client.ui.HorizontalPanel(); p.setVerticalAlignment(com.googlesource.gerrit.plugins.xdocs.client.ALIGN_MIDDLE); p.setStyleName(""xdocs-sidebyside-panel""); p.add(frameA); p.add(frameB); add(p); }",5e42efe0f0a10c76b32a835c475c02e30de88e32,display(com.googlesource.gerrit.plugins.xdocs.client.ChangeInfo),168900,369,371
148032,java_com_google_gerrit_server_restapi_group_GroupJson.java,2.0,"public com.google.gerrit.extensions.common.GroupInfo format(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return createGroupInfo(rsrc.getGroup(), rsrc::getControl); }",984091a7e8aec2400311a9443c9c299813678d57,"public com.google.gerrit.extensions.common.GroupInfo format(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return createGroupInfo(rsrc.getGroup(), rsrc::getControl); }",6c6d7918dba18a4603fc90c02b10309f9402785d,format(com.google.gerrit.server.group.GroupResource),format(com.google.gerrit.server.restapi.group.GroupResource),17,7,"public com.google.gerrit.extensions.common.GroupInfo format(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return createGroupInfo(rsrc.getGroup(), rsrc::getControl); }",984091a7e8aec2400311a9443c9c299813678d57,format(com.google.gerrit.server.group.GroupResource),218816,65,62
38645,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_UnifiedDiffTable.java,9.0,"private void appendLineText(final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m, boolean syntaxHighlighting, final com.google.gerrit.client.patches.PatchLine.Type type, final com.google.gerrit.prettify.common.SparseHtmlFile src, final int i) { final com.google.gwtexpui.safehtml.client.SafeHtml text = src.getSafeHtmlLine(i); m.openTd(); m.addStyleName(Gerrit.RESOURCES.css().diffText()); switch (type) { case Type.CONTEXT : m.addStyleName(Gerrit.RESOURCES.css().diffTextCONTEXT()); m.nbsp(); m.append(text); break; case Type.DELETE : m.addStyleName(Gerrit.RESOURCES.css().diffTextDELETE()); if (syntaxHighlighting) { m.addStyleName(Gerrit.RESOURCES.css().fileLineDELETE()); } m.append(""-""); m.append(text); break; case Type.INSERT : m.addStyleName(Gerrit.RESOURCES.css().diffTextINSERT()); if (syntaxHighlighting) { m.addStyleName(Gerrit.RESOURCES.css().fileLineINSERT()); } m.append(""+""); m.append(text); break; } m.closeTd(); }",7ef3feb4076e644894d78718861ce06aec80b9d9,"private void appendLineText(final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m, boolean syntaxHighlighting, final com.google.gerrit.client.patches.PatchLine.Type type, final com.google.gerrit.prettify.common.SparseHtmlFile src, final int i) { final com.google.gwtexpui.safehtml.client.SafeHtml text = src.getSafeHtmlLine(i); m.openTd(); m.addStyleName(Gerrit.RESOURCES.css().diffText()); m.setStyleName(Gerrit.RESOURCES.css().fileLine()); switch (type) { case Type.CONTEXT : m.addStyleName(Gerrit.RESOURCES.css().diffTextCONTEXT()); m.nbsp(); m.append(text); break; case Type.DELETE : m.addStyleName(Gerrit.RESOURCES.css().diffTextDELETE()); if (syntaxHighlighting) { m.addStyleName(Gerrit.RESOURCES.css().fileLineDELETE()); } m.append(""-""); m.append(text); break; case Type.INSERT : m.addStyleName(Gerrit.RESOURCES.css().diffTextINSERT()); if (syntaxHighlighting) { m.addStyleName(Gerrit.RESOURCES.css().fileLineINSERT()); } m.append(""+""); m.append(text); break; } m.closeTd(); }",6f3ecbef4571e6e52a15cefafbde50cba60cac21,"appendLineText(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder,boolean,com.google.gerrit.client.patches.PatchLine$Type,com.google.gerrit.prettify.common.SparseHtmlFile,int)","appendLineText(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder,boolean,com.google.gerrit.client.patches.PatchLine$Type,com.google.gerrit.prettify.common.SparseHtmlFile,int)",3,9,"private void appendLineText(final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m, boolean syntaxHighlighting, final com.google.gerrit.client.patches.PatchLine.Type type, final com.google.gerrit.prettify.common.SparseHtmlFile src, final int i) { final com.google.gwtexpui.safehtml.client.SafeHtml text = src.getSafeHtmlLine(i); m.openTd(); m.setStyleName(Gerrit.RESOURCES.css().fileLine()); m.addStyleName(Gerrit.RESOURCES.css().diffText()); switch (type) { case Type.CONTEXT : m.addStyleName(Gerrit.RESOURCES.css().diffTextCONTEXT()); m.nbsp(); m.append(text); break; case Type.DELETE : m.addStyleName(Gerrit.RESOURCES.css().diffTextDELETE()); if (syntaxHighlighting) { m.addStyleName(Gerrit.RESOURCES.css().fileLineDELETE()); } m.append(""-""); m.append(text); break; case Type.INSERT : m.addStyleName(Gerrit.RESOURCES.css().diffTextINSERT()); if (syntaxHighlighting) { m.addStyleName(Gerrit.RESOURCES.css().fileLineINSERT()); } m.append(""+""); m.append(text); break; } m.closeTd(); }",66de78b3a945897951235c476a4dcf0cfa959edb,"appendLineText(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder,boolean,com.google.gerrit.client.patches.PatchLine$Type,com.google.gerrit.prettify.common.SparseHtmlFile,int)",137340,302,302
88117,gerrit-pgm_src_main_java_com_google_gerrit_pgm_Init.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override protected boolean getDeleteCache() { return deleteCache; },669555ec8f1902697931d83a2d6417644d176ea0,,getDeleteCache(),3,16,@java.lang.Override protected boolean getDeleteCaches() { return deleteCaches; },f9b1b9dc1b7c958a68026bf48a393a8587fe4bd7,getDeleteCaches(),78210,18,20
88331,gerrit-server_src_main_java_com_google_gerrit_server_mail_CommentSender.java,6.0,"private void appendFileLine(java.lang.StringBuilder cmts, com.google.gerrit.server.patch.PatchFile fileData, short side, int line) { cmts.append((""Line "" + line)); try { final java.lang.String lineStr = fileData.getLine(side, line); cmts.append("": ""); cmts.append(lineStr); } catch (java.lang.Throwable e) { } cmts.append(""\n""); }",98ad4c57709d838768c5535455770acecd448456,"private void appendFileLine(java.lang.StringBuilder cmts, com.google.gerrit.server.patch.PatchFile fileData, short side, int line) { java.lang.String lineStr = getLine(fileData, side, line); cmts.append(((((""Line "" + line) + "": "") + lineStr) + ""\n"")); }",3c7179ab4a2c380f52fd834e09d2fa0d2cde6e2c,"appendFileLine(java.lang.StringBuilder,com.google.gerrit.server.patch.PatchFile,short,int)","appendFileLine(java.lang.StringBuilder,com.google.gerrit.server.patch.PatchFile,short,int)",6,6,"private void appendFileLine(java.lang.StringBuilder cmts, com.google.gerrit.server.patch.PatchFile fileData, short side, int line) { java.lang.String lineStr = getLine(fileData, side, line); cmts.append(""Line "").append(line).append("": "").append(lineStr).append(""\n""); }",c9a7e5256f1e6df5fffdf7f383dc1dae8b5bebce,"appendFileLine(java.lang.StringBuilder,com.google.gerrit.server.patch.PatchFile,short,int)",91996,84,85
16294,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_ReviewDb.java,4.0,@com.google.gwtorm.client.Relation com.google.gerrit.reviewdb.AccountGroupNameAccess accountGroupNames();,e80369b8793bea9c8884aefabb48d6ace5aa9d54,@com.google.gwtorm.client.Relation(id = 10) com.google.gerrit.reviewdb.AccountGroupNameAccess accountGroupNames();,75a53c0cf60387343835e1ba6cbf8e8b510e80ed,accountGroupNames(),accountGroupNames(),2,4,@com.google.gwtorm.client.Relation(id = 11) com.google.gerrit.reviewdb.AccountGroupNameAccess accountGroupNames();,58e0dcdd459b89e2af1cc649e62ef417c2677c70,accountGroupNames(),97520,33,34
57790,gerrit-server_src_test_java_com_google_gerrit_server_notedb_ChangeNotesTest.java,9.0,"@org.junit.Test public void changeMessageWithTrailingDoubleNewline() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.setChangeMessage((""Testing trailing double newline\n"" + ""\n"")); update.commit(); org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo); try { org.eclipse.jgit.revwalk.RevCommit commit = walk.parseCommit(update.getRevision()); walk.parseBody(commit); assertEquals((""Update patch set 1\n"" + (((((""\n"" + ""Testing trailing double newline\n"") + ""\n"") + ""\n"") + ""\n"") + ""Patch-set: 1\n"")), commit.getFullMessage()); } finally { walk.release(); } com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); java.util.List<java.lang.String> changeMessages = notes.getChangeMessages(); assertEquals(1, changeMessages.size()); assertEquals((""Testing trailing double newline\n"" + ""\n""), changeMessages.get(0)); }",c76993d2175ccf0f92a9ae3f6a93093abae81ffb,"@org.junit.Test public void changeMessageWithTrailingDoubleNewline() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.setChangeMessage((""Testing trailing double newline\n"" + ""\n"")); update.commit(); org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo); try { org.eclipse.jgit.revwalk.RevCommit commit = walk.parseCommit(update.getRevision()); walk.parseBody(commit); assertEquals((""Update patch set 1\n"" + (((((""\n"" + ""Testing trailing double newline\n"") + ""\n"") + ""\n"") + ""\n"") + ""Patch-set: 1\n"")), commit.getFullMessage()); } finally { walk.release(); } com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); java.util.List<com.google.gerrit.reviewdb.client.ChangeMessage> changeMessages = notes.getChangeMessages(); assertEquals(1, changeMessages.size()); assertEquals((""Testing trailing double newline\n"" + ""\n""), changeMessages.get(0).getMessage()); }",ad9958891b2f4673d9ac9e87c7c813719b75dee5,changeMessageWithTrailingDoubleNewline(),changeMessageWithTrailingDoubleNewline(),6,10,"@org.junit.Test public void changeMessageWithTrailingDoubleNewline() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.setChangeMessage((""Testing trailing double newline\n"" + ""\n"")); update.commit(); com.google.gerrit.reviewdb.client.PatchSet.Id ps1 = c.currentPatchSetId(); org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo); try { org.eclipse.jgit.revwalk.RevCommit commit = walk.parseCommit(update.getRevision()); walk.parseBody(commit); assertEquals((""Update patch set 1\n"" + (((((""\n"" + ""Testing trailing double newline\n"") + ""\n"") + ""\n"") + ""\n"") + ""Patch-set: 1\n"")), commit.getFullMessage()); } finally { walk.release(); } com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.ChangeMessage> changeMessages = notes.getChangeMessages(); assertEquals(1, changeMessages.keySet().size()); com.google.gerrit.reviewdb.client.ChangeMessage cm1 = com.google.common.collect.Iterables.getOnlyElement(changeMessages.get(ps1)); assertEquals((""Testing trailing double newline\n"" + ""\n""), cm1.getMessage()); assertEquals(changeOwner.getAccount().getId(), cm1.getAuthor()); }",a7588c13a27b2a68217f66fb1b243b1d79efa512,changeMessageWithTrailingDoubleNewline(),49183,291,393
62758,gerrit-server_src_main_java_com_google_gerrit_server_schema_Schema_102.java,0.0,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { com.google.gwtorm.jdbc.JdbcSchema schema = ((com.google.gwtorm.jdbc.JdbcSchema) (db)); com.google.gwtorm.schema.sql.SqlDialect dialect = schema.getDialect(); try (java.sql.Statement stmt = schema.getConnection().createStatement()) { stmt.executeUpdate(""DROP INDEX changes_byProjectOpen""); if (dialect instanceof com.google.gwtorm.schema.sql.DialectPostgreSQL) { stmt.executeUpdate((""CREATE INDEX changes_byProjectOpen"" + ("" ON changes (dest_project_name, last_updated_on)"" + "" WHERE open = 'Y'""))); } else { stmt.executeUpdate((""CREATE INDEX changes_byProjectOpen"" + "" ON changes (open, dest_project_name, last_updated_on)"")); } } }",1def6f21fef77935d2b56157c4af8521f704c641,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { com.google.gwtorm.jdbc.JdbcSchema schema = ((com.google.gwtorm.jdbc.JdbcSchema) (db)); com.google.gwtorm.schema.sql.SqlDialect dialect = schema.getDialect(); try (java.sql.Statement stmt = schema.getConnection().createStatement()) { java.util.Set<java.lang.String> listIndexes = dialect.listIndexes(schema.getConnection(), ""changes""); for (java.lang.String index : listIndexes) { if (index.equalsIgnoreCase(""changes_allOpen"")) { stmt.executeUpdate((""DROP INDEX "" + index)); } if (index.equalsIgnoreCase(""changes_allClosed"")) { stmt.executeUpdate((""DROP INDEX "" + index)); } if (index.equalsIgnoreCase(""changes_byBranchClosed"")) { stmt.executeUpdate((""DROP INDEX "" + index)); } } stmt.executeUpdate(""DROP INDEX changes_byProjectOpen""); if (dialect instanceof com.google.gwtorm.schema.sql.DialectPostgreSQL) { stmt.executeUpdate((""CREATE INDEX changes_byProjectOpen"" + ("" ON changes (dest_project_name, last_updated_on)"" + "" WHERE open = 'Y'""))); } else { stmt.executeUpdate((""CREATE INDEX changes_byProjectOpen"" + "" ON changes (open, dest_project_name, last_updated_on)"")); } } }",8e23b182828a9246ed5a11ee50d28dba60596969,"migrateData(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.schema.UpdateUI)","migrateData(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.schema.UpdateUI)",6,0,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { com.google.gwtorm.jdbc.JdbcSchema schema = ((com.google.gwtorm.jdbc.JdbcSchema) (db)); com.google.gwtorm.schema.sql.SqlDialect dialect = schema.getDialect(); try (java.sql.Statement stmt = schema.getConnection().createStatement()) { java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(""^changes_(allOpen|allClosed|byBranchClosed)$"", java.util.regex.Pattern.CASE_INSENSITIVE); java.util.Set<java.lang.String> listIndexes = dialect.listIndexes(schema.getConnection(), ""changes""); for (java.lang.String index : listIndexes) { if (pattern.matcher(index).matches()) { stmt.executeUpdate((""DROP INDEX "" + index)); } } stmt.executeUpdate(""DROP INDEX changes_byProjectOpen""); if (dialect instanceof com.google.gwtorm.schema.sql.DialectPostgreSQL) { stmt.executeUpdate((""CREATE INDEX changes_byProjectOpen"" + ("" ON changes (dest_project_name, last_updated_on)"" + "" WHERE open = 'Y'""))); } else { stmt.executeUpdate((""CREATE INDEX changes_byProjectOpen"" + "" ON changes (open, dest_project_name, last_updated_on)"")); } } }",ac76c68a515ac37207746c734a8b55070e701fd8,"migrateData(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.schema.UpdateUI)",1955,368,361
53352,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_ColoringManager.java,,,,"@java.lang.Override public int compare(com.google.gerrit.client.diff.DiffChunkInfo o1, com.google.gerrit.client.diff.DiffChunkInfo o2) { if ((o1.getSide()) == (o2.getSide())) { return (o1.getStart()) - (o2.getStart()); } else if ((o1.getSide()) == (DisplaySide.A)) { int comp = (mapper.lineOnOther(o1.getSide(), o1.getStart()).getLine()) - (o2.getStart()); return comp == 0 ? -1 : comp; } else { int comp = (o1.getStart()) - (mapper.lineOnOther(o2.getSide(), o2.getStart()).getLine()); return comp == 0 ? 1 : comp; } }",ab4fac44a218d6ab29567af73500ed7528199682,,"compare(com.google.gerrit.client.diff.DiffChunkInfo,com.google.gerrit.client.diff.DiffChunkInfo)",5,3,"@java.lang.Override public int compare(com.google.gerrit.client.diff.DiffChunkInfo a, com.google.gerrit.client.diff.DiffChunkInfo b) { if ((a.getSide()) == (b.getSide())) { return (a.getStart()) - (b.getStart()); } else if ((a.getSide()) == (DisplaySide.A)) { int comp = (mapper.lineOnOther(a.getSide(), a.getStart()).getLine()) - (b.getStart()); return comp == 0 ? -1 : comp; } else { int comp = (a.getStart()) - (mapper.lineOnOther(b.getSide(), b.getStart()).getLine()); return comp == 0 ? 1 : comp; } }",9a1f1ccc79151c92e26083f46449ea89f761fced,"compare(com.google.gerrit.client.diff.DiffChunkInfo,com.google.gerrit.client.diff.DiffChunkInfo)",199332,170,170
70457,gerrit-server_src_main_java_com_google_gerrit_server_git_ProjectConfig.java,63.0,"private void savePluginSections(org.eclipse.jgit.lib.Config rc) { java.util.List<java.lang.String> existing = com.google.common.collect.Lists.newArrayList(rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)); for (java.lang.String name : existing) { rc.unsetSection(com.google.gerrit.server.git.ProjectConfig.PLUGIN, name); } for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Config> e : pluginConfigs.entrySet()) { java.lang.String plugin = e.getKey(); org.eclipse.jgit.lib.Config pluginConfig = e.getValue(); for (java.lang.String name : pluginConfig.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(pluginConfig.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }",48cbea9053df944c5af18a4d3283b0fb6e99eab1,"private void savePluginSections(org.eclipse.jgit.lib.Config rc, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> keepGroups) { java.util.List<java.lang.String> existing = com.google.common.collect.Lists.newArrayList(rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)); for (java.lang.String name : existing) { rc.unsetSection(com.google.gerrit.server.git.ProjectConfig.PLUGIN, name); } for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Config> e : pluginConfigs.entrySet()) { java.lang.String plugin = e.getKey(); org.eclipse.jgit.lib.Config pluginConfig = e.getValue(); for (java.lang.String name : pluginConfig.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { java.lang.String value = pluginConfig.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); if (value.startsWith(""Group["")) { com.google.gerrit.common.data.GroupReference ref = resolve(com.google.gerrit.common.data.GroupReference.fromString(value)); if ((ref.getUUID()) != null) { keepGroups.add(ref.getUUID()); rc.setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, ref.toString()); } } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(pluginConfig.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }",4ba6cf1040b61c83b4ee0bd150d13b59c06d0c78,savePluginSections(org.eclipse.jgit.lib.Config),"savePluginSections(org.eclipse.jgit.lib.Config,java.util.Set)",3,50,"private void savePluginSections(org.eclipse.jgit.lib.Config rc, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> keepGroups) { java.util.List<java.lang.String> existing = com.google.common.collect.Lists.newArrayList(rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)); for (java.lang.String name : existing) { rc.unsetSection(com.google.gerrit.server.git.ProjectConfig.PLUGIN, name); } for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Config> e : pluginConfigs.entrySet()) { java.lang.String plugin = e.getKey(); org.eclipse.jgit.lib.Config pluginConfig = e.getValue(); for (java.lang.String name : pluginConfig.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { java.lang.String value = pluginConfig.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); if (value.startsWith(""Group["")) { com.google.gerrit.common.data.GroupReference ref = resolve(com.google.gerrit.common.data.GroupReference.fromString(value)); if ((ref.getUUID()) != null) { keepGroups.add(ref.getUUID()); pluginConfig.setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, ref.toString()); } } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(pluginConfig.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }",3f72363451d70d8f82d510d0047f7607f36deec3,"savePluginSections(org.eclipse.jgit.lib.Config,java.util.Set)",16347,422,423
166630,java_com_google_gerrit_common_data_LabelFunction.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean isMandatory() { return isMandatory; },d4945d75ffb378065a392ea6bf7beba9f41063be,,isMandatory(),7,2,public boolean isRequired() { return isRequired; },826b647dcfabb50c5351a2caf5d7b03d6bbd7cce,isRequired(),114544,11,11
125430,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_change_ConsistencyCheckerIT.java,22.0,"private void assertNoProblems(com.google.gerrit.server.project.ChangeControl ctl, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.FixInput fix) { assertThat(checker.check(ctl, fix).problems()).isEmpty(); }",96c2e080f76edba173ce9ab86fb9b8a7cab140f1,"private void assertNoProblems(com.google.gerrit.server.notedb.ChangeNotes notes, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.FixInput fix) throws com.google.gerrit.server.project.NoSuchChangeException { assertThat(checker.check(controlForNotes(notes), fix).problems()).isEmpty(); }",c25643457ffe149c5e0c7179d5179bd38860b1bc,"assertNoProblems(com.google.gerrit.server.project.ChangeControl,com.google.gerrit.extensions.api.changes.FixInput)","assertNoProblems(com.google.gerrit.server.notedb.ChangeNotes,com.google.gerrit.extensions.api.changes.FixInput)",6,49,"private void assertNoProblems(com.google.gerrit.server.notedb.ChangeNotes notes, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.FixInput fix) throws java.lang.Exception { assertThat(checker.check(controlForNotes(notes), fix).problems()).isEmpty(); }",1f55b1723ac4234c97ba4f30897bed171e71df5d,"assertNoProblems(com.google.gerrit.server.notedb.ChangeNotes,com.google.gerrit.extensions.api.changes.FixInput)",125047,89,80
67870,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_client_PatchSet.java,16.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setGroups(java.lang.String gs) { groups = gs; },55fcf73c6ac043008d98f334676875b48358bebe,,setGroups(java.lang.String),5,0,public void setGroups(java.lang.Iterable<java.lang.String> groups) { this.groups = com.google.gerrit.reviewdb.client.PatchSet.joinGroups(groups); },61195f4c729f046a41bf8da4ad5e45807ad64cb9,setGroups(java.lang.Iterable),27213,18,46
158613,src_test_java_com_googlesource_gerrit_plugins_lfs_LfsAuthTokenTest.java,7.0,@org.junit.Test public void testExpiredTime() throws java.lang.Exception { org.joda.time.DateTime now = now(); assertThat(Verifier.onTime(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.print(now.minusMillis(1)))).isFalse(); },e55243c78ab53c576828c3581d25043731a428f9,@org.junit.Test public void testExpiredTime() throws java.lang.Exception { assertThat(Verifier.onTime(formatter.format(now().minusMillis(1)))).isFalse(); },d8e1a6ce6eeb2a60cf6cb38bf281d7963f77cd42,testExpiredTime(),testExpiredTime(),8,7,@org.junit.Test public void testExpiredTime() throws java.lang.Exception { assertThat(Verifier.onTime(com.googlesource.gerrit.plugins.lfs.LfsDateTime.format(now().minusMillis(1)))).isFalse(); },389e36e23c6159bbb759975a0c90b06a716b0931,testExpiredTime(),71308,41,56
34880,gerrit-server_src_main_java_com_google_gerrit_server_mail_CreateChangeSender.java,2.0,@java.lang.Override protected void init() throws com.google.gerrit.server.mail.EmailException { super.init(); bccWatchers(); },99b68171d595ab8348032416c3f3d3e11603aba1,"@java.lang.Override protected void init() throws com.google.gerrit.server.mail.EmailException { super.init(); try { com.google.gerrit.server.mail.Watchers matching = getWatches(NotifyType.NEW_CHANGES); for (com.google.gerrit.reviewdb.client.Account.Id user : matching.accounts) { if (isOwnerOfProjectOrBranch(user)) { add(RecipientType.TO, user); } else { add(RecipientType.BCC, user); } } for (com.google.gerrit.server.mail.Address addr : matching.emails) { add(RecipientType.BCC, addr); } } catch (com.google.gwtorm.server.OrmException err) { } }",89fe260427491881a8434f13ea8018efb55d02b4,init(),init(),11,2,"@java.lang.Override protected void init() throws com.google.gerrit.server.mail.EmailException { super.init(); try { com.google.gerrit.server.mail.Watchers matching = getWatches(NotifyType.NEW_CHANGES); for (com.google.gerrit.reviewdb.client.Account.Id user : matching.accounts) { if (isOwnerOfProjectOrBranch(user)) { add(RecipientType.TO, user); } else { add(RecipientType.BCC, user); } } for (com.google.gerrit.server.mail.Address addr : matching.emails) { add(RecipientType.BCC, addr); } } catch (com.google.gwtorm.server.OrmException err) { com.google.gerrit.server.mail.CreateChangeSender.log.warn(""Cannot BCC watchers for new change"", err); } }",6f8fda3d5f551b76cdb8ed716ef63d95f2fc9ff9,init(),95428,171,201
140535,java_com_google_gerrit_server_patch_PatchListLoader.java,28.0,private static java.util.Set<org.eclipse.jgit.diff.Edit> getContentEdits(java.util.Set<com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> editsDueToRebase) { return editsDueToRebase.stream().map(ContextAwareEdit::toEdit).filter(java.util.Optional::isPresent).map(java.util.Optional::get).collect(java.util.stream.Collectors.toSet()); },8e0d2d24a436875387a4af06078da4eb239df085,private static java.util.Set<org.eclipse.jgit.diff.Edit> getContentEdits(java.util.Set<com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit> editsDueToRebase) { return editsDueToRebase.stream().map(ContextAwareEdit::toEdit).filter(java.util.Optional::isPresent).map(java.util.Optional::get).collect(java.util.stream.Collectors.toSet()); },0d26a8f13598bea6c51abfbfce82be852b503889,getContentEdits(java.util.Set),getContentEdits(java.util.Set),11,28,private static java.util.Set<org.eclipse.jgit.diff.Edit> getContentEdits(java.util.Set<com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> editsDueToRebase) { return editsDueToRebase.stream().map(ContextAwareEdit::toEdit).filter(java.util.Optional::isPresent).map(java.util.Optional::get).collect(java.util.stream.Collectors.toSet()); },8e0d2d24a436875387a4af06078da4eb239df085,getContentEdits(java.util.Set),15326,107,106
107257,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_AbstractNotificationTest.java,,,,"public com.google.gerrit.acceptance.AbstractNotificationTest.NotificationsSubject reviewers(@com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.RecipientType type) { return receives(actual().participants.reviewer, type); }",6bdb6393e628516b8733a3611f4d40a9579fbb6b,,reviewers(com.google.gerrit.extensions.api.changes.RecipientType),24,32,"public com.google.gerrit.acceptance.AbstractNotificationTest.FakeEmailSenderSubject cc(com.google.gerrit.acceptance.TestAccount... accounts) { return rcpt(com.google.gerrit.acceptance.CC, accounts); }",3951bcde758e78fd991964cd4300a26ac7f93e5d,cc(com.google.gerrit.acceptance.TestAccount[]),14936,62,56
85339,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,36.0,@java.lang.Override public Account.Id apply(com.google.gerrit.extensions.common.AccountInfo account) { return new com.google.gerrit.reviewdb.client.Account.Id(account._accountId); },7f58f6425b8fa332100cd9ca0c837aa114f34390,@java.lang.Override public com.google.gerrit.reviewdb.client.Account.Id apply(com.google.gerrit.extensions.common.AccountInfo account) { return new com.google.gerrit.reviewdb.client.Account.Id(account._accountId); },0435ed5e1dce9c2d4fbfed8f4bdd271d86fe281b,apply(com.google.gerrit.extensions.common.AccountInfo),apply(com.google.gerrit.extensions.common.AccountInfo),10,36,@java.lang.Override public Account.Id apply(com.google.gerrit.extensions.common.AccountInfo account) { return new com.google.gerrit.reviewdb.client.Account.Id(account._accountId); },7f58f6425b8fa332100cd9ca0c837aa114f34390,apply(com.google.gerrit.extensions.common.AccountInfo),27677,66,53
80683,src_main_java_com_googlesource_gerrit_plugins_verifystatus_VerifyStatusAdminQueryShell.java,0.0,"@java.lang.Override protected void run() throws com.googlesource.gerrit.plugins.verifystatus.commands.Failure { try { checkPermission(); final com.googlesource.gerrit.plugins.verifystatus.commands.VerifyStatusQueryShell shell = factory.create(in, out); shell.setOutputFormat(format); if ((query) != null) { shell.execute(query); } else { shell.run(); } } catch (com.google.gerrit.common.errors.PermissionDeniedException err) { throw new com.googlesource.gerrit.plugins.verifystatus.commands.UnloggedFailure((""fatal: "" + (err.getMessage()))); } }",fb0cf5d4058178304b9008c1f32822aa8d682234,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.BaseCommand.UnloggedFailure { try { checkPermission(); } catch (com.google.gerrit.common.errors.PermissionDeniedException err) { throw new com.google.gerrit.sshd.BaseCommand.UnloggedFailure((""fatal: "" + (err.getMessage()))); } final com.googlesource.gerrit.plugins.verifystatus.VerifyStatusQueryShell shell = factory.create(in, out); shell.setOutputFormat(format); if ((query) != null) { shell.execute(query); } else { shell.run(); } }",2be75b08ef22cb415439fb62dc766c06cc27633e,run(),run(),2,0,"@java.lang.Override protected void run() throws com.googlesource.gerrit.plugins.verifystatus.UnloggedFailure { try { checkPermission(); } catch (com.google.gerrit.common.errors.PermissionDeniedException err) { throw new com.googlesource.gerrit.plugins.verifystatus.UnloggedFailure((""fatal: "" + (err.getMessage()))); } final com.googlesource.gerrit.plugins.verifystatus.VerifyStatusQueryShell shell = factory.create(in, out); shell.setOutputFormat(format); if ((query) != null) { shell.execute(query); } else { shell.run(); } }",2e5813c6490312ebc08cd29d2ac153200a526908,run(),169353,142,142
131290,src_main_java_com_googlesource_gerrit_plugins_webhooks_processors_AbstractEventProcessor.java,0.0,"@java.lang.Override public boolean shouldProcess() { java.lang.String[] wantedEvents = cfg.getStringList(Configuration.REMOTE, name, ""event""); if ((wantedEvents.length) == 0) { return true; } for (java.lang.String type : wantedEvents) { if ((!(com.google.common.base.Strings.isNullOrEmpty(type))) && (type.equals(event.getType()))) { return true; } } return false; }",e6b1e09fddfcc3f065565ae1e0874e2fbb3c86d5,@java.lang.Override public boolean shouldProcess() { java.lang.String[] wantedEvents = remote.getEvents(); if ((wantedEvents.length) == 0) { return true; } for (java.lang.String type : wantedEvents) { if ((!(com.google.common.base.Strings.isNullOrEmpty(type))) && (type.equals(event.getType()))) { return true; } } return false; },554562ae10b7356cdeda46a5fa328bb24be6c739,shouldProcess(),shouldProcess(),10,2,"protected boolean shouldProcess(com.google.gerrit.server.events.ProjectEvent event, com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote) { java.lang.String[] wantedEvents = remote.getEvents(); if ((wantedEvents.length) == 0) { return true; } for (java.lang.String type : wantedEvents) { if ((!(com.google.common.base.Strings.isNullOrEmpty(type))) && (type.equals(event.getType()))) { return true; } } return false; }",24a547893db1ed4d157c46e72c83f71f550f7439,"shouldProcess(com.google.gerrit.server.events.ProjectEvent,com.googlesource.gerrit.plugins.webhooks.RemoteConfig)",65291,94,121
48914,gerrit-server_src_main_java_com_google_gerrit_server_mail_CommentSender.java,12.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String makeChangeLink(com.google.gerrit.reviewdb.client.Patch.Key patch) { final java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(getGerritUrl()); sb.append(""#/c/""); sb.append(patch.getParentKey().getParentKey().get()); sb.append(""/""); sb.append(patch.getParentKey().get()); sb.append(""/""); sb.append(patch.getFileName()); return sb.toString(); }",420150cb7e1433bdff45274270bce0109c4d0413,,makeChangeLink(com.google.gerrit.reviewdb.client.Patch$Key),2,12,"private java.lang.String makeLink(com.google.gerrit.reviewdb.client.Patch.Key patch) { java.lang.String url = getGerritUrl(); if (url == null) { return null; } com.google.gerrit.reviewdb.client.PatchSet.Id ps = patch.getParentKey(); com.google.gerrit.reviewdb.client.Change.Id c = ps.getParentKey(); return new java.lang.StringBuilder().append(url).append(""#/c/"").append(c).append('/').append(ps.get()).append('/').append(com.google.gwtorm.client.KeyUtil.encode(patch.get())).toString(); }",980dda10fff001dc6fe94143c4259bfad62d0172,makeLink(com.google.gerrit.reviewdb.client.Patch$Key),212698,109,158
162993,java_com_google_gerrit_server_change_ChangeJson.java,2.0,private boolean submittable(com.google.gerrit.server.query.change.ChangeData cd) { return com.google.gerrit.common.data.SubmitRecord.findOkRecord(cd.submitRecords(com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS_STRICT)).isPresent(); },521d09495694ddc4343e40f3348c0f3506ae8b74,private boolean submittable(com.google.gerrit.server.query.change.ChangeData cd) { return com.google.gerrit.common.data.SubmitRecord.canBeSubmitted(cd.submitRecords(com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS_STRICT)); },9a5db75a05bbfa9a245d0beb5dbef3796b931443,submittable(com.google.gerrit.server.query.change.ChangeData),submittable(com.google.gerrit.server.query.change.ChangeData),21,2,private boolean submittable(com.google.gerrit.server.query.change.ChangeData cd) { return com.google.gerrit.common.data.SubmitRecord.allRecordsOK(cd.submitRecords(com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS_STRICT)); },90c21375e49dd4cfd37e0c34ba44e79d6f6698d4,submittable(com.google.gerrit.server.query.change.ChangeData),109610,69,70
22962,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_PatchSetComplexDisclosurePanel.java,23.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void displayParents(final java.util.List<com.google.gerrit.reviewdb.PatchSetInfo.ParentInfo> parents) { if ((parents.size()) == 0) { infoTable.setWidget(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_PARENTS, 1, new com.google.gwt.user.client.ui.InlineLabel(""Initial Commit"")); return; } final com.google.gwt.user.client.ui.Grid parentsTable = new com.google.gwt.user.client.ui.Grid(parents.size(), 2); parentsTable.setStyleName(Gerrit.RESOURCES.css().parentsTable()); parentsTable.addStyleName(Gerrit.RESOURCES.css().noborder()); final com.google.gwt.user.client.ui.HTMLTable.CellFormatter ptfmt = parentsTable.getCellFormatter(); int row = 0; for (com.google.gerrit.reviewdb.PatchSetInfo.ParentInfo parent : parents) { parentsTable.setWidget(row, 0, new com.google.gwt.user.client.ui.InlineLabel(parent.id.get())); ptfmt.addStyleName(row, 0, Gerrit.RESOURCES.css().noborder()); ptfmt.addStyleName(row, 0, Gerrit.RESOURCES.css().monospace()); parentsTable.setWidget(row, 1, new com.google.gwt.user.client.ui.InlineLabel(parent.shortMessage)); ptfmt.addStyleName(row, 1, Gerrit.RESOURCES.css().noborder()); row++; } infoTable.setWidget(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_PARENTS, 1, parentsTable); }",f4d4d4f8462e504c4b4596a4403aa9fac38d0a17,,displayParents(java.util.List),4,24,"private void displayParents(final java.util.List<com.google.gerrit.reviewdb.PatchSetInfo.ParentInfo> parents) { if ((parents.size()) == 0) { infoTable.setWidget(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_PARENTS, 1, new com.google.gwt.user.client.ui.InlineLabel(Util.C.initialCommit())); return; } final com.google.gwt.user.client.ui.Grid parentsTable = new com.google.gwt.user.client.ui.Grid(parents.size(), 2); parentsTable.setStyleName(Gerrit.RESOURCES.css().parentsTable()); parentsTable.addStyleName(Gerrit.RESOURCES.css().noborder()); final com.google.gwt.user.client.ui.HTMLTable.CellFormatter ptfmt = parentsTable.getCellFormatter(); int row = 0; for (com.google.gerrit.reviewdb.PatchSetInfo.ParentInfo parent : parents) { parentsTable.setWidget(row, 0, new com.google.gwt.user.client.ui.InlineLabel(parent.id.get())); ptfmt.addStyleName(row, 0, Gerrit.RESOURCES.css().noborder()); ptfmt.addStyleName(row, 0, Gerrit.RESOURCES.css().monospace()); parentsTable.setWidget(row, 1, new com.google.gwt.user.client.ui.InlineLabel(parent.shortMessage)); ptfmt.addStyleName(row, 1, Gerrit.RESOURCES.css().noborder()); row++; } infoTable.setWidget(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_PARENTS, 1, parentsTable); }",6bc504a9017a77bd22b4b5d96c91e66e9b8640fe,displayParents(java.util.List),45692,380,383
75778,gerrit-server_src_main_java_com_google_gerrit_server_PatchSetUtil.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.google.common.collect.ImmutableMap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> byChangeAsMap(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gwtorm.server.OrmException { if (!(migration.readChanges())) { ImmutableMap.Builder<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> result = com.google.common.collect.ImmutableMap.builder(); for (com.google.gerrit.reviewdb.client.PatchSet ps : ChangeUtil.PS_ID_ORDER.sortedCopy(db.patchSets().byChange(notes.getChangeId()))) { result.put(ps.getId(), ps); } } return notes.load().getPatchSets(); }",1d2b979af534a30ee9c4424837a565ecd6e54ce6,,"byChangeAsMap(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes)",8,2,"public com.google.common.collect.ImmutableMap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> byChangeAsMap(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gwtorm.server.OrmException { if (!(migration.readChanges())) { ImmutableMap.Builder<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> result = com.google.common.collect.ImmutableMap.builder(); for (com.google.gerrit.reviewdb.client.PatchSet ps : ChangeUtil.PS_ID_ORDER.sortedCopy(db.patchSets().byChange(notes.getChangeId()))) { result.put(ps.getId(), ps); } return result.build(); } return notes.load().getPatchSets(); }",c5a264892ef3731f5cf6579308437d0d57323815,"byChangeAsMap(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes)",162221,225,230
72320,gerrit-server_src_main_java_com_google_gerrit_metrics_Field.java,,,,"public static <E extends java.lang.Enum<E>> com.google.gerrit.metrics.Field<E> ofEnum(java.lang.Class<E> enumType, java.lang.String name) { return new com.google.gerrit.metrics.Field<>(name, enumType); }",e4f45a31a1e430f61635fc53976ce46d8908af13,,"ofEnum(java.lang.Class,java.lang.String)",9,7,"public static <E extends java.lang.Enum<E>> com.google.gerrit.metrics.Field<E> ofEnum(java.lang.Class<E> enumType, java.lang.String name) { return com.google.gerrit.metrics.Field.ofEnum(enumType, name, null); }",75852e5fab21c0000f4a8f3dd900be0ef93d40da,"ofEnum(java.lang.Class,java.lang.String)",56862,67,71
68534,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectAccessEditor.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void toAnchor(java.lang.String href, java.lang.String name) { com.google.gwt.user.client.ui.Anchor a = new com.google.gwt.user.client.ui.Anchor(); a.setHref(href); a.setText(name); webLinkPanel.add(a); }",193bc4a3ae9e38b25519116b8521db5f913bf401,,"toAnchor(java.lang.String,java.lang.String)",11,10,"private com.google.gwt.user.client.ui.Anchor toAnchor(java.lang.String href, java.lang.String name) { com.google.gwt.user.client.ui.Anchor a = new com.google.gwt.user.client.ui.Anchor(); a.setHref(href); a.setText(name); return a; }",3aa3d14cb0d28dabbded1efebd4b6f3ff188d665,"toAnchor(java.lang.String,java.lang.String)",66720,72,79
35193,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_registration_DynamicSet.java,,,,"@java.lang.Override public com.google.gerrit.extensions.registration.DynamicSet<T>.ReloadableHandle replace(com.google.inject.Key<?> newKey, T newItem) { if (ref.compareAndSet(item, newItem)) { return new ReloadableHandle(ref, newKey, newItem); } return null; }",b1580da42dcd7ec9291749de06b2818f0445c80a,,"replace(com.google.inject.Key,java.lang.Object)",6,15,"@java.lang.Override public com.google.gerrit.extensions.registration.DynamicSet<T>.ReloadableHandle replace(com.google.inject.Key<T> newKey, T newItem) { if (ref.compareAndSet(item, newItem)) { return new ReloadableHandle(ref, newKey, newItem); } return null; }",83e7549e7f12fc2e10119473015c5a0adcb714fb,"replace(com.google.inject.Key,java.lang.Object)",135347,75,77
72085,gerrit-httpd_src_main_java_com_google_gerrit_httpd_raw_ResourceServlet.java,3.0,"@java.lang.Override public com.google.gerrit.httpd.raw.ResourceServlet.Resource call() throws java.io.IOException { return new com.google.gerrit.httpd.raw.ResourceServlet.Resource(java.nio.file.Files.getLastModifiedTime(p), com.google.gerrit.httpd.raw.ResourceServlet.contentType(p.toString()), java.nio.file.Files.readAllBytes(p)); }",81463b4ae33f8ce3c238b00eb2171d6b189a50f5,"@java.lang.Override public com.google.gerrit.httpd.raw.ResourceServlet.Resource call() throws java.io.IOException { return new com.google.gerrit.httpd.raw.ResourceServlet.Resource(getLastModifiedTime(p), com.google.gerrit.httpd.raw.ResourceServlet.contentType(p.toString()), java.nio.file.Files.readAllBytes(p)); }",823cd4cff153412cb9328b20676572aab1bad624,call(),call(),8,4,"@java.lang.Override public com.google.gerrit.httpd.raw.ResourceServlet.Resource call() throws java.io.IOException { try { return new com.google.gerrit.httpd.raw.ResourceServlet.Resource(getLastModifiedTime(p), com.google.gerrit.httpd.raw.ResourceServlet.contentType(p.toString()), java.nio.file.Files.readAllBytes(p)); } catch (java.nio.file.NoSuchFileException e) { return com.google.gerrit.httpd.raw.ResourceServlet.Resource.NOT_FOUND; } }",7c8ef40b564761b1982612f7e939a71b59b8bf82,call(),116992,91,131
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,34.0,"public static void publish(int id, java.lang.String commit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.call(id, commit, ""publish"").post(in, cb); }",4d662ed7fbf9a16007765da58a1f9284c9afd8f1,"public static void publish(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String commit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.call(id, project, commit, ""publish"").post(in, cb); }",42531f98b7f36368462530b0b4afd9dbc7b953cc,"publish(int,java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)","publish(int,java.lang.String,java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)",7,57,"public static void publish(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String commit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.call(project, id, commit, ""publish"").post(in, cb); }",bd2ae17a3e3d563682004760af9bc37f0921fdf7,"publish(java.lang.String,int,java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)",211142,126,125
47480,gerrit-gwtui_src_test_java_com_google_gerrit_client_diff_EditIteratorTest.java,7.0,"@org.junit.Test public void testEndsBeforeNewline() { com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator iter = new com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator(lines, 0); assertLineChsEqual(net.codemirror.lib.LineCharacter.create(0, 3), iter.advance(3)); }",d9f94b24a251978f72ac84533b6df1d446395652,"@org.junit.Test public void testEndsBeforeNewline() { com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator iter = new com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator(lines, 0); assertLineChsEqual(net.codemirror.lib.LineCharacter.create(0), iter.advance(3)); }",0c4dae9fcdc6884df4d9e4a0e181ffbdf11a96e0,testEndsBeforeNewline(),testEndsBeforeNewline(),14,7,"@org.junit.Test public void testEndsBeforeNewline() { com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator iter = new com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator(lines, 0); assertLineChsEqual(net.codemirror.lib.LineCharacter.create(0, 3), iter.advance(3)); }",d9f94b24a251978f72ac84533b6df1d446395652,testEndsBeforeNewline(),166594,80,82
73888,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeEdits.java,8.0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.ChangeEdits.DeleteFile.Input in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getChange()); if (edit.isPresent()) { editUtil.delete(edit.get()); } else { editModifier.createEdit(rsrc.getChange(), db.get().patchSets().get(rsrc.getChange().currentPatchSetId())); edit = editUtil.byChange(rsrc.getChange()); editModifier.deleteFile(edit.get(), path); } return com.google.gerrit.extensions.restapi.Response.none(); }",e20d68982e07bacaf8ddd377afee839198d91821,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.ChangeEdits.DeleteFile.Input in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getChange()); if (edit.isPresent()) { editUtil.delete(edit.get()); } else { editModifier.createEdit(rsrc.getChange(), psUtil.latest(db.get(), rsrc.getNotes())); edit = editUtil.byChange(rsrc.getChange()); editModifier.deleteFile(edit.get(), path); } return com.google.gerrit.extensions.restapi.Response.none(); }",92c245aa761f6990f6b5974b5d0231f39e61e255,"apply(com.google.gerrit.server.change.ChangeResource,com.google.gerrit.server.change.ChangeEdits$DeleteFile$Input)","apply(com.google.gerrit.server.change.ChangeResource,com.google.gerrit.server.change.ChangeEdits$DeleteFile$Input)",4,7,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.ChangeEdits.DeleteFile.Input in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getChange()); if (edit.isPresent()) { editUtil.delete(edit.get()); } else { editModifier.createEdit(rsrc.getChange(), psUtil.current(db.get(), rsrc.getNotes())); edit = editUtil.byChange(rsrc.getChange()); editModifier.deleteFile(edit.get(), path); } return com.google.gerrit.extensions.restapi.Response.none(); }",5fbfd224f81d1c600e18a7d4404659c1f43d8523,"apply(com.google.gerrit.server.change.ChangeResource,com.google.gerrit.server.change.ChangeEdits$DeleteFile$Input)",7889,271,271
140535,java_com_google_gerrit_server_change_ChangeEdits.java,17.0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getNotes(), rsrc.getUser()); if (!(edit.isPresent())) { return com.google.gerrit.extensions.restapi.Response.none(); } com.google.gerrit.extensions.common.EditInfo editInfo = editJson.toEditInfo(edit.get(), downloadCommands); if (list) { com.google.gerrit.reviewdb.client.PatchSet basePatchSet = null; if ((base) != null) { com.google.gerrit.server.change.RevisionResource baseResource = revisions.parse(rsrc, com.google.gerrit.extensions.restapi.IdString.fromDecoded(base)); basePatchSet = baseResource.getPatchSet(); } try { editInfo.files = fileInfoJson.toFileInfoMap(rsrc.getChange(), edit.get().getEditCommit(), basePatchSet); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(e.getMessage()); } } return com.google.gerrit.extensions.restapi.Response.ok(editInfo); }",b63026a6dc1701b17bbb10b9fca05cfd48b574aa,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getNotes(), rsrc.getUser()); if (!(edit.isPresent())) { return com.google.gerrit.extensions.restapi.Response.none(); } com.google.gerrit.extensions.common.EditInfo editInfo = editJson.toEditInfo(edit.get(), downloadCommands); if (list) { com.google.gerrit.reviewdb.client.PatchSet basePatchSet = null; if ((base) != null) { com.google.gerrit.server.change.RevisionResource baseResource = revisions.parse(rsrc, com.google.gerrit.extensions.restapi.IdString.fromDecoded(base)); basePatchSet = baseResource.getPatchSet(); } try { editInfo.files = fileInfoJson.toFileInfoMap(rsrc.getChange(), edit.get().getEditCommit(), basePatchSet); } catch (com.google.gerrit.server.patchlib.PatchListNotAvailableException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(e.getMessage()); } } return com.google.gerrit.extensions.restapi.Response.ok(editInfo); }",676a7f65051816ffe5677b3dfbf9cf3f41e921b5,apply(com.google.gerrit.server.change.ChangeResource),apply(com.google.gerrit.server.change.ChangeResource),11,17,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getNotes(), rsrc.getUser()); if (!(edit.isPresent())) { return com.google.gerrit.extensions.restapi.Response.none(); } com.google.gerrit.extensions.common.EditInfo editInfo = editJson.toEditInfo(edit.get(), downloadCommands); if (list) { com.google.gerrit.reviewdb.client.PatchSet basePatchSet = null; if ((base) != null) { com.google.gerrit.server.change.RevisionResource baseResource = revisions.parse(rsrc, com.google.gerrit.extensions.restapi.IdString.fromDecoded(base)); basePatchSet = baseResource.getPatchSet(); } try { editInfo.files = fileInfoJson.toFileInfoMap(rsrc.getChange(), edit.get().getEditCommit(), basePatchSet); } catch (com.google.gerrit.server.diff.PatchListNotAvailableException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(e.getMessage()); } } return com.google.gerrit.extensions.restapi.Response.ok(editInfo); }",c88a68cad28a53adb3a6f6d75434573bfb1be42e,apply(com.google.gerrit.server.change.ChangeResource),15121,401,400
79060,gerrit-server_src_main_java_com_google_gerrit_server_extensions_events_ReviewerDeleted.java,,,,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.reviewdb.client.Account reviewer, java.lang.String message, java.util.Map<java.lang.String, java.lang.Short> newApprovals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals) { try { fire(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), util.accountInfo(reviewer), message, newApprovals, oldApprovals); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.ReviewerDeleted.log.error(""Couldn't fire event"", e); } }",61ac74f75d02d3dddeba6bda441636b91909f11d,,"fire(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.reviewdb.client.Account,java.lang.String,java.util.Map,java.util.Map)",13,2,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.reviewdb.client.Account reviewer, java.lang.String message, java.util.Map<java.lang.String, java.lang.Short> newApprovals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals, java.sql.Timestamp ts) { if (!(listeners.iterator().hasNext())) { return; } try { fire(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), util.accountInfo(reviewer), message, util.approvals(reviewer, newApprovals, ts), util.approvals(reviewer, oldApprovals, ts)); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.ReviewerDeleted.log.error(""Couldn't fire event"", e); } }",9170eefcdbb6e2f8983587004585847a3da7901c,"fire(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.reviewdb.client.Account,java.lang.String,java.util.Map,java.util.Map,java.sql.Timestamp)",182488,234,281
83372,gerrit-server_src_main_java_com_google_gerrit_server_ApprovalCopier.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> getForPatchSet(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.project.ChangeControl ctl, com.google.gerrit.reviewdb.client.PatchSet.Id psId, java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> incomingApprovals) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.get(db, ctl.getNotes(), psId); if (ps == null) { return java.util.Collections.emptyList(); } return getForPatchSet(db, ctl, ps, incomingApprovals); }",fe909f77bb4c67c3f77f848f7f69146e4ea72531,,"getForPatchSet(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.project.ChangeControl,com.google.gerrit.reviewdb.client.PatchSet$Id,java.lang.Iterable)",5,6,"java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> getForPatchSet(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.project.ChangeControl ctl, com.google.gerrit.reviewdb.client.PatchSet.Id psId, java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> dontCopy) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.get(db, ctl.getNotes(), psId); if (ps == null) { return java.util.Collections.emptyList(); } return getForPatchSet(db, ctl, ps, dontCopy); }",4f6dda2a5a6f7cbfe35aa767215c8d75ab372aaa,"getForPatchSet(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.project.ChangeControl,com.google.gerrit.reviewdb.client.PatchSet$Id,java.lang.Iterable)",59656,190,188
18454,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectAccessScreen.java,21.0,private void enableForm(final boolean on) { delRight.setEnabled(on); rightEditor.enableForm(on); },6c3e59eef42f672abf7d50a69b595d4b2ec57b89,private void enableForm(final boolean on) { delRight.setEnabled(on); rightEditor.enableForm(on); changeParentButton.setEnabled(on); },9b05bba8dca67b8184c6269c9967e70872555f62,enableForm(boolean),enableForm(boolean),14,16,"private void displayReadOnly(com.google.gerrit.common.data.ProjectAccess access) { this.access = access; java.util.Map<java.lang.String, java.lang.String> allCapabilities = new java.util.HashMap<java.lang.String, java.lang.String>(); for (com.google.gerrit.client.config.CapabilityInfo c : com.google.gerrit.client.rpc.Natives.asList(capabilityMap.values())) { allCapabilities.put(c.id(), c.name()); } this.access.setCapabilities(allCapabilities); accessEditor.setEditing(false); com.google.gwt.user.client.ui.UIObject.setVisible(editTools, ((!(access.getOwnerOf().isEmpty())) || (access.canUpload()))); edit.setEnabled(((!(access.getOwnerOf().isEmpty())) || (access.canUpload()))); cancel1.setVisible(false); com.google.gwt.user.client.ui.UIObject.setVisible(commitTools, false); driver.edit(access); }",e1930695446c70cc9e65ea9d9c344a5cae890033,displayReadOnly(com.google.gerrit.common.data.ProjectAccess),29666,34,232
61730,gerrit-server_src_main_java_com_google_gerrit_server_change_Check.java,,,,"@java.lang.Override public com.google.gerrit.server.change.CheckResult apply(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.server.change.CheckResult result = checkerProvider.get().check(rsrc.getChange()); try { result.change = json.format(rsrc); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = ""Error rendering final ChangeInfo""; com.google.gerrit.server.change.Check.log.warn(msg, e); result.messages.add(msg); result.change = com.google.gerrit.server.change.Check.basicChangeInfo(rsrc.getChange()); } return result; }",3ca30c4b7da2c8b2040ea1d625055ee27b20901d,,apply(com.google.gerrit.server.change.ChangeResource),5,1,"@java.lang.Override public com.google.gerrit.server.change.CheckResult apply(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.server.change.CheckResult result = new com.google.gerrit.server.change.CheckResult(); result.messages = checkerProvider.get().check(rsrc.getChange()); try { result.change = json.format(rsrc); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = ""Error rendering final ChangeInfo""; com.google.gerrit.server.change.Check.log.warn(msg, e); result.messages.add(msg); result.change = com.google.gerrit.server.change.Check.basicChangeInfo(rsrc.getChange()); } return result; }",001f97c470f03c50ee64f796a08f64f7a4cdd028,apply(com.google.gerrit.server.change.ChangeResource),102450,173,192
41101,gerrit-server_src_main_java_com_google_gerrit_server_git_ProjectConfig.java,29.0,"private void loadPermissionRules(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String varName, java.util.Map<java.lang.String, com.google.gerrit.common.data.GroupReference> groupsByName, com.google.gerrit.common.data.Permission perm, boolean useRange) { for (java.lang.String ruleString : rc.getStringList(section, subsection, varName)) { com.google.gerrit.common.data.PermissionRule rule; try { rule = com.google.gerrit.common.data.PermissionRule.fromString(ruleString, useRange); } catch (java.lang.IllegalArgumentException notRule) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, ((((((""Invalid rule in "" + section) + (subsection != null ? ""."" + subsection : """")) + ""."") + varName) + "": "") + (notRule.getMessage())))); continue; } com.google.gerrit.common.data.GroupReference ref = groupsByName.get(rule.getGroup().getName()); if (ref == null) { ref = rule.getGroup(); groupsByName.put(ref.getName(), ref); error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((""group \"""" + (ref.getName())) + ""\"" not in "") + (com.google.gerrit.server.git.ProjectConfig.GROUP_LIST)))); } rule.setGroup(ref); perm.add(rule); } }",2af61eac50a70626d6cf796eb66770b70ab720d1,"private void loadPermissionRules(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String varName, java.util.Map<java.lang.String, com.google.gerrit.common.data.GroupReference> groupsByName, com.google.gerrit.common.data.Permission perm, boolean useRange) { for (java.lang.String ruleString : rc.getStringList(section, subsection, varName)) { com.google.gerrit.common.data.PermissionRule rule; try { rule = com.google.gerrit.common.data.PermissionRule.fromString(projectName, ruleString, useRange); } catch (java.lang.IllegalArgumentException notRule) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, ((((((""Invalid rule in "" + section) + (subsection != null ? ""."" + subsection : """")) + ""."") + varName) + "": "") + (notRule.getMessage())))); continue; } com.google.gerrit.common.data.GroupReference ref = groupsByName.get(rule.getGroup().getName()); if (ref == null) { ref = rule.getGroup(); groupsByName.put(ref.getName(), ref); error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((""group \"""" + (ref.getName())) + ""\"" not in "") + (com.google.gerrit.server.git.ProjectConfig.GROUP_LIST)))); } rule.setGroup(ref); perm.add(rule); } }",23b6632db315004ccde17fe83623656738a418c3,"loadPermissionRules(org.eclipse.jgit.lib.Config,java.lang.String,java.lang.String,java.lang.String,java.util.Map,com.google.gerrit.common.data.Permission,boolean)","loadPermissionRules(org.eclipse.jgit.lib.Config,java.lang.String,java.lang.String,java.lang.String,java.util.Map,com.google.gerrit.common.data.Permission,boolean)",5,30,"private void loadPermissionRules(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String varName, java.util.Map<java.lang.String, com.google.gerrit.common.data.GroupReference> groupsByName, com.google.gerrit.common.data.Permission perm, boolean useRange) { for (java.lang.String ruleString : rc.getStringList(section, subsection, varName)) { com.google.gerrit.common.data.PermissionRule rule; try { rule = com.google.gerrit.common.data.PermissionRule.fromString(ruleString, useRange); } catch (java.lang.IllegalArgumentException notRule) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, ((((((""Invalid rule in "" + section) + (subsection != null ? ""."" + subsection : """")) + ""."") + varName) + "": "") + (notRule.getMessage())))); continue; } com.google.gerrit.common.data.GroupReference ref = groupsByName.get(rule.getGroup().getName()); if (ref == null) { ref = rule.getGroup(); groupsByName.put(ref.getName(), ref); error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((""group \"""" + (ref.getName())) + ""\"" not in "") + (com.google.gerrit.server.git.ProjectConfig.GROUP_LIST)))); } rule.setGroup(ref); perm.add(rule); } }",2af61eac50a70626d6cf796eb66770b70ab720d1,"loadPermissionRules(org.eclipse.jgit.lib.Config,java.lang.String,java.lang.String,java.lang.String,java.util.Map,com.google.gerrit.common.data.Permission,boolean)",43493,390,388
73635,gerrit-server_src_main_java_com_google_gerrit_server_project_ListProjects.java,28.0,"private java.util.List<org.eclipse.jgit.lib.Ref> getBranchRefs(com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.project.ProjectControl projectControl) { org.eclipse.jgit.lib.Ref[] result = new org.eclipse.jgit.lib.Ref[showBranch.size()]; try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(projectName)) { for (int i = 0; i < (showBranch.size()); i++) { org.eclipse.jgit.lib.Ref ref = git.getRef(showBranch.get(i)); if ((((ref != null) && ((ref.getObjectId()) != null)) && (projectControl.controlForRef(ref.getLeaf().getName()).isVisible())) || ((all) && (projectControl.isOwner()))) { result[i] = ref; } } } catch (java.io.IOException ioe) { } return java.util.Arrays.asList(result); }",4d38fd53176837e79d84b7407fd8db0315ad6483,"private java.util.List<org.eclipse.jgit.lib.Ref> getBranchRefs(com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.project.ProjectControl projectControl) { org.eclipse.jgit.lib.Ref[] result = new org.eclipse.jgit.lib.Ref[showBranch.size()]; try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(projectName)) { for (int i = 0; i < (showBranch.size()); i++) { org.eclipse.jgit.lib.Ref ref = git.exactRef(showBranch.get(i)); if ((((ref != null) && ((ref.getObjectId()) != null)) && (projectControl.controlForRef(ref.getLeaf().getName()).isVisible())) || ((all) && (projectControl.isOwner()))) { result[i] = ref; } } } catch (java.io.IOException ioe) { } return java.util.Arrays.asList(result); }",1308817d843095c8090195b7ad9ba5b980d239d9,"getBranchRefs(com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.server.project.ProjectControl)","getBranchRefs(com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.server.project.ProjectControl)",3,28,"private java.util.List<org.eclipse.jgit.lib.Ref> getBranchRefs(com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.project.ProjectControl projectControl) { org.eclipse.jgit.lib.Ref[] result = new org.eclipse.jgit.lib.Ref[showBranch.size()]; try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(projectName)) { for (int i = 0; i < (showBranch.size()); i++) { org.eclipse.jgit.lib.Ref ref = git.findRef(showBranch.get(i)); if ((((ref != null) && ((ref.getObjectId()) != null)) && (projectControl.controlForRef(ref.getLeaf().getName()).isVisible())) || ((all) && (projectControl.isOwner()))) { result[i] = ref; } } } catch (java.io.IOException ioe) { } return java.util.Arrays.asList(result); }",b9f56d0b41cac38134a3bb60b881b2377266828b,"getBranchRefs(com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.server.project.ProjectControl)",106872,236,236
66461,gerrit-server_src_main_java_com_google_gerrit_server_mail_ChangeEmail.java,14.0,"public java.lang.String getUnifiedDiff() { com.google.gerrit.server.patch.PatchList patchList; try { patchList = getPatchList(); if ((patchList.getOldId()) == null) { return ""[Octopus merge; cannot be formatted as a diff.]\n""; } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { com.google.gerrit.server.mail.ChangeEmail.log.error(""Cannot format patch"", e); return """"; } org.eclipse.jgit.util.TemporaryBuffer.Heap buf = new org.eclipse.jgit.util.TemporaryBuffer.Heap(args.settings.maximumDiffSize); try (org.eclipse.jgit.diff.DiffFormatter fmt = new org.eclipse.jgit.diff.DiffFormatter(buf)) { org.eclipse.jgit.lib.Repository git; try { git = args.server.openRepository(change.getProject()); } catch (java.io.IOException e) { com.google.gerrit.server.mail.ChangeEmail.log.error(""Cannot open repository to format patch"", e); return """"; } try { fmt.setRepository(git); fmt.setDetectRenames(true); fmt.format(patchList.getOldId(), patchList.getNewId()); return org.eclipse.jgit.util.RawParseUtils.decode(buf.toByteArray()); } catch (java.io.IOException e) { if (org.eclipse.jgit.internal.JGitText.get().inMemoryBufferLimitExceeded.equals(e.getMessage())) { return """"; } com.google.gerrit.server.mail.ChangeEmail.log.error(""Cannot format patch"", e); return """"; } finally { git.close(); } } }",6b3b972b0c2c09a374ea72cbb932b0657c14da6f,"public java.lang.String getUnifiedDiff() { com.google.gerrit.server.patch.PatchList patchList; try { patchList = getPatchList(); if ((patchList.getOldId()) == null) { return ""[Octopus merge; cannot be formatted as a diff.]\n""; } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { com.google.gerrit.server.mail.ChangeEmail.log.error(""Cannot format patch"", e); return """"; } org.eclipse.jgit.util.TemporaryBuffer.Heap buf = new org.eclipse.jgit.util.TemporaryBuffer.Heap(8192, args.settings.maximumDiffSize); try (org.eclipse.jgit.diff.DiffFormatter fmt = new org.eclipse.jgit.diff.DiffFormatter(buf)) { org.eclipse.jgit.lib.Repository git; try { git = args.server.openRepository(change.getProject()); } catch (java.io.IOException e) { com.google.gerrit.server.mail.ChangeEmail.log.error(""Cannot open repository to format patch"", e); return """"; } try { fmt.setRepository(git); fmt.setDetectRenames(true); fmt.format(patchList.getOldId(), patchList.getNewId()); return org.eclipse.jgit.util.RawParseUtils.decode(buf.toByteArray()); } catch (java.io.IOException e) { if (org.eclipse.jgit.internal.JGitText.get().inMemoryBufferLimitExceeded.equals(e.getMessage())) { return """"; } com.google.gerrit.server.mail.ChangeEmail.log.error(""Cannot format patch"", e); return """"; } finally { git.close(); } } }",11acb905473b085c9f958a7b3b0b8a1c3e844c34,getUnifiedDiff(),getUnifiedDiff(),3,14,"public java.lang.String getUnifiedDiff() { com.google.gerrit.server.patch.PatchList patchList; try { patchList = getPatchList(); if ((patchList.getOldId()) == null) { return ""[Octopus merge; cannot be formatted as a diff.]\n""; } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { com.google.gerrit.server.mail.ChangeEmail.log.error(""Cannot format patch"", e); return """"; } int maxSize = args.settings.maximumDiffSize; org.eclipse.jgit.util.TemporaryBuffer.Heap buf = new org.eclipse.jgit.util.TemporaryBuffer.Heap(java.lang.Math.min(com.google.gerrit.server.mail.ChangeEmail.HEAP_EST_SIZE, maxSize), maxSize); try (org.eclipse.jgit.diff.DiffFormatter fmt = new org.eclipse.jgit.diff.DiffFormatter(buf)) { org.eclipse.jgit.lib.Repository git; try { git = args.server.openRepository(change.getProject()); } catch (java.io.IOException e) { com.google.gerrit.server.mail.ChangeEmail.log.error(""Cannot open repository to format patch"", e); return """"; } try { fmt.setRepository(git); fmt.setDetectRenames(true); fmt.format(patchList.getOldId(), patchList.getNewId()); return org.eclipse.jgit.util.RawParseUtils.decode(buf.toByteArray()); } catch (java.io.IOException e) { if (org.eclipse.jgit.internal.JGitText.get().inMemoryBufferLimitExceeded.equals(e.getMessage())) { return """"; } com.google.gerrit.server.mail.ChangeEmail.log.error(""Cannot format patch"", e); return """"; } finally { git.close(); } } }",7f8fff0429bf0db8cc24049b4ce461b59906515e,getUnifiedDiff(),84973,389,424
121594,src_main_java_com_googlesource_gerrit_plugins_events_fsstore_Nfs.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static void throwIfNotStaleFileHandle(java.nio.file.DirectoryIteratorException e) { if (!(com.googlesource.gerrit.plugins.events.fsstore.Nfs.isStaleFileHandle(e.getCause()))) { throw e; } },9baff6a8988439e5a68eb11d80608319259eeead,,throwIfNotStaleFileHandle(java.nio.file.DirectoryIteratorException),3,0,public static boolean isStaleFileHandleInCausalChain(java.lang.Throwable throwable) { while (throwable != null) { if ((throwable instanceof java.io.IOException) && (com.googlesource.gerrit.plugins.events.fsstore.Nfs.isStaleFileHandle(((java.io.IOException) (throwable))))) { return true; } throwable = throwable.getCause(); } return false; },a84d81d79128426c5af783f50342a9d6af110159,isStaleFileHandleInCausalChain(java.lang.Throwable),94902,55,89
68604,gerrit-httpd_src_main_java_com_google_gerrit_httpd_gitweb_GitWebServlet.java,15.0,"private void exec(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp, final com.google.gerrit.server.project.ProjectControl project) throws java.io.IOException { final java.lang.Process proc = java.lang.Runtime.getRuntime().exec(new java.lang.String[]{ gitwebCgi.toAbsolutePath().toString() }, makeEnv(req, project), gitwebCgi.toAbsolutePath().getParent().toFile()); copyStderrToLog(proc.getErrorStream()); if (0 < (req.getContentLength())) { copyContentToCGI(req, proc.getOutputStream()); } else { proc.getOutputStream().close(); } try { final java.io.InputStream in; in = new java.io.BufferedInputStream(proc.getInputStream(), bufferSize); try { readCgiHeaders(rsp, in); final java.io.OutputStream out = rsp.getOutputStream(); try { final byte[] buf = new byte[bufferSize]; int n; while ((n = in.read(buf)) > 0) { out.write(buf, 0, n); } } finally { out.close(); } } finally { in.close(); } } catch (java.io.IOException e) { proc.destroy(); return; } try { proc.waitFor(); final int status = proc.exitValue(); if (0 != status) { com.google.gerrit.httpd.gitweb.GitWebServlet.log.error((((""Non-zero exit status ("" + status) + "") from "") + (gitwebCgi))); if (!(rsp.isCommitted())) { rsp.sendError(500); } } } catch (java.lang.InterruptedException ie) { com.google.gerrit.httpd.gitweb.GitWebServlet.log.debug(""CGI: interrupted waiting for CGI to terminate""); } }",113e002b5045f7d7ed305c0b8f1cc00c5fb2c208,"private void exec(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp, final com.google.gerrit.server.project.ProjectControl project) throws java.io.IOException { final java.lang.Process proc = java.lang.Runtime.getRuntime().exec(new java.lang.String[]{ gitwebCgi.toAbsolutePath().toString() }, makeEnv(req, project), gitwebCgi.toAbsolutePath().getParent().toFile()); copyStderrToLog(proc.getErrorStream()); if (0 < (req.getContentLength())) { copyContentToCGI(req, proc.getOutputStream()); } else { proc.getOutputStream().close(); } try { final java.io.InputStream in; in = new java.io.BufferedInputStream(proc.getInputStream(), bufferSize); try { readCgiHeaders(rsp, in); try (java.io.OutputStream out = rsp.getOutputStream()) { final byte[] buf = new byte[bufferSize]; int n; while ((n = in.read(buf)) > 0) { out.write(buf, 0, n); } } } finally { in.close(); } } catch (java.io.IOException e) { proc.destroy(); return; } try { proc.waitFor(); final int status = proc.exitValue(); if (0 != status) { com.google.gerrit.httpd.gitweb.GitWebServlet.log.error((((""Non-zero exit status ("" + status) + "") from "") + (gitwebCgi))); if (!(rsp.isCommitted())) { rsp.sendError(500); } } } catch (java.lang.InterruptedException ie) { com.google.gerrit.httpd.gitweb.GitWebServlet.log.debug(""CGI: interrupted waiting for CGI to terminate""); } }",e5df75a1ebf9b5802006f44a32826930a9357647,"exec(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,com.google.gerrit.server.project.ProjectControl)","exec(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,com.google.gerrit.server.project.ProjectControl)",5,15,"private void exec(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp, final com.google.gerrit.server.project.ProjectControl project) throws java.io.IOException { final java.lang.Process proc = java.lang.Runtime.getRuntime().exec(new java.lang.String[]{ gitwebCgi.toAbsolutePath().toString() }, makeEnv(req, project), gitwebCgi.toAbsolutePath().getParent().toFile()); copyStderrToLog(proc.getErrorStream()); if (0 < (req.getContentLength())) { copyContentToCGI(req, proc.getOutputStream()); } else { proc.getOutputStream().close(); } try (java.io.InputStream in = new java.io.BufferedInputStream(proc.getInputStream(), bufferSize)) { readCgiHeaders(rsp, in); try (java.io.OutputStream out = rsp.getOutputStream()) { final byte[] buf = new byte[bufferSize]; int n; while ((n = in.read(buf)) > 0) { out.write(buf, 0, n); } } } catch (java.io.IOException e) { proc.destroy(); return; } try { proc.waitFor(); final int status = proc.exitValue(); if (0 != status) { com.google.gerrit.httpd.gitweb.GitwebServlet.log.error((((""Non-zero exit status ("" + status) + "") from "") + (gitwebCgi))); if (!(rsp.isCommitted())) { rsp.sendError(500); } } } catch (java.lang.InterruptedException ie) { com.google.gerrit.httpd.gitweb.GitwebServlet.log.debug(""CGI: interrupted waiting for CGI to terminate""); } }",6442244588801978909c7b09d1e18d9014028b20,"exec(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,com.google.gerrit.server.project.ProjectControl)",114174,385,375
60733,gerrit-server_src_main_java_com_google_gerrit_server_project_SubmitRuleEvaluator.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.List<com.google.gerrit.common.data.SubmitRecord> ruleError(java.lang.String err, java.lang.Exception e) { if (logErrors) { com.google.gerrit.server.project.SubmitRuleEvaluator.log.error(err, e); return com.google.gerrit.server.project.SubmitRuleEvaluator.defaultRuleError(); } else { return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError(err); } }",81f48ecba8f02a460980a37f79c7d135409c23d1,,"ruleError(java.lang.String,java.lang.Exception)",4,14,"private java.util.List<com.google.gerrit.common.data.SubmitRecord> ruleError(java.lang.String err) { return ruleError(err, null); }",d8b42182e5cf292da0fbd6a88586d6b54ba8523f,ruleError(java.lang.String),195848,115,41
67742,gerrit-gwtui_src_main_java_com_google_gerrit_client_download_DownloadUrlLink.java,2.0,"public static java.util.List<com.google.gerrit.client.download.DownloadUrlLink> createDownloadUrlLinks(java.lang.String project, boolean allowAnonymous) { java.util.List<com.google.gerrit.client.download.DownloadUrlLink> urls = new java.util.ArrayList<>(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGeneralPreferences.DownloadScheme> allowedSchemes = com.google.gerrit.client.Gerrit.getConfig().getDownloadSchemes(); if ((allowAnonymous && ((com.google.gerrit.client.Gerrit.getConfig().getGitDaemonUrl()) != null)) && ((allowedSchemes.contains(DownloadScheme.ANON_GIT)) || (allowedSchemes.contains(DownloadScheme.DEFAULT_DOWNLOADS)))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.AnonGitLink(project)); } if (allowAnonymous && ((allowedSchemes.contains(DownloadScheme.ANON_HTTP)) || (allowedSchemes.contains(DownloadScheme.DEFAULT_DOWNLOADS)))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.AnonHttpLink(project)); } if ((((com.google.gerrit.client.Gerrit.getConfig().getSshdAddress()) != null) && (com.google.gerrit.client.download.DownloadUrlLink.hasUserName())) && ((allowedSchemes.contains(DownloadScheme.SSH)) || (allowedSchemes.contains(DownloadScheme.DEFAULT_DOWNLOADS)))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.SshLink(project)); } if (((com.google.gerrit.client.download.DownloadUrlLink.hasUserName()) || (com.google.gerrit.client.download.DownloadUrlLink.siteReliesOnHttp())) && ((allowedSchemes.contains(DownloadScheme.HTTP)) || (allowedSchemes.contains(DownloadScheme.DEFAULT_DOWNLOADS)))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.HttpLink(project, allowAnonymous)); } return urls; }",0ab36a6e6554341a2f3a939c75cecaf106dd8ff7,"public static java.util.List<com.google.gerrit.client.download.DownloadUrlLink> createDownloadUrlLinks(java.lang.String project, boolean allowAnonymous) { java.util.List<com.google.gerrit.client.download.DownloadUrlLink> urls = new java.util.ArrayList<>(); java.util.Set<java.lang.String> allowedSchemes = com.google.gerrit.client.Gerrit.getInfo().download().schemes(); if ((allowAnonymous && ((com.google.gerrit.client.Gerrit.getConfig().getGitDaemonUrl()) != null)) && (allowedSchemes.contains(""git""))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.AnonGitLink(project)); } if (allowAnonymous && (allowedSchemes.contains(""anonymous http""))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.AnonHttpLink(project)); } if ((((com.google.gerrit.client.Gerrit.getConfig().getSshdAddress()) != null) && (com.google.gerrit.client.download.DownloadUrlLink.hasUserName())) && (allowedSchemes.contains(""ssh""))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.SshLink(project)); } if (((com.google.gerrit.client.download.DownloadUrlLink.hasUserName()) || (com.google.gerrit.client.download.DownloadUrlLink.siteReliesOnHttp())) && (allowedSchemes.contains(""http""))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.HttpLink(project, allowAnonymous)); } return urls; }",2452bdf9faa479dae5043138a35505b332e1510d,"createDownloadUrlLinks(java.lang.String,boolean)","createDownloadUrlLinks(java.lang.String,boolean)",6,2,"public static java.util.List<com.google.gerrit.client.download.DownloadUrlLink> createDownloadUrlLinks(java.lang.String project, boolean allowAnonymous) { java.util.List<com.google.gerrit.client.download.DownloadUrlLink> urls = new java.util.ArrayList<>(); java.util.Set<java.lang.String> allowedSchemes = com.google.gerrit.client.Gerrit.info().download().schemes(); if ((allowAnonymous && ((com.google.gerrit.client.Gerrit.getConfig().getGitDaemonUrl()) != null)) && (allowedSchemes.contains(""git""))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.AnonGitLink(project)); } if (allowAnonymous && (allowedSchemes.contains(""anonymous http""))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.AnonHttpLink(project)); } if ((((com.google.gerrit.client.Gerrit.getConfig().getSshdAddress()) != null) && (com.google.gerrit.client.download.DownloadUrlLink.hasUserName())) && (allowedSchemes.contains(""ssh""))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.SshLink(project)); } if (((com.google.gerrit.client.download.DownloadUrlLink.hasUserName()) || (com.google.gerrit.client.download.DownloadUrlLink.siteReliesOnHttp())) && (allowedSchemes.contains(""http""))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.HttpLink(project, allowAnonymous)); } return urls; }",2c8e19e56e15c2e3b3f219b30161183c81df8dc8,"createDownloadUrlLinks(java.lang.String,boolean)",137873,390,390
70090,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide.java,32.0,"@java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeInfo info) { changeStatus = info.status(); info.revisions().copyKeysIntoChildren(""name""); if ((edit) != null) { edit.setName(edit.commit().commit()); info.setEdit(edit); info.revisions().put(edit.name(), com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.fromEdit(edit)); } HEAD((ec436a = ""Fix updating of username from AccountManager"")); int currentPatchSet = info.revision(info.currentRevision())._number(); java.lang.String currentRevision = info.current_revision(); boolean current = (currentRevision != null) && ((revision.get()) == (info.revision(currentRevision)._number())); BRANCH(4); com.google.gerrit.client.diff.bc067 Show; com.google.gerrit.client.diff.change status; draft(sets); com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> list = info.revisions().values(); com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.sortRevisionInfoByNumber(list); diffTable.set(prefs, list, diff, ((edit) != null), current, changeStatus.isOpen(), diff.binary()); header.setChangeInfo(info); }",f7e5ade3e0d1b9170fafbb0aef62dab79eaf7c04,"@java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeInfo info) { changeStatus = info.status(); info.revisions().copyKeysIntoChildren(""name""); if ((edit) != null) { edit.setName(edit.commit().commit()); info.setEdit(edit); info.revisions().put(edit.name(), com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.fromEdit(edit)); } java.lang.String currentRevision = info.currentRevision(); boolean current = (currentRevision != null) && ((revision.get()) == (info.revision(currentRevision)._number())); com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> list = info.revisions().values(); com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.sortRevisionInfoByNumber(list); diffTable.set(prefs, list, diff, ((edit) != null), current, changeStatus.isOpen(), diff.binary()); header.setChangeInfo(info); }",55c5dc9ecfa0e812f7eb1bc9a6e2088b586c935a,onSuccess(com.google.gerrit.client.changes.ChangeInfo),onSuccess(com.google.gerrit.client.changes.ChangeInfo),4,66,"@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo info) { changeStatus = info.status(); info.revisions().copyKeysIntoChildren(""name""); if ((edit) != null) { edit.setName(edit.commit().commit()); info.setEdit(edit); info.revisions().put(edit.name(), com.google.gerrit.client.info.ChangeInfo.RevisionInfo.fromEdit(edit)); } java.lang.String currentRevision = info.currentRevision(); boolean current = (currentRevision != null) && ((revision.get()) == (info.revision(currentRevision)._number())); com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.RevisionInfo> list = info.revisions().values(); com.google.gerrit.client.info.ChangeInfo.RevisionInfo.sortRevisionInfoByNumber(list); diffTable.set(prefs, list, diff, ((edit) != null), current, changeStatus.isOpen(), diff.binary()); header.setChangeInfo(info); }",cf582353baec3de6801a3758e8cb59536e4fe1b2,onSuccess(com.google.gerrit.client.info.ChangeInfo),128880,252,248
94513,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_api_changes_ChangeEditApi.java,,,,@java.lang.Override public void rebase() throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); },d230496c1d5cc798e810419531ca6614e8b284ee,,rebase(),5,21,@java.lang.Override public void rebase() { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); },85f3a99cb82ce88d5f64824f1edb9dd7bff8e715,rebase(),123463,45,30
25644,src_test_java_com_google_gwtorm_data_PersonAccess.java,2.0,"@com.google.gwtorm.client.PrimaryKey(""name"") com.google.gwtorm.data.TestPerson get(com.google.gwtorm.data.TestPerson.Key key) throws com.google.gwtorm.client.OrmException;",8570ba490ff677fd6ea04cd69458a0ed0ee67272,"@com.google.gwtorm.client.PrimaryKey(""name"") com.google.gwtorm.data.Person get(com.google.gwtorm.data.Person.Key key) throws com.google.gwtorm.client.OrmException;",2f0f197065b8d74e9be7d217074a0b0fac36ccb1,get(com.google.gwtorm.data.TestPerson$Key),get(com.google.gwtorm.data.Person$Key),4,3,"@com.google.gwtorm.server.PrimaryKey(""name"") com.google.gwtorm.data.Person get(com.google.gwtorm.data.Person.Key key) throws com.google.gwtorm.server.OrmException;",39f088d64852aa641a8dd4a082bee9a1d3613135,get(com.google.gwtorm.data.Person$Key),54677,54,54
59546,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static void createChange(java.lang.String project, java.lang.String branch, java.lang.String subject, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.ChangeInfo> cb) { com.google.gerrit.client.changes.ChangeApi.CreateChangeInput input = com.google.gerrit.client.changes.ChangeApi.CreateChangeInput.create(); input.project(com.google.gerrit.client.changes.ChangeApi.emptyToNull(project)); input.branch(com.google.gerrit.client.changes.ChangeApi.emptyToNull(branch)); input.subject(com.google.gerrit.client.changes.ChangeApi.emptyToNull(subject)); com.google.gerrit.client.changes.ChangeApi.call(""create"").post(input, cb); }",a056bf877b80a4cad7075c7b2423984fe41ed553,,"createChange(java.lang.String,java.lang.String,java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)",9,8,"public static void createChange(java.lang.String project, java.lang.String branch, java.lang.String subject, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.ChangeInfo> cb) { com.google.gerrit.client.changes.ChangeApi.CreateChangeInput input = com.google.gerrit.client.changes.ChangeApi.CreateChangeInput.create(); input.project(com.google.gerrit.client.changes.ChangeApi.emptyToNull(project)); input.branch(com.google.gerrit.client.changes.ChangeApi.emptyToNull(branch)); input.subject(com.google.gerrit.client.changes.ChangeApi.emptyToNull(subject)); new com.google.gerrit.client.rpc.RestApi(""/changes/"").post(input, cb); }",e71e6c59bdd49d40926b85474e66119aebadbee0,"createChange(java.lang.String,java.lang.String,java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)",89622,202,201
152952,java_com_google_gerrit_server_restapi_project_GetDashboard.java,3.0,"private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id)); java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0)); java.lang.String path = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards.parse(new com.google.gerrit.server.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.IdString.fromUrl(((ref + ':') + path))); }",e9d50afb916b499ada2b97b8678dd239f3e4fd4f,"private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id)); java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0)); java.lang.String path = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards.parse(new com.google.gerrit.server.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.IdString.fromUrl(((ref + ':') + path))); }",47fb93b2ecf24a11702326f37be2579e10fa13b9,"parse(com.google.gerrit.server.project.ProjectState,com.google.gerrit.server.CurrentUser,java.lang.String)","parse(com.google.gerrit.server.project.ProjectState,com.google.gerrit.server.CurrentUser,java.lang.String)",3,3,"private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.lang.String id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id)); java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0)); java.lang.String path = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards.parse(new com.google.gerrit.server.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.IdString.fromUrl(((ref + ':') + path))); }",355af11f5f8fc7d0e4ddc1f67d5e80e90f86f3b3,"parse(com.google.gerrit.server.project.ProjectState,com.google.gerrit.server.CurrentUser,java.lang.String)",8765,269,253
69361,src_test_java_com_ericsson_gerrit_plugins_eventslog_sql_SQLEntryTest.java,,,,"@org.junit.Before public void setUp() { java.sql.Timestamp timestamp = new java.sql.Timestamp(com.ericsson.gerrit.plugins.eventslog.sql.SQLEntryTest.NOW); entry1 = new com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry(""name1"", timestamp, ""event1"", java.lang.Integer.MAX_VALUE); entry2 = new com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry(""name2"", timestamp, ""event2"", java.lang.Integer.MIN_VALUE); entry3 = new com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry(""name3"", timestamp, ""event3"", 0); }",d3a13e870d5424eb9d794a526fdff589b10fd550,,setUp(),5,1,"@org.junit.Before public void setUp() { java.sql.Timestamp timestamp = new java.sql.Timestamp(com.ericsson.gerrit.plugins.eventslog.sql.SQLEntryTest.NOW); entry1 = new com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry(""name1"", timestamp, ""event1"", java.lang.Integer.MAX_VALUE); entry2 = new com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry(""name2"", timestamp, ""event2"", java.lang.Integer.MIN_VALUE); entry3 = new com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry(""name3"", timestamp, ""event3"", 0); entry4 = new com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry(""name4"", timestamp, ""event4"", java.lang.Integer.MAX_VALUE); }",cf7296287537f105ddc610d055f23d6b79c302aa,setUp(),107752,159,199
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,,@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroupMember get(com.google.gerrit.reviewdb.client.AccountGroupMember.Key key) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },53ec5d4cadf4b4dbe0da8c70ed1cff142bbf168a,,get(com.google.gerrit.reviewdb.client.AccountGroupMember$Key),3,12,@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroupMember get(com.google.gerrit.reviewdb.client.AccountGroupMember.Key key) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },3ba8f72edb55160619cc347d6c72a69e849e68c0,get(com.google.gerrit.reviewdb.client.AccountGroupMember$Key),205062,91,78
159470,java_com_google_gerrit_server_config_ScheduleConfig.java,13.0,public long getInitialDelay() { if ((initialDelay) == null) { load(); } return initialDelay; },fec2d34990b9342b5ba4c14240ff2311d8c8ef8a,public com.google.gerrit.server.config.ScheduleConfig.Schedule schedule() { if ((schedule) == null) { schedule = loadSchedule(); } return schedule; },02edfbb1468d23c700cae9ff2e2f20a28785a5d0,getInitialDelay(),schedule(),3,3,"@com.google.auto.value.extension.memoized.Memoized public com.google.gerrit.server.config.ScheduleConfig.Schedule schedule() { long interval = com.google.gerrit.server.config.ScheduleConfig.computeInterval(config(), section(), subsection(), keyInterval()); long initialDelay; if (interval > 0) { initialDelay = com.google.gerrit.server.config.ScheduleConfig.computeInitialDelay(config(), section(), subsection(), keyStartTime(), now(), interval); } else { initialDelay = interval; } return com.google.gerrit.server.config.ScheduleConfig.Schedule.create(interval, initialDelay); }",8b1a3cdfa81712b7128f8d0e7057f4b7778c88b6,schedule(),75265,38,141
49392,gerrit-server_src_main_java_com_google_gerrit_server_change_SuggestReviewers.java,,,,"private void addSuggestion(java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.account.AccountInfo> map, com.google.gerrit.reviewdb.client.Account account, com.google.gerrit.server.account.AccountInfo info, com.google.gerrit.server.change.SuggestReviewers.VisibilityControl visibilityControl) throws com.google.gwtorm.server.OrmException { if (map.containsKey(account.getId())) { return; } if (!(account.isActive())) { return; } if (visibilityControl.isVisible(account)) { map.put(account.getId(), info); } }",a12588dd154403ef2e37f3fc9358f02238f39959,,"addSuggestion(java.util.Map,com.google.gerrit.reviewdb.client.Account,com.google.gerrit.server.account.AccountInfo,com.google.gerrit.server.change.SuggestReviewers$VisibilityControl)",19,6,"private void addSuggestion(java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.account.AccountInfo> map, com.google.gerrit.reviewdb.client.Account account, com.google.gerrit.server.account.AccountInfo info, com.google.gerrit.server.change.SuggestReviewers.VisibilityControl visibilityControl) throws com.google.gwtorm.server.OrmException { if ((((!(map.containsKey(account.getId()))) && (account.isActive())) && (visibilityControl.isVisibleTo(account))) && (accountControlFactory.get().canSee(account))) { map.put(account.getId(), info); } }",cd49416d488d30f776f21675481337ed84460041,"addSuggestion(java.util.Map,com.google.gerrit.reviewdb.client.Account,com.google.gerrit.server.account.AccountInfo,com.google.gerrit.server.change.SuggestReviewers$VisibilityControl)",131359,155,163
75786,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,29.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void sshKeys() throws java.lang.Exception { java.util.List<com.google.gerrit.extensions.common.SshKeyInfo> info = gApi.accounts().self().listSshKeys(); assertThat(info).hasSize(1); com.google.gerrit.extensions.common.SshKeyInfo key = info.get(0); java.lang.String inital = com.google.gerrit.acceptance.AccountCreator.publicKey(admin.sshKey, admin.email); assertThat(key.sshPublicKey).isEqualTo(inital); java.lang.String newKey = com.google.gerrit.acceptance.AccountCreator.publicKey(com.google.gerrit.acceptance.AccountCreator.genSshKey(), admin.email); gApi.accounts().self().addSshKey(newKey); info = gApi.accounts().self().listSshKeys(); assertThat(info).hasSize(2); gApi.accounts().self().addSshKey(inital); assertThat(info).hasSize(2); }",6e55a39b63bbd0cca2b35f3f470c3399275f54c1,,sshKeys(),10,23,"@org.junit.Test public void sshKeys() throws java.lang.Exception { java.util.List<com.google.gerrit.extensions.common.SshKeyInfo> info = gApi.accounts().self().listSshKeys(); assertThat(info).hasSize(1); com.google.gerrit.extensions.common.SshKeyInfo key = info.get(0); java.lang.String inital = com.google.gerrit.acceptance.AccountCreator.publicKey(admin.sshKey, admin.email); assertThat(key.sshPublicKey).isEqualTo(inital); java.lang.String newKey = com.google.gerrit.acceptance.AccountCreator.publicKey(com.google.gerrit.acceptance.AccountCreator.genSshKey(), admin.email); gApi.accounts().self().addSshKey(newKey); info = gApi.accounts().self().listSshKeys(); assertThat(info).hasSize(2); gApi.accounts().self().addSshKey(inital); info = gApi.accounts().self().listSshKeys(); assertThat(info).hasSize(3); }",7676735e4f90f83580c651dda1d4248c0a1faa42,sshKeys(),202216,225,238
97812,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_ChangeApiImpl.java,33.0,"@java.lang.Override public void topic(java.lang.String topic) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.change.PutTopic.Input in = new com.google.gerrit.server.change.PutTopic.Input(); in.topic = topic; try { putTopic.apply(change, in); } catch (com.google.gerrit.server.git.UpdateException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot set topic"", e); } }",c3aaebca31ebcdbea2887398ce59468eb92d8222,"@java.lang.Override public void topic(java.lang.String topic) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.change.PutTopic.Input in = new com.google.gerrit.server.change.PutTopic.Input(); in.topic = topic; try { putTopic.apply(change, in); } catch (com.google.gerrit.server.git.UpdateException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot set topic"", e); } }",2c2ef5e7ba08df39c8606b687a9288ae8292f727,topic(java.lang.String),topic(java.lang.String),17,18,"@java.lang.Override public void topic(java.lang.String topic) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.change.PutTopic.Input in = new com.google.gerrit.server.change.PutTopic.Input(); in.topic = topic; try { putTopic.apply(change, in); } catch (com.google.gerrit.server.update.UpdateException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot set topic"", e); } }",c22a0d86ef918025b99ef1994eb4e9fe81540dcf,topic(java.lang.String),139985,143,143
76640,gerrit-server_src_main_java_com_google_gerrit_server_StarredChangesUtil.java,15.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void updateLabels(org.eclipse.jgit.lib.Repository repo, java.lang.String refName, org.eclipse.jgit.lib.ObjectId oldObjectId, java.util.SortedSet<java.lang.String> labels) throws com.google.gwtorm.server.OrmException, java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.RefUpdate u = repo.updateRef(refName); u.setExpectedOldObjectId(oldObjectId); u.setForceUpdate(true); u.setNewObjectId(com.google.gerrit.server.StarredChangesUtil.writeLabels(repo, labels)); u.setRefLogIdent(serverIdent); u.setRefLogMessage(""Update star labels"", true); org.eclipse.jgit.lib.RefUpdate.Result result = u.update(rw); switch (result) { case NEW : case FORCED : case NO_CHANGE : case FAST_FORWARD : return; case IO_FAILURE : case LOCK_FAILURE : case NOT_ATTEMPTED : case REJECTED : case REJECTED_CURRENT_BRANCH : case RENAMED : default : throw new com.google.gwtorm.server.OrmException(java.lang.String.format(""Update star labels on ref %s failed: %s"", refName, result.name())); } } }",45b1bb448df931c4c6b2ede2a4ff19b31fbf7c21,,"updateLabels(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.lib.ObjectId,java.util.SortedSet)",10,11,"private void updateLabels(org.eclipse.jgit.lib.Repository repo, java.lang.String refName, org.eclipse.jgit.lib.ObjectId oldObjectId, java.util.SortedSet<java.lang.String> labels) throws com.google.gwtorm.server.OrmException, java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.RefUpdate u = repo.updateRef(refName); u.setExpectedOldObjectId(oldObjectId); u.setForceUpdate(true); u.setNewObjectId(com.google.gerrit.server.StarredChangesUtil.writeLabels(repo, labels)); u.setRefLogIdent(serverIdent); u.setRefLogMessage(""Update star labels"", true); org.eclipse.jgit.lib.RefUpdate.Result result = u.update(rw); switch (result) { case NEW : case FORCED : case NO_CHANGE : case FAST_FORWARD : return; case IO_FAILURE : case LOCK_FAILURE : case NOT_ATTEMPTED : case REJECTED : case REJECTED_CURRENT_BRANCH : case RENAMED : throw new com.google.gwtorm.server.OrmException(java.lang.String.format(""Update star labels on ref %s failed: %s"", refName, result.name())); } } }",2cefac5e89ced979f5d0a7cb5c72228a913996a6,"updateLabels(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.lib.ObjectId,java.util.SortedSet)",32051,340,337
144390,src_test_java_com_ericsson_gerrit_plugins_highavailability_health_HealthServletTest.java,1.0,@org.junit.Before public void setUp() throws java.lang.Exception { servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(); },3e0de00fb864e421400f72869fea4779047f8731,@org.junit.Before public void setUp() throws java.lang.Exception { servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(tempFolder.getRoot().toPath()); },ae4b85bf1977fd1bf6b12c88e7f6545bb303fdec,setUp(),setUp(),6,4,"@org.junit.Before public void setUp() throws java.lang.Exception { when(currentUserProviderMock.get()).thenReturn(currentUserMock); when(currentUserMock.getCapabilities()).thenReturn(capabilityControlMock); when(capabilityControlMock.canAdministrateServer()).thenReturn(true); servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(currentUserProviderMock, tempFolder.getRoot().toPath()); }",215ef96a8df6d592e6e63a3f9b3bd75dc3389d80,setUp(),66586,47,97
152952,java_com_google_gerrit_server_restapi_project_DashboardsCollection.java,3.0,"@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.restapi.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",05010da3618980ff9445d7b2ad0103c8a1b7e929,"@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.restapi.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",8da8fbafa745eba95f96952cdf70202d68edd1e6,"parse(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)","parse(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)",3,3,"@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { parent.getProjectState().checkStatePermitsRead(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.restapi.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",39d650f75f1a0b8bbf248e183cb0550f01c488ba,"parse(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)",8782,419,412
56421,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,17.0,private static boolean isLargeFile(com.google.gerrit.client.diff.DiffInfo diffInfo) { return (((diffInfo.meta_a()) != null) && ((diffInfo.meta_a().lines()) > 500)) || (((diffInfo.meta_b()) != null) && ((diffInfo.meta_b().lines()) > 500)); },a366c916a03c5ce3ace0de613dbdf450ffa182ae,private static com.google.gerrit.client.diff.SideBySide2.FileSize bucketFileSize(com.google.gerrit.client.diff.DiffInfo diff) { com.google.gerrit.client.diff.DiffInfo.FileMeta a = diff.meta_a(); com.google.gerrit.client.diff.DiffInfo.FileMeta b = diff.meta_b(); com.google.gerrit.client.diff.SideBySide2.FileSize[] sizes = com.google.gerrit.client.diff.SideBySide2.FileSize.values(); for (int i = (sizes.length) - 1; 0 <= i; i--) { com.google.gerrit.client.diff.SideBySide2.FileSize s = sizes[i]; if (((a != null) && ((s.lines) <= (a.lines()))) || ((b != null) && ((s.lines) <= (b.lines())))) { return s; } } return com.google.gerrit.client.diff.SideBySide2.FileSize.REASONABLE; },7a3e0b2093247c4fc8c150cbafc04f4cdfbf0b72,isLargeFile(com.google.gerrit.client.diff.DiffInfo),bucketFileSize(com.google.gerrit.client.diff.DiffInfo),2,59,private static com.google.gerrit.client.diff.SideBySide2.FileSize bucketFileSize(com.google.gerrit.client.diff.DiffInfo diff) { com.google.gerrit.client.diff.DiffInfo.FileMeta a = diff.meta_a(); com.google.gerrit.client.diff.DiffInfo.FileMeta b = diff.meta_b(); com.google.gerrit.client.diff.SideBySide2.FileSize[] sizes = com.google.gerrit.client.diff.SideBySide2.FileSize.values(); for (int i = (sizes.length) - 1; 0 <= i; i--) { com.google.gerrit.client.diff.SideBySide2.FileSize s = sizes[i]; if (((a != null) && ((s.lines) <= (a.lines()))) || ((b != null) && ((s.lines) <= (b.lines())))) { return s; } } return com.google.gerrit.client.diff.SideBySide2.FileSize.SMALL; },34ebbcbb362b6b3e0972fbe62664ba1dd5e93fa9,bucketFileSize(com.google.gerrit.client.diff.DiffInfo),145559,235,234
59883,gerrit-server_src_test_java_com_google_gerrit_server_query_change_AbstractQueryChangesTest.java,26.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void byStatusPrefix() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = createProject(""repo""); com.google.gerrit.server.change.ChangeInserter ins1 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change1 = ins1.getChange(); change1.setStatus(Change.Status.NEW); ins1.insert(); com.google.gerrit.server.change.ChangeInserter ins2 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change2 = ins2.getChange(); change2.setStatus(Change.Status.MERGED); ins2.insert(); assertResultEquals(change1, queryOne(""status:n"")); assertResultEquals(change1, queryOne(""status:ne"")); assertResultEquals(change1, queryOne(""status:new"")); assertResultEquals(change1, queryOne(""status:N"")); assertResultEquals(change1, queryOne(""status:nE"")); assertResultEquals(change1, queryOne(""status:neW"")); try { query(""status:newx""); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { } }",f38cc674739d09f1636dbb363fdfefd42cfda02b,,byStatusPrefix(),3,46,"@org.junit.Test public void byStatusPrefix() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = createProject(""repo""); com.google.gerrit.server.change.ChangeInserter ins1 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change1 = ins1.getChange(); change1.setStatus(Change.Status.NEW); ins1.insert(); com.google.gerrit.server.change.ChangeInserter ins2 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change2 = ins2.getChange(); change2.setStatus(Change.Status.MERGED); ins2.insert(); assertResultEquals(change1, queryOne(""status:n"")); assertResultEquals(change1, queryOne(""status:ne"")); assertResultEquals(change1, queryOne(""status:new"")); assertResultEquals(change1, queryOne(""status:N"")); assertResultEquals(change1, queryOne(""status:nE"")); assertResultEquals(change1, queryOne(""status:neW"")); assertBadQuery(""status:nx""); assertBadQuery(""status:newx""); }",2cacbf85ac4a57423340be3b5d2f9272e0947695,byStatusPrefix(),153206,306,293
146191,gerrit-sshd_src_main_java_com_google_gerrit_sshd_SshLog.java,4.0,"private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return ""Command was already destroyed""; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] args = dcmd.getArguments(); for (int i = 1; i < (args.length); i++) { commandName.append(""."").append(args[i]); } return commandName.toString(); }",fb8f919e7c112abba762266fa30d8cb2d2496216,"private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd, com.google.common.collect.ListMultimap<java.lang.String, ?> parameters) { if (dcmd == null) { return ""Command was already destroyed""; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] args = dcmd.getArguments(); commandName.append(""."").append(args[1]); for (java.lang.String key : parameters.keys()) { for (java.lang.Object value : parameters.get(key)) { if (key.toString().startsWith(""$"")) { commandName.append(""."").append(value); } } } for (java.lang.String key : parameters.keys()) { for (java.lang.Object value : parameters.get(key)) { if (!(key.toString().startsWith(""$""))) { commandName.append(""."").append(key).append(""."").append(value); } } } return commandName.toString(); }",da5121ed348d6ae932505f2ea32712934f675ba7,extractWhat(com.google.gerrit.sshd.DispatchCommand),"extractWhat(com.google.gerrit.sshd.DispatchCommand,com.google.common.collect.ListMultimap)",18,4,"private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd, boolean hideSensitive) { if (dcmd == null) { return ""Command was already destroyed""; } return hideSensitive ? dcmd.getFormattedMaskedArguments(""."") : extractWhat(dcmd); }",f532c3371038f98e4c2876911c07083bdf22e71e,"extractWhat(com.google.gerrit.sshd.DispatchCommand,boolean)",107566,233,69
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,93.0,"public com.google.gerrit.server.project.ChangeControl changeControl() throws com.google.gwtorm.server.OrmException { if ((changeControl) == null) { com.google.gerrit.reviewdb.client.Change c = change(); try { changeControl = changeControlFactory.controlFor(db, c, userFactory.create(c.getOwner())); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException(e); } } return changeControl; }",ab3c2a897ab30413d8d612c3b926ef9373e6200d,"public com.google.gerrit.server.project.ChangeControl changeControl() throws com.google.gwtorm.server.OrmException { if ((changeControl) == null) { com.google.gerrit.reviewdb.client.Change c = change(); try { changeControl = a.changeControlFactory.controlFor(db, c, a.userFactory.create(c.getOwner())); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException(e); } } return changeControl; }",13f452e900d395c62c596591c5bd2ab5a6230b08,changeControl(),changeControl(),5,93,"public com.google.gerrit.server.project.ChangeControl changeControl() throws com.google.gwtorm.server.OrmException { if ((changeControl) == null) { com.google.gerrit.reviewdb.client.Change c = change(); try { changeControl = changeControlFactory.controlFor(db, c, userFactory.create(c.getOwner())); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException(e); } } return changeControl; }",ab3c2a897ab30413d8d612c3b926ef9373e6200d,changeControl(),94345,132,128
23526,gerrit-server_src_test_java_com_google_gerrit_rules_common_CommonRulesTest.java,,,,"private static com.google.gerrit.common.data.ApprovalType verifiedCategory() { com.google.gerrit.reviewdb.ApprovalCategory cat; java.util.ArrayList<com.google.gerrit.reviewdb.ApprovalCategoryValue> vals; cat = new com.google.gerrit.reviewdb.ApprovalCategory(new com.google.gerrit.reviewdb.ApprovalCategory.Id(""VRIF""), ""Verified""); cat.setPosition(((short) (1))); cat.setAbbreviatedName(""V""); vals = new java.util.ArrayList<com.google.gerrit.reviewdb.ApprovalCategoryValue>(); vals.add(com.google.gerrit.rules.common.CommonRulesTest.value(cat, 1, ""Verified"")); vals.add(com.google.gerrit.rules.common.CommonRulesTest.value(cat, 0, ""No score"")); vals.add(com.google.gerrit.rules.common.CommonRulesTest.value(cat, (-1), ""Fails"")); return new com.google.gerrit.common.data.ApprovalType(cat, vals); }",eeb31063992c402f5f39cb090d12b3f4451f8b6d,,verifiedCategory(),4,4,"private static com.google.gerrit.common.data.ApprovalType verifiedCategory() { com.google.gerrit.reviewdb.ApprovalCategory cat = com.google.gerrit.rules.common.CommonRulesTest.category(1, ""VRIF"", ""Verified""); java.util.List<com.google.gerrit.reviewdb.ApprovalCategoryValue> vals = com.google.gerrit.rules.common.CommonRulesTest.newList(); vals.add(com.google.gerrit.rules.common.CommonRulesTest.value(cat, 1, ""Verified"")); vals.add(com.google.gerrit.rules.common.CommonRulesTest.value(cat, 0, ""No score"")); vals.add(com.google.gerrit.rules.common.CommonRulesTest.value(cat, (-1), ""Fails"")); return new com.google.gerrit.common.data.ApprovalType(cat, vals); }",8a5dd7015b477406003ee8b03127adbb34c02f29,verifiedCategory(),129503,246,206
62839,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_PreferencesBox.java,6.0,"@java.lang.Override public void onSuccess(java.lang.Void result) { if ((prefs.syntaxHighlighting()) && (view.isAttached())) { view.operation(new java.lang.Runnable() { @java.lang.Override public void run() { view.getCmFromSide(DisplaySide.A).setOption(""mode"", mode); view.getCmFromSide(DisplaySide.B).setOption(""mode"", mode); } }); } }",406550c0bddfe5de0c2e574a854ed48c3972a601,"@java.lang.Override public void onSuccess(java.lang.Void result) { if (((prefs.syntaxHighlighting()) && (com.google.gerrit.client.diff.PreferencesBox.eq(mode, getSelectedMode()))) && (view.isAttached())) { view.operation(new java.lang.Runnable() { @java.lang.Override public void run() { view.getCmFromSide(DisplaySide.A).setOption(""mode"", mode); view.getCmFromSide(DisplaySide.B).setOption(""mode"", mode); } }); } }",1c64d910cedeef1fb6222a394d6d5eaeab178577,onSuccess(java.lang.Void),onSuccess(java.lang.Void),4,6,"@java.lang.Override public void onSuccess(java.lang.Void result) { if (((prefs.syntaxHighlighting()) && (java.util.Objects.equals(mode, getSelectedMode()))) && (view.isAttached())) { view.operation(new java.lang.Runnable() { @java.lang.Override public void run() { view.getCmFromSide(DisplaySide.A).setOption(""mode"", mode); view.getCmFromSide(DisplaySide.B).setOption(""mode"", mode); } }); } }",8f612926b8d00f37df014f178d223f323a150328,onSuccess(java.lang.Void),26884,123,115
24659,gerrit-server_src_main_java_com_google_gerrit_server_project_RefControl.java,23.0,public boolean canDelete() { if (GitRepositoryManager.REF_CONFIG.equals(refName)) { return false; } switch (getCurrentUser().getAccessPath()) { case WEB_UI : return (isOwner()) || (canPushWithForce()); case GIT : return canPushWithForce(); default : return false; } },2b3bc53be6331d55c890f08a8440bb6a3ed6d807,public boolean canDelete() { if ((!(isActive())) || (GitRepositoryManager.REF_CONFIG.equals(refName))) { return false; } switch (getCurrentUser().getAccessPath()) { case WEB_UI : return (isOwner()) || (canPushWithForce()); case GIT : return canPushWithForce(); default : return false; } },ab0131e4c5deafa245560c1a15744fd2f891e139,canDelete(),canDelete(),7,23,public boolean canDelete() { if ((!(canWrite())) || (GitRepositoryManager.REF_CONFIG.equals(refName))) { return false; } switch (getCurrentUser().getAccessPath()) { case WEB_UI : return (isOwner()) || (canPushWithForce()); case GIT : return canPushWithForce(); default : return false; } },6e872d29fc6fa5150d4ca7943b51bebfd5eda1ed,canDelete(),141051,78,78
62853,gerrit-gwtui_src_main_java_com_google_gerrit_client_editor_EditScreen.java,12.0,"@com.google.gwt.uibinder.client.UiHandler(""cancel"") void onCancel(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if ((cm.isClean(generation)) || (com.google.gwt.user.client.Window.confirm(EditConstants.I.cancelUnsavedChanges()))) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(revision.getParentKey())); } }",89e2a72bbc920a108388bd630840e41153de9cba,"@com.google.gwt.uibinder.client.UiHandler(""cancel"") void onCancel(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if ((cm.isClean(generation)) || (com.google.gwt.user.client.Window.confirm(EditConstants.I.cancelUnsavedChanges()))) { upToChange(); } }",4b23fc3f88a1426349c37f042389bde0ed7c5741,onCancel(com.google.gwt.event.dom.client.ClickEvent),onCancel(com.google.gwt.event.dom.client.ClickEvent),4,1,"@com.google.gwt.uibinder.client.UiHandler(""close"") void onClose(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if ((cm.isClean(generation)) || (com.google.gwt.user.client.Window.confirm(EditConstants.I.cancelUnsavedChanges()))) { upToChange(); } }",458416e62c51e41f9589c11973ca220ea4ed2e8d,onClose(com.google.gwt.event.dom.client.ClickEvent),82789,88,88
80513,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_CreateChangeIT.java,6.0,"@org.junit.Test public void dryRunMerge_Conflicts() throws java.lang.Exception { changeInTwoBranches(""a.txt"", ""a.txt""); com.google.gerrit.acceptance.RestResponse r = adminRestSession.get(((""/projects/"" + (project.get())) + ""/branches/master/mergeable?source=branchA"")); com.google.gerrit.extensions.common.MergeableInfo m = newGson().fromJson(r.getReader(), com.google.gerrit.extensions.common.MergeableInfo.class); assertThat(m.mergeable).isFalse(); assertThat(m.conflicts).containsExactly(""a.txt""); }",155e1993453c733c3c42a994371dddec54103c68,"@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(submitType = com.google.gerrit.extensions.client.SubmitType.CHERRY_PICK) public void onlyContentMerged() throws java.lang.Exception { testRepo.branch(""HEAD"").commit().insertChangeId().message(""first commit"").add(""a.txt"", ""a contents "").create(); testRepo.git().push().setRemote(""origin"").setRefSpecs(new org.eclipse.jgit.transport.RefSpec(""HEAD:refs/heads/master"")).call(); com.google.gerrit.acceptance.PushOneCommit.Result cId = createChange(); approve(cId.getChangeId()); org.eclipse.jgit.revwalk.RevCommit commitId = cId.getCommit(); gApi.changes().id(cId.getChangeId()).current().submit(); org.eclipse.jgit.lib.ObjectId remoteId = getRemoteHead(); assertThat(remoteId).isNotEqualTo(commitId); com.google.gerrit.extensions.common.ChangeInput in = newMergeChangeInput(""master"", commitId.getName(), """"); assertCreateSucceeds(in); }",a006b0c6cf23c8ee0eed063f831d51bb639c22e5,dryRunMerge_Conflicts(),onlyContentMerged(),11,21,"@org.junit.Test public void onlyContentMerged() throws java.lang.Exception { testRepo.branch(""HEAD"").commit().insertChangeId().message(""first commit"").add(""a.txt"", ""a contents "").create(); testRepo.git().push().setRemote(""origin"").setRefSpecs(new org.eclipse.jgit.transport.RefSpec(""HEAD:refs/heads/master"")).call(); com.google.gerrit.acceptance.PushOneCommit.Result cId = createChange(); org.eclipse.jgit.revwalk.RevCommit commitId = cId.getCommit(); com.google.gerrit.extensions.api.changes.CherryPickInput cpi = new com.google.gerrit.extensions.api.changes.CherryPickInput(); cpi.destination = ""master""; cpi.message = ""cherry pick the commit""; com.google.gerrit.extensions.api.changes.ChangeApi orig = gApi.changes().id(cId.getChangeId()); com.google.gerrit.extensions.api.changes.ChangeApi cherry = orig.current().cherryPick(cpi); cherry.current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); cherry.current().submit(); org.eclipse.jgit.lib.ObjectId remoteId = getRemoteHead(); assertThat(remoteId).isNotEqualTo(commitId); com.google.gerrit.extensions.common.ChangeInput in = newMergeChangeInput(""master"", commitId.getName(), """"); assertCreateSucceeds(in); }",6ebe6639c02f1c927fab1cd45a29df00cbecdeeb,onlyContentMerged(),33690,269,359
17565,gerrit-server_src_main_java_com_google_gerrit_common_ChangeHookRunner.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void fireEvent(com.google.gerrit.reviewdb.Project.NameKey projectName, com.google.gerrit.reviewdb.Branch.NameKey branchName, final com.google.gerrit.server.events.ChangeEvent event) { for (com.google.gerrit.common.ChangeHookRunner.ChangeListenerHolder holder : listeners.values()) { if (isVisibleTo(projectName, branchName, holder.user)) { holder.listener.onChangeEvent(event); } } }",dfd16a8cc93a0113d4fc1a7da72bdaa2750f0d33,,"fireEvent(com.google.gerrit.reviewdb.Project$NameKey,com.google.gerrit.reviewdb.Branch$NameKey,com.google.gerrit.server.events.ChangeEvent)",8,11,"private void fireEvent(com.google.gerrit.reviewdb.Branch.NameKey branchName, final com.google.gerrit.server.events.ChangeEvent event) { for (com.google.gerrit.common.ChangeHookRunner.ChangeListenerHolder holder : listeners.values()) { if (isVisibleTo(branchName, holder.user)) { holder.listener.onChangeEvent(event); } } }",6036422f0ceed42c5c2b6eddf7c0d5215cfad784,"fireEvent(com.google.gerrit.reviewdb.Branch$NameKey,com.google.gerrit.server.events.ChangeEvent)",90360,108,89
37011,gerrit-httpd_src_main_java_com_google_gerrit_httpd_SignedTokenRestTokenVerifier.java,,,,"public com.google.gerrit.httpd.ParsedToken decode(java.lang.String tokenString) throws com.google.gerrit.httpd.InvalidTokenException { com.google.gwtjsonrpc.server.ValidToken token; try { token = com.google.gerrit.httpd.SignedTokenRestTokenVerifier.restToken.checkToken(tokenString, null); } catch (com.google.gwtjsonrpc.server.XsrfException err) { throw new com.google.gerrit.httpd.InvalidTokenException(err); } if (((token == null) || ((token.getData()) == null)) || (token.getData().isEmpty())) { throw new com.google.gerrit.httpd.InvalidTokenException(); } java.lang.String payload; try { payload = new java.lang.String(org.eclipse.jgit.util.Base64.decode(token.getData()), ""UTF-8""); } catch (java.io.UnsupportedEncodingException err) { throw new com.google.gerrit.httpd.InvalidTokenException(err); } int colonPos = payload.indexOf(':'); if (colonPos == (-1)) { throw new com.google.gerrit.httpd.InvalidTokenException(); } java.lang.String user; try { user = payload.substring(0, colonPos); } catch (java.lang.IllegalArgumentException err) { throw new com.google.gerrit.httpd.InvalidTokenException(err); } java.lang.String url = payload.substring((colonPos + 1)); return new com.google.gerrit.httpd.ParsedToken(user, url); }",24db9b32e39ff21b0cb2eb21ac3a1bc9564e03c1,,decode(java.lang.String),6,0,"@java.lang.Override public void verify(com.google.gerrit.reviewdb.client.Account.Id user, java.lang.String url, java.lang.String tokenString) throws com.google.gerrit.httpd.InvalidTokenException { com.google.gwtjsonrpc.server.ValidToken token; try { token = restToken.checkToken(tokenString, null); } catch (com.google.gwtjsonrpc.server.XsrfException err) { throw new com.google.gerrit.httpd.InvalidTokenException(err); } if (((token == null) || ((token.getData()) == null)) || (token.getData().isEmpty())) { throw new com.google.gerrit.httpd.InvalidTokenException(); } java.lang.String payload; try { payload = new java.lang.String(org.eclipse.jgit.util.Base64.decode(token.getData()), ""UTF-8""); } catch (java.io.UnsupportedEncodingException err) { throw new com.google.gerrit.httpd.InvalidTokenException(err); } int colonPos = payload.indexOf(':'); if (colonPos == (-1)) { throw new com.google.gerrit.httpd.InvalidTokenException(); } com.google.gerrit.reviewdb.client.Account.Id tokenUser; try { tokenUser = Account.Id.parse(payload.substring(0, colonPos)); } catch (java.lang.IllegalArgumentException err) { throw new com.google.gerrit.httpd.InvalidTokenException(err); } java.lang.String tokenUrl = payload.substring((colonPos + 1)); if ((!(tokenUser.equals(user))) || (!(tokenUrl.equals(url)))) { throw new com.google.gerrit.httpd.InvalidTokenException(); } }",51707453db6f4e1e08cd2feca983b3774a97efce,"verify(com.google.gerrit.reviewdb.client.Account$Id,java.lang.String,java.lang.String)",93034,354,397
76894,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_UnifiedCommentManager.java,2.0,"@java.lang.Override void clearLine(com.google.gerrit.client.diff.DisplaySide side, int cmLinePlusOne, com.google.gerrit.client.diff.CommentGroup group) { java.util.SortedMap<java.lang.Integer, com.google.gerrit.client.diff.UnifiedCommentGroup> map = map(side); if ((map.get(cmLinePlusOne)) == group) { map.remove(cmLinePlusOne); } }",3135f620ce51ecda2d3c98fa9a470c57944fcbc0,"@java.lang.Override int getCommentLine(com.google.gerrit.client.diff.DisplaySide side, int cmLinePlusOne) { com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo info = ((com.google.gerrit.client.diff.Unified) (host)).getLineRegionInfoFromCmLine((cmLinePlusOne - 1)); int line = info.line; if ((info.getSide()) != side) { line = host.lineOnOther(info.getSide(), line).getLine(); } return line; }",ff6e22a6fa68214bb40994550018edd1401da486,"clearLine(com.google.gerrit.client.diff.DisplaySide,int,com.google.gerrit.client.diff.CommentGroup)","getCommentLine(com.google.gerrit.client.diff.DisplaySide,int)",9,3,@java.lang.Override com.google.gerrit.client.diff.CommentGroup getCommentGroupOnActiveLine(net.codemirror.lib.CodeMirror cm) { com.google.gerrit.client.diff.CommentGroup group = null; if (cm.extras().hasActiveLine()) { int cmLinePlusOne = (cm.getLineNumber(cm.extras().activeLine())) + 1; com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo info = ((com.google.gerrit.client.diff.Unified) (host)).getLineRegionInfoFromCmLine((cmLinePlusOne - 1)); com.google.gerrit.client.diff.CommentGroup forSide = map(info.getSide()).get(cmLinePlusOne); group = (forSide == null) ? map(info.getSide().otherSide()).get(cmLinePlusOne) : forSide; } return group; },b69d926c3817b646f791be346c7caffe7ae2a5f9,getCommentGroupOnActiveLine(net.codemirror.lib.CodeMirror),67748,128,208
106453,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIdIT.java,,,,"@org.junit.Test public void projectChangeIdReturnsChange() throws java.lang.Exception { com.google.gerrit.extensions.api.changes.ChangeApi cApi = gApi.changes().id(project.get(), changeInfo._number); assertThat(cApi.get().changeId).isEqualTo(changeInfo.changeId); }",786c4ce83e05a0ba9507694ff175e0c69d3d67ab,,projectChangeIdReturnsChange(),4,7,"@org.junit.Test public void projectChangeNumberReturnsChange() throws java.lang.Exception { com.google.gerrit.extensions.api.changes.ChangeApi cApi = gApi.changes().id(project.get(), changeInfo._number); assertThat(cApi.get().changeId).isEqualTo(changeInfo.changeId); }",6837e55f5b50ed4bc729f0316ea0b66bab165703,projectChangeNumberReturnsChange(),175386,78,78
92012,gerrit-server_src_main_java_com_google_gerrit_server_mail_send_CommentFormatter.java,6.0,"private static com.google.gerrit.server.mail.send.CommentFormatter.Block makeQuote(java.lang.String p) { if (p.startsWith(""> "")) { p = p.substring(2); } else if (p.startsWith("" > "")) { p = p.substring(3); } com.google.gerrit.server.mail.send.CommentFormatter.Block block = new com.google.gerrit.server.mail.send.CommentFormatter.Block(); block.type = com.google.gerrit.server.mail.send.CommentFormatter.BlockType.QUOTE; block.text = p.replaceAll(""\n\\s?>\\s"", ""\n"").trim(); return block; }",d70fcaba84ec6698f8c0d8574de379fa1fe14789,"private static com.google.gerrit.server.mail.send.CommentFormatter.Block makeQuote(java.lang.String p) { java.lang.String quote = p.replaceAll(""\n\\s?>\\s?"", ""\n""); if (quote.startsWith(""> "")) { quote = quote.substring(2); } else if (quote.startsWith("" > "")) { quote = quote.substring(3); } com.google.gerrit.server.mail.send.CommentFormatter.Block block = new com.google.gerrit.server.mail.send.CommentFormatter.Block(); block.type = com.google.gerrit.server.mail.send.CommentFormatter.BlockType.QUOTE; block.blocks = com.google.gerrit.server.mail.send.CommentFormatter.parse(quote); return block; }",a447ed2ced26e29717ca732ef0eed8ef668e9af6,makeQuote(java.lang.String),makeQuote(java.lang.String),4,6,"private static com.google.gerrit.server.mail.send.CommentFormatter.Block makeQuote(java.lang.String p) { java.lang.String quote = p.replaceAll(""\n\\s?>\\s?"", ""\n""); if (quote.startsWith(""> "")) { quote = quote.substring(2); } else if (quote.startsWith("" > "")) { quote = quote.substring(3); } com.google.gerrit.server.mail.send.CommentFormatter.Block block = new com.google.gerrit.server.mail.send.CommentFormatter.Block(); block.type = com.google.gerrit.server.mail.send.CommentFormatter.BlockType.QUOTE; block.quotedBlocks = com.google.gerrit.server.mail.send.CommentFormatter.parse(quote); return block; }",5f538f9e19ef1d69c2bf4f2b15192744c43087e9,makeQuote(java.lang.String),56582,179,180
59921,gerrit-server_src_main_java_com_google_gerrit_server_change_PutHashtags.java,,,,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.Set<java.lang.String>> apply(com.google.gerrit.server.change.ChangeResource req, com.google.gerrit.server.change.PutHashtags.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.hashtags))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""Hashtags are required""); } com.google.gerrit.server.project.ChangeControl control = req.getControl(); com.google.gerrit.server.notedb.ChangeUpdate update = updateFactory.create(control); com.google.gerrit.server.notedb.ChangeNotes notes = control.getNotes().load(); java.util.Set<java.lang.String> oldHashtags = notes.getHashtags(); java.util.Set<java.lang.String> hashtags = new java.util.HashSet<java.lang.String>(); if (oldHashtags != null) { hashtags.addAll(oldHashtags); } hashtags.addAll(java.util.Arrays.asList(input.hashtags.split("",""))); update.setHashtags(hashtags); update.commit(); return com.google.gerrit.extensions.restapi.Response.ok(hashtags); }",6798a822c1b42708c3789dad6b7fe9894226478e,,"apply(com.google.gerrit.server.change.ChangeResource,com.google.gerrit.server.change.PutHashtags$Input)",20,0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.Set<java.lang.String>> apply(com.google.gerrit.server.change.ChangeResource req, com.google.gerrit.server.change.PutHashtags.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.hashtags))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""Hashtags are required""); } com.google.gerrit.server.project.ChangeControl control = req.getControl(); if (!(control.canEditHashtags())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Editing hashtags not permitted""); } com.google.gerrit.server.notedb.ChangeUpdate update = updateFactory.create(control); com.google.gerrit.server.notedb.ChangeNotes notes = control.getNotes().load(); java.util.Set<java.lang.String> oldHashtags = notes.getHashtags(); java.util.Set<java.lang.String> hashtags = new java.util.HashSet<java.lang.String>(); if (oldHashtags != null) { hashtags.addAll(oldHashtags); } hashtags.addAll(com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(com.google.common.base.CharMatcher.anyOf("",;"")).trimResults().split(input.hashtags))); update.setHashtags(hashtags); update.commit(); return com.google.gerrit.extensions.restapi.Response.ok(hashtags); }",ee34f893a1cf8174eaa5a8489f85ea838ba469dd,"apply(com.google.gerrit.server.change.ChangeResource,com.google.gerrit.server.change.PutHashtags$Input)",103417,359,428
97811,gerrit-server_src_main_java_com_google_gerrit_server_project_ChangeControl.java,21.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public com.google.gerrit.server.permissions.PermissionBackend.ForChange user(com.google.gerrit.server.CurrentUser user) { return getUser().equals(user) ? this : forUser(user).asForChange(cd); },7fea5e1be153123f53824bb38818f1fa780133ba,,user(com.google.gerrit.server.CurrentUser),18,17,"@java.lang.Override public com.google.gerrit.server.permissions.PermissionBackend.ForChange user(com.google.gerrit.server.CurrentUser user) { return getUser().equals(user) ? this : forUser(user).asForChange(cd, db); }",b3ab459a1b3ab9bc638c29a0455c383215581676,user(com.google.gerrit.server.CurrentUser),92532,61,63
86807,gerrit-lucene_src_main_java_com_google_gerrit_lucene_LuceneChangeIndex.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void decodeSubmitRecords(com.google.common.collect.Multimap<java.lang.String, org.apache.lucene.index.IndexableField> doc, java.lang.String field, com.google.gerrit.server.project.SubmitRuleOptions opts, com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.server.index.change.ChangeField.parseSubmitRecordValues(com.google.gerrit.lucene.LuceneChangeIndex.fieldsToStrings(doc.get(field)), opts, cd); }",330e59dadd27fdffb1b6418908873b72467a00a9,,"decodeSubmitRecords(com.google.common.collect.Multimap,java.lang.String,com.google.gerrit.server.project.SubmitRuleOptions,com.google.gerrit.server.query.change.ChangeData)",6,8,"private void decodeSubmitRecords(com.google.common.collect.Multimap<java.lang.String, org.apache.lucene.index.IndexableField> doc, java.lang.String field, com.google.gerrit.server.project.SubmitRuleOptions opts, com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.server.index.change.ChangeField.parseSubmitRecords(com.google.common.collect.Collections2.transform(doc.get(field), ( f) -> f.binaryValue().utf8ToString()), opts, cd); }",f99dfd1bacde574fb9e523ec41a5ec5c14600058,"decodeSubmitRecords(com.google.common.collect.Multimap,java.lang.String,com.google.gerrit.server.project.SubmitRuleOptions,com.google.gerrit.server.query.change.ChangeData)",3985,126,133
158410,src_test_java_com_googlesource_gerrit_plugins_uploadvalidator_EmailDomainWhitelistTest.java,,,,@org.junit.Test public void testGetEmailWhitelist() throws java.lang.Exception { },6cb2b85549267a6eefbfe4b67551aa708b1986ca,,testGetEmailWhitelist(),5,3,"@org.junit.Test public void testEmailNullNotListed() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailNullNotListed, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isFalse(); }",46d80e3c651f1acf7e197af097402b2ed713180b,testEmailNullNotListed(),60656,21,96
20355,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ValueEditor.java,,,,@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if ((event.getNativeButton()) == (com.google.gwt.dom.client.NativeEvent.BUTTON_LEFT)) { onEdit(); } },3db41d8db6f7a65c8ee8cb7a9d6470ae25738a86,,onClick(com.google.gwt.event.dom.client.ClickEvent),14,0,@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if ((enabled) && ((event.getNativeButton()) == (com.google.gwt.dom.client.NativeEvent.BUTTON_LEFT))) { edit(); } },6902bf691167c4ce6426cdb86ecc54455b3181b3,onClick(com.google.gwt.event.dom.client.ClickEvent),6251,59,63
64140,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,64.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void loadFileList(final com.google.gerrit.client.changes.ChangeInfo.RevisionInfo base, final com.google.gerrit.client.changes.ChangeInfo.RevisionInfo rev, final java.sql.Timestamp myLastReply, com.google.gerrit.client.rpc.CallbackGroup group, final java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> comments, final java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> drafts, final com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>> empty) { com.google.gerrit.client.diff.DiffApi.list(changeId.get(), (base != null ? base.name() : null), rev.name(), group.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.diff.FileInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.diff.FileInfo> m) { files.set((base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, base._number()) : null), new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, rev._number()), style, reply, fileTableMode, ((edit) != null)); files.setValue(m, myLastReply, (comments == null ? empty : comments.get(0)), (drafts == null ? empty : drafts.get(0))); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } })); }",c6817b8fc60af62394cc9574ddeaab2aa51440cf,,"loadFileList(com.google.gerrit.client.changes.ChangeInfo.RevisionInfo,com.google.gerrit.client.changes.ChangeInfo.RevisionInfo,java.sql.Timestamp,com.google.gerrit.client.rpc.CallbackGroup,java.util.List,java.util.List,com.google.gerrit.client.rpc.NativeMap)",5,29,"private void loadFileList(final com.google.gerrit.client.changes.ChangeInfo.RevisionInfo base, final com.google.gerrit.client.changes.ChangeInfo.RevisionInfo rev, final java.sql.Timestamp myLastReply, com.google.gerrit.client.rpc.CallbackGroup group, final java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> comments, final java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> drafts) { com.google.gerrit.client.diff.DiffApi.list(changeId.get(), (base != null ? base.name() : null), rev.name(), group.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.diff.FileInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.diff.FileInfo> m) { files.set((base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, base._number()) : null), new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, rev._number()), style, reply, fileTableMode, ((edit) != null)); files.setValue(m, myLastReply, (comments != null ? comments.get(0) : null), (drafts != null ? drafts.get(0) : null)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } })); }",3100e6cbecdc88e5a1dad97bc8bf7657e2d5c4dd,"loadFileList(com.google.gerrit.client.changes.ChangeInfo.RevisionInfo,com.google.gerrit.client.changes.ChangeInfo.RevisionInfo,java.sql.Timestamp,com.google.gerrit.client.rpc.CallbackGroup,java.util.List,java.util.List)",35138,490,445
52200,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,15.0,@java.lang.Override protected void onUnload() { super.onUnload(); removeKeyHandlerRegs(); if ((resizeHandler) != null) { resizeHandler.removeHandler(); resizeHandler = null; } if ((cmA) != null) { cmA.getWrapperElement().removeFromParent(); } if ((cmB) != null) { cmB.getWrapperElement().removeFromParent(); } com.google.gwt.user.client.Window.enableScrolling(true); com.google.gerrit.client.Gerrit.setHeaderVisible(true); },6c71c2ec8566484e5c46b9413fe15b762126f6e6,@java.lang.Override protected void onUnload() { super.onUnload(); saveAllDrafts(); removeKeyHandlerRegs(); if ((resizeHandler) != null) { resizeHandler.removeHandler(); resizeHandler = null; } if ((cmA) != null) { cmA.getWrapperElement().removeFromParent(); } if ((cmB) != null) { cmB.getWrapperElement().removeFromParent(); } com.google.gwt.user.client.Window.enableScrolling(true); com.google.gerrit.client.Gerrit.setHeaderVisible(true); },e43edbfce72cf05ae90f9af47947ef4894397bec,onUnload(),onUnload(),3,13,@java.lang.Override protected void onUnload() { super.onUnload(); saveAllDrafts(null); removeKeyHandlerRegs(); if ((resizeHandler) != null) { resizeHandler.removeHandler(); resizeHandler = null; } if ((cmA) != null) { cmA.getWrapperElement().removeFromParent(); } if ((cmB) != null) { cmB.getWrapperElement().removeFromParent(); } com.google.gwt.user.client.Window.enableScrolling(true); com.google.gerrit.client.Gerrit.setHeaderVisible(true); },dba0ffa221ba2b41d4351f3332b50a5e1192593a,onUnload(),178407,128,130
154071,java_com_google_gerrit_server_restapi_account_SetPreferences.java,1.0,"@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.GeneralPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } checkDownloadScheme(input.downloadScheme); com.google.gerrit.server.account.Preferences.validateMy(input.my); com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdate.create().update(""Set General Preferences via API"", id, ( u) -> u.setGeneralPreferences(input)); return cache.get(id).getGeneralPreferences(); }",b7723d735f7291b0e4b8cf03cf122895d9900291,"@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.GeneralPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } checkDownloadScheme(input.downloadScheme); com.google.gerrit.server.account.Preferences.validateMy(input.my); com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateProvider.get().update(""Set General Preferences via API"", id, ( u) -> u.setGeneralPreferences(input)); return cache.get(id).getGeneralPreferences(); }",f94e8c3c3fed9377f309cbb44dcb63800d60888b,"apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.extensions.client.GeneralPreferencesInfo)","apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.extensions.client.GeneralPreferencesInfo)",3,1,"@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.GeneralPreferencesInfo input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } checkDownloadScheme(input.downloadScheme); com.google.gerrit.server.account.Preferences.validateMy(input.my); com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountsUpdateProvider.get().update(""Set General Preferences via API"", id, ( u) -> u.setGeneralPreferences(input)).map(AccountState::getGeneralPreferences).orElseThrow(() -> new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.extensions.restapi.IdString.fromDecoded(id.toString()))); }",1fac22be1f46d19b388eafab26ee1137f20d2072,"apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.extensions.client.GeneralPreferencesInfo)",113880,260,286
59911,src_main_java_com_googlesource_gerrit_plugins_xdocs_XDocResourceKey.java,,,,@java.lang.Override public int weigh() { return (resource.length()) * 2; },770b9029d11700e3e5470649dcc69eaa8a5027c0,,weigh(),3,2,"public java.lang.String asString() { java.lang.StringBuilder b = new java.lang.StringBuilder(); b.append(com.google.gerrit.extensions.restapi.IdString.fromDecoded(project.get()).encoded()); b.append(""/""); b.append(((resource) != null ? com.google.gerrit.extensions.restapi.IdString.fromDecoded(resource).encoded() : """")); b.append(""/""); b.append(((revId) != null ? revId.name() : """")); return b.toString(); }",0391ff95cc66eca34a907e4381faa85d2fc5c281,asString(),154140,21,119
75172,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotes.java,5.0,"public com.google.gerrit.server.notedb.ChangeNotes createFromIndexedChange(com.google.gerrit.reviewdb.client.Change change) { return new com.google.gerrit.server.notedb.ChangeNotes(repoManager, migration, allUsers, change.getProject(), change); }",02f2c9e9291c204dd011d3a976bd7461e2628941,"public com.google.gerrit.server.notedb.ChangeNotes createFromIndexedChange(com.google.gerrit.reviewdb.client.Change change) { return new com.google.gerrit.server.notedb.ChangeNotes(repoManager, migration, allUsers, sampleServerIdent, change.getProject(), change); }",c64c95cca7ff2bf5546e5fde89a53328ac5838bf,createFromIndexedChange(com.google.gerrit.reviewdb.client.Change),createFromIndexedChange(com.google.gerrit.reviewdb.client.Change),5,6,"public com.google.gerrit.server.notedb.ChangeNotes createFromIndexedChange(com.google.gerrit.reviewdb.client.Change change) { return new com.google.gerrit.server.notedb.ChangeNotes(repoManager, migration, allUsers, change.getProject(), change); }",02f2c9e9291c204dd011d3a976bd7461e2628941,createFromIndexedChange(com.google.gerrit.reviewdb.client.Change),166895,73,69
35820,gerrit-gwtui_src_main_java_com_google_gerrit_client_GerritCss.java,69.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,java.lang.String publishedFileCommentHolder();,873c3d0b36eb9d25fabc18d9501b02f4858d4f41,,publishedFileCommentHolder(),11,73,java.lang.String cellsNextToFileComment();,bfc5506e3db48f8595ec62a8091eaec256e14122,cellsNextToFileComment(),152913,10,10
152952,java_com_google_gerrit_server_api_projects_DashboardApiImpl.java,1.0,"private com.google.gerrit.server.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }",082c2e5770523aecaf5fc786bbdaa567a6a4a22b,"private com.google.gerrit.server.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }",eb83d5ea1cc3a9764f995695b75be1efefa0ebf6,resource(),resource(),3,1,"private com.google.gerrit.server.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }",eed00fd4a94660a1f51e8b19915384b1ecd79e6f,resource(),8774,111,95
57930,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_revision_RevisionIT.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void content() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); assertEquals(com.google.gerrit.acceptance.PushOneCommit.FILE_CONTENT, gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).file(""a.txt"").content()); }",1cb03b884f72ee9a873c5229d9495285bf47bb2d,,content(),16,15,"@org.junit.Test public void content() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.restapi.BinaryResult bin = gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).file(com.google.gerrit.acceptance.PushOneCommit.FILE_NAME).content(); java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream(); bin.writeTo(os); java.lang.String res = new java.lang.String(os.toByteArray(), java.nio.charset.StandardCharsets.UTF_8); assertThat(res).isEqualTo(com.google.gerrit.acceptance.PushOneCommit.FILE_CONTENT); }",f0870810ce7aca440b2c0b47f1b049a3982d9b19,content(),127506,91,175
54694,src_main_java_com_googlesource_gerrit_plugins_serviceuser_client_StringListPanel.java,,,,"void insert(java.lang.String v) { int insertPos = getRowCount(); for (int row = 1; row < (getRowCount()); row++) { if ((v.compareTo(getText(row, 1))) <= 0) { insertPos = row; break; } } insertRow(insertPos); populate(insertPos, v); }",31b2527c84791a67b4112778d5353ed30e5b8f50,,insert(java.lang.String),5,11,"void insert(java.lang.String v) { int insertPos = getRowCount(); for (int row = 1; row < (getRowCount()); row++) { int compareResult = v.compareTo(getText(row, 1)); if (compareResult < 0) { insertPos = row; break; } else if (compareResult == 0) { return; } } insertRow(insertPos); populate(insertPos, v); }",a0bc86ce39227755ff2117edd3883792599fb139,insert(java.lang.String),56444,71,86
74502,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_revision_RevisionIT.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void actionsETag() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r1 = createChange(); com.google.gerrit.acceptance.PushOneCommit.Result r2 = createChange(); java.lang.String oldETag = checkETag(r2, null); current(r2).review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); oldETag = checkETag(r2, oldETag); current(r1).review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); oldETag = checkETag(r2, oldETag); current(r2).submit(); oldETag = checkETag(r2, oldETag); }",aed42b1679ccace7f8ee44d190ab4d6425b3ec19,,actionsETag(),2,32,"@org.junit.Test public void actionsETag() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r1 = createChange(); com.google.gerrit.acceptance.PushOneCommit.Result r2 = createChange(); java.lang.String oldETag = checkETag(getRevisionActions, r2, null); current(r2).review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); oldETag = checkETag(getRevisionActions, r2, oldETag); current(r1).review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); oldETag = checkETag(getRevisionActions, r2, oldETag); current(r2).submit(); oldETag = checkETag(getRevisionActions, r2, oldETag); }",c3b9bf08ca1ff231f67b874501b868d6eb7f9945,actionsETag(),46368,169,181
109251,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_mail_AddReviewerSenderIT.java,13.0,"@org.junit.Test public void addReviewerToReviewableChangeByOtherInNoteDb() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.acceptance.TestAccount other = accounts.create(""other"", ""other@example.com"", ""other""); forAll(( adder) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accounts.create(""added"", ""added@example.com"", ""added""); addReviewer(adder, sc.changeId, other, reviewer.email); assertThat(sender).sent(""newchange"", sc).to(reviewer).cc(sc.owner, sc.reviewer).cc(sc.reviewerByEmail, sc.ccerByEmail).notTo(sc.starrer, other); }); }",05932b949307c387f616dd8c95975d8dd599bb8c,"@org.junit.Test public void addReviewerToReviewableChangeByOtherInNoteDb() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.acceptance.TestAccount other = accounts.create(""other"", ""other@example.com"", ""other""); forAll(( adder) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accounts.create(""added"", ""added@example.com"", ""added""); addReviewer(adder, sc.changeId, other, reviewer.email); assertThat(sender).sent(""newchange"", sc).to(reviewer).cc(sc.owner, sc.reviewer).cc(sc.reviewerByEmail, sc.ccerByEmail).noOneElse(); }); }",6e9616c88154b9e33d4d37b272cf6c8cee5d1363,addReviewerToReviewableChangeByOtherInNoteDb(),addReviewerToReviewableChangeByOtherInNoteDb(),16,13,"@org.junit.Test public void addReviewerToReviewableChangeByOtherInNoteDb() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.acceptance.TestAccount other = accountCreator.create(""other"", ""other@example.com"", ""other""); forAll(( adder) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accountCreator.create(""added"", ""added@example.com"", ""added""); addReviewer(adder, sc.changeId, other, reviewer.email); assertThat(sender).sent(""newchange"", sc).to(reviewer).cc(sc.owner, sc.reviewer).cc(sc.reviewerByEmail, sc.ccerByEmail).noOneElse(); }); }",5af09684bf4b45f2f955d91291afccb8c28bff29,addReviewerToReviewableChangeByOtherInNoteDb(),39809,203,205
57522,gerrit-server_src_main_java_com_google_gerrit_server_config_PostCaches.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void flush(java.util.List<java.lang.String> cacheNames) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException { java.util.List<com.google.gerrit.server.config.CacheResource> cacheResources = new java.util.ArrayList<>(); for (java.lang.String n : cacheNames) { java.lang.String pluginName = ""gerrit""; java.lang.String cacheName = n; int i = cacheName.lastIndexOf('-'); if (i != (-1)) { pluginName = cacheName.substring(0, i); cacheName = ((cacheName.length()) > (i + 1)) ? cacheName.substring((i + 1)) : """"; } com.google.common.cache.Cache<?, ?> cache = cacheMap.get(pluginName, cacheName); if (cache != null) { cacheResources.add(new com.google.gerrit.server.config.CacheResource(pluginName, cacheName, cache)); } else { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""cache %s not found"", n)); } } for (com.google.gerrit.server.config.CacheResource rsrc : cacheResources) { flushCache.get().apply(rsrc, new com.google.gerrit.server.config.FlushCache.Input()); } }",d3c9e51ee47f854b57de115a5b03ae104e006681,,flush(java.util.List),9,1,"private void flush(java.util.List<java.lang.String> cacheNames) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException { java.util.List<com.google.gerrit.server.config.CacheResource> cacheResources = new java.util.ArrayList<>(cacheNames.size()); for (java.lang.String n : cacheNames) { java.lang.String pluginName = ""gerrit""; java.lang.String cacheName = n; int i = cacheName.lastIndexOf('-'); if (i != (-1)) { pluginName = cacheName.substring(0, i); cacheName = ((cacheName.length()) > (i + 1)) ? cacheName.substring((i + 1)) : """"; } com.google.common.cache.Cache<?, ?> cache = cacheMap.get(pluginName, cacheName); if (cache != null) { cacheResources.add(new com.google.gerrit.server.config.CacheResource(pluginName, cacheName, cache)); } else { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(""cache %s not found"", n)); } } for (com.google.gerrit.server.config.CacheResource rsrc : cacheResources) { flushCache.apply(rsrc, null); } }",1b8ea2529d4602984f71ceb922cc5d9277c54550,flush(java.util.List),16435,327,315
110915,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_notedb_OnlineNoteDbMigrationIT.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void testEnableSequences(java.lang.Integer builderOption, int expectedFirstId, java.lang.String expectedRefValue) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getChange().getId(); assertThat(id.get()).isEqualTo(1); migrate(( b) -> b.setSequenceGap(builderOption).setStopAtStateForTesting(com.google.gerrit.acceptance.server.notedb.READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY)); assertThat(sequences.nextChangeId()).isEqualTo(expectedFirstId); assertThat(sequences.nextChangeId()).isEqualTo((expectedFirstId + 1)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allProjects);org.eclipse.jgit.lib.ObjectReader reader = repo.newObjectReader()) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(""refs/sequences/changes""); assertThat(ref).isNotNull(); org.eclipse.jgit.lib.ObjectLoader loader = reader.open(ref.getObjectId()); assertThat(loader.getType()).isEqualTo(Constants.OBJ_BLOB); assertThat(new java.lang.String(loader.getCachedBytes(), java.nio.charset.StandardCharsets.UTF_8)).isEqualTo(expectedRefValue); } try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { @java.lang.SuppressWarnings(""deprecation"") int nextFromReviewDb = db.nextChangeId(); assertThat(nextFromReviewDb).isEqualTo(3); } }",f0a467b9972a8796961f6e6ac6bdcbbe273a795a,,"testEnableSequences(java.lang.Integer,int,java.lang.String)",6,4,"private void testEnableSequences(int builderOption, int expectedFirstId, java.lang.String expectedRefValue) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getChange().getId(); assertThat(id.get()).isEqualTo(1); migrate(( b) -> b.setSequenceGap(builderOption).setStopAtStateForTesting(com.google.gerrit.acceptance.server.notedb.READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY)); assertThat(sequences.nextChangeId()).isEqualTo(expectedFirstId); assertThat(sequences.nextChangeId()).isEqualTo((expectedFirstId + 1)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allProjects);org.eclipse.jgit.lib.ObjectReader reader = repo.newObjectReader()) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(""refs/sequences/changes""); assertThat(ref).isNotNull(); org.eclipse.jgit.lib.ObjectLoader loader = reader.open(ref.getObjectId()); assertThat(loader.getType()).isEqualTo(Constants.OBJ_BLOB); assertThat(new java.lang.String(loader.getCachedBytes(), java.nio.charset.StandardCharsets.UTF_8)).isEqualTo(expectedRefValue); } try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { @java.lang.SuppressWarnings(""deprecation"") int nextFromReviewDb = db.nextChangeId(); assertThat(nextFromReviewDb).isEqualTo(3); } }",99b55900756d27ed8865ab30b792f84d69e36626,"testEnableSequences(int,int,java.lang.String)",92810,373,369
58862,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_H2Initializer.java,0.0,"@java.lang.Override public void initConfig(com.google.gerrit.pgm.init.Section databaseSection) { java.lang.String path = databaseSection.get(""database""); if (path == null) { path = ""db/ReviewDB""; databaseSection.set(""database"", path); } java.io.File db = site.resolve(path); if (db == null) { throw com.google.gerrit.pgm.init.InitUtil.die(""database.database must be supplied for H2""); } db = db.getParentFile(); if ((!(db.exists())) && (!(db.mkdirs()))) { throw com.google.gerrit.pgm.init.InitUtil.die((""cannot create database.database "" + (db.getAbsolutePath()))); } }",80a40039af0e225e210c3d2defefd5e96286e899,"@java.lang.Override public void initConfig(com.google.gerrit.pgm.init.util.Section databaseSection) { java.lang.String path = databaseSection.get(""database""); if (path == null) { path = ""db/ReviewDB""; databaseSection.set(""database"", path); } java.io.File db = site.resolve(path); if (db == null) { throw com.google.gerrit.pgm.init.InitUtil.die(""database.database must be supplied for H2""); } db = db.getParentFile(); if ((!(db.exists())) && (!(db.mkdirs()))) { throw com.google.gerrit.pgm.init.InitUtil.die((""cannot create database.database "" + (db.getAbsolutePath()))); } }",0dcfa94c4cbd8bf3418881acac95f73ad5e38fe1,initConfig(com.google.gerrit.pgm.init.Section),initConfig(com.google.gerrit.pgm.init.util.Section),3,0,"@java.lang.Override public void initConfig(com.google.gerrit.pgm.init.api.Section databaseSection) { java.lang.String path = databaseSection.get(""database""); if (path == null) { path = ""db/ReviewDB""; databaseSection.set(""database"", path); } java.io.File db = site.resolve(path); if (db == null) { throw com.google.gerrit.pgm.init.InitUtil.die(""database.database must be supplied for H2""); } db = db.getParentFile(); if ((!(db.exists())) && (!(db.mkdirs()))) { throw com.google.gerrit.pgm.init.InitUtil.die((""cannot create database.database "" + (db.getAbsolutePath()))); } }",8b76df1cbe7b8081c6b24b07b12067094b3ebcad,initConfig(com.google.gerrit.pgm.init.api.Section),187302,171,171
111393,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_pgm_ReindexIT.java,12.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private synchronized void finish(com.google.gerrit.acceptance.pgm.ReindexIT.UpgradeAttempt a, java.util.List<com.google.gerrit.acceptance.pgm.ReindexIT.UpgradeAttempt> out) { checkState(((finished.getCount()) > 0), ""already started %s upgrades, can't start %s"", numExpected, a); out.add(a); finished.countDown(); }",f32436b5e921373ecfc7f75988d6f710670a9625,,"finish(com.google.gerrit.acceptance.pgm.ReindexIT$UpgradeAttempt,java.util.List)",10,6,"private synchronized void finish(com.google.gerrit.acceptance.pgm.ReindexIT.UpgradeAttempt a, java.util.List<com.google.gerrit.acceptance.pgm.ReindexIT.UpgradeAttempt> out) { checkState(((readyToStart.getCount()) == 0), ""shouldn't be finishing upgrade before starting""); checkState(((finished.getCount()) > 0), ""already finished %s upgrades, can't finish %s"", numExpected, a); out.add(a); finished.countDown(); }",60dad85c5c567a1a5d5b7e4c269e4c1c8ed41db8,"finish(com.google.gerrit.acceptance.pgm.ReindexIT$UpgradeAttempt,java.util.List)",120103,96,118
148032,java_com_google_gerrit_server_restapi_change_RobotComments.java,1.0,"@java.lang.Override public com.google.gerrit.server.change.RobotCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.RobotComment c : commentsUtil.robotCommentsByPatchSet(notes, rev.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.change.RobotCommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",e7ca083999f6ab8de8ce7588b72d099b3ec9be5c,"@java.lang.Override public com.google.gerrit.server.restapi.change.RobotCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.RobotComment c : commentsUtil.robotCommentsByPatchSet(notes, rev.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.restapi.change.RobotCommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",40bd4539eee26ea8c66cd05b3593bf1c90a46a19,"parse(com.google.gerrit.server.change.RevisionResource,com.google.gerrit.extensions.restapi.IdString)","parse(com.google.gerrit.server.change.RevisionResource,com.google.gerrit.extensions.restapi.IdString)",17,1,"@java.lang.Override public com.google.gerrit.server.change.RobotCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.RobotComment c : commentsUtil.robotCommentsByPatchSet(notes, rev.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.change.RobotCommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",e7ca083999f6ab8de8ce7588b72d099b3ec9be5c,"parse(com.google.gerrit.server.change.RevisionResource,com.google.gerrit.extensions.restapi.IdString)",214928,217,211
34532,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_AccountDashboardScreen.java,0.0,"@java.lang.Override protected void onLoad() { super.onLoad(); Util.LIST_SVC.forAccount(ownerId, new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.AccountDashboardInfo>(this) { @java.lang.Override protected void preDisplay(final com.google.gerrit.common.data.AccountDashboardInfo r) { display(r); } }); }",ba3acf033138607d12c2936067a34efaa27b8bbe,"@java.lang.Override protected void onLoad() { super.onLoad(); java.lang.String who = (mine) ? ""self"" : ownerId.toString(); com.google.gerrit.client.changes.ChangeList.query(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.rpc.NativeList<com.google.gerrit.client.changes.ChangeList>>(this) { @java.lang.Override protected void preDisplay(com.google.gerrit.client.rpc.NativeList<com.google.gerrit.client.changes.ChangeList> result) { display(result); } }, (""is:open owner:"" + who), (((""is:open reviewer:"" + who) + "" -owner:"") + who), ((""is:closed owner:"" + who) + "" age:1w limit:10"")); }",8228778470eb00d0160f4e7fe261e1d806bc717a,onLoad(),onLoad(),9,0,"@java.lang.Override protected void onLoad() { super.onLoad(); java.lang.String who = (mine) ? ""self"" : ownerId.toString(); com.google.gerrit.client.changes.ChangeList.query(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.rpc.NativeList<com.google.gerrit.client.changes.ChangeList>>(this) { @java.lang.Override protected void preDisplay(com.google.gerrit.client.rpc.NativeList<com.google.gerrit.client.changes.ChangeList> result) { display(result); } }, (""is:open owner:"" + who), (((""is:open reviewer:"" + who) + "" -owner:"") + who), ((""is:closed owner:"" + who) + "" -age:1w limit:10"")); }",cd0cdc8d2a29ec59ea52bcc85fdc8e776084b17f,onLoad(),10021,207,208
35193,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_registration_DynamicSet.java,,,,@java.lang.Override public com.google.inject.Key<?> getKey() { return key; },f1515bcfcade765e22b1115b9f66bc8f572e738d,,getKey(),6,2,@java.lang.Override public com.google.inject.Key<T> getKey() { return key; },a7ecc42ee12e1039daa05f262a7fa1373b6971c8,getKey(),135350,23,25
71881,gitiles-servlet_src_test_java_com_google_gitiles_LogServletTest.java,0.0,"@org.junit.Test public void basicLog() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit commit = repo.branch(""HEAD"").commit().create(); repo.getRevWalk().parseBody(commit); Log log = buildJson(""/repo/+log"", com.google.gitiles.LogServletTest.LOG.getType(), """"); assertThat(log.log).hasSize(1); verifyJsonCommit(log.log.get(0), commit); assertThat(log.log.get(0).treeDiff).isNull(); }",88d902e1cc3af476fd6ba89402ed0f362b675fc7,"@org.junit.Test public void basicLog() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit commit = repo.branch(""HEAD"").commit().create(); repo.getRevWalk().parseBody(commit); Log log = buildJson(""/repo/+log"", com.google.gitiles.LogServletTest.LOG, """"); assertThat(log.log).hasSize(1); verifyJsonCommit(log.log.get(0), commit); assertThat(log.log.get(0).treeDiff).isNull(); }",0ae31835c320c47ff6d543ab49beaf8c215032bc,basicLog(),basicLog(),5,0,"@org.junit.Test public void basicLog() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit commit = repo.branch(""HEAD"").commit().create(); Log response = buildJson(""/repo/+log"", com.google.gitiles.LogServletTest.LOG, """"); assertThat(response.log).hasSize(1); verifyJsonCommit(response.log.get(0), commit); assertThat(response.log.get(0).treeDiff).isNull(); }",482d562136176c41971943d6c28762c7547b506e,basicLog(),154346,113,102
25647,src_main_java_com_google_gwtorm_jdbc_JdbcAccess.java,19.0,"@java.lang.Override protected void doUpsert(final java.lang.Iterable<T> instances, final com.google.gwtorm.jdbc.JdbcTransaction txn) throws com.google.gwtorm.client.OrmException { if (!(instances.iterator().hasNext())) { return; } final java.lang.Iterable<T> inserts; try { java.sql.PreparedStatement ps = schema.getConnection().prepareStatement(getUpdateOneSql()); try { inserts = attemptUpdatesAsBatch(ps, instances); } finally { ps.close(); } } catch (java.sql.SQLException e) { throw convertError(""update"", e); } doInsert(inserts, txn); }",5f68034e0312f91145afdf450f1d609676c91687,"@java.lang.Override protected void doUpsert(final java.lang.Iterable<T> instances, final com.google.gwtorm.jdbc.JdbcTransaction txn) throws com.google.gwtorm.client.OrmException { if (!(instances.iterator().hasNext())) { return; } final java.lang.Iterable<T> inserts; try { java.sql.PreparedStatement ps = schema.getConnection().prepareStatement(getUpdateOneSql()); try { if (!(schema.getDialect().canDetermineIndividualBatchUpdateCounts())) { inserts = attemptUpdatesIndividually(ps, instances); } else { inserts = attemptUpdatesAsBatch(ps, instances); } } finally { ps.close(); } } catch (java.sql.SQLException e) { throw convertError(""update"", e); } doInsert(inserts, txn); }",d373dd43e2b45a8b545077409478d23a1086cec3,"doUpsert(java.lang.Iterable,com.google.gwtorm.jdbc.JdbcTransaction)","doUpsert(java.lang.Iterable,com.google.gwtorm.jdbc.JdbcTransaction)",13,15,private java.util.Collection<T> attemptUpdate(final java.lang.Iterable<T> instances) throws com.google.gwtorm.server.OrmException { if (schema.getDialect().canDetermineIndividualBatchUpdateCounts()) { return attemptUpdateAsBatch(instances); } else { return attemptUpdatesIndividually(instances); } },a2038c08dbc07c3f6c4e8b94cad391e69ae6ca04,attemptUpdate(java.lang.Iterable),140360,178,75
98619,gerrit-server_src_main_java_com_google_gerrit_server_account_ExternalIdCache.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,java.util.Set<com.google.gerrit.server.account.ExternalId> byEmail(java.lang.String email) throws java.io.IOException;,2a8e015d9dabb82a36c1516f7e41ce44d25cd9a2,,byEmail(java.lang.String),22,9,java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> byEmail(java.lang.String email) throws java.io.IOException;,ccc304255695c380da6ee5b8cfabc8ca9698beca,byEmail(java.lang.String),33852,37,40
68604,gerrit-httpd_src_main_java_com_google_gerrit_httpd_auth_become_BecomeAnyAccountLoginServlet.java,4.0,"private com.google.gerrit.server.account.AuthResult byUserName(final java.lang.String userName) { try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema.open(); try { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, userName); return auth(db.accountExternalIds().get(key)); } finally { db.close(); } } catch (com.google.gwtorm.server.OrmException e) { getServletContext().log(""cannot query database"", e); return null; } }",f4dcb4677d2a35f80dd73dee3ccd9f2b46ae0bc3,"private com.google.gerrit.server.account.AuthResult byUserName(final java.lang.String userName) { try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, userName); return auth(db.accountExternalIds().get(key)); } } catch (com.google.gwtorm.server.OrmException e) { getServletContext().log(""cannot query database"", e); return null; } }",955cf03d442e1bbdc6915249d21ba8a4266a7f61,byUserName(java.lang.String),byUserName(java.lang.String),5,4,"private com.google.gerrit.server.account.AuthResult byUserName(final java.lang.String userName) { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, userName); return auth(db.accountExternalIds().get(key)); } catch (com.google.gwtorm.server.OrmException e) { getServletContext().log(""cannot query database"", e); return null; } }",0657a2239967d3ec4a9414e20b2f34c9e3846059,byUserName(java.lang.String),114206,146,143
67664,gerrit-server_src_main_java_com_google_gerrit_server_change_ConsistencyChecker.java,12.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.reviewdb.client.PatchSet insertPatchSet(org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.extensions.common.ProblemInfo p = new com.google.gerrit.extensions.common.ProblemInfo(); p.message = ""No patch set found for merged commit "" + (commit.name()); if (!(user.get().isIdentifiedUser())) { p.status = com.google.gerrit.extensions.common.ProblemInfo.Status.FIX_FAILED; p.outcome = ""Must be called by an identified user to insert new patch set""; return null; } try { com.google.gerrit.server.project.ChangeControl ctl = changeControlFactory.controlFor(change, user.get()); com.google.gerrit.server.change.PatchSetInserter inserter = patchSetInserterFactory.create(repo, rw, ctl, commit); change = inserter.setValidatePolicy(ValidatePolicy.NONE).setRunHooks(false).setSendMail(false).setUploader(((com.google.gerrit.server.IdentifiedUser) (user)).getAccountId()).setMessage(""Patch set for merged commit inserted by consistency checker"").insert(); p.status = com.google.gerrit.extensions.common.ProblemInfo.Status.FIXED; p.outcome = ""Inserted as patch set "" + (change.currentPatchSetId().get()); return inserter.getPatchSet(); } catch (com.google.gerrit.server.project.InvalidChangeOperationException | com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.project.NoSuchChangeException e) { warn(e); p.status = com.google.gerrit.extensions.common.ProblemInfo.Status.FIX_FAILED; p.outcome = ""Error inserting new patch set""; return null; } }",1bf67bc83618b9cba4c23c6ff1d7126a92228bd8,,insertPatchSet(org.eclipse.jgit.revwalk.RevCommit),8,19,"private com.google.gerrit.reviewdb.client.PatchSet insertPatchSet(org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.extensions.common.ProblemInfo p = problem((""No patch set found for merged commit "" + (commit.name()))); if (!(user.get().isIdentifiedUser())) { p.status = com.google.gerrit.extensions.common.ProblemInfo.Status.FIX_FAILED; p.outcome = ""Must be called by an identified user to insert new patch set""; return null; } try { com.google.gerrit.server.project.ChangeControl ctl = changeControlFactory.controlFor(change, user.get()); com.google.gerrit.server.change.PatchSetInserter inserter = patchSetInserterFactory.create(repo, rw, ctl, commit); change = inserter.setValidatePolicy(ValidatePolicy.NONE).setRunHooks(false).setSendMail(false).setAllowClosed(true).setUploader(((com.google.gerrit.server.IdentifiedUser) (user.get())).getAccountId()).setMessage(""Patch set for merged commit inserted by consistency checker"").insert(); p.status = com.google.gerrit.extensions.common.ProblemInfo.Status.FIXED; p.outcome = ""Inserted as patch set "" + (change.currentPatchSetId().get()); return inserter.getPatchSet(); } catch (com.google.gerrit.server.project.InvalidChangeOperationException | com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.project.NoSuchChangeException e) { warn(e); p.status = com.google.gerrit.extensions.common.ProblemInfo.Status.FIX_FAILED; p.outcome = ""Error inserting new patch set""; return null; } }",36ce8cc518498ee884e3c62b2ad5255b7267a22c,insertPatchSet(org.eclipse.jgit.revwalk.RevCommit),91800,423,413
86199,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,96.0,"private void loadConfigInfo(final com.google.gerrit.client.info.ChangeInfo info, com.google.gerrit.client.DiffObject base) { final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = info.revision(revision); if ((base.isAutoMerge()) && (!(initCurrentRevision(info).isMerge()))) { com.google.gerrit.client.Gerrit.display(getToken(), new com.google.gerrit.client.NotFoundScreen()); } com.google.gerrit.client.info.ChangeInfo.RevisionInfo baseRev = resolveRevisionOrPatchSetId(info, base.toString(), null); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); java.sql.Timestamp lastReply = com.google.gerrit.client.change.ChangeScreen.myLastReply(info); if (rev.isEdit()) { com.google.gerrit.client.info.ChangeInfo.RevisionInfo p = com.google.gerrit.client.info.ChangeInfo.RevisionInfo.findEditParentRevision(info.revisions().values()); java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> comments = loadComments(p, group); loadFileList(base, baseRev, rev, lastReply, group, comments, null); } else { loadDiff(base, baseRev, rev, lastReply, group); } group.addListener(new com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { loadConfigInfo(info, rev); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { com.google.gerrit.client.change.ChangeScreen.logger.log(java.util.logging.Level.SEVERE, (""Loading file list and inline comments failed: "" + (caught.getMessage()))); loadConfigInfo(info, rev); } }); group.done(); }",e31024937ce16bb70a8d20bd3f8b8af83f34a2b4,"private void loadConfigInfo(final com.google.gerrit.client.info.ChangeInfo info, com.google.gerrit.client.DiffObject base) { final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = info.revision(revision); if ((base.isAutoMerge()) && (!(initCurrentRevision(info).isMerge()))) { com.google.gerrit.client.Gerrit.display(getToken(), new com.google.gerrit.client.NotFoundScreen()); } updateToken(info, base, rev); com.google.gerrit.client.info.ChangeInfo.RevisionInfo baseRev = resolveRevisionOrPatchSetId(info, base.toString(), null); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); java.sql.Timestamp lastReply = com.google.gerrit.client.change.ChangeScreen.myLastReply(info); if (rev.isEdit()) { com.google.gerrit.client.info.ChangeInfo.RevisionInfo p = com.google.gerrit.client.info.ChangeInfo.RevisionInfo.findEditParentRevision(info.revisions().values()); java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> comments = loadComments(p, group); loadFileList(base, baseRev, rev, lastReply, group, comments, null); } else { loadDiff(base, baseRev, rev, lastReply, group); } group.addListener(new com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { loadConfigInfo(info, rev); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { com.google.gerrit.client.change.ChangeScreen.logger.log(java.util.logging.Level.SEVERE, (""Loading file list and inline comments failed: "" + (caught.getMessage()))); loadConfigInfo(info, rev); } }); group.done(); }",4ba809707f2e3f0ba78819cc111038389ce9367a,"loadConfigInfo(com.google.gerrit.client.info.ChangeInfo,com.google.gerrit.client.DiffObject)","loadConfigInfo(com.google.gerrit.client.info.ChangeInfo,com.google.gerrit.client.DiffObject)",5,97,"private void loadConfigInfo(final com.google.gerrit.client.info.ChangeInfo info, com.google.gerrit.client.DiffObject base) { final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = info.revision(revision); if ((base.isAutoMerge()) && (!(initCurrentRevision(info).isMerge()))) { com.google.gerrit.client.Gerrit.display(getToken(), new com.google.gerrit.client.NotFoundScreen()); } updateToken(info, base, rev); com.google.gerrit.client.info.ChangeInfo.RevisionInfo baseRev = resolveRevisionOrPatchSetId(info, base.asString(), null); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); java.sql.Timestamp lastReply = com.google.gerrit.client.change.ChangeScreen.myLastReply(info); if (rev.isEdit()) { com.google.gerrit.client.info.ChangeInfo.RevisionInfo p = com.google.gerrit.client.info.ChangeInfo.RevisionInfo.findEditParentRevision(info.revisions().values()); java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> comments = loadComments(p, group); loadFileList(base, baseRev, rev, lastReply, group, comments, null); } else { loadDiff(base, baseRev, rev, lastReply, group); } group.addListener(new com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { loadConfigInfo(info, rev); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { com.google.gerrit.client.change.ChangeScreen.logger.log(java.util.logging.Level.SEVERE, (""Loading file list and inline comments failed: "" + (caught.getMessage()))); loadConfigInfo(info, rev); } }); group.done(); }",69f74e18f9ae9b13adf6f078a42c3d51ccef8d73,"loadConfigInfo(com.google.gerrit.client.info.ChangeInfo,com.google.gerrit.client.DiffObject)",79411,497,497
128092,gerrit-server_src_main_java_com_google_gerrit_server_project_DashboardsCollection.java,11.0,"private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectControl ctl, java.lang.String ref, java.lang.String path, com.google.gerrit.server.project.ProjectControl myCtl) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.AmbiguousObjectException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.IncorrectObjectTypeException { java.lang.String id = (ref + "":"") + path; if (!(ref.startsWith(com.google.gerrit.server.project.REFS_DASHBOARDS))) { ref = (REFS_DASHBOARDS) + ref; } try { permissionBackend.user(ctl.getUser()).project(ctl.getProject().getNameKey()).ref(ref).check(RefPermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } if (!(org.eclipse.jgit.lib.Repository.isValidRefName(ref))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(ctl.getProject().getNameKey())) { org.eclipse.jgit.lib.ObjectId objId = git.resolve(((ref + "":"") + path)); if (objId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } org.eclipse.jgit.lib.BlobBasedConfig cfg = new org.eclipse.jgit.lib.BlobBasedConfig(null, git, objId); return new com.google.gerrit.server.project.DashboardResource(myCtl, ref, path, cfg, false); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }",202f8c10ef92f22253a14f306021161867f4eb7c,public java.lang.String normalizeDashboardRef(java.lang.String ref) { if (!(ref.startsWith(com.google.gerrit.server.project.REFS_DASHBOARDS))) { return (REFS_DASHBOARDS) + ref; } return ref; },46a43fc819b0641ffebb555404f8f5538d8434bd,"parse(com.google.gerrit.server.project.ProjectControl,java.lang.String,java.lang.String,com.google.gerrit.server.project.ProjectControl)",normalizeDashboardRef(java.lang.String),2,11,public static java.lang.String normalizeDashboardRef(java.lang.String ref) { if (!(ref.startsWith(com.google.gerrit.server.project.REFS_DASHBOARDS))) { return (REFS_DASHBOARDS) + ref; } return ref; },e17d2493888ff1aab9f945103b3aa3321bd34027,normalizeDashboardRef(java.lang.String),82801,60,61
127031,src_test_java_com_googlesource_gerrit_plugins_webhooks_PostTaskTest.java,3.0,"@org.junit.Before public void setup() { when(cfg.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(cfg.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES); when(processor.process()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, session, cfg, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, processor); }",bce3249927e4dd9709447abe5e2d1a9d7b75e379,"@org.junit.Before public void setup() { when(cfg.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(cfg.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES); when(processor.process()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.CONTENT); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, session, cfg, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, processor); }",538147e92e0d7ada834c2dd6568c208a30668b98,setup(),setup(),11,3,"@org.junit.Before public void setup() { when(cfg.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(cfg.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES); when(remote.getUrl()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL); when(processor.process(eq(projectCreated), eq(remote))).thenReturn(java.util.Optional.of(content)); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, session, cfg, processor, projectCreated, remote); }",e5ca46d8d1fab560ddcc71d30a00fdc13c6a1064,setup(),40650,159,172
158950,src_test_java_com_googlesource_gerrit_plugins_lfs_LfsAuthTokenTest.java,5.0,@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> createToken(java.util.List<java.lang.String> values) { return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values.get(0))); },b095462119d9098fcc30a845b3a6894ce00e15fb,"@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> createToken(java.util.List<java.lang.String> values) { return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values.get(0), java.lang.Integer.valueOf(values.get(1)))); }",da45a04ac34effe03704f5ef0e75eb59d90a499a,createToken(java.util.List),createToken(java.util.List),8,5,"@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> createToken(java.util.List<java.lang.String> values) { return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values.get(0), java.lang.Long.valueOf(values.get(1)))); }",4380ab0147e29b66787adb56a7966358b6d71478,createToken(java.util.List),56805,101,101
101012,gerrit-lucene_src_main_java_com_google_gerrit_lucene_AbstractLuceneIndex.java,17.0,"com.google.common.util.concurrent.ListenableFuture<?> insert(final org.apache.lucene.document.Document doc) { return submit(new java.util.concurrent.Callable<java.lang.Long>() { @java.lang.Override public java.lang.Long call() throws java.io.IOException, java.lang.InterruptedException { return writer.addDocument(doc); } }); }",86eb5accbbad2ae6e917bda8f6c6b84010c9cb13,com.google.common.util.concurrent.ListenableFuture<?> insert(final org.apache.lucene.document.Document doc) { return submit(() -> { return writer.addDocument(doc); }); },24b61c32bffba556fa1991dba58f1dfe3234b793,insert(org.apache.lucene.document.Document),insert(org.apache.lucene.document.Document),5,17,com.google.common.util.concurrent.ListenableFuture<?> insert(final org.apache.lucene.document.Document doc) { return submit(() -> writer.addDocument(doc)); },ce72960f74d22ea0b607174c3bef3f54a1b4e5a2,insert(org.apache.lucene.document.Document),159801,43,40
63581,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_AbstractSubmit.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected PushOneCommit.Result createChange(org.eclipse.jgit.api.Git git, java.lang.String topic) throws java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent()); return push.to(git, (""refs/for/master/"" + topic)); }",7bedeb5510e3768e0286758064c6217b4f7277ba,,"createChange(org.eclipse.jgit.api.Git,java.lang.String)",12,26,"protected PushOneCommit.Result createChange(org.eclipse.jgit.api.Git git, java.lang.String subject, java.lang.String fileName, java.lang.String content, java.lang.String topic) throws java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), subject, fileName, content); return push.to(git, (""refs/for/master/"" + topic)); }",9284d59fb578fc7fba42dad624a3ef8ae1dbbbc5,"createChange(org.eclipse.jgit.api.Git,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",196244,97,124
75878,src_main_java_com_amd_gerrit_plugins_manifestsubscription_BranchManifest.java,,,,"@java.lang.Override protected void run() { stdout.println(""Branching manifest:""); stdout.println(manifestRepo); stdout.println(manifestCommitish); stdout.println(manifestPath); com.google.gerrit.reviewdb.client.Project.NameKey p = new com.google.gerrit.reviewdb.client.Project.NameKey(manifestRepo); try { org.eclipse.jgit.lib.Repository repo = gitRepoManager.openRepository(p); org.eclipse.jgit.lib.ObjectId commitId = repo.resolve(manifestCommitish); com.amd.gerrit.plugins.manifestsubscription.VersionedManifests vManifests = new com.amd.gerrit.plugins.manifestsubscription.VersionedManifests(manifestCommitish); vManifests.load(repo, commitId); com.amd.gerrit.plugins.manifestsubscription.CanonicalManifest manifests = new com.amd.gerrit.plugins.manifestsubscription.CanonicalManifest(vManifests); com.amd.gerrit.plugins.manifestsubscription.manifest.Manifest manifest = manifests.getCanonicalManifest(manifestPath); stdout.println(""""); stdout.println(((""Branch '"" + (newBranch)) + ""' will be created for the following projects:"")); for (com.amd.gerrit.plugins.manifestsubscription.manifest.Project proj : manifest.getProject()) { stdout.print(proj.getRevision()); stdout.print(""\t""); stdout.println(proj.getName()); } com.amd.gerrit.plugins.manifestsubscription.VersionedManifests.branchManifest(gitRepoManager, manifest, newBranch); } catch (java.io.IOException e) { e.printStackTrace(stderr); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { e.printStackTrace(stderr); } catch (javax.xml.bind.JAXBException e) { e.printStackTrace(stderr); } catch (com.amd.gerrit.plugins.manifestsubscription.ManifestReadException e) { e.printStackTrace(stderr); } catch (org.eclipse.jgit.api.errors.GitAPIException e) { e.printStackTrace(stderr); } }",3373bbfd481086e026359e70417814de18e2119b,,run(),4,0,"@java.lang.Override protected void run() { stdout.println(""Branching manifest:""); stdout.println(manifestRepo); stdout.println(manifestCommitish); stdout.println(manifestPath); com.google.gerrit.reviewdb.client.Project.NameKey p = new com.google.gerrit.reviewdb.client.Project.NameKey(manifestRepo); try { org.eclipse.jgit.lib.Repository repo = gitRepoManager.openRepository(p); org.eclipse.jgit.lib.ObjectId commitId = repo.resolve(manifestCommitish); com.amd.gerrit.plugins.manifestsubscription.VersionedManifests vManifests = new com.amd.gerrit.plugins.manifestsubscription.VersionedManifests(manifestCommitish); vManifests.load(repo, commitId); com.amd.gerrit.plugins.manifestsubscription.CanonicalManifest manifests = new com.amd.gerrit.plugins.manifestsubscription.CanonicalManifest(vManifests); com.amd.gerrit.plugins.manifestsubscription.manifest.Manifest manifest = manifests.getCanonicalManifest(manifestPath); stdout.println(""""); stdout.println(((""Branch '"" + (newBranch)) + ""' will be created for the following projects:"")); for (com.amd.gerrit.plugins.manifestsubscription.manifest.Project proj : manifest.getProject()) { stdout.print(proj.getRevision()); stdout.print(""\t""); stdout.println(proj.getName()); } com.amd.gerrit.plugins.manifestsubscription.VersionedManifests.branchManifest(gitRepoManager, manifest, newBranch); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | com.amd.gerrit.plugins.manifestsubscription.ManifestReadException | javax.xml.bind.JAXBException | org.eclipse.jgit.api.errors.GitAPIException e) { e.printStackTrace(stderr); } }",d93c6e598ae334a2198224bd903c3196f2f6f8c4,run(),20764,462,418
76055,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotes.java,21.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"com.google.gerrit.server.notedb.ChangeNotes createWithAutoRebuildingDisabled(com.google.gerrit.reviewdb.client.Change change) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes(args, change.getProject(), change, false).load(); }",2b82915881b3fbb9a66c20ba06f0bdb291fdb486,,createWithAutoRebuildingDisabled(com.google.gerrit.reviewdb.client.Change),10,15,"public com.google.gerrit.server.notedb.ChangeNotes createWithAutoRebuildingDisabled(com.google.gerrit.reviewdb.client.Change change) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes(args, change.getProject(), change, false).load(); }",141e6b1b228daedbe83219d1459a44e4494c3c6e,createWithAutoRebuildingDisabled(com.google.gerrit.reviewdb.client.Change),138240,81,82
35184,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_GerritJsonServlet.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.List<java.lang.Object> extractParams(final com.google.gerrit.common.audit.Audit note, final com.google.gerrit.httpd.rpc.GerritJsonServlet.GerritCall call, com.google.gson.Gson gson) { final java.util.List<java.lang.Object> args = new java.util.ArrayList<java.lang.Object>(); final java.lang.Object[] params = call.getParams(); final int[] obfuscate = note.obfuscate(); for (int i = 0; i < (params.length); i++) { java.lang.Object param = params[i]; if ((obfuscate.length) > 0) { for (int id : obfuscate) { if (id == i) { param = ""*****""; break; } } } args.add(param); } return args; }",895c3a76f32b47ca91d5a5406b5a312a434f4519,,"extractParams(com.google.gerrit.common.audit.Audit,com.google.gerrit.httpd.rpc.GerritJsonServlet$GerritCall,com.google.gson.Gson)",19,4,"private java.util.List<java.lang.Object> extractParams(final com.google.gerrit.common.audit.Audit note, final com.google.gerrit.httpd.rpc.GerritJsonServlet.GerritCall call) { java.util.List<java.lang.Object> args = com.google.common.collect.Lists.newArrayList(java.util.Arrays.asList(call.getParams())); for (int idx : note.obfuscate()) { args.set(idx, ""*****""); } return args; }",7567a9a43f9fa0bce331b1f5f219282777ea4d03,"extractParams(com.google.gerrit.common.audit.Audit,com.google.gerrit.httpd.rpc.GerritJsonServlet$GerritCall)",88215,196,121
148032,javatests_com_google_gerrit_server_git_ProjectConfigTest.java,16.0,"@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add(""groups"", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add(""project.config"", (""[plugin \""somePlugin\""]\nkey1 = "" + (staff.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationErrors()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationErrors()).getMessage()).isEqualTo((((""project.config: group \"""" + (staff.getName())) + ""\"" not in "") + (GroupList.FILE_NAME))); }",ba0aab439d2ed384c5de3c50f7f6d7a2582f1b5a,"@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add(""groups"", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add(""project.config"", (""[plugin \""somePlugin\""]\nkey1 = "" + (staff.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationErrors()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationErrors()).getMessage()).isEqualTo((((""project.config: account \"""" + (staff.getName())) + ""\"" not in "") + (GroupList.FILE_NAME))); }",b8778430f0be1ddaa4f7b36da0842c2bc1bb473a,readPluginConfigGroupReferenceNotInGroupsFile(),readPluginConfigGroupReferenceNotInGroupsFile(),17,16,"@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add(""groups"", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add(""project.config"", (""[plugin \""somePlugin\""]\nkey1 = "" + (staff.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationErrors()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationErrors()).getMessage()).isEqualTo((((""project.config: group \"""" + (staff.getName())) + ""\"" not in "") + (GroupList.FILE_NAME))); }",ba0aab439d2ed384c5de3c50f7f6d7a2582f1b5a,readPluginConfigGroupReferenceNotInGroupsFile(),215395,190,190
60090,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_SuggestReviewersIT.java,0.0,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""accounts.visibility"", value = ""SAME_GROUP"") public void suggestReviewersSameGroupVisibility() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo> reviewers; reviewers = suggestReviewers(changeId, ""user2"", 2); assertEquals(1, reviewers.size()); assertEquals(""User2"", com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user1), changeId, ""user2"", 2); assertTrue(reviewers.isEmpty()); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user2), changeId, ""user2"", 2); assertEquals(1, reviewers.size()); assertEquals(""User2"", com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user3), changeId, ""user2"", 2); assertEquals(1, reviewers.size()); assertEquals(""User2"", com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name); }",9c23605b09c51165152816b15e47bff8697df551,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""accounts.visibility"", value = ""SAME_GROUP"") public void suggestReviewersSameGroupVisibility() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.extensions.common.SuggestedReviewerInfo> reviewers; reviewers = suggestReviewers(changeId, ""user2"", 2); assertEquals(1, reviewers.size()); assertEquals(""User2"", com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user1), changeId, ""user2"", 2); assertTrue(reviewers.isEmpty()); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user2), changeId, ""user2"", 2); assertEquals(1, reviewers.size()); assertEquals(""User2"", com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user3), changeId, ""user2"", 2); assertEquals(1, reviewers.size()); assertEquals(""User2"", com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name); }",b9934b311b8e6fe8dc7371c5e22b671406c3e5b2,suggestReviewersSameGroupVisibility(),suggestReviewersSameGroupVisibility(),5,0,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""accounts.visibility"", value = ""SAME_GROUP"") public void suggestReviewersSameGroupVisibility() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.extensions.common.SuggestedReviewerInfo> reviewers; reviewers = suggestReviewers(changeId, ""user2"", 2); assertThat(reviewers).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name).isEqualTo(""User2""); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user1), changeId, ""user2"", 2); assertThat(reviewers).isEmpty(); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user2), changeId, ""user2"", 2); assertThat(reviewers).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name).isEqualTo(""User2""); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user3), changeId, ""user2"", 2); assertThat(reviewers).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name).isEqualTo(""User2""); }",2d91ea7bd05547611f21ae37539aae3729ec540b,suggestReviewersSameGroupVisibility(),90649,315,327
118371,gerrit-server_src_main_java_com_google_gerrit_server_update_RetryHelper.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@com.google.gerrit.common.Nullable abstract java.lang.Long timeoutMs();,320f4b73b2d6bb8ef3c7a72e82ef248c71bb9a9f,,timeoutMs(),3,9,@com.google.gerrit.common.Nullable abstract java.time.Duration timeout();,a75642e2e05120ced361e8dcc56b824372961cb0,timeout(),8730,20,19
79910,gerrit-server_src_main_java_com_google_gerrit_server_change_PostReviewers.java,0.0,"@java.lang.Override public com.google.gerrit.extensions.api.changes.AddReviewerResult apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.api.changes.AddReviewerInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((input.reviewer) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""missing reviewer field""); } try { com.google.gerrit.reviewdb.client.Account.Id accountId = accounts.parse(input.reviewer).getAccountId(); return putAccount(input.reviewer, reviewerFactory.create(rsrc, accountId)); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { try { return putGroup(rsrc, input); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e2) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.text.MessageFormat.format(com.google.gerrit.server.change.ChangeMessages.get().reviewerNotFound, input.reviewer)); } } }",cfbfcb51bb5a017ad94cf280235f148e164134c6,"@java.lang.Override public com.google.gerrit.extensions.api.changes.AddReviewerResult apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.api.changes.AddReviewerInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((input.reviewer) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""missing reviewer field""); } try { com.google.gerrit.reviewdb.client.Account.Id accountId = accounts.parse(input.reviewer).getAccountId(); return putAccount(input.reviewer, reviewerFactory.create(rsrc, accountId), input.cc()); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { try { return putGroup(rsrc, input); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e2) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.text.MessageFormat.format(com.google.gerrit.server.change.ChangeMessages.get().reviewerNotFound, input.reviewer)); } } }",47ddcbb7a0ac70efbf14bb462e8760e7949aa2a5,"apply(com.google.gerrit.server.change.ChangeResource,com.google.gerrit.extensions.api.changes.AddReviewerInput)","apply(com.google.gerrit.server.change.ChangeResource,com.google.gerrit.extensions.api.changes.AddReviewerInput)",15,0,"@java.lang.Override public com.google.gerrit.extensions.api.changes.AddReviewerResult apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.api.changes.AddReviewerInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((input.reviewer) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""missing reviewer field""); } try { com.google.gerrit.reviewdb.client.Account.Id accountId = accounts.parse(input.reviewer).getAccountId(); return putAccount(input.reviewer, reviewerFactory.create(rsrc, accountId), input.state()); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { try { return putGroup(rsrc, input); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e2) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.text.MessageFormat.format(com.google.gerrit.server.change.ChangeMessages.get().reviewerNotFound, input.reviewer)); } } }",ed611c02340468994138a017556a4cbe40347823,"apply(com.google.gerrit.server.change.ChangeResource,com.google.gerrit.extensions.api.changes.AddReviewerInput)",162633,316,316
93482,gerrit-server_src_main_java_com_google_gerrit_server_change_DeleteVote.java,2.0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.VoteResource rsrc, com.google.gerrit.extensions.api.changes.DeleteVoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { if (input == null) { input = new com.google.gerrit.extensions.api.changes.DeleteVoteInput(); } if (((input.label) != null) && (!(rsrc.getLabel().equals(input.label)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""label must match URL""); } if ((input.notify) == null) { input.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; } com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.reviewdb.client.Change change = r.getChange(); try (com.google.gerrit.server.git.BatchUpdate bu = batchUpdateFactory.create(db.get(), change.getProject(), r.getControl().getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.change.DeleteVote.Op(r.getReviewerUser().getAccountId(), rsrc.getLabel(), input)); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",42f9f29fe13532bda6320509f49020475d857567,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.VoteResource rsrc, com.google.gerrit.extensions.api.changes.DeleteVoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { if (input == null) { input = new com.google.gerrit.extensions.api.changes.DeleteVoteInput(); } if (((input.label) != null) && (!(rsrc.getLabel().equals(input.label)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""label must match URL""); } if ((input.notify) == null) { input.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; } com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.reviewdb.client.Change change = r.getChange(); if (((input.patchSet) != 0) && ((input.patchSet) != (change.currentPatchSetId().get()))) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete the vote of a stale patch set""); } try (com.google.gerrit.server.git.BatchUpdate bu = batchUpdateFactory.create(db.get(), change.getProject(), r.getControl().getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.change.DeleteVote.Op(r.getReviewerUser().getAccountId(), rsrc.getLabel(), input)); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",db15b7e3ee54b0d103c504f35c099cb39f5a3572,"apply(com.google.gerrit.server.change.VoteResource,com.google.gerrit.extensions.api.changes.DeleteVoteInput)","apply(com.google.gerrit.server.change.VoteResource,com.google.gerrit.extensions.api.changes.DeleteVoteInput)",10,2,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.VoteResource rsrc, com.google.gerrit.extensions.api.changes.DeleteVoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { if (input == null) { input = new com.google.gerrit.extensions.api.changes.DeleteVoteInput(); } if (((input.label) != null) && (!(rsrc.getLabel().equals(input.label)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""label must match URL""); } if ((input.notify) == null) { input.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; } com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.reviewdb.client.Change change = r.getChange(); if (((r.getRevisionResource()) != null) && (!(r.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""Cannot delete vote on non-current patch set""); } try (com.google.gerrit.server.git.BatchUpdate bu = batchUpdateFactory.create(db.get(), change.getProject(), r.getControl().getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.change.DeleteVote.Op(r.getReviewerUser().getAccountId(), rsrc.getLabel(), input)); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",d6d641453aaf2f530991686503355d43e9847059,"apply(com.google.gerrit.server.change.VoteResource,com.google.gerrit.extensions.api.changes.DeleteVoteInput)",72903,420,414
79068,gerrit-server_src_main_java_com_google_gerrit_common_StreamEventsApiListener.java,,,,private com.google.common.base.Supplier<com.google.gerrit.server.data.AccountAttribute> accountAttributeSupplier(final com.google.gerrit.reviewdb.client.Account account) { return com.google.common.base.Suppliers.memoize(new com.google.common.base.Supplier<com.google.gerrit.server.data.AccountAttribute>() { @java.lang.Override public com.google.gerrit.server.data.AccountAttribute get() { return eventFactory.asAccountAttribute(account); } }); },f9e294baed2c240f39250b2b946c2d0028b51f30,,accountAttributeSupplier(com.google.gerrit.reviewdb.client.Account),13,6,private com.google.common.base.Supplier<com.google.gerrit.server.data.AccountAttribute> accountAttributeSupplier(final com.google.gerrit.extensions.common.AccountInfo account) { return com.google.common.base.Suppliers.memoize(new com.google.common.base.Supplier<com.google.gerrit.server.data.AccountAttribute>() { @java.lang.Override public com.google.gerrit.server.data.AccountAttribute get() { return eventFactory.asAccountAttribute(new com.google.gerrit.reviewdb.client.Account.Id(account._accountId)); } }); },cf9c61c15bcdeca97f4811f6eed837ef43af4733,accountAttributeSupplier(com.google.gerrit.extensions.common.AccountInfo),194824,123,143
15259,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_ActiveSession.java,,,,public long getRefreshCookieAt() { return refreshCookieAt; },a2a8cf391485d0697d933be40072c1906e2aefd3,,getRefreshCookieAt(),5,9,public java.sql.Timestamp getRefreshCookieAt() { return refreshCookieAt; },96035cb164424b637ca117b77e60a531318435d5,getRefreshCookieAt(),93742,14,18
152050,java_com_google_gerrit_server_account_AccountsUpdate.java,22.0,"public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision()) != null ? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), accountConfig.getProjectWatches(), accountConfig.getGeneralPreferences()); }",49fcae3fdb4cc2d743778275201fee7776e916b3,"public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision()) != null ? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences())); }",5ab61d5f1095e04efbba61f7a9783c8a9b30a85a,getAccount(),getAccount(),5,22,"public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { return com.google.gerrit.server.account.AccountState.fromAccountConfig(allUsersName, externalIds, accountConfig, extIdNotes).get(); }",7f410ec4dc32a682fe34cec9ffd0b8fb090310ec,getAccount(),166111,160,60
148032,javatests_com_google_gerrit_server_query_change_AbstractQueryChangesTest.java,122.0,"@org.junit.Test public void submitRecords() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount(""user1""); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject(""repo""); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); gApi.changes().id(change1.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change2.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user.getAccountId())); assertQuery(""is:submittable"", change1); assertQuery(""-is:submittable"", change2); assertQuery(""submittable:ok"", change1); assertQuery(""submittable:not_ready"", change2); assertQuery(""label:CodE-RevieW=ok"", change1); assertQuery(""label:CodE-RevieW=ok,user=user"", change1); assertQuery(""label:CodE-RevieW=ok,Administrators"", change1); assertQuery(""label:CodE-RevieW=ok,group=Administrators"", change1); assertQuery(""label:CodE-RevieW=ok,owner"", change1); assertQuery(""label:CodE-RevieW=ok,user1""); assertQuery(""label:CodE-RevieW=need"", change2); assertQuery(""label:CodE-RevieW=need,user1""); assertQuery(""label:CodE-RevieW=need,user""); }",cfbc0891d8b3cd78f6a5fbf458885ec2904540b7,"@org.junit.Test public void submitRecords() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount(""user1""); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject(""repo""); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); gApi.changes().id(change1.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change2.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user.getAccountId())); assertQuery(""is:submittable"", change1); assertQuery(""-is:submittable"", change2); assertQuery(""submittable:ok"", change1); assertQuery(""submittable:not_ready"", change2); assertQuery(""label:CodE-RevieW=ok"", change1); assertQuery(""label:CodE-RevieW=ok,user=user"", change1); assertQuery(""label:CodE-RevieW=ok,Administrators"", change1); assertQuery(""label:CodE-RevieW=ok,account=Administrators"", change1); assertQuery(""label:CodE-RevieW=ok,owner"", change1); assertQuery(""label:CodE-RevieW=ok,user1""); assertQuery(""label:CodE-RevieW=need"", change2); assertQuery(""label:CodE-RevieW=need,user1""); assertQuery(""label:CodE-RevieW=need,user""); }",b9a8e928df08b6b1da92772e2e398f4550748eed,submitRecords(),submitRecords(),17,122,"@org.junit.Test public void submitRecords() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount(""user1""); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject(""repo""); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); gApi.changes().id(change1.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change2.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user.getAccountId())); assertQuery(""is:submittable"", change1); assertQuery(""-is:submittable"", change2); assertQuery(""submittable:ok"", change1); assertQuery(""submittable:not_ready"", change2); assertQuery(""label:CodE-RevieW=ok"", change1); assertQuery(""label:CodE-RevieW=ok,user=user"", change1); assertQuery(""label:CodE-RevieW=ok,Administrators"", change1); assertQuery(""label:CodE-RevieW=ok,group=Administrators"", change1); assertQuery(""label:CodE-RevieW=ok,owner"", change1); assertQuery(""label:CodE-RevieW=ok,user1""); assertQuery(""label:CodE-RevieW=need"", change2); assertQuery(""label:CodE-RevieW=need,user1""); assertQuery(""label:CodE-RevieW=need,user""); }",cfbc0891d8b3cd78f6a5fbf458885ec2904540b7,submitRecords(),217071,438,438
59267,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeUpdate.java,30.0,public org.eclipse.jgit.revwalk.RevCommit commit() throws java.io.IOException { com.google.gerrit.server.notedb.BatchMetaDataUpdate batch = openUpdate(); try { org.eclipse.jgit.lib.CommitBuilder builder = new org.eclipse.jgit.lib.CommitBuilder(); if (migration.write()) { org.eclipse.jgit.lib.ObjectId treeId = storeCommentsInNotes(); if (treeId != null) { builder.setTreeId(treeId); } } batch.write(builder); if ((draftUpdate) != null) { draftUpdate.commit(); } org.eclipse.jgit.revwalk.RevCommit c = batch.commit(); return c; } catch (com.google.gwtorm.server.OrmException e) { throw new java.io.IOException(e); } finally { batch.close(); } },5bd0d2842d3afafd88929a94eea9911953f7bb44,public org.eclipse.jgit.revwalk.RevCommit commit() throws java.io.IOException { com.google.gerrit.server.notedb.BatchMetaDataUpdate batch = openUpdate(); try { org.eclipse.jgit.lib.CommitBuilder builder = new org.eclipse.jgit.lib.CommitBuilder(); if (migration.writeChanges()) { org.eclipse.jgit.lib.ObjectId treeId = storeCommentsInNotes(); if (treeId != null) { builder.setTreeId(treeId); } } batch.write(builder); if ((draftUpdate) != null) { draftUpdate.commit(); } org.eclipse.jgit.revwalk.RevCommit c = batch.commit(); return c; } catch (com.google.gwtorm.server.OrmException e) { throw new java.io.IOException(e); } finally { batch.close(); } },d7fe4cda3f298b25640f2d85f46e483b02203cfa,commit(),commit(),4,31,public org.eclipse.jgit.revwalk.RevCommit commit() throws java.io.IOException { com.google.gerrit.server.notedb.BatchMetaDataUpdate batch = openUpdate(); try { writeCommit(batch); if ((draftUpdate) != null) { draftUpdate.commit(); } org.eclipse.jgit.revwalk.RevCommit c = batch.commit(); return c; } catch (com.google.gwtorm.server.OrmException e) { throw new java.io.IOException(e); } finally { batch.close(); } },f0f76565a9cf565e3f78049298640229a655bc4f,commit(),132095,195,123
61604,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_account_AccountServiceImpl.java,3.0,"@java.lang.Override public void changeDiffPreferences(final com.google.gerrit.reviewdb.client.AccountDiffPreference diffPref, com.google.gwtjsonrpc.common.AsyncCallback<com.google.gwtjsonrpc.common.VoidResult> callback) { run(callback, new com.google.gerrit.httpd.rpc.account.Action<com.google.gwtjsonrpc.common.VoidResult>() { @java.lang.Override public com.google.gwtjsonrpc.common.VoidResult run(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { if (!(diffPref.getAccountId().equals(getAccountId()))) { throw new java.lang.IllegalArgumentException(((((""diffPref.getAccountId() "" + (diffPref.getAccountId())) + "" doesn't match"") + "" the accountId of the signed in user "") + (getAccountId()))); } db.accountDiffPreferences().upsert(java.util.Collections.singleton(diffPref)); return com.google.gwtjsonrpc.common.VoidResult.INSTANCE; } }); }",fce8d9e5a943b4c349163f7c1c45d97c8be09515,"@java.lang.Override public void changeDiffPreferences(final com.google.gerrit.extensions.common.DiffPreferencesInfo diffPref, com.google.gwtjsonrpc.common.AsyncCallback<com.google.gwtjsonrpc.common.VoidResult> callback) { run(callback, new com.google.gerrit.httpd.rpc.account.Action<com.google.gwtjsonrpc.common.VoidResult>() { @java.lang.Override public com.google.gwtjsonrpc.common.VoidResult run(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { return com.google.gwtjsonrpc.common.VoidResult.INSTANCE; } }); }",d6703d861686a57e5a241b5aeea565ba24b03a40,"changeDiffPreferences(com.google.gerrit.reviewdb.client.AccountDiffPreference,com.google.gwtjsonrpc.common.AsyncCallback)","changeDiffPreferences(com.google.gerrit.extensions.common.DiffPreferencesInfo,com.google.gwtjsonrpc.common.AsyncCallback)",40,1,"@java.lang.Override public void changeDiffPreferences(final com.google.gerrit.extensions.client.DiffPreferencesInfo diffPref, com.google.gwtjsonrpc.common.AsyncCallback<com.google.gwtjsonrpc.common.VoidResult> callback) { run(callback, new com.google.gerrit.httpd.rpc.account.Action<com.google.gwtjsonrpc.common.VoidResult>() { @java.lang.Override public com.google.gwtjsonrpc.common.VoidResult run(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { if (!(getUser().isIdentifiedUser())) { throw new java.lang.IllegalArgumentException(""Not authenticated""); } com.google.gerrit.server.IdentifiedUser me = getUser().asIdentifiedUser(); try { setDiff.apply(new com.google.gerrit.server.account.AccountResource(me), diffPref); } catch (AuthException | BadRequestException | ConfigInvalidException | IOException e) { throw new com.google.gwtorm.server.OrmException(""Cannot save diff preferences"", e); } return com.google.gwtjsonrpc.common.VoidResult.INSTANCE; } }); }",487bfbc7ddbe0e1d88924448617abd0c068de4e7,"changeDiffPreferences(com.google.gerrit.extensions.client.DiffPreferencesInfo,com.google.gwtjsonrpc.common.AsyncCallback)",128034,165,277
59267,gerrit-server_src_main_java_com_google_gerrit_server_notedb_NotesMigration.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void checkConfig(org.eclipse.jgit.lib.Config cfg) { java.util.Set<java.lang.String> keys = new java.util.HashSet<>(); for (com.google.gerrit.server.notedb.NotesMigration.Table t : com.google.gerrit.server.notedb.NotesMigration.Table.values()) { keys.add(t.name().toLowerCase()); } for (java.lang.String t : cfg.getSubsections(com.google.gerrit.server.notedb.NotesMigration.NOTEDB)) { checkArgument(keys.contains(t.toLowerCase()), ""invalid notedb table: %s"", t); for (java.lang.String key : cfg.getNames(com.google.gerrit.server.notedb.NotesMigration.NOTEDB, t)) { java.lang.String lk = key.toLowerCase(); checkArgument(((lk.equals(com.google.gerrit.server.notedb.NotesMigration.WRITE)) || (lk.equals(com.google.gerrit.server.notedb.NotesMigration.READ))), ""invalid notedb key: %s.%s"", t, key); } boolean write = cfg.getBoolean(com.google.gerrit.server.notedb.NotesMigration.NOTEDB, t, com.google.gerrit.server.notedb.NotesMigration.WRITE, false); boolean read = cfg.getBoolean(com.google.gerrit.server.notedb.NotesMigration.NOTEDB, t, com.google.gerrit.server.notedb.NotesMigration.READ, false); checkArgument((!(read && (!write))), ""must have write enabled when read enabled: %s"", t); } }",c541174bbf3518d012c75f3f797a6259c4f7fed4,,checkConfig(org.eclipse.jgit.lib.Config),4,1,"private static void checkConfig(org.eclipse.jgit.lib.Config cfg) { java.util.Set<java.lang.String> keys = new java.util.HashSet<>(); for (com.google.gerrit.server.notedb.NotesMigration.Table t : com.google.gerrit.server.notedb.NotesMigration.Table.values()) { keys.add(t.key()); } for (java.lang.String t : cfg.getSubsections(com.google.gerrit.server.notedb.NotesMigration.NOTEDB)) { checkArgument(keys.contains(t.toLowerCase()), ""invalid notedb table: %s"", t); for (java.lang.String key : cfg.getNames(com.google.gerrit.server.notedb.NotesMigration.NOTEDB, t)) { java.lang.String lk = key.toLowerCase(); checkArgument(((lk.equals(com.google.gerrit.server.notedb.NotesMigration.WRITE)) || (lk.equals(com.google.gerrit.server.notedb.NotesMigration.READ))), ""invalid notedb key: %s.%s"", t, key); } boolean write = cfg.getBoolean(com.google.gerrit.server.notedb.NotesMigration.NOTEDB, t, com.google.gerrit.server.notedb.NotesMigration.WRITE, false); boolean read = cfg.getBoolean(com.google.gerrit.server.notedb.NotesMigration.NOTEDB, t, com.google.gerrit.server.notedb.NotesMigration.READ, false); checkArgument((!(read && (!write))), ""must have write enabled when read enabled: %s"", t); } }",ed288edc7a49f88db907c475d1d570e22ff20e25,checkConfig(org.eclipse.jgit.lib.Config),132120,387,385
64032,gerrit-server_src_main_java_com_google_gerrit_server_plugins_ServerPlugin.java,17.0,"@java.lang.Override public java.io.File get() { if (!(ready)) { synchronized(dataDir) { if ((!(dataDir.exists())) && (!(dataDir.mkdirs()))) { throw new com.google.inject.ProvisionException(java.lang.String.format(""Cannot create %s for plugin %s"", dataDir.getAbsolutePath(), getName())); } ready = true; } } return dataDir; }",1b027631721f1daf0c6bf093cf1ef341df49f177,"@java.lang.Override public java.io.File get() { synchronized(dataDir) { if (!(ready)) { if ((!(dataDir.exists())) && (!(dataDir.mkdirs()))) { throw new com.google.inject.ProvisionException(java.lang.String.format(""Cannot create %s for plugin %s"", dataDir.getAbsolutePath(), getName())); } ready = true; } } return dataDir; }",83999280e0a8ce137a9aa63cd2371f9fbbeb73f9,get(),get(),4,17,"@java.lang.Override public java.io.File get() { if (!(ready)) { synchronized(dataDir) { if (!(ready)) { if ((!(dataDir.exists())) && (!(dataDir.mkdirs()))) { throw new com.google.inject.ProvisionException(java.lang.String.format(""Cannot create %s for plugin %s"", dataDir.getAbsolutePath(), getName())); } ready = true; } } } return dataDir; }",8978e385f3c7ed9fe5c59f67741c4c5fe4e10a86,get(),62083,91,97
15259,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_ActiveSession.java,,,,public boolean needsCookieRefresh() { return (refreshCookieAt) <= (java.lang.System.currentTimeMillis()); },1023fbe87b37c7f77a827a983ee62ca3191edbdd,,needsCookieRefresh(),5,10,private java.sql.Timestamp now() { return new java.sql.Timestamp(java.lang.System.currentTimeMillis()); },a99ee653ffbc8b2cf5cab1ce4ef7dbf0cb380b89,now(),93753,25,27
76055,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeRebuilderImpl.java,,,,"private void flushEventsToUpdate(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.NoteDbUpdateManager manager, com.google.gerrit.server.notedb.ChangeRebuilderImpl.EventList<com.google.gerrit.server.notedb.ChangeRebuilderImpl.Event> events, com.google.gerrit.reviewdb.client.Change change) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { if (events.isEmpty()) { return; } com.google.gerrit.server.notedb.ChangeUpdate update = updateFactory.create(controlFactory.controlFor(notesFactory.createWithAutoRebuildingDisabled(change), events.getUser(db)), events.getWhen()); update.setPatchSetId(events.getPatchSetId()); for (com.google.gerrit.server.notedb.ChangeRebuilderImpl.Event e : events) { e.apply(update); } manager.add(update); events.clear(); }",3aaeff75fc04d18b008ad2f36dc7a16c4bdb84d7,,"flushEventsToUpdate(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.NoteDbUpdateManager,com.google.gerrit.server.notedb.ChangeRebuilderImpl$EventList,com.google.gerrit.reviewdb.client.Change)",10,22,"private void flushEventsToUpdate(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.NoteDbUpdateManager manager, com.google.gerrit.server.notedb.ChangeRebuilderImpl.EventList<com.google.gerrit.server.notedb.ChangeRebuilderImpl.Event> events, com.google.gerrit.reviewdb.client.Change change) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { if (events.isEmpty()) { return; } com.google.gerrit.server.notedb.ChangeUpdate update = updateFactory.create(controlFactory.controlFor(notesFactory.createWithAutoRebuildingDisabled(change), events.getUser(db)), events.getWhen()); update.setAllowWriteToNewRef(true); update.setPatchSetId(events.getPatchSetId()); for (com.google.gerrit.server.notedb.ChangeRebuilderImpl.Event e : events) { e.apply(update); } manager.add(update); events.clear(); }",f71adc05f64424a8eb386665d6e8357a197bd383,"flushEventsToUpdate(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.NoteDbUpdateManager,com.google.gerrit.server.notedb.ChangeRebuilderImpl$EventList,com.google.gerrit.reviewdb.client.Change)",138299,252,262
72537,gerrit-httpd_src_main_java_com_google_gerrit_httpd_raw_RecompileGwtUiFilter.java,1.0,"@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse res, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { java.lang.String pkg = ""gerrit-gwtui""; java.lang.String target = ""ui_"" + (rule.select(((javax.servlet.http.HttpServletRequest) (request)))); if ((gwtuiRecompile) || (!(uaInitialized.contains(target)))) { java.lang.String rule = ((""//"" + pkg) + "":"") + target; java.lang.String child = java.lang.String.format(""%s/__gwt_binary_%s__"", pkg, target); java.io.File zip = gen.resolve(child).resolve((target + "".zip"")).toFile(); synchronized(this) { try { com.google.gerrit.httpd.raw.RecompileGwtUiFilter.build(root, gen, rule); } catch (com.google.gerrit.httpd.raw.RecompileGwtUiFilter.BuildFailureException e) { displayFailure(rule, e.why, ((javax.servlet.http.HttpServletResponse) (res))); return; } if ((!(target.equals(lastTarget))) || ((lastTime) != (zip.lastModified()))) { lastTarget = target; lastTime = zip.lastModified(); com.google.gerrit.httpd.raw.RecompileGwtUiFilter.unpack(zip, unpackedWar.toFile()); } } uaInitialized.add(target); } chain.doFilter(request, res); }",9abd2958a70917e6753e62d90d7a369ecd263f00,"@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse res, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { java.lang.String pkg = ""gerrit-gwtui""; java.lang.String target = ""ui_"" + (rule.select(((javax.servlet.http.HttpServletRequest) (request)))); if ((gwtuiRecompile) || (!(uaInitialized.contains(target)))) { java.lang.String rule = ((""//"" + pkg) + "":"") + target; java.lang.String child = java.lang.String.format(""%s/__gwt_binary_%s__"", pkg, target); java.io.File zip = gen.resolve(child).resolve((target + "".zip"")).toFile(); synchronized(this) { try { com.google.gerrit.httpd.raw.BuckBuildFilter.build(root, gen, rule); } catch (com.google.gerrit.httpd.raw.BuckBuildFilter.BuildFailureException e) { com.google.gerrit.httpd.raw.BuckBuildFilter.displayFailure(rule, e.why, ((javax.servlet.http.HttpServletResponse) (res))); return; } if ((!(target.equals(lastTarget))) || ((lastTime) != (zip.lastModified()))) { lastTarget = target; lastTime = zip.lastModified(); com.google.gerrit.httpd.raw.RecompileGwtUiFilter.unpack(zip, unpackedWar.toFile()); } } uaInitialized.add(target); } chain.doFilter(request, res); }",34f4097852d712b27cab506bef19ecca52af30bb,"doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)","doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",5,1,"@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse res, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { java.lang.String pkg = ""gerrit-gwtui""; java.lang.String target = ""ui_"" + (rule.select(((javax.servlet.http.HttpServletRequest) (request)))); if ((gwtuiRecompile) || (!(uaInitialized.contains(target)))) { java.lang.String rule = ((""//"" + pkg) + "":"") + target; java.lang.String child = java.lang.String.format(""%s/__gwt_binary_%s__"", pkg, target); java.io.File zip = gen.resolve(child).resolve((target + "".zip"")).toFile(); synchronized(this) { try { com.google.gerrit.httpd.raw.BuckUtils.build(root, gen, rule); } catch (com.google.gerrit.httpd.raw.BuckUtils.BuildFailureException e) { com.google.gerrit.httpd.raw.BuckUtils.displayFailure(rule, e.why, ((javax.servlet.http.HttpServletResponse) (res))); return; } if ((!(target.equals(lastTarget))) || ((lastTime) != (zip.lastModified()))) { lastTarget = target; lastTime = zip.lastModified(); com.google.gerrit.httpd.raw.RecompileGwtUiFilter.unpack(zip, unpackedWar.toFile()); } } uaInitialized.add(target); } chain.doFilter(request, res); }",c16b1534baf0ceb6ddfe51388327f9ba7bfbfe82,"doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",6106,361,358
49760,src_main_java_com_googlesource_gerrit_plugins_replication_ReplicationQueue.java,5.0,"@java.lang.Override public void onGitReferenceUpdated(com.google.gerrit.extensions.events.GitReferenceUpdatedListener.Event event) { com.googlesource.gerrit.plugins.replication.ReplicationState state = new com.googlesource.gerrit.plugins.replication.ReplicationState(ReplicationType.GIT_UPDATED); if (!(running)) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.wrappedLog.warn(""Replication plugin did not finish startup before event"", state); return; } com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey(event.getProjectName()); for (com.google.gerrit.extensions.events.GitReferenceUpdatedListener.Update u : event.getUpdates()) { for (com.googlesource.gerrit.plugins.replication.Destination cfg : configs) { if ((cfg.wouldPushProject(project)) && (cfg.wouldPushRef(u.getRefName()))) { for (org.eclipse.jgit.transport.URIish uri : cfg.getURIs(project, null)) { cfg.schedule(project, u.getRefName(), uri, state); } } } } state.markAllPushTasksScheduled(); }",a89073832c8b6c328217588838ccdb21dc97175e,"@java.lang.Override public void onGitReferenceUpdated(com.google.gerrit.extensions.events.GitReferenceUpdatedListener.Event event) { com.googlesource.gerrit.plugins.replication.ReplicationState state = new com.googlesource.gerrit.plugins.replication.ReplicationState(ReplicationType.GIT_UPDATED); if (!(running)) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.wrappedLog.warn(""Replication plugin did not finish startup before event"", state); return; } com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey(event.getProjectName()); for (com.google.gerrit.extensions.events.GitReferenceUpdatedListener.Update u : event.getUpdates()) { for (com.googlesource.gerrit.plugins.replication.Destination cfg : configs.getDestinations()) { if ((cfg.wouldPushProject(project)) && (cfg.wouldPushRef(u.getRefName()))) { for (org.eclipse.jgit.transport.URIish uri : cfg.getURIs(project, null)) { cfg.schedule(project, u.getRefName(), uri, state); } } } } state.markAllPushTasksScheduled(); }",8942b679a055cd6eb7142ce410e357f02c594d63,onGitReferenceUpdated(com.google.gerrit.extensions.events.GitReferenceUpdatedListener$Event),onGitReferenceUpdated(com.google.gerrit.extensions.events.GitReferenceUpdatedListener$Event),5,9,"@java.lang.Override public void onGitReferenceUpdated(com.google.gerrit.extensions.events.GitReferenceUpdatedListener.Event event) { com.googlesource.gerrit.plugins.replication.ReplicationState state = new com.googlesource.gerrit.plugins.replication.ReplicationState(new com.googlesource.gerrit.plugins.replication.PushResultProcessing.GitUpdateProcessing(changeHooks, database)); if (!(running)) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.wrappedLog.warn(""Replication plugin did not finish startup before event"", state); return; } com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey(event.getProjectName()); for (com.googlesource.gerrit.plugins.replication.Destination cfg : config.getDestinations()) { if ((cfg.wouldPushProject(project)) && (cfg.wouldPushRef(event.getRefName()))) { for (org.eclipse.jgit.transport.URIish uri : cfg.getURIs(project, null)) { cfg.schedule(project, event.getRefName(), uri, state); } } } state.markAllPushTasksScheduled(); }",065db0657032b38074456bad8e72273fa6feda43,onGitReferenceUpdated(com.google.gerrit.extensions.events.GitReferenceUpdatedListener$Event),154021,286,276
41830,gerrit-server_src_main_java_com_google_gerrit_server_group_PutName.java,,,,"@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.PutName.Input input) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.auth.AuthException, com.google.gwtorm.server.OrmException { if ((resource.toAccountGroup()) == null) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); } else if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.server.auth.AuthException(""Not group owner""); } if ((input == null) || ((com.google.common.base.Strings.emptyToNull(input.newName)) == null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""new name is missing""); } try { return performRenameGroupFactory.create().renameGroup(resource.toAccountGroup().getId(), input.newName).group.getName(); } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } catch (com.google.gerrit.common.errors.InvalidNameException e) { throw new com.google.gerrit.extensions.restapi.BadRequestException(e.getMessage()); } }",314920878e8ce22a37c34abe321e9b93add15fa9,,"apply(com.google.gerrit.server.group.GroupResource,com.google.gerrit.server.group.PutName$Input)",4,0,"@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.PutName.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if ((resource.toAccountGroup()) == null) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); } else if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Not group owner""); } else if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""name is required""); } try { return performRenameGroupFactory.create().renameGroup(resource.toAccountGroup().getId(), input.name).group.getName(); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } catch (com.google.gerrit.common.errors.InvalidNameException e) { throw new com.google.gerrit.extensions.restapi.BadRequestException(e.getMessage()); } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }",25123f3eb74f79eb99736f921773f0350f36563c,"apply(com.google.gerrit.server.group.GroupResource,com.google.gerrit.server.group.PutName$Input)",154306,416,410
130851,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,37.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,void clear() { countsByRef.clear(); },c390f3ff642b346f2a98d4f1504e0f3cd14e21c2,,clear(),2,5,void clear() { countsByProjectRefs.clear(); },261a51786a7162383cc135fd48c954b909ff1f5c,clear(),11627,11,12
73221,gerrit-server_src_main_java_com_google_gerrit_server_patch_PatchListLoader.java,18.0,"private com.google.gerrit.server.patch.PatchListEntry newEntry(org.eclipse.jgit.revwalk.RevTree aTree, org.eclipse.jgit.patch.FileHeader fileHeader, long sizeDelta) { final org.eclipse.jgit.lib.FileMode oldMode = fileHeader.getOldMode(); final org.eclipse.jgit.lib.FileMode newMode = fileHeader.getNewMode(); if ((oldMode == (org.eclipse.jgit.lib.FileMode.GITLINK)) || (newMode == (org.eclipse.jgit.lib.FileMode.GITLINK))) { return new com.google.gerrit.server.patch.PatchListEntry(fileHeader, java.util.Collections.<org.eclipse.jgit.diff.Edit>emptyList(), sizeDelta); } if (((aTree == null) || ((fileHeader.getPatchType()) != (org.eclipse.jgit.patch.FileHeader.PatchType.UNIFIED))) || (fileHeader.getHunks().isEmpty())) { return new com.google.gerrit.server.patch.PatchListEntry(fileHeader, java.util.Collections.<org.eclipse.jgit.diff.Edit>emptyList(), sizeDelta); } java.util.List<org.eclipse.jgit.diff.Edit> edits = fileHeader.toEditList(); if (edits.isEmpty()) { return new com.google.gerrit.server.patch.PatchListEntry(fileHeader, java.util.Collections.<org.eclipse.jgit.diff.Edit>emptyList(), sizeDelta); } else { return new com.google.gerrit.server.patch.PatchListEntry(fileHeader, edits, sizeDelta); } }",07de1f9898705cb5b9a64868c90b249bfd4e15b3,"private com.google.gerrit.server.patch.PatchListEntry newEntry(org.eclipse.jgit.revwalk.RevTree aTree, org.eclipse.jgit.patch.FileHeader fileHeader, long sizeDelta) { final org.eclipse.jgit.lib.FileMode oldMode = fileHeader.getOldMode(); final org.eclipse.jgit.lib.FileMode newMode = fileHeader.getNewMode(); if (((aTree == null) || ((fileHeader.getPatchType()) != (org.eclipse.jgit.patch.FileHeader.PatchType.UNIFIED))) || (fileHeader.getHunks().isEmpty())) { return new com.google.gerrit.server.patch.PatchListEntry(fileHeader, java.util.Collections.<org.eclipse.jgit.diff.Edit>emptyList(), sizeDelta); } java.util.List<org.eclipse.jgit.diff.Edit> edits = fileHeader.toEditList(); if (edits.isEmpty()) { return new com.google.gerrit.server.patch.PatchListEntry(fileHeader, java.util.Collections.<org.eclipse.jgit.diff.Edit>emptyList(), sizeDelta); } else { return new com.google.gerrit.server.patch.PatchListEntry(fileHeader, edits, sizeDelta); } }",da65a8c5313c6cfb74f3d979cc04b999bbb14712,"newEntry(org.eclipse.jgit.revwalk.RevTree,org.eclipse.jgit.patch.FileHeader,long)","newEntry(org.eclipse.jgit.revwalk.RevTree,org.eclipse.jgit.patch.FileHeader,long)",7,18,"private com.google.gerrit.server.patch.PatchListEntry newEntry(org.eclipse.jgit.revwalk.RevTree aTree, org.eclipse.jgit.patch.FileHeader fileHeader, long sizeDelta) { if (((aTree == null) || ((fileHeader.getPatchType()) != (org.eclipse.jgit.patch.FileHeader.PatchType.UNIFIED))) || (fileHeader.getHunks().isEmpty())) { return new com.google.gerrit.server.patch.PatchListEntry(fileHeader, java.util.Collections.<org.eclipse.jgit.diff.Edit>emptyList(), sizeDelta); } java.util.List<org.eclipse.jgit.diff.Edit> edits = fileHeader.toEditList(); if (edits.isEmpty()) { return new com.google.gerrit.server.patch.PatchListEntry(fileHeader, java.util.Collections.<org.eclipse.jgit.diff.Edit>emptyList(), sizeDelta); } else { return new com.google.gerrit.server.patch.PatchListEntry(fileHeader, edits, sizeDelta); } }",c569fc131457b381a7ba18f6d84f9095aef423bc,"newEntry(org.eclipse.jgit.revwalk.RevTree,org.eclipse.jgit.patch.FileHeader,long)",150490,297,254
34953,gerrit-server_src_main_java_com_google_gerrit_server_auth_ldap_LdapGroupBackend.java,,,,@java.lang.Override public com.google.gerrit.common.data.ExtGroup get(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { if (com.google.gerrit.server.auth.ldap.LdapGroupBackend.isLdapUUID(uuid)) { com.google.gerrit.reviewdb.client.AccountGroup.ExternalNameKey ext = com.google.gerrit.server.auth.ldap.LdapGroupBackend.externalNameKey(uuid); for (com.google.gerrit.reviewdb.client.AccountGroup g : groupCache.get(ext)) { if ((g.getGroupUUID()) != null) { return com.google.gerrit.common.data.ExtGroups.forAccountGroup(g); } } return lookup(ext); } else { return internalBackend.get(uuid); } },c2bdc4404c7aee177ec11eb373903da0622e41e4,,get(com.google.gerrit.reviewdb.client.AccountGroup$UUID),25,6,"@java.lang.Override public GroupDescription.Basic get(final com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { if (!(handles(uuid))) { return null; } java.lang.String groupDn = uuid.get().substring(com.google.gerrit.server.auth.ldap.Helper.LDAP_UUID.length()); com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((!(user instanceof com.google.gerrit.server.IdentifiedUser)) || (!(membershipsOf(((com.google.gerrit.server.IdentifiedUser) (user))).contains(uuid)))) { try { if (!(existsCache.get(groupDn))) { return null; } } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.auth.ldap.LdapGroupBackend.log.warn(java.lang.String.format(""Cannot lookup group %s in LDAP"", groupDn), e); return null; } } final java.lang.String name = (com.google.gerrit.server.auth.ldap.LdapGroupBackend.LDAP_NAME) + (com.google.gerrit.server.auth.ldap.LdapGroupBackend.cnFor(groupDn)); return new com.google.gerrit.common.data.GroupDescription.Basic() { @java.lang.Override public AccountGroup.UUID getGroupUUID() { return uuid; } @java.lang.Override public java.lang.String getName() { return name; } @java.lang.Override public boolean isVisibleToAll() { return true; } }; }",db811632e58525a6a3dbe99aa93cef7d7bd639cd,get(com.google.gerrit.reviewdb.client.AccountGroup$UUID),76494,193,359
31553,gerrit-server_src_main_java_com_google_gerrit_server_changedetail_DeleteDraft.java,,,,com.google.gerrit.server.changedetail.DeleteDraft create(com.google.gerrit.reviewdb.PatchSet.Id patchSetId);,85a4c9bc038c2bd8a96935b68f2d23d03093d96d,,create(com.google.gerrit.reviewdb.PatchSet$Id),6,1,com.google.gerrit.server.changedetail.DeleteDraftPatchSet create(com.google.gerrit.reviewdb.PatchSet.Id patchSetId);,090bfd5d25b6adcdfe78e9baf32767eba595c872,create(com.google.gerrit.reviewdb.PatchSet$Id),53315,35,37
153713,javatests_com_google_gerrit_acceptance_rest_project_CreateProjectIT.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.Optional<java.lang.String> readProjectConfig(java.lang.String projectName) throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName))) { org.eclipse.jgit.junit.TestRepository<?> tr = new org.eclipse.jgit.junit.TestRepository(repo); org.eclipse.jgit.revwalk.RevWalk rw = tr.getRevWalk(); org.eclipse.jgit.lib.Ref ref = repo.exactRef(RefNames.REFS_CONFIG); if (ref == null) { return java.util.Optional.empty(); } org.eclipse.jgit.lib.ObjectLoader obj = rw.getObjectReader().open(tr.get(rw.parseTree(ref.getObjectId()), com.google.gerrit.acceptance.rest.project.PROJECT_CONFIG), com.google.gerrit.acceptance.rest.project.OBJ_BLOB); return java.util.Optional.of(new java.lang.String(obj.getCachedBytes(java.lang.Integer.MAX_VALUE), java.nio.charset.StandardCharsets.UTF_8)); } }",2425cfc6934620be2463d2f24f67731d1ed111ec,,readProjectConfig(java.lang.String),2,3,"private java.util.Optional<java.lang.String> readProjectConfig(java.lang.String projectName) throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName))) { org.eclipse.jgit.junit.TestRepository<?> tr = new org.eclipse.jgit.junit.TestRepository(repo); org.eclipse.jgit.revwalk.RevWalk rw = tr.getRevWalk(); org.eclipse.jgit.lib.Ref ref = repo.exactRef(RefNames.REFS_CONFIG); if (ref == null) { return java.util.Optional.empty(); } org.eclipse.jgit.lib.ObjectLoader obj = rw.getObjectReader().open(tr.get(rw.parseTree(ref.getObjectId()), com.google.gerrit.acceptance.rest.project.PROJECT_CONFIG), Constants.OBJ_BLOB); return java.util.Optional.of(new java.lang.String(obj.getCachedBytes(java.lang.Integer.MAX_VALUE), java.nio.charset.StandardCharsets.UTF_8)); } }",1f99d8b4af96cd8f13346b6b68c7dcb2bb09193f,readProjectConfig(java.lang.String),30684,278,266
121630,gerrit-server_src_main_java_com_google_gerrit_server_group_GroupsUpdate.java,0.0,"public void addIncludedGroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID parentGroupUuid, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> includedGroupUuids) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup parentGroup = groups.getExistingGroup(db, parentGroupUuid); com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId = parentGroup.getId(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> newIncludedGroups = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid : includedGroupUuids) { boolean isIncluded = groups.isIncluded(db, parentGroupUuid, includedGroupUuid); if (!isIncluded) { com.google.gerrit.reviewdb.client.AccountGroupById.Key key = new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, includedGroupUuid); newIncludedGroups.add(new com.google.gerrit.reviewdb.client.AccountGroupById(key)); } } if (newIncludedGroups.isEmpty()) { return; } if ((currentUser) != null) { auditService.dispatchAddGroupsToGroup(currentUser.getAccountId(), newIncludedGroups); } db.accountGroupById().insert(newIncludedGroups); for (com.google.gerrit.reviewdb.client.AccountGroupById newIncludedGroup : newIncludedGroups) { groupIncludeCache.evictParentGroupsOf(newIncludedGroup.getIncludeUUID()); } groupIncludeCache.evictSubgroupsOf(parentGroupUuid); }",1c1ee7c12242bed71a10dcb1b4526b686cfc578c,"public void addSubgroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID parentGroupUuid, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup parentGroup = groups.getExistingGroup(db, parentGroupUuid); com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId = parentGroup.getId(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> newSubgroups = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid : subgroupUuids) { boolean isSubgroup = groups.isSubgroup(db, parentGroupUuid, includedGroupUuid); if (!isSubgroup) { com.google.gerrit.reviewdb.client.AccountGroupById.Key key = new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, includedGroupUuid); newSubgroups.add(new com.google.gerrit.reviewdb.client.AccountGroupById(key)); } } if (newSubgroups.isEmpty()) { return; } if ((currentUser) != null) { auditService.dispatchAddGroupsToGroup(currentUser.getAccountId(), newSubgroups); } db.accountGroupById().insert(newSubgroups); for (com.google.gerrit.reviewdb.client.AccountGroupById newIncludedGroup : newSubgroups) { groupIncludeCache.evictParentGroupsOf(newIncludedGroup.getIncludeUUID()); } groupIncludeCache.evictSubgroupsOf(parentGroupUuid); }",2a4fadbe8a2adc00454444760d889875dc213ed9,"addIncludedGroups(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.AccountGroup$UUID,java.util.Set)","addSubgroups(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.AccountGroup$UUID,java.util.Set)",7,5,"public void addSubgroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID parentGroupUuid, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.AccountGroup parentGroup = groups.getExistingGroup(db, parentGroupUuid); com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId = parentGroup.getId(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> newSubgroups = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid : subgroupUuids) { boolean isSubgroup = groups.isSubgroup(db, parentGroupUuid, includedGroupUuid); if (!isSubgroup) { com.google.gerrit.reviewdb.client.AccountGroupById.Key key = new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, includedGroupUuid); newSubgroups.add(new com.google.gerrit.reviewdb.client.AccountGroupById(key)); } } if (newSubgroups.isEmpty()) { return; } if ((currentUser) != null) { auditService.dispatchAddGroupsToGroup(currentUser.getAccountId(), newSubgroups); } db.accountGroupById().insert(newSubgroups); groupCache.evict(parentGroup.getGroupUUID(), parentGroup.getId(), parentGroup.getNameKey()); for (com.google.gerrit.reviewdb.client.AccountGroupById newIncludedGroup : newSubgroups) { groupIncludeCache.evictParentGroupsOf(newIncludedGroup.getIncludeUUID()); } groupIncludeCache.evictSubgroupsOf(parentGroupUuid); }",02cb280ad915f4de4730c4532e2e2bd26c94c5e3,"addSubgroups(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.AccountGroup$UUID,java.util.Set)",41074,435,463
48992,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,91.0,"void removeDraft(com.google.gerrit.client.diff.DraftBox box, int line) { net.codemirror.lib.CodeMirror.LineHandle handle = getCmFromSide(box.getSide()).getLineHandle(line); lineActiveBoxMap.remove(handle); if (lineLastPublishedBoxMap.containsKey(handle)) { lineActiveBoxMap.put(handle, lineLastPublishedBoxMap.get(handle)); } }",a55835f1c84835fdfeddf09bac25d5b637af944d,"void removeDraft(com.google.gerrit.client.diff.DraftBox box, int line) { net.codemirror.lib.CodeMirror.LineHandle handle = getCmFromSide(box.getSide()).getLineHandle(line); lineActiveBoxMap.remove(handle); if (lineLastPublishedBoxMap.containsKey(handle)) { java.util.List<com.google.gerrit.client.diff.PublishedBox> list = lineLastPublishedBoxMap.get(handle); lineActiveBoxMap.put(handle, list.get(((list.size()) - 1))); } }",c9fdb317e33b98e356cc69a7b0f9f7b4a00fe598,"removeDraft(com.google.gerrit.client.diff.DraftBox,int)","removeDraft(com.google.gerrit.client.diff.DraftBox,int)",4,92,"void removeDraft(com.google.gerrit.client.diff.DraftBox box, int line) { net.codemirror.lib.CodeMirror.LineHandle handle = getCmFromSide(box.getSide()).getLineHandle(line); lineActiveBoxMap.remove(handle); if (linePublishedBoxesMap.containsKey(handle)) { java.util.List<com.google.gerrit.client.diff.PublishedBox> list = linePublishedBoxesMap.get(handle); lineActiveBoxMap.put(handle, list.get(((list.size()) - 1))); } }",7c1bf354dab152f876105ff550226a3868b90fb6,"removeDraft(com.google.gerrit.client.diff.DraftBox,int)",99597,130,128
78433,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeUpdate.java,47.0,"private com.google.gerrit.server.notedb.RevisionNoteMap getRevisionNoteMap(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId curr) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (curr.equals(org.eclipse.jgit.lib.ObjectId.zeroId())) { return com.google.gerrit.server.notedb.RevisionNoteMap.emptyMap(); } if (migration.readChanges()) { com.google.gerrit.server.notedb.ChangeNotes notes = getNotes(); if (notes != null) { org.eclipse.jgit.lib.ObjectId idFromNotes = firstNonNull(notes.load().getRevision(), org.eclipse.jgit.lib.ObjectId.zeroId()); if (idFromNotes.equals(curr)) { return checkNotNull(getNotes().revisionNoteMap); } } } org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(rw.getObjectReader(), rw.parseCommit(curr)); return com.google.gerrit.server.notedb.RevisionNoteMap.parse(noteUtil, getId(), rw.getObjectReader(), noteMap, false); }",f4d5cead72f53cf5b2bb2c385108417771364d97,"private com.google.gerrit.server.notedb.RevisionNoteMap getRevisionNoteMap(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId curr) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (curr.equals(org.eclipse.jgit.lib.ObjectId.zeroId())) { return com.google.gerrit.server.notedb.RevisionNoteMap.emptyMap(); } if (migration.readChanges()) { com.google.gerrit.server.notedb.ChangeNotes notes = getNotes(); if ((notes != null) && ((notes.revisionNoteMap) != null)) { org.eclipse.jgit.lib.ObjectId idFromNotes = firstNonNull(notes.load().getRevision(), org.eclipse.jgit.lib.ObjectId.zeroId()); if (idFromNotes.equals(curr)) { return checkNotNull(notes.revisionNoteMap); } } } org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(rw.getObjectReader(), rw.parseCommit(curr)); return com.google.gerrit.server.notedb.RevisionNoteMap.parse(noteUtil, getId(), rw.getObjectReader(), noteMap, false); }",f7ea0edf52c67bc958a60791453701eb18513e20,"getRevisionNoteMap(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ObjectId)","getRevisionNoteMap(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ObjectId)",5,47,"private com.google.gerrit.server.notedb.RevisionNoteMap getRevisionNoteMap(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId curr) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (curr.equals(org.eclipse.jgit.lib.ObjectId.zeroId())) { return com.google.gerrit.server.notedb.RevisionNoteMap.emptyMap(); } if (migration.readChanges()) { com.google.gerrit.server.notedb.ChangeNotes notes = getNotes(); if ((notes != null) && ((notes.revisionNoteMap) != null)) { org.eclipse.jgit.lib.ObjectId idFromNotes = firstNonNull(notes.load().getRevision(), org.eclipse.jgit.lib.ObjectId.zeroId()); if (idFromNotes.equals(curr)) { return notes.revisionNoteMap; } } } org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(rw.getObjectReader(), rw.parseCommit(curr)); return com.google.gerrit.server.notedb.RevisionNoteMap.parse(noteUtil, getId(), rw.getObjectReader(), noteMap, false); }",06d30da62b12357d66a485d08ed9c6ebf700641f,"getRevisionNoteMap(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ObjectId)",8672,304,302
55624,gerrit-gwtui_src_main_java_com_google_gerrit_client_Gerrit.java,19.0,"private static void addExtensionLink(com.google.gerrit.client.ui.LinkMenuBar m, com.google.gerrit.client.extensions.TopMenuItem item) { com.google.gwt.user.client.ui.Anchor atag = com.google.gerrit.client.Gerrit.anchor(item.getName(), (com.google.gerrit.client.Gerrit.isAbsolute(item.getUrl()) ? item.getUrl() : com.google.gerrit.client.Gerrit.selfRedirect(item.getUrl()))); atag.setTarget(item.getTarget()); if ((item.getId()) != null) { atag.getElement().setAttribute(""id"", item.getId()); } m.add(atag); }",615b48075ed1d50e60ee5ef52f7b5386dcceef66,"private static void addExtensionLink(com.google.gerrit.client.ui.LinkMenuBar m, com.google.gerrit.client.extensions.TopMenuItem item) { if ((item.getUrl().startsWith(""#"")) && (((item.getTarget()) == null) || (item.getTarget().isEmpty()))) { com.google.gerrit.client.ui.LinkMenuItem a = new com.google.gerrit.client.ui.LinkMenuItem(item.getName(), item.getUrl().substring(1)); if ((item.getId()) != null) { a.getElement().setAttribute(""id"", item.getId()); } m.add(a); } else { com.google.gwt.user.client.ui.Anchor atag = com.google.gerrit.client.Gerrit.anchor(item.getName(), (com.google.gerrit.client.Gerrit.isAbsolute(item.getUrl()) ? item.getUrl() : com.google.gerrit.client.Gerrit.selfRedirect(item.getUrl()))); atag.setTarget(item.getTarget()); if ((item.getId()) != null) { atag.getElement().setAttribute(""id"", item.getId()); } m.add(atag); } }",7eeac3f1e473d09fdf82c7d913a4c51022796ef2,"addExtensionLink(com.google.gerrit.client.ui.LinkMenuBar,com.google.gerrit.client.extensions.TopMenuItem)","addExtensionLink(com.google.gerrit.client.ui.LinkMenuBar,com.google.gerrit.client.extensions.TopMenuItem)",2,19,"private static void addExtensionLink(com.google.gerrit.client.ui.LinkMenuBar m, com.google.gerrit.client.extensions.TopMenuItem item) { if ((item.getUrl().startsWith(""#"")) && (((item.getTarget()) == null) || (item.getTarget().isEmpty()))) { com.google.gerrit.client.ui.LinkMenuItem a = new com.google.gerrit.client.ui.LinkMenuItem(item.getName(), item.getUrl().substring(1)); if ((item.getId()) != null) { a.getElement().setAttribute(""id"", item.getId()); } m.add(a); } else { com.google.gwt.user.client.ui.Anchor atag = com.google.gerrit.client.Gerrit.anchor(item.getName(), (com.google.gerrit.client.Gerrit.isAbsolute(item.getUrl()) ? item.getUrl() : com.google.gerrit.client.Gerrit.selfRedirect(item.getUrl()))); if (((item.getTarget()) != null) && (!(item.getTarget().isEmpty()))) { atag.setTarget(item.getTarget()); } if ((item.getId()) != null) { atag.getElement().setAttribute(""id"", item.getId()); } m.add(atag); } }",7f61dcc9ac3c77fa65cc6a5fbe612cc7263ed674,"addExtensionLink(com.google.gerrit.client.ui.LinkMenuBar,com.google.gerrit.client.extensions.TopMenuItem)",153790,264,283
55207,gitiles-servlet_src_main_java_com_google_gitiles_CommitJsonData.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private static java.util.List<com.google.gitiles.CommitJsonData.Diff> toJsonData(java.util.List<org.eclipse.jgit.diff.DiffEntry> diffEntries) { java.util.List<com.google.gitiles.CommitJsonData.Diff> result = com.google.common.collect.Lists.newArrayListWithCapacity(diffEntries.size()); for (org.eclipse.jgit.diff.DiffEntry de : diffEntries) { com.google.gitiles.CommitJsonData.Diff d = new com.google.gitiles.CommitJsonData.Diff(); d.type = de.getChangeType().name().toLowerCase(); d.oldId = de.getOldId().name(); d.oldMode = de.getOldMode().getBits(); d.oldPath = de.getOldPath(); d.newId = de.getNewId().name(); d.newMode = de.getNewMode().getBits(); d.newPath = de.getNewPath(); switch (de.getChangeType()) { case COPY : case RENAME : d.score = de.getScore(); break; default : break; } result.add(d); } return result; },5b2488a058d1d17b3811121903cd6e8a1360c855,,toJsonData(java.util.List),3,4,private static java.util.List<com.google.gitiles.CommitJsonData.Diff> toJsonData(DiffList dl) { java.util.List<com.google.gitiles.CommitJsonData.Diff> result = com.google.common.collect.Lists.newArrayListWithCapacity(dl.entries.size()); for (org.eclipse.jgit.diff.DiffEntry de : dl.entries) { com.google.gitiles.CommitJsonData.Diff d = new com.google.gitiles.CommitJsonData.Diff(); d.type = de.getChangeType().name().toLowerCase(); d.oldId = de.getOldId().name(); d.oldMode = de.getOldMode().getBits(); d.oldPath = de.getOldPath(); d.newId = de.getNewId().name(); d.newMode = de.getNewMode().getBits(); d.newPath = de.getNewPath(); switch (de.getChangeType()) { case COPY : case RENAME : d.score = de.getScore(); break; default : break; } result.add(d); } return result; },a06c53d1f3c97e88b6dd80703aa92ecd6237a09c,toJsonData(com.google.gitiles.CommitData.DiffList),155670,279,264
50825,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,5.0,"@java.lang.Override public void onShowView() { super.onShowView(); handlers.add(com.google.gwtexpui.user.client.UserAgent.addDialogVisibleHandler(new com.google.gwtexpui.user.client.DialogVisibleHandler() { @java.lang.Override public void onDialogVisible(com.google.gwtexpui.user.client.DialogVisibleEvent event) { diffTable.getElement().getStyle().setVisibility((event.isVisible() ? Style.Visibility.HIDDEN : Style.Visibility.VISIBLE)); } })); resizeCodeMirror(); com.google.gwt.user.client.Window.enableScrolling(false); cmA.setOption(""viewportMargin"", 10); cmB.setOption(""viewportMargin"", 10); cmB.setCursor(net.codemirror.lib.LineCharacter.create(0)); cmB.focus(); prefetchNextFile(); }",7bfdf53cff0c78536fbd2c8bd1527582c9b7de1a,"@java.lang.Override public void onShowView() { super.onShowView(); handlers.add(com.google.gwtexpui.user.client.UserAgent.addDialogVisibleHandler(new com.google.gwtexpui.user.client.DialogVisibleHandler() { @java.lang.Override public void onDialogVisible(com.google.gwtexpui.user.client.DialogVisibleEvent event) { diffTable.getElement().getStyle().setVisibility((event.isVisible() ? Style.Visibility.HIDDEN : Style.Visibility.VISIBLE)); } })); resizeCodeMirror(); com.google.gerrit.client.diff.SideBySide2.enableScrolling(false); cmA.setOption(""viewportMargin"", 10); cmB.setOption(""viewportMargin"", 10); cmB.setCursor(net.codemirror.lib.LineCharacter.create(0)); cmB.focus(); prefetchNextFile(); }",ee6cb74a49fbfae7a6b1e78ec5be7f3221bd1ea2,onShowView(),onShowView(),2,5,"@java.lang.Override public void onShowView() { super.onShowView(); handlers.add(com.google.gwtexpui.user.client.UserAgent.addDialogVisibleHandler(new com.google.gwtexpui.user.client.DialogVisibleHandler() { @java.lang.Override public void onDialogVisible(com.google.gwtexpui.user.client.DialogVisibleEvent event) { diffTable.getElement().getStyle().setVisibility((event.isVisible() ? Style.Visibility.HIDDEN : Style.Visibility.VISIBLE)); } })); resizeCodeMirror(); com.google.gwt.user.client.Window.enableScrolling(false); cmA.setOption(""viewportMargin"", 10); cmB.setOption(""viewportMargin"", 10); cmB.setCursor(net.codemirror.lib.LineCharacter.create(0)); cmB.focus(); prefetchNextFile(); }",7bfdf53cff0c78536fbd2c8bd1527582c9b7de1a,onShowView(),45495,194,191
113930,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeSuperSet.java,12.0,"private com.google.gerrit.extensions.client.SubmitType submitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet ps, boolean visible) throws com.google.gwtorm.server.OrmException { if (!visible) { return cd.changeControl().getProject().getSubmitType(); } com.google.gerrit.common.data.SubmitTypeRecord str = (ps == (cd.currentPatchSet())) ? cd.submitTypeRecord() : new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, cd).setPatchSet(ps).getSubmitType(); if (!(str.isOk())) { logErrorAndThrow((((""Failed to get submit type for "" + (cd.getId())) + "": "") + (str.errorMessage))); } return str.type; }",1f01deaf400ed6ce9ef3674932cf9ee82b4459a0,"private com.google.gerrit.extensions.client.SubmitType submitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet ps, boolean visible) throws com.google.gwtorm.server.OrmException { if (!visible) { return cd.changeControl().getProject().getSubmitType(); } com.google.gerrit.common.data.SubmitTypeRecord str = (ps == (cd.currentPatchSet())) ? cd.submitTypeRecord() : new com.google.gerrit.server.project.SubmitRuleEvaluator(accountByEmailCache, accountCache, cd).setPatchSet(ps).getSubmitType(); if (!(str.isOk())) { logErrorAndThrow((((""Failed to get submit type for "" + (cd.getId())) + "": "") + (str.errorMessage))); } return str.type; }",f04a0d68be54e6a3df490b6372ac5789cc80225f,"submitType(com.google.gerrit.server.query.change.ChangeData,com.google.gerrit.reviewdb.client.PatchSet,boolean)","submitType(com.google.gerrit.server.query.change.ChangeData,com.google.gerrit.reviewdb.client.PatchSet,boolean)",3,12,"private com.google.gerrit.extensions.client.SubmitType submitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet ps, boolean visible) throws com.google.gwtorm.server.OrmException { if (!visible) { return cd.changeControl().getProject().getSubmitType(); } com.google.gerrit.common.data.SubmitTypeRecord str = (ps == (cd.currentPatchSet())) ? cd.submitTypeRecord() : new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, cd).setPatchSet(ps).getSubmitType(); if (!(str.isOk())) { logErrorAndThrow((((""Failed to get submit type for "" + (cd.getId())) + "": "") + (str.errorMessage))); } return str.type; }",23eac4efd239d1b00f4afd9240b386a336be9ab7,"submitType(com.google.gerrit.server.query.change.ChangeData,com.google.gerrit.reviewdb.client.PatchSet,boolean)",63880,201,198
93495,gerrit-server_src_main_java_com_google_gerrit_server_api_groups_GroupsImpl.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.GroupInfo> query(com.google.gerrit.server.api.groups.QueryRequest r) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.group.QueryGroups myQueryGroups = queryGroups.get(); myQueryGroups.setQuery(r.getQuery()); myQueryGroups.setLimit(r.getLimit()); myQueryGroups.setStart(r.getStart()); for (com.google.gerrit.extensions.client.ListGroupsOption option : r.getOptions()) { myQueryGroups.addOption(option); } return myQueryGroups.apply(TopLevelResource.INSTANCE); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot query groups"", e); } }",21b794587603189460c454a7deb220a4ecbc88e6,,query(com.google.gerrit.server.api.groups.QueryRequest),12,6,"private java.util.List<com.google.gerrit.extensions.common.GroupInfo> query(com.google.gerrit.server.api.groups.QueryRequest r) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.group.QueryGroups myQueryGroups = queryGroups.get(); myQueryGroups.setQuery(r.getQuery()); myQueryGroups.setLimit(r.getLimit()); myQueryGroups.setStart(r.getStart()); for (com.google.gerrit.extensions.client.ListGroupsOption option : r.getOptions()) { myQueryGroups.addOption(option); } return myQueryGroups.apply(TopLevelResource.INSTANCE); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot query groups"", e); } }",f2b60088844121faaed34d76096c9303fd3ae206,query(com.google.gerrit.server.api.groups.QueryRequest),150198,205,199
148032,java_com_google_gerrit_server_group_db_GroupConfig.java,14.0,"private java.lang.String createCommitMessage(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> originalMembers, java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id>> updatedMembers, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> originalSubgroups, java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubgroups) { java.lang.String summaryLine = (groupCreation.isPresent()) ? ""Create group"" : ""Update group""; java.util.StringJoiner footerJoiner = new java.util.StringJoiner(""\n"", ""\n\n"", """"); footerJoiner.setEmptyValue(""""); getCommitFooterForRename().ifPresent(footerJoiner::add); updatedMembers.ifPresent(( newMembers) -> getCommitFootersForMemberModifications(originalMembers, newMembers).forEach(footerJoiner::add)); updatedSubgroups.ifPresent(( newSubgroups) -> getCommitFootersForSubgroupModifications(originalSubgroups, newSubgroups).forEach(footerJoiner::add)); java.lang.String footer = footerJoiner.toString(); return summaryLine + footer; }",0f4095519dd1e8a4a3de981cd38087957b91b909,"private java.lang.String createCommitMessage(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> originalMembers, java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id>> updatedMembers, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> originalSubgroups, java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubgroups) { java.lang.String summaryLine = (groupCreation.isPresent()) ? ""Create account"" : ""Update account""; java.util.StringJoiner footerJoiner = new java.util.StringJoiner(""\n"", ""\n\n"", """"); footerJoiner.setEmptyValue(""""); getCommitFooterForRename().ifPresent(footerJoiner::add); updatedMembers.ifPresent(( newMembers) -> getCommitFootersForMemberModifications(originalMembers, newMembers).forEach(footerJoiner::add)); updatedSubgroups.ifPresent(( newSubgroups) -> getCommitFootersForSubgroupModifications(originalSubgroups, newSubgroups).forEach(footerJoiner::add)); java.lang.String footer = footerJoiner.toString(); return summaryLine + footer; }",9a4c931f34f180d3f121ab6ca2aca409bfc43cb1,"createCommitMessage(com.google.common.collect.ImmutableSet,java.util.Optional,com.google.common.collect.ImmutableSet,java.util.Optional)","createCommitMessage(com.google.common.collect.ImmutableSet,java.util.Optional,com.google.common.collect.ImmutableSet,java.util.Optional)",17,14,"private java.lang.String createCommitMessage(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> originalMembers, java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id>> updatedMembers, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> originalSubgroups, java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubgroups) { java.lang.String summaryLine = (groupCreation.isPresent()) ? ""Create group"" : ""Update group""; java.util.StringJoiner footerJoiner = new java.util.StringJoiner(""\n"", ""\n\n"", """"); footerJoiner.setEmptyValue(""""); getCommitFooterForRename().ifPresent(footerJoiner::add); updatedMembers.ifPresent(( newMembers) -> getCommitFootersForMemberModifications(originalMembers, newMembers).forEach(footerJoiner::add)); updatedSubgroups.ifPresent(( newSubgroups) -> getCommitFootersForSubgroupModifications(originalSubgroups, newSubgroups).forEach(footerJoiner::add)); java.lang.String footer = footerJoiner.toString(); return summaryLine + footer; }",0f4095519dd1e8a4a3de981cd38087957b91b909,"createCommitMessage(com.google.common.collect.ImmutableSet,java.util.Optional,com.google.common.collect.ImmutableSet,java.util.Optional)",217768,305,305
23526,gerrit-server_src_main_java_com_google_gerrit_rules_PrologModule.java,,,,@java.lang.Override protected void configure() { bind(com.google.gerrit.rules.PrologRules.class); factory(PrologEnvironment.Factory.class); },3fafc243bf0e2e093461d22a72ffc97e1b899b3f,,configure(),4,0,@java.lang.Override protected void configure() { factory(PrologEnvironment.Factory.class); },1c9cf08b607ad48b7541326edeccd99d93a771e1,configure(),129544,37,21
66941,gerrit-server_src_main_java_com_google_gerrit_server_api_projects_ProjectApiImpl.java,1.0,"@java.lang.Override public com.google.gerrit.extensions.api.projects.ProjectApi create(com.google.gerrit.extensions.api.projects.ProjectInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { if ((name) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""Project already exists""); } if (((in.name) != null) && (!(name.equals(in.name)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""name must match input.name""); } createProjectFactory.get().create(name).apply(TopLevelResource.INSTANCE, in); return projectApi.create(projects.parse(name)); } catch (com.google.gerrit.extensions.restapi.BadRequestException | com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.extensions.restapi.ResourceNotFoundException | com.google.gerrit.common.errors.ProjectCreationFailedException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException((""Cannot create project: "" + (e.getMessage())), e); } }",0a47880e3fe010f9ebf0185dd707d1bf1436645f,"@java.lang.Override public com.google.gerrit.extensions.api.projects.ProjectApi create(com.google.gerrit.extensions.api.projects.ProjectInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { if ((name) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""Project already exists""); } if (((in.name) != null) && (!(name.equals(in.name)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""name must match input.name""); } createProjectFactory.get().create(name).apply(TopLevelResource.INSTANCE, in); return projectApi.create(projects.parse(name)); } catch (com.google.gerrit.extensions.restapi.BadRequestException | com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.extensions.restapi.ResourceNotFoundException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.RestApiException((""Cannot create project: "" + (e.getMessage())), e); } }",685a6f1c0485f452a0b4953f92681397a615388b,create(com.google.gerrit.extensions.api.projects.ProjectInput),create(com.google.gerrit.extensions.api.projects.ProjectInput),4,2,"@java.lang.Override public com.google.gerrit.extensions.api.projects.ProjectApi create(com.google.gerrit.extensions.api.projects.ProjectInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { if ((name) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""Project already exists""); } if (((in.name) != null) && (!(name.equals(in.name)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""name must match input.name""); } checkRequiresCapability(user, null, com.google.gerrit.server.project.CreateProject.class); createProjectFactory.get().create(name).apply(TopLevelResource.INSTANCE, in); return projectApi.create(projects.parse(name)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.RestApiException((""Cannot create project: "" + (e.getMessage())), e); } }",73d7791cdfd4ec8d3bd733db24d247c332e3a5a8,create(com.google.gerrit.extensions.api.projects.ProjectInput),94527,275,250
53176,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_EditFileBox.java,,,,@java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); hide(); },8c1d17377dea8966a422596eea30cd324153c39d,,onSuccess(com.google.gerrit.client.VoidResult),48,1,@java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id.getParentKey())); hide(); },06cc1ca47a7c86d2d88386f33d6a1ee074b0debb,onSuccess(com.google.gerrit.client.VoidResult),141832,59,62
68284,src_main_java_com_googlesource_gerrit_plugins_gitiles_Module.java,0.0,@java.lang.Override protected void configure() { bind(GitilesAccess.Factory.class).to(GerritGitilesAccess.Factory.class); bind(new com.google.inject.TypeLiteral<org.eclipse.jgit.transport.resolver.RepositoryResolver<javax.servlet.http.HttpServletRequest>>() {}).to(com.googlesource.gerrit.plugins.gitiles.Resolver.class); listener().to(com.googlesource.gerrit.plugins.gitiles.Module.Lifecycle.class); },a7777ac5dcf8e32a471c92f4959f9499ae3ee4b8,"@java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.BranchWebLink.class).to(com.googlesource.gerrit.plugins.gitiles.GitilesWeblinks.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.FileWebLink.class).to(com.googlesource.gerrit.plugins.gitiles.GitilesWeblinks.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.PatchSetWebLink.class).to(com.googlesource.gerrit.plugins.gitiles.GitilesWeblinks.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.ProjectWebLink.class).to(com.googlesource.gerrit.plugins.gitiles.GitilesWeblinks.class); bind(GitilesAccess.Factory.class).to(GerritGitilesAccess.Factory.class); bind(new com.google.inject.TypeLiteral<org.eclipse.jgit.transport.resolver.RepositoryResolver<javax.servlet.http.HttpServletRequest>>() {}).to(com.googlesource.gerrit.plugins.gitiles.Resolver.class); listener().to(com.googlesource.gerrit.plugins.gitiles.Module.Lifecycle.class); }",7fbd42b18dd3ed238c95392cf1b3d4e6476dcbc1,configure(),configure(),4,0,"@java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.BranchWebLink.class).to(com.googlesource.gerrit.plugins.gitiles.GitilesWeblinks.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.FileHistoryWebLink.class).to(com.googlesource.gerrit.plugins.gitiles.GitilesWeblinks.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.FileWebLink.class).to(com.googlesource.gerrit.plugins.gitiles.GitilesWeblinks.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.PatchSetWebLink.class).to(com.googlesource.gerrit.plugins.gitiles.GitilesWeblinks.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.ProjectWebLink.class).to(com.googlesource.gerrit.plugins.gitiles.GitilesWeblinks.class); bind(GitilesAccess.Factory.class).to(GerritGitilesAccess.Factory.class); bind(new com.google.inject.TypeLiteral<org.eclipse.jgit.transport.resolver.RepositoryResolver<javax.servlet.http.HttpServletRequest>>() {}).to(com.googlesource.gerrit.plugins.gitiles.Resolver.class); listener().to(com.googlesource.gerrit.plugins.gitiles.Module.Lifecycle.class); }",9e3160cd0c2963008b2a536c4386ebb30ee2da76,configure(),77276,356,417
66461,gerrit-httpd_src_main_java_com_google_gerrit_httpd_restapi_RestApiServlet.java,49.0,"private static com.google.gerrit.extensions.restapi.BinaryResult base64(com.google.gerrit.extensions.restapi.BinaryResult bin) throws java.io.IOException { int max = 4 * (com.google.common.math.IntMath.divide(((int) (bin.getContentLength())), 3, java.math.RoundingMode.CEILING)); org.eclipse.jgit.util.TemporaryBuffer.Heap buf = com.google.gerrit.httpd.restapi.RestApiServlet.heap(max); java.io.OutputStream encoded = com.google.common.io.BaseEncoding.base64().encodingStream(new java.io.OutputStreamWriter(buf, java.nio.charset.StandardCharsets.ISO_8859_1)); bin.writeTo(encoded); encoded.close(); return com.google.gerrit.httpd.restapi.RestApiServlet.asBinaryResult(buf); }",98f2c9a0823dd8606d03dab65f90d29c7fd158a5,"private static com.google.gerrit.extensions.restapi.BinaryResult base64(com.google.gerrit.extensions.restapi.BinaryResult bin) throws java.io.IOException { org.eclipse.jgit.util.TemporaryBuffer.Heap buf = com.google.gerrit.httpd.restapi.RestApiServlet.heap(com.google.gerrit.httpd.restapi.RestApiServlet.base64MaxSize(com.google.gerrit.httpd.restapi.RestApiServlet.HEAP_EST_SIZE), com.google.gerrit.httpd.restapi.RestApiServlet.base64MaxSize(bin.getContentLength())); java.io.OutputStream encoded = com.google.common.io.BaseEncoding.base64().encodingStream(new java.io.OutputStreamWriter(buf, java.nio.charset.StandardCharsets.ISO_8859_1)); bin.writeTo(encoded); encoded.close(); return com.google.gerrit.httpd.restapi.RestApiServlet.asBinaryResult(buf); }",eda37c2a9810a20e2a52ca1a3a5584ca5cef3595,base64(com.google.gerrit.extensions.restapi.BinaryResult),base64(com.google.gerrit.extensions.restapi.BinaryResult),3,50,"private static com.google.gerrit.extensions.restapi.BinaryResult base64(com.google.gerrit.extensions.restapi.BinaryResult bin) throws java.io.IOException { int maxSize = com.google.gerrit.httpd.restapi.RestApiServlet.base64MaxSize(bin.getContentLength()); int estSize = java.lang.Math.min(com.google.gerrit.httpd.restapi.RestApiServlet.base64MaxSize(com.google.gerrit.httpd.restapi.RestApiServlet.HEAP_EST_SIZE), maxSize); org.eclipse.jgit.util.TemporaryBuffer.Heap buf = com.google.gerrit.httpd.restapi.RestApiServlet.heap(estSize, maxSize); java.io.OutputStream encoded = com.google.common.io.BaseEncoding.base64().encodingStream(new java.io.OutputStreamWriter(buf, java.nio.charset.StandardCharsets.ISO_8859_1)); bin.writeTo(encoded); encoded.close(); return com.google.gerrit.httpd.restapi.RestApiServlet.asBinaryResult(buf); }",f3a6b19eaa565bd7ecd755f0223a0944906bbb0c,base64(com.google.gerrit.extensions.restapi.BinaryResult),85012,223,246
99292,github-plugin_src_main_java_com_googlesource_gerrit_plugins_github_filters_GitHubOAuthFilter.java,3.0,@java.lang.Override public boolean apply(com.google.gerrit.reviewdb.client.AccountExternalId externalId) { return (externalId.isScheme(AccountExternalId.SCHEME_EXTERNAL)) && (externalId.getSchemeRest().startsWith(OAuthWebFilter.GITHUB_EXT_ID)); },d94850b5179a5034fcb2c42cfb7dd1ac44af8bc6,@java.lang.Override public boolean apply(com.google.gerrit.server.account.ExternalId externalId) { return (externalId.isScheme(AccountExternalId.SCHEME_EXTERNAL)) && (externalId.asAccountExternalId().getSchemeRest().startsWith(OAuthWebFilter.GITHUB_EXT_ID)); },764e32521bd01107c0b7338b8e65fea1cc6dd134,apply(com.google.gerrit.reviewdb.client.AccountExternalId),apply(com.google.gerrit.server.account.ExternalId),3,1,@java.lang.Override public boolean apply(com.google.gerrit.server.account.ExternalId externalId) { return externalId.key().get().startsWith(IdentifiedUserGitHubLoginProvider.EXTERNAL_ID_PREFIX); },b878c28ae0ef5aebf255ccd72592f343141241d1,apply(com.google.gerrit.server.account.ExternalId),70202,70,51
55465,gerrit-server_src_main_java_com_google_gerrit_server_ApprovalsUtil.java,14.0,"public java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> byPatchSet(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet.Id psId) throws com.google.gwtorm.server.OrmException { if (!(migration.readPatchSetApprovals())) { return com.google.gerrit.server.ApprovalsUtil.sortApprovals(db.patchSetApprovals().byPatchSet(psId)); } return notes.load().getApprovals().get(psId); }",84ffd25842e33205d099a90c87a8c583e3a142c5,"public java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> byPatchSet(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet.Id psId) throws com.google.gwtorm.server.OrmException { if (!(migration.readPatchSetApprovals())) { return com.google.gerrit.server.ApprovalsUtil.sortApprovals(db.patchSetApprovals().byPatchSet(psId)); } com.google.common.collect.ImmutableListMultimap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = notes.load().getApprovals(); if (approvals != null) { return approvals.get(psId); } return java.util.Collections.emptyList(); }",d57451c23eeb5944829129152e5f49efe1581163,"byPatchSet(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes,com.google.gerrit.reviewdb.client.PatchSet$Id)","byPatchSet(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes,com.google.gerrit.reviewdb.client.PatchSet$Id)",4,14,"public java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> byPatchSet(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet.Id psId) throws com.google.gwtorm.server.OrmException { if (!(migration.readPatchSetApprovals())) { return com.google.gerrit.server.ApprovalsUtil.sortApprovals(db.patchSetApprovals().byPatchSet(psId)); } return notes.load().getApprovals().get(psId); }",84ffd25842e33205d099a90c87a8c583e3a142c5,"byPatchSet(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes,com.google.gerrit.reviewdb.client.PatchSet$Id)",45419,226,154
76474,gerrit-server_src_main_java_com_google_gerrit_server_account_VersionedAuthorizedKeys.java,,,,"public com.google.gerrit.reviewdb.client.AccountSshKey getKey(int seq) { checkState(((keys) != null), ""SSH keys not loaded yet""); com.google.common.base.Optional<com.google.gerrit.reviewdb.client.AccountSshKey> key = keys.get(seq); return key.isPresent() ? key.get() : null; }",81952b1340bb24f04f60f5a2403a716142a45fb9,,getKey(int),9,16,private com.google.gerrit.reviewdb.client.AccountSshKey getKey(int seq) { checkLoaded(); com.google.common.base.Optional<com.google.gerrit.reviewdb.client.AccountSshKey> key = keys.get((seq - 1)); return key.orNull(); },5a54b9bffdd0000d9770bcb6e77af3ab51ed9a1d,getKey(int),84815,88,71
24054,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,9.0,private void parseDelete(final org.eclipse.jgit.transport.ReceiveCommand cmd) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canDelete()) { } else { com.google.gerrit.server.git.ReceiveCommits.reject(cmd); } },f5240ce604b1be37d3fb4abffcfffb6f8e4205ce,private void parseDelete(final org.eclipse.jgit.transport.ReceiveCommand cmd) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canDelete()) { evictTagCache(cmd); } else { com.google.gerrit.server.git.ReceiveCommits.reject(cmd); } },34ef21c23583cc2ea573b1fae8de9a80e078313c,parseDelete(org.eclipse.jgit.transport.ReceiveCommand),parseDelete(org.eclipse.jgit.transport.ReceiveCommand),4,9,private void parseDelete(final org.eclipse.jgit.transport.ReceiveCommand cmd) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canDelete()) { } else { com.google.gerrit.server.git.ReceiveCommits.reject(cmd); } },f5240ce604b1be37d3fb4abffcfffb6f8e4205ce,parseDelete(org.eclipse.jgit.transport.ReceiveCommand),146433,87,80
25644,src_test_java_com_google_gwtorm_data_PersonAccess.java,4.0,@com.google.gwtorm.client.Query com.google.gwtorm.client.ResultSet<com.google.gwtorm.data.TestPerson> all() throws com.google.gwtorm.client.OrmException;,09cb56f80ed636b4e6e93a623269954d56c25920,@com.google.gwtorm.client.Query com.google.gwtorm.client.ResultSet<com.google.gwtorm.data.Person> all() throws com.google.gwtorm.client.OrmException;,18bdcf82dfa4975bea4659c1ef15cacddc42a454,all(),all(),4,5,@com.google.gwtorm.server.Query com.google.gwtorm.server.ResultSet<com.google.gwtorm.data.Person> all() throws com.google.gwtorm.server.OrmException;,a1878f98b370e4d6822aa6a18f3728d80e8f1111,all(),54675,49,49
163935,gerrit-gpg_src_main_java_com_google_gerrit_gpg_api_GpgKeyApiImpl.java,0.0,"@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { delete.apply(rsrc, new com.google.gerrit.gpg.server.DeleteGpgKey.Input()); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete GPG key"", e); } }",6b9620e311d7695e73e32da16ca18890c32ae92d,"@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { delete.apply(rsrc, new com.google.gerrit.gpg.server.DeleteGpgKey.Input()); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete GPG key"", e); } }",c9a05bd1fe7b66a52bbaad64a930a0383451f9ef,delete(),delete(),3,0,"@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { delete.apply(rsrc, new com.google.gerrit.gpg.server.DeleteGpgKey.Input()); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete GPG key"", e); } }",6b9620e311d7695e73e32da16ca18890c32ae92d,delete(),64344,117,130
35470,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_PatchSetComplexDisclosurePanel.java,45.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void loadedActionPanel(final com.google.gerrit.common.data.PatchSetDetail detail) { if (!(patchSet.getId().equals(diffBaseId))) { actionsPanel = new com.google.gwt.user.client.ui.FlowPanel(); actionsPanel.setStyleName(Gerrit.RESOURCES.css().patchSetActions()); actionsPanel.setVisible(true); if (com.google.gerrit.client.Gerrit.isSignedIn()) { if (changeDetail.canEdit()) { populateReviewAction(); if (changeDetail.isCurrentPatchSet(detail)) { populateActions(detail); } } if (detail.getPatchSet().isDraft()) { if (changeDetail.canPublish()) { populatePublishAction(); } if ((changeDetail.canDeleteDraft()) && ((changeDetail.getPatchSets().size()) > 1)) { populateDeleteDraftPatchSetAction(); } } } populateDiffAllActions(detail); body.add(actionsPanel); } },eb58c941051e6b9ef718820b76a9d45602b9a894,,loadedActionPanel(com.google.gerrit.common.data.PatchSetDetail),2,16,public void loadActionPanel(final com.google.gerrit.common.data.PatchSetDetail detail) { if (!(patchSet.getId().equals(diffBaseId))) { actionsPanel = new com.google.gwt.user.client.ui.FlowPanel(); actionsPanel.setStyleName(Gerrit.RESOURCES.css().patchSetActions()); actionsPanel.setVisible(true); if (com.google.gerrit.client.Gerrit.isSignedIn()) { if (changeDetail.canEdit()) { populateReviewAction(); if (changeDetail.isCurrentPatchSet(detail)) { populateActions(detail); } } if (detail.getPatchSet().isDraft()) { if (changeDetail.canPublish()) { populatePublishAction(); } if ((changeDetail.canDeleteDraft()) && ((changeDetail.getPatchSets().size()) > 1)) { populateDeleteDraftPatchSetAction(); } } } populateDiffAllActions(detail); body.add(actionsPanel); } },b4bd5572f786b44947d6e80384671228860fc1c6,loadActionPanel(com.google.gerrit.common.data.PatchSetDetail),23546,213,213
24173,gerrit-server_src_main_java_gerrit_PRED_commit_delta_4.java,,,,@java.lang.Override public com.googlecode.prolog_cafe.lang.Operation exec(com.googlecode.prolog_cafe.lang.Prolog engine) { return engine.trust(gerrit.PRED_commit_delta_4.commit_delta_modify); },aabc8ddbf3b1fbf290adcf67656a0efe7750690b,,exec(com.googlecode.prolog_cafe.lang.Prolog),3,3,@java.lang.Override public com.googlecode.prolog_cafe.lang.Operation exec(com.googlecode.prolog_cafe.lang.Prolog engine) { return engine.trust(gerrit.PRED_commit_delta_4.commit_delta_empty); },74c77723d786be2de0e93f27a1607dc911a1ecfa,exec(com.googlecode.prolog_cafe.lang.Prolog),182950,64,64
63930,gerrit-server_src_test_java_com_google_gerrit_server_change_ConsistencyCheckerTest.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void patchSetObjectMissingWithFix() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = insertChange(); com.google.gerrit.reviewdb.client.PatchSet ps1 = insertPatchSet(c); incrementPatchSet(c); com.google.gerrit.reviewdb.client.PatchSet ps2 = insertMissingPatchSet(c, ""deadbeefdeadbeefdeadbeefdeadbeefdeadbeef""); com.google.gerrit.extensions.api.changes.FixInput fix = new com.google.gerrit.extensions.api.changes.FixInput(); fix.deletePatchSetIfRefMissing = true; java.util.List<com.google.gerrit.extensions.common.ProblemInfo> problems = checker.check(c, fix).problems(); assertThat(problems).hasSize(1); com.google.gerrit.extensions.common.ProblemInfo p = problems.get(0); assertThat(p.message).isEqualTo(""Object missing: patch set 2: deadbeefdeadbeefdeadbeefdeadbeefdeadbeef""); assertThat(p.status).isEqualTo(ProblemInfo.Status.FIXED); assertThat(p.outcome).isEqualTo(""Deleted patch set""); c = db.changes().get(c.getId()); assertThat(c.currentPatchSetId().get()).isEqualTo(1); assertThat(db.patchSets().get(ps1.getId())).isNotNull(); assertThat(db.patchSets().get(ps2.getId())).isNull(); }",526578054efc70303b5c4c0786d9061b71696319,,patchSetObjectMissingWithFix(),4,13,"@org.junit.Test public void patchSetObjectAndRefMissingWithFix() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = insertChange(); com.google.gerrit.reviewdb.client.PatchSet ps = newPatchSet(c.currentPatchSetId(), org.eclipse.jgit.lib.ObjectId.fromString(""deadbeefdeadbeefdeadbeefdeadbeefdeadbeef""), userId); db.patchSets().insert(java.util.Collections.singleton(ps)); java.lang.String refName = ps.getId().toRefName(); java.util.List<com.google.gerrit.extensions.common.ProblemInfo> problems = checker.check(c, new com.google.gerrit.extensions.api.changes.FixInput()).problems(); com.google.gerrit.extensions.common.ProblemInfo p = problems.get(0); assertThat(p.message).isEqualTo((""Ref missing: "" + refName)); assertThat(p.status).isNull(); }",dcf0eea8bcc008575c0774a8bdcc2c0c375c3309,patchSetObjectAndRefMissingWithFix(),76893,337,230
68386,src_test_java_com_ericsson_gerrit_plugins_eventslog_SQLStoreTest.java,26.0,"@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throws java.lang.Exception { setUpClient(); java.lang.String genericQuery = ""SELECT * FROM "" + (com.ericsson.gerrit.plugins.eventslog.SQLTable.TABLE_NAME); com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.MockEvent mockEvent = new com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.MockEvent(); com.google.gerrit.reviewdb.client.Project.NameKey projectMock = easyMock.createMock(Project.NameKey.class); easyMock.resetAll(); expect(projectMock.get()).andStubReturn("" ""); expect(pcFactoryMock.controlFor(org.easymock.EasyMock.anyObject(Project.NameKey.class), org.easymock.EasyMock.anyObject(com.google.gerrit.server.CurrentUser.class))).andThrow(new java.io.IOException()); easyMock.replayAll(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(genericQuery); assertEquals(0, events.size()); tearDown(); }",a8c2c7ecce853edf8ef5c1e8a22a673f13a58d55,"@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throws java.lang.Exception { setUpClient(); com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.MockEvent mockEvent = new com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.MockEvent(); com.google.gerrit.reviewdb.client.Project.NameKey projectMock = easyMock.createMock(Project.NameKey.class); easyMock.resetAll(); expect(projectMock.get()).andStubReturn("" ""); expect(pcFactoryMock.controlFor(org.easymock.EasyMock.anyObject(Project.NameKey.class), org.easymock.EasyMock.anyObject(com.google.gerrit.server.CurrentUser.class))).andThrow(new java.io.IOException()); easyMock.replayAll(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENERIC_QUERY); assertEquals(0, events.size()); tearDown(); }",ff94c90b3fba46d1a562478dc65acdb9a86b34cf,notReturnEventWithNoVisibilityInfo(),notReturnEventWithNoVisibilityInfo(),2,26,"@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throws java.lang.Exception { setUpClient(); com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.MockEvent mockEvent = new com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.MockEvent(); com.google.gerrit.reviewdb.client.Project.NameKey projectMock = easyMock.createMock(Project.NameKey.class); easyMock.resetAll(); expect(projectMock.get()).andStubReturn("" ""); expect(pcFactoryMock.controlFor(org.easymock.EasyMock.anyObject(Project.NameKey.class), org.easymock.EasyMock.anyObject(com.google.gerrit.server.CurrentUser.class))).andThrow(new java.io.IOException()); easyMock.replayAll(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); tearDown(); }",993648163aad17bb25fb8338d0296ab558b56f7a,notReturnEventWithNoVisibilityInfo(),101442,251,251
148032,java_com_google_gerrit_server_query_change_ChangeQueryBuilder.java,8.0,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData> visibleto(java.lang.String who) throws com.google.gerrit.index.query.QueryParseException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (isSelf(who)) { return is_visible(); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = args.accountResolver.findAll(who); if (!(m.isEmpty())) { java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { return visibleto(args.userFactory.create(id)); } return com.google.gerrit.index.query.Predicate.or(p); } java.util.Collection<com.google.gerrit.common.data.GroupReference> suggestions = args.groupBackend.suggest(who, null); if (!(suggestions.isEmpty())) { java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> ids = new java.util.HashSet<>(); for (com.google.gerrit.common.data.GroupReference ref : suggestions) { ids.add(ref.getUUID()); } return visibleto(new com.google.gerrit.server.query.change.SingleGroupUser(ids)); } throw error(((""No user or group matches \"""" + who) + ""\""."")); }",e135588d87e28ae915cbbacb0bb1900fd9b8f978,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData> visibleto(java.lang.String who) throws com.google.gerrit.index.query.QueryParseException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (isSelf(who)) { return is_visible(); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = args.accountResolver.findAll(who); if (!(m.isEmpty())) { java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { return visibleto(args.userFactory.create(id)); } return com.google.gerrit.index.query.Predicate.or(p); } java.util.Collection<com.google.gerrit.common.data.GroupReference> suggestions = args.groupBackend.suggest(who, null); if (!(suggestions.isEmpty())) { java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> ids = new java.util.HashSet<>(); for (com.google.gerrit.common.data.GroupReference ref : suggestions) { ids.add(ref.getUUID()); } return visibleto(new com.google.gerrit.server.query.change.SingleGroupUser(ids)); } throw error(((""No user or account matches \"""" + who) + ""\""."")); }",fa90f995cb602312b9d52657efe9345498a06f32,visibleto(java.lang.String),visibleto(java.lang.String),17,8,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData> visibleto(java.lang.String who) throws com.google.gerrit.index.query.QueryParseException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (isSelf(who)) { return is_visible(); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = args.accountResolver.findAll(who); if (!(m.isEmpty())) { java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { return visibleto(args.userFactory.create(id)); } return com.google.gerrit.index.query.Predicate.or(p); } java.util.Collection<com.google.gerrit.common.data.GroupReference> suggestions = args.groupBackend.suggest(who, null); if (!(suggestions.isEmpty())) { java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> ids = new java.util.HashSet<>(); for (com.google.gerrit.common.data.GroupReference ref : suggestions) { ids.add(ref.getUUID()); } return visibleto(new com.google.gerrit.server.query.change.SingleGroupUser(ids)); } throw error(((""No user or group matches \"""" + who) + ""\""."")); }",e135588d87e28ae915cbbacb0bb1900fd9b8f978,visibleto(java.lang.String),216565,419,419
15655,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeDescriptionBlock.java,0.0,"public void display(final com.google.gerrit.reviewdb.Change chg, final com.google.gerrit.reviewdb.PatchSetInfo info, final com.google.gerrit.common.data.AccountInfoCache acc) { infoBlock.display(chg, acc); com.google.gwtexpui.safehtml.client.SafeHtml msg = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().append(info.getMessage()); msg = msg.linkify(); msg = com.google.gerrit.client.ui.CommentLinkProcessor.apply(msg); msg = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().openElement(""p"").append(msg).closeElement(""p""); msg = msg.replaceAll(""\n\n"", ""</p><p>""); msg = msg.replaceAll(""\n"", ""<br />""); com.google.gwtexpui.safehtml.client.SafeHtml.set(description, msg); }",44e441bb1e8d1bd3474e9d5a9bd9c88637676e5c,"public void display(final com.google.gerrit.reviewdb.Change chg, final com.google.gerrit.reviewdb.PatchSetInfo info, final com.google.gerrit.common.data.AccountInfoCache acc) { infoBlock.display(chg, acc); messageBlock.display(info); }",83c2e84512d45ebf2e9d2c6ff411a25a0c2e3d4e,"display(com.google.gerrit.reviewdb.Change,com.google.gerrit.reviewdb.PatchSetInfo,com.google.gerrit.common.data.AccountInfoCache)","display(com.google.gerrit.reviewdb.Change,com.google.gerrit.reviewdb.PatchSetInfo,com.google.gerrit.common.data.AccountInfoCache)",3,0,"public void display(final com.google.gerrit.reviewdb.Change chg, final com.google.gerrit.reviewdb.PatchSetInfo info, final com.google.gerrit.common.data.AccountInfoCache acc) { infoBlock.display(chg, acc); messageBlock.display(info.getMessage()); }",6158393e7a0060ca026cd7e3f913c87aab61336d,"display(com.google.gerrit.reviewdb.Change,com.google.gerrit.reviewdb.PatchSetInfo,com.google.gerrit.common.data.AccountInfoCache)",209813,73,75
49159,gerrit-server_src_test_java_com_google_gerrit_server_project_RefControlTest.java,17.0,"public void testInheritRead_SingleBranchDeniesUpload() { grant(parent, com.google.gerrit.server.project.READ, registered, ""refs/*""); grant(parent, com.google.gerrit.server.project.PUSH, registered, ""refs/for/refs/*""); grant(local, com.google.gerrit.server.project.READ, registered, ""refs/heads/foobar""); doNotInherit(local, com.google.gerrit.server.project.READ, ""refs/heads/foobar""); doNotInherit(local, com.google.gerrit.server.project.PUSH, ""refs/for/refs/heads/foobar""); com.google.gerrit.server.project.ProjectControl u = user(); assertTrue(""can upload"", ((u.canPushToAtLeastOneRef()) == (com.google.gerrit.common.data.Capable.OK))); assertTrue(""can upload refs/heads/master"", u.controlForRef(""refs/heads/master"").canUpload()); assertFalse(""deny refs/heads/foobar"", u.controlForRef(""refs/heads/foobar"").canUpload()); }",700618666048b06da78411f3d6477da9155a3ab0,"public void testInheritRead_SingleBranchDeniesUpload() { com.google.gerrit.server.project.Util.grant(util.getParentConfig(), com.google.gerrit.server.project.READ, com.google.gerrit.server.project.Util.REGISTERED, ""refs/*""); com.google.gerrit.server.project.Util.grant(util.getParentConfig(), com.google.gerrit.server.project.PUSH, com.google.gerrit.server.project.Util.REGISTERED, ""refs/for/refs/*""); com.google.gerrit.server.project.Util.grant(local, com.google.gerrit.server.project.READ, com.google.gerrit.server.project.Util.REGISTERED, ""refs/heads/foobar""); doNotInherit(local, com.google.gerrit.server.project.READ, ""refs/heads/foobar""); doNotInherit(local, com.google.gerrit.server.project.PUSH, ""refs/for/refs/heads/foobar""); com.google.gerrit.server.project.ProjectControl u = util.user(local); assertTrue(""can upload"", ((u.canPushToAtLeastOneRef()) == (com.google.gerrit.common.data.Capable.OK))); assertTrue(""can upload refs/heads/master"", u.controlForRef(""refs/heads/master"").canUpload()); assertFalse(""deny refs/heads/foobar"", u.controlForRef(""refs/heads/foobar"").canUpload()); }",4a91dcc7fed6d2153e656c61a539387ff4c69bf0,testInheritRead_SingleBranchDeniesUpload(),testInheritRead_SingleBranchDeniesUpload(),16,15,"public void testInheritRead_SingleBranchDeniesUpload() { com.google.gerrit.server.project.Util.grant(util.getParentConfig(), com.google.gerrit.server.project.READ, com.google.gerrit.server.project.Util.REGISTERED, ""refs/*""); com.google.gerrit.server.project.Util.grant(util.getParentConfig(), com.google.gerrit.server.project.PUSH, com.google.gerrit.server.project.Util.REGISTERED, ""refs/for/refs/*""); com.google.gerrit.server.project.Util.grant(local, com.google.gerrit.server.project.READ, com.google.gerrit.server.project.Util.REGISTERED, ""refs/heads/foobar""); com.google.gerrit.server.project.Util.doNotInherit(local, com.google.gerrit.server.project.READ, ""refs/heads/foobar""); com.google.gerrit.server.project.Util.doNotInherit(local, com.google.gerrit.server.project.PUSH, ""refs/for/refs/heads/foobar""); com.google.gerrit.server.project.ProjectControl u = util.user(local); assertTrue(""can upload"", ((u.canPushToAtLeastOneRef()) == (com.google.gerrit.common.data.Capable.OK))); assertTrue(""can upload refs/heads/master"", u.controlForRef(""refs/heads/master"").canUpload()); assertFalse(""deny refs/heads/foobar"", u.controlForRef(""refs/heads/foobar"").canUpload()); }",259fd0c80512e35301b88b446a50774a496fb7c8,testInheritRead_SingleBranchDeniesUpload(),145433,355,381
170190,javatests_com_google_gerrit_acceptance_edit_ChangeEditIT.java,74.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void editCannotBeCreatedOnAbandonedChange() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).abandon(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format(""change %s is ABANDONED"", change._number)); createArbitraryEditFor(changeId); }",30f677ea4abed5dbf9558082ab1accd6d78140c3,,editCannotBeCreatedOnAbandonedChange(),2,15,"@org.junit.Test public void editCannotBeCreatedOnAbandonedChange() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).abandon(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format(""change %s is abandoned"", change._number)); createArbitraryEditFor(changeId); }",7d6c6f9e5de5220e8aa0b086ae39e2a1b66c97ab,editCannotBeCreatedOnAbandonedChange(),24545,127,124
83372,gerrit-server_src_main_java_com_google_gerrit_server_ApprovalsUtil.java,3.0,"public void addApprovals(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeUpdate update, com.google.gerrit.common.data.LabelTypes labelTypes, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.server.project.ChangeControl changeCtl, java.util.Map<java.lang.String, java.lang.Short> approvals) throws com.google.gwtorm.server.OrmException { if (!(approvals.isEmpty())) { com.google.gerrit.server.ApprovalsUtil.checkApprovals(approvals, changeCtl); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> cells = new java.util.ArrayList<>(approvals.size()); java.util.Date ts = update.getWhen(); for (java.util.Map.Entry<java.lang.String, java.lang.Short> vote : approvals.entrySet()) { com.google.gerrit.common.data.LabelType lt = labelTypes.byLabel(vote.getKey()); cells.add(new com.google.gerrit.reviewdb.client.PatchSetApproval(new com.google.gerrit.reviewdb.client.PatchSetApproval.Key(ps.getId(), ps.getUploader(), lt.getLabelId()), vote.getValue(), ts)); update.putApproval(vote.getKey(), vote.getValue()); } db.patchSetApprovals().insert(cells); } }",a816d6d4ccaef4c15ba2aeab1f882dc3a3067312,"public void addApprovals(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeUpdate update, com.google.gerrit.common.data.LabelTypes labelTypes, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.server.project.ChangeControl changeCtl, java.util.Map<java.lang.String, java.lang.Short> approvals) throws com.google.gwtorm.server.OrmException { java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> cells = makeApprovals(update, labelTypes, ps, changeCtl, approvals); db.patchSetApprovals().insert(cells); }",f706d3af9a2dca282067dcaaaa2b7a395a7c1303,"addApprovals(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeUpdate,com.google.gerrit.common.data.LabelTypes,com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.server.project.ChangeControl,java.util.Map)","addApprovals(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeUpdate,com.google.gerrit.common.data.LabelTypes,com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.server.project.ChangeControl,java.util.Map)",5,2,"public java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> addApprovals(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeUpdate update, com.google.gerrit.common.data.LabelTypes labelTypes, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.server.project.ChangeControl changeCtl, java.util.Map<java.lang.String, java.lang.Short> approvals) throws com.google.gwtorm.server.OrmException { if (approvals.isEmpty()) { return java.util.Collections.emptyList(); } com.google.gerrit.server.ApprovalsUtil.checkApprovals(approvals, changeCtl); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> cells = new java.util.ArrayList<>(approvals.size()); java.util.Date ts = update.getWhen(); for (java.util.Map.Entry<java.lang.String, java.lang.Short> vote : approvals.entrySet()) { com.google.gerrit.common.data.LabelType lt = labelTypes.byLabel(vote.getKey()); cells.add(new com.google.gerrit.reviewdb.client.PatchSetApproval(new com.google.gerrit.reviewdb.client.PatchSetApproval.Key(ps.getId(), ps.getUploader(), lt.getLabelId()), vote.getValue(), ts)); } for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : cells) { update.putApproval(psa.getLabel(), psa.getValue()); } db.patchSetApprovals().insert(cells); return cells; }",18bfbeb1091efdd2a9ec57a3f0ac73f87758ed2d,"addApprovals(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeUpdate,com.google.gerrit.common.data.LabelTypes,com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.server.project.ChangeControl,java.util.Map)",59589,181,421
80051,gerrit-server_src_main_java_com_google_gerrit_server_extensions_events_VoteDeleted.java,,,,"public void fire(com.google.gerrit.extensions.common.ChangeInfo change, com.google.gerrit.extensions.common.RevisionInfo revision, java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ApprovalInfo> approvals, java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ApprovalInfo> oldApprovals, com.google.gerrit.extensions.common.AccountInfo remover, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } com.google.gerrit.server.extensions.events.VoteDeleted.Event event = new com.google.gerrit.server.extensions.events.VoteDeleted.Event(change, revision, approvals, oldApprovals, remover, when); for (com.google.gerrit.extensions.events.VoteDeletedListener l : listeners) { try { l.onVoteRemoved(event); } catch (java.lang.Exception e) { com.google.gerrit.server.extensions.events.VoteDeleted.log.warn(""Error in event listener"", e); } } }",8ffd1ed152a533a49c25f3d9987247cefb5a391e,,"fire(com.google.gerrit.extensions.common.ChangeInfo,com.google.gerrit.extensions.common.RevisionInfo,java.util.Map,java.util.Map,com.google.gerrit.extensions.common.AccountInfo,java.sql.Timestamp)",10,5,"public void fire(com.google.gerrit.extensions.common.ChangeInfo change, com.google.gerrit.extensions.common.RevisionInfo revision, java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ApprovalInfo> approvals, java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ApprovalInfo> oldApprovals, com.google.gerrit.extensions.api.changes.NotifyHandling notify, java.lang.String message, com.google.gerrit.extensions.common.AccountInfo remover, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } com.google.gerrit.server.extensions.events.VoteDeleted.Event event = new com.google.gerrit.server.extensions.events.VoteDeleted.Event(change, revision, approvals, oldApprovals, notify, message, remover, when); for (com.google.gerrit.extensions.events.VoteDeletedListener l : listeners) { try { l.onVoteDeleted(event); } catch (java.lang.Exception e) { com.google.gerrit.server.extensions.events.VoteDeleted.log.warn(""Error in event listener"", e); } } }",3fefffb115236e98494d65295de034c60bfe62d0,"fire(com.google.gerrit.extensions.common.ChangeInfo,com.google.gerrit.extensions.common.RevisionInfo,java.util.Map,java.util.Map,com.google.gerrit.extensions.api.changes.NotifyHandling,java.lang.String,com.google.gerrit.extensions.common.AccountInfo,java.sql.Timestamp)",77331,258,287
75151,gerrit-server_src_main_java_com_google_gerrit_server_notedb_NoteDbUpdateManager.java,,,,"private static void addUpdates(com.google.common.collect.ListMultimap<java.lang.String, ? extends com.google.gerrit.server.notedb.AbstractChangeUpdate> updates, com.google.gerrit.server.notedb.NoteDbUpdateManager.OpenRepo or) throws com.google.gwtorm.server.OrmException, java.io.IOException { for (java.lang.String refName : updates.keySet()) { org.eclipse.jgit.lib.ObjectId old = firstNonNull(or.cmds.getObjectId(or.repo, refName), org.eclipse.jgit.lib.ObjectId.zeroId()); org.eclipse.jgit.lib.ObjectId curr = old; for (com.google.gerrit.server.notedb.AbstractChangeUpdate u : updates.get(refName)) { org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); if (!(curr.equals(org.eclipse.jgit.lib.ObjectId.zeroId()))) { cb.setParentId(curr); } com.google.gerrit.server.notedb.AbstractChangeUpdate.Status r = u.apply(cb, or.ins); switch (r) { case OK : if ((cb.getTreeId()) == null) { if (curr.equals(org.eclipse.jgit.lib.ObjectId.zeroId())) { cb.setTreeId(com.google.gerrit.server.notedb.NoteDbUpdateManager.emptyTree(or)); } else { org.eclipse.jgit.revwalk.RevCommit p = or.rw.parseCommit(curr); cb.setTreeId(p.getTree()); } } curr = or.ins.insert(cb); u.setResult(curr); break; case EMPTY : continue; case DELETE_REF : curr = org.eclipse.jgit.lib.ObjectId.zeroId(); u.setResult(curr); break; default : throw new java.lang.IllegalStateException((""unexpected update result "" + r)); } } if (!(old.equals(curr))) { or.cmds.add(new org.eclipse.jgit.transport.ReceiveCommand(old, curr, refName)); } } }",7e9cdb776123bbf9114d7b872c8b5e1a5617ab58,,"addUpdates(com.google.common.collect.ListMultimap,com.google.gerrit.server.notedb.NoteDbUpdateManager$OpenRepo)",7,1,"private static void addUpdates(com.google.common.collect.ListMultimap<java.lang.String, ? extends com.google.gerrit.server.notedb.AbstractChangeUpdate> updates, com.google.gerrit.server.notedb.NoteDbUpdateManager.OpenRepo or) throws com.google.gwtorm.server.OrmException, java.io.IOException { for (java.lang.String refName : updates.keySet()) { org.eclipse.jgit.lib.ObjectId old = firstNonNull(or.cmds.getObjectId(or.repo, refName), org.eclipse.jgit.lib.ObjectId.zeroId()); org.eclipse.jgit.lib.ObjectId curr = old; for (com.google.gerrit.server.notedb.AbstractChangeUpdate u : updates.get(refName)) { org.eclipse.jgit.lib.ObjectId next = u.apply(or.rw, or.ins, curr); if (next == null) { continue; } curr = next; } if (!(old.equals(curr))) { or.cmds.add(new org.eclipse.jgit.transport.ReceiveCommand(old, curr, refName)); } } }",fd782b690833f99d6df8e37c7c15e2554579e8ba,"addUpdates(com.google.common.collect.ListMultimap,com.google.gerrit.server.notedb.NoteDbUpdateManager$OpenRepo)",175905,493,266
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeActions.java,0.0,"@java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.ChangeActions.setEnabled(true, draftButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); } else { super.onFailure(err); } }",5af75b66e488e8305065877e63fc98627b6d57b8,"@java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.ChangeActions.setEnabled(true, draftButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id, project)); } else { super.onFailure(err); } }",ecc269f9e667bd4fd3b64b61e63afac608385ee0,onFailure(java.lang.Throwable),onFailure(java.lang.Throwable),7,0,"@java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.ChangeActions.setEnabled(true, draftButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, id)); } else { super.onFailure(err); } }",3bb6e2040a506ec4e8877f626cf233b701683547,onFailure(java.lang.Throwable),210272,130,130
76055,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeRebuilderImpl.java,,,,"private void createStarredChangesRefs(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change.Id changeId, com.google.gerrit.server.git.ChainedReceiveCommands allUsersCmds, org.eclipse.jgit.lib.Repository allUsersRepo) throws com.google.gwtorm.server.OrmException, java.io.IOException { org.eclipse.jgit.lib.ObjectId emptyTree = com.google.gerrit.server.notedb.ChangeRebuilderImpl.emptyTree(allUsersRepo); for (com.google.gerrit.reviewdb.client.StarredChange starred : db.starredChanges().byChange(changeId)) { allUsersCmds.add(new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), emptyTree, com.google.gerrit.reviewdb.client.RefNames.refsStarredChanges(starred.getAccountId(), changeId))); } }",3db89e0ec9da53580f6c749954bc6e0553262ee9,,"createStarredChangesRefs(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Change$Id,com.google.gerrit.server.git.ChainedReceiveCommands,org.eclipse.jgit.lib.Repository)",10,32,"private com.google.gerrit.server.notedb.NoteDbChangeState execute(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change.Id changeId, com.google.gerrit.server.notedb.NoteDbUpdateManager manager) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.notedb.NoteDbChangeState result; db.changes().beginTransaction(changeId); try { com.google.gerrit.reviewdb.client.Change change = db.changes().get(changeId); if (change == null) { throw new com.google.gerrit.server.project.NoSuchChangeException(changeId); } result = com.google.gerrit.server.notedb.NoteDbChangeState.applyDelta(change, manager.stage().get(changeId)); checkNotNull(result, ""expected new NoteDbChangeState when rebuilding change %s"", changeId); db.changes().update(java.util.Collections.singleton(change)); db.commit(); } finally { db.rollback(); } manager.execute(); return result; }",6d170931504fd79455a5339e29a36345cf0e941f,"execute(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Change$Id,com.google.gerrit.server.notedb.NoteDbUpdateManager)",138313,238,282
63180,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_change_CommentsIT.java,13.0,"@org.junit.Test public void postComment() throws java.lang.Exception { java.lang.String file = ""file""; java.lang.String contents = ""contents""; com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), ""first subject"", file, contents); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(git, ""refs/for/master""); java.lang.String changeId = r.getChangeId(); java.lang.String revId = r.getCommit().getName(); ReviewInput input = new ReviewInput(); ReviewInput.CommentInput comment = newCommentInfo(file, Side.REVISION, 1, ""comment 1""); input.comments = new java.util.HashMap(); input.comments.put(comment.path, Lists.newArrayList(comment)); revision(r).review(input); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> result = getPublishedComments(changeId, revId); assertThat(result).isNotEmpty(); com.google.gerrit.extensions.common.CommentInfo actual = com.google.common.collect.Iterables.getOnlyElement(result.get(comment.path)); com.google.gerrit.acceptance.server.change.CommentsIT.assertCommentInfo(comment, actual); }",cc004fb17ca8c6d4e7cfd860eac2c7865a921426,"@org.junit.Test public void postComment() throws java.lang.Exception { java.lang.String file = ""file""; java.lang.String contents = ""contents""; com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), ""first subject"", file, contents); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(git, ""refs/for/master""); java.lang.String changeId = r.getChangeId(); java.lang.String revId = r.getCommit().getName(); ReviewInput input = new ReviewInput(); ReviewInput.CommentInput comment = newCommentInfo(file, Side.REVISION, ""comment 1""); input.comments = new java.util.HashMap(); input.comments.put(comment.path, Lists.newArrayList(comment)); revision(r).review(input); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> result = getPublishedComments(changeId, revId); assertThat(result).isNotEmpty(); com.google.gerrit.extensions.common.CommentInfo actual = com.google.common.collect.Iterables.getOnlyElement(result.get(comment.path)); com.google.gerrit.acceptance.server.change.CommentsIT.assertCommentInfo(comment, actual); }",f3ff419c07a5964f99d30dd29b054cef15d24637,postComment(),postComment(),9,13,"@org.junit.Test public void postComment() throws java.lang.Exception { for (java.lang.Integer line : lines) { java.lang.String file = ""file""; java.lang.String contents = ""contents "" + line; com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), ""first subject"", file, contents); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(git, ""refs/for/master""); java.lang.String changeId = r.getChangeId(); java.lang.String revId = r.getCommit().getName(); com.google.gerrit.extensions.api.changes.ReviewInput input = new com.google.gerrit.extensions.api.changes.ReviewInput(); com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput comment = newCommentInfo(file, Side.REVISION, line, ""comment 1""); input.comments = new java.util.HashMap(); input.comments.put(comment.path, com.google.common.collect.Lists.newArrayList(comment)); revision(r).review(input); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> result = getPublishedComments(changeId, revId); assertThat(result).isNotEmpty(); com.google.gerrit.extensions.common.CommentInfo actual = com.google.common.collect.Iterables.getOnlyElement(result.get(comment.path)); com.google.gerrit.acceptance.server.change.CommentsIT.assertCommentInfo(comment, actual); } }",bed6f1c1c97f4470822a7842e2a74070ad22335d,postComment(),84431,315,382
53960,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_project_LabelTypeIT.java,9.0,"private com.google.gerrit.server.change.ChangeJson.ChangeInfo getChange(com.google.gerrit.acceptance.PushOneCommit.Result pr) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = session.get(((""/changes/"" + (pr.getChangeId())) + ""/detail"")); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); return newGson().fromJson(r.getReader(), com.google.gerrit.server.change.ChangeJson.ChangeInfo.class); }",587b16f64d1b58db8ca7e901cf238fe3803cf299,"private com.google.gerrit.server.change.ChangeJson.ChangeInfo getChange(com.google.gerrit.acceptance.PushOneCommit.Result pr) throws java.io.IOException { return getChange(pr.getChangeId(), ListChangesOption.DETAILED_LABELS); }",2b352a7327ce2efae9ce464aec974a8e81f532be,getChange(com.google.gerrit.acceptance.PushOneCommit$Result),getChange(com.google.gerrit.acceptance.PushOneCommit$Result),4,9,"private com.google.gerrit.server.change.ChangeJson.ChangeInfo getChange(com.google.gerrit.acceptance.PushOneCommit.Result pr) throws java.io.IOException { return getChange(pr.getChangeId(), com.google.gerrit.acceptance.server.project.DETAILED_LABELS); }",6a6e66ca6f32dd4487b0a0abb6634906109a0755,getChange(com.google.gerrit.acceptance.PushOneCommit$Result),74184,65,75
56487,gerrit-server_src_main_java_com_google_gerrit_server_plugins_JarPluginProvider.java,,,,"@java.lang.Override public java.lang.String getPluginName(java.io.File srcFile) { try { return com.google.common.base.Objects.firstNonNull(com.google.gerrit.server.plugins.JarPluginProvider.getGerritJarPluginName(srcFile), com.google.gerrit.server.plugins.PluginLoader.nameOf(srcFile)); } catch (java.io.IOException e) { throw new java.lang.IllegalArgumentException(((""Invalid plugin file "" + srcFile) + "": cannot get plugin name""), e); } }",f127ac6cfd30f658c01523b8514ee89124002403,,getPluginName(java.io.File),26,5,"@java.lang.Override public java.lang.String getPluginName(java.io.File srcFile) { try { return com.google.common.base.Objects.firstNonNull(com.google.gerrit.server.plugins.JarPluginProvider.getJarPluginName(srcFile), com.google.gerrit.server.plugins.PluginLoader.nameOf(srcFile)); } catch (java.io.IOException e) { throw new java.lang.IllegalArgumentException(((""Invalid plugin file "" + srcFile) + "": cannot get plugin name""), e); } }",ddaaa10150664606f3173aa023c64fc0f9137108,getPluginName(java.io.File),32671,126,123
74490,gerrit-server_src_main_java_com_google_gerrit_common_ChangeHookRunner.java,36.0,"private com.google.gerrit.server.notedb.ChangeNotes newNotes(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change) { return notesFactory.create(db, change); }",671b82fd987145a4cffb18445f3b50393d00622d,"private com.google.gerrit.server.notedb.ChangeNotes newNotes(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change) throws com.google.gwtorm.server.OrmException { return notesFactory.create(db, change); }",75dfcd2268b82e4aae2f9cb6fcc72be1c8a4ddf9,"newNotes(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Change)","newNotes(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Change)",14,36,"private com.google.gerrit.server.notedb.ChangeNotes newNotes(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change) throws com.google.gwtorm.server.OrmException { return notesFactory.create(db, change.getProject(), change.getId()); }",807bbe71ae292a0558951188c0707e053b51b845,"newNotes(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Change)",18751,76,82
37755,gerrit-server_src_main_java_com_google_gerrit_server_git_CherryPick.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean canCherryPick(final com.google.gerrit.server.git.CodeReviewCommit mergeTip, final com.google.gerrit.server.git.CodeReviewCommit toMerge) throws com.google.gerrit.server.git.MergeException { if (mergeTip == null) { return true; } if ((toMerge.getParentCount()) == 0) { return false; } if ((toMerge.getParentCount()) == 1) { try { final org.eclipse.jgit.merge.ThreeWayMerger m = com.google.gerrit.server.git.MergeUtil.newThreeWayMerger(repo, com.google.gerrit.server.git.MergeUtil.createDryRunInserter(), useContentMerge); m.setBase(toMerge.getParent(0)); return m.merge(mergeTip, toMerge); } catch (java.io.IOException e) { throw new com.google.gerrit.server.git.MergeException((""Cannot merge "" + (toMerge.name())), e); } } return (com.google.gerrit.server.git.MergeUtil.canFastForward(mergeSorter, mergeTip, rw, toMerge)) || (com.google.gerrit.server.git.MergeUtil.canMerge(mergeSorter, repo, useContentMerge, mergeTip, toMerge)); }",4925192e7d3f12748530c25c7f746e971bdb34bf,,"canCherryPick(com.google.gerrit.server.git.CodeReviewCommit,com.google.gerrit.server.git.CodeReviewCommit)",8,8,"private boolean canCherryPick(final com.google.gerrit.server.git.CodeReviewCommit mergeTip, final com.google.gerrit.server.git.CodeReviewCommit toMerge) throws com.google.gerrit.server.git.MergeException { if (mergeTip == null) { return true; } if ((toMerge.getParentCount()) == 0) { return false; } if ((toMerge.getParentCount()) == 1) { try { final org.eclipse.jgit.merge.ThreeWayMerger m = com.google.gerrit.server.git.MergeUtil.newThreeWayMerger(args.repo, com.google.gerrit.server.git.MergeUtil.createDryRunInserter(), args.useContentMerge); m.setBase(toMerge.getParent(0)); return m.merge(mergeTip, toMerge); } catch (java.io.IOException e) { throw new com.google.gerrit.server.git.MergeException((""Cannot merge "" + (toMerge.name())), e); } } return (com.google.gerrit.server.git.MergeUtil.canFastForward(args.mergeSorter, mergeTip, args.rw, toMerge)) || (com.google.gerrit.server.git.MergeUtil.canMerge(args.mergeSorter, args.repo, args.useContentMerge, mergeTip, toMerge)); }",75b09ab44174b1a3e8439e5ee372d2c287872693,"canCherryPick(com.google.gerrit.server.git.CodeReviewCommit,com.google.gerrit.server.git.CodeReviewCommit)",69178,288,302
77316,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_notedb_ChangeRebuilderIT.java,16.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void rebuildAutomaticallyWhenOnlyWritesEnabled() throws java.lang.Exception { notesMigration.setWriteChanges(true); notesMigration.setReadChanges(false); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getPatchSetId().getParentKey(); assertChangeUpToDate(true, id); notesMigration.setAllEnabled(false); gApi.changes().id(id.get()).topic(name(""a-topic"")); setInvalidNoteDbState(id); assertChangeUpToDate(false, id); notesMigration.setWriteChanges(true); assertThat(gApi.changes().id(id.get()).info().topic).isEqualTo(name(""a-topic"")); assertChangeUpToDate(true, id); com.google.gerrit.server.notedb.ChangeNotes notes = notesFactory.create(db, project, id); assertThat(notes.getPatchSets().isEmpty()); notesMigration.setReadChanges(true); com.google.gerrit.server.notedb.ChangeBundle actual = com.google.gerrit.server.notedb.ChangeBundle.fromNotes(plcUtil, notesFactory.create(dbProvider.get(), project, id)); com.google.gerrit.server.notedb.ChangeBundle expected = com.google.gerrit.server.notedb.ChangeBundle.fromReviewDb(unwrapDb(), id); assertThat(actual.differencesFrom(expected)).isEmpty(); }",5c03a742555400a520de7f46d2b3754442eb5f1a,,rebuildAutomaticallyWhenOnlyWritesEnabled(),4,5,"@org.junit.Test public void skipPatchSetsGreaterThanCurrentPatchSet() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change change = r.getChange().change(); com.google.gerrit.reviewdb.client.Change.Id id = change.getId(); com.google.gerrit.reviewdb.client.PatchSet badPs = new com.google.gerrit.reviewdb.client.PatchSet(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, ((change.currentPatchSetId().get()) + 1))); badPs.setCreatedOn(com.google.gerrit.common.TimeUtil.nowTs()); badPs.setUploader(new com.google.gerrit.reviewdb.client.Account.Id(12345)); badPs.setRevision(new com.google.gerrit.reviewdb.client.RevId(""deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"")); db.patchSets().insert(java.util.Collections.singleton(badPs)); indexer.index(db, change.getProject(), id); checker.rebuildAndCheckChanges(id); notesMigration.setAllEnabled(true); com.google.gerrit.server.notedb.ChangeNotes notes = notesFactory.create(db, project, id); assertThat(notes.getPatchSets().keySet()).containsExactly(change.currentPatchSetId()); }",b5ac62825ef92c3b4caed35c5bdd224de1b65c70,skipPatchSetsGreaterThanCurrentPatchSet(),23367,340,349
58707,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotes.java,38.0,"public com.google.gerrit.server.notedb.DraftCommentNotes getDraftComments(com.google.gerrit.reviewdb.client.Account.Id author) throws com.google.gwtorm.server.OrmException { if (((draftCommentNotes) == null) || (!(author.equals(draftCommentNotes.getAuthor())))) { draftCommentNotes = new com.google.gerrit.server.notedb.DraftCommentNotes(repoManager, allUsersRepo, getChange(), author); draftCommentNotes.load(); } return draftCommentNotes; }",7fccd36ca54ed3b884636c92ae6ffeb800a1cea2,"public com.google.gerrit.server.notedb.DraftCommentNotes getDraftComments(com.google.gerrit.reviewdb.client.Account.Id author) throws com.google.gwtorm.server.OrmException { if (((draftCommentNotes) == null) || (!(author.equals(draftCommentNotes.getAuthor())))) { draftCommentNotes = new com.google.gerrit.server.notedb.DraftCommentNotes(repoManager, allUsersRepo, getChangeId(), author); draftCommentNotes.load(); } return draftCommentNotes; }",7406370c231cdd99757916ae549cdeaa6280aece,getDraftComments(com.google.gerrit.reviewdb.client.Account$Id),getDraftComments(com.google.gerrit.reviewdb.client.Account$Id),19,22,"public com.google.common.collect.Table<com.google.gerrit.reviewdb.client.PatchSet.Id, java.lang.String, com.google.gerrit.reviewdb.client.PatchLineComment> getDraftPsComments(com.google.gerrit.reviewdb.client.Account.Id author) throws com.google.gwtorm.server.OrmException { loadDraftComments(author); return draftCommentNotes.getDraftPsComments(); }",b37610e561dcb830237d4af2a71b3188c6c6afbe,getDraftPsComments(com.google.gerrit.reviewdb.client.Account$Id),26489,122,108
65641,gerrit-server_src_main_java_com_google_gerrit_server_git_GarbageCollection.java,5.0,"public com.google.gerrit.common.data.GarbageCollectionResult run(java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> projectNames, java.io.PrintWriter writer) { com.google.gerrit.common.data.GarbageCollectionResult result = new com.google.gerrit.common.data.GarbageCollectionResult(); java.util.Set<com.google.gerrit.reviewdb.client.Project.NameKey> projectsToGc = gcQueue.addAll(projectNames); for (com.google.gerrit.reviewdb.client.Project.NameKey projectName : com.google.common.collect.Sets.difference(com.google.common.collect.Sets.newHashSet(projectNames), projectsToGc)) { result.addError(new com.google.gerrit.common.data.GarbageCollectionResult.Error(GarbageCollectionResult.Error.Type.GC_ALREADY_SCHEDULED, projectName)); } for (com.google.gerrit.reviewdb.client.Project.NameKey p : projectsToGc) { org.eclipse.jgit.lib.Repository repo = null; try { repo = repoManager.openRepository(p); com.google.gerrit.server.git.GarbageCollection.logGcConfiguration(p, repo); com.google.gerrit.server.git.GarbageCollection.print(writer, ((""collecting garbage for \"""" + p) + ""\"":\n"")); org.eclipse.jgit.api.GarbageCollectCommand gc = org.eclipse.jgit.api.Git.wrap(repo).gc(); com.google.gerrit.server.git.GarbageCollection.logGcInfo(p, ""before:"", gc.getStatistics()); gc.setProgressMonitor((writer != null ? new org.eclipse.jgit.lib.TextProgressMonitor(writer) : org.eclipse.jgit.lib.NullProgressMonitor.INSTANCE)); java.util.Properties statistics = gc.call(); com.google.gerrit.server.git.GarbageCollection.logGcInfo(p, ""after: "", statistics); com.google.gerrit.server.git.GarbageCollection.print(writer, ""done.\n\n""); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { com.google.gerrit.server.git.GarbageCollection.logGcError(writer, p, e); result.addError(new com.google.gerrit.common.data.GarbageCollectionResult.Error(GarbageCollectionResult.Error.Type.REPOSITORY_NOT_FOUND, p)); } catch (java.lang.Exception e) { com.google.gerrit.server.git.GarbageCollection.logGcError(writer, p, e); result.addError(new com.google.gerrit.common.data.GarbageCollectionResult.Error(GarbageCollectionResult.Error.Type.GC_FAILED, p)); } finally { if (repo != null) { repo.close(); } gcQueue.gcFinished(p); } } return result; }",f4e6e2ac90e06724ee562ad058216670e52c0b9d,"public com.google.gerrit.common.data.GarbageCollectionResult run(java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> projectNames, java.io.PrintWriter writer) { return run(projectNames, gcConfig.getAggressive(), writer); }",5bed17cc11f28e95a35efb89fc435cd8830e9dda,"run(java.util.List,java.io.PrintWriter)","run(java.util.List,java.io.PrintWriter)",9,6,"public com.google.gerrit.common.data.GarbageCollectionResult run(java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> projectNames, java.io.PrintWriter writer) { return run(projectNames, gcConfig.isAggressive(), writer); }",e88a7b6a0569e4cd80fbe28dd898081a49c5d126,"run(java.util.List,java.io.PrintWriter)",64035,72,72
70420,gitiles-servlet_src_main_java_com_google_gitiles_HostIndexServlet.java,3.0,"private java.util.Map<java.lang.String, com.google.gitiles.RepositoryDescription> getDescriptions(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res, java.util.Set<java.lang.String> branches) throws java.io.IOException { java.util.Map<java.lang.String, com.google.gitiles.RepositoryDescription> descs; try { descs = getAccess(req).listRepositories(branches); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { res.sendError(com.google.gitiles.SC_NOT_FOUND); return null; } catch (org.eclipse.jgit.transport.resolver.ServiceNotEnabledException e) { res.sendError(com.google.gitiles.SC_FORBIDDEN); return null; } catch (org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException e) { res.sendError(com.google.gitiles.SC_UNAUTHORIZED); return null; } catch (org.eclipse.jgit.transport.ServiceMayNotContinueException e) { res.sendError(com.google.gitiles.SC_FORBIDDEN); return null; } catch (java.io.IOException err) { java.lang.String name = urls.getHostName(req); com.google.gitiles.HostIndexServlet.log.warn((""Cannot scan repositories"" + (name != null ? "" for "" + name : """")), err); res.sendError(com.google.gitiles.SC_SERVICE_UNAVAILABLE); return null; } return descs; }",d78ab65ab187421d872fa86d4e4f1593e68757c6,"private java.util.Map<java.lang.String, com.google.gitiles.RepositoryDescription> getDescriptions(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res, java.util.Set<java.lang.String> branches) throws java.io.IOException { java.lang.String prefix = com.google.gitiles.HostIndexServlet.getPrefix(req); java.util.Map<java.lang.String, com.google.gitiles.RepositoryDescription> descs; try { descs = getAccess(req).listRepositories(prefix, branches); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { res.sendError(com.google.gitiles.SC_NOT_FOUND); return null; } catch (org.eclipse.jgit.transport.resolver.ServiceNotEnabledException e) { res.sendError(com.google.gitiles.SC_FORBIDDEN); return null; } catch (org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException e) { res.sendError(com.google.gitiles.SC_UNAUTHORIZED); return null; } catch (org.eclipse.jgit.transport.ServiceMayNotContinueException e) { res.sendError(com.google.gitiles.SC_FORBIDDEN); return null; } catch (java.io.IOException err) { java.lang.String name = urls.getHostName(req); com.google.gitiles.HostIndexServlet.log.warn((""Cannot scan repositories"" + (name != null ? "" for "" + name : """")), err); res.sendError(com.google.gitiles.SC_SERVICE_UNAVAILABLE); return null; } if ((prefix != null) && (descs.isEmpty())) { res.sendError(com.google.gitiles.SC_NOT_FOUND); return null; } return descs; }",174aedd1937da37508b4b4dc62acd0dcdc45e4c2,"getDescriptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Set)","getDescriptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.util.Set)",2,2,"private com.google.template.soy.data.SoyMapData toSoyMapData(com.google.gitiles.RepositoryDescription desc, @javax.annotation.Nullable java.lang.String prefix, com.google.gitiles.GitilesView view) { return new com.google.template.soy.data.SoyMapData(""name"", com.google.gitiles.HostIndexServlet.stripPrefix(prefix, desc.name), ""description"", com.google.common.base.Strings.nullToEmpty(desc.description), ""url"", com.google.gitiles.GitilesView.repositoryIndex().copyFrom(view).setRepositoryName(desc.name).toUrl()); }",758c260d605eaafa2a0eecf11784e1903a5c47e5,"toSoyMapData(com.google.gitiles.RepositoryDescription,java.lang.String,com.google.gitiles.GitilesView)",123099,412,151
46461,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeOp.java,10.0,"private com.google.gerrit.server.git.SubmitStrategy createStrategy(final com.google.gerrit.reviewdb.client.Project.SubmitType submitType) throws com.google.gerrit.server.git.MergeException, com.google.gerrit.server.project.NoSuchProjectException { return submitStrategyFactory.create(submitType, db, repo, rw, inserter, canMergeFlag, getAlreadyAccepted(branchTip), destBranch); }",07656a929894b5c9fbec9c26a92e90935e3c7dc6,"private com.google.gerrit.server.git.SubmitStrategy createStrategy(final com.google.gerrit.reviewdb.client.Project.SubmitType submitType) throws com.google.gerrit.server.git.MergeException, com.google.gerrit.server.project.NoSuchProjectException { return submitStrategyFactory.create(submitType, db, repo, rw, inserter, canMergeFlag, getAlreadyAccepted(branchTip, toMerge.get(submitType)), destBranch); }",f5a7a74b142727437d16d7a9e2334c0aac9342b6,createStrategy(com.google.gerrit.reviewdb.client.Project.SubmitType),createStrategy(com.google.gerrit.reviewdb.client.Project.SubmitType),6,10,"private com.google.gerrit.server.git.SubmitStrategy createStrategy(final com.google.gerrit.reviewdb.client.Project.SubmitType submitType) throws com.google.gerrit.server.git.MergeException, com.google.gerrit.server.project.NoSuchProjectException { return submitStrategyFactory.create(submitType, db, repo, rw, inserter, canMergeFlag, getAlreadyAccepted(branchTip), destBranch); }",07656a929894b5c9fbec9c26a92e90935e3c7dc6,createStrategy(com.google.gerrit.reviewdb.client.Project.SubmitType),33672,111,102
18349,gerrit-server_src_main_java_com_google_gerrit_server_git_PushReplication.java,22.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,java.lang.String getAdminUrl() { return this.adminUrlRemote; },34aca038e5d5cb1050067e81687ca3fbbea3b781,,getAdminUrl(),2,9,java.lang.String[] getAdminUrls() { return this.adminUrls; },13c56fa95ff9c580f54569d8547b4e655b809b3a,getAdminUrls(),79951,18,18
55620,gerrit-server_src_main_java_com_google_gerrit_server_change_MergeabilityChecker.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public com.google.common.util.concurrent.ListenableFuture<java.util.List<java.lang.Object>> apply(java.util.List<com.google.gerrit.reviewdb.client.Change> changes) { java.util.List<com.google.common.util.concurrent.ListenableFuture<?>> result = com.google.common.collect.Lists.newArrayListWithCapacity(changes.size()); for (final com.google.gerrit.reviewdb.client.Change c : changes) { if (reindex) { com.google.common.util.concurrent.ListenableFuture<java.lang.Boolean> b = executor.submit(new com.google.gerrit.server.change.MergeabilityChecker.Task(c, force)); result.add(com.google.common.util.concurrent.Futures.transform(b, new com.google.common.util.concurrent.AsyncFunction<java.lang.Boolean, java.lang.Object>() { @java.lang.SuppressWarnings(""unchecked"") @java.lang.Override public com.google.common.util.concurrent.ListenableFuture<java.lang.Object> apply(java.lang.Boolean indexUpdated) throws java.lang.Exception { if (!indexUpdated) { return ((com.google.common.util.concurrent.ListenableFuture<java.lang.Object>) (indexer.indexAsync(c.getId()))); } return com.google.common.util.concurrent.Futures.immediateFuture(null); } })); } else { result.add(executor.submit(new com.google.gerrit.server.change.MergeabilityChecker.Task(c, force))); } } return com.google.common.util.concurrent.Futures.allAsList(result); }",6361b853b627d96b337be5ac4d20f483e8e3fdbb,,apply(java.util.List),2,11,"@java.lang.Override public com.google.common.util.concurrent.ListenableFuture<java.util.List<java.lang.Object>> apply(java.util.List<com.google.gerrit.reviewdb.client.Change> changes) { java.util.List<com.google.common.util.concurrent.ListenableFuture<?>> result = com.google.common.collect.Lists.newArrayListWithCapacity(changes.size()); for (final com.google.gerrit.reviewdb.client.Change c : changes) { com.google.common.util.concurrent.ListenableFuture<java.lang.Boolean> b = executor.submit(new com.google.gerrit.server.change.MergeabilityChecker.Task(c, force)); if (reindex) { result.add(com.google.common.util.concurrent.Futures.transform(b, new com.google.common.util.concurrent.AsyncFunction<java.lang.Boolean, java.lang.Object>() { @java.lang.SuppressWarnings(""unchecked"") @java.lang.Override public com.google.common.util.concurrent.ListenableFuture<java.lang.Object> apply(java.lang.Boolean indexUpdated) throws java.lang.Exception { if (!indexUpdated) { return ((com.google.common.util.concurrent.ListenableFuture<java.lang.Object>) (indexer.indexAsync(c.getId()))); } return com.google.common.util.concurrent.Futures.immediateFuture(null); } })); } else { result.add(b); } } return com.google.common.util.concurrent.Futures.allAsList(result); }",de7f9dec61c6f68d21cc9e49a24768f5d1c14460,apply(java.util.List),121103,388,364
86577,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_SuggestReviewersIT.java,5.0,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfigs({ @com.google.gerrit.acceptance.GerritConfig(name = ""addreviewer.maxAllowed"", value = ""2""), @com.google.gerrit.acceptance.GerritConfig(name = ""addreviewer.maxWithoutConfirmation"", value = ""1"") }) public void suggestReviewersGroupSizeConsiderations() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup largeGroup = group(""large""); com.google.gerrit.reviewdb.client.AccountGroup mediumGroup = group(""medium""); user(""individual 0"", ""Test0 Last0"", largeGroup, mediumGroup); user(""individual 1"", ""Test1 Last1"", largeGroup); java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.extensions.common.SuggestedReviewerInfo> reviewers; com.google.gerrit.extensions.common.SuggestedReviewerInfo reviewer; reviewers = suggestReviewers(changeId, ""test"", 10); assertThat(reviewers).hasSize(2); reviewer = reviewers.get(0); assertThat(reviewer.count).isEqualTo(1); assertThat(reviewer.confirm).isNull(); reviewers = suggestReviewers(changeId, largeGroup.getName(), 10); assertThat(reviewers).isEmpty(); reviewers = suggestReviewers(changeId, mediumGroup.getName(), 10); assertThat(reviewers).hasSize(1); reviewer = reviewers.get(0); assertThat(reviewer.group.name).isEqualTo(mediumGroup.getName()); assertThat(reviewer.count).isEqualTo(2); assertThat(reviewer.confirm).isTrue(); }",d4ed89414ad036be2da47941d4dadbc27fa8ede8,"@org.junit.Test @com.google.gerrit.acceptance.rest.change.GerritConfigs({ @com.google.gerrit.acceptance.rest.change.GerritConfig(name = ""addreviewer.maxAllowed"", value = ""2""), @com.google.gerrit.acceptance.rest.change.GerritConfig(name = ""addreviewer.maxWithoutConfirmation"", value = ""1"") }) public void suggestReviewersGroupSizeConsiderations() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup largeGroup = group(""large""); com.google.gerrit.reviewdb.client.AccountGroup mediumGroup = group(""medium""); user(""individual 0"", ""Test0 Last0"", largeGroup, mediumGroup); user(""individual 1"", ""Test1 Last1"", largeGroup); java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.extensions.common.SuggestedReviewerInfo> reviewers; com.google.gerrit.extensions.common.SuggestedReviewerInfo reviewer; reviewers = suggestReviewers(changeId, ""test"", 10); assertThat(reviewers).hasSize(2); reviewer = reviewers.get(0); assertThat(reviewer.count).isEqualTo(1); assertThat(reviewer.confirm).isNull(); reviewers = suggestReviewers(changeId, largeGroup.getName(), 10); assertThat(reviewers).isEmpty(); reviewers = suggestReviewers(changeId, mediumGroup.getName(), 10); assertThat(reviewers).hasSize(1); reviewer = reviewers.get(0); assertThat(reviewer.group.name).isEqualTo(mediumGroup.getName()); assertThat(reviewer.count).isEqualTo(2); assertThat(reviewer.confirm).isTrue(); }",abffd7b7fa00a15b59780bbe3a954ae68f774890,suggestReviewersGroupSizeConsiderations(),suggestReviewersGroupSizeConsiderations(),6,5,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfigs({ @com.google.gerrit.acceptance.GerritConfig(name = ""addreviewer.maxAllowed"", value = ""2""), @com.google.gerrit.acceptance.GerritConfig(name = ""addreviewer.maxWithoutConfirmation"", value = ""1"") }) public void suggestReviewersGroupSizeConsiderations() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup largeGroup = group(""large""); com.google.gerrit.reviewdb.client.AccountGroup mediumGroup = group(""medium""); user(""individual 0"", ""Test0 Last0"", largeGroup, mediumGroup); user(""individual 1"", ""Test1 Last1"", largeGroup); java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.extensions.common.SuggestedReviewerInfo> reviewers; com.google.gerrit.extensions.common.SuggestedReviewerInfo reviewer; reviewers = suggestReviewers(changeId, ""test"", 10); assertThat(reviewers).hasSize(2); reviewer = reviewers.get(0); assertThat(reviewer.count).isEqualTo(1); assertThat(reviewer.confirm).isNull(); reviewers = suggestReviewers(changeId, largeGroup.getName(), 10); assertThat(reviewers).isEmpty(); reviewers = suggestReviewers(changeId, mediumGroup.getName(), 10); assertThat(reviewers).hasSize(1); reviewer = reviewers.get(0); assertThat(reviewer.group.name).isEqualTo(mediumGroup.getName()); assertThat(reviewer.count).isEqualTo(2); assertThat(reviewer.confirm).isTrue(); }",d4ed89414ad036be2da47941d4dadbc27fa8ede8,suggestReviewersGroupSizeConsiderations(),82155,388,376
39792,gerrit-server_src_main_java_com_google_gerrit_server_change_ListReviewers.java,,,,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { java.util.List<java.lang.Object> reviewers = new java.util.ArrayList<java.lang.Object>(); com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.get(); com.google.gerrit.reviewdb.client.Change.Id changeId = rsrc.getChange().getId(); for (com.google.gerrit.reviewdb.client.PatchSetApproval patchSetApproval : db.patchSetApprovals().byChange(changeId)) { com.google.gerrit.reviewdb.client.Account account = accountCache.get(patchSetApproval.getAccountId()).getAccount(); reviewers.add(json.format(new com.google.gerrit.server.change.ReviewerResource(rsrc, account))); } return reviewers; }",918aa5fffb0b1dec60e961a1bb9b25dbad7052ec,,apply(com.google.gerrit.server.change.ChangeResource),3,0,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, java.lang.Object> reviewers = com.google.common.collect.Maps.newLinkedHashMap(); com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.get(); com.google.gerrit.reviewdb.client.Change.Id changeId = rsrc.getChange().getId(); for (com.google.gerrit.reviewdb.client.PatchSetApproval patchSetApproval : db.patchSetApprovals().byChange(changeId)) { com.google.gerrit.reviewdb.client.Account.Id accountId = patchSetApproval.getAccountId(); if (!(reviewers.containsKey(accountId))) { com.google.gerrit.reviewdb.client.Account account = accountCache.get(accountId).getAccount(); reviewers.put(accountId, json.format(new com.google.gerrit.server.change.ReviewerResource(rsrc, account))); } } return reviewers.values(); }",e4e422a4bf4f47070210910fa38f351ca24574aa,apply(com.google.gerrit.server.change.ChangeResource),59349,240,293
32431,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_changedetail_RebaseChange.java,,,,"@java.lang.Override public com.google.gerrit.common.data.ChangeDetail call() throws com.google.gerrit.common.errors.NoSuchEntityException, com.google.gerrit.server.mail.EmailException, com.google.gerrit.server.patch.PatchSetInfoNotAvailableException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.client.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { com.google.gerrit.server.ChangeUtil.rebaseChange(patchSetId, currentUser, db, rebasedPatchSetSenderFactory, hooks, gitManager, patchSetInfoFactory, replication, myIdent, changeControlFactory, approvalTypes); return changeDetailFactory.create(patchSetId.getParentKey()).call(); }",e272ee3cbc2c4f6aa3a7e34bdf2db0315e6fe93b,,call(),12,1,"@java.lang.Override public com.google.gerrit.common.data.ChangeDetail call() throws com.google.gerrit.common.errors.NoSuchEntityException, com.google.gerrit.server.mail.EmailException, com.google.gerrit.server.patch.PatchSetInfoNotAvailableException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { com.google.gerrit.server.ChangeUtil.rebaseChange(patchSetId, currentUser, db, rebasedPatchSetSenderFactory, hooks, gitManager, patchSetInfoFactory, replication, myIdent, changeControlFactory, approvalTypes); return changeDetailFactory.create(patchSetId.getParentKey()).call(); }",6c7e7182672a56356c968ab2ef55dc38b5d88a73,call(),13043,202,218
56252,gerrit-server_src_main_java_com_google_gerrit_common_ChangeHookRunner.java,4.0,"public void doPatchsetCreatedHook(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.PatchSet patchSet, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.server.events.PatchSetCreatedEvent event = new com.google.gerrit.server.events.PatchSetCreatedEvent(); final com.google.gerrit.server.account.AccountState uploader = accountCache.get(patchSet.getUploader()); event.change = eventFactory.asChangeAttribute(change); event.patchSet = eventFactory.asPatchSetAttribute(patchSet); event.uploader = eventFactory.asAccountAttribute(uploader.getAccount()); fireEvent(change, event, db); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); addArg(args, ""--change"", event.change.id); addArg(args, ""--is-draft"", (patchSet.isDraft() ? ""true"" : ""false"")); addArg(args, ""--change-url"", event.change.url); addArg(args, ""--project"", event.change.project); addArg(args, ""--branch"", event.change.branch); addArg(args, ""--topic"", event.change.topic); addArg(args, ""--uploader"", getDisplayName(uploader.getAccount())); addArg(args, ""--commit"", event.patchSet.revision); addArg(args, ""--patchset"", event.patchSet.number); runHook(change.getProject(), patchsetCreatedHook, args); }",9fcf79b661487bb7a70fdbe277f7c2dfe4039175,"public void doPatchsetCreatedHook(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.PatchSet patchSet, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.server.events.PatchSetCreatedEvent event = new com.google.gerrit.server.events.PatchSetCreatedEvent(); final com.google.gerrit.server.account.AccountState uploader = accountCache.get(patchSet.getUploader()); event.change = eventFactory.asChangeAttribute(change); event.patchSet = eventFactory.asPatchSetAttribute(patchSet); event.uploader = eventFactory.asAccountAttribute(uploader.getAccount()); fireEvent(change, event, db); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); addArg(args, ""--change"", event.change.id); addArg(args, ""--is-draft"", (patchSet.isDraft() ? ""true"" : ""false"")); addArg(args, ""--change-url"", event.change.url); addArg(args, ""--change-owner"", ((((event.change.owner.name) + "" ("") + (event.change.owner.email)) + "")"")); addArg(args, ""--project"", event.change.project); addArg(args, ""--branch"", event.change.branch); addArg(args, ""--topic"", event.change.topic); addArg(args, ""--uploader"", getDisplayName(uploader.getAccount())); addArg(args, ""--commit"", event.patchSet.revision); addArg(args, ""--patchset"", event.patchSet.number); runHook(change.getProject(), patchsetCreatedHook, args); }",d9f6292ef1d73907d3bf158900bc96a90cc22b05,"doPatchsetCreatedHook(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.reviewdb.server.ReviewDb)","doPatchsetCreatedHook(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.reviewdb.server.ReviewDb)",3,4,"public void doPatchsetCreatedHook(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.PatchSet patchSet, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.server.events.PatchSetCreatedEvent event = new com.google.gerrit.server.events.PatchSetCreatedEvent(); final com.google.gerrit.server.account.AccountState uploader = accountCache.get(patchSet.getUploader()); final com.google.gerrit.server.account.AccountState owner = accountCache.get(change.getOwner()); event.change = eventFactory.asChangeAttribute(change); event.patchSet = eventFactory.asPatchSetAttribute(patchSet); event.uploader = eventFactory.asAccountAttribute(uploader.getAccount()); fireEvent(change, event, db); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); addArg(args, ""--change"", event.change.id); addArg(args, ""--is-draft"", (patchSet.isDraft() ? ""true"" : ""false"")); addArg(args, ""--change-url"", event.change.url); addArg(args, ""--change-owner"", getDisplayName(owner.getAccount())); addArg(args, ""--project"", event.change.project); addArg(args, ""--branch"", event.change.branch); addArg(args, ""--topic"", event.change.topic); addArg(args, ""--uploader"", getDisplayName(uploader.getAccount())); addArg(args, ""--commit"", event.patchSet.revision); addArg(args, ""--patchset"", event.patchSet.number); runHook(change.getProject(), patchsetCreatedHook, args); }",a315c515dac9136764ace745d3788adec08c8e28,"doPatchsetCreatedHook(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.reviewdb.server.ReviewDb)",40212,422,425
70437,gerrit-pgm_src_main_java_com_google_gerrit_pgm_LocalUsernamesToLowerCase.java,3.0,"@java.lang.Override public void run() { final com.google.gerrit.reviewdb.server.ReviewDb db; try { db = database.open(); } catch (com.google.gwtorm.server.OrmException e) { e.printStackTrace(); return; } try { for (; ;) { final com.google.gerrit.reviewdb.client.AccountExternalId extId = next(); if (extId == null) { break; } convertLocalUserToLowerCase(db, extId); synchronized(monitor) { monitor.update(1); } } } finally { db.close(); } }",a3ebed2a367281bda4fac3d6ec0d9baa834005e9,"@java.lang.Override public void run() { try (com.google.gerrit.reviewdb.server.ReviewDb db = database.open()) { for (; ;) { final com.google.gerrit.reviewdb.client.AccountExternalId extId = next(); if (extId == null) { break; } convertLocalUserToLowerCase(db, extId); synchronized(monitor) { monitor.update(1); } } } catch (com.google.gwtorm.server.OrmException e) { e.printStackTrace(); return; } }",6f46a8cbb2ffb1894fdb1b4c286e23879418b124,run(),run(),8,3,"@java.lang.Override public void run() { try (com.google.gerrit.reviewdb.server.ReviewDb db = database.open()) { for (; ;) { final com.google.gerrit.reviewdb.client.AccountExternalId extId = next(); if (extId == null) { break; } convertLocalUserToLowerCase(db, extId); synchronized(monitor) { monitor.update(1); } } } catch (com.google.gwtorm.server.OrmException e) { e.printStackTrace(); } }",2ed0494ca770e37c3ed9a7ff755b210671aef168,run(),93101,123,121
140535,java_com_google_gerrit_server_patchlib_IntraLineDiffArgs.java,7.0,public abstract com.google.gerrit.server.patch.Text bText();,ab827bf893a9852ab5c6b1022a03be85511c2b79,public abstract com.google.gerrit.server.patchlib.Text bText();,dd8eb9f7d67fa6ef0e99cb1d4cc7dbfd5a273e29,bText(),bText(),11,7,public abstract com.google.gerrit.server.diff.Text bText();,df88c5c83a48703e810c016a55c804c574fb3944,bText(),15217,18,17
46154,gerrit-server_src_test_java_com_google_gerrit_server_query_change_IndexRewriteTest.java,,,,"public void testThreeLevelTreeWithSomeIndexPredicates() throws java.lang.Exception { com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> op1 = new com.google.gerrit.server.query.change.IndexRewriteTest.OpPredicate(""o1"", ""o1""); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> f21 = new com.google.gerrit.server.query.change.IndexRewriteTest.FieldPredicate(""f21""); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> f22 = new com.google.gerrit.server.query.change.IndexRewriteTest.FieldPredicate(""f22""); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> n1 = com.google.gerrit.server.query.Predicate.not(op1); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> o2 = com.google.gerrit.server.query.Predicate.or(f21, f22); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> in = com.google.gerrit.server.query.Predicate.and(n1, o2); assertEquals(2, in.getChildCount()); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> out = rewrite.rewrite(in); assertSame(com.google.gerrit.server.query.AndPredicate.class, out.getClass()); assertEquals(com.google.common.collect.ImmutableList.of(n1, wrap(o2)), out.getChildren()); }",ebfd748dd8d41e52af5672955cfaefdf97e4eccb,,testThreeLevelTreeWithSomeIndexPredicates(),4,10,"public void testThreeLevelTreeWithSomeIndexPredicates() throws java.lang.Exception { com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> in = parse(""-branch:a (file:b OR file:c)""); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> out = rewrite(in); assertEquals(com.google.gerrit.server.query.AndPredicate.class, out.getClass()); assertEquals(com.google.common.collect.ImmutableList.of(in.getChild(0), wrap(in.getChild(1))), out.getChildren()); }",a4de48f3af36810f3d5484aa797f69dfd6f2df05,testThreeLevelTreeWithSomeIndexPredicates(),1949,432,152
41851,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeJson.java,17.0,"public java.util.List<java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo>> formatList2(java.util.List<java.util.List<com.google.gerrit.server.query.change.ChangeData>> in) throws com.google.gwtorm.server.OrmException { java.util.List<java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo>> res = com.google.common.collect.Lists.newArrayListWithCapacity(in.size()); for (java.util.List<com.google.gerrit.server.query.change.ChangeData> changes : in) { com.google.gerrit.server.query.change.ChangeData.ensureChangeLoaded(db, changes); com.google.gerrit.server.query.change.ChangeData.ensureCurrentPatchSetLoaded(db, changes); com.google.gerrit.server.query.change.ChangeData.ensureCurrentApprovalsLoaded(db, changes); res.add(toChangeInfo(changes)); } if (!(accounts.isEmpty())) { for (com.google.gerrit.reviewdb.client.Account account : db.get().accounts().get(accounts.keySet())) { com.google.gerrit.server.events.AccountAttribute a = accounts.get(account.getId()); a.name = com.google.common.base.Strings.emptyToNull(account.getFullName()); } } return res; }",dd2f123fc6992eeca4e4f3c60d507092e222aca0,"public java.util.List<java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo>> formatList2(java.util.List<java.util.List<com.google.gerrit.server.query.change.ChangeData>> in) throws com.google.gwtorm.server.OrmException { accountInfoCache = new com.google.gerrit.server.change.AccountInfo.Cache(db, (!(options.contains(com.google.gerrit.server.change.DETAILED_ACCOUNTS)))); java.util.List<java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo>> res = com.google.common.collect.Lists.newArrayListWithCapacity(in.size()); for (java.util.List<com.google.gerrit.server.query.change.ChangeData> changes : in) { com.google.gerrit.server.query.change.ChangeData.ensureChangeLoaded(db, changes); com.google.gerrit.server.query.change.ChangeData.ensureCurrentPatchSetLoaded(db, changes); com.google.gerrit.server.query.change.ChangeData.ensureCurrentApprovalsLoaded(db, changes); res.add(toChangeInfo(changes)); } accountInfoCache.fill(); return res; }",2a77eba66979a6046cfa259f112ce21c4812dcfc,formatList2(java.util.List),formatList2(java.util.List),6,17,"public java.util.List<java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo>> formatList2(java.util.List<java.util.List<com.google.gerrit.server.query.change.ChangeData>> in) throws com.google.gwtorm.server.OrmException { accountLoader = accountLoaderFactory.create(options.contains(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); java.util.List<java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo>> res = com.google.common.collect.Lists.newArrayListWithCapacity(in.size()); for (java.util.List<com.google.gerrit.server.query.change.ChangeData> changes : in) { com.google.gerrit.server.query.change.ChangeData.ensureChangeLoaded(db, changes); com.google.gerrit.server.query.change.ChangeData.ensureCurrentPatchSetLoaded(db, changes); com.google.gerrit.server.query.change.ChangeData.ensureCurrentApprovalsLoaded(db, changes); res.add(toChangeInfo(changes)); } accountLoader.fill(); return res; }",90b75893a5e7a8c33cbe2083c36bc293a88e5a80,formatList2(java.util.List),84423,301,285
160692,src_main_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_IndexAccountRestApiServlet.java,0.0,"@java.lang.Override void index(com.google.gerrit.reviewdb.client.Account.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws java.io.IOException { indexer.index(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.logger.debug(""Account {} successfully indexed"", id); }",cb2afc5e5c3c8bf278f219c8d78e4eb3f59caa7f,"@java.lang.Override void index(com.google.gerrit.reviewdb.client.Account.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws java.io.IOException { indexer.index(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.logger.debug(""Account {} successfully indexed"", id); indexTs.update(""account""); }",9340907252e715080a47c67484fedf53ad9f515e,"index(com.google.gerrit.reviewdb.client.Account$Id,com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation)","index(com.google.gerrit.reviewdb.client.Account$Id,com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation)",19,0,"@java.lang.Override void index(com.google.gerrit.reviewdb.client.Account.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws java.io.IOException { indexer.index(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.logger.debug(""Account {} successfully indexed"", id); updateIndexTs(java.time.LocalDateTime.now()); }",e66980f2d51b2a654f0f1e0d5f4501e48ff8771d,"index(com.google.gerrit.reviewdb.client.Account$Id,com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation)",142748,107,112
60090,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_SuggestReviewersIT.java,13.0,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""suggest.from"", value = ""2"") public void suggestReviewersNoResult3() throws java.io.IOException, java.lang.Exception, org.eclipse.jgit.api.errors.GitAPIException { java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo> reviewers = suggestReviewers(changeId, ""u"", 6); assertEquals(reviewers.size(), 0); }",afdc69e6dc0edcfa1528d969ce0eaab20be300ee,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""suggest.from"", value = ""2"") public void suggestReviewersNoResult3() throws java.io.IOException, java.lang.Exception, org.eclipse.jgit.api.errors.GitAPIException { java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.extensions.common.SuggestedReviewerInfo> reviewers = suggestReviewers(changeId, ""u"", 6); assertEquals(reviewers.size(), 0); }",8818fadfe7b11e688a6ddf42a26c37b73a9a3d55,suggestReviewersNoResult3(),suggestReviewersNoResult3(),5,14,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""suggest.from"", value = ""2"") public void suggestReviewersNoResult3() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.extensions.common.SuggestedReviewerInfo> reviewers = suggestReviewers(changeId, ""u"", 6); assertThat(reviewers).isEmpty(); }",d4453119639199853d4c41232a53c90654bab06c,suggestReviewersNoResult3(),90639,132,110
61604,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_AbstractPatchContentTable.java,13.0,"protected com.google.gerrit.prettify.client.SparseHtmlFile getSparseHtmlFileB(com.google.gerrit.common.data.PatchScript s) { com.google.gerrit.reviewdb.client.AccountDiffPreference dp = new com.google.gerrit.reviewdb.client.AccountDiffPreference(s.getDiffPrefs()); com.google.gerrit.prettify.common.SparseFileContent b = s.getB(); com.google.gerrit.prettify.client.PrettyFormatter f = ClientSideFormatter.FACTORY.get(); f.setDiffPrefs(dp); f.setFileName(b.getPath()); f.setEditFilter(PrettyFormatter.B); f.setEditList(s.getEdits()); if ((s.getA().isWholeFile()) && (!(b.isWholeFile()))) { b = b.apply(s.getA(), s.getEdits()); } f.format(b); return f; }",5b55a663a7a26e5ca9933c04bb2d397abe782a65,"protected com.google.gerrit.prettify.client.SparseHtmlFile getSparseHtmlFileB(com.google.gerrit.common.data.PatchScript s) { com.google.gerrit.extensions.common.DiffPreferencesInfo dp = s.getDiffPrefs(); com.google.gerrit.prettify.common.SparseFileContent b = s.getB(); com.google.gerrit.prettify.client.PrettyFormatter f = ClientSideFormatter.FACTORY.get(); f.setDiffPrefs(dp); f.setFileName(b.getPath()); f.setEditFilter(PrettyFormatter.B); f.setEditList(s.getEdits()); if ((s.getA().isWholeFile()) && (!(b.isWholeFile()))) { b = b.apply(s.getA(), s.getEdits()); } f.format(b); return f; }",97355644e0a21a7fd93391bd56c094837571d4e6,getSparseHtmlFileB(com.google.gerrit.common.data.PatchScript),getSparseHtmlFileB(com.google.gerrit.common.data.PatchScript),40,11,"protected com.google.gerrit.prettify.client.SparseHtmlFile getSparseHtmlFileB(com.google.gerrit.common.data.PatchScript s) { com.google.gerrit.extensions.client.DiffPreferencesInfo dp = s.getDiffPrefs(); com.google.gerrit.prettify.common.SparseFileContent b = s.getB(); com.google.gerrit.prettify.client.PrettyFormatter f = ClientSideFormatter.FACTORY.get(); f.setDiffPrefs(dp); f.setFileName(b.getPath()); f.setEditFilter(PrettyFormatter.B); f.setEditList(s.getEdits()); if ((s.getA().isWholeFile()) && (!(b.isWholeFile()))) { b = b.apply(s.getA(), s.getEdits()); } f.format(b); return f; }",e34afb628dfbaf97c33d10e7348e804047d692e6,getSparseHtmlFileB(com.google.gerrit.common.data.PatchScript),127548,200,200
47849,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_PatchSetComplexDisclosurePanel.java,10.0,"private void populateCommands(final com.google.gerrit.common.data.PatchSetDetail detail) { for (final UiCommandDetail cmd : detail.getCommands()) { final com.google.gwt.user.client.ui.Button b = new com.google.gwt.user.client.ui.Button(); b.setText(cmd.label); b.setEnabled(cmd.enabled); b.setTitle(cmd.title); b.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { if (((cmd.confirmationMessage) != null) && (!(cmd.confirmationMessage.isEmpty()))) { com.google.gerrit.client.ConfirmationDialog confirmationDialog = new com.google.gerrit.client.ConfirmationDialog(cmd.title, new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().append(cmd.confirmationMessage), new com.google.gerrit.client.ConfirmationCallback() { @java.lang.Override public void onOk() { postProcessCommand(cmd, b); } }); confirmationDialog.center(); } else { postProcessCommand(cmd, b); } } private void postProcessCommand(final UiCommandDetail cmd, final com.google.gwt.user.client.ui.Button b) { b.setEnabled(false); com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeString> cb = new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeString>() { @java.lang.Override public void onFailure(java.lang.Throwable caught) { b.setEnabled(true); new com.google.gerrit.client.ErrorDialog(caught).center(); } @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeString msg) { b.setEnabled(true); if ((msg != null) && (!(msg.asString().isEmpty()))) { com.google.gwt.user.client.Window.alert(msg.asString()); } } }; com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(patchSet.getId()).view(cmd.id); if (""PUT"".equalsIgnoreCase(cmd.method)) { api.put(com.google.gwt.core.client.JavaScriptObject.createObject(), cb); } else if (""DELETE"".equalsIgnoreCase(cmd.method)) { api.delete(cb); } else { api.post(com.google.gwt.core.client.JavaScriptObject.createObject(), cb); } } }); actionsPanel.add(b); } }",10d4603f0774be558ab92d3844cf967c2dbd1e9f,"private void populateCommands(final com.google.gerrit.common.data.PatchSetDetail detail) { for (final com.google.gerrit.common.data.UiCommandDetail cmd : detail.getCommands()) { final com.google.gwt.user.client.ui.Button b = new com.google.gwt.user.client.ui.Button(); b.setText(cmd.label); b.setEnabled(cmd.enabled); b.setTitle(cmd.title); b.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { b.setEnabled(false); com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeString> cb = new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeString>() { @java.lang.Override public void onFailure(java.lang.Throwable caught) { b.setEnabled(true); new com.google.gerrit.client.ErrorDialog(caught).center(); } @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeString msg) { b.setEnabled(true); if ((msg != null) && (!(msg.asString().isEmpty()))) { com.google.gwt.user.client.Window.alert(msg.asString()); } } }; com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(patchSet.getId()).view(cmd.id); if (""PUT"".equalsIgnoreCase(cmd.method)) { api.put(com.google.gwt.core.client.JavaScriptObject.createObject(), cb); } else if (""DELETE"".equalsIgnoreCase(cmd.method)) { api.delete(cb); } else { api.post(com.google.gwt.core.client.JavaScriptObject.createObject(), cb); } } }); actionsPanel.add(b); } }",97f02d7284874f174fb6cf27bee793eb44aefdff,populateCommands(com.google.gerrit.common.data.PatchSetDetail),populateCommands(com.google.gerrit.common.data.PatchSetDetail),3,9,"private void populateCommands(final com.google.gerrit.common.data.PatchSetDetail detail) { for (final com.google.gerrit.common.data.UiCommandDetail cmd : detail.getCommands()) { final com.google.gwt.user.client.ui.Button b = new com.google.gwt.user.client.ui.Button(); b.setText(cmd.label); b.setEnabled(cmd.enabled); b.setTitle(cmd.title); b.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { b.setEnabled(false); com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeString> cb = new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeString>() { @java.lang.Override public void onFailure(java.lang.Throwable caught) { b.setEnabled(true); new com.google.gerrit.client.ErrorDialog(caught).center(); } @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeString msg) { b.setEnabled(true); if ((msg != null) && (!(msg.asString().isEmpty()))) { com.google.gwt.user.client.Window.alert(msg.asString()); } com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(patchSet.getId())); } }; com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(patchSet.getId()).view(cmd.id); if (""PUT"".equalsIgnoreCase(cmd.method)) { api.put(com.google.gwt.core.client.JavaScriptObject.createObject(), cb); } else if (""DELETE"".equalsIgnoreCase(cmd.method)) { api.delete(cb); } else { api.post(com.google.gwt.core.client.JavaScriptObject.createObject(), cb); } } }); actionsPanel.add(b); } }",15219d643bc5bcacc73e67a612d51316de633ee2,populateCommands(com.google.gerrit.common.data.PatchSetDetail),212390,465,500
18340,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_CreateProject.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void createEmptyCommit(final org.eclipse.jgit.lib.Repository repo, final com.google.gerrit.reviewdb.Project.NameKey project, final java.lang.String ref) throws java.io.IOException { org.eclipse.jgit.lib.ObjectInserter oi = repo.newObjectInserter(); try { org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(oi.insert(Constants.OBJ_TREE, new byte[]{ })); cb.setCommitter(currentUser.newCommitterIdent()); cb.setAuthor(cb.getCommitter()); cb.setMessage(""Initial empty repository""); org.eclipse.jgit.lib.ObjectId id = oi.insert(cb); oi.flush(); org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(Constants.HEAD); ru.setNewObjectId(id); final org.eclipse.jgit.lib.RefUpdate.Result result = ru.update(); switch (result) { case NEW : rq.scheduleUpdate(project, ref); break; default : { final java.lang.String msg = ((""Cannot create empty commit for "" + (projectName)) + "": "") + (result.name()); com.google.gerrit.sshd.commands.CreateProject.log.error(msg); throw new java.io.IOException(result.name()); } } } catch (java.io.IOException e) { com.google.gerrit.sshd.commands.CreateProject.log.error((""Cannot create empty commit for "" + (projectName)), e); throw e; } finally { oi.release(); } }",121042e7af137fc7627484f64d293d2681c725a2,,"createEmptyCommit(org.eclipse.jgit.lib.Repository,com.google.gerrit.reviewdb.Project$NameKey,java.lang.String)",2,0,"private void createEmptyCommit(final org.eclipse.jgit.lib.Repository repo, final com.google.gerrit.reviewdb.Project.NameKey project, final java.lang.String ref) throws java.io.IOException { org.eclipse.jgit.lib.ObjectInserter oi = repo.newObjectInserter(); try { org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(oi.insert(Constants.OBJ_TREE, new byte[]{ })); cb.setCommitter(serverIdent); cb.setAuthor(cb.getCommitter()); cb.setMessage(""Initial empty repository""); org.eclipse.jgit.lib.ObjectId id = oi.insert(cb); oi.flush(); org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(Constants.HEAD); ru.setNewObjectId(id); final org.eclipse.jgit.lib.RefUpdate.Result result = ru.update(); switch (result) { case NEW : rq.scheduleUpdate(project, ref); break; default : { throw new java.io.IOException(result.name()); } } } catch (java.io.IOException e) { com.google.gerrit.sshd.commands.CreateProject.log.error((""Cannot create empty commit for "" + (projectName)), e); throw e; } finally { oi.release(); } }",f650fbce1d7c46bf40ad3ea3d045ea915985d16d,"createEmptyCommit(org.eclipse.jgit.lib.Repository,com.google.gerrit.reviewdb.Project$NameKey,java.lang.String)",18461,381,325
40563,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_registration_DynamicItemProvider.java,,,,"public com.google.gerrit.extensions.registration.DynamicItem<T> get() { return new com.google.gerrit.extensions.registration.DynamicItem<T>(com.google.gerrit.extensions.registration.DynamicItemProvider.find(injector, type)); }",4a3e2f19a5e2ce350b9a3e3249f544612bedab9d,,get(),3,1,"public com.google.gerrit.extensions.registration.DynamicItem<T> get() { return new com.google.gerrit.extensions.registration.DynamicItem<T>(key, com.google.gerrit.extensions.registration.DynamicItemProvider.find(injector, type), ""gerrit""); }",181668e4d9cc5cdeb8e13497a1dabe24254c9b64,get(),28157,61,67
55205,gitiles-servlet_src_main_java_com_google_gitiles_CommitData.java,,,,"com.google.gitiles.CommitData.Builder setArchiveFormat(com.google.gitiles.ArchiveFormat archiveFormat) { this.archiveFormat = checkNotNull(archiveFormat, ""archiveFormat""); return this; }",705679c2367e791549a035a0c1e477e169c270aa,,setArchiveFormat(com.google.gitiles.ArchiveFormat),3,0,com.google.gitiles.CommitData.Builder setArchiveFormat(@javax.annotation.Nullable com.google.gitiles.ArchiveFormat archiveFormat) { this.archiveFormat = archiveFormat; return this; },998f8d99e9463c14b1b8738ad583cee821c769ff,setArchiveFormat(com.google.gitiles.ArchiveFormat),125185,46,45
59315,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeEdits.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.ChangeResource resource, com.google.gerrit.server.change.ChangeEdits.Post.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(resource.getChange()); if (!(edit.isPresent())) { edit = createEdit(resource.getChange()); } if ((((input != null) && (!(com.google.common.base.Strings.isNullOrEmpty(input.path)))) && ((input.restore) != null)) && (input.restore)) { editModifier.restoreFile(edit.get(), input.path); } return com.google.gerrit.extensions.restapi.Response.none(); }",9925e870f06bd88605fff3d65c649d4b6aaad920,,"apply(com.google.gerrit.server.change.ChangeResource,com.google.gerrit.server.change.ChangeEdits$Post$Input)",7,1,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.ChangeResource resource, com.google.gerrit.server.change.ChangeEdits.Post.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(resource.getChange()); if (!(edit.isPresent())) { edit = createEdit(resource.getChange()); } if ((input != null) && (!(com.google.common.base.Strings.isNullOrEmpty(input.restorePath)))) { editModifier.restoreFile(edit.get(), input.restorePath); } return com.google.gerrit.extensions.restapi.Response.none(); }",97ff1d38017d45aa4b800a1a19cec68e5cce7d69,"apply(com.google.gerrit.server.change.ChangeResource,com.google.gerrit.server.change.ChangeEdits$Post$Input)",163272,256,242
133072,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_AbstractNotificationTest.java,24.0,protected static com.google.gerrit.acceptance.AbstractNotificationTest.FakeEmailSenderSubject assertThat(com.google.gerrit.testutil.FakeEmailSender sender) { return assertAbout(com.google.gerrit.acceptance.AbstractNotificationTest.FAKE_EMAIL_SENDER_SUBJECT_FACTORY).that(sender); },8e5d1be8c66ab9be6b02242c05554da33c06a408,protected static com.google.gerrit.acceptance.AbstractNotificationTest.FakeEmailSenderSubject assertThat(com.google.gerrit.testutil.FakeEmailSender sender) { return assertAbout(com.google.gerrit.acceptance.FAKE_EMAIL_SENDER_SUBJECT_FACTORY).that(sender); },eced6edb955a60a317c42387d7aa1aba4ec430dc,assertThat(com.google.gerrit.testutil.FakeEmailSender),assertThat(com.google.gerrit.testutil.FakeEmailSender),2,24,protected static com.google.gerrit.acceptance.AbstractNotificationTest.FakeEmailSenderSubject assertThat(com.google.gerrit.testutil.FakeEmailSender sender) { return assertAbout(com.google.gerrit.acceptance.AbstractNotificationTest.FakeEmailSenderSubject::new).that(sender); },822b92a4922dddfca4292e97f4f774c186a65d15,assertThat(com.google.gerrit.testutil.FakeEmailSender),82011,69,68
93475,gerrit-lucene_src_main_java_com_google_gerrit_lucene_QueryBuilder.java,4.0,"public org.apache.lucene.search.Query toQuery(com.google.gerrit.server.query.Predicate<V> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.OrPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return fieldQuery(((com.google.gerrit.server.index.IndexPredicate<V>) (p))); } else { throw new com.google.gerrit.server.query.QueryParseException((""cannot create query for index: "" + p)); } }",c473319de6491217af585fa604788d41cb44f671,"public org.apache.lucene.search.Query toQuery(com.google.gerrit.server.query.Predicate<V> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.OrPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return fieldQuery(((com.google.gerrit.server.index.IndexPredicate<V>) (p))); } else if (p instanceof com.google.gerrit.server.query.AnyPredicate) { return new org.apache.lucene.search.MatchAllDocsQuery(); } else { throw new com.google.gerrit.server.query.QueryParseException((""cannot create query for index: "" + p)); } }",1aae9ef31fb03692c0b250b7755508c261f6c92c,toQuery(com.google.gerrit.server.query.Predicate),toQuery(com.google.gerrit.server.query.Predicate),4,4,"public org.apache.lucene.search.Query toQuery(com.google.gerrit.server.query.Predicate<V> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.OrPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return fieldQuery(((com.google.gerrit.server.index.IndexPredicate<V>) (p))); } else if (p instanceof com.google.gerrit.server.query.PostFilterPredicate) { return new org.apache.lucene.search.MatchAllDocsQuery(); } else { throw new com.google.gerrit.server.query.QueryParseException((""cannot create query for index: "" + p)); } }",61b5f9f014937bec8f8a5fa71edb56c53a4b6508,toQuery(com.google.gerrit.server.query.Predicate),139877,234,235
72097,src_main_java_com_googlesource_gerrit_plugins_replication_PushOne.java,18.0,void cancel() { canceled = true; },ad64574f179b1ea6027b8e4869178f9a7cbc5d5e,@java.lang.Override public void cancel() { canceled = true; },ee7023aaeeaceafc50381322c77ab0496063efb3,cancel(),cancel(),11,18,"@java.lang.Override public void cancel() { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.info(""Replication {} was canceled"", getURI()); canceledByReplication(); pool.pushWasCanceled(this); }",0d235ebbaeefc60a672d22faeafc0bcac2b4541d,cancel(),180021,16,52
88514,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsRepositoryResolver.java,0.0,"public org.eclipse.jgit.lfs.server.LargeFileRepository get(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String backendName) throws org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound { com.googlesource.gerrit.plugins.lfs.LfsBackendConfig config = defaultBackend; if (!(com.google.common.base.Strings.isNullOrEmpty(backendName))) { config = backends.get(backendName); if (config == null) { throw new org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound(project.get()); } } switch (config.type) { case FS : return fsRepoFactory.create(config); case S3 : return s3RepoFactory.create(config); default : throw new org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound(project.get()); } }",3091dd7052b25a287da76efbc6c1bf06bcab64ac,"public org.eclipse.jgit.lfs.server.LargeFileRepository get(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String backendName) throws org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound { com.googlesource.gerrit.plugins.lfs.LfsBackendConfig config = defaultBackend; if (!(com.google.common.base.Strings.isNullOrEmpty(backendName))) { config = backends.get(backendName); if (config == null) { throw new org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound(project.get()); } } switch (config.type) { case FS : return fsRepositories.getRepository(config); case S3 : return s3Repositories.getRepository(config); default : throw new org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound(project.get()); } }",d9b187d80f00642edd57560e5ebf7ef4af8099c9,"get(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)","get(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)",7,0,"public org.eclipse.jgit.lfs.server.LargeFileRepository get(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String backendName) throws org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound { com.googlesource.gerrit.plugins.lfs.LfsBackend backend; if (com.google.common.base.Strings.isNullOrEmpty(backendName)) { backend = defaultBackend; } else { backend = backends.get(backendName); if (backend == null) { com.googlesource.gerrit.plugins.lfs.LfsRepositoryResolver.log.error(java.lang.String.format((""Project %s is configured with not existing"" + "" backend %s""), project, (com.google.common.base.Strings.isNullOrEmpty(backendName) ? com.googlesource.gerrit.plugins.lfs.LfsBackend.DEFAULT : backendName))); throw new org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound(project.get()); } } org.eclipse.jgit.lfs.server.LargeFileRepository repository = cache.get(backend); if (repository != null) { return repository; } com.googlesource.gerrit.plugins.lfs.LfsRepositoryResolver.log.error(java.lang.String.format((""Project %s is configured with not existing"" + "" backend %s of type %s""), project, (com.google.common.base.Strings.isNullOrEmpty(backendName) ? com.googlesource.gerrit.plugins.lfs.LfsBackend.DEFAULT : backendName), backend.type)); throw new org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound(project.get()); }",72d9d3b89c0541d3932990712f433eff264d7232,"get(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)",69056,209,394
18454,gerrit-server_src_main_java_com_google_gerrit_server_config_GerritRequestModule.java,0.0,@java.lang.Override protected void configure() { bind(com.google.gerrit.server.RequestCleanup.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.reviewdb.ReviewDb.class).toProvider(com.google.gerrit.server.config.RequestScopedReviewDbProvider.class).in(com.google.inject.servlet.RequestScoped.class); bind(IdentifiedUser.RequestFactory.class).in(com.google.gerrit.server.config.SINGLETON); bind(com.google.gerrit.server.account.AccountResolver.class); bind(com.google.gerrit.server.query.change.ChangeQueryRewriter.class); bind(ChangeControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); bind(GroupControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); bind(ProjectControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); factory(ChangeQueryBuilder.Factory.class); factory(ReceiveCommits.Factory.class); factory(MergeOp.Factory.class); factory(AddReviewerSender.Factory.class); factory(CreateChangeSender.Factory.class); factory(PublishComments.Factory.class); factory(ReplacePatchSetSender.Factory.class); factory(AbandonedSender.Factory.class); factory(CommentSender.Factory.class); factory(MergedSender.Factory.class); factory(MergeFailSender.Factory.class); factory(RegisterNewEmailSender.Factory.class); },ecb218368a7a1205cc9663413d2c4d5bbb3e0703,@java.lang.Override protected void configure() { bind(com.google.gerrit.server.RequestCleanup.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.reviewdb.ReviewDb.class).toProvider(com.google.gerrit.server.config.RequestScopedReviewDbProvider.class).in(com.google.inject.servlet.RequestScoped.class); bind(IdentifiedUser.RequestFactory.class).in(com.google.gerrit.server.config.SINGLETON); bind(com.google.gerrit.server.account.AccountResolver.class); bind(com.google.gerrit.server.query.change.ChangeQueryRewriter.class); bind(ChangeControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); bind(GroupControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); bind(ProjectControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); factory(ChangeQueryBuilder.Factory.class); factory(ReceiveCommits.Factory.class); factory(MergeOp.Factory.class); factory(AddReviewerSender.Factory.class); factory(CreateChangeSender.Factory.class); factory(PublishComments.Factory.class); factory(ReplacePatchSetSender.Factory.class); factory(AbandonedSender.Factory.class); factory(CommentSender.Factory.class); factory(MergedSender.Factory.class); factory(MergeFailSender.Factory.class); factory(RegisterNewEmailSender.Factory.class); factory(PerformUpdateParentsImpl.Factory.class); },3527f304d5440e75b42d0404730a5b2e2a7f4527,configure(),configure(),14,0,@java.lang.Override protected void configure() { bind(com.google.gerrit.server.RequestCleanup.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.server.config.RequestScopedReviewDbProvider.class); bind(IdentifiedUser.RequestFactory.class).in(com.google.gerrit.server.config.SINGLETON); bind(com.google.gerrit.server.project.PerRequestProjectControlCache.class).in(com.google.inject.servlet.RequestScoped.class); bind(ChangeControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); bind(ProjectControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); factory(SubmoduleOp.Factory.class); factory(MergeOp.Factory.class); factory(DeleteDraftPatchSet.Factory.class); factory(PublishDraft.Factory.class); factory(RemoveReviewer.Factory.class); factory(SuggestParentCandidates.Factory.class); factory(BanCommit.Factory.class); },9ce362825d294cc7694464418337a2a56da38d21,configure(),29654,363,239
77736,src_main_java_com_ericsson_gerrit_plugins_syncindex_SyncIndexRestApiServlet.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void index(com.google.gerrit.reviewdb.client.Change.Id id, java.lang.String operation) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.concurrent.atomic.AtomicInteger changeIdLock = getAndIncrementChangeIdLock(id); synchronized(changeIdLock) { if (""index"".equals(operation)) { try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { com.google.gerrit.reviewdb.client.Change change = db.changes().get(id); if (change == null) { throw new com.google.gerrit.server.project.NoSuchChangeException(id); } indexer.index(db, change); } com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServlet.logger.debug(""Change {} successfully indexed"", id); } else if (""delete"".equals(operation)) { indexer.delete(id); com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServlet.logger.debug(""Change {} successfully deleted from index"", id); } } if ((changeIdLock.decrementAndGet()) == 0) { removeChangeIdLock(id); } }",6a90fe82e1e3bd6756e06946b56e522d7e8b9065,,"index(com.google.gerrit.reviewdb.client.Change$Id,java.lang.String)",3,3,"private void index(com.google.gerrit.reviewdb.client.Change.Id id, java.lang.String operation) throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.concurrent.atomic.AtomicInteger changeIdLock = getAndIncrementChangeIdLock(id); synchronized(changeIdLock) { if (""index"".equals(operation)) { try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { com.google.gerrit.reviewdb.client.Change change = db.changes().get(id); if (change == null) { indexer.delete(id); return; } indexer.index(db, change); } com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServlet.logger.debug(""Change {} successfully indexed"", id); } if (""delete"".equals(operation)) { indexer.delete(id); com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServlet.logger.debug(""Change {} successfully deleted from index"", id); } } if ((changeIdLock.decrementAndGet()) == 0) { removeChangeIdLock(id); } }",f09016a18230461d9c97df1ccd77fdac6feb5d5b,"index(com.google.gerrit.reviewdb.client.Change$Id,java.lang.String)",84622,295,269
74211,gerrit-server_src_test_java_com_google_gerrit_server_notedb_ChangeNotesTest.java,33.0,"@org.junit.Test public void patchSetChangeNotes() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.commit(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); assertThat(notes.getCurrentPatchSet()).isNull(); org.eclipse.jgit.lib.ObjectId commit = org.eclipse.jgit.lib.ObjectId.fromString(""deadbeefdeadbeefdeadbeefdeadbeefdeadbeef""); update = newUpdate(c, changeOwner); update.setCommit(commit); update.commit(); notes = newNotes(c); com.google.gerrit.reviewdb.client.PatchSet ps = notes.getCurrentPatchSet(); assertThat(ps.getId()).isEqualTo(new com.google.gerrit.reviewdb.client.PatchSet.Id(c.getId(), 1)); assertThat(notes.getChange().currentPatchSetId()).isEqualTo(ps.getId()); assertThat(ps.getRevision().get()).isEqualTo(commit.name()); assertThat(ps.getUploader()).isEqualTo(changeOwner.getAccountId()); assertThat(ps.getCreatedOn()).isEqualTo(update.getWhen()); incrementPatchSet(c); commit = org.eclipse.jgit.lib.ObjectId.fromString(""badc0feebadc0feebadc0feebadc0feebadc0fee""); update = newUpdate(c, otherUser); update.setCommit(commit); update.commit(); notes = newNotes(c); ps = notes.getCurrentPatchSet(); assertThat(ps.getId()).isEqualTo(new com.google.gerrit.reviewdb.client.PatchSet.Id(c.getId(), 2)); assertThat(notes.getChange().currentPatchSetId()).isEqualTo(ps.getId()); assertThat(ps.getRevision().get()).isEqualTo(commit.name()); assertThat(ps.getUploader()).isEqualTo(otherUser.getAccountId()); assertThat(ps.getCreatedOn()).isEqualTo(update.getWhen()); }",f4c9eb129d96d9b1e70d1ca0780d02204816de75,"@org.junit.Test public void patchSetChangeNotes() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); org.eclipse.jgit.revwalk.RevCommit commit = tr.commit().message(""PS1"").create(); update = newUpdate(c, changeOwner); update.setCommit(rw, commit); update.commit(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); com.google.gerrit.reviewdb.client.PatchSet ps = notes.getCurrentPatchSet(); assertThat(notes.getChange().currentPatchSetId()).isEqualTo(ps.getId()); assertThat(notes.getChange().getSubject()).isEqualTo(""PS1""); assertThat(notes.getChange().getOriginalSubject()).isEqualTo(""PS1""); assertThat(ps.getId()).isEqualTo(new com.google.gerrit.reviewdb.client.PatchSet.Id(c.getId(), 1)); assertThat(ps.getRevision().get()).isEqualTo(commit.name()); assertThat(ps.getUploader()).isEqualTo(changeOwner.getAccountId()); assertThat(ps.getCreatedOn()).isEqualTo(update.getWhen()); incrementPatchSet(c); commit = tr.commit().message(""PS2"").create(); update = newUpdate(c, otherUser); update.setCommit(rw, commit); update.commit(); notes = newNotes(c); ps = notes.getCurrentPatchSet(); assertThat(ps.getId()).isEqualTo(new com.google.gerrit.reviewdb.client.PatchSet.Id(c.getId(), 2)); assertThat(notes.getChange().getSubject()).isEqualTo(""PS2""); assertThat(notes.getChange().getOriginalSubject()).isEqualTo(""PS1""); assertThat(notes.getChange().currentPatchSetId()).isEqualTo(ps.getId()); assertThat(ps.getRevision().get()).isEqualTo(commit.name()); assertThat(ps.getUploader()).isEqualTo(otherUser.getAccountId()); assertThat(ps.getCreatedOn()).isEqualTo(update.getWhen()); }",0c4c8bb71dac43a59c4e3847ed36a8b554acbda2,patchSetChangeNotes(),patchSetChangeNotes(),10,33,"@org.junit.Test public void patchSetChangeNotes() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); com.google.gerrit.reviewdb.client.PatchSet ps1 = notes.getCurrentPatchSet(); assertThat(notes.getChange().currentPatchSetId()).isEqualTo(ps1.getId()); assertThat(notes.getChange().getSubject()).isEqualTo(""Change subject""); assertThat(notes.getChange().getOriginalSubject()).isEqualTo(""Change subject""); assertThat(ps1.getId()).isEqualTo(new com.google.gerrit.reviewdb.client.PatchSet.Id(c.getId(), 1)); assertThat(ps1.getUploader()).isEqualTo(changeOwner.getAccountId()); incrementPatchSet(c); org.eclipse.jgit.revwalk.RevCommit commit = tr.commit().message(""PS2"").create(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, otherUser); update.setCommit(rw, commit); update.commit(); notes = newNotes(c); com.google.gerrit.reviewdb.client.PatchSet ps2 = notes.getCurrentPatchSet(); assertThat(ps2.getId()).isEqualTo(new com.google.gerrit.reviewdb.client.PatchSet.Id(c.getId(), 2)); assertThat(notes.getChange().getSubject()).isEqualTo(""PS2""); assertThat(notes.getChange().getOriginalSubject()).isEqualTo(""Change subject""); assertThat(notes.getChange().currentPatchSetId()).isEqualTo(ps2.getId()); assertThat(ps2.getRevision().get()).isNotEqualTo(ps1.getRevision()); assertThat(ps2.getRevision().get()).isEqualTo(commit.name()); assertThat(ps2.getUploader()).isEqualTo(otherUser.getAccountId()); assertThat(ps2.getCreatedOn()).isEqualTo(update.getWhen()); }",8cc33b1df7ea9ada4030daa699b4a27f1daced88,patchSetChangeNotes(),96408,467,427
16380,gerrit-server_src_main_java_com_google_gerrit_server_cache_Cache.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.util.Map<K, V> getAll(java.lang.Iterable<? extends K> keys);",78ce89a2c8700f71bc9674ec35f8b3eafbdead7f,,getAll(java.lang.Iterable),2,3,"public java.util.Map<K, V> getAll(java.lang.Iterable<K> keys);",f14ce25363d87460638fe207f975b4c587819df4,getAll(java.lang.Iterable),20702,24,23
148032,java_com_google_gerrit_server_restapi_project_DeleteRef.java,5.0,"private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, identifiedUser.get().getAccount()); }",5d44b0cac8f96c6dc663d300ecf9ec9bbb80091b,"private void postDeletion(com.google.gerrit.server.restapi.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, identifiedUser.get().getAccount()); }",f36643478badd87769fe4398366257eea7cea9ad,"postDeletion(com.google.gerrit.server.project.ProjectResource,org.eclipse.jgit.transport.ReceiveCommand)","postDeletion(com.google.gerrit.server.restapi.project.ProjectResource,org.eclipse.jgit.transport.ReceiveCommand)",17,6,"private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, identifiedUser.get().getAccount()); }",5d44b0cac8f96c6dc663d300ecf9ec9bbb80091b,"postDeletion(com.google.gerrit.server.project.ProjectResource,org.eclipse.jgit.transport.ReceiveCommand)",216323,57,54
101315,gerrit-server_src_main_java_com_google_gerrit_server_account_externalids_ExternalIdCacheImpl.java,1.0,"@java.lang.Override public void onReplaceByKeys(org.eclipse.jgit.lib.ObjectId newNotesRev, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toRemove, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws java.io.IOException { updateCache(newNotesRev, ( m) -> { com.google.common.collect.Collections2.transform(m.values(), ( e) -> e.key()).removeAll(toRemove); for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { m.put(extId.accountId(), extId); } }); }",376bd6ca3c0f569f3d628054135891292395f7cb,"@java.lang.Override public void onReplaceByKeys(org.eclipse.jgit.lib.ObjectId oldNotesRev, org.eclipse.jgit.lib.ObjectId newNotesRev, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toRemove, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws java.io.IOException { updateCache(oldNotesRev, newNotesRev, ( m) -> { com.google.common.collect.Collections2.transform(m.values(), ( e) -> e.key()).removeAll(toRemove); for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { m.put(extId.accountId(), extId); } }); }",dffe778de3cfa11c42c872984a4aed011f63b05b,"onReplaceByKeys(org.eclipse.jgit.lib.ObjectId,java.util.Collection,java.util.Collection)","onReplaceByKeys(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId,java.util.Collection,java.util.Collection)",2,3,"@java.lang.Override public void onReplaceByKeys(org.eclipse.jgit.lib.ObjectId oldNotesRev, org.eclipse.jgit.lib.ObjectId newNotesRev, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toRemove, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws java.io.IOException { updateCache(oldNotesRev, newNotesRev, ( m) -> { removeKeys(m.values(), toRemove); for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { m.put(extId.accountId(), extId); } }); }",1006d140eb68363c7c7452f939e5e7b848ac83c7,"onReplaceByKeys(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId,java.util.Collection,java.util.Collection)",151203,189,169
89038,src_main_java_com_googlesource_gerrit_plugins_kafka_session_type_KafkaSession.java,1.0,"@java.lang.Override public void connect() { if (isOpen()) { com.googlesource.gerrit.plugins.kafka.session.type.KafkaSession.LOGGER.debug(""Already connected.""); return; } com.googlesource.gerrit.plugins.kafka.session.type.KafkaSession.LOGGER.info(""Connect to {}..."", properties.getProperty(""bootstrap.servers"")); producer = new org.apache.kafka.clients.producer.KafkaProducer(properties); com.googlesource.gerrit.plugins.kafka.session.type.KafkaSession.LOGGER.info(""Connection established.""); }",7a4c93bf8e6d75eb5f8dcdf3b06617ac002f371e,"@java.lang.Override public void connect() { if (isOpen()) { com.googlesource.gerrit.plugins.kafka.session.type.KafkaSession.LOGGER.debug(""Already connected.""); return; } com.googlesource.gerrit.plugins.kafka.session.type.KafkaSession.LOGGER.info(""Connect to {}..."", properties.getProperty(""bootstrap.servers"")); java.lang.Thread.currentThread().setContextClassLoader(null); producer = new org.apache.kafka.clients.producer.KafkaProducer(properties); com.googlesource.gerrit.plugins.kafka.session.type.KafkaSession.LOGGER.info(""Connection established.""); }",dab0999fa147cbb3dff0880271d5acdf317d7aea,connect(),connect(),2,2,"@java.lang.Override public void connect() { if (isOpen()) { com.googlesource.gerrit.plugins.kafka.session.type.KafkaSession.LOGGER.debug(""Already connected.""); return; } com.googlesource.gerrit.plugins.kafka.session.type.KafkaSession.LOGGER.info(""Connect to {}..."", properties.getProperty(""bootstrap.servers"")); setConnectionClassLoader(); producer = new org.apache.kafka.clients.producer.KafkaProducer(properties); com.googlesource.gerrit.plugins.kafka.session.type.KafkaSession.LOGGER.info(""Connection established.""); }",5550ff9e8cbe8b538e5ed0ceb0494ba1d4acc28e,connect(),163473,139,130
49431,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_PatchSetComplexDisclosurePanel.java,33.0,"@java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { b.setEnabled(false); new com.google.gerrit.client.ui.CherryPickDialog(b, changeDetail.getChange().getProject()) { { sendButton.setText(Util.C.buttonCherryPickChangeSend()); message.setText(Util.M.cherryPickedChangeDefaultMessage(detail.getInfo().getMessage().trim(), detail.getPatchSet().getRevision().get())); } @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.cherrypick(changeDetail.getChange().getChangeId(), patchSet.getRevision().get(), getDestinationBranch(), getMessageText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeInfo result) { sent = true; com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(new com.google.gerrit.reviewdb.client.Change.Id(result._number()))); hide(); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } }.center(); }",bf9af7394e13e4c80fa96f0eb774c3f6d5db4f25,"@java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { b.setEnabled(false); new com.google.gerrit.client.ui.CherryPickDialog(b, changeDetail.getChange().getProject()) { { sendButton.setText(Util.C.buttonCherryPickChangeSend()); if (changeDetail.getChange().getStatus().isClosed()) { java.lang.String cm = detail.getInfo().getMessage().trim(); java.lang.String cmWithoutChangeId = cm.substring(0, cm.lastIndexOf(""Change-Id"")); java.lang.String cmChangeId = cm.substring(cm.lastIndexOf(""Change-Id"")); message.setText(Util.M.cherryPickedChangeDefaultMessage(cmWithoutChangeId, detail.getPatchSet().getRevision().get(), cmChangeId)); } else { message.setText(detail.getInfo().getMessage().trim()); } } @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.cherrypick(changeDetail.getChange().getChangeId(), patchSet.getRevision().get(), getDestinationBranch(), getMessageText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeInfo result) { sent = true; com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(new com.google.gerrit.reviewdb.client.Change.Id(result._number()))); hide(); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } }.center(); }",242a5fc6ae7c85b26e2878dec64bb64fc7ad1e96,onClick(com.google.gwt.event.dom.client.ClickEvent),onClick(com.google.gwt.event.dom.client.ClickEvent),13,34,"@java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { b.setEnabled(false); new com.google.gerrit.client.ui.CherryPickDialog(b, changeDetail.getChange().getProject()) { { sendButton.setText(Util.C.buttonCherryPickChangeSend()); if (changeDetail.getChange().getStatus().isClosed()) { message.setText(Util.M.cherryPickedChangeDefaultMessage(detail.getInfo().getMessage().trim(), detail.getPatchSet().getRevision().get())); } else { message.setText(detail.getInfo().getMessage().trim()); } } @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.cherrypick(changeDetail.getChange().getChangeId(), patchSet.getRevision().get(), getDestinationBranch(), getMessageText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeInfo result) { sent = true; com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(new com.google.gerrit.reviewdb.client.Change.Id(result._number()))); hide(); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } }.center(); }",9fabdcd4daba4496916be1ee905c29f64fe90726,onClick(com.google.gwt.event.dom.client.ClickEvent),1334,412,353
67776,gerrit-gwtui_src_main_java_com_google_gerrit_client_config_DownloadInfo.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private final native com.google.gwt.core.client.JsArray<com.google.gerrit.client.config.DownloadInfo.ArchiveFormatInfo> _archives();,9d42afc2a176a01f07d5d4f4135506066e1d8a9e,,_archives(),10,11,private final native com.google.gwt.core.client.JsArrayString _archives();,4497a61e6184ab4a331c1053af28fe06173ed29f,_archives(),134189,39,21
17791,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_changedetail_PatchSetPublishDetailFactory.java,1.0,"private void computeAllowed() { final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> am = user.getEffectiveGroups(); final com.google.gerrit.server.project.ProjectState pe = projectCache.get(change.getProject()); for (com.google.gerrit.reviewdb.ApprovalCategory.Id category : approvalTypes.getApprovalCategories()) { com.google.gerrit.server.project.RefControl rc = pe.controlFor(user).controlForRef(change.getDest()); java.util.List<com.google.gerrit.reviewdb.RefRight> categoryRights = rc.getApplicableRights(category); computeAllowed(am, categoryRights, category); } }",5e806cb947040d50967ee0c1cf9404e88fe9acb2,"private void computeAllowed() { final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> am = user.getEffectiveGroups(); final com.google.gerrit.server.project.ProjectState pe = projectCache.get(change.getProject()); final com.google.gerrit.server.project.RefControl rc = pe.controlFor(user).controlForRef(change.getDest()); final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> ownerGroups = getOwnerGroups(rc); for (com.google.gerrit.reviewdb.ApprovalCategory.Id category : approvalTypes.getApprovalCategories()) { final java.util.List<com.google.gerrit.reviewdb.RefRight> categoryRights = rc.getApplicableRights(category); computeAllowed(am, resolveOwnerGroups(categoryRights, ownerGroups), category); } }",4857f6a15b468578b6ed12fc987359e2b2fd5543,computeAllowed(),computeAllowed(),3,1,"private void computeAllowed() { final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> am = user.getEffectiveGroups(); final com.google.gerrit.server.project.ProjectState pe = projectCache.get(change.getProject()); for (com.google.gerrit.reviewdb.ApprovalCategory.Id category : approvalTypes.getApprovalCategories()) { com.google.gerrit.server.project.RefControl rc = pe.controlFor(user).controlForRef(change.getDest()); java.util.List<com.google.gerrit.reviewdb.RefRight> categoryRights = rc.getApplicableRights(category); computeAllowed(am, categoryRights, category); } }",5e806cb947040d50967ee0c1cf9404e88fe9acb2,computeAllowed(),105373,208,167
