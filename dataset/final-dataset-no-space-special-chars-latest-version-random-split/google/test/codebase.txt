
@java.lang.Override public int run() throws java.lang.Exception { com.google.gerrit.pgm.util.ErrorLogFile.errorOnlyConsole(); if (listPlugins) { com.google.gerrit.pgm.util.ConsoleUI ui = com.google.gerrit.pgm.util.ConsoleUI.getInstance(); java.util.List<com.google.gerrit.pgm.init.InitPlugins.PluginData> plugins = com.google.gerrit.pgm.init.InitPlugins.listPlugins(); ui.message("Available plugins are:\n"); for (com.google.gerrit.pgm.init.InitPlugins.PluginData plugin : plugins) { ui.message(" * %s\n", plugin.name); } if (plugins.isEmpty()) { ui.message("No plugins found.\n"); } return 0; } final com.google.gerrit.pgm.Init.SiteInit init = createSiteInit(); init.flags.autoStart = (!(noAutoStart)) && (init.site.isNew); final com.google.gerrit.pgm.Init.SiteRun run; try { init.initializer.run(); init.flags.deleteOnFailure = false; run = createSiteRun(init); run.upgradeSchema(); } catch (java.lang.Exception failure) { if (init.flags.deleteOnFailure) { com.google.gerrit.pgm.Init.recursiveDelete(getSitePath()); } throw failure; } catch (java.lang.Error failure) { if (init.flags.deleteOnFailure) { com.google.gerrit.pgm.Init.recursiveDelete(getSitePath()); } throw failure; } java.lang.System.err.println(("Initialized " + (getSitePath().getCanonicalPath()))); run.start(); return 0; }
public void doChangeMergedHook(final com.google.gerrit.reviewdb.Change change, final com.google.gerrit.reviewdb.Account account, final com.google.gerrit.reviewdb.PatchSet patchSet) { final com.google.gerrit.server.events.ChangeMergedEvent event = new com.google.gerrit.server.events.ChangeMergedEvent(); event.change = eventFactory.asChangeAttribute(change); event.submitter = eventFactory.asAccountAttribute(account); event.patchSet = eventFactory.asPatchSetAttribute(patchSet); fireEvent(change, event); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add(changeMergedHook.getAbsolutePath()); args.add("--change"); args.add(event.change.id); args.add("--change-url"); args.add(event.change.url); args.add("--project"); args.add(event.change.project); args.add("--branch"); args.add(event.change.branch); args.add("--submitter"); args.add(getDisplayName(account)); args.add("--commit"); args.add(event.patchSet.revision); runHook(getRepo(change), args); }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gwtorm.server.OrmException { try { performCreateGroupFactory.create().createGroup(groupName, groupDescription, visibleToAll, ownerGroupId, initialMembers, initialGroups); } catch (com.google.gerrit.common.errors.PermissionDeniedException e) { throw die(e); } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw die(e); } }
@java.lang.Override public void setStatus(java.lang.String status) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.PutStatus.Input in = new com.google.gerrit.server.account.PutStatus.Input(status); try { putStatus.apply(account, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot set status", e); } }


@org.junit.Test public void applyDeltaToNullWithNoNewMetaId() { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.server.notedb.NoteDbChangeStateTest.newChange(); assertThat(c.getNoteDbState()).isNull(); com.google.gerrit.server.notedb.NoteDbChangeState.applyDelta(c, com.google.gerrit.server.notedb.NoteDbChangeState.Delta.create(c.getId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.noMetaId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.noDrafts())); assertThat(c.getNoteDbState()).isNull(); com.google.gerrit.server.notedb.NoteDbChangeState.applyDelta(c, com.google.gerrit.server.notedb.NoteDbChangeState.Delta.create(c.getId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.noMetaId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.drafts(new com.google.gerrit.reviewdb.client.Account.Id(1001), zeroId()))); assertThat(c.getNoteDbState()).isNull(); }



public void unstarAll(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { dbProvider.get().starredChanges().delete(dbProvider.get().starredChanges().byChange(changeId)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.BatchRefUpdate batchUpdate = repo.getRefDatabase().newBatchUpdate(); batchUpdate.setAllowNonFastForwards(true); batchUpdate.setRefLogIdent(serverIdent); batchUpdate.setRefLogMessage(("Unstar change " + (changeId.get())), true); for (com.google.gerrit.reviewdb.client.Account.Id accountId : byChangeFromIndex(changeId)) { java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsStarredChanges(accountId, changeId); org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().getRef(refName); batchUpdate.addCommand(new org.eclipse.jgit.transport.ReceiveCommand(ref.getObjectId(), org.eclipse.jgit.lib.ObjectId.zeroId(), refName)); } batchUpdate.execute(rw, NullProgressMonitor.INSTANCE); for (org.eclipse.jgit.transport.ReceiveCommand command : batchUpdate.getCommands()) { if ((command.getResult()) != (ReceiveCommand.Result.OK)) { throw new java.io.IOException(java.lang.String.format("Unstar change %d failed, ref %s could not be deleted: %s", changeId.get(), command.getRefName(), command.getResult())); } } indexer.index(dbProvider.get(), project, changeId); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Unstar change %d failed", changeId.get()), e); } }
@org.junit.Test public void selfRevokedKey() throws java.lang.Exception { assertProblems(com.google.gerrit.gpg.testutil.TestKeys.key4(), "Key is revoked"); }

@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) throws java.lang.Exception { emailReviewers(rsrc.getChange(), added); if (!(added.isEmpty())) { for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : added) { com.google.gerrit.reviewdb.client.Account account = accountCache.get(psa.getAccountId()).getAccount(); reviewerAdded.fire(rsrc.getChange(), patchSet, account); } } }
static void call(final com.google.gwt.user.client.ui.Button b, final java.lang.String project) { b.setEnabled(false); com.google.gerrit.client.changes.ChangeApi.createChange(project, RefNames.REFS_CONFIG, null, AdminConstants.I.editConfigMessage(), null, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toEditScreen(new com.google.gerrit.reviewdb.client.PatchSet.Id(result.legacyId(), 1), "project.config")); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { b.setEnabled(true); super.onFailure(caught); } }); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring).regex(matchRegex).start(start).limit(limit).filter(allBranches(rsrc)); }



private void checkComments(java.util.Map<com.google.gerrit.reviewdb.client.RevId, com.google.gerrit.server.notedb.RevisionNote> existingNotes, java.util.Map<com.google.gerrit.reviewdb.client.RevId, com.google.gerrit.server.notedb.RevisionNoteBuilder> toUpdate) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Comment.Key> existing = new java.util.HashSet<>(); for (com.google.gerrit.server.notedb.RevisionNote rn : existingNotes.values()) { for (com.google.gerrit.reviewdb.client.Comment c : rn.comments) { existing.add(c.key); if ((draftUpdate) != null) { draftUpdate.deleteComment(c.revId, c.key); } } } for (com.google.gerrit.server.notedb.RevisionNoteBuilder b : toUpdate.values()) { for (com.google.gerrit.reviewdb.client.Comment c : b.put.values()) { if (existing.contains(c.key)) { throw new com.google.gwtorm.server.OrmException(("Cannot update existing published comment: " + c)); } } } }
void display(com.google.gerrit.client.projects.ConfigInfo result) { descTxt.setText(result.description()); setBool(contributorAgreements, result.use_contributor_agreements()); setBool(signedOffBy, result.use_signed_off_by()); setBool(contentMerge, result.use_content_merge()); setBool(requireChangeID, result.require_change_id()); setSubmitType(result.submit_type()); setState(result.state()); maxObjectSizeLimit.setText(result.max_object_size_limit().configured_value()); if ((result.max_object_size_limit().inherited_value()) != null) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setText(Util.M.effectiveMaxObjectSizeLimit(result.max_object_size_limit().value())); effectiveMaxObjectSizeLimit.setTitle(Util.M.globalMaxObjectSizeLimit(result.max_object_size_limit().inherited_value())); } else { effectiveMaxObjectSizeLimit.setVisible(false); } saveProject.setEnabled(false); initPluginOptions(result); initProjectActions(result); }
private void assertBadRequest(com.google.gerrit.extensions.api.projects.ProjectApi.ListRefsRequest<com.google.gerrit.extensions.api.projects.BranchInfo> req) throws java.lang.Exception { try { req.get(); fail("Expected BadRequestException"); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { } }

void schedule(final com.google.gerrit.reviewdb.client.Project.NameKey project, final java.lang.String ref, final org.eclipse.jgit.transport.URIish uri, com.googlesource.gerrit.plugins.replication.ReplicationState state) { com.googlesource.gerrit.plugins.replication.Destination.repLog.info("scheduling replication {}:{} => {}", project, ref, uri); if (!(isVisible(project, state))) { return; } if (!(config.replicatePermissions())) { com.googlesource.gerrit.plugins.replication.PushOne e; synchronized(stateLock) { e = pending.get(uri); } if (e == null) { try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(project)) { try { org.eclipse.jgit.lib.Ref head = git.exactRef(Constants.HEAD); if (((head != null) && (head.isSymbolic())) && (RefNames.REFS_CONFIG.equals(head.getLeaf().getName()))) { return; } } catch (java.io.IOException err) { stateLog.error(java.lang.String.format("cannot check type of project %s", project), err, state); return; } } catch (java.io.IOException err) { stateLog.error(java.lang.String.format("source project %s not available", project), err, state); return; } } } synchronized(stateLock) { com.googlesource.gerrit.plugins.replication.PushOne e = pending.get(uri); if (e == null) { e = opFactory.create(project, uri); pool.schedule(e, config.getDelay(), java.util.concurrent.TimeUnit.SECONDS); pending.put(uri, e); } e.addRef(ref); state.increasePushTaskCount(project.get(), ref); e.addState(ref, state); com.googlesource.gerrit.plugins.replication.Destination.repLog.info("scheduled {}:{} => {} to run after {}s", project, ref, e, config.getDelay()); } }


@java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.diff.FileInfo> m) { files.set((base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, base._number()) : null), new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, rev._number()), style, editMessage, reply, ((edit) != null)); files.setValue(m, myLastReply, comments.get(0), drafts.get(0), fileTableMode); }
public void onSuccess(com.google.gerrit.client.extensions.TopMenuList result) { java.util.List<com.google.gerrit.client.extensions.TopMenu> topMenuExtensions = com.google.gerrit.client.rpc.Natives.asList(result); for (com.google.gerrit.client.extensions.TopMenu menu : topMenuExtensions) { com.google.gerrit.client.ui.LinkMenuBar existingBar = com.google.gerrit.client.Gerrit.menuBars.get(menu.getName()); com.google.gerrit.client.ui.LinkMenuBar bar = (existingBar != null) ? existingBar : new com.google.gerrit.client.ui.LinkMenuBar(); for (com.google.gerrit.client.extensions.TopMenuItem item : com.google.gerrit.client.rpc.Natives.asList(menu.getItems())) { com.google.gerrit.client.Gerrit.addExtensionLink(bar, item); } if (existingBar == null) { com.google.gerrit.client.Gerrit.menuBars.put(menu.getName(), bar); com.google.gerrit.client.Gerrit.menuLeft.add(bar, menu.getName()); } } }

public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision()) != null ? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences())); }

void start() { oracle.requestSuggestions(request, this); }

@org.junit.Test public void deleteEdit() throws java.lang.Exception { assertEquals(RefUpdate.Result.NEW, modifier.createEdit(change, ps)); assertEquals(RefUpdate.Result.FORCED, modifier.modifyFile(editUtil.byChange(change).get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW)); editUtil.delete(editUtil.byChange(change).get()); assertFalse(editUtil.byChange(change).isPresent()); }
private static com.google.gerrit.server.query.change.ChangeData change(java.lang.String... files) { java.util.Arrays.sort(files); com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData(null, null, null, new com.google.gerrit.reviewdb.client.Change.Id(1)); cd.setCurrentFilePaths(java.util.Arrays.asList(files)); return cd; }
public void run() { if (cm.hasActiveLine()) { cm.removeLineClass(cm.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); cm.removeLineClass(cm.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } if (other.hasActiveLine()) { other.removeLineClass(other.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); other.removeLineClass(other.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } int line = cm.getCursor("head").getLine(); net.codemirror.lib.CodeMirror.LineHandle handle = cm.getLineHandle(line); if (hiddenSkipMap.containsKey(handle)) { line -= hiddenSkipMap.get(handle); handle = cm.getLineHandle(line); } cm.setActiveLine(handle); if (cm.somethingSelected()) { return; } cm.addLineClass(line, LineClassWhere.WRAP, diffTable.style.activeLine()); cm.addLineClass(line, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); com.google.gerrit.client.diff.LineMapper.LineOnOtherInfo info = mapper.lineOnOther((cm == (cmA) ? com.google.gerrit.common.changes.Side.PARENT : com.google.gerrit.common.changes.Side.REVISION), line); int oLine = info.getLine(); if (info.isAligned()) { other.setActiveLine(other.getLineHandle(oLine)); other.addLineClass(oLine, LineClassWhere.WRAP, diffTable.style.activeLine()); other.addLineClass(oLine, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } }
private void parseDelete(final org.eclipse.jgit.transport.ReceiveCommand cmd) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canDelete()) { batch.addCommand(cmd); } else { if (GitRepositoryManager.REF_CONFIG.equals(ctl.getRefName())) { reject(cmd, "cannot delete project configuration"); } else { errors.put(com.google.gerrit.server.git.ReceiveCommits.Error.DELETE, ctl.getRefName()); reject(cmd, "can not delete references"); } } }

public boolean doTransition(java.lang.String issueKey, java.lang.String transition) throws com.atlassian.jira.rest.client.api.RestClientException, com.googlesource.gerrit.plugins.its.base.its.InvalidTransitionException { com.atlassian.jira.rest.client.api.domain.Transition t = getTransitionByName(getTransitions(issueKey), transition); if (t == null) { throw new com.googlesource.gerrit.plugins.its.base.its.InvalidTransitionException(((("Action " + transition) + " not executable on issue ") + issueKey)); } com.atlassian.jira.rest.client.api.domain.input.TransitionInput input; input = new com.atlassian.jira.rest.client.api.domain.input.TransitionInput(t.getId()); com.googlesource.gerrit.plugins.its.jira.JiraClient.log.debug(("Setting transition input to: " + (input.toString()))); client.getIssueClient().transition(getIssue(issueKey), input).claim(); return true; }
private void addSubmitRecordLabels(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.labels) != null) && (!(submitRecord.labels.isEmpty()))) { sa.labels = new java.util.ArrayList(); for (SubmitRecord.Label lbl : submitRecord.labels) { com.google.gerrit.server.data.SubmitLabelAttribute la = new com.google.gerrit.server.data.SubmitLabelAttribute(); la.label = lbl.label; la.status = lbl.status.name(); if ((lbl.appliedBy) != null) { com.google.gerrit.server.account.AccountState accountState = accountCache.get(lbl.appliedBy); la.by = asAccountAttribute(accountState); } sa.labels.add(la); } } }
private void serveGwtUi() { serve("/gerrit_ui/*").with(com.google.inject.Key.get(javax.servlet.http.HttpServlet.class, com.google.inject.name.Names.named(com.google.gerrit.httpd.raw.StaticModule.GWT_UI_SERVLET))); if ((warFs) == null) { filter("/").through(new com.google.gerrit.httpd.raw.RecompileGwtUiFilter(buckOut, unpackedWar)); } }
private void initPluginOptions(com.google.gerrit.client.projects.ConfigInfo info) { pluginOptionsPanel.clear(); pluginConfigWidgets = new java.util.HashMap(); for (java.lang.String pluginName : info.pluginConfig().keySet()) { java.util.Map<java.lang.String, com.google.gwt.user.client.ui.FocusWidget> widgetMap = new java.util.HashMap<>(); pluginConfigWidgets.put(pluginName, widgetMap); com.google.gerrit.client.admin.ProjectInfoScreen.LabeledWidgetsGrid g = new com.google.gerrit.client.admin.ProjectInfoScreen.LabeledWidgetsGrid(); g.addHeader(new com.google.gerrit.client.ui.SmallHeading(Util.M.pluginProjectOptionsTitle(pluginName))); pluginOptionsPanel.add(g); com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.projects.ConfigInfo.ConfigParameterInfo> pluginConfig = info.pluginConfig(pluginName); pluginConfig.copyKeysIntoChildren("name"); for (com.google.gerrit.client.projects.ConfigInfo.ConfigParameterInfo param : com.google.gerrit.client.rpc.Natives.asList(pluginConfig.values())) { com.google.gwt.user.client.ui.FocusWidget w; if ("STRING".equals(param.type())) { w = renderTextBox(g, param, false); } else if (("INT".equals(param.type())) || ("LONG".equals(param.type()))) { w = renderTextBox(g, param, true); } else if ("BOOLEAN".equals(param.type())) { w = renderCheckBox(g, param); } else if (("LIST".equals(param.type())) && ((param.permittedValues()) != null)) { w = renderListBox(g, param); } else { continue; } if (param.editable()) { widgetMap.put(param.name(), w); } else { w.setEnabled(false); } } } enableForm(); }
@org.junit.Test public void testGetJGroupsCluster() throws java.lang.Exception { when(globalPluginConfigMock.getEnum(com.ericsson.gerrit.plugins.highavailability.Configuration.PEER_INFO_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.STRATEGY_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_PEER_INFO_STRATEGY)).thenReturn(Configuration.PeerInfoStrategy.JGROUPS); initializeConfiguration(); assertThat(configuration.jgroups().clusterName()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_CLUSTER_NAME); when(globalPluginConfigMock.getString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUSTER_NAME_KEY)).thenReturn("foo"); initializeConfiguration(); assertThat(configuration.jgroups().clusterName()).isEqualTo("foo"); }

private <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws java.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return execute(action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(listener.getAttemptCount()); } }

@java.lang.Override public synchronized void onGitReferenceUpdated(com.googlesource.gerrit.plugins.supermanifest.Event event) { if (event.getProjectName().equals(allProjectsName.get())) { if (event.getRefName().equals("refs/meta/config")) { updateConfiguration(); } return; } for (com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.ConfigEntry c : config) { if (!(c.srcRepoKey.get().equals(event.getProjectName()))) { continue; } if (!((c.destBranch.equals("*")) || (c.srcRef.equals(event.getRefName())))) { continue; } if ((c.destBranch.equals("*")) && (!(event.getRefName().startsWith(com.googlesource.gerrit.plugins.supermanifest.REFS_HEADS)))) { continue; } try { update(c, event.getRefName()); } catch (java.io.IOException | org.eclipse.jgit.api.errors.GitAPIException e) { java.lang.StackTraceElement here = java.lang.Thread.currentThread().getStackTrace()[1]; e.setStackTrace(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.trimStack(e.getStackTrace(), here)); error("update for %s (ref %s) failed: %s", c.toString(), event.getRefName(), e); } } }

public void merge(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.IdentifiedUser caller, boolean checkSubmitRules) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { this.caller = caller; updateSubmissionId(change); this.db = db; logDebug("Beginning integration of {}", change); try { com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.completeChangeSet(db, change); com.google.gerrit.server.git.MergeOp.reloadChanges(cs); logDebug("Calculated to merge {}", cs); if (checkSubmitRules) { logDebug("Checking submit rules and state"); checkSubmitRulesAndState(cs); failFast(cs); } try { integrateIntoHistory(cs); } catch (com.google.gerrit.server.git.IntegrationException e) { logError("Merge Conflict", e); throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Merge Conflict", e); } } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } }
@java.lang.Override protected void configure() { install(new com.google.gerrit.server.rules.PrologModule.EnvironmentModule()); bind(PrologEnvironment.Args.class); }
@org.junit.Test public void setParent() throws java.lang.Exception { java.lang.String parent = "parent"; com.google.gerrit.acceptance.GitUtil.createProject(sshSession, parent, null, true); com.google.gerrit.acceptance.RestResponse r = adminSession.put((("/projects/" + (project.get())) + "/parent"), newParentInput(parent)); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); r.consume(); r = adminSession.get((("/projects/" + (project.get())) + "/parent")); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); java.lang.String newParent = newGson().fromJson(r.getReader(), java.lang.String.class); assertThat(newParent).isEqualTo(parent); r.consume(); }

public com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> getFileHistoryLinks(java.lang.String project, java.lang.String revision, java.lang.String file) { return filterLinks(fileHistoryLinks, ( webLink) -> webLink.getFileHistoryWebLink(project, revision, file)); }

public void run() throws java.lang.Exception { ui.header("SSH Daemon"); java.lang.String hostname = "*"; int port = 29418; java.lang.String listenAddress = sshd.get("listenAddress"); if (com.google.gerrit.pgm.init.InitSshd.isOff(listenAddress)) { hostname = "off"; } else if ((listenAddress != null) && (!(listenAddress.isEmpty()))) { final java.net.InetSocketAddress addr = com.google.gerrit.server.util.SocketUtil.parse(listenAddress, port); hostname = com.google.gerrit.server.util.SocketUtil.hostname(addr); port = addr.getPort(); } hostname = ui.readString(hostname, "Listen on address"); if (com.google.gerrit.pgm.init.InitSshd.isOff(hostname)) { sshd.set("listenAddress", "off"); return; } port = ui.readInt(port, "Listen on port"); sshd.set("listenAddress", com.google.gerrit.server.util.SocketUtil.format(hostname, port)); if ((site.ssh_rsa.exists()) || (site.ssh_dsa.exists())) { libraries.bouncyCastle.downloadRequired(); } else if (!(site.ssh_key.exists())) { libraries.bouncyCastle.downloadOptional(); } generateSshHostKeys(); }
@org.junit.Test public void testValidPathSeparator() { for (char c : com.google.gerrit.httpd.GitWebConfigTest.VALID_CHARACTERS.toCharArray()) { assertTrue(("valid character rejected: " + c), com.google.gerrit.httpd.GitWebConfig.isValidPathSeparator(c)); } }
@java.lang.Override public void onRemoval(java.lang.String pluginName, java.lang.String cacheName, com.google.common.cache.RemovalNotification<K, V> notification) { if (((!(com.ericsson.gerrit.plugins.evictcache.Context.isForwardedEvent())) && (!(notification.wasEvicted()))) && (isSynchronized(cacheName))) { executor.execute(new EvictCacheTask(pluginName, cacheName, notification.getKey())); } }
@java.lang.Override public void visibleProjects(final com.google.gwt.user.client.rpc.AsyncCallback<java.util.List<com.google.gerrit.reviewdb.Project>> callback) { visibleProjectsFactory.create().to(callback); }
private java.io.File resolveFile(javax.servlet.http.HttpServletRequest req) { return new java.io.File(site_path, ((req.getServletPath()) + (req.getPathInfo()))); }

@java.lang.Override public void onSuccess(final com.google.gwtjsonrpc.common.VoidResult result) { remove(ids); }

@java.lang.Override public java.lang.String apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutUsername.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set username"); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing username"); } if (input == null) { input = new com.google.gerrit.server.account.PutUsername.Input(); } try { changeUserNameFactory.create(db.get(), rsrc.getUser(), input.username).call(); } catch (java.lang.IllegalStateException e) { if (ChangeUserName.USERNAME_CANNOT_BE_CHANGED.equals(e.getMessage())) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(e.getMessage()); } throw e; } catch (com.google.gerrit.server.account.InvalidUserNameException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("invalid username"); } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("username already used"); } return input.username; }

void validateChanges(com.google.gerrit.server.git.ProjectConfig config, java.util.List<com.google.gerrit.common.data.AccessSection> removals, java.util.List<com.google.gerrit.common.data.AccessSection> additions) throws com.google.gerrit.common.errors.InvalidNameException, com.google.gerrit.extensions.restapi.BadRequestException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions, removals)) { boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(section.getName()); if (isGlobalCapabilities) { if (!(allProjects.equals(config.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(("Cannot edit global capabilities for projects other than " + (allProjects.get()))); } } } for (com.google.gerrit.common.data.AccessSection section : additions) { java.lang.String name = section.getName(); boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(name); if (!isGlobalCapabilities) { if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("invalid section name"); } com.google.gerrit.server.project.RefPattern.validate(name); } else { for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(com.google.gerrit.common.data.GlobalCapability.isCapability(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((("Cannot add non-global capability " + (p.getName())) + " to global capabilities")); } } } } }
com.google.gerrit.reviewdb.client.PatchLineComment export() { com.google.gerrit.reviewdb.client.PatchLineComment plc = new com.google.gerrit.reviewdb.client.PatchLineComment(key.export(), lineNbr, author.export(), parentUuid, writtenOn); plc.setSide(side); plc.setStatus(PatchLineComment.Status.forCode(status)); plc.setMessage(message); if ((range) != null) { plc.setRange(range.export()); } plc.setTag(tag); plc.setRevId(new com.google.gerrit.reviewdb.client.RevId(revId)); return plc; }
public <T extends com.google.gwt.core.client.JavaScriptObject> void get(com.google.gwt.user.client.rpc.AsyncCallback<T> cb) { send(com.google.gerrit.client.rpc.GET, cb); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn(ignore); when(mockPluginConfig.getBoolean("publish-on-patch-set-created", true)).thenReturn(publishOnPatchSetCreated); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }
@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed) { final java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = com.google.common.collect.Lists.newLinkedList(); try { for (final com.google.gerrit.reviewdb.client.AccountGroupById g : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.get().accountGroupByIdAud().byGroupInclude(g.getGroupId(), g.getIncludeUUID())) { if (a.isActive()) { audit = a; break; } } if (audit != null) { audit.removed(me, com.google.gerrit.common.TimeUtil.nowTs()); auditUpdates.add(audit); } } db.get().accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log delete groups from group event performed by user", me, removed, e); } }


protected void insertTitleWidget(final com.google.gwt.user.client.ui.Widget w) { header.insert(w, 0); }

@org.junit.Test public void delete() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange("refs/drafts/master"); assertThat(query(r.getChangeId())).hasSize(1); assertThat(info(r.getChangeId()).status).isEqualTo(ChangeStatus.DRAFT); gApi.changes().id(r.getChangeId()).delete(); assertThat(query(r.getChangeId())).isEmpty(); }
private com.google.gerrit.extensions.api.changes.AddReviewerResult putAccount(java.lang.String reviewer, com.google.gerrit.server.change.ReviewerResource rsrc, boolean cc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account member = rsrc.getReviewerUser().getAccount(); com.google.gerrit.server.project.ChangeControl control = rsrc.getReviewerControl(); com.google.gerrit.extensions.api.changes.AddReviewerResult result = new com.google.gerrit.extensions.api.changes.AddReviewerResult(reviewer); if (isValidReviewer(member, control)) { addReviewers(rsrc.getChangeResource(), result, com.google.common.collect.ImmutableMap.of(member.getId(), control), cc); } return result; }


void appendRow(final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m, final com.google.gerrit.client.reviewdb.Patch p) { m.openTr(); m.openTd(); m.addStyleName(com.google.gerrit.client.changes.S_ICON_CELL); m.addStyleName("LeftMostCell"); m.nbsp(); m.closeTd(); m.openTd(); m.setStyleName("ChangeTypeCell"); m.append(p.getChangeType().getCode()); m.closeTd(); m.openTd(); m.addStyleName(com.google.gerrit.client.changes.S_DATA_CELL); m.addStyleName("FilePathCell"); m.closeTd(); m.openTd(); m.addStyleName(com.google.gerrit.client.changes.S_DATA_CELL); m.addStyleName("CommentCell"); appendCommentCount(m, p); m.closeTd(); switch (p.getPatchType()) { case UNIFIED : openlink(m, 2); m.closeTd(); break; case BINARY : { java.lang.String base = com.google.gwt.core.client.GWT.getHostPageBaseURL(); base += "cat/" + (com.google.gwtorm.client.KeyUtil.encode(p.getKey().toString())); switch (p.getChangeType()) { case DELETED : case MODIFIED : openlink(m, 1); m.openAnchor(); m.setAttribute("href", (base + "^1")); m.append(Util.C.patchTableDownloadPreImage()); closelink(m); break; default : emptycell(m, 1); break; } switch (p.getChangeType()) { case MODIFIED : case ADDED : openlink(m, 1); m.openAnchor(); m.setAttribute("href", (base + "^0")); m.append(Util.C.patchTableDownloadPostImage()); closelink(m); break; default : emptycell(m, 1); break; } break; } default : emptycell(m, 2); break; } openlink(m, 1); m.closeTd(); m.closeTr(); }

private java.util.List<java.io.File> scanJarsInPluginsDirectory() { if (((pluginsDir) == null) || (!(pluginsDir.exists()))) { return java.util.Collections.emptyList(); } java.io.File[] matches = pluginsDir.listFiles(new java.io.FileFilter() { @java.lang.Override public boolean accept(java.io.File pathname) { return (pathname.getName().endsWith(".jar")) && (pathname.isFile()); } }); if (matches == null) { com.google.gerrit.server.plugins.PluginLoader.log.error(("Cannot list " + (pluginsDir.getAbsolutePath()))); return java.util.Collections.emptyList(); } return java.util.Arrays.asList(matches); }
@java.lang.Override public void evict(com.google.gerrit.reviewdb.client.Project p) { if (p != null) { byName.invalidate(p.getNameKey().get()); } }
public void run() { com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); commentManager.saveAllDrafts(group); group.done(); group.addListener(new com.google.gerrit.client.rpc.GerritCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { java.lang.String b = ((base) != null) ? base.getId() : null; java.lang.String rev = revision.getId(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, b, rev), new com.google.gerrit.client.change.ChangeScreen2(changeId, b, rev, openReplyBox)); } }); }


@java.lang.Override public com.google.gerrit.server.change.IncludedIn.IncludedInInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.project.ChangeControl ctl = rsrc.getControl(); com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.current(db.get(), rsrc.getNotes()); com.google.gerrit.reviewdb.client.Project.NameKey project = ctl.getProject().getNameKey(); try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(r)) { rw.setRetainBody(false); org.eclipse.jgit.revwalk.RevCommit rev; try { rev = rw.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get())); } catch (org.eclipse.jgit.errors.IncorrectObjectTypeException err) { throw new com.google.gerrit.extensions.restapi.BadRequestException(err.getMessage()); } catch (org.eclipse.jgit.errors.MissingObjectException err) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(err.getMessage()); } com.google.gerrit.server.change.IncludedInResolver.Result d = com.google.gerrit.server.change.IncludedInResolver.resolve(r, rw, rev); com.google.common.collect.Multimap<java.lang.String, java.lang.String> external = com.google.common.collect.ArrayListMultimap.create(); for (com.google.gerrit.extensions.config.ExternalIncludedIn ext : includedIn) { external.putAll(ext.getIncludedIn(project.get(), rev.name(), d.getTags(), d.getBranches())); } return new com.google.gerrit.server.change.IncludedIn.IncludedInInfo(d, (!(external.isEmpty()) ? external.asMap() : null)); } }
public com.google.gson.JsonElement display(java.io.PrintWriter stdout) { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> output = new java.util.TreeMap<>(); java.util.List<com.google.gerrit.server.plugins.Plugin> plugins = com.google.common.collect.Lists.newArrayList(pluginLoader.getPlugins(all)); java.util.Collections.sort(plugins, new java.util.Comparator<com.google.gerrit.server.plugins.Plugin>() { @java.lang.Override public int compare(com.google.gerrit.server.plugins.Plugin a, com.google.gerrit.server.plugins.Plugin b) { return a.getName().compareTo(b.getName()); } }); if (!(format.isJson())) { stdout.format("%-30s %-10s %-8s %s\n", "Name", "Version", "Status", "File"); stdout.print("-------------------------------------------------------------------------------\n"); } for (com.google.gerrit.server.plugins.Plugin p : plugins) { com.google.gerrit.extensions.common.PluginInfo info = com.google.gerrit.server.plugins.ListPlugins.toPluginInfo(p); if (format.isJson()) { output.put(p.getName(), info); } else { stdout.format("%-30s %-10s %-8s %s\n", p.getName(), com.google.common.base.Strings.nullToEmpty(info.version), (p.isDisabled() ? "DISABLED" : "ENABLED"), p.getSrcFile().getFileName()); } } if (stdout == null) { return OutputFormat.JSON.newGson().toJsonTree(output, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.Object>>() {}.getType()); } else if (format.isJson()) { format.newGson().toJson(output, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo>>() {}.getType(), stdout); stdout.print('\n'); } stdout.flush(); return null; }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ConfigInput input) throws com.google.gerrit.extensions.restapi.RestApiException { if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("restricted to project owner"); } return apply(rsrc.getProjectState(), input); }
abstract void render(int context, com.google.gerrit.client.diff.DiffInfo diff);

void onDelete(int idx) { java.lang.String path = list.get(idx).path(); com.google.gerrit.client.changes.ChangeEditApi.delete(curr.getParentKey().get(), path, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(curr.getParentKey())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); }
@org.junit.Test public void atLeastOnePageIn() throws java.lang.Exception { java.util.List<org.eclipse.jgit.revwalk.RevCommit> commits = linearCommits(10); walk.markStart(commits.get(9)); com.google.gitiles.Paginator p = new com.google.gitiles.Paginator(walk, 3, commits.get(7)); assertEquals(com.google.common.collect.ImmutableList.of(commits.get(7), commits.get(6), commits.get(5)), com.google.common.collect.ImmutableList.copyOf(p)); assertEquals(commits.get(9), p.getPreviousStart()); assertEquals(commits.get(4), p.getNextStart()); }
public java.lang.String password(final java.lang.String username, final java.lang.String password) { final java.lang.String ov = getSecure(password); java.lang.String user = flags.sec.getString(section, subsection, username); if (user == null) { user = get(username); } if (user == null) { flags.sec.unset(section, subsection, password); return null; } if (ov != null) { if ((ui.isBatch()) || (!(ui.yesno(false, "Change %s's password", user)))) { return ov; } } final java.lang.String nv = ui.password("%s's password", user); if (!(com.google.gerrit.pgm.init.Section.eq(ov, nv))) { setSecure(password, nv); } return nv; }

@org.junit.Test public void missingRepo() throws java.lang.Exception { assumeNoteDbDisabled(); com.google.gerrit.server.project.ChangeControl ctl = insertChange(); com.google.gerrit.reviewdb.client.Project.NameKey name = ctl.getProject().getNameKey(); ((com.google.gerrit.testutil.InMemoryRepositoryManager) (repoManager)).deleteRepository(name); assertProblems(ctl, null, com.google.gerrit.acceptance.server.change.ConsistencyCheckerIT.problem(("Destination repository not found: " + name))); }
public boolean matches(com.google.gerrit.server.account.ExternalId extId) { return matches(extId.key().get()); }
public void doDraftPublishedHook(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.PatchSet patchSet, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.server.events.DraftPublishedEvent event = new com.google.gerrit.server.events.DraftPublishedEvent(); final com.google.gerrit.server.account.AccountState uploader = accountCache.get(patchSet.getUploader()); event.change = eventFactory.asChangeAttribute(change); event.patchSet = eventFactory.asPatchSetAttribute(patchSet); event.uploader = eventFactory.asAccountAttribute(uploader.getAccount()); fireEvent(change, event, db); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); addArg(args, "--change", event.change.id); addArg(args, "--change-url", event.change.url); addArg(args, "--project", event.change.project); addArg(args, "--branch", event.change.branch); addArg(args, "--topic", event.change.topic); addArg(args, "--uploader", getDisplayName(uploader.getAccount())); addArg(args, "--commit", event.patchSet.revision); addArg(args, "--patchset", event.patchSet.number); runHook(change.getProject(), draftPublishedHook, args); }
public void ensureLoaded(final com.google.gerrit.common.data.PatchSetDetail detail) { infoTable = new com.google.gwt.user.client.ui.Grid(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_CNT, 2); infoTable.setStyleName(Gerrit.RESOURCES.css().infoBlock()); infoTable.addStyleName(Gerrit.RESOURCES.css().patchSetInfoBlock()); initRow(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_AUTHOR, Util.C.patchSetInfoAuthor()); initRow(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_COMMITTER, Util.C.patchSetInfoCommitter()); initRow(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_PARENTS, Util.C.patchSetInfoParents()); initRow(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_DOWNLOAD, Util.C.patchSetInfoDownload()); final com.google.gwt.user.client.ui.HTMLTable.CellFormatter itfmt = infoTable.getCellFormatter(); itfmt.addStyleName(0, 0, Gerrit.RESOURCES.css().topmost()); itfmt.addStyleName(0, 1, Gerrit.RESOURCES.css().topmost()); itfmt.addStyleName(((com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_CNT) - 1), 0, Gerrit.RESOURCES.css().bottomheader()); itfmt.addStyleName(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_AUTHOR, 1, Gerrit.RESOURCES.css().useridentity()); itfmt.addStyleName(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_COMMITTER, 1, Gerrit.RESOURCES.css().useridentity()); itfmt.addStyleName(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_DOWNLOAD, 1, Gerrit.RESOURCES.css().downloadLinkListCell()); final com.google.gerrit.reviewdb.client.PatchSetInfo info = detail.getInfo(); displayUserIdentity(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_AUTHOR, info.getAuthor()); displayUserIdentity(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_COMMITTER, info.getCommitter()); displayParents(info.getParents()); displayDownload(); body.add(infoTable); if (!(patchSet.getId().equals(diffBaseId))) { patchTable = new com.google.gerrit.client.changes.PatchTable(); patchTable.setSavePointerId(("PatchTable " + (patchSet.getId()))); patchTable.display(diffBaseId, detail); actionsPanel = new com.google.gwt.user.client.ui.FlowPanel(); actionsPanel.setStyleName(Gerrit.RESOURCES.css().patchSetActions()); body.add(actionsPanel); if (com.google.gerrit.client.Gerrit.isSignedIn()) { if (changeDetail.canEdit()) { populateReviewAction(); if (changeDetail.isCurrentPatchSet(detail)) { populateActions(detail); } } if (detail.getPatchSet().isDraft()) { if (changeDetail.canPublish()) { populatePublishAction(); } if ((changeDetail.canDeleteDraft()) && ((changeDetail.getPatchSets().size()) > 1)) { populateDeleteDraftPatchSetAction(); } } } populateDiffAllActions(detail); body.add(patchTable); for (com.google.gwt.event.dom.client.ClickHandler clickHandler : registeredClickHandler) { patchTable.addClickHandler(clickHandler); } } }

@com.google.gwtorm.client.Query("WHERE open = true AND sortKey < ? ORDER BY sortKey DESC LIMIT ?") com.google.gwtorm.client.ResultSet<com.google.gerrit.reviewdb.Change> allOpenNext(java.lang.String sortKey, int limit) throws com.google.gwtorm.client.OrmException;
public java.util.List<com.googlesource.gerrit.plugins.manager.repository.PluginInfo> availablePlugins() throws java.io.IOException { return repository.list(com.google.gerrit.common.Version.getVersion()); }

@java.lang.Override public void init(javax.servlet.FilterConfig filterConfig) throws javax.servlet.ServletException { showGitBlitBanner(); try { com.gitblit.GitBlit.self().configureContext(settings, settings.getBasePath(), false); com.gitblit.GitBlit.self().contextInitialized(new javax.servlet.ServletContextEvent(filterConfig.getServletContext())); super.init(new com.googlesource.gerrit.plugins.gitblit.GerritWicketFilter.CustomFilterConfig(filterConfig)); } catch (java.lang.Exception e) { throw new javax.servlet.ServletException(e); } }


@org.junit.Test public void testWithSectionToOtherServer() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p1 = createProject("a"); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText((((("" + (("[submodule \"a\"]" + "path = a") + "url = ssh://non-localhost/")) + (p1.get())) + "\n") + "branch = .")); java.lang.String thisServer = com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER; com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey("project"), "master"); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> res = new com.google.gerrit.server.util.SubmoduleSectionParser(projectCache, cfg, thisServer, targetBranch).parseAllSections(); assertThat(res).isEmpty(); }
@java.lang.Override public void onSuccess(final com.google.gerrit.client.info.ChangeInfo info) { info.init(); initCurrentRevision(info); final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = info.revision(revision); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); loadCommit(rev, group); group.addListener(new com.google.gerrit.client.rpc.GerritCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { if ((base.isBase()) && (rev.isMerge())) { base = com.google.gerrit.client.DiffObject.parse(info.legacyId(), com.google.gerrit.client.Gerrit.getUserPreferences().defaultBaseForMerges().getBase()); } loadConfigInfo(info, base); com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> mAr = info.messages(); for (int i = 0; i < (mAr.length()); i++) { if ((mAr.get(i).tag()) != null) { hideTaggedComments.setVisible(true); break; } } } }); group.done(); }

public com.google.gerrit.server.git.CodeReviewCommit getFirstFastForward(final com.google.gerrit.server.git.CodeReviewCommit mergeTip, final org.eclipse.jgit.revwalk.RevWalk rw, final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.MergeException { for (final java.util.Iterator<com.google.gerrit.server.git.CodeReviewCommit> i = toMerge.iterator(); i.hasNext();) { try { final com.google.gerrit.server.git.CodeReviewCommit n = i.next(); if ((mergeTip == null) || (rw.isMergedInto(mergeTip, n))) { i.remove(); return n; } } catch (java.io.IOException e) { throw new com.google.gerrit.server.git.MergeException("Cannot fast-forward test during merge", e); } } return mergeTip; }
private void write(final java.io.OutputStream out, final org.eclipse.jgit.diff.Edit e) throws java.io.IOException { writeVarInt32(out, e.getBeginA()); writeVarInt32(out, e.getEndA()); writeVarInt32(out, e.getBeginB()); writeVarInt32(out, e.getEndB()); }


@java.lang.Override public void onSuccess(final com.google.gerrit.common.data.HostPageData result) { com.google.gwt.dom.client.Document.get().getElementById("gerrit_hostpagedata").removeFromParent(); com.google.gerrit.client.Gerrit.myConfig = result.config; com.google.gerrit.client.Gerrit.myTheme = result.theme; if ((result.account) != null) { com.google.gerrit.client.Gerrit.myAccount = result.account; com.google.gerrit.client.Gerrit.authorization = result.authorization; } if ((result.accountDiffPref) != null) { com.google.gerrit.client.Gerrit.myAccountDiffPref = result.accountDiffPref; com.google.gerrit.client.Gerrit.applyUserPreferences(); } onModuleLoad2(result); }
@java.lang.Override public java.lang.Void call() throws java.io.IOException { for (com.google.gerrit.server.index.change.ChangeIndex i : getWriteIndexes()) { i.delete(id); } fireChangeDeletedFromIndexEvent(id.get()); return null; }
private void executeRemoteSsh(org.eclipse.jgit.transport.CredentialsProvider credsProvider, org.eclipse.jgit.transport.URIish uri, java.lang.String cmd, java.io.OutputStream errStream) throws java.io.IOException { org.eclipse.jgit.transport.RemoteSession ssh = connect(credsProvider, uri); java.lang.Process proc = ssh.exec(cmd, 0); proc.getOutputStream().close(); org.eclipse.jgit.util.io.StreamCopyThread out = new org.eclipse.jgit.util.io.StreamCopyThread(proc.getInputStream(), errStream); org.eclipse.jgit.util.io.StreamCopyThread err = new org.eclipse.jgit.util.io.StreamCopyThread(proc.getErrorStream(), errStream); out.start(); err.start(); try { proc.waitFor(); out.halt(); err.halt(); } catch (java.lang.InterruptedException interrupted) { } ssh.disconnect(); }
static java.util.Set<java.lang.String> extractTags(java.util.Set<java.lang.String> input) throws java.lang.IllegalArgumentException { if (input == null) { return java.util.Collections.emptySet(); } java.util.HashSet<java.lang.String> result = new java.util.HashSet<>(); for (java.lang.String hashtag : input) { if (hashtag.contains(",")) { throw new java.lang.IllegalArgumentException("Hashtags may not contain commas"); } hashtag = com.google.gerrit.server.change.HashtagsUtil.cleanupHashtag(hashtag); if (!(hashtag.isEmpty())) { result.add(hashtag); } } return result; }

public void setReviewedByCurrentUser(boolean reviewed) { if ((fileList) != null) { fileList.updateReviewedStatus(patchKey, reviewed); } PatchUtil.DETAIL_SVC.setReviewedByCurrentUser(patchKey, reviewed, new com.google.gwtjsonrpc.common.AsyncCallback<com.google.gwtjsonrpc.common.VoidResult>() { @java.lang.Override public void onFailure(java.lang.Throwable arg0) { } @java.lang.Override public void onSuccess(com.google.gwtjsonrpc.common.VoidResult result) { } }); }
private void getImpl(final com.google.gerrit.reviewdb.client.Project.NameKey name, final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry> cb) { com.google.gerrit.client.projects.ConfigInfoCache.Entry e = cache.get(name.get()); if (e != null) { cb.onSuccess(e); return; } com.google.gerrit.client.projects.ProjectApi.config(name).get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.projects.ConfigInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ConfigInfo result) { com.google.gerrit.client.projects.ConfigInfoCache.Entry e = new com.google.gerrit.client.projects.ConfigInfoCache.Entry(result); cache.put(name.get(), e); cb.onSuccess(e); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { cb.onFailure(caught); } }); }
@org.junit.Test public void testChildrenUnmodifiable() { final com.google.gerrit.server.query.OrPredicateTest.TestPredicate a = com.google.gerrit.server.query.OrPredicateTest.f("author", "alice"); final com.google.gerrit.server.query.OrPredicateTest.TestPredicate b = com.google.gerrit.server.query.OrPredicateTest.f("author", "bob"); final com.google.gerrit.server.query.Predicate<java.lang.String> n = com.google.gerrit.server.query.Predicate.or(a, b); try { n.getChildren().clear(); } catch (java.lang.RuntimeException e) { } com.google.gerrit.server.query.OrPredicateTest.assertChildren("clear", n, of(a, b)); try { n.getChildren().remove(0); } catch (java.lang.RuntimeException e) { } com.google.gerrit.server.query.OrPredicateTest.assertChildren("remove(0)", n, of(a, b)); try { n.getChildren().iterator().remove(); } catch (java.lang.RuntimeException e) { } com.google.gerrit.server.query.OrPredicateTest.assertChildren("remove(0)", n, of(a, b)); }



com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), capabilityControlFactory, changeControlGenericFactory, notesFactory, changeDataFactory, fillArgs, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, listChildProjects, submitDryRun, conflictsCache, trackingFooters, index, indexConfig, listMembers, starredChangesUtil, accountCache, allowsDrafts); }
@java.lang.Override public synchronized void init(javax.servlet.FilterConfig config) throws javax.servlet.ServletException { super.init(config); setDefaultFields(config); for (com.google.gitiles.GitilesView.Type type : GitilesView.Type.values()) { if (!(servlets.containsKey(type))) { servlets.put(type, getDefaultHandler(type)); } } javax.servlet.Filter repositoryFilter = new org.eclipse.jgit.http.server.RepositoryFilter(resolver); javax.servlet.Filter viewFilter = new com.google.gitiles.ViewFilter(accessFactory, urls, visibilityCache); javax.servlet.Filter dispatchFilter = new com.google.gitiles.GitilesFilter.DispatchFilter(filters, servlets); org.eclipse.jgit.http.server.glue.ServletBinder root = serveRegex(com.google.gitiles.GitilesFilter.ROOT_REGEX).through(viewFilter); if ((gitwebRedirect) != null) { root.through(gitwebRedirect); } root.through(dispatchFilter); serveRegex(com.google.gitiles.GitilesFilter.REPO_REGEX).through(repositoryFilter).through(viewFilter).through(dispatchFilter); serveRegex(com.google.gitiles.GitilesFilter.REPO_PATH_REGEX).through(repositoryFilter).through(viewFilter).through(dispatchFilter); initialized = true; }


private com.google.gerrit.client.ui.PatchLink createLink(int index, com.google.gerrit.client.patches.PatchScreen.Type patchType, com.google.gwtexpui.safehtml.client.SafeHtml before, com.google.gwtexpui.safehtml.client.SafeHtml after) { com.google.gerrit.reviewdb.client.Patch patch = patchList.get(index); if (((listenablePrefs.get().isSkipDeleted()) && (patch.getChangeType().equals(ChangeType.DELETED))) || ((listenablePrefs.get().isSkipUncommented()) && ((patch.getCommentCount()) == 0))) { return null; } com.google.gerrit.reviewdb.client.Patch.Key thisKey = patch.getKey(); com.google.gerrit.client.ui.PatchLink link; if ((patchType == (PatchScreen.Type.SIDE_BY_SIDE)) && ((patch.getPatchType()) == (com.google.gerrit.reviewdb.client.Patch.PatchType.UNIFIED))) { link = new com.google.gerrit.client.ui.PatchLink.SideBySide("", base, thisKey, index, detail, this); } else { link = new com.google.gerrit.client.ui.PatchLink.Unified("", base, thisKey, index, detail, this); } com.google.gwtexpui.safehtml.client.SafeHtmlBuilder text = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder(); text.append(before); text.append(com.google.gerrit.client.changes.PatchTable.getFileNameOnly(patch)); text.append(after); com.google.gwtexpui.safehtml.client.SafeHtml.set(link, text); return link; }
private java.util.Collection<com.google.gerrit.reviewdb.RefRight> getLocalRights() { return filter(projectControl.getProjectState().getLocalRights()); }
@java.lang.Override public java.lang.Boolean call() { try (com.google.gerrit.reviewdb.server.ReviewDb db = com.google.gerrit.pgm.RebuildNoteDb.unwrap(schemaFactory.open())) { return rebuilder.rebuildProject(db, changesByProject, project, allUsersRepo); } catch (java.lang.Exception e) { com.google.gerrit.pgm.RebuildNoteDb.log.error(("Error rebuilding project " + project), e); return false; } }

@org.junit.Test public void submitWithCherryPickIfFastForwardPossible() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); assertCherryPick(testRepo, false); assertThat(getRemoteHead().getParent(0)).isEqualTo(change.getCommit().getParent(0)); }
@org.junit.Test public void readPluginConfigGroupReference() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = util.commit(util.tree(util.file("groups", util.blob(com.google.gerrit.server.git.ProjectConfigTest.group(developers))), util.file("project.config", util.blob(((("" + ("[plugin \"somePlugin\"]\n" + "key1 = ")) + (developers.toConfigValue())) + "\n"))))); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig pluginCfg = cfg.getPluginConfig("somePlugin"); assertThat(pluginCfg.getNames().size()).isEqualTo(1); assertThat(pluginCfg.getGroupReference("key1")).isEqualTo(developers); }
private void grantAllCapabilities() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(allProjects); md.setMessage("Make super user"); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.AccessSection s = config.getAccessSection(AccessSection.GLOBAL_CAPABILITIES); for (java.lang.String c : com.google.gerrit.common.data.GlobalCapability.getAllNames()) { if (com.google.gerrit.acceptance.rest.account.ADMINISTRATE_SERVER.equals(c)) { continue; } com.google.gerrit.common.data.Permission p = s.getPermission(c, true); p.add(new com.google.gerrit.common.data.PermissionRule(config.resolve(com.google.gerrit.server.group.SystemGroupBackend.getGroup(SystemGroupBackend.REGISTERED_USERS)))); } config.commit(md); projectCache.evict(config.getProject()); }


private void addMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, com.google.gerrit.server.notedb.ChangeUpdate update) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder msg = new java.lang.StringBuilder(); appendHashtagMessage(msg, "added", toAdd); appendHashtagMessage(msg, "removed", toRemove); com.google.gerrit.reviewdb.client.ChangeMessage cmsg = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx, msg.toString()); cmUtil.addChangeMessage(ctx.getDb(), update, cmsg); }
public com.google.gwtjsonrpc.client.VoidResult run(com.google.gerrit.client.reviewdb.ReviewDb db) throws com.google.gerrit.server.patch.Failure, com.google.gwtorm.client.OrmException { final com.google.gerrit.client.reviewdb.PatchLineComment comment = db.patchComments().get(commentKey); if (comment == null) { throw new com.google.gerrit.server.patch.Failure(new com.google.gerrit.client.rpc.NoSuchEntityException()); } if (!(com.google.gerrit.client.rpc.Common.getAccountId().equals(comment.getAuthor()))) { throw new com.google.gerrit.server.patch.Failure(new com.google.gerrit.client.rpc.NoSuchEntityException()); } if ((comment.getStatus()) != (PatchLineComment.Status.DRAFT)) { throw new com.google.gerrit.server.patch.Failure(new java.lang.IllegalStateException("Comment published")); } db.patchComments().delete(java.util.Collections.singleton(comment)); return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }
public static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.Account.Id, com.google.gerrit.server.account.AccountState>> byIdType = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.Account.Id, com.google.gerrit.server.account.AccountState>>() {}; core(byIdType, com.google.gerrit.server.account.AccountCacheImpl.BYID_NAME).populateWith(com.google.gerrit.server.account.AccountCacheImpl.ByIdLoader.class); final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<java.lang.String, com.google.gerrit.reviewdb.Account.Id>> byUsernameType = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<java.lang.String, com.google.gerrit.reviewdb.Account.Id>>() {}; core(byUsernameType, com.google.gerrit.server.account.AccountCacheImpl.BYUSER_NAME).populateWith(com.google.gerrit.server.account.AccountCacheImpl.ByNameLoader.class); bind(com.google.gerrit.server.account.AccountCacheImpl.class); bind(com.google.gerrit.server.account.AccountCache.class).to(com.google.gerrit.server.account.AccountCacheImpl.class); } }; }

@java.lang.Override protected void onLoad(com.google.gerrit.server.notedb.LoadHandle handle) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId rev = handle.id(); if (rev == null) { loadDefaults(); return; } com.google.gerrit.server.notedb.ChangeNotesParser parser = new com.google.gerrit.server.notedb.ChangeNotesParser(change.getId(), rev, handle.walk(), args.noteUtil, args.metrics); state = parser.parseAll(); state.copyColumnsTo(change); revisionNoteMap = parser.getRevisionNoteMap(); }
com.google.gerrit.server.api.projects.CommitApiImpl create(com.google.gerrit.server.project.CommitResource r);

public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("failed to log add accounts to group event", e); } } }




protected java.lang.String getChangeMessageThreadId() { final java.lang.StringBuilder r = new java.lang.StringBuilder(); r.append('<'); r.append("gerrit"); r.append('.'); r.append(change.getCreatedOn().getTime()); r.append('.'); r.append(change.getKey().get()); r.append('@'); r.append(getGerritHost()); r.append('>'); return r.toString(); }
@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return recursiveChildProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); }



private <T> T execute(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws java.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return execute(actionType, action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(actionType, listener.getAttemptCount()); } }

private void loadConfigInfo(final com.google.gerrit.client.changes.ChangeInfo info) { info.revisions().copyKeysIntoChildren("name"); final com.google.gerrit.client.changes.ChangeInfo.RevisionInfo rev = resolveRevisionToDisplay(info); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); loadDiff(rev, com.google.gerrit.client.change.ChangeScreen2.myLastReply(info), group); loadCommit(rev, group); com.google.gerrit.client.changes.RevisionInfoCache.add(changeId, rev); com.google.gerrit.client.projects.ConfigInfoCache.add(info); com.google.gerrit.client.projects.ConfigInfoCache.get(info.project_name_key(), group.add(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry>(this) { @java.lang.Override protected void preDisplay(com.google.gerrit.client.projects.ConfigInfoCache.Entry result) { commentLinkProcessor = result.getCommentLinkProcessor(); setTheme(result.getTheme()); renderChangeInfo(info); } })); group.done(); }
public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> validateForGerritCommits(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationListener> validators = new java.util.LinkedList<>(); validators.add(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl)); validators.add(new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent)); validators.add(new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl)); validators.add(new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl)); if ((com.google.gerrit.server.util.MagicBranch.isMagicBranch(receiveEvent.command.getRefName())) || (ReceiveCommits.NEW_PATCHSET.matcher(receiveEvent.command.getRefName()).matches())) { validators.add(new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo)); } validators.add(new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, repo, allUsers)); validators.add(new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(commitValidationListeners)); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = new java.util.LinkedList<>(); try { for (com.google.gerrit.server.git.validators.CommitValidationListener commitValidator : validators) { messages.addAll(commitValidator.onCommitReceived(receiveEvent)); } } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { messages.addAll(e.getMessages()); throw new com.google.gerrit.server.git.validators.CommitValidationException(e.getMessage(), messages); } return messages; }
@org.junit.Before public final void beforeTest() throws java.lang.Exception { server = com.google.gerrit.acceptance.GerritServer.start(); server.getTestInjector().injectMembers(this); }
@java.lang.Override protected void configure() { cache(com.google.gerrit.server.account.AccountCacheImpl.BYID_NAME, Account.Id.class, com.google.gerrit.server.account.AccountState.class).loader(com.google.gerrit.server.account.AccountCacheImpl.ByIdLoader.class); cache(com.google.gerrit.server.account.AccountCacheImpl.BYUSER_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id>>() {}).loader(com.google.gerrit.server.account.AccountCacheImpl.ByNameLoader.class); bind(com.google.gerrit.server.account.AccountCacheImpl.class); bind(com.google.gerrit.server.account.AccountCache.class).to(com.google.gerrit.server.account.AccountCacheImpl.class); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.RebaseChangeEdit.Rebase.Input in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getChange()); if (!(edit.isPresent())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("no edit exists for change %s", rsrc.getChange().getChangeId())); } com.google.gerrit.reviewdb.client.PatchSet current = db.get().patchSets().get(rsrc.getChange().currentPatchSetId()); if (current.getId().equals(edit.get().getBasePatchSet().getId())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("edit for change %s is already on latest patch set: %s", rsrc.getChange().getChangeId(), current.getId())); } editModifier.rebaseEdit(edit.get(), current); return com.google.gerrit.extensions.restapi.Response.none(); }
private java.lang.Runnable maybeNextVimSearch(final net.codemirror.lib.CodeMirror cm) { return new java.lang.Runnable() { @java.lang.Override public void run() { if (cm.hasVimSearchHighlight()) { net.codemirror.lib.CodeMirror.handleVimKey(cm, "n"); } else { diffChunkNav(cm, false).run(); } } }; }



public com.google.gerrit.rules.PrologEnvironment newPrologEnvironment() throws com.googlecode.prolog_cafe.compiler.CompileException { com.google.gerrit.rules.PrologEnvironment env = envFactory.create(getClass().getClassLoader()); java.lang.String rules = getConfig().getPrologRules(); if (rules != null) { java.io.PushbackReader in = new java.io.PushbackReader(new java.io.StringReader(rules), com.googlecode.prolog_cafe.lang.Prolog.PUSHBACK_SIZE); com.googlecode.prolog_cafe.lang.JavaObjectTerm streamObject = new com.googlecode.prolog_cafe.lang.JavaObjectTerm(in); if (!(env.execute(Prolog.BUILTIN, "consult_stream", com.googlecode.prolog_cafe.lang.SymbolTerm.intern("rules.pl"), streamObject))) { throw new com.googlecode.prolog_cafe.compiler.CompileException(((("Cannot consult rules.pl " + (getProject().getName())) + " ") + (getConfig().getRevision()))); } } return env; }


@com.google.common.annotations.VisibleForTesting public void start() throws java.io.IOException { if ((dbInjector) == null) { dbInjector = createDbInjector(true, com.google.gerrit.pgm.MULTI_USER); } cfgInjector = createCfgInjector(); config = cfgInjector.getInstance(com.google.inject.Key.get(org.eclipse.jgit.lib.Config.class, com.google.gerrit.server.config.GerritServerConfig.class)); if (!(slave)) { initIndexType(); } sysInjector = createSysInjector(); sysInjector.getInstance(com.google.gerrit.server.plugins.PluginGuiceEnvironment.class).setDbCfgInjector(dbInjector, cfgInjector); manager.add(dbInjector, cfgInjector, sysInjector); if (!(consoleLog)) { manager.add(com.google.gerrit.pgm.util.ErrorLogFile.start(getSitePath(), config)); } sshd &= !(sshdOff()); if (sshd) { initSshd(); } if (com.google.common.base.MoreObjects.firstNonNull(httpd, true)) { initHttpd(); } manager.start(); }
private java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Branch.NameKey> visibleChangesByScan() { com.google.gerrit.reviewdb.client.Project.NameKey project = projectCtl.getProject().getNameKey(); try { java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Branch.NameKey> visibleChanges = new java.util.HashMap<>(); for (com.google.gerrit.server.notedb.ChangeNotes cn : changeNotesFactory.scan(git, db.get(), project)) { if (permissionBackend.user(user).change(cn).database(db).test(ChangePermission.READ)) { visibleChanges.put(cn.getChangeId(), cn.getChange().getDest()); } } return visibleChanges; } catch (java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.VisibleRefFilter.log.error((("Cannot load changes for project " + project) + ", assuming no changes are visible"), e); return java.util.Collections.emptyMap(); } }
@java.lang.Override public boolean isEmpty() { return (((((((((((((((((((((commitSubject) == null) && (approvals.isEmpty())) && ((changeMessage) == null)) && (comments.isEmpty())) && (reviewers.isEmpty())) && ((changeId) == null)) && ((branch) == null)) && ((status) == null)) && ((submissionId) == null)) && ((submitRecords) == null)) && ((assignee) == null)) && ((hashtags) == null)) && ((topic) == null)) && ((commit) == null)) && ((psState) == null)) && ((groups) == null)) && ((tag) == null)) && ((psDescription) == null)) && (!(currentPatchSet))) && ((readOnlyUntil) == null)) && ((isPrivate) == null); }
@org.junit.Test public void noRescheduleOnSuccess() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.OK_RESULT); task.run(); verifyZeroInteractions(executor); }
static com.google.gerrit.server.notedb.RevisionNoteMap parse(com.google.gerrit.server.notedb.ChangeNoteUtil noteUtil, com.google.gerrit.reviewdb.client.Change.Id changeId, org.eclipse.jgit.lib.ObjectReader reader, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.reviewdb.client.PatchLineComment.Status status) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Map<com.google.gerrit.reviewdb.client.RevId, com.google.gerrit.server.notedb.RevisionNote> result = new java.util.HashMap<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.server.notedb.RevisionNote rn = new com.google.gerrit.server.notedb.RevisionNote(noteUtil, changeId, reader, note.getData(), status); result.put(new com.google.gerrit.reviewdb.client.RevId(note.name()), rn); } return new com.google.gerrit.server.notedb.RevisionNoteMap(noteMap, com.google.common.collect.ImmutableMap.copyOf(result)); }


@org.junit.Test public void addOtherUsersGpgKey_Conflict() throws java.lang.Exception { addExternalIdEmail(admin, "test5@example.com"); externalIdsUpdate.insert(db, com.google.gerrit.server.account.ExternalId.create("foo", "myId", user.getId())); accountCache.evict(user.getId()); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); addGpgKey(key.getPublicKeyArmored()); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("GPG key already associated with another account"); addGpgKey(key.getPublicKeyArmored()); }
@org.junit.Test(expected = com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException.class) public void throwSQLExceptionIfNotOnline() throws com.ericsson.gerrit.plugins.eventslog.MalformedQueryException, com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException, java.sql.SQLException { com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.MockEvent mockEvent = new com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.MockEvent(); setUpClientMock(); eventsDb.createDBIfNotCreated(); expectLastCall().andThrow(new java.sql.SQLException(new java.net.ConnectException())).once(); eventsDb.queryOne(); expectLastCall().andThrow(new java.sql.SQLException()); easyMock.replayAll(); store = new com.ericsson.gerrit.plugins.eventslog.SQLStore(pcFactoryMock, userProviderMock, cfgMock, eventsDb, localEventsDb, poolMock); store.start(); store.storeEvent(mockEvent); store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENERIC_QUERY); easyMock.verifyAll(); }

public void onSuccess(final com.google.gerrit.common.auth.userpass.LoginResult result) { if (result.success) { java.lang.String to = token; if (!(to.startsWith("/"))) { to = "/" + to; } if ((result.isNew) && (!(token.startsWith(((com.google.gerrit.common.PageLinks.REGISTER) + "/"))))) { to = (com.google.gerrit.common.PageLinks.REGISTER) + to; } com.google.gwt.user.client.Window.Location.replace((((com.google.gwt.user.client.Window.Location.getPath()) + "login") + to)); } else { showError(Util.C.invalidLogin()); enable(true); password.selectAll(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { password.setFocus(true); } }); } }
@java.lang.Override protected void configureServlets() { install(new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { factory(AbandonChangeHandler.Factory.class); factory(AlterTopicHandler.Factory.class); factory(RestoreChangeHandler.Factory.class); factory(RevertChange.Factory.class); factory(RebaseChangeHandler.Factory.class); factory(ChangeDetailFactory.Factory.class); factory(IncludedInDetailFactory.Factory.class); factory(PatchSetDetailFactory.Factory.class); factory(PatchSetPublishDetailFactory.Factory.class); factory(SubmitAction.Factory.class); factory(PublishAction.Factory.class); factory(DeleteDraftChange.Factory.class); } }); rpc(com.google.gerrit.httpd.rpc.changedetail.ChangeDetailServiceImpl.class); rpc(com.google.gerrit.httpd.rpc.changedetail.ChangeManageServiceImpl.class); }


public static com.google.gerrit.server.group.db.GroupConfig loadForGroupSnapshot(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, org.eclipse.jgit.lib.ObjectId commitId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupUuid); groupConfig.load(repository, commitId); return groupConfig; }
@java.lang.SuppressWarnings({ "rawtypes", "unchecked" }) private static <K, V> com.google.common.cache.CacheBuilder<K, V> newCacheBuilder() { return ((com.google.common.cache.CacheBuilder<K, V>) (com.google.common.cache.CacheBuilder.newBuilder())); }
public static void main(java.lang.String[] argv) throws com.googlecode.prolog_cafe.compiler.CompileException, java.io.IOException { int i = 0; BuckPrologCompiler.tmpdir = new File(argv[(i++)]); File out = new File(argv[(i++)]); File java = BuckPrologCompiler.tmpdir("java"); for (; i < (argv.length); i++) { new java.lang.Compiler().prologToJavaSource(argv[i], java.getPath()); } BuckPrologCompiler.jar(out, java); }

private void writeEvents() { int processed = 0; while (processed < (com.google.gerrit.sshd.commands.StreamEvents.BATCH_SIZE)) { if ((java.lang.Thread.interrupted()) || (stdout.checkError())) { hooks.removeChangeListener(listener); flush(); onExit(0); return; } if (dropped) { write(droppedOutputEvent); dropped = false; } final com.google.gerrit.server.events.Event event = poll(); if (event == null) { break; } write(event); processed++; } flush(); if ((com.google.gerrit.sshd.commands.StreamEvents.BATCH_SIZE) <= processed) { synchronized(taskLock) { task = pool.submit(writer); } } }
@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> ctls = changeFinder.find(id.encoded(), user.get()); if (ctls.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((ctls.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Multiple changes found for " + id)); } com.google.gerrit.server.project.ChangeControl ctl = ctls.get(0); if (!(ctl.isVisible(db.get()))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(ctl); }


private void submit(com.google.gerrit.server.project.ChangeControl changeCtl, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.Submit submit = submitProvider.get(); com.google.gerrit.server.change.RevisionResource rsrc = new com.google.gerrit.server.change.RevisionResource(changes.parse(changeCtl), ps); java.util.List<com.google.gerrit.reviewdb.client.Change> changes; try { changes = submit.submit(rsrc, currentUser, true); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new java.io.IOException(e); } addMessage(""); for (com.google.gerrit.reviewdb.client.Change c : changes) { mergeQueue.merge(c.getDest()); c = db.changes().get(c.getId()); switch (c.getStatus()) { case SUBMITTED : addMessage((("Change " + (c.getChangeId())) + " submitted.")); break; case MERGED : addMessage((("Change " + (c.getChangeId())) + " merged.")); break; case NEW : com.google.gerrit.reviewdb.client.ChangeMessage msg = submit.getConflictMessage(rsrc); if (msg != null) { addMessage(((("Change " + (c.getChangeId())) + ": ") + (msg.getMessage()))); break; } default : addMessage(((("change " + (c.getChangeId())) + " is ") + (c.getStatus().name().toLowerCase()))); } } }

public void abandonInactiveOpenChanges() { if ((cfg.getAbandonAfter()) <= 0) { return; } try { java.lang.String query = ("status:new age:" + (java.util.concurrent.TimeUnit.MILLISECONDS.toMinutes(cfg.getAbandonAfter()))) + "m"; if (!(cfg.getAbandonIfMergeable())) { query += " -is:mergeable"; } java.util.List<com.google.gerrit.server.query.change.ChangeData> changesToAbandon = queryProcessor.enforceVisibility(false).queryChanges(queryBuilder.parse(query)).changes(); int count = 0; for (com.google.gerrit.server.query.change.ChangeData cd : changesToAbandon) { try { abandon.abandon(changeControl(cd), cfg.getAbandonMessage(), null); count++; } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { } catch (java.lang.Throwable e) { com.google.gerrit.server.change.AbandonUtil.log.error(java.lang.String.format("Failed to auto-abandon inactive open change %d.", cd.getId().get()), e); } } com.google.gerrit.server.change.AbandonUtil.log.info(java.lang.String.format("Auto-Abandoned %d of %d changes.", count, changesToAbandon.size())); } catch (com.google.gerrit.server.query.QueryParseException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.change.AbandonUtil.log.error("Failed to query inactive open changes for auto-abandoning.", e); } }

public static com.google.gerrit.reviewdb.client.ChangeMessage newMessage(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.PatchSet.Id psId, com.google.gerrit.server.CurrentUser user, java.sql.Timestamp when, java.lang.String body) throws com.google.gwtorm.server.OrmException { checkNotNull(psId); com.google.gerrit.reviewdb.client.Account.Id accountId = (user.isInternalUser()) ? null : user.getAccountId(); com.google.gerrit.reviewdb.client.ChangeMessage m = new com.google.gerrit.reviewdb.client.ChangeMessage(new com.google.gerrit.reviewdb.client.ChangeMessage.Key(psId.getParentKey(), com.google.gerrit.server.ChangeUtil.messageUUID(db)), accountId, when, psId); m.setMessage(body); user.updateRealAccountId(m::setRealAuthor); return m; }
private void loadFromAllUsers(com.google.gerrit.server.account.VersionedAccountPreferences v, org.eclipse.jgit.lib.Repository allUsers) { my = my(v); if ((my.isEmpty()) && (!(v.isDefaults()))) { try { com.google.gerrit.server.account.VersionedAccountPreferences d = com.google.gerrit.server.account.VersionedAccountPreferences.forDefault(); d.load(allUsers); my = my(d); } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException e) { com.google.gerrit.server.account.GetPreferences.log.warn("cannot read default preferences", e); } } if (my.isEmpty()) { my.add(new com.google.gerrit.extensions.client.MenuItem("Changes", "#/dashboard/self", null)); my.add(new com.google.gerrit.extensions.client.MenuItem("Drafts", "#/q/owner:self+is:draft", null)); my.add(new com.google.gerrit.extensions.client.MenuItem("Draft Comments", "#/q/has:draft", null)); my.add(new com.google.gerrit.extensions.client.MenuItem("Edits", "#/q/has:edit", null)); my.add(new com.google.gerrit.extensions.client.MenuItem("Watched Changes", "#/q/is:watched+is:open", null)); my.add(new com.google.gerrit.extensions.client.MenuItem("Starred Changes", "#/q/is:starred", null)); my.add(new com.google.gerrit.extensions.client.MenuItem("Groups", "#/groups/self", null)); } urlAliases = com.google.gerrit.server.account.GetPreferences.PreferenceInfo.urlAliases(v); }
private void initReadCategory(final com.google.gerrit.reviewdb.ReviewDb c, final com.google.gerrit.reviewdb.SystemConfig sConfig) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.ApprovalCategory cat; final java.util.ArrayList<com.google.gerrit.reviewdb.ApprovalCategoryValue> vals; cat = new com.google.gerrit.reviewdb.ApprovalCategory(com.google.gerrit.reviewdb.ApprovalCategory.READ, "Read Access"); cat.setPosition(((short) (-1))); cat.setFunctionName(NoOpFunction.NAME); vals = new java.util.ArrayList<com.google.gerrit.reviewdb.ApprovalCategoryValue>(); vals.add(com.google.gerrit.server.schema.SchemaCreator.value(cat, 2, "Upload permission")); vals.add(com.google.gerrit.server.schema.SchemaCreator.value(cat, 1, "Read access")); vals.add(com.google.gerrit.server.schema.SchemaCreator.value(cat, (-1), "No access")); c.approvalCategories().insert(java.util.Collections.singleton(cat)); c.approvalCategoryValues().insert(vals); final com.google.gerrit.reviewdb.RefRight.RefPattern pattern = new com.google.gerrit.reviewdb.RefRight.RefPattern(com.google.gerrit.reviewdb.RefRight.ALL); { final com.google.gerrit.reviewdb.RefRight read = new com.google.gerrit.reviewdb.RefRight(new com.google.gerrit.reviewdb.RefRight.Key(com.google.gerrit.server.schema.SchemaCreator.DEFAULT_WILD_NAME, pattern, cat.getId(), sConfig.anonymousGroupId)); read.setMaxValue(((short) (1))); read.setMinValue(((short) (1))); c.refRights().insert(java.util.Collections.singleton(read)); } { final com.google.gerrit.reviewdb.RefRight read = new com.google.gerrit.reviewdb.RefRight(new com.google.gerrit.reviewdb.RefRight.Key(com.google.gerrit.server.schema.SchemaCreator.DEFAULT_WILD_NAME, pattern, cat.getId(), sConfig.registeredGroupId)); read.setMaxValue(((short) (2))); read.setMinValue(((short) (1))); c.refRights().insert(java.util.Collections.singleton(read)); } { final com.google.gerrit.reviewdb.RefRight read = new com.google.gerrit.reviewdb.RefRight(new com.google.gerrit.reviewdb.RefRight.Key(com.google.gerrit.server.schema.SchemaCreator.DEFAULT_WILD_NAME, pattern, cat.getId(), sConfig.adminGroupId)); read.setMaxValue(((short) (1))); read.setMinValue(((short) (1))); c.refRights().insert(java.util.Collections.singleton(read)); } }

public com.google.gerrit.server.patch.IntraLineDiff.Status getStatus() { return status; }
@java.lang.Override protected void onLoad() { super.onLoad(); com.google.gerrit.client.account.AccountApi.getAgreements("self", new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.AgreementInfo>>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.AgreementInfo> result) { if (isAttached()) { mySigned = new java.util.HashSet<>(); for (com.google.gerrit.client.account.AgreementInfo info : com.google.gerrit.client.rpc.Natives.asList(result)) { mySigned.add(info.name()); } postRPC(); } } }); Gerrit.SYSTEM_SVC.contributorAgreements(new com.google.gerrit.client.rpc.GerritCallback<java.util.List<com.google.gerrit.common.data.ContributorAgreement>>() { @java.lang.Override public void onSuccess(final java.util.List<com.google.gerrit.common.data.ContributorAgreement> result) { if (isAttached()) { available = result; postRPC(); } } }); }

public java.util.Collection<com.google.gerrit.reviewdb.client.SubmoduleSubscription> superProjectSubscriptionsForSubmoduleBranch(com.google.gerrit.reviewdb.client.Branch.NameKey branch, com.google.gerrit.server.git.MergeOpRepoManager orm) throws java.io.IOException { logDebug(("Calculating possible superprojects for " + branch)); java.util.Collection<com.google.gerrit.reviewdb.client.SubmoduleSubscription> ret = new java.util.ArrayList<>(); com.google.gerrit.reviewdb.client.Project.NameKey project = branch.getParentKey(); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.get(project).getConfig(); for (com.google.gerrit.common.data.SubscribeSection s : projectStateFactory.create(cfg).getSubscribeSections(branch)) { java.util.Collection<com.google.gerrit.reviewdb.client.Branch.NameKey> branches = getDestinationBranches(branch, s, orm); for (com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch : branches) { com.google.gerrit.server.git.GitModules m = gitmodulesFactory.create(targetBranch, updateId, orm); m.load(); for (com.google.gerrit.reviewdb.client.SubmoduleSubscription ss : m.subscribedTo(branch)) { if ((projectCache.get(ss.getSubmodule().getParentKey())) != null) { ret.add(ss); } } } } logDebug(((("Calculated superprojects for " + branch) + " are ") + ret)); return ret; }


@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) throws com.google.gwtorm.server.OrmException { if (sendMail) { try { com.google.gerrit.server.mail.ReplacePatchSetSender cm = replacePatchSetFactory.create(change.getId()); cm.setFrom(ctx.getUser().getAccountId()); cm.setPatchSet(patchSet, patchSetInfo); cm.setChangeMessage(changeMessage); cm.addReviewers(oldReviewers.get(ReviewerState.REVIEWER)); cm.addExtraCC(oldReviewers.get(ReviewerState.CC)); cm.send(); } catch (java.lang.Exception err) { com.google.gerrit.server.change.PatchSetInserter.log.error(("Cannot send email for new patch set on change " + (change.getId())), err); } } if (runHooks) { revisionCreated.fire(change, patchSet, ctx.getUser().getAccountId()); hooks.doPatchsetCreatedHook(change, patchSet, ctx.getDb()); } }
@org.junit.Test public void addReviewerToReviewableChangeInNoteDbNotifyOwnerReviewers() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); forAll(( adder) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accounts.create("added", "added@example.com", "added"); addReviewer(adder, sc.changeId, sc.owner, reviewer.email, com.google.gerrit.acceptance.server.mail.OWNER_REVIEWERS); assertThat(sender).sent("newchange", sc).to(reviewer).cc(sc.reviewer).cc(sc.reviewerByEmail, sc.ccerByEmail).notTo(sc.owner, sc.starrer); }); }
private <T extends com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput> void checkComments(com.google.gerrit.server.change.RevisionResource revision, java.util.Map<java.lang.String, java.util.List<T>> commentsPerPath) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { cleanUpComments(commentsPerPath); ensureCommentsAreAddable(revision, commentsPerPath); }
@org.junit.Test public void testGroupOptions() throws java.io.IOException { com.google.gerrit.reviewdb.client.AccountGroup.NameKey adminGroupName = new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("Administrators"); com.google.gerrit.reviewdb.client.AccountGroup adminGroup = groupCache.get(adminGroupName); java.lang.String url = ("/groups/" + (adminGroup.getGroupUUID().get())) + "/options"; com.google.gerrit.acceptance.RestResponse r = session.get(url); com.google.gerrit.acceptance.rest.group.GroupOptionsInfo options = new com.google.gson.Gson().fromJson(r.getReader(), new com.google.gson.reflect.TypeToken<com.google.gerrit.acceptance.rest.group.GroupOptionsInfo>() {}.getType()); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); assertEquals(adminGroup.isVisibleToAll(), com.google.gerrit.acceptance.rest.group.GroupAssert.toBoolean(options.visible_to_all)); r.consume(); com.google.gerrit.acceptance.rest.group.GroupPropertiesIT.GroupOptionsInput in = new com.google.gerrit.acceptance.rest.group.GroupPropertiesIT.GroupOptionsInput(); in.visible_to_all = !(adminGroup.isVisibleToAll()); r = session.put(url, in); com.google.gerrit.acceptance.rest.group.GroupOptionsInfo newOptions = new com.google.gson.Gson().fromJson(r.getReader(), new com.google.gson.reflect.TypeToken<com.google.gerrit.acceptance.rest.group.GroupOptionsInfo>() {}.getType()); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); assertEquals(in.visible_to_all, com.google.gerrit.acceptance.rest.group.GroupAssert.toBoolean(newOptions.visible_to_all)); adminGroup = groupCache.get(adminGroupName); assertEquals(in.visible_to_all, adminGroup.isVisibleToAll()); r.consume(); }
private Change.Id insertPatchSet(org.eclipse.jgit.lib.Repository git, org.eclipse.jgit.revwalk.RevWalk revWalk, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, org.eclipse.jgit.revwalk.RevCommit cherryPickCommit, com.google.gerrit.server.project.RefControl refControl) throws com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet.Id id = com.google.gerrit.server.ChangeUtil.nextPatchSetId(git, change.currentPatchSetId()); com.google.gerrit.reviewdb.client.PatchSet newPatchSet = new com.google.gerrit.reviewdb.client.PatchSet(id); newPatchSet.setCreatedOn(new java.sql.Timestamp(java.lang.System.currentTimeMillis())); newPatchSet.setUploader(change.getOwner()); newPatchSet.setRevision(new com.google.gerrit.reviewdb.client.RevId(cherryPickCommit.name())); patchSetInserterFactory.create(git, revWalk, change, cherryPickCommit).setPatchSet(newPatchSet).setRefControl(refControl).setMessage(buildChangeMessage(patchSetId, change)).insert(); return change.getId(); }
@java.lang.Override public void onFocus(com.google.gwt.event.dom.client.FocusEvent event) { setFocus(true); }
@org.junit.Test public void addReviewerToReviewableChangeInNoteDbByOwnerCcingSelfNotifyOwner() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); forAll(( adder) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accounts.create("added", "added@example.com", "added"); addReviewer(adder, sc.changeId, sc.owner, reviewer.email, com.google.gerrit.acceptance.server.mail.CC_ON_OWN_COMMENTS, com.google.gerrit.acceptance.server.mail.OWNER); assertThat(sender).notSent(); }); }
private com.google.gerrit.client.diff.CodeMirrorDemo.LineWidgetElementPair addPaddingWidget(net.codemirror.lib.CodeMirror cm, java.lang.String style, int line, int height, com.google.gwt.dom.client.Style.Unit unit) { com.google.gwt.dom.client.Element div = com.google.gwt.user.client.DOM.createDiv(); div.setClassName(style); div.getStyle().setHeight(height, unit); net.codemirror.lib.Configuration config = net.codemirror.lib.Configuration.create().set("coverGutter", true).set("above", (line == (-1))); net.codemirror.lib.LineWidget widget = cm.addLineWidget((line == (-1) ? 0 : line), div, config); return new com.google.gerrit.client.diff.CodeMirrorDemo.LineWidgetElementPair(widget, div); }

@java.lang.Override public void deleteVote(java.lang.String label) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteVote.apply(new com.google.gerrit.server.change.VoteResource(reviewer, label), null); } catch (com.google.gerrit.server.update.UpdateException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete vote", e); } }
@java.lang.Override public void onSuccess(final com.google.gerrit.client.info.ChangeInfo info) { info.init(); addExtensionPoints(info, initCurrentRevision(info)); final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = info.revision(revision); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); loadCommit(rev, group); group.addListener(new com.google.gerrit.client.rpc.GerritCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { if (((base) == null) && ((rev.commit().parents().length()) > 1)) { base = com.google.gerrit.client.Gerrit.getUserPreferences().defaultBaseForMerges().getBase(); } loadConfigInfo(info, base); } }); group.done(); }
@java.lang.Override public com.google.gerrit.reviewdb.com.google.gwtorm<?>[] members() { return new com.google.gwtorm.client.Key<?>[]{ projectName }; }


protected com.google.gerrit.server.notedb.ChangeNotes newNotes(com.google.gerrit.reviewdb.client.Change c) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes(repoManager, com.google.gerrit.server.notedb.AbstractChangeNotesTest.MIGRATION, allUsers, c).load(); }
@java.lang.Override public void onTimeout(org.eclipse.jetty.continuation.Continuation self) { executor.remove(this); }
private void parse(org.eclipse.jgit.revwalk.RevCommit commit) throws org.eclipse.jgit.errors.ConfigInvalidException { if ((status) == null) { status = parseStatus(commit); } com.google.gerrit.reviewdb.client.PatchSet.Id psId = parsePatchSetId(commit); com.google.gerrit.reviewdb.client.Account.Id accountId = parseIdent(commit); parseChangeMessage(psId, accountId, commit); if ((topic) == null) { topic = parseTopic(commit); } parseHashtags(commit); if (submitRecords.isEmpty()) { parseSubmitRecords(commit.getFooterLines(com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_SUBMITTED_WITH)); } for (java.lang.String line : commit.getFooterLines(com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_LABEL)) { parseApproval(psId, accountId, commit, line); } for (com.google.gerrit.server.notedb.ReviewerStateInternal state : com.google.gerrit.server.notedb.ReviewerStateInternal.values()) { for (java.lang.String line : commit.getFooterLines(state.getFooterKey())) { parseReviewer(state, line); } } }

private com.google.gerrit.server.patch.ComparisonType getComparisonType(org.eclipse.jgit.revwalk.RevObject a, org.eclipse.jgit.revwalk.RevCommit b) { for (int i = 0; i < (b.getParentCount()); i++) { if (b.getParent(i).equals(a)) { return com.google.gerrit.server.patch.ComparisonType.againstParent((i + 1)); } } if (((key.getOldId()) == null) && ((b.getParentCount()) > 0)) { return com.google.gerrit.server.patch.ComparisonType.againstAutoMerge(); } return com.google.gerrit.server.patch.ComparisonType.againstOtherPatchSet(); }


private java.util.List<java.util.List<com.google.gerrit.extensions.common.ChangeInfo>> query() throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { if (imp.isDisabled()) { throw new com.google.gerrit.server.query.QueryParseException("query disabled"); } if (((queries) == null) || (queries.isEmpty())) { queries = java.util.Collections.singletonList("status:open"); } else if ((queries.size()) > 10) { throw new com.google.gerrit.server.query.QueryParseException("limit of 10 queries"); } int cnt = queries.size(); java.util.List<com.google.gerrit.server.query.QueryResult<com.google.gerrit.server.query.change.ChangeData>> results = imp.query(qb.parse(queries)); java.util.List<java.util.List<com.google.gerrit.extensions.common.ChangeInfo>> res = json.create(options).formatQueryResults(results); for (int n = 0; n < cnt; n++) { java.util.List<com.google.gerrit.extensions.common.ChangeInfo> info = res.get(n); if (results.get(n).more()) { info.get(((info.size()) - 1))._moreChanges = true; } } return res; }
private void assertEmptyCommit(java.lang.String projectName, java.lang.String... refs) throws java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName)); org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo); org.eclipse.jgit.treewalk.TreeWalk tw = new org.eclipse.jgit.treewalk.TreeWalk(repo); try { for (java.lang.String ref : refs) { org.eclipse.jgit.revwalk.RevCommit commit = rw.lookupCommit(repo.getRef(ref).getObjectId()); rw.parseBody(commit); tw.addTree(commit.getTree()); assertThat(tw.next()).isFalse(); tw.reset(); } } finally { rw.release(); repo.close(); } }
public static void submit(int id, java.lang.String commit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.SubmitInfo> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.call(id, commit, "submit").post(in, cb); }
@java.lang.Override public com.google.gerrit.server.patch.IntraLineDiff load(com.google.gerrit.server.patch.IntraLineDiffKey key) throws java.lang.Exception { com.google.gerrit.server.patch.IntraLineWorkerPool.Worker w = workerPool.acquire(); com.google.gerrit.server.patch.IntraLineWorkerPool.Worker.Result r = w.computeWithTimeout(key, timeoutMillis); if (r == (IntraLineWorkerPool.Worker.Result.TIMEOUT)) { return new com.google.gerrit.server.patch.IntraLineDiff(IntraLineDiff.Status.TIMEOUT); } workerPool.release(w); if ((r.error) != null) { throw r.error; } return r.diff; }
private static org.eclipse.jgit.diff.RawTextComparator comparatorFor(com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace ws) { switch (ws) { case IGNORE_ALL_SPACE : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_ALL; case IGNORE_SPACE_AT_EOL : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_TRAILING; case IGNORE_SPACE_CHANGE : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_CHANGE; case IGNORE_NONE : default : return org.eclipse.jgit.diff.RawTextComparator.DEFAULT; } }
public java.lang.String getNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.get(accountId); java.lang.String name = who.getAccount().getFullName(); java.lang.String email = who.getAccount().getPreferredEmail(); if ((name != null) && (email != null)) { return ((name + " <") + email) + ">"; } else if (name != null) { return name; } else if (email != null) { return email; } else { return ((args.anonymousCowardName) + " #") + accountId; } }
@org.junit.Test public void listNoChildren() throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = GET((("/projects/" + (allProjects.get())) + "/children/")); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); java.util.List<com.google.gerrit.extensions.common.ProjectInfo> projectInfoList = com.google.gerrit.acceptance.rest.project.ListChildProjectsIT.toProjectInfoList(r); assertTrue(((projectInfoList.size()) == 2)); }
@java.lang.Override public org.eclipse.jgit.transport.ReceivePack create(javax.servlet.http.HttpServletRequest req, org.eclipse.jgit.lib.Repository db) throws org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException { final com.google.gerrit.server.project.ProjectControl pc = ((com.google.gerrit.server.project.ProjectControl) (req.getAttribute(com.google.gerrit.httpd.GitOverHttpServlet.ATT_CONTROL))); if (!((pc.getCurrentUser()) instanceof com.google.gerrit.server.IdentifiedUser)) { throw new org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException(); } final com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (pc.getCurrentUser())); final com.google.gerrit.server.git.ReceiveCommits rc = factory.create(pc, db); rc.getReceivePack().setRefLogIdent(user.newRefLogIdent()); req.setAttribute(com.google.gerrit.httpd.GitOverHttpServlet.ATT_RC, rc); session.get().setAccessPath(AccessPath.GIT); return rc.getReceivePack(); }
public com.google.gwtjsonrpc.client.VoidResult run(com.google.gerrit.client.reviewdb.ReviewDb db) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.client.reviewdb.Account me = db.accounts().get(com.google.gerrit.client.rpc.Common.getAccountId()); me.setFullName(fullName); me.setPreferredEmail(emailAddr); me.setContactInformation(info); db.accounts().update(java.util.Collections.singleton(me)); com.google.gerrit.client.rpc.Common.getAccountCache().invalidate(me.getId()); return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }
@java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.server.config.EXTERNAL_CAPABILITY_KIND); bind(com.google.gerrit.server.config.EXTERNAL_CAPABILITY_KIND).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named("startreplication")).toInstance(new com.google.gerrit.extensions.config.CapabilityDefinition() { @java.lang.Override public java.lang.String getName() { return "startReplication"; } @java.lang.Override public java.lang.String getDescription() { return "Start Replication"; } }); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.StarredChange rsrc, com.google.gerrit.server.account.StarredChanges.EmptyInput in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if ((self.get()) != (rsrc.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed remove starred change"); } dbProvider.get().starredChanges().delete(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.StarredChange(new com.google.gerrit.reviewdb.client.StarredChange.Key(rsrc.getUser().getAccountId(), rsrc.getChange().getId())))); return com.google.gerrit.extensions.restapi.Response.none(); }
public java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> draftByChange(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gwtorm.server.OrmException { if (!(migration.readChanges())) { return com.google.gerrit.server.PatchLineCommentsUtil.sort(com.google.gerrit.server.PatchLineCommentsUtil.byCommentStatus(db.patchComments().byChange(notes.getChangeId()), Status.DRAFT)); } java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments = com.google.common.collect.Lists.newArrayList(); java.lang.Iterable<java.lang.String> filtered = getDraftRefs(notes.getChangeId()); for (java.lang.String refName : filtered) { com.google.gerrit.reviewdb.client.Account.Id account = Account.Id.fromRefPart(refName); if (account != null) { comments.addAll(draftByChangeAuthor(db, notes, account)); } } return com.google.gerrit.server.PatchLineCommentsUtil.sort(comments); }
public com.google.gerrit.testutil.InMemoryDatabase create() throws com.google.gwtorm.client.OrmException { if (!(created)) { created = true; final com.google.gerrit.reviewdb.ReviewDb c = open(); try { new com.google.gerrit.server.schema.SchemaCreator(new java.io.File("."), schemaVersion).create(c); } finally { c.close(); } } return this; }

@java.lang.Override protected void configure() { bind(java.lang.String.class).annotatedWith(com.google.gerrit.extensions.annotations.PluginName.class).toInstance(pluginName); }
private static boolean isJson(byte[] raw, int offset) { return ((raw[offset]) == '{') || ((raw[offset]) == '['); }

static void postSignIn(final boolean success) { final com.google.gerrit.client.SignInDialog d = com.google.gerrit.client.SignInDialog.current; assert d != null; if (success) { com.google.gerrit.client.Gerrit.postSignIn(); d.hide(); if ((d.callback) != null) { d.callback.onSuccess(null); } } else { d.hide(); } }
@java.lang.Override public void onGitReferenceUpdated(final com.googlesource.gerrit.plugins.refprotection.Event event) { if (isRelevantRef(event)) { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(event.getProjectName()); try { com.google.gerrit.server.project.ProjectResource project = new com.google.gerrit.server.project.ProjectResource(projectControl.controlFor(nameKey, user)); if ((isRefDeleted(event)) || (isNonFastForwardUpdate(event, project))) { createBackupBranch(event, project); } } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.googlesource.gerrit.plugins.refprotection.RefUpdateListener.log.error(e.getMessage(), e); } } }
boolean isSingleProjectMatch() { boolean ret = (projects.length) == 1; if (ret) { java.lang.String projectMatch = projects[0]; if ((com.googlesource.gerrit.plugins.replication.Destination.isRE(projectMatch)) || (com.googlesource.gerrit.plugins.replication.Destination.isWildcard(projectMatch))) { ret = false; } } return ret; }
@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.EditPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("input must be provided"); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdate.create().update("Set Diff Preferences via API", id, ( u) -> u.setEditPreferences(input)); return accountCache.get(id).getEditPreferences(); }
@org.junit.Test public void treeDiffLog() throws java.lang.Exception { java.lang.String contents1 = "foo\n"; java.lang.String contents2 = "foo\ncontents\n"; org.eclipse.jgit.revwalk.RevCommit c1 = repo.update("master", repo.commit().add("foo", contents1)); org.eclipse.jgit.revwalk.RevCommit c2 = repo.update("master", repo.commit().parent(c1).add("foo", contents2)); repo.getRevWalk().parseBody(c1); repo.getRevWalk().parseBody(c2); Log log = buildJson("/repo/+log/master", com.google.gitiles.LogServletTest.LOG.getType(), "&name-status=1"); assertThat(log.log).hasSize(2); Commit jc2 = log.log.get(0); verifyJsonCommit(jc2, c2); assertThat(jc2.treeDiff).hasSize(1); assertThat(jc2.treeDiff.get(0).type).isEqualTo("modify"); assertThat(jc2.treeDiff.get(0).oldPath).isEqualTo("foo"); assertThat(jc2.treeDiff.get(0).newPath).isEqualTo("foo"); Commit jc1 = log.log.get(1); verifyJsonCommit(jc1, c1); assertThat(jc1.treeDiff).hasSize(1); assertThat(jc1.treeDiff.get(0).type).isEqualTo("add"); assertThat(jc1.treeDiff.get(0).oldPath).isEqualTo("/dev/null"); assertThat(jc1.treeDiff.get(0).newPath).isEqualTo("foo"); }
com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, notesFactory, changeDataFactory, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, listChildProjects, submitDryRun, conflictsCache, index, indexConfig, listMembers, starredChangesUtil, accountCache, allowsDrafts, notesMigration); }
static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { protected void configure() { persist(com.googlesource.gerrit.plugins.quota.MaxRepositorySizeQuota.REPO_SIZE_CACHE, Project.NameKey.class, java.util.concurrent.atomic.AtomicLong.class).loader(com.googlesource.gerrit.plugins.quota.MaxRepositorySizeQuota.Loader.class).expireAfterWrite(1, java.util.concurrent.TimeUnit.DAYS); } }; }
com.google.gerrit.client.diff.LineMapper.LineOnOtherInfo lineOnOther(com.google.gerrit.client.diff.DisplaySide side, int line) { return getChunkManager().getLineMapper().lineOnOther(side, line); }
@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId rev = getRevision(); if (rev == null) { loadDefaults(); return; } org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(reader); try (com.google.gerrit.server.notedb.ChangeNotesParser parser = new com.google.gerrit.server.notedb.ChangeNotesParser(change, rev, walk, repoManager)) { parser.parseAll(); if ((parser.status) != null) { change.setStatus(parser.status); } approvals = parser.buildApprovals(); changeMessages = parser.buildMessages(); commentsForBase = com.google.common.collect.ImmutableListMultimap.copyOf(parser.commentsForBase); commentsForPS = com.google.common.collect.ImmutableListMultimap.copyOf(parser.commentsForPs); noteMap = parser.commentNoteMap; ImmutableSetMultimap.Builder<com.google.gerrit.server.notedb.ReviewerState, com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.ImmutableSetMultimap.builder(); for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.notedb.ReviewerState> e : parser.reviewers.entrySet()) { reviewers.put(e.getValue(), e.getKey()); } this.reviewers = reviewers.build(); this.allPastReviewers = com.google.common.collect.ImmutableList.copyOf(parser.allPastReviewers); submitRecords = com.google.common.collect.ImmutableList.copyOf(parser.submitRecords); } catch (java.text.ParseException e1) { throw new java.io.IOException(e1); } finally { walk.release(); } }

@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "suggest.maxSuggestedReviewers", value = "2") public void suggestReviewersMaxNbrSuggestions() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo> reviewers = suggestReviewers(changeId, "user", 5); assertEquals(2, reviewers.size()); }
com.google.common.util.concurrent.CheckedFuture<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.server.git.InsertException> insertPatchSet() throws java.io.IOException { rp.getRevWalk().parseBody(newCommit); final java.lang.Thread caller = java.lang.Thread.currentThread(); com.google.common.util.concurrent.ListenableFuture<com.google.gerrit.reviewdb.client.PatchSet.Id> future = changeUpdateExector.submit(requestScopePropagator.wrap(new java.util.concurrent.Callable<com.google.gerrit.reviewdb.client.PatchSet.Id>() { @java.lang.Override public PatchSet.Id call() throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { try { if (caller == (java.lang.Thread.currentThread())) { return insertPatchSet(db); } else { com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open(); try { return insertPatchSet(db); } finally { db.close(); } } } finally { synchronized(replaceProgress) { replaceProgress.update(1); } } } })); return com.google.common.util.concurrent.Futures.makeChecked(future, com.google.gerrit.server.git.ReceiveCommits.INSERT_EXCEPTION); }

@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { if (((addedReviewers) != null) || ((addedCCs) != null)) { if ((addedReviewers) == null) { addedReviewers = new java.util.ArrayList(); } if ((addedCCs) == null) { addedCCs = new java.util.ArrayList(); } emailReviewers(rsrc.getChange(), com.google.common.collect.Lists.transform(addedReviewers, ( r) -> r.getAccountId()), addedCCs, notify, accountsToNotify); if (!(addedReviewers.isEmpty())) { java.util.List<com.google.gerrit.reviewdb.client.Account> reviewers = com.google.common.collect.Lists.transform(addedReviewers, ( psa) -> com.google.gerrit.server.change.accountCache.get(psa.getAccountId()).getAccount()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, ctx.getAccount(), ctx.getWhen()); } } }

private java.util.jar.Manifest getPluginManifest(com.google.gerrit.server.plugins.PluginScanner scanner) throws com.google.gerrit.server.plugins.InvalidPluginException { try { return scanner.getManifest(); } catch (java.io.IOException e) { throw new com.google.gerrit.server.plugins.InvalidPluginException("Cannot get plugin manifest", e); } }
private boolean matchCriteria(com.google.gerrit.server.config.PluginConfig config, java.lang.String criteria, java.lang.String value, boolean allowRegex, boolean refMatcher) { boolean match = true; for (java.lang.String s : config.getStringList(criteria)) { if ((allowRegex && (com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig.match(value, s, refMatcher))) || ((!allowRegex) && (s.equals(value)))) { return true; } match = false; } return match; }
@org.junit.Test public void noConflictingChanges() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(git, true); createChange(git, false); java.util.Set<java.lang.String> changes = queryConflictingChanges(change); assertEquals(0, changes.size()); }
@java.lang.Override public boolean deleteChangeFromIndex(final int changeId) { return new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.Request((("delete change " + changeId) + " from index")) { @java.lang.Override com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult send() throws java.io.IOException { return httpSession.delete(buildIndexEndpoint(changeId)); } }.execute(); }

@java.lang.Override public java.lang.String[] getList(java.lang.String section, java.lang.String subsection, java.lang.String name) { return java.util.Arrays.stream(sec.getStringList(section, subsection, name)).map(codec::decode).toArray(java.lang.String[]::new); }
void createNotes(java.util.List<com.google.gerrit.reviewdb.client.Change> changes, org.eclipse.jgit.lib.ProgressMonitor monitor) throws com.google.gwtorm.server.OrmException, java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(git)) { if (monitor == null) { monitor = org.eclipse.jgit.lib.NullProgressMonitor.INSTANCE; } for (com.google.gerrit.reviewdb.client.Change c : changes) { monitor.update(1); com.google.gerrit.reviewdb.client.PatchSet ps = reviewDb.patchSets().get(c.currentPatchSetId()); org.eclipse.jgit.lib.ObjectId commitId = org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get()); org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(commitId); getNotes().set(commitId, createNoteContent(ps)); getMessage().append("* ").append(commit.getShortMessage()).append("\n"); } } }
@java.lang.Override public com.google.gerrit.server.change.CheckResult apply(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.server.change.CheckResult result = new com.google.gerrit.server.change.CheckResult(); result.messages = checkerProvider.get().check(rsrc.getChange()); try { result.change = json.format(rsrc); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = "Error rendering final ChangeInfo"; com.google.gerrit.server.change.Check.log.warn(msg, e); result.messages.add(msg); result.change = com.google.gerrit.server.change.Check.basicChangeInfo(rsrc.getChange()); } return result; }
public static com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> create(java.lang.String label, com.google.gerrit.common.data.SubmitRecord.Label.Status status, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts) { java.lang.String lowerLabel = label.toLowerCase(); if ((accounts == null) || (accounts.isEmpty())) { return new com.google.gerrit.server.query.change.SubmitRecordPredicate((((status.name()) + ',') + lowerLabel)); } return com.google.gerrit.server.query.Predicate.or(accounts.stream().map(( a) -> new com.google.gerrit.server.query.change.SubmitRecordPredicate((((((status.name()) + ',') + lowerLabel) + ',') + (a.get())))).collect(java.util.stream.Collectors.toList())); }

@java.lang.Override public java.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { final com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, username); final com.google.gerrit.reviewdb.client.AccountExternalId user = db.accountExternalIds().get(key); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; } final java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = new java.util.ArrayList<>(4); for (com.google.gerrit.reviewdb.client.AccountSshKey k : db.accountSshKeys().byAccount(user.getAccountId())) { if (k.isValid()) { add(db, kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } return java.util.Collections.unmodifiableList(kl); } }

@java.lang.Override public com.google.gerrit.extensions.common.WebLinkInfo getProjectWeblink(java.lang.String projectName) { return new com.google.gerrit.extensions.common.WebLinkInfo(name, null, java.lang.String.format("%s/%s", baseUrl, projectName), target); }
private void checkLabels(com.google.gerrit.server.change.RevisionResource rsrc, boolean strict, java.util.Map<java.lang.String, java.lang.Short> labels) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.common.data.LabelTypes types = rsrc.getControl().getLabelTypes(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions(); java.util.Iterator<java.util.Map.Entry<java.lang.String, java.lang.Short>> itr = labels.entrySet().iterator(); while (itr.hasNext()) { java.util.Map.Entry<java.lang.String, java.lang.Short> ent = itr.next(); com.google.gerrit.common.data.LabelType lt = types.byLabel(ent.getKey()); if (lt == null) { if (strict) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("label \"%s\" is not a configured label", ent.getKey())); } itr.remove(); continue; } if (((ent.getValue()) == null) || ((ent.getValue()) == 0)) { continue; } if ((lt.getValue(ent.getValue())) == null) { if (strict) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("label \"%s\": %d is not a valid value", ent.getKey(), ent.getValue())); } itr.remove(); continue; } short val = ent.getValue(); try { perm.check(new com.google.gerrit.server.permissions.LabelPermission.WithValue(lt, val)); } catch (com.google.gerrit.extensions.restapi.AuthException e) { if (strict) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format("Applying label \"%s\": %d is restricted", lt.getName(), val)); } ent.setValue(perm.squashThenCheck(lt, val)); } } }
com.googlesource.gerrit.plugins.webhooks.PostTask create(@com.google.inject.assistedinject.Assisted("url") java.lang.String url, com.googlesource.gerrit.plugins.webhooks.EventProcessor processor);

@java.lang.Override protected void configure() { bind(com.google.gerrit.server.index.ChangeIndexer.class).to(com.google.gerrit.server.index.ChangeIndexerImpl.class); bind(com.google.gerrit.server.query.change.IndexRewrite.class).to(com.google.gerrit.server.query.change.IndexRewriteImpl.class); bind(new com.google.inject.TypeLiteral<com.google.gerrit.server.index.Schema<com.google.gerrit.server.query.change.ChangeData>>() {}).toInstance(com.google.gerrit.server.index.ChangeSchemas.getLatestRelease()); com.google.gerrit.extensions.registration.DynamicSet.setOf(binder(), com.google.gerrit.server.index.ChangeIndex.class); com.google.gerrit.extensions.registration.DynamicItem.itemOf(binder(), com.google.gerrit.server.index.ChangeIndex.class); }
public static void setCommentRevId(com.google.gerrit.reviewdb.client.PatchLineComment c, com.google.gerrit.server.patch.PatchListCache cache, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException { if ((c.getRevId()) != null) { return; } com.google.gerrit.server.patch.PatchList patchList; try { patchList = cache.get(change, ps); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { throw new com.google.gwtorm.server.OrmException(e); } c.setRevId(((c.getSide()) == ((short) (0)) ? new com.google.gerrit.reviewdb.client.RevId(org.eclipse.jgit.lib.ObjectId.toString(patchList.getOldId())) : new com.google.gerrit.reviewdb.client.RevId(org.eclipse.jgit.lib.ObjectId.toString(patchList.getNewId())))); }
public com.google.gerrit.common.data.AccountProjectWatchInfo run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.Project.NameKey nameKey = new com.google.gerrit.reviewdb.Project.NameKey(projectName); final com.google.gerrit.server.project.ProjectControl ctl = projectControlFactory.validateFor(nameKey); final com.google.gerrit.reviewdb.AccountProjectWatch watch = new com.google.gerrit.reviewdb.AccountProjectWatch(new com.google.gerrit.reviewdb.AccountProjectWatch.Key(((com.google.gerrit.server.IdentifiedUser) (ctl.getCurrentUser())).getAccountId(), nameKey)); db.accountProjectWatches().insert(java.util.Collections.singleton(watch)); return new com.google.gerrit.common.data.AccountProjectWatchInfo(watch, ctl.getProject()); }



java.lang.Runnable maybeNextVimSearch(final net.codemirror.lib.CodeMirror cm) { return new java.lang.Runnable() { @java.lang.Override public void run() { if (cm.vim().hasSearchHighlight()) { cm.vim().handleKey("n"); } else { getChunkManager().diffChunkNav(cm, Direction.NEXT).run(); } } }; }
@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteBranch.apply(resource(), new com.google.gerrit.server.project.DeleteBranch.Input()); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete branch", e); } }


private static java.lang.String times(int n) { return (n + " time") + (n != 1 ? "s" : ""); }
void setSyntaxHighlighting(boolean b) { net.codemirror.mode.ModeInfo modeInfo = net.codemirror.mode.ModeInfo.findMode(content.getContentType(), path); final java.lang.String mode = (modeInfo != null) ? modeInfo.mode() : null; if ((b && (mode != null)) && (!(mode.isEmpty()))) { injectMode(mode, new com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { cm.setOption("mode", mode); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { prefs.syntaxHighlighting(false); } }); } else { cm.setOption("mode", ((java.lang.String) (null))); } }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { setOpen((!(isOpen()))); }
private void initUI() { addStyleName("gerrit-ChangeScreen"); descriptionBlock = new com.google.gerrit.client.changes.ChangeDescriptionBlock(); add(descriptionBlock); dependencies = new com.google.gerrit.client.changes.ChangeTable(); dependsOn = new com.google.gerrit.client.changes.ChangeTable.Section(Util.C.changeScreenDependsOn()); neededBy = new com.google.gerrit.client.changes.ChangeTable.Section(Util.C.changeScreenNeededBy()); dependencies.addSection(dependsOn); dependencies.addSection(neededBy); dependenciesPanel = new com.google.gwt.user.client.ui.DisclosurePanel(Util.C.changeScreenDependencies()); dependenciesPanel.setContent(dependencies); dependenciesPanel.setWidth("95%"); add(dependenciesPanel); approvals = new com.google.gerrit.client.changes.ApprovalTable(); approvalsPanel = new com.google.gwt.user.client.ui.DisclosurePanel(Util.C.changeScreenApprovals()); approvalsPanel.setContent(com.google.gerrit.client.changes.ChangeScreen.wrap(approvals)); dependenciesPanel.setWidth("95%"); add(approvalsPanel); patchSetPanels = new com.google.gwt.user.client.ui.FlowPanel(); add(patchSetPanels); messagesContent = new com.google.gwt.user.client.ui.FlowPanel(); messagesContent.setStyleName("gerrit-ChangeMessages"); messagesPanel = new com.google.gwt.user.client.ui.DisclosurePanel(Util.C.changeScreenMessages()); messagesPanel.setContent(messagesContent); add(messagesPanel); }

public com.google.gerrit.server.account.AuthResult unlink(com.google.gerrit.reviewdb.client.Account.Id from, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = com.google.gerrit.server.account.AccountManager.id(who); com.google.gerrit.reviewdb.client.AccountExternalId extId = getAccountExternalId(key); if (extId != null) { if (!(extId.getAccountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException((("Identity '" + (key.get())) + "' in use by another account")); } db.accountExternalIds().delete(java.util.Collections.singleton(extId)); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(from); if (((a.getPreferredEmail()) != null) && (a.getPreferredEmail().equals(who.getEmailAddress()))) { a.setPreferredEmail(null); db.accounts().update(java.util.Collections.singleton(a)); } byEmailCache.evict(who.getEmailAddress()); byIdCache.evict(from); } } else { throw new com.google.gerrit.server.account.AccountException((("Identity '" + (key.get())) + "' not found")); } return new com.google.gerrit.server.account.AuthResult(from, key, false); } }

@java.lang.Override public java.util.Set<com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey> lookupGroups(java.lang.String name) { final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey> out; final java.util.Map<java.lang.String, java.lang.String> params = java.util.Collections.<java.lang.String, java.lang.String>emptyMap(); out = new java.util.HashSet<com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey>(); try { final javax.naming.directory.DirContext ctx = helper.open(); try { final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema = helper.getSchema(ctx); final com.google.gerrit.common.data.ParamertizedString filter = com.google.gerrit.common.data.ParamertizedString.asis(schema.groupPattern.replace(com.google.gerrit.server.auth.ldap.LdapRealm.GROUPNAME, name).toString()); for (java.lang.String groupBase : schema.groupBases) { final com.google.gerrit.server.auth.ldap.LdapQuery query = new com.google.gerrit.server.auth.ldap.LdapQuery(groupBase, schema.groupScope, filter, java.util.Collections.<java.lang.String>emptySet()); for (com.google.gerrit.server.auth.ldap.LdapQuery.Result res : query.query(ctx, params)) { out.add(new com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey(res.getDN())); } } } finally { try { ctx.close(); } catch (javax.naming.NamingException e) { com.google.gerrit.server.auth.ldap.LdapRealm.log.warn("Cannot close LDAP query handle", e); } } } catch (javax.naming.NamingException e) { com.google.gerrit.server.auth.ldap.LdapRealm.log.warn("Cannot query LDAP for groups matching requested name", e); } return out; }
public static java.lang.String toPatch(java.lang.String type, com.google.gerrit.client.DiffObject diffBase, com.google.gerrit.reviewdb.client.Patch.Key id) { return com.google.gerrit.client.Dispatcher.toPatch(type, diffBase, id.getParentKey(), id.get(), null, 0); }
@org.junit.Test public void addReviewerToReviewableChangeInNoteDbNotifyOwnerReviewers() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); forAll(( adder) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accounts.create("added", "added@example.com", "added"); addReviewer(adder, sc.changeId, sc.owner, reviewer.email, com.google.gerrit.acceptance.server.mail.OWNER_REVIEWERS); assertThat(sender).sent("newchange", sc).to(reviewer).cc(sc.reviewer).cc(sc.reviewerByEmail, sc.ccerByEmail).noOneElse(); }); }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteGroupsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("failed to log delete groups from group event", e); } } }
public com.google.gerrit.reviewdb.client.AccountSshKey addKey(java.lang.String pub) { checkState(((keys) != null), "SSH keys not loaded yet"); int seq = (keys.isEmpty()) ? 1 : (keys.lastKey()) + 1; com.google.gerrit.reviewdb.client.AccountSshKey key = new com.google.gerrit.reviewdb.client.AccountSshKey(new com.google.gerrit.reviewdb.client.AccountSshKey.Id(accountId, seq), pub); keys.put(seq, com.google.common.base.Optional.of(key)); return key; }
private void insertChange(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.PatchSet ps = ins.getPatchSet(); final com.google.gerrit.reviewdb.client.Account.Id me = currentUser.getAccountId(); final java.util.List<org.eclipse.jgit.revwalk.FooterLine> footerLines = commit.getFooterLines(); final com.google.gerrit.server.mail.MailUtil.MailRecipients recipients = new com.google.gerrit.server.mail.MailUtil.MailRecipients(); if ((magicBranch) != null) { recipients.add(magicBranch.getMailRecipients()); } recipients.add(getRecipientsFromFooters(accountResolver, ps, footerLines)); recipients.remove(me); ins.setReviewers(recipients.getReviewers()).insert(); created = true; workQueue.getDefaultQueue().submit(requestScopePropagator.wrap(new java.lang.Runnable() { @java.lang.Override public void run() { try { com.google.gerrit.server.mail.CreateChangeSender cm = createChangeSenderFactory.create(change); cm.setFrom(me); cm.setPatchSet(ps, ins.getPatchSetInfo()); cm.addReviewers(recipients.getReviewers()); cm.addExtraCC(recipients.getCcOnly()); cm.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.git.ReceiveCommits.log.error(("Cannot send email for new change " + (change.getId())), e); } } @java.lang.Override public java.lang.String toString() { return "send-email newchange"; } })); if (((magicBranch) != null) && (magicBranch.isSubmit())) { submit(projectControl.controlFor(change), ps); } }


@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroup createEntry(final com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) throws java.lang.Exception { final com.google.gerrit.reviewdb.server.ReviewDb db = schema.open(); try { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> r = db.accountGroups().byUUID(uuid).toList(); if ((r.size()) == 1) { return r.get(0); } else { return null; } } finally { db.close(); } }

public static void replyError(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res, int statusCode, java.lang.String msg, com.google.gerrit.extensions.restapi.CacheControl c, @com.google.gerrit.common.Nullable java.lang.Throwable err) throws java.io.IOException { if (err != null) { com.google.gerrit.util.http.RequestUtil.setErrorTraceAttribute(req, err); } com.google.gerrit.httpd.restapi.RestApiServlet.configureCaching(req, res, null, null, c); res.setStatus(statusCode); com.google.gerrit.httpd.restapi.RestApiServlet.replyText(req, res, msg); }



private void parseUpdate(final org.eclipse.jgit.transport.ReceiveCommand cmd) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canUpdate()) { if ((com.google.gerrit.server.git.ReceiveCommits.isHead(cmd)) && (!(isCommit(cmd)))) { return; } validateNewCommits(ctl, cmd); } else { com.google.gerrit.server.git.ReceiveCommits.reject(cmd, "can not update the reference as a fast forward"); } }


protected void add(final com.google.gerrit.extensions.api.changes.RecipientType rt, final com.google.gerrit.reviewdb.client.UserIdentity who) { if ((who != null) && ((who.getAccount()) != null)) { add(rt, who.getAccount()); } }
@java.lang.Override public int run() throws java.lang.Exception { mustHaveValidSite(); dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); limitThreads(); if ((version) == null) { version = com.google.gerrit.server.index.ChangeSchemas.getLatest().getVersion(); } com.google.gerrit.lifecycle.LifecycleManager dbManager = new com.google.gerrit.lifecycle.LifecycleManager(); dbManager.add(dbInjector); dbManager.start(); sysInjector = createSysInjector(); com.google.gerrit.lifecycle.LifecycleManager sysManager = new com.google.gerrit.lifecycle.LifecycleManager(); sysManager.add(sysInjector); sysManager.start(); index = sysInjector.getInstance(com.google.gerrit.server.index.IndexCollection.class).getSearchIndex(); index.markReady(false); index.deleteAll(); int result = indexAll(); index.markReady(true); sysManager.stop(); dbManager.stop(); return result; }
@org.junit.Test public void byLabelGroup() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); createAccount("user2"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject("repo"); java.lang.String g1 = createGroup("group1", "Administrators"); java.lang.String g2 = createGroup("group2", "Administrators"); gApi.groups().id(g1).addMembers("user1"); gApi.groups().id(g2).addMembers("user2"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo), user1); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change1.getId().get()).current().review(new com.google.gerrit.extensions.api.changes.ReviewInput().label("Code-Review", 1)); requestContext.setContext(newRequestContext(userId)); assertQuery("label:Code-Review=+1,group1", change1); assertQuery("label:Code-Review=+1,group=group1", change1); assertQuery("label:Code-Review=+1,user=user1", change1); assertQuery("label:Code-Review=+1,user=user2"); assertQuery("label:Code-Review=+1,group=group2"); }
boolean canPerform(com.google.gerrit.reviewdb.ApprovalCategory.Id actionId, short level) { final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> groups = getCurrentUser().getEffectiveGroups(); int val = java.lang.Integer.MIN_VALUE; java.util.List<com.google.gerrit.reviewdb.RefRight> allRights = new java.util.ArrayList<com.google.gerrit.reviewdb.RefRight>(); allRights.addAll(getLocalRights(actionId)); if (actionId.canInheritFromWildProject()) { allRights.addAll(getInheritedRights(actionId)); } java.util.Collections.sort(allRights, RefRight.REF_PATTERN_ORDER); for (com.google.gerrit.reviewdb.RefRight right : com.google.gerrit.server.project.RefControl.filterMostSpecific(allRights)) { if (groups.contains(right.getAccountGroupId())) { if ((val < 0) && ((right.getMaxValue()) > 0)) { val = right.getMaxValue(); } else { val = java.lang.Math.max(right.getMaxValue(), val); } } } return val >= level; }
@org.junit.Test public void testInalidPathSeparator() { for (char c : com.google.gerrit.httpd.GitWebConfigTest.SOME_INVALID_CHARACTERS.toCharArray()) { assertFalse(("invalid character accepted: " + c), com.google.gerrit.httpd.GitWebConfig.isValidPathSeparator(c)); } }

private com.google.gerrit.reviewdb.client.PatchLineComment newComment() { com.google.gerrit.reviewdb.client.PatchLineComment newComment = new com.google.gerrit.reviewdb.client.PatchLineComment(new com.google.gerrit.reviewdb.client.PatchLineComment.Key(comment.getKey().getParentKey(), null), comment.getLine(), com.google.gerrit.client.Gerrit.getUserAccount().getId(), comment.getKey().get()); newComment.setSide(comment.getSide()); return newComment; }
private static void checkConfig(org.eclipse.jgit.lib.Config cfg) { java.util.Set<java.lang.String> keys = new java.util.HashSet<>(); for (com.google.gerrit.server.notedb.NoteDbTable t : com.google.gerrit.server.notedb.NoteDbTable.values()) { keys.add(t.key()); } for (java.lang.String t : cfg.getSubsections(com.google.gerrit.server.notedb.ConfigNotesMigration.NOTE_DB)) { checkArgument(keys.contains(t.toLowerCase()), "invalid NoteDb table: %s", t); for (java.lang.String key : cfg.getNames(com.google.gerrit.server.notedb.ConfigNotesMigration.NOTE_DB, t)) { java.lang.String lk = key.toLowerCase(); checkArgument(((lk.equals(com.google.gerrit.server.notedb.ConfigNotesMigration.WRITE)) || (lk.equals(com.google.gerrit.server.notedb.ConfigNotesMigration.READ))), "invalid NoteDb key: %s.%s", t, key); } boolean write = cfg.getBoolean(com.google.gerrit.server.notedb.ConfigNotesMigration.NOTE_DB, t, com.google.gerrit.server.notedb.ConfigNotesMigration.WRITE, false); boolean read = cfg.getBoolean(com.google.gerrit.server.notedb.ConfigNotesMigration.NOTE_DB, t, com.google.gerrit.server.notedb.ConfigNotesMigration.READ, false); checkArgument((!(read && (!write))), "must have write enabled when read enabled: %s", t); } }


@org.junit.Test public void GetDiffPreferences() throws java.lang.Exception { com.google.gerrit.extensions.client.DiffPreferencesInfo result = get(); assertPrefsEqual(result, com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()); }


private void displayReadOnly(com.google.gerrit.common.data.ProjectAccess access) { this.access = access; accessEditor.setEditing(false); com.google.gwt.user.client.ui.UIObject.setVisible(editTools, ((!(access.getOwnerOf().isEmpty())) || (access.canUpload()))); edit.setEnabled(((!(access.getOwnerOf().isEmpty())) || (access.canUpload()))); cancel1.setVisible(false); com.google.gwt.user.client.ui.UIObject.setVisible(commitTools, false); driver.edit(access); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.restapi.BinaryResult> apply(com.google.gerrit.server.change.ChangeEditResource rsrc) throws java.io.IOException { try { com.google.gerrit.server.edit.ChangeEdit edit = rsrc.getChangeEdit(); return com.google.gerrit.extensions.restapi.Response.ok(fileContentUtil.getContent(rsrc.getControl().getProjectControl().getProjectState(), (base ? org.eclipse.jgit.lib.ObjectId.fromString(edit.getBasePatchSet().getRevision().get()) : edit.getEditCommit()), rsrc.getPath())); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException rnfe) { return com.google.gerrit.extensions.restapi.Response.none(); } }

@org.junit.Test public void lookUpFromCacheByEmail() throws java.lang.Exception { assertEmail(byEmailCache.get(admin.email), admin); java.lang.String email = "foo.bar@example.com"; externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(ExternalId.Key.parse("foo:bar"), admin.id, email)); assertEmail(byEmailCache.get(email), admin); assertThat(byEmailCache.get(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(byEmailCache.get(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(byEmailCache.get("non-existing@example.com")).isEmpty(); }
public com.google.gerrit.server.notedb.ChangeNotes create(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes(db, repoManager, migration, allUsersProvider, change).load(); }
private void preDisplay(final com.google.gerrit.common.data.PatchSetPublishDetail pubDetail, final com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.PatchSetPublishDetail> origCb) { com.google.gerrit.client.projects.ProjectApi.config(pubDetail.getChange().getProject()).get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.projects.ConfigInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ConfigInfo result) { commentLinkProcessor = new com.google.gerrit.client.ui.CommentLinkProcessor(result.commentlinks()); display(pubDetail); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { origCb.onFailure(caught); } }); }

@java.lang.Override protected void onLoad() { super.onLoad(); if ((patchSetDetail) == null) { Util.DETAIL_SVC.patchSetDetail(idSideB, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.common.data.PatchSetDetail>() { @java.lang.Override public void onSuccess(com.google.gerrit.common.data.PatchSetDetail result) { patchSetDetail = result; if ((fileList) == null) { fileList = new com.google.gerrit.client.changes.PatchTable(); fileList.display(result); patchIndex = fileList.indexOf(patchKey); topNav.display(patchIndex, getPatchScreenType(), fileList); bottomNav.display(patchIndex, getPatchScreenType(), fileList); } refresh(true); } }); } else { refresh(true); } }
public void setCopySelfOnEmails(boolean includeSelfOnEmail) { copySelfOnEmail = includeSelfOnEmail; }
@com.google.gwtorm.client.Relation com.google.gwtorm.data.PersonAccess people();

@com.google.gwt.uibinder.client.UiHandler("deleteRevision") void onDeleteRevision(@java.lang.SuppressWarnings("unused") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteDraftRevision())) { com.google.gerrit.client.change.ChangeActions.delete(changeId, revision, publish, deleteRevision); } }
@java.lang.Override public java.util.List<com.google.gerrit.reviewdb.client.Change> setValue(java.util.List<com.google.gerrit.reviewdb.client.Change> value) { throw new java.lang.UnsupportedOperationException(); }
public static java.util.List<com.google.gerrit.reviewdb.RefRight> filterMostSpecific(java.util.List<com.google.gerrit.reviewdb.RefRight> actionRights) { boolean sameRefPattern = true; java.util.List<com.google.gerrit.reviewdb.RefRight> mostSpecific = new java.util.ArrayList<com.google.gerrit.reviewdb.RefRight>(); java.lang.String currentRefPattern = null; int i = 0; while (sameRefPattern && (i < (actionRights.size()))) { if (currentRefPattern == null) { currentRefPattern = actionRights.get(i).getRefPattern(); mostSpecific.add(actionRights.get(i)); i++; } else { if (currentRefPattern.equals(actionRights.get(i).getRefPattern())) { mostSpecific.add(actionRights.get(i)); i++; } else { sameRefPattern = false; } } } return mostSpecific; }
public final org.eclipse.jgit.notes.NoteMap commitNewNotes(org.eclipse.jgit.notes.NoteMap notes, java.lang.String notesBranch, org.eclipse.jgit.lib.PersonIdent commitAuthor, java.lang.String commitMessage) throws java.io.IOException, org.eclipse.jgit.api.errors.ConcurrentRefUpdateException { this.overwrite = false; commitNotes(notes, notesBranch, commitAuthor, commitMessage); org.eclipse.jgit.notes.NoteMap newlyCreated = org.eclipse.jgit.notes.NoteMap.newEmptyMap(); for (org.eclipse.jgit.notes.Note n : notes) { if (((base) == null) || (!(base.contains(n)))) { newlyCreated.set(n, n.getData()); } } return newlyCreated; }


@java.lang.Override public com.google.gerrit.server.patch.PatchList get(com.google.gerrit.server.patch.PatchListKey key, com.google.gerrit.reviewdb.client.Project.NameKey project) throws com.google.gerrit.server.patch.PatchListNotAvailableException { try { return fileCache.get(key, fileLoaderFactory.create(key, project)); } catch (java.util.concurrent.ExecutionException | org.eclipse.jgit.errors.LargeObjectException e) { PatchListLoader.log.warn(("Error computing " + key), e); throw new com.google.gerrit.server.patch.PatchListNotAvailableException(e.getCause()); } }


protected Project.NameKey createProject(java.lang.String nameSuffix) throws com.google.gerrit.extensions.restapi.RestApiException { return createProject(nameSuffix, null); }
@org.junit.Test public void testNestedQuotes1() { java.lang.String comment = " > > prior\n > \n > next\n"; java.util.List<com.google.gerrit.server.mail.send.CommentFormatter.Block> result = com.google.gerrit.server.mail.send.CommentFormatter.parse(comment); assertThat(result).hasSize(1); assertBlock(result, 0, BlockType.QUOTE, "> prior\n\nnext"); }
public static java.lang.String nameEmail(com.google.gerrit.client.account.AccountInfo info) { java.lang.String name = info.name(); if ((name == null) || (name.trim().isEmpty())) { name = com.google.gerrit.client.Gerrit.getConfig().getAnonymousCowardName(); } java.lang.StringBuilder b = new java.lang.StringBuilder().append(name); if ((info.email()) != null) { b.append(" <").append(info.email()).append(">"); } else if ((info._account_id()) > 0) { b.append(" (").append(info._account_id()).append(")"); } return b.toString(); }
@java.lang.Override public com.google.gerrit.server.config.CacheResource parse(com.google.gerrit.server.config.ConfigResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try { java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.CommitsCollection.log.error(((("Cannot look up change for commit " + (commit.name())) + " in ") + project), e); } return isReachableFrom(state, repo, commit, repo.getAllRefs()); }
@java.lang.Override public org.eclipse.jgit.lib.Ref getRef(java.lang.String name) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.getRef(name); if (ref == null) { return null; } return refFilter.filter(com.google.common.collect.ImmutableMap.of(ref.getName(), ref), true).get(ref.getName()); }
@org.junit.Before public void setup() { when(cfg.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(cfg.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES); when(processor.process()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.CONTENT); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, session, cfg, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, processor); }
private com.google.gerrit.reviewdb.client.PatchSet updateDraftPatchSet(com.google.gerrit.server.change.RevisionResource rsrc) throws com.google.gwtorm.server.OrmException { return dbProvider.get().patchSets().atomicUpdate(rsrc.getPatchSet().getId(), new com.google.gwtorm.server.AtomicUpdate<com.google.gerrit.reviewdb.client.PatchSet>() { @java.lang.Override public com.google.gerrit.reviewdb.client.PatchSet update(com.google.gerrit.reviewdb.client.PatchSet patchset) { patchset.setDraft(false); return patchset; } }); }
@java.lang.Override protected void configure() { install(new com.googlesource.gerrit.plugins.xdocs.XDocLoader.Module()); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.ProjectWebLink.class).to(com.googlesource.gerrit.plugins.xdocs.XDocWebLink.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.BranchWebLink.class).to(com.googlesource.gerrit.plugins.xdocs.XDocWebLink.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.TopMenu.class).toInstance(new com.google.gerrit.extensions.webui.TopMenu() { @java.lang.Override public java.util.List<com.googlesource.gerrit.plugins.xdocs.MenuEntry> getEntries() { java.lang.StringBuilder url = new java.lang.StringBuilder(); url.append("/plugins/"); url.append(pluginName); url.append(XDocServlet.PATH_PREFIX); url.append("${projectName}/README.md"); return com.google.common.collect.Lists.newArrayList(new com.googlesource.gerrit.plugins.xdocs.MenuEntry(com.google.gerrit.extensions.webui.GerritTopMenu.PROJECTS, com.google.common.collect.Lists.newArrayList(new com.googlesource.gerrit.plugins.xdocs.MenuItem("Readme", url.toString())))); } }); }
@org.junit.Test public void preconditionsFail() throws java.lang.Exception { java.util.List<com.google.gerrit.reviewdb.client.Change.Id> cs = com.google.common.collect.ImmutableList.of(new com.google.gerrit.reviewdb.client.Change.Id(1)); java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> ps = com.google.common.collect.ImmutableList.of(new com.google.gerrit.reviewdb.client.Project.NameKey("p")); assertMigrationException("Cannot rebuild without noteDb.changes.write=true", ( b) -> b, NoteDbMigrator::rebuild); assertMigrationException("Cannot set both changes and projects", ( b) -> b.setChanges(cs).setProjects(ps), ( m) -> { }); assertMigrationException("Cannot set changes or projects during auto-migration", ( b) -> b.setChanges(cs), NoteDbMigrator::migrate); assertMigrationException("Cannot set changes or projects during auto-migration", ( b) -> b.setProjects(ps), NoteDbMigrator::migrate); setNotesMigrationState(NotesMigrationState.READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY); assertMigrationException("Migration has already progressed past the endpoint of the \"trial mode\" state", ( b) -> b.setTrialMode(true), NoteDbMigrator::migrate); setNotesMigrationState(NotesMigrationState.READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY); assertMigrationException("Cannot force rebuild changes; NoteDb is already the primary storage for some changes", ( b) -> b.setForceRebuild(true), NoteDbMigrator::migrate); }
@java.lang.Override public com.google.gerrit.server.account.GetPreferences.PreferenceInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("restricted to administrator"); } com.google.gerrit.reviewdb.client.Account a = db.get().accounts().get(rsrc.getUser().getAccountId()); if (a == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } try (org.eclipse.jgit.lib.Repository git = gitMgr.openRepository(allUsersName)) { com.google.gerrit.server.account.VersionedAccountPreferences p = com.google.gerrit.server.account.VersionedAccountPreferences.forUser(rsrc.getUser().getAccountId()); p.load(git); return new com.google.gerrit.server.account.GetPreferences.PreferenceInfo(a.getGeneralPreferences(), p, git); } }
final org.eclipse.jgit.lib.ObjectId apply(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.lib.ObjectId curr) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (isEmpty()) { return null; } org.eclipse.jgit.lib.ObjectId z = org.eclipse.jgit.lib.ObjectId.zeroId(); org.eclipse.jgit.lib.CommitBuilder cb = applyImpl(rw, ins, curr); if (cb == null) { result = z; return z; } cb.setAuthor(authorIdent); cb.setCommitter(new org.eclipse.jgit.lib.PersonIdent(serverIdent, when)); if (!(curr.equals(z))) { cb.setParentId(curr); } else { cb.setParentIds(); } if ((cb.getTreeId()) == null) { if (curr.equals(z)) { cb.setTreeId(com.google.gerrit.server.notedb.AbstractChangeUpdate.emptyTree(ins)); } else { org.eclipse.jgit.revwalk.RevCommit p = rw.parseCommit(curr); cb.setTreeId(p.getTree()); } } result = ins.insert(cb); return result; }

com.google.gerrit.server.patch.PatchListKey toPatchListKey() { return new com.google.gerrit.server.patch.PatchListKey(oldId, parentNum, newId, whitespace, PatchListKey.Algorithm.OPTIMIZED_DIFF); }
@java.lang.Override protected void onLoad() { super.onLoad(); Util.PROJECT_SVC.projectAccess(getProjectKey(), new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.ProjectAccess>(this) { @java.lang.Override public void preDisplay(com.google.gerrit.common.data.ProjectAccess access) { displayReadOnly(access); } }); savedPanel = ACCESS; }



@java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ConfigInfo result) { commentLinkProcessor = new com.google.gerrit.client.ui.CommentLinkProcessor(result.commentlinks()); contentTable.setCommentLinkProcessor(commentLinkProcessor); }


@java.lang.Override public void create() throws com.google.gerrit.extensions.restapi.RestApiException { try { changeEditsPost.apply(changeResource, null); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot create change edit", e); } }
public java.util.List<java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo>> formatList2(java.util.List<java.util.List<com.google.gerrit.server.query.change.ChangeData>> in) throws com.google.gwtorm.server.OrmException { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); java.lang.Iterable<com.google.gerrit.server.query.change.ChangeData> all = com.google.common.collect.Iterables.concat(in); com.google.gerrit.server.query.change.ChangeData.ensureChangeLoaded(db, all); if (has(com.google.gerrit.server.change.ALL_REVISIONS)) { com.google.gerrit.server.query.change.ChangeData.ensureAllPatchSetsLoaded(db, all); } else { com.google.gerrit.server.query.change.ChangeData.ensureCurrentPatchSetLoaded(db, all); } if (has(com.google.gerrit.server.change.REVIEWED)) { ensureReviewedLoaded(all); } com.google.gerrit.server.query.change.ChangeData.ensureCurrentApprovalsLoaded(db, all); java.util.List<java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo>> res = com.google.common.collect.Lists.newArrayListWithCapacity(in.size()); java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.change.ChangeJson.ChangeInfo> out = com.google.common.collect.Maps.newHashMap(); for (java.util.List<com.google.gerrit.server.query.change.ChangeData> changes : in) { res.add(toChangeInfo(out, changes)); } accountLoader.fill(); return res; }
private void startPoller() { if ((com.google.gerrit.client.Gerrit.isSignedIn()) && (0 < (com.google.gerrit.client.Gerrit.getConfig().getChangeUpdateDelay()))) { updateCheck = new com.google.gerrit.client.change.UpdateCheckTimer(this); updateCheck.schedule(); handlers.add(com.google.gerrit.client.ui.UserActivityMonitor.addValueChangeHandler(updateCheck)); } }
private static java.util.List<java.util.Map<java.lang.String, java.lang.Object>> getRefsSoyData(org.eclipse.jgit.lib.RefDatabase refdb, com.google.gitiles.GitilesView view, java.lang.String prefix, com.google.common.collect.Ordering<org.eclipse.jgit.lib.Ref> ordering, @javax.annotation.Nullable org.eclipse.jgit.lib.Ref headLeaf, int limit) throws java.io.IOException { java.util.Collection<org.eclipse.jgit.lib.Ref> refs = refdb.getRefs(prefix).values(); refs = ordering.leastOf(refs, (limit > 0 ? com.google.common.primitives.Ints.saturatedCast((limit + 1L)) : refs.size())); java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = com.google.common.collect.Lists.newArrayListWithCapacity(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs) { java.lang.String name = ref.getName().substring(prefix.length()); org.eclipse.jgit.lib.Ref refForName = refdb.getRef(name); if (refForName != null) { boolean needPrefix = !(ref.getName().equals(refForName.getName())); java.util.Map<java.lang.String, java.lang.Object> value = com.google.common.collect.Maps.newHashMapWithExpectedSize(3); value.put("url", com.google.gitiles.GitilesView.revision().copyFrom(view).setRevision(com.google.gitiles.Revision.unpeeled((needPrefix ? ref.getName() : name), ref.getObjectId())).toUrl()); value.put("name", name); if (headLeaf != null) { value.put("isHead", headLeaf.equals(ref)); } result.add(value); } } return result; }
public void doChangeRestoredHook(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.Account account, final java.lang.String reason, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.server.events.ChangeRestoredEvent event = new com.google.gerrit.server.events.ChangeRestoredEvent(); event.change = eventFactory.asChangeAttribute(change); event.restorer = eventFactory.asAccountAttribute(account); event.reason = reason; fireEvent(change, event, db); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); addArg(args, "--change", event.change.id); addArg(args, "--change-url", event.change.url); addArg(args, "--project", event.change.project); addArg(args, "--branch", event.change.branch); addArg(args, "--topic", event.change.topic); addArg(args, "--restorer", getDisplayName(account)); addArg(args, "--reason", (reason == null ? "" : reason)); runHook(change.getProject(), changeRestoredHook, args); }
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("failed to log add accounts to group event", e); } } }

void appendHeader(final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m) { m.openTr(); m.openTd(); m.addStyleName(com.google.gerrit.client.changes.S_ICON_HEADER); m.addStyleName("LeftMostCell"); m.nbsp(); m.closeTd(); m.openTd(); m.setStyleName(com.google.gerrit.client.changes.S_ICON_HEADER); m.nbsp(); m.closeTd(); m.openTd(); m.setStyleName(com.google.gerrit.client.changes.S_DATA_HEADER); m.append(Util.C.patchTableColumnName()); m.closeTd(); m.openTd(); m.setStyleName(com.google.gerrit.client.changes.S_DATA_HEADER); m.append(Util.C.patchTableColumnComments()); m.closeTd(); m.openTd(); m.setStyleName(com.google.gerrit.client.changes.S_DATA_HEADER); m.setAttribute("colspan", 3); m.append(Util.C.patchTableColumnDiff()); m.closeTd(); m.closeTr(); }
private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> toActionMap(com.google.gerrit.server.change.RevisionResource rsrc) { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> out = new java.util.LinkedHashMap<>(); if (rsrc.getControl().getCurrentUser().isIdentifiedUser()) { com.google.inject.Provider<com.google.gerrit.server.CurrentUser> userProvider = com.google.inject.util.Providers.of(rsrc.getControl().getCurrentUser()); for (com.google.gerrit.extensions.webui.UiAction.Description d : com.google.gerrit.server.extensions.webui.UiActions.from(revisions, rsrc, userProvider)) { out.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } } return out; }
private com.google.gerrit.server.account.AccountSshKey createSshKey(com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String keyFile) throws java.io.IOException { java.nio.file.Path p = java.nio.file.Paths.get(keyFile); if (!(java.nio.file.Files.exists(p))) { throw new java.io.IOException(java.lang.String.format("Cannot add public SSH key: %s is not a file", keyFile)); } java.lang.String content = new java.lang.String(java.nio.file.Files.readAllBytes(p), java.nio.charset.StandardCharsets.UTF_8); return new com.google.gerrit.server.account.AccountSshKey(new com.google.gerrit.server.account.AccountSshKey.Id(id, 1), content); }
@java.lang.Override public void updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext ctx) throws java.lang.Exception { changeKind = changeKindCache.getChangeKind(projectControl.getProjectState(), ctx.getRepository(), priorCommit, commit); if (checkMergedInto) { org.eclipse.jgit.lib.Ref mergedInto = findMergedInto(ctx, dest.get(), commit); if (mergedInto != null) { mergedByPushOp = mergedByPushOpFactory.create(requestScopePropagator, patchSetId, mergedInto.getName()); } } }
private com.google.gerrit.server.git.BatchUpdate.ChangeContext newChangeContext(com.google.gerrit.reviewdb.client.Change.Id id) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChanges.get(id); if (c == null) { c = db.changes().get(id); } com.google.gerrit.server.notedb.ChangeNotes notes = changeNotesFactory.createForNew(c); com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx = new com.google.gerrit.server.git.BatchUpdate.ChangeContext(changeControlFactory.controlFor(notes, user), new com.google.gerrit.server.git.BatchUpdateReviewDb(db)); if (notesMigration.readChanges()) { ctx.getNotes().load(); } return ctx; }
@com.google.gwtorm.client.Relation com.google.gerrit.reviewdb.ChangeAccess changes();
public boolean canCherryPick(final com.google.gerrit.server.git.MergeSorter mergeSorter, final org.eclipse.jgit.lib.Repository repo, final com.google.gerrit.server.git.CodeReviewCommit mergeTip, final org.eclipse.jgit.revwalk.RevWalk rw, final com.google.gerrit.server.git.CodeReviewCommit toMerge) throws com.google.gerrit.server.git.MergeException { if (mergeTip == null) { return true; } if ((toMerge.getParentCount()) == 0) { return false; } if ((toMerge.getParentCount()) == 1) { try { org.eclipse.jgit.merge.ThreeWayMerger m = newThreeWayMerger(repo, createDryRunInserter(repo)); m.setBase(toMerge.getParent(0)); return m.merge(mergeTip, toMerge); } catch (java.io.IOException e) { throw new com.google.gerrit.server.git.MergeException(("Cannot merge " + (toMerge.name())), e); } } return (canFastForward(mergeSorter, mergeTip, rw, toMerge)) || (canMerge(mergeSorter, repo, mergeTip, toMerge)); }
@java.lang.Override protected void preDisplay(java.lang.String content) { initEditor(content); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.MemberResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.AddMembers.Input in = new com.google.gerrit.server.group.AddMembers.Input(); in._oneMember = resource.getMember().getAccountId().toString(); return delete.get().apply(resource, in); }




private static java.util.Map<java.lang.String, java.lang.String> getParameters(javax.servlet.http.HttpServletRequest req) { final java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<>(); for (java.lang.String pair : req.getQueryString().split("[&;]")) { final int eq = pair.indexOf('='); if (0 < eq) { java.lang.String name = pair.substring(0, eq); java.lang.String value = pair.substring((eq + 1)); name = com.google.gerrit.extensions.restapi.Url.decode(name); value = com.google.gerrit.extensions.restapi.Url.decode(value); params.put(name, value); } } return params; }





@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource> list() throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { return list.get(); }
private void deliverToMembers(com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List matching, com.google.gerrit.reviewdb.client.AccountGroup.UUID startUUID) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = args.db.get(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen = new java.util.HashSet<>(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> q = new java.util.ArrayList<>(); seen.add(startUUID); q.add(startUUID); while (!(q.isEmpty())) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = q.remove(((q.size()) - 1)); com.google.gerrit.common.data.GroupDescription.Basic group = args.groupBackend.get(uuid); if (!(com.google.common.base.Strings.isNullOrEmpty(group.getEmailAddress()))) { matching.emails.add(new com.google.gerrit.server.mail.Address(group.getEmailAddress())); continue; } com.google.gerrit.reviewdb.client.AccountGroup ig = com.google.gerrit.common.data.GroupDescriptions.toAccountGroup(group); if (ig == null) { continue; } args.groups.getMembers(db, ig.getId()).forEachOrdered(matching.accounts::add); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID m : args.groupIncludes.subgroupsOf(uuid)) { if (seen.add(m)) { q.add(m); } } } }

public final void addLineClass(net.codemirror.lib.CodeMirror.LineHandle line, net.codemirror.lib.CodeMirror.LineClassWhere where, java.lang.String className) { addLineClassNative(line, where.name().toLowerCase(), className); }

protected net.codemirror.lib.LineWidget getSelfWidget() { return selfWidget; }
public static com.google.gerrit.extensions.events.LifecycleListener start(java.nio.file.Path sitePath) throws java.io.FileNotFoundException { java.nio.file.Path logdir = com.google.gerrit.common.FileUtil.mkdirsOrDie(new com.google.gerrit.server.config.SitePaths(sitePath).logs_dir, "Cannot create log directory"); if (com.google.gerrit.server.util.SystemLog.shouldConfigure()) { com.google.gerrit.pgm.util.GarbageCollectionLogFile.initLogSystem(logdir); } return new com.google.gerrit.extensions.events.LifecycleListener() { @java.lang.Override public void start() { } @java.lang.Override public void stop() { org.apache.log4j.LogManager.getLogger(GarbageCollection.LOG_NAME).removeAllAppenders(); } }; }
public final com.google.gerrit.reviewdb.client.AccountGeneralPreferences.TimeFormat timeFormat() { java.lang.String s = timeFormatRaw(); return s != null ? com.google.gerrit.reviewdb.client.AccountGeneralPreferences.TimeFormat.valueOf(s) : null; }
private void assertPushToGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String groupRefName, java.lang.String expectedErrorOnUpdate) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + "*"), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + "*"), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, RefNames.REFS_GROUPNAMES, Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefName + ":groupRef")); repo.reset("groupRef"); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, "Update group config", GroupConfig.GROUP_CONFIG_FILE, "some content").to(groupRefName); if (expectedErrorOnUpdate != null) { r.assertErrorStatus(expectedErrorOnUpdate); } else { r.assertOkStatus(); } }
public com.google.gerrit.server.project.ChangeControl controlFor(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.server.project.NoSuchChangeException { try { return projectControl.controlFor(notes.getProjectName(), user).controlFor(notes); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { throw new com.google.gerrit.server.project.NoSuchChangeException(notes.getChangeId(), e); } }
public void testUnblockRange() { grant(local, ((LABEL) + "Code-Review"), (-1), (+1), anonymous, "refs/heads/*").setBlock(); grant(local, ((LABEL) + "Code-Review"), (-2), (+2), devs, "refs/heads/*"); com.google.gerrit.server.project.ProjectControl u = user(devs); com.google.gerrit.common.data.PermissionRange range = u.controlForRef("refs/heads/master").getRange(((LABEL) + "Code-Review")); assertTrue("u can vote -2", range.contains((-2))); assertTrue("u can vote +2", range.contains(2)); }
@com.google.inject.Provides @com.google.inject.Singleton com.google.gerrit.httpd.raw.FontsServlet getFontsServlet(@com.google.inject.name.Named(com.google.gerrit.httpd.raw.StaticModule.CACHE) com.google.common.cache.Cache<java.nio.file.Path, com.google.gerrit.httpd.raw.ResourceServlet.Resource> cache) throws java.io.IOException { return new com.google.gerrit.httpd.raw.FontsServlet(cache, getPaths().buckOut); }
@java.lang.Override public com.googlecode.prolog_cafe.lang.Operation exec(com.googlecode.prolog_cafe.lang.Prolog engine) throws com.googlecode.prolog_cafe.exceptions.PrologException { engine.cont = cont; engine.setB0(); com.googlecode.prolog_cafe.lang.Term a1 = arg1.dereference(); if (a1 instanceof com.googlecode.prolog_cafe.lang.VariableTerm) { throw new com.googlecode.prolog_cafe.exceptions.PInstantiationException(this, 1); } if (!(a1 instanceof com.googlecode.prolog_cafe.lang.SymbolTerm)) { throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException(this, 1, "symbol", a1); } java.util.regex.Pattern regex = java.util.regex.Pattern.compile(a1.name()); engine.r1 = new com.googlecode.prolog_cafe.lang.JavaObjectTerm(regex); engine.r2 = arg2; engine.r3 = arg3; engine.r4 = arg4; com.google.gerrit.server.patch.PatchList pl = StoredValues.PATCH_LIST.get(engine); java.util.Iterator<com.google.gerrit.server.patch.PatchListEntry> iter = pl.getPatches().iterator(); engine.r5 = new com.googlecode.prolog_cafe.lang.JavaObjectTerm(iter); return engine.jtry5(gerrit.PRED_commit_delta_4.commit_delta_check, gerrit.PRED_commit_delta_4.commit_delta_next); }


protected void setApiHeaders(javax.servlet.http.HttpServletResponse res, java.lang.String contentType) { if (!(com.google.common.base.Strings.isNullOrEmpty(contentType))) { res.setContentType(contentType); } res.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); res.setHeader(HttpHeaders.CONTENT_DISPOSITION, "attachment"); res.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, "*"); setCacheHeaders(res); }
public void setHintText(java.lang.String text) { if (text == null) { if ((hintText) == null) { return; } hintFocusHandler.removeHandler(); hintFocusHandler = null; hintBlurHandler.removeHandler(); hintBlurHandler = null; hintText = null; focusHint(); return; } if ((hintText) == null) { hintText = text; hintFocusHandler = addFocusHandler(new com.google.gwt.event.dom.client.FocusHandler() { @java.lang.Override public void onFocus(com.google.gwt.event.dom.client.FocusEvent event) { setFocus(true); } }); hintBlurHandler = addBlurHandler(new com.google.gwt.event.dom.client.BlurHandler() { @java.lang.Override public void onBlur(com.google.gwt.event.dom.client.BlurEvent event) { setFocus(false); } }); } else { focusHint(); hintText = text; } if (!(isFocused)) { blurHint(); } }
@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId())); }
@org.junit.Test public void reindexPermissions() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount groupOwner = accountCreator.user2(); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name("group"); in.members = java.util.Collections.singleton(groupOwner).stream().map(( u) -> u.id.toString()).collect(java.util.stream.Collectors.toList()); in.visibleToAll = true; com.google.gerrit.extensions.common.GroupInfo group = gApi.groups().create(in).get(); setApiUser(admin); gApi.groups().id(group.id).index(); setApiUser(groupOwner); gApi.groups().id(group.id).index(); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage("not allowed to index group"); gApi.groups().id(group.id).index(); }

public static com.google.gerrit.server.project.SubmitRuleOptions.Builder builder() { return new com.google.gerrit.server.project.AutoValue_SubmitRuleOptions.Builder().allowClosed(false).skipFilters(false).rule(null); }
public void onFailure(java.lang.Throwable caught) { b.setEnabled(true); }
public com.google.gerrit.server.git.PluginProjectConfig getPluginConfig(java.lang.String pluginName) { com.google.common.collect.LinkedListMultimap<java.lang.String, java.lang.String> pluginConfig = pluginConfigs.get(pluginName); if (pluginConfig == null) { pluginConfig = com.google.common.collect.LinkedListMultimap.create(); pluginConfigs.put(pluginName, pluginConfig); } return new com.google.gerrit.server.git.PluginProjectConfig(pluginName, pluginConfig); }
@java.lang.Override protected void onInitUI() { super.onInitUI(); setPageTitle(Util.C.projectListTitle()); createProjectLinkPanel = new com.google.gwt.user.client.ui.VerticalPanel(); createProjectLinkPanel.setStyleName(Gerrit.RESOURCES.css().createProjectLink()); createProjectLinkPanel.add(new com.google.gerrit.client.ui.Hyperlink(Util.C.headingCreateProject(), com.google.gerrit.common.PageLinks.ADMIN_CREATE_PROJECT)); add(createProjectLinkPanel); projects = new com.google.gerrit.client.ui.ProjectsTable() { @java.lang.Override protected void onOpenRow(final int row) { com.google.gwt.user.client.History.newItem(link(getRowItem(row))); } private java.lang.String link(final com.google.gerrit.reviewdb.client.Project item) { return com.google.gerrit.client.Dispatcher.toProjectAdmin(item.getNameKey(), ProjectScreen.INFO); } @java.lang.Override protected void populate(final int row, final com.google.gerrit.reviewdb.client.Project k) { table.setWidget(row, 1, new com.google.gerrit.client.ui.Hyperlink(k.getName(), link(k))); table.setText(row, 2, k.getDescription()); setRowItem(row, k); } }; projects.setSavePointerId(PageLinks.ADMIN_PROJECTS); add(projects); }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { try { com.google.gerrit.server.config.PluginConfig cfg = cfgFactory.getFromProjectConfig(receiveEvent.project.getNameKey(), pluginName); boolean rejectSubmodule = cfg.getBoolean(com.googlesource.gerrit.plugins.uploadvalidator.SubmoduleValidator.KEY_CHECK_SUBMODULE, false); if (!rejectSubmodule) { return java.util.Collections.emptyList(); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(receiveEvent.project.getNameKey())) { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = com.googlesource.gerrit.plugins.uploadvalidator.SubmoduleValidator.performValidation(repo, receiveEvent.commit); if (!(messages.isEmpty())) { throw new com.google.gerrit.server.git.validators.CommitValidationException("contains submodules", messages); } } } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { throw new com.google.gerrit.server.git.validators.CommitValidationException("failed to check on submodules", e); } return java.util.Collections.emptyList(); }



private static com.google.gerrit.common.data.PermissionRule deny(com.google.gerrit.common.data.GroupReference group) { com.google.gerrit.common.data.PermissionRule rule = com.google.gerrit.server.schema.Schema_53.rule(group); rule.setDeny(); return rule; }
private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gwtorm.server.OrmException { referenceUpdated.fire(project.getNameKey(), cmd); com.google.gerrit.reviewdb.client.Branch.NameKey branchKey = new com.google.gerrit.reviewdb.client.Branch.NameKey(project.getNameKey(), cmd.getRefName()); hooks.doRefUpdatedHook(branchKey, cmd.getOldId(), cmd.getNewId(), identifiedUser.get().getAccount()); com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.SubmoduleSubscription> submoduleSubscriptions = dbProvider.get().submoduleSubscriptions().bySuperProject(branchKey); dbProvider.get().submoduleSubscriptions().delete(submoduleSubscriptions); }
@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo update(com.google.gerrit.extensions.api.changes.DraftInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { return putDraft.apply(draft, in).value(); } catch (com.google.gerrit.server.update.UpdateException | com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot update draft", e); } }
@com.google.gwtorm.client.Query("WHERE name != ? AND age > ? ORDER BY name DESC") com.google.gwtorm.client.ResultSet<com.google.gwtorm.data.TestPerson> notPerson(com.google.gwtorm.data.TestPerson.Key key, int age) throws com.google.gwtorm.client.OrmException;
@java.lang.Override public com.google.gerrit.server.project.CommitResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { org.eclipse.jgit.lib.ObjectId objectId; try { objectId = org.eclipse.jgit.lib.ObjectId.fromString(id.get()); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(parent.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(objectId); rw.parseBody(commit); if (!(canRead(parent.getProjectState(), repo, commit))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (int i = 0; i < (commit.getParentCount()); i++) { rw.parseBody(rw.parseCommit(commit.getParent(i))); } return new com.google.gerrit.server.project.CommitResource(parent, commit); } catch (org.eclipse.jgit.errors.MissingObjectException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }




@java.lang.Override public void onAddMembers(com.google.gerrit.server.audit.group.GroupMemberAuditEvent event) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(com.google.gerrit.server.group.DbGroupMemberAuditListener.toAccountGroupMemberAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForMembersEvent("Cannot log add accounts to group event performed by user", event, e); } }

private static com.google.gerrit.common.data.PermissionRule rule(com.google.gerrit.common.data.GroupReference group) { return new com.google.gerrit.common.data.PermissionRule(group); }
public com.google.gerrit.server.project.ChangeControl forUser(final com.google.gerrit.server.CurrentUser who) { if (getCurrentUser().equals(who)) { return this; } return new com.google.gerrit.server.project.ChangeControl(changeDataFactory, getRefControl().forUser(who), notes); }


private java.lang.String getStorageDir() { final java.nio.file.Path tmp = java.nio.file.Paths.get(java.lang.System.getProperty("java.io.tmpdir")).resolve(com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.JAVAMELODY_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); } if (!(java.nio.file.Files.isDirectory(defaultDataDir))) { try { java.nio.file.Files.createDirectories(defaultDataDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.log.error("Creation of javamelody data dir [{}] failed.", defaultDataDir, e); throw new java.lang.RuntimeException(e); } } return defaultDataDir.toString(); }
@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = gcConfig.getScheduleConfig(); java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (!(schedule.isPresent())) { com.google.gerrit.server.git.GarbageCollectionRunner.log.info("Ignoring missing gc schedule configuration"); } else if (((schedule.get().initialDelay()) < 0) || ((schedule.get().interval()) <= 0)) { com.google.gerrit.server.git.GarbageCollectionRunner.log.warn(java.lang.String.format("Ignoring invalid gc schedule configuration: %s", scheduleConfig)); } else { @java.lang.SuppressWarnings("unused") java.util.concurrent.Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(gcRunner, schedule.get().initialDelay(), schedule.get().interval(), java.util.concurrent.TimeUnit.MILLISECONDS); } }
@org.junit.Test public void remoteUrlUndefinedEventsNotPosted() { eventHandler.onEvent(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_CREATED); verifyZeroInteractions(postTask); }


protected com.google.gerrit.reviewdb.client.Change newChange() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.testutil.TestChanges.newChange(project, changeOwner.getAccountId()); com.google.gerrit.server.notedb.ChangeUpdate u = newUpdate(c, changeOwner); u.setChangeId(c.getKey().get()); u.setBranch(c.getDest().get()); u.commit(); return c; }

@java.lang.Override void send(java.lang.String message) { com.google.gerrit.client.changes.ChangeApi.createChange(project, branch, topic, message, base, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId())); hide(); } }); }
public void begin(java.util.concurrent.Future<?> workerFuture) throws java.util.concurrent.ExecutionException { synchronized(this) { long left = maxIntervalNanos; while (!(done)) { long start = java.lang.System.nanoTime(); try { java.util.concurrent.TimeUnit.NANOSECONDS.timedWait(this, left); } catch (java.lang.InterruptedException e) { throw new java.util.concurrent.ExecutionException(e); } left -= (java.lang.System.nanoTime()) - start; if (left <= 0) { moveSpinner(); left = maxIntervalNanos; } sendUpdate(); if ((!(done)) && (workerFuture.isDone())) { com.google.gerrit.server.git.MultiProgressMonitor.log.warn(("MultiProgressMonitor worker did not call end()" + " before returning")); end(); } } } try { workerFuture.get(maxIntervalNanos, java.util.concurrent.TimeUnit.NANOSECONDS); } catch (java.lang.InterruptedException e) { throw new java.util.concurrent.ExecutionException(e); } catch (java.util.concurrent.CancellationException e) { throw new java.util.concurrent.ExecutionException(e); } catch (java.util.concurrent.TimeoutException e) { workerFuture.cancel(true); throw new java.util.concurrent.ExecutionException(e); } sendDone(); }



@org.junit.Test public void create() throws java.lang.Exception { for (com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType : com.google.gerrit.acceptance.rest.project.PushTagIT.TagType.values()) { pushTagForExistingCommit(tagType, Status.REJECTED_OTHER_REASON); allowTagCreation(tagType); pushTagForExistingCommit(tagType, Status.OK); pushTagForNewCommit(tagType, Status.REJECTED_OTHER_REASON); } allowPushOfTagsForNewCommits(); for (com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType : com.google.gerrit.acceptance.rest.project.PushTagIT.TagType.values()) { pushTagForNewCommit(tagType, Status.OK); } }


protected Project.NameKey createProject(java.lang.String nameSuffix, com.google.gerrit.reviewdb.client.Project.NameKey parent, com.google.gerrit.extensions.client.SubmitType submitType) throws com.google.gerrit.extensions.restapi.RestApiException { return createProject(nameSuffix, parent, true, submitType); }



private com.google.gerrit.server.plugins.Plugin runPlugin(java.lang.String name, java.io.File jar, com.google.gerrit.server.plugins.Plugin oldPlugin) throws com.google.gerrit.server.plugins.PluginInstallException { org.eclipse.jgit.storage.file.FileSnapshot snapshot = org.eclipse.jgit.storage.file.FileSnapshot.save(jar); try { com.google.gerrit.server.plugins.Plugin newPlugin = loadPlugin(name, jar, snapshot); boolean reload = ((oldPlugin != null) && (oldPlugin.canReload())) && (newPlugin.canReload()); if ((!reload) && (oldPlugin != null)) { oldPlugin.stop(); running.remove(name); } if (!(newPlugin.isDisabled())) { newPlugin.start(env); } if (reload) { env.onReloadPlugin(oldPlugin, newPlugin); oldPlugin.stop(); } else if (!(newPlugin.isDisabled())) { env.onStartPlugin(newPlugin); } if (!(newPlugin.isDisabled())) { running.put(name, newPlugin); } else { disabled.put(name, newPlugin); } broken.remove(name); return newPlugin; } catch (java.lang.Throwable err) { broken.put(name, snapshot); throw new com.google.gerrit.server.plugins.PluginInstallException(err); } }
private com.googlesource.gerrit.plugins.quota.Publisher.RepoSizeEvent createEvent() throws java.util.concurrent.ExecutionException { com.googlesource.gerrit.plugins.quota.Publisher.RepoSizeEvent event = new com.googlesource.gerrit.plugins.quota.Publisher.RepoSizeEvent(); for (com.google.gerrit.reviewdb.client.Project.NameKey p : projectCache.all()) { long size = repoSizeCache.get(p).get(); event.addData(size, p.get()); } return event; }
@org.junit.Test public void testOwnerGroupsForStarFilter() { java.lang.String[] ownerGroups = new java.lang.String[]{ "group1", "group2" }; configureOwnerGroups("*", com.google.common.collect.Lists.newArrayList(ownerGroups)); assertThat(repoCfg.getOwnerGroups(new com.google.gerrit.reviewdb.client.Project.NameKey("someProject"))).isEqualTo(ownerGroups); }




public void testReplaceToLowerCase() { final com.google.gerrit.common.data.ParamertizedString p = new com.google.gerrit.common.data.ParamertizedString("${a.toLowerCase}"); assertEquals(1, p.getParameterNames().size()); assertTrue(p.getParameterNames().contains("a")); final java.util.Map<java.lang.String, java.lang.String> a = new java.util.HashMap<java.lang.String, java.lang.String>(); a.put("a", "foo"); assertNotNull(p.bind(a)); assertEquals(1, p.bind(a).length); assertEquals("foo", p.bind(a)[0]); assertEquals("foo", p.replace(a)); a.put("a", "FOO"); assertNotNull(p.bind(a)); assertEquals(1, p.bind(a).length); assertEquals("foo", p.bind(a)[0]); assertEquals("foo", p.replace(a)); }
private static com.google.gerrit.client.ui.Screen mine(final java.lang.String token) { if (com.google.gerrit.client.MINE.equals(token)) { if (com.google.gerrit.client.Gerrit.isSignedIn()) { return new com.google.gerrit.client.changes.AccountDashboardScreen(com.google.gerrit.client.Gerrit.getUserAccount().getId()); } else { final com.google.gerrit.client.ui.Screen r = new com.google.gerrit.client.changes.AccountDashboardScreen(null); r.setRequiresSignIn(true); return r; } } else if ("mine,starred".equals(token)) { return com.google.gerrit.client.changes.QueryScreen.forQuery("is:starred"); } else if ("mine,drafts".equals(token)) { return com.google.gerrit.client.changes.QueryScreen.forQuery("has:draft"); } else { java.lang.String p = "mine,watched,"; if (token.startsWith(p)) { return com.google.gerrit.client.changes.QueryScreen.forQuery("is:watched status:open", com.google.gerrit.client.Dispatcher.skip(p, token)); } return new com.google.gerrit.client.NotFoundScreen(); } }




public static void updateDraft(com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String draftId, com.google.gerrit.client.changes.CommentInfo content, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.CommentInfo> cb) { CommentApi.revision(id, "drafts").id(draftId).put(content, cb); }
void setShowTabs(boolean show) { cm.extras().showTabs(show); }
public void execute() { final java.lang.String to = com.google.gwt.user.client.History.getToken(); new com.google.gerrit.client.auth.openid.OpenIdSignInDialog(com.google.gerrit.common.auth.SignInMode.REGISTER, to, null).center(); }

private com.google.gerrit.reviewdb.client.ChangeMessage message(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.git.strategy.CommitMergeStatus s) { java.lang.String txt = s.getMessage(); if (s == (CommitMergeStatus.CLEAN_MERGE)) { return message(ctx, commit.getPatchsetId(), (txt + (getByAccountName()))); } else if ((s == (CommitMergeStatus.CLEAN_REBASE)) || (s == (CommitMergeStatus.CLEAN_PICK))) { return message(ctx, commit.getPatchsetId(), (((txt + " as ") + (commit.name())) + (getByAccountName()))); } else if (s == (CommitMergeStatus.SKIPPED_IDENTICAL_TREE)) { return message(ctx, commit.getPatchsetId(), txt); } else if (s == (CommitMergeStatus.ALREADY_MERGED)) { switch (args.submitType) { case FAST_FORWARD_ONLY : case MERGE_ALWAYS : case MERGE_IF_NECESSARY : return message(ctx, commit, CommitMergeStatus.CLEAN_MERGE); case CHERRY_PICK : return message(ctx, commit, CommitMergeStatus.CLEAN_PICK); case REBASE_IF_NECESSARY : return message(ctx, commit, CommitMergeStatus.CLEAN_REBASE); default : return message(ctx, commit, null); } } else { throw new java.lang.IllegalStateException((((("unexpected status " + s) + " for change ") + (commit.change().getId())) + "; expected to previously fail fast")); } }
public com.google.gerrit.acceptance.TestAccount admin() throws com.google.gwtorm.server.OrmException, com.jcraft.jsch.JSchException, java.io.UnsupportedEncodingException { return create("admin", "admin@example.com", "Administrator", "Administrators"); }
com.googlesource.gerrit.plugins.findowners.OwnersDb get(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.server.query.change.ChangeData changeData, int patchset) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Project.NameKey project = changeData.change().getProject(); java.lang.String branch = changeData.change().getDest().get(); java.lang.String dbKey = com.googlesource.gerrit.plugins.findowners.Cache.makeKey(changeData.getId().get(), patchset, branch); return get(dbKey, repository, project, branch, changeData.currentFilePaths()); }

@java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject in) { com.google.gerrit.client.api.DefaultActions.UiResult result = asUiResult(in); if ((result.alert()) != null) { com.google.gwt.user.client.Window.alert(result.alert()); } if (((result.redirectUrl()) != null) && (result.openWindow())) { com.google.gwt.user.client.Window.open(result.redirectUrl(), "_blank", null); } else if ((result.redirectUrl()) != null) { com.google.gwt.user.client.Window.Location.assign(result.redirectUrl()); } else { com.google.gerrit.client.Gerrit.display(target); } }
@org.junit.Test public void noCopyMinScoreOnRework() throws java.lang.Exception { java.lang.String subject = "test commit"; java.lang.String file = "a.txt"; com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent(), subject, file, "first contents"); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(git, "refs/for/master"); review(r, (-2)); assertApproval(r, (-2)); push = pushFactory.create(db, user.getIdent(), subject, file, "second contents", r.getChangeId()); r = push.to(git, "refs/for/master"); assertApproval(r, 0); }
protected void assertRebase(org.eclipse.jgit.junit.TestRepository<?> testRepo, boolean contentMerge) throws java.lang.Exception { org.eclipse.jgit.lib.Repository repo = testRepo.getRepository(); org.eclipse.jgit.revwalk.RevCommit localHead = getHead(repo); org.eclipse.jgit.revwalk.RevCommit remoteHead = getRemoteHead(); assert_().withMessage(java.lang.String.format("%s not equal %s", localHead.name(), remoteHead.name())).that(localHead.getId()).isNotEqualTo(remoteHead.getId()); assertThat(remoteHead.getParentCount()).isEqualTo(1); if (!contentMerge) { assertThat(getLatestRemoteDiff()).isEqualTo(getLatestDiff(repo)); } assertThat(remoteHead.getShortMessage()).isEqualTo(localHead.getShortMessage()); }

private com.google.gerrit.server.git.MergeTip preMerge(com.google.gerrit.server.git.strategy.SubmitStrategy strategy, java.util.List<com.google.gerrit.server.query.change.ChangeData> submitted, com.google.gerrit.server.git.CodeReviewCommit branchTip) throws com.google.gerrit.server.git.MergeException, com.google.gwtorm.server.OrmException { logDebug("Running submit strategy {} for {} commits {}", strategy.getClass().getSimpleName(), submitted.size(), submitted); java.util.List<com.google.gerrit.server.git.CodeReviewCommit> toMerge = new java.util.ArrayList(submitted.size()); for (com.google.gerrit.server.query.change.ChangeData cd : submitted) { com.google.gerrit.server.git.CodeReviewCommit commit = commits.get(cd.change().getId()); checkState((commit != null), "commit for %s not found by validateChangeList", cd.change().getId()); toMerge.add(commit); } com.google.gerrit.server.git.MergeTip mergeTip = strategy.run(branchTip, toMerge); refLogIdent = strategy.getRefLogIdent(); logDebug("Produced {} new commits", strategy.getNewCommits().size()); commits.putAll(strategy.getNewCommits()); return mergeTip; }
private void initProjectActions(com.google.gerrit.client.projects.ConfigInfo info) { com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.actions.ActionInfo> actions = info.actions(); if ((actions == null) || (actions.isEmpty())) { return; } actions.copyKeysIntoChildren("id"); actionsGrid.addHeader(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingProjectCommands())); com.google.gwt.user.client.ui.FlowPanel actionsPanel = new com.google.gwt.user.client.ui.FlowPanel(); actionsPanel.setStyleName(Gerrit.RESOURCES.css().projectActions()); actionsPanel.setVisible(true); actionsGrid.add(Util.C.headingCommands(), actionsPanel); for (java.lang.String id : actions.keySet()) { actionsPanel.add(new com.google.gerrit.client.actions.ActionButton(getProjectKey(), actions.get(id))); } }
private void doPerformAction(final java.lang.String issueKey, final java.lang.String actionName) throws java.io.IOException { log.debug(((("Trying to perform action: " + actionName) + " on issue ") + issueKey)); boolean ret = client().doTransition(issueKey, actionName); if (ret) { log.debug(((("Action " + actionName) + " successful on Issue ") + issueKey)); } else { log.debug("Action {} on Issue {} not possible", actionName, issueKey); } }

@java.lang.SuppressWarnings("deprecation") public com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id) { java.util.concurrent.Callable<java.lang.Boolean> task = () -> { if (stalenessChecker.isStale(id)) { index(id); return true; } return false; }; return com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.Futures.nonCancellationPropagating(batchExecutor.submit(task)), IndexUtils.MAPPER); }



@java.lang.Override public void start() { queue.start(); if (((srvInfo.getState()) == (ServerInformation.State.STARTUP)) && (queue.replicateAllOnPluginStart)) { pushAllFuture.set(pushAll.create(null).schedule(30, java.util.concurrent.TimeUnit.SECONDS)); } }


@org.junit.Test public void branchAlreadyExists_Conflict() throws java.lang.Exception { assertCreateSucceeds(); assertCreateFails(com.google.gerrit.extensions.restapi.ResourceConflictException.class); }
public boolean isFile() { boolean isCommitMessage = Patch.COMMIT_MSG.equals(script.getNewName()); return !((isCommitMessage || (((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.A)) && (0 >= (script.getA().size())))) || (((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.B)) && (0 >= (script.getB().size())))); }

private static boolean isUnreasonableName(java.lang.String name) { return ((((((name.length()) < 1) || (name.contains("\\"))) || (name.startsWith("../"))) || (name.contains("/../"))) || (name.contains("/./"))) || (name.contains("//")); }




public com.atlassian.jira.rpc.soap.client.RemoteIssue performAction(com.googlesource.gerrit.plugins.its.jira.JiraSession token, java.lang.String issueKey, java.lang.String actionId, com.atlassian.jira.rpc.soap.client.RemoteFieldValue... params) throws java.rmi.RemoteException { return service.progressWorkflowAction(getToken(token), issueKey, actionId, params); }
private java.lang.Runnable maybeNextVimSearch(final net.codemirror.lib.CodeMirror cm) { return new java.lang.Runnable() { @java.lang.Override public void run() { if (cm.hasVimSearchHighlight()) { net.codemirror.lib.CodeMirror.handleVimKey(cm, "n"); } else { diffChunkNav(cm, com.google.gerrit.client.diff.SideBySide2.Direction.NEXT).run(); } } }; }

@java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gerrit.client.ui.RemoteSuggestBox> event) { hide(); }
public void reset() { if ((com.google.gerrit.client.Gerrit.isSignedIn()) && ((com.google.gerrit.client.Gerrit.getAccountDiffPreference()) != null)) { set(com.google.gerrit.client.Gerrit.getAccountDiffPreference()); } else { set(com.google.gerrit.reviewdb.client.AccountDiffPreference.createDefault(null)); } }

@org.junit.Test public void testWithSymlink() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommitWithSymlink(); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = com.googlesource.gerrit.plugins.uploadvalidator.SymlinkValidator.performValidation(repo, c); assertEquals(2, m.size()); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> expected = new java.util.ArrayList<>(); expected.add(new com.google.gerrit.server.git.validators.CommitValidationMessage(("Symbolic links are not allowed: " + "foo.txt"), true)); expected.add(new com.google.gerrit.server.git.validators.CommitValidationMessage(("Symbolic links are not allowed: " + "symbolicFolder"), true)); assertTrue(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.compareCommitValidationMessage(m, expected)); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> file(java.lang.String file) throws com.google.gerrit.server.query.QueryParseException { if (!(allowsFile)) { throw error(("operator not permitted here: file:" + file)); } if (file.startsWith("^")) { return new com.google.gerrit.server.query.change.RegexFilePredicate(args.dbProvider, args.patchListCache, file); } throw new java.lang.IllegalArgumentException(); }
private static java.lang.String randSuffix() { com.google.common.hash.Hasher h = com.google.common.hash.Hashing.md5().newHasher(); byte[] buf = new byte[8]; org.eclipse.jgit.util.NB.encodeInt64(buf, 0, com.google.gerrit.common.TimeUtil.nowMs()); h.putBytes(buf); com.google.gerrit.server.change.FileContentUtil.rng.nextBytes(buf); h.putBytes(buf); return h.hash().toString(); }
@java.lang.Override public void onShowView() { super.onShowView(); com.google.gwt.user.client.Window.enableScrolling(false); if (prefs.hideTopMenu()) { com.google.gerrit.client.Gerrit.setHeaderVisible(false); } resizeHandler = com.google.gwt.user.client.Window.addResizeHandler(new com.google.gwt.event.logical.shared.ResizeHandler() { @java.lang.Override public void onResize(com.google.gwt.event.logical.shared.ResizeEvent event) { resizeCodeMirror(); } }); final int height = getCodeMirrorHeight(); operation(new java.lang.Runnable() { @java.lang.Override public void run() { cmA.setHeight(height); cmB.setHeight(height); cmA.refresh(); cmB.refresh(); } }); diffTable.sidePanel.adjustGutters(cmB); if (((startSide) != null) && ((startLine) > 0)) { int line = (startLine) - 1; net.codemirror.lib.CodeMirror cm = getCmFromSide(startSide); if ((cm.lineAtHeight((height - 20))) < line) { cm.scrollToY(((cm.heightAtLine(line, "local")) - (0.5 * height))); } cm.setCursor(net.codemirror.lib.LineCharacter.create(line)); cm.focus(); } else if ((diff.meta_b()) != null) { int line = 0; if (!(diffChunks.isEmpty())) { com.google.gerrit.client.diff.DiffChunkInfo d = diffChunks.get(0); net.codemirror.lib.CodeMirror cm = getCmFromSide(d.getSide()); line = d.getStart(); if ((cm.lineAtHeight((height - 20))) < line) { cm.scrollToY(((cm.heightAtLine(line, "local")) - (0.5 * height))); } } cmB.setCursor(net.codemirror.lib.LineCharacter.create(line)); cmB.focus(); } else { cmA.setCursor(net.codemirror.lib.LineCharacter.create(0)); cmA.focus(); } if ((com.google.gerrit.client.Gerrit.isSignedIn()) && (prefs.autoReview())) { header.autoReview(); } prefetchNextFile(); }

@java.lang.Override protected void doGet(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { try { java.lang.String idString = req.getPathInfo(); if (idString.endsWith("/")) { idString = idString.substring(0, ((idString.length()) - 1)); } com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.parse(idString); com.google.gerrit.httpd.UrlModule.toGerrit(com.google.gerrit.common.PageLinks.toChange(id), req, rsp); } catch (java.lang.IllegalArgumentException err) { rsp.sendError(HttpServletResponse.SC_NOT_FOUND); } }
public void run() { defer(new java.lang.Runnable() { @java.lang.Override public void run() { net.codemirror.lib.CodeMirror.LineHandle handle = cm.getLineHandleVisualStart(cm.getCursor("end").getLine()); if ((cm.hasActiveLine()) && (cm.getActiveLine().equals(handle))) { return; } clearActiveLine(cm); clearActiveLine(other); cm.setActiveLine(handle); cm.addLineClass(handle, LineClassWhere.WRAP, DiffTable.style.activeLine()); com.google.gerrit.client.diff.LineMapper.LineOnOtherInfo info = mapper.lineOnOther(getSideFromCm(cm), cm.getLineNumber(handle)); if (info.isAligned()) { net.codemirror.lib.CodeMirror.LineHandle oLineHandle = other.getLineHandle(info.getLine()); other.setActiveLine(oLineHandle); other.addLineClass(oLineHandle, LineClassWhere.WRAP, DiffTable.style.activeLine()); } } }); }



@org.junit.Test public void ownersFile1Test() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result c1 = createChange("add OWNERS", "OWNERS", "x@x\na@a\n"); assertThat(getOwnersResponse(c1)).contains("owners:[], files:[ OWNERS ]"); com.google.gerrit.acceptance.PushOneCommit.Result c2 = createChange("add t.c", "t.c", "##"); assertThat(getOwnersResponse(c2)).contains("owners:[], files:[ t.c ]"); approveSubmit(c1); assertThat(getOwnersResponse(c2)).contains("owners:[ a@a[1+0+0], x@x[1+0+0] ], files:[ t.c ]"); assertThat(getOwnersResponse(c1)).contains("owners:[ a@a[1+0+0], x@x[1+0+0] ], files:[ OWNERS ]"); java.lang.String expectedTail = "path2owners:{ ./:a@ax@x }, owner2paths:{ a@a:./, x@x:./ } }" + (", file2owners:{ ./t.c:a@ax@x }, reviewers:[], owners:[ " + "a@a[1+0+0], x@x[1+0+0] ], files:[ t.c ] }"); assertThat(getOwnersDebugResponse(c2)).contains(expectedTail); }

@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if (((replyAction) != null) && (replyAction.isVisible())) { replyAction.quickApprove(input); } else { com.google.gerrit.client.changes.ChangeApi.revision(changeId.get(), revision).view("review").post(input, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ReviewInput>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ReviewInput result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId)); } }); } }
void setLineLength(int length) { cm.extras().lineLength((Patch.COMMIT_MSG.equals(path) ? 72 : length)); }
private void checkRequiresCapability(org.apache.sshd.server.Command cmd) throws com.google.gerrit.sshd.UnloggedFailure { com.google.gerrit.extensions.annotations.RequiresCapability rc = cmd.getClass().getAnnotation(com.google.gerrit.extensions.annotations.RequiresCapability.class); if (rc != null) { com.google.gerrit.server.CurrentUser user = currentUser.get(); com.google.gerrit.server.account.CapabilityControl ctl = user.getCapabilities(); if ((!(ctl.canPerform(rc.value()))) && (!(ctl.canAdministrateServer()))) { java.lang.String msg = java.lang.String.format("fatal: %s does not have \"%s\" capability.", user.getUserName(), rc.value()); throw new com.google.gerrit.sshd.UnloggedFailure(BaseCommand.STATUS_NOT_ADMIN, msg); } } }

@java.lang.Override public void run() { header.prev.go(); }
@org.junit.Test public void deleteBranchesNotFoundContinue() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteBranchesInput input = new com.google.gerrit.extensions.api.projects.DeleteBranchesInput(); java.util.List<java.lang.String> branches = com.google.common.collect.Lists.newArrayList("refs/heads/does-not-exist"); branches.addAll(com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES); input.branches = branches; try { project().deleteBranches(input); fail("Expected ResourceConflictException"); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForBranches(com.google.common.collect.ImmutableList.of("refs/heads/does-not-exist"))); } assertBranchesDeleted(); }

private static com.google.inject.Injector createTestInjector(com.google.gerrit.pgm.Daemon daemon) throws java.lang.Exception { com.google.inject.Injector sysInjector = com.google.gerrit.acceptance.GerritServer.get(daemon, "sysInjector"); java.lang.Module module = new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.acceptance.AccountCreator.class); factory(PushOneCommit.Factory.class); factory(SubmoduleOp.Factory.class); install(com.google.gerrit.acceptance.InProcessProtocol.module()); install(new com.google.gerrit.server.ssh.NoSshModule()); install(new com.google.gerrit.server.git.AsyncReceiveCommits.Module()); } }; return sysInjector.createChildInjector(module); }
@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent e) { e.stopPropagation(); if ((((e.getCharCode()) == '\n') || ((e.getCharCode()) == (KEY_ENTER))) && (e.isControlKeyDown())) { e.preventDefault(); if (post.isEnabled()) { onPost(null); } } }

private com.google.inject.Injector createSysInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(com.google.gerrit.server.schema.SchemaVersionCheck.module()); modules.add(new com.google.gerrit.pgm.util.LogFileCompressor.Module()); modules.add(new com.google.gerrit.server.git.WorkQueue.Module()); modules.add(cfgInjector.getInstance(com.google.gerrit.server.config.GerritGlobalModule.class)); modules.add(new com.google.gerrit.server.mail.SmtpEmailSender.Module()); modules.add(new com.google.gerrit.server.git.PushReplication.Module()); if (httpd) { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.httpd.HttpCanonicalWebUrlProvider.class; } }); } else { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.server.config.CanonicalWebUrlProvider.class; } }); } if (!(slave)) { modules.add(new com.google.gerrit.server.config.MasterNodeStartup()); } return cfgInjector.createChildInjector(modules); }
private boolean isSubmittable(com.google.gerrit.client.changes.ChangeInfo info) { boolean canSubmit = info.status().isOpen(); if (canSubmit && ((info.status()) == (com.google.gerrit.reviewdb.client.Change.Status.NEW))) { for (java.lang.String name : info.labels()) { com.google.gerrit.client.changes.ChangeInfo.LabelInfo label = info.label(name); switch (label.status()) { case NEED : statusText.setInnerText(("Needs " + name)); canSubmit = false; break; case REJECT : case IMPOSSIBLE : if (label.blocking()) { statusText.setInnerText(("Not " + name)); canSubmit = false; } break; default : break; } } } return canSubmit; }
public com.google.gerrit.reviewdb.client.PatchLineComment get(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchLineComment.Key key) throws com.google.gwtorm.server.OrmException { if (!(migration.readComments())) { return db.patchComments().get(key); } for (com.google.gerrit.reviewdb.client.PatchLineComment c : byChange(db, notes)) { if (key.equals(c.getKey())) { return c; } } return null; }

@java.lang.Override public void onLoad() { if ((diffTable) == null) { initUI(); } super.onLoad(); PatchUtil.DETAIL_SVC.unifiedPatchDetail(patchId, new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.data.UnifiedPatchDetail>() { public void onSuccess(final com.google.gerrit.client.data.UnifiedPatchDetail r) { if (isAttached()) { display(r); } } }); }
private void add(org.apache.lucene.document.Document doc, com.google.gerrit.server.index.FieldDef<com.google.gerrit.server.query.change.ChangeData, ?> f, java.lang.Iterable<?> values) throws com.google.gwtorm.server.OrmException { java.lang.String name = f.getName(); org.apache.lucene.document.Field.Store store = com.google.gerrit.lucene.LuceneChangeIndex.store(f); if ((f.getType()) == (com.google.gerrit.server.index.FieldType.INTEGER)) { for (java.lang.Object value : values) { doc.add(new org.apache.lucene.document.IntField(name, ((java.lang.Integer) (value)), store)); } } else if ((f.getType()) == (com.google.gerrit.server.index.FieldType.TIMESTAMP)) { for (java.lang.Object v : values) { doc.add(new org.apache.lucene.document.IntField(name, com.google.gerrit.lucene.LuceneChangeIndex.toIndexTime(((java.sql.Timestamp) (v))), store)); } } else if ((f.getType()) == (com.google.gerrit.server.index.FieldType.EXACT)) { for (java.lang.Object value : values) { doc.add(new org.apache.lucene.document.StringField(name, ((java.lang.String) (value)), store)); } } else { throw com.google.gerrit.lucene.LuceneChangeIndex.badFieldType(f.getType()); } }
@java.lang.Override public void onGitReferenceUpdated(final com.googlesource.gerrit.plugins.refprotection.Event event) { if (isRelevantRef(event)) { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(event.getProjectName()); try { com.google.gerrit.server.project.ProjectResource project = new com.google.gerrit.server.project.ProjectResource(projectControl.controlFor(nameKey, user)); boolean protectDeleted = cfg.getFromGerritConfig(RefProtectionModule.NAME).getBoolean("protectDeleted", true); boolean protectFastForward = cfg.getFromGerritConfig(RefProtectionModule.NAME).getBoolean("protectFastForward", true); if ((protectDeleted && (isRefDeleted(event))) || (protectFastForward && (isNonFastForwardUpdate(event, project)))) { backupBranch.createBackup(event, project); } } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.googlesource.gerrit.plugins.refprotection.RefUpdateListener.log.error(e.getMessage(), e); } } }
private void submit(java.lang.String changeId, int expectedStatus) throws java.lang.Exception { approve(changeId); com.google.gerrit.extensions.api.changes.SubmitInput subm = new com.google.gerrit.extensions.api.changes.SubmitInput(); com.google.gerrit.acceptance.RestResponse r = adminSession.post((("/changes/" + changeId) + "/submit"), subm); assertThat(r.getStatusCode()).isEqualTo(expectedStatus); if (expectedStatus == (org.apache.http.HttpStatus.SC_OK)) { com.google.gerrit.extensions.common.ChangeInfo change = newGson().fromJson(r.getReader(), new com.google.gson.reflect.TypeToken<com.google.gerrit.extensions.common.ChangeInfo>() {}.getType()); assertThat(change.status).isEqualTo(ChangeStatus.MERGED); checkMergeResult(change); } r.consume(); }

private void afterTest() throws java.lang.Exception { db.close(); sshSession.close(); server.stop(); com.google.gerrit.testutil.TempFileUtil.cleanup(); }

public com.google.gerrit.server.account.AuthRequest authenticate(final com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException { final java.lang.String username = who.getLocalUser(); try { final javax.naming.directory.DirContext ctx = open(); try { final com.google.gerrit.server.auth.ldap.LdapQuery.Result m = findAccount(ctx, username); if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.AuthType.LDAP)) { authenticate(m.getDN(), who.getPassword()); } who.setDisplayName(com.google.gerrit.server.auth.ldap.LdapRealm.apply(accountFullName, m)); who.setUserName(com.google.gerrit.server.auth.ldap.LdapRealm.apply(accountSshUserName, m)); if ((accountEmailAddress) != null) { who.setEmailAddress(com.google.gerrit.server.auth.ldap.LdapRealm.apply(accountEmailAddress, m)); } else if (emailExpander.canExpand(username)) { who.setEmailAddress(emailExpander.expand(username)); } membershipCache.put(username, queryForGroups(ctx, username, m)); return who; } finally { try { ctx.close(); } catch (javax.naming.NamingException e) { com.google.gerrit.server.auth.ldap.LdapRealm.log.warn("Cannot close LDAP query handle", e); } } } catch (javax.naming.NamingException e) { com.google.gerrit.server.auth.ldap.LdapRealm.log.error("Cannot query LDAP to autenticate user", e); throw new com.google.gerrit.server.account.AccountException("Cannot query LDAP for account", e); } }

private static boolean notModified(javax.servlet.http.HttpServletRequest req, com.google.gerrit.extensions.restapi.RestResource rsrc) { if (!(com.google.gerrit.httpd.restapi.RestApiServlet.isGetOrHead(req))) { return false; } if (rsrc instanceof com.google.gerrit.extensions.restapi.RestResource.HasETag) { java.lang.String have = req.getHeader(HttpHeaders.IF_NONE_MATCH); if (have != null) { return have.equals(((com.google.gerrit.extensions.restapi.RestResource.HasETag) (rsrc)).getETag()); } } if (rsrc instanceof com.google.gerrit.extensions.restapi.RestResource.HasLastModified) { java.sql.Timestamp m = ((com.google.gerrit.extensions.restapi.RestResource.HasLastModified) (rsrc)).getLastModified(); long d = req.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE); return (d / 1000L) == ((m.getTime()) / 1000L); } return false; }
private void setPaddingHeight(int height) { padding.element.getStyle().setHeight(height, Unit.PX); padding.widget.changed(); }
private com.google.gerrit.client.ui.Screen selectProject() { if (com.google.gerrit.client.Dispatcher.matchPrefix("/admin/projects/", token)) { java.lang.String rest = com.google.gerrit.client.Dispatcher.skip(token); int c = rest.lastIndexOf(','); if (c < 0) { return new com.google.gerrit.client.admin.ProjectInfoScreen(Project.NameKey.parse(rest)); } else if (c == 0) { return new com.google.gerrit.client.NotFoundScreen(); } com.google.gerrit.reviewdb.client.Project.NameKey k = Project.NameKey.parse(rest.substring(0, c)); java.lang.String panel = rest.substring((c + 1)); if (ProjectScreen.INFO.equals(panel)) { return new com.google.gerrit.client.admin.ProjectInfoScreen(k); } if (ProjectScreen.BRANCH.equals(panel)) { return new com.google.gerrit.client.admin.ProjectBranchesScreen(k); } if (ProjectScreen.ACCESS.equals(panel)) { return new com.google.gerrit.client.admin.ProjectAccessScreen(k); } } return new com.google.gerrit.client.NotFoundScreen(); }



@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.project.ChildProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((recursive) || (rsrc.isDirectChild())) { return json.format(rsrc.getChild().getProject()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.getChild().getName()); }


@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toEditScreen(new com.google.gerrit.reviewdb.client.PatchSet.Id(result.legacyId(), 1), "project.config")); }
@java.lang.Override protected void configureServlets() { java.lang.Class<? extends javax.servlet.Filter> authFilter; if (authConfig.isTrustContainerAuth()) { authFilter = com.google.gerrit.httpd.ContainerAuthFilter.class; } else if (authConfig.isGitBasicAuth()) { if ((authConfig.getAuthType()) == (OAUTH)) { authFilter = com.google.gerrit.httpd.ProjectOAuthFilter.class; } else { authFilter = com.google.gerrit.httpd.ProjectBasicAuthFilter.class; } } else { authFilter = com.google.gerrit.httpd.ProjectDigestFilter.class; } if (isHttpEnabled()) { java.lang.String git = GitOverHttpServlet.URL_REGEX; filterRegex(git).through(authFilter); serveRegex(git).with(com.google.gerrit.httpd.GitOverHttpServlet.class); } filter("/a/*").through(authFilter); }

private void verifyJsonCommit(com.google.gitiles.CommitJsonData.Commit jsonCommit, org.eclipse.jgit.revwalk.RevCommit commit, com.google.gitiles.DateFormatter df) throws java.lang.Exception { assertThat(jsonCommit.commit).isEqualTo(commit.name()); assertThat(jsonCommit.tree).isEqualTo(commit.getTree().name()); java.util.ArrayList<java.lang.String> expectedParents = new java.util.ArrayList<>(); for (int i = 0; i < (commit.getParentCount()); i++) { expectedParents.add(commit.getParent(i).name()); } assertThat(jsonCommit.parents).containsExactlyElementsIn(expectedParents); assertThat(jsonCommit.author.name).isEqualTo(commit.getAuthorIdent().getName()); assertThat(jsonCommit.author.email).isEqualTo(commit.getAuthorIdent().getEmailAddress()); assertThat(jsonCommit.author.time).isEqualTo(df.format(commit.getAuthorIdent())); assertThat(jsonCommit.committer.name).isEqualTo(commit.getCommitterIdent().getName()); assertThat(jsonCommit.committer.email).isEqualTo(commit.getCommitterIdent().getEmailAddress()); assertThat(jsonCommit.committer.time).isEqualTo(df.format(commit.getCommitterIdent())); assertThat(jsonCommit.message).isEqualTo(commit.getFullMessage()); }
@java.lang.Override protected void onLoad() { super.onLoad(); Util.PROJECT_SVC.listBranches(getProjectKey(), new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.ListBranchesResult>(this) { @java.lang.Override public void preDisplay(final com.google.gerrit.common.data.ListBranchesResult result) { if (result.getNoRepository()) { branches.setVisible(false); addPanel.setVisible(false); delBranch.setVisible(false); com.google.gwt.user.client.ui.Label no = new com.google.gwt.user.client.ui.Label(Util.C.errorNoGitRepository()); no.setStyleName(Gerrit.RESOURCES.css().smallHeading()); add(no); } else { enableForm(true); display(result.getBranches()); addPanel.setVisible(result.getCanAdd()); } } }); savedPanel = BRANCH; }
@org.junit.Test public void copyAllScoresOnTrivialRebase() throws java.lang.Exception { java.lang.String subject = "test commit"; java.lang.String file = "a.txt"; java.lang.String contents = "contents"; codeReview.setCopyAllScoresOnTrivialRebase(true); saveLabelConfig(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent()); com.google.gerrit.acceptance.PushOneCommit.Result r1 = push.to(git, "refs/for/master"); merge(r1); push = pushFactory.create(db, user.getIdent(), "non-conflicting", "b.txt", "other contents"); com.google.gerrit.acceptance.PushOneCommit.Result r2 = push.to(git, "refs/for/master"); merge(r2); git.checkout().setName(r1.getCommit().name()).call(); push = pushFactory.create(db, user.getIdent(), subject, file, contents); com.google.gerrit.acceptance.PushOneCommit.Result r3 = push.to(git, "refs/for/master"); review(r3, 1); assertApproval(r3, 1); rebase(r3); assertApproval(r3, 1); }

@java.lang.Override public int run() throws java.lang.Exception { mustHaveValidSite(); dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); threads = com.google.gerrit.pgm.util.ThreadLimiter.limitThreads(dbInjector, threads); checkNotSlaveMode(); disableLuceneAutomaticCommit(); if ((version) == null) { version = com.google.gerrit.server.index.ChangeSchemas.getLatest().getVersion(); } com.google.gerrit.lifecycle.LifecycleManager dbManager = new com.google.gerrit.lifecycle.LifecycleManager(); dbManager.add(dbInjector); dbManager.start(); sysInjector = createSysInjector(); com.google.gerrit.lifecycle.LifecycleManager sysManager = new com.google.gerrit.lifecycle.LifecycleManager(); sysManager.add(sysInjector); sysManager.start(); index = sysInjector.getInstance(com.google.gerrit.server.index.IndexCollection.class).getSearchIndex(); int result = 0; try { index.markReady(false); index.deleteAll(); result = indexAll(); index.markReady(true); } catch (java.lang.Exception e) { throw die(e.getMessage(), e); } sysManager.stop(); dbManager.stop(); return result; }

private java.util.List<com.google.gerrit.extensions.webui.TopMenu.MenuItem> my(com.google.gerrit.server.account.VersionedAccountPreferences v, org.eclipse.jgit.lib.Repository allUsers) { java.util.List<com.google.gerrit.extensions.webui.TopMenu.MenuItem> my = my(v); if ((my.isEmpty()) && (!(v.isDefaults()))) { try { com.google.gerrit.server.account.VersionedAccountPreferences d = com.google.gerrit.server.account.VersionedAccountPreferences.forDefault(); d.load(allUsers); my = my(d); } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException e) { com.google.gerrit.server.account.GetPreferences.log.warn("cannot read default preferences", e); } } if (my.isEmpty()) { my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem("Changes", "#/dashboard/self", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem("Drafts", "#/q/owner:self+is:draft", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem("Draft Comments", "#/q/has:draft", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem("Watched Changes", "#/q/is:watched+is:open", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem("Starred Changes", "#/q/is:starred", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem("Groups", "#/groups/self", null)); } return my; }

@java.lang.Override public void run() { int line = (cm.extras().hasActiveLine()) ? cm.getLineNumber(cm.extras().activeLine()) : 0; int res = java.util.Collections.binarySearch(chunks, new com.google.gerrit.client.diff.DiffChunkInfo(cm.side(), line, 0, false), getDiffChunkComparator()); diffChunkNavHelper(chunks, cm, res, dir); }
public org.eclipse.jgit.revwalk.RevCommit commit() throws java.io.IOException { com.google.gerrit.server.notedb.BatchMetaDataUpdate batch = openUpdate(); try { writeCommit(batch); org.eclipse.jgit.revwalk.RevCommit c = batch.commit(); return c; } catch (com.google.gwtorm.server.OrmException e) { throw new java.io.IOException(e); } finally { batch.close(); } }



public java.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException("No change found"); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(cd.project()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchProjectException e) { return ruleError(("Error looking up change " + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl("locate_submit_rule", "can_submit", "locate_submit_filter", "filter_submit_results", cd, projectState); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format("Submit rule '%s' for change %s of %s has no solution.", getSubmitRuleName(), cd.getId(), projectState.getName())); } return resultsToSubmitRecord(getSubmitRule(), results, cd); }
protected com.google.gitiles.FakeHttpServletResponse buildResponse(java.lang.String path, java.lang.String queryString, int expectedStatus) throws java.lang.Exception { com.google.gitiles.FakeHttpServletRequest req = com.google.gitiles.FakeHttpServletRequest.newRequest(); req.setPathInfo(path); if (queryString != null) { req.setQueryString(queryString); } com.google.gitiles.FakeHttpServletResponse res = new com.google.gitiles.FakeHttpServletResponse(); servlet.service(req, res); assertThat(res.getStatus()).isEqualTo(expectedStatus); return res; }
com.google.gerrit.server.git.AbandonOp create(@com.google.inject.assistedinject.Assisted @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account, @com.google.inject.assistedinject.Assisted @com.google.gerrit.common.Nullable java.lang.String msgTxt, @com.google.inject.assistedinject.Assisted com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling);

@org.junit.Test public void nameOfNewGroupMustNotBeNull() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Name of the group users-XYZ"); groupConfig.commit(metaDataUpdate); } }



public com.google.gerrit.extensions.common.RevisionInfo getRevisionInfo(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet in) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { com.google.gerrit.extensions.common.RevisionInfo rev = toRevisionInfo(cd, in, repo, rw, true, null); accountLoader.fill(); return rev; } }

@java.lang.Override protected void onLoad() { file.set(id, content); file.setText(fileName); file.setEnabled(fileName.isEmpty()); content.setText(fileContent); save.setEnabled(false); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { file.setFocus(true); } }); }

void set(com.google.gerrit.client.ui.CommentLinkProcessor commentLinkProcessor, com.google.gerrit.client.changes.ChangeInfo change, java.lang.String revision) { com.google.gerrit.client.changes.ChangeInfo.RevisionInfo revInfo = change.revision(revision); com.google.gerrit.client.changes.ChangeInfo.CommitInfo commit = revInfo.commit(); commitName.setText(revision); idText.setText(("Change-Id: " + (change.change_id()))); idText.setPreviewText(change.change_id()); com.google.gerrit.client.change.CommitBox.formatLink(commit.author(), authorPanel, authorNameEmail, authorDate, change); com.google.gerrit.client.change.CommitBox.formatLink(commit.committer(), committerPanel, committerNameEmail, committerDate, change); text.setHTML(commentLinkProcessor.apply(new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().append(commit.message()).linkify())); setWebLinks(change, revision, revInfo); if ((revInfo.commit().parents().length()) > 1) { mergeCommit.setVisible(true); } setParents(change.project(), revInfo.commit().parents()); boolean parentNotCurrent = false; if (revInfo.has_actions()) { com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.actions.ActionInfo> actions = revInfo.actions(); if (actions.containsKey("rebase")) { parentNotCurrent = actions.get("rebase").enabled(); } } com.google.gwt.user.client.ui.UIObject.setVisible(parentNotCurrentText, parentNotCurrent); parentNotCurrentText.setInnerText((parentNotCurrent ? "\u25cf" : "")); }
private org.eclipse.jetty.util.thread.ThreadPool threadPool(org.eclipse.jgit.lib.Config cfg) { int maxThreads = cfg.getInt("httpd", null, "maxthreads", 25); int minThreads = cfg.getInt("httpd", null, "minthreads", 5); int maxCapacity = cfg.getInt("httpd", null, "maxqueued", 50); int idleTimeout = ((int) (java.util.concurrent.TimeUnit.MILLISECONDS.convert(60, java.util.concurrent.TimeUnit.SECONDS))); org.eclipse.jetty.util.thread.QueuedThreadPool pool = new org.eclipse.jetty.util.thread.QueuedThreadPool(maxThreads, minThreads, idleTimeout, new org.eclipse.jetty.util.BlockingArrayQueue<java.lang.Runnable>(minThreads, minThreads, maxCapacity)); pool.setName("HTTP"); return pool; }

private static void checkMutuallyExclusiveLabels(java.util.Set<java.lang.String> labels) throws com.google.gerrit.server.StarredChangesUtil.MutuallyExclusiveLabelsException { if (labels.containsAll(com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.StarredChangesUtil.DEFAULT_LABEL, com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL))) { throw new com.google.gerrit.server.StarredChangesUtil.MutuallyExclusiveLabelsException(com.google.gerrit.server.StarredChangesUtil.DEFAULT_LABEL, com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL); } }
@org.junit.Test public void applyDeltaToNoteDbPrimaryIsNoOp() { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.server.notedb.NoteDbChangeStateTest.newChange(); c.setNoteDbState("N"); com.google.gerrit.server.notedb.NoteDbChangeState.applyDelta(c, com.google.gerrit.server.notedb.NoteDbChangeState.Delta.create(c.getId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.metaId(SHA1), com.google.gerrit.server.notedb.NoteDbChangeStateTest.drafts(new com.google.gerrit.reviewdb.client.Account.Id(1001), SHA2))); assertThat(c.getNoteDbState()).isEqualTo("N"); }
private boolean add(com.google.gerrit.server.mail.ProjectWatch.Watchers matching, com.google.gerrit.reviewdb.client.AccountProjectWatch w, com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType type) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = args.identifiedUserFactory.create(w.getAccountId()); try { if (filterMatch(user, w.getFilter())) { if (w.isNotify(type)) { matching.bcc.accounts.add(w.getAccountId()); } return true; } } catch (com.google.gerrit.server.query.QueryParseException e) { } return false; }
public static synchronized java.io.File createTempDirectory() throws java.io.IOException { java.io.File tmp = java.io.File.createTempFile("gerrit_test_", ""); if ((!(tmp.delete())) || (!(tmp.mkdir()))) { throw new java.io.IOException(("Cannot create " + (tmp.getPath()))); } com.google.gerrit.acceptance.TempFileUtil.allDirsCreated.add(tmp); return tmp; }
private static java.nio.file.Path getOrCreateDataDir(com.googlesource.gerrit.plugins.lfs.LfsConfig config, java.nio.file.Path defaultDataDir) throws java.io.IOException { java.lang.String dataDir = config.getConfig().getString(LfsBackend.FS.name(), null, "directory"); if (com.google.common.base.Strings.isNullOrEmpty(dataDir)) { return defaultDataDir; } java.nio.file.Path ensured = java.nio.file.Files.createDirectories(java.nio.file.Paths.get(dataDir)); if (!(java.nio.file.Files.isReadable(ensured))) { throw new java.io.IOException((("Path '" + (ensured.toAbsolutePath())) + "' cannot be accessed")); } return ensured; }
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.config.SitePaths.class); bind(com.google.gerrit.pgm.init.api.InitFlags.class); bind(com.google.gerrit.pgm.init.Libraries.class); bind(com.google.gerrit.pgm.init.LibraryDownloader.class); factory(Section.Factory.class); step().to(com.google.gerrit.pgm.init.UpgradeFrom2_0_x.class); step().to(com.google.gerrit.pgm.init.InitGitManager.class); if (initDb) { step().to(com.google.gerrit.pgm.init.InitDatabase.class); } step().to(com.google.gerrit.pgm.init.InitIndex.class); step().to(com.google.gerrit.pgm.init.InitAuth.class); step().to(com.google.gerrit.pgm.init.InitLabels.class); step().to(com.google.gerrit.pgm.init.InitSendEmail.class); if (standalone) { step().to(com.google.gerrit.pgm.init.InitContainer.class); } step().to(com.google.gerrit.pgm.init.InitSshd.class); step().to(com.google.gerrit.pgm.init.InitHttpd.class); step().to(com.google.gerrit.pgm.init.InitCache.class); step().to(com.google.gerrit.pgm.init.InitPlugins.class); }

@java.lang.Override protected com.google.common.base.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size()) != 3) { return com.google.common.base.Optional.absent(); } return com.google.common.base.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(values.get(0), org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values.get(1)), values.get(2))); }
static java.lang.String toJson(java.lang.String cacheName, java.lang.Object key) { com.google.gson.Gson gson = new com.google.gson.GsonBuilder().create(); java.lang.String json; switch (cacheName) { case com.ericsson.gerrit.plugins.evictcache.GsonParser.ACCOUNTS : json = gson.toJson(key, Account.Id.class); break; case com.ericsson.gerrit.plugins.evictcache.GsonParser.GROUPS : json = gson.toJson(key, AccountGroup.Id.class); break; case com.ericsson.gerrit.plugins.evictcache.GsonParser.GROUPS_BYINCLUDE : case com.ericsson.gerrit.plugins.evictcache.GsonParser.GROUPS_MEMBERS : json = gson.toJson(key, AccountGroup.UUID.class); break; case com.ericsson.gerrit.plugins.evictcache.GsonParser.PROJECT_LIST : default : json = gson.toJson(key); } return json; }
@java.lang.Override protected com.google.gerrit.server.git.CodeReviewCommit _run(com.google.gerrit.server.git.CodeReviewCommit mergeTip, java.util.List<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.MergeException { args.mergeUtil.reduceToMinimalMerge(args.mergeSorter, toMerge); if (mergeTip == null) { mergeTip = toMerge.remove(0); } mergeTip = args.mergeUtil.getFirstFastForward(mergeTip, args.rw, toMerge); while (!(toMerge.isEmpty())) { mergeTip = args.mergeUtil.mergeOneCommit(args.myIdent, args.repo, args.rw, args.inserter, args.canMergeFlag, args.destBranch, mergeTip, toMerge.remove(0)); } final com.google.gerrit.reviewdb.client.PatchSetApproval submitApproval = args.mergeUtil.markCleanMerges(args.rw, args.canMergeFlag, mergeTip, args.alreadyAccepted); setRefLogIdent(submitApproval); return mergeTip; }
private void display(com.google.gerrit.client.account.Preferences p) { showSiteHeader.setValue(p.showSiteHeader()); useFlashClipboard.setValue(p.useFlashClipboard()); copySelfOnEmails.setValue(p.copySelfOnEmail()); setListBox(maximumPageSize, com.google.gerrit.client.account.DEFAULT_PAGESIZE, p.changesPerPage()); setListBox(dateFormat, AccountGeneralPreferences.DateFormat.STD, p.dateFormat()); setListBox(timeFormat, AccountGeneralPreferences.TimeFormat.HHMM_12, p.timeFormat()); relativeDateInChangeTable.setValue(p.relativeDateInChangeTable()); sizeBarInChangeTable.setValue(p.sizeBarInChangeTable()); legacycidInChangeTable.setValue(p.legacycidInChangeTable()); muteCommonPathPrefixes.setValue(p.muteCommonPathPrefixes()); setListBox(reviewCategoryStrategy, AccountGeneralPreferences.ReviewCategoryStrategy.NONE, p.reviewCategoryStrategy()); setListBox(diffView, AccountGeneralPreferences.DiffView.SIDE_BY_SIDE, p.diffView()); display(p.my()); }
@java.lang.Override protected void init() throws com.google.gerrit.common.errors.EmailException { if ((args.projectCache) != null) { projectState = args.projectCache.get(change.getProject()); } else { projectState = null; } if ((patchSet) == null) { try { patchSet = changeData.currentPatchSet(); } catch (com.google.gwtorm.server.OrmException err) { patchSet = null; } } if ((patchSet) != null) { setHeader("X-Gerrit-PatchSet", ((patchSet.getPatchSetId()) + "")); if ((patchSetInfo) == null) { try { patchSetInfo = args.patchSetInfoFactory.get(args.db.get(), changeData.notes(), patchSet.getId()); } catch (com.google.gerrit.server.patch.PatchSetInfoNotAvailableException | com.google.gwtorm.server.OrmException err) { patchSetInfo = null; } } } authors = getAuthors(); super.init(); if ((timestamp) != null) { setHeader("Date", new java.util.Date(timestamp.getTime())); } setChangeSubjectHeader(); setHeader("X-Gerrit-Change-Id", ("" + (change.getKey().get()))); setChangeUrlHeader(); setCommitIdHeader(); }
java.util.List<org.eclipse.jgit.transport.URIish> getURIs(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String urlMatch) { java.util.List<org.eclipse.jgit.transport.URIish> r = com.google.common.collect.Lists.newArrayListWithCapacity(remote.getURIs().size()); for (org.eclipse.jgit.transport.URIish uri : remote.getURIs()) { if (com.googlesource.gerrit.plugins.replication.Destination.matches(uri, urlMatch)) { java.lang.String name = project.get(); if (com.googlesource.gerrit.plugins.replication.Destination.needsUrlEncoding(uri)) { name = com.googlesource.gerrit.plugins.replication.Destination.encode(name); } if (remoteNameStyle.equals("dash")) { name = name.replace("/", "-"); } else if (remoteNameStyle.equals("underscore")) { name = name.replace("/", "_"); } else if (!(remoteNameStyle.equals("slash"))) { ReplicationQueue.log.debug(java.lang.String.format("Unknown remoteNameStyle: %s, falling back to slash", remoteNameStyle)); } java.lang.String replacedPath = com.googlesource.gerrit.plugins.replication.ReplicationQueue.replaceName(uri.getPath(), name); if (replacedPath != null) { uri = uri.setPath(replacedPath); r.add(uri); } } } return r; }


public boolean canReadCommit(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.Repository repo = openRepository(); try { return isMergedIntoVisibleRef(repo, db, rw, commit, repo.getAllRefs().values()); } finally { repo.close(); } } catch (java.io.IOException e) { java.lang.String msg = java.lang.String.format("Cannot verify permissions to commit object %s in repository %s", commit.name(), getProject().getNameKey()); com.google.gerrit.server.project.ProjectControl.log.error(msg, e); return false; } }
private boolean canRegisterNewEmail() { return com.google.gerrit.client.Gerrit.getConfig().canEdit(Account.FieldName.REGISTER_NEW_EMAIL); }


private void fireCommentAddedEvent(com.google.gerrit.server.update.Context ctx) throws com.google.gwtorm.server.OrmException { if (approvals.isEmpty()) { return; } com.google.gerrit.server.project.ChangeControl changeControl = changeControlFactory.controlFor(ctx.getDb(), notes.getChange(), ctx.getUser()); java.util.List<com.google.gerrit.common.data.LabelType> labels = changeControl.getLabelTypes().getLabelTypes(); java.util.Map<java.lang.String, java.lang.Short> allApprovals = new java.util.HashMap<>(); java.util.Map<java.lang.String, java.lang.Short> oldApprovals = new java.util.HashMap<>(); for (com.google.gerrit.common.data.LabelType lt : labels) { allApprovals.put(lt.getName(), ((short) (0))); oldApprovals.put(lt.getName(), null); } for (java.util.Map.Entry<java.lang.String, java.lang.Short> entry : approvals.entrySet()) { if ((entry.getValue()) != 0) { allApprovals.put(entry.getKey(), entry.getValue()); oldApprovals.put(entry.getKey(), ((short) (0))); } } commentAdded.fire(notes.getChange(), newPatchSet, ctx.getAccount(), null, allApprovals, oldApprovals, ctx.getWhen()); }
protected org.eclipse.jgit.revwalk.RevCommit getRemoteHead() throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { return getHead(repo, "refs/heads/master"); } }

private void executeUpdateRepo() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { try { com.google.gerrit.server.git.BatchUpdate.RepoContext ctx = new com.google.gerrit.server.git.BatchUpdate.RepoContext(); for (com.google.gerrit.server.git.BatchUpdate.Op op : ops.values()) { op.updateRepo(ctx); } if ((inserter) != null) { inserter.flush(); } } catch (java.lang.Exception e) { com.google.common.base.Throwables.propagateIfPossible(e, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.git.UpdateException(e); } }
@java.lang.Override public void onSuccess(java.lang.String result) { type = result; injectMode(type, modeInjectorCb); }
private com.google.gerrit.pgm.Init.SiteInit createSiteInit() { final com.google.gerrit.pgm.util.ConsoleUI ui = com.google.gerrit.pgm.util.ConsoleUI.getInstance(batchMode); final java.io.File sitePath = getSitePath(); final java.util.List<java.lang.Module> m = new java.util.ArrayList<java.lang.Module>(); m.add(new com.google.gerrit.pgm.init.InitModule()); m.add(new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.pgm.util.ConsoleUI.class).toInstance(ui); bind(java.io.File.class).annotatedWith(com.google.gerrit.server.config.SitePath.class).toInstance(sitePath); bind(com.google.gerrit.pgm.init.ReloadSiteLibrary.class).toInstance(new com.google.gerrit.pgm.init.ReloadSiteLibrary() { @java.lang.Override public void reload() { com.google.gerrit.pgm.Init.super.loadSiteLib(); } }); } }); try { return com.google.inject.Guice.createInjector(com.google.gerrit.pgm.PRODUCTION, m).getInstance(com.google.gerrit.pgm.Init.SiteInit.class); } catch (com.google.inject.CreationException ce) { final com.google.inject.spi.Message first = ce.getErrorMessages().iterator().next(); java.lang.Throwable why = first.getCause(); if (why instanceof com.google.gerrit.pgm.util.Die) { throw ((com.google.gerrit.pgm.util.Die) (why)); } final java.lang.StringBuilder buf = new java.lang.StringBuilder(); while (why != null) { buf.append(why.getMessage()); why = why.getCause(); if (why != null) { buf.append("\n caused by "); } } throw die(buf.toString(), new java.lang.RuntimeException("InitInjector failed", ce)); } }
private void initSubmitType() { submitTypePanel = new com.google.gwt.user.client.ui.VerticalPanel(); submitTypePanel.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingSubmitType())); submitType = new com.google.gwt.user.client.ui.ListBox(); for (final com.google.gerrit.reviewdb.Project.SubmitType type : Project.SubmitType.values()) { submitType.addItem(com.google.gerrit.client.admin.Util.toLongString(type), type.name()); } submitType.addChangeHandler(new com.google.gwt.event.dom.client.ChangeHandler() { @java.lang.Override public void onChange(final com.google.gwt.event.dom.client.ChangeEvent event) { saveProject.setEnabled(true); } }); submitTypePanel.add(submitType); add(submitTypePanel); }
@java.lang.Override public final void updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext ctx) throws java.lang.Exception { logDebug("{}#updateRepo for change {}", getClass().getSimpleName(), toMerge.change().getId()); com.google.gerrit.server.git.CodeReviewCommit tipBefore = args.mergeTip.getCurrentTip(); alreadyMerged = getAlreadyMergedCommit(ctx); if ((alreadyMerged) == null) { updateRepoImpl(ctx); } else { logDebug("Already merged as {}", alreadyMerged.name()); } com.google.gerrit.server.git.CodeReviewCommit tipAfter = args.mergeTip.getCurrentTip(); if (java.util.Objects.equals(tipBefore, tipAfter)) { logDebug("Did not move tip", getClass().getSimpleName()); return; } else if (tipAfter == null) { logDebug("No merge tip, no update to perform"); return; } logDebug("Moved tip from {} to {}", tipBefore, tipAfter); checkProjectConfig(ctx, tipAfter); command = new org.eclipse.jgit.transport.ReceiveCommand(firstNonNull(tipBefore, org.eclipse.jgit.lib.ObjectId.zeroId()), tipAfter, getDest().get()); ctx.addRefUpdate(command); args.submoduleOp.addBranchTip(getDest(), tipAfter); }

@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { ui.message("Generating Superproject subscriptions table to submodule ACLs"); try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery(("SELECT " + (((("key.super_project.project_name, " + "key.super_project.branch_name, ") + "submodule.project_name ") + "submodule.branch_name ") + "FROM submodule_subscriptions")))) { while (rs.next()) { com.google.gerrit.reviewdb.client.Project.NameKey superproject = new com.google.gerrit.reviewdb.client.Project.NameKey(rs.getString(1)); com.google.gerrit.reviewdb.client.Branch.NameKey superbranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(superproject, rs.getString(2)); com.google.gerrit.reviewdb.client.Project.NameKey submodule = new com.google.gerrit.reviewdb.client.Project.NameKey(rs.getString(4)); com.google.gerrit.reviewdb.client.Branch.NameKey subbranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(submodule, rs.getString(5)); allowSubmoduleSubscription(subbranch, superbranch); } } }
private void loadFileContent() { com.google.gerrit.client.changes.ChangeFileApi.getContent(id, getText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ChangeFileApi.FileContent>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeFileApi.FileContent result) { textArea.setText(result.text()); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { if (com.google.gerrit.client.rpc.RestApi.isNotFound(caught)) { } else { super.onFailure(caught); } } }); }

public static com.google.gitiles.BaseServlet notFoundServlet() { return new com.google.gitiles.BaseServlet(null, null) { private static final long serialVersionUID = 1L; @java.lang.Override public void service(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) { res.setStatus(com.google.gitiles.SC_NOT_FOUND); } }; }


private static com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> callback(final java.lang.String target) { return new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject in) { com.google.gerrit.client.api.DefaultActions.UiResult result = asUiResult(in); if ((result.alert()) != null) { com.google.gwt.user.client.Window.alert(result.alert()); } if (((result.redirectUrl()) != null) && (result.openWindow())) { com.google.gwt.user.client.Window.open(result.redirectUrl(), "_blank", null); } else if ((result.redirectUrl()) != null) { com.google.gwt.user.client.Window.Location.assign(result.redirectUrl()); } else { com.google.gerrit.client.Gerrit.display(target); } } private com.google.gerrit.client.api.DefaultActions.UiResult asUiResult(com.google.gwt.core.client.JavaScriptObject in) { if (com.google.gerrit.client.rpc.NativeString.is(in)) { java.lang.String str = ((com.google.gerrit.client.rpc.NativeString) (in)).asString(); return str.isEmpty() ? com.google.gerrit.client.api.DefaultActions.UiResult.none() : com.google.gerrit.client.api.DefaultActions.UiResult.alert(str); } return in.cast(); } }; }

@com.google.gwt.uibinder.client.UiHandler("add") void onAdd(com.google.gwt.event.dom.client.ClickEvent e) { java.lang.String hashtag = hashtagTextBox.getText(); if (!(hashtag.isEmpty())) { addHashtag(hashtag); } }
public void remove(com.google.gerrit.common.data.AccessSection section) { if (section != null) { accessSections.remove(section.getName()); } }
@org.junit.Test public void testPushForMasterWithNotify() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount user2 = accounts.user2(); java.lang.String pushSpec = ((("refs/for/master" + "%reviewer=") + (user.email)) + ",cc=") + (user2.email); sender.clear(); com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo(((pushSpec + ",notify=") + (com.google.gerrit.extensions.api.changes.ReviewInput.NotifyHandling.NONE))); r.assertOkStatus(); assertThat(sender.getMessages()).hasSize(0); sender.clear(); r = pushTo(((pushSpec + ",notify=") + (com.google.gerrit.extensions.api.changes.ReviewInput.NotifyHandling.OWNER))); r.assertOkStatus(); assertThat(sender.getMessages()).hasSize(0); sender.clear(); r = pushTo(((pushSpec + ",notify=") + (com.google.gerrit.extensions.api.changes.ReviewInput.NotifyHandling.OWNER_REVIEWERS))); r.assertOkStatus(); assertThat(sender.getMessages()).hasSize(1); com.google.gerrit.testutil.FakeEmailSender.Message m = sender.getMessages().get(0); assertThat(m.rcpt()).containsExactly(user.emailAddress); sender.clear(); r = pushTo(((pushSpec + ",notify=") + (com.google.gerrit.extensions.api.changes.ReviewInput.NotifyHandling.ALL))); r.assertOkStatus(); assertThat(sender.getMessages()).hasSize(1); m = sender.getMessages().get(0); assertThat(m.rcpt()).containsExactly(user.emailAddress, user2.emailAddress); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.server.change.DeleteDraftPatchSet.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet patchSet = rsrc.getPatchSet(); com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId = patchSet.getId(); com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(patchSet.isDraft())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Patch set is not a draft."); } if (!(allowDrafts)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Draft workflow is disabled."); } if (!(rsrc.getControl().canDeleteDraft(dbProvider.get()))) { throw new com.google.gerrit.extensions.restapi.AuthException("Not permitted to delete this draft patch set"); } deleteDraftPatchSet(patchSet, change); deleteOrUpdateDraftChange(patchSetId, change); return com.google.gerrit.extensions.restapi.Response.none(); }
public void onSuccess(final com.google.gerrit.client.data.AccountDashboardInfo r) { if (isAttached()) { display(r); } }
public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> ctls = changeUtil.findChanges(id, user.get()); if (ctls.isEmpty()) { try { changeIndexer.delete(id); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id).get(), e); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } if ((ctls.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Multiple changes found for " + id)); } com.google.gerrit.server.project.ChangeControl ctl = ctls.get(0); if (!(ctl.isVisible(db.get()))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } return new com.google.gerrit.server.change.ChangeResource(ctl); }

public java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) { java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create("revision", patchSetAttribute.revision)); properties.add(propertyFactory.create("patch-set-number", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("ref", patchSetAttribute.ref)); properties.add(propertyFactory.create("created-on", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create("parents", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create("deletions", java.lang.Integer.toString(patchSetAttribute.sizeDeletions))); properties.add(propertyFactory.create("insertions", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.add(propertyFactory.create("is-draft", java.lang.Boolean.toString(patchSetAttribute.isDraft))); properties.addAll(extractFrom(patchSetAttribute.uploader, "uploader")); properties.addAll(extractFrom(patchSetAttribute.author, "author")); return properties; }
@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(event instanceof com.google.gerrit.server.events.ProjectEvent)) { return; } com.google.gerrit.server.events.ProjectEvent projectEvent = ((com.google.gerrit.server.events.ProjectEvent) (event)); org.eclipse.jgit.lib.Config cfg; try { cfg = configFactory.getProjectPluginConfigWithInheritance(projectEvent.getProjectNameKey(), pluginName); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn("Ignoring event for a non-existing project {}, {}", projectEvent.getProjectNameKey().get(), projectEvent); return; } for (java.lang.String name : cfg.getSubsections(com.googlesource.gerrit.plugins.webhooks.Configuration.REMOTE)) { java.lang.String url = cfg.getString(com.googlesource.gerrit.plugins.webhooks.Configuration.REMOTE, name, "url"); if (com.google.common.base.Strings.isNullOrEmpty(url)) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn("remote.{}.url not defined, skipping this remote", name); continue; } com.googlesource.gerrit.plugins.webhooks.EventProcessor processor = processorFactory.create(projectEvent, cfg, name); if (processor.shouldProcess()) { post(url, processor); } } }

com.google.gerrit.reviewdb.client.PatchLineComment export() { com.google.gerrit.reviewdb.client.PatchLineComment plc = new com.google.gerrit.reviewdb.client.PatchLineComment(key.export(), lineNbr, author.export(), parentUuid, writtenOn); plc.setSide(side); plc.setMessage(message); if ((range) != null) { plc.setRange(range.export()); } plc.setTag(tag); plc.setRevId(new com.google.gerrit.reviewdb.client.RevId(revId)); return plc; }

@org.junit.Test public void mergeOnPushToBranch() throws java.lang.Exception { grant(Permission.PUSH, project, "refs/heads/master"); com.google.gerrit.acceptance.PushOneCommit.Result r = push("refs/for/master", PushOneCommit.SUBJECT, "a.txt", "some content"); r.assertOkStatus(); git().push().setRefSpecs(new org.eclipse.jgit.transport.RefSpec(((r.getCommit().name()) + ":refs/heads/master"))).call(); assertCommit(project, "refs/heads/master"); assertSubmitApproval(r.getPatchSetId()); com.google.gerrit.extensions.common.ChangeInfo c = gApi.changes().id(r.getPatchSetId().getParentKey().get()).get(); assertThat(c.status).isEqualTo(ChangeStatus.MERGED); }

private static com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.AccountPreferencesInfo> createMyMenuBarCallback() { return new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountPreferencesInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountPreferencesInfo prefs) { com.google.gerrit.client.ui.LinkMenuBar myBar = com.google.gerrit.client.Gerrit.menuBars.get(GerritTopMenu.MY.menuName); myBar.clear(); java.util.List<com.google.gerrit.client.info.TopMenuItem> myMenuItems = com.google.gerrit.client.rpc.Natives.asList(prefs.my()); java.lang.String url = null; if (!(myMenuItems.isEmpty())) { if (myMenuItems.get(0).getUrl().startsWith("#")) { url = myMenuItems.get(0).getUrl().substring(1); } for (com.google.gerrit.client.info.TopMenuItem item : myMenuItems) { com.google.gerrit.client.Gerrit.addExtensionLink(myBar, item); } } com.google.gerrit.client.Gerrit.defaultScreenToken = url; } }; }
public org.eclipse.jgit.lib.ObjectId sha1() { return org.eclipse.jgit.lib.ObjectId.fromRaw(com.google.common.hash.Hashing.sha1().hashString(get(), java.nio.charset.StandardCharsets.UTF_8).asBytes()); }
public static void onAction(com.google.gerrit.client.info.ChangeInfo change, com.google.gerrit.client.info.ActionInfo action, com.google.gerrit.client.actions.ActionButton button) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.change(change.legacyId().get()).view(action.id()); com.google.gwt.core.client.JavaScriptObject f = com.google.gerrit.client.api.ChangeGlue.get(action.id()); if (f != null) { com.google.gerrit.client.api.ActionContext c = com.google.gerrit.client.api.ActionContext.create(api); c.set(action); c.set(change); c.button(button); com.google.gerrit.client.api.ApiGlue.invoke(f, c); } else { com.google.gerrit.client.api.DefaultActions.invoke(change, action, api); } }

@java.lang.Override public void updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { if ((newCommit) == null) { return; } ctx.getChangeUpdate().setPatchSetId(psId); com.google.gerrit.reviewdb.client.PatchSet ps = new com.google.gerrit.reviewdb.client.PatchSet(psId); ps.setCreatedOn(ctx.getWhen()); ps.setUploader(args.caller.getAccountId()); ps.setRevision(new com.google.gerrit.reviewdb.client.RevId(newCommit.getId().getName())); com.google.gerrit.reviewdb.client.Change c = toMerge.change(); ps.setGroups(com.google.gerrit.server.git.GroupCollector.getCurrentGroups(args.db, c)); args.db.patchSets().insert(java.util.Collections.singleton(ps)); c.setCurrentPatchSet(patchSetInfo); args.db.changes().update(java.util.Collections.singletonList(c)); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.reviewdb.client.PatchSetApproval a : args.approvalsUtil.byPatchSet(args.db, toMerge.getControl(), toMerge.getPatchsetId())) { approvals.add(new com.google.gerrit.reviewdb.client.PatchSetApproval(ps.getId(), a)); ctx.getChangeUpdate().putApproval(a.getLabel(), a.getValue()); } args.db.patchSetApprovals().insert(approvals); newCommit.copyFrom(toMerge); newCommit.setStatusCode(CommitMergeStatus.CLEAN_PICK); newCommit.setControl(args.changeControlFactory.controlFor(toMerge.change(), args.caller)); mergeTip.moveTipTo(newCommit, newCommit); args.commits.put(newCommit); }


private void onSave() { java.lang.String message = editArea.getValue().trim(); if ((message.length()) == 0) { return; } com.google.gerrit.client.changes.CommentInfo original = comment; com.google.gerrit.client.changes.CommentInput input = com.google.gerrit.client.changes.CommentInput.create(original); input.setMessage(message); enableEdit(false); com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo> cb = new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { enableEdit(true); set(result); setEdit(false); if (autoClosed) { setOpen(false); } } @java.lang.Override public void onFailure(java.lang.Throwable e) { enableEdit(true); super.onFailure(e); } }; if ((original.id()) == null) { com.google.gerrit.client.changes.CommentApi.createDraft(psId, input, cb); } else { com.google.gerrit.client.changes.CommentApi.updateDraft(psId, original.id(), input, cb); } getCm().focus(); }

@java.lang.Override public com.google.gerrit.server.change.ChangeKind load(com.google.gerrit.server.change.ChangeKindCacheImpl.Key key) throws java.io.IOException { if (java.util.Objects.equals(key.prior, key.next)) { return ChangeKind.NO_CODE_CHANGE; } try (org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(key.repo)) { org.eclipse.jgit.revwalk.RevCommit prior = walk.parseCommit(key.prior); walk.parseBody(prior); org.eclipse.jgit.revwalk.RevCommit next = walk.parseCommit(key.next); walk.parseBody(next); if (!(next.getFullMessage().equals(prior.getFullMessage()))) { if (com.google.gerrit.server.change.ChangeKindCacheImpl.Loader.isSameDeltaAndTree(prior, next)) { return ChangeKind.NO_CODE_CHANGE; } else { return ChangeKind.REWORK; } } if (com.google.gerrit.server.change.ChangeKindCacheImpl.Loader.isSameDeltaAndTree(prior, next)) { return ChangeKind.NO_CHANGE; } if (((prior.getParentCount()) != 1) || ((next.getParentCount()) != 1)) { return ChangeKind.REWORK; } org.eclipse.jgit.merge.ThreeWayMerger merger = com.google.gerrit.server.git.MergeUtil.newThreeWayMerger(key.repo, com.google.gerrit.server.git.MergeUtil.createDryRunInserter(key.repo), key.strategyName); merger.setBase(prior.getParent(0)); if ((merger.merge(next.getParent(0), prior)) && (merger.getResultTreeId().equals(next.getTree()))) { return ChangeKind.TRIVIAL_REBASE; } else { return ChangeKind.REWORK; } } finally { key.repo = null; } }
public com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> byChange(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.IdentifiedUser user) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = gitManager.openRepository(change.getProject())) { java.lang.String editRefPrefix = com.google.gerrit.server.edit.ChangeEditUtil.editRefPrefix(user.getAccountId(), change.getId()); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(editRefPrefix); if (refs.isEmpty()) { return com.google.common.base.Optional.absent(); } org.eclipse.jgit.lib.Ref ref = com.google.common.collect.Iterables.getOnlyElement(refs.values()); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(ref.getObjectId()); com.google.gerrit.reviewdb.client.PatchSet basePs = getBasePatchSet(change, ref); return com.google.common.base.Optional.of(new com.google.gerrit.server.edit.ChangeEdit(user, change, ref, commit, basePs)); } } }
public com.google.gerrit.server.notedb.rebuild.SiteRebuilder setTrialMode(boolean trial) { this.trial = trial; return this; }
@java.lang.Override protected void onInitUI() { super.onInitUI(); table = new com.google.gerrit.client.changes.ChangeTable2(); table.addStyleName(Gerrit.RESOURCES.css().accountDashboard()); outgoing = new com.google.gerrit.client.changes.ChangeTable2.Section(); incoming = new com.google.gerrit.client.changes.ChangeTable2.Section(); closed = new com.google.gerrit.client.changes.ChangeTable2.Section(); outgoing.setTitleText(Util.C.outgoingReviews()); incoming.setTitleText(Util.C.incomingReviews()); closed.setTitleText(Util.C.recentlyClosed()); table.addSection(outgoing); table.addSection(incoming); table.addSection(closed); add(table); table.setSavePointerId(("owner:" + (ownerId))); }

public void publish(com.google.gerrit.server.edit.ChangeEdit edit) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.Change change = edit.getChange(); org.eclipse.jgit.lib.Repository repo = gitManager.openRepository(change.getProject()); try { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo); org.eclipse.jgit.lib.ObjectInserter inserter = repo.newObjectInserter(); try { com.google.gerrit.reviewdb.client.PatchSet basePatchSet = edit.getBasePatchSet(); if (!(basePatchSet.getId().equals(change.currentPatchSetId()))) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("only edit for current patch set can be published"); } insertPatchSet(edit, change, repo, rw, basePatchSet, squashEdit(repo, rw, inserter, edit.getEditCommit(), basePatchSet)); } finally { inserter.release(); rw.release(); } com.google.gerrit.server.edit.ChangeEditUtil.deleteRef(repo, edit); } finally { repo.close(); } }

private void renderHeader(java.lang.String header) throws java.io.IOException { int lf = header.indexOf('\n'); java.lang.String first; java.lang.String rest; if (0 <= lf) { first = header.substring(0, lf); rest = header.substring((lf + 1)); } else { first = header; rest = ""; } getOutputStream().write(renderer.newRenderer("gitiles.diffHeader").setData(com.google.common.collect.ImmutableMap.of("first", first, "rest", rest, "fileIndex", fileIndex)).render().getBytes(Charsets.UTF_8)); }


private void parseCreate(final org.eclipse.jgit.transport.ReceiveCommand cmd) { org.eclipse.jgit.revwalk.RevObject obj; try { obj = rp.getRevWalk().parseAny(cmd.getNewId()); } catch (java.io.IOException err) { com.google.gerrit.server.git.ReceiveCommits.log.error((((("Invalid object " + (cmd.getNewId().name())) + " for ") + (cmd.getRefName())) + " creation"), err); reject(cmd, "invalid object"); return; } if ((com.google.gerrit.server.git.ReceiveCommits.isHead(cmd)) && (!(isCommit(cmd)))) { return; } com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canCreate(rp.getRevWalk(), obj)) { validateNewCommits(ctl, cmd); batch.addCommand(cmd); } else { reject(cmd); } }
private org.eclipse.jgit.treewalk.AbstractTreeIterator getTreeIterator(org.eclipse.jgit.lib.Repository repo, java.lang.String name) throws java.io.IOException { org.eclipse.jgit.treewalk.CanonicalTreeParser p = new org.eclipse.jgit.treewalk.CanonicalTreeParser(); org.eclipse.jgit.lib.ObjectReader or = repo.newObjectReader(); try { p.reset(or, new org.eclipse.jgit.revwalk.RevWalk(repo).parseTree(repo.resolve(name))); return p; } finally { or.release(); } }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { opResult = com.google.gerrit.server.restapi.change.PostReviewersOp.Result.builder().setAddedReviewers(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).setAddedCCs(com.google.common.collect.ImmutableList.copyOf(addedCCs)).build(); emailReviewers(rsrc.getChange(), com.google.common.collect.Lists.transform(addedReviewers, ( r) -> r.getAccountId()), ((addedCCs) == null ? com.google.common.collect.ImmutableList.of() : addedCCs), reviewersByEmail, addedCCsByEmail, notify, accountsToNotify); if (!(addedReviewers.isEmpty())) { java.util.List<com.google.gerrit.server.account.AccountState> reviewers = addedReviewers.stream().map(( r) -> accountCache.get(r.getAccountId())).collect(java.util.stream.Collectors.toList()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, ctx.getAccount(), ctx.getWhen()); } }
@java.lang.Override public com.google.gerrit.server.CurrentUser getCurrentUser() { return null; }
public com.google.gerrit.server.IdentifiedUser create(java.net.SocketAddress remotePeer, com.google.gerrit.reviewdb.client.Account.Id id) { return new com.google.gerrit.server.IdentifiedUser(capabilityControlFactory, authConfig, realm, anonymousCowardName, canonicalUrl, accountCache, groupBackend, disableReverseDnsLookup, com.google.inject.util.Providers.of(remotePeer), null, id, null); }

@org.junit.Test public void testUpsertTwoBothExistsing() throws com.google.gwtorm.client.OrmException, java.sql.SQLException { stubExecuteBatchOK(com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE, 1, 1); createClassUnderTest().upsert(com.google.gwtorm.jdbc.TestJdbcAccess.TWO_ROWS); }
private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return "Command was already destroyed"; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] args = dcmd.getArguments(); for (int i = 1; i < (args.length); i++) { commandName.append(".").append(args[i]); } return commandName.toString(); }

@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } if (input == null) { input = new com.google.gerrit.server.account.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.String newPassword; if (input.generate) { newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { newPassword = null; } else { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); newPassword = input.httpPassword; } return apply(rsrc.getUser(), newPassword); }

public static com.google.gerrit.client.account.DiffPreferences create(com.google.gerrit.extensions.client.DiffPreferencesInfo in) { com.google.gerrit.client.account.DiffPreferences p = createObject().cast(); p.ignoreWhitespace(in.ignoreWhitespace); p.tabSize(in.tabSize); p.lineLength(in.lineLength); p.cursorBlinkRate(in.cursorBlinkRate); p.context(in.context); p.intralineDifference(in.intralineDifference); p.showLineEndings(in.showLineEndings); p.showTabs(in.showTabs); p.showWhitespaceErrors(in.showWhitespaceErrors); p.syntaxHighlighting(in.syntaxHighlighting); p.hideTopMenu(in.hideTopMenu); p.autoHideDiffTableHeader(in.autoHideDiffTableHeader); p.hideLineNumbers(in.hideLineNumbers); p.expandAllComments(in.expandAllComments); p.manualReview(in.manualReview); p.renderEntireFile(in.renderEntireFile); p.theme(in.theme); p.hideEmptyPane(in.hideEmptyPane); return p; }
@org.junit.Test public void testBlockedExtensions() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommit(com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidatorTest.BLOCKED_EXTENSIONS_LC); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidator.performValidation(repo, c, com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidatorTest.BLOCKED_EXTENSIONS_LC); java.util.List<java.lang.String> expected = new java.util.ArrayList<>(); for (java.lang.String extension : com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidatorTest.BLOCKED_EXTENSIONS_LC) { expected.add(("ERROR: blocked file: foo." + extension)); } assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); }
@org.junit.Test public void accountEvictionFromAccountCreatorIfUserBranchIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.acceptance.AccountCreator accountCreator = org.easymock.EasyMock.createNiceMock(com.google.gerrit.acceptance.AccountCreator.class); accountCreator.evict(com.google.common.collect.ImmutableSet.of(accountId)); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCreator); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(accountCreator, null, null).reset(project).reset(allUsers).build()) { createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCreator); }

public java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> getMembersAudit(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { if (readFromNoteDb) { throw new com.google.gwtorm.server.OrmException("Audit logs not yet implemented in NoteDb"); } java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = com.google.gerrit.server.group.db.Groups.getGroupFromReviewDb(db, groupUuid); if (!(group.isPresent())) { return com.google.common.collect.ImmutableList.of(); } return db.accountGroupMembersAudit().byGroup(group.get().getId()).toList(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.List<com.google.gerrit.extensions.common.AccountInfo>> apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> pastAssignees = rsrc.getNotes().load().getPastAssignees(); if (pastAssignees == null) { return com.google.gerrit.extensions.restapi.Response.ok(java.util.Collections.emptyList()); } com.google.gerrit.server.account.AccountLoader accountLoader = accountLoaderFactory.create(true); java.util.List<com.google.gerrit.extensions.common.AccountInfo> infos = pastAssignees.stream().map(accountLoader::get).collect(java.util.stream.Collectors.toList()); accountLoader.fill(); return com.google.gerrit.extensions.restapi.Response.ok(infos); }

public void execute() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { try { executeRefUpdates(); executeChangeOps(); reindexChanges(); if ((batchRefUpdate) != null) { gitRefUpdated.fire(project, batchRefUpdate); } executePostOps(); } catch (com.google.gerrit.server.git.UpdateException | com.google.gerrit.extensions.restapi.RestApiException e) { throw e; } catch (java.lang.Exception e) { com.google.common.base.Throwables.propagateIfPossible(e); throw new com.google.gerrit.server.git.UpdateException(e); } }
private void executeUpdateRepo() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { logDebug("Executing updateRepo on {} ops", ops.size()); com.google.gerrit.server.update.NoteDbBatchUpdate.RepoContextImpl ctx = new com.google.gerrit.server.update.NoteDbBatchUpdate.RepoContextImpl(); for (com.google.gerrit.server.update.BatchUpdateOp op : ops.values()) { op.updateRepo(ctx); } logDebug("Executing updateRepo on {} RepoOnlyOps", repoOnlyOps.size()); for (com.google.gerrit.server.update.RepoOnlyOp op : repoOnlyOps) { op.updateRepo(ctx); } if ((((onSubmitValidators) != null) && ((commands) != null)) && (!(commands.isEmpty()))) { onSubmitValidators.validate(project, new com.google.gerrit.server.update.ReadOnlyRepository(getRepository()), ctx.getInserter().newReader(), commands.getCommands()); } if ((inserter) != null) { logDebug("Flushing inserter"); inserter.flush(); } else { logDebug("No objects to flush"); } } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(e); } }
public static com.google.gerrit.index.query.Predicate<com.google.gerrit.server.group.InternalGroup> name(java.lang.String name) { return new com.google.gerrit.server.query.group.GroupPredicates.GroupPredicate(com.google.gerrit.server.index.group.GroupField.NAME, GroupQueryBuilder.FIELD_NAME, name.toLowerCase(java.util.Locale.US)); }
public boolean login(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope... scopes) throws java.io.IOException { if (isLoggedIn()) { return true; } com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.LOG.debug(("Login " + (this))); if (com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.isOAuthFinal(request)) { com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.LOG.debug(("Login-FINAL " + (this))); login(oauth.loginPhase2(request, response)); if (isLoggedIn()) { com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.LOG.debug(("Login-SUCCESS " + (this))); response.sendRedirect(com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.getTargetUrl(request)); return true; } else { response.sendError(HttpStatus.SC_UNAUTHORIZED); return false; } } else { this.loginScopes = getScopes(getScopesKey(request, response), scopes); com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.LOG.debug(("Login-PHASE1 " + (this))); oauth.loginPhase1(request, response, loginScopes); return false; } }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.server.access.ListAccess.ProjectAccessInfo> apply(com.google.gerrit.extensions.restapi.TopLevelResource resource) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.server.access.ListAccess.ProjectAccessInfo> access = com.google.common.collect.Maps.newTreeMap(); for (java.lang.String p : projects) { com.google.gerrit.reviewdb.client.Project.NameKey projectName = new com.google.gerrit.reviewdb.client.Project.NameKey(p); com.google.gerrit.server.project.ProjectControl pc = open(projectName); com.google.gerrit.server.git.ProjectConfig config; try { com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName); try { config = com.google.gerrit.server.git.ProjectConfig.read(md); if (config.updateGroupNames(groupBackend)) { md.setMessage("Update group names\n"); config.commit(md); projectCache.evict(config.getProject()); pc = open(projectName); } else if (((config.getRevision()) != null) && (!(config.getRevision().equals(pc.getProjectState().getConfig().getRevision())))) { projectCache.evict(config.getProject()); pc = open(projectName); } } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } finally { md.close(); } } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(p); } access.put(p, new com.google.gerrit.server.access.ListAccess.ProjectAccessInfo(pc, config)); } return access; }




@java.lang.Override protected void configure() { factory(AddBranch.Factory.class); factory(ChangeProjectAccess.Factory.class); factory(CreateProjectHandler.Factory.class); factory(ChangeProjectSettings.Factory.class); factory(DeleteBranches.Factory.class); factory(ListBranches.Factory.class); factory(VisibleProjects.Factory.class); factory(ProjectAccessFactory.Factory.class); factory(ProjectDetailFactory.Factory.class); }
public final void removeLineClass(net.codemirror.lib.CodeMirror.LineHandle line, net.codemirror.lib.CodeMirror.LineClassWhere where, java.lang.String className) { removeLineClassNative(line, where.name().toLowerCase(), className); }


@org.junit.Test public void testUpdateOne() throws com.google.gwtorm.client.OrmException, java.sql.SQLException { stubExecuteBatchOK(com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE, 1); createClassUnderTest().update(com.google.gwtorm.jdbc.TestJdbcAccess.ONE_ROW); }
private void assertChanges(java.util.Set<java.lang.String> actualChanges, com.google.gerrit.acceptance.PushOneCommit... expectedChanges) { assertEquals(expectedChanges.length, actualChanges.size()); for (com.google.gerrit.acceptance.PushOneCommit.Result c : expectedChanges) { assertTrue(actualChanges.contains(id(c))); } }
@org.junit.Test public void submitWithMergedAncestorsOnOtherBranch() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change1 = createChange(testRepo, "master", "base commit", "a.txt", "1", ""); submit(change1.getChangeId()); gApi.projects().name(project.get()).branch("branch").create(new com.google.gerrit.extensions.api.projects.BranchInput()); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange(testRepo, "master", "We want to commit this to master first", "a.txt", "2", ""); submit(change2.getChangeId()); org.eclipse.jgit.revwalk.RevCommit tip1 = getRemoteLog(project, "master").get(0); assertThat(tip1.getShortMessage()).isEqualTo(change2.getCommit().getShortMessage()); org.eclipse.jgit.revwalk.RevCommit tip2 = getRemoteLog(project, "branch").get(0); assertThat(tip2.getShortMessage()).isEqualTo(change1.getCommit().getShortMessage()); com.google.gerrit.acceptance.PushOneCommit.Result change3 = createChange(testRepo, "branch", ("This commit is based on master, which includes change2, " + "but is targeted at branch, which doesn't include it."), "a.txt", "3", ""); submit(change3.getChangeId()); java.util.List<org.eclipse.jgit.revwalk.RevCommit> log3 = getRemoteLog(project, "branch"); assertThat(log3.get(0).getShortMessage()).isEqualTo(change3.getCommit().getShortMessage()); assertThat(log3.get(1).getShortMessage()).isEqualTo(change2.getCommit().getShortMessage()); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); }

@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); index = new com.google.gerrit.server.query.change.IndexRewriteTest.DummyIndex(); queryBuilder = new com.google.gerrit.server.query.change.IndexRewriteTest.QueryBuilder(); rewrite = new com.google.gerrit.server.query.change.IndexRewriteImpl(index); }
@java.lang.Override public java.util.List<com.google.gerrit.server.change.TestSubmitRule.Record> apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.common.TestSubmitRuleInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.google.gerrit.extensions.common.TestSubmitRuleInput(); } if (((input.rule) != null) && (!(rules.isProjectRulesEnabled()))) { throw new com.google.gerrit.extensions.restapi.AuthException("project rules are disabled"); } input.filters = com.google.common.base.MoreObjects.firstNonNull(input.filters, filters); com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, changeDataFactory.create(db.get(), rsrc.getControl())); java.util.List<com.google.gerrit.common.data.SubmitRecord> records = evaluator.setPatchSet(rsrc.getPatchSet()).setLogErrors(false).setSkipSubmitFilters(((input.filters) == (com.google.gerrit.extensions.common.TestSubmitRuleInput.Filters.SKIP))).setRule(input.rule).evaluate(); java.util.List<com.google.gerrit.server.change.TestSubmitRule.Record> out = com.google.common.collect.Lists.newArrayListWithCapacity(records.size()); com.google.gerrit.server.account.AccountLoader accounts = accountInfoFactory.create(true); for (com.google.gerrit.common.data.SubmitRecord r : records) { out.add(new com.google.gerrit.server.change.TestSubmitRule.Record(r, accounts)); } if (!(out.isEmpty())) { out.get(0).prologReductionCount = evaluator.getReductionsConsumed(); } accounts.fill(); return out; }
@org.junit.Test public void inalidPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.SOME_INVALID_CHARACTERS.toCharArray()) { assertFalse(("invalid character accepted: " + c), com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c)); } }


public java.lang.String toProject(final com.google.gerrit.reviewdb.Project.NameKey project) { com.google.gerrit.common.data.ParamertizedString pattern = new com.google.gerrit.common.data.ParamertizedString(type.getProject()); final java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<java.lang.String, java.lang.String>(); p.put("project", com.google.gwt.http.client.URL.encodeQueryString(project.get())); return (baseUrl) + (pattern.replace(p)); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource, ?> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public java.util.Collection<com.google.gerrit.reviewdb.RefRight> get() { return this.get(wildProject).getLocalRights(); }
@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { final java.lang.String senderName; if (fromId != null) { final com.google.gerrit.reviewdb.client.Account account = accountCache.get(fromId).getAccount(); java.lang.String fullName = account.getFullName(); if ((fullName == null) || ("".equals(fullName))) { fullName = anonymousCowardName; } senderName = namePattern.replace("user", fullName).toString(); } else { senderName = serverAddress.getName(); } java.lang.String senderEmail; if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("userHash", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
public static com.google.gerrit.reviewdb.client.ChangeMessage newMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, java.lang.String body) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx.getDb(), ctx.getChange().currentPatchSetId(), ctx.getUser(), ctx.getWhen(), body); }
public void BROKEN_testIsEnabledUnknownEvent() { com.google.gerrit.server.events.Event event = new com.google.gerrit.server.events.Event("foo") {}; com.googlesource.gerrit.plugins.its.base.its.ItsConfig itsConfig = createItsConfig(); replayMocks(); assertFalse(itsConfig.isEnabled(event)); assertLogMessageContains("not recognised and ignored"); }
private void removeUI() { if ((replyToBox) != null) { replyToBox.unregisterReplyBox(); } parent.removeDraft(this, comment.side(), ((comment.line()) - 1)); removeFromParent(); getSelfWidget().clear(); com.google.gerrit.client.diff.PaddingManager manager = getPaddingManager(); manager.remove(this); manager.resizePaddingWidget(); cm.focus(); }
public static void publishEdit(int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.change(id).view("edit:publish").post(in, cb); }
private com.google.gerrit.acceptance.server.mail.StagedChange stageWipChange() throws java.lang.Exception { return stageChange(this::stageWipChange); }
private void columnPath(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb, com.google.gerrit.client.info.FileInfo info) { sb.openTd().setStyleName(com.google.gerrit.client.change.FileTable.R.css().pathColumn()).openAnchor(); java.lang.String path = info.path(); if (((mode) == (com.google.gerrit.client.change.FileTable.Mode.EDIT)) && (!(isEditable(info)))) { sb.setAttribute("onclick", ((((com.google.gerrit.client.change.FileTable.RESTORE) + "(event,") + (info._row())) + ")")); } else { sb.setAttribute("href", ("#" + (url(info)))).setAttribute("onclick", ((((com.google.gerrit.client.change.FileTable.OPEN) + "(event,") + (info._row())) + ")")); } if (Patch.COMMIT_MSG.equals(path)) { sb.append(Util.C.commitMessage()); } else if (com.google.gerrit.client.Gerrit.getUserPreferences().muteCommonPathPrefixes()) { int commonPrefixLen = commonPrefix(path); if (commonPrefixLen > 0) { sb.openSpan().setStyleName(com.google.gerrit.client.change.FileTable.R.css().commonPrefix()).append(path.substring(0, commonPrefixLen)).closeSpan(); } sb.append(path.substring(commonPrefixLen)); lastPath = path; } else { sb.append(path); } sb.closeAnchor(); if ((info.oldPath()) != null) { sb.br(); sb.openSpan().setStyleName(com.google.gerrit.client.change.FileTable.R.css().renameCopySource()).append(info.oldPath()).closeSpan(); } sb.closeTd(); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfigs({ @com.google.gerrit.acceptance.GerritConfig(name = "plugin.evict-cache.url", value = Constants.URL), @com.google.gerrit.acceptance.GerritConfig(name = "plugin.evict-cache.user", value = "admin") }) public void flushAndSendPost() throws java.lang.Exception { final java.lang.String flushRequest = (Constants.ENDPOINT_BASE) + (Constants.PROJECT_LIST); wireMockRule.addMockServiceRequestListener(new com.github.tomakehurst.wiremock.http.RequestListener() { @java.lang.Override public void requestReceived(com.github.tomakehurst.wiremock.http.Request request, com.github.tomakehurst.wiremock.http.Response response) { if (request.getAbsoluteUrl().contains(flushRequest)) { synchronized(flushRequest) { flushRequest.notify(); } } } }); givenThat(post(urlEqualTo(flushRequest)).willReturn(aResponse().withStatus(HttpStatus.SC_OK))); adminSshSession.exec(("gerrit flush-caches --cache " + (Constants.PROJECT_LIST))); synchronized(flushRequest) { flushRequest.wait(java.util.concurrent.TimeUnit.SECONDS.toMillis(2)); } verify(postRequestedFor(urlEqualTo(flushRequest))); }
@org.junit.Test public void parseAndPersistChangeMessage() throws java.lang.Exception { java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); java.lang.String ts = MailUtil.rfcDateformatter.format(java.time.ZonedDateTime.ofInstant(comments.get(0).updated.toInstant(), java.time.ZoneId.of("UTC"))); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields(); java.lang.String txt = com.google.gerrit.acceptance.server.mail.MailProcessorIT.newPlaintextBody(((((canonicalWebUrl.get()) + "#/c/") + (changeInfo._number)) + "/1"), "Test Message", null, null, null); b.textContent((txt + (com.google.gerrit.acceptance.server.mail.MailProcessorIT.textFooterForChange(changeId, ts)))); mailProcessor.process(b.build()); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeId).get().messages; assertThat(messages).hasSize(3); assertThat(com.google.common.collect.Iterables.getLast(messages).message).isEqualTo("Patch Set 1:\nTest Message"); assertThat(com.google.common.collect.Iterables.getLast(messages).tag).isEqualTo("mailMessageId=some id"); }
public static AccountGroup.UUID make(java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent creator) { java.security.MessageDigest md = org.eclipse.jgit.lib.Constants.newMessageDigest(); md.update(org.eclipse.jgit.lib.Constants.encode((("group " + groupName) + "\n"))); md.update(org.eclipse.jgit.lib.Constants.encode((("creator " + (creator.toExternalString())) + "\n"))); md.update(org.eclipse.jgit.lib.Constants.encode(java.lang.String.valueOf(java.lang.Math.random()))); return new com.google.gerrit.reviewdb.client.AccountGroup.UUID(org.eclipse.jgit.lib.ObjectId.fromRaw(md.digest()).name()); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); }
@org.junit.Test public void addReviewerByEmailToReviewableChangeInReviewDb() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isFalse(); forAll(( adder) -> { java.lang.String email = "addedbyemail@example.com"; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); addReviewer(adder, sc.changeId, sc.owner, email); assertThat(sender).notSent(); }); }
public com.google.gerrit.server.change.ChangeJson.ChangeInfo format(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException { return format(new com.google.gerrit.server.query.change.ChangeData(rsrc.getControl())); }
private net.codemirror.lib.CodeMirror.BeforeSelectionChangeHandler onSelectionChange(final net.codemirror.lib.CodeMirror cm) { return new net.codemirror.lib.CodeMirror.BeforeSelectionChangeHandler() { private com.google.gerrit.client.diff.InsertCommentBubble bubble; @java.lang.Override public void handle(net.codemirror.lib.CodeMirror cm, net.codemirror.lib.LineCharacter anchor, net.codemirror.lib.LineCharacter head) { if ((anchor == head) || (((anchor.getLine()) == (head.getLine())) && ((anchor.getCh()) == (head.getCh())))) { if ((bubble) != null) { bubble.setVisible(false); } return; } else if ((bubble) == null) { init(anchor); } else { bubble.setVisible(true); } bubble.position(cm.charCoords(head, "local")); } private void init(net.codemirror.lib.LineCharacter anchor) { bubble = new com.google.gerrit.client.diff.InsertCommentBubble(commentManager, cm); add(bubble); cm.addWidget(anchor, bubble.getElement(), false); } }; }
@java.lang.Override protected void doGet(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { java.lang.String query = com.google.common.base.CharMatcher.is('/').trimTrailingFrom(req.getPathInfo()); java.util.List<com.google.gerrit.extensions.common.ChangeInfo> results; try { results = changes.query(query).withLimit(2).get(); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { com.google.gerrit.httpd.DirectChangeByCommit.log.warn(("Cannot process query by URL: /r/" + query), e); results = com.google.common.collect.ImmutableList.of(); } java.lang.String token; if ((results.size()) == 1) { token = com.google.gerrit.common.PageLinks.toChange(new com.google.gerrit.reviewdb.client.Change.Id(results.iterator().next()._number)); } else { token = com.google.gerrit.common.PageLinks.toChangeQuery(query); } com.google.gerrit.httpd.UrlModule.toGerrit(token, req, rsp); }
public void start(final org.apache.sshd.server.Environment env) throws java.io.IOException { com.google.gerrit.sshd.SshScope.Context old = com.google.gerrit.sshd.SshScope.set(context); java.lang.String message; try { message = messageFactory.get().getMessage(); } finally { com.google.gerrit.sshd.SshScope.set(old); } err.write(org.eclipse.jgit.lib.Constants.encodeASCII(message.toString())); err.flush(); in.close(); out.close(); err.close(); exit.onExit(127); }

private void insertChange(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Account.Id me = currentUser.getAccountId(); final java.util.List<org.eclipse.jgit.revwalk.FooterLine> footerLines = commit.getFooterLines(); final com.google.gerrit.server.mail.MailUtil.MailRecipients recipients = new com.google.gerrit.server.mail.MailUtil.MailRecipients(); if ((magicBranch) != null) { recipients.add(magicBranch.getMailRecipients()); } recipients.add(getRecipientsFromFooters(accountResolver, ps, footerLines)); recipients.remove(me); db.changes().beginTransaction(change.getId()); try { com.google.gerrit.server.ChangeUtil.insertAncestors(db, ps.getId(), commit); db.patchSets().insert(java.util.Collections.singleton(ps)); db.changes().insert(java.util.Collections.singleton(change)); com.google.gerrit.server.ChangeUtil.updateTrackingIds(db, change, trackingFooters, footerLines); approvalsUtil.addReviewers(db, change, ps, info, recipients.getReviewers(), java.util.Collections.<com.google.gerrit.reviewdb.client.Account.Id>emptySet()); db.commit(); } finally { db.rollback(); } created = true; gitRefUpdated.fire(project.getNameKey(), ps.getRefName(), org.eclipse.jgit.lib.ObjectId.zeroId(), commit); hooks.doPatchsetCreatedHook(change, ps, db); workQueue.getDefaultQueue().submit(requestScopePropagator.wrap(new java.lang.Runnable() { @java.lang.Override public void run() { try { com.google.gerrit.server.mail.CreateChangeSender cm = createChangeSenderFactory.create(change); cm.setFrom(me); cm.setPatchSet(ps, info); cm.addReviewers(recipients.getReviewers()); cm.addExtraCC(recipients.getCcOnly()); cm.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.git.ReceiveCommits.log.error(("Cannot send email for new change " + (change.getId())), e); } } @java.lang.Override public java.lang.String toString() { return "send-email newchange"; } })); }

@org.junit.Test public void putDraft() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); java.lang.String changeId = r.getChangeId(); java.lang.String revId = r.getCommit().getName(); com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput comment = newCommentInfo("file1", Side.REVISION, 1, "comment 1"); addDraft(changeId, revId, comment); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> result = getDraftComments(changeId, revId); com.google.gerrit.extensions.common.CommentInfo actual = com.google.common.collect.Iterables.getOnlyElement(result.get(comment.path)); com.google.gerrit.acceptance.server.change.CommentsIT.assertCommentInfo(comment, actual); java.lang.String uuid = actual.id; comment.message = "updated comment 1"; updateDraft(changeId, revId, comment, uuid); result = getDraftComments(changeId, revId); actual = com.google.common.collect.Iterables.getOnlyElement(result.get(comment.path)); com.google.gerrit.acceptance.server.change.CommentsIT.assertCommentInfo(comment, actual); }
private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = projectState.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
private com.google.gerrit.server.git.BatchUpdate.ChangeContext newChangeContext(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Change.Id id) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChanges.get(id); if (c == null) { c = com.google.gerrit.server.notedb.ChangeNotes.readOneReviewDbChange(db, id); } com.google.gerrit.server.notedb.ChangeNotes notes = changeNotesFactory.createForBatchUpdate(c); com.google.gerrit.server.project.ChangeControl ctl = changeControlFactory.controlFor(notes, user); return new com.google.gerrit.server.git.BatchUpdate.ChangeContext(ctl, new com.google.gerrit.server.git.BatchUpdateReviewDb(db), repo, rw); }


protected void checkUpdate(com.google.gerrit.server.notedb.AbstractChangeUpdate update) { checkState(java.util.Objects.equals(update.getPatchSetId(), psId), "cannot apply event for %s to update for %s", update.getPatchSetId(), psId); checkState((((when.getTime()) - (update.getWhen().getTime())) <= (com.google.gerrit.server.notedb.rebuild.ChangeRebuilderImpl.MAX_WINDOW_MS)), "event at %s outside update window starting at %s", when, update.getWhen()); checkState(java.util.Objects.equals(update.getNullableAccountId(), who), "cannot apply event by %s to update by %s", who, update.getNullableAccountId()); }
@org.junit.Test public void exactlyOnePage() throws java.lang.Exception { java.util.List<org.eclipse.jgit.revwalk.RevCommit> commits = linearCommits(3); walk.markStart(commits.get(2)); com.google.gitiles.Paginator p = new com.google.gitiles.Paginator(walk, 3, null); assertEquals(com.google.common.collect.ImmutableList.of(commits.get(2), commits.get(1), commits.get(0)), com.google.common.collect.ImmutableList.copyOf(p)); assertNull(p.getPreviousStart()); assertNull(p.getNextStart()); }


void set(com.google.gerrit.client.changes.ChangeInfo info, final java.lang.String revision) { if (info.status().isClosed()) { setVisible(false); return; } project = info.project(); com.google.gerrit.client.changes.ChangeApi.revision(info.legacy_id().get(), revision).view("related").get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.change.RelatedChanges.RelatedInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.change.RelatedChanges.RelatedInfo result) { render(revision, result.changes()); } @java.lang.Override public void onFailure(java.lang.Throwable err) { progress.setVisible(false); scroll.setVisible(false); com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText(err.getMessage()); } }); }

protected void onInitUI() { final com.google.gwt.user.client.ui.FlowPanel me = ((com.google.gwt.user.client.ui.FlowPanel) (getWidget())); me.add((header = new com.google.gwt.user.client.ui.FlowPanel())); me.add((body = new com.google.gwt.user.client.ui.FlowPanel())); header.setStyleName(Gerrit.RESOURCES.css().screenHeader()); header.add((headerText = new com.google.gwt.user.client.ui.InlineLabel())); }
@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
private com.google.gerrit.server.patch.PatchListKey getKey(org.eclipse.jgit.lib.ObjectId revisionIdA, org.eclipse.jgit.lib.ObjectId revisionIdB) { return com.google.gerrit.server.patch.PatchListKey.againstCommit(revisionIdA, revisionIdB, Whitespace.IGNORE_NONE); }
com.google.gerrit.extensions.restapi.Response<com.google.gerrit.server.change.ChangeJson.ChangeInfo> apply(com.google.gerrit.server.change.RevisionResource rsrc) throws com.google.gwtorm.server.OrmException { return cache(json.format(rsrc)); }
@java.lang.Override protected void onLoad() { super.onLoad(); Util.ACCOUNT_SVC.myAccount(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.reviewdb.Account>() { public void onSuccess(final com.google.gerrit.reviewdb.Account result) { display(result.getGeneralPreferences()); enable(true); } }); }
private void checkRequiresCapability(org.apache.sshd.server.Command cmd) throws com.google.gerrit.sshd.UnloggedFailure { com.google.gerrit.extensions.annotations.RequiresCapability rc = com.google.gerrit.sshd.DispatchCommand.getRequiresCapability(cmd.getClass()); if (rc != null) { com.google.gerrit.server.CurrentUser user = currentUser.get(); com.google.gerrit.server.account.CapabilityControl ctl = user.getCapabilities(); java.lang.String capability = rc.value(); if (cmd instanceof com.google.gerrit.sshd.BaseCommand) { java.lang.String pluginName = ((com.google.gerrit.sshd.BaseCommand) (cmd)).getPluginName(); if (((pluginName != null) && (!("gerrit".equals(pluginName)))) && (((rc.scope()) == (com.google.gerrit.extensions.annotations.CapabilityScope.PLUGIN)) || ((rc.scope()) == (com.google.gerrit.extensions.annotations.CapabilityScope.CONTEXT)))) { capability = java.lang.String.format("%s-%s", pluginName, rc.value()); } else if ((rc.scope()) == (com.google.gerrit.extensions.annotations.CapabilityScope.PLUGIN)) { com.google.gerrit.sshd.DispatchCommand.log.error(java.lang.String.format("Class %s uses @%s(scope=%s), but is not within a plugin", cmd.getClass().getName(), com.google.gerrit.extensions.annotations.RequiresCapability.class.getSimpleName(), CapabilityScope.PLUGIN.name())); throw new com.google.gerrit.sshd.UnloggedFailure(BaseCommand.STATUS_NOT_ADMIN, "fatal: cannot check capability"); } } if ((!(ctl.canPerform(capability))) && (!(ctl.canAdministrateServer()))) { java.lang.String msg = java.lang.String.format("fatal: %s does not have \"%s\" capability.", user.getUserName(), capability); throw new com.google.gerrit.sshd.UnloggedFailure(BaseCommand.STATUS_NOT_ADMIN, msg); } } }

@java.lang.Override public java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> byName(final java.lang.String pfx) { final java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> src; try { src = list.get(com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL).tailSet(new com.google.gerrit.reviewdb.client.Project.NameKey(pfx)); } catch (java.util.concurrent.ExecutionException e) { return java.util.Collections.emptyList(); } return new java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey>() { @java.lang.Override public java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey> iterator() { return new java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey>() { private java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey> itr = src.iterator(); private Project.NameKey next; @java.lang.Override public boolean hasNext() { if ((next) != null) { return true; } if (!(itr.hasNext())) { return false; } com.google.gerrit.reviewdb.client.Project.NameKey r = itr.next(); if (r.get().startsWith(pfx)) { next = r; return true; } else { itr = java.util.Collections.<com.google.gerrit.reviewdb.client.Project.NameKey>emptyList().iterator(); return false; } } @java.lang.Override public Project.NameKey next() { if (!(hasNext())) { throw new java.util.NoSuchElementException(); } com.google.gerrit.reviewdb.client.Project.NameKey r = next; next = null; return r; } @java.lang.Override public void remove() { throw new java.lang.UnsupportedOperationException(); } }; } }; }

private org.eclipse.jgit.lib.Repository openRepository(java.nio.file.Path path, com.google.gerrit.reviewdb.client.Project.NameKey name) throws org.eclipse.jgit.errors.RepositoryNotFoundException { if (isUnreasonableName(name)) { throw new org.eclipse.jgit.errors.RepositoryNotFoundException(("Invalid name: " + name)); } java.io.File gitDir = path.resolve(name.get()).toFile(); if (!(names.contains(name))) { if (!(name.get().endsWith(Constants.DOT_GIT_EXT))) { if ((org.eclipse.jgit.lib.RepositoryCache.FileKey.resolve(gitDir, FS.DETECTED)) != null) { onCreateProject(name); } else { throw new org.eclipse.jgit.errors.RepositoryNotFoundException(gitDir); } } else { final java.io.File directory = gitDir; if (org.eclipse.jgit.lib.RepositoryCache.FileKey.isGitRepository(new java.io.File(directory, org.eclipse.jgit.lib.Constants.DOT_GIT), FS.DETECTED)) { onCreateProject(name); } else if (org.eclipse.jgit.lib.RepositoryCache.FileKey.isGitRepository(new java.io.File(directory.getParentFile(), ((directory.getName()) + (org.eclipse.jgit.lib.Constants.DOT_GIT_EXT))), FS.DETECTED)) { onCreateProject(name); } else { throw new org.eclipse.jgit.errors.RepositoryNotFoundException(gitDir); } } } final org.eclipse.jgit.lib.RepositoryCache.FileKey loc = org.eclipse.jgit.lib.RepositoryCache.FileKey.lenient(gitDir, FS.DETECTED); try { return org.eclipse.jgit.lib.RepositoryCache.open(loc); } catch (java.io.IOException e1) { final org.eclipse.jgit.errors.RepositoryNotFoundException e2; e2 = new org.eclipse.jgit.errors.RepositoryNotFoundException(("Cannot open repository " + name)); e2.initCause(e1); throw e2; } }
@org.junit.Test public void submitWithFastForward() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getId()).isEqualTo(change.getCommitId()); assertThat(head.getParent(0)).isEqualTo(oldHead); assertSubmitter(change.getChangeId(), 1); }


@org.junit.Test public void specifiedEventTypesPosted() { config.setString(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.REMOTE, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.URL, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO_URL); config.setString(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.REMOTE, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.EVENT, "project-created"); eventHandler.onEvent(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_CREATED); verify(postTask, times(1)).schedule(); }

@java.lang.Override public org.eclipse.jgit.lib.ObjectId getOldId(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, java.lang.Integer parentNum) throws com.google.gerrit.server.patch.PatchListNotAvailableException { return get(change, patchSet, parentNum).getOldId(); }
private void setSubmitType(com.google.gerrit.reviewdb.client.Project.SubmitType submitType) throws java.io.IOException { com.google.gerrit.server.project.PutConfig.Input in = new com.google.gerrit.server.project.PutConfig.Input(); in.submitType = submitType; in.useContentMerge = com.google.gerrit.reviewdb.client.Project.InheritableBoolean.FALSE; com.google.gerrit.acceptance.RestResponse r = adminSession.put((("/projects/" + (project.get())) + "/config"), in); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); r.consume(); }
private boolean applyRightFloor(com.google.gerrit.server.project.ChangeControl ctl, com.google.gerrit.common.data.LabelType lt, com.google.gerrit.reviewdb.client.PatchSetApproval a) { com.google.gerrit.common.data.PermissionRange range = getRange(ctl, lt, a.getAccountId()); if (range.isEmpty()) { return false; } a.setValue(((short) (range.squash(a.getValue())))); return true; }
private java.util.List<com.google.gerrit.server.query.change.ChangeData> getChangesByTopic(java.lang.String topic) { try { return queryProvider.get().byTopicOpen(topic); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gwtorm.server.OrmRuntimeException(e); } }
@java.lang.Override public void doProjectCreatedHook(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String headName) { com.google.gerrit.server.events.ProjectCreatedEvent event = new com.google.gerrit.server.events.ProjectCreatedEvent(); event.projectName = project.get(); event.headName = headName; fireEvent(project, event); java.util.List<java.lang.String> args = new java.util.ArrayList<>(); addArg(args, "--project", project.get()); addArg(args, "--head", headName); runHook(project, projectCreatedHook, args); }

@java.lang.Override public com.google.gerrit.server.project.FileResource parse(com.google.gerrit.server.project.BranchResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return com.google.gerrit.server.project.FileResource.create(repoManager, parent.getProjectState(), org.eclipse.jgit.lib.ObjectId.fromString(parent.getRevision()), id.get()); }



public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { com.google.common.base.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { com.google.gerrit.server.account.AccountState acc = accounts.getByUsername(user.get()); if (acc != null) { return userFactory.create(acc); } } } } return anonymous.get(); }








private void submit(com.google.gerrit.server.project.ChangeControl changeCtl, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.Submit submit = submitProvider.get(); com.google.gerrit.server.change.RevisionResource rsrc = new com.google.gerrit.server.change.RevisionResource(changes.parse(changeCtl), ps); java.util.List<com.google.gerrit.reviewdb.client.Change> changes; try { changes = submit.submit(rsrc, currentUser, true); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new java.io.IOException(e); } addMessage(""); try { integrationProvider.get().create(com.google.gerrit.server.git.ChangeSet.create(changes)).merge(); } catch (com.google.gerrit.server.git.MergeException | com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException(e); } for (com.google.gerrit.reviewdb.client.Change c : changes) { c = db.changes().get(c.getId()); switch (c.getStatus()) { case SUBMITTED : addMessage((("Change " + (c.getChangeId())) + " submitted.")); break; case MERGED : addMessage((("Change " + (c.getChangeId())) + " merged.")); break; case NEW : com.google.gerrit.reviewdb.client.ChangeMessage msg = submit.getConflictMessage(rsrc); if (msg != null) { addMessage(((("Change " + (c.getChangeId())) + ": ") + (msg.getMessage()))); break; } default : addMessage(((("change " + (c.getChangeId())) + " is ") + (c.getStatus().name().toLowerCase()))); } } }

private org.eclipse.jgit.revwalk.RevCommit getHead(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { return getHead(repo, "HEAD"); }
void setHeaderVisible(boolean show) { headerVisible = show; com.google.gwt.user.client.ui.UIObject.setVisible(patchSetNavRow, show); com.google.gwt.user.client.ui.UIObject.setVisible(diffHeaderRow, (show && (header))); if (show) { parent.header.removeStyleName(com.google.gerrit.client.diff.DiffTable.style.fullscreen()); } else { parent.header.addStyleName(com.google.gerrit.client.diff.DiffTable.style.fullscreen()); } parent.resizeCodeMirror(); }
private org.eclipse.jgit.revwalk.RevCommit updateRef(org.eclipse.jgit.lib.AnyObjectId oldId, org.eclipse.jgit.lib.AnyObjectId newId, java.lang.String refName) throws java.io.IOException { org.eclipse.jgit.lib.BatchRefUpdate bru = update.getBatch(); if (bru != null) { bru.addCommand(new org.eclipse.jgit.transport.ReceiveCommand(oldId.toObjectId(), newId.toObjectId(), refName)); inserter.flush(); revision = rw.parseCommit(newId); return revision; } org.eclipse.jgit.lib.RefUpdate ru = db.updateRef(refName); ru.setExpectedOldObjectId(oldId); ru.setNewObjectId(src); ru.disableRefLog(); inserter.flush(); org.eclipse.jgit.lib.RefUpdate.Result result = ru.update(); switch (result) { case NEW : case FAST_FORWARD : revision = rw.parseCommit(ru.getNewObjectId()); update.fireGitRefUpdatedEvent(ru); return revision; default : throw new java.io.IOException(((((("Cannot update " + (ru.getName())) + " in ") + (db.getDirectory())) + ": ") + (ru.getResult()))); } }



static void replyText(@javax.annotation.Nullable javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res, java.lang.String text) throws java.io.IOException { if (((req == null) || ("GET".equals(req.getMethod()))) && (com.google.gerrit.httpd.restapi.RestApiServlet.isMaybeHTML(text))) { com.google.gerrit.httpd.restapi.RestApiServlet.replyJson(req, res, com.google.common.collect.ImmutableMultimap.of("pp", "0"), new com.google.gson.JsonPrimitive(text)); } else { if (!(text.endsWith("\n"))) { text += "\n"; } com.google.gerrit.httpd.restapi.RestApiServlet.replyBinaryResult(req, res, com.google.gerrit.extensions.restapi.BinaryResult.create(text).setContentType("text/plain")); } }


public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account merger, java.lang.String newRevisionId, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeMerged.Event event = new com.google.gerrit.server.extensions.events.ChangeMerged.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(merger), newRevisionId, when); for (com.google.gerrit.extensions.events.ChangeMergedListener l : listeners) { try { l.onChangeMerged(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.ChangeMerged.log.error("Couldn't fire event", e); } }
public com.google.gerrit.server.ssh.Command createCommand(final java.lang.String commandLine) { final int sp1 = commandLine.indexOf(' '); java.lang.String cmd; java.lang.String args; if (0 < sp1) { cmd = commandLine.substring(0, sp1); args = commandLine.substring((sp1 + 1)); } else { cmd = commandLine; args = ""; } if (("git".equals(cmd)) || ("gerrit".equals(cmd))) { cmd += "-"; final int sp2 = args.indexOf(' '); if (0 < sp2) { cmd += args.substring(0, sp2); args = args.substring((sp2 + 1)); } else { cmd += args; args = ""; } } final com.google.gerrit.server.ssh.Command c = create(cmd); if (c instanceof com.google.gerrit.server.ssh.AbstractCommand) { ((com.google.gerrit.server.ssh.AbstractCommand) (c)).setCommandLine(cmd, args); } return c; }

@java.lang.Override public int getBegin(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit) { return edit.getBeginA(); }
private void rename(com.google.gerrit.server.git.MetaDataUpdate md) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { boolean success = false; for (int attempts = 0; (!success) && (attempts < (com.google.gerrit.server.git.RenameGroupOp.MAX_TRIES)); attempts++) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { projectCache.evict(config.getProject()); return; } ref.setName(newName); md.getCommitBuilder().setAuthor(author); md.setMessage((((("Rename group " + (oldName)) + " to ") + (newName)) + "\n")); if (config.commit(md)) { projectCache.evict(config.getProject()); success = true; } else { try { java.lang.Thread.sleep(25); } catch (java.lang.InterruptedException wakeUp) { continue; } } } if (!success) { if (tryingAgain) { com.google.gerrit.server.git.RenameGroupOp.log.warn(((((("Could not rename group " + (oldName)) + " to ") + (newName)) + " in ") + (md.getProjectName().get()))); } else { retryOn.add(md.getProjectName()); } } }
@java.lang.Override public void onReplaceByKeys(org.eclipse.jgit.lib.ObjectId newNotesRev, com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toRemove, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws java.io.IOException { com.google.gerrit.server.account.externalids.ExternalIdsUpdate.checkSameAccount(toAdd, accountId); updateCache(newNotesRev, ( m) -> { com.google.common.collect.Collections2.transform(m.get(accountId), ( e) -> e.key()).removeAll(toRemove); for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { m.put(extId.accountId(), extId); } }); }

public void onSuccess(final com.google.gerrit.common.auth.userpass.LoginResult result) { if (result.success) { java.lang.String to = token; if ((result.isNew) && (!(to.startsWith(((com.google.gerrit.common.PageLinks.REGISTER) + ","))))) { to = ((com.google.gerrit.common.PageLinks.REGISTER) + ",") + to; } com.google.gwt.user.client.Window.Location.replace((((com.google.gwt.user.client.Window.Location.getPath()) + "login/") + to)); } else { showError(Util.C.invalidLogin()); enable(true); password.selectAll(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { password.setFocus(true); } }); } }
private void matchChange(java.util.Set<com.google.gerrit.reviewdb.Change.Id> matched, com.google.gerrit.reviewdb.Change change) { try { if (((change != null) && (inProject(change))) && (changeControlFactory.controlFor(change).isVisible())) { matched.add(change.getId()); } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { } }

void onAuthFail(final com.google.gerrit.sshd.SshSession sd) { final org.apache.log4j.spi.LoggingEvent event = new org.apache.log4j.spi.LoggingEvent(org.apache.log4j.Logger.class.getName(), null, java.lang.System.currentTimeMillis(), org.apache.log4j.Level.INFO, ("AUTH FAILURE FROM " + (sd.getRemoteAddressAsString())), "SSHD", null, null, null, null); event.setProperty(com.google.gerrit.sshd.SshLog.P_SESSION, com.google.gerrit.sshd.SshLog.id(sd.getSessionId())); event.setProperty(com.google.gerrit.sshd.SshLog.P_USER_NAME, sd.getUsername()); final java.lang.String error = sd.getAuthenticationError(); if (error != null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, error); } async.append(event); }


public com.google.gwtjsonrpc.client.VoidResult run(com.google.gerrit.client.reviewdb.ReviewDb db) throws com.google.gerrit.server.patch.Failure, com.google.gwtorm.client.OrmException { final com.google.gerrit.server.patch.PatchDetailServiceImpl.PublishResult r; r = db.run(new com.google.gwtorm.client.OrmRunnable<com.google.gerrit.server.patch.PatchDetailServiceImpl.PublishResult, com.google.gerrit.client.reviewdb.ReviewDb>() { public com.google.gerrit.server.patch.PatchDetailServiceImpl.PublishResult run(com.google.gerrit.client.reviewdb.ReviewDb db, com.google.gwtorm.client.Transaction txn, boolean retry) throws com.google.gwtorm.client.OrmException { return doPublishComments(psid, message, approvals, db, txn); } }); try { final com.google.gerrit.server.ChangeMail cm = new com.google.gerrit.server.ChangeMail(server, r.change); cm.setFrom(com.google.gerrit.client.rpc.Common.getAccountId()); cm.setPatchSet(r.patchSet, r.info); cm.setChangeMessage(r.message); cm.setPatchLineComments(r.comments); cm.setReviewDb(db); cm.setHttpServletRequest(com.google.gerrit.server.GerritJsonServlet.getCurrentCall().getHttpServletRequest()); cm.sendComment(); } catch (MessagingException e) { log.error(("Cannot send comments by email for patch set " + psid), e); throw new com.google.gerrit.server.patch.Failure(e); } return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }
void setUpPatchSetNav(com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> list, com.google.gerrit.client.diff.DiffInfo.FileMeta meta) { com.google.gerrit.client.ui.InlineHyperlink baseLink = null; com.google.gerrit.client.ui.InlineHyperlink selectedLink = null; if (sideA) { baseLink = createLink(PatchUtil.C.patchBase(), null); linkPanel.add(baseLink); } for (int i = 0; i < (list.length()); i++) { com.google.gerrit.client.changes.ChangeInfo.RevisionInfo r = list.get(i); com.google.gerrit.client.ui.InlineHyperlink link = createLink(java.lang.String.valueOf(r._number()), new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, r._number())); linkPanel.add(link); if (((revision) != null) && ((r._number()) == (revision.get()))) { selectedLink = link; } } if (selectedLink != null) { selectedLink.setStyleName(style.selected()); } else if (sideA) { baseLink.setStyleName(style.selected()); } if ((meta != null) && (!(Patch.COMMIT_MSG.equals(path)))) { linkPanel.add(createDownloadLink()); } }
public void delete(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeUpdate update, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException { ensurePatchSetMatches(ps.getId(), update); checkArgument(ps.isDraft(), "cannot delete non-draft patch set %s", ps.getId()); update.setPatchSetState(PatchSetState.DELETED); db.patchSets().delete(java.util.Collections.singleton(ps)); }
public java.util.List<com.google.gerrit.extensions.common.SshKeyInfo> apply(com.google.gerrit.server.IdentifiedUser user) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.extensions.common.SshKeyInfo> sshKeys = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.reviewdb.client.AccountSshKey sshKey : dbProvider.get().accountSshKeys().byAccount(user.getAccountId()).toList()) { sshKeys.add(com.google.gerrit.server.account.GetSshKeys.newSshKeyInfo(sshKey)); } return sshKeys; }

@java.lang.Override protected void configure() { install(copyConfigModule); install(cm); install(sm); }

private void setWebLinks(com.google.gerrit.client.changes.ChangeInfo change, java.lang.String revision, com.google.gerrit.client.changes.ChangeInfo.RevisionInfo revInfo) { com.google.gerrit.client.GitwebLink gw = com.google.gerrit.client.Gerrit.getGitwebLink(); if ((gw != null) && (gw.canLink(revInfo))) { toAnchor(gw.toRevision(change.project(), revision), gw.getLinkName()); } com.google.gwt.core.client.JsArray<com.google.gerrit.client.WebLinkInfo> links = revInfo.commit().web_links(); if (links != null) { for (com.google.gerrit.client.WebLinkInfo link : com.google.gerrit.client.rpc.Natives.asList(links)) { webLinkPanel.add(link.toAnchor()); } } }
private void initProviderJce() { setKeyExchangeFactories(java.util.Arrays.<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.KeyExchange>>asList(new org.apache.sshd.server.kex.DHG1.Factory())); setRandomFactory(new org.apache.sshd.common.random.SingletonRandomFactory(new org.apache.sshd.common.random.JceRandom.Factory())); }



@java.lang.Override public java.lang.Iterable<com.google.gerrit.extensions.common.CommentInfo> getComments(int changeId, java.lang.String rev) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException { try { com.google.gerrit.server.change.ChangeResource changeRsrc = changes.parse(new com.google.gerrit.reviewdb.client.Change.Id(changeId)); com.google.gerrit.server.change.RevisionResource revRsrc = revisions.parse(changeRsrc, com.google.gerrit.extensions.restapi.IdString.fromDecoded(rev)); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> result = listComments.apply(revRsrc); for (java.util.Map.Entry<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> e : result.entrySet()) { for (com.google.gerrit.extensions.common.CommentInfo i : e.getValue()) { i.path = e.getKey(); } } return com.google.common.collect.Iterables.concat(result.values()); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { return null; } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.BadRequestException(e.getMessage()); } }
@java.lang.Override public void onChangeMerged(com.google.gerrit.server.Event event) { if ((!(allProjects.get().equals(event.getChange().project))) || (!(RefNames.REFS_CONFIG.equals(event.getChange().branch)))) { return; } try { syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.CreateGroupPermissionSyncer.log.error("Can't sync create group permissions", e); } }
static com.google.gerrit.server.patch.PatchListEntry empty(final java.lang.String fileName) { return new com.google.gerrit.server.patch.PatchListEntry(com.google.gerrit.reviewdb.Patch.ChangeType.MODIFIED, com.google.gerrit.reviewdb.Patch.PatchType.UNIFIED, null, fileName, com.google.gerrit.server.patch.PatchListEntry.EMPTY_HEADER, java.util.Collections.<org.eclipse.jgit.diff.Edit>emptyList()); }
@java.lang.SuppressWarnings("unused") @java.lang.Override public <V> com.google.gerrit.metrics.CallbackMetric<V> newCallbackMetric(java.lang.String name, java.lang.Class<V> valueClass, com.google.gerrit.metrics.Description desc) { checkNotDefined(name); descriptions.put(name, desc.getAnnotations()); return new com.google.gerrit.metrics.dropwizard.DropWizardMetricMaker.CallbackMetricImpl<V>(name, valueClass); }
@org.kohsuke.args4j.Option(name = "-o", usage = "Output options") void addOption(com.google.gerrit.extensions.api.changes.SubmittedTogetherOption o) { options.add(o); }
public void testUpgradeSchema() throws com.google.gwtorm.client.OrmException, java.sql.SQLException { final com.google.gwtorm.data.PhoneBookDb p = phoneBook.open(); try { p.updateSchema(executor); execute("CREATE SEQUENCE cnt"); execute("CREATE TABLE foo (cnt INT)"); execute("ALTER TABLE people ADD COLUMN fake_name VARCHAR(20)"); execute("ALTER TABLE people DROP COLUMN registered"); execute("DROP TABLE addresses"); execute("DROP SEQUENCE address_id"); java.util.Set<java.lang.String> sequences; java.util.Set<java.lang.String> tables; p.updateSchema(executor); sequences = dialect.listSequences(db); tables = dialect.listTables(db); assertTrue(sequences.contains("cnt")); assertTrue(tables.contains("foo")); assertTrue(sequences.contains("address_id")); assertTrue(tables.contains("addresses")); p.pruneSchema(executor); sequences = dialect.listSequences(db); tables = dialect.listTables(db); assertFalse(sequences.contains("cnt")); assertFalse(tables.contains("foo")); final com.google.gwtorm.data.TestPerson.Key pk = new com.google.gwtorm.data.TestPerson.Key("Bob"); final com.google.gwtorm.data.TestPerson bob = new com.google.gwtorm.data.TestPerson(pk, p.nextAddressId()); p.people().insert(java.util.Collections.singleton(bob)); final com.google.gwtorm.data.TestAddress addr = new com.google.gwtorm.data.TestAddress(new com.google.gwtorm.data.TestAddress.Key(pk, "home"), "some place"); p.addresses().insert(java.util.Collections.singleton(addr)); } finally { p.close(); } final com.google.gwtorm.data.PhoneBookDb2 p2 = phoneBook2.open(); try { ((com.google.gwtorm.jdbc.JdbcSchema) (p2)).renameField(executor, "people", "registered", "isRegistered"); } finally { p2.close(); } }



public void display(com.google.gerrit.reviewdb.client.Change chg, java.lang.Boolean starred, com.google.gerrit.reviewdb.client.PatchSetInfo info, final com.google.gerrit.common.data.AccountInfoCache acc, com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord) { infoBlock.display(chg, acc, submitTypeRecord); messageBlock.display(chg.getId(), starred, info.getMessage()); }
com.google.gerrit.client.diff.DisplaySide getSide() { return side; }
@org.junit.Test public void updateMessage() throws java.lang.Exception { assertEquals(RefUpdate.Result.NEW, modifier.createEdit(change, ps)); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); try { modifier.modifyMessage(edit.get(), edit.get().getEditCommit().getFullMessage()); fail("Exception expected"); } catch (com.google.gerrit.server.project.InvalidChangeOperationException ex) { assertEquals(ex.getMessage(), "New commit message cannot be same as existing commit message"); } java.lang.String msg = java.lang.String.format("New commit message\n\nChange-Id: %s", change.getKey()); assertEquals(RefUpdate.Result.FORCED, modifier.modifyMessage(edit.get(), msg)); edit = editUtil.byChange(change); assertEquals(msg, edit.get().getEditCommit().getFullMessage()); editUtil.delete(edit.get()); edit = editUtil.byChange(change); assertFalse(edit.isPresent()); }
private void initChannels() { setChannelFactories(java.util.Arrays.<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.Channel>>asList(new org.apache.sshd.server.channel.ChannelSession.Factory(), new org.apache.sshd.common.forward.TcpipServerChannel.DirectTcpipFactory())); }
@java.lang.Override public boolean match(final com.google.gerrit.server.query.change.ChangeData object) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = object.change(); if (c == null) { return false; } com.google.gerrit.reviewdb.client.PatchSet.Id current = c.currentPatchSetId(); for (com.google.gerrit.reviewdb.client.PatchSetApproval p : object.approvals().get(current)) { if ((p.getValue()) != 0) { return true; } } return false; }
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId != null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException("Identity in use by another account"); } update(db, who, extId); } else { externalIdsUpdateFactory.create().insert(db, com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress())); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } } if ((who.getEmailAddress()) != null) { byEmailCache.evict(who.getEmailAddress()); } byIdCache.evict(to); } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); } }

com.google.gerrit.server.patch.IntraLineDiff getIntraLineDiff(com.google.gerrit.server.patch.IntraLineDiffKey key, com.google.gerrit.server.patch.IntraLineDiffArgs args);
public static com.google.gerrit.reviewdb.client.Change.Id parse(final java.lang.String str) { final com.google.gerrit.reviewdb.client.Change.Id r = new com.google.gerrit.reviewdb.client.Change.Id(); r.fromString(str); return r; }

public com.google.gerrit.reviewdb.client.AccountDiffPreference getDiffPrefs() { return diffPrefs; }

private void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { if (email.equals("ALL")) { java.util.List<com.google.gerrit.extensions.common.EmailInfo> emails = getEmails.apply(rsrc); for (com.google.gerrit.extensions.common.EmailInfo e : emails) { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, e.email), new com.google.gerrit.server.account.DeleteEmail.Input()); } } else { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, email), new com.google.gerrit.server.account.DeleteEmail.Input()); } }
private boolean suggestGroupAsReviewer(final com.google.gerrit.reviewdb.Project.NameKey project, final com.google.gerrit.common.data.GroupReference group) throws com.google.gwtorm.client.OrmException { if (!(com.google.gerrit.server.patch.AddReviewer.isLegalReviewerGroup(group.getUUID()))) { return false; } try { final java.util.Set<com.google.gerrit.reviewdb.Account> members = groupMembersFactory.create(project, group.getUUID()).call(); if (members.isEmpty()) { return false; } final int maxAllowed = cfg.getInt("addreviewer", "maxAllowed", AddReviewer.DEFAULT_MAX_REVIEWERS); if ((maxAllowed > 0) && ((members.size()) > maxAllowed)) { return false; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { return false; } catch (com.google.gerrit.server.project.NoSuchProjectException e) { return false; } return true; }


public Account.Id getAccountId() { checkState(((accountId) != null), "author identity for %s is not from an IdentifiedUser: %s", getClass().getSimpleName(), authorIdent.toExternalString()); return accountId; }


static com.google.gerrit.server.patch.PatchListEntry readFrom(java.io.InputStream in) throws java.io.IOException { com.google.gerrit.reviewdb.client.Patch.ChangeType changeType = readEnum(in, com.google.gerrit.reviewdb.client.Patch.ChangeType.values()); com.google.gerrit.reviewdb.client.Patch.PatchType patchType = readEnum(in, com.google.gerrit.reviewdb.client.Patch.PatchType.values()); java.lang.String oldName = readString(in); java.lang.String newName = readString(in); byte[] hdr = readBytes(in); int ins = readVarInt32(in); int del = readVarInt32(in); long size = readFixInt64(in); long sizeDelta = readFixInt64(in); org.eclipse.jgit.diff.Edit[] editArray = com.google.gerrit.server.patch.PatchListEntry.readEditArray(in); org.eclipse.jgit.diff.Edit[] editsDueToRebase = com.google.gerrit.server.patch.PatchListEntry.readEditArray(in); return new com.google.gerrit.server.patch.PatchListEntry(changeType, patchType, oldName, newName, hdr, com.google.common.collect.ImmutableList.copyOf(editArray), com.google.common.collect.ImmutableSet.copyOf(editsDueToRebase), ins, del, size, sizeDelta); }

public void run() { synchronized(cleanup) { for (final java.util.Iterator<java.lang.Runnable> i = cleanup.iterator(); i.hasNext();) { try { i.next().run(); } catch (java.lang.Throwable err) { com.google.gerrit.server.RequestCleanup.log.error("Failed to execute per-request cleanup", err); } i.remove(); } } }
private com.google.gerrit.server.account.AccountState makeUser(final java.lang.String name, final java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(account, java.util.Collections.emptySet(), java.util.Collections.emptySet(), new java.util.HashMap()); }

public static <T> void itemOf(com.google.inject.Binder binder, com.google.inject.TypeLiteral<T> member) { @java.lang.SuppressWarnings("unchecked") com.google.inject.Key<com.google.gerrit.extensions.registration.DynamicItem<T>> key = ((com.google.inject.Key<com.google.gerrit.extensions.registration.DynamicItem<T>>) (com.google.inject.Key.get(com.google.inject.util.Types.newParameterizedType(com.google.gerrit.extensions.registration.DynamicItem.class, member.getType())))); binder.bind(key).toProvider(new com.google.gerrit.extensions.registration.DynamicItemProvider<T>(member, key)).in(Scopes.SINGLETON); }

@org.junit.Test public void nullAsDefault() throws java.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); org.joda.time.Duration t; t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", ""); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", " "); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); }
@java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { doSave(); }
@org.junit.Test public void banCommit() throws java.lang.Exception { com.google.gerrit.acceptance.GitUtil.add(git, "a.txt", "some content"); com.google.gerrit.acceptance.GitUtil.Commit c = com.google.gerrit.acceptance.GitUtil.createCommit(git, admin.getIdent(), "subject"); com.google.gerrit.acceptance.RestResponse r = adminSession.put((("/projects/" + (project.get())) + "/ban/"), BanCommit.Input.fromCommits(c.getCommit().getName())); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); com.google.gerrit.server.project.BanCommit.BanResultInfo info = newGson().fromJson(r.getReader(), com.google.gerrit.server.project.BanCommit.BanResultInfo.class); assertEquals(c.getCommit().getName(), com.google.common.collect.Iterables.getOnlyElement(info.newlyBanned)); assertNull(info.alreadyBanned); assertNull(info.ignored); org.eclipse.jgit.transport.PushResult pushResult = com.google.gerrit.acceptance.GitUtil.pushHead(git, "refs/heads/master", false); assertTrue(pushResult.getRemoteUpdate("refs/heads/master").getMessage().startsWith("contains banned commit")); }
com.googlesource.gerrit.plugins.lfs.locks.LfsGetLocksResponse listLocks(java.lang.String project) { com.googlesource.gerrit.plugins.lfs.locks.LfsLocksHandler.log.debug("Get locks for {} project", project); return new com.googlesource.gerrit.plugins.lfs.locks.LfsGetLocksResponse(projects.getUnchecked(project).asMap().values(), null); }
private static void inline(org.commonmark.node.HtmlInline curr) { java.lang.String html = curr.getLiteral(); java.util.regex.Matcher m = com.google.gitiles.doc.GitilesHtmlExtension.BREAK.matcher(html); if (m.matches()) { switch (m.group(1).toLowerCase()) { case "br" : curr.insertAfter(new org.commonmark.node.HardLineBreak()); curr.unlink(); return; case "hr" : curr.insertAfter(new org.commonmark.node.ThematicBreak()); curr.unlink(); return; } } m = com.google.gitiles.doc.GitilesHtmlExtension.ANCHOR_OPEN.matcher(html); if (m.matches()) { java.lang.String name = m.group(2); org.commonmark.node.Node next = curr.getNext(); if (com.google.gitiles.doc.GitilesHtmlExtension.isAnchorClose(next)) { next.unlink(); next = curr.getNext(); com.google.gitiles.doc.NamedAnchor anchor = new com.google.gitiles.doc.NamedAnchor(); anchor.setName(name); curr.insertAfter(anchor); curr.unlink(); com.google.gitiles.doc.MarkdownUtil.trimPreviousWhitespace(anchor); return; } } curr.unlink(); }


private com.google.gerrit.reviewdb.client.Project.SubmitType getSubmitType(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.PatchSet ps) { try { final com.google.gerrit.common.data.SubmitTypeRecord r = changeControlFactory.controlFor(change, identifiedUserFactory.create(change.getOwner())).getSubmitTypeRecord(db, ps); if ((r.status) != (SubmitTypeRecord.Status.OK)) { com.google.gerrit.server.git.MergeOp.log.error(("Failed to get submit type for " + (change.getKey()))); return null; } return r.type; } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.git.MergeOp.log.error(("Failed to get submit type for " + (change.getKey())), e); return null; } }
@org.junit.Before public void setUpInjector() throws java.lang.Exception { lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); com.google.inject.Injector injector = createInjector(); lifecycle.add(injector); injector.injectMembers(this); lifecycle.start(); db = schemaFactory.open(); schemaCreator.create(db); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId(); com.google.gerrit.reviewdb.client.Account userAccount = db.accounts().get(userId); userAccount.setPreferredEmail("user@example.com"); db.accounts().update(com.google.common.collect.ImmutableList.of(userAccount)); user = userFactory.create(com.google.inject.util.Providers.of(db), userId); requestContext.setContext(newRequestContext(userAccount.getId())); }
private boolean isJiraConnectSuccessful() { ui.message("Checking Jira connectivity ... "); try { com.googlesource.gerrit.plugins.its.jira.JiraClient jiraClient = new com.googlesource.gerrit.plugins.its.jira.JiraClient(jiraUrl); com.googlesource.gerrit.plugins.its.jira.JiraSession jiraToken = jiraClient.login(jiraUsername, jiraPassword); jiraClient.logout(jiraToken); ui.message("[OK]\n"); return true; } catch (java.rmi.RemoteException e) { ui.message("*FAILED* (%s)\n", e.toString()); return false; } }


private void findParameters(final java.util.List<com.google.gwtorm.schema.ColumnModel> r, final org.antlr.runtime.tree.Tree node) { switch (node.getType()) { case QueryParser.WHERE : extractParameters(r, node); break; default : for (int i = 0; i < (node.getChildCount()); i++) { findParameters(r, node.getChild(i)); } break; } }
@org.junit.Test public void testVerifyAgainstDifferentOperation() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo("o", zeroId(), 1); assertThat(auth.verifyAuthInfo(info.authToken, "p", zeroId())).isFalse(); }
@java.lang.Override protected void onLoad() { super.onLoad(); Util.PROJECT_SVC.visibleProjects(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.ProjectList>(this) { @java.lang.Override protected void preDisplay(final com.google.gerrit.common.data.ProjectList result) { createProjectLinkPanel.setVisible(result.canCreateProject()); projects.display(result.getProjects()); projects.finishDisplay(); } }); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change.Status status = rsrc.getChange().getStatus(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions().database(db); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Delete").setTitle(("Delete change " + (rsrc.getId()))).setVisible(and(couldDeleteWhenIn(status), perm.testCond(ChangePermission.DELETE))); }

public static com.google.gerrit.server.edit.tree.ChangeFileContentModificationSubject assertThat(com.google.gerrit.server.edit.tree.ChangeFileContentModification modification) { return assertAbout(com.google.gerrit.server.edit.tree.ChangeFileContentModificationSubject.MODIFICATION_SUBJECT_FACTORY).that(modification); }


@java.lang.Override public org.eclipse.jgit.revwalk.RevCommit commitAt(org.eclipse.jgit.lib.ObjectId expected) throws java.io.IOException { if (com.google.common.base.Objects.equal(src, expected)) { return revision; } org.eclipse.jgit.lib.RefUpdate ru = db.updateRef(getRefName()); if (expected != null) { ru.setExpectedOldObjectId(expected); } else { ru.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); } ru.setNewObjectId(src); ru.disableRefLog(); inserter.flush(); switch (ru.update(rw)) { case NEW : case FAST_FORWARD : revision = rw.parseCommit(ru.getNewObjectId()); update.replicate(ru); return revision; default : throw new java.io.IOException(((((("Cannot update " + (ru.getName())) + " in ") + (db.getDirectory())) + ": ") + (ru.getResult()))); } }
public static com.google.gerrit.client.rpc.RestApi hashtag(int changeId, java.lang.String hashtag) { return com.google.gerrit.client.changes.ChangeApi.change(changeId).view("hashtags").id(hashtag); }

private org.eclipse.jgit.revwalk.RevCommit newMergeCommit(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectInserter oi, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.server.project.ProjectControl projectControl, org.eclipse.jgit.revwalk.RevCommit mergeTip, com.google.gerrit.extensions.common.MergeInput merge, org.eclipse.jgit.lib.PersonIdent authorIdent, java.lang.String commitMessage) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException { if (com.google.common.base.Strings.isNullOrEmpty(merge.source)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("merge.source must be non-empty"); } com.google.gerrit.server.project.ProjectState state = projectControl.getProjectState(); org.eclipse.jgit.revwalk.RevCommit sourceCommit = com.google.gerrit.server.git.MergeUtil.resolveCommit(repo, rw, merge.source); if (!(commits.canRead(state, repo, sourceCommit))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(("do not have read permission for: " + (merge.source))); } com.google.gerrit.server.git.MergeUtil mergeUtil = mergeUtilFactory.create(state); java.lang.String mergeStrategy = com.google.common.base.MoreObjects.firstNonNull(com.google.common.base.Strings.emptyToNull(merge.strategy), mergeUtil.mergeStrategyName()); return com.google.gerrit.server.git.MergeUtil.createMergeCommit(oi, repo.getConfig(), mergeTip, sourceCommit, mergeStrategy, authorIdent, commitMessage, rw); }
private void update() { if ((colWidth.getIntValue()) <= 0) { new com.google.gerrit.client.ErrorDialog(PatchUtil.C.illegalNumberOfColumns()).center(); return; } com.google.gerrit.reviewdb.client.AccountDiffPreference dp = new com.google.gerrit.reviewdb.client.AccountDiffPreference(getValue()); dp.setIgnoreWhitespace(getIgnoreWhitespace()); dp.setContext(getContext()); dp.setTabSize(tabWidth.getIntValue()); dp.setLineLength(colWidth.getIntValue()); dp.setSyntaxHighlighting(syntaxHighlighting.getValue()); dp.setIntralineDifference(intralineDifference.getValue()); dp.setShowWhitespaceErrors(whitespaceErrors.getValue()); dp.setShowLineEndings(showLineEndings.getValue()); dp.setShowTabs(showTabs.getValue()); dp.setSkipDeleted(skipDeleted.getValue()); dp.setSkipUncommented(skipUncommented.getValue()); dp.setExpandAllComments(expandAllComments.getValue()); dp.setRetainHeader(retainHeader.getValue()); dp.setManualReview(manualReview.getValue()); listenablePrefs.set(dp); }
void appendSubmittedBy(com.google.gerrit.reviewdb.client.Account user) { sb.append("Submitted-by: "); appendUserData(user); sb.append("\n"); }
public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException { who = realm.authenticate(who); try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema.open(); try { final com.google.gerrit.reviewdb.client.AccountExternalId.Key key = com.google.gerrit.server.account.AccountManager.id(who); final com.google.gerrit.reviewdb.client.AccountExternalId id = db.accountExternalIds().get(key); if (id == null) { return create(db, who); } else { com.google.gerrit.reviewdb.client.Account act = db.accounts().get(id.getAccountId()); if ((act == null) || (!(act.isActive()))) { throw new com.google.gerrit.server.account.AccountException("Authentication error, account inactive"); } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.getAccountId(), key, false); } } finally { db.close(); } } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.account.AccountException("Authentication error", e); } }
private java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> loadDashboards(final com.google.gerrit.reviewdb.client.Project.NameKey projectName, final org.eclipse.jgit.lib.Repository repo, final org.eclipse.jgit.revwalk.RevWalk revWalk, final org.eclipse.jgit.lib.Ref ref) throws java.io.IOException { final java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> output = com.google.common.collect.Maps.newTreeMap(); final org.eclipse.jgit.revwalk.RevCommit commit = revWalk.parseCommit(ref.getObjectId()); final org.eclipse.jgit.revwalk.RevTree tree = commit.getTree(); org.eclipse.jgit.treewalk.TreeWalk treeWalk = new org.eclipse.jgit.treewalk.TreeWalk(repo); try { treeWalk.addTree(tree); treeWalk.setRecursive(true); while (treeWalk.next()) { com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo info = new com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo(); info.name = treeWalk.getPathString(); info.refName = ref.getName(); info.projectName = projectName.get(); info.id = com.google.gerrit.server.dashboard.ListDashboards.createId(info.refName, info.name); final org.eclipse.jgit.lib.ObjectLoader loader = repo.open(treeWalk.getObjectId(0)); java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(); loader.copyTo(out); org.eclipse.jgit.lib.Config dashboardConfig = new org.eclipse.jgit.lib.Config(); try { dashboardConfig.fromText(new java.lang.String(out.toByteArray(), "UTF-8")); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.dashboard.ListDashboards.log.warn("Failed to load dashboards", e); } info.description = dashboardConfig.getString("main", null, "description"); final java.lang.StringBuilder query = new java.lang.StringBuilder(); query.append("title="); query.append(info.name.replaceAll(" ", "+")); final java.util.Set<java.lang.String> sections = dashboardConfig.getSubsections("section"); for (final java.lang.String section : sections) { query.append("&"); query.append(section.replaceAll(" ", "+")); query.append("="); query.append(dashboardConfig.getString("section", section, "query")); } info.parameters = query.toString(); output.put(info.id, info); } } finally { treeWalk.release(); } return output; }
public abstract boolean match(T object) throws com.google.gwtorm.server.OrmException;
private java.util.Set<com.google.gerrit.reviewdb.Project.NameKey> getAllParents(final com.google.gerrit.reviewdb.Project.NameKey projectName) { final java.util.Set<com.google.gerrit.reviewdb.Project.NameKey> parents = new java.util.HashSet<com.google.gerrit.reviewdb.Project.NameKey>(); com.google.gerrit.reviewdb.Project.NameKey p = projectName; while ((p != null) && (parents.add(p))) { final com.google.gerrit.server.project.ProjectState e = projectCache.get(p); if (e == null) { break; } p = getParentName(e.getProject()); } return parents; }
@java.lang.Override public void deleteBranches(com.google.gerrit.extensions.api.projects.DeleteBranchesInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteBranches.apply(checkExists(), in); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete branches", e); } }
@java.lang.Override public com.google.gerrit.common.data.GroupDetail call() throws com.google.gerrit.server.account.NoSuchGroupException, com.google.gwtorm.client.OrmException { control = groupControl.validateFor(groupId); final com.google.gerrit.reviewdb.AccountGroup group = control.getAccountGroup(); final com.google.gerrit.common.data.GroupDetail detail = new com.google.gerrit.common.data.GroupDetail(); detail.setGroup(group); detail.setOwnerGroup(groupCache.get(group.getOwnerGroupId())); switch (group.getType()) { case INTERNAL : detail.setMembers(loadMembers()); break; } detail.setAccounts(aic.create()); return detail; }
private com.google.gerrit.server.change.ChangeResource parseResource(com.google.gerrit.acceptance.PushOneCommit.Result r) throws java.lang.Exception { java.util.List<com.google.gerrit.server.project.ChangeControl> ctls = changeFinder.find(r.getChangeId(), atrScope.get().getUser()); assertThat(ctls).hasSize(1); return changeResourceFactory.create(ctls.get(0)); }
@org.junit.Test public void copyMaxScoreOnRework() throws java.lang.Exception { java.lang.String subject = "test commit"; java.lang.String file = "a.txt"; codeReview.setCopyMaxScore(true); saveLabelConfig(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent(), subject, file, "first contents"); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(git, "refs/for/master"); review(r, 2); assertApproval(r, 2); push = pushFactory.create(db, user.getIdent(), subject, file, "second contents", r.getChangeId()); r = push.to(git, "refs/for/master"); assertApproval(r, 2); }
private void appendHeader(final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m) { m.openTr(); m.openTd(); m.addStyleName(Gerrit.RESOURCES.css().iconCell()); m.addStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.closeTd(); m.openTd(); m.addStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.addStyleName(Gerrit.RESOURCES.css().lineNumber()); m.closeTd(); m.openTd(); m.setStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.setAttribute("width", "50%"); m.append(PatchUtil.C.patchHeaderOld()); m.closeTd(); m.openTd(); m.addStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.addStyleName(Gerrit.RESOURCES.css().lineNumber()); m.closeTd(); m.openTd(); m.setStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.setAttribute("width", "50%"); m.append(PatchUtil.C.patchHeaderNew()); m.closeTd(); m.closeTr(); }

public com.google.gerrit.server.account.GroupControl controlFor(com.google.gerrit.common.data.GroupDescription.Basic group) { return new com.google.gerrit.server.account.GroupControl(user.get(), group); }


private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(org.eclipse.jgit.lib.Repository allUsersRepo, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException("Created group wasn't automatically loaded")); }



@java.lang.Override public void remove() { guiceFilter.destroy(); }

private void evictCache(com.google.common.cache.Cache<?, ?> cache, java.lang.String cacheName, java.lang.Object key) { if (com.ericsson.gerrit.plugins.evictcache.EvictCacheRestApiServlet.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); } else { cache.invalidate(key); } com.ericsson.gerrit.plugins.evictcache.EvictCacheRestApiServlet.logger.debug(("Invalidated " + cacheName)); }

public final void setOwnerUUID(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { owner_id(com.google.gwt.http.client.URL.encodePathSegment(uuid.get())); }
private void initIgnoreWhitespace() { ignoreWhitespace.addItem(PatchUtil.C.whitespaceIGNORE_NONE(), com.google.gerrit.client.diff.IGNORE_NONE.name()); ignoreWhitespace.addItem(PatchUtil.C.whitespaceIGNORE_SPACE_AT_EOL(), com.google.gerrit.client.diff.IGNORE_SPACE_AT_EOL.name()); ignoreWhitespace.addItem(PatchUtil.C.whitespaceIGNORE_SPACE_CHANGE(), com.google.gerrit.client.diff.IGNORE_SPACE_CHANGE.name()); ignoreWhitespace.addItem(PatchUtil.C.whitespaceIGNORE_ALL_SPACE(), com.google.gerrit.client.diff.IGNORE_ALL_SPACE.name()); }
protected void populateProjects() { Util.PROJECT_SVC.visibleProjects(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.common.data.ProjectList>() { @java.lang.Override public void onSuccess(final com.google.gerrit.common.data.ProjectList result) { projectsTab.display(result.getProjects()); if (firstPopupLoad) { firstPopupLoad = false; displayPopup(); } } }); }
public static com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject> cs(final com.google.gerrit.reviewdb.client.Change.Id id, final com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.change.ChangeActions.setEnabled(false, draftButtons); return new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); } @java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.ChangeActions.setEnabled(true, draftButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); } else { super.onFailure(err); } } }; }
public java.lang.Iterable<com.google.gerrit.extensions.common.WebLinkInfo> getProjectLinks(java.lang.String project) { java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.extensions.webui.ProjectWebLink webLink : projectLinks) { links.add(new com.google.gerrit.extensions.common.WebLinkInfo(webLink.getLinkName(), webLink.getImageUrl(), webLink.getProjectUrl(project), webLink.getTarget())); } return links; }
public java.lang.String getGerritPluginName(java.nio.file.Path srcPath) { java.lang.String fileName = srcPath.getFileName().toString(); if (com.google.gerrit.server.plugins.PluginLoader.isJsPlugin(fileName)) { return fileName.substring(0, ((fileName.length()) - 3)); } if (serverPluginFactory.handles(srcPath)) { return serverPluginFactory.getPluginName(srcPath); } return null; }
@java.lang.Override protected void loadDefaults() { approvals = com.google.common.collect.ImmutableListMultimap.of(); reviewers = com.google.common.collect.ImmutableSetMultimap.of(); submitRecords = com.google.common.collect.ImmutableList.of(); allChangeMessages = com.google.common.collect.ImmutableList.of(); changeMessagesByPatchSet = com.google.common.collect.ImmutableListMultimap.of(); comments = com.google.common.collect.ImmutableListMultimap.of(); hashtags = com.google.common.collect.ImmutableSet.of(); }
public void testInlineWithSingleProperty() throws java.io.IOException { com.googlesource.gerrit.plugins.its.workflow.ActionRequest actionRequest = createMock(com.googlesource.gerrit.plugins.its.workflow.ActionRequest.class); expect(actionRequest.getParameter(1)).andReturn("inline"); expect(actionRequest.getParameters()).andReturn(new java.lang.String[]{ "inline", "${subject}" }); java.util.Set<com.googlesource.gerrit.plugins.its.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); com.googlesource.gerrit.plugins.its.workflow.Property propertySubject = createMock(com.googlesource.gerrit.plugins.its.workflow.Property.class); expect(propertySubject.getKey()).andReturn("subject").anyTimes(); expect(propertySubject.getValue()).andReturn("Rosebud").anyTimes(); properties.add(propertySubject); org.easymock.IAnswer<java.lang.Boolean> answer = new com.googlesource.gerrit.plugins.hooks.workflow.action.AddVelocityCommentTest.VelocityWriterFiller("Rosebud"); org.easymock.Capture<org.apache.velocity.VelocityContext> contextCapture = new org.easymock.Capture(); expect(velocityRuntime.evaluate(capture(contextCapture), ((java.io.Writer) (anyObject())), ((java.lang.String) (anyObject())), eq("${subject}"))).andAnswer(answer); its.addComment("4711", "Rosebud"); replayMocks(); com.googlesource.gerrit.plugins.its.workflow.action.AddVelocityComment addVelocityComment = createAddVelocityComment(); addVelocityComment.execute("4711", actionRequest, properties); org.apache.velocity.VelocityContext context = contextCapture.getValue(); assertEquals("Subject property of context did not match", "Rosebud", context.get("subject")); }


public static com.google.gerrit.server.patch.IntraLineDiffKey create(org.eclipse.jgit.lib.ObjectId aId, org.eclipse.jgit.lib.ObjectId bId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace) { return new com.google.gerrit.server.patch.AutoValue_IntraLineDiffKey(aId, bId, whitespace); }


void setMaxHeight(int height) { maxHeight = height - ((getTabBar().getOffsetHeight()) + 2); for (int i = 0; i < (getTabBar().getTabCount()); i++) { tabs.get(i).setMaxHeight(maxHeight); } }
private static java.lang.String getCommitMessageHookInstallationHint(final com.google.gerrit.server.IdentifiedUser currentUser, java.lang.String canonicalWebUrl, final com.google.gerrit.server.ssh.SshInfo sshInfo) { final java.util.List<com.jcraft.jsch.HostKey> hostKeys = sshInfo.getHostKeys(); if (hostKeys.isEmpty()) { java.lang.String p = ".git/hooks/commit-msg"; return java.lang.String.format(" curl -Lo %s %s/tools/hooks/commit-msg ; chmod +x %s", p, com.google.gerrit.server.git.validators.CommitValidators.getGerritUrl(canonicalWebUrl), p); } java.lang.String sshHost; int sshPort; java.lang.String host = hostKeys.get(0).getHost(); int c = host.lastIndexOf(':'); if (0 <= c) { if (host.startsWith("*:")) { sshHost = com.google.gerrit.server.git.validators.CommitValidators.getGerritHost(canonicalWebUrl); } else { sshHost = host.substring(0, c); } sshPort = java.lang.Integer.parseInt(host.substring((c + 1))); } else { sshHost = host; sshPort = 22; } return java.lang.String.format(" scp -p -P %d %s@%s:hooks/commit-msg .git/hooks/", sshPort, currentUser.getUserName(), sshHost); }

private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, cd).setPatchSet(patchSet).getSubmitType(); if ((rec.status) != (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException(("Submit type rule failed: " + rec)); } return rec.type; }
public Project.NameKey project() throws com.google.gwtorm.server.OrmException { if ((project) == null) { checkState((!(notesMigration.readChanges())), "should not have created ChangeData without a project when NoteDb is enabled"); project = change().getProject(); } return project; }

private void beforeTest(org.junit.runner.Description description, boolean memory, boolean enableHttpd) throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = config(description); server = startServer(cfg, memory, enableHttpd); server.getTestInjector().injectMembers(this); admin = accounts.admin(); user = accounts.user(); adminSession = new com.google.gerrit.acceptance.RestSession(server, admin); userSession = new com.google.gerrit.acceptance.RestSession(server, user); com.google.gerrit.acceptance.GitUtil.initSsh(admin); db = reviewDbProvider.open(); com.google.gerrit.acceptance.AcceptanceTestRequestScope.Context ctx = newRequestContext(admin); atrScope.set(ctx); sshSession = ctx.getSession(); sshSession.open(); com.google.gerrit.extensions.api.projects.ProjectInput projectInput = projectInput(description); project = new com.google.gerrit.reviewdb.client.Project.NameKey(projectInput.name); createProject(projectInput); testRepo = com.google.gerrit.acceptance.GitUtil.cloneProject(project, sshSession); }
@java.lang.Override public com.google.gerrit.server.group.GroupJson.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.reviewdb.client.AccountGroup group = resource.toAccountGroup(); if (group == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } try { com.google.gerrit.server.account.GroupControl c = controlFactory.validateFor(group.getOwnerGroupUUID()); return json.addOption(com.google.gerrit.server.group.OWNER).format(c.getGroup()); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }



public com.google.gerrit.common.data.ParamertizedString.Builder replace(final java.lang.String name, final java.lang.String value) { params.put(name, value); return this; }

@java.lang.Override public void run() { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData(change); try { index.replace(cd); } catch (java.io.IOException e) { com.google.gerrit.server.index.ChangeIndexerImpl.log.error("Error indexing change", e); } }
@java.lang.Override public void onPreReceive(final org.eclipse.jgit.transport.ReceivePack arg0, final java.util.Collection<org.eclipse.jgit.transport.ReceiveCommand> commands) { parseCommands(commands); if (((newChange) != null) && ((newChange.getResult()) == (org.eclipse.jgit.transport.ReceiveCommand.Result.NOT_ATTEMPTED))) { createNewChanges(); } doReplaces(); }

public boolean isVisible() { return getRefControl().isVisible(); }
protected com.google.gerrit.prettify.common.SparseHtmlFile getSparseHtmlFileB(com.google.gerrit.common.data.PatchScript s) { com.google.gerrit.reviewdb.client.AccountDiffPreference dp = new com.google.gerrit.reviewdb.client.AccountDiffPreference(s.getDiffPrefs()); com.google.gerrit.prettify.common.PrettyFormatter f = ClientSideFormatter.FACTORY.get(); f.setDiffPrefs(dp); f.setFileName(s.getB().getPath()); f.setEditFilter(PrettyFormatter.B); f.setEditList(s.getEdits()); if (((dp.isSyntaxHighlighting()) && (s.getA().isWholeFile())) && (!(s.getB().isWholeFile()))) { f.format(s.getB().apply(s.getA(), s.getEdits())); } else { f.format(s.getB()); } return f; }
public static void query(com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeList>> callback, java.util.EnumSet<com.google.gerrit.extensions.client.ListChangesOption> options, java.lang.String... queries) { assert (queries.length) >= 2; com.google.gerrit.client.rpc.RestApi call = new com.google.gerrit.client.rpc.RestApi(com.google.gerrit.client.changes.ChangeList.URI); for (java.lang.String q : queries) { call.addParameterRaw("q", com.google.gwtorm.client.KeyUtil.encode(q)); } com.google.gerrit.client.changes.ChangeList.OPTIONS.addAll(options); com.google.gerrit.client.changes.ChangeList.addOptions(call, com.google.gerrit.client.changes.ChangeList.OPTIONS); call.get(callback); }
@org.junit.Test public void listTagsOfNonExistingProjectWithApi() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); gApi.projects().name("does-not-exist").tags(); exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); gApi.projects().name("does-not-exist").tag("tag").get(); }
private void addChangeImpl(java.lang.String id) throws com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> matched = changeUtil.findChanges(id, userProvider.get()); java.util.List<com.google.gerrit.server.project.ChangeControl> toAdd = new java.util.ArrayList(changes.size()); for (com.google.gerrit.server.project.ChangeControl ctl : matched) { if (((!(changes.containsKey(ctl.getId()))) && (inProject(ctl.getProject()))) && (ctl.isVisible(db))) { toAdd.add(ctl); } } switch (toAdd.size()) { case 0 : throw com.google.gerrit.sshd.commands.SetReviewersCommand.error((("\"" + id) + "\" no such change")); case 1 : com.google.gerrit.server.project.ChangeControl ctl = toAdd.get(0); changes.put(ctl.getId(), changesCollection.parse(ctl)); break; default : throw com.google.gerrit.sshd.commands.SetReviewersCommand.error((("\"" + id) + "\" matches multiple changes")); } }
@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedBeforeAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup("Ancient group for schema migration"); setCreatedOnToVeryOldTimestamp(groupId); removeAuditEntriesFor(groupId); schema151.migrateData(db, new com.google.gerrit.testutil.TestUpdateUI()); com.google.gerrit.reviewdb.client.AccountGroup group = db.accountGroups().get(groupId); assertThat(group.getCreatedOn()).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }

@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { if ((rsrc.getChange().getStatus()) == (Change.Status.MERGED)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("delete not permitted"); } rsrc.permissions().database(db).check(ChangePermission.DELETE); try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.reviewdb.client.Change.Id id = rsrc.getChange().getId(); bu.setOrder(Order.DB_BEFORE_REPO); bu.addOp(id, opProvider.get()); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }

static com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit create(java.lang.String oldFilePath, java.lang.String newFilePath, int beginA, int endA, int beginB, int endB, boolean filePathAdjusted) { java.lang.String adjustedOldFilePath = com.google.common.base.MoreObjects.firstNonNull(oldFilePath, newFilePath); boolean implicitRename = (!(java.util.Objects.equals(oldFilePath, newFilePath))) && filePathAdjusted; return new com.google.gerrit.server.patch.AutoValue_EditTransformer_ContextAwareEdit(adjustedOldFilePath, newFilePath, beginA, endA, beginB, endB, implicitRename); }


private void assertCreateGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedErrorOnCreate) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, "Update group config", GroupConfig.GROUP_CONFIG_FILE, "some content").setParents(com.google.common.collect.ImmutableList.of()).to(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + (name("bar")))); if (expectedErrorOnCreate != null) { r.assertErrorStatus(expectedErrorOnCreate); } else { r.assertOkStatus(); } }
public com.google.gerrit.testutil.InMemoryDatabase create() throws com.google.gwtorm.server.OrmException { if (!(created)) { created = true; final com.google.gerrit.reviewdb.server.ReviewDb c = open(); try { try { schemaCreator.create(c); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException("Cannot create in-memory database", e); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException("Cannot create in-memory database", e); } } finally { c.close(); } } return this; }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gitiles.RepositoryDescription> listRepositories(java.util.Set<java.lang.String> branches) throws java.io.IOException { java.util.Map<java.lang.String, com.google.gitiles.RepositoryDescription> repos = com.google.common.collect.Maps.newTreeMap(com.google.gitiles.DefaultAccess.US_COLLATOR); for (org.eclipse.jgit.lib.Repository repo : scanRepositories(basePath, req)) { repos.put(getRepositoryName(repo), buildDescription(repo, branches)); repo.close(); } return repos; }
private com.google.gerrit.server.git.strategy.SubmitStrategy createStrategy(com.google.gerrit.extensions.client.SubmitType submitType) throws com.google.gerrit.server.git.MergeException, com.google.gerrit.server.project.NoSuchProjectException { return submitStrategyFactory.create(submitType, db, repo, rw, inserter, canMergeFlag, getAlreadyAccepted(branchTip), destBranch); }
@java.lang.Override public void run() { com.google.gerrit.reviewdb.server.ReviewDb db; try { db = database.open(); } catch (com.google.gwtorm.server.OrmException e) { stderr.println(e.getMessage()); return; } try { for (; ;) { java.util.Map.Entry<com.google.gerrit.reviewdb.client.Project.NameKey, java.util.List<com.google.gerrit.reviewdb.client.Change>> next = next(); if (next != null) { try { export(db, next.getKey(), next.getValue()); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { stderr.println(e.getMessage()); } } else { break; } } } finally { monitor.endWorker(); db.close(); } }

@java.lang.Override protected org.eclipse.jgit.lfs.server.LargeFileRepository getLargeFileRepository(com.googlesource.gerrit.plugins.lfs.LfsRequest request, java.lang.String path) throws org.eclipse.jgit.lfs.errors.LfsException { java.lang.String pathInfo = (path.startsWith("/")) ? path : "/" + path; java.util.regex.Matcher matcher = com.googlesource.gerrit.plugins.lfs.LfsApiServlet.URL_PATTERN.matcher(pathInfo); if (!(matcher.matches())) { return null; } com.google.gerrit.reviewdb.client.Project.NameKey project = Project.NameKey.parse(com.google.gerrit.common.ProjectUtil.stripGitSuffix(matcher.group(1))); com.google.gerrit.server.project.ProjectState state = projectCache.get(project); if ((state == null) || ((state.getProject().getState()) == (HIDDEN))) { throw new org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound(project.get()); } if ((request.getOperation().equals("upload")) && ((state.getProject().getState()) == (READ_ONLY))) { throw new org.eclipse.jgit.lfs.errors.LfsRepositoryReadOnly(project.get()); } org.eclipse.jgit.lib.Config config = pluginConfigFactory.getProjectPluginConfigWithInheritance(state, pluginName); return config.getBoolean("lfs", "enabled", false) ? getRepository() : null; }
@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.getNativeEvent().getKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { widget.setEnabled(true); add(); } }

private java.lang.Runnable doScroll(final net.codemirror.lib.CodeMirror cm) { final net.codemirror.lib.CodeMirror other = otherCm(cm); return new java.lang.Runnable() { public void run() { if (((cm.getScrollSetAt()) + 50) > (java.lang.System.currentTimeMillis())) { return; } net.codemirror.lib.ScrollInfo si = cm.getScrollInfo(); if (((si.getTop()) == 0) && (!(com.google.gerrit.client.Gerrit.isHeaderVisible()))) { com.google.gerrit.client.Gerrit.setHeaderVisible(true); diffTable.updateFileCommentVisibility(false); resizeCodeMirror(); } else if (((si.getTop()) > (0.5 * (si.getClientHeight()))) && (com.google.gerrit.client.Gerrit.isHeaderVisible())) { com.google.gerrit.client.Gerrit.setHeaderVisible(false); diffTable.updateFileCommentVisibility(true); resizeCodeMirror(); } other.scrollToY(si.getTop()); other.setScrollSetAt(java.lang.System.currentTimeMillis()); (cm == (cmA) ? scrollTimerA : scrollTimerB).schedule(50); } }; }


@java.lang.Override public void run() throws java.io.IOException { com.google.gerrit.server.index.IndexModule.IndexType type = com.google.gerrit.server.index.IndexModule.IndexType.LUCENE; if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) > 1) { ui.header("Index"); type = index.select("Type", "type", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.ELASTICSEARCH)) { index.select("Transport protocol", "protocol", "http", com.google.common.collect.Sets.newHashSet("http", "https")); index.string("Hostname", "hostname", "localhost"); index.string("Port", "port", "9200"); index.string("Index Name", "name", "gerrit"); } if (((site.isNew) || (isEmptySite())) && (type == (com.google.gerrit.server.index.IndexModule.IndexType.LUCENE))) { for (com.google.gerrit.server.index.SchemaDefinitions<?> def : com.google.gerrit.server.index.IndexModule.ALL_SCHEMA_DEFS) { com.google.gerrit.server.index.IndexUtils.setReady(site, def.getName(), def.getLatest().getVersion(), true); } } else { if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) <= 1) { ui.header("Index"); } java.lang.String message = java.lang.String.format(("\nThe index must be %sbuilt before starting Gerrit:\n" + " java -jar gerrit.war reindex -d site_path\n"), (site.isNew ? "" : "re")); ui.message(message); initFlags.autoStart = false; } }
private void initRevisionsAction(com.google.gerrit.client.changes.ChangeInfo info, java.lang.String revision) { int currentPatchSet; if (((info.current_revision()) != null) && (info.revisions().containsKey(info.current_revision()))) { currentPatchSet = info.revision(info.current_revision())._number(); } else { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> revList = info.revisions().values(); com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.sortRevisionInfoByNumber(revList); currentPatchSet = revList.get(((revList.length()) - 1))._number(); } java.lang.String currentlyViewedPatchSet; if (info.revision(revision).id().equals("edit")) { currentlyViewedPatchSet = Resources.M.editPatchSet(com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.findEditParent(info.revisions().values())); currentPatchSet = (info.revisions().values().length()) - 1; } else { currentlyViewedPatchSet = info.revision(revision).id(); } patchSetsText.setInnerText(Resources.M.patchSets(currentlyViewedPatchSet, currentPatchSet)); patchSetsAction = new com.google.gerrit.client.change.PatchSetsAction(info.legacy_id(), revision, style, headerLine, patchSets); }
@java.lang.Override protected void configure() { final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.ActiveSession.Key, com.google.gerrit.reviewdb.ActiveSession>> type = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.ActiveSession.Key, com.google.gerrit.reviewdb.ActiveSession>>() {}; core(type, com.google.gerrit.httpd.WebSession.CACHE_NAME).memoryLimit(1024).maxAge(12, java.util.concurrent.TimeUnit.HOURS).evictionPolicy(EvictionPolicy.LRU); bind(com.google.gerrit.httpd.WebSession.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.httpd.WebSession.KeyGenerator.class).in(com.google.gerrit.httpd.SINGLETON); }
void resizePaddingWidget() { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { paddingWidgetEle.getStyle().setHeight(getOffsetHeight(), Unit.PX); paddingWidget.changed(); selfWidget.changed(); } }); }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { com.google.gerrit.server.IdentifiedUser user = receiveEvent.user; java.lang.String refname = receiveEvent.refName; org.eclipse.jgit.lib.ObjectId old = org.eclipse.jgit.lib.ObjectId.zeroId(); if ((receiveEvent.commit.getParentCount()) > 0) { old = receiveEvent.commit.getParent(0); } if (receiveEvent.command.getRefName().startsWith(com.googlesource.gerrit.plugins.hooks.REFS_CHANGES)) { refname = refname.replace(com.googlesource.gerrit.plugins.hooks.R_HEADS, "refs/for/refs/heads/"); old = org.eclipse.jgit.lib.ObjectId.zeroId(); } com.googlesource.gerrit.plugins.hooks.HookArgs args = hookFactory.createArgs(); args.add("--project", receiveEvent.project.getName()); args.add("--refname", refname); args.add("--uploader", user.getNameEmail()); args.add("--oldrev", old.name()); args.add("--newrev", receiveEvent.commit.name()); com.googlesource.gerrit.plugins.hooks.HookResult result = hook.run(args); if ((result != null) && ((result.getExitValue()) != 0)) { throw new com.google.gerrit.server.git.validators.CommitValidationException(result.toString().trim()); } return java.util.Collections.emptyList(); }
private void doClearPassword() { if ((id) != null) { enableUI(false); Util.ACCOUNT_SEC.clearPassword(id.getKey(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.reviewdb.client.AccountExternalId>() { public void onSuccess(final com.google.gerrit.reviewdb.client.AccountExternalId result) { display(result); } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { enableUI(true); } }); } }
@java.lang.Override public java.lang.String toString() { return ((("AccessToken [access_token=" + (access_token)) + ", token_type=") + (token_type)) + "]"; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.VoteResource rsrc, com.google.gerrit.server.change.DeleteVote.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.server.project.ChangeControl ctl = r.getControl(); com.google.gerrit.reviewdb.client.Change change = r.getChange(); try (com.google.gerrit.server.git.BatchUpdate bu = batchUpdateFactory.create(db.get(), change.getProject(), ctl.getUser().asIdentifiedUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.change.DeleteVote.Op(r.getReviewerUser().getAccountId(), rsrc.getLabel())); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }

private void fireEventForUnrestrictedListeners(final com.google.gerrit.server.events.ChangeEvent event) { for (com.google.gerrit.common.ChangeListener listener : unrestrictedListeners) { listener.onChangeEvent(event); } }
public void setHttpInjector(com.google.inject.Injector injector) { httpModule = copy(injector); httpGen = injector.getProvider(com.google.gerrit.server.plugins.ModuleGenerator.class); httpSets = dynamicSetsOf(injector); httpMaps = dynamicMapsOf(injector); onStart.addAll(com.google.gerrit.server.plugins.PluginGuiceEnvironment.listeners(injector, com.google.gerrit.server.plugins.StartPluginListener.class)); onReload.addAll(com.google.gerrit.server.plugins.PluginGuiceEnvironment.listeners(injector, com.google.gerrit.server.plugins.ReloadPluginListener.class)); }
public AccountResource.SshKey parse(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { try { int seq = java.lang.Integer.parseInt(id.get(), 10); com.google.gerrit.reviewdb.client.AccountSshKey sshKey = dbProvider.get().accountSshKeys().get(new com.google.gerrit.reviewdb.client.AccountSshKey.Id(user.getAccountId(), seq)); if (sshKey == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.account.AccountResource.SshKey(user, sshKey); } catch (java.lang.NumberFormatException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }


public void doChangeMergedHook(final com.google.gerrit.reviewdb.Change change, final com.google.gerrit.reviewdb.Account account, final com.google.gerrit.reviewdb.PatchSet patchSet) { final com.google.gerrit.common.ChangeHookRunner.ChangeMergedEvent event = new com.google.gerrit.common.ChangeHookRunner.ChangeMergedEvent(); event.change = getChangeAttribute(change); event.submitter = getAccountAttribute(account); event.patchSet = getPatchSetAttribute(patchSet); fireEvent(change, event); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add(changeMergedHook.getAbsolutePath()); args.add("--change"); args.add(event.change.id); args.add("--project"); args.add(event.change.project); args.add("--branch"); args.add(event.change.branch); args.add("--submitter"); args.add(getDisplayName(account)); args.add("--commit"); args.add(event.patchSet.revision); runHook(getRepo(change), args); }
@org.junit.Test public void submitTwoChangesWithFastForward() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange(); approve(change.getChangeId()); submit(change2.getChangeId()); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getId()).isEqualTo(change2.getCommitId()); assertThat(head.getParent(0).getId()).isEqualTo(change.getCommitId()); assertSubmitter(change.getChangeId(), 1); assertSubmitter(change2.getChangeId(), 1); assertPersonEquals(admin.getIdent(), head.getAuthorIdent()); assertPersonEquals(admin.getIdent(), head.getCommitterIdent()); }
@org.junit.Before public void setup() throws com.google.gerrit.server.project.NoSuchProjectException { when(configFactory.getProjectPluginConfigWithInheritance(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_NAME, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PLUGIN)).thenReturn(config); when(taskFactory.create(anyString(), anyString())).thenReturn(postTask); eventHandler = new com.googlesource.gerrit.plugins.webhooks.EventHandler(configFactory, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PLUGIN, taskFactory); }
private java.util.List<com.google.gerrit.common.data.SubmitRecord> cannotSubmitDraft() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet ps = getPatchSet(); try { if (!(control.isDraftVisible(cd.db(), cd))) { return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError((("Patch set " + (ps.getPatchSetId())) + " not found")); } else if (patchSet.isDraft()) { return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError("Cannot submit draft patch sets"); } else { return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError("Cannot submit draft changes"); } } catch (com.google.gwtorm.server.OrmException err) { java.lang.String msg = "Cannot read patch set " + ps; com.google.gerrit.server.project.SubmitRuleEvaluator.log.error(msg, err); return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError(msg); } }
@java.lang.Override int getCmLine(int line, com.google.gerrit.client.diff.DisplaySide side) { int res = java.util.Collections.binarySearch(chunks, new com.google.gerrit.client.diff.UnifiedDiffChunkInfo(side, line, 0, 0, 0, false)); if (res >= 0) { return chunks.get(res).cmLine; } else { res = (-res) - 1; if (res > 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get((res - 1)); if (((side == (DisplaySide.A)) && (info.edit)) && ((info.side) == (DisplaySide.B))) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo delete = chunks.get((res - 2)); if (line <= (delete.end)) { return ((delete.cmLine) + line) - (delete.start); } else { return (((((delete.cmLine) + line) - (delete.start)) + (info.end)) - (info.start)) + 1; } } else if (side == (info.side)) { return ((info.cmLine) + line) - (info.start); } else { return ((info.cmLine) + (getLineMapper().lineOnOther(side, line).getLine())) - (info.start); } } else { return line; } } }
@java.lang.Override public java.lang.String authenticate(com.google.gerrit.server.CurrentUser user, java.util.List<java.lang.String> args) throws com.google.gerrit.sshd.BaseCommand.Failure, com.google.gerrit.sshd.BaseCommand.UnloggedFailure { try { java.net.URL url = new java.net.URL(canonicalWebUrl); java.lang.String href = ((((((url.getProtocol()) + "://") + (url.getAuthority())) + (url.getPath())) + "/") + (args.get(0))) + "/info/lfs"; org.eclipse.jgit.lfs.server.Response.Action response = new org.eclipse.jgit.lfs.server.Response.Action(); response.href = href; response.header = java.util.Collections.singletonMap(com.googlesource.gerrit.plugins.lfs.HDR_AUTHORIZATION, "not:required"); return gson.toJson(response); } catch (java.net.MalformedURLException e) { throw new com.google.gerrit.sshd.BaseCommand.Failure(1, ((("Server configuration error: " + "forming Git LFS endpoint URL from canonicalWebUrl [") + (canonicalWebUrl)) + "] failed.")); } }
@java.lang.SuppressWarnings({ "rawtypes", "unchecked" }) public void execute(java.util.Collection<com.google.gerrit.server.update.BatchUpdate> updates, com.google.gerrit.server.update.BatchUpdateListener listener, @com.google.gerrit.common.Nullable com.google.gerrit.server.util.RequestId requestId, boolean dryRun) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { checkNotNull(listener); if (migration.disableChangeReviewDb()) { com.google.common.collect.ImmutableList<com.google.gerrit.server.update.NoteDbBatchUpdate> noteDbUpdates = ((com.google.common.collect.ImmutableList) (com.google.common.collect.ImmutableList.copyOf(updates))); com.google.gerrit.server.update.NoteDbBatchUpdate.execute(noteDbUpdates, listener, requestId, dryRun); } else { com.google.common.collect.ImmutableList<com.google.gerrit.server.update.ReviewDbBatchUpdate> reviewDbUpdates = ((com.google.common.collect.ImmutableList) (com.google.common.collect.ImmutableList.copyOf(updates))); com.google.gerrit.server.update.ReviewDbBatchUpdate.execute(reviewDbUpdates, listener, requestId, dryRun); } }
public com.google.gerrit.common.data.PermissionRange getRange(java.lang.String permission) { return getRefControl().getRange(permission); }

private com.google.gerrit.server.group.InternalGroup createGroupInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException { checkIfReviewDbUpdatesAreBlocked(); com.google.gerrit.reviewdb.client.AccountGroupName gn = new com.google.gerrit.reviewdb.client.AccountGroupName(groupCreation.getNameKey(), groupCreation.getId()); db.accountGroupNames().insert(com.google.common.collect.ImmutableList.of(gn)); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupsUpdate.createAccountGroup(groupCreation); com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult updateResult = updateGroupInReviewDb(db, group, groupUpdate); return com.google.gerrit.server.group.InternalGroup.create(group, updateResult.getModifiedMembers(), updateResult.getModifiedSubgroups(), updateResult.getRefState()); }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo setAssignee(com.google.gerrit.extensions.api.changes.AssigneeInput input) throws com.google.gerrit.extensions.restapi.RestApiException { try { return putAssignee.apply(change, input); } catch (com.google.gerrit.server.update.UpdateException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot set assignee", e); } }
@java.lang.Override protected void onLoad() { file.set(id, content); file.setText(fileName); file.setEnabled(fileName.isEmpty()); content.setText(fileContent); save.setEnabled(false); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { content.setFocus(true); } }); }









private void display(com.google.gerrit.client.info.AccountPreferencesInfo p) { showSiteHeader.setValue(p.showSiteHeader()); useFlashClipboard.setValue(p.useFlashClipboard()); copySelfOnEmails.setValue(p.copySelfOnEmail()); setListBox(maximumPageSize, com.google.gerrit.client.account.DEFAULT_PAGESIZE, p.changesPerPage()); setListBox(dateFormat, AccountGeneralPreferencesInfo.DateFormat.STD, p.dateFormat()); setListBox(timeFormat, AccountGeneralPreferencesInfo.TimeFormat.HHMM_12, p.timeFormat()); relativeDateInChangeTable.setValue(p.relativeDateInChangeTable()); sizeBarInChangeTable.setValue(p.sizeBarInChangeTable()); legacycidInChangeTable.setValue(p.legacycidInChangeTable()); muteCommonPathPrefixes.setValue(p.muteCommonPathPrefixes()); setListBox(reviewCategoryStrategy, AccountGeneralPreferencesInfo.ReviewCategoryStrategy.NONE, p.reviewCategoryStrategy()); setListBox(diffView, AccountGeneralPreferencesInfo.DiffView.SIDE_BY_SIDE, p.diffView()); display(p.my()); }
private void initRevisionActions(com.google.gerrit.client.changes.ChangeInfo info, com.google.gerrit.client.changes.ChangeInfo.RevisionInfo revInfo, boolean hasUser) { com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.actions.ActionInfo> actions = (revInfo.has_actions()) ? revInfo.actions() : com.google.gerrit.client.rpc.NativeMap.<com.google.gerrit.client.actions.ActionInfo>create(); actions.copyKeysIntoChildren("id"); canSubmit = false; if (hasUser) { canSubmit = actions.containsKey("submit"); if (canSubmit) { com.google.gerrit.client.actions.ActionInfo action = actions.get("submit"); submit.setTitle(action.title()); submit.setEnabled(action.enabled()); submit.setHTML(new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().openDiv().append(action.label()).closeDiv()); } com.google.gerrit.client.change.Actions.a2b(actions, "cherrypick", cherrypick); com.google.gerrit.client.change.Actions.a2b(actions, "rebase", rebase); for (java.lang.String id : com.google.gerrit.client.change.Actions.filterNonCore(actions)) { add(new com.google.gerrit.client.actions.ActionButton(info, revInfo, actions.get(id))); } } }
@java.lang.Override public java.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws java.lang.Exception { if (!(stalenessChecker.isStale(id))) { return false; } index(newChangeData(db.get(), project, id)); return true; }
protected boolean hasDifferences(final com.google.gerrit.common.data.PatchScript script) { boolean hasEdits = !(script.getEdits().isEmpty()); boolean hasMeta = !(script.getPatchHeader().isEmpty()); return hasEdits || hasMeta; }

private void populatePublishAction() { final com.google.gwt.user.client.ui.Button b = new com.google.gwt.user.client.ui.Button(Util.C.buttonPublishPatchSet()); b.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { b.setEnabled(false); Util.MANAGE_SVC.publish(patchSet.getId(), new com.google.gerrit.client.changes.ChangeDetailCache.GerritWidgetCallback(b)); } }); actionsPanel.add(b); }
private com.google.gerrit.reviewdb.client.Change.Id getOrRegisterAccount(com.google.gerrit.reviewdb.server.ReviewDb db, java.lang.String login, java.lang.String name, java.lang.String email) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.AccountExternalId.Key userExtKey = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_USERNAME, login); com.google.gerrit.reviewdb.server.AccountExternalIdAccess gerritExtIds = db.accountExternalIds(); com.google.gerrit.reviewdb.client.AccountExternalId userExtId = gerritExtIds.get(userExtKey); if (userExtId == null) { return accountImporter.importAccount(login, name, email); } return userExtId.getAccountId(); }


@org.junit.Test public void testWithAnotherURI() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p = createProject("a"); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); java.lang.String gitmodules = ((("" + (("[submodule \"a\"]\n" + "path = a\n") + "url = http://localhost:80/")) + (p.get())) + "\n") + "branch = master\n"; cfg.fromText(gitmodules); java.lang.String thisServer = com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER; com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey("project"), "master"); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> res = new com.google.gerrit.server.util.SubmoduleSectionParser(projectCache, cfg, thisServer, targetBranch).parseAllSections(); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> expected = com.google.common.collect.Sets.newHashSet(new com.google.gerrit.reviewdb.client.SubmoduleSubscription(targetBranch, new com.google.gerrit.reviewdb.client.Branch.NameKey(p, "master"), "a")); assertThat(res).containsExactlyElementsIn(expected); }
@java.lang.Override protected void configure() { bind(new com.google.inject.TypeLiteral<java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).annotatedWith(com.google.gerrit.server.config.GitUploadPackGroups.class).toProvider(com.google.gerrit.server.config.GitUploadPackGroupsProvider.class).in(com.google.gerrit.server.project.SINGLETON); bind(new com.google.inject.TypeLiteral<java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).annotatedWith(com.google.gerrit.server.config.GitReceivePackGroups.class).toProvider(com.google.gerrit.server.config.GitReceivePackGroupsProvider.class).in(com.google.gerrit.server.project.SINGLETON); bind(ChangeControl.Factory.class); factory(ProjectControl.AssistedFactory.class); }
com.google.gerrit.httpd.rpc.changedetail.PatchSetDetailFactory create(@com.google.inject.assistedinject.Assisted("psIdBase") @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.PatchSet.Id psIdBase, @com.google.inject.assistedinject.Assisted("psIdNew") com.google.gerrit.reviewdb.client.PatchSet.Id psIdNew, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.AccountDiffPreference diffPrefs);


public void assertCanDelete(com.google.gerrit.server.project.ProjectResource rsrc, com.googlesource.gerrit.plugins.deleteproject.DeleteProject.Input input) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { try { pcHandler.assertCanDelete(rsrc); dbHandler.assertCanDelete(rsrc.getControl().getProject()); fsHandler.assertCanDelete(rsrc, (input == null ? false : input.preserve)); } catch (com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }
static void initialize(org.eclipse.jgit.lib.Config cfg) { cfg.setString(com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER, MarkdownFormatter.NAME, com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_MIME_TYPE, "text/x-markdown"); cfg.setString(com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER, PlainTextFormatter.NAME, com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_MIME_TYPE, "text/plain"); }
private static void onRemove(com.google.gwt.dom.client.NativeEvent event) { java.lang.String hashtags = com.google.gerrit.client.change.Hashtags.getDataId(event); if (hashtags != null) { final com.google.gerrit.client.change.ChangeScreen screen = com.google.gerrit.client.change.ChangeScreen.get(event); final com.google.gerrit.reviewdb.client.PatchSet.Id psId = screen.getPatchSetId(); com.google.gerrit.client.changes.ChangeApi.hashtags(psId.getParentKey().get()).post(com.google.gerrit.client.change.Hashtags.PostInput.create(null, hashtags), new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(psId)); } } }); } }
@java.lang.Override public boolean equals(java.lang.Object other) { if (other instanceof com.google.gerrit.server.project.PermissionCollection.SeenRule) { com.google.gerrit.server.project.PermissionCollection.SeenRule a = this; com.google.gerrit.server.project.PermissionCollection.SeenRule b = ((com.google.gerrit.server.project.PermissionCollection.SeenRule) (other)); return ((a.refPattern.equals(b.refPattern)) && (a.permissionName.equals(b.permissionName))) && (eq(a.group, b.group)); } return false; }

private void testGetGroup(java.lang.String url, com.google.gerrit.reviewdb.client.AccountGroup expectedGroup) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = session.get(url); com.google.gerrit.acceptance.rest.group.GroupInfo group = new com.google.gson.Gson().fromJson(r.getReader(), new com.google.gson.reflect.TypeToken<com.google.gerrit.acceptance.rest.group.GroupInfo>() {}.getType()); com.google.gerrit.acceptance.rest.group.GroupAssert.assertGroupInfo(expectedGroup, group); }
private void setMissingHeader(final java.util.Map<java.lang.String, com.google.gerrit.server.mail.EmailHeader> hdrs, final java.lang.String name, final java.lang.String value) { if ((!(hdrs.containsKey(name))) || (hdrs.get(name).isEmpty())) { hdrs.put(name, new com.google.gerrit.server.mail.EmailHeader.String(value)); } }
public static void saveInlineComments() { final com.google.gerrit.client.change.LocalComments.StorageBackend storage = new com.google.gerrit.client.change.LocalComments.StorageBackend(); for (final java.lang.String cookie : storage.getKeys()) { if (com.google.gerrit.client.change.LocalComments.isInlineComment(cookie)) { com.google.gerrit.client.change.LocalComments.InlineComment input = com.google.gerrit.client.change.LocalComments.getInlineComment(cookie); if ((input.commentInfo.id()) == null) { com.google.gerrit.client.changes.CommentApi.createDraft(input.psId, input.commentInfo, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { storage.removeItem(cookie); } }); } else { com.google.gerrit.client.changes.CommentApi.updateDraft(input.psId, input.commentInfo.id(), input.commentInfo, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { storage.removeItem(cookie); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { if (com.google.gerrit.client.rpc.RestApi.isNotFound(caught)) { storage.removeItem(cookie); } else { super.onFailure(caught); } } }); } } } }

@java.lang.Override public boolean allowsEdit(final com.google.gerrit.reviewdb.client.Account.FieldName field) { if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.client.AuthType.HTTP)) { switch (field) { case USER_NAME : return false; case FULL_NAME : return (com.google.common.base.Strings.emptyToNull(authConfig.getHttpDisplaynameHeader())) == null; case REGISTER_NEW_EMAIL : return (com.google.common.base.Strings.emptyToNull(authConfig.getHttpEmailHeader())) == null; default : return true; } } else { return true; } }

@org.junit.Before public void setUp() throws java.lang.Exception { new com.google.gerrit.testutil.InMemoryModule().inject(this); }
private static boolean isSecure(javax.servlet.http.HttpServletRequest req) { return (req.isSecure()) || ("https".equals(req.getScheme())); }

@org.junit.Test public void defaultGroupsCreated_internals() throws java.lang.Exception { java.util.Set<java.lang.String> names = com.google.common.collect.Sets.newHashSet(); for (com.google.gerrit.reviewdb.client.AccountGroup g : db.accountGroups().all()) { names.add(g.getName()); } assertTrue(names.contains("Administrators")); assertTrue(names.contains("Non-Interactive Users")); }
@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.project.ProjectControl myCtl = parent.getControl(); if (id.toString().equals("default")) { return com.google.gerrit.server.project.DashboardResource.projectDefault(myCtl); } java.util.List<java.lang.String> parts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id.get())); if ((parts.size()) != 2) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.server.CurrentUser user = myCtl.getUser(); java.lang.String ref = parts.get(0); java.lang.String path = parts.get(1); for (com.google.gerrit.server.project.ProjectState ps : myCtl.getProjectState().tree()) { try { return parse(ps.controlFor(user), ref, path, myCtl); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@org.junit.Test public void revert() throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); gApi.changes().id(("p~master~" + (r.getChangeId()))).revision(r.getCommit().name()).review(com.google.gerrit.acceptance.api.change.ChangeIT.approve()); gApi.changes().id(("p~master~" + (r.getChangeId()))).revision(r.getCommit().name()).submit(); gApi.changes().id(("p~master~" + (r.getChangeId()))).revert(); }

private java.lang.Iterable<java.lang.String> getDraftRefs(final com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException { java.util.Set<java.lang.String> refNames = getRefNamesAllUsers(RefNames.REFS_DRAFT_COMMENTS); final java.lang.String suffix = "/" + (changeId.get()); return com.google.common.collect.Iterables.filter(refNames, new com.google.common.base.Predicate<java.lang.String>() { @java.lang.Override public boolean apply(java.lang.String input) { return input.endsWith(suffix); } }); }
public com.google.gerrit.server.project.ProjectState get(final com.google.gerrit.reviewdb.client.Project.NameKey projectName) { if (projectName == null) { return null; } try { com.google.gerrit.server.project.ProjectState state = byName.get(projectName.get()); if ((state != null) && (state.needsRefresh(clock.read()))) { byName.invalidate(projectName.get()); state = byName.get(projectName.get()); } return state; } catch (java.util.concurrent.ExecutionException e) { if (!((e.getCause()) instanceof org.eclipse.jgit.errors.RepositoryNotFoundException)) { com.google.gerrit.server.project.ProjectCacheImpl.log.warn(java.lang.String.format("Cannot read project %s", projectName.get()), e); } return null; } }
public void add(final com.google.gerrit.extensions.registration.RegistrationHandle handle) { if (handle instanceof com.google.gerrit.extensions.registration.ReloadableRegistrationHandle) { if ((reloadableHandles) == null) { reloadableHandles = com.google.common.collect.Lists.newArrayList(); } reloadableHandles.add(((com.google.gerrit.extensions.registration.ReloadableRegistrationHandle<?>) (handle))); } add(new com.google.gerrit.lifecycle.LifecycleListener() { @java.lang.Override public void start() { } @java.lang.Override public void stop() { handle.remove(); } }); }





private void assertRefs(java.lang.String... expectedWithMeta) throws java.lang.Exception { java.util.List<java.lang.String> expected = new java.util.ArrayList<>(expectedWithMeta.length); for (java.lang.String r : expectedWithMeta) { if ((notesMigration.writeChanges()) || (!(r.endsWith(RefNames.META_SUFFIX)))) { expected.add(r); } } com.google.gerrit.acceptance.AcceptanceTestRequestScope.Context ctx = disableDb(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { com.google.gerrit.server.project.ProjectControl ctl = projectControlFactory.controlFor(project, identifiedUserFactory.create(user.getId())); com.google.gerrit.server.git.VisibleRefFilter filter = new com.google.gerrit.server.git.VisibleRefFilter(tagCache, changeCache, repo, ctl, new com.google.gerrit.testutil.DisabledReviewDb(), true); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = repo.getAllRefs(); assertThat(filter.filter(all, false).keySet()).containsExactlyElementsIn(expected); } finally { enableDb(ctx); } }
private void setMerged(final com.google.gerrit.reviewdb.client.Change c, final com.google.gerrit.reviewdb.client.ChangeMessage msg) { com.google.gerrit.server.git.CodeReviewCommit commit = commits.get(c.getId()); com.google.gerrit.reviewdb.client.PatchSet.Id merged = commit.change.currentPatchSetId(); setMergedPatchSet(c.getId(), merged); com.google.gerrit.reviewdb.client.PatchSetApproval submitter = saveApprovals(c, merged); addMergedMessage(submitter, msg); sendMergedEmail(c, submitter); if (submitter != null) { try { hooks.doChangeMergedHook(c, accountCache.get(submitter.getAccountId()).getAccount(), db.patchSets().get(c.currentPatchSetId()), db); } catch (com.google.gwtorm.server.OrmException ex) { com.google.gerrit.server.git.MergeOp.log.error(("Cannot run hook for submitted patch set " + (c.getId())), ex); } } }


@org.junit.Test public void revertChangeByOwner() throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageChange(); revert(sc, sc.owner); assertThat(sender).sent("newchange", sc).notTo(sc.owner).to(sc.reviewer).cc(sc.ccer).notTo(sc.starrer).notTo(sc.reviewerByEmail, sc.ccerByEmail).notTo(com.google.gerrit.acceptance.server.mail.ALL_COMMENTS); assertThat(sender).sent("revert", sc).notTo(sc.owner).cc(sc.reviewer, sc.ccer).notTo(sc.starrer).notTo(sc.reviewerByEmail, sc.ccerByEmail).bcc(com.google.gerrit.acceptance.server.mail.ALL_COMMENTS); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
private void populateDiffAllActions(final com.google.gerrit.common.data.PatchSetDetail detail) { final com.google.gwt.user.client.ui.Button diffAllSideBySide = new com.google.gwt.user.client.ui.Button(Util.C.buttonDiffAllSideBySide()); diffAllSideBySide.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { for (com.google.gerrit.reviewdb.Patch p : detail.getPatches()) { com.google.gwt.user.client.Window.open((((Window.Location.getPath()) + "#") + (com.google.gerrit.client.Dispatcher.toPatchSideBySide(p.getKey()))), "_blank", null); } } }); actionsPanel.add(diffAllSideBySide); final com.google.gwt.user.client.ui.Button diffAllUnified = new com.google.gwt.user.client.ui.Button(Util.C.buttonDiffAllUnified()); diffAllUnified.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { for (com.google.gerrit.reviewdb.Patch p : detail.getPatches()) { com.google.gwt.user.client.Window.open((((Window.Location.getPath()) + "#") + (com.google.gerrit.client.Dispatcher.toPatchUnified(p.getKey()))), "_blank", null); } } }); actionsPanel.add(diffAllUnified); }
@com.google.gwtjsonrpc.common.HostPageCache(name = "gerrit_hostpagedata", once = true) void load(com.google.gwtjsonrpc.common.AsyncCallback<com.google.gerrit.common.data.HostPageData> callback);
public T load() throws com.google.gwtorm.server.OrmException { if (loaded) { return self(); } if ((!(args.migration.enabled())) || ((changeId) == null)) { loadDefaults(); return self(); } try (org.eclipse.jgit.lib.Repository repo = args.repoManager.openMetadataRepository(getProjectName());com.google.gerrit.server.notedb.AbstractChangeNotes.LoadHandle handle = openHandle(repo)) { revision = handle.id(); onLoad(handle); loaded = true; } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } return self(); }
java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getReviewerFilterSections() { com.google.common.collect.ImmutableList.Builder<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> b = com.google.common.collect.ImmutableList.builder(); for (java.lang.String f : cfg.getSubsections(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILTER)) { b.add(newReviewerFilterSection(f)); } return b.build(); }


private <T extends com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput> void checkComments(com.google.gerrit.server.change.RevisionResource revision, java.util.Map<java.lang.String, java.util.List<T>> commentsPerPath) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.patch.PatchListNotAvailableException { java.util.Set<java.lang.String> revisionFilePaths = getAffectedFilePaths(revision); for (java.util.Map.Entry<java.lang.String, java.util.List<T>> entry : commentsPerPath.entrySet()) { java.lang.String path = entry.getKey(); com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId = revision.getChange().currentPatchSetId(); com.google.gerrit.server.change.PostReview.ensurePathRefersToAvailableOrMagicFile(path, revisionFilePaths, patchSetId); java.util.List<T> comments = entry.getValue(); for (T comment : comments) { com.google.gerrit.server.change.PostReview.ensureLineIsNonNegative(comment.line, path); com.google.gerrit.server.change.PostReview.ensureCommentNotOnMagicFilesOfAutoMerge(path, comment); com.google.gerrit.server.change.PostReview.ensureRangeIsValid(path, comment.range); } } }


public java.io.Reader get(java.lang.String endPoint) throws java.io.IOException { org.apache.http.client.methods.HttpGet get = new org.apache.http.client.methods.HttpGet(("http://localhost:8080/a" + endPoint)); org.apache.http.HttpResponse response = getClient().execute(get); java.io.Reader reader = new java.io.InputStreamReader(response.getEntity().getContent()); reader.skip(4); return reader; }
@org.junit.Test public void createDraft() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); java.lang.String changeId = r.getChangeId(); java.lang.String revId = r.getCommit().getName(); com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput comment = newCommentInfo("file1", Comment.Side.REVISION, 1, "comment 1"); addDraft(changeId, revId, comment); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> result = getDraftComments(changeId, revId); assertEquals(1, result.size()); com.google.gerrit.extensions.common.CommentInfo actual = com.google.common.collect.Iterables.getOnlyElement(result.get(comment.path)); com.google.gerrit.acceptance.server.change.CommentsIT.assertCommentInfo(comment, actual); }



public static void sortRevisionInfoByNumber(com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> list) { java.util.Collections.sort(com.google.gerrit.client.rpc.Natives.asList(list), new java.util.Comparator<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo>() { @java.lang.Override public int compare(com.google.gerrit.client.changes.ChangeInfo.RevisionInfo a, com.google.gerrit.client.changes.ChangeInfo.RevisionInfo b) { return (a._number()) - (b._number()); } }); }
public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.get(r.iterator().next()).getAccount(); } com.google.gerrit.reviewdb.client.Account match = null; for (com.google.gerrit.reviewdb.client.Account.Id id : r) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = byId.maybeGet(id).map(AccountState::getAccount); if ((!(account.isPresent())) || (!(account.get().isActive()))) { continue; } if (match != null) { return null; } match = account.get(); } return match; }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); idA = org.eclipse.jgit.lib.ObjectId.fromString("df84c2f4f7ce7e0b25cdeac84b8870bcff319885"); name = new com.google.gerrit.reviewdb.Project.NameKey("test"); realDb = createBareRepository(); mockDb = createStrictMock(org.eclipse.jgit.lib.Repository.class); pc = createStrictMock(com.google.gerrit.server.project.ProjectControl.class); pcf = createStrictMock(ProjectControl.Factory.class); grm = createStrictMock(com.google.gerrit.server.git.GitRepositoryManager.class); }

@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.google.gerrit.server.account.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.String newPassword; if (input.generate) { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canGenerateHttpPassword()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to generate HTTP password"); } newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to clear HTTP password"); } newPassword = null; } else { if (!(self.get().getCapabilities().canAdministrateServer())) { throw new com.google.gerrit.extensions.restapi.AuthException(("not allowed to set HTTP password directly, " + "need to be Gerrit administrator")); } newPassword = input.httpPassword; } return apply(rsrc.getUser(), newPassword); }

private void init() { final org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); try { cfg.fromText(com.google.gerrit.pgm.init.Libraries.read(com.google.gerrit.pgm.init.Libraries.RESOURCE_FILE)); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e.getMessage(), e); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.lang.RuntimeException(e.getMessage(), e); } for (final java.lang.reflect.Field f : com.google.gerrit.pgm.init.Libraries.class.getDeclaredFields()) { if ((((f.getModifiers()) & (java.lang.reflect.Modifier.STATIC)) == 0) && ((f.getType()) == (com.google.gerrit.pgm.init.LibraryDownloader.class))) { try { init(f, cfg); } catch (java.lang.IllegalArgumentException e) { throw new java.lang.IllegalStateException(("Cannot initialize " + (f.getName()))); } catch (java.lang.IllegalAccessException e) { throw new java.lang.IllegalStateException(("Cannot initialize " + (f.getName()))); } } } }
@java.lang.SuppressWarnings("deprecation") private static org.eclipse.jgit.lib.ObjectId getNoteKey(com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) { return org.eclipse.jgit.lib.ObjectId.fromRaw(com.google.common.hash.Hashing.sha1().hashString(groupName.get(), java.nio.charset.StandardCharsets.UTF_8).asBytes()); }
public void displayPopup() { poppingUp = true; if (firstPopupLoad) { populateProjects(); } else { popup.setPopupPositionAndShow(popupPosition); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(popup); try { com.google.gwtexpui.globalkey.client.GlobalKey.addApplication(popup, new com.google.gwtexpui.globalkey.client.HidePopupPanelCommand(0, com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE, popup)); } catch (java.lang.Throwable e) { } projectsTab.setRegisterKeys(true); projectsTab.finishDisplay(); filterTxt.setFocus(true); poppingUp = false; } }
public void removeApproval(java.lang.String label) { removeApprovalFor(getAccountId(), label); }
@org.junit.Test public void testPersonByNameAge() throws java.lang.Exception { com.google.gwtorm.nosql.IndexFunction<com.google.gwtorm.data.Person> idx = index("nameAge", "WHERE name=? AND age=?"); org.junit.Assert.assertEquals("nameAge", idx.getName()); com.google.gwtorm.nosql.IndexKeyBuilder b; com.google.gwtorm.data.Person p; b = new com.google.gwtorm.nosql.IndexKeyBuilder(); p = new com.google.gwtorm.data.Person(new com.google.gwtorm.data.Person.Key("hm"), 42); assertTrue(idx.includes(p)); idx.encode(b, p); com.google.gwtorm.nosql.IndexFunctionTest.assertEqualToBuilderResult(new byte[]{ 'h', 'm', 0, 1, 1, 42 }, b); p = new com.google.gwtorm.data.Person(new com.google.gwtorm.data.Person.Key(null), 0); assertFalse(idx.includes(p)); b = new com.google.gwtorm.nosql.IndexKeyBuilder(); assertFalse(idx.includes(p)); }
public static com.google.gerrit.server.notedb.NotesMigration allEnabled() { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setBoolean("notedb", null, "write", true); cfg.setBoolean("notedb", "patchSetApprovals", "read", true); cfg.setBoolean("notedb", "changeMessages", "read", true); cfg.setBoolean("notedb", "comments", "read", true); return new com.google.gerrit.server.notedb.NotesMigration(cfg); }
@java.lang.Override public java.lang.Void call() throws java.lang.Exception { try { final com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open(); try { context.setContext(new com.google.gerrit.server.util.RequestContext() { @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDbProvider() { return com.google.inject.util.Providers.of(db); } @java.lang.Override public com.google.gerrit.server.CurrentUser getCurrentUser() { throw new com.google.inject.OutOfScopeException("No user during ChangeIndexer"); } }); index.replace(new com.google.gerrit.server.query.change.ChangeData(change)); return null; } finally { context.setContext(null); db.close(); } } catch (java.lang.Exception e) { com.google.gerrit.server.index.ChangeIndexerImpl.log.error(java.lang.String.format("Failed to index change %d in %s", change.getChangeId(), change.getProject().get()), e); throw e; } }
@java.lang.Override public void run() { if (!(listeners.iterator().hasNext())) { return; } try { com.googlesource.gerrit.plugins.quota.Publisher.RepoSizeEvent event = createEvent(); for (com.google.gerrit.extensions.events.UsageDataPublishedListener l : listeners) { try { l.onUsageDataPublished(event); } catch (java.lang.RuntimeException e) { com.googlesource.gerrit.plugins.quota.Publisher.log.warn("Failure in UsageDataPublishedListener", e); } } } catch (java.util.concurrent.ExecutionException e) { com.googlesource.gerrit.plugins.quota.Publisher.log.warn("Error accessing repoSizeCache", e); } }
public void setUserAccountId(com.google.gerrit.reviewdb.client.Account.Id id) { key = new com.google.gerrit.httpd.WebSessionManager.Key(("id:" + id)); val = new com.google.gerrit.httpd.WebSessionManager.Val(id, 0, false, null, 0); }
static com.google.gerrit.extensions.common.GpgKeyInfo toJson(org.bouncycastle.openpgp.PGPPublicKeyRing keyRing) throws java.io.IOException { org.bouncycastle.openpgp.PGPPublicKey key = keyRing.getPublicKey(); com.google.gerrit.extensions.common.GpgKeyInfo info = new com.google.gerrit.extensions.common.GpgKeyInfo(); info.id = com.google.gerrit.gpg.PublicKeyStore.keyIdToString(key.getKeyID()); info.fingerprint = com.google.gerrit.gpg.Fingerprint.toString(key.getFingerprint()); @java.lang.SuppressWarnings("unchecked") java.util.Iterator<java.lang.String> userIds = key.getUserIDs(); info.userIds = com.google.common.collect.ImmutableList.copyOf(userIds); try (java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(4096);org.bouncycastle.bcpg.ArmoredOutputStream aout = new org.bouncycastle.bcpg.ArmoredOutputStream(out)) { key.encode(aout); info.key = new java.lang.String(out.toByteArray(), java.nio.charset.StandardCharsets.UTF_8); } return info; }

public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = com.google.gerrit.server.account.AccountManager.id(who); com.google.gerrit.reviewdb.client.AccountExternalId extId = getAccountExternalId(key); if (extId != null) { if (!(extId.getAccountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException("Identity in use by another account"); } update(db, who, extId); } else { extId = com.google.gerrit.server.account.AccountManager.createId(to, who); extId.setEmailAddress(who.getEmailAddress()); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); externalIdCache.onCreate(extId); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } } if ((who.getEmailAddress()) != null) { byEmailCache.evict(who.getEmailAddress()); } byIdCache.evict(to); } return new com.google.gerrit.server.account.AuthResult(to, key, false); } }


@org.junit.Test public void createDuplicateInternalGroupCaseSensitiveName_Conflict() throws java.lang.Exception { java.lang.String dupGroupName = name("dupGroup"); gApi.groups().create(dupGroupName); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage((("group '" + dupGroupName) + "' already exists")); gApi.groups().create(dupGroupName); }
@java.lang.Override public void start() { try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema.open(); try { final com.google.gerrit.reviewdb.client.CurrentSchemaVersion currentVer = getSchemaVersion(db); final int expectedVer = com.google.gerrit.server.schema.SchemaVersion.getBinaryVersion(); if (currentVer == null) { throw new com.google.inject.ProvisionException((("Schema not yet initialized." + (" Run init to initialize the schema:\n" + "$ java -jar gerrit.war init -d ")) + (site.site_path.toAbsolutePath()))); } if ((currentVer.versionNbr) < expectedVer) { throw new com.google.inject.ProvisionException((((((((("Unsupported schema version " + (currentVer.versionNbr)) + "; expected schema version ") + expectedVer) + ". Run init to upgrade:\n") + "$ java -jar ") + (site.gerrit_war.toAbsolutePath())) + " init -d ") + (site.site_path.toAbsolutePath()))); } else if ((currentVer.versionNbr) > expectedVer) { throw new com.google.inject.ProvisionException((((("Unsupported schema version " + (currentVer.versionNbr)) + "; expected schema version ") + expectedVer) + ". Downgrade is not supported.")); } } finally { db.close(); } } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.inject.ProvisionException("Cannot read schema_version", e); } }

@java.lang.Override public com.google.gerrit.extensions.api.changes.ChangeApi create(com.google.gerrit.extensions.common.ChangeInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.common.ChangeInfo out = createChange.apply(TopLevelResource.INSTANCE, in).value(); return api.create(changes.parse(new com.google.gerrit.reviewdb.client.Change.Id(out._number))); } catch (com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.project.InvalidChangeOperationException | com.google.gerrit.server.git.UpdateException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot create change", e); } }
@java.lang.Override protected void configure() { bind(new com.google.inject.TypeLiteral<com.google.common.base.Optional<com.ericsson.gerrit.plugins.highavailability.peers.PeerInfo>>() {}).toProvider(com.ericsson.gerrit.plugins.highavailability.peers.PluginConfigPeerInfoProvider.class); }

private boolean isMember(com.google.gerrit.reviewdb.client.AccountGroup parent, com.google.gerrit.common.data.GroupDescription.Basic member) throws com.google.gwtorm.server.OrmException { return (dbProvider.get().accountGroupById().get(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parent.getId(), member.getGroupUUID()))) != null; }
@org.junit.Test public void systemGroupsCreated_rest() throws java.io.IOException { com.google.gerrit.acceptance.RestSession session = new com.google.gerrit.acceptance.RestSession(server, admin); com.google.gerrit.acceptance.RestResponse r = session.get("/groups/"); com.google.gson.Gson gson = new com.google.gson.Gson(); java.util.Map<java.lang.String, com.google.gerrit.acceptance.rest.group.GroupInfo> result = gson.fromJson(r.getReader(), new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.acceptance.rest.group.GroupInfo>>() {}.getType()); java.util.Set<java.lang.String> names = result.keySet(); assertTrue(names.contains("Administrators")); assertTrue(names.contains("Anonymous Users")); assertTrue(names.contains("Non-Interactive Users")); assertTrue(names.contains("Project Owners")); assertTrue(names.contains("Registered Users")); }


@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(createEmptyCommit = false) public void submitToEmptyRepo() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); assertThat(getRemoteHead().getId()).isEqualTo(change.getCommitId()); }
private java.util.List<com.google.gerrit.server.project.ChangeControl> changeFromNotesFactory(java.lang.String id, com.google.gerrit.server.CurrentUser currentUser) throws com.google.gerrit.sshd.BaseCommand.UnloggedFailure, com.google.gwtorm.server.OrmException { return changeNotesFactory.create(db, parseId(id)).stream().map(( changeNote) -> controlForChange(changeNote, currentUser)).filter(( changeControl) -> changeControl.isPresent()).map(( changeControl) -> changeControl.get()).collect(java.util.stream.Collectors.toList()); }



private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> values, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById m : values) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = m.getIncludeUUID(); java.lang.String groupName = groupBackend.get(groupUuid).getName(); com.google.gerrit.reviewdb.client.AccountGroup.Id targetGroupId = m.getGroupId(); java.lang.String targetGroupName = getGroupName(targetGroupId); descriptions.add(java.text.MessageFormat.format("group {0}/{1}, group {2}/{3}", groupUuid, groupName, targetGroupId, targetGroupName)); } logOrmException(header, me, descriptions, e); }
public void testChangeRefReplicated() throws com.google.gwtorm.server.OrmException, java.net.URISyntaxException { com.google.gerrit.reviewdb.client.Change expectedChange = new com.google.gerrit.reviewdb.client.Change(null, null, null, null, null); reset(changeAccessMock); expect(changeAccessMock.get(anyObject(Change.Id.class))).andReturn(expectedChange); replay(changeAccessMock); reset(changeHooksMock); com.googlesource.gerrit.plugins.replication.RefReplicatedEvent expectedEvent = new com.googlesource.gerrit.plugins.replication.RefReplicatedEvent("someProject", "refs/changes/1/1/1", "someHost", com.googlesource.gerrit.plugins.replication.ReplicationState.RefPushResult.FAILED); changeHooksMock.postEvent(eq(expectedChange), com.googlesource.gerrit.plugins.replication.RefReplicatedEventEquals.eqEvent(expectedEvent), anyObject(com.google.gerrit.reviewdb.server.ReviewDb.class)); expectLastCall().once(); replay(changeHooksMock); gitUpdateProcessing.onRefReplicatedToOneNode("someProject", "refs/changes/1/1/1", new org.eclipse.jgit.transport.URIish("git://someHost/someProject.git"), RefPushResult.FAILED); verify(changeHooksMock); }

@java.lang.Override protected void onLoad() { super.onLoad(); Util.ACCOUNT_SVC.myAgreements(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.AgreementInfo>(this) { @java.lang.Override public void preDisplay(final com.google.gerrit.common.data.AgreementInfo result) { agreements.display(result); } }); }
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.index.ChangeIndex.class).to(com.google.gerrit.lucene.LuceneChangeIndex.class); listener().to(com.google.gerrit.lucene.LuceneChangeIndex.class); }
private static <T> com.google.common.collect.ImmutableSet<T> logIfNotUnique(com.google.gerrit.server.group.db.GroupBundle.Source source, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, java.lang.Iterable<T> iterable, java.util.Comparator<T> comparator, java.lang.Class<T> clazz) { java.util.List<T> list = com.google.common.collect.Streams.stream(iterable).sorted(comparator).collect(java.util.stream.Collectors.toList()); com.google.common.collect.ImmutableSet<T> set = com.google.common.collect.ImmutableSet.copyOf(list); if ((set.size()) != (list.size())) { com.google.gerrit.server.group.db.GroupBundle.log.warn("group {} in {} has duplicate {} entities: {}", uuid, source, clazz.getSimpleName(), iterable); } return set; }

public static com.google.gerrit.client.rpc.RestApi edit(int id) { return com.google.gerrit.client.changes.ChangeApi.change(id).view("edit"); }
private void doSave() { project.setDescription(descTxt.getText().trim()); project.setUseContributorAgreements(useContributorAgreements.getValue()); project.setUseSignedOffBy(useSignedOffBy.getValue()); project.setRequireChangeID(requireChangeID.getValue()); if ((submitType.getSelectedIndex()) >= 0) { project.setSubmitType(Project.SubmitType.valueOf(submitType.getValue(submitType.getSelectedIndex()))); } enableForm(false, false, false); saveProject.setEnabled(false); Util.PROJECT_SVC.changeProjectSettings(project, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.common.data.ProjectDetail>() { public void onSuccess(final com.google.gerrit.common.data.ProjectDetail result) { enableForm(result.canModifyAgreements, result.canModifyDescription, result.canModifyMergeType); display(result); } }); }
@java.lang.Override public org.eclipse.jgit.lib.Repository createRepository(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.git.RepositoryCaseMismatchException, org.eclipse.jgit.errors.RepositoryNotFoundException { org.eclipse.jgit.lib.Repository repo = createRepository(basePath, name); if ((noteDbPath) != null) { createRepository(noteDbPath, name); } return repo; }
public org.eclipse.jgit.lib.PersonIdent newCommitterIdent(final java.util.Date when, final java.util.TimeZone tz) { final com.google.gerrit.reviewdb.Account ua = getAccount(); java.lang.String name = ua.getFullName(); java.lang.String email = ua.getPreferredEmail(); if ((email == null) || (email.isEmpty())) { java.lang.String user = getUserName(); if ((user == null) || (user.isEmpty())) { user = "account-" + (ua.getId().toString()); } java.lang.String host; if ((canonicalUrl.get()) != null) { try { host = new java.net.URL(canonicalUrl.get()).getHost(); } catch (java.net.MalformedURLException e) { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } } else { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } email = (user + "@") + host; } if ((name == null) || (name.isEmpty())) { final int at = email.indexOf('@'); if (0 < at) { name = email.substring(0, at); } else { name = "Anonymous Coward"; } } return new org.eclipse.jgit.lib.PersonIdent(name, email, when, tz); }
void showUpdates(com.google.gerrit.client.info.ChangeInfo newInfo) { if ((!(isAttached())) || (newInfo.updated().equals(lastDisplayedUpdate))) { return; } com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> om = changeInfo.messages(); com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> nm = newInfo.messages(); if (om == null) { om = com.google.gwt.core.client.JsArray.createArray().cast(); } if (nm == null) { nm = com.google.gwt.core.client.JsArray.createArray().cast(); } if ((om.length()) == (nm.length())) { return; } if ((updateAvailable) == null) { updateAvailable = new com.google.gerrit.client.change.UpdateAvailableBar() { @java.lang.Override void onShow() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId)); } @java.lang.Override void onIgnore(java.sql.Timestamp newTime) { lastDisplayedUpdate = newTime; } }; } updateAvailable.set(com.google.gerrit.client.rpc.Natives.asList(nm).subList(om.length(), nm.length()), newInfo.updated()); if (!(updateAvailable.isAttached())) { add(updateAvailable); } }
@java.lang.Override public void onLoad() { if ((info) == null) { initUI(); } super.onLoad(); display(com.google.gerrit.client.Gerrit.getUserAccount()); tabs.selectTab(tabTokens.indexOf(initialTabToken)); Util.ACCOUNT_SVC.myAccount(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.reviewdb.Account>() { public void onSuccess(final com.google.gerrit.client.reviewdb.Account result) { if (isAttached()) { display(result); } } }); }


private com.google.inject.Injector createSysInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(com.google.gerrit.server.schema.SchemaVersionCheck.module()); modules.add(new com.google.gerrit.pgm.util.LogFileCompressor.Module()); modules.add(new com.google.gerrit.server.git.WorkQueue.Module()); modules.add(new com.google.gerrit.common.ChangeHookRunner.Module()); modules.add(new com.google.gerrit.server.git.ReceiveCommitsExecutorModule()); modules.add(cfgInjector.getInstance(com.google.gerrit.server.config.GerritGlobalModule.class)); modules.add(new com.google.gerrit.ehcache.EhcachePoolImpl.Module()); modules.add(new com.google.gerrit.server.mail.SmtpEmailSender.Module()); modules.add(new com.google.gerrit.server.mail.SignedTokenEmailTokenVerifier.Module()); modules.add(new com.google.gerrit.server.git.PushReplication.Module()); if (httpd) { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.httpd.HttpCanonicalWebUrlProvider.class; } }); } else { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.server.config.CanonicalWebUrlProvider.class; } }); } if (!(slave)) { modules.add(new com.google.gerrit.server.config.MasterNodeStartup()); } return cfgInjector.createChildInjector(modules); }

@com.google.gwt.uibinder.client.UiHandler("deleteChange") void onDeleteChange(@java.lang.SuppressWarnings("unused") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteChange())) { com.google.gerrit.client.change.ChangeActions.delete(changeId, deleteChange); } }
public java.util.Optional<com.google.gerrit.server.group.InternalGroup> getLoadedGroup() { checkLoaded(); return loadedGroup; }
public final com.google.gerrit.gpg.CheckResult check(org.eclipse.jgit.transport.PushCertificate cert) { if ((cert.getNonceStatus()) != (org.eclipse.jgit.transport.PushCertificate.NonceStatus.OK)) { return new com.google.gerrit.gpg.CheckResult("Invalid nonce"); } java.util.List<java.lang.String> problems = new java.util.ArrayList<>(); try { org.bouncycastle.openpgp.PGPSignature sig = readSignature(cert); if (sig != null) { org.eclipse.jgit.lib.Repository repo = getRepository(); try (com.google.gerrit.gpg.PublicKeyStore store = new com.google.gerrit.gpg.PublicKeyStore(repo)) { checkSignature(sig, cert, store.get(sig.getKeyID()), problems); checkCustom(repo, problems); } finally { if (shouldClose(repo)) { repo.close(); } } } else { problems.add("Invalid signature format"); } } catch (org.bouncycastle.openpgp.PGPException | java.io.IOException e) { java.lang.String msg = "Internal error checking push certificate"; com.google.gerrit.gpg.PushCertificateChecker.log.error(msg, e); problems.add(msg); } return new com.google.gerrit.gpg.CheckResult(problems); }
private static <T extends com.google.gwt.core.client.JavaScriptObject> T parseJson(com.google.gwt.http.client.Response res) throws com.google.gwt.json.client.JSONException { java.lang.String json = res.getText(); if (json.startsWith(com.google.gerrit.client.rpc.RestApi.JSON_MAGIC)) { json = json.substring(com.google.gerrit.client.rpc.RestApi.JSON_MAGIC.length()); } if (json.isEmpty()) { throw new com.google.gwt.json.client.JSONException("response was empty"); } return com.google.gerrit.client.rpc.RestApi.cast(com.google.gwt.json.client.JSONParser.parseStrict(json)); }
void createOrEditFileComment() { if (!(com.google.gerrit.client.Gerrit.isSignedIn())) { com.google.gerrit.client.Gerrit.doSignIn(parent.getToken()); return; } if (boxes.isEmpty()) { com.google.gerrit.client.changes.CommentInfo info = com.google.gerrit.client.changes.CommentInfo.createFile(path, parent.getStoredSideFromDisplaySide(side), null, null); addFileComment(parent.addDraftBox(info, side)); } else { com.google.gerrit.client.diff.CommentBox box = boxes.get(((boxes.size()) - 1)); if (box instanceof com.google.gerrit.client.diff.DraftBox) { ((com.google.gerrit.client.diff.DraftBox) (box)).setEdit(true); } else { addFileComment(((com.google.gerrit.client.diff.PublishedBox) (box)).addReplyBox()); } } }

@org.junit.Test public void retrieveFilesInEdit() throws java.lang.Exception { assertEquals(RefUpdate.Result.NEW, modifier.createEdit(change, ps)); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); assertEquals(RefUpdate.Result.FORCED, modifier.modifyFile(edit.get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW)); EditInfo info = toEditInfo(true); assertEquals(2, info.files.size()); java.util.List<java.lang.String> l = com.google.common.collect.Lists.newArrayList(info.files.keySet()); assertEquals("/COMMIT_MSG", l.get(0)); assertEquals("foo", l.get(1)); }


private void display(com.google.gerrit.client.info.AccountPreferencesInfo p) { showSiteHeader.setValue(p.showSiteHeader()); useFlashClipboard.setValue(p.useFlashClipboard()); copySelfOnEmails.setValue(p.copySelfOnEmail()); setListBox(maximumPageSize, com.google.gerrit.client.account.DEFAULT_PAGESIZE, p.changesPerPage()); setListBox(dateFormat, AccountGeneralPreferences.DateFormat.STD, p.dateFormat()); setListBox(timeFormat, AccountGeneralPreferences.TimeFormat.HHMM_12, p.timeFormat()); relativeDateInChangeTable.setValue(p.relativeDateInChangeTable()); sizeBarInChangeTable.setValue(p.sizeBarInChangeTable()); legacycidInChangeTable.setValue(p.legacycidInChangeTable()); muteCommonPathPrefixes.setValue(p.muteCommonPathPrefixes()); setListBox(reviewCategoryStrategy, AccountGeneralPreferences.ReviewCategoryStrategy.NONE, p.reviewCategoryStrategy()); setListBox(diffView, AccountGeneralPreferences.DiffView.SIDE_BY_SIDE, p.diffView()); display(p.my()); }
@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException, javax.servlet.ServletException { rsp.setContentType("text/plain"); rsp.setCharacterEncoding("UTF-8"); java.lang.String path = req.getPathInfo(); java.lang.String accountId = path.substring(((path.lastIndexOf('/')) + 1)); com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(accountId); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true); index(id); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.logger.error("Unable to update account index", e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }
private java.util.Map<java.lang.String, com.google.gerrit.reviewdb.client.PatchSetApproval> scanLabels(com.google.gerrit.server.change.RevisionResource rsrc, java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> del) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.LabelTypes labelTypes = rsrc.getControl().getLabelTypes(); java.util.Map<java.lang.String, com.google.gerrit.reviewdb.client.PatchSetApproval> current = com.google.common.collect.Maps.newHashMap(); for (com.google.gerrit.reviewdb.client.PatchSetApproval a : db.patchSetApprovals().byPatchSetUser(rsrc.getPatchSet().getId(), rsrc.getAccountId())) { if (ApprovalCategory.SUBMIT_ID.equals(a.getCategoryId().get())) { continue; } com.google.gerrit.common.data.LabelType lt = labelTypes.byId(a.getCategoryId().get()); if (lt != null) { current.put(lt.getName(), a); } else { del.add(a); } } return current; }
@java.lang.Override protected void configureServlets() { com.googlesource.gerrit.plugins.lfs.LfsBackend backend = config.getEnum("backend", LfsBackend.FS); switch (backend) { case FS : serveRegex(com.googlesource.gerrit.plugins.lfs.URL_REGEX).with(com.googlesource.gerrit.plugins.lfs.fs.LfsFsApiServlet.class); bind(com.googlesource.gerrit.plugins.lfs.fs.LocalLargeFileRepository.class); serve((("/" + (CONTENT_PATH)) + "/*")).with(com.googlesource.gerrit.plugins.lfs.fs.LfsFsContentServlet.class); break; case S3 : serveRegex(com.googlesource.gerrit.plugins.lfs.URL_REGEX).with(com.googlesource.gerrit.plugins.lfs.s3.LfsS3ApiServlet.class); bind(com.googlesource.gerrit.plugins.lfs.s3.S3LargeFileRepository.class); break; default : throw new java.lang.RuntimeException(("Unsupported backend: " + backend)); } }
@java.lang.Override public java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> getKnownGroups() { findIncludedGroup(java.util.Collections.<com.google.gerrit.reviewdb.client.AccountGroup.UUID>emptySet()); return com.google.common.collect.Sets.newHashSet(includes); }

@org.junit.Test public void testOwnerGroupsForStartWithFilter() { java.lang.String[] ownerGroups1 = new java.lang.String[]{ "group1" }; java.lang.String[] ownerGroups2 = new java.lang.String[]{ "group2" }; java.lang.String[] ownerGroups3 = new java.lang.String[]{ "group3" }; configureOwnerGroups("*", com.google.common.collect.Lists.newArrayList(ownerGroups1)); configureOwnerGroups("somePath/*", com.google.common.collect.Lists.newArrayList(ownerGroups2)); configureOwnerGroups("somePath/somePath/*", com.google.common.collect.Lists.newArrayList(ownerGroups3)); assertThat(repoCfg.getOwnerGroups(new com.google.gerrit.reviewdb.client.Project.NameKey("someProject"))).isEqualTo(ownerGroups1); assertThat(repoCfg.getOwnerGroups(new com.google.gerrit.reviewdb.client.Project.NameKey("somePath/someProject"))).isEqualTo(ownerGroups2); assertThat(repoCfg.getOwnerGroups(new com.google.gerrit.reviewdb.client.Project.NameKey("somePath/somePath/someProject"))).isEqualTo(ownerGroups3); }
private java.util.concurrent.Callable<com.google.gerrit.httpd.raw.ResourceServlet.Resource> newLoader(final java.nio.file.Path p) { return new java.util.concurrent.Callable<com.google.gerrit.httpd.raw.ResourceServlet.Resource>() { @java.lang.Override public com.google.gerrit.httpd.raw.ResourceServlet.Resource call() throws java.io.IOException { return new com.google.gerrit.httpd.raw.ResourceServlet.Resource(java.nio.file.Files.getLastModifiedTime(p), com.google.gerrit.httpd.raw.ResourceServlet.contentType(p.toString()), java.nio.file.Files.readAllBytes(p)); } }; }
public com.google.gwtjsonrpc.client.VoidResult run(final com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.Account.Id me = getAccountId(); final java.util.Set<com.google.gerrit.reviewdb.Change.Id> existing = currentUser.get().getStarredChanges(); java.util.List<com.google.gerrit.reviewdb.StarredChange> add = new java.util.ArrayList<com.google.gerrit.reviewdb.StarredChange>(); java.util.List<com.google.gerrit.reviewdb.StarredChange.Key> remove = new java.util.ArrayList<com.google.gerrit.reviewdb.StarredChange.Key>(); if ((req.getAddSet()) != null) { for (final com.google.gerrit.reviewdb.Change.Id id : req.getAddSet()) { if (!(existing.contains(id))) { add.add(new com.google.gerrit.reviewdb.StarredChange(new com.google.gerrit.reviewdb.StarredChange.Key(me, id))); } } } if ((req.getRemoveSet()) != null) { for (final com.google.gerrit.reviewdb.Change.Id id : req.getRemoveSet()) { remove.add(new com.google.gerrit.reviewdb.StarredChange.Key(me, id)); } } db.starredChanges().insert(add); db.starredChanges().deleteKeys(remove); return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }
@java.lang.Override protected void configureServlets() { install(new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { factory(AddBranch.Factory.class); factory(AddRefRight.Factory.class); factory(ChangeProjectSettings.Factory.class); factory(DeleteBranches.Factory.class); factory(DeleteRefRights.Factory.class); factory(ListBranches.Factory.class); factory(VisibleProjects.Factory.class); factory(ProjectDetailFactory.Factory.class); } }); rpc(com.google.gerrit.httpd.rpc.project.ProjectAdminServiceImpl.class); }

@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in progress"); } if ((change.getStatus()) != (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is already work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
public com.googlesource.gerrit.plugins.its.base.validation.ItsAssociationPolicy getItsAssociationPolicy() { return gerritConfig.getEnum("commentlink", getCommentLinkName(), "association", ItsAssociationPolicy.OPTIONAL); }
@org.junit.Test public void revert() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).submit(); ChangeInfo revertChange = gApi.changes().id(r.getChangeId()).revert().get(); java.util.List<com.google.gerrit.extensions.common.ChangeMessageInfo> sourceMessages = new java.util.ArrayList(gApi.changes().id(r.getChangeId()).get().messages); assertThat(sourceMessages).hasSize(4); java.lang.String expectedMessage = java.lang.String.format("Created a revert of this change as %s", revertChange.changeId); assertThat(sourceMessages.get(3).message).isEqualTo(expectedMessage); assertThat(revertChange.messages).hasSize(1); assertThat(revertChange.messages.iterator().next().message).isEqualTo("Uploaded patch set 1."); }

boolean hasPrev() { return hasPrev; }
public abstract com.google.gerrit.server.patch.Text aText();
private void renderLinks() { for (com.google.gerrit.client.ui.InlineHyperlink link : getLinks()) { linkPanel.add(link); } }

private java.util.concurrent.Callable<java.lang.Void> reindexProject(final com.google.gerrit.server.index.ChangeIndexer indexer, final com.google.gerrit.reviewdb.client.Project.NameKey project, final com.google.gerrit.server.git.MultiProgressMonitor.Task done, final com.google.gerrit.server.git.MultiProgressMonitor.Task failed, final java.io.PrintWriter verboseWriter) { return new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { com.google.common.collect.Multimap<org.eclipse.jgit.lib.ObjectId, com.google.gerrit.server.query.change.ChangeData> byId = com.google.common.collect.ArrayListMultimap.create(); org.eclipse.jgit.lib.Repository repo = null; com.google.gerrit.reviewdb.server.ReviewDb db = null; try { repo = repoManager.openRepository(project); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(com.google.gerrit.server.index.ALL); db = schemaFactory.open(); for (com.google.gerrit.reviewdb.client.Change c : db.changes().byProject(project)) { org.eclipse.jgit.lib.Ref r = refs.get(c.currentPatchSetId().toRefName()); if (r != null) { byId.put(r.getObjectId(), changeDataFactory.create(db, c)); } } new com.google.gerrit.server.index.ChangeBatchIndexer.ProjectIndexer(indexer, byId, repo, done, failed, verboseWriter).call(); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException rnfe) { com.google.gerrit.server.index.ChangeBatchIndexer.log.error(rnfe.getMessage()); } finally { if (db != null) { db.close(); } if (repo != null) { repo.close(); } } return null; } }; }
@org.junit.Test public void rebuildEmptySite() throws java.lang.Exception { initSite(); com.google.common.io.Files.asCharSink(new java.io.File(sitePath.toString(), "etc/gerrit.config"), java.nio.charset.StandardCharsets.UTF_8, FileWriteMode.APPEND).write(com.google.gerrit.server.notedb.ConfigNotesMigration.allEnabledConfig().toText()); com.google.gerrit.acceptance.pgm.RebuildNoteDbIT.runGerrit("RebuildNoteDb", "-d", sitePath.toString(), "--show-stack-trace"); }
@org.junit.Before public void setUp() throws java.lang.Exception { group1 = group("users1"); group2 = group("users2"); group3 = group("users3"); user1 = user("user1", "First1 Last1", group1); user2 = user("user2", "First2 Last2", group2); user3 = user("user3", "First3 Last3", group1, group2); user4 = user("jdoe", "John Doe", "JDOE"); }
private void fireEvent(com.google.gerrit.reviewdb.client.Branch.NameKey branchName, final com.google.gerrit.server.events.RefEvent event) { dispatcher.fireEvent(branchName, event); }
@java.lang.Override public void visit(org.commonmark.node.Heading node) { outputNamedAnchor = false; java.lang.String tag = "h" + (node.getLevel()); html.open(tag); java.lang.String id = toc.idFromHeader(node); if (id != null) { html.open("a").attribute("class", "h").attribute("name", id).attribute("href", ("#" + id)).open("span").close("span").close("a"); } visitChildren(node); html.close(tag); outputNamedAnchor = true; }
@java.lang.Override protected void applyDataRowStyle(final int row) { super.applyDataRowStyle(row); final com.google.gwt.user.client.ui.HTMLTable.CellFormatter fmt = table.getCellFormatter(); fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_STAR, Gerrit.RESOURCES.css().iconCell()); for (int i = com.google.gerrit.client.changes.ChangeTable2.C_ID; i < (columns); i++) { fmt.addStyleName(row, i, Gerrit.RESOURCES.css().dataCell()); } fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_SUBJECT, Gerrit.RESOURCES.css().cSUBJECT()); fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_STATUS, Gerrit.RESOURCES.css().cSTATUS()); fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_OWNER, Gerrit.RESOURCES.css().cOWNER()); fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_LAST_UPDATE, Gerrit.RESOURCES.css().cLastUpdate()); if ((!(com.google.gerrit.client.Gerrit.isSignedIn())) || (!(com.google.gerrit.client.Gerrit.getUserAccount().getGeneralPreferences().isLegacycidInChangeTable()))) { fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_ID, Gerrit.RESOURCES.css().dataCellHidden()); } int i = com.google.gerrit.client.changes.ChangeTable2.C_SIZE; fmt.addStyleName(row, (i++), Gerrit.RESOURCES.css().cSIZE()); for (; i < (columns); i++) { fmt.addStyleName(row, i, Gerrit.RESOURCES.css().cAPPROVAL()); } }
private com.google.gerrit.client.diff.DraftBox addDraftBox(com.google.gerrit.client.changes.CommentInfo info, boolean doSave) { com.google.gerrit.client.diff.DraftBox box = new com.google.gerrit.client.diff.DraftBox(this, revision, info, commentLinkProcessor, true, doSave); addCommentBox(info, box); if (!doSave) { box.setEdit(true); } getLineBoxMapFromSide(info.side()).put(((info.line()) - 1), box); return box; }




java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Collection<com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType>> getProjectWatches() { checkLoaded(); return projectWatches; }

@org.junit.Test public void testSubmodulesParseWithSubProjectFound() throws java.lang.Exception { java.util.Map<java.lang.String, com.google.gerrit.server.util.SubmoduleSection> sectionsToReturn = new java.util.TreeMap<>(); sectionsToReturn.put("a/b", new com.google.gerrit.server.util.SubmoduleSection("ssh://localhost/a/b", "a/b", ".")); java.util.Map<java.lang.String, java.lang.String> reposToBeFound = new java.util.HashMap<>(); reposToBeFound.put("a/b", "a/b"); reposToBeFound.put("b", "b"); com.google.gerrit.reviewdb.client.Branch.NameKey superBranchNameKey = new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey("super-project"), "refs/heads/master"); com.google.gerrit.server.util.List<com.google.gerrit.reviewdb.client.SubmoduleSubscription> expectedSubscriptions = new com.google.gerrit.server.util.ArrayList(); expectedSubscriptions.add(new com.google.gerrit.reviewdb.client.SubmoduleSubscription(superBranchNameKey, new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey("a/b"), "refs/heads/master"), "a/b")); execute(superBranchNameKey, sectionsToReturn, reposToBeFound, expectedSubscriptions); }
@java.lang.Override protected void configure() { factory(ReviewerResource.Factory.class); factory(AccountInfo.Loader.Factory.class); factory(EmailReviewComments.Factory.class); factory(ChangeInserter.Factory.class); factory(PatchSetInserter.Factory.class); }



@org.junit.Test public void addReviewerToReviewableChangeByOwnerCcingSelfInNoteDb() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); forAll(( adder) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accounts.create("added", "added@example.com", "added"); addReviewer(adder, sc.changeId, sc.owner, reviewer.email, com.google.gerrit.acceptance.server.mail.CC_ON_OWN_COMMENTS, null); assertThat(sender).sent("newchange", sc).to(reviewer).cc(sc.owner, sc.reviewer).cc(sc.reviewerByEmail, sc.ccerByEmail).noOneElse(); }); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.FileResource>> views() { return views; }
void resizePaddingOnOtherSide(com.google.gerrit.client.diff.DisplaySide mySide, int line) { net.codemirror.lib.CodeMirror cm = getCmFromSide(mySide); net.codemirror.lib.CodeMirror.LineHandle handle = cm.getLineHandle(line); final com.google.gerrit.client.diff.PaddingManager.LinePaddingWidgetWrapper otherWrapper = linePaddingOnOtherSideMap.get(handle); double myChunkHeight = (cm.heightAtLine((line + 1))) - (cm.heightAtLine(((line - (otherWrapper.getChunkLength())) + 1))); com.google.gwt.dom.client.Element otherPadding = otherWrapper.getElement(); int otherPaddingHeight = otherPadding.getOffsetHeight(); net.codemirror.lib.CodeMirror otherCm = otherCm(cm); int otherLine = otherWrapper.getOtherLine(); net.codemirror.lib.CodeMirror.LineHandle other = otherCm.getLineHandle(otherLine); if (linePaddingOnOtherSideMap.containsKey(other)) { com.google.gerrit.client.diff.PaddingManager.LinePaddingWidgetWrapper myWrapper = linePaddingOnOtherSideMap.get(other); com.google.gwt.dom.client.Element myPadding = linePaddingOnOtherSideMap.get(other).getElement(); int myPaddingHeight = myPadding.getOffsetHeight(); myChunkHeight -= myPaddingHeight; double otherChunkHeight = ((otherCm.heightAtLine((otherLine + 1))) - (otherCm.heightAtLine(((otherLine - (myWrapper.getChunkLength())) + 1)))) - otherPaddingHeight; double delta = myChunkHeight - otherChunkHeight; if (delta > 0) { if (myPaddingHeight != 0) { myPadding.getStyle().setHeight(((double) (0)), Unit.PX); myWrapper.getWidget().changed(); } if (otherPaddingHeight != delta) { otherPadding.getStyle().setHeight(delta, Unit.PX); otherWrapper.getWidget().changed(); } } else { if (myPaddingHeight != (-delta)) { myPadding.getStyle().setHeight((-delta), Unit.PX); myWrapper.getWidget().changed(); } if (otherPaddingHeight != 0) { otherPadding.getStyle().setHeight(((double) (0)), Unit.PX); otherWrapper.getWidget().changed(); } } } else if (otherPaddingHeight != myChunkHeight) { otherPadding.getStyle().setHeight(myChunkHeight, Unit.PX); otherWrapper.getWidget().changed(); } }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(account, com.google.common.collect.ImmutableSet.<com.google.gerrit.reviewdb.client.AccountGroup.UUID>of(), com.google.common.collect.ImmutableSet.<com.google.gerrit.reviewdb.client.AccountExternalId>of(), com.google.common.collect.ImmutableSet.<com.google.gerrit.reviewdb.client.AccountProjectWatch>of()); }
@java.lang.Override void render(com.google.gerrit.client.diff.DiffInfo diff) { super.render(); com.google.gerrit.client.diff.LineMapper mapper = getLineMapper(); chunks = new java.util.ArrayList(); padding = new java.util.ArrayList(); paddingDivs = new java.util.ArrayList(); java.lang.String diffColor = (((diff.metaA()) == null) || ((diff.metaB()) == null)) ? SideBySideTable.style.intralineBg() : SideBySideTable.style.diff(); for (com.google.gerrit.client.diff.DiffInfo.Region current : com.google.gerrit.client.rpc.Natives.asList(diff.content())) { if ((current.ab()) != null) { mapper.appendCommon(current.ab().length()); } else if ((current.skip()) > 0) { mapper.appendCommon(current.skip()); } else if (current.common()) { mapper.appendCommon(current.b().length()); } else { render(current, diffColor); } } if (paddingDivs.isEmpty()) { paddingDivs = null; } }
public void setPosition(int offsetWidth, int offsetHeight) { if ((preferredPopupWidth) == (-1)) { preferredPopupWidth = offsetWidth; } int top = (grid.getAbsoluteTop()) - 50; int left = 5 + (java.lang.Math.max(((grid.getAbsoluteLeft()) + (grid.getOffsetWidth())), ((watchesTab.getAbsoluteLeft()) + (watchesTab.getOffsetWidth())))); if ((top + offsetHeight) > (com.google.gwt.user.client.Window.getClientHeight())) { top = (com.google.gwt.user.client.Window.getClientHeight()) - offsetHeight; } if ((left + offsetWidth) > (com.google.gwt.user.client.Window.getClientWidth())) { left = (com.google.gwt.user.client.Window.getClientWidth()) - offsetWidth; } if (top < 0) { sp.setHeight((((sp.getOffsetHeight()) + top) + "px")); top = 0; } if (left < 0) { sp.setWidth((((sp.getOffsetWidth()) + left) + "px")); left = 0; } popup.setPopupPosition(left, top); }
@org.junit.Before public void setTimeForTesting() { systemTimeZone = java.lang.System.setProperty("user.timezone", "US/Eastern"); clockStepMs = java.util.concurrent.TimeUnit.MILLISECONDS.convert(1, java.util.concurrent.TimeUnit.SECONDS); final java.util.concurrent.atomic.AtomicLong clockMs = new java.util.concurrent.atomic.AtomicLong(new org.joda.time.DateTime(2009, 9, 30, 17, 0, 0).getMillis()); org.joda.time.DateTimeUtils.setCurrentMillisProvider(new org.joda.time.DateTimeUtils.MillisProvider() { @java.lang.Override public long getMillis() { return clockMs.getAndAdd(clockStepMs); } }); }
public static java.nio.file.Path getDeveloperBuckOut() throws java.io.FileNotFoundException { java.lang.Class<com.google.gerrit.launcher.GerritLauncher> self = com.google.gerrit.launcher.GerritLauncher.class; java.net.URL u = self.getResource(((self.getSimpleName()) + ".class")); if (u == null) { throw new java.io.FileNotFoundException(("Cannot find class " + (self.getName()))); } else if ("jar".equals(u.getProtocol())) { java.lang.String p = u.getPath(); try { u = new java.net.URL(p.substring(0, p.indexOf('!'))); } catch (java.net.MalformedURLException e) { java.io.FileNotFoundException fnfe = new java.io.FileNotFoundException(("Not a valid jar file: " + u)); fnfe.initCause(e); throw fnfe; } } if (!("file".equals(u.getProtocol()))) { throw new java.io.FileNotFoundException(("Cannot find extract path from " + u)); } java.nio.file.Path dir = java.nio.file.Paths.get(u.getPath()); while (!(com.google.gerrit.launcher.GerritLauncher.name(dir).equals("buck-out"))) { java.nio.file.Path parent = dir.getParent(); if ((parent == null) || (parent.equals(dir))) { throw new java.io.FileNotFoundException(("Cannot find buck-out from " + u)); } dir = parent; } return dir; }
private void configureMainSection() { ui.header("Main section"); java.lang.String sharedDir = promptAndSetString("Shared directory", com.ericsson.gerrit.plugins.highavailability.MAIN_SECTION, com.ericsson.gerrit.plugins.highavailability.SHARED_DIRECTORY_KEY, null); if (!(com.google.common.base.Strings.isNullOrEmpty(sharedDir))) { java.nio.file.Path shared = site.site_path.resolve(sharedDir); com.google.gerrit.common.FileUtil.mkdirsOrDie(shared, ("cannot create " + shared)); } }
@java.lang.Override public java.lang.String getImageUrl() { return ("plugins/" + (pluginName)) + "/static/readme.png"; }

public java.util.List<com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult> doQuery(java.lang.String q) throws com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocQueryException { if (((parser) == null) || ((searcher) == null)) { throw new com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocQueryException("Documentation search not available"); } try { org.apache.lucene.search.Query query = parser.parse(q); org.apache.lucene.search.TopDocs results = searcher.search(query, java.lang.Integer.MAX_VALUE); org.apache.lucene.search.ScoreDoc[] hits = results.scoreDocs; int totalHits = results.totalHits; java.util.List<com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult> out = com.google.common.collect.Lists.newArrayListWithCapacity(totalHits); for (int i = 0; i < totalHits; i++) { com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult result = new com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult(); org.apache.lucene.document.Document doc = searcher.doc(hits[i].doc); result.url = doc.get(Constants.URL_FIELD); result.title = doc.get(Constants.TITLE_FIELD); out.add(result); } return out; } catch (java.io.IOException | org.apache.lucene.queryparser.classic.ParseException e) { throw new com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocQueryException(e); } }

private static java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> getGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUuid).toList(); if ((accountGroups.size()) == 1) { return java.util.Optional.of(com.google.common.collect.Iterables.getOnlyElement(accountGroups)); } else if (accountGroups.isEmpty()) { return java.util.Optional.empty(); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException(("Duplicate group UUID " + groupUuid)); } }
public static java.lang.String getPluginName(java.io.File srcFile) throws java.io.IOException { return com.google.common.base.Objects.firstNonNull(com.google.gerrit.server.plugins.PluginLoader.getGerritPluginName(srcFile), com.google.gerrit.server.plugins.PluginLoader.nameOf(srcFile)).toLowerCase(); }
@java.lang.Override public void rebase(com.google.gerrit.extensions.api.changes.RebaseInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { rebase.apply(change, in); } catch (com.google.gerrit.common.errors.EmailException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.update.UpdateException | java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot rebase change", e); } }

private void initEditor(com.google.gerrit.client.rpc.HttpResponse<com.google.gerrit.client.rpc.NativeString> file) { net.codemirror.mode.ModeInfo mode = null; java.lang.String content = ""; if (file != null) { content = file.getResult().asString(); if (prefs.syntaxHighlighting()) { mode = net.codemirror.mode.ModeInfo.findMode(file.getContentType(), path); } } cm = net.codemirror.lib.CodeMirror.create(editor, net.codemirror.lib.Configuration.create().set("value", content).set("readOnly", false).set("cursorBlinkRate", 0).set("cursorHeight", 0.85).set("lineNumbers", true).set("tabSize", prefs.tabSize()).set("lineWrapping", false).set("scrollbarStyle", "overlay").set("styleSelectedText", true).set("showTrailingSpace", true).set("keyMap", "default").set("theme", prefs.theme().name().toLowerCase()).set("mode", (mode != null ? mode.mode() : null))); cm.addKeyMap(net.codemirror.lib.KeyMap.create().on("Cmd-S", save()).on("Ctrl-S", save())); }
void insert(org.apache.lucene.document.Document doc) throws java.io.IOException { writer.addDocument(doc); }
private java.lang.String getGroupName(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { return groupCache.get(groupId).map(InternalGroup::getName).orElse(("Deleted group " + groupId)); }
@java.lang.Override public org.parboiled.Rule[] blockPluginRules() { return new org.parboiled.Rule[]{ toc() }; }
private com.google.gwt.user.client.ui.Anchor getDownloadLink() { boolean isCommitMessage = Patch.COMMIT_MSG.equals(script.getNewName()); if ((isCommitMessage || (((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.A)) && (0 >= (script.getA().size())))) || (((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.B)) && (0 >= (script.getB().size())))) { return null; } com.google.gerrit.reviewdb.client.Patch.Key key = ((idSideA) == null) ? patchKey : new com.google.gerrit.reviewdb.client.Patch.Key(idSideA, patchKey.get()); java.lang.String sideURL = ((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.A)) ? "1" : "0"; final java.lang.String base = (com.google.gwt.core.client.GWT.getHostPageBaseURL()) + "cat/"; final com.google.gwt.user.client.ui.Anchor anchor = new com.google.gwt.user.client.ui.Anchor(PatchUtil.C.download()); anchor.setHref((((base + (com.google.gwtorm.client.KeyUtil.encode(key.toString()))) + "^") + sideURL)); return anchor; }
@org.junit.Test public void pushNewPatchSetForMasterWithApprovals() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo("refs/for/master"); r.assertOkStatus(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, "b.txt", "anotherContent", r.getChangeId()); r = push.to("refs/for/master/%l=Code-Review+2"); ChangeInfo ci = get(r.getChangeId()); LabelInfo cr = ci.labels.get("Code-Review"); assertThat(com.google.common.collect.Iterables.getLast(ci.messages).message).isEqualTo("Uploaded patch set 2: Code-Review+2."); assertThatUserIsOnlyReviewer(ci, admin); assertThat(cr.all).hasSize(1); assertThat(cr.all.get(0).name).isEqualTo("Administrator"); assertThat(cr.all.get(0).value).isEqualTo(2); }

@java.lang.Override public void onFailure(final java.lang.Throwable caught) { cbox.setEnabled(true); info.getWatch().setNotify(type, oldVal); cbox.setValue(oldVal); super.onFailure(caught); }

com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create(com.google.gerrit.extensions.client.SubmitType submitType, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.server.git.MergeOp.CommitStatus commits, com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw, com.google.gerrit.server.IdentifiedUser caller, com.google.gerrit.server.git.MergeTip mergeTip, org.eclipse.jgit.lib.ObjectInserter inserter, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevFlag canMergeFlag, com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Set<org.eclipse.jgit.revwalk.RevCommit> alreadyAccepted, java.lang.String submissionId);
private static com.google.gitiles.Paginator newPaginator(org.eclipse.jgit.lib.Repository repo, com.google.gitiles.GitilesView view, com.google.gitiles.GitilesAccess access) throws java.io.IOException { if (view == null) { return null; } org.eclipse.jgit.revwalk.RevWalk walk = null; try { walk = com.google.gitiles.LogServlet.newWalk(repo, view, access); } catch (org.eclipse.jgit.errors.IncorrectObjectTypeException e) { return null; } com.google.common.base.Optional<org.eclipse.jgit.lib.ObjectId> start; try { start = com.google.gitiles.LogServlet.getStart(view.getParameters(), walk.getObjectReader()); } catch (java.io.IOException e) { walk.close(); throw e; } if (start == null) { return null; } return new com.google.gitiles.Paginator(walk, com.google.gitiles.LogServlet.getLimit(view), start.orNull()); }

@java.lang.Override protected void configure() { bind(com.ericsson.gerrit.plugins.highavailability.Configuration.class).toInstance(config); bind(org.apache.http.impl.client.CloseableHttpClient.class).toProvider(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpClientProvider.class).in(Scopes.SINGLETON); }
private void parseDelete(final org.eclipse.jgit.transport.ReceiveCommand cmd) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canDelete()) { } else { com.google.gerrit.server.git.ReceiveCommits.reject(cmd, "can not delete references"); } }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.api.accounts.StatusInput input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.api.accounts.StatusInput(); } java.lang.String newStatus = input.status; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( a) -> a.setStatus(com.google.common.base.Strings.nullToEmpty(newStatus))); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } return com.google.common.base.Strings.isNullOrEmpty(account.getStatus()) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getStatus()); }

static void build(java.nio.file.Path root, java.nio.file.Path gen, java.lang.String target) throws com.google.gerrit.httpd.raw.BuckUtils.BuildFailureException, java.io.IOException { com.google.gerrit.httpd.raw.BuckUtils.log.info(("buck build " + target)); java.util.Properties properties = com.google.gerrit.httpd.raw.BuckUtils.loadBuckProperties(gen); java.lang.String buck = firstNonNull(properties.getProperty("buck"), "buck"); java.lang.ProcessBuilder proc = new java.lang.ProcessBuilder(buck, "build", target).directory(root.toFile()).redirectErrorStream(true); if (properties.containsKey("PATH")) { proc.environment().put("PATH", properties.getProperty("PATH")); } long start = com.google.gerrit.common.TimeUtil.nowMs(); java.lang.Process rebuild = proc.start(); byte[] out; try (java.io.InputStream in = rebuild.getInputStream()) { out = com.google.common.io.ByteStreams.toByteArray(in); } finally { rebuild.getOutputStream().close(); } int status; try { status = rebuild.waitFor(); } catch (java.lang.InterruptedException e) { throw new java.io.InterruptedIOException(("interrupted waiting for " + buck)); } if (status != 0) { throw new com.google.gerrit.httpd.raw.BuckUtils.BuildFailureException(out); } long time = (com.google.gerrit.common.TimeUtil.nowMs()) - start; com.google.gerrit.httpd.raw.BuckUtils.log.info(java.lang.String.format("UPDATED %s in %.3fs", target, (time / 1000.0))); }

@java.lang.Override public java.util.List<java.lang.String> queryChangeEvents(java.lang.String query) throws com.ericsson.gerrit.plugins.eventslog.MalformedQueryException, com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException { if (!(online)) { throw new com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException(); } java.util.List<java.lang.String> events = new java.util.ArrayList<>(); com.google.gerrit.reviewdb.client.Project.NameKey project = null; for (java.util.Map.Entry<java.lang.String, java.util.Collection<java.lang.String>> entry : eventsDb.getEvents(query).asMap().entrySet()) { try { project = new com.google.gerrit.reviewdb.client.Project.NameKey(entry.getKey()); if (projectControlFactory.controlFor(project, userProvider.get()).isVisible()) { events.addAll(entry.getValue()); } } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn((("Database contains a non-existing project, " + (project.get())) + ", removing project from database"), e); removeProjectEvents(project.get()); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn((("Cannot get project visibility info for " + (project.get())) + " from cache"), e); } } return events; }

@java.lang.Override public void onDialogVisible(com.google.gwtexpui.user.client.DialogVisibleEvent event) { swf.getStyle().setVisibility((event.isVisible() ? Style.Visibility.HIDDEN : Style.Visibility.VISIBLE)); }

public final java.util.List<com.google.gwtexpui.safehtml.client.FindReplace> commentlinks() { com.google.gwt.core.client.JsArray<com.google.gerrit.client.projects.ConfigInfo.CommentLinkInfo> cls = commentlinks0().values(); java.util.List<com.google.gwtexpui.safehtml.client.FindReplace> commentLinks = new java.util.ArrayList<com.google.gwtexpui.safehtml.client.FindReplace>(cls.length()); for (int i = 0; i < (cls.length()); i++) { com.google.gerrit.client.projects.ConfigInfo.CommentLinkInfo cl = cls.get(i); if (!(cl.enabled())) { continue; } if ((cl.link()) != null) { commentLinks.add(new com.google.gwtexpui.safehtml.client.LinkFindReplace(cl.match(), cl.link())); } else { commentLinks.add(new com.google.gwtexpui.safehtml.client.RawFindReplace(cl.match(), cl.html())); } } return commentLinks; }
@java.lang.Override public void run() { try { final java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(in, "ISO-8859-1")); try { java.lang.String line; while ((line = br.readLine()) != null) { com.google.gerrit.httpd.gitweb.GitWebServlet.log.error(("CGI: " + line)); } } finally { br.close(); } } catch (java.io.IOException e) { com.google.gerrit.httpd.gitweb.GitWebServlet.log.debug("Unexpected error copying stderr from CGI", e); } }


public java.util.List<com.google.gerrit.server.ReviewerStatusUpdate> reviewerUpdates() throws com.google.gwtorm.server.OrmException { if ((reviewerUpdates) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } reviewerUpdates = approvalsUtil.getReviewerUpdates(notes()); } return reviewerUpdates; }
@java.lang.Override public com.google.gerrit.reviewdb.server.ReviewDb open() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = delegate.open(); if (migration.readChanges()) { if (migration.disableChangeReviewDb()) { db = new com.google.gerrit.server.schema.NoChangesReviewDbWrapper(db); } db = new com.google.gerrit.reviewdb.server.DisallowReadFromChangesReviewDbWrapper(db); } if (groupsMigration.readFromNoteDb()) { db = new com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper(db); } return db; }

private Account.Id createAccountOutsideRequestContext(java.lang.String username, java.lang.String fullName, java.lang.String email, boolean active) throws java.lang.Exception { try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.open()) { com.google.gerrit.reviewdb.client.Account.Id id = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(username)).getAccountId(); if (email != null) { accountManager.link(id, com.google.gerrit.server.account.AuthRequest.forEmail(email)); } accountsUpdate.create().update(id, ( a) -> { a.setFullName(fullName); a.setPreferredEmail(email); a.setActive(active); }); return id; } }

@org.junit.Test public void testVerifyAuthInfo() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo("o", zeroId(), 1); assertThat(auth.verifyAuthInfo(info.authToken, "o", zeroId())).isTrue(); }

@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId rev = getRevision(); if (rev == null) { loadDefaults(); return; } org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(reader); try { com.google.gerrit.server.notedb.ChangeNotes.Parser parser = new com.google.gerrit.server.notedb.ChangeNotes.Parser(change.getId(), rev, walk); parser.parseAll(); if ((parser.status) != null) { change.setStatus(parser.status); } approvals = parser.buildApprovals(); changeMessages = parser.buildMessages(); ImmutableSetMultimap.Builder<com.google.gerrit.server.notedb.ReviewerState, com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.ImmutableSetMultimap.builder(); for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.notedb.ReviewerState> e : parser.reviewers.entrySet()) { reviewers.put(e.getValue(), e.getKey()); } this.reviewers = reviewers.build(); submitRecords = com.google.common.collect.ImmutableList.copyOf(parser.submitRecords); } finally { walk.release(); } }








void onExecute(com.google.gerrit.sshd.DispatchCommand dcmd, int exitValue, com.google.gerrit.sshd.SshSession sshSession) { final com.google.gerrit.sshd.SshScope.Context ctx = context.get(); ctx.finished = com.google.gerrit.common.TimeUtil.nowMs(); java.lang.String cmd = extractWhat(dcmd); final org.apache.log4j.spi.LoggingEvent event = log(cmd); event.setProperty(com.google.gerrit.sshd.SshLog.P_WAIT, (((ctx.started) - (ctx.created)) + "ms")); event.setProperty(com.google.gerrit.sshd.SshLog.P_EXEC, (((ctx.finished) - (ctx.started)) + "ms")); final java.lang.String status; switch (exitValue) { case BaseCommand.STATUS_CANCEL : status = "killed"; break; case BaseCommand.STATUS_NOT_FOUND : status = "not-found"; break; case BaseCommand.STATUS_NOT_ADMIN : status = "not-admin"; break; default : status = java.lang.String.valueOf(exitValue); break; } event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, status); java.lang.String peerAgent = sshSession.getPeerAgent(); if (peerAgent != null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_AGENT, peerAgent); } if ((async) != null) { async.append(event); } audit(context.get(), status, dcmd); }

@org.junit.Test public void getExternalIds() throws java.lang.Exception { java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }


@org.junit.Test public void byHashtagWithNotedb() throws java.lang.Exception { assumeTrue(notesMigration.enabled()); java.util.List<com.google.gerrit.reviewdb.client.Change> changes = setUpHashtagChanges(); java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo> results = query("hashtag:foo"); assertEquals(2, results.size()); assertResultEquals(changes.get(1), results.get(0)); assertResultEquals(changes.get(0), results.get(1)); assertResultEquals(changes.get(1), queryOne("hashtag:bar")); assertResultEquals(changes.get(1), queryOne("hashtag:\"a tag\"")); assertResultEquals(changes.get(1), queryOne("hashtag:\"a tag \"")); assertResultEquals(changes.get(1), queryOne("hashtag:\" a tag \"")); assertResultEquals(changes.get(1), queryOne("hashtag:\"#a tag\"")); assertResultEquals(changes.get(1), queryOne("hashtag:\"# #a tag\"")); }
public java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sort(java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> incoming) throws java.io.IOException { final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sorted = new java.util.ArrayList<>(); final java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> sort = new java.util.HashSet(incoming); while (!(sort.isEmpty())) { final com.google.gerrit.server.git.CodeReviewCommit n = com.google.gerrit.server.git.RebaseSorter.removeOne(sort); rw.resetRetain(canMergeFlag); rw.markStart(n); if ((initialTip) != null) { rw.markUninteresting(initialTip); } com.google.gerrit.server.git.CodeReviewCommit c; final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> contents = new java.util.ArrayList<>(); while ((c = rw.next()) != null) { if ((!(c.has(canMergeFlag))) || (!(incoming.contains(c)))) { if ((n.missing) == null) { n.setStatusCode(CommitMergeStatus.MISSING_DEPENDENCY); n.missing = new java.util.ArrayList(); } n.missing.add(c); } else { contents.add(c); } } if ((n.getStatusCode()) == (com.google.gerrit.server.git.strategy.CommitMergeStatus.MISSING_DEPENDENCY)) { continue; } sort.removeAll(contents); java.util.Collections.reverse(contents); sorted.removeAll(contents); sorted.addAll(contents); } return sorted; }
public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.reviewdb.client.Account account, com.google.gerrit.reviewdb.client.Account adder, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { fire(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), util.accountInfo(account), util.accountInfo(adder), when); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.ReviewerAdded.log.error("Couldn't fire event", e); } }
public static java.lang.String describe(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { return user.getAccountId().toString(); } if (user instanceof com.google.gerrit.server.query.change.SingleGroupUser) { return "group:" + (user.getEffectiveGroups().getKnownGroups().iterator().next().toString()); } return user.toString(); }




@org.junit.Before public void createTempDirectory() throws java.lang.Exception { sitePath = com.google.gerrit.testutil.TempFileUtil.createTempDirectory(); }



@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.server.project.DeleteBranch.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException, java.io.IOException { if (!(rsrc.getControl().controlForRef(rsrc.getBranchKey()).canDelete())) { throw new com.google.gerrit.extensions.restapi.AuthException("Cannot delete branch"); } if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("branch " + (rsrc.getBranchKey())) + " has open changes")); } try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.lib.RefUpdate.Result result; org.eclipse.jgit.lib.RefUpdate u = r.updateRef(rsrc.getRef()); u.setForceUpdate(true); refDeletionValidator.validateRefOperation(rsrc.getName(), identifiedUser.get(), u); int remainingLockFailureCalls = com.google.gerrit.server.project.DeleteBranch.MAX_LOCK_FAILURE_CALLS; for (; ;) { try { result = u.delete(); } catch (org.eclipse.jgit.errors.LockFailedException e) { result = RefUpdate.Result.LOCK_FAILURE; } catch (java.io.IOException e) { com.google.gerrit.server.project.DeleteBranch.log.error(("Cannot delete " + (rsrc.getBranchKey())), e); throw e; } if ((result == (RefUpdate.Result.LOCK_FAILURE)) && ((--remainingLockFailureCalls) > 0)) { try { java.lang.Thread.sleep(com.google.gerrit.server.project.DeleteBranch.SLEEP_ON_LOCK_FAILURE_MS); } catch (java.lang.InterruptedException ie) { } } else { break; } } switch (result) { case NEW : case NO_CHANGE : case FAST_FORWARD : case FORCED : referenceUpdated.fire(rsrc.getNameKey(), u, ReceiveCommand.Type.DELETE, identifiedUser.get().getAccount()); break; case REJECTED_CURRENT_BRANCH : com.google.gerrit.server.project.DeleteBranch.log.error(((("Cannot delete " + (rsrc.getBranchKey())) + ": ") + (result.name()))); throw new com.google.gerrit.extensions.restapi.ResourceConflictException("cannot delete current branch"); case IO_FAILURE : case LOCK_FAILURE : case NOT_ATTEMPTED : case REJECTED : case RENAMED : default : com.google.gerrit.server.project.DeleteBranch.log.error(((("Cannot delete " + (rsrc.getBranchKey())) + ": ") + (result.name()))); throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("cannot delete branch: " + (result.name()))); } } return com.google.gerrit.extensions.restapi.Response.none(); }
private void update(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.account.AuthRequest who, com.google.gerrit.reviewdb.client.AccountExternalId extId) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = userFactory.create(extId.getAccountId()); com.google.gerrit.reviewdb.client.Account toUpdate = null; java.lang.String newEmail = who.getEmailAddress(); java.lang.String oldEmail = extId.getEmailAddress(); if ((newEmail != null) && (!(newEmail.equals(oldEmail)))) { if ((oldEmail != null) && (oldEmail.equals(user.getAccount().getPreferredEmail()))) { toUpdate = load(toUpdate, user.getAccountId(), db); toUpdate.setPreferredEmail(newEmail); } extId.setEmailAddress(newEmail); db.accountExternalIds().update(java.util.Collections.singleton(extId)); } if ((!(realm.allowsEdit(Account.FieldName.FULL_NAME))) && (!(com.google.gerrit.server.account.AccountManager.eq(user.getAccount().getFullName(), who.getDisplayName())))) { toUpdate = load(toUpdate, user.getAccountId(), db); toUpdate.setFullName(who.getDisplayName()); } if ((!(realm.allowsEdit(Account.FieldName.USER_NAME))) && (!(com.google.gerrit.server.account.AccountManager.eq(user.getUserName(), who.getUserName())))) { changeUserNameFactory.create(db, user, who.getUserName()); } if (toUpdate != null) { db.accounts().update(java.util.Collections.singleton(toUpdate)); } if ((newEmail != null) && (!(newEmail.equals(oldEmail)))) { byEmailCache.evict(oldEmail); byEmailCache.evict(newEmail); } if (toUpdate != null) { byIdCache.evict(toUpdate.getId()); } }
private java.lang.String getLine(com.google.gerrit.server.patch.PatchFile fileInfo, short side, int lineNbr) { try { return fileInfo.getLine(side, lineNbr); } catch (java.io.IOException err) { com.google.gerrit.server.mail.send.CommentSender.log.warn(java.lang.String.format("Failed to read file on side %d", side), err); return ""; } catch (java.lang.IndexOutOfBoundsException err) { com.google.gerrit.server.mail.send.CommentSender.log.debug(java.lang.String.format("Failed to get line number of file on side %d", side), err); return ""; } catch (com.google.gerrit.common.errors.NoSuchEntityException err) { com.google.gerrit.server.mail.send.CommentSender.log.warn(java.lang.String.format("Side %d of file didn't exist", side), err); return ""; } }

public boolean canSee(com.google.gerrit.reviewdb.Account.Id id) { return isOwner(); }

@java.lang.Override public com.google.gerrit.reviewdb.client.StarredChange parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); try { user.asyncStarredChanges(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); if (user.getStarredChanges().contains(change.getChange().getId())) { return new com.google.gerrit.server.account.AccountResource.StarredChange(user, change); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } finally { user.abortStarredChanges(); } }
private void evictCache(com.google.common.cache.Cache<?, ?> cache, java.lang.String cacheName, java.lang.Object key) { if (Constants.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); } else { cache.invalidate(key); } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug("Invalidated {}", cacheName); }

@java.lang.Override public com.googlesource.gerrit.plugins.lfs.LfsConfigInfo apply(com.google.gerrit.server.project.ProjectResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { com.googlesource.gerrit.plugins.lfs.LfsConfigInfo info = new com.googlesource.gerrit.plugins.lfs.LfsConfigInfo(); com.googlesource.gerrit.plugins.lfs.LfsConfigSection config = lfsConfig.getForProject(resource.getNameKey()); if (config != null) { info.enabled = config.isEnabled(); info.maxObjectSize = config.getMaxObjectSize(); } return info; }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.WORK_IN_PROGRESS; if (ui.yesno(false, "Migrate draft changes to private changes (default is work-in-progress)?")) { strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE; } ui.message(java.lang.String.format("Replace draft changes with %s changes ...", strategy.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE)) ? "is_private" : "work_in_progress"; e.execute(java.lang.String.format(("UPDATE changes SET %s = 'Y', created_on = created_on WHERE status = 'd' OR " + ("EXISTS (SELECT * FROM patch_sets WHERE " + "patch_sets.change_id = changes.change_id AND patch_sets.draft = 'Y')")), column)); e.execute("UPDATE changes SET status = 'n', created_on = created_on WHERE status = 'd'"); } ui.message("done"); }
@java.lang.Override public java.util.Collection<com.google.gerrit.common.data.GroupReference> suggest(java.lang.String name) { java.util.Set<com.google.gerrit.common.data.GroupReference> groups = com.google.common.collect.Sets.newTreeSet(com.google.gerrit.server.account.GroupBackends.GROUP_REF_NAME_COMPARATOR); for (com.google.gerrit.server.account.GroupBackend g : backends) { groups.addAll(g.suggest(name)); } return groups; }
public static byte[] asByteArray(org.eclipse.jgit.lib.ObjectLoader ldr) throws java.io.IOException, org.eclipse.jgit.errors.LargeObjectException, org.eclipse.jgit.errors.MissingObjectException { return ldr.getCachedBytes(com.google.gerrit.server.patch.Text.bigFileThreshold); }
private static com.google.gerrit.server.patch.PatchListEntry createPatchListEntry(org.eclipse.jgit.diff.RawTextComparator cmp, org.eclipse.jgit.revwalk.RevCommit aCommit, com.google.gerrit.server.patch.Text aText, com.google.gerrit.server.patch.Text bText, java.lang.String fileName) { byte[] rawHdr = com.google.gerrit.server.patch.PatchListLoader.getRawHeader((aCommit != null), fileName); byte[] aContent = aText.getContent(); byte[] bContent = bText.getContent(); long size = bContent.length; long sizeDelta = (bContent.length) - (aContent.length); org.eclipse.jgit.diff.RawText aRawText = new org.eclipse.jgit.diff.RawText(aContent); org.eclipse.jgit.diff.RawText bRawText = new org.eclipse.jgit.diff.RawText(bContent); org.eclipse.jgit.diff.EditList edits = new org.eclipse.jgit.diff.HistogramDiff().diff(cmp, aRawText, bRawText); org.eclipse.jgit.patch.FileHeader fh = new org.eclipse.jgit.patch.FileHeader(rawHdr, edits, org.eclipse.jgit.patch.FileHeader.PatchType.UNIFIED); return new com.google.gerrit.server.patch.PatchListEntry(fh, edits, com.google.common.collect.ImmutableSet.of(), size, sizeDelta); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.RobotCommentResource>> views() { return views; }

public void testInsertManyPeopleByTransaction() throws java.lang.Exception { final com.google.gwtorm.data.PhoneBookDb schema = openAndCreate(); final com.google.gwtorm.client.Transaction txn = schema.beginTransaction(); final java.util.ArrayList<com.google.gwtorm.data.TestPerson> all = new java.util.ArrayList<com.google.gwtorm.data.TestPerson>(); all.add(new com.google.gwtorm.data.TestPerson(new com.google.gwtorm.data.TestPerson.Key("Bob"), 18)); all.add(new com.google.gwtorm.data.TestPerson(new com.google.gwtorm.data.TestPerson.Key("Mary"), 22)); all.add(new com.google.gwtorm.data.TestPerson(new com.google.gwtorm.data.TestPerson.Key("Zak"), 33)); schema.people().insert(all, txn); final java.sql.Statement st = statement(schema); java.sql.ResultSet rs; rs = st.executeQuery("SELECT name,age FROM people ORDER BY name"); assertFalse(rs.next()); rs.close(); txn.commit(); rs = st.executeQuery("SELECT name,age FROM people ORDER BY name"); for (int rowIdx = 0; rowIdx < (all.size()); rowIdx++) { assertTrue(rs.next()); assertEquals(all.get(rowIdx).name(), rs.getString(1)); assertEquals(all.get(rowIdx).age(), rs.getInt(2)); } assertFalse(rs.next()); rs.close(); st.close(); }

@java.lang.Override public java.lang.String process() { return com.googlesource.gerrit.plugins.webhooks.processors.JenkinsEventProcessor.GSON.toJson(event); }
private boolean canCompleteImport(com.google.gerrit.server.project.ProjectResource rsrc) { com.google.gerrit.server.account.CapabilityControl ctl = currentUserProvider.get().getCapabilities(); return (ctl.canAdministrateServer()) || ((ctl.canPerform((((pluginName) + "-") + (ImportCapability.ID)))) && (rsrc.getControl().isOwner())); }
@java.lang.Override protected com.google.gerrit.server.git.MergeTip _run(com.google.gerrit.server.git.CodeReviewCommit branchTip, java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.MergeException { java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sorted = args.mergeUtil.reduceToMinimalMerge(args.mergeSorter, toMerge); com.google.gerrit.server.git.MergeTip mergeTip; if (branchTip == null) { mergeTip = new com.google.gerrit.server.git.MergeTip(sorted.get(0), toMerge); sorted.remove(0); } else { mergeTip = new com.google.gerrit.server.git.MergeTip(branchTip, toMerge); } while (!(sorted.isEmpty())) { com.google.gerrit.server.git.CodeReviewCommit mergedFrom = sorted.remove(0); org.eclipse.jgit.lib.PersonIdent serverIdent = args.serverIdent.get(); org.eclipse.jgit.lib.PersonIdent caller = args.caller.newCommitterIdent(serverIdent.getWhen(), serverIdent.getTimeZone()); com.google.gerrit.server.git.CodeReviewCommit newTip = args.mergeUtil.mergeOneCommit(caller, serverIdent, args.repo, args.rw, args.inserter, args.canMergeFlag, args.destBranch, mergeTip.getCurrentTip(), mergedFrom); mergeTip.moveTipTo(newTip, mergedFrom); } args.mergeUtil.markCleanMerges(args.rw, args.canMergeFlag, mergeTip.getCurrentTip(), args.alreadyAccepted); setRefLogIdent(); return mergeTip; }
@java.lang.Override public boolean updateChange(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException { user = ctx.getIdentifiedUser(); notes = ctx.getNotes(); ps = psUtil.get(ctx.getDb(), ctx.getNotes(), psId); boolean dirty = false; dirty |= insertComments(ctx); dirty |= insertRobotComments(ctx); dirty |= updateLabels(ctx); dirty |= insertMessage(ctx); return dirty; }

@org.junit.Test public void testKeywords() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommit(); com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator validator = new com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator(null, new com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE), com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE, null, null, null); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = validator.performValidation(repo, c, com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidatorTest.getPatterns().values(), com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG); java.util.Set<java.lang.String> expected = com.google.common.collect.ImmutableSet.of(("ERROR: blocked keyword(s) found in: foo.txt (Line: 1)" + " (found: myp4ssw0rd, foobar)"), ("ERROR: blocked keyword(s) found in: bar.txt (Line: 5)" + " (found: $Id: foo bar$)"), (("ERROR: blocked keyword(s) found in: " + (com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG)) + " (Line: 1) (found: foobar)")); assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); }
private boolean canPerform(com.google.gerrit.reviewdb.ApprovalCategory.Id actionId, short level) { final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> groups = getCurrentUser().getEffectiveGroups(); int val = java.lang.Integer.MIN_VALUE; for (final com.google.gerrit.reviewdb.RefRight right : getLocalRights()) { if ((right.getApprovalCategoryId().equals(actionId)) && (groups.contains(right.getAccountGroupId()))) { if ((val < 0) && ((right.getMaxValue()) > 0)) { val = right.getMaxValue(); } else { val = java.lang.Math.max(right.getMaxValue(), val); } } } if ((val == (java.lang.Integer.MIN_VALUE)) && (actionId.canInheritFromWildProject())) { for (final com.google.gerrit.reviewdb.RefRight pr : getInheritedRights()) { if ((actionId.equals(pr.getApprovalCategoryId())) && (groups.contains(pr.getAccountGroupId()))) { val = java.lang.Math.max(pr.getMaxValue(), val); } } } return val >= level; }




@org.junit.Test public void createGroupAsServerIdent() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroup(1, "test-group", serverIdent, null); assertThat(auditLogReader.getMembersAudit(allUsersRepo, group.getGroupUUID())).hasSize(0); }
@java.lang.Override public boolean cancel(boolean mayInterruptIfRunning) { if (task.cancel(mayInterruptIfRunning)) { if (((runnable) instanceof com.google.gerrit.server.git.WorkQueue.CancelableRunnable) && (running.compareAndSet(false, true))) { ((com.google.gerrit.server.git.WorkQueue.CancelableRunnable) (runnable)).cancel(); } executor.remove(this); executor.purge(); return true; } else { return false; } }
private static com.google.gerrit.server.change.ChangeJson.GitPerson toGitPerson(com.google.gerrit.reviewdb.client.UserIdentity committer) { com.google.gerrit.server.change.ChangeJson.GitPerson p = new com.google.gerrit.server.change.ChangeJson.GitPerson(); p.name = committer.getName(); p.email = committer.getEmail(); p.date = committer.getDate(); p.tz = committer.getTimeZone(); return p; }
public void index(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException, java.io.IOException { index(newChangeData(db, project, changeId)); }


public com.google.gerrit.reviewdb.client.Patch.PatchType getPatchType() { return com.google.gerrit.reviewdb.client.Patch.PatchType.forCode(patchType); }
private com.google.gerrit.reviewdb.client.ChangeMessage newMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append("Abandoned"); if (!(com.google.common.base.Strings.nullToEmpty(msgTxt).trim().isEmpty())) { msg.append("\n\n"); msg.append(msgTxt.trim()); } return com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx, msg.toString()); }


public void evictAfterRename(final com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName, final com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName) { byName.remove(oldName); updateGroupList(oldName, newName); }
public final com.google.gerrit.server.git.MergeTip run(final com.google.gerrit.server.git.CodeReviewCommit currentTip, final java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.MergeException { refLogIdent = null; checkState(((args.caller) != null)); return _run(currentTip, toMerge); }

private static com.google.common.base.Optional<org.eclipse.jgit.lib.ObjectId> getStart(com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> params, org.eclipse.jgit.lib.ObjectReader reader) throws java.io.IOException { java.util.List<java.lang.String> values = params.get(com.google.gitiles.LogServlet.START_PARAM); switch (values.size()) { case 0 : return com.google.common.base.Optional.absent(); case 1 : java.lang.String id = values.get(0); if (!(org.eclipse.jgit.lib.AbbreviatedObjectId.isId(id))) { return null; } java.util.Collection<org.eclipse.jgit.lib.ObjectId> ids = reader.resolve(org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(id)); if ((ids.size()) != 1) { return null; } return com.google.common.base.Optional.of(com.google.common.collect.Iterables.getOnlyElement(ids)); default : return null; } }
java.lang.String image(java.lang.String dest) { if ((com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(dest)) || (com.google.gitiles.doc.html.HtmlBuilder.isImageDataUri(dest))) { return dest; } else if ((imageLoader) != null) { return imageLoader.inline(filePath, dest); } return FilterImageDataUri.INSTANCE.getInnocuousOutput(); }
@java.lang.Override public int run() throws java.lang.Exception { mustHaveValidSite(); dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); globalConfig = dbInjector.getInstance(com.google.inject.Key.get(org.eclipse.jgit.lib.Config.class, com.google.gerrit.server.config.GerritServerConfig.class)); threads = com.google.gerrit.pgm.util.ThreadLimiter.limitThreads(dbInjector, threads); checkNotSlaveMode(); disableLuceneAutomaticCommit(); disableChangeCache(); com.google.gerrit.lifecycle.LifecycleManager dbManager = new com.google.gerrit.lifecycle.LifecycleManager(); dbManager.add(dbInjector); dbManager.start(); sysInjector = createSysInjector(); com.google.gerrit.lifecycle.LifecycleManager sysManager = new com.google.gerrit.lifecycle.LifecycleManager(); sysManager.add(sysInjector); sysManager.start(); sysInjector.injectMembers(this); try { boolean ok = true; for (com.google.gerrit.server.index.IndexDefinition<?, ?, ?> def : indexDefs) { if (listIndices) { java.lang.System.out.format("%s\n", def.getName()); } else { ok &= reindex(def); } } return ok ? 0 : 1; } catch (java.lang.Exception e) { throw die(e.getMessage(), e); } finally { sysManager.stop(); dbManager.stop(); } }

public java.lang.String[] currentFilePaths(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db, com.google.gerrit.server.patch.PatchListCache cache) throws com.google.gwtorm.server.OrmException { if ((currentFiles) == null) { com.google.gerrit.reviewdb.client.Change c = change(db); if (c == null) { return null; } com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(db); if (ps == null) { return null; } com.google.gerrit.server.patch.PatchList p; try { p = cache.get(c, ps); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { currentFiles = new java.lang.String[0]; return currentFiles; } java.util.List<java.lang.String> r = new java.util.ArrayList<java.lang.String>(p.getPatches().size()); for (com.google.gerrit.server.patch.PatchListEntry e : p.getPatches()) { if (Patch.COMMIT_MSG.equals(e.getNewName())) { continue; } switch (e.getChangeType()) { case ADDED : case MODIFIED : case DELETED : case COPIED : r.add(e.getNewName()); break; case RENAMED : r.add(e.getOldName()); r.add(e.getNewName()); break; case REWRITE : break; } } currentFiles = r.toArray(new java.lang.String[r.size()]); java.util.Arrays.sort(currentFiles); } return currentFiles; }